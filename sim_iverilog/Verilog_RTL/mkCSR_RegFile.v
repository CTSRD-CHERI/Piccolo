//
// Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
//
// On Sat Jun 30 14:38:56 EDT 2018
//
//
// Ports:
// Name                         I/O  size props
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1
// read_csr                       O    33
// read_csr_port2                 O    33
// mav_read_csr                   O    33
// read_satp                      O    32 const
// read_mstatus                   O    32
// read_sstatus                   O    32
// csr_trap_actions               O    98
// RDY_csr_trap_actions           O     1 const
// csr_ret_actions                O    66
// RDY_csr_ret_actions            O     1 const
// read_csr_minstret              O    64 reg
// read_csr_mcycle                O    64 reg
// read_csr_mtime                 O    64 reg
// read_csr_mcounteren            O     3 reg
// RDY_timer_interrupt_req        O     1 reg
// interrupt_pending              O     5
// wfi_resume                     O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// read_csr_csr_addr              I    12
// read_csr_port2_csr_addr        I    12
// mav_read_csr_csr_addr          I    12
// write_csr_csr_addr             I    12
// write_csr_word                 I    32
// csr_trap_actions_from_priv     I     2
// csr_trap_actions_pc            I    32
// csr_trap_actions_interrupt     I     1
// csr_trap_actions_exc_code      I     4
// csr_trap_actions_xtval         I    32
// csr_ret_actions_from_priv      I     2
// timer_interrupt_req_set_not_clear  I     1 reg
// interrupt_pending_cur_priv     I     2
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_write_csr                   I     1
// EN_csr_minstret_incr           I     1
// EN_external_interrupt_req      I     1
// EN_timer_interrupt_req         I     1
// EN_software_interrupt_req      I     1
// EN_mav_read_csr                I     1 unused
// EN_csr_trap_actions            I     1
// EN_csr_ret_actions             I     1
//
// Combinational paths from inputs to outputs:
//   read_csr_csr_addr -> read_csr
//   read_csr_port2_csr_addr -> read_csr_port2
//   interrupt_pending_cur_priv -> interrupt_pending
//   mav_read_csr_csr_addr -> mav_read_csr
//   (csr_trap_actions_from_priv,
//    csr_trap_actions_interrupt,
//    csr_trap_actions_exc_code) -> csr_trap_actions
//   csr_ret_actions_from_priv -> csr_ret_actions
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCSR_RegFile(CLK,
		     RST_N,

		     EN_server_reset_request_put,
		     RDY_server_reset_request_put,

		     EN_server_reset_response_get,
		     RDY_server_reset_response_get,

		     read_csr_csr_addr,
		     read_csr,

		     read_csr_port2_csr_addr,
		     read_csr_port2,

		     mav_read_csr_csr_addr,
		     EN_mav_read_csr,
		     mav_read_csr,

		     write_csr_csr_addr,
		     write_csr_word,
		     EN_write_csr,

		     read_satp,

		     read_mstatus,

		     read_sstatus,

		     csr_trap_actions_from_priv,
		     csr_trap_actions_pc,
		     csr_trap_actions_interrupt,
		     csr_trap_actions_exc_code,
		     csr_trap_actions_xtval,
		     EN_csr_trap_actions,
		     csr_trap_actions,
		     RDY_csr_trap_actions,

		     csr_ret_actions_from_priv,
		     EN_csr_ret_actions,
		     csr_ret_actions,
		     RDY_csr_ret_actions,

		     read_csr_minstret,

		     EN_csr_minstret_incr,

		     read_csr_mcycle,

		     read_csr_mtime,

		     read_csr_mcounteren,

		     EN_external_interrupt_req,

		     timer_interrupt_req_set_not_clear,
		     EN_timer_interrupt_req,
		     RDY_timer_interrupt_req,

		     EN_software_interrupt_req,

		     interrupt_pending_cur_priv,
		     interrupt_pending,

		     wfi_resume);
  input  CLK;
  input  RST_N;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // value method read_csr
  input  [11 : 0] read_csr_csr_addr;
  output [32 : 0] read_csr;

  // value method read_csr_port2
  input  [11 : 0] read_csr_port2_csr_addr;
  output [32 : 0] read_csr_port2;

  // actionvalue method mav_read_csr
  input  [11 : 0] mav_read_csr_csr_addr;
  input  EN_mav_read_csr;
  output [32 : 0] mav_read_csr;

  // action method write_csr
  input  [11 : 0] write_csr_csr_addr;
  input  [31 : 0] write_csr_word;
  input  EN_write_csr;

  // value method read_satp
  output [31 : 0] read_satp;

  // value method read_mstatus
  output [31 : 0] read_mstatus;

  // value method read_sstatus
  output [31 : 0] read_sstatus;

  // actionvalue method csr_trap_actions
  input  [1 : 0] csr_trap_actions_from_priv;
  input  [31 : 0] csr_trap_actions_pc;
  input  csr_trap_actions_interrupt;
  input  [3 : 0] csr_trap_actions_exc_code;
  input  [31 : 0] csr_trap_actions_xtval;
  input  EN_csr_trap_actions;
  output [97 : 0] csr_trap_actions;
  output RDY_csr_trap_actions;

  // actionvalue method csr_ret_actions
  input  [1 : 0] csr_ret_actions_from_priv;
  input  EN_csr_ret_actions;
  output [65 : 0] csr_ret_actions;
  output RDY_csr_ret_actions;

  // value method read_csr_minstret
  output [63 : 0] read_csr_minstret;

  // action method csr_minstret_incr
  input  EN_csr_minstret_incr;

  // value method read_csr_mcycle
  output [63 : 0] read_csr_mcycle;

  // value method read_csr_mtime
  output [63 : 0] read_csr_mtime;

  // value method read_csr_mcounteren
  output [2 : 0] read_csr_mcounteren;

  // action method external_interrupt_req
  input  EN_external_interrupt_req;

  // action method timer_interrupt_req
  input  timer_interrupt_req_set_not_clear;
  input  EN_timer_interrupt_req;
  output RDY_timer_interrupt_req;

  // action method software_interrupt_req
  input  EN_software_interrupt_req;

  // value method interrupt_pending
  input  [1 : 0] interrupt_pending_cur_priv;
  output [4 : 0] interrupt_pending;

  // value method wfi_resume
  output wfi_resume;

  // signals for module outputs
  wire [97 : 0] csr_trap_actions;
  wire [65 : 0] csr_ret_actions;
  wire [63 : 0] read_csr_mcycle, read_csr_minstret, read_csr_mtime;
  wire [32 : 0] mav_read_csr, read_csr, read_csr_port2;
  wire [31 : 0] read_mstatus, read_satp, read_sstatus;
  wire [4 : 0] interrupt_pending;
  wire [2 : 0] read_csr_mcounteren;
  wire RDY_csr_ret_actions,
       RDY_csr_trap_actions,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_timer_interrupt_req,
       wfi_resume;

  // register cfg_verbosity
  reg [3 : 0] cfg_verbosity;
  wire [3 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register rg_dcsr
  reg [31 : 0] rg_dcsr;
  wire [31 : 0] rg_dcsr$D_IN;
  wire rg_dcsr$EN;

  // register rg_dpc
  reg [31 : 0] rg_dpc;
  wire [31 : 0] rg_dpc$D_IN;
  wire rg_dpc$EN;

  // register rg_dscratch0
  reg [31 : 0] rg_dscratch0;
  wire [31 : 0] rg_dscratch0$D_IN;
  wire rg_dscratch0$EN;

  // register rg_dscratch1
  reg [31 : 0] rg_dscratch1;
  wire [31 : 0] rg_dscratch1$D_IN;
  wire rg_dscratch1$EN;

  // register rg_ei_requested
  reg rg_ei_requested;
  reg rg_ei_requested$D_IN;
  wire rg_ei_requested$EN;

  // register rg_mcause
  reg [4 : 0] rg_mcause;
  reg [4 : 0] rg_mcause$D_IN;
  wire rg_mcause$EN;

  // register rg_mcounteren
  reg [2 : 0] rg_mcounteren;
  wire [2 : 0] rg_mcounteren$D_IN;
  wire rg_mcounteren$EN;

  // register rg_mcycle
  reg [63 : 0] rg_mcycle;
  wire [63 : 0] rg_mcycle$D_IN;
  wire rg_mcycle$EN;

  // register rg_mepc
  reg [31 : 0] rg_mepc;
  wire [31 : 0] rg_mepc$D_IN;
  wire rg_mepc$EN;

  // register rg_mie
  reg [11 : 0] rg_mie;
  wire [11 : 0] rg_mie$D_IN;
  wire rg_mie$EN;

  // register rg_minstret
  reg [63 : 0] rg_minstret;
  wire [63 : 0] rg_minstret$D_IN;
  wire rg_minstret$EN;

  // register rg_mip
  reg [11 : 0] rg_mip;
  reg [11 : 0] rg_mip$D_IN;
  wire rg_mip$EN;

  // register rg_mscratch
  reg [31 : 0] rg_mscratch;
  wire [31 : 0] rg_mscratch$D_IN;
  wire rg_mscratch$EN;

  // register rg_mstatus
  reg [22 : 0] rg_mstatus;
  reg [22 : 0] rg_mstatus$D_IN;
  wire rg_mstatus$EN;

  // register rg_mtval
  reg [31 : 0] rg_mtval;
  wire [31 : 0] rg_mtval$D_IN;
  wire rg_mtval$EN;

  // register rg_mtvec
  reg [30 : 0] rg_mtvec;
  wire [30 : 0] rg_mtvec$D_IN;
  wire rg_mtvec$EN;

  // register rg_si_requested
  reg rg_si_requested;
  reg rg_si_requested$D_IN;
  wire rg_si_requested$EN;

  // register rg_state
  reg rg_state;
  wire rg_state$D_IN, rg_state$EN;

  // register rg_tdata1
  reg [31 : 0] rg_tdata1;
  wire [31 : 0] rg_tdata1$D_IN;
  wire rg_tdata1$EN;

  // register rg_tdata2
  reg [31 : 0] rg_tdata2;
  wire [31 : 0] rg_tdata2$D_IN;
  wire rg_tdata2$EN;

  // register rg_tdata3
  reg [31 : 0] rg_tdata3;
  wire [31 : 0] rg_tdata3$D_IN;
  wire rg_tdata3$EN;

  // register rg_tselect
  reg [31 : 0] rg_tselect;
  wire [31 : 0] rg_tselect$D_IN;
  wire rg_tselect$EN;

  // register rg_watch_n
  reg [31 : 0] rg_watch_n;
  wire [31 : 0] rg_watch_n$D_IN;
  wire rg_watch_n$EN;

  // register rg_watchpoint1
  reg [31 : 0] rg_watchpoint1;
  wire [31 : 0] rg_watchpoint1$D_IN;
  wire rg_watchpoint1$EN;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule f_ti_reqs
  wire f_ti_reqs$CLR,
       f_ti_reqs$DEQ,
       f_ti_reqs$D_IN,
       f_ti_reqs$D_OUT,
       f_ti_reqs$EMPTY_N,
       f_ti_reqs$ENQ,
       f_ti_reqs$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_mcycle_incr,
       CAN_FIRE_RL_rl_record_external_interrupt,
       CAN_FIRE_RL_rl_record_software_interrupt,
       CAN_FIRE_RL_rl_record_timer_interrupt_req,
       CAN_FIRE_RL_rl_reset_start,
       CAN_FIRE_RL_rl_upd_minstret_csrrx,
       CAN_FIRE_RL_rl_upd_minstret_incr,
       CAN_FIRE_csr_minstret_incr,
       CAN_FIRE_csr_ret_actions,
       CAN_FIRE_csr_trap_actions,
       CAN_FIRE_external_interrupt_req,
       CAN_FIRE_mav_read_csr,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_software_interrupt_req,
       CAN_FIRE_timer_interrupt_req,
       CAN_FIRE_write_csr,
       WILL_FIRE_RL_rl_mcycle_incr,
       WILL_FIRE_RL_rl_record_external_interrupt,
       WILL_FIRE_RL_rl_record_software_interrupt,
       WILL_FIRE_RL_rl_record_timer_interrupt_req,
       WILL_FIRE_RL_rl_reset_start,
       WILL_FIRE_RL_rl_upd_minstret_csrrx,
       WILL_FIRE_RL_rl_upd_minstret_incr,
       WILL_FIRE_csr_minstret_incr,
       WILL_FIRE_csr_ret_actions,
       WILL_FIRE_csr_trap_actions,
       WILL_FIRE_external_interrupt_req,
       WILL_FIRE_mav_read_csr,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_software_interrupt_req,
       WILL_FIRE_timer_interrupt_req,
       WILL_FIRE_write_csr;

  // inputs to muxes for submodule ports
  wire [63 : 0] MUX_rg_minstret$write_1__VAL_1,
		MUX_rg_minstret$write_1__VAL_2,
		MUX_rw_minstret$wset_1__VAL_1;
  wire [30 : 0] MUX_rg_mtvec$write_1__VAL_1;
  wire [22 : 0] MUX_rg_mstatus$write_1__VAL_2,
		MUX_rg_mstatus$write_1__VAL_3,
		MUX_rg_mstatus$write_1__VAL_4;
  wire [11 : 0] MUX_rg_mie$write_1__VAL_1,
		MUX_rg_mip$write_1__VAL_2,
		MUX_rg_mip$write_1__VAL_3,
		MUX_rg_mip$write_1__VAL_4;
  wire [4 : 0] MUX_rg_mcause$write_1__VAL_2, MUX_rg_mcause$write_1__VAL_3;
  wire MUX_rg_mcause$write_1__SEL_2,
       MUX_rg_mcounteren$write_1__SEL_1,
       MUX_rg_mepc$write_1__SEL_1,
       MUX_rg_mie$write_1__SEL_1,
       MUX_rg_mip$write_1__SEL_5,
       MUX_rg_mstatus$write_1__SEL_2,
       MUX_rg_mtval$write_1__SEL_1,
       MUX_rg_mtvec$write_1__SEL_1,
       MUX_rw_minstret$wset_1__SEL_1;

  // remaining internal signals
  reg [31 : 0] IF_mav_read_csr_csr_addr_EQ_0xC00_66_OR_mav_re_ETC___d512,
	       IF_read_csr_csr_addr_EQ_0xC00_1_OR_read_csr_cs_ETC___d216,
	       IF_read_csr_port2_csr_addr_EQ_0xC00_18_OR_read_ETC___d364,
	       v__h13525,
	       v__h13531,
	       v__h17676,
	       v__h17682,
	       v__h35304,
	       v__h35310,
	       v__h35796,
	       v__h35802,
	       v__h41166,
	       v__h41172,
	       v__h41261,
	       v__h41267,
	       v__h8756,
	       v__h8762;
  reg n__h40774;
  wire [63 : 0] x__h34940, x__h35020;
  wire [31 : 0] exc_pc___1__h39561,
		exc_pc__h39508,
		new_mip__h16593,
		new_mip__h7115,
		new_mip_w__h13502,
		old_mip_w__h13501,
		vector_offset__h39509,
		x__h35745,
		x__h39943,
		x__h40078,
		x__h40955;
  wire [3 : 0] IF_NOT_rg_mip_3_BIT_11_50_97_OR_NOT_rg_mie_3_B_ETC___d1043,
	       IF_NOT_rg_mip_3_BIT_11_50_97_OR_NOT_rg_mie_3_B_ETC___d1045,
	       IF_NOT_rg_mip_3_BIT_11_50_97_OR_NOT_rg_mie_3_B_ETC___d1047,
	       IF_NOT_rg_mip_3_BIT_11_50_97_OR_NOT_rg_mie_3_B_ETC___d1049;
  wire [1 : 0] x__h29709, x__h40213, x__h40215, x__h40952;
  wire IF_csr_ret_actions_from_priv_EQ_0b0_23_THEN_SE_ETC___d933,
       IF_csr_ret_actions_from_priv_EQ_0b10_17_THEN_S_ETC___d930,
       IF_csr_ret_actions_from_priv_EQ_0b11_11_THEN_S_ETC___d928,
       IF_csr_ret_actions_from_priv_EQ_0b1_21_THEN_SE_ETC___d932,
       NOT_cfg_verbosity_read__6_ULE_1_7_8_AND_NOT_cs_ETC___d904,
       NOT_cfg_verbosity_read__6_ULE_1_7_8_AND_csr_tr_ETC___d855,
       NOT_cfg_verbosity_read__6_ULE_1_7___d18,
       NOT_rg_mip_3_BIT_11_50_97_OR_NOT_rg_mie_3_BIT__ETC___d1007,
       NOT_rg_mip_3_BIT_11_50_97_OR_NOT_rg_mie_3_BIT__ETC___d1012,
       NOT_rg_mip_3_BIT_11_50_97_OR_NOT_rg_mie_3_BIT__ETC___d1017,
       NOT_rg_mip_3_BIT_11_50_97_OR_NOT_rg_mie_3_BIT__ETC___d1022,
       NOT_rg_mip_3_BIT_11_50_97_OR_NOT_rg_mie_3_BIT__ETC___d1027,
       NOT_rg_mip_3_BIT_11_50_97_OR_NOT_rg_mie_3_BIT__ETC___d1032,
       NOT_rg_mip_3_BIT_11_50_97_OR_NOT_rg_mie_3_BIT__ETC___d1037,
       rg_mip_3_BIT_11_50_AND_rg_mie_3_BIT_11_51_52_A_ETC___d961,
       rg_mip_3_BIT_11_50_AND_rg_mie_3_BIT_11_51_52_A_ETC___d966,
       rg_mip_3_BIT_11_50_AND_rg_mie_3_BIT_11_51_52_A_ETC___d971,
       rg_mip_3_BIT_11_50_AND_rg_mie_3_BIT_11_51_52_A_ETC___d976,
       rg_mip_3_BIT_11_50_AND_rg_mie_3_BIT_11_51_52_A_ETC___d981,
       rg_mip_3_BIT_11_50_AND_rg_mie_3_BIT_11_51_52_A_ETC___d986,
       rg_mip_3_BIT_11_50_AND_rg_mie_3_BIT_11_51_52_A_ETC___d991,
       rg_mip_3_BIT_11_50_AND_rg_mie_3_BIT_11_51_52_A_ETC___d996;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = f_reset_rsps$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = f_reset_rsps$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get = rg_state && f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get =
	     rg_state && f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // value method read_csr
  assign read_csr =
	     { read_csr_csr_addr == 12'hC00 || read_csr_csr_addr == 12'hC01 ||
	       read_csr_csr_addr == 12'hC02 ||
	       read_csr_csr_addr == 12'hC80 ||
	       read_csr_csr_addr == 12'hC81 ||
	       read_csr_csr_addr == 12'hC82 ||
	       read_csr_csr_addr == 12'hF11 ||
	       read_csr_csr_addr == 12'hF12 ||
	       read_csr_csr_addr == 12'hF13 ||
	       read_csr_csr_addr == 12'hF14 ||
	       read_csr_csr_addr == 12'h300 ||
	       read_csr_csr_addr == 12'h301 ||
	       read_csr_csr_addr == 12'h304 ||
	       read_csr_csr_addr == 12'h305 ||
	       read_csr_csr_addr == 12'h306 ||
	       read_csr_csr_addr == 12'h340 ||
	       read_csr_csr_addr == 12'h341 ||
	       read_csr_csr_addr == 12'h342 ||
	       read_csr_csr_addr == 12'h343 ||
	       read_csr_csr_addr == 12'h344 ||
	       read_csr_csr_addr == 12'hB00 ||
	       read_csr_csr_addr == 12'hB02 ||
	       read_csr_csr_addr == 12'hB80 ||
	       read_csr_csr_addr == 12'hB82 ||
	       read_csr_csr_addr == 12'h7A0 ||
	       read_csr_csr_addr == 12'h7A1 ||
	       read_csr_csr_addr == 12'h7A2 ||
	       read_csr_csr_addr == 12'h7A3 ||
	       read_csr_csr_addr == 12'hBC0 ||
	       read_csr_csr_addr == 12'hBC1,
	       IF_read_csr_csr_addr_EQ_0xC00_1_OR_read_csr_cs_ETC___d216 } ;

  // value method read_csr_port2
  assign read_csr_port2 =
	     { read_csr_port2_csr_addr == 12'hC00 ||
	       read_csr_port2_csr_addr == 12'hC01 ||
	       read_csr_port2_csr_addr == 12'hC02 ||
	       read_csr_port2_csr_addr == 12'hC80 ||
	       read_csr_port2_csr_addr == 12'hC81 ||
	       read_csr_port2_csr_addr == 12'hC82 ||
	       read_csr_port2_csr_addr == 12'hF11 ||
	       read_csr_port2_csr_addr == 12'hF12 ||
	       read_csr_port2_csr_addr == 12'hF13 ||
	       read_csr_port2_csr_addr == 12'hF14 ||
	       read_csr_port2_csr_addr == 12'h300 ||
	       read_csr_port2_csr_addr == 12'h301 ||
	       read_csr_port2_csr_addr == 12'h304 ||
	       read_csr_port2_csr_addr == 12'h305 ||
	       read_csr_port2_csr_addr == 12'h306 ||
	       read_csr_port2_csr_addr == 12'h340 ||
	       read_csr_port2_csr_addr == 12'h341 ||
	       read_csr_port2_csr_addr == 12'h342 ||
	       read_csr_port2_csr_addr == 12'h343 ||
	       read_csr_port2_csr_addr == 12'h344 ||
	       read_csr_port2_csr_addr == 12'hB00 ||
	       read_csr_port2_csr_addr == 12'hB02 ||
	       read_csr_port2_csr_addr == 12'hB80 ||
	       read_csr_port2_csr_addr == 12'hB82 ||
	       read_csr_port2_csr_addr == 12'h7A0 ||
	       read_csr_port2_csr_addr == 12'h7A1 ||
	       read_csr_port2_csr_addr == 12'h7A2 ||
	       read_csr_port2_csr_addr == 12'h7A3 ||
	       read_csr_port2_csr_addr == 12'hBC0 ||
	       read_csr_port2_csr_addr == 12'hBC1,
	       IF_read_csr_port2_csr_addr_EQ_0xC00_18_OR_read_ETC___d364 } ;

  // actionvalue method mav_read_csr
  assign mav_read_csr =
	     { mav_read_csr_csr_addr == 12'hC00 ||
	       mav_read_csr_csr_addr == 12'hC01 ||
	       mav_read_csr_csr_addr == 12'hC02 ||
	       mav_read_csr_csr_addr == 12'hC80 ||
	       mav_read_csr_csr_addr == 12'hC81 ||
	       mav_read_csr_csr_addr == 12'hC82 ||
	       mav_read_csr_csr_addr == 12'hF11 ||
	       mav_read_csr_csr_addr == 12'hF12 ||
	       mav_read_csr_csr_addr == 12'hF13 ||
	       mav_read_csr_csr_addr == 12'hF14 ||
	       mav_read_csr_csr_addr == 12'h300 ||
	       mav_read_csr_csr_addr == 12'h301 ||
	       mav_read_csr_csr_addr == 12'h304 ||
	       mav_read_csr_csr_addr == 12'h305 ||
	       mav_read_csr_csr_addr == 12'h306 ||
	       mav_read_csr_csr_addr == 12'h340 ||
	       mav_read_csr_csr_addr == 12'h341 ||
	       mav_read_csr_csr_addr == 12'h342 ||
	       mav_read_csr_csr_addr == 12'h343 ||
	       mav_read_csr_csr_addr == 12'h344 ||
	       mav_read_csr_csr_addr == 12'hB00 ||
	       mav_read_csr_csr_addr == 12'hB02 ||
	       mav_read_csr_csr_addr == 12'hB80 ||
	       mav_read_csr_csr_addr == 12'hB82 ||
	       mav_read_csr_csr_addr == 12'h7A0 ||
	       mav_read_csr_csr_addr == 12'h7A1 ||
	       mav_read_csr_csr_addr == 12'h7A2 ||
	       mav_read_csr_csr_addr == 12'h7A3 ||
	       mav_read_csr_csr_addr == 12'hBC0 ||
	       mav_read_csr_csr_addr == 12'hBC1,
	       IF_mav_read_csr_csr_addr_EQ_0xC00_66_OR_mav_re_ETC___d512 } ;
  assign CAN_FIRE_mav_read_csr = 1'd1 ;
  assign WILL_FIRE_mav_read_csr = EN_mav_read_csr ;

  // action method write_csr
  assign CAN_FIRE_write_csr = 1'd1 ;
  assign WILL_FIRE_write_csr = EN_write_csr ;

  // value method read_satp
  assign read_satp = 32'hAAAAAAAA ;

  // value method read_mstatus
  assign read_mstatus =
	     { rg_mstatus[22],
	       8'd0,
	       rg_mstatus[21:10],
	       2'b0,
	       rg_mstatus[8:0] } ;

  // value method read_sstatus
  assign read_sstatus =
	     { rg_mstatus[22],
	       11'h0,
	       rg_mstatus[18:17],
	       1'h0,
	       rg_mstatus[15:12],
	       4'h0,
	       rg_mstatus[8],
	       2'h0,
	       rg_mstatus[5:4],
	       2'h0,
	       rg_mstatus[1:0] } ;

  // actionvalue method csr_trap_actions
  assign csr_trap_actions = { x__h35745, x__h39943, x__h40078, 2'b11 } ;
  assign RDY_csr_trap_actions = 1'd1 ;
  assign CAN_FIRE_csr_trap_actions = 1'd1 ;
  assign WILL_FIRE_csr_trap_actions = EN_csr_trap_actions ;

  // actionvalue method csr_ret_actions
  assign csr_ret_actions = { rg_mepc, x__h40952, x__h40955 } ;
  assign RDY_csr_ret_actions = 1'd1 ;
  assign CAN_FIRE_csr_ret_actions = 1'd1 ;
  assign WILL_FIRE_csr_ret_actions = EN_csr_ret_actions ;

  // value method read_csr_minstret
  assign read_csr_minstret = rg_minstret ;

  // action method csr_minstret_incr
  assign CAN_FIRE_csr_minstret_incr = 1'd1 ;
  assign WILL_FIRE_csr_minstret_incr = EN_csr_minstret_incr ;

  // value method read_csr_mcycle
  assign read_csr_mcycle = rg_mcycle ;

  // value method read_csr_mtime
  assign read_csr_mtime = rg_mcycle ;

  // value method read_csr_mcounteren
  assign read_csr_mcounteren = rg_mcounteren ;

  // action method external_interrupt_req
  assign CAN_FIRE_external_interrupt_req = 1'd1 ;
  assign WILL_FIRE_external_interrupt_req = EN_external_interrupt_req ;

  // action method timer_interrupt_req
  assign RDY_timer_interrupt_req = f_ti_reqs$FULL_N ;
  assign CAN_FIRE_timer_interrupt_req = f_ti_reqs$FULL_N ;
  assign WILL_FIRE_timer_interrupt_req = EN_timer_interrupt_req ;

  // action method software_interrupt_req
  assign CAN_FIRE_software_interrupt_req = 1'd1 ;
  assign WILL_FIRE_software_interrupt_req = EN_software_interrupt_req ;

  // value method interrupt_pending
  assign interrupt_pending =
	     { rg_mip_3_BIT_11_50_AND_rg_mie_3_BIT_11_51_52_A_ETC___d996,
	       NOT_rg_mip_3_BIT_11_50_97_OR_NOT_rg_mie_3_BIT__ETC___d1037 ?
		 4'd4 :
		 IF_NOT_rg_mip_3_BIT_11_50_97_OR_NOT_rg_mie_3_B_ETC___d1049 } ;

  // value method wfi_resume
  assign wfi_resume = (rg_mip & rg_mie) != 12'd0 ;

  // submodule f_reset_rsps
  FIFO20 #(.guarded(32'd1)) f_reset_rsps(.RST(RST_N),
					 .CLK(CLK),
					 .ENQ(f_reset_rsps$ENQ),
					 .DEQ(f_reset_rsps$DEQ),
					 .CLR(f_reset_rsps$CLR),
					 .FULL_N(f_reset_rsps$FULL_N),
					 .EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule f_ti_reqs
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_ti_reqs(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(f_ti_reqs$D_IN),
						    .ENQ(f_ti_reqs$ENQ),
						    .DEQ(f_ti_reqs$DEQ),
						    .CLR(f_ti_reqs$CLR),
						    .D_OUT(f_ti_reqs$D_OUT),
						    .FULL_N(f_ti_reqs$FULL_N),
						    .EMPTY_N(f_ti_reqs$EMPTY_N));

  // rule RL_rl_mcycle_incr
  assign CAN_FIRE_RL_rl_mcycle_incr = 1'd1 ;
  assign WILL_FIRE_RL_rl_mcycle_incr = 1'd1 ;

  // rule RL_rl_record_external_interrupt
  assign CAN_FIRE_RL_rl_record_external_interrupt = rg_ei_requested ;
  assign WILL_FIRE_RL_rl_record_external_interrupt =
	     rg_ei_requested && !EN_write_csr ;

  // rule RL_rl_record_timer_interrupt_req
  assign CAN_FIRE_RL_rl_record_timer_interrupt_req = f_ti_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_rl_record_timer_interrupt_req =
	     f_ti_reqs$EMPTY_N &&
	     !WILL_FIRE_RL_rl_record_external_interrupt &&
	     !EN_write_csr ;

  // rule RL_rl_record_software_interrupt
  assign CAN_FIRE_RL_rl_record_software_interrupt = rg_si_requested ;
  assign WILL_FIRE_RL_rl_record_software_interrupt =
	     rg_si_requested && !WILL_FIRE_RL_rl_record_timer_interrupt_req &&
	     !WILL_FIRE_RL_rl_record_external_interrupt &&
	     !EN_write_csr ;

  // rule RL_rl_reset_start
  assign CAN_FIRE_RL_rl_reset_start = !rg_state ;
  assign WILL_FIRE_RL_rl_reset_start =
	     CAN_FIRE_RL_rl_reset_start && !EN_write_csr ;

  // rule RL_rl_upd_minstret_csrrx
  assign CAN_FIRE_RL_rl_upd_minstret_csrrx =
	     MUX_rw_minstret$wset_1__SEL_1 || WILL_FIRE_RL_rl_reset_start ;
  assign WILL_FIRE_RL_rl_upd_minstret_csrrx =
	     CAN_FIRE_RL_rl_upd_minstret_csrrx ;

  // rule RL_rl_upd_minstret_incr
  assign CAN_FIRE_RL_rl_upd_minstret_incr =
	     !CAN_FIRE_RL_rl_upd_minstret_csrrx && EN_csr_minstret_incr ;
  assign WILL_FIRE_RL_rl_upd_minstret_incr =
	     CAN_FIRE_RL_rl_upd_minstret_incr ;

  // inputs to muxes for submodule ports
  assign MUX_rg_mcause$write_1__SEL_2 =
	     EN_write_csr && write_csr_csr_addr == 12'h342 ;
  assign MUX_rg_mcounteren$write_1__SEL_1 =
	     EN_write_csr && write_csr_csr_addr == 12'h306 ;
  assign MUX_rg_mepc$write_1__SEL_1 =
	     EN_write_csr && write_csr_csr_addr == 12'h341 ;
  assign MUX_rg_mie$write_1__SEL_1 =
	     EN_write_csr && write_csr_csr_addr == 12'h304 ;
  assign MUX_rg_mip$write_1__SEL_5 =
	     EN_write_csr && write_csr_csr_addr == 12'h344 ;
  assign MUX_rg_mstatus$write_1__SEL_2 =
	     EN_write_csr && write_csr_csr_addr == 12'h300 ;
  assign MUX_rg_mtval$write_1__SEL_1 =
	     EN_write_csr && write_csr_csr_addr == 12'h343 ;
  assign MUX_rg_mtvec$write_1__SEL_1 =
	     EN_write_csr && write_csr_csr_addr == 12'h305 ;
  assign MUX_rw_minstret$wset_1__SEL_1 =
	     EN_write_csr &&
	     (write_csr_csr_addr == 12'hB02 ||
	      write_csr_csr_addr == 12'hB82) ;
  assign MUX_rg_mcause$write_1__VAL_2 =
	     { write_csr_word[31], write_csr_word[3:0] } ;
  assign MUX_rg_mcause$write_1__VAL_3 =
	     { csr_trap_actions_interrupt, csr_trap_actions_exc_code } ;
  assign MUX_rg_mie$write_1__VAL_1 =
	     { write_csr_word[11],
	       1'b0,
	       write_csr_word[9:7],
	       1'b0,
	       write_csr_word[5:3],
	       1'b0,
	       write_csr_word[1:0] } ;
  assign MUX_rg_minstret$write_1__VAL_1 =
	     MUX_rw_minstret$wset_1__SEL_1 ?
	       MUX_rw_minstret$wset_1__VAL_1 :
	       64'd0 ;
  assign MUX_rg_minstret$write_1__VAL_2 = rg_minstret + 64'd1 ;
  assign MUX_rg_mip$write_1__VAL_2 = { rg_mip[11:4], 1'd1, rg_mip[2:0] } ;
  assign MUX_rg_mip$write_1__VAL_3 =
	     { rg_mip[11:8], f_ti_reqs$D_OUT, rg_mip[6:0] } ;
  assign MUX_rg_mip$write_1__VAL_4 = { 1'd1, rg_mip[10:0] } ;
  assign MUX_rg_mstatus$write_1__VAL_2 =
	     { write_csr_word[31],
	       write_csr_word[22:15],
	       2'd0,
	       write_csr_word[12:11],
	       x__h29709,
	       write_csr_word[7],
	       1'b0,
	       write_csr_word[5:3],
	       1'b0,
	       write_csr_word[1:0] } ;
  assign MUX_rg_mstatus$write_1__VAL_3 =
	     { rg_mstatus[22:12],
	       x__h40213,
	       x__h40215,
	       csr_ret_actions_from_priv == 2'b11 || rg_mstatus[7],
	       csr_ret_actions_from_priv == 2'b10 || rg_mstatus[6],
	       csr_ret_actions_from_priv == 2'b01 || rg_mstatus[5],
	       csr_ret_actions_from_priv == 2'b0 || rg_mstatus[4],
	       IF_csr_ret_actions_from_priv_EQ_0b11_11_THEN_S_ETC___d928,
	       IF_csr_ret_actions_from_priv_EQ_0b10_17_THEN_S_ETC___d930,
	       IF_csr_ret_actions_from_priv_EQ_0b1_21_THEN_SE_ETC___d932,
	       IF_csr_ret_actions_from_priv_EQ_0b0_23_THEN_SE_ETC___d933 } ;
  assign MUX_rg_mstatus$write_1__VAL_4 =
	     { rg_mstatus[22:12],
	       csr_trap_actions_from_priv,
	       rg_mstatus[9:8],
	       rg_mstatus[3],
	       rg_mstatus[6:4],
	       1'd0,
	       rg_mstatus[2:0] } ;
  assign MUX_rg_mtvec$write_1__VAL_1 =
	     { write_csr_word[31:2], write_csr_word[0] } ;
  assign MUX_rw_minstret$wset_1__VAL_1 =
	     (write_csr_csr_addr == 12'hB02) ? x__h34940 : x__h35020 ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN = 4'h0 ;
  assign cfg_verbosity$EN = 1'b0 ;

  // register rg_dcsr
  assign rg_dcsr$D_IN = 32'h0 ;
  assign rg_dcsr$EN = 1'b0 ;

  // register rg_dpc
  assign rg_dpc$D_IN = 32'h0 ;
  assign rg_dpc$EN = 1'b0 ;

  // register rg_dscratch0
  assign rg_dscratch0$D_IN = 32'h0 ;
  assign rg_dscratch0$EN = 1'b0 ;

  // register rg_dscratch1
  assign rg_dscratch1$D_IN = 32'h0 ;
  assign rg_dscratch1$EN = 1'b0 ;

  // register rg_ei_requested
  always@(WILL_FIRE_RL_rl_reset_start or
	  EN_external_interrupt_req or
	  WILL_FIRE_RL_rl_record_external_interrupt)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_ei_requested$D_IN = 1'd0;
    EN_external_interrupt_req: rg_ei_requested$D_IN = 1'd1;
    WILL_FIRE_RL_rl_record_external_interrupt: rg_ei_requested$D_IN = 1'd0;
    default: rg_ei_requested$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign rg_ei_requested$EN =
	     WILL_FIRE_RL_rl_record_external_interrupt ||
	     WILL_FIRE_RL_rl_reset_start ||
	     EN_external_interrupt_req ;

  // register rg_mcause
  always@(WILL_FIRE_RL_rl_reset_start or
	  MUX_rg_mcause$write_1__SEL_2 or
	  MUX_rg_mcause$write_1__VAL_2 or
	  EN_csr_trap_actions or MUX_rg_mcause$write_1__VAL_3)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_mcause$D_IN = 5'd0;
    MUX_rg_mcause$write_1__SEL_2:
	rg_mcause$D_IN = MUX_rg_mcause$write_1__VAL_2;
    EN_csr_trap_actions: rg_mcause$D_IN = MUX_rg_mcause$write_1__VAL_3;
    default: rg_mcause$D_IN = 5'b01010 /* unspecified value */ ;
  endcase
  assign rg_mcause$EN =
	     EN_write_csr && write_csr_csr_addr == 12'h342 ||
	     EN_csr_trap_actions ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mcounteren
  assign rg_mcounteren$D_IN =
	     MUX_rg_mcounteren$write_1__SEL_1 ? write_csr_word[2:0] : 3'd0 ;
  assign rg_mcounteren$EN =
	     EN_write_csr && write_csr_csr_addr == 12'h306 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mcycle
  assign rg_mcycle$D_IN = rg_mcycle + 64'd1 ;
  assign rg_mcycle$EN = 1'd1 ;

  // register rg_mepc
  assign rg_mepc$D_IN =
	     MUX_rg_mepc$write_1__SEL_1 ?
	       write_csr_word :
	       csr_trap_actions_pc ;
  assign rg_mepc$EN =
	     EN_write_csr && write_csr_csr_addr == 12'h341 ||
	     EN_csr_trap_actions ;

  // register rg_mie
  assign rg_mie$D_IN =
	     MUX_rg_mie$write_1__SEL_1 ? MUX_rg_mie$write_1__VAL_1 : 12'd0 ;
  assign rg_mie$EN =
	     EN_write_csr && write_csr_csr_addr == 12'h304 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_minstret
  assign rg_minstret$D_IN =
	     WILL_FIRE_RL_rl_upd_minstret_csrrx ?
	       MUX_rg_minstret$write_1__VAL_1 :
	       MUX_rg_minstret$write_1__VAL_2 ;
  assign rg_minstret$EN =
	     WILL_FIRE_RL_rl_upd_minstret_csrrx ||
	     WILL_FIRE_RL_rl_upd_minstret_incr ;

  // register rg_mip
  always@(WILL_FIRE_RL_rl_reset_start or
	  WILL_FIRE_RL_rl_record_software_interrupt or
	  MUX_rg_mip$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_record_timer_interrupt_req or
	  MUX_rg_mip$write_1__VAL_3 or
	  WILL_FIRE_RL_rl_record_external_interrupt or
	  MUX_rg_mip$write_1__VAL_4 or
	  MUX_rg_mip$write_1__SEL_5 or MUX_rg_mie$write_1__VAL_1)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_mip$D_IN = 12'd0;
    WILL_FIRE_RL_rl_record_software_interrupt:
	rg_mip$D_IN = MUX_rg_mip$write_1__VAL_2;
    WILL_FIRE_RL_rl_record_timer_interrupt_req:
	rg_mip$D_IN = MUX_rg_mip$write_1__VAL_3;
    WILL_FIRE_RL_rl_record_external_interrupt:
	rg_mip$D_IN = MUX_rg_mip$write_1__VAL_4;
    MUX_rg_mip$write_1__SEL_5: rg_mip$D_IN = MUX_rg_mie$write_1__VAL_1;
    default: rg_mip$D_IN = 12'b101010101010 /* unspecified value */ ;
  endcase
  assign rg_mip$EN =
	     EN_write_csr && write_csr_csr_addr == 12'h344 ||
	     WILL_FIRE_RL_rl_record_timer_interrupt_req ||
	     WILL_FIRE_RL_rl_record_software_interrupt ||
	     WILL_FIRE_RL_rl_record_external_interrupt ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mscratch
  assign rg_mscratch$D_IN = write_csr_word ;
  assign rg_mscratch$EN = EN_write_csr && write_csr_csr_addr == 12'h340 ;

  // register rg_mstatus
  always@(WILL_FIRE_RL_rl_reset_start or
	  MUX_rg_mstatus$write_1__SEL_2 or
	  MUX_rg_mstatus$write_1__VAL_2 or
	  EN_csr_ret_actions or
	  MUX_rg_mstatus$write_1__VAL_3 or
	  EN_csr_trap_actions or MUX_rg_mstatus$write_1__VAL_4)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_mstatus$D_IN = 23'd0;
    MUX_rg_mstatus$write_1__SEL_2:
	rg_mstatus$D_IN = MUX_rg_mstatus$write_1__VAL_2;
    EN_csr_ret_actions: rg_mstatus$D_IN = MUX_rg_mstatus$write_1__VAL_3;
    EN_csr_trap_actions: rg_mstatus$D_IN = MUX_rg_mstatus$write_1__VAL_4;
    default: rg_mstatus$D_IN =
		 23'b01010101010101010101010 /* unspecified value */ ;
  endcase
  assign rg_mstatus$EN =
	     EN_write_csr && write_csr_csr_addr == 12'h300 ||
	     EN_csr_trap_actions ||
	     EN_csr_ret_actions ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mtval
  assign rg_mtval$D_IN =
	     MUX_rg_mtval$write_1__SEL_1 ?
	       write_csr_word :
	       csr_trap_actions_xtval ;
  assign rg_mtval$EN =
	     EN_write_csr && write_csr_csr_addr == 12'h343 ||
	     EN_csr_trap_actions && !csr_trap_actions_interrupt ;

  // register rg_mtvec
  assign rg_mtvec$D_IN =
	     MUX_rg_mtvec$write_1__SEL_1 ?
	       MUX_rg_mtvec$write_1__VAL_1 :
	       31'd2048 ;
  assign rg_mtvec$EN =
	     EN_write_csr && write_csr_csr_addr == 12'h305 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_si_requested
  always@(WILL_FIRE_RL_rl_reset_start or
	  EN_software_interrupt_req or
	  WILL_FIRE_RL_rl_record_software_interrupt)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_si_requested$D_IN = 1'd0;
    EN_software_interrupt_req: rg_si_requested$D_IN = 1'd1;
    WILL_FIRE_RL_rl_record_software_interrupt: rg_si_requested$D_IN = 1'd0;
    default: rg_si_requested$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign rg_si_requested$EN =
	     WILL_FIRE_RL_rl_record_software_interrupt ||
	     WILL_FIRE_RL_rl_reset_start ||
	     EN_software_interrupt_req ;

  // register rg_state
  assign rg_state$D_IN = !EN_server_reset_request_put ;
  assign rg_state$EN =
	     EN_server_reset_request_put || WILL_FIRE_RL_rl_reset_start ;

  // register rg_tdata1
  assign rg_tdata1$D_IN = write_csr_word ;
  assign rg_tdata1$EN = EN_write_csr && write_csr_csr_addr == 12'h7A1 ;

  // register rg_tdata2
  assign rg_tdata2$D_IN = write_csr_word ;
  assign rg_tdata2$EN = EN_write_csr && write_csr_csr_addr == 12'h7A2 ;

  // register rg_tdata3
  assign rg_tdata3$D_IN = write_csr_word ;
  assign rg_tdata3$EN = EN_write_csr && write_csr_csr_addr == 12'h7A3 ;

  // register rg_tselect
  assign rg_tselect$D_IN = write_csr_word ;
  assign rg_tselect$EN = EN_write_csr && write_csr_csr_addr == 12'h7A0 ;

  // register rg_watch_n
  assign rg_watch_n$D_IN = 32'd0 ;
  assign rg_watch_n$EN = WILL_FIRE_RL_rl_reset_start ;

  // register rg_watchpoint1
  assign rg_watchpoint1$D_IN = write_csr_word ;
  assign rg_watchpoint1$EN = EN_write_csr && write_csr_csr_addr == 12'hBC1 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$ENQ = EN_server_reset_request_put ;
  assign f_reset_rsps$DEQ = EN_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule f_ti_reqs
  assign f_ti_reqs$D_IN = timer_interrupt_req_set_not_clear ;
  assign f_ti_reqs$ENQ = EN_timer_interrupt_req ;
  assign f_ti_reqs$DEQ = WILL_FIRE_RL_rl_record_timer_interrupt_req ;
  assign f_ti_reqs$CLR = WILL_FIRE_RL_rl_reset_start ;

  // remaining internal signals
  assign IF_NOT_rg_mip_3_BIT_11_50_97_OR_NOT_rg_mie_3_B_ETC___d1043 =
	     (!rg_mip[11] || !rg_mie[11] ||
	      interrupt_pending_cur_priv == 2'b11 && !rg_mstatus[3]) ?
	       4'd3 :
	       4'd11 ;
  assign IF_NOT_rg_mip_3_BIT_11_50_97_OR_NOT_rg_mie_3_B_ETC___d1045 =
	     NOT_rg_mip_3_BIT_11_50_97_OR_NOT_rg_mie_3_BIT__ETC___d1012 ?
	       4'd9 :
	       (NOT_rg_mip_3_BIT_11_50_97_OR_NOT_rg_mie_3_BIT__ETC___d1007 ?
		  4'd7 :
		  IF_NOT_rg_mip_3_BIT_11_50_97_OR_NOT_rg_mie_3_B_ETC___d1043) ;
  assign IF_NOT_rg_mip_3_BIT_11_50_97_OR_NOT_rg_mie_3_B_ETC___d1047 =
	     NOT_rg_mip_3_BIT_11_50_97_OR_NOT_rg_mie_3_BIT__ETC___d1022 ?
	       4'd5 :
	       (NOT_rg_mip_3_BIT_11_50_97_OR_NOT_rg_mie_3_BIT__ETC___d1017 ?
		  4'd1 :
		  IF_NOT_rg_mip_3_BIT_11_50_97_OR_NOT_rg_mie_3_B_ETC___d1045) ;
  assign IF_NOT_rg_mip_3_BIT_11_50_97_OR_NOT_rg_mie_3_B_ETC___d1049 =
	     NOT_rg_mip_3_BIT_11_50_97_OR_NOT_rg_mie_3_BIT__ETC___d1032 ?
	       4'd0 :
	       (NOT_rg_mip_3_BIT_11_50_97_OR_NOT_rg_mie_3_BIT__ETC___d1027 ?
		  4'd8 :
		  IF_NOT_rg_mip_3_BIT_11_50_97_OR_NOT_rg_mie_3_B_ETC___d1047) ;
  assign IF_csr_ret_actions_from_priv_EQ_0b0_23_THEN_SE_ETC___d933 =
	     (csr_ret_actions_from_priv == 2'b0) ? n__h40774 : rg_mstatus[0] ;
  assign IF_csr_ret_actions_from_priv_EQ_0b10_17_THEN_S_ETC___d930 =
	     (csr_ret_actions_from_priv == 2'b10) ?
	       n__h40774 :
	       rg_mstatus[2] ;
  assign IF_csr_ret_actions_from_priv_EQ_0b11_11_THEN_S_ETC___d928 =
	     (csr_ret_actions_from_priv == 2'b11) ?
	       n__h40774 :
	       rg_mstatus[3] ;
  assign IF_csr_ret_actions_from_priv_EQ_0b1_21_THEN_SE_ETC___d932 =
	     (csr_ret_actions_from_priv == 2'b01) ?
	       n__h40774 :
	       rg_mstatus[1] ;
  assign NOT_cfg_verbosity_read__6_ULE_1_7_8_AND_NOT_cs_ETC___d904 =
	     NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	     !csr_trap_actions_interrupt &&
	     csr_trap_actions_exc_code != 4'd0 &&
	     csr_trap_actions_exc_code != 4'd1 &&
	     csr_trap_actions_exc_code != 4'd2 &&
	     csr_trap_actions_exc_code != 4'd3 &&
	     csr_trap_actions_exc_code != 4'd4 &&
	     csr_trap_actions_exc_code != 4'd5 &&
	     csr_trap_actions_exc_code != 4'd6 &&
	     csr_trap_actions_exc_code != 4'd7 &&
	     csr_trap_actions_exc_code != 4'd8 &&
	     csr_trap_actions_exc_code != 4'd9 &&
	     csr_trap_actions_exc_code != 4'd11 &&
	     csr_trap_actions_exc_code != 4'd12 &&
	     csr_trap_actions_exc_code != 4'd13 &&
	     csr_trap_actions_exc_code != 4'd15 ;
  assign NOT_cfg_verbosity_read__6_ULE_1_7_8_AND_csr_tr_ETC___d855 =
	     NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	     csr_trap_actions_interrupt &&
	     csr_trap_actions_exc_code != 4'd0 &&
	     csr_trap_actions_exc_code != 4'd1 &&
	     csr_trap_actions_exc_code != 4'd2 &&
	     csr_trap_actions_exc_code != 4'd3 &&
	     csr_trap_actions_exc_code != 4'd4 &&
	     csr_trap_actions_exc_code != 4'd5 &&
	     csr_trap_actions_exc_code != 4'd6 &&
	     csr_trap_actions_exc_code != 4'd7 &&
	     csr_trap_actions_exc_code != 4'd8 &&
	     csr_trap_actions_exc_code != 4'd9 &&
	     csr_trap_actions_exc_code != 4'd10 &&
	     csr_trap_actions_exc_code != 4'd11 ;
  assign NOT_cfg_verbosity_read__6_ULE_1_7___d18 = cfg_verbosity > 4'd1 ;
  assign NOT_rg_mip_3_BIT_11_50_97_OR_NOT_rg_mie_3_BIT__ETC___d1007 =
	     (!rg_mip[11] || !rg_mie[11] ||
	      interrupt_pending_cur_priv == 2'b11 && !rg_mstatus[3]) &&
	     (!rg_mip[3] || !rg_mie[3] ||
	      interrupt_pending_cur_priv == 2'b11 && !rg_mstatus[3]) ;
  assign NOT_rg_mip_3_BIT_11_50_97_OR_NOT_rg_mie_3_BIT__ETC___d1012 =
	     NOT_rg_mip_3_BIT_11_50_97_OR_NOT_rg_mie_3_BIT__ETC___d1007 &&
	     (!rg_mip[7] || !rg_mie[7] ||
	      interrupt_pending_cur_priv == 2'b11 && !rg_mstatus[3]) ;
  assign NOT_rg_mip_3_BIT_11_50_97_OR_NOT_rg_mie_3_BIT__ETC___d1017 =
	     NOT_rg_mip_3_BIT_11_50_97_OR_NOT_rg_mie_3_BIT__ETC___d1012 &&
	     (!rg_mip[9] || !rg_mie[9] ||
	      interrupt_pending_cur_priv == 2'b11 && !rg_mstatus[3]) ;
  assign NOT_rg_mip_3_BIT_11_50_97_OR_NOT_rg_mie_3_BIT__ETC___d1022 =
	     NOT_rg_mip_3_BIT_11_50_97_OR_NOT_rg_mie_3_BIT__ETC___d1017 &&
	     (!rg_mip[1] || !rg_mie[1] ||
	      interrupt_pending_cur_priv == 2'b11 && !rg_mstatus[3]) ;
  assign NOT_rg_mip_3_BIT_11_50_97_OR_NOT_rg_mie_3_BIT__ETC___d1027 =
	     NOT_rg_mip_3_BIT_11_50_97_OR_NOT_rg_mie_3_BIT__ETC___d1022 &&
	     (!rg_mip[5] || !rg_mie[5] ||
	      interrupt_pending_cur_priv == 2'b11 && !rg_mstatus[3]) ;
  assign NOT_rg_mip_3_BIT_11_50_97_OR_NOT_rg_mie_3_BIT__ETC___d1032 =
	     NOT_rg_mip_3_BIT_11_50_97_OR_NOT_rg_mie_3_BIT__ETC___d1027 &&
	     (!rg_mip[8] || !rg_mie[8] ||
	      interrupt_pending_cur_priv == 2'b11 && !rg_mstatus[3]) ;
  assign NOT_rg_mip_3_BIT_11_50_97_OR_NOT_rg_mie_3_BIT__ETC___d1037 =
	     NOT_rg_mip_3_BIT_11_50_97_OR_NOT_rg_mie_3_BIT__ETC___d1032 &&
	     (!rg_mip[0] || !rg_mie[0] ||
	      interrupt_pending_cur_priv == 2'b11 && !rg_mstatus[3]) ;
  assign exc_pc___1__h39561 = exc_pc__h39508 + vector_offset__h39509 ;
  assign exc_pc__h39508 = { rg_mtvec[30:1], 2'd0 } ;
  assign new_mip__h16593 = { 20'd0, rg_mip[11:4], 1'd1, rg_mip[2:0] } ;
  assign new_mip__h7115 = { 21'd1, rg_mip[10:0] } ;
  assign new_mip_w__h13502 =
	     { 20'd0, rg_mip[11:8], f_ti_reqs$D_OUT, rg_mip[6:0] } ;
  assign old_mip_w__h13501 = { 20'd0, rg_mip } ;
  assign rg_mip_3_BIT_11_50_AND_rg_mie_3_BIT_11_51_52_A_ETC___d961 =
	     rg_mip[11] && rg_mie[11] &&
	     (interrupt_pending_cur_priv != 2'b11 || rg_mstatus[3]) ||
	     rg_mip[3] && rg_mie[3] &&
	     (interrupt_pending_cur_priv != 2'b11 || rg_mstatus[3]) ;
  assign rg_mip_3_BIT_11_50_AND_rg_mie_3_BIT_11_51_52_A_ETC___d966 =
	     rg_mip_3_BIT_11_50_AND_rg_mie_3_BIT_11_51_52_A_ETC___d961 ||
	     rg_mip[7] && rg_mie[7] &&
	     (interrupt_pending_cur_priv != 2'b11 || rg_mstatus[3]) ;
  assign rg_mip_3_BIT_11_50_AND_rg_mie_3_BIT_11_51_52_A_ETC___d971 =
	     rg_mip_3_BIT_11_50_AND_rg_mie_3_BIT_11_51_52_A_ETC___d966 ||
	     rg_mip[9] && rg_mie[9] &&
	     (interrupt_pending_cur_priv != 2'b11 || rg_mstatus[3]) ;
  assign rg_mip_3_BIT_11_50_AND_rg_mie_3_BIT_11_51_52_A_ETC___d976 =
	     rg_mip_3_BIT_11_50_AND_rg_mie_3_BIT_11_51_52_A_ETC___d971 ||
	     rg_mip[1] && rg_mie[1] &&
	     (interrupt_pending_cur_priv != 2'b11 || rg_mstatus[3]) ;
  assign rg_mip_3_BIT_11_50_AND_rg_mie_3_BIT_11_51_52_A_ETC___d981 =
	     rg_mip_3_BIT_11_50_AND_rg_mie_3_BIT_11_51_52_A_ETC___d976 ||
	     rg_mip[5] && rg_mie[5] &&
	     (interrupt_pending_cur_priv != 2'b11 || rg_mstatus[3]) ;
  assign rg_mip_3_BIT_11_50_AND_rg_mie_3_BIT_11_51_52_A_ETC___d986 =
	     rg_mip_3_BIT_11_50_AND_rg_mie_3_BIT_11_51_52_A_ETC___d981 ||
	     rg_mip[8] && rg_mie[8] &&
	     (interrupt_pending_cur_priv != 2'b11 || rg_mstatus[3]) ;
  assign rg_mip_3_BIT_11_50_AND_rg_mie_3_BIT_11_51_52_A_ETC___d991 =
	     rg_mip_3_BIT_11_50_AND_rg_mie_3_BIT_11_51_52_A_ETC___d986 ||
	     rg_mip[0] && rg_mie[0] &&
	     (interrupt_pending_cur_priv != 2'b11 || rg_mstatus[3]) ;
  assign rg_mip_3_BIT_11_50_AND_rg_mie_3_BIT_11_51_52_A_ETC___d996 =
	     rg_mip_3_BIT_11_50_AND_rg_mie_3_BIT_11_51_52_A_ETC___d991 ||
	     rg_mip[4] && rg_mie[4] &&
	     (interrupt_pending_cur_priv != 2'b11 || rg_mstatus[3]) ;
  assign vector_offset__h39509 = { 26'd0, csr_trap_actions_exc_code, 2'd0 } ;
  assign x__h29709 = write_csr_word[8] ? 2'b01 : 2'b0 ;
  assign x__h34940 = { rg_minstret[63:32], write_csr_word } ;
  assign x__h35020 = { write_csr_word, rg_minstret[31:0] } ;
  assign x__h35745 =
	     (csr_trap_actions_interrupt && rg_mtvec[0]) ?
	       exc_pc___1__h39561 :
	       exc_pc__h39508 ;
  assign x__h39943 =
	     { rg_mstatus[22],
	       8'd0,
	       rg_mstatus[21:12],
	       csr_trap_actions_from_priv,
	       2'b0,
	       rg_mstatus[8],
	       rg_mstatus[3],
	       rg_mstatus[6:4],
	       1'd0,
	       rg_mstatus[2:0] } ;
  assign x__h40078 =
	     { csr_trap_actions_interrupt,
	       27'd0,
	       csr_trap_actions_exc_code } ;
  assign x__h40213 =
	     (csr_ret_actions_from_priv == 2'b11) ? 2'b0 : rg_mstatus[11:10] ;
  assign x__h40215 =
	     (csr_ret_actions_from_priv == 2'b11) ? rg_mstatus[9:8] : 2'b0 ;
  assign x__h40952 =
	     (csr_ret_actions_from_priv == 2'b11) ?
	       rg_mstatus[11:10] :
	       rg_mstatus[9:8] ;
  assign x__h40955 =
	     { rg_mstatus[22],
	       8'd0,
	       rg_mstatus[21:12],
	       x__h40213,
	       2'b0,
	       x__h40215[0],
	       csr_ret_actions_from_priv == 2'b11 || rg_mstatus[7],
	       csr_ret_actions_from_priv == 2'b10 || rg_mstatus[6],
	       csr_ret_actions_from_priv == 2'b01 || rg_mstatus[5],
	       csr_ret_actions_from_priv == 2'b0 || rg_mstatus[4],
	       IF_csr_ret_actions_from_priv_EQ_0b11_11_THEN_S_ETC___d928,
	       IF_csr_ret_actions_from_priv_EQ_0b10_17_THEN_S_ETC___d930,
	       IF_csr_ret_actions_from_priv_EQ_0b1_21_THEN_SE_ETC___d932,
	       IF_csr_ret_actions_from_priv_EQ_0b0_23_THEN_SE_ETC___d933 } ;
  always@(csr_ret_actions_from_priv or rg_mstatus)
  begin
    case (csr_ret_actions_from_priv)
      2'd0: n__h40774 = rg_mstatus[4];
      2'd1: n__h40774 = rg_mstatus[5];
      2'd2: n__h40774 = rg_mstatus[6];
      2'd3: n__h40774 = rg_mstatus[7];
    endcase
  end
  always@(read_csr_csr_addr or
	  rg_watchpoint1 or
	  rg_mstatus or
	  rg_mie or
	  rg_mtvec or
	  rg_mcounteren or
	  rg_mscratch or
	  rg_mepc or
	  rg_mcause or
	  rg_mtval or
	  old_mip_w__h13501 or
	  rg_tselect or
	  rg_tdata1 or
	  rg_tdata2 or rg_tdata3 or rg_mcycle or rg_minstret or rg_watch_n)
  begin
    case (read_csr_csr_addr)
      12'h300:
	  IF_read_csr_csr_addr_EQ_0xC00_1_OR_read_csr_cs_ETC___d216 =
	      { rg_mstatus[22],
		8'd0,
		rg_mstatus[21:10],
		2'b0,
		rg_mstatus[8:0] };
      12'h301:
	  IF_read_csr_csr_addr_EQ_0xC00_1_OR_read_csr_cs_ETC___d216 =
	      32'd1074794752;
      12'h304:
	  IF_read_csr_csr_addr_EQ_0xC00_1_OR_read_csr_cs_ETC___d216 =
	      { 20'd0, rg_mie };
      12'h305:
	  IF_read_csr_csr_addr_EQ_0xC00_1_OR_read_csr_cs_ETC___d216 =
	      { rg_mtvec[30:1], 1'b0, rg_mtvec[0] };
      12'h306:
	  IF_read_csr_csr_addr_EQ_0xC00_1_OR_read_csr_cs_ETC___d216 =
	      { 29'd0, rg_mcounteren };
      12'h340:
	  IF_read_csr_csr_addr_EQ_0xC00_1_OR_read_csr_cs_ETC___d216 =
	      rg_mscratch;
      12'h341:
	  IF_read_csr_csr_addr_EQ_0xC00_1_OR_read_csr_cs_ETC___d216 = rg_mepc;
      12'h342:
	  IF_read_csr_csr_addr_EQ_0xC00_1_OR_read_csr_cs_ETC___d216 =
	      { rg_mcause[4], 27'd0, rg_mcause[3:0] };
      12'h343:
	  IF_read_csr_csr_addr_EQ_0xC00_1_OR_read_csr_cs_ETC___d216 =
	      rg_mtval;
      12'h344:
	  IF_read_csr_csr_addr_EQ_0xC00_1_OR_read_csr_cs_ETC___d216 =
	      old_mip_w__h13501;
      12'h7A0:
	  IF_read_csr_csr_addr_EQ_0xC00_1_OR_read_csr_cs_ETC___d216 =
	      rg_tselect;
      12'h7A1:
	  IF_read_csr_csr_addr_EQ_0xC00_1_OR_read_csr_cs_ETC___d216 =
	      rg_tdata1;
      12'h7A2:
	  IF_read_csr_csr_addr_EQ_0xC00_1_OR_read_csr_cs_ETC___d216 =
	      rg_tdata2;
      12'h7A3:
	  IF_read_csr_csr_addr_EQ_0xC00_1_OR_read_csr_cs_ETC___d216 =
	      rg_tdata3;
      12'hB00, 12'hC00, 12'hC01:
	  IF_read_csr_csr_addr_EQ_0xC00_1_OR_read_csr_cs_ETC___d216 =
	      rg_mcycle[31:0];
      12'hB02, 12'hC02:
	  IF_read_csr_csr_addr_EQ_0xC00_1_OR_read_csr_cs_ETC___d216 =
	      rg_minstret[31:0];
      12'hB80, 12'hC80, 12'hC81:
	  IF_read_csr_csr_addr_EQ_0xC00_1_OR_read_csr_cs_ETC___d216 =
	      rg_mcycle[63:32];
      12'hB82, 12'hC82:
	  IF_read_csr_csr_addr_EQ_0xC00_1_OR_read_csr_cs_ETC___d216 =
	      rg_minstret[63:32];
      12'hBC0:
	  IF_read_csr_csr_addr_EQ_0xC00_1_OR_read_csr_cs_ETC___d216 =
	      rg_watch_n;
      12'hF11, 12'hF12, 12'hF13, 12'hF14:
	  IF_read_csr_csr_addr_EQ_0xC00_1_OR_read_csr_cs_ETC___d216 = 32'd0;
      default: IF_read_csr_csr_addr_EQ_0xC00_1_OR_read_csr_cs_ETC___d216 =
		   rg_watchpoint1;
    endcase
  end
  always@(read_csr_port2_csr_addr or
	  rg_watchpoint1 or
	  rg_mstatus or
	  rg_mie or
	  rg_mtvec or
	  rg_mcounteren or
	  rg_mscratch or
	  rg_mepc or
	  rg_mcause or
	  rg_mtval or
	  old_mip_w__h13501 or
	  rg_tselect or
	  rg_tdata1 or
	  rg_tdata2 or rg_tdata3 or rg_mcycle or rg_minstret or rg_watch_n)
  begin
    case (read_csr_port2_csr_addr)
      12'h300:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_18_OR_read_ETC___d364 =
	      { rg_mstatus[22],
		8'd0,
		rg_mstatus[21:10],
		2'b0,
		rg_mstatus[8:0] };
      12'h301:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_18_OR_read_ETC___d364 =
	      32'd1074794752;
      12'h304:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_18_OR_read_ETC___d364 =
	      { 20'd0, rg_mie };
      12'h305:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_18_OR_read_ETC___d364 =
	      { rg_mtvec[30:1], 1'b0, rg_mtvec[0] };
      12'h306:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_18_OR_read_ETC___d364 =
	      { 29'd0, rg_mcounteren };
      12'h340:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_18_OR_read_ETC___d364 =
	      rg_mscratch;
      12'h341:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_18_OR_read_ETC___d364 = rg_mepc;
      12'h342:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_18_OR_read_ETC___d364 =
	      { rg_mcause[4], 27'd0, rg_mcause[3:0] };
      12'h343:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_18_OR_read_ETC___d364 =
	      rg_mtval;
      12'h344:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_18_OR_read_ETC___d364 =
	      old_mip_w__h13501;
      12'h7A0:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_18_OR_read_ETC___d364 =
	      rg_tselect;
      12'h7A1:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_18_OR_read_ETC___d364 =
	      rg_tdata1;
      12'h7A2:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_18_OR_read_ETC___d364 =
	      rg_tdata2;
      12'h7A3:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_18_OR_read_ETC___d364 =
	      rg_tdata3;
      12'hB00, 12'hC00, 12'hC01:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_18_OR_read_ETC___d364 =
	      rg_mcycle[31:0];
      12'hB02, 12'hC02:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_18_OR_read_ETC___d364 =
	      rg_minstret[31:0];
      12'hB80, 12'hC80, 12'hC81:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_18_OR_read_ETC___d364 =
	      rg_mcycle[63:32];
      12'hB82, 12'hC82:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_18_OR_read_ETC___d364 =
	      rg_minstret[63:32];
      12'hBC0:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_18_OR_read_ETC___d364 =
	      rg_watch_n;
      12'hF11, 12'hF12, 12'hF13, 12'hF14:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_18_OR_read_ETC___d364 = 32'd0;
      default: IF_read_csr_port2_csr_addr_EQ_0xC00_18_OR_read_ETC___d364 =
		   rg_watchpoint1;
    endcase
  end
  always@(mav_read_csr_csr_addr or
	  rg_watchpoint1 or
	  rg_mstatus or
	  rg_mie or
	  rg_mtvec or
	  rg_mcounteren or
	  rg_mscratch or
	  rg_mepc or
	  rg_mcause or
	  rg_mtval or
	  old_mip_w__h13501 or
	  rg_tselect or
	  rg_tdata1 or
	  rg_tdata2 or rg_tdata3 or rg_mcycle or rg_minstret or rg_watch_n)
  begin
    case (mav_read_csr_csr_addr)
      12'h300:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_66_OR_mav_re_ETC___d512 =
	      { rg_mstatus[22],
		8'd0,
		rg_mstatus[21:10],
		2'b0,
		rg_mstatus[8:0] };
      12'h301:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_66_OR_mav_re_ETC___d512 =
	      32'd1074794752;
      12'h304:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_66_OR_mav_re_ETC___d512 =
	      { 20'd0, rg_mie };
      12'h305:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_66_OR_mav_re_ETC___d512 =
	      { rg_mtvec[30:1], 1'b0, rg_mtvec[0] };
      12'h306:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_66_OR_mav_re_ETC___d512 =
	      { 29'd0, rg_mcounteren };
      12'h340:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_66_OR_mav_re_ETC___d512 =
	      rg_mscratch;
      12'h341:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_66_OR_mav_re_ETC___d512 = rg_mepc;
      12'h342:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_66_OR_mav_re_ETC___d512 =
	      { rg_mcause[4], 27'd0, rg_mcause[3:0] };
      12'h343:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_66_OR_mav_re_ETC___d512 =
	      rg_mtval;
      12'h344:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_66_OR_mav_re_ETC___d512 =
	      old_mip_w__h13501;
      12'h7A0:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_66_OR_mav_re_ETC___d512 =
	      rg_tselect;
      12'h7A1:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_66_OR_mav_re_ETC___d512 =
	      rg_tdata1;
      12'h7A2:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_66_OR_mav_re_ETC___d512 =
	      rg_tdata2;
      12'h7A3:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_66_OR_mav_re_ETC___d512 =
	      rg_tdata3;
      12'hB00, 12'hC00, 12'hC01:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_66_OR_mav_re_ETC___d512 =
	      rg_mcycle[31:0];
      12'hB02, 12'hC02:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_66_OR_mav_re_ETC___d512 =
	      rg_minstret[31:0];
      12'hB80, 12'hC80, 12'hC81:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_66_OR_mav_re_ETC___d512 =
	      rg_mcycle[63:32];
      12'hB82, 12'hC82:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_66_OR_mav_re_ETC___d512 =
	      rg_minstret[63:32];
      12'hBC0:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_66_OR_mav_re_ETC___d512 =
	      rg_watch_n;
      12'hF11, 12'hF12, 12'hF13, 12'hF14:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_66_OR_mav_re_ETC___d512 = 32'd0;
      default: IF_mav_read_csr_csr_addr_EQ_0xC00_66_OR_mav_re_ETC___d512 =
		   rg_watchpoint1;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	rg_dpc <= `BSV_ASSIGNMENT_DELAY 32'h00001000;
	rg_mcycle <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_minstret <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_mstatus <= `BSV_ASSIGNMENT_DELAY 23'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_watch_n <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_watchpoint1 <= `BSV_ASSIGNMENT_DELAY 32'hFFFFFFFF;
      end
    else
      begin
        if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (rg_dpc$EN) rg_dpc <= `BSV_ASSIGNMENT_DELAY rg_dpc$D_IN;
	if (rg_mcycle$EN) rg_mcycle <= `BSV_ASSIGNMENT_DELAY rg_mcycle$D_IN;
	if (rg_minstret$EN)
	  rg_minstret <= `BSV_ASSIGNMENT_DELAY rg_minstret$D_IN;
	if (rg_mstatus$EN)
	  rg_mstatus <= `BSV_ASSIGNMENT_DELAY rg_mstatus$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
	if (rg_watch_n$EN)
	  rg_watch_n <= `BSV_ASSIGNMENT_DELAY rg_watch_n$D_IN;
	if (rg_watchpoint1$EN)
	  rg_watchpoint1 <= `BSV_ASSIGNMENT_DELAY rg_watchpoint1$D_IN;
      end
    if (rg_dcsr$EN) rg_dcsr <= `BSV_ASSIGNMENT_DELAY rg_dcsr$D_IN;
    if (rg_dscratch0$EN)
      rg_dscratch0 <= `BSV_ASSIGNMENT_DELAY rg_dscratch0$D_IN;
    if (rg_dscratch1$EN)
      rg_dscratch1 <= `BSV_ASSIGNMENT_DELAY rg_dscratch1$D_IN;
    if (rg_ei_requested$EN)
      rg_ei_requested <= `BSV_ASSIGNMENT_DELAY rg_ei_requested$D_IN;
    if (rg_mcause$EN) rg_mcause <= `BSV_ASSIGNMENT_DELAY rg_mcause$D_IN;
    if (rg_mcounteren$EN)
      rg_mcounteren <= `BSV_ASSIGNMENT_DELAY rg_mcounteren$D_IN;
    if (rg_mepc$EN) rg_mepc <= `BSV_ASSIGNMENT_DELAY rg_mepc$D_IN;
    if (rg_mie$EN) rg_mie <= `BSV_ASSIGNMENT_DELAY rg_mie$D_IN;
    if (rg_mip$EN) rg_mip <= `BSV_ASSIGNMENT_DELAY rg_mip$D_IN;
    if (rg_mscratch$EN) rg_mscratch <= `BSV_ASSIGNMENT_DELAY rg_mscratch$D_IN;
    if (rg_mtval$EN) rg_mtval <= `BSV_ASSIGNMENT_DELAY rg_mtval$D_IN;
    if (rg_mtvec$EN) rg_mtvec <= `BSV_ASSIGNMENT_DELAY rg_mtvec$D_IN;
    if (rg_si_requested$EN)
      rg_si_requested <= `BSV_ASSIGNMENT_DELAY rg_si_requested$D_IN;
    if (rg_tdata1$EN) rg_tdata1 <= `BSV_ASSIGNMENT_DELAY rg_tdata1$D_IN;
    if (rg_tdata2$EN) rg_tdata2 <= `BSV_ASSIGNMENT_DELAY rg_tdata2$D_IN;
    if (rg_tdata3$EN) rg_tdata3 <= `BSV_ASSIGNMENT_DELAY rg_tdata3$D_IN;
    if (rg_tselect$EN) rg_tselect <= `BSV_ASSIGNMENT_DELAY rg_tselect$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_verbosity = 4'hA;
    rg_dcsr = 32'hAAAAAAAA;
    rg_dpc = 32'hAAAAAAAA;
    rg_dscratch0 = 32'hAAAAAAAA;
    rg_dscratch1 = 32'hAAAAAAAA;
    rg_ei_requested = 1'h0;
    rg_mcause = 5'h0A;
    rg_mcounteren = 3'h2;
    rg_mcycle = 64'hAAAAAAAAAAAAAAAA;
    rg_mepc = 32'hAAAAAAAA;
    rg_mie = 12'hAAA;
    rg_minstret = 64'hAAAAAAAAAAAAAAAA;
    rg_mip = 12'hAAA;
    rg_mscratch = 32'hAAAAAAAA;
    rg_mstatus = 23'h2AAAAA;
    rg_mtval = 32'hAAAAAAAA;
    rg_mtvec = 31'h2AAAAAAA;
    rg_si_requested = 1'h0;
    rg_state = 1'h0;
    rg_tdata1 = 32'hAAAAAAAA;
    rg_tdata2 = 32'hAAAAAAAA;
    rg_tdata3 = 32'hAAAAAAAA;
    rg_tselect = 32'hAAAAAAAA;
    rg_watch_n = 32'hAAAAAAAA;
    rg_watchpoint1 = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18)
	begin
	  v__h35802 = $stime;
	  #0;
	end
    v__h35796 = v__h35802 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18)
	$display("%0d: CSR_Regfile.csr_trap_actions:", v__h35796);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18)
	$display("    from priv %0d  pc 0x%0h  interrupt %0d  exc_code %0d  xtval 0x%0h",
		 csr_trap_actions_from_priv,
		 csr_trap_actions_pc,
		 csr_trap_actions_interrupt,
		 csr_trap_actions_exc_code,
		 csr_trap_actions_xtval);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18)
	$write("    priv %0d: ", 2'b11);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18)
	$write(" ip: 0x%0h", old_mip_w__h13501);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18)
	$write(" ie: 0x%0h", { 20'd0, rg_mie });
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18)
	$write(" edeleg: 0x%0h", 16'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18)
	$write(" ideleg: 0x%0h", 12'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18)
	$write(" cause:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  rg_mcause[4] &&
	  rg_mcause[3:0] == 4'd0)
	$write("USER_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  rg_mcause[4] &&
	  rg_mcause[3:0] == 4'd1)
	$write("SUPERVISOR_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  rg_mcause[4] &&
	  rg_mcause[3:0] == 4'd2)
	$write("HYPERVISOR_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  rg_mcause[4] &&
	  rg_mcause[3:0] == 4'd3)
	$write("MACHINE_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  rg_mcause[4] &&
	  rg_mcause[3:0] == 4'd4)
	$write("USER_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  rg_mcause[4] &&
	  rg_mcause[3:0] == 4'd5)
	$write("SUPERVISOR_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  rg_mcause[4] &&
	  rg_mcause[3:0] == 4'd6)
	$write("HYPERVISOR_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  rg_mcause[4] &&
	  rg_mcause[3:0] == 4'd7)
	$write("MACHINE_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  rg_mcause[4] &&
	  rg_mcause[3:0] == 4'd8)
	$write("USER_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  rg_mcause[4] &&
	  rg_mcause[3:0] == 4'd9)
	$write("SUPERVISOR_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  rg_mcause[4] &&
	  rg_mcause[3:0] == 4'd10)
	$write("HYPERVISOR_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  rg_mcause[4] &&
	  rg_mcause[3:0] == 4'd11)
	$write("MACHINE_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  rg_mcause[4] &&
	  rg_mcause[3:0] != 4'd0 &&
	  rg_mcause[3:0] != 4'd1 &&
	  rg_mcause[3:0] != 4'd2 &&
	  rg_mcause[3:0] != 4'd3 &&
	  rg_mcause[3:0] != 4'd4 &&
	  rg_mcause[3:0] != 4'd5 &&
	  rg_mcause[3:0] != 4'd6 &&
	  rg_mcause[3:0] != 4'd7 &&
	  rg_mcause[3:0] != 4'd8 &&
	  rg_mcause[3:0] != 4'd9 &&
	  rg_mcause[3:0] != 4'd10 &&
	  rg_mcause[3:0] != 4'd11)
	$write("unknown interrupt Exc_Code %d", rg_mcause[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  !rg_mcause[4] &&
	  rg_mcause[3:0] == 4'd0)
	$write("INSTRUCTION_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  !rg_mcause[4] &&
	  rg_mcause[3:0] == 4'd1)
	$write("INSTRUCTION_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  !rg_mcause[4] &&
	  rg_mcause[3:0] == 4'd2)
	$write("ILLEGAL_INSTRUCTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  !rg_mcause[4] &&
	  rg_mcause[3:0] == 4'd3)
	$write("BREAKPOINT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  !rg_mcause[4] &&
	  rg_mcause[3:0] == 4'd4)
	$write("LOAD_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  !rg_mcause[4] &&
	  rg_mcause[3:0] == 4'd5)
	$write("LOAD_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  !rg_mcause[4] &&
	  rg_mcause[3:0] == 4'd6)
	$write("STORE_AMO_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  !rg_mcause[4] &&
	  rg_mcause[3:0] == 4'd7)
	$write("STORE_AMO_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  !rg_mcause[4] &&
	  rg_mcause[3:0] == 4'd8)
	$write("ECALL_FROM_U");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  !rg_mcause[4] &&
	  rg_mcause[3:0] == 4'd9)
	$write("ECALL_FROM_S");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  !rg_mcause[4] &&
	  rg_mcause[3:0] == 4'd11)
	$write("ECALL_FROM_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  !rg_mcause[4] &&
	  rg_mcause[3:0] == 4'd12)
	$write("INSTRUCTION_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  !rg_mcause[4] &&
	  rg_mcause[3:0] == 4'd13)
	$write("LOAD_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  !rg_mcause[4] &&
	  rg_mcause[3:0] == 4'd15)
	$write("STORE_AMO_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  !rg_mcause[4] &&
	  rg_mcause[3:0] != 4'd0 &&
	  rg_mcause[3:0] != 4'd1 &&
	  rg_mcause[3:0] != 4'd2 &&
	  rg_mcause[3:0] != 4'd3 &&
	  rg_mcause[3:0] != 4'd4 &&
	  rg_mcause[3:0] != 4'd5 &&
	  rg_mcause[3:0] != 4'd6 &&
	  rg_mcause[3:0] != 4'd7 &&
	  rg_mcause[3:0] != 4'd8 &&
	  rg_mcause[3:0] != 4'd9 &&
	  rg_mcause[3:0] != 4'd11 &&
	  rg_mcause[3:0] != 4'd12 &&
	  rg_mcause[3:0] != 4'd13 &&
	  rg_mcause[3:0] != 4'd15)
	$write("unknown trap Exc_Code %d", rg_mcause[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18)
	$write(" status: 0x%0h",
	       { rg_mstatus[22],
		 8'd0,
		 rg_mstatus[21:10],
		 2'b0,
		 rg_mstatus[8:0] });
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18)
	$write(" tvec: 0x%0h", { rg_mtvec[30:1], 1'b0, rg_mtvec[0] });
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18)
	$write(" epc: 0x%0h", rg_mepc);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18)
	$write(" tval: 0x%0h", rg_mtval);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18)
	$write("    Return: new pc 0x%0h  ", x__h35745);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18)
	$write(" new mstatus:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18)
	$write("MStatus{", "sd:%0d", rg_mstatus[22]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18)
	$write(" tsr:%0d", rg_mstatus[21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18)
	$write(" tw:%0d", rg_mstatus[20]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18)
	$write(" tvm:%0d", rg_mstatus[19]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18)
	$write(" mxr:%0d", rg_mstatus[18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18)
	$write(" sum:%0d", rg_mstatus[17]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18)
	$write(" mprv:%0d", rg_mstatus[16]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18)
	$write(" xs:%0d", rg_mstatus[15:14]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18)
	$write(" fs:%0d", rg_mstatus[13:12]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18)
	$write(" mpp:%0d", csr_trap_actions_from_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18)
	$write(" spp:%0d", rg_mstatus[9:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18)
	$write(" pies:%0d_%0d%0d",
	       rg_mstatus[3],
	       rg_mstatus[5],
	       rg_mstatus[4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18)
	$write(" ies:%0d_%0d%0d", 1'd0, rg_mstatus[1], rg_mstatus[0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18)
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18)
	$write(" new xcause:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  csr_trap_actions_interrupt &&
	  csr_trap_actions_exc_code == 4'd0)
	$write("USER_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  csr_trap_actions_interrupt &&
	  csr_trap_actions_exc_code == 4'd1)
	$write("SUPERVISOR_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  csr_trap_actions_interrupt &&
	  csr_trap_actions_exc_code == 4'd2)
	$write("HYPERVISOR_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  csr_trap_actions_interrupt &&
	  csr_trap_actions_exc_code == 4'd3)
	$write("MACHINE_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  csr_trap_actions_interrupt &&
	  csr_trap_actions_exc_code == 4'd4)
	$write("USER_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  csr_trap_actions_interrupt &&
	  csr_trap_actions_exc_code == 4'd5)
	$write("SUPERVISOR_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  csr_trap_actions_interrupt &&
	  csr_trap_actions_exc_code == 4'd6)
	$write("HYPERVISOR_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  csr_trap_actions_interrupt &&
	  csr_trap_actions_exc_code == 4'd7)
	$write("MACHINE_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  csr_trap_actions_interrupt &&
	  csr_trap_actions_exc_code == 4'd8)
	$write("USER_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  csr_trap_actions_interrupt &&
	  csr_trap_actions_exc_code == 4'd9)
	$write("SUPERVISOR_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  csr_trap_actions_interrupt &&
	  csr_trap_actions_exc_code == 4'd10)
	$write("HYPERVISOR_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  csr_trap_actions_interrupt &&
	  csr_trap_actions_exc_code == 4'd11)
	$write("MACHINE_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__6_ULE_1_7_8_AND_csr_tr_ETC___d855)
	$write("unknown interrupt Exc_Code %d", csr_trap_actions_exc_code);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  !csr_trap_actions_interrupt &&
	  csr_trap_actions_exc_code == 4'd0)
	$write("INSTRUCTION_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  !csr_trap_actions_interrupt &&
	  csr_trap_actions_exc_code == 4'd1)
	$write("INSTRUCTION_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  !csr_trap_actions_interrupt &&
	  csr_trap_actions_exc_code == 4'd2)
	$write("ILLEGAL_INSTRUCTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  !csr_trap_actions_interrupt &&
	  csr_trap_actions_exc_code == 4'd3)
	$write("BREAKPOINT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  !csr_trap_actions_interrupt &&
	  csr_trap_actions_exc_code == 4'd4)
	$write("LOAD_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  !csr_trap_actions_interrupt &&
	  csr_trap_actions_exc_code == 4'd5)
	$write("LOAD_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  !csr_trap_actions_interrupt &&
	  csr_trap_actions_exc_code == 4'd6)
	$write("STORE_AMO_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  !csr_trap_actions_interrupt &&
	  csr_trap_actions_exc_code == 4'd7)
	$write("STORE_AMO_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  !csr_trap_actions_interrupt &&
	  csr_trap_actions_exc_code == 4'd8)
	$write("ECALL_FROM_U");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  !csr_trap_actions_interrupt &&
	  csr_trap_actions_exc_code == 4'd9)
	$write("ECALL_FROM_S");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  !csr_trap_actions_interrupt &&
	  csr_trap_actions_exc_code == 4'd11)
	$write("ECALL_FROM_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  !csr_trap_actions_interrupt &&
	  csr_trap_actions_exc_code == 4'd12)
	$write("INSTRUCTION_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  !csr_trap_actions_interrupt &&
	  csr_trap_actions_exc_code == 4'd13)
	$write("LOAD_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18 &&
	  !csr_trap_actions_interrupt &&
	  csr_trap_actions_exc_code == 4'd15)
	$write("STORE_AMO_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__6_ULE_1_7_8_AND_NOT_cs_ETC___d904)
	$write("unknown trap Exc_Code %d", csr_trap_actions_exc_code);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18)
	$write(" new priv %0d", 2'b11);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions && NOT_cfg_verbosity_read__6_ULE_1_7___d18)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write_csr && write_csr_csr_addr != 12'hF11 &&
	  write_csr_csr_addr != 12'hF12 &&
	  write_csr_csr_addr != 12'hF13 &&
	  write_csr_csr_addr != 12'hF14 &&
	  write_csr_csr_addr != 12'h300 &&
	  write_csr_csr_addr != 12'h301 &&
	  write_csr_csr_addr != 12'h304 &&
	  write_csr_csr_addr != 12'h305 &&
	  write_csr_csr_addr != 12'h306 &&
	  write_csr_csr_addr != 12'h340 &&
	  write_csr_csr_addr != 12'h341 &&
	  write_csr_csr_addr != 12'h342 &&
	  write_csr_csr_addr != 12'h343 &&
	  write_csr_csr_addr != 12'h344 &&
	  write_csr_csr_addr != 12'hB00 &&
	  write_csr_csr_addr != 12'hB02 &&
	  write_csr_csr_addr != 12'hB80 &&
	  write_csr_csr_addr != 12'hB82 &&
	  write_csr_csr_addr != 12'h7A0 &&
	  write_csr_csr_addr != 12'h7A1 &&
	  write_csr_csr_addr != 12'h7A2 &&
	  write_csr_csr_addr != 12'h7A3 &&
	  write_csr_csr_addr != 12'hBC0 &&
	  write_csr_csr_addr != 12'hBC1 &&
	  NOT_cfg_verbosity_read__6_ULE_1_7___d18)
	begin
	  v__h35310 = $stime;
	  #0;
	end
    v__h35304 = v__h35310 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write_csr && write_csr_csr_addr != 12'hF11 &&
	  write_csr_csr_addr != 12'hF12 &&
	  write_csr_csr_addr != 12'hF13 &&
	  write_csr_csr_addr != 12'hF14 &&
	  write_csr_csr_addr != 12'h300 &&
	  write_csr_csr_addr != 12'h301 &&
	  write_csr_csr_addr != 12'h304 &&
	  write_csr_csr_addr != 12'h305 &&
	  write_csr_csr_addr != 12'h306 &&
	  write_csr_csr_addr != 12'h340 &&
	  write_csr_csr_addr != 12'h341 &&
	  write_csr_csr_addr != 12'h342 &&
	  write_csr_csr_addr != 12'h343 &&
	  write_csr_csr_addr != 12'h344 &&
	  write_csr_csr_addr != 12'hB00 &&
	  write_csr_csr_addr != 12'hB02 &&
	  write_csr_csr_addr != 12'hB80 &&
	  write_csr_csr_addr != 12'hB82 &&
	  write_csr_csr_addr != 12'h7A0 &&
	  write_csr_csr_addr != 12'h7A1 &&
	  write_csr_csr_addr != 12'h7A2 &&
	  write_csr_csr_addr != 12'h7A3 &&
	  write_csr_csr_addr != 12'hBC0 &&
	  write_csr_csr_addr != 12'hBC1 &&
	  NOT_cfg_verbosity_read__6_ULE_1_7___d18)
	$display("%0d: ERROR: CSR-write addr 0x%0h val 0x%0h not successful",
		 v__h35304,
		 write_csr_csr_addr,
		 write_csr_word);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_record_external_interrupt &&
	  NOT_cfg_verbosity_read__6_ULE_1_7___d18)
	begin
	  v__h8762 = $stime;
	  #0;
	end
    v__h8756 = v__h8762 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_record_external_interrupt &&
	  NOT_cfg_verbosity_read__6_ULE_1_7___d18)
	$display("%0d: CSR_RegFile.rl_record_external_interrupt: mip: %0h -> %0h",
		 v__h8756,
		 old_mip_w__h13501,
		 new_mip__h7115);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_record_external_interrupt &&
	  NOT_cfg_verbosity_read__6_ULE_1_7___d18)
	$display("    Current mie = %0h", { 20'd0, rg_mie });
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_external_interrupt_req &&
	  NOT_cfg_verbosity_read__6_ULE_1_7___d18)
	begin
	  v__h41172 = $stime;
	  #0;
	end
    v__h41166 = v__h41172 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_external_interrupt_req &&
	  NOT_cfg_verbosity_read__6_ULE_1_7___d18)
	$display("%0d: CSR_RegFile.external_interrupt_req", v__h41166);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_record_timer_interrupt_req &&
	  NOT_cfg_verbosity_read__6_ULE_1_7___d18)
	begin
	  v__h13531 = $stime;
	  #0;
	end
    v__h13525 = v__h13531 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_record_timer_interrupt_req &&
	  NOT_cfg_verbosity_read__6_ULE_1_7___d18)
	$display("%0d: CSR_RegFile.rl_record_timer_interrupt_req: mip: %0h -> %0h",
		 v__h13525,
		 old_mip_w__h13501,
		 new_mip_w__h13502);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_record_timer_interrupt_req &&
	  NOT_cfg_verbosity_read__6_ULE_1_7___d18)
	$display("    Current mie = %0h", { 20'd0, rg_mie });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_record_software_interrupt &&
	  NOT_cfg_verbosity_read__6_ULE_1_7___d18)
	begin
	  v__h17682 = $stime;
	  #0;
	end
    v__h17676 = v__h17682 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_record_software_interrupt &&
	  NOT_cfg_verbosity_read__6_ULE_1_7___d18)
	$display("%0d: CSR_RegFile.rl_record_software_interrupt: mip: %0h -> %0h",
		 v__h17676,
		 old_mip_w__h13501,
		 new_mip__h16593);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_record_software_interrupt &&
	  NOT_cfg_verbosity_read__6_ULE_1_7___d18)
	$display("    Current mie = %0h", { 20'd0, rg_mie });
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_software_interrupt_req &&
	  NOT_cfg_verbosity_read__6_ULE_1_7___d18)
	begin
	  v__h41267 = $stime;
	  #0;
	end
    v__h41261 = v__h41267 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_software_interrupt_req &&
	  NOT_cfg_verbosity_read__6_ULE_1_7___d18)
	$display("%0d: CSR_RegFile.software_interrupt_req", v__h41261);
  end
  // synopsys translate_on
endmodule  // mkCSR_RegFile

