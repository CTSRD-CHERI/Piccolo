//
// Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
//
// On Fri Aug 24 10:27:39 BST 2018
//
//
// Ports:
// Name                         I/O  size props
// RDY_set_verbosity              O     1 const
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1
// valid                          O     1
// addr                           O    64 reg
// word64                         O    64
// st_amo_val                     O    64
// exc                            O     1
// exc_code                       O     4 reg
// RDY_server_flush_request_put   O     1 reg
// RDY_server_flush_response_get  O     1
// RDY_tlb_flush                  O     1 const
// mem_master_awvalid             O     1
// mem_master_awaddr              O    64 reg
// mem_master_awprot              O     3 reg
// mem_master_wvalid              O     1
// mem_master_wdata               O    64 reg
// mem_master_wstrb               O     8 reg
// mem_master_bready              O     1
// mem_master_arvalid             O     1
// mem_master_araddr              O    64 reg
// mem_master_arprot              O     3 reg
// mem_master_rready              O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_verbosity_verbosity        I     4 reg
// req_op                         I     2
// req_f3                         I     3
// req_amo_funct7                 I     7 reg
// req_addr                       I    64
// req_st_value                   I    64
// req_priv                       I     2 reg
// req_sstatus_SUM                I     1 reg
// req_mstatus_MXR                I     1 reg
// req_satp                       I    64 reg
// mem_master_awready             I     1
// mem_master_wready              I     1
// mem_master_bvalid              I     1
// mem_master_bresp               I     2 reg
// mem_master_arready             I     1
// mem_master_rvalid              I     1
// mem_master_rresp               I     2 reg
// mem_master_rdata               I    64 reg
// EN_set_verbosity               I     1
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_req                         I     1
// EN_server_flush_request_put    I     1
// EN_server_flush_response_get   I     1
// EN_tlb_flush                   I     1
//
// Combinational paths from inputs to outputs:
//   (mem_master_awready, mem_master_wready) -> valid
//   (mem_master_awready, mem_master_wready) -> word64
//   (mem_master_awready, mem_master_wready) -> st_amo_val
//   (mem_master_awready, mem_master_wready) -> mem_master_bready
//   (mem_master_arready, EN_req) -> mem_master_rready
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMMU_Cache(CLK,
		   RST_N,

		   set_verbosity_verbosity,
		   EN_set_verbosity,
		   RDY_set_verbosity,

		   EN_server_reset_request_put,
		   RDY_server_reset_request_put,

		   EN_server_reset_response_get,
		   RDY_server_reset_response_get,

		   req_op,
		   req_f3,
		   req_amo_funct7,
		   req_addr,
		   req_st_value,
		   req_priv,
		   req_sstatus_SUM,
		   req_mstatus_MXR,
		   req_satp,
		   EN_req,

		   valid,

		   addr,

		   word64,

		   st_amo_val,

		   exc,

		   exc_code,

		   EN_server_flush_request_put,
		   RDY_server_flush_request_put,

		   EN_server_flush_response_get,
		   RDY_server_flush_response_get,

		   EN_tlb_flush,
		   RDY_tlb_flush,

		   mem_master_awvalid,

		   mem_master_awaddr,

		   mem_master_awprot,

		   mem_master_awready,

		   mem_master_wvalid,

		   mem_master_wdata,

		   mem_master_wstrb,

		   mem_master_wready,

		   mem_master_bvalid,
		   mem_master_bresp,

		   mem_master_bready,

		   mem_master_arvalid,

		   mem_master_araddr,

		   mem_master_arprot,

		   mem_master_arready,

		   mem_master_rvalid,
		   mem_master_rresp,
		   mem_master_rdata,

		   mem_master_rready);
  parameter [0 : 0] dmem_not_imem = 1'b0;
  input  CLK;
  input  RST_N;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // action method req
  input  [1 : 0] req_op;
  input  [2 : 0] req_f3;
  input  [6 : 0] req_amo_funct7;
  input  [63 : 0] req_addr;
  input  [63 : 0] req_st_value;
  input  [1 : 0] req_priv;
  input  req_sstatus_SUM;
  input  req_mstatus_MXR;
  input  [63 : 0] req_satp;
  input  EN_req;

  // value method valid
  output valid;

  // value method addr
  output [63 : 0] addr;

  // value method word64
  output [63 : 0] word64;

  // value method st_amo_val
  output [63 : 0] st_amo_val;

  // value method exc
  output exc;

  // value method exc_code
  output [3 : 0] exc_code;

  // action method server_flush_request_put
  input  EN_server_flush_request_put;
  output RDY_server_flush_request_put;

  // action method server_flush_response_get
  input  EN_server_flush_response_get;
  output RDY_server_flush_response_get;

  // action method tlb_flush
  input  EN_tlb_flush;
  output RDY_tlb_flush;

  // value method mem_master_m_awvalid
  output mem_master_awvalid;

  // value method mem_master_m_awaddr
  output [63 : 0] mem_master_awaddr;

  // value method mem_master_m_awprot
  output [2 : 0] mem_master_awprot;

  // value method mem_master_m_awuser

  // action method mem_master_m_awready
  input  mem_master_awready;

  // value method mem_master_m_wvalid
  output mem_master_wvalid;

  // value method mem_master_m_wdata
  output [63 : 0] mem_master_wdata;

  // value method mem_master_m_wstrb
  output [7 : 0] mem_master_wstrb;

  // action method mem_master_m_wready
  input  mem_master_wready;

  // action method mem_master_m_bvalid
  input  mem_master_bvalid;
  input  [1 : 0] mem_master_bresp;

  // value method mem_master_m_bready
  output mem_master_bready;

  // value method mem_master_m_arvalid
  output mem_master_arvalid;

  // value method mem_master_m_araddr
  output [63 : 0] mem_master_araddr;

  // value method mem_master_m_arprot
  output [2 : 0] mem_master_arprot;

  // value method mem_master_m_aruser

  // action method mem_master_m_arready
  input  mem_master_arready;

  // action method mem_master_m_rvalid
  input  mem_master_rvalid;
  input  [1 : 0] mem_master_rresp;
  input  [63 : 0] mem_master_rdata;

  // value method mem_master_m_rready
  output mem_master_rready;

  // signals for module outputs
  reg [63 : 0] word64;
  wire [63 : 0] addr,
		mem_master_araddr,
		mem_master_awaddr,
		mem_master_wdata,
		st_amo_val;
  wire [7 : 0] mem_master_wstrb;
  wire [3 : 0] exc_code;
  wire [2 : 0] mem_master_arprot, mem_master_awprot;
  wire RDY_server_flush_request_put,
       RDY_server_flush_response_get,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_set_verbosity,
       RDY_tlb_flush,
       exc,
       mem_master_arvalid,
       mem_master_awvalid,
       mem_master_bready,
       mem_master_rready,
       mem_master_wvalid,
       valid;

  // inlined wires
  wire [3 : 0] ctr_wr_rsps_pending_crg$port0__write_1,
	       ctr_wr_rsps_pending_crg$port1__write_1,
	       ctr_wr_rsps_pending_crg$port2__read,
	       ctr_wr_rsps_pending_crg$port3__read;
  wire ctr_wr_rsps_pending_crg$EN_port0__write,
       ctr_wr_rsps_pending_crg$EN_port2__write,
       dw_valid$whas,
       master_xactor_crg_rd_addr_full$EN_port0__write,
       master_xactor_crg_rd_addr_full$EN_port1__write,
       master_xactor_crg_rd_addr_full$EN_port2__write,
       master_xactor_crg_rd_addr_full$port1__read,
       master_xactor_crg_rd_addr_full$port2__read,
       master_xactor_crg_rd_addr_full$port3__read,
       master_xactor_crg_rd_data_full$EN_port0__write,
       master_xactor_crg_rd_data_full$EN_port1__write,
       master_xactor_crg_rd_data_full$EN_port2__write,
       master_xactor_crg_rd_data_full$port1__read,
       master_xactor_crg_rd_data_full$port2__read,
       master_xactor_crg_rd_data_full$port3__read,
       master_xactor_crg_wr_addr_full$EN_port0__write,
       master_xactor_crg_wr_addr_full$EN_port1__write,
       master_xactor_crg_wr_addr_full$EN_port2__write,
       master_xactor_crg_wr_addr_full$port1__read,
       master_xactor_crg_wr_addr_full$port2__read,
       master_xactor_crg_wr_addr_full$port3__read,
       master_xactor_crg_wr_data_full$EN_port0__write,
       master_xactor_crg_wr_data_full$EN_port1__write,
       master_xactor_crg_wr_data_full$EN_port2__write,
       master_xactor_crg_wr_data_full$port1__read,
       master_xactor_crg_wr_data_full$port2__read,
       master_xactor_crg_wr_data_full$port3__read,
       master_xactor_crg_wr_resp_full$EN_port0__write,
       master_xactor_crg_wr_resp_full$EN_port2__write,
       master_xactor_crg_wr_resp_full$port1__read,
       master_xactor_crg_wr_resp_full$port2__read,
       master_xactor_crg_wr_resp_full$port3__read;

  // register cfg_verbosity
  reg [3 : 0] cfg_verbosity;
  wire [3 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register ctr_wr_rsps_pending_crg
  reg [3 : 0] ctr_wr_rsps_pending_crg;
  wire [3 : 0] ctr_wr_rsps_pending_crg$D_IN;
  wire ctr_wr_rsps_pending_crg$EN;

  // register master_xactor_crg_rd_addr_full
  reg master_xactor_crg_rd_addr_full;
  wire master_xactor_crg_rd_addr_full$D_IN, master_xactor_crg_rd_addr_full$EN;

  // register master_xactor_crg_rd_data_full
  reg master_xactor_crg_rd_data_full;
  wire master_xactor_crg_rd_data_full$D_IN, master_xactor_crg_rd_data_full$EN;

  // register master_xactor_crg_wr_addr_full
  reg master_xactor_crg_wr_addr_full;
  wire master_xactor_crg_wr_addr_full$D_IN, master_xactor_crg_wr_addr_full$EN;

  // register master_xactor_crg_wr_data_full
  reg master_xactor_crg_wr_data_full;
  wire master_xactor_crg_wr_data_full$D_IN, master_xactor_crg_wr_data_full$EN;

  // register master_xactor_crg_wr_resp_full
  reg master_xactor_crg_wr_resp_full;
  wire master_xactor_crg_wr_resp_full$D_IN, master_xactor_crg_wr_resp_full$EN;

  // register master_xactor_rg_rd_addr
  reg [66 : 0] master_xactor_rg_rd_addr;
  reg [66 : 0] master_xactor_rg_rd_addr$D_IN;
  wire master_xactor_rg_rd_addr$EN;

  // register master_xactor_rg_rd_data
  reg [65 : 0] master_xactor_rg_rd_data;
  wire [65 : 0] master_xactor_rg_rd_data$D_IN;
  wire master_xactor_rg_rd_data$EN;

  // register master_xactor_rg_wr_addr
  reg [66 : 0] master_xactor_rg_wr_addr;
  wire [66 : 0] master_xactor_rg_wr_addr$D_IN;
  wire master_xactor_rg_wr_addr$EN;

  // register master_xactor_rg_wr_data
  reg [71 : 0] master_xactor_rg_wr_data;
  wire [71 : 0] master_xactor_rg_wr_data$D_IN;
  wire master_xactor_rg_wr_data$EN;

  // register master_xactor_rg_wr_resp
  reg [1 : 0] master_xactor_rg_wr_resp;
  wire [1 : 0] master_xactor_rg_wr_resp$D_IN;
  wire master_xactor_rg_wr_resp$EN;

  // register rg_addr
  reg [63 : 0] rg_addr;
  wire [63 : 0] rg_addr$D_IN;
  wire rg_addr$EN;

  // register rg_amo_funct7
  reg [6 : 0] rg_amo_funct7;
  wire [6 : 0] rg_amo_funct7$D_IN;
  wire rg_amo_funct7$EN;

  // register rg_cset_in_cache
  reg [6 : 0] rg_cset_in_cache;
  wire [6 : 0] rg_cset_in_cache$D_IN;
  wire rg_cset_in_cache$EN;

  // register rg_error_during_refill
  reg rg_error_during_refill;
  wire rg_error_during_refill$D_IN, rg_error_during_refill$EN;

  // register rg_exc_code
  reg [3 : 0] rg_exc_code;
  reg [3 : 0] rg_exc_code$D_IN;
  wire rg_exc_code$EN;

  // register rg_f3
  reg [2 : 0] rg_f3;
  wire [2 : 0] rg_f3$D_IN;
  wire rg_f3$EN;

  // register rg_ld_val
  reg [63 : 0] rg_ld_val;
  reg [63 : 0] rg_ld_val$D_IN;
  wire rg_ld_val$EN;

  // register rg_lower_word32
  reg [31 : 0] rg_lower_word32;
  wire [31 : 0] rg_lower_word32$D_IN;
  wire rg_lower_word32$EN;

  // register rg_lower_word32_full
  reg rg_lower_word32_full;
  wire rg_lower_word32_full$D_IN, rg_lower_word32_full$EN;

  // register rg_lrsc_pa
  reg [63 : 0] rg_lrsc_pa;
  wire [63 : 0] rg_lrsc_pa$D_IN;
  wire rg_lrsc_pa$EN;

  // register rg_lrsc_valid
  reg rg_lrsc_valid;
  wire rg_lrsc_valid$D_IN, rg_lrsc_valid$EN;

  // register rg_mstatus_MXR
  reg rg_mstatus_MXR;
  wire rg_mstatus_MXR$D_IN, rg_mstatus_MXR$EN;

  // register rg_op
  reg [1 : 0] rg_op;
  wire [1 : 0] rg_op$D_IN;
  wire rg_op$EN;

  // register rg_pa
  reg [63 : 0] rg_pa;
  wire [63 : 0] rg_pa$D_IN;
  wire rg_pa$EN;

  // register rg_priv
  reg [1 : 0] rg_priv;
  wire [1 : 0] rg_priv$D_IN;
  wire rg_priv$EN;

  // register rg_pte_pa
  reg [63 : 0] rg_pte_pa;
  reg [63 : 0] rg_pte_pa$D_IN;
  wire rg_pte_pa$EN;

  // register rg_req_byte_in_cline
  reg [63 : 0] rg_req_byte_in_cline;
  wire [63 : 0] rg_req_byte_in_cline$D_IN;
  wire rg_req_byte_in_cline$EN;

  // register rg_requesting_cline
  reg rg_requesting_cline;
  reg rg_requesting_cline$D_IN;
  wire rg_requesting_cline$EN;

  // register rg_satp
  reg [63 : 0] rg_satp;
  wire [63 : 0] rg_satp$D_IN;
  wire rg_satp$EN;

  // register rg_sstatus_SUM
  reg rg_sstatus_SUM;
  wire rg_sstatus_SUM$D_IN, rg_sstatus_SUM$EN;

  // register rg_st_amo_val
  reg [63 : 0] rg_st_amo_val;
  wire [63 : 0] rg_st_amo_val$D_IN;
  wire rg_st_amo_val$EN;

  // register rg_state
  reg [3 : 0] rg_state;
  reg [3 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // register rg_word64_set_in_cache
  reg [9 : 0] rg_word64_set_in_cache;
  wire [9 : 0] rg_word64_set_in_cache$D_IN;
  wire rg_word64_set_in_cache$EN;

  // ports of submodule f_reset_reqs
  wire f_reset_reqs$CLR,
       f_reset_reqs$DEQ,
       f_reset_reqs$D_IN,
       f_reset_reqs$D_OUT,
       f_reset_reqs$EMPTY_N,
       f_reset_reqs$ENQ,
       f_reset_reqs$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$D_IN,
       f_reset_rsps$D_OUT,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule ram_state_and_ctag_cset
  wire [51 : 0] ram_state_and_ctag_cset$DIA,
		ram_state_and_ctag_cset$DIB,
		ram_state_and_ctag_cset$DOB;
  wire [6 : 0] ram_state_and_ctag_cset$ADDRA, ram_state_and_ctag_cset$ADDRB;
  wire ram_state_and_ctag_cset$ENA,
       ram_state_and_ctag_cset$ENB,
       ram_state_and_ctag_cset$WEA,
       ram_state_and_ctag_cset$WEB;

  // ports of submodule ram_word64_set
  reg [63 : 0] ram_word64_set$DIB;
  reg [9 : 0] ram_word64_set$ADDRB;
  wire [63 : 0] ram_word64_set$DIA, ram_word64_set$DOB;
  wire [9 : 0] ram_word64_set$ADDRA;
  wire ram_word64_set$ENA,
       ram_word64_set$ENB,
       ram_word64_set$WEA,
       ram_word64_set$WEB;

  // ports of submodule soc_map
  wire [63 : 0] soc_map$m_is_IO_addr_addr;
  wire soc_map$m_is_IO_addr;

  // ports of submodule tlb
  reg [1 : 0] tlb$insert_level;
  wire [130 : 0] tlb$lookup;
  wire [63 : 0] tlb$insert_pte, tlb$insert_pte_pa;
  wire [26 : 0] tlb$insert_vpn, tlb$lookup_vpn;
  wire [15 : 0] tlb$insert_asid, tlb$lookup_asid;
  wire tlb$EN_flush, tlb$EN_insert, tlb$RDY_insert, tlb$RDY_lookup;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_ST_AMO_response,
       CAN_FIRE_RL_rl_cache_refill_req_loop,
       CAN_FIRE_RL_rl_cache_refill_rsps_loop,
       CAN_FIRE_RL_rl_discard_write_rsp,
       CAN_FIRE_RL_rl_drive_exception_rsp,
       CAN_FIRE_RL_rl_io_AMO_ST_req,
       CAN_FIRE_RL_rl_io_AMO_op_req,
       CAN_FIRE_RL_rl_io_read_req,
       CAN_FIRE_RL_rl_io_read_rsp,
       CAN_FIRE_RL_rl_io_wr_req,
       CAN_FIRE_RL_rl_maintain_io_read_rsp,
       CAN_FIRE_RL_rl_probe_and_immed_rsp,
       CAN_FIRE_RL_rl_ptw_level_0,
       CAN_FIRE_RL_rl_ptw_level_1,
       CAN_FIRE_RL_rl_ptw_level_2,
       CAN_FIRE_RL_rl_rereq,
       CAN_FIRE_RL_rl_reset,
       CAN_FIRE_RL_rl_start_cache_refill,
       CAN_FIRE_RL_rl_start_reset,
       CAN_FIRE_RL_rl_start_tlb_refill,
       CAN_FIRE_mem_master_m_arready,
       CAN_FIRE_mem_master_m_awready,
       CAN_FIRE_mem_master_m_bvalid,
       CAN_FIRE_mem_master_m_rvalid,
       CAN_FIRE_mem_master_m_wready,
       CAN_FIRE_req,
       CAN_FIRE_server_flush_request_put,
       CAN_FIRE_server_flush_response_get,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_tlb_flush,
       WILL_FIRE_RL_rl_ST_AMO_response,
       WILL_FIRE_RL_rl_cache_refill_req_loop,
       WILL_FIRE_RL_rl_cache_refill_rsps_loop,
       WILL_FIRE_RL_rl_discard_write_rsp,
       WILL_FIRE_RL_rl_drive_exception_rsp,
       WILL_FIRE_RL_rl_io_AMO_ST_req,
       WILL_FIRE_RL_rl_io_AMO_op_req,
       WILL_FIRE_RL_rl_io_read_req,
       WILL_FIRE_RL_rl_io_read_rsp,
       WILL_FIRE_RL_rl_io_wr_req,
       WILL_FIRE_RL_rl_maintain_io_read_rsp,
       WILL_FIRE_RL_rl_probe_and_immed_rsp,
       WILL_FIRE_RL_rl_ptw_level_0,
       WILL_FIRE_RL_rl_ptw_level_1,
       WILL_FIRE_RL_rl_ptw_level_2,
       WILL_FIRE_RL_rl_rereq,
       WILL_FIRE_RL_rl_reset,
       WILL_FIRE_RL_rl_start_cache_refill,
       WILL_FIRE_RL_rl_start_reset,
       WILL_FIRE_RL_rl_start_tlb_refill,
       WILL_FIRE_mem_master_m_arready,
       WILL_FIRE_mem_master_m_awready,
       WILL_FIRE_mem_master_m_bvalid,
       WILL_FIRE_mem_master_m_rvalid,
       WILL_FIRE_mem_master_m_wready,
       WILL_FIRE_req,
       WILL_FIRE_server_flush_request_put,
       WILL_FIRE_server_flush_response_get,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_tlb_flush;

  // inputs to muxes for submodule ports
  reg [63 : 0] MUX_dw_output_ld_val$wset_1__VAL_1,
	       MUX_dw_output_ld_val$wset_1__VAL_4;
  wire [71 : 0] MUX_master_xactor_rg_wr_data$write_1__VAL_1,
		MUX_master_xactor_rg_wr_data$write_1__VAL_2;
  wire [66 : 0] MUX_master_xactor_rg_rd_addr$write_1__VAL_1,
		MUX_master_xactor_rg_rd_addr$write_1__VAL_2,
		MUX_master_xactor_rg_rd_addr$write_1__VAL_3,
		MUX_master_xactor_rg_rd_addr$write_1__VAL_4,
		MUX_master_xactor_rg_rd_addr$write_1__VAL_5,
		MUX_master_xactor_rg_rd_addr$write_1__VAL_6,
		MUX_master_xactor_rg_wr_addr$write_1__VAL_1,
		MUX_master_xactor_rg_wr_addr$write_1__VAL_2;
  wire [63 : 0] MUX_dw_output_ld_val$wset_1__VAL_2,
		MUX_ram_word64_set$a_put_3__VAL_2,
		MUX_rg_ld_val$write_1__VAL_1,
		MUX_rg_req_byte_in_cline$write_1__VAL_1;
  wire [51 : 0] MUX_ram_state_and_ctag_cset$a_put_3__VAL_1;
  wire [9 : 0] MUX_ram_word64_set$b_put_2__VAL_2,
	       MUX_ram_word64_set$b_put_2__VAL_4;
  wire [6 : 0] MUX_rg_cset_in_cache$write_1__VAL_1;
  wire [3 : 0] MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1,
	       MUX_rg_exc_code$write_1__VAL_1,
	       MUX_rg_exc_code$write_1__VAL_5,
	       MUX_rg_state$write_1__VAL_10,
	       MUX_rg_state$write_1__VAL_11,
	       MUX_rg_state$write_1__VAL_12,
	       MUX_rg_state$write_1__VAL_3,
	       MUX_rg_state$write_1__VAL_6,
	       MUX_rg_state$write_1__VAL_8,
	       MUX_rg_state$write_1__VAL_9;
  wire MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1,
       MUX_dw_output_ld_val$wset_1__SEL_1,
       MUX_dw_output_ld_val$wset_1__SEL_2,
       MUX_master_xactor_rg_rd_addr$write_1__SEL_1,
       MUX_master_xactor_rg_rd_addr$write_1__SEL_2,
       MUX_ram_state_and_ctag_cset$b_put_1__SEL_1,
       MUX_ram_word64_set$a_put_1__SEL_1,
       MUX_ram_word64_set$b_put_1__SEL_2,
       MUX_rg_error_during_refill$write_1__SEL_1,
       MUX_rg_exc_code$write_1__SEL_1,
       MUX_rg_exc_code$write_1__SEL_2,
       MUX_rg_exc_code$write_1__SEL_4,
       MUX_rg_exc_code$write_1__SEL_5,
       MUX_rg_exc_code$write_1__SEL_6,
       MUX_rg_exc_code$write_1__SEL_7,
       MUX_rg_ld_val$write_1__SEL_1,
       MUX_rg_lrsc_valid$write_1__SEL_2,
       MUX_rg_state$write_1__SEL_17,
       MUX_rg_state$write_1__SEL_2,
       MUX_rg_state$write_1__SEL_8,
       MUX_rg_state$write_1__SEL_9,
       MUX_tlb$insert_1__SEL_1,
       MUX_tlb$insert_1__SEL_2,
       MUX_tlb$insert_1__SEL_3;

  // remaining internal signals
  reg [63 : 0] CASE_rg_addr_BITS_2_TO_0_0x0_result3594_0x4_re_ETC__q22,
	       CASE_x1_avValue_pa166_BITS_2_TO_0_0x0_ram_word_ETC__q25,
	       CASE_x1_avValue_pa166_BITS_2_TO_0_0x0_ram_word_ETC__q26,
	       IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d616,
	       IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d625,
	       IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d681,
	       IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d690,
	       IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d476,
	       IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d496,
	       IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d506,
	       IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d460,
	       IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d488,
	       IF_rg_f3_39_EQ_0b0_40_THEN_IF_IF_rg_priv_9_ULE_ETC___d634,
	       IF_rg_f3_39_EQ_0b0_40_THEN_IF_IF_rg_priv_9_ULE_ETC___d699,
	       IF_rg_f3_39_EQ_0b10_70_THEN_SEXT_IF_rg_f3_39_E_ETC___d574,
	       _theResult_____2__h6420,
	       _theResult___fst__h5667,
	       io_req_wr_data_wdata__h28985,
	       mem_req_wr_data_wdata__h19944,
	       mem_req_wr_data_wdata__h20728,
	       new_value__h18732,
	       new_value__h6481,
	       w1__h6414;
  reg [31 : 0] v__h13767,
	       v__h13773,
	       v__h19635,
	       v__h19641,
	       v__h20284,
	       v__h20290,
	       v__h21037,
	       v__h21043,
	       v__h22077,
	       v__h22083,
	       v__h22721,
	       v__h22727,
	       v__h22792,
	       v__h22798,
	       v__h22894,
	       v__h22900,
	       v__h23000,
	       v__h23006,
	       v__h23112,
	       v__h23118,
	       v__h23675,
	       v__h23681,
	       v__h23746,
	       v__h23752,
	       v__h23848,
	       v__h23854,
	       v__h23954,
	       v__h23960,
	       v__h24066,
	       v__h24072,
	       v__h24471,
	       v__h24477,
	       v__h24542,
	       v__h24548,
	       v__h24613,
	       v__h24619,
	       v__h24695,
	       v__h24701,
	       v__h25496,
	       v__h25502,
	       v__h25797,
	       v__h25803,
	       v__h25919,
	       v__h25925,
	       v__h26144,
	       v__h26150,
	       v__h27880,
	       v__h27886,
	       v__h28015,
	       v__h28021,
	       v__h28414,
	       v__h28420,
	       v__h28521,
	       v__h28527,
	       v__h28802,
	       v__h28808,
	       v__h29294,
	       v__h29300,
	       v__h29439,
	       v__h29445,
	       v__h29615,
	       v__h29621,
	       v__h29767,
	       v__h29773,
	       v__h30316,
	       v__h30322,
	       v__h30355,
	       v__h30361,
	       v__h30739,
	       v__h30745,
	       v__h31893,
	       v__h31899,
	       v__h3611,
	       v__h3617,
	       v__h3982,
	       v__h3988,
	       v__h4083,
	       v__h4089,
	       v__h4232,
	       v__h4238;
  reg [7 : 0] io_req_wr_data_wstrb__h28986, mem_req_wr_data_wstrb__h19945;
  reg CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_39_ETC__q21,
      IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d247,
      IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d252,
      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_OR_rg_ad_ETC___d161,
      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_OR_rg_ad_ETC___d169,
      IF_rg_f3_39_BITS_1_TO_0_00_EQ_0b0_01_OR_rg_f3__ETC___d207,
      IF_rg_f3_39_EQ_0b0_40_OR_rg_f3_39_EQ_0b100_41__ETC___d183,
      IF_rg_f3_39_EQ_0b0_40_THEN_IF_IF_rg_priv_9_ULE_ETC___d259;
  wire [63 : 0] IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_1_E_ETC___d521,
		IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_ram_ETC___d507,
		IF_rg_f3_39_EQ_0b10_70_THEN_SEXT_rg_st_amo_val_ETC___d638,
		IF_rg_op_6_EQ_1_85_OR_rg_op_6_EQ_2_9_AND_rg_am_ETC___d717,
		_theResult_____1__h6421,
		_theResult___fst__h20062,
		_theResult___fst__h20846,
		_theResult___fst__h29103,
		_theResult___fst__h5255,
		_theResult___fst__h5326,
		_theResult___snd_fst__h5257,
		_theResult___snd_fst__h5328,
		_theResult___snd_fst__h5896,
		cline_addr__h25554,
		cline_fabric_addr__h25555,
		fabric_addr__h19686,
		io_req_wr_addr_awaddr__h28899,
		lev_0_pte_pa__h23397,
		lev_0_pte_pa_w64_fa__h23399,
		lev_1_PTN_pa__h22369,
		lev_1_pte_pa__h22371,
		lev_1_pte_pa_w64_fa__h22373,
		lev_2_pte_pa__h21868,
		lev_2_pte_pa_w64_fa__h21870,
		pa___1__h5673,
		pa___1__h5722,
		pa___1__h5791,
		pte___1__h5945,
		pte___1__h5973,
		pte___2__h5665,
		result__h12890,
		result__h12918,
		result__h12946,
		result__h12974,
		result__h13002,
		result__h13030,
		result__h13058,
		result__h13103,
		result__h13131,
		result__h13159,
		result__h13187,
		result__h13215,
		result__h13243,
		result__h13271,
		result__h13299,
		result__h13344,
		result__h13372,
		result__h13400,
		result__h13428,
		result__h13469,
		result__h13497,
		result__h13525,
		result__h13553,
		result__h13594,
		result__h13622,
		result__h13661,
		result__h13689,
		result__h28237,
		result__h28264,
		result__h28290,
		result__h28316,
		result__h28342,
		result__h28368,
		result__h28620,
		result__h28647,
		result__h28674,
		result__h28701,
		result__h28728,
		result__h28755,
		result__h6534,
		satp_pa__h2383,
		st_val__h14579,
		st_val__h14672,
		st_val__h15654,
		st_val__h15658,
		st_val__h15662,
		st_val__h15666,
		st_val__h15671,
		st_val__h15677,
		st_val__h15682,
		value__h5990,
		vpn_0_pa__h23396,
		vpn_1_pa__h22370,
		vpn_2_pa__h21867,
		w1___1__h14639,
		w2___1__h14640,
		w2__h6416,
		word64__h6284,
		x1_avValue_pa__h5166,
		x__h14160,
		y__h6570;
  wire [55 : 0] x__h22596, x__h4358, x__h5676, x__h5725, x__h5794;
  wire [31 : 0] master_xactor_rg_rd_data_BITS_31_TO_0__q5,
		new_value481_BITS_31_TO_0__q23,
		rg_ld_val_BITS_31_TO_0__q6,
		rg_st_amo_val_BITS_31_TO_0__q24,
		word64284_BITS_31_TO_0__q20,
		word64284_BITS_63_TO_32__q13;
  wire [15 : 0] master_xactor_rg_rd_data_BITS_15_TO_0__q3,
		rg_ld_val_BITS_15_TO_0__q4,
		word64284_BITS_15_TO_0__q19,
		word64284_BITS_31_TO_16__q9,
		word64284_BITS_47_TO_32__q12,
		word64284_BITS_63_TO_48__q16;
  wire [7 : 0] master_xactor_rg_rd_data_BITS_7_TO_0__q1,
	       rg_ld_val_BITS_7_TO_0__q2,
	       strobe64__h20061,
	       strobe64__h20104,
	       strobe64__h20127,
	       strobe64__h29102,
	       strobe64__h29145,
	       strobe64__h29168,
	       word64284_BITS_15_TO_8__q7,
	       word64284_BITS_23_TO_16__q8,
	       word64284_BITS_31_TO_24__q10,
	       word64284_BITS_39_TO_32__q11,
	       word64284_BITS_47_TO_40__q14,
	       word64284_BITS_55_TO_48__q15,
	       word64284_BITS_63_TO_56__q17,
	       word64284_BITS_7_TO_0__q18;
  wire [5 : 0] shift_bits__h19742, shift_bits__h28907;
  wire [3 : 0] IF_rg_op_6_EQ_0_7_OR_rg_op_6_EQ_2_9_AND_rg_amo_ETC___d365,
	       IF_rg_op_6_EQ_1_85_OR_rg_op_6_EQ_2_9_AND_rg_am_ETC___d364,
	       IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_T_ETC___d367,
	       access_exc_code__h3126,
	       b__h21859,
	       exc_code___1__h5565,
	       x1_avValue_exc_code__h5167;
  wire IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d255,
       IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_NOT_ETC___d175,
       IF_rg_op_6_EQ_0_7_OR_rg_op_6_EQ_2_9_AND_rg_amo_ETC___d267,
       IF_rg_op_6_EQ_1_85_OR_rg_op_6_EQ_2_9_AND_rg_am_ETC___d266,
       IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_T_ETC___d269,
       IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_T_ETC___d379,
       NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS__ETC___d246,
       NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS__ETC___d251,
       NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS__ETC___d254,
       NOT_cfg_verbosity_read__0_ULE_2_006___d1007,
       NOT_dmem_not_imem_1_AND_rg_op_6_EQ_0_7_OR_rg_o_ETC___d298,
       NOT_dmem_not_imem_1_OR_NOT_rg_op_6_EQ_0_7_8_AN_ETC___d88,
       NOT_master_xactor_rg_rd_data_36_BIT_0_40_41_OR_ETC___d868,
       NOT_ram_state_and_ctag_cset_b_read__31_BIT_51__ETC___d157,
       NOT_ram_state_and_ctag_cset_b_read__31_BIT_51__ETC___d381,
       NOT_req_f3_BITS_1_TO_0_174_EQ_0b0_175_176_AND__ETC___d1195,
       NOT_rg_f3_39_EQ_0b11_76_77_OR_rg_amo_funct7_1__ETC___d256,
       NOT_rg_op_6_EQ_0_7_8_AND_NOT_rg_op_6_EQ_2_9_0__ETC___d358,
       NOT_rg_op_6_EQ_1_85_87_AND_NOT_rg_op_6_EQ_2_9__ETC___d390,
       NOT_rg_op_6_EQ_1_85_87_AND_NOT_rg_op_6_EQ_2_9__ETC___d578,
       NOT_rg_op_6_EQ_1_85_87_AND_NOT_rg_op_6_EQ_2_9__ETC___d792,
       NOT_rg_op_6_EQ_1_85_87_AND_NOT_rg_op_6_EQ_2_9__ETC___d802,
       NOT_rg_op_6_EQ_1_85_87_AND_NOT_rg_op_6_EQ_2_9__ETC___d810,
       NOT_rg_op_6_EQ_1_85_87_AND_NOT_rg_op_6_EQ_2_9__ETC___d815,
       NOT_rg_op_6_EQ_2_9_0_OR_NOT_rg_amo_funct7_1_BI_ETC___d576,
       NOT_rg_op_6_EQ_2_9_0_OR_NOT_rg_amo_funct7_1_BI_ETC___d751,
       NOT_rg_op_6_EQ_2_9_0_OR_NOT_rg_amo_funct7_1_BI_ETC___d757,
       NOT_rg_op_6_EQ_2_9_0_OR_NOT_rg_amo_funct7_1_BI_ETC___d763,
       NOT_rg_op_6_EQ_2_9_0_OR_NOT_rg_amo_funct7_1_BI_ETC___d770,
       NOT_rg_op_6_EQ_2_9_0_OR_NOT_rg_amo_funct7_1_BI_ETC___d778,
       NOT_rg_priv_9_EQ_0b0_6_91_OR_tlb_lookup_rg_sat_ETC___d305,
       NOT_rg_priv_9_EQ_0b0_6_91_OR_tlb_lookup_rg_sat_ETC___d337,
       NOT_rg_priv_9_EQ_0b0_6_91_OR_tlb_lookup_rg_sat_ETC___d527,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d271,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d310,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d334,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d371,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d372,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d375,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d396,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d403,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d530,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d535,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d542,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d548,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d554,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d561,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d564,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d570,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d583,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d706,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d732,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d738,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d745,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d750,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d756,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d762,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d768,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d775,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d783,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d789,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d796,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d800,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d806,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d814,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d819,
       NOT_soc_map_m_is_IO_addr_IF_rg_priv_9_ULE_0b1__ETC___d568,
       NOT_tlb_lookup_rg_satp_2_BITS_59_TO_44_9_rg_ad_ETC___d103,
       cfg_verbosity_read__0_ULE_1___d11,
       dmem_not_imem_AND_rg_op_6_EQ_0_7_OR_rg_op_6_EQ_ETC___d300,
       dmem_not_imem_OR_NOT_rg_op_6_EQ_0_7_8_AND_NOT__ETC___d80,
       lrsc_result__h14150,
       master_xactor_crg_rd_data_full_port1__read__35_ETC___d862,
       master_xactor_crg_rd_data_full_port1__read__35_ETC___d925,
       master_xactor_rg_rd_data_36_BITS_65_TO_64_37_E_ETC___d911,
       master_xactor_rg_rd_data_36_BITS_65_TO_64_37_E_ETC___d950,
       master_xactor_rg_rd_data_36_BITS_65_TO_64_37_E_ETC___d956,
       master_xactor_rg_rd_data_36_BIT_3_47_OR_master_ETC___d901,
       master_xactor_rg_rd_data_36_BIT_3_47_OR_master_ETC___d913,
       ram_state_and_ctag_cset_b_read__31_BITS_50_TO__ETC___d136,
       ram_state_and_ctag_cset_b_read__31_BIT_51_32_A_ETC___d382,
       req_f3_BITS_1_TO_0_174_EQ_0b0_175_OR_req_f3_BI_ETC___d1204,
       rg_amo_funct7_1_BITS_6_TO_2_2_EQ_0b10_3_AND_NO_ETC___d557,
       rg_lrsc_pa_91_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d192,
       rg_op_6_EQ_0_7_OR_rg_op_6_EQ_2_9_AND_rg_amo_fu_ETC___d353,
       rg_op_6_EQ_0_7_OR_rg_op_6_EQ_2_9_AND_rg_amo_fu_ETC___d393,
       rg_op_6_EQ_0_7_OR_rg_op_6_EQ_2_9_AND_rg_amo_fu_ETC___d397,
       rg_op_6_EQ_0_7_OR_rg_op_6_EQ_2_9_AND_rg_amo_fu_ETC___d532,
       rg_op_6_EQ_0_7_OR_rg_op_6_EQ_2_9_AND_rg_amo_fu_ETC___d551,
       rg_op_6_EQ_1_85_OR_rg_op_6_EQ_2_9_AND_rg_amo_f_ETC___d391,
       rg_op_6_EQ_1_85_OR_rg_op_6_EQ_2_9_AND_rg_amo_f_ETC___d579,
       rg_op_6_EQ_1_85_OR_rg_op_6_EQ_2_9_AND_rg_amo_f_ETC___d701,
       rg_op_6_EQ_2_9_AND_rg_amo_funct7_1_BITS_6_TO_2_ETC___d210,
       rg_priv_9_EQ_0b0_6_AND_NOT_tlb_lookup_rg_satp__ETC___d322,
       rg_priv_9_EQ_0b0_6_AND_NOT_tlb_lookup_rg_satp__ETC___d97,
       rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_TO_6_ETC___d106,
       rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_TO_6_ETC___d313,
       rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_TO_6_ETC___d344,
       rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_TO_6_ETC___d362,
       rg_priv_9_ULE_0b1___d40,
       tlb_lookup_rg_satp_2_BITS_59_TO_44_9_rg_addr_0_ETC___d307,
       tlb_lookup_rg_satp_2_BITS_59_TO_44_9_rg_addr_0_ETC___d86,
       y__h5491;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get =
	     !f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get =
	     !f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // action method req
  assign CAN_FIRE_req = 1'd1 ;
  assign WILL_FIRE_req = EN_req ;

  // value method valid
  assign valid = dw_valid$whas ;

  // value method addr
  assign addr = rg_addr ;

  // value method word64
  always@(MUX_dw_output_ld_val$wset_1__SEL_1 or
	  MUX_dw_output_ld_val$wset_1__VAL_1 or
	  MUX_dw_output_ld_val$wset_1__SEL_2 or
	  MUX_dw_output_ld_val$wset_1__VAL_2 or
	  WILL_FIRE_RL_rl_ST_AMO_response or
	  rg_ld_val or
	  WILL_FIRE_RL_rl_maintain_io_read_rsp or
	  MUX_dw_output_ld_val$wset_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dw_output_ld_val$wset_1__SEL_1:
	  word64 = MUX_dw_output_ld_val$wset_1__VAL_1;
      MUX_dw_output_ld_val$wset_1__SEL_2:
	  word64 = MUX_dw_output_ld_val$wset_1__VAL_2;
      WILL_FIRE_RL_rl_ST_AMO_response: word64 = rg_ld_val;
      WILL_FIRE_RL_rl_maintain_io_read_rsp:
	  word64 = MUX_dw_output_ld_val$wset_1__VAL_4;
      default: word64 = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end

  // value method st_amo_val
  assign st_amo_val =
	     MUX_dw_output_ld_val$wset_1__SEL_2 ? 64'd0 : rg_st_amo_val ;

  // value method exc
  assign exc = rg_state == 4'd4 ;

  // value method exc_code
  assign exc_code = rg_exc_code ;

  // action method server_flush_request_put
  assign RDY_server_flush_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_flush_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_flush_request_put = EN_server_flush_request_put ;

  // action method server_flush_response_get
  assign RDY_server_flush_response_get =
	     f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_flush_response_get =
	     f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_flush_response_get = EN_server_flush_response_get ;

  // action method tlb_flush
  assign RDY_tlb_flush = 1'd1 ;
  assign CAN_FIRE_tlb_flush = 1'd1 ;
  assign WILL_FIRE_tlb_flush = EN_tlb_flush ;

  // value method mem_master_m_awvalid
  assign mem_master_awvalid =
	     !master_xactor_crg_wr_addr_full$EN_port0__write &&
	     master_xactor_crg_wr_addr_full ;

  // value method mem_master_m_awaddr
  assign mem_master_awaddr = master_xactor_rg_wr_addr[66:3] ;

  // value method mem_master_m_awprot
  assign mem_master_awprot = master_xactor_rg_wr_addr[2:0] ;

  // action method mem_master_m_awready
  assign CAN_FIRE_mem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_awready = 1'd1 ;

  // value method mem_master_m_wvalid
  assign mem_master_wvalid =
	     !master_xactor_crg_wr_data_full$EN_port0__write &&
	     master_xactor_crg_wr_data_full ;

  // value method mem_master_m_wdata
  assign mem_master_wdata = master_xactor_rg_wr_data[71:8] ;

  // value method mem_master_m_wstrb
  assign mem_master_wstrb = master_xactor_rg_wr_data[7:0] ;

  // action method mem_master_m_wready
  assign CAN_FIRE_mem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_wready = 1'd1 ;

  // action method mem_master_m_bvalid
  assign CAN_FIRE_mem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_mem_master_m_bvalid = 1'd1 ;

  // value method mem_master_m_bready
  assign mem_master_bready = !master_xactor_crg_wr_resp_full$port2__read ;

  // value method mem_master_m_arvalid
  assign mem_master_arvalid =
	     !master_xactor_crg_rd_addr_full$EN_port0__write &&
	     master_xactor_crg_rd_addr_full ;

  // value method mem_master_m_araddr
  assign mem_master_araddr = master_xactor_rg_rd_addr[66:3] ;

  // value method mem_master_m_arprot
  assign mem_master_arprot = master_xactor_rg_rd_addr[2:0] ;

  // action method mem_master_m_arready
  assign CAN_FIRE_mem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_arready = 1'd1 ;

  // action method mem_master_m_rvalid
  assign CAN_FIRE_mem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_mem_master_m_rvalid = 1'd1 ;

  // value method mem_master_m_rready
  assign mem_master_rready = !master_xactor_crg_rd_data_full$port2__read ;

  // submodule f_reset_reqs
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_reqs(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_reset_reqs$D_IN),
						       .ENQ(f_reset_reqs$ENQ),
						       .DEQ(f_reset_reqs$DEQ),
						       .CLR(f_reset_reqs$CLR),
						       .D_OUT(f_reset_reqs$D_OUT),
						       .FULL_N(f_reset_reqs$FULL_N),
						       .EMPTY_N(f_reset_reqs$EMPTY_N));

  // submodule f_reset_rsps
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_rsps(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_reset_rsps$D_IN),
						       .ENQ(f_reset_rsps$ENQ),
						       .DEQ(f_reset_rsps$DEQ),
						       .CLR(f_reset_rsps$CLR),
						       .D_OUT(f_reset_rsps$D_OUT),
						       .FULL_N(f_reset_rsps$FULL_N),
						       .EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule ram_state_and_ctag_cset
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd52),
	  .MEMSIZE(8'd128)) ram_state_and_ctag_cset(.CLKA(CLK),
						    .CLKB(CLK),
						    .ADDRA(ram_state_and_ctag_cset$ADDRA),
						    .ADDRB(ram_state_and_ctag_cset$ADDRB),
						    .DIA(ram_state_and_ctag_cset$DIA),
						    .DIB(ram_state_and_ctag_cset$DIB),
						    .WEA(ram_state_and_ctag_cset$WEA),
						    .WEB(ram_state_and_ctag_cset$WEB),
						    .ENA(ram_state_and_ctag_cset$ENA),
						    .ENB(ram_state_and_ctag_cset$ENB),
						    .DOA(),
						    .DOB(ram_state_and_ctag_cset$DOB));

  // submodule ram_word64_set
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd64),
	  .MEMSIZE(11'd1024)) ram_word64_set(.CLKA(CLK),
					     .CLKB(CLK),
					     .ADDRA(ram_word64_set$ADDRA),
					     .ADDRB(ram_word64_set$ADDRB),
					     .DIA(ram_word64_set$DIA),
					     .DIB(ram_word64_set$DIB),
					     .WEA(ram_word64_set$WEA),
					     .WEB(ram_word64_set$WEB),
					     .ENA(ram_word64_set$ENA),
					     .ENB(ram_word64_set$ENB),
					     .DOA(),
					     .DOB(ram_word64_set$DOB));

  // submodule soc_map
  mkSoC_Map soc_map(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_is_IO_addr_addr(soc_map$m_is_IO_addr_addr),
		    .m_boot_rom_addr_size(),
		    .m_boot_rom_addr_base(),
		    .m_boot_rom_addr_lim(),
		    .m_tcm_addr_size(),
		    .m_tcm_addr_base(),
		    .m_tcm_addr_lim(),
		    .m_mem0_controller_addr_size(),
		    .m_mem0_controller_addr_base(),
		    .m_mem0_controller_addr_lim(),
		    .m_uart0_addr_size(),
		    .m_uart0_addr_base(),
		    .m_uart0_addr_lim(),
		    .m_timer0_addr_size(),
		    .m_timer0_addr_base(),
		    .m_timer0_addr_lim(),
		    .m_is_IO_addr(soc_map$m_is_IO_addr));

  // submodule tlb
  mkTLB #(.dmem_not_imem(dmem_not_imem)) tlb(.CLK(CLK),
					     .RST_N(RST_N),
					     .insert_asid(tlb$insert_asid),
					     .insert_level(tlb$insert_level),
					     .insert_pte(tlb$insert_pte),
					     .insert_pte_pa(tlb$insert_pte_pa),
					     .insert_vpn(tlb$insert_vpn),
					     .lookup_asid(tlb$lookup_asid),
					     .lookup_vpn(tlb$lookup_vpn),
					     .EN_flush(tlb$EN_flush),
					     .EN_insert(tlb$EN_insert),
					     .RDY_flush(),
					     .lookup(tlb$lookup),
					     .RDY_lookup(tlb$RDY_lookup),
					     .RDY_insert(tlb$RDY_insert));

  // rule RL_rl_reset
  assign CAN_FIRE_RL_rl_reset =
	     (rg_cset_in_cache != 7'd127 ||
	      f_reset_reqs$EMPTY_N && f_reset_rsps$FULL_N) &&
	     rg_state == 4'd1 ;
  assign WILL_FIRE_RL_rl_reset = CAN_FIRE_RL_rl_reset ;

  // rule RL_rl_rereq
  assign CAN_FIRE_RL_rl_rereq = rg_state == 4'd11 ;
  assign WILL_FIRE_RL_rl_rereq =
	     CAN_FIRE_RL_rl_rereq && !WILL_FIRE_RL_rl_start_reset && !EN_req ;

  // rule RL_rl_ST_AMO_response
  assign CAN_FIRE_RL_rl_ST_AMO_response = rg_state == 4'd12 ;
  assign WILL_FIRE_RL_rl_ST_AMO_response = CAN_FIRE_RL_rl_ST_AMO_response ;

  // rule RL_rl_maintain_io_read_rsp
  assign CAN_FIRE_RL_rl_maintain_io_read_rsp = rg_state == 4'd15 ;
  assign WILL_FIRE_RL_rl_maintain_io_read_rsp =
	     CAN_FIRE_RL_rl_maintain_io_read_rsp ;

  // rule RL_rl_io_AMO_ST_req
  assign CAN_FIRE_RL_rl_io_AMO_ST_req =
	     rg_state == 4'd13 && rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 ;
  assign WILL_FIRE_RL_rl_io_AMO_ST_req =
	     CAN_FIRE_RL_rl_io_AMO_ST_req && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_AMO_op_req
  assign CAN_FIRE_RL_rl_io_AMO_op_req =
	     rg_state == 4'd13 && rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] != 5'b00010 &&
	     rg_amo_funct7[6:2] != 5'b00011 ;
  assign WILL_FIRE_RL_rl_io_AMO_op_req =
	     CAN_FIRE_RL_rl_io_AMO_op_req && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_drive_exception_rsp
  assign CAN_FIRE_RL_rl_drive_exception_rsp = rg_state == 4'd4 ;
  assign WILL_FIRE_RL_rl_drive_exception_rsp = rg_state == 4'd4 ;

  // rule RL_rl_start_reset
  assign CAN_FIRE_RL_rl_start_reset =
	     f_reset_reqs$EMPTY_N && rg_state != 4'd1 ;
  assign WILL_FIRE_RL_rl_start_reset = CAN_FIRE_RL_rl_start_reset ;

  // rule RL_rl_ptw_level_2
  assign CAN_FIRE_RL_rl_ptw_level_2 =
	     master_xactor_crg_rd_data_full_port1__read__35_ETC___d862 &&
	     rg_state == 4'd6 ;
  assign WILL_FIRE_RL_rl_ptw_level_2 =
	     CAN_FIRE_RL_rl_ptw_level_2 && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_ptw_level_1
  assign CAN_FIRE_RL_rl_ptw_level_1 =
	     master_xactor_crg_rd_data_full_port1__read__35_ETC___d925 &&
	     rg_state == 4'd7 ;
  assign WILL_FIRE_RL_rl_ptw_level_1 =
	     CAN_FIRE_RL_rl_ptw_level_1 && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_ptw_level_0
  assign CAN_FIRE_RL_rl_ptw_level_0 =
	     master_xactor_crg_rd_data_full$port1__read &&
	     (master_xactor_rg_rd_data[65:64] != 2'd0 ||
	      !master_xactor_rg_rd_data[0] ||
	      !master_xactor_rg_rd_data[1] && master_xactor_rg_rd_data[2] ||
	      !master_xactor_rg_rd_data[3] && !master_xactor_rg_rd_data[1] ||
	      tlb$RDY_insert) &&
	     rg_state == 4'd8 ;
  assign WILL_FIRE_RL_rl_ptw_level_0 =
	     CAN_FIRE_RL_rl_ptw_level_0 && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_cache_refill_req_loop
  assign CAN_FIRE_RL_rl_cache_refill_req_loop =
	     !master_xactor_crg_rd_addr_full$port2__read &&
	     rg_requesting_cline ;
  assign WILL_FIRE_RL_rl_cache_refill_req_loop =
	     CAN_FIRE_RL_rl_cache_refill_req_loop &&
	     !WILL_FIRE_RL_rl_ptw_level_1 &&
	     !WILL_FIRE_RL_rl_ptw_level_2 &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_probe_and_immed_rsp
  assign CAN_FIRE_RL_rl_probe_and_immed_rsp =
	     (cfg_verbosity_read__0_ULE_1___d11 || tlb$RDY_lookup) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d271 &&
	     rg_state == 4'd3 ;
  assign WILL_FIRE_RL_rl_probe_and_immed_rsp =
	     CAN_FIRE_RL_rl_probe_and_immed_rsp &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_cache_refill_rsps_loop
  assign CAN_FIRE_RL_rl_cache_refill_rsps_loop =
	     master_xactor_crg_rd_data_full$port1__read && rg_state == 4'd10 ;
  assign WILL_FIRE_RL_rl_cache_refill_rsps_loop =
	     CAN_FIRE_RL_rl_cache_refill_rsps_loop &&
	     !WILL_FIRE_RL_rl_start_reset &&
	     !EN_req ;

  // rule RL_rl_io_read_req
  assign CAN_FIRE_RL_rl_io_read_req =
	     !master_xactor_crg_rd_addr_full$port2__read &&
	     rg_state == 4'd13 &&
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ;
  assign WILL_FIRE_RL_rl_io_read_req =
	     CAN_FIRE_RL_rl_io_read_req &&
	     !WILL_FIRE_RL_rl_cache_refill_req_loop &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_read_rsp
  assign CAN_FIRE_RL_rl_io_read_rsp =
	     master_xactor_crg_rd_data_full$port1__read && rg_state == 4'd14 ;
  assign WILL_FIRE_RL_rl_io_read_rsp =
	     CAN_FIRE_RL_rl_io_read_rsp && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_wr_req
  assign CAN_FIRE_RL_rl_io_wr_req =
	     !master_xactor_crg_wr_addr_full$port2__read &&
	     !master_xactor_crg_wr_data_full$port2__read &&
	     rg_state == 4'd13 &&
	     rg_op == 2'd1 ;
  assign WILL_FIRE_RL_rl_io_wr_req =
	     CAN_FIRE_RL_rl_io_wr_req && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_start_tlb_refill
  assign CAN_FIRE_RL_rl_start_tlb_refill =
	     !master_xactor_crg_rd_addr_full$port2__read &&
	     rg_state == 4'd5 &&
	     b__h21859 == 4'd0 ;
  assign WILL_FIRE_RL_rl_start_tlb_refill =
	     CAN_FIRE_RL_rl_start_tlb_refill &&
	     !WILL_FIRE_RL_rl_cache_refill_req_loop &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_start_cache_refill
  assign CAN_FIRE_RL_rl_start_cache_refill =
	     !master_xactor_crg_rd_addr_full$port2__read &&
	     rg_state == 4'd9 &&
	     b__h21859 == 4'd0 ;
  assign WILL_FIRE_RL_rl_start_cache_refill = MUX_rg_state$write_1__SEL_2 ;

  // rule RL_rl_discard_write_rsp
  assign CAN_FIRE_RL_rl_discard_write_rsp =
	     b__h21859 != 4'd0 && master_xactor_crg_wr_resp_full$port1__read ;
  assign WILL_FIRE_RL_rl_discard_write_rsp =
	     CAN_FIRE_RL_rl_discard_write_rsp &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // inputs to muxes for submodule ports
  assign MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d706 ;
  assign MUX_dw_output_ld_val$wset_1__SEL_1 =
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ;
  assign MUX_dw_output_ld_val$wset_1__SEL_2 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d403 ;
  assign MUX_master_xactor_rg_rd_addr$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_ptw_level_2 &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     master_xactor_rg_rd_data[0] &&
	     !master_xactor_rg_rd_data[2] &&
	     !master_xactor_rg_rd_data[3] &&
	     !master_xactor_rg_rd_data[1] ;
  assign MUX_master_xactor_rg_rd_addr$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     master_xactor_rg_rd_data[0] &&
	     !master_xactor_rg_rd_data[2] &&
	     !master_xactor_rg_rd_data[3] &&
	     !master_xactor_rg_rd_data[1] ;
  assign MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 =
	     EN_req &&
	     req_f3_BITS_1_TO_0_174_EQ_0b0_175_OR_req_f3_BI_ETC___d1204 ;
  assign MUX_ram_word64_set$a_put_1__SEL_1 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ;
  assign MUX_ram_word64_set$b_put_1__SEL_2 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[2:0] != 3'd7 ;
  assign MUX_rg_error_during_refill$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_rg_rd_data[65:64] != 2'd0 ;
  assign MUX_rg_exc_code$write_1__SEL_1 =
	     EN_req &&
	     NOT_req_f3_BITS_1_TO_0_174_EQ_0b0_175_176_AND__ETC___d1195 ;
  assign MUX_rg_exc_code$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_rg_rd_data[65:64] != 2'd0 ;
  assign MUX_rg_exc_code$write_1__SEL_4 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_TO_6_ETC___d106 ;
  assign MUX_rg_exc_code$write_1__SEL_5 =
	     WILL_FIRE_RL_rl_ptw_level_0 &&
	     (!master_xactor_rg_rd_data[0] ||
	      !master_xactor_rg_rd_data[1] && master_xactor_rg_rd_data[2] ||
	      !master_xactor_rg_rd_data[3] && !master_xactor_rg_rd_data[1] ||
	      master_xactor_rg_rd_data[65:64] != 2'd0) ;
  assign MUX_rg_exc_code$write_1__SEL_6 =
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     (!master_xactor_rg_rd_data[0] ||
	      !master_xactor_rg_rd_data[1] && master_xactor_rg_rd_data[2] ||
	      (master_xactor_rg_rd_data[3] || master_xactor_rg_rd_data[1]) &&
	      master_xactor_rg_rd_data[18:10] != 9'd0 ||
	      master_xactor_rg_rd_data[65:64] != 2'd0) ;
  assign MUX_rg_exc_code$write_1__SEL_7 =
	     WILL_FIRE_RL_rl_ptw_level_2 &&
	     NOT_master_xactor_rg_rd_data_36_BIT_0_40_41_OR_ETC___d868 ;
  assign MUX_rg_ld_val$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d570 ;
  assign MUX_rg_lrsc_valid$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d396 ;
  assign MUX_rg_state$write_1__SEL_2 =
	     CAN_FIRE_RL_rl_start_cache_refill &&
	     !WILL_FIRE_RL_rl_cache_refill_req_loop &&
	     !WILL_FIRE_RL_rl_start_reset &&
	     !EN_req ;
  assign MUX_rg_state$write_1__SEL_8 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[2:0] == 3'd7 ;
  assign MUX_rg_state$write_1__SEL_9 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_TO_6_ETC___d362 ;
  assign MUX_rg_state$write_1__SEL_17 =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 ;
  assign MUX_tlb$insert_1__SEL_1 =
	     WILL_FIRE_RL_rl_ptw_level_2 &&
	     master_xactor_rg_rd_data_36_BITS_65_TO_64_37_E_ETC___d911 ;
  assign MUX_tlb$insert_1__SEL_2 =
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     master_xactor_rg_rd_data[0] &&
	     (master_xactor_rg_rd_data[1] || !master_xactor_rg_rd_data[2]) &&
	     (master_xactor_rg_rd_data[3] || master_xactor_rg_rd_data[1]) &&
	     master_xactor_rg_rd_data[18:10] == 9'd0 ;
  assign MUX_tlb$insert_1__SEL_3 =
	     WILL_FIRE_RL_rl_ptw_level_0 &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     master_xactor_rg_rd_data[0] &&
	     (master_xactor_rg_rd_data[1] || !master_xactor_rg_rd_data[2]) &&
	     (master_xactor_rg_rd_data[3] || master_xactor_rg_rd_data[1]) ;
  assign MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1 =
	     ctr_wr_rsps_pending_crg + 4'd1 ;
  always@(rg_f3 or
	  result__h28237 or
	  result__h28290 or
	  result__h28342 or
	  master_xactor_rg_rd_data or
	  result__h28264 or result__h28316 or result__h28368)
  begin
    case (rg_f3)
      3'b0: MUX_dw_output_ld_val$wset_1__VAL_1 = result__h28237;
      3'b001: MUX_dw_output_ld_val$wset_1__VAL_1 = result__h28290;
      3'b010: MUX_dw_output_ld_val$wset_1__VAL_1 = result__h28342;
      3'b011:
	  MUX_dw_output_ld_val$wset_1__VAL_1 = master_xactor_rg_rd_data[63:0];
      3'b100: MUX_dw_output_ld_val$wset_1__VAL_1 = result__h28264;
      3'b101: MUX_dw_output_ld_val$wset_1__VAL_1 = result__h28316;
      3'b110: MUX_dw_output_ld_val$wset_1__VAL_1 = result__h28368;
      3'd7: MUX_dw_output_ld_val$wset_1__VAL_1 = 64'd0;
    endcase
  end
  assign MUX_dw_output_ld_val$wset_1__VAL_2 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
	       new_value__h6481 :
	       new_value__h18732 ;
  always@(rg_f3 or
	  result__h28620 or
	  result__h28674 or
	  result__h28728 or
	  rg_ld_val or result__h28647 or result__h28701 or result__h28755)
  begin
    case (rg_f3)
      3'b0: MUX_dw_output_ld_val$wset_1__VAL_4 = result__h28620;
      3'b001: MUX_dw_output_ld_val$wset_1__VAL_4 = result__h28674;
      3'b010: MUX_dw_output_ld_val$wset_1__VAL_4 = result__h28728;
      3'b011: MUX_dw_output_ld_val$wset_1__VAL_4 = rg_ld_val;
      3'b100: MUX_dw_output_ld_val$wset_1__VAL_4 = result__h28647;
      3'b101: MUX_dw_output_ld_val$wset_1__VAL_4 = result__h28701;
      3'b110: MUX_dw_output_ld_val$wset_1__VAL_4 = result__h28755;
      3'd7: MUX_dw_output_ld_val$wset_1__VAL_4 = 64'd0;
    endcase
  end
  assign MUX_master_xactor_rg_rd_addr$write_1__VAL_1 =
	     { lev_1_pte_pa_w64_fa__h22373, 3'd0 } ;
  assign MUX_master_xactor_rg_rd_addr$write_1__VAL_2 =
	     { lev_0_pte_pa_w64_fa__h23399, 3'd0 } ;
  assign MUX_master_xactor_rg_rd_addr$write_1__VAL_3 = { rg_pa, 3'd0 } ;
  assign MUX_master_xactor_rg_rd_addr$write_1__VAL_4 =
	     { lev_2_pte_pa_w64_fa__h21870, 3'd0 } ;
  assign MUX_master_xactor_rg_rd_addr$write_1__VAL_5 =
	     { cline_addr__h25554, 3'd0 } ;
  assign MUX_master_xactor_rg_rd_addr$write_1__VAL_6 =
	     { cline_fabric_addr__h25555, 3'd0 } ;
  assign MUX_master_xactor_rg_wr_addr$write_1__VAL_1 =
	     { fabric_addr__h19686, 3'd0 } ;
  assign MUX_master_xactor_rg_wr_addr$write_1__VAL_2 =
	     { io_req_wr_addr_awaddr__h28899, 3'd0 } ;
  assign MUX_master_xactor_rg_wr_data$write_1__VAL_1 =
	     { IF_rg_op_6_EQ_1_85_OR_rg_op_6_EQ_2_9_AND_rg_am_ETC___d717,
	       mem_req_wr_data_wstrb__h19945 } ;
  assign MUX_master_xactor_rg_wr_data$write_1__VAL_2 =
	     { io_req_wr_data_wdata__h28985, io_req_wr_data_wstrb__h28986 } ;
  assign MUX_ram_state_and_ctag_cset$a_put_3__VAL_1 = { 1'd1, rg_pa[63:13] } ;
  assign MUX_ram_word64_set$a_put_3__VAL_2 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       IF_rg_f3_39_EQ_0b0_40_THEN_IF_IF_rg_priv_9_ULE_ETC___d634 :
	       IF_rg_f3_39_EQ_0b0_40_THEN_IF_IF_rg_priv_9_ULE_ETC___d699 ;
  assign MUX_ram_word64_set$b_put_2__VAL_2 = rg_word64_set_in_cache + 10'd1 ;
  assign MUX_ram_word64_set$b_put_2__VAL_4 = { rg_addr[12:6], 3'd0 } ;
  assign MUX_rg_cset_in_cache$write_1__VAL_1 = rg_cset_in_cache + 7'd1 ;
  assign MUX_rg_exc_code$write_1__VAL_1 = (req_op == 2'd0) ? 4'd4 : 4'd6 ;
  assign MUX_rg_exc_code$write_1__VAL_5 =
	     (master_xactor_rg_rd_data[65:64] == 2'd0) ?
	       exc_code___1__h5565 :
	       access_exc_code__h3126 ;
  assign MUX_rg_ld_val$write_1__VAL_1 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       x__h14160 :
	       IF_rg_f3_39_EQ_0b10_70_THEN_SEXT_IF_rg_f3_39_E_ETC___d574 ;
  assign MUX_rg_req_byte_in_cline$write_1__VAL_1 =
	     rg_req_byte_in_cline + 64'd8 ;
  assign MUX_rg_state$write_1__VAL_3 =
	     NOT_req_f3_BITS_1_TO_0_174_EQ_0b0_175_176_AND__ETC___d1195 ?
	       4'd4 :
	       4'd3 ;
  assign MUX_rg_state$write_1__VAL_6 =
	     (master_xactor_rg_rd_data[65:64] == 2'd0) ? 4'd15 : 4'd4 ;
  assign MUX_rg_state$write_1__VAL_8 =
	     (master_xactor_rg_rd_data[65:64] != 2'd0 ||
	      rg_error_during_refill) ?
	       4'd4 :
	       4'd11 ;
  assign MUX_rg_state$write_1__VAL_9 =
	     (rg_priv_9_ULE_0b1___d40 && rg_satp[63:60] == 4'd8 &&
	      !tlb$lookup[130]) ?
	       4'd5 :
	       IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_T_ETC___d367 ;
  assign MUX_rg_state$write_1__VAL_10 =
	     (master_xactor_rg_rd_data[65:64] == 2'd0) ?
	       ((!master_xactor_rg_rd_data[0] ||
		 !master_xactor_rg_rd_data[1] &&
		 master_xactor_rg_rd_data[2] ||
		 !master_xactor_rg_rd_data[3] &&
		 !master_xactor_rg_rd_data[1]) ?
		  4'd4 :
		  4'd11) :
	       4'd4 ;
  assign MUX_rg_state$write_1__VAL_11 =
	     (master_xactor_rg_rd_data[65:64] == 2'd0) ?
	       ((!master_xactor_rg_rd_data[0] ||
		 !master_xactor_rg_rd_data[1] &&
		 master_xactor_rg_rd_data[2]) ?
		  4'd4 :
		  ((!master_xactor_rg_rd_data[3] &&
		    !master_xactor_rg_rd_data[1]) ?
		     4'd8 :
		     ((master_xactor_rg_rd_data[18:10] == 9'd0) ?
			4'd11 :
			4'd4))) :
	       4'd4 ;
  assign MUX_rg_state$write_1__VAL_12 =
	     (master_xactor_rg_rd_data[65:64] == 2'd0) ?
	       ((!master_xactor_rg_rd_data[0] ||
		 !master_xactor_rg_rd_data[1] &&
		 master_xactor_rg_rd_data[2]) ?
		  4'd4 :
		  ((!master_xactor_rg_rd_data[3] &&
		    !master_xactor_rg_rd_data[1]) ?
		     4'd7 :
		     ((master_xactor_rg_rd_data[27:19] != 9'd0 ||
		       master_xactor_rg_rd_data[18:10] != 9'd0) ?
			4'd4 :
			4'd11))) :
	       4'd4 ;

  // inlined wires
  assign dw_valid$whas =
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d403 ||
	     WILL_FIRE_RL_rl_drive_exception_rsp ||
	     WILL_FIRE_RL_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_rl_ST_AMO_response ;
  assign master_xactor_crg_wr_addr_full$EN_port0__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign master_xactor_crg_wr_addr_full$port1__read =
	     !master_xactor_crg_wr_addr_full$EN_port0__write &&
	     master_xactor_crg_wr_addr_full ;
  assign master_xactor_crg_wr_addr_full$EN_port1__write =
	     master_xactor_crg_wr_addr_full$port1__read &&
	     mem_master_awready ;
  assign master_xactor_crg_wr_addr_full$port2__read =
	     !master_xactor_crg_wr_addr_full$EN_port1__write &&
	     master_xactor_crg_wr_addr_full$port1__read ;
  assign master_xactor_crg_wr_addr_full$EN_port2__write =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d706 ||
	     WILL_FIRE_RL_rl_io_wr_req ;
  assign master_xactor_crg_wr_addr_full$port3__read =
	     master_xactor_crg_wr_addr_full$EN_port2__write ?
	       1'd1 :
	       master_xactor_crg_wr_addr_full$port2__read ;
  assign master_xactor_crg_wr_data_full$EN_port0__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign master_xactor_crg_wr_data_full$port1__read =
	     !master_xactor_crg_wr_data_full$EN_port0__write &&
	     master_xactor_crg_wr_data_full ;
  assign master_xactor_crg_wr_data_full$EN_port1__write =
	     master_xactor_crg_wr_data_full$port1__read && mem_master_wready ;
  assign master_xactor_crg_wr_data_full$port2__read =
	     !master_xactor_crg_wr_data_full$EN_port1__write &&
	     master_xactor_crg_wr_data_full$port1__read ;
  assign master_xactor_crg_wr_data_full$EN_port2__write =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d706 ||
	     WILL_FIRE_RL_rl_io_wr_req ;
  assign master_xactor_crg_wr_data_full$port3__read =
	     master_xactor_crg_wr_data_full$EN_port2__write ?
	       1'd1 :
	       master_xactor_crg_wr_data_full$port2__read ;
  assign master_xactor_crg_wr_resp_full$EN_port0__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign master_xactor_crg_wr_resp_full$port1__read =
	     !master_xactor_crg_wr_resp_full$EN_port0__write &&
	     master_xactor_crg_wr_resp_full ;
  assign master_xactor_crg_wr_resp_full$port2__read =
	     !WILL_FIRE_RL_rl_discard_write_rsp &&
	     master_xactor_crg_wr_resp_full$port1__read ;
  assign master_xactor_crg_wr_resp_full$EN_port2__write =
	     mem_master_bvalid &&
	     !master_xactor_crg_wr_resp_full$port2__read ;
  assign master_xactor_crg_wr_resp_full$port3__read =
	     master_xactor_crg_wr_resp_full$EN_port2__write ||
	     master_xactor_crg_wr_resp_full$port2__read ;
  assign master_xactor_crg_rd_addr_full$EN_port0__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign master_xactor_crg_rd_addr_full$port1__read =
	     !master_xactor_crg_rd_addr_full$EN_port0__write &&
	     master_xactor_crg_rd_addr_full ;
  assign master_xactor_crg_rd_addr_full$EN_port1__write =
	     master_xactor_crg_rd_addr_full$port1__read &&
	     mem_master_arready ;
  assign master_xactor_crg_rd_addr_full$port2__read =
	     !master_xactor_crg_rd_addr_full$EN_port1__write &&
	     master_xactor_crg_rd_addr_full$port1__read ;
  assign master_xactor_crg_rd_addr_full$EN_port2__write =
	     (WILL_FIRE_RL_rl_ptw_level_1 || WILL_FIRE_RL_rl_ptw_level_2) &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     master_xactor_rg_rd_data[0] &&
	     !master_xactor_rg_rd_data[2] &&
	     !master_xactor_rg_rd_data[3] &&
	     !master_xactor_rg_rd_data[1] ||
	     WILL_FIRE_RL_rl_io_read_req ||
	     WILL_FIRE_RL_rl_cache_refill_req_loop ||
	     WILL_FIRE_RL_rl_start_cache_refill ||
	     WILL_FIRE_RL_rl_start_tlb_refill ;
  assign master_xactor_crg_rd_addr_full$port3__read =
	     master_xactor_crg_rd_addr_full$EN_port2__write ?
	       1'd1 :
	       master_xactor_crg_rd_addr_full$port2__read ;
  assign master_xactor_crg_rd_data_full$EN_port0__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign master_xactor_crg_rd_data_full$port1__read =
	     !master_xactor_crg_rd_data_full$EN_port0__write &&
	     master_xactor_crg_rd_data_full ;
  assign master_xactor_crg_rd_data_full$EN_port1__write =
	     WILL_FIRE_RL_rl_io_read_rsp ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop ||
	     WILL_FIRE_RL_rl_ptw_level_0 ||
	     WILL_FIRE_RL_rl_ptw_level_1 ||
	     WILL_FIRE_RL_rl_ptw_level_2 ;
  assign master_xactor_crg_rd_data_full$port2__read =
	     !master_xactor_crg_rd_data_full$EN_port1__write &&
	     master_xactor_crg_rd_data_full$port1__read ;
  assign master_xactor_crg_rd_data_full$EN_port2__write =
	     mem_master_rvalid &&
	     !master_xactor_crg_rd_data_full$port2__read ;
  assign master_xactor_crg_rd_data_full$port3__read =
	     master_xactor_crg_rd_data_full$EN_port2__write ||
	     master_xactor_crg_rd_data_full$port2__read ;
  assign ctr_wr_rsps_pending_crg$EN_port0__write =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d706 ||
	     WILL_FIRE_RL_rl_io_wr_req ;
  assign ctr_wr_rsps_pending_crg$port0__write_1 =
	     MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 ?
	       MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1 :
	       MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1 ;
  assign ctr_wr_rsps_pending_crg$port1__write_1 = b__h21859 - 4'd1 ;
  assign ctr_wr_rsps_pending_crg$port2__read =
	     WILL_FIRE_RL_rl_discard_write_rsp ?
	       ctr_wr_rsps_pending_crg$port1__write_1 :
	       b__h21859 ;
  assign ctr_wr_rsps_pending_crg$EN_port2__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign ctr_wr_rsps_pending_crg$port3__read =
	     ctr_wr_rsps_pending_crg$EN_port2__write ?
	       4'd0 :
	       ctr_wr_rsps_pending_crg$port2__read ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN = set_verbosity_verbosity ;
  assign cfg_verbosity$EN = EN_set_verbosity ;

  // register ctr_wr_rsps_pending_crg
  assign ctr_wr_rsps_pending_crg$D_IN = ctr_wr_rsps_pending_crg$port3__read ;
  assign ctr_wr_rsps_pending_crg$EN = 1'b1 ;

  // register master_xactor_crg_rd_addr_full
  assign master_xactor_crg_rd_addr_full$D_IN =
	     master_xactor_crg_rd_addr_full$port3__read ;
  assign master_xactor_crg_rd_addr_full$EN = 1'b1 ;

  // register master_xactor_crg_rd_data_full
  assign master_xactor_crg_rd_data_full$D_IN =
	     master_xactor_crg_rd_data_full$port3__read ;
  assign master_xactor_crg_rd_data_full$EN = 1'b1 ;

  // register master_xactor_crg_wr_addr_full
  assign master_xactor_crg_wr_addr_full$D_IN =
	     master_xactor_crg_wr_addr_full$port3__read ;
  assign master_xactor_crg_wr_addr_full$EN = 1'b1 ;

  // register master_xactor_crg_wr_data_full
  assign master_xactor_crg_wr_data_full$D_IN =
	     master_xactor_crg_wr_data_full$port3__read ;
  assign master_xactor_crg_wr_data_full$EN = 1'b1 ;

  // register master_xactor_crg_wr_resp_full
  assign master_xactor_crg_wr_resp_full$D_IN =
	     master_xactor_crg_wr_resp_full$port3__read ;
  assign master_xactor_crg_wr_resp_full$EN = 1'b1 ;

  // register master_xactor_rg_rd_addr
  always@(MUX_master_xactor_rg_rd_addr$write_1__SEL_1 or
	  MUX_master_xactor_rg_rd_addr$write_1__VAL_1 or
	  MUX_master_xactor_rg_rd_addr$write_1__SEL_2 or
	  MUX_master_xactor_rg_rd_addr$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_io_read_req or
	  MUX_master_xactor_rg_rd_addr$write_1__VAL_3 or
	  WILL_FIRE_RL_rl_start_tlb_refill or
	  MUX_master_xactor_rg_rd_addr$write_1__VAL_4 or
	  WILL_FIRE_RL_rl_start_cache_refill or
	  MUX_master_xactor_rg_rd_addr$write_1__VAL_5 or
	  WILL_FIRE_RL_rl_cache_refill_req_loop or
	  MUX_master_xactor_rg_rd_addr$write_1__VAL_6)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_master_xactor_rg_rd_addr$write_1__SEL_1:
	  master_xactor_rg_rd_addr$D_IN =
	      MUX_master_xactor_rg_rd_addr$write_1__VAL_1;
      MUX_master_xactor_rg_rd_addr$write_1__SEL_2:
	  master_xactor_rg_rd_addr$D_IN =
	      MUX_master_xactor_rg_rd_addr$write_1__VAL_2;
      WILL_FIRE_RL_rl_io_read_req:
	  master_xactor_rg_rd_addr$D_IN =
	      MUX_master_xactor_rg_rd_addr$write_1__VAL_3;
      WILL_FIRE_RL_rl_start_tlb_refill:
	  master_xactor_rg_rd_addr$D_IN =
	      MUX_master_xactor_rg_rd_addr$write_1__VAL_4;
      WILL_FIRE_RL_rl_start_cache_refill:
	  master_xactor_rg_rd_addr$D_IN =
	      MUX_master_xactor_rg_rd_addr$write_1__VAL_5;
      WILL_FIRE_RL_rl_cache_refill_req_loop:
	  master_xactor_rg_rd_addr$D_IN =
	      MUX_master_xactor_rg_rd_addr$write_1__VAL_6;
      default: master_xactor_rg_rd_addr$D_IN =
		   67'h2AAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign master_xactor_rg_rd_addr$EN =
	     WILL_FIRE_RL_rl_ptw_level_2 &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     master_xactor_rg_rd_data[0] &&
	     !master_xactor_rg_rd_data[2] &&
	     !master_xactor_rg_rd_data[3] &&
	     !master_xactor_rg_rd_data[1] ||
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     master_xactor_rg_rd_data[0] &&
	     !master_xactor_rg_rd_data[2] &&
	     !master_xactor_rg_rd_data[3] &&
	     !master_xactor_rg_rd_data[1] ||
	     WILL_FIRE_RL_rl_io_read_req ||
	     WILL_FIRE_RL_rl_start_tlb_refill ||
	     WILL_FIRE_RL_rl_start_cache_refill ||
	     WILL_FIRE_RL_rl_cache_refill_req_loop ;

  // register master_xactor_rg_rd_data
  assign master_xactor_rg_rd_data$D_IN =
	     { mem_master_rresp, mem_master_rdata } ;
  assign master_xactor_rg_rd_data$EN = 1'd1 ;

  // register master_xactor_rg_wr_addr
  assign master_xactor_rg_wr_addr$D_IN =
	     MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 ?
	       MUX_master_xactor_rg_wr_addr$write_1__VAL_1 :
	       MUX_master_xactor_rg_wr_addr$write_1__VAL_2 ;
  assign master_xactor_rg_wr_addr$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d706 ||
	     WILL_FIRE_RL_rl_io_wr_req ;

  // register master_xactor_rg_wr_data
  assign master_xactor_rg_wr_data$D_IN =
	     MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 ?
	       MUX_master_xactor_rg_wr_data$write_1__VAL_1 :
	       MUX_master_xactor_rg_wr_data$write_1__VAL_2 ;
  assign master_xactor_rg_wr_data$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d706 ||
	     WILL_FIRE_RL_rl_io_wr_req ;

  // register master_xactor_rg_wr_resp
  assign master_xactor_rg_wr_resp$D_IN = mem_master_bresp ;
  assign master_xactor_rg_wr_resp$EN =
	     mem_master_bvalid &&
	     !master_xactor_crg_wr_resp_full$port2__read ;

  // register rg_addr
  assign rg_addr$D_IN = req_addr ;
  assign rg_addr$EN = EN_req ;

  // register rg_amo_funct7
  assign rg_amo_funct7$D_IN = req_amo_funct7 ;
  assign rg_amo_funct7$EN = EN_req ;

  // register rg_cset_in_cache
  assign rg_cset_in_cache$D_IN =
	     WILL_FIRE_RL_rl_reset ?
	       MUX_rg_cset_in_cache$write_1__VAL_1 :
	       7'd0 ;
  assign rg_cset_in_cache$EN =
	     WILL_FIRE_RL_rl_reset || WILL_FIRE_RL_rl_start_reset ;

  // register rg_error_during_refill
  assign rg_error_during_refill$D_IN =
	     MUX_rg_error_during_refill$write_1__SEL_1 ;
  assign rg_error_during_refill$EN =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_rg_rd_data[65:64] != 2'd0 ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // register rg_exc_code
  always@(MUX_rg_exc_code$write_1__SEL_1 or
	  MUX_rg_exc_code$write_1__VAL_1 or
	  MUX_rg_exc_code$write_1__SEL_2 or
	  MUX_rg_error_during_refill$write_1__SEL_1 or
	  access_exc_code__h3126 or
	  MUX_rg_exc_code$write_1__SEL_4 or
	  x1_avValue_exc_code__h5167 or
	  MUX_rg_exc_code$write_1__SEL_5 or
	  MUX_rg_exc_code$write_1__VAL_5 or
	  MUX_rg_exc_code$write_1__SEL_6 or
	  MUX_rg_exc_code$write_1__SEL_7 or WILL_FIRE_RL_rl_io_AMO_op_req)
  case (1'b1)
    MUX_rg_exc_code$write_1__SEL_1:
	rg_exc_code$D_IN = MUX_rg_exc_code$write_1__VAL_1;
    MUX_rg_exc_code$write_1__SEL_2: rg_exc_code$D_IN = 4'd5;
    MUX_rg_error_during_refill$write_1__SEL_1:
	rg_exc_code$D_IN = access_exc_code__h3126;
    MUX_rg_exc_code$write_1__SEL_4:
	rg_exc_code$D_IN = x1_avValue_exc_code__h5167;
    MUX_rg_exc_code$write_1__SEL_5:
	rg_exc_code$D_IN = MUX_rg_exc_code$write_1__VAL_5;
    MUX_rg_exc_code$write_1__SEL_6:
	rg_exc_code$D_IN = MUX_rg_exc_code$write_1__VAL_5;
    MUX_rg_exc_code$write_1__SEL_7:
	rg_exc_code$D_IN = MUX_rg_exc_code$write_1__VAL_5;
    WILL_FIRE_RL_rl_io_AMO_op_req: rg_exc_code$D_IN = 4'd7;
    default: rg_exc_code$D_IN = 4'b1010 /* unspecified value */ ;
  endcase
  assign rg_exc_code$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_TO_6_ETC___d106 ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_rg_rd_data[65:64] != 2'd0 ||
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_rg_rd_data[65:64] != 2'd0 ||
	     EN_req &&
	     NOT_req_f3_BITS_1_TO_0_174_EQ_0b0_175_176_AND__ETC___d1195 ||
	     WILL_FIRE_RL_rl_ptw_level_2 &&
	     NOT_master_xactor_rg_rd_data_36_BIT_0_40_41_OR_ETC___d868 ||
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     (!master_xactor_rg_rd_data[0] ||
	      !master_xactor_rg_rd_data[1] && master_xactor_rg_rd_data[2] ||
	      (master_xactor_rg_rd_data[3] || master_xactor_rg_rd_data[1]) &&
	      master_xactor_rg_rd_data[18:10] != 9'd0 ||
	      master_xactor_rg_rd_data[65:64] != 2'd0) ||
	     WILL_FIRE_RL_rl_ptw_level_0 &&
	     (!master_xactor_rg_rd_data[0] ||
	      !master_xactor_rg_rd_data[1] && master_xactor_rg_rd_data[2] ||
	      !master_xactor_rg_rd_data[3] && !master_xactor_rg_rd_data[1] ||
	      master_xactor_rg_rd_data[65:64] != 2'd0) ||
	     WILL_FIRE_RL_rl_io_AMO_op_req ;

  // register rg_f3
  assign rg_f3$D_IN = req_f3 ;
  assign rg_f3$EN = EN_req ;

  // register rg_ld_val
  always@(MUX_rg_ld_val$write_1__SEL_1 or
	  MUX_rg_ld_val$write_1__VAL_1 or
	  WILL_FIRE_RL_rl_io_read_rsp or
	  master_xactor_rg_rd_data or WILL_FIRE_RL_rl_io_AMO_ST_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_ld_val$write_1__SEL_1:
	  rg_ld_val$D_IN = MUX_rg_ld_val$write_1__VAL_1;
      WILL_FIRE_RL_rl_io_read_rsp:
	  rg_ld_val$D_IN = master_xactor_rg_rd_data[63:0];
      WILL_FIRE_RL_rl_io_AMO_ST_req: rg_ld_val$D_IN = 64'd1;
      default: rg_ld_val$D_IN = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rg_ld_val$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d570 ||
	     WILL_FIRE_RL_rl_io_read_rsp ||
	     WILL_FIRE_RL_rl_io_AMO_ST_req ;

  // register rg_lower_word32
  assign rg_lower_word32$D_IN = 32'h0 ;
  assign rg_lower_word32$EN = 1'b0 ;

  // register rg_lower_word32_full
  assign rg_lower_word32_full$D_IN = 1'd0 ;
  assign rg_lower_word32_full$EN =
	     WILL_FIRE_RL_rl_start_cache_refill ||
	     WILL_FIRE_RL_rl_start_reset ;

  // register rg_lrsc_pa
  assign rg_lrsc_pa$D_IN = x1_avValue_pa__h5166 ;
  assign rg_lrsc_pa$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d542 ;

  // register rg_lrsc_valid
  assign rg_lrsc_valid$D_IN =
	     MUX_rg_lrsc_valid$write_1__SEL_2 &&
	     rg_op_6_EQ_0_7_OR_rg_op_6_EQ_2_9_AND_rg_amo_fu_ETC___d397 ;
  assign rg_lrsc_valid$EN =
	     WILL_FIRE_RL_rl_io_read_req && rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d396 ||
	     WILL_FIRE_RL_rl_start_reset ;

  // register rg_mstatus_MXR
  assign rg_mstatus_MXR$D_IN = req_mstatus_MXR ;
  assign rg_mstatus_MXR$EN = EN_req ;

  // register rg_op
  assign rg_op$D_IN = req_op ;
  assign rg_op$EN = EN_req ;

  // register rg_pa
  assign rg_pa$D_IN = EN_req ? req_addr : x1_avValue_pa__h5166 ;
  assign rg_pa$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d372 ||
	     EN_req ;

  // register rg_priv
  assign rg_priv$D_IN = req_priv ;
  assign rg_priv$EN = EN_req ;

  // register rg_pte_pa
  always@(MUX_master_xactor_rg_rd_addr$write_1__SEL_1 or
	  lev_1_pte_pa__h22371 or
	  MUX_master_xactor_rg_rd_addr$write_1__SEL_2 or
	  lev_0_pte_pa__h23397 or
	  WILL_FIRE_RL_rl_start_tlb_refill or lev_2_pte_pa__h21868)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_master_xactor_rg_rd_addr$write_1__SEL_1:
	  rg_pte_pa$D_IN = lev_1_pte_pa__h22371;
      MUX_master_xactor_rg_rd_addr$write_1__SEL_2:
	  rg_pte_pa$D_IN = lev_0_pte_pa__h23397;
      WILL_FIRE_RL_rl_start_tlb_refill: rg_pte_pa$D_IN = lev_2_pte_pa__h21868;
      default: rg_pte_pa$D_IN = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rg_pte_pa$EN =
	     WILL_FIRE_RL_rl_ptw_level_2 &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     master_xactor_rg_rd_data[0] &&
	     !master_xactor_rg_rd_data[2] &&
	     !master_xactor_rg_rd_data[3] &&
	     !master_xactor_rg_rd_data[1] ||
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     master_xactor_rg_rd_data[0] &&
	     !master_xactor_rg_rd_data[2] &&
	     !master_xactor_rg_rd_data[3] &&
	     !master_xactor_rg_rd_data[1] ||
	     WILL_FIRE_RL_rl_start_tlb_refill ;

  // register rg_req_byte_in_cline
  assign rg_req_byte_in_cline$D_IN =
	     WILL_FIRE_RL_rl_cache_refill_req_loop ?
	       MUX_rg_req_byte_in_cline$write_1__VAL_1 :
	       64'd8 ;
  assign rg_req_byte_in_cline$EN =
	     WILL_FIRE_RL_rl_cache_refill_req_loop ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // register rg_requesting_cline
  always@(WILL_FIRE_RL_rl_cache_refill_req_loop or
	  rg_req_byte_in_cline or
	  WILL_FIRE_RL_rl_start_reset or WILL_FIRE_RL_rl_start_cache_refill)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_cache_refill_req_loop:
	  rg_requesting_cline$D_IN = rg_req_byte_in_cline != 64'd56;
      WILL_FIRE_RL_rl_start_reset: rg_requesting_cline$D_IN = 1'd0;
      WILL_FIRE_RL_rl_start_cache_refill: rg_requesting_cline$D_IN = 1'd1;
      default: rg_requesting_cline$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign rg_requesting_cline$EN =
	     WILL_FIRE_RL_rl_cache_refill_req_loop ||
	     WILL_FIRE_RL_rl_start_reset ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // register rg_satp
  assign rg_satp$D_IN = req_satp ;
  assign rg_satp$EN = EN_req ;

  // register rg_sstatus_SUM
  assign rg_sstatus_SUM$D_IN = req_sstatus_SUM ;
  assign rg_sstatus_SUM$EN = EN_req ;

  // register rg_st_amo_val
  assign rg_st_amo_val$D_IN =
	     EN_req ? req_st_value : _theResult_____1__h6421 ;
  assign rg_st_amo_val$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d800 ||
	     EN_req ;

  // register rg_state
  always@(EN_tlb_flush or
	  WILL_FIRE_RL_rl_start_cache_refill or
	  EN_req or
	  MUX_rg_state$write_1__VAL_3 or
	  WILL_FIRE_RL_rl_start_tlb_refill or
	  WILL_FIRE_RL_rl_io_wr_req or
	  WILL_FIRE_RL_rl_io_read_rsp or
	  MUX_rg_state$write_1__VAL_6 or
	  WILL_FIRE_RL_rl_io_read_req or
	  MUX_rg_state$write_1__SEL_8 or
	  MUX_rg_state$write_1__VAL_8 or
	  MUX_rg_state$write_1__SEL_9 or
	  MUX_rg_state$write_1__VAL_9 or
	  WILL_FIRE_RL_rl_ptw_level_0 or
	  MUX_rg_state$write_1__VAL_10 or
	  WILL_FIRE_RL_rl_ptw_level_1 or
	  MUX_rg_state$write_1__VAL_11 or
	  WILL_FIRE_RL_rl_ptw_level_2 or
	  MUX_rg_state$write_1__VAL_12 or
	  WILL_FIRE_RL_rl_start_reset or
	  WILL_FIRE_RL_rl_io_AMO_op_req or
	  WILL_FIRE_RL_rl_io_AMO_ST_req or
	  WILL_FIRE_RL_rl_rereq or MUX_rg_state$write_1__SEL_17)
  case (1'b1)
    EN_tlb_flush: rg_state$D_IN = 4'd2;
    WILL_FIRE_RL_rl_start_cache_refill: rg_state$D_IN = 4'd10;
    EN_req: rg_state$D_IN = MUX_rg_state$write_1__VAL_3;
    WILL_FIRE_RL_rl_start_tlb_refill: rg_state$D_IN = 4'd6;
    WILL_FIRE_RL_rl_io_wr_req: rg_state$D_IN = 4'd12;
    WILL_FIRE_RL_rl_io_read_rsp: rg_state$D_IN = MUX_rg_state$write_1__VAL_6;
    WILL_FIRE_RL_rl_io_read_req: rg_state$D_IN = 4'd14;
    MUX_rg_state$write_1__SEL_8: rg_state$D_IN = MUX_rg_state$write_1__VAL_8;
    MUX_rg_state$write_1__SEL_9: rg_state$D_IN = MUX_rg_state$write_1__VAL_9;
    WILL_FIRE_RL_rl_ptw_level_0: rg_state$D_IN = MUX_rg_state$write_1__VAL_10;
    WILL_FIRE_RL_rl_ptw_level_1: rg_state$D_IN = MUX_rg_state$write_1__VAL_11;
    WILL_FIRE_RL_rl_ptw_level_2: rg_state$D_IN = MUX_rg_state$write_1__VAL_12;
    WILL_FIRE_RL_rl_start_reset: rg_state$D_IN = 4'd1;
    WILL_FIRE_RL_rl_io_AMO_op_req: rg_state$D_IN = 4'd4;
    WILL_FIRE_RL_rl_io_AMO_ST_req: rg_state$D_IN = 4'd12;
    WILL_FIRE_RL_rl_rereq: rg_state$D_IN = 4'd3;
    MUX_rg_state$write_1__SEL_17: rg_state$D_IN = 4'd2;
    default: rg_state$D_IN = 4'b1010 /* unspecified value */ ;
  endcase
  assign rg_state$EN =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[2:0] == 3'd7 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_TO_6_ETC___d362 ||
	     WILL_FIRE_RL_rl_ptw_level_2 ||
	     WILL_FIRE_RL_rl_ptw_level_1 ||
	     WILL_FIRE_RL_rl_ptw_level_0 ||
	     WILL_FIRE_RL_rl_io_read_rsp ||
	     EN_req ||
	     WILL_FIRE_RL_rl_start_reset ||
	     EN_tlb_flush ||
	     WILL_FIRE_RL_rl_rereq ||
	     WILL_FIRE_RL_rl_io_AMO_op_req ||
	     WILL_FIRE_RL_rl_start_tlb_refill ||
	     WILL_FIRE_RL_rl_start_cache_refill ||
	     WILL_FIRE_RL_rl_io_AMO_ST_req ||
	     WILL_FIRE_RL_rl_io_wr_req ||
	     WILL_FIRE_RL_rl_io_read_req ;

  // register rg_word64_set_in_cache
  assign rg_word64_set_in_cache$D_IN =
	     MUX_ram_word64_set$b_put_1__SEL_2 ?
	       MUX_ram_word64_set$b_put_2__VAL_2 :
	       MUX_ram_word64_set$b_put_2__VAL_4 ;
  assign rg_word64_set_in_cache$EN =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[2:0] != 3'd7 ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // submodule f_reset_reqs
  assign f_reset_reqs$D_IN = !EN_server_reset_request_put ;
  assign f_reset_reqs$ENQ =
	     EN_server_reset_request_put || EN_server_flush_request_put ;
  assign f_reset_reqs$DEQ = MUX_rg_state$write_1__SEL_17 ;
  assign f_reset_reqs$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$D_IN = f_reset_reqs$D_OUT ;
  assign f_reset_rsps$ENQ =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 ;
  assign f_reset_rsps$DEQ =
	     EN_server_flush_response_get || EN_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule ram_state_and_ctag_cset
  assign ram_state_and_ctag_cset$ADDRA =
	     WILL_FIRE_RL_rl_start_cache_refill ?
	       rg_addr[12:6] :
	       rg_cset_in_cache ;
  assign ram_state_and_ctag_cset$ADDRB =
	     MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       req_addr[12:6] :
	       rg_addr[12:6] ;
  assign ram_state_and_ctag_cset$DIA =
	     WILL_FIRE_RL_rl_start_cache_refill ?
	       MUX_ram_state_and_ctag_cset$a_put_3__VAL_1 :
	       52'h2AAAAAAAAAAAA ;
  assign ram_state_and_ctag_cset$DIB =
	     MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       52'hAAAAAAAAAAAAA /* unspecified value */  :
	       52'hAAAAAAAAAAAAA /* unspecified value */  ;
  assign ram_state_and_ctag_cset$WEA = 1'd1 ;
  assign ram_state_and_ctag_cset$WEB = 1'd0 ;
  assign ram_state_and_ctag_cset$ENA =
	     WILL_FIRE_RL_rl_start_cache_refill || WILL_FIRE_RL_rl_reset ;
  assign ram_state_and_ctag_cset$ENB =
	     EN_req &&
	     req_f3_BITS_1_TO_0_174_EQ_0b0_175_OR_req_f3_BI_ETC___d1204 ||
	     WILL_FIRE_RL_rl_rereq ;

  // submodule ram_word64_set
  assign ram_word64_set$ADDRA =
	     MUX_ram_word64_set$a_put_1__SEL_1 ?
	       rg_word64_set_in_cache :
	       rg_addr[12:3] ;
  always@(MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  req_addr or
	  MUX_ram_word64_set$b_put_1__SEL_2 or
	  MUX_ram_word64_set$b_put_2__VAL_2 or
	  WILL_FIRE_RL_rl_rereq or
	  rg_addr or
	  WILL_FIRE_RL_rl_start_cache_refill or
	  MUX_ram_word64_set$b_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  ram_word64_set$ADDRB = req_addr[12:3];
      MUX_ram_word64_set$b_put_1__SEL_2:
	  ram_word64_set$ADDRB = MUX_ram_word64_set$b_put_2__VAL_2;
      WILL_FIRE_RL_rl_rereq: ram_word64_set$ADDRB = rg_addr[12:3];
      WILL_FIRE_RL_rl_start_cache_refill:
	  ram_word64_set$ADDRB = MUX_ram_word64_set$b_put_2__VAL_4;
      default: ram_word64_set$ADDRB = 10'b1010101010 /* unspecified value */ ;
    endcase
  end
  assign ram_word64_set$DIA =
	     MUX_ram_word64_set$a_put_1__SEL_1 ?
	       master_xactor_rg_rd_data[63:0] :
	       MUX_ram_word64_set$a_put_3__VAL_2 ;
  always@(MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  MUX_ram_word64_set$b_put_1__SEL_2 or
	  WILL_FIRE_RL_rl_rereq or WILL_FIRE_RL_rl_start_cache_refill)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      MUX_ram_word64_set$b_put_1__SEL_2:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_rl_rereq:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_rl_start_cache_refill:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      default: ram_word64_set$DIB =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ram_word64_set$WEA = 1'd1 ;
  assign ram_word64_set$WEB = 1'd0 ;
  assign ram_word64_set$ENA =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d583 ;
  assign ram_word64_set$ENB =
	     EN_req &&
	     req_f3_BITS_1_TO_0_174_EQ_0b0_175_OR_req_f3_BI_ETC___d1204 ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[2:0] != 3'd7 ||
	     WILL_FIRE_RL_rl_rereq ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // submodule soc_map
  assign soc_map$m_is_IO_addr_addr = x1_avValue_pa__h5166 ;

  // submodule tlb
  assign tlb$insert_asid = rg_satp[59:44] ;
  always@(MUX_tlb$insert_1__SEL_1 or
	  MUX_tlb$insert_1__SEL_2 or MUX_tlb$insert_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_tlb$insert_1__SEL_1: tlb$insert_level = 2'd2;
      MUX_tlb$insert_1__SEL_2: tlb$insert_level = 2'd1;
      MUX_tlb$insert_1__SEL_3: tlb$insert_level = 2'd0;
      default: tlb$insert_level = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign tlb$insert_pte = master_xactor_rg_rd_data[63:0] ;
  assign tlb$insert_pte_pa = rg_pte_pa ;
  assign tlb$insert_vpn = rg_addr[38:12] ;
  assign tlb$lookup_asid = rg_satp[59:44] ;
  assign tlb$lookup_vpn = rg_addr[38:12] ;
  assign tlb$EN_flush = WILL_FIRE_RL_rl_start_reset || EN_tlb_flush ;
  assign tlb$EN_insert =
	     WILL_FIRE_RL_rl_ptw_level_2 &&
	     master_xactor_rg_rd_data_36_BITS_65_TO_64_37_E_ETC___d911 ||
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     master_xactor_rg_rd_data[0] &&
	     (master_xactor_rg_rd_data[1] || !master_xactor_rg_rd_data[2]) &&
	     (master_xactor_rg_rd_data[3] || master_xactor_rg_rd_data[1]) &&
	     master_xactor_rg_rd_data[18:10] == 9'd0 ||
	     WILL_FIRE_RL_rl_ptw_level_0 &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     master_xactor_rg_rd_data[0] &&
	     (master_xactor_rg_rd_data[1] || !master_xactor_rg_rd_data[2]) &&
	     (master_xactor_rg_rd_data[3] || master_xactor_rg_rd_data[1]) ;

  // remaining internal signals
  assign IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d255 =
	     (x1_avValue_pa__h5166[2:0] == 3'h0) ?
	       CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_39_ETC__q21 :
	       NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS__ETC___d254 ;
  assign IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_1_E_ETC___d521 =
	     (rg_addr[2:0] == 3'h0) ? 64'd1 : 64'd0 ;
  assign IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_NOT_ETC___d175 =
	     (rg_addr[2:0] == 3'h0) ?
	       NOT_ram_state_and_ctag_cset_b_read__31_BIT_51__ETC___d157 :
	       rg_addr[2:0] != 3'h4 ||
	       NOT_ram_state_and_ctag_cset_b_read__31_BIT_51__ETC___d157 ;
  assign IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_ram_ETC___d507 =
	     (rg_addr[2:0] == 3'h0) ? word64__h6284 : 64'd0 ;
  assign IF_rg_f3_39_EQ_0b10_70_THEN_SEXT_rg_st_amo_val_ETC___d638 =
	     (rg_f3 == 3'b010) ?
	       { {32{rg_st_amo_val_BITS_31_TO_0__q24[31]}},
		 rg_st_amo_val_BITS_31_TO_0__q24 } :
	       rg_st_amo_val ;
  assign IF_rg_op_6_EQ_0_7_OR_rg_op_6_EQ_2_9_AND_rg_amo_ETC___d267 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
	       !ram_state_and_ctag_cset$DOB[51] ||
	       !ram_state_and_ctag_cset_b_read__31_BITS_50_TO__ETC___d136 ||
	       IF_rg_f3_39_EQ_0b0_40_OR_rg_f3_39_EQ_0b100_41__ETC___d183 :
	       IF_rg_op_6_EQ_1_85_OR_rg_op_6_EQ_2_9_AND_rg_am_ETC___d266 ;
  assign IF_rg_op_6_EQ_0_7_OR_rg_op_6_EQ_2_9_AND_rg_amo_ETC___d365 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
	       4'd9 :
	       IF_rg_op_6_EQ_1_85_OR_rg_op_6_EQ_2_9_AND_rg_am_ETC___d364 ;
  assign IF_rg_op_6_EQ_1_85_OR_rg_op_6_EQ_2_9_AND_rg_am_ETC___d266 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       rg_op_6_EQ_2_9_AND_rg_amo_funct7_1_BITS_6_TO_2_ETC___d210 :
	       !ram_state_and_ctag_cset$DOB[51] ||
	       !ram_state_and_ctag_cset_b_read__31_BITS_50_TO__ETC___d136 ||
	       !master_xactor_crg_wr_addr_full$port2__read &&
	       !master_xactor_crg_wr_data_full$port2__read &&
	       IF_rg_f3_39_EQ_0b0_40_THEN_IF_IF_rg_priv_9_ULE_ETC___d259 &&
	       IF_rg_f3_39_EQ_0b0_40_OR_rg_f3_39_EQ_0b100_41__ETC___d183 &&
	       IF_rg_f3_39_BITS_1_TO_0_00_EQ_0b0_01_OR_rg_f3__ETC___d207 ;
  assign IF_rg_op_6_EQ_1_85_OR_rg_op_6_EQ_2_9_AND_rg_am_ETC___d364 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       4'd12 :
	       ((!ram_state_and_ctag_cset$DOB[51] ||
		 !ram_state_and_ctag_cset_b_read__31_BITS_50_TO__ETC___d136) ?
		  4'd9 :
		  4'd12) ;
  assign IF_rg_op_6_EQ_1_85_OR_rg_op_6_EQ_2_9_AND_rg_am_ETC___d717 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       mem_req_wr_data_wdata__h19944 :
	       mem_req_wr_data_wdata__h20728 ;
  assign IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_T_ETC___d269 =
	     rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_TO_6_ETC___d106 ?
	       tlb$RDY_lookup :
	       soc_map$m_is_IO_addr ||
	       IF_rg_op_6_EQ_0_7_OR_rg_op_6_EQ_2_9_AND_rg_amo_ETC___d267 ;
  assign IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_T_ETC___d367 =
	     rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_TO_6_ETC___d106 ?
	       4'd4 :
	       (soc_map$m_is_IO_addr ?
		  4'd13 :
		  IF_rg_op_6_EQ_0_7_OR_rg_op_6_EQ_2_9_AND_rg_amo_ETC___d365) ;
  assign IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_T_ETC___d379 =
	     x1_avValue_pa__h5166 == rg_lrsc_pa ;
  assign NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS__ETC___d246 =
	     x1_avValue_pa__h5166[2:0] != 3'h7 ||
	     CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_39_ETC__q21 ;
  assign NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS__ETC___d251 =
	     x1_avValue_pa__h5166[2:0] != 3'h6 ||
	     CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_39_ETC__q21 ;
  assign NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS__ETC___d254 =
	     x1_avValue_pa__h5166[2:0] != 3'h4 ||
	     CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_39_ETC__q21 ;
  assign NOT_cfg_verbosity_read__0_ULE_2_006___d1007 = cfg_verbosity > 4'd2 ;
  assign NOT_dmem_not_imem_1_AND_rg_op_6_EQ_0_7_OR_rg_o_ETC___d298 =
	     !dmem_not_imem &&
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     tlb$lookup[69] ;
  assign NOT_dmem_not_imem_1_OR_NOT_rg_op_6_EQ_0_7_8_AN_ETC___d88 =
	     !dmem_not_imem ||
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) ||
	     !tlb_lookup_rg_satp_2_BITS_59_TO_44_9_rg_addr_0_ETC___d86 ;
  assign NOT_master_xactor_rg_rd_data_36_BIT_0_40_41_OR_ETC___d868 =
	     !master_xactor_rg_rd_data[0] ||
	     !master_xactor_rg_rd_data[1] && master_xactor_rg_rd_data[2] ||
	     (master_xactor_rg_rd_data[3] || master_xactor_rg_rd_data[1]) &&
	     (master_xactor_rg_rd_data[27:19] != 9'd0 ||
	      master_xactor_rg_rd_data[18:10] != 9'd0) ||
	     master_xactor_rg_rd_data[65:64] != 2'd0 ;
  assign NOT_ram_state_and_ctag_cset_b_read__31_BIT_51__ETC___d157 =
	     !ram_state_and_ctag_cset$DOB[51] || !rg_priv_9_ULE_0b1___d40 ||
	     rg_satp[63:60] != 4'd8 ||
	     tlb$RDY_lookup ;
  assign NOT_ram_state_and_ctag_cset_b_read__31_BIT_51__ETC___d381 =
	     (!ram_state_and_ctag_cset$DOB[51] ||
	      !ram_state_and_ctag_cset_b_read__31_BITS_50_TO__ETC___d136) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_T_ETC___d379 ;
  assign NOT_req_f3_BITS_1_TO_0_174_EQ_0b0_175_176_AND__ETC___d1195 =
	     req_f3[1:0] != 2'b0 && (req_f3[1:0] != 2'b01 || req_addr[0]) &&
	     (req_f3[1:0] != 2'b10 || req_addr[1:0] != 2'b0) &&
	     (req_f3[1:0] != 2'b11 || req_addr[2:0] != 3'b0) ;
  assign NOT_rg_f3_39_EQ_0b11_76_77_OR_rg_amo_funct7_1__ETC___d256 =
	     rg_f3 != 3'b011 ||
	     CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_39_ETC__q21 ;
  assign NOT_rg_op_6_EQ_0_7_8_AND_NOT_rg_op_6_EQ_2_9_0__ETC___d358 =
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_91_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d192) ;
  assign NOT_rg_op_6_EQ_1_85_87_AND_NOT_rg_op_6_EQ_2_9__ETC___d390 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[51] &&
	     ram_state_and_ctag_cset_b_read__31_BITS_50_TO__ETC___d136 &&
	     IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_T_ETC___d379 ;
  assign NOT_rg_op_6_EQ_1_85_87_AND_NOT_rg_op_6_EQ_2_9__ETC___d578 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[51] &&
	     ram_state_and_ctag_cset_b_read__31_BITS_50_TO__ETC___d136 ;
  assign NOT_rg_op_6_EQ_1_85_87_AND_NOT_rg_op_6_EQ_2_9__ETC___d792 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     (!ram_state_and_ctag_cset$DOB[51] ||
	      !ram_state_and_ctag_cset_b_read__31_BITS_50_TO__ETC___d136) &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_op_6_EQ_1_85_87_AND_NOT_rg_op_6_EQ_2_9__ETC___d802 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[51] &&
	     ram_state_and_ctag_cset_b_read__31_BITS_50_TO__ETC___d136 &&
	     ctr_wr_rsps_pending_crg == 4'd15 ;
  assign NOT_rg_op_6_EQ_1_85_87_AND_NOT_rg_op_6_EQ_2_9__ETC___d810 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[51] &&
	     ram_state_and_ctag_cset_b_read__31_BITS_50_TO__ETC___d136 &&
	     IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_T_ETC___d379 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_op_6_EQ_1_85_87_AND_NOT_rg_op_6_EQ_2_9__ETC___d815 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[51] &&
	     ram_state_and_ctag_cset_b_read__31_BITS_50_TO__ETC___d136 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_op_6_EQ_2_9_0_OR_NOT_rg_amo_funct7_1_BI_ETC___d576 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_91_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d192) &&
	     ram_state_and_ctag_cset$DOB[51] &&
	     ram_state_and_ctag_cset_b_read__31_BITS_50_TO__ETC___d136 ;
  assign NOT_rg_op_6_EQ_2_9_0_OR_NOT_rg_amo_funct7_1_BI_ETC___d751 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_91_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d192) &&
	     ram_state_and_ctag_cset$DOB[51] &&
	     ram_state_and_ctag_cset_b_read__31_BITS_50_TO__ETC___d136 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_op_6_EQ_2_9_0_OR_NOT_rg_amo_funct7_1_BI_ETC___d757 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_91_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d192) &&
	     (!ram_state_and_ctag_cset$DOB[51] ||
	      !ram_state_and_ctag_cset_b_read__31_BITS_50_TO__ETC___d136) &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_op_6_EQ_2_9_0_OR_NOT_rg_amo_funct7_1_BI_ETC___d763 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_91_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d192) &&
	     cfg_verbosity != 4'd0 ;
  assign NOT_rg_op_6_EQ_2_9_0_OR_NOT_rg_amo_funct7_1_BI_ETC___d770 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_91_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d192) &&
	     ctr_wr_rsps_pending_crg == 4'd15 ;
  assign NOT_rg_op_6_EQ_2_9_0_OR_NOT_rg_amo_funct7_1_BI_ETC___d778 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_91_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d192) &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_priv_9_EQ_0b0_6_91_OR_tlb_lookup_rg_sat_ETC___d305 =
	     (rg_priv != 2'b0 || tlb$lookup[70]) &&
	     (rg_priv != 2'b01 || !tlb$lookup[70] || rg_sstatus_SUM) &&
	     (NOT_dmem_not_imem_1_AND_rg_op_6_EQ_0_7_OR_rg_o_ETC___d298 ||
	      dmem_not_imem_AND_rg_op_6_EQ_0_7_OR_rg_op_6_EQ_ETC___d300 ||
	      dmem_not_imem && rg_op != 2'd0 &&
	      (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	      tlb$lookup[68]) ;
  assign NOT_rg_priv_9_EQ_0b0_6_91_OR_tlb_lookup_rg_sat_ETC___d337 =
	     (rg_priv != 2'b0 || tlb$lookup[70]) &&
	     (rg_priv != 2'b01 || !tlb$lookup[70] || rg_sstatus_SUM) &&
	     dmem_not_imem &&
	     tlb$lookup[68] ;
  assign NOT_rg_priv_9_EQ_0b0_6_91_OR_tlb_lookup_rg_sat_ETC___d527 =
	     (rg_priv != 2'b0 || tlb$lookup[70]) &&
	     (rg_priv != 2'b01 || !tlb$lookup[70] || rg_sstatus_SUM) &&
	     (!dmem_not_imem && tlb$lookup[69] ||
	      dmem_not_imem &&
	      tlb_lookup_rg_satp_2_BITS_59_TO_44_9_rg_addr_0_ETC___d86) ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d271 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$RDY_lookup) &&
	     (rg_priv_9_ULE_0b1___d40 && rg_satp[63:60] == 4'd8 &&
	      !tlb$lookup[130] ||
	      IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_T_ETC___d269) ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d310 =
	     !rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	     tlb$lookup[130] &&
	     NOT_rg_priv_9_EQ_0b0_6_91_OR_tlb_lookup_rg_sat_ETC___d305 &&
	     tlb_lookup_rg_satp_2_BITS_59_TO_44_9_rg_addr_0_ETC___d307 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d334 =
	     !rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	     !tlb$lookup[130] ||
	     rg_priv_9_EQ_0b0_6_AND_NOT_tlb_lookup_rg_satp__ETC___d322 ||
	     !tlb$lookup[72] ||
	     !tlb$lookup[73] ||
	     pte___2__h5665[7] ||
	     rg_op == 2'd0 ||
	     rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d371 =
	     !rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	     !tlb$lookup[130] ||
	     NOT_rg_priv_9_EQ_0b0_6_91_OR_tlb_lookup_rg_sat_ETC___d305 &&
	     tlb_lookup_rg_satp_2_BITS_59_TO_44_9_rg_addr_0_ETC___d307 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d372 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d371 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d375 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d371 &&
	     soc_map$m_is_IO_addr &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d396 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d371 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op_6_EQ_0_7_OR_rg_op_6_EQ_2_9_AND_rg_amo_fu_ETC___d393 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d403 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d371 &&
	     !soc_map$m_is_IO_addr &&
	     (rg_op_6_EQ_0_7_OR_rg_op_6_EQ_2_9_AND_rg_amo_fu_ETC___d397 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 &&
	      lrsc_result__h14150) ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d530 =
	     !rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	     !tlb$lookup[130] ||
	     NOT_rg_priv_9_EQ_0b0_6_91_OR_tlb_lookup_rg_sat_ETC___d527 &&
	     tlb$lookup[72] ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d535 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d530 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op_6_EQ_0_7_OR_rg_op_6_EQ_2_9_AND_rg_amo_fu_ETC___d532 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d542 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d530 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     ram_state_and_ctag_cset$DOB[51] &&
	     ram_state_and_ctag_cset_b_read__31_BITS_50_TO__ETC___d136 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d548 =
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d530 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     ram_state_and_ctag_cset$DOB[51] &&
	     ram_state_and_ctag_cset_b_read__31_BITS_50_TO__ETC___d136 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d554 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d530 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op_6_EQ_0_7_OR_rg_op_6_EQ_2_9_AND_rg_amo_fu_ETC___d551 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d561 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d530 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7_1_BITS_6_TO_2_2_EQ_0b10_3_AND_NO_ETC___d557 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d564 =
	     !rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	     !tlb$lookup[130] ||
	     NOT_rg_priv_9_EQ_0b0_6_91_OR_tlb_lookup_rg_sat_ETC___d337 &&
	     tlb$lookup[72] &&
	     tlb$lookup[73] ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d570 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d564 &&
	     NOT_soc_map_m_is_IO_addr_IF_rg_priv_9_ULE_0b1__ETC___d568 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d583 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d564 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     rg_op_6_EQ_1_85_OR_rg_op_6_EQ_2_9_AND_rg_amo_f_ETC___d579 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d706 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d564 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     (rg_op_6_EQ_1_85_OR_rg_op_6_EQ_2_9_AND_rg_amo_f_ETC___d701 ||
	      NOT_rg_op_6_EQ_1_85_87_AND_NOT_rg_op_6_EQ_2_9__ETC___d578) ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d732 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d564 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op == 2'd1 &&
	     IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_T_ETC___d379 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d738 =
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d564 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 &&
	     rg_lrsc_valid &&
	     !rg_lrsc_pa_91_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d192 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d745 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d564 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 &&
	     !rg_lrsc_valid &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d750 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d564 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d756 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d564 &&
	     !soc_map$m_is_IO_addr &&
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_6_EQ_2_9_0_OR_NOT_rg_amo_funct7_1_BI_ETC___d751 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d762 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d564 &&
	     !soc_map$m_is_IO_addr &&
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_6_EQ_2_9_0_OR_NOT_rg_amo_funct7_1_BI_ETC___d757 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d768 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d564 &&
	     !soc_map$m_is_IO_addr &&
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_6_EQ_2_9_0_OR_NOT_rg_amo_funct7_1_BI_ETC___d763 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d775 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d564 &&
	     !soc_map$m_is_IO_addr &&
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_6_EQ_2_9_0_OR_NOT_rg_amo_funct7_1_BI_ETC___d770 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d783 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d564 &&
	     !soc_map$m_is_IO_addr &&
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_6_EQ_2_9_0_OR_NOT_rg_amo_funct7_1_BI_ETC___d778 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d789 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d564 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h14150 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d796 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d564 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_6_EQ_1_85_87_AND_NOT_rg_op_6_EQ_2_9__ETC___d792 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d800 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d564 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_6_EQ_1_85_87_AND_NOT_rg_op_6_EQ_2_9__ETC___d578 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d806 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d564 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_6_EQ_1_85_87_AND_NOT_rg_op_6_EQ_2_9__ETC___d802 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d814 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d564 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_6_EQ_1_85_87_AND_NOT_rg_op_6_EQ_2_9__ETC___d810 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d819 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d564 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_6_EQ_1_85_87_AND_NOT_rg_op_6_EQ_2_9__ETC___d815 ;
  assign NOT_soc_map_m_is_IO_addr_IF_rg_priv_9_ULE_0b1__ETC___d568 =
	     !soc_map$m_is_IO_addr && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     (rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 ||
	      rg_op != 2'd1 && ram_state_and_ctag_cset$DOB[51] &&
	      ram_state_and_ctag_cset_b_read__31_BITS_50_TO__ETC___d136) ;
  assign NOT_tlb_lookup_rg_satp_2_BITS_59_TO_44_9_rg_ad_ETC___d103 =
	     !tlb$lookup[72] ||
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     !tlb$lookup[73] ;
  assign _theResult_____1__h6421 =
	     (rg_f3 == 3'b010) ? st_val__h14579 : _theResult_____2__h6420 ;
  assign _theResult___fst__h20062 = rg_st_amo_val << shift_bits__h19742 ;
  assign _theResult___fst__h20846 =
	     _theResult_____1__h6421 << shift_bits__h19742 ;
  assign _theResult___fst__h29103 = rg_st_amo_val << shift_bits__h28907 ;
  assign _theResult___fst__h5255 =
	     tlb$lookup[130] ? _theResult___fst__h5326 : rg_addr ;
  assign _theResult___fst__h5326 =
	     (rg_priv_9_EQ_0b0_6_AND_NOT_tlb_lookup_rg_satp__ETC___d97 ||
	      NOT_tlb_lookup_rg_satp_2_BITS_59_TO_44_9_rg_ad_ETC___d103) ?
	       rg_addr :
	       _theResult___fst__h5667 ;
  assign _theResult___snd_fst__h5257 =
	     tlb$lookup[130] ?
	       _theResult___snd_fst__h5328 :
	       tlb$lookup[129:66] ;
  assign _theResult___snd_fst__h5328 =
	     (rg_priv_9_EQ_0b0_6_AND_NOT_tlb_lookup_rg_satp__ETC___d97 ||
	      NOT_tlb_lookup_rg_satp_2_BITS_59_TO_44_9_rg_ad_ETC___d103) ?
	       tlb$lookup[129:66] :
	       _theResult___snd_fst__h5896 ;
  assign _theResult___snd_fst__h5896 =
	     (!pte___2__h5665[7] && rg_op != 2'd0 &&
	      (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010)) ?
	       pte___1__h5973 :
	       pte___2__h5665 ;
  assign access_exc_code__h3126 =
	     dmem_not_imem ?
	       ((rg_op == 2'd0 ||
		 rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
		  4'd5 :
		  4'd7) :
	       4'd1 ;
  assign b__h21859 =
	     ctr_wr_rsps_pending_crg$EN_port0__write ?
	       ctr_wr_rsps_pending_crg$port0__write_1 :
	       ctr_wr_rsps_pending_crg ;
  assign cfg_verbosity_read__0_ULE_1___d11 = cfg_verbosity <= 4'd1 ;
  assign cline_addr__h25554 = { rg_pa[63:6], 6'd0 } ;
  assign cline_fabric_addr__h25555 =
	     cline_addr__h25554 | rg_req_byte_in_cline ;
  assign dmem_not_imem_AND_rg_op_6_EQ_0_7_OR_rg_op_6_EQ_ETC___d300 =
	     dmem_not_imem &&
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     tlb_lookup_rg_satp_2_BITS_59_TO_44_9_rg_addr_0_ETC___d86 ;
  assign dmem_not_imem_OR_NOT_rg_op_6_EQ_0_7_8_AND_NOT__ETC___d80 =
	     dmem_not_imem ||
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) ||
	     !tlb$lookup[69] ;
  assign exc_code___1__h5565 = x1_avValue_exc_code__h5167 ;
  assign fabric_addr__h19686 = { x1_avValue_pa__h5166[63:3], 3'd0 } ;
  assign io_req_wr_addr_awaddr__h28899 = { rg_pa[63:3], 3'd0 } ;
  assign lev_0_pte_pa__h23397 = lev_1_PTN_pa__h22369 + vpn_0_pa__h23396 ;
  assign lev_0_pte_pa_w64_fa__h23399 = { lev_0_pte_pa__h23397[63:3], 3'b0 } ;
  assign lev_1_PTN_pa__h22369 = { 8'd0, x__h22596 } ;
  assign lev_1_pte_pa__h22371 = lev_1_PTN_pa__h22369 + vpn_1_pa__h22370 ;
  assign lev_1_pte_pa_w64_fa__h22373 = { lev_1_pte_pa__h22371[63:3], 3'b0 } ;
  assign lev_2_pte_pa__h21868 = satp_pa__h2383 + vpn_2_pa__h21867 ;
  assign lev_2_pte_pa_w64_fa__h21870 = { lev_2_pte_pa__h21868[63:3], 3'b0 } ;
  assign lrsc_result__h14150 =
	     !rg_lrsc_valid ||
	     !rg_lrsc_pa_91_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d192 ;
  assign master_xactor_crg_rd_data_full_port1__read__35_ETC___d862 =
	     master_xactor_crg_rd_data_full$port1__read &&
	     (master_xactor_rg_rd_data[65:64] != 2'd0 ||
	      !master_xactor_rg_rd_data[0] ||
	      !master_xactor_rg_rd_data[1] && master_xactor_rg_rd_data[2] ||
	      ((!master_xactor_rg_rd_data[3] &&
		!master_xactor_rg_rd_data[1]) ?
		 !master_xactor_crg_rd_addr_full$port2__read :
		 master_xactor_rg_rd_data[27:19] != 9'd0 ||
		 master_xactor_rg_rd_data[18:10] != 9'd0 ||
		 tlb$RDY_insert)) ;
  assign master_xactor_crg_rd_data_full_port1__read__35_ETC___d925 =
	     master_xactor_crg_rd_data_full$port1__read &&
	     (master_xactor_rg_rd_data[65:64] != 2'd0 ||
	      !master_xactor_rg_rd_data[0] ||
	      !master_xactor_rg_rd_data[1] && master_xactor_rg_rd_data[2] ||
	      ((!master_xactor_rg_rd_data[3] &&
		!master_xactor_rg_rd_data[1]) ?
		 !master_xactor_crg_rd_addr_full$port2__read :
		 master_xactor_rg_rd_data[18:10] != 9'd0 || tlb$RDY_insert)) ;
  assign master_xactor_rg_rd_data_36_BITS_65_TO_64_37_E_ETC___d911 =
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     master_xactor_rg_rd_data[0] &&
	     (master_xactor_rg_rd_data[1] || !master_xactor_rg_rd_data[2]) &&
	     (master_xactor_rg_rd_data[3] || master_xactor_rg_rd_data[1]) &&
	     master_xactor_rg_rd_data[27:19] == 9'd0 &&
	     master_xactor_rg_rd_data[18:10] == 9'd0 ;
  assign master_xactor_rg_rd_data_36_BITS_65_TO_64_37_E_ETC___d950 =
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     master_xactor_rg_rd_data[0] &&
	     (master_xactor_rg_rd_data[1] || !master_xactor_rg_rd_data[2]) &&
	     (master_xactor_rg_rd_data[3] || master_xactor_rg_rd_data[1]) &&
	     master_xactor_rg_rd_data[18:10] == 9'd0 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign master_xactor_rg_rd_data_36_BITS_65_TO_64_37_E_ETC___d956 =
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     master_xactor_rg_rd_data[0] &&
	     (master_xactor_rg_rd_data[1] || !master_xactor_rg_rd_data[2]) &&
	     (master_xactor_rg_rd_data[3] || master_xactor_rg_rd_data[1]) &&
	     master_xactor_rg_rd_data[18:10] != 9'd0 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign master_xactor_rg_rd_data_36_BIT_3_47_OR_master_ETC___d901 =
	     (master_xactor_rg_rd_data[3] || master_xactor_rg_rd_data[1]) &&
	     (master_xactor_rg_rd_data[27:19] != 9'd0 ||
	      master_xactor_rg_rd_data[18:10] != 9'd0) &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign master_xactor_rg_rd_data_36_BIT_3_47_OR_master_ETC___d913 =
	     (master_xactor_rg_rd_data[3] || master_xactor_rg_rd_data[1]) &&
	     master_xactor_rg_rd_data[27:19] == 9'd0 &&
	     master_xactor_rg_rd_data[18:10] == 9'd0 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign master_xactor_rg_rd_data_BITS_15_TO_0__q3 =
	     master_xactor_rg_rd_data[15:0] ;
  assign master_xactor_rg_rd_data_BITS_31_TO_0__q5 =
	     master_xactor_rg_rd_data[31:0] ;
  assign master_xactor_rg_rd_data_BITS_7_TO_0__q1 =
	     master_xactor_rg_rd_data[7:0] ;
  assign new_value481_BITS_31_TO_0__q23 = new_value__h6481[31:0] ;
  assign pa___1__h5673 = { 8'd0, x__h5676 } ;
  assign pa___1__h5722 = { 8'd0, x__h5725 } ;
  assign pa___1__h5791 = { 8'd0, x__h5794 } ;
  assign pte___1__h5945 = { tlb$lookup[129:73], 1'd1, tlb$lookup[71:66] } ;
  assign pte___1__h5973 =
	     { pte___2__h5665[63:8], 1'd1, pte___2__h5665[6:0] } ;
  assign pte___2__h5665 =
	     tlb$lookup[72] ? tlb$lookup[129:66] : pte___1__h5945 ;
  assign ram_state_and_ctag_cset_b_read__31_BITS_50_TO__ETC___d136 =
	     ram_state_and_ctag_cset$DOB[50:0] ==
	     x1_avValue_pa__h5166[63:13] ;
  assign ram_state_and_ctag_cset_b_read__31_BIT_51_32_A_ETC___d382 =
	     ram_state_and_ctag_cset$DOB[51] &&
	     ram_state_and_ctag_cset_b_read__31_BITS_50_TO__ETC___d136 &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 ||
	     NOT_ram_state_and_ctag_cset_b_read__31_BIT_51__ETC___d381 ;
  assign req_f3_BITS_1_TO_0_174_EQ_0b0_175_OR_req_f3_BI_ETC___d1204 =
	     req_f3[1:0] == 2'b0 || req_f3[1:0] == 2'b01 && !req_addr[0] ||
	     req_f3[1:0] == 2'b10 && req_addr[1:0] == 2'b0 ||
	     req_f3[1:0] == 2'b11 && req_addr[2:0] == 3'b0 ;
  assign result__h12890 =
	     { {56{word64284_BITS_15_TO_8__q7[7]}},
	       word64284_BITS_15_TO_8__q7 } ;
  assign result__h12918 =
	     { {56{word64284_BITS_23_TO_16__q8[7]}},
	       word64284_BITS_23_TO_16__q8 } ;
  assign result__h12946 =
	     { {56{word64284_BITS_31_TO_24__q10[7]}},
	       word64284_BITS_31_TO_24__q10 } ;
  assign result__h12974 =
	     { {56{word64284_BITS_39_TO_32__q11[7]}},
	       word64284_BITS_39_TO_32__q11 } ;
  assign result__h13002 =
	     { {56{word64284_BITS_47_TO_40__q14[7]}},
	       word64284_BITS_47_TO_40__q14 } ;
  assign result__h13030 =
	     { {56{word64284_BITS_55_TO_48__q15[7]}},
	       word64284_BITS_55_TO_48__q15 } ;
  assign result__h13058 =
	     { {56{word64284_BITS_63_TO_56__q17[7]}},
	       word64284_BITS_63_TO_56__q17 } ;
  assign result__h13103 = { 56'd0, word64__h6284[7:0] } ;
  assign result__h13131 = { 56'd0, word64__h6284[15:8] } ;
  assign result__h13159 = { 56'd0, word64__h6284[23:16] } ;
  assign result__h13187 = { 56'd0, word64__h6284[31:24] } ;
  assign result__h13215 = { 56'd0, word64__h6284[39:32] } ;
  assign result__h13243 = { 56'd0, word64__h6284[47:40] } ;
  assign result__h13271 = { 56'd0, word64__h6284[55:48] } ;
  assign result__h13299 = { 56'd0, word64__h6284[63:56] } ;
  assign result__h13344 =
	     { {48{word64284_BITS_15_TO_0__q19[15]}},
	       word64284_BITS_15_TO_0__q19 } ;
  assign result__h13372 =
	     { {48{word64284_BITS_31_TO_16__q9[15]}},
	       word64284_BITS_31_TO_16__q9 } ;
  assign result__h13400 =
	     { {48{word64284_BITS_47_TO_32__q12[15]}},
	       word64284_BITS_47_TO_32__q12 } ;
  assign result__h13428 =
	     { {48{word64284_BITS_63_TO_48__q16[15]}},
	       word64284_BITS_63_TO_48__q16 } ;
  assign result__h13469 = { 48'd0, word64__h6284[15:0] } ;
  assign result__h13497 = { 48'd0, word64__h6284[31:16] } ;
  assign result__h13525 = { 48'd0, word64__h6284[47:32] } ;
  assign result__h13553 = { 48'd0, word64__h6284[63:48] } ;
  assign result__h13594 =
	     { {32{word64284_BITS_31_TO_0__q20[31]}},
	       word64284_BITS_31_TO_0__q20 } ;
  assign result__h13622 =
	     { {32{word64284_BITS_63_TO_32__q13[31]}},
	       word64284_BITS_63_TO_32__q13 } ;
  assign result__h13661 = { 32'd0, word64__h6284[31:0] } ;
  assign result__h13689 = { 32'd0, word64__h6284[63:32] } ;
  assign result__h28237 =
	     { {56{master_xactor_rg_rd_data_BITS_7_TO_0__q1[7]}},
	       master_xactor_rg_rd_data_BITS_7_TO_0__q1 } ;
  assign result__h28264 = { 56'd0, master_xactor_rg_rd_data[7:0] } ;
  assign result__h28290 =
	     { {48{master_xactor_rg_rd_data_BITS_15_TO_0__q3[15]}},
	       master_xactor_rg_rd_data_BITS_15_TO_0__q3 } ;
  assign result__h28316 = { 48'd0, master_xactor_rg_rd_data[15:0] } ;
  assign result__h28342 =
	     { {32{master_xactor_rg_rd_data_BITS_31_TO_0__q5[31]}},
	       master_xactor_rg_rd_data_BITS_31_TO_0__q5 } ;
  assign result__h28368 = { 32'd0, master_xactor_rg_rd_data[31:0] } ;
  assign result__h28620 =
	     { {56{rg_ld_val_BITS_7_TO_0__q2[7]}},
	       rg_ld_val_BITS_7_TO_0__q2 } ;
  assign result__h28647 = { 56'd0, rg_ld_val[7:0] } ;
  assign result__h28674 =
	     { {48{rg_ld_val_BITS_15_TO_0__q4[15]}},
	       rg_ld_val_BITS_15_TO_0__q4 } ;
  assign result__h28701 = { 48'd0, rg_ld_val[15:0] } ;
  assign result__h28728 =
	     { {32{rg_ld_val_BITS_31_TO_0__q6[31]}},
	       rg_ld_val_BITS_31_TO_0__q6 } ;
  assign result__h28755 = { 32'd0, rg_ld_val[31:0] } ;
  assign result__h6534 =
	     { {56{word64284_BITS_7_TO_0__q18[7]}},
	       word64284_BITS_7_TO_0__q18 } ;
  assign rg_amo_funct7_1_BITS_6_TO_2_2_EQ_0b10_3_AND_NO_ETC___d557 =
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     (!ram_state_and_ctag_cset$DOB[51] ||
	      !ram_state_and_ctag_cset_b_read__31_BITS_50_TO__ETC___d136) &&
	     IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_T_ETC___d379 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign rg_ld_val_BITS_15_TO_0__q4 = rg_ld_val[15:0] ;
  assign rg_ld_val_BITS_31_TO_0__q6 = rg_ld_val[31:0] ;
  assign rg_ld_val_BITS_7_TO_0__q2 = rg_ld_val[7:0] ;
  assign rg_lrsc_pa_91_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d192 =
	     rg_lrsc_pa == x1_avValue_pa__h5166 ;
  assign rg_op_6_EQ_0_7_OR_rg_op_6_EQ_2_9_AND_rg_amo_fu_ETC___d353 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     (!ram_state_and_ctag_cset$DOB[51] ||
	      !ram_state_and_ctag_cset_b_read__31_BITS_50_TO__ETC___d136) ;
  assign rg_op_6_EQ_0_7_OR_rg_op_6_EQ_2_9_AND_rg_amo_fu_ETC___d393 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     ram_state_and_ctag_cset_b_read__31_BIT_51_32_A_ETC___d382 ||
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     rg_op_6_EQ_1_85_OR_rg_op_6_EQ_2_9_AND_rg_amo_f_ETC___d391 ;
  assign rg_op_6_EQ_0_7_OR_rg_op_6_EQ_2_9_AND_rg_amo_fu_ETC___d397 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     ram_state_and_ctag_cset$DOB[51] &&
	     ram_state_and_ctag_cset_b_read__31_BITS_50_TO__ETC___d136 ;
  assign rg_op_6_EQ_0_7_OR_rg_op_6_EQ_2_9_AND_rg_amo_fu_ETC___d532 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     ram_state_and_ctag_cset$DOB[51] &&
	     ram_state_and_ctag_cset_b_read__31_BITS_50_TO__ETC___d136 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign rg_op_6_EQ_0_7_OR_rg_op_6_EQ_2_9_AND_rg_amo_fu_ETC___d551 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     (!ram_state_and_ctag_cset$DOB[51] ||
	      !ram_state_and_ctag_cset_b_read__31_BITS_50_TO__ETC___d136) &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign rg_op_6_EQ_1_85_OR_rg_op_6_EQ_2_9_AND_rg_amo_f_ETC___d391 =
	     rg_op == 2'd1 &&
	     IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_T_ETC___d379 ||
	     rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 ||
	     NOT_rg_op_6_EQ_1_85_87_AND_NOT_rg_op_6_EQ_2_9__ETC___d390 ;
  assign rg_op_6_EQ_1_85_OR_rg_op_6_EQ_2_9_AND_rg_amo_f_ETC___d579 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_6_EQ_2_9_0_OR_NOT_rg_amo_funct7_1_BI_ETC___d576 ||
	     NOT_rg_op_6_EQ_1_85_87_AND_NOT_rg_op_6_EQ_2_9__ETC___d578 ;
  assign rg_op_6_EQ_1_85_OR_rg_op_6_EQ_2_9_AND_rg_amo_f_ETC___d701 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_91_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d192) ;
  assign rg_op_6_EQ_2_9_AND_rg_amo_funct7_1_BITS_6_TO_2_ETC___d210 =
	     rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h14150 ||
	     !master_xactor_crg_wr_addr_full$port2__read &&
	     !master_xactor_crg_wr_data_full$port2__read &&
	     IF_rg_f3_39_BITS_1_TO_0_00_EQ_0b0_01_OR_rg_f3__ETC___d207 ;
  assign rg_priv_9_EQ_0b0_6_AND_NOT_tlb_lookup_rg_satp__ETC___d322 =
	     rg_priv == 2'b0 && !tlb$lookup[70] ||
	     rg_priv == 2'b01 && tlb$lookup[70] && !rg_sstatus_SUM ||
	     !dmem_not_imem ||
	     !tlb$lookup[68] ;
  assign rg_priv_9_EQ_0b0_6_AND_NOT_tlb_lookup_rg_satp__ETC___d97 =
	     rg_priv == 2'b0 && !tlb$lookup[70] ||
	     rg_priv == 2'b01 && tlb$lookup[70] && !rg_sstatus_SUM ||
	     dmem_not_imem_OR_NOT_rg_op_6_EQ_0_7_8_AND_NOT__ETC___d80 &&
	     NOT_dmem_not_imem_1_OR_NOT_rg_op_6_EQ_0_7_8_AN_ETC___d88 &&
	     (!dmem_not_imem || rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010 ||
	      !tlb$lookup[68]) ;
  assign rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_TO_6_ETC___d106 =
	     rg_priv_9_ULE_0b1___d40 && rg_satp[63:60] == 4'd8 &&
	     tlb$lookup[130] &&
	     (rg_priv_9_EQ_0b0_6_AND_NOT_tlb_lookup_rg_satp__ETC___d97 ||
	      NOT_tlb_lookup_rg_satp_2_BITS_59_TO_44_9_rg_ad_ETC___d103) ;
  assign rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_TO_6_ETC___d313 =
	     rg_priv_9_ULE_0b1___d40 && rg_satp[63:60] == 4'd8 &&
	     (rg_priv_9_EQ_0b0_6_AND_NOT_tlb_lookup_rg_satp__ETC___d97 ||
	      NOT_tlb_lookup_rg_satp_2_BITS_59_TO_44_9_rg_ad_ETC___d103) &&
	     tlb$lookup[130] ;
  assign rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_TO_6_ETC___d344 =
	     rg_priv_9_ULE_0b1___d40 && rg_satp[63:60] == 4'd8 &&
	     tlb$lookup[130] &&
	     NOT_rg_priv_9_EQ_0b0_6_91_OR_tlb_lookup_rg_sat_ETC___d337 &&
	     tlb$lookup[72] &&
	     tlb$lookup[73] &&
	     !pte___2__h5665[7] &&
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) ;
  assign rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_TO_6_ETC___d362 =
	     rg_priv_9_ULE_0b1___d40 && rg_satp[63:60] == 4'd8 &&
	     !tlb$lookup[130] ||
	     rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_TO_6_ETC___d106 ||
	     soc_map$m_is_IO_addr ||
	     rg_op_6_EQ_0_7_OR_rg_op_6_EQ_2_9_AND_rg_amo_fu_ETC___d353 ||
	     NOT_rg_op_6_EQ_0_7_8_AND_NOT_rg_op_6_EQ_2_9_0__ETC___d358 ;
  assign rg_priv_9_ULE_0b1___d40 = rg_priv <= 2'b01 ;
  assign rg_st_amo_val_BITS_31_TO_0__q24 = rg_st_amo_val[31:0] ;
  assign satp_pa__h2383 = { 8'd0, x__h4358 } ;
  assign shift_bits__h19742 = { x1_avValue_pa__h5166[2:0], 3'b0 } ;
  assign shift_bits__h28907 = { rg_pa[2:0], 3'b0 } ;
  assign st_val__h14579 = { 32'd0, _theResult_____2__h6420[31:0] } ;
  assign st_val__h14672 =
	     IF_rg_f3_39_EQ_0b10_70_THEN_SEXT_IF_rg_f3_39_E_ETC___d574 +
	     IF_rg_f3_39_EQ_0b10_70_THEN_SEXT_rg_st_amo_val_ETC___d638 ;
  assign st_val__h15654 = w1__h6414 ^ w2__h6416 ;
  assign st_val__h15658 = w1__h6414 & w2__h6416 ;
  assign st_val__h15662 = w1__h6414 | w2__h6416 ;
  assign st_val__h15666 = (w1__h6414 < w2__h6416) ? w1__h6414 : w2__h6416 ;
  assign st_val__h15671 = (w1__h6414 <= w2__h6416) ? w2__h6416 : w1__h6414 ;
  assign st_val__h15677 =
	     ((IF_rg_f3_39_EQ_0b10_70_THEN_SEXT_IF_rg_f3_39_E_ETC___d574 ^
	       64'h8000000000000000) <
	      (IF_rg_f3_39_EQ_0b10_70_THEN_SEXT_rg_st_amo_val_ETC___d638 ^
	       64'h8000000000000000)) ?
	       w1__h6414 :
	       w2__h6416 ;
  assign st_val__h15682 =
	     ((IF_rg_f3_39_EQ_0b10_70_THEN_SEXT_IF_rg_f3_39_E_ETC___d574 ^
	       64'h8000000000000000) <=
	      (IF_rg_f3_39_EQ_0b10_70_THEN_SEXT_rg_st_amo_val_ETC___d638 ^
	       64'h8000000000000000)) ?
	       w2__h6416 :
	       w1__h6414 ;
  assign strobe64__h20061 = 8'b00000001 << x1_avValue_pa__h5166[2:0] ;
  assign strobe64__h20104 = 8'b00000011 << x1_avValue_pa__h5166[2:0] ;
  assign strobe64__h20127 = 8'b00001111 << x1_avValue_pa__h5166[2:0] ;
  assign strobe64__h29102 = 8'b00000001 << rg_pa[2:0] ;
  assign strobe64__h29145 = 8'b00000011 << rg_pa[2:0] ;
  assign strobe64__h29168 = 8'b00001111 << rg_pa[2:0] ;
  assign tlb_lookup_rg_satp_2_BITS_59_TO_44_9_rg_addr_0_ETC___d307 =
	     tlb$lookup[72] &&
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010 ||
	      tlb$lookup[73]) ;
  assign tlb_lookup_rg_satp_2_BITS_59_TO_44_9_rg_addr_0_ETC___d86 =
	     tlb$lookup[67] | y__h5491 ;
  assign value__h5990 =
	     (rg_priv_9_ULE_0b1___d40 && rg_satp[63:60] == 4'd8) ?
	       _theResult___snd_fst__h5257 :
	       tlb$lookup[129:66] ;
  assign vpn_0_pa__h23396 = { 52'd0, rg_addr[20:12], 3'd0 } ;
  assign vpn_1_pa__h22370 = { 52'd0, rg_addr[29:21], 3'd0 } ;
  assign vpn_2_pa__h21867 = { 52'd0, rg_addr[38:30], 3'd0 } ;
  assign w1___1__h14639 = { 32'd0, new_value__h6481[31:0] } ;
  assign w2___1__h14640 = { 32'd0, rg_st_amo_val[31:0] } ;
  assign w2__h6416 = (rg_f3 == 3'b010) ? w2___1__h14640 : rg_st_amo_val ;
  assign word64284_BITS_15_TO_0__q19 = word64__h6284[15:0] ;
  assign word64284_BITS_15_TO_8__q7 = word64__h6284[15:8] ;
  assign word64284_BITS_23_TO_16__q8 = word64__h6284[23:16] ;
  assign word64284_BITS_31_TO_0__q20 = word64__h6284[31:0] ;
  assign word64284_BITS_31_TO_16__q9 = word64__h6284[31:16] ;
  assign word64284_BITS_31_TO_24__q10 = word64__h6284[31:24] ;
  assign word64284_BITS_39_TO_32__q11 = word64__h6284[39:32] ;
  assign word64284_BITS_47_TO_32__q12 = word64__h6284[47:32] ;
  assign word64284_BITS_47_TO_40__q14 = word64__h6284[47:40] ;
  assign word64284_BITS_55_TO_48__q15 = word64__h6284[55:48] ;
  assign word64284_BITS_63_TO_32__q13 = word64__h6284[63:32] ;
  assign word64284_BITS_63_TO_48__q16 = word64__h6284[63:48] ;
  assign word64284_BITS_63_TO_56__q17 = word64__h6284[63:56] ;
  assign word64284_BITS_7_TO_0__q18 = word64__h6284[7:0] ;
  assign word64__h6284 = ram_word64_set$DOB & y__h6570 ;
  assign x1_avValue_exc_code__h5167 =
	     dmem_not_imem ?
	       ((rg_op == 2'd0 ||
		 rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
		  4'd13 :
		  4'd15) :
	       4'd12 ;
  assign x1_avValue_pa__h5166 =
	     (rg_priv_9_ULE_0b1___d40 && rg_satp[63:60] == 4'd8) ?
	       _theResult___fst__h5255 :
	       rg_addr ;
  assign x__h14160 = { 63'd0, lrsc_result__h14150 } ;
  assign x__h22596 = { master_xactor_rg_rd_data[53:10], 12'b0 } ;
  assign x__h4358 = { rg_satp[43:0], 12'b0 } ;
  assign x__h5676 = { tlb$lookup[119:76], rg_addr[11:0] } ;
  assign x__h5725 = { tlb$lookup[119:85], rg_addr[20:0] } ;
  assign x__h5794 = { tlb$lookup[119:94], rg_addr[29:0] } ;
  assign y__h5491 = rg_mstatus_MXR & tlb$lookup[69] ;
  assign y__h6570 =
	     {64{ram_state_and_ctag_cset$DOB[51] &&
		 ram_state_and_ctag_cset_b_read__31_BITS_50_TO__ETC___d136}} ;
  always@(tlb$lookup or
	  rg_addr or pa___1__h5673 or pa___1__h5722 or pa___1__h5791)
  begin
    case (tlb$lookup[65:64])
      2'd0: _theResult___fst__h5667 = pa___1__h5673;
      2'd1: _theResult___fst__h5667 = pa___1__h5722;
      2'd2: _theResult___fst__h5667 = pa___1__h5791;
      2'd3: _theResult___fst__h5667 = rg_addr;
    endcase
  end
  always@(rg_f3 or strobe64__h29102 or strobe64__h29145 or strobe64__h29168)
  begin
    case (rg_f3[1:0])
      2'b0: io_req_wr_data_wstrb__h28986 = strobe64__h29102;
      2'b01: io_req_wr_data_wstrb__h28986 = strobe64__h29145;
      2'b10: io_req_wr_data_wstrb__h28986 = strobe64__h29168;
      2'b11: io_req_wr_data_wstrb__h28986 = 8'b11111111;
    endcase
  end
  always@(rg_f3 or rg_st_amo_val or _theResult___fst__h29103)
  begin
    case (rg_f3[1:0])
      2'b0, 2'b01, 2'b10:
	  io_req_wr_data_wdata__h28985 = _theResult___fst__h29103;
      2'd3: io_req_wr_data_wdata__h28985 = rg_st_amo_val;
    endcase
  end
  always@(rg_f3 or strobe64__h20061 or strobe64__h20104 or strobe64__h20127)
  begin
    case (rg_f3[1:0])
      2'b0: mem_req_wr_data_wstrb__h19945 = strobe64__h20061;
      2'b01: mem_req_wr_data_wstrb__h19945 = strobe64__h20104;
      2'b10: mem_req_wr_data_wstrb__h19945 = strobe64__h20127;
      2'b11: mem_req_wr_data_wstrb__h19945 = 8'b11111111;
    endcase
  end
  always@(rg_f3 or rg_st_amo_val or _theResult___fst__h20062)
  begin
    case (rg_f3[1:0])
      2'b0, 2'b01, 2'b10:
	  mem_req_wr_data_wdata__h19944 = _theResult___fst__h20062;
      2'd3: mem_req_wr_data_wdata__h19944 = rg_st_amo_val;
    endcase
  end
  always@(rg_addr or
	  NOT_ram_state_and_ctag_cset_b_read__31_BIT_51__ETC___d157)
  begin
    case (rg_addr[2:0])
      3'h0, 3'h1, 3'h2, 3'h3, 3'h4, 3'h5, 3'h6:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_OR_rg_ad_ETC___d161 =
	      NOT_ram_state_and_ctag_cset_b_read__31_BIT_51__ETC___d157;
      3'd7:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_OR_rg_ad_ETC___d161 =
	      rg_addr[2:0] != 3'h7 ||
	      NOT_ram_state_and_ctag_cset_b_read__31_BIT_51__ETC___d157;
    endcase
  end
  always@(rg_addr or
	  NOT_ram_state_and_ctag_cset_b_read__31_BIT_51__ETC___d157)
  begin
    case (rg_addr[2:0])
      3'h0, 3'h2, 3'h4:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_OR_rg_ad_ETC___d169 =
	      NOT_ram_state_and_ctag_cset_b_read__31_BIT_51__ETC___d157;
      default: IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_OR_rg_ad_ETC___d169 =
		   rg_addr[2:0] != 3'h6 ||
		   NOT_ram_state_and_ctag_cset_b_read__31_BIT_51__ETC___d157;
    endcase
  end
  always@(rg_f3 or
	  rg_addr or
	  NOT_ram_state_and_ctag_cset_b_read__31_BIT_51__ETC___d157 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_OR_rg_ad_ETC___d161 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_OR_rg_ad_ETC___d169 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_NOT_ETC___d175)
  begin
    case (rg_f3)
      3'b0, 3'b100:
	  IF_rg_f3_39_EQ_0b0_40_OR_rg_f3_39_EQ_0b100_41__ETC___d183 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_OR_rg_ad_ETC___d161;
      3'b001, 3'b101:
	  IF_rg_f3_39_EQ_0b0_40_OR_rg_f3_39_EQ_0b100_41__ETC___d183 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_OR_rg_ad_ETC___d169;
      3'b010, 3'b110:
	  IF_rg_f3_39_EQ_0b0_40_OR_rg_f3_39_EQ_0b100_41__ETC___d183 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_NOT_ETC___d175;
      default: IF_rg_f3_39_EQ_0b0_40_OR_rg_f3_39_EQ_0b100_41__ETC___d183 =
		   rg_f3 != 3'b011 || rg_addr[2:0] != 3'h0 ||
		   NOT_ram_state_and_ctag_cset_b_read__31_BIT_51__ETC___d157;
    endcase
  end
  always@(rg_amo_funct7 or
	  IF_rg_f3_39_EQ_0b0_40_OR_rg_f3_39_EQ_0b100_41__ETC___d183)
  begin
    case (rg_amo_funct7[6:2])
      5'b0, 5'b00100, 5'b01000, 5'b01100, 5'b10000, 5'b11000, 5'b11100:
	  CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_39_ETC__q21 =
	      IF_rg_f3_39_EQ_0b0_40_OR_rg_f3_39_EQ_0b100_41__ETC___d183;
      default: CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_39_ETC__q21 =
		   rg_amo_funct7[6:2] != 5'b10100 ||
		   IF_rg_f3_39_EQ_0b0_40_OR_rg_f3_39_EQ_0b100_41__ETC___d183;
    endcase
  end
  always@(x1_avValue_pa__h5166 or
	  NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS__ETC___d246 or
	  CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_39_ETC__q21)
  begin
    case (x1_avValue_pa__h5166[2:0])
      3'h0, 3'h1, 3'h2, 3'h3, 3'h4, 3'h5, 3'h6:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d247 =
	      CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_39_ETC__q21;
      3'd7:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d247 =
	      NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS__ETC___d246;
    endcase
  end
  always@(x1_avValue_pa__h5166 or
	  NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS__ETC___d251 or
	  CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_39_ETC__q21)
  begin
    case (x1_avValue_pa__h5166[2:0])
      3'h0, 3'h2, 3'h4:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d252 =
	      CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_39_ETC__q21;
      default: IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d252 =
		   NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS__ETC___d251;
    endcase
  end
  always@(rg_f3 or
	  NOT_rg_f3_39_EQ_0b11_76_77_OR_rg_amo_funct7_1__ETC___d256 or
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d247 or
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d252 or
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d255)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_39_EQ_0b0_40_THEN_IF_IF_rg_priv_9_ULE_ETC___d259 =
	      IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d247;
      3'b001:
	  IF_rg_f3_39_EQ_0b0_40_THEN_IF_IF_rg_priv_9_ULE_ETC___d259 =
	      IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d252;
      3'b010:
	  IF_rg_f3_39_EQ_0b0_40_THEN_IF_IF_rg_priv_9_ULE_ETC___d259 =
	      IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d255;
      default: IF_rg_f3_39_EQ_0b0_40_THEN_IF_IF_rg_priv_9_ULE_ETC___d259 =
		   NOT_rg_f3_39_EQ_0b11_76_77_OR_rg_amo_funct7_1__ETC___d256;
    endcase
  end
  always@(rg_f3 or rg_priv_9_ULE_0b1___d40 or rg_satp or tlb$RDY_lookup)
  begin
    case (rg_f3[1:0])
      2'b0, 2'b01:
	  IF_rg_f3_39_BITS_1_TO_0_00_EQ_0b0_01_OR_rg_f3__ETC___d207 =
	      !rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$RDY_lookup;
      default: IF_rg_f3_39_BITS_1_TO_0_00_EQ_0b0_01_OR_rg_f3__ETC___d207 =
		   rg_f3[1:0] != 2'b10 || !rg_priv_9_ULE_0b1___d40 ||
		   rg_satp[63:60] != 4'd8 ||
		   tlb$RDY_lookup;
    endcase
  end
  always@(rg_addr or
	  result__h6534 or
	  result__h12890 or
	  result__h12918 or
	  result__h12946 or
	  result__h12974 or
	  result__h13002 or result__h13030 or result__h13058)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d460 =
	      result__h6534;
      3'h1:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d460 =
	      result__h12890;
      3'h2:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d460 =
	      result__h12918;
      3'h3:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d460 =
	      result__h12946;
      3'h4:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d460 =
	      result__h12974;
      3'h5:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d460 =
	      result__h13002;
      3'h6:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d460 =
	      result__h13030;
      3'h7:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d460 =
	      result__h13058;
    endcase
  end
  always@(rg_addr or
	  result__h13103 or
	  result__h13131 or
	  result__h13159 or
	  result__h13187 or
	  result__h13215 or
	  result__h13243 or result__h13271 or result__h13299)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d476 =
	      result__h13103;
      3'h1:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d476 =
	      result__h13131;
      3'h2:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d476 =
	      result__h13159;
      3'h3:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d476 =
	      result__h13187;
      3'h4:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d476 =
	      result__h13215;
      3'h5:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d476 =
	      result__h13243;
      3'h6:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d476 =
	      result__h13271;
      3'h7:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d476 =
	      result__h13299;
    endcase
  end
  always@(rg_addr or
	  result__h13344 or
	  result__h13372 or result__h13400 or result__h13428)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d488 =
	      result__h13344;
      3'h2:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d488 =
	      result__h13372;
      3'h4:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d488 =
	      result__h13400;
      3'h6:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d488 =
	      result__h13428;
      default: IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d488 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h13469 or
	  result__h13497 or result__h13525 or result__h13553)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d496 =
	      result__h13469;
      3'h2:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d496 =
	      result__h13497;
      3'h4:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d496 =
	      result__h13525;
      3'h6:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d496 =
	      result__h13553;
      default: IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d496 =
		   64'd0;
    endcase
  end
  always@(rg_addr or result__h13661 or result__h13689)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d506 =
	      result__h13661;
      3'h4:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d506 =
	      result__h13689;
      default: IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d506 =
		   64'd0;
    endcase
  end
  always@(rg_addr or result__h13594 or result__h13622)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result3594_0x4_re_ETC__q22 =
	      result__h13594;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result3594_0x4_re_ETC__q22 =
	      result__h13622;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result3594_0x4_re_ETC__q22 =
		   64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d460 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d488 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result3594_0x4_re_ETC__q22 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_ram_ETC___d507 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d476 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d496 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d506)
  begin
    case (rg_f3)
      3'b0:
	  new_value__h6481 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d460;
      3'b001:
	  new_value__h6481 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d488;
      3'b010:
	  new_value__h6481 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result3594_0x4_re_ETC__q22;
      3'b011:
	  new_value__h6481 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_ram_ETC___d507;
      3'b100:
	  new_value__h6481 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d476;
      3'b101:
	  new_value__h6481 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d496;
      3'b110:
	  new_value__h6481 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d506;
      3'd7: new_value__h6481 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d460 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d488 or
	  w1___1__h14639 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_ram_ETC___d507 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d476 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d496 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d506)
  begin
    case (rg_f3)
      3'b0:
	  w1__h6414 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d460;
      3'b001:
	  w1__h6414 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d488;
      3'b010: w1__h6414 = w1___1__h14639;
      3'b011:
	  w1__h6414 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_ram_ETC___d507;
      3'b100:
	  w1__h6414 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d476;
      3'b101:
	  w1__h6414 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d496;
      3'b110:
	  w1__h6414 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d506;
      3'd7: w1__h6414 = 64'd0;
    endcase
  end
  always@(x1_avValue_pa__h5166 or ram_word64_set$DOB or rg_st_amo_val)
  begin
    case (x1_avValue_pa__h5166[2:0])
      3'h0:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d625 =
	      { ram_word64_set$DOB[63:16], rg_st_amo_val[15:0] };
      3'h2:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d625 =
	      { ram_word64_set$DOB[63:32],
		rg_st_amo_val[15:0],
		ram_word64_set$DOB[15:0] };
      3'h4:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d625 =
	      { ram_word64_set$DOB[63:48],
		rg_st_amo_val[15:0],
		ram_word64_set$DOB[31:0] };
      3'h6:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d625 =
	      { rg_st_amo_val[15:0], ram_word64_set$DOB[47:0] };
      default: IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d625 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(x1_avValue_pa__h5166 or ram_word64_set$DOB or rg_st_amo_val)
  begin
    case (x1_avValue_pa__h5166[2:0])
      3'h0:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d616 =
	      { ram_word64_set$DOB[63:8], rg_st_amo_val[7:0] };
      3'h1:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d616 =
	      { ram_word64_set$DOB[63:16],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[7:0] };
      3'h2:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d616 =
	      { ram_word64_set$DOB[63:24],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[15:0] };
      3'h3:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d616 =
	      { ram_word64_set$DOB[63:32],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[23:0] };
      3'h4:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d616 =
	      { ram_word64_set$DOB[63:40],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[31:0] };
      3'h5:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d616 =
	      { ram_word64_set$DOB[63:48],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[39:0] };
      3'h6:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d616 =
	      { ram_word64_set$DOB[63:56],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[47:0] };
      3'h7:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d616 =
	      { rg_st_amo_val[7:0], ram_word64_set$DOB[55:0] };
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d460 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d488 or
	  new_value481_BITS_31_TO_0__q23 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_ram_ETC___d507 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d476 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d496 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d506)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_39_EQ_0b10_70_THEN_SEXT_IF_rg_f3_39_E_ETC___d574 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d460;
      3'b001:
	  IF_rg_f3_39_EQ_0b10_70_THEN_SEXT_IF_rg_f3_39_E_ETC___d574 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d488;
      3'b010:
	  IF_rg_f3_39_EQ_0b10_70_THEN_SEXT_IF_rg_f3_39_E_ETC___d574 =
	      { {32{new_value481_BITS_31_TO_0__q23[31]}},
		new_value481_BITS_31_TO_0__q23 };
      3'b011:
	  IF_rg_f3_39_EQ_0b10_70_THEN_SEXT_IF_rg_f3_39_E_ETC___d574 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_ram_ETC___d507;
      3'b100:
	  IF_rg_f3_39_EQ_0b10_70_THEN_SEXT_IF_rg_f3_39_E_ETC___d574 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d476;
      3'b101:
	  IF_rg_f3_39_EQ_0b10_70_THEN_SEXT_IF_rg_f3_39_E_ETC___d574 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d496;
      3'b110:
	  IF_rg_f3_39_EQ_0b10_70_THEN_SEXT_IF_rg_f3_39_E_ETC___d574 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d506;
      3'd7: IF_rg_f3_39_EQ_0b10_70_THEN_SEXT_IF_rg_f3_39_E_ETC___d574 = 64'd0;
    endcase
  end
  always@(rg_amo_funct7 or
	  st_val__h15682 or
	  st_val__h14672 or
	  w2__h6416 or
	  st_val__h15654 or
	  st_val__h15662 or
	  st_val__h15658 or
	  st_val__h15677 or st_val__h15666 or st_val__h15671)
  begin
    case (rg_amo_funct7[6:2])
      5'b0: _theResult_____2__h6420 = st_val__h14672;
      5'b00001: _theResult_____2__h6420 = w2__h6416;
      5'b00100: _theResult_____2__h6420 = st_val__h15654;
      5'b01000: _theResult_____2__h6420 = st_val__h15662;
      5'b01100: _theResult_____2__h6420 = st_val__h15658;
      5'b10000: _theResult_____2__h6420 = st_val__h15677;
      5'b11000: _theResult_____2__h6420 = st_val__h15666;
      5'b11100: _theResult_____2__h6420 = st_val__h15671;
      default: _theResult_____2__h6420 = st_val__h15682;
    endcase
  end
  always@(rg_f3 or _theResult_____1__h6421 or _theResult___fst__h20846)
  begin
    case (rg_f3[1:0])
      2'b0, 2'b01, 2'b10:
	  mem_req_wr_data_wdata__h20728 = _theResult___fst__h20846;
      2'd3: mem_req_wr_data_wdata__h20728 = _theResult_____1__h6421;
    endcase
  end
  always@(x1_avValue_pa__h5166 or
	  ram_word64_set$DOB or _theResult_____1__h6421)
  begin
    case (x1_avValue_pa__h5166[2:0])
      3'h0:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d690 =
	      { ram_word64_set$DOB[63:16], _theResult_____1__h6421[15:0] };
      3'h2:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d690 =
	      { ram_word64_set$DOB[63:32],
		_theResult_____1__h6421[15:0],
		ram_word64_set$DOB[15:0] };
      3'h4:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d690 =
	      { ram_word64_set$DOB[63:48],
		_theResult_____1__h6421[15:0],
		ram_word64_set$DOB[31:0] };
      3'h6:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d690 =
	      { _theResult_____1__h6421[15:0], ram_word64_set$DOB[47:0] };
      default: IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d690 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(x1_avValue_pa__h5166 or
	  ram_word64_set$DOB or _theResult_____1__h6421)
  begin
    case (x1_avValue_pa__h5166[2:0])
      3'h0:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d681 =
	      { ram_word64_set$DOB[63:8], _theResult_____1__h6421[7:0] };
      3'h1:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d681 =
	      { ram_word64_set$DOB[63:16],
		_theResult_____1__h6421[7:0],
		ram_word64_set$DOB[7:0] };
      3'h2:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d681 =
	      { ram_word64_set$DOB[63:24],
		_theResult_____1__h6421[7:0],
		ram_word64_set$DOB[15:0] };
      3'h3:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d681 =
	      { ram_word64_set$DOB[63:32],
		_theResult_____1__h6421[7:0],
		ram_word64_set$DOB[23:0] };
      3'h4:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d681 =
	      { ram_word64_set$DOB[63:40],
		_theResult_____1__h6421[7:0],
		ram_word64_set$DOB[31:0] };
      3'h5:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d681 =
	      { ram_word64_set$DOB[63:48],
		_theResult_____1__h6421[7:0],
		ram_word64_set$DOB[39:0] };
      3'h6:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d681 =
	      { ram_word64_set$DOB[63:56],
		_theResult_____1__h6421[7:0],
		ram_word64_set$DOB[47:0] };
      3'h7:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d681 =
	      { _theResult_____1__h6421[7:0], ram_word64_set$DOB[55:0] };
    endcase
  end
  always@(x1_avValue_pa__h5166 or ram_word64_set$DOB or rg_st_amo_val)
  begin
    case (x1_avValue_pa__h5166[2:0])
      3'h0:
	  CASE_x1_avValue_pa166_BITS_2_TO_0_0x0_ram_word_ETC__q25 =
	      { ram_word64_set$DOB[63:32], rg_st_amo_val[31:0] };
      3'h4:
	  CASE_x1_avValue_pa166_BITS_2_TO_0_0x0_ram_word_ETC__q25 =
	      { rg_st_amo_val[31:0], ram_word64_set$DOB[31:0] };
      default: CASE_x1_avValue_pa166_BITS_2_TO_0_0x0_ram_word_ETC__q25 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_f3 or
	  ram_word64_set$DOB or
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d616 or
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d625 or
	  CASE_x1_avValue_pa166_BITS_2_TO_0_0x0_ram_word_ETC__q25 or
	  rg_st_amo_val)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_39_EQ_0b0_40_THEN_IF_IF_rg_priv_9_ULE_ETC___d634 =
	      IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d616;
      3'b001:
	  IF_rg_f3_39_EQ_0b0_40_THEN_IF_IF_rg_priv_9_ULE_ETC___d634 =
	      IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d625;
      3'b010:
	  IF_rg_f3_39_EQ_0b0_40_THEN_IF_IF_rg_priv_9_ULE_ETC___d634 =
	      CASE_x1_avValue_pa166_BITS_2_TO_0_0x0_ram_word_ETC__q25;
      3'b011:
	  IF_rg_f3_39_EQ_0b0_40_THEN_IF_IF_rg_priv_9_ULE_ETC___d634 =
	      rg_st_amo_val;
      default: IF_rg_f3_39_EQ_0b0_40_THEN_IF_IF_rg_priv_9_ULE_ETC___d634 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(x1_avValue_pa__h5166 or
	  ram_word64_set$DOB or _theResult_____1__h6421)
  begin
    case (x1_avValue_pa__h5166[2:0])
      3'h0:
	  CASE_x1_avValue_pa166_BITS_2_TO_0_0x0_ram_word_ETC__q26 =
	      { ram_word64_set$DOB[63:32], _theResult_____1__h6421[31:0] };
      3'h4:
	  CASE_x1_avValue_pa166_BITS_2_TO_0_0x0_ram_word_ETC__q26 =
	      { _theResult_____1__h6421[31:0], ram_word64_set$DOB[31:0] };
      default: CASE_x1_avValue_pa166_BITS_2_TO_0_0x0_ram_word_ETC__q26 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_f3 or
	  ram_word64_set$DOB or
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d681 or
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d690 or
	  CASE_x1_avValue_pa166_BITS_2_TO_0_0x0_ram_word_ETC__q26 or
	  _theResult_____1__h6421)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_39_EQ_0b0_40_THEN_IF_IF_rg_priv_9_ULE_ETC___d699 =
	      IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d681;
      3'b001:
	  IF_rg_f3_39_EQ_0b0_40_THEN_IF_IF_rg_priv_9_ULE_ETC___d699 =
	      IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d690;
      3'b010:
	  IF_rg_f3_39_EQ_0b0_40_THEN_IF_IF_rg_priv_9_ULE_ETC___d699 =
	      CASE_x1_avValue_pa166_BITS_2_TO_0_0x0_ram_word_ETC__q26;
      3'b011:
	  IF_rg_f3_39_EQ_0b0_40_THEN_IF_IF_rg_priv_9_ULE_ETC___d699 =
	      _theResult_____1__h6421;
      default: IF_rg_f3_39_EQ_0b0_40_THEN_IF_IF_rg_priv_9_ULE_ETC___d699 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_f3 or IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_1_E_ETC___d521)
  begin
    case (rg_f3)
      3'b0, 3'b001, 3'b010, 3'b011, 3'b100, 3'b101, 3'b110:
	  new_value__h18732 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_1_E_ETC___d521;
      3'd7: new_value__h18732 = 64'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY 4'd0;
	master_xactor_crg_rd_addr_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	master_xactor_crg_rd_data_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	master_xactor_crg_wr_addr_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	master_xactor_crg_wr_data_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	master_xactor_crg_wr_resp_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY 7'd0;
	rg_lower_word32_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_requesting_cline <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (ctr_wr_rsps_pending_crg$EN)
	  ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY
	      ctr_wr_rsps_pending_crg$D_IN;
	if (master_xactor_crg_rd_addr_full$EN)
	  master_xactor_crg_rd_addr_full <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_crg_rd_addr_full$D_IN;
	if (master_xactor_crg_rd_data_full$EN)
	  master_xactor_crg_rd_data_full <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_crg_rd_data_full$D_IN;
	if (master_xactor_crg_wr_addr_full$EN)
	  master_xactor_crg_wr_addr_full <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_crg_wr_addr_full$D_IN;
	if (master_xactor_crg_wr_data_full$EN)
	  master_xactor_crg_wr_data_full <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_crg_wr_data_full$D_IN;
	if (master_xactor_crg_wr_resp_full$EN)
	  master_xactor_crg_wr_resp_full <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_crg_wr_resp_full$D_IN;
	if (rg_cset_in_cache$EN)
	  rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY rg_cset_in_cache$D_IN;
	if (rg_lower_word32_full$EN)
	  rg_lower_word32_full <= `BSV_ASSIGNMENT_DELAY
	      rg_lower_word32_full$D_IN;
	if (rg_lrsc_valid$EN)
	  rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY rg_lrsc_valid$D_IN;
	if (rg_requesting_cline$EN)
	  rg_requesting_cline <= `BSV_ASSIGNMENT_DELAY
	      rg_requesting_cline$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
      end
    if (master_xactor_rg_rd_addr$EN)
      master_xactor_rg_rd_addr <= `BSV_ASSIGNMENT_DELAY
	  master_xactor_rg_rd_addr$D_IN;
    if (master_xactor_rg_rd_data$EN)
      master_xactor_rg_rd_data <= `BSV_ASSIGNMENT_DELAY
	  master_xactor_rg_rd_data$D_IN;
    if (master_xactor_rg_wr_addr$EN)
      master_xactor_rg_wr_addr <= `BSV_ASSIGNMENT_DELAY
	  master_xactor_rg_wr_addr$D_IN;
    if (master_xactor_rg_wr_data$EN)
      master_xactor_rg_wr_data <= `BSV_ASSIGNMENT_DELAY
	  master_xactor_rg_wr_data$D_IN;
    if (master_xactor_rg_wr_resp$EN)
      master_xactor_rg_wr_resp <= `BSV_ASSIGNMENT_DELAY
	  master_xactor_rg_wr_resp$D_IN;
    if (rg_addr$EN) rg_addr <= `BSV_ASSIGNMENT_DELAY rg_addr$D_IN;
    if (rg_amo_funct7$EN)
      rg_amo_funct7 <= `BSV_ASSIGNMENT_DELAY rg_amo_funct7$D_IN;
    if (rg_error_during_refill$EN)
      rg_error_during_refill <= `BSV_ASSIGNMENT_DELAY
	  rg_error_during_refill$D_IN;
    if (rg_exc_code$EN) rg_exc_code <= `BSV_ASSIGNMENT_DELAY rg_exc_code$D_IN;
    if (rg_f3$EN) rg_f3 <= `BSV_ASSIGNMENT_DELAY rg_f3$D_IN;
    if (rg_ld_val$EN) rg_ld_val <= `BSV_ASSIGNMENT_DELAY rg_ld_val$D_IN;
    if (rg_lower_word32$EN)
      rg_lower_word32 <= `BSV_ASSIGNMENT_DELAY rg_lower_word32$D_IN;
    if (rg_lrsc_pa$EN) rg_lrsc_pa <= `BSV_ASSIGNMENT_DELAY rg_lrsc_pa$D_IN;
    if (rg_mstatus_MXR$EN)
      rg_mstatus_MXR <= `BSV_ASSIGNMENT_DELAY rg_mstatus_MXR$D_IN;
    if (rg_op$EN) rg_op <= `BSV_ASSIGNMENT_DELAY rg_op$D_IN;
    if (rg_pa$EN) rg_pa <= `BSV_ASSIGNMENT_DELAY rg_pa$D_IN;
    if (rg_priv$EN) rg_priv <= `BSV_ASSIGNMENT_DELAY rg_priv$D_IN;
    if (rg_pte_pa$EN) rg_pte_pa <= `BSV_ASSIGNMENT_DELAY rg_pte_pa$D_IN;
    if (rg_req_byte_in_cline$EN)
      rg_req_byte_in_cline <= `BSV_ASSIGNMENT_DELAY rg_req_byte_in_cline$D_IN;
    if (rg_satp$EN) rg_satp <= `BSV_ASSIGNMENT_DELAY rg_satp$D_IN;
    if (rg_sstatus_SUM$EN)
      rg_sstatus_SUM <= `BSV_ASSIGNMENT_DELAY rg_sstatus_SUM$D_IN;
    if (rg_st_amo_val$EN)
      rg_st_amo_val <= `BSV_ASSIGNMENT_DELAY rg_st_amo_val$D_IN;
    if (rg_word64_set_in_cache$EN)
      rg_word64_set_in_cache <= `BSV_ASSIGNMENT_DELAY
	  rg_word64_set_in_cache$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_verbosity = 4'hA;
    ctr_wr_rsps_pending_crg = 4'hA;
    master_xactor_crg_rd_addr_full = 1'h0;
    master_xactor_crg_rd_data_full = 1'h0;
    master_xactor_crg_wr_addr_full = 1'h0;
    master_xactor_crg_wr_data_full = 1'h0;
    master_xactor_crg_wr_resp_full = 1'h0;
    master_xactor_rg_rd_addr = 67'h2AAAAAAAAAAAAAAAA;
    master_xactor_rg_rd_data = 66'h2AAAAAAAAAAAAAAAA;
    master_xactor_rg_wr_addr = 67'h2AAAAAAAAAAAAAAAA;
    master_xactor_rg_wr_data = 72'hAAAAAAAAAAAAAAAAAA;
    master_xactor_rg_wr_resp = 2'h2;
    rg_addr = 64'hAAAAAAAAAAAAAAAA;
    rg_amo_funct7 = 7'h2A;
    rg_cset_in_cache = 7'h2A;
    rg_error_during_refill = 1'h0;
    rg_exc_code = 4'hA;
    rg_f3 = 3'h2;
    rg_ld_val = 64'hAAAAAAAAAAAAAAAA;
    rg_lower_word32 = 32'hAAAAAAAA;
    rg_lower_word32_full = 1'h0;
    rg_lrsc_pa = 64'hAAAAAAAAAAAAAAAA;
    rg_lrsc_valid = 1'h0;
    rg_mstatus_MXR = 1'h0;
    rg_op = 2'h2;
    rg_pa = 64'hAAAAAAAAAAAAAAAA;
    rg_priv = 2'h2;
    rg_pte_pa = 64'hAAAAAAAAAAAAAAAA;
    rg_req_byte_in_cline = 64'hAAAAAAAAAAAAAAAA;
    rg_requesting_cline = 1'h0;
    rg_satp = 64'hAAAAAAAAAAAAAAAA;
    rg_sstatus_SUM = 1'h0;
    rg_st_amo_val = 64'hAAAAAAAAAAAAAAAA;
    rg_state = 4'hA;
    rg_word64_set_in_cache = 10'h2AA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 &&
	  cfg_verbosity != 4'd0 &&
	  !f_reset_reqs$D_OUT)
	begin
	  v__h3988 = $stime;
	  #0;
	end
    v__h3982 = v__h3988 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 &&
	  cfg_verbosity != 4'd0 &&
	  !f_reset_reqs$D_OUT)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		   v__h3982,
		   "D_MMU_Cache",
		   $signed(32'd128),
		   $signed(32'd1));
	else
	  $display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		   v__h3982,
		   "I_MMU_Cache",
		   $signed(32'd128),
		   $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  f_reset_reqs$D_OUT)
	begin
	  v__h4089 = $stime;
	  #0;
	end
    v__h4083 = v__h4089 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  f_reset_reqs$D_OUT)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_reset: Flushed", v__h4083, "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_reset: Flushed", v__h4083, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_rereq && !cfg_verbosity_read__0_ULE_1___d11)
	$display("    fa_req_ram_B tagCSet [0x%0x] word64_set [0x%0d]",
		 rg_addr[12:6],
		 rg_addr[12:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_maintain_io_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h28808 = $stime;
	  #0;
	end
    v__h28802 = v__h28808 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_maintain_io_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h28802,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_ld_val);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h28802,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_ld_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_ST_req && !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h29621 = $stime;
	  #0;
	end
    v__h29615 = v__h29621 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_ST_req && !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_AMO_ST_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h29615,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_AMO_ST_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h29615,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_ST_req && !cfg_verbosity_read__0_ULE_1___d11)
	$display("    FAIL due to I/O address.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_ST_req && !cfg_verbosity_read__0_ULE_1___d11)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h29773 = $stime;
	  #0;
	end
    v__h29767 = v__h29773 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_AMO_op_req; f3 0x%0h  amo_funct7 0x%0h  vaddr %0h  p %0h  word64 0x%0h",
		   v__h29767,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_amo_funct7,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_AMO_op_req; f3 0x%0h  amo_funct7 0x%0h  vaddr %0h  p %0h  word64 0x%0h",
		   v__h29767,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_amo_funct7,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d11)
	$display("    FAIL: AMO_ops not supported on I/O addresses.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d11)
	$display("    => rl_drive_exception_rsp");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_reset && !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h3617 = $stime;
	  #0;
	end
    v__h3611 = v__h3617 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_reset && !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_start_reset", v__h3611, "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_start_reset", v__h3611, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  (!master_xactor_rg_rd_data[0] ||
	   !master_xactor_rg_rd_data[1] && master_xactor_rg_rd_data[2]) &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h22798 = $stime;
	  #0;
	end
    v__h22792 = v__h22798 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  (!master_xactor_rg_rd_data[0] ||
	   !master_xactor_rg_rd_data[1] && master_xactor_rg_rd_data[2]) &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		   v__h22792,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa,
		   exc_code___1__h5565);
	else
	  $display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		   v__h22792,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa,
		   exc_code___1__h5565);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h22900 = $stime;
	  #0;
	end
    v__h22894 = v__h22900 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_rl_ptw_level_2: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: continue to level 1",
		   v__h22894,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_rl_ptw_level_2: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: continue to level 1",
		   v__h22894,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("    Req for level 1 PTE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("AXI4_Lite_Rd_Addr { ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", lev_1_pte_pa_w64_fa__h22373);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  (master_xactor_rg_rd_data[1] || !master_xactor_rg_rd_data[2]) &&
	  master_xactor_rg_rd_data_36_BIT_3_47_OR_master_ETC___d901)
	begin
	  v__h23006 = $stime;
	  #0;
	end
    v__h23000 = v__h23006 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  (master_xactor_rg_rd_data[1] || !master_xactor_rg_rd_data[2]) &&
	  master_xactor_rg_rd_data_36_BIT_3_47_OR_master_ETC___d901)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: gigapage pte 0x%0h @ 0x%0h",
		   v__h23000,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: gigapage pte 0x%0h @ 0x%0h",
		   v__h23000,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  (master_xactor_rg_rd_data[1] || !master_xactor_rg_rd_data[2]) &&
	  (master_xactor_rg_rd_data[3] || master_xactor_rg_rd_data[1]) &&
	  (master_xactor_rg_rd_data[27:19] != 9'd0 ||
	   master_xactor_rg_rd_data[18:10] != 9'd0))
	$display("    Invalid PTE: PPN[1] or PPN[0] is not zero; page fault %0d",
		 exc_code___1__h5565);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  (master_xactor_rg_rd_data[1] || !master_xactor_rg_rd_data[2]) &&
	  master_xactor_rg_rd_data_36_BIT_3_47_OR_master_ETC___d913)
	begin
	  v__h23118 = $stime;
	  #0;
	end
    v__h23112 = v__h23118 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  (master_xactor_rg_rd_data[1] || !master_xactor_rg_rd_data[2]) &&
	  master_xactor_rg_rd_data_36_BIT_3_47_OR_master_ETC___d913)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE for gigapage",
		   v__h23112,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE for gigapage",
		   v__h23112,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  (master_xactor_rg_rd_data[1] || !master_xactor_rg_rd_data[2]) &&
	  master_xactor_rg_rd_data_36_BIT_3_47_OR_master_ETC___d913)
	$display("    Addr Space megapage pa: 0x%0h", lev_1_PTN_pa__h22369);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h22727 = $stime;
	  #0;
	end
    v__h22721 = v__h22727 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		   v__h22721,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pte_pa,
		   access_exc_code__h3126);
	else
	  $display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		   v__h22721,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pte_pa,
		   access_exc_code__h3126);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  (!master_xactor_rg_rd_data[0] ||
	   !master_xactor_rg_rd_data[1] && master_xactor_rg_rd_data[2]) &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h23752 = $stime;
	  #0;
	end
    v__h23746 = v__h23752 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  (!master_xactor_rg_rd_data[0] ||
	   !master_xactor_rg_rd_data[1] && master_xactor_rg_rd_data[2]) &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		   v__h23746,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa,
		   exc_code___1__h5565);
	else
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		   v__h23746,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa,
		   exc_code___1__h5565);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h23854 = $stime;
	  #0;
	end
    v__h23848 = v__h23854 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: continue to level 0",
		   v__h23848,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: continue to level 0",
		   v__h23848,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("    Req for level 0 PTE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("AXI4_Lite_Rd_Addr { ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", lev_0_pte_pa_w64_fa__h23399);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_36_BITS_65_TO_64_37_E_ETC___d950)
	begin
	  v__h24072 = $stime;
	  #0;
	end
    v__h24066 = v__h24072 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_36_BITS_65_TO_64_37_E_ETC___d950)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE for megapage",
		   v__h24066,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE for megapage",
		   v__h24066,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_36_BITS_65_TO_64_37_E_ETC___d950)
	$display("    Addr Space megapage pa: 0x%0h", lev_1_PTN_pa__h22369);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_36_BITS_65_TO_64_37_E_ETC___d956)
	begin
	  v__h23960 = $stime;
	  #0;
	end
    v__h23954 = v__h23960 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_36_BITS_65_TO_64_37_E_ETC___d956)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: megapage pte 0x%0h @ 0x%0h",
		   v__h23954,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: megapage pte 0x%0h @ 0x%0h",
		   v__h23954,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  (master_xactor_rg_rd_data[1] || !master_xactor_rg_rd_data[2]) &&
	  (master_xactor_rg_rd_data[3] || master_xactor_rg_rd_data[1]) &&
	  master_xactor_rg_rd_data[18:10] != 9'd0)
	$display("    Invalid PTE: PPN [0] is not zero; page fault %0d",
		 exc_code___1__h5565);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h23681 = $stime;
	  #0;
	end
    v__h23675 = v__h23681 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		   v__h23675,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pte_pa,
		   access_exc_code__h3126);
	else
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		   v__h23675,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pte_pa,
		   access_exc_code__h3126);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  (!master_xactor_rg_rd_data[0] ||
	   !master_xactor_rg_rd_data[1] && master_xactor_rg_rd_data[2]) &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h24548 = $stime;
	  #0;
	end
    v__h24542 = v__h24548 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  (!master_xactor_rg_rd_data[0] ||
	   !master_xactor_rg_rd_data[1] && master_xactor_rg_rd_data[2]) &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		   v__h24542,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa,
		   exc_code___1__h5565);
	else
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		   v__h24542,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa,
		   exc_code___1__h5565);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h24619 = $stime;
	  #0;
	end
    v__h24613 = v__h24619 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x50h: Not a leaf PTE; page fault %0d",
		   v__h24613,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa,
		   exc_code___1__h5565);
	else
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x50h: Not a leaf PTE; page fault %0d",
		   v__h24613,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa,
		   exc_code___1__h5565);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  (master_xactor_rg_rd_data[1] || !master_xactor_rg_rd_data[2]) &&
	  (master_xactor_rg_rd_data[3] || master_xactor_rg_rd_data[1]) &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h24701 = $stime;
	  #0;
	end
    v__h24695 = v__h24701 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  (master_xactor_rg_rd_data[1] || !master_xactor_rg_rd_data[2]) &&
	  (master_xactor_rg_rd_data[3] || master_xactor_rg_rd_data[1]) &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE",
		   v__h24695,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE",
		   v__h24695,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  (master_xactor_rg_rd_data[1] || !master_xactor_rg_rd_data[2]) &&
	  (master_xactor_rg_rd_data[3] || master_xactor_rg_rd_data[1]) &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$display("    Addr Space page pa: 0x%0h", lev_1_PTN_pa__h22369);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h24477 = $stime;
	  #0;
	end
    v__h24471 = v__h24477 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		   v__h24471,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pte_pa,
		   access_exc_code__h3126);
	else
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		   v__h24471,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pte_pa,
		   access_exc_code__h3126);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop && cfg_verbosity != 4'd0)
	$display("    Sending line refill request to main memory:0x%0h",
		 cline_fabric_addr__h25555);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_006___d1007)
	begin
	  v__h25803 = $stime;
	  #0;
	end
    v__h25797 = v__h25803 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_006___d1007)
	if (dmem_not_imem)
	  $write("%0d: %s.rl_cache_refill_req_loop: mem req: ",
		 v__h25797,
		 "D_MMU_Cache");
	else
	  $write("%0d: %s.rl_cache_refill_req_loop: mem req: ",
		 v__h25797,
		 "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_006___d1007)
	$write("AXI4_Lite_Rd_Addr { ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_006___d1007)
	$write("'h%h", cline_fabric_addr__h25555);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_006___d1007)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_006___d1007)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_006___d1007)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_006___d1007)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_006___d1007)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h4238 = $stime;
	  #0;
	end
    v__h4232 = v__h4238 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h",
		   v__h4232,
		   "D_MMU_Cache",
		   rg_addr);
	else
	  $display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h",
		   v__h4232,
		   "I_MMU_Cache",
		   rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  rg_satp[63:60] != 4'd0)
	$display("        Priv:%0d  SATP:{mode %0d asid %0h pa %0h}  VA:%0h.%0h.%0h",
		 rg_priv,
		 rg_satp[63:60],
		 rg_satp[59:44],
		 satp_pa__h2383,
		 rg_addr[29:21],
		 rg_addr[20:12],
		 rg_addr[11:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$display("        eaddr = {CTag 0x%0h  CSet 0x%0h  Word64 0x%0h  Byte 0x%0h}",
		 rg_addr[63:13],
		 rg_addr[12:6],
		 rg_addr[5:3],
		 rg_addr[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("        CSet 0x%0x: (state, tag):", rg_addr[12:6]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(" (");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  ram_state_and_ctag_cset$DOB[51])
	$write("CTAG_CLEAN");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  !ram_state_and_ctag_cset$DOB[51])
	$write("CTAG_EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  ram_state_and_ctag_cset$DOB[51])
	$write(", 0x%0x", ram_state_and_ctag_cset$DOB[50:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  !ram_state_and_ctag_cset$DOB[51])
	$write(", --");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(")");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[12:6],
	       rg_addr[5:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(" 0x%0x", ram_word64_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("    TLB result: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("VM_Xlate_Result { ", "outcome: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d310)
	$write("VM_XLATE_OK");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_TO_6_ETC___d313)
	$write("VM_XLATE_EXCEPTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  rg_priv_9_ULE_0b1___d40 &&
	  rg_satp[63:60] == 4'd8 &&
	  !tlb$lookup[130])
	$write("VM_XLATE_TLB_MISS");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "pa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", x1_avValue_pa__h5166);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", x1_avValue_exc_code__h5167);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "pte_modified: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d334)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_TO_6_ETC___d344)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "pte: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", value__h5990, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d375)
	$display("    => IO_REQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d535)
	begin
	  v__h13773 = $stime;
	  #0;
	end
    v__h13767 = v__h13773 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d535)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h13767,
		   "D_MMU_Cache",
		   rg_addr,
		   word64__h6284,
		   64'd0);
	else
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h13767,
		   "I_MMU_Cache",
		   rg_addr,
		   word64__h6284,
		   64'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	   tlb$lookup[130]) &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d548)
	$display("        AMO LR: reserving PA 0x%0h", x1_avValue_pa__h5166);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d535)
	$display("        Read-hit: addr 0x%0h word64 0x%0h",
		 rg_addr,
		 word64__h6284);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d554)
	$display("        Read Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d561)
	$display("        AMO LR: cache refill: cancelling LR/SC reservation for PA 0x%0h",
		 rg_lrsc_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d732)
	$display("        ST: cancelling LR/SC reservation for PA",
		 x1_avValue_pa__h5166);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	   tlb$lookup[130]) &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d738)
	$display("        AMO SC: fail: reserved addr 0x%0h, this address 0x%0h",
		 rg_lrsc_pa,
		 x1_avValue_pa__h5166);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d745)
	$display("        AMO SC: fail due to invalid LR/SC reservation");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d750)
	$display("        AMO SC result = %0d", lrsc_result__h14150);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d756)
	$display("        Write-Cache-Hit: pa 0x%0h word64 0x%0h",
		 x1_avValue_pa__h5166,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d756)
	$write("        New Word64_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d756)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[12:6],
	       rg_addr[5:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d756)
	$write(" 0x%0x",
	       IF_rg_f3_39_EQ_0b0_40_THEN_IF_IF_rg_priv_9_ULE_ETC___d634);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d756)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d762)
	$display("        Write-Cache-Miss: pa 0x%0h word64 0x%0h",
		 x1_avValue_pa__h5166,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d768)
	$display("    Sending write address to main memory: 0x%0h",
		 fabric_addr__h19686);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d775)
	begin
	  v__h20290 = $stime;
	  #0;
	end
    v__h20284 = v__h20290 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d775)
	$display("%0d: ERROR: CreditCounter: overflow", v__h20284);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d775)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d783)
	$display("        Write-Hit/Miss: eaddr 0x%0h word64 0x%0h",
		 rg_addr,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d783)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d783)
	$write("AXI4_Lite_Wr_Addr { ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d783)
	$write("'h%h", fabric_addr__h19686);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d783)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d783)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d783)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d783)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d783)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d783)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d783)
	$write("AXI4_Lite_Wr_Data { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d783)
	$write("'h%h", mem_req_wr_data_wdata__h19944);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d783)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d783)
	$write("'h%h", mem_req_wr_data_wstrb__h19945, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d783)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d783)
	$display("    => rl_write_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d789)
	begin
	  v__h19641 = $stime;
	  #0;
	end
    v__h19635 = v__h19641 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d789)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h19635,
		   "D_MMU_Cache",
		   rg_addr,
		   64'd1,
		   64'd0);
	else
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h19635,
		   "I_MMU_Cache",
		   rg_addr,
		   64'd1,
		   64'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d789)
	$display("        AMO SC: Fail response for addr 0x%0h", rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d796)
	$display("        AMO Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d800)
	$display("    Sending AMO address to main memory: 0x%0h",
		 { fabric_addr__h19686, 3'd0 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d806)
	begin
	  v__h21043 = $stime;
	  #0;
	end
    v__h21037 = v__h21043 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d806)
	$display("%0d: ERROR: CreditCounter: overflow", v__h21037);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d806)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d814)
	$display("        AMO_op: cancelling LR/SC reservation for PA",
		 x1_avValue_pa__h5166);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d819)
	$display("        AMO: addr 0x%0h amo_f5 0x%0h f3 %0d rs2_val 0x%0h",
		 rg_addr,
		 rg_amo_funct7[6:2],
		 rg_f3,
		 w2__h6416);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d819)
	$display("          PA 0x%0h ", x1_avValue_pa__h5166);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d819)
	$display("          Cache word64 0x%0h, load-result 0x%0h",
		 word64__h6284,
		 w1__h6414);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d819)
	$display("          0x%0h  op  0x%0h -> 0x%0h",
		 w1__h6414,
		 w2__h6416,
		 _theResult_____1__h6421);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d819)
	$write("          New Word64_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d819)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[12:6],
	       rg_addr[5:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d819)
	$write(" 0x%0x",
	       IF_rg_f3_39_EQ_0b0_40_THEN_IF_IF_rg_priv_9_ULE_ETC___d699);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d819)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d819)
	$write("          To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d819)
	$write("AXI4_Lite_Wr_Addr { ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d819)
	$write("'h%h", fabric_addr__h19686);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d819)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d819)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d819)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d819)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d819)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d819)
	$write("                     ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d819)
	$write("AXI4_Lite_Wr_Data { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d819)
	$write("'h%h", mem_req_wr_data_wdata__h20728);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d819)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d819)
	$write("'h%h", mem_req_wr_data_wstrb__h19945, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d819)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_006___d1007)
	begin
	  v__h25925 = $stime;
	  #0;
	end
    v__h25919 = v__h25925 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_006___d1007)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_cache_refill_rsps_loop:",
		   v__h25919,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_cache_refill_rsps_loop:",
		   v__h25919,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_006___d1007)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_006___d1007)
	$write("AXI4_Lite_Rd_Data { ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_006___d1007 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0)
	$write("AXI4_LITE_OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_006___d1007 &&
	  master_xactor_rg_rd_data[65:64] == 2'd1)
	$write("AXI4_LITE_EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_006___d1007 &&
	  master_xactor_rg_rd_data[65:64] == 2'd2)
	$write("AXI4_LITE_SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_006___d1007 &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  master_xactor_rg_rd_data[65:64] != 2'd1 &&
	  master_xactor_rg_rd_data[65:64] != 2'd2)
	$write("AXI4_LITE_DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_006___d1007)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_006___d1007)
	$write("'h%h", master_xactor_rg_rd_data[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_006___d1007)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_006___d1007)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_006___d1007)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h26150 = $stime;
	  #0;
	end
    v__h26144 = v__h26150 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d",
		   v__h26144,
		   "D_MMU_Cache",
		   access_exc_code__h3126);
	else
	  $display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d",
		   v__h26144,
		   "I_MMU_Cache",
		   access_exc_code__h3126);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  rg_word64_set_in_cache[2:0] == 3'd7 &&
	  (master_xactor_rg_rd_data[65:64] != 2'd0 ||
	   rg_error_during_refill) &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$display("    => MODULE_EXCEPTION_RSP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  rg_word64_set_in_cache[2:0] == 3'd7 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !rg_error_during_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$display("    => CACHE_REREQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_006___d1007)
	$display("        Updating Cache [0x%0x] (Word64_Set %0d) old => new",
		 rg_word64_set_in_cache,
		 rg_word64_set_in_cache[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_006___d1007)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[12:6],
	       rg_word64_set_in_cache[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_006___d1007)
	$write(" 0x%0x", ram_word64_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_006___d1007)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_006___d1007)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[12:6],
	       rg_word64_set_in_cache[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_006___d1007)
	$write(" 0x%0x", master_xactor_rg_rd_data[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_006___d1007)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h27886 = $stime;
	  #0;
	end
    v__h27880 = v__h27886 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_read_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h27880,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_read_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h27880,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d11)
	$display("    ", { rg_pa, 3'd0 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h28021 = $stime;
	  #0;
	end
    v__h28015 = v__h28021 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h28015,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h28015,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11)
	$write("AXI4_Lite_Rd_Data { ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0)
	$write("AXI4_LITE_OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11 &&
	  master_xactor_rg_rd_data[65:64] == 2'd1)
	$write("AXI4_LITE_EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11 &&
	  master_xactor_rg_rd_data[65:64] == 2'd2)
	$write("AXI4_LITE_SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11 &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  master_xactor_rg_rd_data[65:64] != 2'd1 &&
	  master_xactor_rg_rd_data[65:64] != 2'd2)
	$write("AXI4_LITE_DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", master_xactor_rg_rd_data[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h28420 = $stime;
	  #0;
	end
    v__h28414 = v__h28420 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h28414,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0]);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h28414,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h28527 = $stime;
	  #0;
	end
    v__h28521 = v__h28527 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap FAULT_LOAD",
		   v__h28521,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap FAULT_LOAD",
		   v__h28521,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_wr_req && ctr_wr_rsps_pending_crg == 4'd15)
	begin
	  v__h29300 = $stime;
	  #0;
	end
    v__h29294 = v__h29300 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_wr_req && ctr_wr_rsps_pending_crg == 4'd15)
	$display("%0d: ERROR: CreditCounter: overflow", v__h29294);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_wr_req && ctr_wr_rsps_pending_crg == 4'd15)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_wr_req && !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h29445 = $stime;
	  #0;
	end
    v__h29439 = v__h29445 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_wr_req && !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_wr_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h29439,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_wr_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h29439,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_wr_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_wr_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("AXI4_Lite_Wr_Addr { ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_wr_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", io_req_wr_addr_awaddr__h28899);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_wr_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_wr_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_wr_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_wr_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_wr_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_wr_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_wr_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("AXI4_Lite_Wr_Data { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_wr_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", io_req_wr_data_wdata__h28985);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_wr_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_wr_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", io_req_wr_data_wstrb__h28986, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_wr_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_wr_req && !cfg_verbosity_read__0_ULE_1___d11)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h22083 = $stime;
	  #0;
	end
    v__h22077 = v__h22083 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_start_tlb_refill for eaddr 0x%0h",
		   v__h22077,
		   "D_MMU_Cache",
		   rg_addr);
	else
	  $display("%0d: %s.rl_start_tlb_refill for eaddr 0x%0h",
		   v__h22077,
		   "I_MMU_Cache",
		   rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("    Req for level 2 PTE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("AXI4_Lite_Rd_Addr { ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", lev_2_pte_pa_w64_fa__h21870);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h30745 = $stime;
	  #0;
	end
    v__h30739 = v__h30745 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $write("%0d: %s.req: op:", v__h30739, "D_MMU_Cache");
	else
	  $write("%0d: %s.req: op:", v__h30739, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11 && req_op == 2'd0)
	$write("CACHE_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11 && req_op == 2'd1)
	$write("CACHE_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11 && req_op != 2'd0 &&
	  req_op != 2'd1)
	$write("CACHE_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(" f3:%0d addr:0x%0h st_value:0x%0h priv:",
	       req_f3,
	       req_addr,
	       req_st_value);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11 && req_priv == 2'b0)
	$write("U");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11 && req_priv == 2'b01)
	$write("S");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11 && req_priv == 2'b11)
	$write("M");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11 && req_priv != 2'b0 &&
	  req_priv != 2'b01 &&
	  req_priv != 2'b11)
	$write("RESERVED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(" sstatus_SUM:%0d mstatus_MXR:%0d satp:0x%0h",
	       req_sstatus_SUM,
	       req_mstatus_MXR,
	       req_satp,
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11)
	$display("    amo_funct7 = 0x%0h", req_amo_funct7);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req &&
	  req_f3_BITS_1_TO_0_174_EQ_0b0_175_OR_req_f3_BI_ETC___d1204 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$display("    fa_req_ram_B tagCSet [0x%0x] word64_set [0x%0d]",
		 req_addr[12:6],
		 req_addr[12:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill && cfg_verbosity != 4'd0)
	$display("    Sending line read request to main memory: 0x%0h",
		 cline_addr__h25554);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h25502 = $stime;
	  #0;
	end
    v__h25496 = v__h25502 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $write("%0d: %s.rl_start_cache_refill: mem req: ",
		 v__h25496,
		 "D_MMU_Cache");
	else
	  $write("%0d: %s.rl_start_cache_refill: mem req: ",
		 v__h25496,
		 "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("AXI4_Lite_Rd_Addr { ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", cline_addr__h25554);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$display("    Victim way is %0d; => CACHE_REFILL", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_tlb_flush && !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h31899 = $stime;
	  #0;
	end
    v__h31893 = v__h31899 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_tlb_flush && !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.tlb_flush", v__h31893, "D_MMU_Cache");
	else
	  $display("%0d: %s.tlb_flush", v__h31893, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h30361 = $stime;
	  #0;
	end
    v__h30355 = v__h30361 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $write("%0d: %s.rl_discard_write_rsp: pending %0d ",
		 v__h30355,
		 "D_MMU_Cache",
		 $unsigned(b__h21859));
	else
	  $write("%0d: %s.rl_discard_write_rsp: pending %0d ",
		 v__h30355,
		 "I_MMU_Cache",
		 $unsigned(b__h21859));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("AXI4_Lite_Wr_Resp { ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("AXI4_LITE_OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	begin
	  v__h30322 = $stime;
	  #0;
	end
    v__h30316 = v__h30322 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_discard_write_rsp: fabric response error: exit",
		   v__h30316,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_discard_write_rsp: fabric response error: exit",
		   v__h30316,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	$write("AXI4_Lite_Wr_Resp { ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd1)
	$write("AXI4_LITE_EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd2)
	$write("AXI4_LITE_SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0 &&
	  master_xactor_rg_wr_resp != 2'd1 &&
	  master_xactor_rg_wr_resp != 2'd2)
	$write("AXI4_LITE_DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	$finish(32'd1);
  end
  // synopsys translate_on
endmodule  // mkMMU_Cache

