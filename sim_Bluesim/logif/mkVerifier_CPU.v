//
// Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
//
// On Fri Aug 24 10:27:47 BST 2018
//
//
// Ports:
// Name                         I/O  size props
// imem_master_awvalid            O     1
// imem_master_awaddr             O    64 reg
// imem_master_awprot             O     3 reg
// imem_master_wvalid             O     1
// imem_master_wdata              O    64 reg
// imem_master_wstrb              O     8 reg
// imem_master_bready             O     1
// imem_master_arvalid            O     1
// imem_master_araddr             O    64 reg
// imem_master_arprot             O     3 reg
// imem_master_rready             O     1
// dmem_master_awvalid            O     1
// dmem_master_awaddr             O    64 reg
// dmem_master_awprot             O     3 reg
// dmem_master_wvalid             O     1
// dmem_master_wdata              O    64 reg
// dmem_master_wstrb              O     8 reg
// dmem_master_bready             O     1
// dmem_master_arvalid            O     1
// dmem_master_araddr             O    64 reg
// dmem_master_arprot             O     3 reg
// dmem_master_rready             O     1
// near_mem_slave_awready         O     1 const
// near_mem_slave_wready          O     1 const
// near_mem_slave_bvalid          O     1 const
// near_mem_slave_bresp           O     2 const
// near_mem_slave_arready         O     1 const
// near_mem_slave_rvalid          O     1 const
// near_mem_slave_rresp           O     2 const
// near_mem_slave_rdata           O    64 const
// RDY_hart0_server_reset_request_put  O     1 reg
// RDY_hart0_server_reset_response_get  O     1 reg
// RDY_timer_interrupt_req        O     1 reg
// getPacket                      O   642 reg
// available                      O     1 reg
// halted                         O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// imem_master_awready            I     1
// imem_master_wready             I     1
// imem_master_bvalid             I     1
// imem_master_bresp              I     2 reg
// imem_master_arready            I     1
// imem_master_rvalid             I     1
// imem_master_rresp              I     2 reg
// imem_master_rdata              I    64 reg
// dmem_master_awready            I     1
// dmem_master_wready             I     1
// dmem_master_bvalid             I     1
// dmem_master_bresp              I     2 reg
// dmem_master_arready            I     1
// dmem_master_rvalid             I     1
// dmem_master_rresp              I     2 reg
// dmem_master_rdata              I    64 reg
// near_mem_slave_awvalid         I     1 unused
// near_mem_slave_awaddr          I    64 unused
// near_mem_slave_awprot          I     3 unused
// near_mem_slave_wvalid          I     1 unused
// near_mem_slave_wdata           I    64 unused
// near_mem_slave_wstrb           I     8 unused
// near_mem_slave_bready          I     1 unused
// near_mem_slave_arvalid         I     1 unused
// near_mem_slave_araddr          I    64 unused
// near_mem_slave_arprot          I     3 unused
// near_mem_slave_rready          I     1 unused
// timer_interrupt_req_set_not_clear  I     1 reg
// EN_hart0_server_reset_request_put  I     1
// EN_hart0_server_reset_response_get  I     1
// EN_external_interrupt_req      I     1
// EN_timer_interrupt_req         I     1
// EN_software_interrupt_req      I     1
// sent                           I     1
//
// Combinational paths from inputs to outputs:
//   (imem_master_awready, imem_master_wready) -> imem_master_bready
//   (imem_master_awready,
//    imem_master_wready,
//    imem_master_arready,
//    dmem_master_awready,
//    dmem_master_wready) -> imem_master_rready
//   (imem_master_awready,
//    imem_master_wready,
//    dmem_master_awready,
//    dmem_master_wready,
//    dmem_master_arready) -> dmem_master_rready
//   (dmem_master_awready, dmem_master_wready) -> dmem_master_bready
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkVerifier_CPU(CLK,
		      RST_N,

		      imem_master_awvalid,

		      imem_master_awaddr,

		      imem_master_awprot,

		      imem_master_awready,

		      imem_master_wvalid,

		      imem_master_wdata,

		      imem_master_wstrb,

		      imem_master_wready,

		      imem_master_bvalid,
		      imem_master_bresp,

		      imem_master_bready,

		      imem_master_arvalid,

		      imem_master_araddr,

		      imem_master_arprot,

		      imem_master_arready,

		      imem_master_rvalid,
		      imem_master_rresp,
		      imem_master_rdata,

		      imem_master_rready,

		      dmem_master_awvalid,

		      dmem_master_awaddr,

		      dmem_master_awprot,

		      dmem_master_awready,

		      dmem_master_wvalid,

		      dmem_master_wdata,

		      dmem_master_wstrb,

		      dmem_master_wready,

		      dmem_master_bvalid,
		      dmem_master_bresp,

		      dmem_master_bready,

		      dmem_master_arvalid,

		      dmem_master_araddr,

		      dmem_master_arprot,

		      dmem_master_arready,

		      dmem_master_rvalid,
		      dmem_master_rresp,
		      dmem_master_rdata,

		      dmem_master_rready,

		      near_mem_slave_awvalid,
		      near_mem_slave_awaddr,
		      near_mem_slave_awprot,

		      near_mem_slave_awready,

		      near_mem_slave_wvalid,
		      near_mem_slave_wdata,
		      near_mem_slave_wstrb,

		      near_mem_slave_wready,

		      near_mem_slave_bvalid,

		      near_mem_slave_bresp,

		      near_mem_slave_bready,

		      near_mem_slave_arvalid,
		      near_mem_slave_araddr,
		      near_mem_slave_arprot,

		      near_mem_slave_arready,

		      near_mem_slave_rvalid,

		      near_mem_slave_rresp,

		      near_mem_slave_rdata,

		      near_mem_slave_rready,

		      EN_hart0_server_reset_request_put,
		      RDY_hart0_server_reset_request_put,

		      EN_hart0_server_reset_response_get,
		      RDY_hart0_server_reset_response_get,

		      EN_external_interrupt_req,

		      timer_interrupt_req_set_not_clear,
		      EN_timer_interrupt_req,
		      RDY_timer_interrupt_req,

		      EN_software_interrupt_req,

		      sent,
		      getPacket,
		      available,

		      halted);
  parameter [63 : 0] pc_reset_value = 64'b0;
  input  CLK;
  input  RST_N;

  // value method imem_master_m_awvalid
  output imem_master_awvalid;

  // value method imem_master_m_awaddr
  output [63 : 0] imem_master_awaddr;

  // value method imem_master_m_awprot
  output [2 : 0] imem_master_awprot;

  // value method imem_master_m_awuser

  // action method imem_master_m_awready
  input  imem_master_awready;

  // value method imem_master_m_wvalid
  output imem_master_wvalid;

  // value method imem_master_m_wdata
  output [63 : 0] imem_master_wdata;

  // value method imem_master_m_wstrb
  output [7 : 0] imem_master_wstrb;

  // action method imem_master_m_wready
  input  imem_master_wready;

  // action method imem_master_m_bvalid
  input  imem_master_bvalid;
  input  [1 : 0] imem_master_bresp;

  // value method imem_master_m_bready
  output imem_master_bready;

  // value method imem_master_m_arvalid
  output imem_master_arvalid;

  // value method imem_master_m_araddr
  output [63 : 0] imem_master_araddr;

  // value method imem_master_m_arprot
  output [2 : 0] imem_master_arprot;

  // value method imem_master_m_aruser

  // action method imem_master_m_arready
  input  imem_master_arready;

  // action method imem_master_m_rvalid
  input  imem_master_rvalid;
  input  [1 : 0] imem_master_rresp;
  input  [63 : 0] imem_master_rdata;

  // value method imem_master_m_rready
  output imem_master_rready;

  // value method dmem_master_m_awvalid
  output dmem_master_awvalid;

  // value method dmem_master_m_awaddr
  output [63 : 0] dmem_master_awaddr;

  // value method dmem_master_m_awprot
  output [2 : 0] dmem_master_awprot;

  // value method dmem_master_m_awuser

  // action method dmem_master_m_awready
  input  dmem_master_awready;

  // value method dmem_master_m_wvalid
  output dmem_master_wvalid;

  // value method dmem_master_m_wdata
  output [63 : 0] dmem_master_wdata;

  // value method dmem_master_m_wstrb
  output [7 : 0] dmem_master_wstrb;

  // action method dmem_master_m_wready
  input  dmem_master_wready;

  // action method dmem_master_m_bvalid
  input  dmem_master_bvalid;
  input  [1 : 0] dmem_master_bresp;

  // value method dmem_master_m_bready
  output dmem_master_bready;

  // value method dmem_master_m_arvalid
  output dmem_master_arvalid;

  // value method dmem_master_m_araddr
  output [63 : 0] dmem_master_araddr;

  // value method dmem_master_m_arprot
  output [2 : 0] dmem_master_arprot;

  // value method dmem_master_m_aruser

  // action method dmem_master_m_arready
  input  dmem_master_arready;

  // action method dmem_master_m_rvalid
  input  dmem_master_rvalid;
  input  [1 : 0] dmem_master_rresp;
  input  [63 : 0] dmem_master_rdata;

  // value method dmem_master_m_rready
  output dmem_master_rready;

  // action method near_mem_slave_m_awvalid
  input  near_mem_slave_awvalid;
  input  [63 : 0] near_mem_slave_awaddr;
  input  [2 : 0] near_mem_slave_awprot;

  // value method near_mem_slave_m_awready
  output near_mem_slave_awready;

  // action method near_mem_slave_m_wvalid
  input  near_mem_slave_wvalid;
  input  [63 : 0] near_mem_slave_wdata;
  input  [7 : 0] near_mem_slave_wstrb;

  // value method near_mem_slave_m_wready
  output near_mem_slave_wready;

  // value method near_mem_slave_m_bvalid
  output near_mem_slave_bvalid;

  // value method near_mem_slave_m_bresp
  output [1 : 0] near_mem_slave_bresp;

  // value method near_mem_slave_m_buser

  // action method near_mem_slave_m_bready
  input  near_mem_slave_bready;

  // action method near_mem_slave_m_arvalid
  input  near_mem_slave_arvalid;
  input  [63 : 0] near_mem_slave_araddr;
  input  [2 : 0] near_mem_slave_arprot;

  // value method near_mem_slave_m_arready
  output near_mem_slave_arready;

  // value method near_mem_slave_m_rvalid
  output near_mem_slave_rvalid;

  // value method near_mem_slave_m_rresp
  output [1 : 0] near_mem_slave_rresp;

  // value method near_mem_slave_m_rdata
  output [63 : 0] near_mem_slave_rdata;

  // value method near_mem_slave_m_ruser

  // action method near_mem_slave_m_rready
  input  near_mem_slave_rready;

  // action method hart0_server_reset_request_put
  input  EN_hart0_server_reset_request_put;
  output RDY_hart0_server_reset_request_put;

  // action method hart0_server_reset_response_get
  input  EN_hart0_server_reset_response_get;
  output RDY_hart0_server_reset_response_get;

  // action method external_interrupt_req
  input  EN_external_interrupt_req;

  // action method timer_interrupt_req
  input  timer_interrupt_req_set_not_clear;
  input  EN_timer_interrupt_req;
  output RDY_timer_interrupt_req;

  // action method software_interrupt_req
  input  EN_software_interrupt_req;

  // actionvalue method getPacket
  input  sent;
  output [641 : 0] getPacket;
  output available;

  // value method halted
  output halted;

  // signals for module outputs
  wire [641 : 0] getPacket;
  wire [63 : 0] dmem_master_araddr,
		dmem_master_awaddr,
		dmem_master_wdata,
		imem_master_araddr,
		imem_master_awaddr,
		imem_master_wdata,
		near_mem_slave_rdata;
  wire [7 : 0] dmem_master_wstrb, imem_master_wstrb;
  wire [2 : 0] dmem_master_arprot,
	       dmem_master_awprot,
	       imem_master_arprot,
	       imem_master_awprot;
  wire [1 : 0] near_mem_slave_bresp, near_mem_slave_rresp;
  wire RDY_hart0_server_reset_request_put,
       RDY_hart0_server_reset_response_get,
       RDY_timer_interrupt_req,
       available,
       dmem_master_arvalid,
       dmem_master_awvalid,
       dmem_master_bready,
       dmem_master_rready,
       dmem_master_wvalid,
       halted,
       imem_master_arvalid,
       imem_master_awvalid,
       imem_master_bready,
       imem_master_rready,
       imem_master_wvalid,
       near_mem_slave_arready,
       near_mem_slave_awready,
       near_mem_slave_bvalid,
       near_mem_slave_rvalid,
       near_mem_slave_wready;

  // ports of submodule core
  wire [641 : 0] core$to_verifier_get;
  wire [63 : 0] core$dmem_master_araddr,
		core$dmem_master_awaddr,
		core$dmem_master_rdata,
		core$dmem_master_wdata,
		core$imem_master_araddr,
		core$imem_master_awaddr,
		core$imem_master_rdata,
		core$imem_master_wdata,
		core$near_mem_slave_araddr,
		core$near_mem_slave_awaddr,
		core$near_mem_slave_rdata,
		core$near_mem_slave_wdata;
  wire [7 : 0] core$dmem_master_wstrb,
	       core$imem_master_wstrb,
	       core$near_mem_slave_wstrb;
  wire [2 : 0] core$dmem_master_arprot,
	       core$dmem_master_awprot,
	       core$imem_master_arprot,
	       core$imem_master_awprot,
	       core$near_mem_slave_arprot,
	       core$near_mem_slave_awprot;
  wire [1 : 0] core$dmem_master_bresp,
	       core$dmem_master_rresp,
	       core$imem_master_bresp,
	       core$imem_master_rresp,
	       core$near_mem_slave_bresp,
	       core$near_mem_slave_rresp;
  wire core$EN_external_interrupt_req,
       core$EN_hart0_server_reset_request_put,
       core$EN_hart0_server_reset_response_get,
       core$EN_software_interrupt_req,
       core$EN_timer_interrupt_req,
       core$EN_to_verifier_get,
       core$RDY_hart0_server_reset_request_put,
       core$RDY_hart0_server_reset_response_get,
       core$RDY_timer_interrupt_req,
       core$RDY_to_verifier_get,
       core$dmem_master_arready,
       core$dmem_master_arvalid,
       core$dmem_master_awready,
       core$dmem_master_awvalid,
       core$dmem_master_bready,
       core$dmem_master_bvalid,
       core$dmem_master_rready,
       core$dmem_master_rvalid,
       core$dmem_master_wready,
       core$dmem_master_wvalid,
       core$halted,
       core$imem_master_arready,
       core$imem_master_arvalid,
       core$imem_master_awready,
       core$imem_master_awvalid,
       core$imem_master_bready,
       core$imem_master_bvalid,
       core$imem_master_rready,
       core$imem_master_rvalid,
       core$imem_master_wready,
       core$imem_master_wvalid,
       core$near_mem_slave_arready,
       core$near_mem_slave_arvalid,
       core$near_mem_slave_awready,
       core$near_mem_slave_awvalid,
       core$near_mem_slave_bready,
       core$near_mem_slave_bvalid,
       core$near_mem_slave_rready,
       core$near_mem_slave_rvalid,
       core$near_mem_slave_wready,
       core$near_mem_slave_wvalid,
       core$timer_interrupt_req_set_not_clear;

  // rule scheduling signals
  wire CAN_FIRE_dmem_master_m_arready,
       CAN_FIRE_dmem_master_m_awready,
       CAN_FIRE_dmem_master_m_bvalid,
       CAN_FIRE_dmem_master_m_rvalid,
       CAN_FIRE_dmem_master_m_wready,
       CAN_FIRE_external_interrupt_req,
       CAN_FIRE_getPacket,
       CAN_FIRE_hart0_server_reset_request_put,
       CAN_FIRE_hart0_server_reset_response_get,
       CAN_FIRE_imem_master_m_arready,
       CAN_FIRE_imem_master_m_awready,
       CAN_FIRE_imem_master_m_bvalid,
       CAN_FIRE_imem_master_m_rvalid,
       CAN_FIRE_imem_master_m_wready,
       CAN_FIRE_near_mem_slave_m_arvalid,
       CAN_FIRE_near_mem_slave_m_awvalid,
       CAN_FIRE_near_mem_slave_m_bready,
       CAN_FIRE_near_mem_slave_m_rready,
       CAN_FIRE_near_mem_slave_m_wvalid,
       CAN_FIRE_software_interrupt_req,
       CAN_FIRE_timer_interrupt_req,
       WILL_FIRE_dmem_master_m_arready,
       WILL_FIRE_dmem_master_m_awready,
       WILL_FIRE_dmem_master_m_bvalid,
       WILL_FIRE_dmem_master_m_rvalid,
       WILL_FIRE_dmem_master_m_wready,
       WILL_FIRE_external_interrupt_req,
       WILL_FIRE_getPacket,
       WILL_FIRE_hart0_server_reset_request_put,
       WILL_FIRE_hart0_server_reset_response_get,
       WILL_FIRE_imem_master_m_arready,
       WILL_FIRE_imem_master_m_awready,
       WILL_FIRE_imem_master_m_bvalid,
       WILL_FIRE_imem_master_m_rvalid,
       WILL_FIRE_imem_master_m_wready,
       WILL_FIRE_near_mem_slave_m_arvalid,
       WILL_FIRE_near_mem_slave_m_awvalid,
       WILL_FIRE_near_mem_slave_m_bready,
       WILL_FIRE_near_mem_slave_m_rready,
       WILL_FIRE_near_mem_slave_m_wvalid,
       WILL_FIRE_software_interrupt_req,
       WILL_FIRE_timer_interrupt_req;

  // value method imem_master_m_awvalid
  assign imem_master_awvalid = core$imem_master_awvalid ;

  // value method imem_master_m_awaddr
  assign imem_master_awaddr = core$imem_master_awaddr ;

  // value method imem_master_m_awprot
  assign imem_master_awprot = core$imem_master_awprot ;

  // action method imem_master_m_awready
  assign CAN_FIRE_imem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_awready = 1'd1 ;

  // value method imem_master_m_wvalid
  assign imem_master_wvalid = core$imem_master_wvalid ;

  // value method imem_master_m_wdata
  assign imem_master_wdata = core$imem_master_wdata ;

  // value method imem_master_m_wstrb
  assign imem_master_wstrb = core$imem_master_wstrb ;

  // action method imem_master_m_wready
  assign CAN_FIRE_imem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_wready = 1'd1 ;

  // action method imem_master_m_bvalid
  assign CAN_FIRE_imem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_imem_master_m_bvalid = 1'd1 ;

  // value method imem_master_m_bready
  assign imem_master_bready = core$imem_master_bready ;

  // value method imem_master_m_arvalid
  assign imem_master_arvalid = core$imem_master_arvalid ;

  // value method imem_master_m_araddr
  assign imem_master_araddr = core$imem_master_araddr ;

  // value method imem_master_m_arprot
  assign imem_master_arprot = core$imem_master_arprot ;

  // action method imem_master_m_arready
  assign CAN_FIRE_imem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_arready = 1'd1 ;

  // action method imem_master_m_rvalid
  assign CAN_FIRE_imem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_imem_master_m_rvalid = 1'd1 ;

  // value method imem_master_m_rready
  assign imem_master_rready = core$imem_master_rready ;

  // value method dmem_master_m_awvalid
  assign dmem_master_awvalid = core$dmem_master_awvalid ;

  // value method dmem_master_m_awaddr
  assign dmem_master_awaddr = core$dmem_master_awaddr ;

  // value method dmem_master_m_awprot
  assign dmem_master_awprot = core$dmem_master_awprot ;

  // action method dmem_master_m_awready
  assign CAN_FIRE_dmem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_awready = 1'd1 ;

  // value method dmem_master_m_wvalid
  assign dmem_master_wvalid = core$dmem_master_wvalid ;

  // value method dmem_master_m_wdata
  assign dmem_master_wdata = core$dmem_master_wdata ;

  // value method dmem_master_m_wstrb
  assign dmem_master_wstrb = core$dmem_master_wstrb ;

  // action method dmem_master_m_wready
  assign CAN_FIRE_dmem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_wready = 1'd1 ;

  // action method dmem_master_m_bvalid
  assign CAN_FIRE_dmem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_bvalid = 1'd1 ;

  // value method dmem_master_m_bready
  assign dmem_master_bready = core$dmem_master_bready ;

  // value method dmem_master_m_arvalid
  assign dmem_master_arvalid = core$dmem_master_arvalid ;

  // value method dmem_master_m_araddr
  assign dmem_master_araddr = core$dmem_master_araddr ;

  // value method dmem_master_m_arprot
  assign dmem_master_arprot = core$dmem_master_arprot ;

  // action method dmem_master_m_arready
  assign CAN_FIRE_dmem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_arready = 1'd1 ;

  // action method dmem_master_m_rvalid
  assign CAN_FIRE_dmem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_rvalid = 1'd1 ;

  // value method dmem_master_m_rready
  assign dmem_master_rready = core$dmem_master_rready ;

  // action method near_mem_slave_m_awvalid
  assign CAN_FIRE_near_mem_slave_m_awvalid = 1'd1 ;
  assign WILL_FIRE_near_mem_slave_m_awvalid = 1'd1 ;

  // value method near_mem_slave_m_awready
  assign near_mem_slave_awready = core$near_mem_slave_awready ;

  // action method near_mem_slave_m_wvalid
  assign CAN_FIRE_near_mem_slave_m_wvalid = 1'd1 ;
  assign WILL_FIRE_near_mem_slave_m_wvalid = 1'd1 ;

  // value method near_mem_slave_m_wready
  assign near_mem_slave_wready = core$near_mem_slave_wready ;

  // value method near_mem_slave_m_bvalid
  assign near_mem_slave_bvalid = core$near_mem_slave_bvalid ;

  // value method near_mem_slave_m_bresp
  assign near_mem_slave_bresp = core$near_mem_slave_bresp ;

  // action method near_mem_slave_m_bready
  assign CAN_FIRE_near_mem_slave_m_bready = 1'd1 ;
  assign WILL_FIRE_near_mem_slave_m_bready = 1'd1 ;

  // action method near_mem_slave_m_arvalid
  assign CAN_FIRE_near_mem_slave_m_arvalid = 1'd1 ;
  assign WILL_FIRE_near_mem_slave_m_arvalid = 1'd1 ;

  // value method near_mem_slave_m_arready
  assign near_mem_slave_arready = core$near_mem_slave_arready ;

  // value method near_mem_slave_m_rvalid
  assign near_mem_slave_rvalid = core$near_mem_slave_rvalid ;

  // value method near_mem_slave_m_rresp
  assign near_mem_slave_rresp = core$near_mem_slave_rresp ;

  // value method near_mem_slave_m_rdata
  assign near_mem_slave_rdata = core$near_mem_slave_rdata ;

  // action method near_mem_slave_m_rready
  assign CAN_FIRE_near_mem_slave_m_rready = 1'd1 ;
  assign WILL_FIRE_near_mem_slave_m_rready = 1'd1 ;

  // action method hart0_server_reset_request_put
  assign RDY_hart0_server_reset_request_put =
	     core$RDY_hart0_server_reset_request_put ;
  assign CAN_FIRE_hart0_server_reset_request_put =
	     core$RDY_hart0_server_reset_request_put ;
  assign WILL_FIRE_hart0_server_reset_request_put =
	     EN_hart0_server_reset_request_put ;

  // action method hart0_server_reset_response_get
  assign RDY_hart0_server_reset_response_get =
	     core$RDY_hart0_server_reset_response_get ;
  assign CAN_FIRE_hart0_server_reset_response_get =
	     core$RDY_hart0_server_reset_response_get ;
  assign WILL_FIRE_hart0_server_reset_response_get =
	     EN_hart0_server_reset_response_get ;

  // action method external_interrupt_req
  assign CAN_FIRE_external_interrupt_req = 1'd1 ;
  assign WILL_FIRE_external_interrupt_req = EN_external_interrupt_req ;

  // action method timer_interrupt_req
  assign RDY_timer_interrupt_req = core$RDY_timer_interrupt_req ;
  assign CAN_FIRE_timer_interrupt_req = core$RDY_timer_interrupt_req ;
  assign WILL_FIRE_timer_interrupt_req = EN_timer_interrupt_req ;

  // action method software_interrupt_req
  assign CAN_FIRE_software_interrupt_req = 1'd1 ;
  assign WILL_FIRE_software_interrupt_req = EN_software_interrupt_req ;

  // actionvalue method getPacket
  assign getPacket = core$to_verifier_get ;
  assign available = core$RDY_to_verifier_get ;
  assign CAN_FIRE_getPacket = core$RDY_to_verifier_get ;
  assign WILL_FIRE_getPacket = sent ;

  // value method halted
  assign halted = core$halted ;

  // submodule core
  mkCPU #(.pc_reset_value(pc_reset_value)) core(.CLK(CLK),
						.RST_N(RST_N),
						.dmem_master_arready(core$dmem_master_arready),
						.dmem_master_awready(core$dmem_master_awready),
						.dmem_master_bresp(core$dmem_master_bresp),
						.dmem_master_bvalid(core$dmem_master_bvalid),
						.dmem_master_rdata(core$dmem_master_rdata),
						.dmem_master_rresp(core$dmem_master_rresp),
						.dmem_master_rvalid(core$dmem_master_rvalid),
						.dmem_master_wready(core$dmem_master_wready),
						.imem_master_arready(core$imem_master_arready),
						.imem_master_awready(core$imem_master_awready),
						.imem_master_bresp(core$imem_master_bresp),
						.imem_master_bvalid(core$imem_master_bvalid),
						.imem_master_rdata(core$imem_master_rdata),
						.imem_master_rresp(core$imem_master_rresp),
						.imem_master_rvalid(core$imem_master_rvalid),
						.imem_master_wready(core$imem_master_wready),
						.near_mem_slave_araddr(core$near_mem_slave_araddr),
						.near_mem_slave_arprot(core$near_mem_slave_arprot),
						.near_mem_slave_arvalid(core$near_mem_slave_arvalid),
						.near_mem_slave_awaddr(core$near_mem_slave_awaddr),
						.near_mem_slave_awprot(core$near_mem_slave_awprot),
						.near_mem_slave_awvalid(core$near_mem_slave_awvalid),
						.near_mem_slave_bready(core$near_mem_slave_bready),
						.near_mem_slave_rready(core$near_mem_slave_rready),
						.near_mem_slave_wdata(core$near_mem_slave_wdata),
						.near_mem_slave_wstrb(core$near_mem_slave_wstrb),
						.near_mem_slave_wvalid(core$near_mem_slave_wvalid),
						.timer_interrupt_req_set_not_clear(core$timer_interrupt_req_set_not_clear),
						.EN_hart0_server_reset_request_put(core$EN_hart0_server_reset_request_put),
						.EN_hart0_server_reset_response_get(core$EN_hart0_server_reset_response_get),
						.EN_external_interrupt_req(core$EN_external_interrupt_req),
						.EN_timer_interrupt_req(core$EN_timer_interrupt_req),
						.EN_software_interrupt_req(core$EN_software_interrupt_req),
						.EN_to_verifier_get(core$EN_to_verifier_get),
						.RDY_hart0_server_reset_request_put(core$RDY_hart0_server_reset_request_put),
						.RDY_hart0_server_reset_response_get(core$RDY_hart0_server_reset_response_get),
						.imem_master_awvalid(core$imem_master_awvalid),
						.imem_master_awaddr(core$imem_master_awaddr),
						.imem_master_awprot(core$imem_master_awprot),
						.imem_master_wvalid(core$imem_master_wvalid),
						.imem_master_wdata(core$imem_master_wdata),
						.imem_master_wstrb(core$imem_master_wstrb),
						.imem_master_bready(core$imem_master_bready),
						.imem_master_arvalid(core$imem_master_arvalid),
						.imem_master_araddr(core$imem_master_araddr),
						.imem_master_arprot(core$imem_master_arprot),
						.imem_master_rready(core$imem_master_rready),
						.dmem_master_awvalid(core$dmem_master_awvalid),
						.dmem_master_awaddr(core$dmem_master_awaddr),
						.dmem_master_awprot(core$dmem_master_awprot),
						.dmem_master_wvalid(core$dmem_master_wvalid),
						.dmem_master_wdata(core$dmem_master_wdata),
						.dmem_master_wstrb(core$dmem_master_wstrb),
						.dmem_master_bready(core$dmem_master_bready),
						.dmem_master_arvalid(core$dmem_master_arvalid),
						.dmem_master_araddr(core$dmem_master_araddr),
						.dmem_master_arprot(core$dmem_master_arprot),
						.dmem_master_rready(core$dmem_master_rready),
						.near_mem_slave_awready(core$near_mem_slave_awready),
						.near_mem_slave_wready(core$near_mem_slave_wready),
						.near_mem_slave_bvalid(core$near_mem_slave_bvalid),
						.near_mem_slave_bresp(core$near_mem_slave_bresp),
						.near_mem_slave_arready(core$near_mem_slave_arready),
						.near_mem_slave_rvalid(core$near_mem_slave_rvalid),
						.near_mem_slave_rresp(core$near_mem_slave_rresp),
						.near_mem_slave_rdata(core$near_mem_slave_rdata),
						.RDY_timer_interrupt_req(core$RDY_timer_interrupt_req),
						.to_verifier_get(core$to_verifier_get),
						.RDY_to_verifier_get(core$RDY_to_verifier_get),
						.halted(core$halted));

  // submodule core
  assign core$dmem_master_arready = dmem_master_arready ;
  assign core$dmem_master_awready = dmem_master_awready ;
  assign core$dmem_master_bresp = dmem_master_bresp ;
  assign core$dmem_master_bvalid = dmem_master_bvalid ;
  assign core$dmem_master_rdata = dmem_master_rdata ;
  assign core$dmem_master_rresp = dmem_master_rresp ;
  assign core$dmem_master_rvalid = dmem_master_rvalid ;
  assign core$dmem_master_wready = dmem_master_wready ;
  assign core$imem_master_arready = imem_master_arready ;
  assign core$imem_master_awready = imem_master_awready ;
  assign core$imem_master_bresp = imem_master_bresp ;
  assign core$imem_master_bvalid = imem_master_bvalid ;
  assign core$imem_master_rdata = imem_master_rdata ;
  assign core$imem_master_rresp = imem_master_rresp ;
  assign core$imem_master_rvalid = imem_master_rvalid ;
  assign core$imem_master_wready = imem_master_wready ;
  assign core$near_mem_slave_araddr = near_mem_slave_araddr ;
  assign core$near_mem_slave_arprot = near_mem_slave_arprot ;
  assign core$near_mem_slave_arvalid = near_mem_slave_arvalid ;
  assign core$near_mem_slave_awaddr = near_mem_slave_awaddr ;
  assign core$near_mem_slave_awprot = near_mem_slave_awprot ;
  assign core$near_mem_slave_awvalid = near_mem_slave_awvalid ;
  assign core$near_mem_slave_bready = near_mem_slave_bready ;
  assign core$near_mem_slave_rready = near_mem_slave_rready ;
  assign core$near_mem_slave_wdata = near_mem_slave_wdata ;
  assign core$near_mem_slave_wstrb = near_mem_slave_wstrb ;
  assign core$near_mem_slave_wvalid = near_mem_slave_wvalid ;
  assign core$timer_interrupt_req_set_not_clear =
	     timer_interrupt_req_set_not_clear ;
  assign core$EN_hart0_server_reset_request_put =
	     EN_hart0_server_reset_request_put ;
  assign core$EN_hart0_server_reset_response_get =
	     EN_hart0_server_reset_response_get ;
  assign core$EN_external_interrupt_req = EN_external_interrupt_req ;
  assign core$EN_timer_interrupt_req = EN_timer_interrupt_req ;
  assign core$EN_software_interrupt_req = EN_software_interrupt_req ;
  assign core$EN_to_verifier_get = sent ;
endmodule  // mkVerifier_CPU

