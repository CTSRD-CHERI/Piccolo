/*
 * Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
 * 
 * On Wed Aug 15 16:11:17 BST 2018
 * 
 */
#include "bluesim_primitives.h"
#include "mkTop_HW_Side.h"


/* String declarations */
static std::string const __str_literal_1("%c", 2u);
static std::string const __str_literal_3("================================================================",
					 64u);
static std::string const __str_literal_4("Bluespec RISC-V standalone system simulation v1.1", 49u);
static std::string const __str_literal_5("Copyright (c) 2017-2018 Bluespec, Inc. All Rights Reserved.",
					 59u);
static std::string const __str_literal_2("[ASCII 0x%h]", 12u);


/* Constructor */
MOD_mkTop_HW_Side::MOD_mkTop_HW_Side(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_mem_model(simHdl, "mem_model", this),
    INST_rg_banner_printed(simHdl, "rg_banner_printed", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_soc_top(simHdl, "soc_top", this),
    PORT_RST_N((tUInt8)1u),
    DEF_soc_top_to_raw_mem_request_get___d4(353u),
    DEF_mem_model_mem_server_response_get___d8(256u)
{
  symbol_count = 7u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTop_HW_Side::init_symbols_0()
{
  init_symbol(&symbols[0u], "mem_model", SYM_MODULE, &INST_mem_model);
  init_symbol(&symbols[1u], "RL_memCnx_ClientServerRequest", SYM_RULE);
  init_symbol(&symbols[2u], "RL_memCnx_ClientServerResponse", SYM_RULE);
  init_symbol(&symbols[3u], "RL_rl_relay_console_out", SYM_RULE);
  init_symbol(&symbols[4u], "RL_rl_step0", SYM_RULE);
  init_symbol(&symbols[5u], "rg_banner_printed", SYM_MODULE, &INST_rg_banner_printed);
  init_symbol(&symbols[6u], "soc_top", SYM_MODULE, &INST_soc_top);
}


/* Rule actions */

void MOD_mkTop_HW_Side::RL_memCnx_ClientServerRequest()
{
  tUWide DEF_AVMeth_soc_top_to_raw_mem_request_get(353u, false);
  DEF_AVMeth_soc_top_to_raw_mem_request_get = INST_soc_top.METH_to_raw_mem_request_get();
  DEF_soc_top_to_raw_mem_request_get___d4 = DEF_AVMeth_soc_top_to_raw_mem_request_get;
  INST_mem_model.METH_mem_server_request_put(DEF_soc_top_to_raw_mem_request_get___d4);
}

void MOD_mkTop_HW_Side::RL_memCnx_ClientServerResponse()
{
  tUWide DEF_AVMeth_mem_model_mem_server_response_get(256u, false);
  DEF_AVMeth_mem_model_mem_server_response_get = INST_mem_model.METH_mem_server_response_get();
  DEF_mem_model_mem_server_response_get___d8 = DEF_AVMeth_mem_model_mem_server_response_get;
  INST_soc_top.METH_to_raw_mem_response_put(DEF_mem_model_mem_server_response_get___d8);
}

void MOD_mkTop_HW_Side::RL_rl_relay_console_out()
{
  tUInt8 DEF_soc_top_get_to_console_get_0_ULT_0x20___d18;
  tUInt8 DEF_NOT_soc_top_get_to_console_get_0_EQ_0x8_1_1_AN_ETC___d28;
  tUInt8 DEF_soc_top_get_to_console_get_0_EQ_0x8_1_OR_soc_t_ETC___d20;
  tUInt8 DEF_soc_top_get_to_console_get_0_EQ_0x8___d11;
  tUInt8 DEF_soc_top_get_to_console_get_0_EQ_0x9___d12;
  tUInt8 DEF_soc_top_get_to_console_get_0_EQ_0xA___d14;
  tUInt8 DEF_soc_top_get_to_console_get_0_EQ_0x15___d16;
  tUInt8 DEF_v__h270;
  tUInt8 DEF_AVMeth_soc_top_get_to_console_get;
  DEF_AVMeth_soc_top_get_to_console_get = INST_soc_top.METH_get_to_console_get();
  DEF_v__h270 = DEF_AVMeth_soc_top_get_to_console_get;
  DEF_soc_top_get_to_console_get_0_EQ_0x15___d16 = DEF_v__h270 == (tUInt8)21u;
  DEF_soc_top_get_to_console_get_0_EQ_0xA___d14 = DEF_v__h270 == (tUInt8)10u;
  DEF_soc_top_get_to_console_get_0_EQ_0x9___d12 = DEF_v__h270 == (tUInt8)9u;
  DEF_soc_top_get_to_console_get_0_EQ_0x8___d11 = DEF_v__h270 == (tUInt8)8u;
  DEF_soc_top_get_to_console_get_0_ULT_0x20___d18 = DEF_v__h270 < (tUInt8)32u;
  DEF_soc_top_get_to_console_get_0_EQ_0x8_1_OR_soc_t_ETC___d20 = (((DEF_soc_top_get_to_console_get_0_EQ_0x8___d11 || DEF_soc_top_get_to_console_get_0_EQ_0x9___d12) || DEF_soc_top_get_to_console_get_0_EQ_0xA___d14) || DEF_soc_top_get_to_console_get_0_EQ_0x15___d16) || !DEF_soc_top_get_to_console_get_0_ULT_0x20___d18;
  DEF_NOT_soc_top_get_to_console_get_0_EQ_0x8_1_1_AN_ETC___d28 = (((!DEF_soc_top_get_to_console_get_0_EQ_0x8___d11 && !DEF_soc_top_get_to_console_get_0_EQ_0x9___d12) && !DEF_soc_top_get_to_console_get_0_EQ_0xA___d14) && !DEF_soc_top_get_to_console_get_0_EQ_0x15___d16) && DEF_soc_top_get_to_console_get_0_ULT_0x20___d18;
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_soc_top_get_to_console_get_0_EQ_0x8_1_OR_soc_t_ETC___d20)
      dollar_write(sim_hdl, this, "s,8", &__str_literal_1, DEF_v__h270);
    if (DEF_NOT_soc_top_get_to_console_get_0_EQ_0x8_1_1_AN_ETC___d28)
      dollar_write(sim_hdl, this, "s,8", &__str_literal_2, DEF_v__h270);
    dollar_fflush("32", 2147483649u);
  }
}

void MOD_mkTop_HW_Side::RL_rl_step0()
{
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_display(sim_hdl, this, "s", &__str_literal_3);
    dollar_display(sim_hdl, this, "s", &__str_literal_4);
    dollar_display(sim_hdl, this, "s", &__str_literal_5);
    dollar_display(sim_hdl, this, "s", &__str_literal_3);
  }
  INST_rg_banner_printed.METH_write((tUInt8)1u);
}


/* Methods */


/* Reset routines */

void MOD_mkTop_HW_Side::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_soc_top.reset_RST_N(ARG_rst_in);
  INST_rg_banner_printed.reset_RST(ARG_rst_in);
  INST_mem_model.reset_RST_N(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTop_HW_Side::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTop_HW_Side::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_mem_model.dump_state(indent + 2u);
  INST_rg_banner_printed.dump_state(indent + 2u);
  INST_soc_top.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTop_HW_Side::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 4u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "mem_model_mem_server_response_get___d8", 256u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "soc_top_to_raw_mem_request_get___d4", 353u);
  num = INST_rg_banner_printed.dump_VCD_defs(num);
  if (levels != 1u)
  {
    unsigned int l = levels == 0u ? 0u : levels - 1u;
    num = INST_mem_model.dump_VCD_defs(l);
    num = INST_soc_top.dump_VCD_defs(l);
  }
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTop_HW_Side::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTop_HW_Side &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
  if (levels != 1u)
    vcd_submodules(dt, levels - 1u, backing);
}

void MOD_mkTop_HW_Side::vcd_defs(tVCDDumpType dt, MOD_mkTop_HW_Side &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 256u);
    vcd_write_x(sim_hdl, num++, 353u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_mem_model_mem_server_response_get___d8) != DEF_mem_model_mem_server_response_get___d8)
      {
	vcd_write_val(sim_hdl, num, DEF_mem_model_mem_server_response_get___d8, 256u);
	backing.DEF_mem_model_mem_server_response_get___d8 = DEF_mem_model_mem_server_response_get___d8;
      }
      ++num;
      if ((backing.DEF_soc_top_to_raw_mem_request_get___d4) != DEF_soc_top_to_raw_mem_request_get___d4)
      {
	vcd_write_val(sim_hdl, num, DEF_soc_top_to_raw_mem_request_get___d4, 353u);
	backing.DEF_soc_top_to_raw_mem_request_get___d4 = DEF_soc_top_to_raw_mem_request_get___d4;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_mem_model_mem_server_response_get___d8, 256u);
      backing.DEF_mem_model_mem_server_response_get___d8 = DEF_mem_model_mem_server_response_get___d8;
      vcd_write_val(sim_hdl, num++, DEF_soc_top_to_raw_mem_request_get___d4, 353u);
      backing.DEF_soc_top_to_raw_mem_request_get___d4 = DEF_soc_top_to_raw_mem_request_get___d4;
    }
}

void MOD_mkTop_HW_Side::vcd_prims(tVCDDumpType dt, MOD_mkTop_HW_Side &backing)
{
  INST_rg_banner_printed.dump_VCD(dt, backing.INST_rg_banner_printed);
}

void MOD_mkTop_HW_Side::vcd_submodules(tVCDDumpType dt,
				       unsigned int levels,
				       MOD_mkTop_HW_Side &backing)
{
  INST_mem_model.dump_VCD(dt, levels, backing.INST_mem_model);
  INST_soc_top.dump_VCD(dt, levels, backing.INST_soc_top);
}
