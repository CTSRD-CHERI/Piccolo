/*
 * Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
 * 
 * On Wed Aug 15 16:00:33 BST 2018
 * 
 */

/* Generation options: */
#ifndef __mkSoC_Top_h__
#define __mkSoC_Top_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"
#include "mkBoot_ROM.h"
#include "mkBRVF_Core.h"
#include "mkFabric.h"
#include "mkMem_Controller.h"
#include "mkSoC_Map.h"
#include "mkTimer.h"
#include "mkUART.h"


/* Class declaration for the mkSoC_Top module */
class MOD_mkSoC_Top : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_mkBoot_ROM INST_boot_rom;
  MOD_mkBRVF_Core INST_brvf_core;
  MOD_mkFabric INST_fabric;
  MOD_mkMem_Controller INST_mem0_controller;
  MOD_Reg<tUInt8> INST_rg_state;
  MOD_mkSoC_Map INST_soc_map;
  MOD_mkTimer INST_timer0;
  MOD_mkUART INST_uart0;
 
 /* Constructor */
 public:
  MOD_mkSoC_Top(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
  tUWide PORT_to_raw_mem_response_put;
  tUWide PORT_to_raw_mem_request_get;
 
 /* Publicly accessible definitions */
 public:
 
 /* Local definitions */
 private:
 
 /* Rules */
 public:
  void RL_rl_wr_addr_channel();
  void RL_rl_wr_data_channel();
  void RL_rl_wr_response_channel();
  void RL_rl_rd_addr_channel();
  void RL_rl_rd_data_channel();
  void RL_rl_wr_addr_channel_1();
  void RL_rl_wr_data_channel_1();
  void RL_rl_wr_response_channel_1();
  void RL_rl_rd_addr_channel_1();
  void RL_rl_rd_data_channel_1();
  void RL_rl_wr_addr_channel_2();
  void RL_rl_wr_data_channel_2();
  void RL_rl_wr_response_channel_2();
  void RL_rl_rd_addr_channel_2();
  void RL_rl_rd_data_channel_2();
  void RL_rl_wr_addr_channel_3();
  void RL_rl_wr_data_channel_3();
  void RL_rl_wr_response_channel_3();
  void RL_rl_rd_addr_channel_3();
  void RL_rl_rd_data_channel_3();
  void RL_rl_wr_addr_channel_4();
  void RL_rl_wr_data_channel_4();
  void RL_rl_wr_response_channel_4();
  void RL_rl_rd_addr_channel_4();
  void RL_rl_rd_data_channel_4();
  void RL_rl_wr_addr_channel_5();
  void RL_rl_wr_data_channel_5();
  void RL_rl_wr_response_channel_5();
  void RL_rl_rd_addr_channel_5();
  void RL_rl_rd_data_channel_5();
  void RL_rl_wr_addr_channel_6();
  void RL_rl_wr_data_channel_6();
  void RL_rl_wr_response_channel_6();
  void RL_rl_rd_addr_channel_6();
  void RL_rl_rd_data_channel_6();
  void RL_rl_wr_addr_channel_7();
  void RL_rl_wr_data_channel_7();
  void RL_rl_wr_response_channel_7();
  void RL_rl_rd_addr_channel_7();
  void RL_rl_rd_data_channel_7();
  void RL_rl_connect_software_interrupt_request();
  void RL_rl_connect_timer_interrupt_request();
  void RL_rl_reset_complete();
  void RL_rl_reset_start_2();
 
 /* Methods */
 public:
  tUWide METH_to_raw_mem_request_get();
  tUInt8 METH_RDY_to_raw_mem_request_get();
  void METH_to_raw_mem_response_put(tUWide ARG_to_raw_mem_response_put);
  tUInt8 METH_RDY_to_raw_mem_response_put();
  tUInt8 METH_get_to_console_get();
  tUInt8 METH_RDY_get_to_console_get();
  void METH_put_from_console_put(tUInt8 ARG_put_from_console_put);
  tUInt8 METH_RDY_put_from_console_put();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkSoC_Top &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkSoC_Top &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkSoC_Top &backing);
  void vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkSoC_Top &backing);
};

#endif /* ifndef __mkSoC_Top_h__ */
