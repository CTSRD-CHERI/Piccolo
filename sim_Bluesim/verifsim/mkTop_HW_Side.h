/*
 * Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
 * 
 * On Wed Aug 15 16:00:33 BST 2018
 * 
 */

/* Generation options: */
#ifndef __mkTop_HW_Side_h__
#define __mkTop_HW_Side_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"
#include "mkMem_Model.h"
#include "mkSoC_Top.h"


/* Class declaration for the mkTop_HW_Side module */
class MOD_mkTop_HW_Side : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_mkMem_Model INST_mem_model;
  MOD_Reg<tUInt8> INST_rg_banner_printed;
  MOD_mkSoC_Top INST_soc_top;
 
 /* Constructor */
 public:
  MOD_mkTop_HW_Side(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
 
 /* Publicly accessible definitions */
 public:
 
 /* Local definitions */
 private:
  tUWide DEF_soc_top_to_raw_mem_request_get___d4;
  tUWide DEF_mem_model_mem_server_response_get___d8;
 
 /* Rules */
 public:
  void RL_memCnx_ClientServerRequest();
  void RL_memCnx_ClientServerResponse();
  void RL_rl_relay_console_out();
  void RL_rl_step0();
 
 /* Methods */
 public:
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTop_HW_Side &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkTop_HW_Side &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkTop_HW_Side &backing);
  void vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkTop_HW_Side &backing);
};

#endif /* ifndef __mkTop_HW_Side_h__ */
