/*
 * Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
 * 
 * On Fri Aug 24 12:25:43 BST 2018
 * 
 */
#include "bluesim_primitives.h"
#include "mkRISCV_MBox.h"


/* Constructor */
MOD_mkRISCV_MBox::MOD_mkRISCV_MBox(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_cfg_verbosity(simHdl, "cfg_verbosity", this, 4u, (tUInt8)0u, (tUInt8)0u),
    INST_dw_result(simHdl, "dw_result", this, 64u, (tUInt8)0u),
    INST_dw_valid(simHdl, "dw_valid", this, 1u, (tUInt8)0u),
    INST_intDiv_rg_denom2(simHdl, "intDiv_rg_denom2", this, 64u),
    INST_intDiv_rg_denom_is_signed(simHdl, "intDiv_rg_denom_is_signed", this, 1u),
    INST_intDiv_rg_n(simHdl, "intDiv_rg_n", this, 64u),
    INST_intDiv_rg_numer_is_signed(simHdl, "intDiv_rg_numer_is_signed", this, 1u),
    INST_intDiv_rg_quo(simHdl, "intDiv_rg_quo", this, 64u),
    INST_intDiv_rg_quoIsNeg(simHdl, "intDiv_rg_quoIsNeg", this, 1u),
    INST_intDiv_rg_remIsNeg(simHdl, "intDiv_rg_remIsNeg", this, 1u),
    INST_intDiv_rg_state(simHdl, "intDiv_rg_state", this, 3u, (tUInt8)0u, (tUInt8)0u),
    INST_rg_f3(simHdl, "rg_f3", this, 3u),
    INST_rg_is_OP_not_OP_32(simHdl, "rg_is_OP_not_OP_32", this, 1u),
    INST_rg_state(simHdl, "rg_state", this, 2u),
    INST_rg_v1(simHdl, "rg_v1", this, 64u),
    INST_rg_v2(simHdl, "rg_v2", this, 64u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 26u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkRISCV_MBox::init_symbols_0()
{
  init_symbol(&symbols[0u], "b__h4409", SYM_DEF, &DEF_b__h4409, 64u);
  init_symbol(&symbols[1u], "cfg_verbosity", SYM_MODULE, &INST_cfg_verbosity);
  init_symbol(&symbols[2u], "dw_result", SYM_MODULE, &INST_dw_result);
  init_symbol(&symbols[3u], "dw_valid", SYM_MODULE, &INST_dw_valid);
  init_symbol(&symbols[4u], "intDiv_rg_denom2", SYM_MODULE, &INST_intDiv_rg_denom2);
  init_symbol(&symbols[5u], "intDiv_rg_denom_is_signed", SYM_MODULE, &INST_intDiv_rg_denom_is_signed);
  init_symbol(&symbols[6u],
	      "intDiv_rg_denom_is_signed__h607",
	      SYM_DEF,
	      &DEF_intDiv_rg_denom_is_signed__h607,
	      1u);
  init_symbol(&symbols[7u], "intDiv_rg_n", SYM_MODULE, &INST_intDiv_rg_n);
  init_symbol(&symbols[8u], "intDiv_rg_numer_is_signed", SYM_MODULE, &INST_intDiv_rg_numer_is_signed);
  init_symbol(&symbols[9u],
	      "intDiv_rg_numer_is_signed__h586",
	      SYM_DEF,
	      &DEF_intDiv_rg_numer_is_signed__h586,
	      1u);
  init_symbol(&symbols[10u], "intDiv_rg_quo", SYM_MODULE, &INST_intDiv_rg_quo);
  init_symbol(&symbols[11u], "intDiv_rg_quoIsNeg", SYM_MODULE, &INST_intDiv_rg_quoIsNeg);
  init_symbol(&symbols[12u], "intDiv_rg_remIsNeg", SYM_MODULE, &INST_intDiv_rg_remIsNeg);
  init_symbol(&symbols[13u], "intDiv_rg_state", SYM_MODULE, &INST_intDiv_rg_state);
  init_symbol(&symbols[14u], "RL_intDiv_rl_loop1", SYM_RULE);
  init_symbol(&symbols[15u], "RL_intDiv_rl_loop2", SYM_RULE);
  init_symbol(&symbols[16u], "RL_intDiv_rl_start_div_by_zero", SYM_RULE);
  init_symbol(&symbols[17u], "RL_intDiv_rl_start_overflow", SYM_RULE);
  init_symbol(&symbols[18u], "RL_intDiv_rl_start_s", SYM_RULE);
  init_symbol(&symbols[19u], "RL_rg_div_rem", SYM_RULE);
  init_symbol(&symbols[20u], "rg_f3", SYM_MODULE, &INST_rg_f3);
  init_symbol(&symbols[21u], "rg_is_OP_not_OP_32", SYM_MODULE, &INST_rg_is_OP_not_OP_32);
  init_symbol(&symbols[22u], "rg_state", SYM_MODULE, &INST_rg_state);
  init_symbol(&symbols[23u], "rg_v1", SYM_MODULE, &INST_rg_v1);
  init_symbol(&symbols[24u], "rg_v2", SYM_MODULE, &INST_rg_v2);
  init_symbol(&symbols[25u], "y__h3901", SYM_DEF, &DEF_y__h3901, 64u);
}


/* Rule actions */

void MOD_mkRISCV_MBox::RL_intDiv_rl_start_div_by_zero()
{
  INST_intDiv_rg_quo.METH_write(18446744073709551615llu);
  INST_intDiv_rg_state.METH_write((tUInt8)4u);
}

void MOD_mkRISCV_MBox::RL_intDiv_rl_start_overflow()
{
  DEF_b__h4409 = INST_rg_v1.METH_read();
  INST_intDiv_rg_quo.METH_write(DEF_b__h4409);
  INST_rg_v1.METH_write(0llu);
  INST_intDiv_rg_state.METH_write((tUInt8)4u);
}

void MOD_mkRISCV_MBox::RL_intDiv_rl_start_s()
{
  tUInt8 DEF_IF_intDiv_rg_numer_is_signed_AND_intDiv_rg_den_ETC___d42;
  tUInt8 DEF_IF_intDiv_rg_numer_is_signed_AND_intDiv_rg_den_ETC___d40;
  tUInt64 DEF_x__h703;
  tUInt64 DEF__theResult___fst__h783;
  tUInt64 DEF_numer___1__h724;
  tUInt64 DEF__theResult___snd_fst__h778;
  tUInt64 DEF_denom___1__h725;
  tUInt64 DEF_denom__h691;
  tUInt8 DEF_intDiv_rg_numer_is_signed_AND_intDiv_rg_denom__ETC___d29;
  tUInt8 DEF_rg_v2_BIT_63___h788;
  tUInt8 DEF_rg_v1_BIT_63___h746;
  DEF_intDiv_rg_numer_is_signed__h586 = INST_intDiv_rg_numer_is_signed.METH_read();
  DEF_intDiv_rg_denom_is_signed__h607 = INST_intDiv_rg_denom_is_signed.METH_read();
  DEF_intDiv_rg_numer_is_signed_AND_intDiv_rg_denom__ETC___d29 = DEF_intDiv_rg_numer_is_signed__h586 && DEF_intDiv_rg_denom_is_signed__h607;
  DEF_y__h3901 = INST_rg_v2.METH_read();
  DEF_rg_v2_BIT_63___h788 = (tUInt8)(DEF_y__h3901 >> 63u);
  DEF_b__h4409 = INST_rg_v1.METH_read();
  DEF_rg_v1_BIT_63___h746 = (tUInt8)(DEF_b__h4409 >> 63u);
  DEF_x__h4107 = -DEF_b__h4409;
  DEF_denom___1__h725 = DEF_rg_v2_BIT_63___h788 ? -DEF_y__h3901 : DEF_y__h3901;
  DEF_numer___1__h724 = DEF_rg_v1_BIT_63___h746 ? DEF_x__h4107 : DEF_b__h4409;
  DEF__theResult___fst__h783 = DEF_intDiv_rg_denom_is_signed__h607 ? DEF_denom___1__h725 : DEF_y__h3901;
  DEF__theResult___snd_fst__h778 = DEF_intDiv_rg_numer_is_signed__h586 ? DEF_y__h3901 : DEF__theResult___fst__h783;
  DEF_denom__h691 = DEF_intDiv_rg_numer_is_signed_AND_intDiv_rg_denom__ETC___d29 ? DEF_denom___1__h725 : DEF__theResult___snd_fst__h778;
  DEF_x__h703 = DEF_intDiv_rg_numer_is_signed__h586 ? DEF_numer___1__h724 : DEF_b__h4409;
  DEF_IF_intDiv_rg_numer_is_signed_AND_intDiv_rg_den_ETC___d40 = DEF_intDiv_rg_numer_is_signed_AND_intDiv_rg_denom__ETC___d29 ? !(DEF_rg_v1_BIT_63___h746 == DEF_rg_v2_BIT_63___h788) : (DEF_intDiv_rg_numer_is_signed__h586 ? DEF_rg_v1_BIT_63___h746 : DEF_intDiv_rg_denom_is_signed__h607 && DEF_rg_v2_BIT_63___h788);
  DEF_IF_intDiv_rg_numer_is_signed_AND_intDiv_rg_den_ETC___d42 = DEF_intDiv_rg_numer_is_signed_AND_intDiv_rg_denom__ETC___d29 ? DEF_rg_v1_BIT_63___h746 : DEF_intDiv_rg_numer_is_signed__h586 && DEF_rg_v1_BIT_63___h746;
  INST_rg_v1.METH_write(DEF_x__h703);
  INST_rg_v2.METH_write(DEF_denom__h691);
  INST_intDiv_rg_denom2.METH_write(DEF_denom__h691);
  INST_intDiv_rg_quoIsNeg.METH_write(DEF_IF_intDiv_rg_numer_is_signed_AND_intDiv_rg_den_ETC___d40);
  INST_intDiv_rg_remIsNeg.METH_write(DEF_IF_intDiv_rg_numer_is_signed_AND_intDiv_rg_den_ETC___d42);
  INST_intDiv_rg_quo.METH_write(0llu);
  INST_intDiv_rg_state.METH_write((tUInt8)2u);
  INST_intDiv_rg_n.METH_write(1llu);
}

void MOD_mkRISCV_MBox::RL_intDiv_rl_loop1()
{
  tUInt64 DEF_x__h3883;
  tUInt64 DEF_x__h3865;
  tUInt64 DEF_y__h3830;
  tUInt8 DEF_intDiv_rg_denom2_4_ULE_0_CONCAT_rg_v1_BITS_63__ETC___d47;
  tUInt8 DEF_NOT_intDiv_rg_denom2_4_ULE_0_CONCAT_rg_v1_BITS_ETC___d53;
  tUInt64 DEF_rg_v1_BITS_63_TO_1___h3845;
  tUInt64 DEF_intDiv_rg_denom2_BITS_62_TO_0___h3878;
  tUInt64 DEF_intDiv_rg_n_BITS_62_TO_0___h3891;
  DEF_y__h4127 = INST_intDiv_rg_n.METH_read();
  DEF_y__h3977 = INST_intDiv_rg_denom2.METH_read();
  DEF_b__h4409 = INST_rg_v1.METH_read();
  DEF_intDiv_rg_n_BITS_62_TO_0___h3891 = (tUInt64)(9223372036854775807llu & DEF_y__h4127);
  DEF_intDiv_rg_denom2_BITS_62_TO_0___h3878 = (tUInt64)(9223372036854775807llu & DEF_y__h3977);
  DEF_rg_v1_BITS_63_TO_1___h3845 = (tUInt64)(DEF_b__h4409 >> 1u);
  DEF_y__h3830 = (((tUInt64)((tUInt8)0u)) << 63u) | DEF_rg_v1_BITS_63_TO_1___h3845;
  DEF_intDiv_rg_denom2_4_ULE_0_CONCAT_rg_v1_BITS_63__ETC___d47 = DEF_y__h3977 <= DEF_y__h3830;
  DEF_NOT_intDiv_rg_denom2_4_ULE_0_CONCAT_rg_v1_BITS_ETC___d53 = !DEF_intDiv_rg_denom2_4_ULE_0_CONCAT_rg_v1_BITS_63__ETC___d47;
  DEF_x__h3865 = (DEF_intDiv_rg_denom2_BITS_62_TO_0___h3878 << 1u) | (tUInt64)((tUInt8)0u);
  DEF_x__h3883 = (DEF_intDiv_rg_n_BITS_62_TO_0___h3891 << 1u) | (tUInt64)((tUInt8)0u);
  if (DEF_intDiv_rg_denom2_4_ULE_0_CONCAT_rg_v1_BITS_63__ETC___d47)
    INST_intDiv_rg_denom2.METH_write(DEF_x__h3865);
  if (DEF_intDiv_rg_denom2_4_ULE_0_CONCAT_rg_v1_BITS_63__ETC___d47)
    INST_intDiv_rg_n.METH_write(DEF_x__h3883);
  if (DEF_NOT_intDiv_rg_denom2_4_ULE_0_CONCAT_rg_v1_BITS_ETC___d53)
    INST_intDiv_rg_state.METH_write((tUInt8)3u);
}

void MOD_mkRISCV_MBox::RL_intDiv_rl_loop2()
{
  tUInt64 DEF_x__h3984;
  tUInt64 DEF_x__h4130;
  tUInt8 DEF_NOT_rg_v1_ULT_rg_v2_5_8_AND_rg_v1_ULT_intDiv_r_ETC___d72;
  tUInt8 DEF_NOT_rg_v1_ULT_rg_v2_5___d58;
  tUInt8 DEF_NOT_rg_v1_ULT_rg_v2_5_8_AND_NOT_rg_v1_ULT_intD_ETC___d61;
  tUInt64 DEF_x__h3951;
  tUInt64 DEF_IF_rg_v1_ULT_rg_v2_5_THEN_NEG_rg_v1_6_ELSE_rg__ETC___d71;
  tUInt64 DEF_x__h4122;
  tUInt64 DEF_x__h4037;
  tUInt8 DEF_rg_v1_ULT_rg_v2___d55;
  tUInt64 DEF_IF_rg_v1_ULT_rg_v2_5_THEN_NEG_intDiv_rg_quo_3__ETC___d66;
  tUInt64 DEF_intDiv_rg_denom2_BITS_63_TO_1___h3997;
  tUInt64 DEF_intDiv_rg_n_BITS_63_TO_1___h4137;
  tUInt8 DEF_intDiv_rg_quoIsNeg__h4013;
  tUInt8 DEF_intDiv_rg_remIsNeg__h4105;
  tUInt8 DEF_rg_v1_ULT_rg_v2_5_AND_intDiv_rg_remIsNeg_7_8_O_ETC___d69;
  tUInt8 DEF_rg_v1_ULT_rg_v2_5_AND_intDiv_rg_quoIsNeg_6_7_O_ETC___d62;
  tUInt8 DEF_rg_v1_ULT_intDiv_rg_denom2_4___d59;
  DEF_intDiv_rg_remIsNeg__h4105 = INST_intDiv_rg_remIsNeg.METH_read();
  DEF_intDiv_rg_quoIsNeg__h4013 = INST_intDiv_rg_quoIsNeg.METH_read();
  DEF_a__h4408 = INST_intDiv_rg_quo.METH_read();
  DEF_y__h4127 = INST_intDiv_rg_n.METH_read();
  DEF_y__h3977 = INST_intDiv_rg_denom2.METH_read();
  DEF_y__h3901 = INST_rg_v2.METH_read();
  DEF_b__h4409 = INST_rg_v1.METH_read();
  DEF_rg_v1_ULT_intDiv_rg_denom2_4___d59 = DEF_b__h4409 < DEF_y__h3977;
  DEF_intDiv_rg_n_BITS_63_TO_1___h4137 = (tUInt64)(DEF_y__h4127 >> 1u);
  DEF_intDiv_rg_denom2_BITS_63_TO_1___h3997 = (tUInt64)(DEF_y__h3977 >> 1u);
  DEF_rg_v1_ULT_rg_v2___d55 = DEF_b__h4409 < DEF_y__h3901;
  DEF_x__h4037 = -DEF_a__h4408;
  DEF_x__h4122 = DEF_a__h4408 + DEF_y__h4127;
  DEF_IF_rg_v1_ULT_rg_v2_5_THEN_NEG_intDiv_rg_quo_3__ETC___d66 = DEF_rg_v1_ULT_rg_v2___d55 ? DEF_x__h4037 : DEF_x__h4122;
  DEF_x__h4107 = -DEF_b__h4409;
  DEF_x__h3951 = DEF_b__h4409 - DEF_y__h3977;
  DEF_IF_rg_v1_ULT_rg_v2_5_THEN_NEG_rg_v1_6_ELSE_rg__ETC___d71 = DEF_rg_v1_ULT_rg_v2___d55 ? DEF_x__h4107 : DEF_x__h3951;
  DEF_NOT_rg_v1_ULT_rg_v2_5___d58 = !DEF_rg_v1_ULT_rg_v2___d55;
  DEF_NOT_rg_v1_ULT_rg_v2_5_8_AND_NOT_rg_v1_ULT_intD_ETC___d61 = DEF_NOT_rg_v1_ULT_rg_v2_5___d58 && !DEF_rg_v1_ULT_intDiv_rg_denom2_4___d59;
  DEF_rg_v1_ULT_rg_v2_5_AND_intDiv_rg_quoIsNeg_6_7_O_ETC___d62 = (DEF_rg_v1_ULT_rg_v2___d55 && DEF_intDiv_rg_quoIsNeg__h4013) || DEF_NOT_rg_v1_ULT_rg_v2_5_8_AND_NOT_rg_v1_ULT_intD_ETC___d61;
  DEF_rg_v1_ULT_rg_v2_5_AND_intDiv_rg_remIsNeg_7_8_O_ETC___d69 = (DEF_rg_v1_ULT_rg_v2___d55 && DEF_intDiv_rg_remIsNeg__h4105) || DEF_NOT_rg_v1_ULT_rg_v2_5_8_AND_NOT_rg_v1_ULT_intD_ETC___d61;
  DEF_NOT_rg_v1_ULT_rg_v2_5_8_AND_rg_v1_ULT_intDiv_r_ETC___d72 = DEF_NOT_rg_v1_ULT_rg_v2_5___d58 && DEF_rg_v1_ULT_intDiv_rg_denom2_4___d59;
  DEF_x__h4130 = (((tUInt64)((tUInt8)0u)) << 63u) | DEF_intDiv_rg_n_BITS_63_TO_1___h4137;
  DEF_x__h3984 = (((tUInt64)((tUInt8)0u)) << 63u) | DEF_intDiv_rg_denom2_BITS_63_TO_1___h3997;
  if (DEF_rg_v1_ULT_rg_v2_5_AND_intDiv_rg_quoIsNeg_6_7_O_ETC___d62)
    INST_intDiv_rg_quo.METH_write(DEF_IF_rg_v1_ULT_rg_v2_5_THEN_NEG_intDiv_rg_quo_3__ETC___d66);
  if (DEF_rg_v1_ULT_rg_v2_5_AND_intDiv_rg_remIsNeg_7_8_O_ETC___d69)
    INST_rg_v1.METH_write(DEF_IF_rg_v1_ULT_rg_v2_5_THEN_NEG_rg_v1_6_ELSE_rg__ETC___d71);
  if (DEF_rg_v1_ULT_rg_v2___d55)
    INST_intDiv_rg_state.METH_write((tUInt8)4u);
  if (DEF_NOT_rg_v1_ULT_rg_v2_5_8_AND_rg_v1_ULT_intDiv_r_ETC___d72)
    INST_intDiv_rg_n.METH_write(DEF_x__h4130);
  if (DEF_NOT_rg_v1_ULT_rg_v2_5_8_AND_rg_v1_ULT_intDiv_r_ETC___d72)
    INST_intDiv_rg_denom2.METH_write(DEF_x__h3984);
}

void MOD_mkRISCV_MBox::RL_rg_div_rem()
{
  tUInt64 DEF_result___1__h4360;
  tUInt64 DEF_new_value__h4352;
  tUInt64 DEF_IF_rg_f3_2_BIT_1_3_THEN_rg_v1_ELSE_intDiv_rg_q_ETC___d84;
  tUInt32 DEF_x__h4363;
  tUInt8 DEF_rg_is_OP_not_OP_32__h4358;
  DEF_a__h4408 = INST_intDiv_rg_quo.METH_read();
  DEF_b__h4409 = INST_rg_v1.METH_read();
  DEF_rg_is_OP_not_OP_32__h4358 = INST_rg_is_OP_not_OP_32.METH_read();
  DEF_IF_rg_f3_2_BIT_1_3_THEN_rg_v1_ELSE_intDiv_rg_q_ETC___d84 = (tUInt8)((tUInt8)1u & (INST_rg_f3.METH_read() >> 1u)) ? DEF_b__h4409 : DEF_a__h4408;
  DEF_x__h4363 = (tUInt32)(DEF_IF_rg_f3_2_BIT_1_3_THEN_rg_v1_ELSE_intDiv_rg_q_ETC___d84);
  DEF_result___1__h4360 = primSignExt64(64u, 32u, (tUInt32)(DEF_x__h4363));
  DEF_new_value__h4352 = DEF_rg_is_OP_not_OP_32__h4358 ? DEF_IF_rg_f3_2_BIT_1_3_THEN_rg_v1_ELSE_intDiv_rg_q_ETC___d84 : DEF_result___1__h4360;
  INST_dw_valid.METH_wset((tUInt8)1u);
  INST_dw_result.METH_wset(DEF_new_value__h4352);
}


/* Methods */

void MOD_mkRISCV_MBox::METH_set_verbosity(tUInt8 ARG_set_verbosity_verbosity)
{
  INST_cfg_verbosity.METH_write(ARG_set_verbosity_verbosity);
}

tUInt8 MOD_mkRISCV_MBox::METH_RDY_set_verbosity()
{
  tUInt8 DEF_CAN_FIRE_set_verbosity;
  tUInt8 PORT_RDY_set_verbosity;
  DEF_CAN_FIRE_set_verbosity = (tUInt8)1u;
  PORT_RDY_set_verbosity = DEF_CAN_FIRE_set_verbosity;
  return PORT_RDY_set_verbosity;
}

void MOD_mkRISCV_MBox::METH_req_reset()
{
}

tUInt8 MOD_mkRISCV_MBox::METH_RDY_req_reset()
{
  tUInt8 DEF_CAN_FIRE_req_reset;
  tUInt8 PORT_RDY_req_reset;
  DEF_CAN_FIRE_req_reset = (tUInt8)1u;
  PORT_RDY_req_reset = DEF_CAN_FIRE_req_reset;
  return PORT_RDY_req_reset;
}

void MOD_mkRISCV_MBox::METH_rsp_reset()
{
}

tUInt8 MOD_mkRISCV_MBox::METH_RDY_rsp_reset()
{
  tUInt8 DEF_CAN_FIRE_rsp_reset;
  tUInt8 PORT_RDY_rsp_reset;
  DEF_CAN_FIRE_rsp_reset = (tUInt8)1u;
  PORT_RDY_rsp_reset = DEF_CAN_FIRE_rsp_reset;
  return PORT_RDY_rsp_reset;
}

void MOD_mkRISCV_MBox::METH_req(tUInt8 ARG_req_is_OP_not_OP_32,
				tUInt8 ARG_req_f3,
				tUInt64 ARG_req_v1,
				tUInt64 ARG_req_v2)
{
  tUInt8 DEF_NOT_req_f3_BIT_0_8___d101;
  tUInt8 DEF_IF_req_f3_BIT_2_9_THEN_2_ELSE_0___d100;
  tUInt64 DEF_x__h4551;
  tUInt64 DEF_x__h4661;
  tUInt64 DEF__theResult___snd__h4599;
  tUInt64 DEF__theResult___snd__h4625;
  tUInt64 DEF__theResult___snd__h4569;
  tUInt64 DEF__theResult___fst__h4598;
  tUInt64 DEF__theResult___fst__h4624;
  tUInt64 DEF__theResult___fst__h4568;
  tUInt8 DEF_req_f3_BIT_0___d88;
  tUInt8 DEF_req_f3_BIT_2___d99;
  tUInt32 DEF_x__h4628;
  tUInt32 DEF_x__h4695;
  DEF_x__h4695 = (tUInt32)(ARG_req_v2);
  DEF_x__h4628 = (tUInt32)(ARG_req_v1);
  DEF_req_f3_BIT_2___d99 = (tUInt8)(ARG_req_f3 >> 2u);
  DEF_req_f3_BIT_0___d88 = (tUInt8)((tUInt8)1u & ARG_req_f3);
  DEF__theResult___fst__h4624 = (((tUInt64)(0u)) << 32u) | (tUInt64)(DEF_x__h4628);
  DEF__theResult___fst__h4598 = primSignExt64(64u, 32u, (tUInt32)(DEF_x__h4628));
  DEF__theResult___fst__h4568 = DEF_req_f3_BIT_0___d88 ? DEF__theResult___fst__h4624 : DEF__theResult___fst__h4598;
  DEF__theResult___snd__h4599 = primSignExt64(64u, 32u, (tUInt32)(DEF_x__h4695));
  DEF__theResult___snd__h4625 = (((tUInt64)(0u)) << 32u) | (tUInt64)(DEF_x__h4695);
  DEF__theResult___snd__h4569 = DEF_req_f3_BIT_0___d88 ? DEF__theResult___snd__h4625 : DEF__theResult___snd__h4599;
  DEF_x__h4661 = ARG_req_is_OP_not_OP_32 ? ARG_req_v2 : DEF__theResult___snd__h4569;
  DEF_x__h4551 = ARG_req_is_OP_not_OP_32 ? ARG_req_v1 : DEF__theResult___fst__h4568;
  DEF_NOT_req_f3_BIT_0_8___d101 = !DEF_req_f3_BIT_0___d88;
  DEF_IF_req_f3_BIT_2_9_THEN_2_ELSE_0___d100 = DEF_req_f3_BIT_2___d99 ? (tUInt8)2u : (tUInt8)0u;
  INST_rg_is_OP_not_OP_32.METH_write(ARG_req_is_OP_not_OP_32);
  INST_rg_v1.METH_write(DEF_x__h4551);
  INST_rg_f3.METH_write(ARG_req_f3);
  INST_rg_v2.METH_write(DEF_x__h4661);
  INST_rg_state.METH_write(DEF_IF_req_f3_BIT_2_9_THEN_2_ELSE_0___d100);
  if (DEF_req_f3_BIT_2___d99)
    INST_intDiv_rg_numer_is_signed.METH_write(DEF_NOT_req_f3_BIT_0_8___d101);
  if (DEF_req_f3_BIT_2___d99)
    INST_intDiv_rg_denom_is_signed.METH_write(DEF_NOT_req_f3_BIT_0_8___d101);
  if (DEF_req_f3_BIT_2___d99)
    INST_intDiv_rg_state.METH_write((tUInt8)1u);
}

tUInt8 MOD_mkRISCV_MBox::METH_RDY_req()
{
  tUInt8 PORT_RDY_req;
  tUInt8 DEF_CAN_FIRE_req;
  DEF_CAN_FIRE_req = (tUInt8)1u;
  PORT_RDY_req = DEF_CAN_FIRE_req;
  return PORT_RDY_req;
}

tUInt8 MOD_mkRISCV_MBox::METH_valid()
{
  tUInt8 DEF_dw_valid_wget____d103;
  tUInt8 DEF_dw_valid_whas____d102;
  tUInt8 PORT_valid;
  DEF_dw_valid_whas____d102 = INST_dw_valid.METH_whas();
  DEF_dw_valid_wget____d103 = INST_dw_valid.METH_wget();
  PORT_valid = DEF_dw_valid_whas____d102 && DEF_dw_valid_wget____d103;
  return PORT_valid;
}

tUInt8 MOD_mkRISCV_MBox::METH_RDY_valid()
{
  tUInt8 PORT_RDY_valid;
  tUInt8 DEF_CAN_FIRE_valid;
  DEF_CAN_FIRE_valid = (tUInt8)1u;
  PORT_RDY_valid = DEF_CAN_FIRE_valid;
  return PORT_RDY_valid;
}

tUInt64 MOD_mkRISCV_MBox::METH_word()
{
  tUInt64 DEF_x_wget__h4279;
  tUInt64 PORT_word;
  DEF_x_wget__h4279 = INST_dw_result.METH_wget();
  PORT_word = DEF_x_wget__h4279;
  return PORT_word;
}

tUInt8 MOD_mkRISCV_MBox::METH_RDY_word()
{
  tUInt8 PORT_RDY_word;
  tUInt8 DEF_CAN_FIRE_word;
  DEF_CAN_FIRE_word = (tUInt8)1u;
  PORT_RDY_word = DEF_CAN_FIRE_word;
  return PORT_RDY_word;
}


/* Reset routines */

void MOD_mkRISCV_MBox::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_intDiv_rg_state.reset_RST(ARG_rst_in);
  INST_cfg_verbosity.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkRISCV_MBox::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkRISCV_MBox::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_cfg_verbosity.dump_state(indent + 2u);
  INST_dw_result.dump_state(indent + 2u);
  INST_dw_valid.dump_state(indent + 2u);
  INST_intDiv_rg_denom2.dump_state(indent + 2u);
  INST_intDiv_rg_denom_is_signed.dump_state(indent + 2u);
  INST_intDiv_rg_n.dump_state(indent + 2u);
  INST_intDiv_rg_numer_is_signed.dump_state(indent + 2u);
  INST_intDiv_rg_quo.dump_state(indent + 2u);
  INST_intDiv_rg_quoIsNeg.dump_state(indent + 2u);
  INST_intDiv_rg_remIsNeg.dump_state(indent + 2u);
  INST_intDiv_rg_state.dump_state(indent + 2u);
  INST_rg_f3.dump_state(indent + 2u);
  INST_rg_is_OP_not_OP_32.dump_state(indent + 2u);
  INST_rg_state.dump_state(indent + 2u);
  INST_rg_v1.dump_state(indent + 2u);
  INST_rg_v2.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkRISCV_MBox::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 25u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "a__h4408", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h4409", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "intDiv_rg_denom_is_signed__h607", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "intDiv_rg_numer_is_signed__h586", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h4107", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "y__h3901", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "y__h3977", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "y__h4127", 64u);
  num = INST_cfg_verbosity.dump_VCD_defs(num);
  num = INST_dw_result.dump_VCD_defs(num);
  num = INST_dw_valid.dump_VCD_defs(num);
  num = INST_intDiv_rg_denom2.dump_VCD_defs(num);
  num = INST_intDiv_rg_denom_is_signed.dump_VCD_defs(num);
  num = INST_intDiv_rg_n.dump_VCD_defs(num);
  num = INST_intDiv_rg_numer_is_signed.dump_VCD_defs(num);
  num = INST_intDiv_rg_quo.dump_VCD_defs(num);
  num = INST_intDiv_rg_quoIsNeg.dump_VCD_defs(num);
  num = INST_intDiv_rg_remIsNeg.dump_VCD_defs(num);
  num = INST_intDiv_rg_state.dump_VCD_defs(num);
  num = INST_rg_f3.dump_VCD_defs(num);
  num = INST_rg_is_OP_not_OP_32.dump_VCD_defs(num);
  num = INST_rg_state.dump_VCD_defs(num);
  num = INST_rg_v1.dump_VCD_defs(num);
  num = INST_rg_v2.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkRISCV_MBox::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkRISCV_MBox &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkRISCV_MBox::vcd_defs(tVCDDumpType dt, MOD_mkRISCV_MBox &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 64u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_a__h4408) != DEF_a__h4408)
      {
	vcd_write_val(sim_hdl, num, DEF_a__h4408, 64u);
	backing.DEF_a__h4408 = DEF_a__h4408;
      }
      ++num;
      if ((backing.DEF_b__h4409) != DEF_b__h4409)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h4409, 64u);
	backing.DEF_b__h4409 = DEF_b__h4409;
      }
      ++num;
      if ((backing.DEF_intDiv_rg_denom_is_signed__h607) != DEF_intDiv_rg_denom_is_signed__h607)
      {
	vcd_write_val(sim_hdl, num, DEF_intDiv_rg_denom_is_signed__h607, 1u);
	backing.DEF_intDiv_rg_denom_is_signed__h607 = DEF_intDiv_rg_denom_is_signed__h607;
      }
      ++num;
      if ((backing.DEF_intDiv_rg_numer_is_signed__h586) != DEF_intDiv_rg_numer_is_signed__h586)
      {
	vcd_write_val(sim_hdl, num, DEF_intDiv_rg_numer_is_signed__h586, 1u);
	backing.DEF_intDiv_rg_numer_is_signed__h586 = DEF_intDiv_rg_numer_is_signed__h586;
      }
      ++num;
      if ((backing.DEF_x__h4107) != DEF_x__h4107)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h4107, 64u);
	backing.DEF_x__h4107 = DEF_x__h4107;
      }
      ++num;
      if ((backing.DEF_y__h3901) != DEF_y__h3901)
      {
	vcd_write_val(sim_hdl, num, DEF_y__h3901, 64u);
	backing.DEF_y__h3901 = DEF_y__h3901;
      }
      ++num;
      if ((backing.DEF_y__h3977) != DEF_y__h3977)
      {
	vcd_write_val(sim_hdl, num, DEF_y__h3977, 64u);
	backing.DEF_y__h3977 = DEF_y__h3977;
      }
      ++num;
      if ((backing.DEF_y__h4127) != DEF_y__h4127)
      {
	vcd_write_val(sim_hdl, num, DEF_y__h4127, 64u);
	backing.DEF_y__h4127 = DEF_y__h4127;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_a__h4408, 64u);
      backing.DEF_a__h4408 = DEF_a__h4408;
      vcd_write_val(sim_hdl, num++, DEF_b__h4409, 64u);
      backing.DEF_b__h4409 = DEF_b__h4409;
      vcd_write_val(sim_hdl, num++, DEF_intDiv_rg_denom_is_signed__h607, 1u);
      backing.DEF_intDiv_rg_denom_is_signed__h607 = DEF_intDiv_rg_denom_is_signed__h607;
      vcd_write_val(sim_hdl, num++, DEF_intDiv_rg_numer_is_signed__h586, 1u);
      backing.DEF_intDiv_rg_numer_is_signed__h586 = DEF_intDiv_rg_numer_is_signed__h586;
      vcd_write_val(sim_hdl, num++, DEF_x__h4107, 64u);
      backing.DEF_x__h4107 = DEF_x__h4107;
      vcd_write_val(sim_hdl, num++, DEF_y__h3901, 64u);
      backing.DEF_y__h3901 = DEF_y__h3901;
      vcd_write_val(sim_hdl, num++, DEF_y__h3977, 64u);
      backing.DEF_y__h3977 = DEF_y__h3977;
      vcd_write_val(sim_hdl, num++, DEF_y__h4127, 64u);
      backing.DEF_y__h4127 = DEF_y__h4127;
    }
}

void MOD_mkRISCV_MBox::vcd_prims(tVCDDumpType dt, MOD_mkRISCV_MBox &backing)
{
  INST_cfg_verbosity.dump_VCD(dt, backing.INST_cfg_verbosity);
  INST_dw_result.dump_VCD(dt, backing.INST_dw_result);
  INST_dw_valid.dump_VCD(dt, backing.INST_dw_valid);
  INST_intDiv_rg_denom2.dump_VCD(dt, backing.INST_intDiv_rg_denom2);
  INST_intDiv_rg_denom_is_signed.dump_VCD(dt, backing.INST_intDiv_rg_denom_is_signed);
  INST_intDiv_rg_n.dump_VCD(dt, backing.INST_intDiv_rg_n);
  INST_intDiv_rg_numer_is_signed.dump_VCD(dt, backing.INST_intDiv_rg_numer_is_signed);
  INST_intDiv_rg_quo.dump_VCD(dt, backing.INST_intDiv_rg_quo);
  INST_intDiv_rg_quoIsNeg.dump_VCD(dt, backing.INST_intDiv_rg_quoIsNeg);
  INST_intDiv_rg_remIsNeg.dump_VCD(dt, backing.INST_intDiv_rg_remIsNeg);
  INST_intDiv_rg_state.dump_VCD(dt, backing.INST_intDiv_rg_state);
  INST_rg_f3.dump_VCD(dt, backing.INST_rg_f3);
  INST_rg_is_OP_not_OP_32.dump_VCD(dt, backing.INST_rg_is_OP_not_OP_32);
  INST_rg_state.dump_VCD(dt, backing.INST_rg_state);
  INST_rg_v1.dump_VCD(dt, backing.INST_rg_v1);
  INST_rg_v2.dump_VCD(dt, backing.INST_rg_v2);
}
