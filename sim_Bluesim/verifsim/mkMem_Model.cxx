/*
 * Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
 * 
 * On Fri Aug 24 12:25:43 BST 2018
 * 
 */
#include "bluesim_primitives.h"
#include "mkMem_Model.h"


/* String declarations */
static std::string const __str_literal_2("%0d: ERROR: Mem_Model.request.put: addr 0x%0h >= size 0x%0h (num raw-mem words)",
					 79u);
static std::string const __str_literal_1("Mem.hex", 7u);


/* Constructor */
MOD_mkMem_Model::MOD_mkMem_Model(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_f_raw_mem_rsps(simHdl, "f_raw_mem_rsps", this, 256u, 2u, 1u, 0u),
    INST_rf(simHdl, "rf", this, __str_literal_1, 64u, 256u, 0llu, 150994943llu, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u),
    DEF_v__h371(2863311530u),
    DEF_x__h344(256u),
    DEF_x__h408(256u),
    DEF_mem_server_response_get__avValue1(256u)
{
  PORT_mem_server_request_put.setSize(353u);
  PORT_mem_server_request_put.clear();
  PORT_mem_server_response_get.setSize(256u);
  PORT_mem_server_response_get.clear();
  symbol_count = 4u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkMem_Model::init_symbols_0()
{
  init_symbol(&symbols[0u], "f_raw_mem_rsps", SYM_MODULE, &INST_f_raw_mem_rsps);
  init_symbol(&symbols[1u], "mem_server_request_put", SYM_PORT, &PORT_mem_server_request_put, 353u);
  init_symbol(&symbols[2u], "mem_server_response_get", SYM_PORT, &PORT_mem_server_response_get, 256u);
  init_symbol(&symbols[3u], "rf", SYM_MODULE, &INST_rf);
}


/* Rule actions */


/* Methods */

void MOD_mkMem_Model::METH_mem_server_request_put(tUWide ARG_mem_server_request_put)
{
  tUInt32 DEF_v__h365;
  tUInt8 DEF_NOT_mem_server_request_put_BITS_319_TO_256_ULT_ETC___d9;
  tUInt8 DEF_mem_server_request_put_BITS_319_TO_256_ULT_0x9_ETC___d4;
  tUInt8 DEF_mem_server_request_put_BITS_319_TO_256_ULT_0x9_ETC___d2;
  tUInt8 DEF_mem_server_request_put_BITS_319_TO_256_ULT_0x9_ETC___d7;
  tUInt8 DEF_mem_server_request_put_BIT_352___d3;
  tUInt64 DEF_i__h441;
  PORT_mem_server_request_put = ARG_mem_server_request_put;
  DEF_i__h441 = primExtract64(64u, 353u, ARG_mem_server_request_put, 32u, 319u, 32u, 256u);
  DEF_x__h344 = INST_rf.METH_sub(DEF_i__h441);
  wop_primExtractWide(256u, 353u, ARG_mem_server_request_put, 32u, 255u, 32u, 0u, DEF_x__h408);
  DEF_mem_server_request_put_BIT_352___d3 = ARG_mem_server_request_put.get_bits_in_word8(11u, 0u, 1u);
  DEF_mem_server_request_put_BITS_319_TO_256_ULT_0x9_ETC___d2 = DEF_i__h441 < 150994944llu;
  DEF_mem_server_request_put_BITS_319_TO_256_ULT_0x9_ETC___d7 = DEF_mem_server_request_put_BITS_319_TO_256_ULT_0x9_ETC___d2 && !DEF_mem_server_request_put_BIT_352___d3;
  DEF_mem_server_request_put_BITS_319_TO_256_ULT_0x9_ETC___d4 = DEF_mem_server_request_put_BITS_319_TO_256_ULT_0x9_ETC___d2 && DEF_mem_server_request_put_BIT_352___d3;
  DEF_NOT_mem_server_request_put_BITS_319_TO_256_ULT_ETC___d9 = !DEF_mem_server_request_put_BITS_319_TO_256_ULT_0x9_ETC___d2;
  if (DEF_mem_server_request_put_BITS_319_TO_256_ULT_0x9_ETC___d4)
    INST_rf.METH_upd(DEF_i__h441, DEF_x__h408);
  if (DEF_mem_server_request_put_BITS_319_TO_256_ULT_0x9_ETC___d7)
    INST_f_raw_mem_rsps.METH_enq(DEF_x__h344);
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_NOT_mem_server_request_put_BITS_319_TO_256_ULT_ETC___d9)
      DEF_v__h371 = dollar_stime(sim_hdl);
  DEF_v__h365 = DEF_v__h371 / 10u;
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_NOT_mem_server_request_put_BITS_319_TO_256_ULT_ETC___d9)
      dollar_display(sim_hdl,
		     this,
		     "s,32,64,64",
		     &__str_literal_2,
		     DEF_v__h365,
		     DEF_i__h441,
		     150994944llu);
    if (DEF_NOT_mem_server_request_put_BITS_319_TO_256_ULT_ETC___d9)
      dollar_finish(sim_hdl, "32", 1u);
  }
}

tUInt8 MOD_mkMem_Model::METH_RDY_mem_server_request_put()
{
  tUInt8 DEF_CAN_FIRE_mem_server_request_put;
  tUInt8 PORT_RDY_mem_server_request_put;
  DEF_CAN_FIRE_mem_server_request_put = INST_f_raw_mem_rsps.METH_i_notFull();
  PORT_RDY_mem_server_request_put = DEF_CAN_FIRE_mem_server_request_put;
  return PORT_RDY_mem_server_request_put;
}

tUWide MOD_mkMem_Model::METH_mem_server_response_get()
{
  DEF_mem_server_response_get__avValue1 = INST_f_raw_mem_rsps.METH_first();
  PORT_mem_server_response_get = DEF_mem_server_response_get__avValue1;
  INST_f_raw_mem_rsps.METH_deq();
  return PORT_mem_server_response_get;
}

tUInt8 MOD_mkMem_Model::METH_RDY_mem_server_response_get()
{
  tUInt8 DEF_CAN_FIRE_mem_server_response_get;
  tUInt8 PORT_RDY_mem_server_response_get;
  DEF_CAN_FIRE_mem_server_response_get = INST_f_raw_mem_rsps.METH_i_notEmpty();
  PORT_RDY_mem_server_response_get = DEF_CAN_FIRE_mem_server_response_get;
  return PORT_RDY_mem_server_response_get;
}


/* Reset routines */

void MOD_mkMem_Model::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_f_raw_mem_rsps.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkMem_Model::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkMem_Model::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_f_raw_mem_rsps.dump_state(indent + 2u);
  INST_rf.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkMem_Model::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 9u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "mem_server_response_get__avValue1", 256u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h371", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h344", 256u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h408", 256u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "mem_server_request_put", 353u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "mem_server_response_get", 256u);
  num = INST_f_raw_mem_rsps.dump_VCD_defs(num);
  num = INST_rf.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkMem_Model::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkMem_Model &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkMem_Model::vcd_defs(tVCDDumpType dt, MOD_mkMem_Model &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 256u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 256u);
    vcd_write_x(sim_hdl, num++, 256u);
    vcd_write_x(sim_hdl, num++, 353u);
    vcd_write_x(sim_hdl, num++, 256u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_mem_server_response_get__avValue1) != DEF_mem_server_response_get__avValue1)
      {
	vcd_write_val(sim_hdl, num, DEF_mem_server_response_get__avValue1, 256u);
	backing.DEF_mem_server_response_get__avValue1 = DEF_mem_server_response_get__avValue1;
      }
      ++num;
      if ((backing.DEF_v__h371) != DEF_v__h371)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h371, 32u);
	backing.DEF_v__h371 = DEF_v__h371;
      }
      ++num;
      if ((backing.DEF_x__h344) != DEF_x__h344)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h344, 256u);
	backing.DEF_x__h344 = DEF_x__h344;
      }
      ++num;
      if ((backing.DEF_x__h408) != DEF_x__h408)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h408, 256u);
	backing.DEF_x__h408 = DEF_x__h408;
      }
      ++num;
      if ((backing.PORT_mem_server_request_put) != PORT_mem_server_request_put)
      {
	vcd_write_val(sim_hdl, num, PORT_mem_server_request_put, 353u);
	backing.PORT_mem_server_request_put = PORT_mem_server_request_put;
      }
      ++num;
      if ((backing.PORT_mem_server_response_get) != PORT_mem_server_response_get)
      {
	vcd_write_val(sim_hdl, num, PORT_mem_server_response_get, 256u);
	backing.PORT_mem_server_response_get = PORT_mem_server_response_get;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_mem_server_response_get__avValue1, 256u);
      backing.DEF_mem_server_response_get__avValue1 = DEF_mem_server_response_get__avValue1;
      vcd_write_val(sim_hdl, num++, DEF_v__h371, 32u);
      backing.DEF_v__h371 = DEF_v__h371;
      vcd_write_val(sim_hdl, num++, DEF_x__h344, 256u);
      backing.DEF_x__h344 = DEF_x__h344;
      vcd_write_val(sim_hdl, num++, DEF_x__h408, 256u);
      backing.DEF_x__h408 = DEF_x__h408;
      vcd_write_val(sim_hdl, num++, PORT_mem_server_request_put, 353u);
      backing.PORT_mem_server_request_put = PORT_mem_server_request_put;
      vcd_write_val(sim_hdl, num++, PORT_mem_server_response_get, 256u);
      backing.PORT_mem_server_response_get = PORT_mem_server_response_get;
    }
}

void MOD_mkMem_Model::vcd_prims(tVCDDumpType dt, MOD_mkMem_Model &backing)
{
  INST_f_raw_mem_rsps.dump_VCD(dt, backing.INST_f_raw_mem_rsps);
  INST_rf.dump_VCD(dt, backing.INST_rf);
}
