/*
 * Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
 * 
 * On Fri Aug 24 12:25:43 BST 2018
 * 
 */

/* Generation options: */
#ifndef __mkRISCV_MBox_h__
#define __mkRISCV_MBox_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkRISCV_MBox module */
class MOD_mkRISCV_MBox : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_ConfigReg<tUInt8> INST_cfg_verbosity;
  MOD_Wire<tUInt64> INST_dw_result;
  MOD_Wire<tUInt8> INST_dw_valid;
  MOD_Reg<tUInt64> INST_intDiv_rg_denom2;
  MOD_Reg<tUInt8> INST_intDiv_rg_denom_is_signed;
  MOD_Reg<tUInt64> INST_intDiv_rg_n;
  MOD_Reg<tUInt8> INST_intDiv_rg_numer_is_signed;
  MOD_Reg<tUInt64> INST_intDiv_rg_quo;
  MOD_Reg<tUInt8> INST_intDiv_rg_quoIsNeg;
  MOD_Reg<tUInt8> INST_intDiv_rg_remIsNeg;
  MOD_Reg<tUInt8> INST_intDiv_rg_state;
  MOD_Reg<tUInt8> INST_rg_f3;
  MOD_Reg<tUInt8> INST_rg_is_OP_not_OP_32;
  MOD_Reg<tUInt8> INST_rg_state;
  MOD_Reg<tUInt64> INST_rg_v1;
  MOD_Reg<tUInt64> INST_rg_v2;
 
 /* Constructor */
 public:
  MOD_mkRISCV_MBox(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_intDiv_rg_numer_is_signed__h586;
  tUInt8 DEF_intDiv_rg_denom_is_signed__h607;
  tUInt64 DEF_y__h3901;
  tUInt64 DEF_b__h4409;
 
 /* Local definitions */
 private:
  tUInt64 DEF_a__h4408;
  tUInt64 DEF_y__h4127;
  tUInt64 DEF_y__h3977;
  tUInt64 DEF_x__h4107;
 
 /* Rules */
 public:
  void RL_intDiv_rl_start_div_by_zero();
  void RL_intDiv_rl_start_overflow();
  void RL_intDiv_rl_start_s();
  void RL_intDiv_rl_loop1();
  void RL_intDiv_rl_loop2();
  void RL_rg_div_rem();
 
 /* Methods */
 public:
  void METH_set_verbosity(tUInt8 ARG_set_verbosity_verbosity);
  tUInt8 METH_RDY_set_verbosity();
  void METH_req_reset();
  tUInt8 METH_RDY_req_reset();
  void METH_rsp_reset();
  tUInt8 METH_RDY_rsp_reset();
  void METH_req(tUInt8 ARG_req_is_OP_not_OP_32,
		tUInt8 ARG_req_f3,
		tUInt64 ARG_req_v1,
		tUInt64 ARG_req_v2);
  tUInt8 METH_RDY_req();
  tUInt8 METH_valid();
  tUInt8 METH_RDY_valid();
  tUInt64 METH_word();
  tUInt8 METH_RDY_word();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkRISCV_MBox &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkRISCV_MBox &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkRISCV_MBox &backing);
};

#endif /* ifndef __mkRISCV_MBox_h__ */
