/*
 * Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
 * 
 * On Wed Aug 15 16:00:33 BST 2018
 * 
 */

/* Generation options: */
#ifndef __mkUART_h__
#define __mkUART_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkUART module */
class MOD_mkUART : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_ConfigReg<tUInt8> INST_cfg_verbosity;
  MOD_Fifo<tUInt8> INST_f_from_console;
  MOD_Fifo<tUInt8> INST_f_reset_reqs;
  MOD_Fifo<tUInt8> INST_f_reset_rsps;
  MOD_Fifo<tUInt8> INST_f_to_console;
  MOD_Reg<tUInt64> INST_rg_addr_base;
  MOD_Reg<tUInt64> INST_rg_addr_lim;
  MOD_Reg<tUInt8> INST_rg_dlh;
  MOD_Reg<tUInt8> INST_rg_dll;
  MOD_Reg<tUInt8> INST_rg_fcr;
  MOD_Reg<tUInt8> INST_rg_ier;
  MOD_Reg<tUInt8> INST_rg_iir;
  MOD_Reg<tUInt8> INST_rg_lcr;
  MOD_Reg<tUInt8> INST_rg_lsr;
  MOD_Reg<tUInt8> INST_rg_mcr;
  MOD_Reg<tUInt8> INST_rg_msr;
  MOD_Reg<tUInt8> INST_rg_scr;
  MOD_Reg<tUInt8> INST_rg_state;
  MOD_Reg<tUInt8> INST_rg_thr;
  MOD_Fifo<tUWide> INST_slave_xactor_f_rd_addr;
  MOD_Fifo<tUWide> INST_slave_xactor_f_rd_data;
  MOD_Fifo<tUWide> INST_slave_xactor_f_wr_addr;
  MOD_Fifo<tUWide> INST_slave_xactor_f_wr_data;
  MOD_Fifo<tUInt8> INST_slave_xactor_f_wr_resp;
 
 /* Constructor */
 public:
  MOD_mkUART(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
  tUInt8 PORT_slave_awready;
  tUInt8 PORT_slave_wready;
  tUInt8 PORT_slave_bvalid;
  tUInt8 PORT_slave_bresp;
  tUInt8 PORT_slave_buser;
  tUInt8 PORT_slave_arready;
  tUInt8 PORT_slave_rvalid;
  tUInt8 PORT_slave_rresp;
  tUInt64 PORT_slave_rdata;
  tUInt8 PORT_slave_ruser;
  tUInt8 PORT_RDY_slave_m_awvalid;
  tUInt8 PORT_RDY_slave_m_wvalid;
  tUInt8 PORT_RDY_slave_m_bready;
  tUInt8 PORT_RDY_slave_m_arvalid;
  tUInt8 PORT_RDY_slave_m_rready;
 
 /* Publicly accessible definitions */
 public:
  tUInt64 DEF__read__h123;
  tUInt8 DEF_slave_xactor_f_wr_data_first__12_BIT_0___d113;
  tUInt8 DEF_x__h2775;
  tUInt8 DEF_x__h2590;
  tUInt8 DEF_rg_lcr_BIT_7___h3024;
  tUInt8 DEF_NOT_slave_xactor_f_wr_addr_first__06_BITS_66_T_ETC___d115;
  tUWide DEF_slave_xactor_f_wr_data_first____d112;
  tUWide DEF_slave_xactor_f_rd_addr_first____d11;
  tUWide DEF_slave_xactor_f_wr_addr_first____d106;
  tUInt8 DEF__read__h1226;
  tUInt64 DEF_slave_xactor_f_wr_addr_first__06_BITS_66_TO_3___d107;
  tUInt64 DEF_slave_xactor_f_rd_addr_first__1_BITS_66_TO_3___d12;
  tUInt64 DEF_slave_xactor_f_wr_addr_first__06_BITS_66_TO_3__ETC___d108;
  tUInt8 DEF_x__h1852;
  tUInt64 DEF_slave_xactor_f_rd_addr_first__1_BITS_66_TO_3_2_ETC___d14;
  tUInt8 DEF_x__h1702;
  tUInt8 DEF_slave_xactor_f_rd_addr_first__1_BITS_66_TO_3_2_ETC___d16;
  tUInt8 DEF_slave_xactor_f_rd_addr_first__1_BITS_66_TO_3_2_ETC___d19;
  tUInt8 DEF_slave_xactor_f_wr_addr_first__06_BITS_66_TO_3__ETC___d117;
  tUInt8 DEF_slave_xactor_f_wr_addr_first__06_BITS_66_TO_3__ETC___d110;
  tUInt8 DEF_NOT_slave_xactor_f_wr_addr_first__06_BITS_66_T_ETC___d118;
  tUInt8 DEF_NOT_slave_xactor_f_rd_addr_first__1_BITS_66_TO_ETC___d20;
  tUInt8 DEF_NOT_slave_xactor_f_rd_addr_first__1_BITS_66_TO_ETC___d17;
 
 /* Local definitions */
 private:
  tUInt32 DEF_v__h4049;
  tUInt32 DEF_v__h3939;
  tUInt32 DEF_v__h3630;
  tUInt32 DEF_v__h3410;
  tUInt32 DEF_v__h2673;
  tUInt32 DEF_v__h2377;
  tUInt32 DEF_v__h2143;
  tUInt32 DEF_v__h1776;
  tUInt32 DEF_v__h1598;
  tUWide DEF_slave_xactor_f_rd_data_first____d206;
  tUInt8 DEF_x__h3602;
  tUInt8 DEF_slave_xactor_f_rd_data_i_notEmpty____d205;
  tUInt8 DEF_slave_xactor_f_rd_addr_i_notFull____d202;
  tUInt8 DEF_slave_xactor_f_wr_resp_i_notEmpty____d200;
  tUInt8 DEF_slave_xactor_f_wr_data_i_notFull____d197;
  tUInt8 DEF_slave_xactor_f_wr_addr_i_notFull____d194;
  tUWide DEF_IF_slave_xactor_f_rd_addr_first__1_BITS_66_TO__ETC___d93;
  tUWide DEF_IF_slave_xactor_f_rd_addr_first__1_BITS_66_TO__ETC___d92;
  tUInt8 DEF_NOT_cfg_verbosity_read_ULE_1_4___d95;
  tUWide DEF_slave_wdata_CONCAT_slave_wstrb___d199;
  tUWide DEF_slave_araddr_CONCAT_slave_arprot___d204;
  tUWide DEF_slave_awaddr_CONCAT_slave_awprot___d196;
 
 /* Rules */
 public:
  void RL_rl_reset();
  void RL_rl_process_rd_req();
  void RL_rl_process_wr_req();
 
 /* Methods */
 public:
  tUInt8 METH_slave_m_buser();
  tUInt8 METH_RDY_slave_m_buser();
  tUInt8 METH_slave_m_ruser();
  tUInt8 METH_RDY_slave_m_ruser();
  void METH_server_reset_request_put(tUInt8 ARG_server_reset_request_put);
  tUInt8 METH_RDY_server_reset_request_put();
  void METH_server_reset_response_get();
  tUInt8 METH_RDY_server_reset_response_get();
  void METH_set_addr_map(tUInt64 ARG_set_addr_map_addr_base, tUInt64 ARG_set_addr_map_addr_lim);
  tUInt8 METH_RDY_set_addr_map();
  void METH_slave_m_awvalid(tUInt8 ARG_slave_awvalid,
			    tUInt64 ARG_slave_awaddr,
			    tUInt8 ARG_slave_awprot,
			    tUInt8 ARG_slave_awuser);
  tUInt8 METH_RDY_slave_m_awvalid();
  tUInt8 METH_slave_m_awready();
  tUInt8 METH_RDY_slave_m_awready();
  void METH_slave_m_wvalid(tUInt8 ARG_slave_wvalid, tUInt64 ARG_slave_wdata, tUInt8 ARG_slave_wstrb);
  tUInt8 METH_RDY_slave_m_wvalid();
  tUInt8 METH_slave_m_wready();
  tUInt8 METH_RDY_slave_m_wready();
  tUInt8 METH_slave_m_bvalid();
  tUInt8 METH_RDY_slave_m_bvalid();
  tUInt8 METH_slave_m_bresp();
  tUInt8 METH_RDY_slave_m_bresp();
  void METH_slave_m_bready(tUInt8 ARG_slave_bready);
  tUInt8 METH_RDY_slave_m_bready();
  void METH_slave_m_arvalid(tUInt8 ARG_slave_arvalid,
			    tUInt64 ARG_slave_araddr,
			    tUInt8 ARG_slave_arprot,
			    tUInt8 ARG_slave_aruser);
  tUInt8 METH_RDY_slave_m_arvalid();
  tUInt8 METH_slave_m_arready();
  tUInt8 METH_RDY_slave_m_arready();
  tUInt8 METH_slave_m_rvalid();
  tUInt8 METH_RDY_slave_m_rvalid();
  tUInt8 METH_slave_m_rresp();
  tUInt8 METH_RDY_slave_m_rresp();
  tUInt64 METH_slave_m_rdata();
  tUInt8 METH_RDY_slave_m_rdata();
  void METH_slave_m_rready(tUInt8 ARG_slave_rready);
  tUInt8 METH_RDY_slave_m_rready();
  tUInt8 METH_get_to_console_get();
  tUInt8 METH_RDY_get_to_console_get();
  void METH_put_from_console_put(tUInt8 ARG_put_from_console_put);
  tUInt8 METH_RDY_put_from_console_put();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkUART &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkUART &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkUART &backing);
};

#endif /* ifndef __mkUART_h__ */
