/*
 * Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
 * 
 * On Wed Aug 15 16:00:33 BST 2018
 * 
 */

/* Generation options: */
#ifndef __mkCSR_RegFile_h__
#define __mkCSR_RegFile_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkCSR_RegFile module */
class MOD_mkCSR_RegFile : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_ConfigReg<tUInt8> INST_cfg_verbosity;
  MOD_Fifo<tUInt8> INST_f_reset_rsps;
  MOD_Fifo<tUInt8> INST_f_ti_reqs;
  MOD_Wire<tUInt8> INST_pw_minstret_incr;
  MOD_Reg<tUInt32> INST_rg_dcsr;
  MOD_Reg<tUInt64> INST_rg_dpc;
  MOD_Reg<tUInt64> INST_rg_dscratch0;
  MOD_Reg<tUInt64> INST_rg_dscratch1;
  MOD_Reg<tUInt8> INST_rg_ei_requested;
  MOD_Reg<tUInt8> INST_rg_mcause;
  MOD_Reg<tUInt8> INST_rg_mcounteren;
  MOD_Reg<tUInt64> INST_rg_mcycle;
  MOD_Reg<tUInt32> INST_rg_medeleg;
  MOD_Reg<tUInt64> INST_rg_mepc;
  MOD_Reg<tUInt32> INST_rg_mideleg;
  MOD_Reg<tUInt32> INST_rg_mie;
  MOD_Reg<tUInt64> INST_rg_minstret;
  MOD_Reg<tUInt32> INST_rg_mip;
  MOD_Reg<tUInt64> INST_rg_mscratch;
  MOD_Reg<tUInt32> INST_rg_mstatus;
  MOD_Reg<tUInt64> INST_rg_mtval;
  MOD_Reg<tUInt64> INST_rg_mtvec;
  MOD_Reg<tUInt64> INST_rg_satp;
  MOD_Reg<tUInt8> INST_rg_scause;
  MOD_Reg<tUInt64> INST_rg_sepc;
  MOD_Reg<tUInt8> INST_rg_si_requested;
  MOD_Reg<tUInt64> INST_rg_sscratch;
  MOD_Reg<tUInt8> INST_rg_state;
  MOD_Reg<tUInt64> INST_rg_stval;
  MOD_Reg<tUInt64> INST_rg_stvec;
  MOD_Reg<tUInt64> INST_rg_tdata1;
  MOD_Reg<tUInt64> INST_rg_tdata2;
  MOD_Reg<tUInt64> INST_rg_tdata3;
  MOD_Reg<tUInt64> INST_rg_tselect;
  MOD_Reg<tUInt64> INST_rg_watch_n;
  MOD_Reg<tUInt64> INST_rg_watchpoint1;
  MOD_Wire<tUInt64> INST_rw_mcycle;
  MOD_Wire<tUInt64> INST_rw_minstret;
 
 /* Constructor */
 public:
  MOD_mkCSR_RegFile(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
  tUInt8 PORT_EN_write_csr;
  tUWide PORT_read_csr;
  tUWide PORT_read_csr_port2;
  tUWide PORT_mav_read_csr;
  tUWide PORT_csr_trap_actions;
  tUWide PORT_csr_ret_actions;
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_WILL_FIRE_write_csr;
  tUInt8 DEF_rg_state___d1;
 
 /* Local definitions */
 private:
  tUInt8 DEF_rg_mstatus_96_BIT_3___d1124;
  tUInt8 DEF_rg_mstatus_96_BIT_0___d1121;
  tUInt8 DEF_rg_mstatus_96_BIT_1___d1122;
  tUInt8 DEF_rg_mstatus_96_BIT_2___d1123;
  tUInt32 DEF_v__h60143;
  tUInt32 DEF_v__h60048;
  tUInt32 DEF_v__h50504;
  tUInt32 DEF_v__h49989;
  tUInt32 DEF_v__h18823;
  tUInt32 DEF_v__h14672;
  tUInt32 DEF_v__h9903;
  tUInt64 DEF_rg_watchpoint1___d267;
  tUInt64 DEF_rg_watch_n___d266;
  tUInt64 DEF_rg_tdata3___d265;
  tUInt64 DEF_rg_tdata2___d264;
  tUInt64 DEF_rg_tdata1___d263;
  tUInt64 DEF_rg_tselect___d262;
  tUInt64 DEF_rg_minstret___d10;
  tUInt64 DEF_rg_mcycle___d3;
  tUInt64 DEF_tval__h54627;
  tUInt64 DEF_next_pc__h59807;
  tUInt64 DEF_rg_mscratch___d255;
  tUInt64 DEF_rg_satp___d235;
  tUInt64 DEF_tval__h50579;
  tUInt64 DEF_next_pc___1__h59816;
  tUInt64 DEF_rg_sscratch___d222;
  tUInt64 DEF_rg_mtvec___d249;
  tUInt64 DEF_rg_stvec___d218;
  tUInt32 DEF_rg_mstatus___d196;
  tUInt32 DEF_medeleg__h57244;
  tUInt32 DEF_rg_mip___d13;
  tUInt32 DEF_rg_mie___d23;
  tUInt32 DEF_mideleg__h57245;
  tUInt8 DEF_rg_mcause___d257;
  tUInt8 DEF_rg_scause___d224;
  tUInt8 DEF_x__h58330;
  tUInt8 DEF_rg_mcounteren___d253;
  tUInt64 DEF__read_base__h24041;
  tUInt64 DEF__read_base__h26481;
  tUInt32 DEF_rg_mstatus_96_BITS_26_TO_12___d1110;
  tUInt32 DEF_rg_mstatus_96_BITS_21_TO_12___d1279;
  tUInt8 DEF_rg_mstatus_96_BITS_25_TO_22___d243;
  tUInt8 DEF__read_exc_code__h26505;
  tUInt8 DEF__read_exc_code__h24053;
  tUInt8 DEF__read_sxl__h22353;
  tUInt8 DEF__read_uxl__h22354;
  tUInt8 DEF_rg_mstatus_96_BITS_18_TO_17___d199;
  tUInt8 DEF_x__h22391;
  tUInt8 DEF_mstatus_spp__h57415;
  tUInt8 DEF_x_BITS_1_TO_0___h25065;
  tUInt8 DEF_x_BITS_1_TO_0___h24037;
  tUInt8 DEF_rg_stvec_18_BIT_0___d220;
  tUInt8 DEF_rg_mtvec_49_BIT_0___d251;
  tUInt8 DEF__read_sd__h22352;
  tUInt8 DEF__read_mprv__h22360;
  tUInt8 DEF_rg_mstatus_96_BIT_8___d201;
  tUInt8 DEF_rg_mstatus_96_BIT_7___d1127;
  tUInt8 DEF_rg_mstatus_96_BIT_6___d1130;
  tUInt8 DEF_rg_mstatus_96_BIT_5___d1134;
  tUInt8 DEF_rg_mstatus_96_BIT_4___d1137;
  tUInt32 DEF_rg_mip_3_AND_rg_mie_3___d1330;
  tUInt8 DEF__read_interrupt__h26504;
  tUInt8 DEF__read_interrupt__h24052;
  tUInt64 DEF_rg_mstatus_96_BIT_26_97_CONCAT_0x0_CONCAT_rg_m_ETC___d210;
  tUInt64 DEF__0_CONCAT_rg_mie_3_BITS_9_TO_8_12_13_CONCAT_0_C_ETC___d217;
  tUInt64 DEF_rg_stvec_18_BITS_62_TO_1_19_CONCAT_0b0_CONCAT__ETC___d221;
  tUInt64 DEF_rg_scause_24_BIT_4_25_CONCAT_0_CONCAT_rg_scaus_ETC___d227;
  tUInt64 DEF__0_CONCAT_rg_mip_3_BITS_9_TO_8_29_30_CONCAT_0_C_ETC___d234;
  tUInt64 DEF__0_CONCAT_rg_medeleg_36___d237;
  tUInt64 DEF__0_CONCAT_rg_mideleg_38___d239;
  tUInt64 DEF_rg_mstatus_96_BIT_26_97_CONCAT_0_CONCAT_rg_mst_ETC___d248;
  tUInt64 DEF__0_CONCAT_rg_mie_3___d24;
  tUInt64 DEF_rg_mtvec_49_BITS_62_TO_1_50_CONCAT_0b0_CONCAT__ETC___d252;
  tUInt64 DEF__0_CONCAT_rg_mcounteren_53___d254;
  tUInt64 DEF_rg_mcause_57_BIT_4_58_CONCAT_0_CONCAT_rg_mcaus_ETC___d260;
  tUInt64 DEF_old_mip_w__h14642;
  tUInt8 DEF_NOT_cfg_verbosity_read__6_ULE_1_7___d18;
  tUWide DEF_csr_trap_actions_interrupt_CONCAT_0_CONCAT_csr_ETC___d1290;
  tUInt8 DEF__0x0_CONCAT_rg_mstatus_96_BITS_5_TO_4_02_CONCAT_ETC___d205;
 
 /* Rules */
 public:
  void RL_rl_reset_start();
  void RL_rl_mcycle_incr();
  void RL_rl_upd_minstret_csrrx();
  void RL_rl_upd_minstret_incr();
  void RL_rl_record_external_interrupt();
  void RL_rl_record_timer_interrupt_req();
  void RL_rl_record_software_interrupt();
 
 /* Methods */
 public:
  void METH_server_reset_request_put(tUInt8 ARG_server_reset_request_put);
  tUInt8 METH_RDY_server_reset_request_put();
  void METH_server_reset_response_get();
  tUInt8 METH_RDY_server_reset_response_get();
  tUWide METH_read_csr(tUInt32 ARG_read_csr_csr_addr);
  tUInt8 METH_RDY_read_csr();
  tUWide METH_read_csr_port2(tUInt32 ARG_read_csr_port2_csr_addr);
  tUInt8 METH_RDY_read_csr_port2();
  tUWide METH_mav_read_csr(tUInt32 ARG_mav_read_csr_csr_addr);
  tUInt8 METH_RDY_mav_read_csr();
  void METH_write_csr(tUInt32 ARG_write_csr_csr_addr, tUInt64 ARG_write_csr_word);
  tUInt8 METH_RDY_write_csr();
  tUInt64 METH_read_satp();
  tUInt8 METH_RDY_read_satp();
  tUInt64 METH_read_mstatus();
  tUInt8 METH_RDY_read_mstatus();
  tUInt64 METH_read_sstatus();
  tUInt8 METH_RDY_read_sstatus();
  tUWide METH_csr_trap_actions(tUInt8 ARG_csr_trap_actions_from_priv,
			       tUInt64 ARG_csr_trap_actions_pc,
			       tUInt8 ARG_csr_trap_actions_interrupt,
			       tUInt8 ARG_csr_trap_actions_exc_code,
			       tUInt64 ARG_csr_trap_actions_xtval);
  tUInt8 METH_RDY_csr_trap_actions();
  tUWide METH_csr_ret_actions(tUInt8 ARG_csr_ret_actions_from_priv);
  tUInt8 METH_RDY_csr_ret_actions();
  tUInt64 METH_read_csr_minstret();
  tUInt8 METH_RDY_read_csr_minstret();
  void METH_csr_minstret_incr();
  tUInt8 METH_RDY_csr_minstret_incr();
  tUInt64 METH_read_csr_mcycle();
  tUInt8 METH_RDY_read_csr_mcycle();
  tUInt64 METH_read_csr_mtime();
  tUInt8 METH_RDY_read_csr_mtime();
  tUInt8 METH_read_csr_mcounteren();
  tUInt8 METH_RDY_read_csr_mcounteren();
  void METH_external_interrupt_req();
  tUInt8 METH_RDY_external_interrupt_req();
  void METH_timer_interrupt_req(tUInt8 ARG_timer_interrupt_req_set_not_clear);
  tUInt8 METH_RDY_timer_interrupt_req();
  void METH_software_interrupt_req();
  tUInt8 METH_RDY_software_interrupt_req();
  tUInt8 METH_interrupt_pending(tUInt8 ARG_interrupt_pending_cur_priv);
  tUInt8 METH_RDY_interrupt_pending();
  tUInt8 METH_wfi_resume();
  tUInt8 METH_RDY_wfi_resume();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkCSR_RegFile &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkCSR_RegFile &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkCSR_RegFile &backing);
};

#endif /* ifndef __mkCSR_RegFile_h__ */
