/*
 * Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
 * 
 * On Fri Aug 24 12:25:43 BST 2018
 * 
 */

/* Generation options: */
#ifndef __mkCSR_RegFile_h__
#define __mkCSR_RegFile_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkCSR_RegFile module */
class MOD_mkCSR_RegFile : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_ConfigReg<tUInt8> INST_cfg_verbosity;
  MOD_Fifo<tUInt8> INST_f_ei_reqs;
  MOD_Fifo<tUInt8> INST_f_reset_rsps;
  MOD_Fifo<tUInt8> INST_f_si_reqs;
  MOD_Fifo<tUInt8> INST_f_ti_reqs;
  MOD_Wire<tUInt8> INST_pw_minstret_incr;
  MOD_Reg<tUInt32> INST_rg_dcsr;
  MOD_Reg<tUInt64> INST_rg_dpc;
  MOD_Reg<tUInt64> INST_rg_dscratch0;
  MOD_Reg<tUInt64> INST_rg_dscratch1;
  MOD_Reg<tUInt8> INST_rg_mcause;
  MOD_Reg<tUInt8> INST_rg_mcounteren;
  MOD_Reg<tUInt64> INST_rg_mcycle;
  MOD_Reg<tUInt32> INST_rg_medeleg;
  MOD_Reg<tUInt64> INST_rg_mepc;
  MOD_Reg<tUInt32> INST_rg_mideleg;
  MOD_Reg<tUInt32> INST_rg_mie;
  MOD_Reg<tUInt64> INST_rg_minstret;
  MOD_Reg<tUInt32> INST_rg_mip;
  MOD_Reg<tUInt64> INST_rg_mscratch;
  MOD_Reg<tUInt32> INST_rg_mstatus;
  MOD_Reg<tUInt64> INST_rg_mtval;
  MOD_Reg<tUInt64> INST_rg_mtvec;
  MOD_Reg<tUInt64> INST_rg_satp;
  MOD_Reg<tUInt8> INST_rg_scause;
  MOD_Reg<tUInt64> INST_rg_sepc;
  MOD_Reg<tUInt64> INST_rg_sscratch;
  MOD_Reg<tUInt8> INST_rg_state;
  MOD_Reg<tUInt64> INST_rg_stval;
  MOD_Reg<tUInt64> INST_rg_stvec;
  MOD_Reg<tUInt64> INST_rg_tdata1;
  MOD_Reg<tUInt64> INST_rg_tdata2;
  MOD_Reg<tUInt64> INST_rg_tdata3;
  MOD_Reg<tUInt64> INST_rg_tselect;
  MOD_Wire<tUInt64> INST_rw_mcycle;
  MOD_Wire<tUInt64> INST_rw_minstret;
 
 /* Constructor */
 public:
  MOD_mkCSR_RegFile(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
  tUInt8 PORT_EN_write_csr;
  tUWide PORT_read_csr;
  tUWide PORT_read_csr_port2;
  tUWide PORT_mav_read_csr;
  tUWide PORT_csr_trap_actions;
  tUWide PORT_csr_ret_actions;
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_WILL_FIRE_write_csr;
  tUInt8 DEF_rg_state___d1;
 
 /* Local definitions */
 private:
  tUInt8 DEF_rg_mstatus_05_BIT_0___d1182;
  tUInt8 DEF_rg_mstatus_05_BIT_1___d1053;
  tUInt8 DEF_rg_mstatus_05_BIT_3___d1184;
  tUInt8 DEF_rg_mstatus_05_BIT_2___d1183;
  tUInt64 DEF_rg_tdata3___d275;
  tUInt64 DEF_rg_tdata2___d274;
  tUInt64 DEF_rg_tdata1___d273;
  tUInt64 DEF_rg_tselect___d272;
  tUInt64 DEF_rg_minstret___d10;
  tUInt64 DEF_rg_mcycle___d3;
  tUInt64 DEF_tval__h55630;
  tUInt64 DEF_next_pc__h60811;
  tUInt64 DEF_rg_mscratch___d265;
  tUInt64 DEF_rg_satp___d246;
  tUInt64 DEF_tval__h52021;
  tUInt64 DEF_next_pc___1__h60820;
  tUInt64 DEF_rg_sscratch___d237;
  tUInt64 DEF_rg_mtvec___d259;
  tUInt64 DEF_rg_stvec___d233;
  tUInt32 DEF_rg_mstatus___d205;
  tUInt32 DEF_medeleg__h58261;
  tUInt32 DEF_rg_mip___d14;
  tUInt32 DEF_rg_mie___d22;
  tUInt32 DEF_mideleg__h58262;
  tUInt8 DEF_rg_mcause___d267;
  tUInt8 DEF_rg_scause___d239;
  tUInt8 DEF_x__h59313;
  tUInt8 DEF_rg_mcounteren___d263;
  tUInt64 DEF__read_base__h23741;
  tUInt64 DEF__read_base__h26196;
  tUInt32 DEF_rg_mstatus_05_BITS_25_TO_12___d1171;
  tUInt32 DEF_rg_mstatus_05_BITS_21_TO_12___d1335;
  tUInt8 DEF_rg_mstatus_05_BITS_25_TO_22___d253;
  tUInt8 DEF_rg_mstatus_05_BITS_15_TO_12___d213;
  tUInt8 DEF__read_exc_code__h26220;
  tUInt8 DEF__read_exc_code__h23753;
  tUInt8 DEF__read_sxl__h22042;
  tUInt8 DEF__read_uxl__h22043;
  tUInt8 DEF_rg_mstatus_05_BITS_18_TO_17___d212;
  tUInt8 DEF_x__h54400;
  tUInt8 DEF_status_fs__h54411;
  tUInt8 DEF_x__h22088;
  tUInt8 DEF_mstatus_spp__h58430;
  tUInt8 DEF_rg_mideleg_24_BITS_9_TO_8___d225;
  tUInt8 DEF_rg_mideleg_24_BITS_5_TO_4___d227;
  tUInt8 DEF_rg_mideleg_BITS_1_TO_0___h43302;
  tUInt8 DEF_rg_stvec_33_BIT_0___d235;
  tUInt8 DEF_rg_mtvec_59_BIT_0___d261;
  tUInt8 DEF__read_mprv__h22049;
  tUInt8 DEF_rg_mstatus_05_BIT_8___d214;
  tUInt8 DEF_rg_mstatus_05_BIT_7___d1187;
  tUInt8 DEF_rg_mstatus_05_BIT_6___d1190;
  tUInt8 DEF_rg_mstatus_05_BIT_5___d1052;
  tUInt8 DEF_rg_mstatus_05_BIT_4___d1196;
  tUInt8 DEF__read_interrupt__h26219;
  tUInt8 DEF__read_interrupt__h23752;
  tUInt64 DEF_rg_mstatus_05_BITS_15_TO_14_06_EQ_0x3_07_OR_rg_ETC___d222;
  tUInt64 DEF__0_CONCAT_rg_mie_2_AND_0_CONCAT_rg_mideleg_24_B_ETC___d232;
  tUInt64 DEF_rg_stvec_33_BITS_62_TO_1_34_CONCAT_0b0_CONCAT__ETC___d236;
  tUInt64 DEF_rg_scause_39_BIT_4_40_CONCAT_0_CONCAT_rg_scaus_ETC___d242;
  tUInt64 DEF__0_CONCAT_rg_mip_4_AND_0_CONCAT_rg_mideleg_24_B_ETC___d245;
  tUInt64 DEF__0_CONCAT_rg_medeleg_47___d248;
  tUInt64 DEF__0_CONCAT_rg_mideleg_24___d249;
  tUInt64 DEF_rg_mstatus_05_BITS_15_TO_14_06_EQ_0x3_07_OR_rg_ETC___d258;
  tUInt64 DEF__0_CONCAT_rg_mie_2___d23;
  tUInt64 DEF_rg_mtvec_59_BITS_62_TO_1_60_CONCAT_0b0_CONCAT__ETC___d262;
  tUInt64 DEF__0_CONCAT_rg_mcounteren_63___d264;
  tUInt64 DEF_rg_mcause_67_BIT_4_68_CONCAT_0_CONCAT_rg_mcaus_ETC___d270;
  tUInt64 DEF_old_mip_w__h9578;
  tUInt8 DEF_rg_mstatus_05_BITS_15_TO_14_06_EQ_0x3_07_OR_rg_ETC___d210;
  tUInt8 DEF_NOT_cfg_verbosity_read__7_ULE_1_8___d19;
  tUInt32 DEF_mask__h42150;
  tUInt32 DEF_x__h22732;
  tUInt32 DEF_x__h23763;
  tUWide DEF_csr_trap_actions_interrupt_CONCAT_0_CONCAT_csr_ETC___d1346;
 
 /* Rules */
 public:
  void RL_rl_reset_start();
  void RL_rl_mcycle_incr();
  void RL_rl_upd_minstret_csrrx();
  void RL_rl_upd_minstret_incr();
  void RL_rl_record_external_interrupt();
  void RL_rl_record_timer_interrupt_req();
  void RL_rl_record_software_interrupt();
 
 /* Methods */
 public:
  tUInt32 METH_read_misa();
  tUInt8 METH_RDY_read_misa();
  void METH_server_reset_request_put(tUInt8 ARG_server_reset_request_put);
  tUInt8 METH_RDY_server_reset_request_put();
  void METH_server_reset_response_get();
  tUInt8 METH_RDY_server_reset_response_get();
  tUWide METH_read_csr(tUInt32 ARG_read_csr_csr_addr);
  tUInt8 METH_RDY_read_csr();
  tUWide METH_read_csr_port2(tUInt32 ARG_read_csr_port2_csr_addr);
  tUInt8 METH_RDY_read_csr_port2();
  tUWide METH_mav_read_csr(tUInt32 ARG_mav_read_csr_csr_addr);
  tUInt8 METH_RDY_mav_read_csr();
  void METH_write_csr(tUInt32 ARG_write_csr_csr_addr, tUInt64 ARG_write_csr_word);
  tUInt8 METH_RDY_write_csr();
  tUInt64 METH_read_mstatus();
  tUInt8 METH_RDY_read_mstatus();
  tUInt64 METH_read_sstatus();
  tUInt8 METH_RDY_read_sstatus();
  tUInt64 METH_read_satp();
  tUInt8 METH_RDY_read_satp();
  tUWide METH_csr_trap_actions(tUInt8 ARG_csr_trap_actions_from_priv,
			       tUInt64 ARG_csr_trap_actions_pc,
			       tUInt8 ARG_csr_trap_actions_interrupt,
			       tUInt8 ARG_csr_trap_actions_exc_code,
			       tUInt64 ARG_csr_trap_actions_xtval);
  tUInt8 METH_RDY_csr_trap_actions();
  tUWide METH_csr_ret_actions(tUInt8 ARG_csr_ret_actions_from_priv);
  tUInt8 METH_RDY_csr_ret_actions();
  tUInt64 METH_read_csr_minstret();
  tUInt8 METH_RDY_read_csr_minstret();
  void METH_csr_minstret_incr();
  tUInt8 METH_RDY_csr_minstret_incr();
  tUInt64 METH_read_csr_mcycle();
  tUInt8 METH_RDY_read_csr_mcycle();
  tUInt64 METH_read_csr_mtime();
  tUInt8 METH_RDY_read_csr_mtime();
  tUInt8 METH_csr_counter_read_fault(tUInt8 ARG_csr_counter_read_fault_priv,
				     tUInt32 ARG_csr_counter_read_fault_csr_addr);
  tUInt8 METH_RDY_csr_counter_read_fault();
  tUInt32 METH_read_csr_mip();
  tUInt8 METH_RDY_read_csr_mip();
  void METH_external_interrupt_req(tUInt8 ARG_external_interrupt_req_set_not_clear);
  tUInt8 METH_RDY_external_interrupt_req();
  void METH_timer_interrupt_req(tUInt8 ARG_timer_interrupt_req_set_not_clear);
  tUInt8 METH_RDY_timer_interrupt_req();
  void METH_software_interrupt_req(tUInt8 ARG_software_interrupt_req_set_not_clear);
  tUInt8 METH_RDY_software_interrupt_req();
  tUInt8 METH_interrupt_pending(tUInt8 ARG_interrupt_pending_cur_priv);
  tUInt8 METH_RDY_interrupt_pending();
  tUInt8 METH_wfi_resume();
  tUInt8 METH_RDY_wfi_resume();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkCSR_RegFile &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkCSR_RegFile &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkCSR_RegFile &backing);
};

#endif /* ifndef __mkCSR_RegFile_h__ */
