/*
 * Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
 * 
 * On Wed Aug 15 16:00:33 BST 2018
 * 
 */
#include "bluesim_primitives.h"
#include "mkTimer.h"


/* String declarations */
static std::string const __str_literal_12("\n", 1u);
static std::string const __str_literal_14("        ", 8u);
static std::string const __str_literal_4("            ", 12u);
static std::string const __str_literal_15("     => ", 8u);
static std::string const __str_literal_11(" }", 2u);
static std::string const __str_literal_3("%0d: ERROR: Timer.rl_process_rd_req: unrecognized addr",
					 54u);
static std::string const __str_literal_22("%0d: ERROR: Timer.rl_process_wr_req: unrecognized addr",
					  54u);
static std::string const __str_literal_2("%0d: Timer.rl_compare: raising interrupt. time = %0d, timecmp = %0d",
					 67u);
static std::string const __str_literal_13("%0d: Timer.rl_process_rd_req: ", 30u);
static std::string const __str_literal_30("%0d: Timer.rl_process_wr_req", 28u);
static std::string const __str_literal_1("%0d: Timer.rl_reset", 19u);
static std::string const __str_literal_34("%0d: WARNING: Timer.set_addr_map: addr_base 0x%0h is not 4-Byte-aligned",
					  71u);
static std::string const __str_literal_35("%0d: WARNING: Timer.set_addr_map: addr_lim 0x%0h is not 4-Byte-aligned",
					  70u);
static std::string const __str_literal_7("'h%h", 4u);
static std::string const __str_literal_8(", ", 2u);
static std::string const __str_literal_18("AXI4_LITE_OKAY", 14u);
static std::string const __str_literal_19("AXI4_LITE_SLVERR", 16u);
static std::string const __str_literal_5("AXI4_Lite_Rd_Addr { ", 20u);
static std::string const __str_literal_16("AXI4_Lite_Rd_Data { ", 20u);
static std::string const __str_literal_23("AXI4_Lite_Wr_Addr { ", 20u);
static std::string const __str_literal_27("AXI4_Lite_Wr_Data { ", 20u);
static std::string const __str_literal_31("AXI4_Lite_Wr_Resp { ", 20u);
static std::string const __str_literal_6("araddr: ", 8u);
static std::string const __str_literal_9("arprot: ", 8u);
static std::string const __str_literal_10("aruser: ", 8u);
static std::string const __str_literal_24("awaddr: ", 8u);
static std::string const __str_literal_25("awprot: ", 8u);
static std::string const __str_literal_26("awuser: ", 8u);
static std::string const __str_literal_32("bresp: ", 7u);
static std::string const __str_literal_33("buser: ", 7u);
static std::string const __str_literal_20("rdata: ", 7u);
static std::string const __str_literal_17("rresp: ", 7u);
static std::string const __str_literal_21("ruser: ", 7u);
static std::string const __str_literal_28("wdata: ", 7u);
static std::string const __str_literal_29("wstrb: ", 7u);


/* Constructor */
MOD_mkTimer::MOD_mkTimer(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_cfg_verbosity(simHdl, "cfg_verbosity", this, 4u, (tUInt8)0u, (tUInt8)0u),
    INST_crg_interrupted(simHdl, "crg_interrupted", this, 1u),
    INST_crg_time(simHdl, "crg_time", this, 64u),
    INST_crg_timecmp(simHdl, "crg_timecmp", this, 64u),
    INST_f_reset_reqs(simHdl, "f_reset_reqs", this, 0u, 2u, 1u, 0u),
    INST_f_reset_rsps(simHdl, "f_reset_rsps", this, 0u, 2u, 1u, 0u),
    INST_f_sw_interrupt_req(simHdl, "f_sw_interrupt_req", this, 0u, 2u, 1u, 0u),
    INST_f_timer_interrupt_req(simHdl, "f_timer_interrupt_req", this, 1u, 2u, 1u, 0u),
    INST_rg_addr_base(simHdl, "rg_addr_base", this, 64u),
    INST_rg_addr_lim(simHdl, "rg_addr_lim", this, 64u),
    INST_rg_state(simHdl, "rg_state", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_slave_xactor_f_rd_addr(simHdl, "slave_xactor_f_rd_addr", this, 67u, 2u, 1u, 0u),
    INST_slave_xactor_f_rd_data(simHdl, "slave_xactor_f_rd_data", this, 66u, 2u, 1u, 0u),
    INST_slave_xactor_f_wr_addr(simHdl, "slave_xactor_f_wr_addr", this, 67u, 2u, 1u, 0u),
    INST_slave_xactor_f_wr_data(simHdl, "slave_xactor_f_wr_data", this, 72u, 2u, 1u, 0u),
    INST_slave_xactor_f_wr_resp(simHdl, "slave_xactor_f_wr_resp", this, 2u, 2u, 1u, 0u),
    PORT_RST_N((tUInt8)1u),
    DEF_slave_xactor_f_wr_data_first____d84(72u),
    DEF_slave_xactor_f_wr_addr_first____d80(67u),
    DEF_v__h4041(2863311530u),
    DEF_v__h3931(2863311530u),
    DEF_v__h3620(2863311530u),
    DEF_v__h3417(2863311530u),
    DEF_v__h2575(2863311530u),
    DEF_v__h2308(2863311530u),
    DEF_v__h2120(2863311530u),
    DEF_v__h1918(2863311530u),
    DEF_slave_xactor_f_rd_addr_first____d32(67u),
    DEF_slave_xactor_f_rd_data_first____d166(66u),
    DEF_slave_wdata_CONCAT_slave_wstrb___d159(72u),
    DEF_slave_araddr_CONCAT_slave_arprot___d164(67u),
    DEF_slave_awaddr_CONCAT_slave_awprot___d156(67u),
    DEF_IF_slave_xactor_f_rd_addr_first__2_BITS_66_TO__ETC___d72(66u)
{
  PORT_slave_awready = false;
  PORT_slave_wready = false;
  PORT_slave_bvalid = false;
  PORT_slave_bresp = 0u;
  PORT_slave_buser = 0u;
  PORT_slave_arready = false;
  PORT_slave_rvalid = false;
  PORT_slave_rresp = 0u;
  PORT_slave_rdata = 0llu;
  PORT_slave_ruser = 0u;
  PORT_RDY_slave_m_awvalid = false;
  PORT_RDY_slave_m_wvalid = false;
  PORT_RDY_slave_m_bready = false;
  PORT_RDY_slave_m_arvalid = false;
  PORT_RDY_slave_m_rready = false;
  symbol_count = 38u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTimer::init_symbols_0()
{
  init_symbol(&symbols[0u], "_read__h123", SYM_DEF, &DEF__read__h123, 64u);
  init_symbol(&symbols[1u], "byte_addr__h2775", SYM_DEF, &DEF_byte_addr__h2775, 64u);
  init_symbol(&symbols[2u], "cfg_verbosity", SYM_MODULE, &INST_cfg_verbosity);
  init_symbol(&symbols[3u], "crg_interrupted", SYM_MODULE, &INST_crg_interrupted);
  init_symbol(&symbols[4u], "crg_time", SYM_MODULE, &INST_crg_time);
  init_symbol(&symbols[5u], "crg_timecmp", SYM_MODULE, &INST_crg_timecmp);
  init_symbol(&symbols[6u], "f_reset_reqs", SYM_MODULE, &INST_f_reset_reqs);
  init_symbol(&symbols[7u], "f_reset_rsps", SYM_MODULE, &INST_f_reset_rsps);
  init_symbol(&symbols[8u], "f_sw_interrupt_req", SYM_MODULE, &INST_f_sw_interrupt_req);
  init_symbol(&symbols[9u], "f_timer_interrupt_req", SYM_MODULE, &INST_f_timer_interrupt_req);
  init_symbol(&symbols[10u], "RDY_slave_m_arvalid", SYM_PORT, &PORT_RDY_slave_m_arvalid, 1u);
  init_symbol(&symbols[11u], "RDY_slave_m_awvalid", SYM_PORT, &PORT_RDY_slave_m_awvalid, 1u);
  init_symbol(&symbols[12u], "RDY_slave_m_bready", SYM_PORT, &PORT_RDY_slave_m_bready, 1u);
  init_symbol(&symbols[13u], "RDY_slave_m_rready", SYM_PORT, &PORT_RDY_slave_m_rready, 1u);
  init_symbol(&symbols[14u], "RDY_slave_m_wvalid", SYM_PORT, &PORT_RDY_slave_m_wvalid, 1u);
  init_symbol(&symbols[15u], "RL_rl_compare", SYM_RULE);
  init_symbol(&symbols[16u], "RL_rl_process_rd_req", SYM_RULE);
  init_symbol(&symbols[17u], "RL_rl_process_wr_req", SYM_RULE);
  init_symbol(&symbols[18u], "RL_rl_reset", SYM_RULE);
  init_symbol(&symbols[19u], "RL_rl_tick_timer", SYM_RULE);
  init_symbol(&symbols[20u], "rg_addr_base", SYM_MODULE, &INST_rg_addr_base);
  init_symbol(&symbols[21u], "rg_addr_lim", SYM_MODULE, &INST_rg_addr_lim);
  init_symbol(&symbols[22u], "rg_state", SYM_MODULE, &INST_rg_state);
  init_symbol(&symbols[23u], "slave_arready", SYM_PORT, &PORT_slave_arready, 1u);
  init_symbol(&symbols[24u], "slave_awready", SYM_PORT, &PORT_slave_awready, 1u);
  init_symbol(&symbols[25u], "slave_bresp", SYM_PORT, &PORT_slave_bresp, 2u);
  init_symbol(&symbols[26u], "slave_buser", SYM_PORT, &PORT_slave_buser, 0u);
  init_symbol(&symbols[27u], "slave_bvalid", SYM_PORT, &PORT_slave_bvalid, 1u);
  init_symbol(&symbols[28u], "slave_rdata", SYM_PORT, &PORT_slave_rdata, 64u);
  init_symbol(&symbols[29u], "slave_rresp", SYM_PORT, &PORT_slave_rresp, 2u);
  init_symbol(&symbols[30u], "slave_ruser", SYM_PORT, &PORT_slave_ruser, 0u);
  init_symbol(&symbols[31u], "slave_rvalid", SYM_PORT, &PORT_slave_rvalid, 1u);
  init_symbol(&symbols[32u], "slave_wready", SYM_PORT, &PORT_slave_wready, 1u);
  init_symbol(&symbols[33u], "slave_xactor_f_rd_addr", SYM_MODULE, &INST_slave_xactor_f_rd_addr);
  init_symbol(&symbols[34u], "slave_xactor_f_rd_data", SYM_MODULE, &INST_slave_xactor_f_rd_data);
  init_symbol(&symbols[35u], "slave_xactor_f_wr_addr", SYM_MODULE, &INST_slave_xactor_f_wr_addr);
  init_symbol(&symbols[36u], "slave_xactor_f_wr_data", SYM_MODULE, &INST_slave_xactor_f_wr_data);
  init_symbol(&symbols[37u], "slave_xactor_f_wr_resp", SYM_MODULE, &INST_slave_xactor_f_wr_resp);
}


/* Rule actions */

void MOD_mkTimer::RL_rl_reset()
{
  tUInt32 DEF_v__h1912;
  tUInt8 DEF_NOT_cfg_verbosity_read_EQ_0___d6;
  DEF_x__h3592 = INST_cfg_verbosity.METH_read();
  DEF_NOT_cfg_verbosity_read_EQ_0___d6 = !(DEF_x__h3592 == (tUInt8)0u);
  INST_f_reset_reqs.METH_deq();
  INST_slave_xactor_f_wr_addr.METH_clear();
  INST_slave_xactor_f_wr_data.METH_clear();
  INST_slave_xactor_f_rd_addr.METH_clear();
  INST_slave_xactor_f_wr_resp.METH_clear();
  INST_slave_xactor_f_rd_data.METH_clear();
  INST_f_timer_interrupt_req.METH_clear();
  INST_f_sw_interrupt_req.METH_clear();
  INST_rg_state.METH_write((tUInt8)1u);
  INST_crg_time.METH_port0__write(1llu);
  INST_crg_timecmp.METH_port0__write(0llu);
  INST_crg_interrupted.METH_port0__write((tUInt8)1u);
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_NOT_cfg_verbosity_read_EQ_0___d6)
      DEF_v__h1918 = dollar_stime(sim_hdl);
  DEF_v__h1912 = DEF_v__h1918 / 10u;
  INST_f_reset_rsps.METH_enq();
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_NOT_cfg_verbosity_read_EQ_0___d6)
      dollar_display(sim_hdl, this, "s,32", &__str_literal_1, DEF_v__h1912);
}

void MOD_mkTimer::RL_rl_tick_timer()
{
  tUInt64 DEF_x1__h1983;
  DEF_crg_time_port0__read____d10 = INST_crg_time.METH_port0__read();
  DEF_x1__h1983 = DEF_crg_time_port0__read____d10 + 1llu;
  INST_crg_time.METH_port0__write(DEF_x1__h1983);
}

void MOD_mkTimer::RL_rl_compare()
{
  tUInt32 DEF_v__h2114;
  DEF_crg_timecmp_port0__read____d19 = INST_crg_timecmp.METH_port0__read();
  DEF_crg_time_port0__read____d10 = INST_crg_time.METH_port0__read();
  DEF_x__h3592 = INST_cfg_verbosity.METH_read();
  DEF_NOT_cfg_verbosity_read_ULE_1_4___d25 = !(DEF_x__h3592 <= (tUInt8)1u);
  INST_crg_interrupted.METH_port0__write((tUInt8)1u);
  INST_f_timer_interrupt_req.METH_enq((tUInt8)1u);
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_NOT_cfg_verbosity_read_ULE_1_4___d25)
      DEF_v__h2120 = dollar_stime(sim_hdl);
  DEF_v__h2114 = DEF_v__h2120 / 10u;
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_NOT_cfg_verbosity_read_ULE_1_4___d25)
      dollar_display(sim_hdl,
		     this,
		     "s,32,64,64",
		     &__str_literal_2,
		     DEF_v__h2114,
		     DEF_crg_time_port0__read____d10,
		     DEF_crg_timecmp_port0__read____d19);
}

void MOD_mkTimer::RL_rl_process_rd_req()
{
  tUInt32 DEF_v__h2302;
  tUInt32 DEF_v__h2569;
  tUInt8 DEF_NOT_slave_xactor_f_rd_addr_first__2_BITS_66_TO_ETC___d52;
  tUInt8 DEF_NOT_cfg_verbosity_read_ULE_1_4_5_AND_NOT_slave_ETC___d76;
  tUInt8 DEF_NOT_cfg_verbosity_read_ULE_1_4_5_AND_slave_xac_ETC___d75;
  tUInt8 DEF_IF_slave_xactor_f_rd_addr_first__2_BITS_66_TO__ETC___d61;
  tUInt64 DEF_byte_addr__h2222;
  tUInt8 DEF_slave_xactor_f_rd_addr_first__2_BITS_66_TO_3_3_ETC___d36;
  tUInt64 DEF_rdr_rdata__h2444;
  tUInt8 DEF_slave_xactor_f_rd_addr_first__2_BITS_66_TO_3_3_ETC___d38;
  tUInt8 DEF_slave_xactor_f_rd_addr_first__2_BITS_66_TO_3_3_ETC___d40;
  tUInt8 DEF_slave_xactor_f_rd_addr_first__2_BITS_66_TO_3_3_ETC___d42;
  tUInt64 DEF_rdata__h2263;
  tUInt8 DEF_slave_xactor_f_rd_addr_first__2_BITS_66_TO_3_3_ETC___d44;
  tUInt64 DEF_rdata__h2269;
  tUInt8 DEF_slave_xactor_f_rd_addr_first__2_BITS_66_TO_3_3_ETC___d46;
  tUInt8 DEF_slave_xactor_f_rd_addr_first__2_BITS_2_TO_0___d55;
  tUInt32 DEF_x__h2505;
  tUInt32 DEF_x__h2474;
  tUInt64 DEF_slave_xactor_f_rd_addr_first__2_BITS_66_TO_3___d33;
  DEF_slave_xactor_f_rd_addr_first____d32 = INST_slave_xactor_f_rd_addr.METH_first();
  DEF_crg_timecmp_port0__read____d19 = INST_crg_timecmp.METH_port0__read();
  DEF_crg_time_port0__read____d10 = INST_crg_time.METH_port0__read();
  DEF_x__h3592 = INST_cfg_verbosity.METH_read();
  DEF__read__h123 = INST_rg_addr_base.METH_read();
  DEF_slave_xactor_f_rd_addr_first__2_BITS_66_TO_3___d33 = primExtract64(64u,
									 67u,
									 DEF_slave_xactor_f_rd_addr_first____d32,
									 32u,
									 66u,
									 32u,
									 3u);
  DEF_x__h2474 = (tUInt32)(DEF_crg_timecmp_port0__read____d19 >> 32u);
  DEF_x__h2505 = (tUInt32)(DEF_crg_time_port0__read____d10 >> 32u);
  DEF_slave_xactor_f_rd_addr_first__2_BITS_2_TO_0___d55 = DEF_slave_xactor_f_rd_addr_first____d32.get_bits_in_word8(0u,
														    0u,
														    3u);
  DEF_rdata__h2269 = (((tUInt64)(0u)) << 32u) | (tUInt64)(DEF_x__h2505);
  DEF_rdata__h2263 = (((tUInt64)(0u)) << 32u) | (tUInt64)(DEF_x__h2474);
  DEF_byte_addr__h2222 = DEF_slave_xactor_f_rd_addr_first__2_BITS_66_TO_3___d33 - DEF__read__h123;
  DEF_slave_xactor_f_rd_addr_first__2_BITS_66_TO_3_3_ETC___d46 = DEF_byte_addr__h2222 == 49148llu;
  DEF_slave_xactor_f_rd_addr_first__2_BITS_66_TO_3_3_ETC___d44 = DEF_byte_addr__h2222 == 16388llu;
  DEF_slave_xactor_f_rd_addr_first__2_BITS_66_TO_3_3_ETC___d42 = DEF_byte_addr__h2222 == 4llu;
  DEF_slave_xactor_f_rd_addr_first__2_BITS_66_TO_3_3_ETC___d38 = DEF_byte_addr__h2222 == 16384llu;
  DEF_slave_xactor_f_rd_addr_first__2_BITS_66_TO_3_3_ETC___d40 = DEF_byte_addr__h2222 == 49144llu;
  switch (DEF_byte_addr__h2222) {
  case 0llu:
    DEF_rdr_rdata__h2444 = DEF_byte_addr__h2222;
    break;
  case 16384llu:
    DEF_rdr_rdata__h2444 = DEF_crg_timecmp_port0__read____d19;
    break;
  case 49144llu:
    DEF_rdr_rdata__h2444 = DEF_crg_time_port0__read____d10;
    break;
  case 16388llu:
    DEF_rdr_rdata__h2444 = DEF_rdata__h2263;
    break;
  case 49148llu:
    DEF_rdr_rdata__h2444 = DEF_rdata__h2269;
    break;
  default:
    DEF_rdr_rdata__h2444 = 0llu;
  }
  DEF_slave_xactor_f_rd_addr_first__2_BITS_66_TO_3_3_ETC___d36 = DEF_byte_addr__h2222 == 0llu;
  switch (DEF_byte_addr__h2222) {
  case 0llu:
  case 4llu:
  case 16384llu:
  case 16388llu:
  case 49144llu:
  case 49148llu:
    DEF_IF_slave_xactor_f_rd_addr_first__2_BITS_66_TO__ETC___d61 = (tUInt8)0u;
    break;
  default:
    DEF_IF_slave_xactor_f_rd_addr_first__2_BITS_66_TO__ETC___d61 = (tUInt8)2u;
  }
  DEF_NOT_cfg_verbosity_read_ULE_1_4___d25 = !(DEF_x__h3592 <= (tUInt8)1u);
  DEF_NOT_cfg_verbosity_read_ULE_1_4_5_AND_slave_xac_ETC___d75 = DEF_NOT_cfg_verbosity_read_ULE_1_4___d25 && (DEF_slave_xactor_f_rd_addr_first__2_BITS_66_TO_3_3_ETC___d36 || (DEF_slave_xactor_f_rd_addr_first__2_BITS_66_TO_3_3_ETC___d38 || (DEF_slave_xactor_f_rd_addr_first__2_BITS_66_TO_3_3_ETC___d40 || (DEF_slave_xactor_f_rd_addr_first__2_BITS_66_TO_3_3_ETC___d42 || (DEF_slave_xactor_f_rd_addr_first__2_BITS_66_TO_3_3_ETC___d44 || DEF_slave_xactor_f_rd_addr_first__2_BITS_66_TO_3_3_ETC___d46)))));
  DEF_NOT_slave_xactor_f_rd_addr_first__2_BITS_66_TO_ETC___d52 = !DEF_slave_xactor_f_rd_addr_first__2_BITS_66_TO_3_3_ETC___d36 && (!DEF_slave_xactor_f_rd_addr_first__2_BITS_66_TO_3_3_ETC___d38 && (!DEF_slave_xactor_f_rd_addr_first__2_BITS_66_TO_3_3_ETC___d40 && (!DEF_slave_xactor_f_rd_addr_first__2_BITS_66_TO_3_3_ETC___d42 && (!DEF_slave_xactor_f_rd_addr_first__2_BITS_66_TO_3_3_ETC___d44 && !DEF_slave_xactor_f_rd_addr_first__2_BITS_66_TO_3_3_ETC___d46))));
  DEF_NOT_cfg_verbosity_read_ULE_1_4_5_AND_NOT_slave_ETC___d76 = DEF_NOT_cfg_verbosity_read_ULE_1_4___d25 && DEF_NOT_slave_xactor_f_rd_addr_first__2_BITS_66_TO_ETC___d52;
  DEF_IF_slave_xactor_f_rd_addr_first__2_BITS_66_TO__ETC___d72.build_concat(17179869183llu & ((((tUInt64)(DEF_IF_slave_xactor_f_rd_addr_first__2_BITS_66_TO__ETC___d61)) << 32u) | (tUInt64)((tUInt32)(DEF_rdr_rdata__h2444 >> 32u))),
									    32u,
									    34u).set_whole_word((tUInt32)(DEF_rdr_rdata__h2444),
												0u);
  INST_slave_xactor_f_rd_addr.METH_deq();
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_NOT_slave_xactor_f_rd_addr_first__2_BITS_66_TO_ETC___d52)
      DEF_v__h2308 = dollar_stime(sim_hdl);
  DEF_v__h2302 = DEF_v__h2308 / 10u;
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_NOT_slave_xactor_f_rd_addr_first__2_BITS_66_TO_ETC___d52)
      dollar_display(sim_hdl, this, "s,32", &__str_literal_3, DEF_v__h2302);
    if (DEF_NOT_slave_xactor_f_rd_addr_first__2_BITS_66_TO_ETC___d52)
      dollar_write(sim_hdl, this, "s", &__str_literal_4);
    if (DEF_NOT_slave_xactor_f_rd_addr_first__2_BITS_66_TO_ETC___d52)
      dollar_write(sim_hdl, this, "s,s", &__str_literal_5, &__str_literal_6);
    if (DEF_NOT_slave_xactor_f_rd_addr_first__2_BITS_66_TO_ETC___d52)
      dollar_write(sim_hdl,
		   this,
		   "s,64",
		   &__str_literal_7,
		   DEF_slave_xactor_f_rd_addr_first__2_BITS_66_TO_3___d33);
    if (DEF_NOT_slave_xactor_f_rd_addr_first__2_BITS_66_TO_ETC___d52)
      dollar_write(sim_hdl, this, "s,s", &__str_literal_8, &__str_literal_9);
    if (DEF_NOT_slave_xactor_f_rd_addr_first__2_BITS_66_TO_ETC___d52)
      dollar_write(sim_hdl,
		   this,
		   "s,3",
		   &__str_literal_7,
		   DEF_slave_xactor_f_rd_addr_first__2_BITS_2_TO_0___d55);
    if (DEF_NOT_slave_xactor_f_rd_addr_first__2_BITS_66_TO_ETC___d52)
      dollar_write(sim_hdl, this, "s,s", &__str_literal_8, &__str_literal_10);
    if (DEF_NOT_slave_xactor_f_rd_addr_first__2_BITS_66_TO_ETC___d52)
      dollar_write(sim_hdl, this, "s,0,s", &__str_literal_7, (tUInt8)0u, &__str_literal_11);
    if (DEF_NOT_slave_xactor_f_rd_addr_first__2_BITS_66_TO_ETC___d52)
      dollar_write(sim_hdl, this, "s", &__str_literal_12);
  }
  INST_slave_xactor_f_rd_data.METH_enq(DEF_IF_slave_xactor_f_rd_addr_first__2_BITS_66_TO__ETC___d72);
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_NOT_cfg_verbosity_read_ULE_1_4___d25)
      DEF_v__h2575 = dollar_stime(sim_hdl);
  DEF_v__h2569 = DEF_v__h2575 / 10u;
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_NOT_cfg_verbosity_read_ULE_1_4___d25)
      dollar_display(sim_hdl, this, "s,32", &__str_literal_13, DEF_v__h2569);
    if (DEF_NOT_cfg_verbosity_read_ULE_1_4___d25)
      dollar_write(sim_hdl, this, "s", &__str_literal_14);
    if (DEF_NOT_cfg_verbosity_read_ULE_1_4___d25)
      dollar_write(sim_hdl, this, "s,s", &__str_literal_5, &__str_literal_6);
    if (DEF_NOT_cfg_verbosity_read_ULE_1_4___d25)
      dollar_write(sim_hdl,
		   this,
		   "s,64",
		   &__str_literal_7,
		   DEF_slave_xactor_f_rd_addr_first__2_BITS_66_TO_3___d33);
    if (DEF_NOT_cfg_verbosity_read_ULE_1_4___d25)
      dollar_write(sim_hdl, this, "s,s", &__str_literal_8, &__str_literal_9);
    if (DEF_NOT_cfg_verbosity_read_ULE_1_4___d25)
      dollar_write(sim_hdl,
		   this,
		   "s,3",
		   &__str_literal_7,
		   DEF_slave_xactor_f_rd_addr_first__2_BITS_2_TO_0___d55);
    if (DEF_NOT_cfg_verbosity_read_ULE_1_4___d25)
      dollar_write(sim_hdl, this, "s,s", &__str_literal_8, &__str_literal_10);
    if (DEF_NOT_cfg_verbosity_read_ULE_1_4___d25)
      dollar_write(sim_hdl, this, "s,0,s", &__str_literal_7, (tUInt8)0u, &__str_literal_11);
    if (DEF_NOT_cfg_verbosity_read_ULE_1_4___d25)
      dollar_write(sim_hdl, this, "s", &__str_literal_12);
    if (DEF_NOT_cfg_verbosity_read_ULE_1_4___d25)
      dollar_write(sim_hdl, this, "s", &__str_literal_15);
    if (DEF_NOT_cfg_verbosity_read_ULE_1_4___d25)
      dollar_write(sim_hdl, this, "s,s", &__str_literal_16, &__str_literal_17);
    if (DEF_NOT_cfg_verbosity_read_ULE_1_4_5_AND_slave_xac_ETC___d75)
      dollar_write(sim_hdl, this, "s", &__str_literal_18);
    if (DEF_NOT_cfg_verbosity_read_ULE_1_4_5_AND_NOT_slave_ETC___d76)
      dollar_write(sim_hdl, this, "s", &__str_literal_19);
    if (DEF_NOT_cfg_verbosity_read_ULE_1_4___d25)
      dollar_write(sim_hdl, this, "s,s", &__str_literal_8, &__str_literal_20);
    if (DEF_NOT_cfg_verbosity_read_ULE_1_4___d25)
      dollar_write(sim_hdl, this, "s,64", &__str_literal_7, DEF_rdr_rdata__h2444);
    if (DEF_NOT_cfg_verbosity_read_ULE_1_4___d25)
      dollar_write(sim_hdl, this, "s,s", &__str_literal_8, &__str_literal_21);
    if (DEF_NOT_cfg_verbosity_read_ULE_1_4___d25)
      dollar_write(sim_hdl, this, "s,0,s", &__str_literal_7, (tUInt8)0u, &__str_literal_11);
    if (DEF_NOT_cfg_verbosity_read_ULE_1_4___d25)
      dollar_write(sim_hdl, this, "s", &__str_literal_12);
  }
}

void MOD_mkTimer::RL_rl_process_wr_req()
{
  tUInt32 DEF_v__h3411;
  tUInt32 DEF_v__h3614;
  tUInt8 DEF_NOT_cfg_verbosity_read_ULE_1_4_5_AND_slave_xac_ETC___d142;
  tUInt8 DEF_NOT_cfg_verbosity_read_ULE_1_4_5_AND_NOT_slave_ETC___d143;
  tUInt8 DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3_1_ETC___d101;
  tUInt8 DEF_NOT_slave_xactor_f_wr_addr_first__0_BITS_66_TO_ETC___d104;
  tUInt8 DEF_NOT_slave_xactor_f_wr_addr_first__0_BITS_66_TO_ETC___d116;
  tUInt8 DEF_NOT_slave_xactor_f_wr_addr_first__0_BITS_66_TO_ETC___d102;
  tUInt8 DEF_NOT_slave_xactor_f_wr_addr_first__0_BITS_66_TO_ETC___d129;
  tUInt8 DEF_NOT_slave_xactor_f_wr_addr_first__0_BITS_66_TO_ETC___d111;
  tUInt8 DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3_1_ETC___d122;
  tUInt8 DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3_1_ETC___d113;
  tUInt8 DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3_1_ETC___d83;
  tUInt8 DEF_IF_slave_xactor_f_wr_addr_first__0_BITS_66_TO__ETC___d139;
  tUInt64 DEF_x1__h3162;
  tUInt8 DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3_1_ETC___d89;
  tUInt64 DEF_IF_slave_xactor_f_wr_addr_first__0_BITS_66_TO__ETC___d110;
  tUInt64 DEF_x1__h3318;
  tUInt8 DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3_1_ETC___d112;
  tUInt64 DEF_IF_slave_xactor_f_wr_addr_first__0_BITS_66_TO__ETC___d120;
  tUInt8 DEF_slave_xactor_f_wr_addr_first__0_BITS_2_TO_0___d132;
  tUInt8 DEF_slave_xactor_f_wr_data_first__4_BITS_7_TO_0___d133;
  tUInt32 DEF_slave_xactor_f_wr_data_first__4_BITS_39_TO_8___d106;
  tUInt64 DEF_x1__h2951;
  DEF_slave_xactor_f_wr_data_first____d84 = INST_slave_xactor_f_wr_data.METH_first();
  DEF_slave_xactor_f_wr_addr_first____d80 = INST_slave_xactor_f_wr_addr.METH_first();
  DEF__read__h123 = INST_rg_addr_base.METH_read();
  DEF_x__h3592 = INST_cfg_verbosity.METH_read();
  DEF_x1__h2951 = primExtract64(64u, 72u, DEF_slave_xactor_f_wr_data_first____d84, 32u, 71u, 32u, 8u);
  DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3___d81 = primExtract64(64u,
									 67u,
									 DEF_slave_xactor_f_wr_addr_first____d80,
									 32u,
									 66u,
									 32u,
									 3u);
  DEF_byte_addr__h2775 = DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3___d81 - DEF__read__h123;
  DEF_slave_xactor_f_wr_data_first__4_BITS_39_TO_8___d106 = primExtract32(32u,
									  72u,
									  DEF_slave_xactor_f_wr_data_first____d84,
									  32u,
									  39u,
									  32u,
									  8u);
  DEF_slave_xactor_f_wr_data_first__4_BITS_7_TO_0___d133 = DEF_slave_xactor_f_wr_data_first____d84.get_bits_in_word8(0u,
														     0u,
														     8u);
  DEF_slave_xactor_f_wr_addr_first__0_BITS_2_TO_0___d132 = DEF_slave_xactor_f_wr_addr_first____d80.get_bits_in_word8(0u,
														     0u,
														     3u);
  DEF_slave_xactor_f_wr_data_first__4_BIT_8___d85 = DEF_slave_xactor_f_wr_data_first____d84.get_bits_in_word8(0u,
													      8u,
													      1u);
  DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3_1_ETC___d112 = DEF_byte_addr__h2775 == 49144llu;
  DEF_x1__h3318 = (((tUInt64)(DEF_slave_xactor_f_wr_data_first__4_BITS_39_TO_8___d106)) << 32u) | (tUInt64)((tUInt32)(INST_crg_time.METH_port1__read()));
  DEF_IF_slave_xactor_f_wr_addr_first__0_BITS_66_TO__ETC___d120 = DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3_1_ETC___d112 ? DEF_x1__h2951 : DEF_x1__h3318;
  DEF_x1__h3162 = (((tUInt64)(DEF_slave_xactor_f_wr_data_first__4_BITS_39_TO_8___d106)) << 32u) | (tUInt64)((tUInt32)(INST_crg_timecmp.METH_port1__read()));
  DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3_1_ETC___d89 = DEF_byte_addr__h2775 == 16384llu;
  DEF_IF_slave_xactor_f_wr_addr_first__0_BITS_66_TO__ETC___d110 = DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3_1_ETC___d89 ? DEF_x1__h2951 : DEF_x1__h3162;
  switch (DEF_byte_addr__h2775) {
  case 0llu:
  case 4llu:
  case 16384llu:
  case 16388llu:
  case 49144llu:
  case 49148llu:
    DEF_IF_slave_xactor_f_wr_addr_first__0_BITS_66_TO__ETC___d139 = (tUInt8)0u;
    break;
  default:
    DEF_IF_slave_xactor_f_wr_addr_first__0_BITS_66_TO__ETC___d139 = (tUInt8)2u;
  }
  DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3_1_ETC___d83 = DEF_byte_addr__h2775 == 0llu;
  DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3_1_ETC___d113 = DEF_byte_addr__h2775 == 49148llu;
  DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3_1_ETC___d90 = DEF_byte_addr__h2775 == 16388llu;
  DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3_1_ETC___d122 = DEF_byte_addr__h2775 == 4llu;
  DEF_NOT_slave_xactor_f_wr_addr_first__0_BITS_66_TO_ETC___d91 = !DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3_1_ETC___d90;
  DEF_NOT_slave_xactor_f_wr_addr_first__0_BITS_66_TO_ETC___d111 = !DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3_1_ETC___d89;
  DEF_NOT_slave_xactor_f_wr_addr_first__0_BITS_66_TO_ETC___d102 = !DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3_1_ETC___d83;
  DEF_NOT_slave_xactor_f_wr_addr_first__0_BITS_66_TO_ETC___d129 = DEF_NOT_slave_xactor_f_wr_addr_first__0_BITS_66_TO_ETC___d102 && (DEF_NOT_slave_xactor_f_wr_addr_first__0_BITS_66_TO_ETC___d111 && (!DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3_1_ETC___d112 && (!DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3_1_ETC___d122 && (DEF_NOT_slave_xactor_f_wr_addr_first__0_BITS_66_TO_ETC___d91 && !DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3_1_ETC___d113))));
  DEF_NOT_slave_xactor_f_wr_addr_first__0_BITS_66_TO_ETC___d116 = DEF_NOT_slave_xactor_f_wr_addr_first__0_BITS_66_TO_ETC___d102 && (DEF_NOT_slave_xactor_f_wr_addr_first__0_BITS_66_TO_ETC___d111 && (DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3_1_ETC___d112 || DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3_1_ETC___d113));
  DEF_NOT_slave_xactor_f_wr_addr_first__0_BITS_66_TO_ETC___d104 = DEF_NOT_slave_xactor_f_wr_addr_first__0_BITS_66_TO_ETC___d102 && (DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3_1_ETC___d89 || DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3_1_ETC___d90);
  DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3_1_ETC___d101 = DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3_1_ETC___d83 && DEF_slave_xactor_f_wr_data_first__4_BIT_8___d85;
  DEF_NOT_cfg_verbosity_read_ULE_1_4___d25 = !(DEF_x__h3592 <= (tUInt8)1u);
  DEF_NOT_cfg_verbosity_read_ULE_1_4_5_AND_NOT_slave_ETC___d143 = DEF_NOT_cfg_verbosity_read_ULE_1_4___d25 && DEF_NOT_slave_xactor_f_wr_addr_first__0_BITS_66_TO_ETC___d129;
  DEF_NOT_cfg_verbosity_read_ULE_1_4_5_AND_slave_xac_ETC___d142 = DEF_NOT_cfg_verbosity_read_ULE_1_4___d25 && (DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3_1_ETC___d83 || (DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3_1_ETC___d89 || (DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3_1_ETC___d112 || (DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3_1_ETC___d122 || (DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3_1_ETC___d90 || DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3_1_ETC___d113)))));
  INST_slave_xactor_f_wr_addr.METH_deq();
  if (DEF_NOT_slave_xactor_f_wr_addr_first__0_BITS_66_TO_ETC___d104)
    INST_crg_timecmp.METH_port1__write(DEF_IF_slave_xactor_f_wr_addr_first__0_BITS_66_TO__ETC___d110);
  INST_slave_xactor_f_wr_data.METH_deq();
  if (DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3_1_ETC___d101)
    INST_f_sw_interrupt_req.METH_enq();
  if (DEF_NOT_slave_xactor_f_wr_addr_first__0_BITS_66_TO_ETC___d104)
    INST_crg_interrupted.METH_port1__write((tUInt8)0u);
  if (DEF_NOT_slave_xactor_f_wr_addr_first__0_BITS_66_TO_ETC___d104)
    INST_f_timer_interrupt_req.METH_enq((tUInt8)0u);
  if (DEF_NOT_slave_xactor_f_wr_addr_first__0_BITS_66_TO_ETC___d116)
    INST_crg_time.METH_port1__write(DEF_IF_slave_xactor_f_wr_addr_first__0_BITS_66_TO__ETC___d120);
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_NOT_slave_xactor_f_wr_addr_first__0_BITS_66_TO_ETC___d129)
      DEF_v__h3417 = dollar_stime(sim_hdl);
  DEF_v__h3411 = DEF_v__h3417 / 10u;
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_NOT_slave_xactor_f_wr_addr_first__0_BITS_66_TO_ETC___d129)
      dollar_display(sim_hdl, this, "s,32", &__str_literal_22, DEF_v__h3411);
    if (DEF_NOT_slave_xactor_f_wr_addr_first__0_BITS_66_TO_ETC___d129)
      dollar_write(sim_hdl, this, "s", &__str_literal_4);
    if (DEF_NOT_slave_xactor_f_wr_addr_first__0_BITS_66_TO_ETC___d129)
      dollar_write(sim_hdl, this, "s,s", &__str_literal_23, &__str_literal_24);
    if (DEF_NOT_slave_xactor_f_wr_addr_first__0_BITS_66_TO_ETC___d129)
      dollar_write(sim_hdl,
		   this,
		   "s,64",
		   &__str_literal_7,
		   DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3___d81);
    if (DEF_NOT_slave_xactor_f_wr_addr_first__0_BITS_66_TO_ETC___d129)
      dollar_write(sim_hdl, this, "s,s", &__str_literal_8, &__str_literal_25);
    if (DEF_NOT_slave_xactor_f_wr_addr_first__0_BITS_66_TO_ETC___d129)
      dollar_write(sim_hdl,
		   this,
		   "s,3",
		   &__str_literal_7,
		   DEF_slave_xactor_f_wr_addr_first__0_BITS_2_TO_0___d132);
    if (DEF_NOT_slave_xactor_f_wr_addr_first__0_BITS_66_TO_ETC___d129)
      dollar_write(sim_hdl, this, "s,s", &__str_literal_8, &__str_literal_26);
    if (DEF_NOT_slave_xactor_f_wr_addr_first__0_BITS_66_TO_ETC___d129)
      dollar_write(sim_hdl, this, "s,0,s", &__str_literal_7, (tUInt8)0u, &__str_literal_11);
    if (DEF_NOT_slave_xactor_f_wr_addr_first__0_BITS_66_TO_ETC___d129)
      dollar_write(sim_hdl, this, "s", &__str_literal_12);
    if (DEF_NOT_slave_xactor_f_wr_addr_first__0_BITS_66_TO_ETC___d129)
      dollar_write(sim_hdl, this, "s", &__str_literal_4);
    if (DEF_NOT_slave_xactor_f_wr_addr_first__0_BITS_66_TO_ETC___d129)
      dollar_write(sim_hdl, this, "s,s", &__str_literal_27, &__str_literal_28);
    if (DEF_NOT_slave_xactor_f_wr_addr_first__0_BITS_66_TO_ETC___d129)
      dollar_write(sim_hdl, this, "s,64", &__str_literal_7, DEF_x1__h2951);
    if (DEF_NOT_slave_xactor_f_wr_addr_first__0_BITS_66_TO_ETC___d129)
      dollar_write(sim_hdl, this, "s,s", &__str_literal_8, &__str_literal_29);
    if (DEF_NOT_slave_xactor_f_wr_addr_first__0_BITS_66_TO_ETC___d129)
      dollar_write(sim_hdl,
		   this,
		   "s,8,s",
		   &__str_literal_7,
		   DEF_slave_xactor_f_wr_data_first__4_BITS_7_TO_0___d133,
		   &__str_literal_11);
    if (DEF_NOT_slave_xactor_f_wr_addr_first__0_BITS_66_TO_ETC___d129)
      dollar_write(sim_hdl, this, "s", &__str_literal_12);
  }
  INST_slave_xactor_f_wr_resp.METH_enq(DEF_IF_slave_xactor_f_wr_addr_first__0_BITS_66_TO__ETC___d139);
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_NOT_cfg_verbosity_read_ULE_1_4___d25)
      DEF_v__h3620 = dollar_stime(sim_hdl);
  DEF_v__h3614 = DEF_v__h3620 / 10u;
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_NOT_cfg_verbosity_read_ULE_1_4___d25)
      dollar_display(sim_hdl, this, "s,32", &__str_literal_30, DEF_v__h3614);
    if (DEF_NOT_cfg_verbosity_read_ULE_1_4___d25)
      dollar_write(sim_hdl, this, "s", &__str_literal_14);
    if (DEF_NOT_cfg_verbosity_read_ULE_1_4___d25)
      dollar_write(sim_hdl, this, "s,s", &__str_literal_23, &__str_literal_24);
    if (DEF_NOT_cfg_verbosity_read_ULE_1_4___d25)
      dollar_write(sim_hdl,
		   this,
		   "s,64",
		   &__str_literal_7,
		   DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3___d81);
    if (DEF_NOT_cfg_verbosity_read_ULE_1_4___d25)
      dollar_write(sim_hdl, this, "s,s", &__str_literal_8, &__str_literal_25);
    if (DEF_NOT_cfg_verbosity_read_ULE_1_4___d25)
      dollar_write(sim_hdl,
		   this,
		   "s,3",
		   &__str_literal_7,
		   DEF_slave_xactor_f_wr_addr_first__0_BITS_2_TO_0___d132);
    if (DEF_NOT_cfg_verbosity_read_ULE_1_4___d25)
      dollar_write(sim_hdl, this, "s,s", &__str_literal_8, &__str_literal_26);
    if (DEF_NOT_cfg_verbosity_read_ULE_1_4___d25)
      dollar_write(sim_hdl, this, "s,0,s", &__str_literal_7, (tUInt8)0u, &__str_literal_11);
    if (DEF_NOT_cfg_verbosity_read_ULE_1_4___d25)
      dollar_write(sim_hdl, this, "s", &__str_literal_12);
    if (DEF_NOT_cfg_verbosity_read_ULE_1_4___d25)
      dollar_write(sim_hdl, this, "s", &__str_literal_14);
    if (DEF_NOT_cfg_verbosity_read_ULE_1_4___d25)
      dollar_write(sim_hdl, this, "s,s", &__str_literal_27, &__str_literal_28);
    if (DEF_NOT_cfg_verbosity_read_ULE_1_4___d25)
      dollar_write(sim_hdl, this, "s,64", &__str_literal_7, DEF_x1__h2951);
    if (DEF_NOT_cfg_verbosity_read_ULE_1_4___d25)
      dollar_write(sim_hdl, this, "s,s", &__str_literal_8, &__str_literal_29);
    if (DEF_NOT_cfg_verbosity_read_ULE_1_4___d25)
      dollar_write(sim_hdl,
		   this,
		   "s,8,s",
		   &__str_literal_7,
		   DEF_slave_xactor_f_wr_data_first__4_BITS_7_TO_0___d133,
		   &__str_literal_11);
    if (DEF_NOT_cfg_verbosity_read_ULE_1_4___d25)
      dollar_write(sim_hdl, this, "s", &__str_literal_12);
    if (DEF_NOT_cfg_verbosity_read_ULE_1_4___d25)
      dollar_write(sim_hdl, this, "s", &__str_literal_15);
    if (DEF_NOT_cfg_verbosity_read_ULE_1_4___d25)
      dollar_write(sim_hdl, this, "s,s", &__str_literal_31, &__str_literal_32);
    if (DEF_NOT_cfg_verbosity_read_ULE_1_4_5_AND_slave_xac_ETC___d142)
      dollar_write(sim_hdl, this, "s", &__str_literal_18);
    if (DEF_NOT_cfg_verbosity_read_ULE_1_4_5_AND_NOT_slave_ETC___d143)
      dollar_write(sim_hdl, this, "s", &__str_literal_19);
    if (DEF_NOT_cfg_verbosity_read_ULE_1_4___d25)
      dollar_write(sim_hdl, this, "s,s", &__str_literal_8, &__str_literal_33);
    if (DEF_NOT_cfg_verbosity_read_ULE_1_4___d25)
      dollar_write(sim_hdl, this, "s,0,s", &__str_literal_7, (tUInt8)0u, &__str_literal_11);
    if (DEF_NOT_cfg_verbosity_read_ULE_1_4___d25)
      dollar_write(sim_hdl, this, "s", &__str_literal_12);
  }
}


/* Methods */

tUInt8 MOD_mkTimer::METH_slave_m_buser()
{
  PORT_slave_buser = (tUInt8)0u;
  return PORT_slave_buser;
}

tUInt8 MOD_mkTimer::METH_RDY_slave_m_buser()
{
  tUInt8 PORT_RDY_slave_m_buser;
  tUInt8 DEF_CAN_FIRE_slave_m_buser;
  DEF_CAN_FIRE_slave_m_buser = (tUInt8)1u;
  PORT_RDY_slave_m_buser = DEF_CAN_FIRE_slave_m_buser;
  return PORT_RDY_slave_m_buser;
}

tUInt8 MOD_mkTimer::METH_slave_m_ruser()
{
  PORT_slave_ruser = (tUInt8)0u;
  return PORT_slave_ruser;
}

tUInt8 MOD_mkTimer::METH_RDY_slave_m_ruser()
{
  tUInt8 PORT_RDY_slave_m_ruser;
  tUInt8 DEF_CAN_FIRE_slave_m_ruser;
  DEF_CAN_FIRE_slave_m_ruser = (tUInt8)1u;
  PORT_RDY_slave_m_ruser = DEF_CAN_FIRE_slave_m_ruser;
  return PORT_RDY_slave_m_ruser;
}

void MOD_mkTimer::METH_server_reset_request_put(tUInt8 ARG_server_reset_request_put)
{
  INST_f_reset_reqs.METH_enq();
}

tUInt8 MOD_mkTimer::METH_RDY_server_reset_request_put()
{
  tUInt8 DEF_CAN_FIRE_server_reset_request_put;
  tUInt8 PORT_RDY_server_reset_request_put;
  DEF_CAN_FIRE_server_reset_request_put = INST_f_reset_reqs.METH_i_notFull();
  PORT_RDY_server_reset_request_put = DEF_CAN_FIRE_server_reset_request_put;
  return PORT_RDY_server_reset_request_put;
}

void MOD_mkTimer::METH_server_reset_response_get()
{
  INST_f_reset_rsps.METH_deq();
}

tUInt8 MOD_mkTimer::METH_RDY_server_reset_response_get()
{
  tUInt8 DEF_CAN_FIRE_server_reset_response_get;
  tUInt8 PORT_RDY_server_reset_response_get;
  DEF_CAN_FIRE_server_reset_response_get = INST_f_reset_rsps.METH_i_notEmpty();
  PORT_RDY_server_reset_response_get = DEF_CAN_FIRE_server_reset_response_get;
  return PORT_RDY_server_reset_response_get;
}

void MOD_mkTimer::METH_set_addr_map(tUInt64 ARG_set_addr_map_addr_base,
				    tUInt64 ARG_set_addr_map_addr_lim)
{
  tUInt32 DEF_v__h3925;
  tUInt32 DEF_v__h4035;
  tUInt8 DEF_NOT_set_addr_map_addr_base_BITS_1_TO_0_44_EQ_0_45___d146;
  tUInt8 DEF_NOT_set_addr_map_addr_lim_BITS_1_TO_0_49_EQ_0_50___d151;
  tUInt8 DEF_x__h3880;
  tUInt8 DEF_x__h3994;
  DEF_x__h3994 = (tUInt8)((tUInt8)3u & ARG_set_addr_map_addr_lim);
  DEF_x__h3880 = (tUInt8)((tUInt8)3u & ARG_set_addr_map_addr_base);
  DEF_NOT_set_addr_map_addr_lim_BITS_1_TO_0_49_EQ_0_50___d151 = !(DEF_x__h3994 == (tUInt8)0u);
  DEF_NOT_set_addr_map_addr_base_BITS_1_TO_0_44_EQ_0_45___d146 = !(DEF_x__h3880 == (tUInt8)0u);
  if (DEF_NOT_set_addr_map_addr_base_BITS_1_TO_0_44_EQ_0_45___d146)
    DEF_v__h3931 = dollar_stime(sim_hdl);
  DEF_v__h3925 = DEF_v__h3931 / 10u;
  if (DEF_NOT_set_addr_map_addr_base_BITS_1_TO_0_44_EQ_0_45___d146)
    dollar_display(sim_hdl,
		   this,
		   "s,32,64",
		   &__str_literal_34,
		   DEF_v__h3925,
		   ARG_set_addr_map_addr_base);
  if (DEF_NOT_set_addr_map_addr_lim_BITS_1_TO_0_49_EQ_0_50___d151)
    DEF_v__h4041 = dollar_stime(sim_hdl);
  DEF_v__h4035 = DEF_v__h4041 / 10u;
  if (DEF_NOT_set_addr_map_addr_lim_BITS_1_TO_0_49_EQ_0_50___d151)
    dollar_display(sim_hdl,
		   this,
		   "s,32,64",
		   &__str_literal_35,
		   DEF_v__h4035,
		   ARG_set_addr_map_addr_lim);
  INST_rg_addr_base.METH_write(ARG_set_addr_map_addr_base);
  INST_rg_addr_lim.METH_write(ARG_set_addr_map_addr_lim);
}

tUInt8 MOD_mkTimer::METH_RDY_set_addr_map()
{
  tUInt8 DEF_CAN_FIRE_set_addr_map;
  tUInt8 PORT_RDY_set_addr_map;
  DEF_CAN_FIRE_set_addr_map = (tUInt8)1u;
  PORT_RDY_set_addr_map = DEF_CAN_FIRE_set_addr_map;
  return PORT_RDY_set_addr_map;
}

void MOD_mkTimer::METH_slave_m_awvalid(tUInt8 ARG_slave_awvalid,
				       tUInt64 ARG_slave_awaddr,
				       tUInt8 ARG_slave_awprot,
				       tUInt8 ARG_slave_awuser)
{
  tUInt8 DEF_slave_awvalid_AND_slave_xactor_f_wr_addr_i_not_ETC___d155;
  if (PORT_RDY_slave_m_awvalid)
  {
    DEF_slave_xactor_f_wr_addr_i_notFull____d154 = INST_slave_xactor_f_wr_addr.METH_i_notFull();
    DEF_slave_awvalid_AND_slave_xactor_f_wr_addr_i_not_ETC___d155 = ARG_slave_awvalid && DEF_slave_xactor_f_wr_addr_i_notFull____d154;
    DEF_slave_awaddr_CONCAT_slave_awprot___d156.set_bits_in_word((tUInt8)(ARG_slave_awaddr >> 61u),
								 2u,
								 0u,
								 3u).set_whole_word((tUInt32)(ARG_slave_awaddr >> 29u),
										    1u).set_whole_word((((tUInt32)(536870911u & ARG_slave_awaddr)) << 3u) | (tUInt32)(ARG_slave_awprot),
												       0u);
    if (DEF_slave_awvalid_AND_slave_xactor_f_wr_addr_i_not_ETC___d155)
      INST_slave_xactor_f_wr_addr.METH_enq(DEF_slave_awaddr_CONCAT_slave_awprot___d156);
  }
}

tUInt8 MOD_mkTimer::METH_RDY_slave_m_awvalid()
{
  tUInt8 DEF_CAN_FIRE_slave_m_awvalid;
  DEF_CAN_FIRE_slave_m_awvalid = (tUInt8)1u;
  PORT_RDY_slave_m_awvalid = DEF_CAN_FIRE_slave_m_awvalid;
  return PORT_RDY_slave_m_awvalid;
}

tUInt8 MOD_mkTimer::METH_slave_m_awready()
{
  DEF_slave_xactor_f_wr_addr_i_notFull____d154 = INST_slave_xactor_f_wr_addr.METH_i_notFull();
  PORT_slave_awready = DEF_slave_xactor_f_wr_addr_i_notFull____d154;
  return PORT_slave_awready;
}

tUInt8 MOD_mkTimer::METH_RDY_slave_m_awready()
{
  tUInt8 PORT_RDY_slave_m_awready;
  tUInt8 DEF_CAN_FIRE_slave_m_awready;
  DEF_CAN_FIRE_slave_m_awready = (tUInt8)1u;
  PORT_RDY_slave_m_awready = DEF_CAN_FIRE_slave_m_awready;
  return PORT_RDY_slave_m_awready;
}

void MOD_mkTimer::METH_slave_m_wvalid(tUInt8 ARG_slave_wvalid,
				      tUInt64 ARG_slave_wdata,
				      tUInt8 ARG_slave_wstrb)
{
  tUInt8 DEF_slave_wvalid_AND_slave_xactor_f_wr_data_i_notF_ETC___d158;
  if (PORT_RDY_slave_m_wvalid)
  {
    DEF_slave_xactor_f_wr_data_i_notFull____d157 = INST_slave_xactor_f_wr_data.METH_i_notFull();
    DEF_slave_wvalid_AND_slave_xactor_f_wr_data_i_notF_ETC___d158 = ARG_slave_wvalid && DEF_slave_xactor_f_wr_data_i_notFull____d157;
    DEF_slave_wdata_CONCAT_slave_wstrb___d159.set_bits_in_word((tUInt8)(ARG_slave_wdata >> 56u),
							       2u,
							       0u,
							       8u).set_whole_word((tUInt32)(ARG_slave_wdata >> 24u),
										  1u).set_whole_word((((tUInt32)(16777215u & ARG_slave_wdata)) << 8u) | (tUInt32)(ARG_slave_wstrb),
												     0u);
    if (DEF_slave_wvalid_AND_slave_xactor_f_wr_data_i_notF_ETC___d158)
      INST_slave_xactor_f_wr_data.METH_enq(DEF_slave_wdata_CONCAT_slave_wstrb___d159);
  }
}

tUInt8 MOD_mkTimer::METH_RDY_slave_m_wvalid()
{
  tUInt8 DEF_CAN_FIRE_slave_m_wvalid;
  DEF_CAN_FIRE_slave_m_wvalid = (tUInt8)1u;
  PORT_RDY_slave_m_wvalid = DEF_CAN_FIRE_slave_m_wvalid;
  return PORT_RDY_slave_m_wvalid;
}

tUInt8 MOD_mkTimer::METH_slave_m_wready()
{
  DEF_slave_xactor_f_wr_data_i_notFull____d157 = INST_slave_xactor_f_wr_data.METH_i_notFull();
  PORT_slave_wready = DEF_slave_xactor_f_wr_data_i_notFull____d157;
  return PORT_slave_wready;
}

tUInt8 MOD_mkTimer::METH_RDY_slave_m_wready()
{
  tUInt8 PORT_RDY_slave_m_wready;
  tUInt8 DEF_CAN_FIRE_slave_m_wready;
  DEF_CAN_FIRE_slave_m_wready = (tUInt8)1u;
  PORT_RDY_slave_m_wready = DEF_CAN_FIRE_slave_m_wready;
  return PORT_RDY_slave_m_wready;
}

tUInt8 MOD_mkTimer::METH_slave_m_bvalid()
{
  DEF_slave_xactor_f_wr_resp_i_notEmpty____d160 = INST_slave_xactor_f_wr_resp.METH_i_notEmpty();
  PORT_slave_bvalid = DEF_slave_xactor_f_wr_resp_i_notEmpty____d160;
  return PORT_slave_bvalid;
}

tUInt8 MOD_mkTimer::METH_RDY_slave_m_bvalid()
{
  tUInt8 PORT_RDY_slave_m_bvalid;
  tUInt8 DEF_CAN_FIRE_slave_m_bvalid;
  DEF_CAN_FIRE_slave_m_bvalid = (tUInt8)1u;
  PORT_RDY_slave_m_bvalid = DEF_CAN_FIRE_slave_m_bvalid;
  return PORT_RDY_slave_m_bvalid;
}

tUInt8 MOD_mkTimer::METH_slave_m_bresp()
{
  PORT_slave_bresp = INST_slave_xactor_f_wr_resp.METH_first();
  return PORT_slave_bresp;
}

tUInt8 MOD_mkTimer::METH_RDY_slave_m_bresp()
{
  tUInt8 PORT_RDY_slave_m_bresp;
  tUInt8 DEF_CAN_FIRE_slave_m_bresp;
  DEF_CAN_FIRE_slave_m_bresp = (tUInt8)1u;
  PORT_RDY_slave_m_bresp = DEF_CAN_FIRE_slave_m_bresp;
  return PORT_RDY_slave_m_bresp;
}

void MOD_mkTimer::METH_slave_m_bready(tUInt8 ARG_slave_bready)
{
  tUInt8 DEF_slave_bready_AND_slave_xactor_f_wr_resp_i_notE_ETC___d161;
  if (PORT_RDY_slave_m_bready)
  {
    DEF_slave_xactor_f_wr_resp_i_notEmpty____d160 = INST_slave_xactor_f_wr_resp.METH_i_notEmpty();
    DEF_slave_bready_AND_slave_xactor_f_wr_resp_i_notE_ETC___d161 = ARG_slave_bready && DEF_slave_xactor_f_wr_resp_i_notEmpty____d160;
    if (DEF_slave_bready_AND_slave_xactor_f_wr_resp_i_notE_ETC___d161)
      INST_slave_xactor_f_wr_resp.METH_deq();
  }
}

tUInt8 MOD_mkTimer::METH_RDY_slave_m_bready()
{
  tUInt8 DEF_CAN_FIRE_slave_m_bready;
  DEF_CAN_FIRE_slave_m_bready = (tUInt8)1u;
  PORT_RDY_slave_m_bready = DEF_CAN_FIRE_slave_m_bready;
  return PORT_RDY_slave_m_bready;
}

void MOD_mkTimer::METH_slave_m_arvalid(tUInt8 ARG_slave_arvalid,
				       tUInt64 ARG_slave_araddr,
				       tUInt8 ARG_slave_arprot,
				       tUInt8 ARG_slave_aruser)
{
  tUInt8 DEF_slave_arvalid_AND_slave_xactor_f_rd_addr_i_not_ETC___d163;
  if (PORT_RDY_slave_m_arvalid)
  {
    DEF_slave_xactor_f_rd_addr_i_notFull____d162 = INST_slave_xactor_f_rd_addr.METH_i_notFull();
    DEF_slave_arvalid_AND_slave_xactor_f_rd_addr_i_not_ETC___d163 = ARG_slave_arvalid && DEF_slave_xactor_f_rd_addr_i_notFull____d162;
    DEF_slave_araddr_CONCAT_slave_arprot___d164.set_bits_in_word((tUInt8)(ARG_slave_araddr >> 61u),
								 2u,
								 0u,
								 3u).set_whole_word((tUInt32)(ARG_slave_araddr >> 29u),
										    1u).set_whole_word((((tUInt32)(536870911u & ARG_slave_araddr)) << 3u) | (tUInt32)(ARG_slave_arprot),
												       0u);
    if (DEF_slave_arvalid_AND_slave_xactor_f_rd_addr_i_not_ETC___d163)
      INST_slave_xactor_f_rd_addr.METH_enq(DEF_slave_araddr_CONCAT_slave_arprot___d164);
  }
}

tUInt8 MOD_mkTimer::METH_RDY_slave_m_arvalid()
{
  tUInt8 DEF_CAN_FIRE_slave_m_arvalid;
  DEF_CAN_FIRE_slave_m_arvalid = (tUInt8)1u;
  PORT_RDY_slave_m_arvalid = DEF_CAN_FIRE_slave_m_arvalid;
  return PORT_RDY_slave_m_arvalid;
}

tUInt8 MOD_mkTimer::METH_slave_m_arready()
{
  DEF_slave_xactor_f_rd_addr_i_notFull____d162 = INST_slave_xactor_f_rd_addr.METH_i_notFull();
  PORT_slave_arready = DEF_slave_xactor_f_rd_addr_i_notFull____d162;
  return PORT_slave_arready;
}

tUInt8 MOD_mkTimer::METH_RDY_slave_m_arready()
{
  tUInt8 PORT_RDY_slave_m_arready;
  tUInt8 DEF_CAN_FIRE_slave_m_arready;
  DEF_CAN_FIRE_slave_m_arready = (tUInt8)1u;
  PORT_RDY_slave_m_arready = DEF_CAN_FIRE_slave_m_arready;
  return PORT_RDY_slave_m_arready;
}

tUInt8 MOD_mkTimer::METH_slave_m_rvalid()
{
  DEF_slave_xactor_f_rd_data_i_notEmpty____d165 = INST_slave_xactor_f_rd_data.METH_i_notEmpty();
  PORT_slave_rvalid = DEF_slave_xactor_f_rd_data_i_notEmpty____d165;
  return PORT_slave_rvalid;
}

tUInt8 MOD_mkTimer::METH_RDY_slave_m_rvalid()
{
  tUInt8 PORT_RDY_slave_m_rvalid;
  tUInt8 DEF_CAN_FIRE_slave_m_rvalid;
  DEF_CAN_FIRE_slave_m_rvalid = (tUInt8)1u;
  PORT_RDY_slave_m_rvalid = DEF_CAN_FIRE_slave_m_rvalid;
  return PORT_RDY_slave_m_rvalid;
}

tUInt8 MOD_mkTimer::METH_slave_m_rresp()
{
  DEF_slave_xactor_f_rd_data_first____d166 = INST_slave_xactor_f_rd_data.METH_first();
  PORT_slave_rresp = DEF_slave_xactor_f_rd_data_first____d166.get_bits_in_word8(2u, 0u, 2u);
  return PORT_slave_rresp;
}

tUInt8 MOD_mkTimer::METH_RDY_slave_m_rresp()
{
  tUInt8 PORT_RDY_slave_m_rresp;
  tUInt8 DEF_CAN_FIRE_slave_m_rresp;
  DEF_CAN_FIRE_slave_m_rresp = (tUInt8)1u;
  PORT_RDY_slave_m_rresp = DEF_CAN_FIRE_slave_m_rresp;
  return PORT_RDY_slave_m_rresp;
}

tUInt64 MOD_mkTimer::METH_slave_m_rdata()
{
  DEF_slave_xactor_f_rd_data_first____d166 = INST_slave_xactor_f_rd_data.METH_first();
  PORT_slave_rdata = primExtract64(64u,
				   66u,
				   DEF_slave_xactor_f_rd_data_first____d166,
				   32u,
				   63u,
				   32u,
				   0u);
  return PORT_slave_rdata;
}

tUInt8 MOD_mkTimer::METH_RDY_slave_m_rdata()
{
  tUInt8 PORT_RDY_slave_m_rdata;
  tUInt8 DEF_CAN_FIRE_slave_m_rdata;
  DEF_CAN_FIRE_slave_m_rdata = (tUInt8)1u;
  PORT_RDY_slave_m_rdata = DEF_CAN_FIRE_slave_m_rdata;
  return PORT_RDY_slave_m_rdata;
}

void MOD_mkTimer::METH_slave_m_rready(tUInt8 ARG_slave_rready)
{
  tUInt8 DEF_slave_rready_AND_slave_xactor_f_rd_data_i_notE_ETC___d167;
  if (PORT_RDY_slave_m_rready)
  {
    DEF_slave_xactor_f_rd_data_i_notEmpty____d165 = INST_slave_xactor_f_rd_data.METH_i_notEmpty();
    DEF_slave_rready_AND_slave_xactor_f_rd_data_i_notE_ETC___d167 = ARG_slave_rready && DEF_slave_xactor_f_rd_data_i_notEmpty____d165;
    if (DEF_slave_rready_AND_slave_xactor_f_rd_data_i_notE_ETC___d167)
      INST_slave_xactor_f_rd_data.METH_deq();
  }
}

tUInt8 MOD_mkTimer::METH_RDY_slave_m_rready()
{
  tUInt8 DEF_CAN_FIRE_slave_m_rready;
  DEF_CAN_FIRE_slave_m_rready = (tUInt8)1u;
  PORT_RDY_slave_m_rready = DEF_CAN_FIRE_slave_m_rready;
  return PORT_RDY_slave_m_rready;
}

tUInt8 MOD_mkTimer::METH_get_timer_interrupt_req_get()
{
  tUInt8 DEF_get_timer_interrupt_req_get__avValue1;
  tUInt8 PORT_get_timer_interrupt_req_get;
  DEF_get_timer_interrupt_req_get__avValue1 = INST_f_timer_interrupt_req.METH_first();
  PORT_get_timer_interrupt_req_get = DEF_get_timer_interrupt_req_get__avValue1;
  INST_f_timer_interrupt_req.METH_deq();
  return PORT_get_timer_interrupt_req_get;
}

tUInt8 MOD_mkTimer::METH_RDY_get_timer_interrupt_req_get()
{
  tUInt8 DEF_CAN_FIRE_get_timer_interrupt_req_get;
  tUInt8 PORT_RDY_get_timer_interrupt_req_get;
  DEF_CAN_FIRE_get_timer_interrupt_req_get = INST_f_timer_interrupt_req.METH_i_notEmpty();
  PORT_RDY_get_timer_interrupt_req_get = DEF_CAN_FIRE_get_timer_interrupt_req_get;
  return PORT_RDY_get_timer_interrupt_req_get;
}

void MOD_mkTimer::METH_get_sw_interrupt_req_get()
{
  INST_f_sw_interrupt_req.METH_deq();
}

tUInt8 MOD_mkTimer::METH_RDY_get_sw_interrupt_req_get()
{
  tUInt8 DEF_CAN_FIRE_get_sw_interrupt_req_get;
  tUInt8 PORT_RDY_get_sw_interrupt_req_get;
  DEF_CAN_FIRE_get_sw_interrupt_req_get = INST_f_sw_interrupt_req.METH_i_notEmpty();
  PORT_RDY_get_sw_interrupt_req_get = DEF_CAN_FIRE_get_sw_interrupt_req_get;
  return PORT_RDY_get_sw_interrupt_req_get;
}


/* Reset routines */

void MOD_mkTimer::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_slave_xactor_f_wr_resp.reset_RST(ARG_rst_in);
  INST_slave_xactor_f_wr_data.reset_RST(ARG_rst_in);
  INST_slave_xactor_f_wr_addr.reset_RST(ARG_rst_in);
  INST_slave_xactor_f_rd_data.reset_RST(ARG_rst_in);
  INST_slave_xactor_f_rd_addr.reset_RST(ARG_rst_in);
  INST_rg_state.reset_RST(ARG_rst_in);
  INST_f_timer_interrupt_req.reset_RST(ARG_rst_in);
  INST_f_sw_interrupt_req.reset_RST(ARG_rst_in);
  INST_f_reset_rsps.reset_RST(ARG_rst_in);
  INST_f_reset_reqs.reset_RST(ARG_rst_in);
  INST_crg_timecmp.reset_RST(ARG_rst_in);
  INST_crg_time.reset_RST(ARG_rst_in);
  INST_crg_interrupted.reset_RST(ARG_rst_in);
  INST_cfg_verbosity.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTimer::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTimer::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_cfg_verbosity.dump_state(indent + 2u);
  INST_crg_interrupted.dump_state(indent + 2u);
  INST_crg_time.dump_state(indent + 2u);
  INST_crg_timecmp.dump_state(indent + 2u);
  INST_f_reset_reqs.dump_state(indent + 2u);
  INST_f_reset_rsps.dump_state(indent + 2u);
  INST_f_sw_interrupt_req.dump_state(indent + 2u);
  INST_f_timer_interrupt_req.dump_state(indent + 2u);
  INST_rg_addr_base.dump_state(indent + 2u);
  INST_rg_addr_lim.dump_state(indent + 2u);
  INST_rg_state.dump_state(indent + 2u);
  INST_slave_xactor_f_rd_addr.dump_state(indent + 2u);
  INST_slave_xactor_f_rd_data.dump_state(indent + 2u);
  INST_slave_xactor_f_wr_addr.dump_state(indent + 2u);
  INST_slave_xactor_f_wr_data.dump_state(indent + 2u);
  INST_slave_xactor_f_wr_resp.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTimer::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 63u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_slave_xactor_f_rd_addr_first__2_BITS_66_TO__ETC___d72", 66u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "NOT_cfg_verbosity_read_ULE_1_4___d25", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "NOT_slave_xactor_f_wr_addr_first__0_BITS_66_TO_ETC___d91", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_read__h123", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "byte_addr__h2775", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "crg_time_port0__read____d10", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "crg_timecmp_port0__read____d19", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "slave_araddr_CONCAT_slave_arprot___d164", 67u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "slave_awaddr_CONCAT_slave_awprot___d156", 67u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "slave_wdata_CONCAT_slave_wstrb___d159", 72u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "slave_xactor_f_rd_addr_first____d32", 67u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "slave_xactor_f_rd_addr_i_notFull____d162", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "slave_xactor_f_rd_data_first____d166", 66u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "slave_xactor_f_rd_data_i_notEmpty____d165", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "slave_xactor_f_wr_addr_first__0_BITS_66_TO_3_1_ETC___d90", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "slave_xactor_f_wr_addr_first__0_BITS_66_TO_3___d81", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "slave_xactor_f_wr_addr_first____d80", 67u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "slave_xactor_f_wr_addr_i_notFull____d154", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "slave_xactor_f_wr_data_first__4_BIT_8___d85", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "slave_xactor_f_wr_data_first____d84", 72u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "slave_xactor_f_wr_data_i_notFull____d157", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "slave_xactor_f_wr_resp_i_notEmpty____d160", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h1918", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h2120", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h2308", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h2575", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h3417", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h3620", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h3931", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h4041", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h3592", 4u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_slave_m_arvalid", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_slave_m_awvalid", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_slave_m_bready", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_slave_m_rready", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_slave_m_wvalid", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "slave_arready", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "slave_awready", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "slave_bresp", 2u);
  vcd_write_def(sim_hdl, num++, "slave_buser", 0u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "slave_bvalid", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "slave_rdata", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "slave_rresp", 2u);
  vcd_write_def(sim_hdl, num++, "slave_ruser", 0u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "slave_rvalid", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "slave_wready", 1u);
  num = INST_cfg_verbosity.dump_VCD_defs(num);
  num = INST_crg_interrupted.dump_VCD_defs(num);
  num = INST_crg_time.dump_VCD_defs(num);
  num = INST_crg_timecmp.dump_VCD_defs(num);
  num = INST_f_reset_reqs.dump_VCD_defs(num);
  num = INST_f_reset_rsps.dump_VCD_defs(num);
  num = INST_f_sw_interrupt_req.dump_VCD_defs(num);
  num = INST_f_timer_interrupt_req.dump_VCD_defs(num);
  num = INST_rg_addr_base.dump_VCD_defs(num);
  num = INST_rg_addr_lim.dump_VCD_defs(num);
  num = INST_rg_state.dump_VCD_defs(num);
  num = INST_slave_xactor_f_rd_addr.dump_VCD_defs(num);
  num = INST_slave_xactor_f_rd_data.dump_VCD_defs(num);
  num = INST_slave_xactor_f_wr_addr.dump_VCD_defs(num);
  num = INST_slave_xactor_f_wr_data.dump_VCD_defs(num);
  num = INST_slave_xactor_f_wr_resp.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTimer::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTimer &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTimer::vcd_defs(tVCDDumpType dt, MOD_mkTimer &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 66u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 67u);
    vcd_write_x(sim_hdl, num++, 67u);
    vcd_write_x(sim_hdl, num++, 72u);
    vcd_write_x(sim_hdl, num++, 67u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 66u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 67u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 72u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 4u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 2u);
    vcd_write_x(sim_hdl, num++, 0u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 2u);
    vcd_write_x(sim_hdl, num++, 0u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_IF_slave_xactor_f_rd_addr_first__2_BITS_66_TO__ETC___d72) != DEF_IF_slave_xactor_f_rd_addr_first__2_BITS_66_TO__ETC___d72)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_slave_xactor_f_rd_addr_first__2_BITS_66_TO__ETC___d72, 66u);
	backing.DEF_IF_slave_xactor_f_rd_addr_first__2_BITS_66_TO__ETC___d72 = DEF_IF_slave_xactor_f_rd_addr_first__2_BITS_66_TO__ETC___d72;
      }
      ++num;
      if ((backing.DEF_NOT_cfg_verbosity_read_ULE_1_4___d25) != DEF_NOT_cfg_verbosity_read_ULE_1_4___d25)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_cfg_verbosity_read_ULE_1_4___d25, 1u);
	backing.DEF_NOT_cfg_verbosity_read_ULE_1_4___d25 = DEF_NOT_cfg_verbosity_read_ULE_1_4___d25;
      }
      ++num;
      if ((backing.DEF_NOT_slave_xactor_f_wr_addr_first__0_BITS_66_TO_ETC___d91) != DEF_NOT_slave_xactor_f_wr_addr_first__0_BITS_66_TO_ETC___d91)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_slave_xactor_f_wr_addr_first__0_BITS_66_TO_ETC___d91, 1u);
	backing.DEF_NOT_slave_xactor_f_wr_addr_first__0_BITS_66_TO_ETC___d91 = DEF_NOT_slave_xactor_f_wr_addr_first__0_BITS_66_TO_ETC___d91;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF__read__h123) != DEF__read__h123)
      {
	vcd_write_val(sim_hdl, num, DEF__read__h123, 64u);
	backing.DEF__read__h123 = DEF__read__h123;
      }
      ++num;
      if ((backing.DEF_byte_addr__h2775) != DEF_byte_addr__h2775)
      {
	vcd_write_val(sim_hdl, num, DEF_byte_addr__h2775, 64u);
	backing.DEF_byte_addr__h2775 = DEF_byte_addr__h2775;
      }
      ++num;
      if ((backing.DEF_crg_time_port0__read____d10) != DEF_crg_time_port0__read____d10)
      {
	vcd_write_val(sim_hdl, num, DEF_crg_time_port0__read____d10, 64u);
	backing.DEF_crg_time_port0__read____d10 = DEF_crg_time_port0__read____d10;
      }
      ++num;
      if ((backing.DEF_crg_timecmp_port0__read____d19) != DEF_crg_timecmp_port0__read____d19)
      {
	vcd_write_val(sim_hdl, num, DEF_crg_timecmp_port0__read____d19, 64u);
	backing.DEF_crg_timecmp_port0__read____d19 = DEF_crg_timecmp_port0__read____d19;
      }
      ++num;
      if ((backing.DEF_slave_araddr_CONCAT_slave_arprot___d164) != DEF_slave_araddr_CONCAT_slave_arprot___d164)
      {
	vcd_write_val(sim_hdl, num, DEF_slave_araddr_CONCAT_slave_arprot___d164, 67u);
	backing.DEF_slave_araddr_CONCAT_slave_arprot___d164 = DEF_slave_araddr_CONCAT_slave_arprot___d164;
      }
      ++num;
      if ((backing.DEF_slave_awaddr_CONCAT_slave_awprot___d156) != DEF_slave_awaddr_CONCAT_slave_awprot___d156)
      {
	vcd_write_val(sim_hdl, num, DEF_slave_awaddr_CONCAT_slave_awprot___d156, 67u);
	backing.DEF_slave_awaddr_CONCAT_slave_awprot___d156 = DEF_slave_awaddr_CONCAT_slave_awprot___d156;
      }
      ++num;
      if ((backing.DEF_slave_wdata_CONCAT_slave_wstrb___d159) != DEF_slave_wdata_CONCAT_slave_wstrb___d159)
      {
	vcd_write_val(sim_hdl, num, DEF_slave_wdata_CONCAT_slave_wstrb___d159, 72u);
	backing.DEF_slave_wdata_CONCAT_slave_wstrb___d159 = DEF_slave_wdata_CONCAT_slave_wstrb___d159;
      }
      ++num;
      if ((backing.DEF_slave_xactor_f_rd_addr_first____d32) != DEF_slave_xactor_f_rd_addr_first____d32)
      {
	vcd_write_val(sim_hdl, num, DEF_slave_xactor_f_rd_addr_first____d32, 67u);
	backing.DEF_slave_xactor_f_rd_addr_first____d32 = DEF_slave_xactor_f_rd_addr_first____d32;
      }
      ++num;
      if ((backing.DEF_slave_xactor_f_rd_addr_i_notFull____d162) != DEF_slave_xactor_f_rd_addr_i_notFull____d162)
      {
	vcd_write_val(sim_hdl, num, DEF_slave_xactor_f_rd_addr_i_notFull____d162, 1u);
	backing.DEF_slave_xactor_f_rd_addr_i_notFull____d162 = DEF_slave_xactor_f_rd_addr_i_notFull____d162;
      }
      ++num;
      if ((backing.DEF_slave_xactor_f_rd_data_first____d166) != DEF_slave_xactor_f_rd_data_first____d166)
      {
	vcd_write_val(sim_hdl, num, DEF_slave_xactor_f_rd_data_first____d166, 66u);
	backing.DEF_slave_xactor_f_rd_data_first____d166 = DEF_slave_xactor_f_rd_data_first____d166;
      }
      ++num;
      if ((backing.DEF_slave_xactor_f_rd_data_i_notEmpty____d165) != DEF_slave_xactor_f_rd_data_i_notEmpty____d165)
      {
	vcd_write_val(sim_hdl, num, DEF_slave_xactor_f_rd_data_i_notEmpty____d165, 1u);
	backing.DEF_slave_xactor_f_rd_data_i_notEmpty____d165 = DEF_slave_xactor_f_rd_data_i_notEmpty____d165;
      }
      ++num;
      if ((backing.DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3_1_ETC___d90) != DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3_1_ETC___d90)
      {
	vcd_write_val(sim_hdl, num, DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3_1_ETC___d90, 1u);
	backing.DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3_1_ETC___d90 = DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3_1_ETC___d90;
      }
      ++num;
      if ((backing.DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3___d81) != DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3___d81)
      {
	vcd_write_val(sim_hdl, num, DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3___d81, 64u);
	backing.DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3___d81 = DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3___d81;
      }
      ++num;
      if ((backing.DEF_slave_xactor_f_wr_addr_first____d80) != DEF_slave_xactor_f_wr_addr_first____d80)
      {
	vcd_write_val(sim_hdl, num, DEF_slave_xactor_f_wr_addr_first____d80, 67u);
	backing.DEF_slave_xactor_f_wr_addr_first____d80 = DEF_slave_xactor_f_wr_addr_first____d80;
      }
      ++num;
      if ((backing.DEF_slave_xactor_f_wr_addr_i_notFull____d154) != DEF_slave_xactor_f_wr_addr_i_notFull____d154)
      {
	vcd_write_val(sim_hdl, num, DEF_slave_xactor_f_wr_addr_i_notFull____d154, 1u);
	backing.DEF_slave_xactor_f_wr_addr_i_notFull____d154 = DEF_slave_xactor_f_wr_addr_i_notFull____d154;
      }
      ++num;
      if ((backing.DEF_slave_xactor_f_wr_data_first__4_BIT_8___d85) != DEF_slave_xactor_f_wr_data_first__4_BIT_8___d85)
      {
	vcd_write_val(sim_hdl, num, DEF_slave_xactor_f_wr_data_first__4_BIT_8___d85, 1u);
	backing.DEF_slave_xactor_f_wr_data_first__4_BIT_8___d85 = DEF_slave_xactor_f_wr_data_first__4_BIT_8___d85;
      }
      ++num;
      if ((backing.DEF_slave_xactor_f_wr_data_first____d84) != DEF_slave_xactor_f_wr_data_first____d84)
      {
	vcd_write_val(sim_hdl, num, DEF_slave_xactor_f_wr_data_first____d84, 72u);
	backing.DEF_slave_xactor_f_wr_data_first____d84 = DEF_slave_xactor_f_wr_data_first____d84;
      }
      ++num;
      if ((backing.DEF_slave_xactor_f_wr_data_i_notFull____d157) != DEF_slave_xactor_f_wr_data_i_notFull____d157)
      {
	vcd_write_val(sim_hdl, num, DEF_slave_xactor_f_wr_data_i_notFull____d157, 1u);
	backing.DEF_slave_xactor_f_wr_data_i_notFull____d157 = DEF_slave_xactor_f_wr_data_i_notFull____d157;
      }
      ++num;
      if ((backing.DEF_slave_xactor_f_wr_resp_i_notEmpty____d160) != DEF_slave_xactor_f_wr_resp_i_notEmpty____d160)
      {
	vcd_write_val(sim_hdl, num, DEF_slave_xactor_f_wr_resp_i_notEmpty____d160, 1u);
	backing.DEF_slave_xactor_f_wr_resp_i_notEmpty____d160 = DEF_slave_xactor_f_wr_resp_i_notEmpty____d160;
      }
      ++num;
      if ((backing.DEF_v__h1918) != DEF_v__h1918)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h1918, 32u);
	backing.DEF_v__h1918 = DEF_v__h1918;
      }
      ++num;
      if ((backing.DEF_v__h2120) != DEF_v__h2120)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h2120, 32u);
	backing.DEF_v__h2120 = DEF_v__h2120;
      }
      ++num;
      if ((backing.DEF_v__h2308) != DEF_v__h2308)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h2308, 32u);
	backing.DEF_v__h2308 = DEF_v__h2308;
      }
      ++num;
      if ((backing.DEF_v__h2575) != DEF_v__h2575)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h2575, 32u);
	backing.DEF_v__h2575 = DEF_v__h2575;
      }
      ++num;
      if ((backing.DEF_v__h3417) != DEF_v__h3417)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h3417, 32u);
	backing.DEF_v__h3417 = DEF_v__h3417;
      }
      ++num;
      if ((backing.DEF_v__h3620) != DEF_v__h3620)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h3620, 32u);
	backing.DEF_v__h3620 = DEF_v__h3620;
      }
      ++num;
      if ((backing.DEF_v__h3931) != DEF_v__h3931)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h3931, 32u);
	backing.DEF_v__h3931 = DEF_v__h3931;
      }
      ++num;
      if ((backing.DEF_v__h4041) != DEF_v__h4041)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h4041, 32u);
	backing.DEF_v__h4041 = DEF_v__h4041;
      }
      ++num;
      if ((backing.DEF_x__h3592) != DEF_x__h3592)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h3592, 4u);
	backing.DEF_x__h3592 = DEF_x__h3592;
      }
      ++num;
      if ((backing.PORT_RDY_slave_m_arvalid) != PORT_RDY_slave_m_arvalid)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_slave_m_arvalid, 1u);
	backing.PORT_RDY_slave_m_arvalid = PORT_RDY_slave_m_arvalid;
      }
      ++num;
      if ((backing.PORT_RDY_slave_m_awvalid) != PORT_RDY_slave_m_awvalid)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_slave_m_awvalid, 1u);
	backing.PORT_RDY_slave_m_awvalid = PORT_RDY_slave_m_awvalid;
      }
      ++num;
      if ((backing.PORT_RDY_slave_m_bready) != PORT_RDY_slave_m_bready)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_slave_m_bready, 1u);
	backing.PORT_RDY_slave_m_bready = PORT_RDY_slave_m_bready;
      }
      ++num;
      if ((backing.PORT_RDY_slave_m_rready) != PORT_RDY_slave_m_rready)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_slave_m_rready, 1u);
	backing.PORT_RDY_slave_m_rready = PORT_RDY_slave_m_rready;
      }
      ++num;
      if ((backing.PORT_RDY_slave_m_wvalid) != PORT_RDY_slave_m_wvalid)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_slave_m_wvalid, 1u);
	backing.PORT_RDY_slave_m_wvalid = PORT_RDY_slave_m_wvalid;
      }
      ++num;
      if ((backing.PORT_slave_arready) != PORT_slave_arready)
      {
	vcd_write_val(sim_hdl, num, PORT_slave_arready, 1u);
	backing.PORT_slave_arready = PORT_slave_arready;
      }
      ++num;
      if ((backing.PORT_slave_awready) != PORT_slave_awready)
      {
	vcd_write_val(sim_hdl, num, PORT_slave_awready, 1u);
	backing.PORT_slave_awready = PORT_slave_awready;
      }
      ++num;
      if ((backing.PORT_slave_bresp) != PORT_slave_bresp)
      {
	vcd_write_val(sim_hdl, num, PORT_slave_bresp, 2u);
	backing.PORT_slave_bresp = PORT_slave_bresp;
      }
      ++num;
      if ((backing.PORT_slave_buser) != PORT_slave_buser)
      {
	vcd_write_val(sim_hdl, num, PORT_slave_buser, 0u);
	backing.PORT_slave_buser = PORT_slave_buser;
      }
      ++num;
      if ((backing.PORT_slave_bvalid) != PORT_slave_bvalid)
      {
	vcd_write_val(sim_hdl, num, PORT_slave_bvalid, 1u);
	backing.PORT_slave_bvalid = PORT_slave_bvalid;
      }
      ++num;
      if ((backing.PORT_slave_rdata) != PORT_slave_rdata)
      {
	vcd_write_val(sim_hdl, num, PORT_slave_rdata, 64u);
	backing.PORT_slave_rdata = PORT_slave_rdata;
      }
      ++num;
      if ((backing.PORT_slave_rresp) != PORT_slave_rresp)
      {
	vcd_write_val(sim_hdl, num, PORT_slave_rresp, 2u);
	backing.PORT_slave_rresp = PORT_slave_rresp;
      }
      ++num;
      if ((backing.PORT_slave_ruser) != PORT_slave_ruser)
      {
	vcd_write_val(sim_hdl, num, PORT_slave_ruser, 0u);
	backing.PORT_slave_ruser = PORT_slave_ruser;
      }
      ++num;
      if ((backing.PORT_slave_rvalid) != PORT_slave_rvalid)
      {
	vcd_write_val(sim_hdl, num, PORT_slave_rvalid, 1u);
	backing.PORT_slave_rvalid = PORT_slave_rvalid;
      }
      ++num;
      if ((backing.PORT_slave_wready) != PORT_slave_wready)
      {
	vcd_write_val(sim_hdl, num, PORT_slave_wready, 1u);
	backing.PORT_slave_wready = PORT_slave_wready;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_IF_slave_xactor_f_rd_addr_first__2_BITS_66_TO__ETC___d72, 66u);
      backing.DEF_IF_slave_xactor_f_rd_addr_first__2_BITS_66_TO__ETC___d72 = DEF_IF_slave_xactor_f_rd_addr_first__2_BITS_66_TO__ETC___d72;
      vcd_write_val(sim_hdl, num++, DEF_NOT_cfg_verbosity_read_ULE_1_4___d25, 1u);
      backing.DEF_NOT_cfg_verbosity_read_ULE_1_4___d25 = DEF_NOT_cfg_verbosity_read_ULE_1_4___d25;
      vcd_write_val(sim_hdl, num++, DEF_NOT_slave_xactor_f_wr_addr_first__0_BITS_66_TO_ETC___d91, 1u);
      backing.DEF_NOT_slave_xactor_f_wr_addr_first__0_BITS_66_TO_ETC___d91 = DEF_NOT_slave_xactor_f_wr_addr_first__0_BITS_66_TO_ETC___d91;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF__read__h123, 64u);
      backing.DEF__read__h123 = DEF__read__h123;
      vcd_write_val(sim_hdl, num++, DEF_byte_addr__h2775, 64u);
      backing.DEF_byte_addr__h2775 = DEF_byte_addr__h2775;
      vcd_write_val(sim_hdl, num++, DEF_crg_time_port0__read____d10, 64u);
      backing.DEF_crg_time_port0__read____d10 = DEF_crg_time_port0__read____d10;
      vcd_write_val(sim_hdl, num++, DEF_crg_timecmp_port0__read____d19, 64u);
      backing.DEF_crg_timecmp_port0__read____d19 = DEF_crg_timecmp_port0__read____d19;
      vcd_write_val(sim_hdl, num++, DEF_slave_araddr_CONCAT_slave_arprot___d164, 67u);
      backing.DEF_slave_araddr_CONCAT_slave_arprot___d164 = DEF_slave_araddr_CONCAT_slave_arprot___d164;
      vcd_write_val(sim_hdl, num++, DEF_slave_awaddr_CONCAT_slave_awprot___d156, 67u);
      backing.DEF_slave_awaddr_CONCAT_slave_awprot___d156 = DEF_slave_awaddr_CONCAT_slave_awprot___d156;
      vcd_write_val(sim_hdl, num++, DEF_slave_wdata_CONCAT_slave_wstrb___d159, 72u);
      backing.DEF_slave_wdata_CONCAT_slave_wstrb___d159 = DEF_slave_wdata_CONCAT_slave_wstrb___d159;
      vcd_write_val(sim_hdl, num++, DEF_slave_xactor_f_rd_addr_first____d32, 67u);
      backing.DEF_slave_xactor_f_rd_addr_first____d32 = DEF_slave_xactor_f_rd_addr_first____d32;
      vcd_write_val(sim_hdl, num++, DEF_slave_xactor_f_rd_addr_i_notFull____d162, 1u);
      backing.DEF_slave_xactor_f_rd_addr_i_notFull____d162 = DEF_slave_xactor_f_rd_addr_i_notFull____d162;
      vcd_write_val(sim_hdl, num++, DEF_slave_xactor_f_rd_data_first____d166, 66u);
      backing.DEF_slave_xactor_f_rd_data_first____d166 = DEF_slave_xactor_f_rd_data_first____d166;
      vcd_write_val(sim_hdl, num++, DEF_slave_xactor_f_rd_data_i_notEmpty____d165, 1u);
      backing.DEF_slave_xactor_f_rd_data_i_notEmpty____d165 = DEF_slave_xactor_f_rd_data_i_notEmpty____d165;
      vcd_write_val(sim_hdl, num++, DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3_1_ETC___d90, 1u);
      backing.DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3_1_ETC___d90 = DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3_1_ETC___d90;
      vcd_write_val(sim_hdl, num++, DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3___d81, 64u);
      backing.DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3___d81 = DEF_slave_xactor_f_wr_addr_first__0_BITS_66_TO_3___d81;
      vcd_write_val(sim_hdl, num++, DEF_slave_xactor_f_wr_addr_first____d80, 67u);
      backing.DEF_slave_xactor_f_wr_addr_first____d80 = DEF_slave_xactor_f_wr_addr_first____d80;
      vcd_write_val(sim_hdl, num++, DEF_slave_xactor_f_wr_addr_i_notFull____d154, 1u);
      backing.DEF_slave_xactor_f_wr_addr_i_notFull____d154 = DEF_slave_xactor_f_wr_addr_i_notFull____d154;
      vcd_write_val(sim_hdl, num++, DEF_slave_xactor_f_wr_data_first__4_BIT_8___d85, 1u);
      backing.DEF_slave_xactor_f_wr_data_first__4_BIT_8___d85 = DEF_slave_xactor_f_wr_data_first__4_BIT_8___d85;
      vcd_write_val(sim_hdl, num++, DEF_slave_xactor_f_wr_data_first____d84, 72u);
      backing.DEF_slave_xactor_f_wr_data_first____d84 = DEF_slave_xactor_f_wr_data_first____d84;
      vcd_write_val(sim_hdl, num++, DEF_slave_xactor_f_wr_data_i_notFull____d157, 1u);
      backing.DEF_slave_xactor_f_wr_data_i_notFull____d157 = DEF_slave_xactor_f_wr_data_i_notFull____d157;
      vcd_write_val(sim_hdl, num++, DEF_slave_xactor_f_wr_resp_i_notEmpty____d160, 1u);
      backing.DEF_slave_xactor_f_wr_resp_i_notEmpty____d160 = DEF_slave_xactor_f_wr_resp_i_notEmpty____d160;
      vcd_write_val(sim_hdl, num++, DEF_v__h1918, 32u);
      backing.DEF_v__h1918 = DEF_v__h1918;
      vcd_write_val(sim_hdl, num++, DEF_v__h2120, 32u);
      backing.DEF_v__h2120 = DEF_v__h2120;
      vcd_write_val(sim_hdl, num++, DEF_v__h2308, 32u);
      backing.DEF_v__h2308 = DEF_v__h2308;
      vcd_write_val(sim_hdl, num++, DEF_v__h2575, 32u);
      backing.DEF_v__h2575 = DEF_v__h2575;
      vcd_write_val(sim_hdl, num++, DEF_v__h3417, 32u);
      backing.DEF_v__h3417 = DEF_v__h3417;
      vcd_write_val(sim_hdl, num++, DEF_v__h3620, 32u);
      backing.DEF_v__h3620 = DEF_v__h3620;
      vcd_write_val(sim_hdl, num++, DEF_v__h3931, 32u);
      backing.DEF_v__h3931 = DEF_v__h3931;
      vcd_write_val(sim_hdl, num++, DEF_v__h4041, 32u);
      backing.DEF_v__h4041 = DEF_v__h4041;
      vcd_write_val(sim_hdl, num++, DEF_x__h3592, 4u);
      backing.DEF_x__h3592 = DEF_x__h3592;
      vcd_write_val(sim_hdl, num++, PORT_RDY_slave_m_arvalid, 1u);
      backing.PORT_RDY_slave_m_arvalid = PORT_RDY_slave_m_arvalid;
      vcd_write_val(sim_hdl, num++, PORT_RDY_slave_m_awvalid, 1u);
      backing.PORT_RDY_slave_m_awvalid = PORT_RDY_slave_m_awvalid;
      vcd_write_val(sim_hdl, num++, PORT_RDY_slave_m_bready, 1u);
      backing.PORT_RDY_slave_m_bready = PORT_RDY_slave_m_bready;
      vcd_write_val(sim_hdl, num++, PORT_RDY_slave_m_rready, 1u);
      backing.PORT_RDY_slave_m_rready = PORT_RDY_slave_m_rready;
      vcd_write_val(sim_hdl, num++, PORT_RDY_slave_m_wvalid, 1u);
      backing.PORT_RDY_slave_m_wvalid = PORT_RDY_slave_m_wvalid;
      vcd_write_val(sim_hdl, num++, PORT_slave_arready, 1u);
      backing.PORT_slave_arready = PORT_slave_arready;
      vcd_write_val(sim_hdl, num++, PORT_slave_awready, 1u);
      backing.PORT_slave_awready = PORT_slave_awready;
      vcd_write_val(sim_hdl, num++, PORT_slave_bresp, 2u);
      backing.PORT_slave_bresp = PORT_slave_bresp;
      vcd_write_val(sim_hdl, num++, PORT_slave_buser, 0u);
      backing.PORT_slave_buser = PORT_slave_buser;
      vcd_write_val(sim_hdl, num++, PORT_slave_bvalid, 1u);
      backing.PORT_slave_bvalid = PORT_slave_bvalid;
      vcd_write_val(sim_hdl, num++, PORT_slave_rdata, 64u);
      backing.PORT_slave_rdata = PORT_slave_rdata;
      vcd_write_val(sim_hdl, num++, PORT_slave_rresp, 2u);
      backing.PORT_slave_rresp = PORT_slave_rresp;
      vcd_write_val(sim_hdl, num++, PORT_slave_ruser, 0u);
      backing.PORT_slave_ruser = PORT_slave_ruser;
      vcd_write_val(sim_hdl, num++, PORT_slave_rvalid, 1u);
      backing.PORT_slave_rvalid = PORT_slave_rvalid;
      vcd_write_val(sim_hdl, num++, PORT_slave_wready, 1u);
      backing.PORT_slave_wready = PORT_slave_wready;
    }
}

void MOD_mkTimer::vcd_prims(tVCDDumpType dt, MOD_mkTimer &backing)
{
  INST_cfg_verbosity.dump_VCD(dt, backing.INST_cfg_verbosity);
  INST_crg_interrupted.dump_VCD(dt, backing.INST_crg_interrupted);
  INST_crg_time.dump_VCD(dt, backing.INST_crg_time);
  INST_crg_timecmp.dump_VCD(dt, backing.INST_crg_timecmp);
  INST_f_reset_reqs.dump_VCD(dt, backing.INST_f_reset_reqs);
  INST_f_reset_rsps.dump_VCD(dt, backing.INST_f_reset_rsps);
  INST_f_sw_interrupt_req.dump_VCD(dt, backing.INST_f_sw_interrupt_req);
  INST_f_timer_interrupt_req.dump_VCD(dt, backing.INST_f_timer_interrupt_req);
  INST_rg_addr_base.dump_VCD(dt, backing.INST_rg_addr_base);
  INST_rg_addr_lim.dump_VCD(dt, backing.INST_rg_addr_lim);
  INST_rg_state.dump_VCD(dt, backing.INST_rg_state);
  INST_slave_xactor_f_rd_addr.dump_VCD(dt, backing.INST_slave_xactor_f_rd_addr);
  INST_slave_xactor_f_rd_data.dump_VCD(dt, backing.INST_slave_xactor_f_rd_data);
  INST_slave_xactor_f_wr_addr.dump_VCD(dt, backing.INST_slave_xactor_f_wr_addr);
  INST_slave_xactor_f_wr_data.dump_VCD(dt, backing.INST_slave_xactor_f_wr_data);
  INST_slave_xactor_f_wr_resp.dump_VCD(dt, backing.INST_slave_xactor_f_wr_resp);
}
