//
// Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
//
// On Tue Aug 27 20:38:51 BST 2019
//
//
// Ports:
// Name                         I/O  size props
// RDY_set_verbosity              O     1 const
// RDY_cpu_reset_server_request_put  O     1 reg
// cpu_reset_server_response_get  O     1 reg
// RDY_cpu_reset_server_response_get  O     1 reg
// cpu_imem_master_awid           O     6
// cpu_imem_master_awaddr         O    64
// cpu_imem_master_awlen          O     8
// cpu_imem_master_awsize         O     3
// cpu_imem_master_awburst        O     2
// cpu_imem_master_awlock         O     1
// cpu_imem_master_awcache        O     4
// cpu_imem_master_awprot         O     3
// cpu_imem_master_awqos          O     4
// cpu_imem_master_awregion       O     4
// cpu_imem_master_awvalid        O     1
// cpu_imem_master_wdata          O   128
// cpu_imem_master_wstrb          O    16
// cpu_imem_master_wlast          O     1
// cpu_imem_master_wvalid         O     1
// cpu_imem_master_bready         O     1 reg
// cpu_imem_master_arid           O     6
// cpu_imem_master_araddr         O    64
// cpu_imem_master_arlen          O     8
// cpu_imem_master_arsize         O     3
// cpu_imem_master_arburst        O     2
// cpu_imem_master_arlock         O     1
// cpu_imem_master_arcache        O     4
// cpu_imem_master_arprot         O     3
// cpu_imem_master_arqos          O     4
// cpu_imem_master_arregion       O     4
// cpu_imem_master_arvalid        O     1
// cpu_imem_master_rready         O     1 reg
// cpu_dmem_master_awid           O     6 reg
// cpu_dmem_master_awaddr         O    64 reg
// cpu_dmem_master_awlen          O     8 reg
// cpu_dmem_master_awsize         O     3 reg
// cpu_dmem_master_awburst        O     2 reg
// cpu_dmem_master_awlock         O     1 reg
// cpu_dmem_master_awcache        O     4 reg
// cpu_dmem_master_awprot         O     3 reg
// cpu_dmem_master_awqos          O     4 reg
// cpu_dmem_master_awregion       O     4 reg
// cpu_dmem_master_awvalid        O     1 reg
// cpu_dmem_master_wdata          O   128 reg
// cpu_dmem_master_wstrb          O    16 reg
// cpu_dmem_master_wlast          O     1 reg
// cpu_dmem_master_wvalid         O     1 reg
// cpu_dmem_master_bready         O     1 reg
// cpu_dmem_master_arid           O     6 reg
// cpu_dmem_master_araddr         O    64 reg
// cpu_dmem_master_arlen          O     8 reg
// cpu_dmem_master_arsize         O     3 reg
// cpu_dmem_master_arburst        O     2 reg
// cpu_dmem_master_arlock         O     1 reg
// cpu_dmem_master_arcache        O     4 reg
// cpu_dmem_master_arprot         O     3 reg
// cpu_dmem_master_arqos          O     4 reg
// cpu_dmem_master_arregion       O     4 reg
// cpu_dmem_master_arvalid        O     1 reg
// cpu_dmem_master_rready         O     1 reg
// tv_verifier_info_get_get       O   608 reg
// RDY_tv_verifier_info_get_get   O     1 reg
// RDY_dm_dmi_read_addr           O     1
// dm_dmi_read_data               O    32
// RDY_dm_dmi_read_data           O     1
// RDY_dm_dmi_write               O     1
// ndm_reset_client_request_get   O     1 reg
// RDY_ndm_reset_client_request_get  O     1 reg
// RDY_ndm_reset_client_response_put  O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_verbosity_verbosity        I     4
// set_verbosity_logdelay         I    64 reg
// cpu_reset_server_request_put   I     1 reg
// cpu_imem_master_awready        I     1
// cpu_imem_master_wready         I     1
// cpu_imem_master_bid            I     6
// cpu_imem_master_bresp          I     2
// cpu_imem_master_arready        I     1
// cpu_imem_master_rid            I     6
// cpu_imem_master_rdata          I   128
// cpu_imem_master_rresp          I     2
// cpu_imem_master_rlast          I     1
// cpu_dmem_master_awready        I     1
// cpu_dmem_master_wready         I     1
// cpu_dmem_master_bid            I     6 reg
// cpu_dmem_master_bresp          I     2 reg
// cpu_dmem_master_arready        I     1
// cpu_dmem_master_rid            I     6 reg
// cpu_dmem_master_rdata          I   128 reg
// cpu_dmem_master_rresp          I     2 reg
// cpu_dmem_master_rlast          I     1 reg
// core_external_interrupt_sources_0_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_1_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_2_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_3_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_4_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_5_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_6_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_7_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_8_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_9_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_10_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_11_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_12_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_13_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_14_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_15_m_interrupt_req_set_not_clear  I     1
// nmi_req_set_not_clear          I     1
// dm_dmi_read_addr_dm_addr       I     7
// dm_dmi_write_dm_addr           I     7
// dm_dmi_write_dm_word           I    32
// ndm_reset_client_response_put  I     1 reg
// EN_set_verbosity               I     1
// EN_cpu_reset_server_request_put  I     1
// cpu_imem_master_bvalid         I     1
// cpu_imem_master_rvalid         I     1
// cpu_dmem_master_bvalid         I     1
// cpu_dmem_master_rvalid         I     1
// EN_dm_dmi_read_addr            I     1
// EN_dm_dmi_write                I     1
// EN_ndm_reset_client_response_put  I     1
// EN_cpu_reset_server_response_get  I     1
// EN_tv_verifier_info_get_get    I     1
// EN_dm_dmi_read_data            I     1
// EN_ndm_reset_client_request_get  I     1
//
// Combinational paths from inputs to outputs:
//   (cpu_imem_master_rid,
//    cpu_imem_master_rdata,
//    cpu_imem_master_rresp,
//    cpu_imem_master_rlast,
//    cpu_imem_master_rvalid) -> cpu_imem_master_awid
//   (cpu_imem_master_rid,
//    cpu_imem_master_rdata,
//    cpu_imem_master_rresp,
//    cpu_imem_master_rlast,
//    cpu_imem_master_rvalid) -> cpu_imem_master_awaddr
//   (cpu_imem_master_rid,
//    cpu_imem_master_rdata,
//    cpu_imem_master_rresp,
//    cpu_imem_master_rlast,
//    cpu_imem_master_rvalid) -> cpu_imem_master_awlen
//   (cpu_imem_master_rid,
//    cpu_imem_master_rdata,
//    cpu_imem_master_rresp,
//    cpu_imem_master_rlast,
//    cpu_imem_master_rvalid) -> cpu_imem_master_awsize
//   (cpu_imem_master_rid,
//    cpu_imem_master_rdata,
//    cpu_imem_master_rresp,
//    cpu_imem_master_rlast,
//    cpu_imem_master_rvalid) -> cpu_imem_master_awburst
//   (cpu_imem_master_rid,
//    cpu_imem_master_rdata,
//    cpu_imem_master_rresp,
//    cpu_imem_master_rlast,
//    cpu_imem_master_rvalid) -> cpu_imem_master_awlock
//   (cpu_imem_master_rid,
//    cpu_imem_master_rdata,
//    cpu_imem_master_rresp,
//    cpu_imem_master_rlast,
//    cpu_imem_master_rvalid) -> cpu_imem_master_awcache
//   (cpu_imem_master_rid,
//    cpu_imem_master_rdata,
//    cpu_imem_master_rresp,
//    cpu_imem_master_rlast,
//    cpu_imem_master_rvalid) -> cpu_imem_master_awprot
//   (cpu_imem_master_rid,
//    cpu_imem_master_rdata,
//    cpu_imem_master_rresp,
//    cpu_imem_master_rlast,
//    cpu_imem_master_rvalid) -> cpu_imem_master_awqos
//   (cpu_imem_master_rid,
//    cpu_imem_master_rdata,
//    cpu_imem_master_rresp,
//    cpu_imem_master_rlast,
//    cpu_imem_master_rvalid) -> cpu_imem_master_awregion
//   (cpu_imem_master_rid,
//    cpu_imem_master_rdata,
//    cpu_imem_master_rresp,
//    cpu_imem_master_rlast,
//    cpu_imem_master_rvalid) -> cpu_imem_master_awvalid
//   (cpu_imem_master_rid,
//    cpu_imem_master_rdata,
//    cpu_imem_master_rresp,
//    cpu_imem_master_rlast,
//    cpu_imem_master_rvalid) -> cpu_imem_master_wdata
//   (cpu_imem_master_rid,
//    cpu_imem_master_rdata,
//    cpu_imem_master_rresp,
//    cpu_imem_master_rlast,
//    cpu_imem_master_rvalid) -> cpu_imem_master_wstrb
//   (cpu_imem_master_rid,
//    cpu_imem_master_rdata,
//    cpu_imem_master_rresp,
//    cpu_imem_master_rlast,
//    cpu_imem_master_rvalid) -> cpu_imem_master_wlast
//   (cpu_imem_master_rid,
//    cpu_imem_master_rdata,
//    cpu_imem_master_rresp,
//    cpu_imem_master_rlast,
//    cpu_imem_master_rvalid) -> cpu_imem_master_wvalid
//   (cpu_imem_master_rid,
//    cpu_imem_master_rdata,
//    cpu_imem_master_rresp,
//    cpu_imem_master_rlast,
//    cpu_imem_master_rvalid) -> cpu_imem_master_arid
//   (cpu_imem_master_rid,
//    cpu_imem_master_rdata,
//    cpu_imem_master_rresp,
//    cpu_imem_master_rlast,
//    cpu_imem_master_rvalid) -> cpu_imem_master_araddr
//   (cpu_imem_master_rid,
//    cpu_imem_master_rdata,
//    cpu_imem_master_rresp,
//    cpu_imem_master_rlast,
//    cpu_imem_master_rvalid) -> cpu_imem_master_arlen
//   (cpu_imem_master_rid,
//    cpu_imem_master_rdata,
//    cpu_imem_master_rresp,
//    cpu_imem_master_rlast,
//    cpu_imem_master_rvalid) -> cpu_imem_master_arsize
//   (cpu_imem_master_rid,
//    cpu_imem_master_rdata,
//    cpu_imem_master_rresp,
//    cpu_imem_master_rlast,
//    cpu_imem_master_rvalid) -> cpu_imem_master_arburst
//   (cpu_imem_master_rid,
//    cpu_imem_master_rdata,
//    cpu_imem_master_rresp,
//    cpu_imem_master_rlast,
//    cpu_imem_master_rvalid) -> cpu_imem_master_arlock
//   (cpu_imem_master_rid,
//    cpu_imem_master_rdata,
//    cpu_imem_master_rresp,
//    cpu_imem_master_rlast,
//    cpu_imem_master_rvalid) -> cpu_imem_master_arcache
//   (cpu_imem_master_rid,
//    cpu_imem_master_rdata,
//    cpu_imem_master_rresp,
//    cpu_imem_master_rlast,
//    cpu_imem_master_rvalid) -> cpu_imem_master_arprot
//   (cpu_imem_master_rid,
//    cpu_imem_master_rdata,
//    cpu_imem_master_rresp,
//    cpu_imem_master_rlast,
//    cpu_imem_master_rvalid) -> cpu_imem_master_arqos
//   (cpu_imem_master_rid,
//    cpu_imem_master_rdata,
//    cpu_imem_master_rresp,
//    cpu_imem_master_rlast,
//    cpu_imem_master_rvalid) -> cpu_imem_master_arregion
//   (cpu_imem_master_rid,
//    cpu_imem_master_rdata,
//    cpu_imem_master_rresp,
//    cpu_imem_master_rlast,
//    cpu_imem_master_rvalid) -> cpu_imem_master_arvalid
//   (dm_dmi_read_addr_dm_addr, EN_dm_dmi_read_addr) -> RDY_dm_dmi_read_data
//   (dm_dmi_read_addr_dm_addr,
//    EN_dm_dmi_read_addr,
//    EN_dm_dmi_read_data) -> dm_dmi_read_data
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCore(CLK,
	      RST_N,

	      set_verbosity_verbosity,
	      set_verbosity_logdelay,
	      EN_set_verbosity,
	      RDY_set_verbosity,

	      cpu_reset_server_request_put,
	      EN_cpu_reset_server_request_put,
	      RDY_cpu_reset_server_request_put,

	      EN_cpu_reset_server_response_get,
	      cpu_reset_server_response_get,
	      RDY_cpu_reset_server_response_get,

	      cpu_imem_master_awid,

	      cpu_imem_master_awaddr,

	      cpu_imem_master_awlen,

	      cpu_imem_master_awsize,

	      cpu_imem_master_awburst,

	      cpu_imem_master_awlock,

	      cpu_imem_master_awcache,

	      cpu_imem_master_awprot,

	      cpu_imem_master_awqos,

	      cpu_imem_master_awregion,

	      cpu_imem_master_awvalid,

	      cpu_imem_master_awready,

	      cpu_imem_master_wdata,

	      cpu_imem_master_wstrb,

	      cpu_imem_master_wlast,

	      cpu_imem_master_wvalid,

	      cpu_imem_master_wready,

	      cpu_imem_master_bid,
	      cpu_imem_master_bresp,
	      cpu_imem_master_bvalid,

	      cpu_imem_master_bready,

	      cpu_imem_master_arid,

	      cpu_imem_master_araddr,

	      cpu_imem_master_arlen,

	      cpu_imem_master_arsize,

	      cpu_imem_master_arburst,

	      cpu_imem_master_arlock,

	      cpu_imem_master_arcache,

	      cpu_imem_master_arprot,

	      cpu_imem_master_arqos,

	      cpu_imem_master_arregion,

	      cpu_imem_master_arvalid,

	      cpu_imem_master_arready,

	      cpu_imem_master_rid,
	      cpu_imem_master_rdata,
	      cpu_imem_master_rresp,
	      cpu_imem_master_rlast,
	      cpu_imem_master_rvalid,

	      cpu_imem_master_rready,

	      cpu_dmem_master_awid,

	      cpu_dmem_master_awaddr,

	      cpu_dmem_master_awlen,

	      cpu_dmem_master_awsize,

	      cpu_dmem_master_awburst,

	      cpu_dmem_master_awlock,

	      cpu_dmem_master_awcache,

	      cpu_dmem_master_awprot,

	      cpu_dmem_master_awqos,

	      cpu_dmem_master_awregion,

	      cpu_dmem_master_awvalid,

	      cpu_dmem_master_awready,

	      cpu_dmem_master_wdata,

	      cpu_dmem_master_wstrb,

	      cpu_dmem_master_wlast,

	      cpu_dmem_master_wvalid,

	      cpu_dmem_master_wready,

	      cpu_dmem_master_bid,
	      cpu_dmem_master_bresp,
	      cpu_dmem_master_bvalid,

	      cpu_dmem_master_bready,

	      cpu_dmem_master_arid,

	      cpu_dmem_master_araddr,

	      cpu_dmem_master_arlen,

	      cpu_dmem_master_arsize,

	      cpu_dmem_master_arburst,

	      cpu_dmem_master_arlock,

	      cpu_dmem_master_arcache,

	      cpu_dmem_master_arprot,

	      cpu_dmem_master_arqos,

	      cpu_dmem_master_arregion,

	      cpu_dmem_master_arvalid,

	      cpu_dmem_master_arready,

	      cpu_dmem_master_rid,
	      cpu_dmem_master_rdata,
	      cpu_dmem_master_rresp,
	      cpu_dmem_master_rlast,
	      cpu_dmem_master_rvalid,

	      cpu_dmem_master_rready,

	      core_external_interrupt_sources_0_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_1_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_2_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_3_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_4_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_5_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_6_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_7_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_8_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_9_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_10_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_11_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_12_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_13_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_14_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_15_m_interrupt_req_set_not_clear,

	      nmi_req_set_not_clear,

	      EN_tv_verifier_info_get_get,
	      tv_verifier_info_get_get,
	      RDY_tv_verifier_info_get_get,

	      dm_dmi_read_addr_dm_addr,
	      EN_dm_dmi_read_addr,
	      RDY_dm_dmi_read_addr,

	      EN_dm_dmi_read_data,
	      dm_dmi_read_data,
	      RDY_dm_dmi_read_data,

	      dm_dmi_write_dm_addr,
	      dm_dmi_write_dm_word,
	      EN_dm_dmi_write,
	      RDY_dm_dmi_write,

	      EN_ndm_reset_client_request_get,
	      ndm_reset_client_request_get,
	      RDY_ndm_reset_client_request_get,

	      ndm_reset_client_response_put,
	      EN_ndm_reset_client_response_put,
	      RDY_ndm_reset_client_response_put);
  input  CLK;
  input  RST_N;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  [63 : 0] set_verbosity_logdelay;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // action method cpu_reset_server_request_put
  input  cpu_reset_server_request_put;
  input  EN_cpu_reset_server_request_put;
  output RDY_cpu_reset_server_request_put;

  // actionvalue method cpu_reset_server_response_get
  input  EN_cpu_reset_server_response_get;
  output cpu_reset_server_response_get;
  output RDY_cpu_reset_server_response_get;

  // value method cpu_imem_master_aw_awid
  output [5 : 0] cpu_imem_master_awid;

  // value method cpu_imem_master_aw_awaddr
  output [63 : 0] cpu_imem_master_awaddr;

  // value method cpu_imem_master_aw_awlen
  output [7 : 0] cpu_imem_master_awlen;

  // value method cpu_imem_master_aw_awsize
  output [2 : 0] cpu_imem_master_awsize;

  // value method cpu_imem_master_aw_awburst
  output [1 : 0] cpu_imem_master_awburst;

  // value method cpu_imem_master_aw_awlock
  output cpu_imem_master_awlock;

  // value method cpu_imem_master_aw_awcache
  output [3 : 0] cpu_imem_master_awcache;

  // value method cpu_imem_master_aw_awprot
  output [2 : 0] cpu_imem_master_awprot;

  // value method cpu_imem_master_aw_awqos
  output [3 : 0] cpu_imem_master_awqos;

  // value method cpu_imem_master_aw_awregion
  output [3 : 0] cpu_imem_master_awregion;

  // value method cpu_imem_master_aw_awuser

  // value method cpu_imem_master_aw_awvalid
  output cpu_imem_master_awvalid;

  // action method cpu_imem_master_aw_awready
  input  cpu_imem_master_awready;

  // value method cpu_imem_master_w_wdata
  output [127 : 0] cpu_imem_master_wdata;

  // value method cpu_imem_master_w_wstrb
  output [15 : 0] cpu_imem_master_wstrb;

  // value method cpu_imem_master_w_wlast
  output cpu_imem_master_wlast;

  // value method cpu_imem_master_w_wuser

  // value method cpu_imem_master_w_wvalid
  output cpu_imem_master_wvalid;

  // action method cpu_imem_master_w_wready
  input  cpu_imem_master_wready;

  // action method cpu_imem_master_b_bflit
  input  [5 : 0] cpu_imem_master_bid;
  input  [1 : 0] cpu_imem_master_bresp;
  input  cpu_imem_master_bvalid;

  // value method cpu_imem_master_b_bready
  output cpu_imem_master_bready;

  // value method cpu_imem_master_ar_arid
  output [5 : 0] cpu_imem_master_arid;

  // value method cpu_imem_master_ar_araddr
  output [63 : 0] cpu_imem_master_araddr;

  // value method cpu_imem_master_ar_arlen
  output [7 : 0] cpu_imem_master_arlen;

  // value method cpu_imem_master_ar_arsize
  output [2 : 0] cpu_imem_master_arsize;

  // value method cpu_imem_master_ar_arburst
  output [1 : 0] cpu_imem_master_arburst;

  // value method cpu_imem_master_ar_arlock
  output cpu_imem_master_arlock;

  // value method cpu_imem_master_ar_arcache
  output [3 : 0] cpu_imem_master_arcache;

  // value method cpu_imem_master_ar_arprot
  output [2 : 0] cpu_imem_master_arprot;

  // value method cpu_imem_master_ar_arqos
  output [3 : 0] cpu_imem_master_arqos;

  // value method cpu_imem_master_ar_arregion
  output [3 : 0] cpu_imem_master_arregion;

  // value method cpu_imem_master_ar_aruser

  // value method cpu_imem_master_ar_arvalid
  output cpu_imem_master_arvalid;

  // action method cpu_imem_master_ar_arready
  input  cpu_imem_master_arready;

  // action method cpu_imem_master_r_rflit
  input  [5 : 0] cpu_imem_master_rid;
  input  [127 : 0] cpu_imem_master_rdata;
  input  [1 : 0] cpu_imem_master_rresp;
  input  cpu_imem_master_rlast;
  input  cpu_imem_master_rvalid;

  // value method cpu_imem_master_r_rready
  output cpu_imem_master_rready;

  // value method cpu_dmem_master_aw_awid
  output [5 : 0] cpu_dmem_master_awid;

  // value method cpu_dmem_master_aw_awaddr
  output [63 : 0] cpu_dmem_master_awaddr;

  // value method cpu_dmem_master_aw_awlen
  output [7 : 0] cpu_dmem_master_awlen;

  // value method cpu_dmem_master_aw_awsize
  output [2 : 0] cpu_dmem_master_awsize;

  // value method cpu_dmem_master_aw_awburst
  output [1 : 0] cpu_dmem_master_awburst;

  // value method cpu_dmem_master_aw_awlock
  output cpu_dmem_master_awlock;

  // value method cpu_dmem_master_aw_awcache
  output [3 : 0] cpu_dmem_master_awcache;

  // value method cpu_dmem_master_aw_awprot
  output [2 : 0] cpu_dmem_master_awprot;

  // value method cpu_dmem_master_aw_awqos
  output [3 : 0] cpu_dmem_master_awqos;

  // value method cpu_dmem_master_aw_awregion
  output [3 : 0] cpu_dmem_master_awregion;

  // value method cpu_dmem_master_aw_awuser

  // value method cpu_dmem_master_aw_awvalid
  output cpu_dmem_master_awvalid;

  // action method cpu_dmem_master_aw_awready
  input  cpu_dmem_master_awready;

  // value method cpu_dmem_master_w_wdata
  output [127 : 0] cpu_dmem_master_wdata;

  // value method cpu_dmem_master_w_wstrb
  output [15 : 0] cpu_dmem_master_wstrb;

  // value method cpu_dmem_master_w_wlast
  output cpu_dmem_master_wlast;

  // value method cpu_dmem_master_w_wuser

  // value method cpu_dmem_master_w_wvalid
  output cpu_dmem_master_wvalid;

  // action method cpu_dmem_master_w_wready
  input  cpu_dmem_master_wready;

  // action method cpu_dmem_master_b_bflit
  input  [5 : 0] cpu_dmem_master_bid;
  input  [1 : 0] cpu_dmem_master_bresp;
  input  cpu_dmem_master_bvalid;

  // value method cpu_dmem_master_b_bready
  output cpu_dmem_master_bready;

  // value method cpu_dmem_master_ar_arid
  output [5 : 0] cpu_dmem_master_arid;

  // value method cpu_dmem_master_ar_araddr
  output [63 : 0] cpu_dmem_master_araddr;

  // value method cpu_dmem_master_ar_arlen
  output [7 : 0] cpu_dmem_master_arlen;

  // value method cpu_dmem_master_ar_arsize
  output [2 : 0] cpu_dmem_master_arsize;

  // value method cpu_dmem_master_ar_arburst
  output [1 : 0] cpu_dmem_master_arburst;

  // value method cpu_dmem_master_ar_arlock
  output cpu_dmem_master_arlock;

  // value method cpu_dmem_master_ar_arcache
  output [3 : 0] cpu_dmem_master_arcache;

  // value method cpu_dmem_master_ar_arprot
  output [2 : 0] cpu_dmem_master_arprot;

  // value method cpu_dmem_master_ar_arqos
  output [3 : 0] cpu_dmem_master_arqos;

  // value method cpu_dmem_master_ar_arregion
  output [3 : 0] cpu_dmem_master_arregion;

  // value method cpu_dmem_master_ar_aruser

  // value method cpu_dmem_master_ar_arvalid
  output cpu_dmem_master_arvalid;

  // action method cpu_dmem_master_ar_arready
  input  cpu_dmem_master_arready;

  // action method cpu_dmem_master_r_rflit
  input  [5 : 0] cpu_dmem_master_rid;
  input  [127 : 0] cpu_dmem_master_rdata;
  input  [1 : 0] cpu_dmem_master_rresp;
  input  cpu_dmem_master_rlast;
  input  cpu_dmem_master_rvalid;

  // value method cpu_dmem_master_r_rready
  output cpu_dmem_master_rready;

  // action method core_external_interrupt_sources_0_m_interrupt_req
  input  core_external_interrupt_sources_0_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_1_m_interrupt_req
  input  core_external_interrupt_sources_1_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_2_m_interrupt_req
  input  core_external_interrupt_sources_2_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_3_m_interrupt_req
  input  core_external_interrupt_sources_3_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_4_m_interrupt_req
  input  core_external_interrupt_sources_4_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_5_m_interrupt_req
  input  core_external_interrupt_sources_5_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_6_m_interrupt_req
  input  core_external_interrupt_sources_6_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_7_m_interrupt_req
  input  core_external_interrupt_sources_7_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_8_m_interrupt_req
  input  core_external_interrupt_sources_8_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_9_m_interrupt_req
  input  core_external_interrupt_sources_9_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_10_m_interrupt_req
  input  core_external_interrupt_sources_10_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_11_m_interrupt_req
  input  core_external_interrupt_sources_11_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_12_m_interrupt_req
  input  core_external_interrupt_sources_12_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_13_m_interrupt_req
  input  core_external_interrupt_sources_13_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_14_m_interrupt_req
  input  core_external_interrupt_sources_14_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_15_m_interrupt_req
  input  core_external_interrupt_sources_15_m_interrupt_req_set_not_clear;

  // action method nmi_req
  input  nmi_req_set_not_clear;

  // actionvalue method tv_verifier_info_get_get
  input  EN_tv_verifier_info_get_get;
  output [607 : 0] tv_verifier_info_get_get;
  output RDY_tv_verifier_info_get_get;

  // action method dm_dmi_read_addr
  input  [6 : 0] dm_dmi_read_addr_dm_addr;
  input  EN_dm_dmi_read_addr;
  output RDY_dm_dmi_read_addr;

  // actionvalue method dm_dmi_read_data
  input  EN_dm_dmi_read_data;
  output [31 : 0] dm_dmi_read_data;
  output RDY_dm_dmi_read_data;

  // action method dm_dmi_write
  input  [6 : 0] dm_dmi_write_dm_addr;
  input  [31 : 0] dm_dmi_write_dm_word;
  input  EN_dm_dmi_write;
  output RDY_dm_dmi_write;

  // actionvalue method ndm_reset_client_request_get
  input  EN_ndm_reset_client_request_get;
  output ndm_reset_client_request_get;
  output RDY_ndm_reset_client_request_get;

  // action method ndm_reset_client_response_put
  input  ndm_reset_client_response_put;
  input  EN_ndm_reset_client_response_put;
  output RDY_ndm_reset_client_response_put;

  // signals for module outputs
  wire [607 : 0] tv_verifier_info_get_get;
  wire [127 : 0] cpu_dmem_master_wdata, cpu_imem_master_wdata;
  wire [63 : 0] cpu_dmem_master_araddr,
		cpu_dmem_master_awaddr,
		cpu_imem_master_araddr,
		cpu_imem_master_awaddr;
  wire [31 : 0] dm_dmi_read_data;
  wire [15 : 0] cpu_dmem_master_wstrb, cpu_imem_master_wstrb;
  wire [7 : 0] cpu_dmem_master_arlen,
	       cpu_dmem_master_awlen,
	       cpu_imem_master_arlen,
	       cpu_imem_master_awlen;
  wire [5 : 0] cpu_dmem_master_arid,
	       cpu_dmem_master_awid,
	       cpu_imem_master_arid,
	       cpu_imem_master_awid;
  wire [3 : 0] cpu_dmem_master_arcache,
	       cpu_dmem_master_arqos,
	       cpu_dmem_master_arregion,
	       cpu_dmem_master_awcache,
	       cpu_dmem_master_awqos,
	       cpu_dmem_master_awregion,
	       cpu_imem_master_arcache,
	       cpu_imem_master_arqos,
	       cpu_imem_master_arregion,
	       cpu_imem_master_awcache,
	       cpu_imem_master_awqos,
	       cpu_imem_master_awregion;
  wire [2 : 0] cpu_dmem_master_arprot,
	       cpu_dmem_master_arsize,
	       cpu_dmem_master_awprot,
	       cpu_dmem_master_awsize,
	       cpu_imem_master_arprot,
	       cpu_imem_master_arsize,
	       cpu_imem_master_awprot,
	       cpu_imem_master_awsize;
  wire [1 : 0] cpu_dmem_master_arburst,
	       cpu_dmem_master_awburst,
	       cpu_imem_master_arburst,
	       cpu_imem_master_awburst;
  wire RDY_cpu_reset_server_request_put,
       RDY_cpu_reset_server_response_get,
       RDY_dm_dmi_read_addr,
       RDY_dm_dmi_read_data,
       RDY_dm_dmi_write,
       RDY_ndm_reset_client_request_get,
       RDY_ndm_reset_client_response_put,
       RDY_set_verbosity,
       RDY_tv_verifier_info_get_get,
       cpu_dmem_master_arlock,
       cpu_dmem_master_arvalid,
       cpu_dmem_master_awlock,
       cpu_dmem_master_awvalid,
       cpu_dmem_master_bready,
       cpu_dmem_master_rready,
       cpu_dmem_master_wlast,
       cpu_dmem_master_wvalid,
       cpu_imem_master_arlock,
       cpu_imem_master_arvalid,
       cpu_imem_master_awlock,
       cpu_imem_master_awvalid,
       cpu_imem_master_bready,
       cpu_imem_master_rready,
       cpu_imem_master_wlast,
       cpu_imem_master_wvalid,
       cpu_reset_server_response_get,
       ndm_reset_client_request_get;

  // inlined wires
  wire [245 : 0] split_0_doPut$wget, split_1_doPut$wget, split_2_doPut$wget;
  wire [146 : 0] cpu_imem_ug_u_w_peekWire$wget,
		 ssNoSynth_1_w_buffer_enqw$wget,
		 ssNoSynth_2_w_buffer_enqw$wget;
  wire [137 : 0] cpu_imem_r_buffer_enqw$wget;
  wire [136 : 0] msNoSynth_0_r_buffer_enqw$wget,
		 msNoSynth_1_r_buffer_enqw$wget;
  wire [97 : 0] cpu_imem_ug_u_ar_peekWire$wget,
		cpu_imem_ug_u_aw_peekWire$wget,
		ssNoSynth_0_ar_buffer_enqw$wget,
		ssNoSynth_1_ar_buffer_enqw$wget,
		ssNoSynth_1_aw_buffer_enqw$wget,
		ssNoSynth_2_ar_buffer_enqw$wget,
		ssNoSynth_2_aw_buffer_enqw$wget;
  wire [96 : 0] ifcs_0_1_noRoute_currentReq$port0__write_1,
		ifcs_0_1_noRoute_currentReq$port1__read,
		ifcs_0_noRoute_inner_currentReq$port0__write_1,
		ifcs_0_noRoute_inner_currentReq$port1__read,
		ifcs_1_1_noRoute_currentReq$port1__read,
		ifcs_1_noRoute_inner_currentReq$port1__read;
  wire [8 : 0] ifcs_0_1_noRoute_flitCount$port0__write_1,
	       ifcs_0_1_noRoute_flitCount$port1__write_1,
	       ifcs_0_1_noRoute_flitCount$port2__read,
	       ifcs_1_1_noRoute_flitCount$port0__write_1,
	       ifcs_1_1_noRoute_flitCount$port1__write_1,
	       ifcs_1_1_noRoute_flitCount$port2__read;
  wire [6 : 0] cpu_imem_b_buffer_enqw$wget;
  wire [5 : 0] msNoSynth_0_b_buffer_enqw$wget, msNoSynth_1_b_buffer_enqw$wget;
  wire cpu_imem_ug_u_ar_dropWire$whas,
       cpu_imem_ug_u_aw_dropWire$whas,
       cpu_imem_ug_u_b_putWire$whas,
       cpu_imem_ug_u_r_putWire$whas,
       cpu_imem_ug_u_w_dropWire$whas,
       dm_master_nonsynth_arCanPeek$wget,
       dm_master_nonsynth_awCanPeek$wget,
       dm_master_nonsynth_rCanPut$wget,
       dm_master_nonsynth_wCanPeek$wget,
       flitToSink_0$whas,
       flitToSink_1$whas,
       flitToSink_1_0$whas,
       flitToSink_1_0_1$whas,
       flitToSink_1_1$whas,
       flitToSink_1_1_0$whas,
       flitToSink_1_1_1$whas,
       flitToSink_1_1_1_1$whas,
       flitToSink_1_2$whas,
       flitToSink_2$whas,
       ifcs_0_noRoute_inner_currentReq$EN_port0__write,
       ifcs_0_noRoute_inner_pendingReq$EN_port0__write,
       ifcs_0_noRoute_inner_pendingReq$port1__read,
       ifcs_0_noRoute_inner_pendingReq$port2__read,
       ifcs_1_noRoute_inner_currentReq$EN_port0__write,
       ifcs_1_noRoute_inner_pendingReq$EN_port0__write,
       ifcs_1_noRoute_inner_pendingReq$port1__read,
       ifcs_1_noRoute_inner_pendingReq$port2__read,
       merged_0_doDrop$whas,
       merged_1_doDrop$whas,
       msNoSynth_0_ar_dwReady$whas,
       msNoSynth_0_b_buffer_enqw$whas,
       msNoSynth_0_r_buffer_enqw$whas,
       msNoSynth_0_w_dwReady$whas,
       msNoSynth_1_ar_dwReady$whas,
       msNoSynth_1_b_buffer_enqw$whas,
       msNoSynth_1_r_buffer_enqw$whas,
       msNoSynth_1_w_dwReady$whas,
       reqWires_0$wget,
       reqWires_1$wget,
       reqWires_1_0$wget,
       reqWires_1_0_1$wget,
       reqWires_1_1$wget,
       reqWires_1_1_0$wget,
       reqWires_1_1_1$wget,
       reqWires_1_1_1_1$wget,
       reqWires_1_1_2$wget,
       reqWires_1_2$wget,
       sourceSelect_1_0$whas,
       sourceSelect_1_0_1$whas,
       sourceSelect_1_1$whas,
       sourceSelect_1_1_1$whas,
       sourceSelect_1_2$whas,
       ssNoSynth_0_b_dwReady$whas,
       ssNoSynth_0_r_dwReady$whas,
       ssNoSynth_0_w_buffer_enqw$whas,
       ssNoSynth_1_b_dwReady$whas,
       ssNoSynth_1_r_dwReady$whas,
       ssNoSynth_1_w_buffer_enqw$whas,
       ssNoSynth_2_b_dwReady$whas,
       ssNoSynth_2_r_dwReady$whas,
       ssNoSynth_2_w_buffer_enqw$whas;

  // register activeSource_0
  reg activeSource_0;
  wire activeSource_0$D_IN, activeSource_0$EN;

  // register activeSource_1
  reg activeSource_1;
  wire activeSource_1$D_IN, activeSource_1$EN;

  // register activeSource_1_0
  reg activeSource_1_0;
  wire activeSource_1_0$D_IN, activeSource_1_0$EN;

  // register activeSource_1_0_1
  reg activeSource_1_0_1;
  wire activeSource_1_0_1$D_IN, activeSource_1_0_1$EN;

  // register activeSource_1_1
  reg activeSource_1_1;
  wire activeSource_1_1$D_IN, activeSource_1_1$EN;

  // register activeSource_1_1_0
  reg activeSource_1_1_0;
  reg activeSource_1_1_0$D_IN;
  wire activeSource_1_1_0$EN;

  // register activeSource_1_1_1
  reg activeSource_1_1_1;
  wire activeSource_1_1_1$D_IN, activeSource_1_1_1$EN;

  // register activeSource_1_1_1_1
  reg activeSource_1_1_1_1;
  reg activeSource_1_1_1_1$D_IN;
  wire activeSource_1_1_1_1$EN;

  // register activeSource_1_1_2
  reg activeSource_1_1_2;
  reg activeSource_1_1_2$D_IN;
  wire activeSource_1_1_2$EN;

  // register activeSource_1_2
  reg activeSource_1_2;
  wire activeSource_1_2$D_IN, activeSource_1_2$EN;

  // register arbiter_1_1_firstHot
  reg arbiter_1_1_firstHot;
  wire arbiter_1_1_firstHot$D_IN, arbiter_1_1_firstHot$EN;

  // register arbiter_1_1_lastSelect
  reg arbiter_1_1_lastSelect;
  wire arbiter_1_1_lastSelect$D_IN, arbiter_1_1_lastSelect$EN;

  // register arbiter_1_1_lastSelect_1
  reg arbiter_1_1_lastSelect_1;
  wire arbiter_1_1_lastSelect_1$D_IN, arbiter_1_1_lastSelect_1$EN;

  // register arbiter_1_firstHot
  reg arbiter_1_firstHot;
  wire arbiter_1_firstHot$D_IN, arbiter_1_firstHot$EN;

  // register arbiter_1_firstHot_1
  reg arbiter_1_firstHot_1;
  wire arbiter_1_firstHot_1$D_IN, arbiter_1_firstHot_1$EN;

  // register arbiter_1_lastSelect
  reg arbiter_1_lastSelect;
  wire arbiter_1_lastSelect$D_IN, arbiter_1_lastSelect$EN;

  // register arbiter_1_lastSelect_1
  reg arbiter_1_lastSelect_1;
  wire arbiter_1_lastSelect_1$D_IN, arbiter_1_lastSelect_1$EN;

  // register arbiter_1_lastSelect_2
  reg arbiter_1_lastSelect_2;
  wire arbiter_1_lastSelect_2$D_IN, arbiter_1_lastSelect_2$EN;

  // register arbiter_firstHot
  reg arbiter_firstHot;
  wire arbiter_firstHot$D_IN, arbiter_firstHot$EN;

  // register arbiter_lastSelect
  reg arbiter_lastSelect;
  wire arbiter_lastSelect$D_IN, arbiter_lastSelect$EN;

  // register dm_master_nonsynth_currentRID
  reg [3 : 0] dm_master_nonsynth_currentRID;
  wire [3 : 0] dm_master_nonsynth_currentRID$D_IN;
  wire dm_master_nonsynth_currentRID$EN;

  // register dm_master_nonsynth_currentWID
  reg [3 : 0] dm_master_nonsynth_currentWID;
  wire [3 : 0] dm_master_nonsynth_currentWID$D_IN;
  wire dm_master_nonsynth_currentWID$EN;

  // register ifcs_0_1_noRoute_currentReq
  reg [96 : 0] ifcs_0_1_noRoute_currentReq;
  wire [96 : 0] ifcs_0_1_noRoute_currentReq$D_IN;
  wire ifcs_0_1_noRoute_currentReq$EN;

  // register ifcs_0_1_noRoute_flitCount
  reg [8 : 0] ifcs_0_1_noRoute_flitCount;
  wire [8 : 0] ifcs_0_1_noRoute_flitCount$D_IN;
  wire ifcs_0_1_noRoute_flitCount$EN;

  // register ifcs_0_1_state
  reg [1 : 0] ifcs_0_1_state;
  wire [1 : 0] ifcs_0_1_state$D_IN;
  wire ifcs_0_1_state$EN;

  // register ifcs_0_1_state_1
  reg ifcs_0_1_state_1;
  wire ifcs_0_1_state_1$D_IN, ifcs_0_1_state_1$EN;

  // register ifcs_0_noRoute_inner_currentReq
  reg [96 : 0] ifcs_0_noRoute_inner_currentReq;
  wire [96 : 0] ifcs_0_noRoute_inner_currentReq$D_IN;
  wire ifcs_0_noRoute_inner_currentReq$EN;

  // register ifcs_0_noRoute_inner_pendingReq
  reg ifcs_0_noRoute_inner_pendingReq;
  wire ifcs_0_noRoute_inner_pendingReq$D_IN,
       ifcs_0_noRoute_inner_pendingReq$EN;

  // register ifcs_0_state
  reg [1 : 0] ifcs_0_state;
  reg [1 : 0] ifcs_0_state$D_IN;
  wire ifcs_0_state$EN;

  // register ifcs_0_state_1
  reg ifcs_0_state_1;
  wire ifcs_0_state_1$D_IN, ifcs_0_state_1$EN;

  // register ifcs_1_1_noRoute_currentReq
  reg [96 : 0] ifcs_1_1_noRoute_currentReq;
  wire [96 : 0] ifcs_1_1_noRoute_currentReq$D_IN;
  wire ifcs_1_1_noRoute_currentReq$EN;

  // register ifcs_1_1_noRoute_flitCount
  reg [8 : 0] ifcs_1_1_noRoute_flitCount;
  wire [8 : 0] ifcs_1_1_noRoute_flitCount$D_IN;
  wire ifcs_1_1_noRoute_flitCount$EN;

  // register ifcs_1_1_state
  reg [1 : 0] ifcs_1_1_state;
  wire [1 : 0] ifcs_1_1_state$D_IN;
  wire ifcs_1_1_state$EN;

  // register ifcs_1_1_state_1
  reg ifcs_1_1_state_1;
  wire ifcs_1_1_state_1$D_IN, ifcs_1_1_state_1$EN;

  // register ifcs_1_noRoute_inner_currentReq
  reg [96 : 0] ifcs_1_noRoute_inner_currentReq;
  wire [96 : 0] ifcs_1_noRoute_inner_currentReq$D_IN;
  wire ifcs_1_noRoute_inner_currentReq$EN;

  // register ifcs_1_noRoute_inner_pendingReq
  reg ifcs_1_noRoute_inner_pendingReq;
  wire ifcs_1_noRoute_inner_pendingReq$D_IN,
       ifcs_1_noRoute_inner_pendingReq$EN;

  // register ifcs_1_state
  reg [1 : 0] ifcs_1_state;
  reg [1 : 0] ifcs_1_state$D_IN;
  wire ifcs_1_state$EN;

  // register ifcs_1_state_1
  reg ifcs_1_state_1;
  wire ifcs_1_state_1$D_IN, ifcs_1_state_1$EN;

  // register ifcs_2_1_state
  reg ifcs_2_1_state;
  wire ifcs_2_1_state$D_IN, ifcs_2_1_state$EN;

  // register ifcs_2_state
  reg ifcs_2_state;
  wire ifcs_2_state$D_IN, ifcs_2_state$EN;

  // register merged_0_flitLeft
  reg [7 : 0] merged_0_flitLeft;
  wire [7 : 0] merged_0_flitLeft$D_IN;
  wire merged_0_flitLeft$EN;

  // register merged_1_flitLeft
  reg [7 : 0] merged_1_flitLeft;
  wire [7 : 0] merged_1_flitLeft$D_IN;
  wire merged_1_flitLeft$EN;

  // register split_0_flitLeft
  reg [7 : 0] split_0_flitLeft;
  wire [7 : 0] split_0_flitLeft$D_IN;
  wire split_0_flitLeft$EN;

  // register split_1_flitLeft
  reg [7 : 0] split_1_flitLeft;
  wire [7 : 0] split_1_flitLeft$D_IN;
  wire split_1_flitLeft$EN;

  // register split_2_flitLeft
  reg [7 : 0] split_2_flitLeft;
  wire [7 : 0] split_2_flitLeft$D_IN;
  wire split_2_flitLeft$EN;

  // register state
  reg state;
  wire state$D_IN, state$EN;

  // register state_1
  reg state_1;
  wire state_1$D_IN, state_1$EN;

  // register state_1_1
  reg state_1_1;
  wire state_1_1$D_IN, state_1_1$EN;

  // register state_1_1_1
  reg state_1_1_1;
  wire state_1_1_1$D_IN, state_1_1_1$EN;

  // ports of submodule cpu
  wire [233 : 0] cpu$trace_data_out_get;
  wire [127 : 0] cpu$dmem_master_rdata,
		 cpu$dmem_master_wdata,
		 cpu$imem_master_rdata,
		 cpu$imem_master_wdata;
  wire [63 : 0] cpu$dmem_master_araddr,
		cpu$dmem_master_awaddr,
		cpu$imem_master_araddr,
		cpu$imem_master_awaddr,
		cpu$set_verbosity_logdelay;
  wire [44 : 0] cpu$hart0_csr_mem_server_request_put;
  wire [37 : 0] cpu$hart0_gpr_mem_server_request_put;
  wire [32 : 0] cpu$hart0_csr_mem_server_response_get,
		cpu$hart0_gpr_mem_server_response_get;
  wire [15 : 0] cpu$dmem_master_wstrb, cpu$imem_master_wstrb;
  wire [7 : 0] cpu$dmem_master_arlen,
	       cpu$dmem_master_awlen,
	       cpu$imem_master_arlen,
	       cpu$imem_master_awlen;
  wire [4 : 0] cpu$imem_master_arid,
	       cpu$imem_master_awid,
	       cpu$imem_master_bid,
	       cpu$imem_master_rid;
  wire [3 : 0] cpu$dmem_master_arcache,
	       cpu$dmem_master_arid,
	       cpu$dmem_master_arqos,
	       cpu$dmem_master_arregion,
	       cpu$dmem_master_awcache,
	       cpu$dmem_master_awid,
	       cpu$dmem_master_awqos,
	       cpu$dmem_master_awregion,
	       cpu$dmem_master_bid,
	       cpu$dmem_master_rid,
	       cpu$hart0_put_other_req_put,
	       cpu$imem_master_arcache,
	       cpu$imem_master_arqos,
	       cpu$imem_master_arregion,
	       cpu$imem_master_awcache,
	       cpu$imem_master_awqos,
	       cpu$imem_master_awregion,
	       cpu$set_verbosity_verbosity;
  wire [2 : 0] cpu$dmem_master_arprot,
	       cpu$dmem_master_arsize,
	       cpu$dmem_master_awprot,
	       cpu$dmem_master_awsize,
	       cpu$imem_master_arprot,
	       cpu$imem_master_arsize,
	       cpu$imem_master_awprot,
	       cpu$imem_master_awsize;
  wire [1 : 0] cpu$dmem_master_arburst,
	       cpu$dmem_master_awburst,
	       cpu$dmem_master_bresp,
	       cpu$dmem_master_rresp,
	       cpu$dmem_master_ruser,
	       cpu$dmem_master_wuser,
	       cpu$imem_master_arburst,
	       cpu$imem_master_awburst,
	       cpu$imem_master_bresp,
	       cpu$imem_master_rresp,
	       cpu$imem_master_ruser,
	       cpu$imem_master_wuser;
  wire cpu$EN_hart0_csr_mem_server_request_put,
       cpu$EN_hart0_csr_mem_server_response_get,
       cpu$EN_hart0_gpr_mem_server_request_put,
       cpu$EN_hart0_gpr_mem_server_response_get,
       cpu$EN_hart0_put_other_req_put,
       cpu$EN_hart0_server_reset_request_put,
       cpu$EN_hart0_server_reset_response_get,
       cpu$EN_hart0_server_run_halt_request_put,
       cpu$EN_hart0_server_run_halt_response_get,
       cpu$EN_set_verbosity,
       cpu$EN_trace_data_out_get,
       cpu$RDY_hart0_csr_mem_server_request_put,
       cpu$RDY_hart0_csr_mem_server_response_get,
       cpu$RDY_hart0_gpr_mem_server_request_put,
       cpu$RDY_hart0_gpr_mem_server_response_get,
       cpu$RDY_hart0_server_reset_request_put,
       cpu$RDY_hart0_server_reset_response_get,
       cpu$RDY_hart0_server_run_halt_request_put,
       cpu$RDY_hart0_server_run_halt_response_get,
       cpu$RDY_trace_data_out_get,
       cpu$dmem_master_arlock,
       cpu$dmem_master_arready,
       cpu$dmem_master_arvalid,
       cpu$dmem_master_awlock,
       cpu$dmem_master_awready,
       cpu$dmem_master_awvalid,
       cpu$dmem_master_bready,
       cpu$dmem_master_bvalid,
       cpu$dmem_master_rlast,
       cpu$dmem_master_rready,
       cpu$dmem_master_rvalid,
       cpu$dmem_master_wlast,
       cpu$dmem_master_wready,
       cpu$dmem_master_wvalid,
       cpu$hart0_server_reset_request_put,
       cpu$hart0_server_reset_response_get,
       cpu$hart0_server_run_halt_request_put,
       cpu$hart0_server_run_halt_response_get,
       cpu$imem_master_arlock,
       cpu$imem_master_arready,
       cpu$imem_master_arvalid,
       cpu$imem_master_awlock,
       cpu$imem_master_awready,
       cpu$imem_master_awvalid,
       cpu$imem_master_bready,
       cpu$imem_master_bvalid,
       cpu$imem_master_rlast,
       cpu$imem_master_rready,
       cpu$imem_master_rvalid,
       cpu$imem_master_wlast,
       cpu$imem_master_wready,
       cpu$imem_master_wvalid,
       cpu$m_external_interrupt_req_set_not_clear,
       cpu$nmi_req_set_not_clear,
       cpu$s_external_interrupt_req_set_not_clear,
       cpu$software_interrupt_req_set_not_clear,
       cpu$timer_interrupt_req_set_not_clear;

  // ports of submodule cpu_imem_b_buffer_ff
  wire [6 : 0] cpu_imem_b_buffer_ff$D_IN, cpu_imem_b_buffer_ff$D_OUT;
  wire cpu_imem_b_buffer_ff$CLR,
       cpu_imem_b_buffer_ff$DEQ,
       cpu_imem_b_buffer_ff$EMPTY_N,
       cpu_imem_b_buffer_ff$ENQ,
       cpu_imem_b_buffer_ff$FULL_N;

  // ports of submodule cpu_imem_b_buffer_firstValid
  wire cpu_imem_b_buffer_firstValid$D_IN,
       cpu_imem_b_buffer_firstValid$EN,
       cpu_imem_b_buffer_firstValid$Q_OUT;

  // ports of submodule cpu_imem_r_buffer_ff
  wire [137 : 0] cpu_imem_r_buffer_ff$D_IN, cpu_imem_r_buffer_ff$D_OUT;
  wire cpu_imem_r_buffer_ff$CLR,
       cpu_imem_r_buffer_ff$DEQ,
       cpu_imem_r_buffer_ff$EMPTY_N,
       cpu_imem_r_buffer_ff$ENQ,
       cpu_imem_r_buffer_ff$FULL_N;

  // ports of submodule cpu_imem_r_buffer_firstValid
  wire cpu_imem_r_buffer_firstValid$D_IN,
       cpu_imem_r_buffer_firstValid$EN,
       cpu_imem_r_buffer_firstValid$Q_OUT;

  // ports of submodule debug_module
  wire [63 : 0] debug_module$master_araddr,
		debug_module$master_awaddr,
		debug_module$master_rdata,
		debug_module$master_wdata;
  wire [44 : 0] debug_module$hart0_csr_mem_client_request_get;
  wire [37 : 0] debug_module$hart0_gpr_mem_client_request_get;
  wire [32 : 0] debug_module$hart0_csr_mem_client_response_put,
		debug_module$hart0_gpr_mem_client_response_put;
  wire [31 : 0] debug_module$dmi_read_data, debug_module$dmi_write_dm_word;
  wire [7 : 0] debug_module$master_arlen,
	       debug_module$master_awlen,
	       debug_module$master_wstrb;
  wire [6 : 0] debug_module$dmi_read_addr_dm_addr,
	       debug_module$dmi_write_dm_addr;
  wire [3 : 0] debug_module$hart0_get_other_req_get,
	       debug_module$master_arcache,
	       debug_module$master_arid,
	       debug_module$master_arqos,
	       debug_module$master_arregion,
	       debug_module$master_awcache,
	       debug_module$master_awid,
	       debug_module$master_awqos,
	       debug_module$master_awregion,
	       debug_module$master_bid,
	       debug_module$master_rid;
  wire [2 : 0] debug_module$master_arprot,
	       debug_module$master_arsize,
	       debug_module$master_awprot,
	       debug_module$master_awsize;
  wire [1 : 0] debug_module$master_arburst,
	       debug_module$master_awburst,
	       debug_module$master_bresp,
	       debug_module$master_rresp,
	       debug_module$master_ruser,
	       debug_module$master_wuser;
  wire debug_module$EN_dmi_read_addr,
       debug_module$EN_dmi_read_data,
       debug_module$EN_dmi_write,
       debug_module$EN_hart0_client_run_halt_request_get,
       debug_module$EN_hart0_client_run_halt_response_put,
       debug_module$EN_hart0_csr_mem_client_request_get,
       debug_module$EN_hart0_csr_mem_client_response_put,
       debug_module$EN_hart0_get_other_req_get,
       debug_module$EN_hart0_gpr_mem_client_request_get,
       debug_module$EN_hart0_gpr_mem_client_response_put,
       debug_module$EN_hart0_reset_client_request_get,
       debug_module$EN_hart0_reset_client_response_put,
       debug_module$EN_ndm_reset_client_request_get,
       debug_module$EN_ndm_reset_client_response_put,
       debug_module$RDY_dmi_read_addr,
       debug_module$RDY_dmi_read_data,
       debug_module$RDY_dmi_write,
       debug_module$RDY_hart0_client_run_halt_request_get,
       debug_module$RDY_hart0_client_run_halt_response_put,
       debug_module$RDY_hart0_csr_mem_client_request_get,
       debug_module$RDY_hart0_csr_mem_client_response_put,
       debug_module$RDY_hart0_get_other_req_get,
       debug_module$RDY_hart0_gpr_mem_client_request_get,
       debug_module$RDY_hart0_gpr_mem_client_response_put,
       debug_module$RDY_hart0_reset_client_request_get,
       debug_module$RDY_hart0_reset_client_response_put,
       debug_module$RDY_ndm_reset_client_request_get,
       debug_module$RDY_ndm_reset_client_response_put,
       debug_module$hart0_client_run_halt_request_get,
       debug_module$hart0_client_run_halt_response_put,
       debug_module$hart0_reset_client_request_get,
       debug_module$hart0_reset_client_response_put,
       debug_module$master_arlock,
       debug_module$master_arready,
       debug_module$master_arvalid,
       debug_module$master_awlock,
       debug_module$master_awready,
       debug_module$master_awvalid,
       debug_module$master_bready,
       debug_module$master_bvalid,
       debug_module$master_rlast,
       debug_module$master_rready,
       debug_module$master_rvalid,
       debug_module$master_wlast,
       debug_module$master_wready,
       debug_module$master_wvalid,
       debug_module$ndm_reset_client_request_get,
       debug_module$ndm_reset_client_response_put;

  // ports of submodule dm_csr_tap
  wire [233 : 0] dm_csr_tap$trace_data_out_get;
  wire [44 : 0] dm_csr_tap$client_request_get, dm_csr_tap$server_request_put;
  wire [32 : 0] dm_csr_tap$client_response_put,
		dm_csr_tap$server_response_get;
  wire dm_csr_tap$EN_client_request_get,
       dm_csr_tap$EN_client_response_put,
       dm_csr_tap$EN_server_request_put,
       dm_csr_tap$EN_server_response_get,
       dm_csr_tap$EN_trace_data_out_get,
       dm_csr_tap$RDY_client_request_get,
       dm_csr_tap$RDY_client_response_put,
       dm_csr_tap$RDY_server_request_put,
       dm_csr_tap$RDY_server_response_get,
       dm_csr_tap$RDY_trace_data_out_get;

  // ports of submodule dm_gpr_tap_ifc
  wire [233 : 0] dm_gpr_tap_ifc$trace_data_out_get;
  wire [37 : 0] dm_gpr_tap_ifc$client_request_get,
		dm_gpr_tap_ifc$server_request_put;
  wire [32 : 0] dm_gpr_tap_ifc$client_response_put,
		dm_gpr_tap_ifc$server_response_get;
  wire dm_gpr_tap_ifc$EN_client_request_get,
       dm_gpr_tap_ifc$EN_client_response_put,
       dm_gpr_tap_ifc$EN_server_request_put,
       dm_gpr_tap_ifc$EN_server_response_get,
       dm_gpr_tap_ifc$EN_trace_data_out_get,
       dm_gpr_tap_ifc$RDY_client_request_get,
       dm_gpr_tap_ifc$RDY_client_response_put,
       dm_gpr_tap_ifc$RDY_server_request_put,
       dm_gpr_tap_ifc$RDY_server_response_get,
       dm_gpr_tap_ifc$RDY_trace_data_out_get;

  // ports of submodule dm_master_nonsynth_awFF
  wire [96 : 0] dm_master_nonsynth_awFF$D_IN, dm_master_nonsynth_awFF$D_OUT;
  wire dm_master_nonsynth_awFF$CLR,
       dm_master_nonsynth_awFF$DEQ,
       dm_master_nonsynth_awFF$EMPTY_N,
       dm_master_nonsynth_awFF$ENQ,
       dm_master_nonsynth_awFF$FULL_N;

  // ports of submodule dm_master_nonsynth_bufferShim_arff
  wire [96 : 0] dm_master_nonsynth_bufferShim_arff$D_IN,
		dm_master_nonsynth_bufferShim_arff$D_OUT;
  wire dm_master_nonsynth_bufferShim_arff$CLR,
       dm_master_nonsynth_bufferShim_arff$DEQ,
       dm_master_nonsynth_bufferShim_arff$EMPTY_N,
       dm_master_nonsynth_bufferShim_arff$ENQ,
       dm_master_nonsynth_bufferShim_arff$FULL_N;

  // ports of submodule dm_master_nonsynth_bufferShim_awff
  wire [96 : 0] dm_master_nonsynth_bufferShim_awff$D_IN,
		dm_master_nonsynth_bufferShim_awff$D_OUT;
  wire dm_master_nonsynth_bufferShim_awff$CLR,
       dm_master_nonsynth_bufferShim_awff$DEQ,
       dm_master_nonsynth_bufferShim_awff$EMPTY_N,
       dm_master_nonsynth_bufferShim_awff$ENQ,
       dm_master_nonsynth_bufferShim_awff$FULL_N;

  // ports of submodule dm_master_nonsynth_bufferShim_bff
  wire [5 : 0] dm_master_nonsynth_bufferShim_bff$D_IN,
	       dm_master_nonsynth_bufferShim_bff$D_OUT;
  wire dm_master_nonsynth_bufferShim_bff$CLR,
       dm_master_nonsynth_bufferShim_bff$DEQ,
       dm_master_nonsynth_bufferShim_bff$EMPTY_N,
       dm_master_nonsynth_bufferShim_bff$ENQ,
       dm_master_nonsynth_bufferShim_bff$FULL_N;

  // ports of submodule dm_master_nonsynth_bufferShim_rff
  wire [72 : 0] dm_master_nonsynth_bufferShim_rff$D_IN,
		dm_master_nonsynth_bufferShim_rff$D_OUT;
  wire dm_master_nonsynth_bufferShim_rff$CLR,
       dm_master_nonsynth_bufferShim_rff$DEQ,
       dm_master_nonsynth_bufferShim_rff$EMPTY_N,
       dm_master_nonsynth_bufferShim_rff$ENQ,
       dm_master_nonsynth_bufferShim_rff$FULL_N;

  // ports of submodule dm_master_nonsynth_bufferShim_wff
  wire [74 : 0] dm_master_nonsynth_bufferShim_wff$D_IN,
		dm_master_nonsynth_bufferShim_wff$D_OUT;
  wire dm_master_nonsynth_bufferShim_wff$CLR,
       dm_master_nonsynth_bufferShim_wff$DEQ,
       dm_master_nonsynth_bufferShim_wff$EMPTY_N,
       dm_master_nonsynth_bufferShim_wff$ENQ,
       dm_master_nonsynth_bufferShim_wff$FULL_N;

  // ports of submodule dm_master_nonsynth_takeUpperR
  wire dm_master_nonsynth_takeUpperR$CLR,
       dm_master_nonsynth_takeUpperR$DEQ,
       dm_master_nonsynth_takeUpperR$D_IN,
       dm_master_nonsynth_takeUpperR$D_OUT,
       dm_master_nonsynth_takeUpperR$EMPTY_N,
       dm_master_nonsynth_takeUpperR$ENQ,
       dm_master_nonsynth_takeUpperR$FULL_N;

  // ports of submodule dm_master_nonsynth_takeUpperW
  wire dm_master_nonsynth_takeUpperW$CLR,
       dm_master_nonsynth_takeUpperW$DEQ,
       dm_master_nonsynth_takeUpperW$D_IN,
       dm_master_nonsynth_takeUpperW$D_OUT,
       dm_master_nonsynth_takeUpperW$EMPTY_N,
       dm_master_nonsynth_takeUpperW$ENQ,
       dm_master_nonsynth_takeUpperW$FULL_N;

  // ports of submodule dm_mem_tap
  wire [233 : 0] dm_mem_tap$trace_data_out_get;
  wire [63 : 0] dm_mem_tap$master_araddr,
		dm_mem_tap$master_awaddr,
		dm_mem_tap$master_rdata,
		dm_mem_tap$master_wdata,
		dm_mem_tap$slave_araddr,
		dm_mem_tap$slave_awaddr,
		dm_mem_tap$slave_rdata,
		dm_mem_tap$slave_wdata;
  wire [7 : 0] dm_mem_tap$master_arlen,
	       dm_mem_tap$master_awlen,
	       dm_mem_tap$master_wstrb,
	       dm_mem_tap$slave_arlen,
	       dm_mem_tap$slave_awlen,
	       dm_mem_tap$slave_wstrb;
  wire [3 : 0] dm_mem_tap$master_arcache,
	       dm_mem_tap$master_arid,
	       dm_mem_tap$master_arqos,
	       dm_mem_tap$master_arregion,
	       dm_mem_tap$master_awcache,
	       dm_mem_tap$master_awid,
	       dm_mem_tap$master_awqos,
	       dm_mem_tap$master_awregion,
	       dm_mem_tap$master_bid,
	       dm_mem_tap$master_rid,
	       dm_mem_tap$slave_arcache,
	       dm_mem_tap$slave_arid,
	       dm_mem_tap$slave_arqos,
	       dm_mem_tap$slave_arregion,
	       dm_mem_tap$slave_awcache,
	       dm_mem_tap$slave_awid,
	       dm_mem_tap$slave_awqos,
	       dm_mem_tap$slave_awregion,
	       dm_mem_tap$slave_bid,
	       dm_mem_tap$slave_rid;
  wire [2 : 0] dm_mem_tap$master_arprot,
	       dm_mem_tap$master_arsize,
	       dm_mem_tap$master_awprot,
	       dm_mem_tap$master_awsize,
	       dm_mem_tap$slave_arprot,
	       dm_mem_tap$slave_arsize,
	       dm_mem_tap$slave_awprot,
	       dm_mem_tap$slave_awsize;
  wire [1 : 0] dm_mem_tap$master_arburst,
	       dm_mem_tap$master_awburst,
	       dm_mem_tap$master_bresp,
	       dm_mem_tap$master_rresp,
	       dm_mem_tap$master_ruser,
	       dm_mem_tap$master_wuser,
	       dm_mem_tap$slave_arburst,
	       dm_mem_tap$slave_awburst,
	       dm_mem_tap$slave_bresp,
	       dm_mem_tap$slave_rresp,
	       dm_mem_tap$slave_ruser,
	       dm_mem_tap$slave_wuser;
  wire dm_mem_tap$EN_trace_data_out_get,
       dm_mem_tap$RDY_trace_data_out_get,
       dm_mem_tap$master_arlock,
       dm_mem_tap$master_arready,
       dm_mem_tap$master_arvalid,
       dm_mem_tap$master_awlock,
       dm_mem_tap$master_awready,
       dm_mem_tap$master_awvalid,
       dm_mem_tap$master_bready,
       dm_mem_tap$master_bvalid,
       dm_mem_tap$master_rlast,
       dm_mem_tap$master_rready,
       dm_mem_tap$master_rvalid,
       dm_mem_tap$master_wlast,
       dm_mem_tap$master_wready,
       dm_mem_tap$master_wvalid,
       dm_mem_tap$slave_arlock,
       dm_mem_tap$slave_arready,
       dm_mem_tap$slave_arvalid,
       dm_mem_tap$slave_awlock,
       dm_mem_tap$slave_awready,
       dm_mem_tap$slave_awvalid,
       dm_mem_tap$slave_bready,
       dm_mem_tap$slave_bvalid,
       dm_mem_tap$slave_rlast,
       dm_mem_tap$slave_rready,
       dm_mem_tap$slave_rvalid,
       dm_mem_tap$slave_wlast,
       dm_mem_tap$slave_wready,
       dm_mem_tap$slave_wvalid;

  // ports of submodule dm_mem_tap_nosynth_b_buffer_ff
  wire [5 : 0] dm_mem_tap_nosynth_b_buffer_ff$D_IN,
	       dm_mem_tap_nosynth_b_buffer_ff$D_OUT;
  wire dm_mem_tap_nosynth_b_buffer_ff$CLR,
       dm_mem_tap_nosynth_b_buffer_ff$DEQ,
       dm_mem_tap_nosynth_b_buffer_ff$EMPTY_N,
       dm_mem_tap_nosynth_b_buffer_ff$ENQ,
       dm_mem_tap_nosynth_b_buffer_ff$FULL_N;

  // ports of submodule dm_mem_tap_nosynth_b_buffer_firstValid
  wire dm_mem_tap_nosynth_b_buffer_firstValid$D_IN,
       dm_mem_tap_nosynth_b_buffer_firstValid$EN,
       dm_mem_tap_nosynth_b_buffer_firstValid$Q_OUT;

  // ports of submodule dm_mem_tap_nosynth_r_buffer_ff
  wire [72 : 0] dm_mem_tap_nosynth_r_buffer_ff$D_IN,
		dm_mem_tap_nosynth_r_buffer_ff$D_OUT;
  wire dm_mem_tap_nosynth_r_buffer_ff$CLR,
       dm_mem_tap_nosynth_r_buffer_ff$DEQ,
       dm_mem_tap_nosynth_r_buffer_ff$EMPTY_N,
       dm_mem_tap_nosynth_r_buffer_ff$ENQ,
       dm_mem_tap_nosynth_r_buffer_ff$FULL_N;

  // ports of submodule dm_mem_tap_nosynth_r_buffer_firstValid
  wire dm_mem_tap_nosynth_r_buffer_firstValid$D_IN,
       dm_mem_tap_nosynth_r_buffer_firstValid$EN,
       dm_mem_tap_nosynth_r_buffer_firstValid$Q_OUT;

  // ports of submodule f_reset_reqs
  wire f_reset_reqs$CLR,
       f_reset_reqs$DEQ,
       f_reset_reqs$D_IN,
       f_reset_reqs$D_OUT,
       f_reset_reqs$EMPTY_N,
       f_reset_reqs$ENQ,
       f_reset_reqs$FULL_N;

  // ports of submodule f_reset_requestor
  wire f_reset_requestor$CLR,
       f_reset_requestor$DEQ,
       f_reset_requestor$D_IN,
       f_reset_requestor$D_OUT,
       f_reset_requestor$EMPTY_N,
       f_reset_requestor$ENQ,
       f_reset_requestor$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$D_IN,
       f_reset_rsps$D_OUT,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule f_trace_data_merged
  reg [233 : 0] f_trace_data_merged$D_IN;
  wire [233 : 0] f_trace_data_merged$D_OUT;
  wire f_trace_data_merged$CLR,
       f_trace_data_merged$DEQ,
       f_trace_data_merged$EMPTY_N,
       f_trace_data_merged$ENQ,
       f_trace_data_merged$FULL_N;

  // ports of submodule ifcs_0_1_innerReq
  wire [97 : 0] ifcs_0_1_innerReq$D_IN, ifcs_0_1_innerReq$D_OUT;
  wire ifcs_0_1_innerReq$CLR,
       ifcs_0_1_innerReq$DEQ,
       ifcs_0_1_innerReq$EMPTY_N,
       ifcs_0_1_innerReq$ENQ,
       ifcs_0_1_innerReq$FULL_N;

  // ports of submodule ifcs_0_1_innerRoute
  wire [2 : 0] ifcs_0_1_innerRoute$D_IN, ifcs_0_1_innerRoute$D_OUT;
  wire ifcs_0_1_innerRoute$CLR,
       ifcs_0_1_innerRoute$DEQ,
       ifcs_0_1_innerRoute$EMPTY_N,
       ifcs_0_1_innerRoute$ENQ,
       ifcs_0_1_innerRoute$FULL_N;

  // ports of submodule ifcs_0_1_noRouteRsp
  wire [136 : 0] ifcs_0_1_noRouteRsp$D_IN, ifcs_0_1_noRouteRsp$D_OUT;
  wire ifcs_0_1_noRouteRsp$CLR,
       ifcs_0_1_noRouteRsp$DEQ,
       ifcs_0_1_noRouteRsp$EMPTY_N,
       ifcs_0_1_noRouteRsp$ENQ,
       ifcs_0_1_noRouteRsp$FULL_N;

  // ports of submodule ifcs_0_1_routeBack
  wire [1 : 0] ifcs_0_1_routeBack$D_IN, ifcs_0_1_routeBack$D_OUT;
  wire ifcs_0_1_routeBack$CLR,
       ifcs_0_1_routeBack$DEQ,
       ifcs_0_1_routeBack$EMPTY_N,
       ifcs_0_1_routeBack$ENQ,
       ifcs_0_1_routeBack$FULL_N;

  // ports of submodule ifcs_0_1_rspBack
  wire [136 : 0] ifcs_0_1_rspBack$D_IN, ifcs_0_1_rspBack$D_OUT;
  wire ifcs_0_1_rspBack$CLR,
       ifcs_0_1_rspBack$DEQ,
       ifcs_0_1_rspBack$EMPTY_N,
       ifcs_0_1_rspBack$ENQ,
       ifcs_0_1_rspBack$FULL_N;

  // ports of submodule ifcs_0_innerReq
  wire [245 : 0] ifcs_0_innerReq$D_IN, ifcs_0_innerReq$D_OUT;
  wire ifcs_0_innerReq$CLR,
       ifcs_0_innerReq$DEQ,
       ifcs_0_innerReq$EMPTY_N,
       ifcs_0_innerReq$ENQ,
       ifcs_0_innerReq$FULL_N;

  // ports of submodule ifcs_0_innerRoute
  wire [2 : 0] ifcs_0_innerRoute$D_IN, ifcs_0_innerRoute$D_OUT;
  wire ifcs_0_innerRoute$CLR,
       ifcs_0_innerRoute$DEQ,
       ifcs_0_innerRoute$EMPTY_N,
       ifcs_0_innerRoute$ENQ,
       ifcs_0_innerRoute$FULL_N;

  // ports of submodule ifcs_0_noRouteRsp
  wire [5 : 0] ifcs_0_noRouteRsp$D_IN, ifcs_0_noRouteRsp$D_OUT;
  wire ifcs_0_noRouteRsp$CLR,
       ifcs_0_noRouteRsp$DEQ,
       ifcs_0_noRouteRsp$EMPTY_N,
       ifcs_0_noRouteRsp$ENQ,
       ifcs_0_noRouteRsp$FULL_N;

  // ports of submodule ifcs_0_routeBack
  wire [1 : 0] ifcs_0_routeBack$D_IN, ifcs_0_routeBack$D_OUT;
  wire ifcs_0_routeBack$CLR,
       ifcs_0_routeBack$DEQ,
       ifcs_0_routeBack$EMPTY_N,
       ifcs_0_routeBack$ENQ,
       ifcs_0_routeBack$FULL_N;

  // ports of submodule ifcs_0_rspBack
  wire [5 : 0] ifcs_0_rspBack$D_IN, ifcs_0_rspBack$D_OUT;
  wire ifcs_0_rspBack$CLR,
       ifcs_0_rspBack$DEQ,
       ifcs_0_rspBack$EMPTY_N,
       ifcs_0_rspBack$ENQ,
       ifcs_0_rspBack$FULL_N;

  // ports of submodule ifcs_1_1_innerReq
  wire [97 : 0] ifcs_1_1_innerReq$D_IN, ifcs_1_1_innerReq$D_OUT;
  wire ifcs_1_1_innerReq$CLR,
       ifcs_1_1_innerReq$DEQ,
       ifcs_1_1_innerReq$EMPTY_N,
       ifcs_1_1_innerReq$ENQ,
       ifcs_1_1_innerReq$FULL_N;

  // ports of submodule ifcs_1_1_innerRoute
  wire [2 : 0] ifcs_1_1_innerRoute$D_IN, ifcs_1_1_innerRoute$D_OUT;
  wire ifcs_1_1_innerRoute$CLR,
       ifcs_1_1_innerRoute$DEQ,
       ifcs_1_1_innerRoute$EMPTY_N,
       ifcs_1_1_innerRoute$ENQ,
       ifcs_1_1_innerRoute$FULL_N;

  // ports of submodule ifcs_1_1_noRouteRsp
  wire [136 : 0] ifcs_1_1_noRouteRsp$D_IN, ifcs_1_1_noRouteRsp$D_OUT;
  wire ifcs_1_1_noRouteRsp$CLR,
       ifcs_1_1_noRouteRsp$DEQ,
       ifcs_1_1_noRouteRsp$EMPTY_N,
       ifcs_1_1_noRouteRsp$ENQ,
       ifcs_1_1_noRouteRsp$FULL_N;

  // ports of submodule ifcs_1_1_routeBack
  wire [1 : 0] ifcs_1_1_routeBack$D_IN, ifcs_1_1_routeBack$D_OUT;
  wire ifcs_1_1_routeBack$CLR,
       ifcs_1_1_routeBack$DEQ,
       ifcs_1_1_routeBack$EMPTY_N,
       ifcs_1_1_routeBack$ENQ,
       ifcs_1_1_routeBack$FULL_N;

  // ports of submodule ifcs_1_1_rspBack
  wire [136 : 0] ifcs_1_1_rspBack$D_IN, ifcs_1_1_rspBack$D_OUT;
  wire ifcs_1_1_rspBack$CLR,
       ifcs_1_1_rspBack$DEQ,
       ifcs_1_1_rspBack$EMPTY_N,
       ifcs_1_1_rspBack$ENQ,
       ifcs_1_1_rspBack$FULL_N;

  // ports of submodule ifcs_1_innerReq
  wire [245 : 0] ifcs_1_innerReq$D_IN, ifcs_1_innerReq$D_OUT;
  wire ifcs_1_innerReq$CLR,
       ifcs_1_innerReq$DEQ,
       ifcs_1_innerReq$EMPTY_N,
       ifcs_1_innerReq$ENQ,
       ifcs_1_innerReq$FULL_N;

  // ports of submodule ifcs_1_innerRoute
  wire [2 : 0] ifcs_1_innerRoute$D_IN, ifcs_1_innerRoute$D_OUT;
  wire ifcs_1_innerRoute$CLR,
       ifcs_1_innerRoute$DEQ,
       ifcs_1_innerRoute$EMPTY_N,
       ifcs_1_innerRoute$ENQ,
       ifcs_1_innerRoute$FULL_N;

  // ports of submodule ifcs_1_noRouteRsp
  wire [5 : 0] ifcs_1_noRouteRsp$D_IN, ifcs_1_noRouteRsp$D_OUT;
  wire ifcs_1_noRouteRsp$CLR,
       ifcs_1_noRouteRsp$DEQ,
       ifcs_1_noRouteRsp$EMPTY_N,
       ifcs_1_noRouteRsp$ENQ,
       ifcs_1_noRouteRsp$FULL_N;

  // ports of submodule ifcs_1_routeBack
  wire [1 : 0] ifcs_1_routeBack$D_IN, ifcs_1_routeBack$D_OUT;
  wire ifcs_1_routeBack$CLR,
       ifcs_1_routeBack$DEQ,
       ifcs_1_routeBack$EMPTY_N,
       ifcs_1_routeBack$ENQ,
       ifcs_1_routeBack$FULL_N;

  // ports of submodule ifcs_1_rspBack
  wire [5 : 0] ifcs_1_rspBack$D_IN, ifcs_1_rspBack$D_OUT;
  wire ifcs_1_rspBack$CLR,
       ifcs_1_rspBack$DEQ,
       ifcs_1_rspBack$EMPTY_N,
       ifcs_1_rspBack$ENQ,
       ifcs_1_rspBack$FULL_N;

  // ports of submodule ifcs_2_1_routeBack
  wire [1 : 0] ifcs_2_1_routeBack$D_IN, ifcs_2_1_routeBack$D_OUT;
  wire ifcs_2_1_routeBack$CLR,
       ifcs_2_1_routeBack$DEQ,
       ifcs_2_1_routeBack$EMPTY_N,
       ifcs_2_1_routeBack$ENQ,
       ifcs_2_1_routeBack$FULL_N;

  // ports of submodule ifcs_2_1_rspBack
  wire [136 : 0] ifcs_2_1_rspBack$D_IN, ifcs_2_1_rspBack$D_OUT;
  wire ifcs_2_1_rspBack$CLR,
       ifcs_2_1_rspBack$DEQ,
       ifcs_2_1_rspBack$EMPTY_N,
       ifcs_2_1_rspBack$ENQ,
       ifcs_2_1_rspBack$FULL_N;

  // ports of submodule ifcs_2_routeBack
  wire [1 : 0] ifcs_2_routeBack$D_IN, ifcs_2_routeBack$D_OUT;
  wire ifcs_2_routeBack$CLR,
       ifcs_2_routeBack$DEQ,
       ifcs_2_routeBack$EMPTY_N,
       ifcs_2_routeBack$ENQ,
       ifcs_2_routeBack$FULL_N;

  // ports of submodule ifcs_2_rspBack
  wire [5 : 0] ifcs_2_rspBack$D_IN, ifcs_2_rspBack$D_OUT;
  wire ifcs_2_rspBack$CLR,
       ifcs_2_rspBack$DEQ,
       ifcs_2_rspBack$EMPTY_N,
       ifcs_2_rspBack$ENQ,
       ifcs_2_rspBack$FULL_N;

  // ports of submodule msNoSynth_0_b_buffer_ff
  wire [5 : 0] msNoSynth_0_b_buffer_ff$D_IN, msNoSynth_0_b_buffer_ff$D_OUT;
  wire msNoSynth_0_b_buffer_ff$CLR,
       msNoSynth_0_b_buffer_ff$DEQ,
       msNoSynth_0_b_buffer_ff$EMPTY_N,
       msNoSynth_0_b_buffer_ff$ENQ,
       msNoSynth_0_b_buffer_ff$FULL_N;

  // ports of submodule msNoSynth_0_b_buffer_firstValid
  wire msNoSynth_0_b_buffer_firstValid$D_IN,
       msNoSynth_0_b_buffer_firstValid$EN,
       msNoSynth_0_b_buffer_firstValid$Q_OUT;

  // ports of submodule msNoSynth_0_r_buffer_ff
  wire [136 : 0] msNoSynth_0_r_buffer_ff$D_IN, msNoSynth_0_r_buffer_ff$D_OUT;
  wire msNoSynth_0_r_buffer_ff$CLR,
       msNoSynth_0_r_buffer_ff$DEQ,
       msNoSynth_0_r_buffer_ff$EMPTY_N,
       msNoSynth_0_r_buffer_ff$ENQ,
       msNoSynth_0_r_buffer_ff$FULL_N;

  // ports of submodule msNoSynth_0_r_buffer_firstValid
  wire msNoSynth_0_r_buffer_firstValid$D_IN,
       msNoSynth_0_r_buffer_firstValid$EN,
       msNoSynth_0_r_buffer_firstValid$Q_OUT;

  // ports of submodule msNoSynth_1_b_buffer_ff
  wire [5 : 0] msNoSynth_1_b_buffer_ff$D_IN, msNoSynth_1_b_buffer_ff$D_OUT;
  wire msNoSynth_1_b_buffer_ff$CLR,
       msNoSynth_1_b_buffer_ff$DEQ,
       msNoSynth_1_b_buffer_ff$EMPTY_N,
       msNoSynth_1_b_buffer_ff$ENQ,
       msNoSynth_1_b_buffer_ff$FULL_N;

  // ports of submodule msNoSynth_1_b_buffer_firstValid
  wire msNoSynth_1_b_buffer_firstValid$D_IN,
       msNoSynth_1_b_buffer_firstValid$EN,
       msNoSynth_1_b_buffer_firstValid$Q_OUT;

  // ports of submodule msNoSynth_1_r_buffer_ff
  wire [136 : 0] msNoSynth_1_r_buffer_ff$D_IN, msNoSynth_1_r_buffer_ff$D_OUT;
  wire msNoSynth_1_r_buffer_ff$CLR,
       msNoSynth_1_r_buffer_ff$DEQ,
       msNoSynth_1_r_buffer_ff$EMPTY_N,
       msNoSynth_1_r_buffer_ff$ENQ,
       msNoSynth_1_r_buffer_ff$FULL_N;

  // ports of submodule msNoSynth_1_r_buffer_firstValid
  wire msNoSynth_1_r_buffer_firstValid$D_IN,
       msNoSynth_1_r_buffer_firstValid$EN,
       msNoSynth_1_r_buffer_firstValid$Q_OUT;

  // ports of submodule near_mem_io
  wire [127 : 0] near_mem_io$axi4_slave_rdata, near_mem_io$axi4_slave_wdata;
  wire [63 : 0] near_mem_io$axi4_slave_araddr,
		near_mem_io$axi4_slave_awaddr,
		near_mem_io$set_addr_map_addr_base,
		near_mem_io$set_addr_map_addr_lim;
  wire [15 : 0] near_mem_io$axi4_slave_wstrb;
  wire [7 : 0] near_mem_io$axi4_slave_arlen, near_mem_io$axi4_slave_awlen;
  wire [4 : 0] near_mem_io$axi4_slave_arid,
	       near_mem_io$axi4_slave_awid,
	       near_mem_io$axi4_slave_bid,
	       near_mem_io$axi4_slave_rid;
  wire [3 : 0] near_mem_io$axi4_slave_arcache,
	       near_mem_io$axi4_slave_arqos,
	       near_mem_io$axi4_slave_arregion,
	       near_mem_io$axi4_slave_awcache,
	       near_mem_io$axi4_slave_awqos,
	       near_mem_io$axi4_slave_awregion;
  wire [2 : 0] near_mem_io$axi4_slave_arprot,
	       near_mem_io$axi4_slave_arsize,
	       near_mem_io$axi4_slave_awprot,
	       near_mem_io$axi4_slave_awsize;
  wire [1 : 0] near_mem_io$axi4_slave_arburst,
	       near_mem_io$axi4_slave_awburst,
	       near_mem_io$axi4_slave_bresp,
	       near_mem_io$axi4_slave_rresp,
	       near_mem_io$axi4_slave_ruser,
	       near_mem_io$axi4_slave_wuser;
  wire near_mem_io$EN_get_sw_interrupt_req_get,
       near_mem_io$EN_get_timer_interrupt_req_get,
       near_mem_io$EN_server_reset_request_put,
       near_mem_io$EN_server_reset_response_get,
       near_mem_io$EN_set_addr_map,
       near_mem_io$RDY_get_sw_interrupt_req_get,
       near_mem_io$RDY_get_timer_interrupt_req_get,
       near_mem_io$RDY_server_reset_request_put,
       near_mem_io$RDY_server_reset_response_get,
       near_mem_io$axi4_slave_arlock,
       near_mem_io$axi4_slave_arready,
       near_mem_io$axi4_slave_arvalid,
       near_mem_io$axi4_slave_awlock,
       near_mem_io$axi4_slave_awready,
       near_mem_io$axi4_slave_awvalid,
       near_mem_io$axi4_slave_bready,
       near_mem_io$axi4_slave_bvalid,
       near_mem_io$axi4_slave_rlast,
       near_mem_io$axi4_slave_rready,
       near_mem_io$axi4_slave_rvalid,
       near_mem_io$axi4_slave_wlast,
       near_mem_io$axi4_slave_wready,
       near_mem_io$axi4_slave_wvalid,
       near_mem_io$get_sw_interrupt_req_get,
       near_mem_io$get_timer_interrupt_req_get;

  // ports of submodule plic
  wire [127 : 0] plic$axi4_slave_rdata, plic$axi4_slave_wdata;
  wire [63 : 0] plic$axi4_slave_araddr,
		plic$axi4_slave_awaddr,
		plic$set_addr_map_addr_base,
		plic$set_addr_map_addr_lim;
  wire [15 : 0] plic$axi4_slave_wstrb;
  wire [7 : 0] plic$axi4_slave_arlen, plic$axi4_slave_awlen;
  wire [4 : 0] plic$axi4_slave_arid,
	       plic$axi4_slave_awid,
	       plic$axi4_slave_bid,
	       plic$axi4_slave_rid;
  wire [3 : 0] plic$axi4_slave_arcache,
	       plic$axi4_slave_arqos,
	       plic$axi4_slave_arregion,
	       plic$axi4_slave_awcache,
	       plic$axi4_slave_awqos,
	       plic$axi4_slave_awregion,
	       plic$set_verbosity_verbosity;
  wire [2 : 0] plic$axi4_slave_arprot,
	       plic$axi4_slave_arsize,
	       plic$axi4_slave_awprot,
	       plic$axi4_slave_awsize;
  wire [1 : 0] plic$axi4_slave_arburst,
	       plic$axi4_slave_awburst,
	       plic$axi4_slave_bresp,
	       plic$axi4_slave_rresp,
	       plic$axi4_slave_ruser,
	       plic$axi4_slave_wuser;
  wire plic$EN_server_reset_request_put,
       plic$EN_server_reset_response_get,
       plic$EN_set_addr_map,
       plic$EN_set_verbosity,
       plic$EN_show_PLIC_state,
       plic$RDY_server_reset_request_put,
       plic$RDY_server_reset_response_get,
       plic$axi4_slave_arlock,
       plic$axi4_slave_arready,
       plic$axi4_slave_arvalid,
       plic$axi4_slave_awlock,
       plic$axi4_slave_awready,
       plic$axi4_slave_awvalid,
       plic$axi4_slave_bready,
       plic$axi4_slave_bvalid,
       plic$axi4_slave_rlast,
       plic$axi4_slave_rready,
       plic$axi4_slave_rvalid,
       plic$axi4_slave_wlast,
       plic$axi4_slave_wready,
       plic$axi4_slave_wvalid,
       plic$v_sources_0_m_interrupt_req_set_not_clear,
       plic$v_sources_10_m_interrupt_req_set_not_clear,
       plic$v_sources_11_m_interrupt_req_set_not_clear,
       plic$v_sources_12_m_interrupt_req_set_not_clear,
       plic$v_sources_13_m_interrupt_req_set_not_clear,
       plic$v_sources_14_m_interrupt_req_set_not_clear,
       plic$v_sources_15_m_interrupt_req_set_not_clear,
       plic$v_sources_1_m_interrupt_req_set_not_clear,
       plic$v_sources_2_m_interrupt_req_set_not_clear,
       plic$v_sources_3_m_interrupt_req_set_not_clear,
       plic$v_sources_4_m_interrupt_req_set_not_clear,
       plic$v_sources_5_m_interrupt_req_set_not_clear,
       plic$v_sources_6_m_interrupt_req_set_not_clear,
       plic$v_sources_7_m_interrupt_req_set_not_clear,
       plic$v_sources_8_m_interrupt_req_set_not_clear,
       plic$v_sources_9_m_interrupt_req_set_not_clear,
       plic$v_targets_0_m_eip,
       plic$v_targets_1_m_eip;

  // ports of submodule soc_map
  wire [127 : 0] soc_map$m_near_mem_io_addr_range, soc_map$m_plic_addr_range;
  wire [63 : 0] soc_map$m_is_IO_addr_addr,
		soc_map$m_is_mem_addr_addr,
		soc_map$m_is_near_mem_IO_addr_addr;

  // ports of submodule ssNoSynth_0_ar_buffer_ff
  wire [97 : 0] ssNoSynth_0_ar_buffer_ff$D_IN, ssNoSynth_0_ar_buffer_ff$D_OUT;
  wire ssNoSynth_0_ar_buffer_ff$CLR,
       ssNoSynth_0_ar_buffer_ff$DEQ,
       ssNoSynth_0_ar_buffer_ff$EMPTY_N,
       ssNoSynth_0_ar_buffer_ff$ENQ,
       ssNoSynth_0_ar_buffer_ff$FULL_N;

  // ports of submodule ssNoSynth_0_ar_buffer_firstValid
  wire ssNoSynth_0_ar_buffer_firstValid$D_IN,
       ssNoSynth_0_ar_buffer_firstValid$EN,
       ssNoSynth_0_ar_buffer_firstValid$Q_OUT;

  // ports of submodule ssNoSynth_0_aw_buffer_ff
  wire [97 : 0] ssNoSynth_0_aw_buffer_ff$D_IN, ssNoSynth_0_aw_buffer_ff$D_OUT;
  wire ssNoSynth_0_aw_buffer_ff$CLR,
       ssNoSynth_0_aw_buffer_ff$DEQ,
       ssNoSynth_0_aw_buffer_ff$EMPTY_N,
       ssNoSynth_0_aw_buffer_ff$ENQ,
       ssNoSynth_0_aw_buffer_ff$FULL_N;

  // ports of submodule ssNoSynth_0_aw_buffer_firstValid
  wire ssNoSynth_0_aw_buffer_firstValid$D_IN,
       ssNoSynth_0_aw_buffer_firstValid$EN,
       ssNoSynth_0_aw_buffer_firstValid$Q_OUT;

  // ports of submodule ssNoSynth_0_w_buffer_ff
  wire [146 : 0] ssNoSynth_0_w_buffer_ff$D_IN, ssNoSynth_0_w_buffer_ff$D_OUT;
  wire ssNoSynth_0_w_buffer_ff$CLR,
       ssNoSynth_0_w_buffer_ff$DEQ,
       ssNoSynth_0_w_buffer_ff$EMPTY_N,
       ssNoSynth_0_w_buffer_ff$ENQ,
       ssNoSynth_0_w_buffer_ff$FULL_N;

  // ports of submodule ssNoSynth_0_w_buffer_firstValid
  wire ssNoSynth_0_w_buffer_firstValid$D_IN,
       ssNoSynth_0_w_buffer_firstValid$EN,
       ssNoSynth_0_w_buffer_firstValid$Q_OUT;

  // ports of submodule ssNoSynth_1_ar_buffer_ff
  wire [97 : 0] ssNoSynth_1_ar_buffer_ff$D_IN, ssNoSynth_1_ar_buffer_ff$D_OUT;
  wire ssNoSynth_1_ar_buffer_ff$CLR,
       ssNoSynth_1_ar_buffer_ff$DEQ,
       ssNoSynth_1_ar_buffer_ff$EMPTY_N,
       ssNoSynth_1_ar_buffer_ff$ENQ,
       ssNoSynth_1_ar_buffer_ff$FULL_N;

  // ports of submodule ssNoSynth_1_ar_buffer_firstValid
  wire ssNoSynth_1_ar_buffer_firstValid$D_IN,
       ssNoSynth_1_ar_buffer_firstValid$EN,
       ssNoSynth_1_ar_buffer_firstValid$Q_OUT;

  // ports of submodule ssNoSynth_1_aw_buffer_ff
  wire [97 : 0] ssNoSynth_1_aw_buffer_ff$D_IN, ssNoSynth_1_aw_buffer_ff$D_OUT;
  wire ssNoSynth_1_aw_buffer_ff$CLR,
       ssNoSynth_1_aw_buffer_ff$DEQ,
       ssNoSynth_1_aw_buffer_ff$EMPTY_N,
       ssNoSynth_1_aw_buffer_ff$ENQ,
       ssNoSynth_1_aw_buffer_ff$FULL_N;

  // ports of submodule ssNoSynth_1_aw_buffer_firstValid
  wire ssNoSynth_1_aw_buffer_firstValid$D_IN,
       ssNoSynth_1_aw_buffer_firstValid$EN,
       ssNoSynth_1_aw_buffer_firstValid$Q_OUT;

  // ports of submodule ssNoSynth_1_w_buffer_ff
  wire [146 : 0] ssNoSynth_1_w_buffer_ff$D_IN, ssNoSynth_1_w_buffer_ff$D_OUT;
  wire ssNoSynth_1_w_buffer_ff$CLR,
       ssNoSynth_1_w_buffer_ff$DEQ,
       ssNoSynth_1_w_buffer_ff$EMPTY_N,
       ssNoSynth_1_w_buffer_ff$ENQ,
       ssNoSynth_1_w_buffer_ff$FULL_N;

  // ports of submodule ssNoSynth_1_w_buffer_firstValid
  wire ssNoSynth_1_w_buffer_firstValid$D_IN,
       ssNoSynth_1_w_buffer_firstValid$EN,
       ssNoSynth_1_w_buffer_firstValid$Q_OUT;

  // ports of submodule ssNoSynth_2_ar_buffer_ff
  wire [97 : 0] ssNoSynth_2_ar_buffer_ff$D_IN, ssNoSynth_2_ar_buffer_ff$D_OUT;
  wire ssNoSynth_2_ar_buffer_ff$CLR,
       ssNoSynth_2_ar_buffer_ff$DEQ,
       ssNoSynth_2_ar_buffer_ff$EMPTY_N,
       ssNoSynth_2_ar_buffer_ff$ENQ,
       ssNoSynth_2_ar_buffer_ff$FULL_N;

  // ports of submodule ssNoSynth_2_ar_buffer_firstValid
  wire ssNoSynth_2_ar_buffer_firstValid$D_IN,
       ssNoSynth_2_ar_buffer_firstValid$EN,
       ssNoSynth_2_ar_buffer_firstValid$Q_OUT;

  // ports of submodule ssNoSynth_2_aw_buffer_ff
  wire [97 : 0] ssNoSynth_2_aw_buffer_ff$D_IN, ssNoSynth_2_aw_buffer_ff$D_OUT;
  wire ssNoSynth_2_aw_buffer_ff$CLR,
       ssNoSynth_2_aw_buffer_ff$DEQ,
       ssNoSynth_2_aw_buffer_ff$EMPTY_N,
       ssNoSynth_2_aw_buffer_ff$ENQ,
       ssNoSynth_2_aw_buffer_ff$FULL_N;

  // ports of submodule ssNoSynth_2_aw_buffer_firstValid
  wire ssNoSynth_2_aw_buffer_firstValid$D_IN,
       ssNoSynth_2_aw_buffer_firstValid$EN,
       ssNoSynth_2_aw_buffer_firstValid$Q_OUT;

  // ports of submodule ssNoSynth_2_w_buffer_ff
  wire [146 : 0] ssNoSynth_2_w_buffer_ff$D_IN, ssNoSynth_2_w_buffer_ff$D_OUT;
  wire ssNoSynth_2_w_buffer_ff$CLR,
       ssNoSynth_2_w_buffer_ff$DEQ,
       ssNoSynth_2_w_buffer_ff$EMPTY_N,
       ssNoSynth_2_w_buffer_ff$ENQ,
       ssNoSynth_2_w_buffer_ff$FULL_N;

  // ports of submodule ssNoSynth_2_w_buffer_firstValid
  wire ssNoSynth_2_w_buffer_firstValid$D_IN,
       ssNoSynth_2_w_buffer_firstValid$EN,
       ssNoSynth_2_w_buffer_firstValid$Q_OUT;

  // ports of submodule tagController_tmp_limiter
  wire tagController_tmp_limiter$CLR,
       tagController_tmp_limiter$DEQ,
       tagController_tmp_limiter$EMPTY_N,
       tagController_tmp_limiter$ENQ,
       tagController_tmp_limiter$FULL_N;

  // ports of submodule tagController_tmp_newRst
  wire tagController_tmp_newRst$ASSERT_IN, tagController_tmp_newRst$OUT_RST;

  // ports of submodule tagController_tmp_shimMaster_arff
  wire [98 : 0] tagController_tmp_shimMaster_arff$D_IN,
		tagController_tmp_shimMaster_arff$D_OUT;
  wire tagController_tmp_shimMaster_arff$CLR,
       tagController_tmp_shimMaster_arff$DEQ,
       tagController_tmp_shimMaster_arff$EMPTY_N,
       tagController_tmp_shimMaster_arff$ENQ;

  // ports of submodule tagController_tmp_shimMaster_awff
  wire [98 : 0] tagController_tmp_shimMaster_awff$D_IN,
		tagController_tmp_shimMaster_awff$D_OUT;
  wire tagController_tmp_shimMaster_awff$CLR,
       tagController_tmp_shimMaster_awff$DEQ,
       tagController_tmp_shimMaster_awff$EMPTY_N,
       tagController_tmp_shimMaster_awff$ENQ;

  // ports of submodule tagController_tmp_shimMaster_bff
  wire [7 : 0] tagController_tmp_shimMaster_bff$D_IN,
	       tagController_tmp_shimMaster_bff$D_OUT;
  wire tagController_tmp_shimMaster_bff$CLR,
       tagController_tmp_shimMaster_bff$DEQ,
       tagController_tmp_shimMaster_bff$EMPTY_N,
       tagController_tmp_shimMaster_bff$ENQ,
       tagController_tmp_shimMaster_bff$FULL_N;

  // ports of submodule tagController_tmp_shimMaster_rff
  wire [136 : 0] tagController_tmp_shimMaster_rff$D_IN,
		 tagController_tmp_shimMaster_rff$D_OUT;
  wire tagController_tmp_shimMaster_rff$CLR,
       tagController_tmp_shimMaster_rff$DEQ,
       tagController_tmp_shimMaster_rff$EMPTY_N,
       tagController_tmp_shimMaster_rff$ENQ,
       tagController_tmp_shimMaster_rff$FULL_N;

  // ports of submodule tagController_tmp_shimMaster_wff
  wire [144 : 0] tagController_tmp_shimMaster_wff$D_IN,
		 tagController_tmp_shimMaster_wff$D_OUT;
  wire tagController_tmp_shimMaster_wff$CLR,
       tagController_tmp_shimMaster_wff$DEQ,
       tagController_tmp_shimMaster_wff$EMPTY_N,
       tagController_tmp_shimMaster_wff$ENQ;

  // ports of submodule tagController_tmp_shimSlave_arff
  wire [97 : 0] tagController_tmp_shimSlave_arff$D_IN,
		tagController_tmp_shimSlave_arff$D_OUT;
  wire tagController_tmp_shimSlave_arff$CLR,
       tagController_tmp_shimSlave_arff$DEQ,
       tagController_tmp_shimSlave_arff$EMPTY_N,
       tagController_tmp_shimSlave_arff$ENQ,
       tagController_tmp_shimSlave_arff$FULL_N;

  // ports of submodule tagController_tmp_shimSlave_awff
  wire [97 : 0] tagController_tmp_shimSlave_awff$D_IN,
		tagController_tmp_shimSlave_awff$D_OUT;
  wire tagController_tmp_shimSlave_awff$CLR,
       tagController_tmp_shimSlave_awff$DEQ,
       tagController_tmp_shimSlave_awff$EMPTY_N,
       tagController_tmp_shimSlave_awff$ENQ,
       tagController_tmp_shimSlave_awff$FULL_N;

  // ports of submodule tagController_tmp_shimSlave_bff
  wire [6 : 0] tagController_tmp_shimSlave_bff$D_IN,
	       tagController_tmp_shimSlave_bff$D_OUT;
  wire tagController_tmp_shimSlave_bff$CLR,
       tagController_tmp_shimSlave_bff$DEQ,
       tagController_tmp_shimSlave_bff$EMPTY_N,
       tagController_tmp_shimSlave_bff$ENQ;

  // ports of submodule tagController_tmp_shimSlave_rff
  wire [137 : 0] tagController_tmp_shimSlave_rff$D_IN,
		 tagController_tmp_shimSlave_rff$D_OUT;
  wire tagController_tmp_shimSlave_rff$CLR,
       tagController_tmp_shimSlave_rff$DEQ,
       tagController_tmp_shimSlave_rff$EMPTY_N,
       tagController_tmp_shimSlave_rff$ENQ;

  // ports of submodule tagController_tmp_shimSlave_wff
  wire [146 : 0] tagController_tmp_shimSlave_wff$D_IN,
		 tagController_tmp_shimSlave_wff$D_OUT;
  wire tagController_tmp_shimSlave_wff$CLR,
       tagController_tmp_shimSlave_wff$DEQ,
       tagController_tmp_shimSlave_wff$EMPTY_N,
       tagController_tmp_shimSlave_wff$ENQ,
       tagController_tmp_shimSlave_wff$FULL_N;

  // ports of submodule tagController_tmp_tagCon
  wire [205 : 0] tagController_tmp_tagCon$cache_request_put_val,
		 tagController_tmp_tagCon$memory_request_get;
  wire [141 : 0] tagController_tmp_tagCon$cache_response_get,
		 tagController_tmp_tagCon$memory_response_put_val;
  wire tagController_tmp_tagCon$EN_cache_request_put,
       tagController_tmp_tagCon$EN_cache_response_get,
       tagController_tmp_tagCon$EN_memory_request_get,
       tagController_tmp_tagCon$EN_memory_response_put,
       tagController_tmp_tagCon$RDY_cache_request_put,
       tagController_tmp_tagCon$RDY_cache_response_get,
       tagController_tmp_tagCon$RDY_memory_request_get,
       tagController_tmp_tagCon$RDY_memory_response_put;

  // ports of submodule tv_encode
  wire [607 : 0] tv_encode$tv_vb_out_get;
  wire [233 : 0] tv_encode$trace_data_in_put;
  wire tv_encode$EN_reset,
       tv_encode$EN_trace_data_in_put,
       tv_encode$EN_tv_vb_out_get,
       tv_encode$RDY_trace_data_in_put,
       tv_encode$RDY_tv_vb_out_get;

  // rule scheduling signals
  wire CAN_FIRE_RL_ClientServerRequest,
       CAN_FIRE_RL_ClientServerRequest_1,
       CAN_FIRE_RL_ClientServerRequest_2,
       CAN_FIRE_RL_ClientServerRequest_3,
       CAN_FIRE_RL_ClientServerRequest_4,
       CAN_FIRE_RL_ClientServerResponse,
       CAN_FIRE_RL_ClientServerResponse_1,
       CAN_FIRE_RL_ClientServerResponse_2,
       CAN_FIRE_RL_ClientServerResponse_3,
       CAN_FIRE_RL_ClientServerResponse_4,
       CAN_FIRE_RL_arbitrate,
       CAN_FIRE_RL_arbitrate_1,
       CAN_FIRE_RL_arbitrate_2,
       CAN_FIRE_RL_arbitrate_3,
       CAN_FIRE_RL_burst,
       CAN_FIRE_RL_burst_1,
       CAN_FIRE_RL_burst_2,
       CAN_FIRE_RL_burst_3,
       CAN_FIRE_RL_burst_4,
       CAN_FIRE_RL_burst_5,
       CAN_FIRE_RL_burst_6,
       CAN_FIRE_RL_burst_7,
       CAN_FIRE_RL_burst_8,
       CAN_FIRE_RL_burst_9,
       CAN_FIRE_RL_checkSinkReady,
       CAN_FIRE_RL_checkSinkReady_1,
       CAN_FIRE_RL_checkSinkReady_2,
       CAN_FIRE_RL_checkSinkReady_3,
       CAN_FIRE_RL_checkSinkReady_4,
       CAN_FIRE_RL_checkSinkReady_5,
       CAN_FIRE_RL_checkSinkReady_6,
       CAN_FIRE_RL_checkSinkReady_7,
       CAN_FIRE_RL_checkSinkReady_8,
       CAN_FIRE_RL_checkSinkReady_9,
       CAN_FIRE_RL_connect_arflit,
       CAN_FIRE_RL_connect_arready,
       CAN_FIRE_RL_connect_awflit,
       CAN_FIRE_RL_connect_awready,
       CAN_FIRE_RL_connect_bflit,
       CAN_FIRE_RL_connect_bready,
       CAN_FIRE_RL_connect_rflit,
       CAN_FIRE_RL_connect_rready,
       CAN_FIRE_RL_connect_wflit,
       CAN_FIRE_RL_connect_wready,
       CAN_FIRE_RL_cpu_imem_ar_forwardReady,
       CAN_FIRE_RL_cpu_imem_aw_forwardReady,
       CAN_FIRE_RL_cpu_imem_b_buffer_dequeue,
       CAN_FIRE_RL_cpu_imem_b_buffer_enqueue,
       CAN_FIRE_RL_cpu_imem_b_dropFlit,
       CAN_FIRE_RL_cpu_imem_b_forwardFlit,
       CAN_FIRE_RL_cpu_imem_r_buffer_dequeue,
       CAN_FIRE_RL_cpu_imem_r_buffer_enqueue,
       CAN_FIRE_RL_cpu_imem_r_dropFlit,
       CAN_FIRE_RL_cpu_imem_r_forwardFlit,
       CAN_FIRE_RL_cpu_imem_ug_u_ar_doDrop,
       CAN_FIRE_RL_cpu_imem_ug_u_ar_setPeek,
       CAN_FIRE_RL_cpu_imem_ug_u_ar_warnDoDrop,
       CAN_FIRE_RL_cpu_imem_ug_u_aw_doDrop,
       CAN_FIRE_RL_cpu_imem_ug_u_aw_setPeek,
       CAN_FIRE_RL_cpu_imem_ug_u_aw_warnDoDrop,
       CAN_FIRE_RL_cpu_imem_ug_u_b_doPut,
       CAN_FIRE_RL_cpu_imem_ug_u_b_warnDoPut,
       CAN_FIRE_RL_cpu_imem_ug_u_r_doPut,
       CAN_FIRE_RL_cpu_imem_ug_u_r_warnDoPut,
       CAN_FIRE_RL_cpu_imem_ug_u_w_doDrop,
       CAN_FIRE_RL_cpu_imem_ug_u_w_setPeek,
       CAN_FIRE_RL_cpu_imem_ug_u_w_warnDoDrop,
       CAN_FIRE_RL_cpu_imem_w_forwardReady,
       CAN_FIRE_RL_craftReq,
       CAN_FIRE_RL_craftReq_1,
       CAN_FIRE_RL_craftReq_2,
       CAN_FIRE_RL_craftReq_3,
       CAN_FIRE_RL_craftReq_4,
       CAN_FIRE_RL_craftReq_5,
       CAN_FIRE_RL_craftReq_6,
       CAN_FIRE_RL_craftReq_7,
       CAN_FIRE_RL_craftReq_8,
       CAN_FIRE_RL_craftReq_9,
       CAN_FIRE_RL_dm_master_nonsynth_1_mkConnectionGetPut,
       CAN_FIRE_RL_dm_master_nonsynth_2_mkConnectionGetPut,
       CAN_FIRE_RL_dm_master_nonsynth_3_mkConnectionGetPut,
       CAN_FIRE_RL_dm_master_nonsynth_4_mkConnectionGetPut,
       CAN_FIRE_RL_dm_master_nonsynth_canAR,
       CAN_FIRE_RL_dm_master_nonsynth_canAW,
       CAN_FIRE_RL_dm_master_nonsynth_canB,
       CAN_FIRE_RL_dm_master_nonsynth_canR,
       CAN_FIRE_RL_dm_master_nonsynth_canW,
       CAN_FIRE_RL_dm_master_nonsynth_consumeAW,
       CAN_FIRE_RL_dm_master_nonsynth_mkConnectionGetPut,
       CAN_FIRE_RL_dm_mem_tap_nosynth_ar_forwardReady,
       CAN_FIRE_RL_dm_mem_tap_nosynth_aw_forwardReady,
       CAN_FIRE_RL_dm_mem_tap_nosynth_b_buffer_dequeue,
       CAN_FIRE_RL_dm_mem_tap_nosynth_b_buffer_enqueue,
       CAN_FIRE_RL_dm_mem_tap_nosynth_b_dropFlit,
       CAN_FIRE_RL_dm_mem_tap_nosynth_b_forwardFlit,
       CAN_FIRE_RL_dm_mem_tap_nosynth_r_buffer_dequeue,
       CAN_FIRE_RL_dm_mem_tap_nosynth_r_buffer_enqueue,
       CAN_FIRE_RL_dm_mem_tap_nosynth_r_dropFlit,
       CAN_FIRE_RL_dm_mem_tap_nosynth_r_forwardFlit,
       CAN_FIRE_RL_dm_mem_tap_nosynth_w_forwardReady,
       CAN_FIRE_RL_ifcs_0_1_drainFlits,
       CAN_FIRE_RL_ifcs_0_1_drainNoRouteResponse,
       CAN_FIRE_RL_ifcs_0_1_firstFlit,
       CAN_FIRE_RL_ifcs_0_1_firstFlit_1,
       CAN_FIRE_RL_ifcs_0_1_followFlits,
       CAN_FIRE_RL_ifcs_0_1_followFlits_1,
       CAN_FIRE_RL_ifcs_0_1_forwardRsp,
       CAN_FIRE_RL_ifcs_0_1_nonRoutableFlit,
       CAN_FIRE_RL_ifcs_0_1_nonRoutableGenRsp,
       CAN_FIRE_RL_ifcs_0_drainFlits,
       CAN_FIRE_RL_ifcs_0_drainNoRouteResponse,
       CAN_FIRE_RL_ifcs_0_firstFlit,
       CAN_FIRE_RL_ifcs_0_firstFlit_1,
       CAN_FIRE_RL_ifcs_0_followFlits,
       CAN_FIRE_RL_ifcs_0_followFlits_1,
       CAN_FIRE_RL_ifcs_0_forwardRsp,
       CAN_FIRE_RL_ifcs_0_nonRoutableFlit,
       CAN_FIRE_RL_ifcs_0_nonRoutableGenRsp,
       CAN_FIRE_RL_ifcs_1_1_drainFlits,
       CAN_FIRE_RL_ifcs_1_1_drainNoRouteResponse,
       CAN_FIRE_RL_ifcs_1_1_firstFlit,
       CAN_FIRE_RL_ifcs_1_1_firstFlit_1,
       CAN_FIRE_RL_ifcs_1_1_followFlits,
       CAN_FIRE_RL_ifcs_1_1_followFlits_1,
       CAN_FIRE_RL_ifcs_1_1_forwardRsp,
       CAN_FIRE_RL_ifcs_1_1_nonRoutableFlit,
       CAN_FIRE_RL_ifcs_1_1_nonRoutableGenRsp,
       CAN_FIRE_RL_ifcs_1_drainFlits,
       CAN_FIRE_RL_ifcs_1_drainNoRouteResponse,
       CAN_FIRE_RL_ifcs_1_firstFlit,
       CAN_FIRE_RL_ifcs_1_firstFlit_1,
       CAN_FIRE_RL_ifcs_1_followFlits,
       CAN_FIRE_RL_ifcs_1_followFlits_1,
       CAN_FIRE_RL_ifcs_1_forwardRsp,
       CAN_FIRE_RL_ifcs_1_nonRoutableFlit,
       CAN_FIRE_RL_ifcs_1_nonRoutableGenRsp,
       CAN_FIRE_RL_ifcs_2_1_firstFlit,
       CAN_FIRE_RL_ifcs_2_1_followFlits,
       CAN_FIRE_RL_ifcs_2_firstFlit,
       CAN_FIRE_RL_ifcs_2_followFlits,
       CAN_FIRE_RL_merge_cpu_trace_data,
       CAN_FIRE_RL_merge_dm_csr_trace_data,
       CAN_FIRE_RL_merge_dm_gpr_trace_data,
       CAN_FIRE_RL_merge_dm_mem_trace_data,
       CAN_FIRE_RL_merged_0_genFirst,
       CAN_FIRE_RL_merged_0_genOther,
       CAN_FIRE_RL_merged_1_genFirst,
       CAN_FIRE_RL_merged_1_genOther,
       CAN_FIRE_RL_mkConnectionGetPut,
       CAN_FIRE_RL_mkConnectionGetPut_1,
       CAN_FIRE_RL_msNoSynth_0_ar_forwardReady,
       CAN_FIRE_RL_msNoSynth_0_aw_forwardReady,
       CAN_FIRE_RL_msNoSynth_0_b_buffer_dequeue,
       CAN_FIRE_RL_msNoSynth_0_b_buffer_enqueue,
       CAN_FIRE_RL_msNoSynth_0_b_dropFlit,
       CAN_FIRE_RL_msNoSynth_0_b_forwardFlit,
       CAN_FIRE_RL_msNoSynth_0_r_buffer_dequeue,
       CAN_FIRE_RL_msNoSynth_0_r_buffer_enqueue,
       CAN_FIRE_RL_msNoSynth_0_r_dropFlit,
       CAN_FIRE_RL_msNoSynth_0_r_forwardFlit,
       CAN_FIRE_RL_msNoSynth_0_w_forwardReady,
       CAN_FIRE_RL_msNoSynth_1_ar_forwardReady,
       CAN_FIRE_RL_msNoSynth_1_aw_forwardReady,
       CAN_FIRE_RL_msNoSynth_1_b_buffer_dequeue,
       CAN_FIRE_RL_msNoSynth_1_b_buffer_enqueue,
       CAN_FIRE_RL_msNoSynth_1_b_dropFlit,
       CAN_FIRE_RL_msNoSynth_1_b_forwardFlit,
       CAN_FIRE_RL_msNoSynth_1_r_buffer_dequeue,
       CAN_FIRE_RL_msNoSynth_1_r_buffer_enqueue,
       CAN_FIRE_RL_msNoSynth_1_r_dropFlit,
       CAN_FIRE_RL_msNoSynth_1_r_forwardFlit,
       CAN_FIRE_RL_msNoSynth_1_w_forwardReady,
       CAN_FIRE_RL_rl_cpu_hart0_reset_complete,
       CAN_FIRE_RL_rl_cpu_hart0_reset_from_dm_start,
       CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start,
       CAN_FIRE_RL_rl_relay_external_interrupts,
       CAN_FIRE_RL_rl_relay_sw_interrupts,
       CAN_FIRE_RL_rl_relay_timer_interrupts,
       CAN_FIRE_RL_sink_selected,
       CAN_FIRE_RL_sink_selected_1,
       CAN_FIRE_RL_sink_selected_2,
       CAN_FIRE_RL_sink_selected_3,
       CAN_FIRE_RL_sink_selected_4,
       CAN_FIRE_RL_sink_selected_5,
       CAN_FIRE_RL_sink_selected_6,
       CAN_FIRE_RL_sink_selected_7,
       CAN_FIRE_RL_sink_selected_8,
       CAN_FIRE_RL_sink_selected_9,
       CAN_FIRE_RL_source_selected,
       CAN_FIRE_RL_source_selected_1,
       CAN_FIRE_RL_source_selected_2,
       CAN_FIRE_RL_source_selected_3,
       CAN_FIRE_RL_source_selected_4,
       CAN_FIRE_RL_source_selected_5,
       CAN_FIRE_RL_source_selected_6,
       CAN_FIRE_RL_source_selected_7,
       CAN_FIRE_RL_source_selected_8,
       CAN_FIRE_RL_source_selected_9,
       CAN_FIRE_RL_split_0_putFirst,
       CAN_FIRE_RL_split_0_putOther,
       CAN_FIRE_RL_split_1_putFirst,
       CAN_FIRE_RL_split_1_putOther,
       CAN_FIRE_RL_split_2_putFirst,
       CAN_FIRE_RL_split_2_putOther,
       CAN_FIRE_RL_ssNoSynth_0_ar_buffer_dequeue,
       CAN_FIRE_RL_ssNoSynth_0_ar_buffer_enqueue,
       CAN_FIRE_RL_ssNoSynth_0_ar_dropFlit,
       CAN_FIRE_RL_ssNoSynth_0_ar_forwardFlit,
       CAN_FIRE_RL_ssNoSynth_0_aw_buffer_dequeue,
       CAN_FIRE_RL_ssNoSynth_0_aw_buffer_enqueue,
       CAN_FIRE_RL_ssNoSynth_0_aw_dropFlit,
       CAN_FIRE_RL_ssNoSynth_0_aw_forwardFlit,
       CAN_FIRE_RL_ssNoSynth_0_b_forwardReady,
       CAN_FIRE_RL_ssNoSynth_0_r_forwardReady,
       CAN_FIRE_RL_ssNoSynth_0_w_buffer_dequeue,
       CAN_FIRE_RL_ssNoSynth_0_w_buffer_enqueue,
       CAN_FIRE_RL_ssNoSynth_0_w_dropFlit,
       CAN_FIRE_RL_ssNoSynth_0_w_forwardFlit,
       CAN_FIRE_RL_ssNoSynth_1_ar_buffer_dequeue,
       CAN_FIRE_RL_ssNoSynth_1_ar_buffer_enqueue,
       CAN_FIRE_RL_ssNoSynth_1_ar_dropFlit,
       CAN_FIRE_RL_ssNoSynth_1_ar_forwardFlit,
       CAN_FIRE_RL_ssNoSynth_1_aw_buffer_dequeue,
       CAN_FIRE_RL_ssNoSynth_1_aw_buffer_enqueue,
       CAN_FIRE_RL_ssNoSynth_1_aw_dropFlit,
       CAN_FIRE_RL_ssNoSynth_1_aw_forwardFlit,
       CAN_FIRE_RL_ssNoSynth_1_b_forwardReady,
       CAN_FIRE_RL_ssNoSynth_1_r_forwardReady,
       CAN_FIRE_RL_ssNoSynth_1_w_buffer_dequeue,
       CAN_FIRE_RL_ssNoSynth_1_w_buffer_enqueue,
       CAN_FIRE_RL_ssNoSynth_1_w_dropFlit,
       CAN_FIRE_RL_ssNoSynth_1_w_forwardFlit,
       CAN_FIRE_RL_ssNoSynth_2_ar_buffer_dequeue,
       CAN_FIRE_RL_ssNoSynth_2_ar_buffer_enqueue,
       CAN_FIRE_RL_ssNoSynth_2_ar_dropFlit,
       CAN_FIRE_RL_ssNoSynth_2_ar_forwardFlit,
       CAN_FIRE_RL_ssNoSynth_2_aw_buffer_dequeue,
       CAN_FIRE_RL_ssNoSynth_2_aw_buffer_enqueue,
       CAN_FIRE_RL_ssNoSynth_2_aw_dropFlit,
       CAN_FIRE_RL_ssNoSynth_2_aw_forwardFlit,
       CAN_FIRE_RL_ssNoSynth_2_b_forwardReady,
       CAN_FIRE_RL_ssNoSynth_2_r_forwardReady,
       CAN_FIRE_RL_ssNoSynth_2_w_buffer_dequeue,
       CAN_FIRE_RL_ssNoSynth_2_w_buffer_enqueue,
       CAN_FIRE_RL_ssNoSynth_2_w_dropFlit,
       CAN_FIRE_RL_ssNoSynth_2_w_forwardFlit,
       CAN_FIRE_RL_tagController_tmp_passCacheRead,
       CAN_FIRE_RL_tagController_tmp_passCacheResponse,
       CAN_FIRE_RL_tagController_tmp_passCacheWrite,
       CAN_FIRE_RL_tagController_tmp_passMemoryRequest,
       CAN_FIRE_RL_tagController_tmp_passMemoryResponseRead,
       CAN_FIRE_RL_tagController_tmp_passMemoryResponseWrite,
       CAN_FIRE___me_check_155,
       CAN_FIRE___me_check_156,
       CAN_FIRE___me_check_157,
       CAN_FIRE___me_check_159,
       CAN_FIRE___me_check_162,
       CAN_FIRE___me_check_163,
       CAN_FIRE___me_check_164,
       CAN_FIRE___me_check_166,
       CAN_FIRE___me_check_169,
       CAN_FIRE___me_check_171,
       CAN_FIRE___me_check_173,
       CAN_FIRE___me_check_181,
       CAN_FIRE___me_check_183,
       CAN_FIRE___me_check_185,
       CAN_FIRE___me_check_194,
       CAN_FIRE___me_check_196,
       CAN_FIRE___me_check_198,
       CAN_FIRE___me_check_200,
       CAN_FIRE___me_check_202,
       CAN_FIRE___me_check_203,
       CAN_FIRE___me_check_204,
       CAN_FIRE___me_check_206,
       CAN_FIRE___me_check_209,
       CAN_FIRE___me_check_210,
       CAN_FIRE___me_check_211,
       CAN_FIRE___me_check_213,
       CAN_FIRE___me_check_216,
       CAN_FIRE___me_check_218,
       CAN_FIRE___me_check_220,
       CAN_FIRE___me_check_228,
       CAN_FIRE___me_check_230,
       CAN_FIRE___me_check_232,
       CAN_FIRE___me_check_241,
       CAN_FIRE___me_check_243,
       CAN_FIRE___me_check_245,
       CAN_FIRE___me_check_247,
       CAN_FIRE_core_external_interrupt_sources_0_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_10_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_11_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_12_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_13_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_14_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_15_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_1_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_2_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_3_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_4_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_5_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_6_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_7_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_8_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_9_m_interrupt_req,
       CAN_FIRE_cpu_dmem_master_ar_arready,
       CAN_FIRE_cpu_dmem_master_aw_awready,
       CAN_FIRE_cpu_dmem_master_b_bflit,
       CAN_FIRE_cpu_dmem_master_r_rflit,
       CAN_FIRE_cpu_dmem_master_w_wready,
       CAN_FIRE_cpu_imem_master_ar_arready,
       CAN_FIRE_cpu_imem_master_aw_awready,
       CAN_FIRE_cpu_imem_master_b_bflit,
       CAN_FIRE_cpu_imem_master_r_rflit,
       CAN_FIRE_cpu_imem_master_w_wready,
       CAN_FIRE_cpu_reset_server_request_put,
       CAN_FIRE_cpu_reset_server_response_get,
       CAN_FIRE_dm_dmi_read_addr,
       CAN_FIRE_dm_dmi_read_data,
       CAN_FIRE_dm_dmi_write,
       CAN_FIRE_ndm_reset_client_request_get,
       CAN_FIRE_ndm_reset_client_response_put,
       CAN_FIRE_nmi_req,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_tv_verifier_info_get_get,
       WILL_FIRE_RL_ClientServerRequest,
       WILL_FIRE_RL_ClientServerRequest_1,
       WILL_FIRE_RL_ClientServerRequest_2,
       WILL_FIRE_RL_ClientServerRequest_3,
       WILL_FIRE_RL_ClientServerRequest_4,
       WILL_FIRE_RL_ClientServerResponse,
       WILL_FIRE_RL_ClientServerResponse_1,
       WILL_FIRE_RL_ClientServerResponse_2,
       WILL_FIRE_RL_ClientServerResponse_3,
       WILL_FIRE_RL_ClientServerResponse_4,
       WILL_FIRE_RL_arbitrate,
       WILL_FIRE_RL_arbitrate_1,
       WILL_FIRE_RL_arbitrate_2,
       WILL_FIRE_RL_arbitrate_3,
       WILL_FIRE_RL_burst,
       WILL_FIRE_RL_burst_1,
       WILL_FIRE_RL_burst_2,
       WILL_FIRE_RL_burst_3,
       WILL_FIRE_RL_burst_4,
       WILL_FIRE_RL_burst_5,
       WILL_FIRE_RL_burst_6,
       WILL_FIRE_RL_burst_7,
       WILL_FIRE_RL_burst_8,
       WILL_FIRE_RL_burst_9,
       WILL_FIRE_RL_checkSinkReady,
       WILL_FIRE_RL_checkSinkReady_1,
       WILL_FIRE_RL_checkSinkReady_2,
       WILL_FIRE_RL_checkSinkReady_3,
       WILL_FIRE_RL_checkSinkReady_4,
       WILL_FIRE_RL_checkSinkReady_5,
       WILL_FIRE_RL_checkSinkReady_6,
       WILL_FIRE_RL_checkSinkReady_7,
       WILL_FIRE_RL_checkSinkReady_8,
       WILL_FIRE_RL_checkSinkReady_9,
       WILL_FIRE_RL_connect_arflit,
       WILL_FIRE_RL_connect_arready,
       WILL_FIRE_RL_connect_awflit,
       WILL_FIRE_RL_connect_awready,
       WILL_FIRE_RL_connect_bflit,
       WILL_FIRE_RL_connect_bready,
       WILL_FIRE_RL_connect_rflit,
       WILL_FIRE_RL_connect_rready,
       WILL_FIRE_RL_connect_wflit,
       WILL_FIRE_RL_connect_wready,
       WILL_FIRE_RL_cpu_imem_ar_forwardReady,
       WILL_FIRE_RL_cpu_imem_aw_forwardReady,
       WILL_FIRE_RL_cpu_imem_b_buffer_dequeue,
       WILL_FIRE_RL_cpu_imem_b_buffer_enqueue,
       WILL_FIRE_RL_cpu_imem_b_dropFlit,
       WILL_FIRE_RL_cpu_imem_b_forwardFlit,
       WILL_FIRE_RL_cpu_imem_r_buffer_dequeue,
       WILL_FIRE_RL_cpu_imem_r_buffer_enqueue,
       WILL_FIRE_RL_cpu_imem_r_dropFlit,
       WILL_FIRE_RL_cpu_imem_r_forwardFlit,
       WILL_FIRE_RL_cpu_imem_ug_u_ar_doDrop,
       WILL_FIRE_RL_cpu_imem_ug_u_ar_setPeek,
       WILL_FIRE_RL_cpu_imem_ug_u_ar_warnDoDrop,
       WILL_FIRE_RL_cpu_imem_ug_u_aw_doDrop,
       WILL_FIRE_RL_cpu_imem_ug_u_aw_setPeek,
       WILL_FIRE_RL_cpu_imem_ug_u_aw_warnDoDrop,
       WILL_FIRE_RL_cpu_imem_ug_u_b_doPut,
       WILL_FIRE_RL_cpu_imem_ug_u_b_warnDoPut,
       WILL_FIRE_RL_cpu_imem_ug_u_r_doPut,
       WILL_FIRE_RL_cpu_imem_ug_u_r_warnDoPut,
       WILL_FIRE_RL_cpu_imem_ug_u_w_doDrop,
       WILL_FIRE_RL_cpu_imem_ug_u_w_setPeek,
       WILL_FIRE_RL_cpu_imem_ug_u_w_warnDoDrop,
       WILL_FIRE_RL_cpu_imem_w_forwardReady,
       WILL_FIRE_RL_craftReq,
       WILL_FIRE_RL_craftReq_1,
       WILL_FIRE_RL_craftReq_2,
       WILL_FIRE_RL_craftReq_3,
       WILL_FIRE_RL_craftReq_4,
       WILL_FIRE_RL_craftReq_5,
       WILL_FIRE_RL_craftReq_6,
       WILL_FIRE_RL_craftReq_7,
       WILL_FIRE_RL_craftReq_8,
       WILL_FIRE_RL_craftReq_9,
       WILL_FIRE_RL_dm_master_nonsynth_1_mkConnectionGetPut,
       WILL_FIRE_RL_dm_master_nonsynth_2_mkConnectionGetPut,
       WILL_FIRE_RL_dm_master_nonsynth_3_mkConnectionGetPut,
       WILL_FIRE_RL_dm_master_nonsynth_4_mkConnectionGetPut,
       WILL_FIRE_RL_dm_master_nonsynth_canAR,
       WILL_FIRE_RL_dm_master_nonsynth_canAW,
       WILL_FIRE_RL_dm_master_nonsynth_canB,
       WILL_FIRE_RL_dm_master_nonsynth_canR,
       WILL_FIRE_RL_dm_master_nonsynth_canW,
       WILL_FIRE_RL_dm_master_nonsynth_consumeAW,
       WILL_FIRE_RL_dm_master_nonsynth_mkConnectionGetPut,
       WILL_FIRE_RL_dm_mem_tap_nosynth_ar_forwardReady,
       WILL_FIRE_RL_dm_mem_tap_nosynth_aw_forwardReady,
       WILL_FIRE_RL_dm_mem_tap_nosynth_b_buffer_dequeue,
       WILL_FIRE_RL_dm_mem_tap_nosynth_b_buffer_enqueue,
       WILL_FIRE_RL_dm_mem_tap_nosynth_b_dropFlit,
       WILL_FIRE_RL_dm_mem_tap_nosynth_b_forwardFlit,
       WILL_FIRE_RL_dm_mem_tap_nosynth_r_buffer_dequeue,
       WILL_FIRE_RL_dm_mem_tap_nosynth_r_buffer_enqueue,
       WILL_FIRE_RL_dm_mem_tap_nosynth_r_dropFlit,
       WILL_FIRE_RL_dm_mem_tap_nosynth_r_forwardFlit,
       WILL_FIRE_RL_dm_mem_tap_nosynth_w_forwardReady,
       WILL_FIRE_RL_ifcs_0_1_drainFlits,
       WILL_FIRE_RL_ifcs_0_1_drainNoRouteResponse,
       WILL_FIRE_RL_ifcs_0_1_firstFlit,
       WILL_FIRE_RL_ifcs_0_1_firstFlit_1,
       WILL_FIRE_RL_ifcs_0_1_followFlits,
       WILL_FIRE_RL_ifcs_0_1_followFlits_1,
       WILL_FIRE_RL_ifcs_0_1_forwardRsp,
       WILL_FIRE_RL_ifcs_0_1_nonRoutableFlit,
       WILL_FIRE_RL_ifcs_0_1_nonRoutableGenRsp,
       WILL_FIRE_RL_ifcs_0_drainFlits,
       WILL_FIRE_RL_ifcs_0_drainNoRouteResponse,
       WILL_FIRE_RL_ifcs_0_firstFlit,
       WILL_FIRE_RL_ifcs_0_firstFlit_1,
       WILL_FIRE_RL_ifcs_0_followFlits,
       WILL_FIRE_RL_ifcs_0_followFlits_1,
       WILL_FIRE_RL_ifcs_0_forwardRsp,
       WILL_FIRE_RL_ifcs_0_nonRoutableFlit,
       WILL_FIRE_RL_ifcs_0_nonRoutableGenRsp,
       WILL_FIRE_RL_ifcs_1_1_drainFlits,
       WILL_FIRE_RL_ifcs_1_1_drainNoRouteResponse,
       WILL_FIRE_RL_ifcs_1_1_firstFlit,
       WILL_FIRE_RL_ifcs_1_1_firstFlit_1,
       WILL_FIRE_RL_ifcs_1_1_followFlits,
       WILL_FIRE_RL_ifcs_1_1_followFlits_1,
       WILL_FIRE_RL_ifcs_1_1_forwardRsp,
       WILL_FIRE_RL_ifcs_1_1_nonRoutableFlit,
       WILL_FIRE_RL_ifcs_1_1_nonRoutableGenRsp,
       WILL_FIRE_RL_ifcs_1_drainFlits,
       WILL_FIRE_RL_ifcs_1_drainNoRouteResponse,
       WILL_FIRE_RL_ifcs_1_firstFlit,
       WILL_FIRE_RL_ifcs_1_firstFlit_1,
       WILL_FIRE_RL_ifcs_1_followFlits,
       WILL_FIRE_RL_ifcs_1_followFlits_1,
       WILL_FIRE_RL_ifcs_1_forwardRsp,
       WILL_FIRE_RL_ifcs_1_nonRoutableFlit,
       WILL_FIRE_RL_ifcs_1_nonRoutableGenRsp,
       WILL_FIRE_RL_ifcs_2_1_firstFlit,
       WILL_FIRE_RL_ifcs_2_1_followFlits,
       WILL_FIRE_RL_ifcs_2_firstFlit,
       WILL_FIRE_RL_ifcs_2_followFlits,
       WILL_FIRE_RL_merge_cpu_trace_data,
       WILL_FIRE_RL_merge_dm_csr_trace_data,
       WILL_FIRE_RL_merge_dm_gpr_trace_data,
       WILL_FIRE_RL_merge_dm_mem_trace_data,
       WILL_FIRE_RL_merged_0_genFirst,
       WILL_FIRE_RL_merged_0_genOther,
       WILL_FIRE_RL_merged_1_genFirst,
       WILL_FIRE_RL_merged_1_genOther,
       WILL_FIRE_RL_mkConnectionGetPut,
       WILL_FIRE_RL_mkConnectionGetPut_1,
       WILL_FIRE_RL_msNoSynth_0_ar_forwardReady,
       WILL_FIRE_RL_msNoSynth_0_aw_forwardReady,
       WILL_FIRE_RL_msNoSynth_0_b_buffer_dequeue,
       WILL_FIRE_RL_msNoSynth_0_b_buffer_enqueue,
       WILL_FIRE_RL_msNoSynth_0_b_dropFlit,
       WILL_FIRE_RL_msNoSynth_0_b_forwardFlit,
       WILL_FIRE_RL_msNoSynth_0_r_buffer_dequeue,
       WILL_FIRE_RL_msNoSynth_0_r_buffer_enqueue,
       WILL_FIRE_RL_msNoSynth_0_r_dropFlit,
       WILL_FIRE_RL_msNoSynth_0_r_forwardFlit,
       WILL_FIRE_RL_msNoSynth_0_w_forwardReady,
       WILL_FIRE_RL_msNoSynth_1_ar_forwardReady,
       WILL_FIRE_RL_msNoSynth_1_aw_forwardReady,
       WILL_FIRE_RL_msNoSynth_1_b_buffer_dequeue,
       WILL_FIRE_RL_msNoSynth_1_b_buffer_enqueue,
       WILL_FIRE_RL_msNoSynth_1_b_dropFlit,
       WILL_FIRE_RL_msNoSynth_1_b_forwardFlit,
       WILL_FIRE_RL_msNoSynth_1_r_buffer_dequeue,
       WILL_FIRE_RL_msNoSynth_1_r_buffer_enqueue,
       WILL_FIRE_RL_msNoSynth_1_r_dropFlit,
       WILL_FIRE_RL_msNoSynth_1_r_forwardFlit,
       WILL_FIRE_RL_msNoSynth_1_w_forwardReady,
       WILL_FIRE_RL_rl_cpu_hart0_reset_complete,
       WILL_FIRE_RL_rl_cpu_hart0_reset_from_dm_start,
       WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start,
       WILL_FIRE_RL_rl_relay_external_interrupts,
       WILL_FIRE_RL_rl_relay_sw_interrupts,
       WILL_FIRE_RL_rl_relay_timer_interrupts,
       WILL_FIRE_RL_sink_selected,
       WILL_FIRE_RL_sink_selected_1,
       WILL_FIRE_RL_sink_selected_2,
       WILL_FIRE_RL_sink_selected_3,
       WILL_FIRE_RL_sink_selected_4,
       WILL_FIRE_RL_sink_selected_5,
       WILL_FIRE_RL_sink_selected_6,
       WILL_FIRE_RL_sink_selected_7,
       WILL_FIRE_RL_sink_selected_8,
       WILL_FIRE_RL_sink_selected_9,
       WILL_FIRE_RL_source_selected,
       WILL_FIRE_RL_source_selected_1,
       WILL_FIRE_RL_source_selected_2,
       WILL_FIRE_RL_source_selected_3,
       WILL_FIRE_RL_source_selected_4,
       WILL_FIRE_RL_source_selected_5,
       WILL_FIRE_RL_source_selected_6,
       WILL_FIRE_RL_source_selected_7,
       WILL_FIRE_RL_source_selected_8,
       WILL_FIRE_RL_source_selected_9,
       WILL_FIRE_RL_split_0_putFirst,
       WILL_FIRE_RL_split_0_putOther,
       WILL_FIRE_RL_split_1_putFirst,
       WILL_FIRE_RL_split_1_putOther,
       WILL_FIRE_RL_split_2_putFirst,
       WILL_FIRE_RL_split_2_putOther,
       WILL_FIRE_RL_ssNoSynth_0_ar_buffer_dequeue,
       WILL_FIRE_RL_ssNoSynth_0_ar_buffer_enqueue,
       WILL_FIRE_RL_ssNoSynth_0_ar_dropFlit,
       WILL_FIRE_RL_ssNoSynth_0_ar_forwardFlit,
       WILL_FIRE_RL_ssNoSynth_0_aw_buffer_dequeue,
       WILL_FIRE_RL_ssNoSynth_0_aw_buffer_enqueue,
       WILL_FIRE_RL_ssNoSynth_0_aw_dropFlit,
       WILL_FIRE_RL_ssNoSynth_0_aw_forwardFlit,
       WILL_FIRE_RL_ssNoSynth_0_b_forwardReady,
       WILL_FIRE_RL_ssNoSynth_0_r_forwardReady,
       WILL_FIRE_RL_ssNoSynth_0_w_buffer_dequeue,
       WILL_FIRE_RL_ssNoSynth_0_w_buffer_enqueue,
       WILL_FIRE_RL_ssNoSynth_0_w_dropFlit,
       WILL_FIRE_RL_ssNoSynth_0_w_forwardFlit,
       WILL_FIRE_RL_ssNoSynth_1_ar_buffer_dequeue,
       WILL_FIRE_RL_ssNoSynth_1_ar_buffer_enqueue,
       WILL_FIRE_RL_ssNoSynth_1_ar_dropFlit,
       WILL_FIRE_RL_ssNoSynth_1_ar_forwardFlit,
       WILL_FIRE_RL_ssNoSynth_1_aw_buffer_dequeue,
       WILL_FIRE_RL_ssNoSynth_1_aw_buffer_enqueue,
       WILL_FIRE_RL_ssNoSynth_1_aw_dropFlit,
       WILL_FIRE_RL_ssNoSynth_1_aw_forwardFlit,
       WILL_FIRE_RL_ssNoSynth_1_b_forwardReady,
       WILL_FIRE_RL_ssNoSynth_1_r_forwardReady,
       WILL_FIRE_RL_ssNoSynth_1_w_buffer_dequeue,
       WILL_FIRE_RL_ssNoSynth_1_w_buffer_enqueue,
       WILL_FIRE_RL_ssNoSynth_1_w_dropFlit,
       WILL_FIRE_RL_ssNoSynth_1_w_forwardFlit,
       WILL_FIRE_RL_ssNoSynth_2_ar_buffer_dequeue,
       WILL_FIRE_RL_ssNoSynth_2_ar_buffer_enqueue,
       WILL_FIRE_RL_ssNoSynth_2_ar_dropFlit,
       WILL_FIRE_RL_ssNoSynth_2_ar_forwardFlit,
       WILL_FIRE_RL_ssNoSynth_2_aw_buffer_dequeue,
       WILL_FIRE_RL_ssNoSynth_2_aw_buffer_enqueue,
       WILL_FIRE_RL_ssNoSynth_2_aw_dropFlit,
       WILL_FIRE_RL_ssNoSynth_2_aw_forwardFlit,
       WILL_FIRE_RL_ssNoSynth_2_b_forwardReady,
       WILL_FIRE_RL_ssNoSynth_2_r_forwardReady,
       WILL_FIRE_RL_ssNoSynth_2_w_buffer_dequeue,
       WILL_FIRE_RL_ssNoSynth_2_w_buffer_enqueue,
       WILL_FIRE_RL_ssNoSynth_2_w_dropFlit,
       WILL_FIRE_RL_ssNoSynth_2_w_forwardFlit,
       WILL_FIRE_RL_tagController_tmp_passCacheRead,
       WILL_FIRE_RL_tagController_tmp_passCacheResponse,
       WILL_FIRE_RL_tagController_tmp_passCacheWrite,
       WILL_FIRE_RL_tagController_tmp_passMemoryRequest,
       WILL_FIRE_RL_tagController_tmp_passMemoryResponseRead,
       WILL_FIRE_RL_tagController_tmp_passMemoryResponseWrite,
       WILL_FIRE___me_check_155,
       WILL_FIRE___me_check_156,
       WILL_FIRE___me_check_157,
       WILL_FIRE___me_check_159,
       WILL_FIRE___me_check_162,
       WILL_FIRE___me_check_163,
       WILL_FIRE___me_check_164,
       WILL_FIRE___me_check_166,
       WILL_FIRE___me_check_169,
       WILL_FIRE___me_check_171,
       WILL_FIRE___me_check_173,
       WILL_FIRE___me_check_181,
       WILL_FIRE___me_check_183,
       WILL_FIRE___me_check_185,
       WILL_FIRE___me_check_194,
       WILL_FIRE___me_check_196,
       WILL_FIRE___me_check_198,
       WILL_FIRE___me_check_200,
       WILL_FIRE___me_check_202,
       WILL_FIRE___me_check_203,
       WILL_FIRE___me_check_204,
       WILL_FIRE___me_check_206,
       WILL_FIRE___me_check_209,
       WILL_FIRE___me_check_210,
       WILL_FIRE___me_check_211,
       WILL_FIRE___me_check_213,
       WILL_FIRE___me_check_216,
       WILL_FIRE___me_check_218,
       WILL_FIRE___me_check_220,
       WILL_FIRE___me_check_228,
       WILL_FIRE___me_check_230,
       WILL_FIRE___me_check_232,
       WILL_FIRE___me_check_241,
       WILL_FIRE___me_check_243,
       WILL_FIRE___me_check_245,
       WILL_FIRE___me_check_247,
       WILL_FIRE_core_external_interrupt_sources_0_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_10_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_11_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_12_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_13_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_14_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_15_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_1_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_2_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_3_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_4_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_5_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_6_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_7_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_8_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_9_m_interrupt_req,
       WILL_FIRE_cpu_dmem_master_ar_arready,
       WILL_FIRE_cpu_dmem_master_aw_awready,
       WILL_FIRE_cpu_dmem_master_b_bflit,
       WILL_FIRE_cpu_dmem_master_r_rflit,
       WILL_FIRE_cpu_dmem_master_w_wready,
       WILL_FIRE_cpu_imem_master_ar_arready,
       WILL_FIRE_cpu_imem_master_aw_awready,
       WILL_FIRE_cpu_imem_master_b_bflit,
       WILL_FIRE_cpu_imem_master_r_rflit,
       WILL_FIRE_cpu_imem_master_w_wready,
       WILL_FIRE_cpu_reset_server_request_put,
       WILL_FIRE_cpu_reset_server_response_get,
       WILL_FIRE_dm_dmi_read_addr,
       WILL_FIRE_dm_dmi_read_data,
       WILL_FIRE_dm_dmi_write,
       WILL_FIRE_ndm_reset_client_request_get,
       WILL_FIRE_ndm_reset_client_response_put,
       WILL_FIRE_nmi_req,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_tv_verifier_info_get_get;

  // inputs to muxes for submodule ports
  reg [136 : 0] MUX_msNoSynth_0_r_buffer_enqw$wset_1__VAL_2,
		MUX_msNoSynth_1_r_buffer_enqw$wset_1__VAL_2;
  reg [5 : 0] MUX_msNoSynth_0_b_buffer_enqw$wset_1__VAL_2,
	      MUX_msNoSynth_1_b_buffer_enqw$wset_1__VAL_2;
  wire [205 : 0] MUX_tagController_tmp_tagCon$cache_request_put_1__VAL_1,
		 MUX_tagController_tmp_tagCon$cache_request_put_1__VAL_2;
  wire [141 : 0] MUX_tagController_tmp_tagCon$memory_response_put_1__VAL_1,
		 MUX_tagController_tmp_tagCon$memory_response_put_1__VAL_2;
  wire [7 : 0] MUX_merged_0_flitLeft$write_1__VAL_1,
	       MUX_merged_1_flitLeft$write_1__VAL_2,
	       MUX_split_0_flitLeft$write_1__VAL_1,
	       MUX_split_1_flitLeft$write_1__VAL_1,
	       MUX_split_2_flitLeft$write_1__VAL_1;
  wire MUX_activeSource_0$write_1__SEL_1,
       MUX_activeSource_0$write_1__VAL_1,
       MUX_activeSource_1$write_1__VAL_1,
       MUX_activeSource_1_1_0$write_1__SEL_1,
       MUX_activeSource_1_1_0$write_1__SEL_2,
       MUX_activeSource_1_1_0$write_1__SEL_3,
       MUX_activeSource_1_1_0$write_1__VAL_1,
       MUX_activeSource_1_1_1_1$write_1__VAL_1,
       MUX_activeSource_1_1_2$write_1__VAL_1,
       MUX_flitToSink_0$wset_1__SEL_1,
       MUX_flitToSink_0$wset_1__SEL_3,
       MUX_flitToSink_1$wset_1__SEL_1,
       MUX_flitToSink_1$wset_1__SEL_3,
       MUX_flitToSink_1_0$wset_1__SEL_1,
       MUX_flitToSink_1_0$wset_1__SEL_2,
       MUX_flitToSink_1_0$wset_1__SEL_3,
       MUX_flitToSink_1_0$wset_1__SEL_4,
       MUX_flitToSink_1_0$wset_1__SEL_5,
       MUX_flitToSink_1_0$wset_1__SEL_6,
       MUX_flitToSink_1_0_1$wset_1__SEL_1,
       MUX_flitToSink_1_0_1$wset_1__SEL_3,
       MUX_flitToSink_1_1$wset_1__SEL_1,
       MUX_flitToSink_1_1$wset_1__SEL_2,
       MUX_flitToSink_1_1$wset_1__SEL_3,
       MUX_flitToSink_1_1$wset_1__SEL_4,
       MUX_flitToSink_1_1$wset_1__SEL_5,
       MUX_flitToSink_1_1$wset_1__SEL_6,
       MUX_flitToSink_1_1_0$wset_1__SEL_1,
       MUX_flitToSink_1_1_0$wset_1__SEL_2,
       MUX_flitToSink_1_1_0$wset_1__SEL_3,
       MUX_flitToSink_1_1_0$wset_1__SEL_4,
       MUX_flitToSink_1_1_0$wset_1__SEL_5,
       MUX_flitToSink_1_1_0$wset_1__SEL_6,
       MUX_flitToSink_1_1_1$wset_1__SEL_1,
       MUX_flitToSink_1_1_1$wset_1__SEL_3,
       MUX_flitToSink_1_1_1_1$wset_1__SEL_1,
       MUX_flitToSink_1_1_1_1$wset_1__SEL_2,
       MUX_flitToSink_1_1_1_1$wset_1__SEL_3,
       MUX_flitToSink_1_1_1_1$wset_1__SEL_4,
       MUX_flitToSink_1_1_1_1$wset_1__SEL_5,
       MUX_flitToSink_1_1_1_1$wset_1__SEL_6,
       MUX_flitToSink_1_2$wset_1__SEL_1,
       MUX_flitToSink_1_2$wset_1__SEL_3,
       MUX_flitToSink_2$wset_1__SEL_1,
       MUX_flitToSink_2$wset_1__SEL_3,
       MUX_ifcs_0_1_state_1$write_1__SEL_1,
       MUX_ifcs_0_state$write_1__PSEL_1,
       MUX_ifcs_0_state$write_1__SEL_1,
       MUX_ifcs_0_state$write_1__SEL_2,
       MUX_ifcs_0_state$write_1__SEL_3,
       MUX_ifcs_1_1_state_1$write_1__SEL_1,
       MUX_ifcs_1_state$write_1__PSEL_1,
       MUX_ifcs_1_state$write_1__SEL_1,
       MUX_ifcs_1_state$write_1__SEL_2,
       MUX_ifcs_1_state$write_1__SEL_3,
       MUX_ifcs_2_1_state$write_1__SEL_1,
       MUX_split_0_flitLeft$write_1__SEL_1,
       MUX_split_0_flitLeft$write_1__SEL_2,
       MUX_split_1_flitLeft$write_1__SEL_1,
       MUX_split_1_flitLeft$write_1__SEL_2,
       MUX_split_2_flitLeft$write_1__SEL_1,
       MUX_split_2_flitLeft$write_1__SEL_2,
       MUX_state$write_1__SEL_1,
       MUX_state$write_1__SEL_2,
       MUX_state_1_1_1$write_1__SEL_1,
       MUX_state_1_1_1$write_1__SEL_2,
       MUX_state_1_1_1$write_1__SEL_3;

  // declarations used by system tasks
  // synopsys translate_off
  reg [63 : 0] v__h48328;
  reg [63 : 0] v__h47717;
  reg [63 : 0] v__h52337;
  reg [63 : 0] v__h51726;
  reg [63 : 0] v__h82222;
  reg [63 : 0] v__h81611;
  reg [63 : 0] v__h85115;
  reg [63 : 0] v__h84504;
  reg [63 : 0] v__h63032;
  reg [63 : 0] v__h62651;
  reg [63 : 0] v__h65102;
  reg [63 : 0] v__h64721;
  reg [63 : 0] v__h67001;
  reg [63 : 0] v__h66620;
  reg [63 : 0] v__h94395;
  reg [63 : 0] v__h94014;
  reg [63 : 0] v__h96886;
  reg [63 : 0] v__h96505;
  reg [63 : 0] v__h99196;
  reg [63 : 0] v__h98815;
  reg [31 : 0] v__h14499;
  reg [31 : 0] v__h13955;
  reg [31 : 0] v__h14133;
  reg [31 : 0] v__h13949;
  reg [31 : 0] v__h14127;
  reg [31 : 0] v__h14493;
  // synopsys translate_on

  // remaining internal signals
  wire [127 : 0] x__h24260;
  wire [63 : 0] araddr__h10786,
		aw_awaddr__h8469,
		dm_master_nonsynth_awFFD_OUT_BITS_92_TO_29__q1,
		x__h35153,
		x__h35178,
		x__h37957,
		x__h37982,
		x__h69577,
		x__h69602,
		x__h72055,
		x__h72080,
		x_araddr__h10803,
		x_rdata__h24210;
  wire [39 : 0] x__h8500;
  wire [8 : 0] x_port1__read__h70706, x_port1__read__h73154;
  wire [7 : 0] arlen__h10787, x_arlen__h10804;
  wire [5 : 0] x_arid__h10802;
  wire [4 : 0] a_awid__h36313, fatReq_arid__h70145, x__h4924, x__h7558;
  wire [3 : 0] arcache__h10791, x__h10867, x__h8545, x_rid__h24209;
  wire [2 : 0] x_arsize_val__h10849;
  wire [1 : 0] IF_IF_merged_0_flitLeft_084_EQ_0_085_THEN_cpu__ETC___d1250,
	       IF_IF_merged_1_flitLeft_103_EQ_0_104_THEN_dm_m_ETC___d1356,
	       IF_cpu_dmem_master_ar_araddr__875_BITS_63_TO_4_ETC___d1901,
	       IF_dm_master_nonsynth_bufferShim_arff_first__8_ETC___d1992,
	       SEXT_SEXT_arbiter_1_1_firstHot_341_342_BIT_0_3_ETC__q19,
	       SEXT_SEXT_arbiter_1_firstHot_1_156_157_BIT_0_1_ETC__q14,
	       SEXT_SEXT_arbiter_1_firstHot_714_715_BIT_0_716_ETC__q9,
	       SEXT_SEXT_arbiter_firstHot_519_520_BIT_0_521_A_ETC__q4,
	       SEXT_arbiter_1_1_firstHot__q16,
	       SEXT_arbiter_1_1_lastSelect_1__q18,
	       SEXT_arbiter_1_1_lastSelect__q17,
	       SEXT_arbiter_1_firstHot_1__q12,
	       SEXT_arbiter_1_firstHot__q6,
	       SEXT_arbiter_1_lastSelect_1__q8,
	       SEXT_arbiter_1_lastSelect_2__q13,
	       SEXT_arbiter_1_lastSelect__q7,
	       SEXT_arbiter_firstHot__q2,
	       SEXT_arbiter_lastSelect__q3,
	       SEXT_x0747__q15,
	       SEXT_x1333__q10,
	       SEXT_x1367__q11,
	       SEXT_x2692__q20,
	       SEXT_x2726__q21,
	       SEXT_x6847__q5;
  wire IF_NOT_ifcs_0_1_innerRoute_first__102_BIT_1_11_ETC___d2124,
       IF_NOT_ifcs_0_innerRoute_first__465_BIT_1_474__ETC___d1487,
       IF_NOT_ifcs_1_1_innerRoute_first__131_BIT_1_13_ETC___d2140,
       IF_NOT_ifcs_1_innerRoute_first__494_BIT_1_498__ETC___d1503,
       IF_SEXT_arbiter_1_1_lastSelect_332_333_BIT_0_3_ETC___d2376,
       IF_SEXT_arbiter_1_1_lastSelect_332_333_BIT_0_3_ETC___d2382,
       IF_SEXT_arbiter_1_1_lastSelect_332_333_BIT_0_3_ETC___d2388,
       IF_SEXT_arbiter_1_lastSelect_2_152_153_BIT_0_1_ETC___d2176,
       IF_SEXT_arbiter_1_lastSelect_2_152_153_BIT_0_1_ETC___d2180,
       IF_SEXT_arbiter_1_lastSelect_705_706_BIT_0_707_ETC___d1749,
       IF_SEXT_arbiter_1_lastSelect_705_706_BIT_0_707_ETC___d1755,
       IF_SEXT_arbiter_1_lastSelect_705_706_BIT_0_707_ETC___d1761,
       IF_SEXT_arbiter_lastSelect_515_516_BIT_0_517_A_ETC___d1539,
       IF_SEXT_arbiter_lastSelect_515_516_BIT_0_517_A_ETC___d1543,
       IF_merged_0_flitLeft_084_EQ_0_085_THEN_NOT_cpu_ETC___d1215,
       IF_merged_0_flitLeft_084_EQ_0_085_THEN_NOT_cpu_ETC___d1285,
       IF_merged_0_flitLeft_084_EQ_0_085_THEN_cpu_dme_ETC___d1208,
       IF_merged_0_flitLeft_084_EQ_0_085_THEN_cpu_dme_ETC___d1227,
       IF_merged_0_flitLeft_084_EQ_0_085_THEN_cpu_dme_ETC___d1229,
       IF_merged_0_flitLeft_084_EQ_0_085_THEN_cpu_dme_ETC___d1232,
       IF_merged_0_flitLeft_084_EQ_0_085_THEN_cpu_dme_ETC___d1234,
       IF_merged_0_flitLeft_084_EQ_0_085_THEN_cpu_dme_ETC___d1238,
       IF_merged_0_flitLeft_084_EQ_0_085_THEN_cpu_dme_ETC___d1248,
       IF_merged_1_flitLeft_103_EQ_0_104_THEN_NOT_dm__ETC___d1318,
       IF_merged_1_flitLeft_103_EQ_0_104_THEN_dm_mast_ETC___d1314,
       IF_merged_1_flitLeft_103_EQ_0_104_THEN_dm_mast_ETC___d1333,
       IF_merged_1_flitLeft_103_EQ_0_104_THEN_dm_mast_ETC___d1335,
       IF_merged_1_flitLeft_103_EQ_0_104_THEN_dm_mast_ETC___d1338,
       IF_merged_1_flitLeft_103_EQ_0_104_THEN_dm_mast_ETC___d1340,
       IF_merged_1_flitLeft_103_EQ_0_104_THEN_dm_mast_ETC___d1344,
       IF_merged_1_flitLeft_103_EQ_0_104_THEN_dm_mast_ETC___d1354,
       IF_split_0_flitLeft_129_EQ_0_130_THEN_ssNoSynt_ETC___d1457,
       IF_split_1_flitLeft_158_EQ_0_159_THEN_ssNoSynt_ETC___d1458,
       IF_split_2_flitLeft_187_EQ_0_188_THEN_ssNoSynt_ETC___d1459,
       SEXT_arbiter_1_1_firstHot_341_342_BIT_0_343_AN_ETC___d2357,
       SEXT_arbiter_1_1_lastSelect_1_336_337_BIT_0_33_ETC___d2351,
       SEXT_arbiter_1_1_lastSelect_332_333_BIT_0_334__ETC___d2345,
       SEXT_arbiter_1_firstHot_1_156_157_BIT_0_158_AN_ETC___d2164,
       SEXT_arbiter_1_firstHot_714_715_BIT_0_716_AND__ETC___d1730,
       SEXT_arbiter_1_lastSelect_1_709_710_BIT_0_711__ETC___d1724,
       SEXT_arbiter_1_lastSelect_2_152_153_BIT_0_154__ETC___d2160,
       SEXT_arbiter_1_lastSelect_705_706_BIT_0_707_AN_ETC___d1718,
       SEXT_arbiter_firstHot_519_520_BIT_0_521_AND_re_ETC___d1527,
       SEXT_arbiter_lastSelect_515_516_BIT_0_517_AND__ETC___d1523,
       cpu_dmem_master_ar_araddr__875_BITS_63_TO_40_8_ETC___d1889,
       cpu_dmem_master_ar_araddr__875_BITS_63_TO_40_8_ETC___d1899,
       cpu_dmem_master_ar_araddr__875_MINUS_soc_map_m_ETC___d1880,
       cpu_dmem_master_ar_araddr__875_MINUS_soc_map_m_ETC___d1885,
       cpu_dmem_master_ar_araddr__875_ULT_soc_map_m_n_ETC___d1878,
       cpu_dmem_master_ar_araddr__875_ULT_soc_map_m_p_ETC___d1883,
       dm_master_nonsynth_bufferShim_arff_first__81_B_ETC___d1969,
       dm_master_nonsynth_bufferShim_arff_first__81_B_ETC___d1971,
       dm_master_nonsynth_bufferShim_arff_first__81_B_ETC___d1974,
       dm_master_nonsynth_bufferShim_arff_first__81_B_ETC___d1976,
       dm_master_nonsynth_bufferShim_arff_first__81_B_ETC___d1980,
       dm_master_nonsynth_bufferShim_arff_first__81_B_ETC___d1990,
       dm_master_nonsynth_bufferShim_arff_i_notEmpty__ETC___d486,
       dm_master_nonsynth_bufferShim_awff_i_notEmpty__ETC___d471,
       dm_master_nonsynth_takeUpperW_i_notEmpty__39_A_ETC___d1325,
       dm_master_nonsynth_wCanPeek_whas__28_AND_dm_ma_ETC___d1378,
       plic_RDY_server_reset_request_put__42_AND_cpu__ETC___d248,
       reqWires_1_0_whas__691_AND_reqWires_1_0_wget___ETC___d1701,
       reqWires_1_1_0_whas__318_AND_reqWires_1_1_0_wg_ETC___d2328,
       split_0_doPut_whas__121_AND_split_0_doPut_wget_ETC___d1128,
       split_1_doPut_whas__150_AND_split_1_doPut_wget_ETC___d1157,
       split_2_doPut_whas__179_AND_split_2_doPut_wget_ETC___d1186,
       state_1_1_149_AND_activeSource_1_0_1_216_217_A_ETC___d2219,
       state_1_1_149_AND_activeSource_1_1_1_256_257_A_ETC___d2259,
       state_1_1_1_329_AND_activeSource_1_1_0_423_424_ETC___d2426,
       state_1_1_1_329_AND_activeSource_1_1_1_1_459_4_ETC___d2462,
       state_1_1_1_329_AND_activeSource_1_1_2_495_496_ETC___d2498,
       state_1_702_AND_activeSource_1_0_790_791_AND_i_ETC___d1793,
       state_1_702_AND_activeSource_1_1_823_824_AND_i_ETC___d1826,
       state_1_702_AND_activeSource_1_2_857_858_AND_i_ETC___d1860,
       state_512_AND_activeSource_0_585_586_AND_ifcs__ETC___d1588,
       state_512_AND_activeSource_1_629_630_AND_ifcs__ETC___d1632,
       x__h46320,
       x__h46423,
       x__h46788,
       x__h46847,
       x__h46929,
       x__h60512,
       x__h60514,
       x__h60663,
       x__h60665,
       x__h60799,
       x__h60801,
       x__h61271,
       x__h61273,
       x__h61333,
       x__h61367,
       x__h61459,
       x__h61461,
       x__h61640,
       x__h61642,
       x__h80220,
       x__h80323,
       x__h80688,
       x__h80747,
       x__h80829,
       x__h91871,
       x__h91873,
       x__h92022,
       x__h92024,
       x__h92158,
       x__h92160,
       x__h92630,
       x__h92632,
       x__h92692,
       x__h92726,
       x__h92818,
       x__h92820,
       x__h92999,
       x__h93001,
       y__h46321,
       y__h46424,
       y__h46789,
       y__h46930,
       y__h60513,
       y__h60515,
       y__h60664,
       y__h60666,
       y__h60800,
       y__h60802,
       y__h61272,
       y__h61274,
       y__h61460,
       y__h61462,
       y__h61641,
       y__h61643,
       y__h80221,
       y__h80324,
       y__h80689,
       y__h80830,
       y__h91872,
       y__h91874,
       y__h92023,
       y__h92025,
       y__h92159,
       y__h92161,
       y__h92631,
       y__h92633,
       y__h92819,
       y__h92821,
       y__h93000,
       y__h93002;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // action method cpu_reset_server_request_put
  assign RDY_cpu_reset_server_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_cpu_reset_server_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_cpu_reset_server_request_put =
	     EN_cpu_reset_server_request_put ;

  // actionvalue method cpu_reset_server_response_get
  assign cpu_reset_server_response_get = f_reset_rsps$D_OUT ;
  assign RDY_cpu_reset_server_response_get = f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_cpu_reset_server_response_get = f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_cpu_reset_server_response_get =
	     EN_cpu_reset_server_response_get ;

  // value method cpu_imem_master_aw_awid
  assign cpu_imem_master_awid =
	     { 1'd0, cpu_imem_ug_u_aw_peekWire$wget[97:93] } ;

  // value method cpu_imem_master_aw_awaddr
  assign cpu_imem_master_awaddr = cpu_imem_ug_u_aw_peekWire$wget[92:29] ;

  // value method cpu_imem_master_aw_awlen
  assign cpu_imem_master_awlen = cpu_imem_ug_u_aw_peekWire$wget[28:21] ;

  // value method cpu_imem_master_aw_awsize
  assign cpu_imem_master_awsize = cpu_imem_ug_u_aw_peekWire$wget[20:18] ;

  // value method cpu_imem_master_aw_awburst
  assign cpu_imem_master_awburst = cpu_imem_ug_u_aw_peekWire$wget[17:16] ;

  // value method cpu_imem_master_aw_awlock
  assign cpu_imem_master_awlock = cpu_imem_ug_u_aw_peekWire$wget[15] ;

  // value method cpu_imem_master_aw_awcache
  assign cpu_imem_master_awcache = cpu_imem_ug_u_aw_peekWire$wget[14:11] ;

  // value method cpu_imem_master_aw_awprot
  assign cpu_imem_master_awprot = cpu_imem_ug_u_aw_peekWire$wget[10:8] ;

  // value method cpu_imem_master_aw_awqos
  assign cpu_imem_master_awqos = cpu_imem_ug_u_aw_peekWire$wget[7:4] ;

  // value method cpu_imem_master_aw_awregion
  assign cpu_imem_master_awregion = cpu_imem_ug_u_aw_peekWire$wget[3:0] ;

  // value method cpu_imem_master_aw_awvalid
  assign cpu_imem_master_awvalid = cpu$imem_master_awvalid ;

  // action method cpu_imem_master_aw_awready
  assign CAN_FIRE_cpu_imem_master_aw_awready = 1'd1 ;
  assign WILL_FIRE_cpu_imem_master_aw_awready = 1'd1 ;

  // value method cpu_imem_master_w_wdata
  assign cpu_imem_master_wdata = cpu_imem_ug_u_w_peekWire$wget[146:19] ;

  // value method cpu_imem_master_w_wstrb
  assign cpu_imem_master_wstrb = cpu_imem_ug_u_w_peekWire$wget[18:3] ;

  // value method cpu_imem_master_w_wlast
  assign cpu_imem_master_wlast = cpu_imem_ug_u_w_peekWire$wget[2] ;

  // value method cpu_imem_master_w_wvalid
  assign cpu_imem_master_wvalid = cpu$imem_master_wvalid ;

  // action method cpu_imem_master_w_wready
  assign CAN_FIRE_cpu_imem_master_w_wready = 1'd1 ;
  assign WILL_FIRE_cpu_imem_master_w_wready = 1'd1 ;

  // action method cpu_imem_master_b_bflit
  assign CAN_FIRE_cpu_imem_master_b_bflit = 1'd1 ;
  assign WILL_FIRE_cpu_imem_master_b_bflit = cpu_imem_master_bvalid ;

  // value method cpu_imem_master_b_bready
  assign cpu_imem_master_bready = cpu_imem_b_buffer_ff$FULL_N ;

  // value method cpu_imem_master_ar_arid
  assign cpu_imem_master_arid =
	     { 1'd0, cpu_imem_ug_u_ar_peekWire$wget[97:93] } ;

  // value method cpu_imem_master_ar_araddr
  assign cpu_imem_master_araddr = cpu_imem_ug_u_ar_peekWire$wget[92:29] ;

  // value method cpu_imem_master_ar_arlen
  assign cpu_imem_master_arlen = cpu_imem_ug_u_ar_peekWire$wget[28:21] ;

  // value method cpu_imem_master_ar_arsize
  assign cpu_imem_master_arsize = cpu_imem_ug_u_ar_peekWire$wget[20:18] ;

  // value method cpu_imem_master_ar_arburst
  assign cpu_imem_master_arburst = cpu_imem_ug_u_ar_peekWire$wget[17:16] ;

  // value method cpu_imem_master_ar_arlock
  assign cpu_imem_master_arlock = cpu_imem_ug_u_ar_peekWire$wget[15] ;

  // value method cpu_imem_master_ar_arcache
  assign cpu_imem_master_arcache = cpu_imem_ug_u_ar_peekWire$wget[14:11] ;

  // value method cpu_imem_master_ar_arprot
  assign cpu_imem_master_arprot = cpu_imem_ug_u_ar_peekWire$wget[10:8] ;

  // value method cpu_imem_master_ar_arqos
  assign cpu_imem_master_arqos = cpu_imem_ug_u_ar_peekWire$wget[7:4] ;

  // value method cpu_imem_master_ar_arregion
  assign cpu_imem_master_arregion = cpu_imem_ug_u_ar_peekWire$wget[3:0] ;

  // value method cpu_imem_master_ar_arvalid
  assign cpu_imem_master_arvalid = cpu$imem_master_arvalid ;

  // action method cpu_imem_master_ar_arready
  assign CAN_FIRE_cpu_imem_master_ar_arready = 1'd1 ;
  assign WILL_FIRE_cpu_imem_master_ar_arready = 1'd1 ;

  // action method cpu_imem_master_r_rflit
  assign CAN_FIRE_cpu_imem_master_r_rflit = 1'd1 ;
  assign WILL_FIRE_cpu_imem_master_r_rflit = cpu_imem_master_rvalid ;

  // value method cpu_imem_master_r_rready
  assign cpu_imem_master_rready = cpu_imem_r_buffer_ff$FULL_N ;

  // value method cpu_dmem_master_aw_awid
  assign cpu_dmem_master_awid =
	     tagController_tmp_shimMaster_awff$D_OUT[98:93] ;

  // value method cpu_dmem_master_aw_awaddr
  assign cpu_dmem_master_awaddr =
	     tagController_tmp_shimMaster_awff$D_OUT[92:29] ;

  // value method cpu_dmem_master_aw_awlen
  assign cpu_dmem_master_awlen =
	     tagController_tmp_shimMaster_awff$D_OUT[28:21] ;

  // value method cpu_dmem_master_aw_awsize
  assign cpu_dmem_master_awsize =
	     tagController_tmp_shimMaster_awff$D_OUT[20:18] ;

  // value method cpu_dmem_master_aw_awburst
  assign cpu_dmem_master_awburst =
	     tagController_tmp_shimMaster_awff$D_OUT[17:16] ;

  // value method cpu_dmem_master_aw_awlock
  assign cpu_dmem_master_awlock =
	     tagController_tmp_shimMaster_awff$D_OUT[15] ;

  // value method cpu_dmem_master_aw_awcache
  assign cpu_dmem_master_awcache =
	     tagController_tmp_shimMaster_awff$D_OUT[14:11] ;

  // value method cpu_dmem_master_aw_awprot
  assign cpu_dmem_master_awprot =
	     tagController_tmp_shimMaster_awff$D_OUT[10:8] ;

  // value method cpu_dmem_master_aw_awqos
  assign cpu_dmem_master_awqos =
	     tagController_tmp_shimMaster_awff$D_OUT[7:4] ;

  // value method cpu_dmem_master_aw_awregion
  assign cpu_dmem_master_awregion =
	     tagController_tmp_shimMaster_awff$D_OUT[3:0] ;

  // value method cpu_dmem_master_aw_awvalid
  assign cpu_dmem_master_awvalid = tagController_tmp_shimMaster_awff$EMPTY_N ;

  // action method cpu_dmem_master_aw_awready
  assign CAN_FIRE_cpu_dmem_master_aw_awready = 1'd1 ;
  assign WILL_FIRE_cpu_dmem_master_aw_awready = 1'd1 ;

  // value method cpu_dmem_master_w_wdata
  assign cpu_dmem_master_wdata =
	     tagController_tmp_shimMaster_wff$D_OUT[144:17] ;

  // value method cpu_dmem_master_w_wstrb
  assign cpu_dmem_master_wstrb =
	     tagController_tmp_shimMaster_wff$D_OUT[16:1] ;

  // value method cpu_dmem_master_w_wlast
  assign cpu_dmem_master_wlast = tagController_tmp_shimMaster_wff$D_OUT[0] ;

  // value method cpu_dmem_master_w_wvalid
  assign cpu_dmem_master_wvalid = tagController_tmp_shimMaster_wff$EMPTY_N ;

  // action method cpu_dmem_master_w_wready
  assign CAN_FIRE_cpu_dmem_master_w_wready = 1'd1 ;
  assign WILL_FIRE_cpu_dmem_master_w_wready = 1'd1 ;

  // action method cpu_dmem_master_b_bflit
  assign CAN_FIRE_cpu_dmem_master_b_bflit = 1'd1 ;
  assign WILL_FIRE_cpu_dmem_master_b_bflit = cpu_dmem_master_bvalid ;

  // value method cpu_dmem_master_b_bready
  assign cpu_dmem_master_bready = tagController_tmp_shimMaster_bff$FULL_N ;

  // value method cpu_dmem_master_ar_arid
  assign cpu_dmem_master_arid =
	     tagController_tmp_shimMaster_arff$D_OUT[98:93] ;

  // value method cpu_dmem_master_ar_araddr
  assign cpu_dmem_master_araddr =
	     tagController_tmp_shimMaster_arff$D_OUT[92:29] ;

  // value method cpu_dmem_master_ar_arlen
  assign cpu_dmem_master_arlen =
	     tagController_tmp_shimMaster_arff$D_OUT[28:21] ;

  // value method cpu_dmem_master_ar_arsize
  assign cpu_dmem_master_arsize =
	     tagController_tmp_shimMaster_arff$D_OUT[20:18] ;

  // value method cpu_dmem_master_ar_arburst
  assign cpu_dmem_master_arburst =
	     tagController_tmp_shimMaster_arff$D_OUT[17:16] ;

  // value method cpu_dmem_master_ar_arlock
  assign cpu_dmem_master_arlock =
	     tagController_tmp_shimMaster_arff$D_OUT[15] ;

  // value method cpu_dmem_master_ar_arcache
  assign cpu_dmem_master_arcache =
	     tagController_tmp_shimMaster_arff$D_OUT[14:11] ;

  // value method cpu_dmem_master_ar_arprot
  assign cpu_dmem_master_arprot =
	     tagController_tmp_shimMaster_arff$D_OUT[10:8] ;

  // value method cpu_dmem_master_ar_arqos
  assign cpu_dmem_master_arqos =
	     tagController_tmp_shimMaster_arff$D_OUT[7:4] ;

  // value method cpu_dmem_master_ar_arregion
  assign cpu_dmem_master_arregion =
	     tagController_tmp_shimMaster_arff$D_OUT[3:0] ;

  // value method cpu_dmem_master_ar_arvalid
  assign cpu_dmem_master_arvalid = tagController_tmp_shimMaster_arff$EMPTY_N ;

  // action method cpu_dmem_master_ar_arready
  assign CAN_FIRE_cpu_dmem_master_ar_arready = 1'd1 ;
  assign WILL_FIRE_cpu_dmem_master_ar_arready = 1'd1 ;

  // action method cpu_dmem_master_r_rflit
  assign CAN_FIRE_cpu_dmem_master_r_rflit = 1'd1 ;
  assign WILL_FIRE_cpu_dmem_master_r_rflit = cpu_dmem_master_rvalid ;

  // value method cpu_dmem_master_r_rready
  assign cpu_dmem_master_rready = tagController_tmp_shimMaster_rff$FULL_N ;

  // action method core_external_interrupt_sources_0_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_0_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_0_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_1_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_1_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_1_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_2_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_2_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_2_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_3_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_3_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_3_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_4_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_4_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_4_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_5_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_5_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_5_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_6_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_6_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_6_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_7_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_7_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_7_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_8_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_8_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_8_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_9_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_9_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_9_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_10_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_10_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_10_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_11_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_11_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_11_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_12_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_12_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_12_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_13_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_13_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_13_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_14_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_14_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_14_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_15_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_15_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_15_m_interrupt_req = 1'd1 ;

  // action method nmi_req
  assign CAN_FIRE_nmi_req = 1'd1 ;
  assign WILL_FIRE_nmi_req = 1'd1 ;

  // actionvalue method tv_verifier_info_get_get
  assign tv_verifier_info_get_get = tv_encode$tv_vb_out_get ;
  assign RDY_tv_verifier_info_get_get = tv_encode$RDY_tv_vb_out_get ;
  assign CAN_FIRE_tv_verifier_info_get_get = tv_encode$RDY_tv_vb_out_get ;
  assign WILL_FIRE_tv_verifier_info_get_get = EN_tv_verifier_info_get_get ;

  // action method dm_dmi_read_addr
  assign RDY_dm_dmi_read_addr = debug_module$RDY_dmi_read_addr ;
  assign CAN_FIRE_dm_dmi_read_addr = debug_module$RDY_dmi_read_addr ;
  assign WILL_FIRE_dm_dmi_read_addr = EN_dm_dmi_read_addr ;

  // actionvalue method dm_dmi_read_data
  assign dm_dmi_read_data = debug_module$dmi_read_data ;
  assign RDY_dm_dmi_read_data = debug_module$RDY_dmi_read_data ;
  assign CAN_FIRE_dm_dmi_read_data = debug_module$RDY_dmi_read_data ;
  assign WILL_FIRE_dm_dmi_read_data = EN_dm_dmi_read_data ;

  // action method dm_dmi_write
  assign RDY_dm_dmi_write = debug_module$RDY_dmi_write ;
  assign CAN_FIRE_dm_dmi_write = debug_module$RDY_dmi_write ;
  assign WILL_FIRE_dm_dmi_write = EN_dm_dmi_write ;

  // actionvalue method ndm_reset_client_request_get
  assign ndm_reset_client_request_get =
	     debug_module$ndm_reset_client_request_get ;
  assign RDY_ndm_reset_client_request_get =
	     debug_module$RDY_ndm_reset_client_request_get ;
  assign CAN_FIRE_ndm_reset_client_request_get =
	     debug_module$RDY_ndm_reset_client_request_get ;
  assign WILL_FIRE_ndm_reset_client_request_get =
	     EN_ndm_reset_client_request_get ;

  // action method ndm_reset_client_response_put
  assign RDY_ndm_reset_client_response_put =
	     debug_module$RDY_ndm_reset_client_response_put ;
  assign CAN_FIRE_ndm_reset_client_response_put =
	     debug_module$RDY_ndm_reset_client_response_put ;
  assign WILL_FIRE_ndm_reset_client_response_put =
	     EN_ndm_reset_client_response_put ;

  // submodule cpu
  mkCPU cpu(.CLK(CLK),
	    .RST_N(RST_N),
	    .dmem_master_arready(cpu$dmem_master_arready),
	    .dmem_master_awready(cpu$dmem_master_awready),
	    .dmem_master_bid(cpu$dmem_master_bid),
	    .dmem_master_bresp(cpu$dmem_master_bresp),
	    .dmem_master_rdata(cpu$dmem_master_rdata),
	    .dmem_master_rid(cpu$dmem_master_rid),
	    .dmem_master_rlast(cpu$dmem_master_rlast),
	    .dmem_master_rresp(cpu$dmem_master_rresp),
	    .dmem_master_ruser(cpu$dmem_master_ruser),
	    .dmem_master_wready(cpu$dmem_master_wready),
	    .hart0_csr_mem_server_request_put(cpu$hart0_csr_mem_server_request_put),
	    .hart0_gpr_mem_server_request_put(cpu$hart0_gpr_mem_server_request_put),
	    .hart0_put_other_req_put(cpu$hart0_put_other_req_put),
	    .hart0_server_reset_request_put(cpu$hart0_server_reset_request_put),
	    .hart0_server_run_halt_request_put(cpu$hart0_server_run_halt_request_put),
	    .imem_master_arready(cpu$imem_master_arready),
	    .imem_master_awready(cpu$imem_master_awready),
	    .imem_master_bid(cpu$imem_master_bid),
	    .imem_master_bresp(cpu$imem_master_bresp),
	    .imem_master_rdata(cpu$imem_master_rdata),
	    .imem_master_rid(cpu$imem_master_rid),
	    .imem_master_rlast(cpu$imem_master_rlast),
	    .imem_master_rresp(cpu$imem_master_rresp),
	    .imem_master_ruser(cpu$imem_master_ruser),
	    .imem_master_wready(cpu$imem_master_wready),
	    .m_external_interrupt_req_set_not_clear(cpu$m_external_interrupt_req_set_not_clear),
	    .nmi_req_set_not_clear(cpu$nmi_req_set_not_clear),
	    .s_external_interrupt_req_set_not_clear(cpu$s_external_interrupt_req_set_not_clear),
	    .set_verbosity_logdelay(cpu$set_verbosity_logdelay),
	    .set_verbosity_verbosity(cpu$set_verbosity_verbosity),
	    .software_interrupt_req_set_not_clear(cpu$software_interrupt_req_set_not_clear),
	    .timer_interrupt_req_set_not_clear(cpu$timer_interrupt_req_set_not_clear),
	    .EN_hart0_server_reset_request_put(cpu$EN_hart0_server_reset_request_put),
	    .EN_hart0_server_reset_response_get(cpu$EN_hart0_server_reset_response_get),
	    .imem_master_bvalid(cpu$imem_master_bvalid),
	    .imem_master_rvalid(cpu$imem_master_rvalid),
	    .dmem_master_bvalid(cpu$dmem_master_bvalid),
	    .dmem_master_rvalid(cpu$dmem_master_rvalid),
	    .EN_set_verbosity(cpu$EN_set_verbosity),
	    .EN_trace_data_out_get(cpu$EN_trace_data_out_get),
	    .EN_hart0_server_run_halt_request_put(cpu$EN_hart0_server_run_halt_request_put),
	    .EN_hart0_server_run_halt_response_get(cpu$EN_hart0_server_run_halt_response_get),
	    .EN_hart0_put_other_req_put(cpu$EN_hart0_put_other_req_put),
	    .EN_hart0_gpr_mem_server_request_put(cpu$EN_hart0_gpr_mem_server_request_put),
	    .EN_hart0_gpr_mem_server_response_get(cpu$EN_hart0_gpr_mem_server_response_get),
	    .EN_hart0_csr_mem_server_request_put(cpu$EN_hart0_csr_mem_server_request_put),
	    .EN_hart0_csr_mem_server_response_get(cpu$EN_hart0_csr_mem_server_response_get),
	    .RDY_hart0_server_reset_request_put(cpu$RDY_hart0_server_reset_request_put),
	    .hart0_server_reset_response_get(cpu$hart0_server_reset_response_get),
	    .RDY_hart0_server_reset_response_get(cpu$RDY_hart0_server_reset_response_get),
	    .imem_master_awid(cpu$imem_master_awid),
	    .imem_master_awaddr(cpu$imem_master_awaddr),
	    .imem_master_awlen(cpu$imem_master_awlen),
	    .imem_master_awsize(cpu$imem_master_awsize),
	    .imem_master_awburst(cpu$imem_master_awburst),
	    .imem_master_awlock(cpu$imem_master_awlock),
	    .imem_master_awcache(cpu$imem_master_awcache),
	    .imem_master_awprot(cpu$imem_master_awprot),
	    .imem_master_awqos(cpu$imem_master_awqos),
	    .imem_master_awregion(cpu$imem_master_awregion),
	    .imem_master_awvalid(cpu$imem_master_awvalid),
	    .imem_master_wdata(cpu$imem_master_wdata),
	    .imem_master_wstrb(cpu$imem_master_wstrb),
	    .imem_master_wlast(cpu$imem_master_wlast),
	    .imem_master_wuser(cpu$imem_master_wuser),
	    .imem_master_wvalid(cpu$imem_master_wvalid),
	    .imem_master_bready(cpu$imem_master_bready),
	    .imem_master_arid(cpu$imem_master_arid),
	    .imem_master_araddr(cpu$imem_master_araddr),
	    .imem_master_arlen(cpu$imem_master_arlen),
	    .imem_master_arsize(cpu$imem_master_arsize),
	    .imem_master_arburst(cpu$imem_master_arburst),
	    .imem_master_arlock(cpu$imem_master_arlock),
	    .imem_master_arcache(cpu$imem_master_arcache),
	    .imem_master_arprot(cpu$imem_master_arprot),
	    .imem_master_arqos(cpu$imem_master_arqos),
	    .imem_master_arregion(cpu$imem_master_arregion),
	    .imem_master_arvalid(cpu$imem_master_arvalid),
	    .imem_master_rready(cpu$imem_master_rready),
	    .dmem_master_awid(cpu$dmem_master_awid),
	    .dmem_master_awaddr(cpu$dmem_master_awaddr),
	    .dmem_master_awlen(cpu$dmem_master_awlen),
	    .dmem_master_awsize(cpu$dmem_master_awsize),
	    .dmem_master_awburst(cpu$dmem_master_awburst),
	    .dmem_master_awlock(cpu$dmem_master_awlock),
	    .dmem_master_awcache(cpu$dmem_master_awcache),
	    .dmem_master_awprot(cpu$dmem_master_awprot),
	    .dmem_master_awqos(cpu$dmem_master_awqos),
	    .dmem_master_awregion(cpu$dmem_master_awregion),
	    .dmem_master_awvalid(cpu$dmem_master_awvalid),
	    .dmem_master_wdata(cpu$dmem_master_wdata),
	    .dmem_master_wstrb(cpu$dmem_master_wstrb),
	    .dmem_master_wlast(cpu$dmem_master_wlast),
	    .dmem_master_wuser(cpu$dmem_master_wuser),
	    .dmem_master_wvalid(cpu$dmem_master_wvalid),
	    .dmem_master_bready(cpu$dmem_master_bready),
	    .dmem_master_arid(cpu$dmem_master_arid),
	    .dmem_master_araddr(cpu$dmem_master_araddr),
	    .dmem_master_arlen(cpu$dmem_master_arlen),
	    .dmem_master_arsize(cpu$dmem_master_arsize),
	    .dmem_master_arburst(cpu$dmem_master_arburst),
	    .dmem_master_arlock(cpu$dmem_master_arlock),
	    .dmem_master_arcache(cpu$dmem_master_arcache),
	    .dmem_master_arprot(cpu$dmem_master_arprot),
	    .dmem_master_arqos(cpu$dmem_master_arqos),
	    .dmem_master_arregion(cpu$dmem_master_arregion),
	    .dmem_master_arvalid(cpu$dmem_master_arvalid),
	    .dmem_master_rready(cpu$dmem_master_rready),
	    .RDY_set_verbosity(),
	    .trace_data_out_get(cpu$trace_data_out_get),
	    .RDY_trace_data_out_get(cpu$RDY_trace_data_out_get),
	    .RDY_hart0_server_run_halt_request_put(cpu$RDY_hart0_server_run_halt_request_put),
	    .hart0_server_run_halt_response_get(cpu$hart0_server_run_halt_response_get),
	    .RDY_hart0_server_run_halt_response_get(cpu$RDY_hart0_server_run_halt_response_get),
	    .RDY_hart0_put_other_req_put(),
	    .RDY_hart0_gpr_mem_server_request_put(cpu$RDY_hart0_gpr_mem_server_request_put),
	    .hart0_gpr_mem_server_response_get(cpu$hart0_gpr_mem_server_response_get),
	    .RDY_hart0_gpr_mem_server_response_get(cpu$RDY_hart0_gpr_mem_server_response_get),
	    .RDY_hart0_csr_mem_server_request_put(cpu$RDY_hart0_csr_mem_server_request_put),
	    .hart0_csr_mem_server_response_get(cpu$hart0_csr_mem_server_response_get),
	    .RDY_hart0_csr_mem_server_response_get(cpu$RDY_hart0_csr_mem_server_response_get));

  // submodule cpu_imem_b_buffer_ff
  FIFO1 #(.width(32'd7), .guarded(32'd0)) cpu_imem_b_buffer_ff(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(cpu_imem_b_buffer_ff$D_IN),
							       .ENQ(cpu_imem_b_buffer_ff$ENQ),
							       .DEQ(cpu_imem_b_buffer_ff$DEQ),
							       .CLR(cpu_imem_b_buffer_ff$CLR),
							       .D_OUT(cpu_imem_b_buffer_ff$D_OUT),
							       .FULL_N(cpu_imem_b_buffer_ff$FULL_N),
							       .EMPTY_N(cpu_imem_b_buffer_ff$EMPTY_N));

  // submodule cpu_imem_b_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) cpu_imem_b_buffer_firstValid(.CLK(CLK),
							.D_IN(cpu_imem_b_buffer_firstValid$D_IN),
							.EN(cpu_imem_b_buffer_firstValid$EN),
							.Q_OUT(cpu_imem_b_buffer_firstValid$Q_OUT));

  // submodule cpu_imem_r_buffer_ff
  FIFO1 #(.width(32'd138), .guarded(32'd0)) cpu_imem_r_buffer_ff(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(cpu_imem_r_buffer_ff$D_IN),
								 .ENQ(cpu_imem_r_buffer_ff$ENQ),
								 .DEQ(cpu_imem_r_buffer_ff$DEQ),
								 .CLR(cpu_imem_r_buffer_ff$CLR),
								 .D_OUT(cpu_imem_r_buffer_ff$D_OUT),
								 .FULL_N(cpu_imem_r_buffer_ff$FULL_N),
								 .EMPTY_N(cpu_imem_r_buffer_ff$EMPTY_N));

  // submodule cpu_imem_r_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) cpu_imem_r_buffer_firstValid(.CLK(CLK),
							.D_IN(cpu_imem_r_buffer_firstValid$D_IN),
							.EN(cpu_imem_r_buffer_firstValid$EN),
							.Q_OUT(cpu_imem_r_buffer_firstValid$Q_OUT));

  // submodule debug_module
  mkDebug_Module debug_module(.CLK(CLK),
			      .RST_N(RST_N),
			      .dmi_read_addr_dm_addr(debug_module$dmi_read_addr_dm_addr),
			      .dmi_write_dm_addr(debug_module$dmi_write_dm_addr),
			      .dmi_write_dm_word(debug_module$dmi_write_dm_word),
			      .hart0_client_run_halt_response_put(debug_module$hart0_client_run_halt_response_put),
			      .hart0_csr_mem_client_response_put(debug_module$hart0_csr_mem_client_response_put),
			      .hart0_gpr_mem_client_response_put(debug_module$hart0_gpr_mem_client_response_put),
			      .hart0_reset_client_response_put(debug_module$hart0_reset_client_response_put),
			      .master_arready(debug_module$master_arready),
			      .master_awready(debug_module$master_awready),
			      .master_bid(debug_module$master_bid),
			      .master_bresp(debug_module$master_bresp),
			      .master_rdata(debug_module$master_rdata),
			      .master_rid(debug_module$master_rid),
			      .master_rlast(debug_module$master_rlast),
			      .master_rresp(debug_module$master_rresp),
			      .master_ruser(debug_module$master_ruser),
			      .master_wready(debug_module$master_wready),
			      .ndm_reset_client_response_put(debug_module$ndm_reset_client_response_put),
			      .EN_dmi_read_addr(debug_module$EN_dmi_read_addr),
			      .EN_dmi_read_data(debug_module$EN_dmi_read_data),
			      .EN_dmi_write(debug_module$EN_dmi_write),
			      .EN_hart0_reset_client_request_get(debug_module$EN_hart0_reset_client_request_get),
			      .EN_hart0_reset_client_response_put(debug_module$EN_hart0_reset_client_response_put),
			      .EN_hart0_client_run_halt_request_get(debug_module$EN_hart0_client_run_halt_request_get),
			      .EN_hart0_client_run_halt_response_put(debug_module$EN_hart0_client_run_halt_response_put),
			      .EN_hart0_get_other_req_get(debug_module$EN_hart0_get_other_req_get),
			      .EN_hart0_gpr_mem_client_request_get(debug_module$EN_hart0_gpr_mem_client_request_get),
			      .EN_hart0_gpr_mem_client_response_put(debug_module$EN_hart0_gpr_mem_client_response_put),
			      .EN_hart0_csr_mem_client_request_get(debug_module$EN_hart0_csr_mem_client_request_get),
			      .EN_hart0_csr_mem_client_response_put(debug_module$EN_hart0_csr_mem_client_response_put),
			      .EN_ndm_reset_client_request_get(debug_module$EN_ndm_reset_client_request_get),
			      .EN_ndm_reset_client_response_put(debug_module$EN_ndm_reset_client_response_put),
			      .master_bvalid(debug_module$master_bvalid),
			      .master_rvalid(debug_module$master_rvalid),
			      .RDY_dmi_read_addr(debug_module$RDY_dmi_read_addr),
			      .dmi_read_data(debug_module$dmi_read_data),
			      .RDY_dmi_read_data(debug_module$RDY_dmi_read_data),
			      .RDY_dmi_write(debug_module$RDY_dmi_write),
			      .hart0_reset_client_request_get(debug_module$hart0_reset_client_request_get),
			      .RDY_hart0_reset_client_request_get(debug_module$RDY_hart0_reset_client_request_get),
			      .RDY_hart0_reset_client_response_put(debug_module$RDY_hart0_reset_client_response_put),
			      .hart0_client_run_halt_request_get(debug_module$hart0_client_run_halt_request_get),
			      .RDY_hart0_client_run_halt_request_get(debug_module$RDY_hart0_client_run_halt_request_get),
			      .RDY_hart0_client_run_halt_response_put(debug_module$RDY_hart0_client_run_halt_response_put),
			      .hart0_get_other_req_get(debug_module$hart0_get_other_req_get),
			      .RDY_hart0_get_other_req_get(debug_module$RDY_hart0_get_other_req_get),
			      .hart0_gpr_mem_client_request_get(debug_module$hart0_gpr_mem_client_request_get),
			      .RDY_hart0_gpr_mem_client_request_get(debug_module$RDY_hart0_gpr_mem_client_request_get),
			      .RDY_hart0_gpr_mem_client_response_put(debug_module$RDY_hart0_gpr_mem_client_response_put),
			      .hart0_csr_mem_client_request_get(debug_module$hart0_csr_mem_client_request_get),
			      .RDY_hart0_csr_mem_client_request_get(debug_module$RDY_hart0_csr_mem_client_request_get),
			      .RDY_hart0_csr_mem_client_response_put(debug_module$RDY_hart0_csr_mem_client_response_put),
			      .ndm_reset_client_request_get(debug_module$ndm_reset_client_request_get),
			      .RDY_ndm_reset_client_request_get(debug_module$RDY_ndm_reset_client_request_get),
			      .RDY_ndm_reset_client_response_put(debug_module$RDY_ndm_reset_client_response_put),
			      .master_awid(debug_module$master_awid),
			      .master_awaddr(debug_module$master_awaddr),
			      .master_awlen(debug_module$master_awlen),
			      .master_awsize(debug_module$master_awsize),
			      .master_awburst(debug_module$master_awburst),
			      .master_awlock(debug_module$master_awlock),
			      .master_awcache(debug_module$master_awcache),
			      .master_awprot(debug_module$master_awprot),
			      .master_awqos(debug_module$master_awqos),
			      .master_awregion(debug_module$master_awregion),
			      .master_awvalid(debug_module$master_awvalid),
			      .master_wdata(debug_module$master_wdata),
			      .master_wstrb(debug_module$master_wstrb),
			      .master_wlast(debug_module$master_wlast),
			      .master_wuser(debug_module$master_wuser),
			      .master_wvalid(debug_module$master_wvalid),
			      .master_bready(debug_module$master_bready),
			      .master_arid(debug_module$master_arid),
			      .master_araddr(debug_module$master_araddr),
			      .master_arlen(debug_module$master_arlen),
			      .master_arsize(debug_module$master_arsize),
			      .master_arburst(debug_module$master_arburst),
			      .master_arlock(debug_module$master_arlock),
			      .master_arcache(debug_module$master_arcache),
			      .master_arprot(debug_module$master_arprot),
			      .master_arqos(debug_module$master_arqos),
			      .master_arregion(debug_module$master_arregion),
			      .master_arvalid(debug_module$master_arvalid),
			      .master_rready(debug_module$master_rready));

  // submodule dm_csr_tap
  mkDM_CSR_Tap dm_csr_tap(.CLK(CLK),
			  .RST_N(RST_N),
			  .client_response_put(dm_csr_tap$client_response_put),
			  .server_request_put(dm_csr_tap$server_request_put),
			  .EN_client_request_get(dm_csr_tap$EN_client_request_get),
			  .EN_client_response_put(dm_csr_tap$EN_client_response_put),
			  .EN_server_request_put(dm_csr_tap$EN_server_request_put),
			  .EN_server_response_get(dm_csr_tap$EN_server_response_get),
			  .EN_trace_data_out_get(dm_csr_tap$EN_trace_data_out_get),
			  .client_request_get(dm_csr_tap$client_request_get),
			  .RDY_client_request_get(dm_csr_tap$RDY_client_request_get),
			  .RDY_client_response_put(dm_csr_tap$RDY_client_response_put),
			  .RDY_server_request_put(dm_csr_tap$RDY_server_request_put),
			  .server_response_get(dm_csr_tap$server_response_get),
			  .RDY_server_response_get(dm_csr_tap$RDY_server_response_get),
			  .trace_data_out_get(dm_csr_tap$trace_data_out_get),
			  .RDY_trace_data_out_get(dm_csr_tap$RDY_trace_data_out_get));

  // submodule dm_gpr_tap_ifc
  mkDM_GPR_Tap dm_gpr_tap_ifc(.CLK(CLK),
			      .RST_N(RST_N),
			      .client_response_put(dm_gpr_tap_ifc$client_response_put),
			      .server_request_put(dm_gpr_tap_ifc$server_request_put),
			      .EN_client_request_get(dm_gpr_tap_ifc$EN_client_request_get),
			      .EN_client_response_put(dm_gpr_tap_ifc$EN_client_response_put),
			      .EN_server_request_put(dm_gpr_tap_ifc$EN_server_request_put),
			      .EN_server_response_get(dm_gpr_tap_ifc$EN_server_response_get),
			      .EN_trace_data_out_get(dm_gpr_tap_ifc$EN_trace_data_out_get),
			      .client_request_get(dm_gpr_tap_ifc$client_request_get),
			      .RDY_client_request_get(dm_gpr_tap_ifc$RDY_client_request_get),
			      .RDY_client_response_put(dm_gpr_tap_ifc$RDY_client_response_put),
			      .RDY_server_request_put(dm_gpr_tap_ifc$RDY_server_request_put),
			      .server_response_get(dm_gpr_tap_ifc$server_response_get),
			      .RDY_server_response_get(dm_gpr_tap_ifc$RDY_server_response_get),
			      .trace_data_out_get(dm_gpr_tap_ifc$trace_data_out_get),
			      .RDY_trace_data_out_get(dm_gpr_tap_ifc$RDY_trace_data_out_get));

  // submodule dm_master_nonsynth_awFF
  FIFO2 #(.width(32'd97),
	  .guarded(32'd1)) dm_master_nonsynth_awFF(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(dm_master_nonsynth_awFF$D_IN),
						   .ENQ(dm_master_nonsynth_awFF$ENQ),
						   .DEQ(dm_master_nonsynth_awFF$DEQ),
						   .CLR(dm_master_nonsynth_awFF$CLR),
						   .D_OUT(dm_master_nonsynth_awFF$D_OUT),
						   .FULL_N(dm_master_nonsynth_awFF$FULL_N),
						   .EMPTY_N(dm_master_nonsynth_awFF$EMPTY_N));

  // submodule dm_master_nonsynth_bufferShim_arff
  SizedFIFO #(.p1width(32'd97),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd0)) dm_master_nonsynth_bufferShim_arff(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(dm_master_nonsynth_bufferShim_arff$D_IN),
								  .ENQ(dm_master_nonsynth_bufferShim_arff$ENQ),
								  .DEQ(dm_master_nonsynth_bufferShim_arff$DEQ),
								  .CLR(dm_master_nonsynth_bufferShim_arff$CLR),
								  .D_OUT(dm_master_nonsynth_bufferShim_arff$D_OUT),
								  .FULL_N(dm_master_nonsynth_bufferShim_arff$FULL_N),
								  .EMPTY_N(dm_master_nonsynth_bufferShim_arff$EMPTY_N));

  // submodule dm_master_nonsynth_bufferShim_awff
  SizedFIFO #(.p1width(32'd97),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd0)) dm_master_nonsynth_bufferShim_awff(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(dm_master_nonsynth_bufferShim_awff$D_IN),
								  .ENQ(dm_master_nonsynth_bufferShim_awff$ENQ),
								  .DEQ(dm_master_nonsynth_bufferShim_awff$DEQ),
								  .CLR(dm_master_nonsynth_bufferShim_awff$CLR),
								  .D_OUT(dm_master_nonsynth_bufferShim_awff$D_OUT),
								  .FULL_N(dm_master_nonsynth_bufferShim_awff$FULL_N),
								  .EMPTY_N(dm_master_nonsynth_bufferShim_awff$EMPTY_N));

  // submodule dm_master_nonsynth_bufferShim_bff
  SizedFIFO #(.p1width(32'd6),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd0)) dm_master_nonsynth_bufferShim_bff(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(dm_master_nonsynth_bufferShim_bff$D_IN),
								 .ENQ(dm_master_nonsynth_bufferShim_bff$ENQ),
								 .DEQ(dm_master_nonsynth_bufferShim_bff$DEQ),
								 .CLR(dm_master_nonsynth_bufferShim_bff$CLR),
								 .D_OUT(dm_master_nonsynth_bufferShim_bff$D_OUT),
								 .FULL_N(dm_master_nonsynth_bufferShim_bff$FULL_N),
								 .EMPTY_N(dm_master_nonsynth_bufferShim_bff$EMPTY_N));

  // submodule dm_master_nonsynth_bufferShim_rff
  SizedFIFO #(.p1width(32'd73),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd0)) dm_master_nonsynth_bufferShim_rff(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(dm_master_nonsynth_bufferShim_rff$D_IN),
								 .ENQ(dm_master_nonsynth_bufferShim_rff$ENQ),
								 .DEQ(dm_master_nonsynth_bufferShim_rff$DEQ),
								 .CLR(dm_master_nonsynth_bufferShim_rff$CLR),
								 .D_OUT(dm_master_nonsynth_bufferShim_rff$D_OUT),
								 .FULL_N(dm_master_nonsynth_bufferShim_rff$FULL_N),
								 .EMPTY_N(dm_master_nonsynth_bufferShim_rff$EMPTY_N));

  // submodule dm_master_nonsynth_bufferShim_wff
  SizedFIFO #(.p1width(32'd75),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd0)) dm_master_nonsynth_bufferShim_wff(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(dm_master_nonsynth_bufferShim_wff$D_IN),
								 .ENQ(dm_master_nonsynth_bufferShim_wff$ENQ),
								 .DEQ(dm_master_nonsynth_bufferShim_wff$DEQ),
								 .CLR(dm_master_nonsynth_bufferShim_wff$CLR),
								 .D_OUT(dm_master_nonsynth_bufferShim_wff$D_OUT),
								 .FULL_N(dm_master_nonsynth_bufferShim_wff$FULL_N),
								 .EMPTY_N(dm_master_nonsynth_bufferShim_wff$EMPTY_N));

  // submodule dm_master_nonsynth_takeUpperR
  SizedFIFO #(.p1width(32'd1),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(32'd1)) dm_master_nonsynth_takeUpperR(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(dm_master_nonsynth_takeUpperR$D_IN),
							     .ENQ(dm_master_nonsynth_takeUpperR$ENQ),
							     .DEQ(dm_master_nonsynth_takeUpperR$DEQ),
							     .CLR(dm_master_nonsynth_takeUpperR$CLR),
							     .D_OUT(dm_master_nonsynth_takeUpperR$D_OUT),
							     .FULL_N(dm_master_nonsynth_takeUpperR$FULL_N),
							     .EMPTY_N(dm_master_nonsynth_takeUpperR$EMPTY_N));

  // submodule dm_master_nonsynth_takeUpperW
  FIFO2 #(.width(32'd1),
	  .guarded(32'd1)) dm_master_nonsynth_takeUpperW(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(dm_master_nonsynth_takeUpperW$D_IN),
							 .ENQ(dm_master_nonsynth_takeUpperW$ENQ),
							 .DEQ(dm_master_nonsynth_takeUpperW$DEQ),
							 .CLR(dm_master_nonsynth_takeUpperW$CLR),
							 .D_OUT(dm_master_nonsynth_takeUpperW$D_OUT),
							 .FULL_N(dm_master_nonsynth_takeUpperW$FULL_N),
							 .EMPTY_N(dm_master_nonsynth_takeUpperW$EMPTY_N));

  // submodule dm_mem_tap
  mkDM_Mem_Tap dm_mem_tap(.CLK(CLK),
			  .RST_N(RST_N),
			  .master_arready(dm_mem_tap$master_arready),
			  .master_awready(dm_mem_tap$master_awready),
			  .master_bid(dm_mem_tap$master_bid),
			  .master_bresp(dm_mem_tap$master_bresp),
			  .master_rdata(dm_mem_tap$master_rdata),
			  .master_rid(dm_mem_tap$master_rid),
			  .master_rlast(dm_mem_tap$master_rlast),
			  .master_rresp(dm_mem_tap$master_rresp),
			  .master_ruser(dm_mem_tap$master_ruser),
			  .master_wready(dm_mem_tap$master_wready),
			  .slave_araddr(dm_mem_tap$slave_araddr),
			  .slave_arburst(dm_mem_tap$slave_arburst),
			  .slave_arcache(dm_mem_tap$slave_arcache),
			  .slave_arid(dm_mem_tap$slave_arid),
			  .slave_arlen(dm_mem_tap$slave_arlen),
			  .slave_arlock(dm_mem_tap$slave_arlock),
			  .slave_arprot(dm_mem_tap$slave_arprot),
			  .slave_arqos(dm_mem_tap$slave_arqos),
			  .slave_arregion(dm_mem_tap$slave_arregion),
			  .slave_arsize(dm_mem_tap$slave_arsize),
			  .slave_awaddr(dm_mem_tap$slave_awaddr),
			  .slave_awburst(dm_mem_tap$slave_awburst),
			  .slave_awcache(dm_mem_tap$slave_awcache),
			  .slave_awid(dm_mem_tap$slave_awid),
			  .slave_awlen(dm_mem_tap$slave_awlen),
			  .slave_awlock(dm_mem_tap$slave_awlock),
			  .slave_awprot(dm_mem_tap$slave_awprot),
			  .slave_awqos(dm_mem_tap$slave_awqos),
			  .slave_awregion(dm_mem_tap$slave_awregion),
			  .slave_awsize(dm_mem_tap$slave_awsize),
			  .slave_bready(dm_mem_tap$slave_bready),
			  .slave_rready(dm_mem_tap$slave_rready),
			  .slave_wdata(dm_mem_tap$slave_wdata),
			  .slave_wlast(dm_mem_tap$slave_wlast),
			  .slave_wstrb(dm_mem_tap$slave_wstrb),
			  .slave_wuser(dm_mem_tap$slave_wuser),
			  .slave_awvalid(dm_mem_tap$slave_awvalid),
			  .slave_wvalid(dm_mem_tap$slave_wvalid),
			  .slave_arvalid(dm_mem_tap$slave_arvalid),
			  .master_bvalid(dm_mem_tap$master_bvalid),
			  .master_rvalid(dm_mem_tap$master_rvalid),
			  .EN_trace_data_out_get(dm_mem_tap$EN_trace_data_out_get),
			  .slave_awready(dm_mem_tap$slave_awready),
			  .slave_wready(dm_mem_tap$slave_wready),
			  .slave_bid(dm_mem_tap$slave_bid),
			  .slave_bresp(dm_mem_tap$slave_bresp),
			  .slave_bvalid(dm_mem_tap$slave_bvalid),
			  .slave_arready(dm_mem_tap$slave_arready),
			  .slave_rid(dm_mem_tap$slave_rid),
			  .slave_rdata(dm_mem_tap$slave_rdata),
			  .slave_rresp(dm_mem_tap$slave_rresp),
			  .slave_rlast(dm_mem_tap$slave_rlast),
			  .slave_ruser(dm_mem_tap$slave_ruser),
			  .slave_rvalid(dm_mem_tap$slave_rvalid),
			  .master_awid(dm_mem_tap$master_awid),
			  .master_awaddr(dm_mem_tap$master_awaddr),
			  .master_awlen(dm_mem_tap$master_awlen),
			  .master_awsize(dm_mem_tap$master_awsize),
			  .master_awburst(dm_mem_tap$master_awburst),
			  .master_awlock(dm_mem_tap$master_awlock),
			  .master_awcache(dm_mem_tap$master_awcache),
			  .master_awprot(dm_mem_tap$master_awprot),
			  .master_awqos(dm_mem_tap$master_awqos),
			  .master_awregion(dm_mem_tap$master_awregion),
			  .master_awvalid(dm_mem_tap$master_awvalid),
			  .master_wdata(dm_mem_tap$master_wdata),
			  .master_wstrb(dm_mem_tap$master_wstrb),
			  .master_wlast(dm_mem_tap$master_wlast),
			  .master_wuser(dm_mem_tap$master_wuser),
			  .master_wvalid(dm_mem_tap$master_wvalid),
			  .master_bready(dm_mem_tap$master_bready),
			  .master_arid(dm_mem_tap$master_arid),
			  .master_araddr(dm_mem_tap$master_araddr),
			  .master_arlen(dm_mem_tap$master_arlen),
			  .master_arsize(dm_mem_tap$master_arsize),
			  .master_arburst(dm_mem_tap$master_arburst),
			  .master_arlock(dm_mem_tap$master_arlock),
			  .master_arcache(dm_mem_tap$master_arcache),
			  .master_arprot(dm_mem_tap$master_arprot),
			  .master_arqos(dm_mem_tap$master_arqos),
			  .master_arregion(dm_mem_tap$master_arregion),
			  .master_arvalid(dm_mem_tap$master_arvalid),
			  .master_rready(dm_mem_tap$master_rready),
			  .trace_data_out_get(dm_mem_tap$trace_data_out_get),
			  .RDY_trace_data_out_get(dm_mem_tap$RDY_trace_data_out_get));

  // submodule dm_mem_tap_nosynth_b_buffer_ff
  FIFO1 #(.width(32'd6),
	  .guarded(32'd0)) dm_mem_tap_nosynth_b_buffer_ff(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(dm_mem_tap_nosynth_b_buffer_ff$D_IN),
							  .ENQ(dm_mem_tap_nosynth_b_buffer_ff$ENQ),
							  .DEQ(dm_mem_tap_nosynth_b_buffer_ff$DEQ),
							  .CLR(dm_mem_tap_nosynth_b_buffer_ff$CLR),
							  .D_OUT(dm_mem_tap_nosynth_b_buffer_ff$D_OUT),
							  .FULL_N(dm_mem_tap_nosynth_b_buffer_ff$FULL_N),
							  .EMPTY_N(dm_mem_tap_nosynth_b_buffer_ff$EMPTY_N));

  // submodule dm_mem_tap_nosynth_b_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) dm_mem_tap_nosynth_b_buffer_firstValid(.CLK(CLK),
								  .D_IN(dm_mem_tap_nosynth_b_buffer_firstValid$D_IN),
								  .EN(dm_mem_tap_nosynth_b_buffer_firstValid$EN),
								  .Q_OUT(dm_mem_tap_nosynth_b_buffer_firstValid$Q_OUT));

  // submodule dm_mem_tap_nosynth_r_buffer_ff
  FIFO1 #(.width(32'd73),
	  .guarded(32'd0)) dm_mem_tap_nosynth_r_buffer_ff(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(dm_mem_tap_nosynth_r_buffer_ff$D_IN),
							  .ENQ(dm_mem_tap_nosynth_r_buffer_ff$ENQ),
							  .DEQ(dm_mem_tap_nosynth_r_buffer_ff$DEQ),
							  .CLR(dm_mem_tap_nosynth_r_buffer_ff$CLR),
							  .D_OUT(dm_mem_tap_nosynth_r_buffer_ff$D_OUT),
							  .FULL_N(dm_mem_tap_nosynth_r_buffer_ff$FULL_N),
							  .EMPTY_N(dm_mem_tap_nosynth_r_buffer_ff$EMPTY_N));

  // submodule dm_mem_tap_nosynth_r_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) dm_mem_tap_nosynth_r_buffer_firstValid(.CLK(CLK),
								  .D_IN(dm_mem_tap_nosynth_r_buffer_firstValid$D_IN),
								  .EN(dm_mem_tap_nosynth_r_buffer_firstValid$EN),
								  .Q_OUT(dm_mem_tap_nosynth_r_buffer_firstValid$Q_OUT));

  // submodule f_reset_reqs
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_reqs(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_reset_reqs$D_IN),
						       .ENQ(f_reset_reqs$ENQ),
						       .DEQ(f_reset_reqs$DEQ),
						       .CLR(f_reset_reqs$CLR),
						       .D_OUT(f_reset_reqs$D_OUT),
						       .FULL_N(f_reset_reqs$FULL_N),
						       .EMPTY_N(f_reset_reqs$EMPTY_N));

  // submodule f_reset_requestor
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_requestor(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(f_reset_requestor$D_IN),
							    .ENQ(f_reset_requestor$ENQ),
							    .DEQ(f_reset_requestor$DEQ),
							    .CLR(f_reset_requestor$CLR),
							    .D_OUT(f_reset_requestor$D_OUT),
							    .FULL_N(f_reset_requestor$FULL_N),
							    .EMPTY_N(f_reset_requestor$EMPTY_N));

  // submodule f_reset_rsps
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_rsps(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_reset_rsps$D_IN),
						       .ENQ(f_reset_rsps$ENQ),
						       .DEQ(f_reset_rsps$DEQ),
						       .CLR(f_reset_rsps$CLR),
						       .D_OUT(f_reset_rsps$D_OUT),
						       .FULL_N(f_reset_rsps$FULL_N),
						       .EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule f_trace_data_merged
  FIFO2 #(.width(32'd234), .guarded(32'd1)) f_trace_data_merged(.RST(RST_N),
								.CLK(CLK),
								.D_IN(f_trace_data_merged$D_IN),
								.ENQ(f_trace_data_merged$ENQ),
								.DEQ(f_trace_data_merged$DEQ),
								.CLR(f_trace_data_merged$CLR),
								.D_OUT(f_trace_data_merged$D_OUT),
								.FULL_N(f_trace_data_merged$FULL_N),
								.EMPTY_N(f_trace_data_merged$EMPTY_N));

  // submodule ifcs_0_1_innerReq
  FIFO2 #(.width(32'd98), .guarded(32'd1)) ifcs_0_1_innerReq(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ifcs_0_1_innerReq$D_IN),
							     .ENQ(ifcs_0_1_innerReq$ENQ),
							     .DEQ(ifcs_0_1_innerReq$DEQ),
							     .CLR(ifcs_0_1_innerReq$CLR),
							     .D_OUT(ifcs_0_1_innerReq$D_OUT),
							     .FULL_N(ifcs_0_1_innerReq$FULL_N),
							     .EMPTY_N(ifcs_0_1_innerReq$EMPTY_N));

  // submodule ifcs_0_1_innerRoute
  FIFO2 #(.width(32'd3), .guarded(32'd1)) ifcs_0_1_innerRoute(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(ifcs_0_1_innerRoute$D_IN),
							      .ENQ(ifcs_0_1_innerRoute$ENQ),
							      .DEQ(ifcs_0_1_innerRoute$DEQ),
							      .CLR(ifcs_0_1_innerRoute$CLR),
							      .D_OUT(ifcs_0_1_innerRoute$D_OUT),
							      .FULL_N(ifcs_0_1_innerRoute$FULL_N),
							      .EMPTY_N(ifcs_0_1_innerRoute$EMPTY_N));

  // submodule ifcs_0_1_noRouteRsp
  FIFO2 #(.width(32'd137), .guarded(32'd1)) ifcs_0_1_noRouteRsp(.RST(RST_N),
								.CLK(CLK),
								.D_IN(ifcs_0_1_noRouteRsp$D_IN),
								.ENQ(ifcs_0_1_noRouteRsp$ENQ),
								.DEQ(ifcs_0_1_noRouteRsp$DEQ),
								.CLR(ifcs_0_1_noRouteRsp$CLR),
								.D_OUT(ifcs_0_1_noRouteRsp$D_OUT),
								.FULL_N(ifcs_0_1_noRouteRsp$FULL_N),
								.EMPTY_N(ifcs_0_1_noRouteRsp$EMPTY_N));

  // submodule ifcs_0_1_routeBack
  FIFO2 #(.width(32'd2), .guarded(32'd1)) ifcs_0_1_routeBack(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ifcs_0_1_routeBack$D_IN),
							     .ENQ(ifcs_0_1_routeBack$ENQ),
							     .DEQ(ifcs_0_1_routeBack$DEQ),
							     .CLR(ifcs_0_1_routeBack$CLR),
							     .D_OUT(ifcs_0_1_routeBack$D_OUT),
							     .FULL_N(ifcs_0_1_routeBack$FULL_N),
							     .EMPTY_N(ifcs_0_1_routeBack$EMPTY_N));

  // submodule ifcs_0_1_rspBack
  FIFO2 #(.width(32'd137), .guarded(32'd1)) ifcs_0_1_rspBack(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ifcs_0_1_rspBack$D_IN),
							     .ENQ(ifcs_0_1_rspBack$ENQ),
							     .DEQ(ifcs_0_1_rspBack$DEQ),
							     .CLR(ifcs_0_1_rspBack$CLR),
							     .D_OUT(ifcs_0_1_rspBack$D_OUT),
							     .FULL_N(ifcs_0_1_rspBack$FULL_N),
							     .EMPTY_N(ifcs_0_1_rspBack$EMPTY_N));

  // submodule ifcs_0_innerReq
  FIFO2 #(.width(32'd246), .guarded(32'd1)) ifcs_0_innerReq(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(ifcs_0_innerReq$D_IN),
							    .ENQ(ifcs_0_innerReq$ENQ),
							    .DEQ(ifcs_0_innerReq$DEQ),
							    .CLR(ifcs_0_innerReq$CLR),
							    .D_OUT(ifcs_0_innerReq$D_OUT),
							    .FULL_N(ifcs_0_innerReq$FULL_N),
							    .EMPTY_N(ifcs_0_innerReq$EMPTY_N));

  // submodule ifcs_0_innerRoute
  FIFO2 #(.width(32'd3), .guarded(32'd1)) ifcs_0_innerRoute(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(ifcs_0_innerRoute$D_IN),
							    .ENQ(ifcs_0_innerRoute$ENQ),
							    .DEQ(ifcs_0_innerRoute$DEQ),
							    .CLR(ifcs_0_innerRoute$CLR),
							    .D_OUT(ifcs_0_innerRoute$D_OUT),
							    .FULL_N(ifcs_0_innerRoute$FULL_N),
							    .EMPTY_N(ifcs_0_innerRoute$EMPTY_N));

  // submodule ifcs_0_noRouteRsp
  FIFO2 #(.width(32'd6), .guarded(32'd1)) ifcs_0_noRouteRsp(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(ifcs_0_noRouteRsp$D_IN),
							    .ENQ(ifcs_0_noRouteRsp$ENQ),
							    .DEQ(ifcs_0_noRouteRsp$DEQ),
							    .CLR(ifcs_0_noRouteRsp$CLR),
							    .D_OUT(ifcs_0_noRouteRsp$D_OUT),
							    .FULL_N(ifcs_0_noRouteRsp$FULL_N),
							    .EMPTY_N(ifcs_0_noRouteRsp$EMPTY_N));

  // submodule ifcs_0_routeBack
  FIFO2 #(.width(32'd2), .guarded(32'd1)) ifcs_0_routeBack(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(ifcs_0_routeBack$D_IN),
							   .ENQ(ifcs_0_routeBack$ENQ),
							   .DEQ(ifcs_0_routeBack$DEQ),
							   .CLR(ifcs_0_routeBack$CLR),
							   .D_OUT(ifcs_0_routeBack$D_OUT),
							   .FULL_N(ifcs_0_routeBack$FULL_N),
							   .EMPTY_N(ifcs_0_routeBack$EMPTY_N));

  // submodule ifcs_0_rspBack
  FIFO2 #(.width(32'd6), .guarded(32'd1)) ifcs_0_rspBack(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(ifcs_0_rspBack$D_IN),
							 .ENQ(ifcs_0_rspBack$ENQ),
							 .DEQ(ifcs_0_rspBack$DEQ),
							 .CLR(ifcs_0_rspBack$CLR),
							 .D_OUT(ifcs_0_rspBack$D_OUT),
							 .FULL_N(ifcs_0_rspBack$FULL_N),
							 .EMPTY_N(ifcs_0_rspBack$EMPTY_N));

  // submodule ifcs_1_1_innerReq
  FIFO2 #(.width(32'd98), .guarded(32'd1)) ifcs_1_1_innerReq(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ifcs_1_1_innerReq$D_IN),
							     .ENQ(ifcs_1_1_innerReq$ENQ),
							     .DEQ(ifcs_1_1_innerReq$DEQ),
							     .CLR(ifcs_1_1_innerReq$CLR),
							     .D_OUT(ifcs_1_1_innerReq$D_OUT),
							     .FULL_N(ifcs_1_1_innerReq$FULL_N),
							     .EMPTY_N(ifcs_1_1_innerReq$EMPTY_N));

  // submodule ifcs_1_1_innerRoute
  FIFO2 #(.width(32'd3), .guarded(32'd1)) ifcs_1_1_innerRoute(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(ifcs_1_1_innerRoute$D_IN),
							      .ENQ(ifcs_1_1_innerRoute$ENQ),
							      .DEQ(ifcs_1_1_innerRoute$DEQ),
							      .CLR(ifcs_1_1_innerRoute$CLR),
							      .D_OUT(ifcs_1_1_innerRoute$D_OUT),
							      .FULL_N(ifcs_1_1_innerRoute$FULL_N),
							      .EMPTY_N(ifcs_1_1_innerRoute$EMPTY_N));

  // submodule ifcs_1_1_noRouteRsp
  FIFO2 #(.width(32'd137), .guarded(32'd1)) ifcs_1_1_noRouteRsp(.RST(RST_N),
								.CLK(CLK),
								.D_IN(ifcs_1_1_noRouteRsp$D_IN),
								.ENQ(ifcs_1_1_noRouteRsp$ENQ),
								.DEQ(ifcs_1_1_noRouteRsp$DEQ),
								.CLR(ifcs_1_1_noRouteRsp$CLR),
								.D_OUT(ifcs_1_1_noRouteRsp$D_OUT),
								.FULL_N(ifcs_1_1_noRouteRsp$FULL_N),
								.EMPTY_N(ifcs_1_1_noRouteRsp$EMPTY_N));

  // submodule ifcs_1_1_routeBack
  FIFO2 #(.width(32'd2), .guarded(32'd1)) ifcs_1_1_routeBack(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ifcs_1_1_routeBack$D_IN),
							     .ENQ(ifcs_1_1_routeBack$ENQ),
							     .DEQ(ifcs_1_1_routeBack$DEQ),
							     .CLR(ifcs_1_1_routeBack$CLR),
							     .D_OUT(ifcs_1_1_routeBack$D_OUT),
							     .FULL_N(ifcs_1_1_routeBack$FULL_N),
							     .EMPTY_N(ifcs_1_1_routeBack$EMPTY_N));

  // submodule ifcs_1_1_rspBack
  FIFO2 #(.width(32'd137), .guarded(32'd1)) ifcs_1_1_rspBack(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ifcs_1_1_rspBack$D_IN),
							     .ENQ(ifcs_1_1_rspBack$ENQ),
							     .DEQ(ifcs_1_1_rspBack$DEQ),
							     .CLR(ifcs_1_1_rspBack$CLR),
							     .D_OUT(ifcs_1_1_rspBack$D_OUT),
							     .FULL_N(ifcs_1_1_rspBack$FULL_N),
							     .EMPTY_N(ifcs_1_1_rspBack$EMPTY_N));

  // submodule ifcs_1_innerReq
  FIFO2 #(.width(32'd246), .guarded(32'd1)) ifcs_1_innerReq(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(ifcs_1_innerReq$D_IN),
							    .ENQ(ifcs_1_innerReq$ENQ),
							    .DEQ(ifcs_1_innerReq$DEQ),
							    .CLR(ifcs_1_innerReq$CLR),
							    .D_OUT(ifcs_1_innerReq$D_OUT),
							    .FULL_N(ifcs_1_innerReq$FULL_N),
							    .EMPTY_N(ifcs_1_innerReq$EMPTY_N));

  // submodule ifcs_1_innerRoute
  FIFO2 #(.width(32'd3), .guarded(32'd1)) ifcs_1_innerRoute(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(ifcs_1_innerRoute$D_IN),
							    .ENQ(ifcs_1_innerRoute$ENQ),
							    .DEQ(ifcs_1_innerRoute$DEQ),
							    .CLR(ifcs_1_innerRoute$CLR),
							    .D_OUT(ifcs_1_innerRoute$D_OUT),
							    .FULL_N(ifcs_1_innerRoute$FULL_N),
							    .EMPTY_N(ifcs_1_innerRoute$EMPTY_N));

  // submodule ifcs_1_noRouteRsp
  FIFO2 #(.width(32'd6), .guarded(32'd1)) ifcs_1_noRouteRsp(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(ifcs_1_noRouteRsp$D_IN),
							    .ENQ(ifcs_1_noRouteRsp$ENQ),
							    .DEQ(ifcs_1_noRouteRsp$DEQ),
							    .CLR(ifcs_1_noRouteRsp$CLR),
							    .D_OUT(ifcs_1_noRouteRsp$D_OUT),
							    .FULL_N(ifcs_1_noRouteRsp$FULL_N),
							    .EMPTY_N(ifcs_1_noRouteRsp$EMPTY_N));

  // submodule ifcs_1_routeBack
  FIFO2 #(.width(32'd2), .guarded(32'd1)) ifcs_1_routeBack(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(ifcs_1_routeBack$D_IN),
							   .ENQ(ifcs_1_routeBack$ENQ),
							   .DEQ(ifcs_1_routeBack$DEQ),
							   .CLR(ifcs_1_routeBack$CLR),
							   .D_OUT(ifcs_1_routeBack$D_OUT),
							   .FULL_N(ifcs_1_routeBack$FULL_N),
							   .EMPTY_N(ifcs_1_routeBack$EMPTY_N));

  // submodule ifcs_1_rspBack
  FIFO2 #(.width(32'd6), .guarded(32'd1)) ifcs_1_rspBack(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(ifcs_1_rspBack$D_IN),
							 .ENQ(ifcs_1_rspBack$ENQ),
							 .DEQ(ifcs_1_rspBack$DEQ),
							 .CLR(ifcs_1_rspBack$CLR),
							 .D_OUT(ifcs_1_rspBack$D_OUT),
							 .FULL_N(ifcs_1_rspBack$FULL_N),
							 .EMPTY_N(ifcs_1_rspBack$EMPTY_N));

  // submodule ifcs_2_1_routeBack
  FIFO2 #(.width(32'd2), .guarded(32'd1)) ifcs_2_1_routeBack(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ifcs_2_1_routeBack$D_IN),
							     .ENQ(ifcs_2_1_routeBack$ENQ),
							     .DEQ(ifcs_2_1_routeBack$DEQ),
							     .CLR(ifcs_2_1_routeBack$CLR),
							     .D_OUT(ifcs_2_1_routeBack$D_OUT),
							     .FULL_N(ifcs_2_1_routeBack$FULL_N),
							     .EMPTY_N(ifcs_2_1_routeBack$EMPTY_N));

  // submodule ifcs_2_1_rspBack
  FIFO2 #(.width(32'd137), .guarded(32'd1)) ifcs_2_1_rspBack(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ifcs_2_1_rspBack$D_IN),
							     .ENQ(ifcs_2_1_rspBack$ENQ),
							     .DEQ(ifcs_2_1_rspBack$DEQ),
							     .CLR(ifcs_2_1_rspBack$CLR),
							     .D_OUT(ifcs_2_1_rspBack$D_OUT),
							     .FULL_N(ifcs_2_1_rspBack$FULL_N),
							     .EMPTY_N(ifcs_2_1_rspBack$EMPTY_N));

  // submodule ifcs_2_routeBack
  FIFO2 #(.width(32'd2), .guarded(32'd1)) ifcs_2_routeBack(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(ifcs_2_routeBack$D_IN),
							   .ENQ(ifcs_2_routeBack$ENQ),
							   .DEQ(ifcs_2_routeBack$DEQ),
							   .CLR(ifcs_2_routeBack$CLR),
							   .D_OUT(ifcs_2_routeBack$D_OUT),
							   .FULL_N(ifcs_2_routeBack$FULL_N),
							   .EMPTY_N(ifcs_2_routeBack$EMPTY_N));

  // submodule ifcs_2_rspBack
  FIFO2 #(.width(32'd6), .guarded(32'd1)) ifcs_2_rspBack(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(ifcs_2_rspBack$D_IN),
							 .ENQ(ifcs_2_rspBack$ENQ),
							 .DEQ(ifcs_2_rspBack$DEQ),
							 .CLR(ifcs_2_rspBack$CLR),
							 .D_OUT(ifcs_2_rspBack$D_OUT),
							 .FULL_N(ifcs_2_rspBack$FULL_N),
							 .EMPTY_N(ifcs_2_rspBack$EMPTY_N));

  // submodule msNoSynth_0_b_buffer_ff
  FIFO1 #(.width(32'd6), .guarded(32'd0)) msNoSynth_0_b_buffer_ff(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(msNoSynth_0_b_buffer_ff$D_IN),
								  .ENQ(msNoSynth_0_b_buffer_ff$ENQ),
								  .DEQ(msNoSynth_0_b_buffer_ff$DEQ),
								  .CLR(msNoSynth_0_b_buffer_ff$CLR),
								  .D_OUT(msNoSynth_0_b_buffer_ff$D_OUT),
								  .FULL_N(msNoSynth_0_b_buffer_ff$FULL_N),
								  .EMPTY_N(msNoSynth_0_b_buffer_ff$EMPTY_N));

  // submodule msNoSynth_0_b_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) msNoSynth_0_b_buffer_firstValid(.CLK(CLK),
							   .D_IN(msNoSynth_0_b_buffer_firstValid$D_IN),
							   .EN(msNoSynth_0_b_buffer_firstValid$EN),
							   .Q_OUT(msNoSynth_0_b_buffer_firstValid$Q_OUT));

  // submodule msNoSynth_0_r_buffer_ff
  FIFO1 #(.width(32'd137),
	  .guarded(32'd0)) msNoSynth_0_r_buffer_ff(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(msNoSynth_0_r_buffer_ff$D_IN),
						   .ENQ(msNoSynth_0_r_buffer_ff$ENQ),
						   .DEQ(msNoSynth_0_r_buffer_ff$DEQ),
						   .CLR(msNoSynth_0_r_buffer_ff$CLR),
						   .D_OUT(msNoSynth_0_r_buffer_ff$D_OUT),
						   .FULL_N(msNoSynth_0_r_buffer_ff$FULL_N),
						   .EMPTY_N(msNoSynth_0_r_buffer_ff$EMPTY_N));

  // submodule msNoSynth_0_r_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) msNoSynth_0_r_buffer_firstValid(.CLK(CLK),
							   .D_IN(msNoSynth_0_r_buffer_firstValid$D_IN),
							   .EN(msNoSynth_0_r_buffer_firstValid$EN),
							   .Q_OUT(msNoSynth_0_r_buffer_firstValid$Q_OUT));

  // submodule msNoSynth_1_b_buffer_ff
  FIFO1 #(.width(32'd6), .guarded(32'd0)) msNoSynth_1_b_buffer_ff(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(msNoSynth_1_b_buffer_ff$D_IN),
								  .ENQ(msNoSynth_1_b_buffer_ff$ENQ),
								  .DEQ(msNoSynth_1_b_buffer_ff$DEQ),
								  .CLR(msNoSynth_1_b_buffer_ff$CLR),
								  .D_OUT(msNoSynth_1_b_buffer_ff$D_OUT),
								  .FULL_N(msNoSynth_1_b_buffer_ff$FULL_N),
								  .EMPTY_N(msNoSynth_1_b_buffer_ff$EMPTY_N));

  // submodule msNoSynth_1_b_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) msNoSynth_1_b_buffer_firstValid(.CLK(CLK),
							   .D_IN(msNoSynth_1_b_buffer_firstValid$D_IN),
							   .EN(msNoSynth_1_b_buffer_firstValid$EN),
							   .Q_OUT(msNoSynth_1_b_buffer_firstValid$Q_OUT));

  // submodule msNoSynth_1_r_buffer_ff
  FIFO1 #(.width(32'd137),
	  .guarded(32'd0)) msNoSynth_1_r_buffer_ff(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(msNoSynth_1_r_buffer_ff$D_IN),
						   .ENQ(msNoSynth_1_r_buffer_ff$ENQ),
						   .DEQ(msNoSynth_1_r_buffer_ff$DEQ),
						   .CLR(msNoSynth_1_r_buffer_ff$CLR),
						   .D_OUT(msNoSynth_1_r_buffer_ff$D_OUT),
						   .FULL_N(msNoSynth_1_r_buffer_ff$FULL_N),
						   .EMPTY_N(msNoSynth_1_r_buffer_ff$EMPTY_N));

  // submodule msNoSynth_1_r_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) msNoSynth_1_r_buffer_firstValid(.CLK(CLK),
							   .D_IN(msNoSynth_1_r_buffer_firstValid$D_IN),
							   .EN(msNoSynth_1_r_buffer_firstValid$EN),
							   .Q_OUT(msNoSynth_1_r_buffer_firstValid$Q_OUT));

  // submodule near_mem_io
  mkNear_Mem_IO_AXI4 near_mem_io(.CLK(CLK),
				 .RST_N(RST_N),
				 .axi4_slave_araddr(near_mem_io$axi4_slave_araddr),
				 .axi4_slave_arburst(near_mem_io$axi4_slave_arburst),
				 .axi4_slave_arcache(near_mem_io$axi4_slave_arcache),
				 .axi4_slave_arid(near_mem_io$axi4_slave_arid),
				 .axi4_slave_arlen(near_mem_io$axi4_slave_arlen),
				 .axi4_slave_arlock(near_mem_io$axi4_slave_arlock),
				 .axi4_slave_arprot(near_mem_io$axi4_slave_arprot),
				 .axi4_slave_arqos(near_mem_io$axi4_slave_arqos),
				 .axi4_slave_arregion(near_mem_io$axi4_slave_arregion),
				 .axi4_slave_arsize(near_mem_io$axi4_slave_arsize),
				 .axi4_slave_awaddr(near_mem_io$axi4_slave_awaddr),
				 .axi4_slave_awburst(near_mem_io$axi4_slave_awburst),
				 .axi4_slave_awcache(near_mem_io$axi4_slave_awcache),
				 .axi4_slave_awid(near_mem_io$axi4_slave_awid),
				 .axi4_slave_awlen(near_mem_io$axi4_slave_awlen),
				 .axi4_slave_awlock(near_mem_io$axi4_slave_awlock),
				 .axi4_slave_awprot(near_mem_io$axi4_slave_awprot),
				 .axi4_slave_awqos(near_mem_io$axi4_slave_awqos),
				 .axi4_slave_awregion(near_mem_io$axi4_slave_awregion),
				 .axi4_slave_awsize(near_mem_io$axi4_slave_awsize),
				 .axi4_slave_bready(near_mem_io$axi4_slave_bready),
				 .axi4_slave_rready(near_mem_io$axi4_slave_rready),
				 .axi4_slave_wdata(near_mem_io$axi4_slave_wdata),
				 .axi4_slave_wlast(near_mem_io$axi4_slave_wlast),
				 .axi4_slave_wstrb(near_mem_io$axi4_slave_wstrb),
				 .axi4_slave_wuser(near_mem_io$axi4_slave_wuser),
				 .set_addr_map_addr_base(near_mem_io$set_addr_map_addr_base),
				 .set_addr_map_addr_lim(near_mem_io$set_addr_map_addr_lim),
				 .EN_server_reset_request_put(near_mem_io$EN_server_reset_request_put),
				 .EN_server_reset_response_get(near_mem_io$EN_server_reset_response_get),
				 .EN_set_addr_map(near_mem_io$EN_set_addr_map),
				 .axi4_slave_awvalid(near_mem_io$axi4_slave_awvalid),
				 .axi4_slave_wvalid(near_mem_io$axi4_slave_wvalid),
				 .axi4_slave_arvalid(near_mem_io$axi4_slave_arvalid),
				 .EN_get_timer_interrupt_req_get(near_mem_io$EN_get_timer_interrupt_req_get),
				 .EN_get_sw_interrupt_req_get(near_mem_io$EN_get_sw_interrupt_req_get),
				 .RDY_server_reset_request_put(near_mem_io$RDY_server_reset_request_put),
				 .RDY_server_reset_response_get(near_mem_io$RDY_server_reset_response_get),
				 .RDY_set_addr_map(),
				 .axi4_slave_awready(near_mem_io$axi4_slave_awready),
				 .axi4_slave_wready(near_mem_io$axi4_slave_wready),
				 .axi4_slave_bid(near_mem_io$axi4_slave_bid),
				 .axi4_slave_bresp(near_mem_io$axi4_slave_bresp),
				 .axi4_slave_bvalid(near_mem_io$axi4_slave_bvalid),
				 .axi4_slave_arready(near_mem_io$axi4_slave_arready),
				 .axi4_slave_rid(near_mem_io$axi4_slave_rid),
				 .axi4_slave_rdata(near_mem_io$axi4_slave_rdata),
				 .axi4_slave_rresp(near_mem_io$axi4_slave_rresp),
				 .axi4_slave_rlast(near_mem_io$axi4_slave_rlast),
				 .axi4_slave_ruser(near_mem_io$axi4_slave_ruser),
				 .axi4_slave_rvalid(near_mem_io$axi4_slave_rvalid),
				 .get_timer_interrupt_req_get(near_mem_io$get_timer_interrupt_req_get),
				 .RDY_get_timer_interrupt_req_get(near_mem_io$RDY_get_timer_interrupt_req_get),
				 .get_sw_interrupt_req_get(near_mem_io$get_sw_interrupt_req_get),
				 .RDY_get_sw_interrupt_req_get(near_mem_io$RDY_get_sw_interrupt_req_get));

  // submodule plic
  mkPLIC_16_2_7 plic(.CLK(CLK),
		     .RST_N(RST_N),
		     .axi4_slave_araddr(plic$axi4_slave_araddr),
		     .axi4_slave_arburst(plic$axi4_slave_arburst),
		     .axi4_slave_arcache(plic$axi4_slave_arcache),
		     .axi4_slave_arid(plic$axi4_slave_arid),
		     .axi4_slave_arlen(plic$axi4_slave_arlen),
		     .axi4_slave_arlock(plic$axi4_slave_arlock),
		     .axi4_slave_arprot(plic$axi4_slave_arprot),
		     .axi4_slave_arqos(plic$axi4_slave_arqos),
		     .axi4_slave_arregion(plic$axi4_slave_arregion),
		     .axi4_slave_arsize(plic$axi4_slave_arsize),
		     .axi4_slave_awaddr(plic$axi4_slave_awaddr),
		     .axi4_slave_awburst(plic$axi4_slave_awburst),
		     .axi4_slave_awcache(plic$axi4_slave_awcache),
		     .axi4_slave_awid(plic$axi4_slave_awid),
		     .axi4_slave_awlen(plic$axi4_slave_awlen),
		     .axi4_slave_awlock(plic$axi4_slave_awlock),
		     .axi4_slave_awprot(plic$axi4_slave_awprot),
		     .axi4_slave_awqos(plic$axi4_slave_awqos),
		     .axi4_slave_awregion(plic$axi4_slave_awregion),
		     .axi4_slave_awsize(plic$axi4_slave_awsize),
		     .axi4_slave_bready(plic$axi4_slave_bready),
		     .axi4_slave_rready(plic$axi4_slave_rready),
		     .axi4_slave_wdata(plic$axi4_slave_wdata),
		     .axi4_slave_wlast(plic$axi4_slave_wlast),
		     .axi4_slave_wstrb(plic$axi4_slave_wstrb),
		     .axi4_slave_wuser(plic$axi4_slave_wuser),
		     .set_addr_map_addr_base(plic$set_addr_map_addr_base),
		     .set_addr_map_addr_lim(plic$set_addr_map_addr_lim),
		     .set_verbosity_verbosity(plic$set_verbosity_verbosity),
		     .v_sources_0_m_interrupt_req_set_not_clear(plic$v_sources_0_m_interrupt_req_set_not_clear),
		     .v_sources_10_m_interrupt_req_set_not_clear(plic$v_sources_10_m_interrupt_req_set_not_clear),
		     .v_sources_11_m_interrupt_req_set_not_clear(plic$v_sources_11_m_interrupt_req_set_not_clear),
		     .v_sources_12_m_interrupt_req_set_not_clear(plic$v_sources_12_m_interrupt_req_set_not_clear),
		     .v_sources_13_m_interrupt_req_set_not_clear(plic$v_sources_13_m_interrupt_req_set_not_clear),
		     .v_sources_14_m_interrupt_req_set_not_clear(plic$v_sources_14_m_interrupt_req_set_not_clear),
		     .v_sources_15_m_interrupt_req_set_not_clear(plic$v_sources_15_m_interrupt_req_set_not_clear),
		     .v_sources_1_m_interrupt_req_set_not_clear(plic$v_sources_1_m_interrupt_req_set_not_clear),
		     .v_sources_2_m_interrupt_req_set_not_clear(plic$v_sources_2_m_interrupt_req_set_not_clear),
		     .v_sources_3_m_interrupt_req_set_not_clear(plic$v_sources_3_m_interrupt_req_set_not_clear),
		     .v_sources_4_m_interrupt_req_set_not_clear(plic$v_sources_4_m_interrupt_req_set_not_clear),
		     .v_sources_5_m_interrupt_req_set_not_clear(plic$v_sources_5_m_interrupt_req_set_not_clear),
		     .v_sources_6_m_interrupt_req_set_not_clear(plic$v_sources_6_m_interrupt_req_set_not_clear),
		     .v_sources_7_m_interrupt_req_set_not_clear(plic$v_sources_7_m_interrupt_req_set_not_clear),
		     .v_sources_8_m_interrupt_req_set_not_clear(plic$v_sources_8_m_interrupt_req_set_not_clear),
		     .v_sources_9_m_interrupt_req_set_not_clear(plic$v_sources_9_m_interrupt_req_set_not_clear),
		     .EN_set_verbosity(plic$EN_set_verbosity),
		     .EN_show_PLIC_state(plic$EN_show_PLIC_state),
		     .EN_server_reset_request_put(plic$EN_server_reset_request_put),
		     .EN_server_reset_response_get(plic$EN_server_reset_response_get),
		     .EN_set_addr_map(plic$EN_set_addr_map),
		     .axi4_slave_awvalid(plic$axi4_slave_awvalid),
		     .axi4_slave_wvalid(plic$axi4_slave_wvalid),
		     .axi4_slave_arvalid(plic$axi4_slave_arvalid),
		     .RDY_set_verbosity(),
		     .RDY_show_PLIC_state(),
		     .RDY_server_reset_request_put(plic$RDY_server_reset_request_put),
		     .RDY_server_reset_response_get(plic$RDY_server_reset_response_get),
		     .RDY_set_addr_map(),
		     .axi4_slave_awready(plic$axi4_slave_awready),
		     .axi4_slave_wready(plic$axi4_slave_wready),
		     .axi4_slave_bid(plic$axi4_slave_bid),
		     .axi4_slave_bresp(plic$axi4_slave_bresp),
		     .axi4_slave_bvalid(plic$axi4_slave_bvalid),
		     .axi4_slave_arready(plic$axi4_slave_arready),
		     .axi4_slave_rid(plic$axi4_slave_rid),
		     .axi4_slave_rdata(plic$axi4_slave_rdata),
		     .axi4_slave_rresp(plic$axi4_slave_rresp),
		     .axi4_slave_rlast(plic$axi4_slave_rlast),
		     .axi4_slave_ruser(plic$axi4_slave_ruser),
		     .axi4_slave_rvalid(plic$axi4_slave_rvalid),
		     .v_targets_0_m_eip(plic$v_targets_0_m_eip),
		     .v_targets_1_m_eip(plic$v_targets_1_m_eip));

  // submodule soc_map
  mkSoC_Map soc_map(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_is_IO_addr_addr(soc_map$m_is_IO_addr_addr),
		    .m_is_mem_addr_addr(soc_map$m_is_mem_addr_addr),
		    .m_is_near_mem_IO_addr_addr(soc_map$m_is_near_mem_IO_addr_addr),
		    .m_plic_addr_range(soc_map$m_plic_addr_range),
		    .m_near_mem_io_addr_range(soc_map$m_near_mem_io_addr_range),
		    .m_ethernet_0_addr_range(),
		    .m_dma_0_addr_range(),
		    .m_uart16550_0_addr_range(),
		    .m_uart16550_1_addr_range(),
		    .m_iic_0_addr_range(),
		    .m_axi_quad_spi_0_full_addr_range(),
		    .m_axi_quad_spi_0_lite_addr_range(),
		    .m_axi_quad_spi_1_addr_range(),
		    .m_gpio_0_addr_range(),
		    .m_gpio_1_addr_range(),
		    .m_boot_rom_addr_range(),
		    .m_ddr4_0_uncached_addr_range(),
		    .m_ddr4_0_cached_addr_range(),
		    .m_is_mem_addr(),
		    .m_is_IO_addr(),
		    .m_is_near_mem_IO_addr(),
		    .m_pc_reset_value(),
		    .m_pcc_reset_value(),
		    .m_ddc_reset_value(),
		    .m_mtcc_reset_value(),
		    .m_mepcc_reset_value(),
		    .m_mtvec_reset_value(),
		    .m_nmivec_reset_value());

  // submodule ssNoSynth_0_ar_buffer_ff
  FIFO1 #(.width(32'd98),
	  .guarded(32'd0)) ssNoSynth_0_ar_buffer_ff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ssNoSynth_0_ar_buffer_ff$D_IN),
						    .ENQ(ssNoSynth_0_ar_buffer_ff$ENQ),
						    .DEQ(ssNoSynth_0_ar_buffer_ff$DEQ),
						    .CLR(ssNoSynth_0_ar_buffer_ff$CLR),
						    .D_OUT(ssNoSynth_0_ar_buffer_ff$D_OUT),
						    .FULL_N(ssNoSynth_0_ar_buffer_ff$FULL_N),
						    .EMPTY_N(ssNoSynth_0_ar_buffer_ff$EMPTY_N));

  // submodule ssNoSynth_0_ar_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) ssNoSynth_0_ar_buffer_firstValid(.CLK(CLK),
							    .D_IN(ssNoSynth_0_ar_buffer_firstValid$D_IN),
							    .EN(ssNoSynth_0_ar_buffer_firstValid$EN),
							    .Q_OUT(ssNoSynth_0_ar_buffer_firstValid$Q_OUT));

  // submodule ssNoSynth_0_aw_buffer_ff
  FIFO1 #(.width(32'd98),
	  .guarded(32'd0)) ssNoSynth_0_aw_buffer_ff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ssNoSynth_0_aw_buffer_ff$D_IN),
						    .ENQ(ssNoSynth_0_aw_buffer_ff$ENQ),
						    .DEQ(ssNoSynth_0_aw_buffer_ff$DEQ),
						    .CLR(ssNoSynth_0_aw_buffer_ff$CLR),
						    .D_OUT(ssNoSynth_0_aw_buffer_ff$D_OUT),
						    .FULL_N(ssNoSynth_0_aw_buffer_ff$FULL_N),
						    .EMPTY_N(ssNoSynth_0_aw_buffer_ff$EMPTY_N));

  // submodule ssNoSynth_0_aw_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) ssNoSynth_0_aw_buffer_firstValid(.CLK(CLK),
							    .D_IN(ssNoSynth_0_aw_buffer_firstValid$D_IN),
							    .EN(ssNoSynth_0_aw_buffer_firstValid$EN),
							    .Q_OUT(ssNoSynth_0_aw_buffer_firstValid$Q_OUT));

  // submodule ssNoSynth_0_w_buffer_ff
  FIFO1 #(.width(32'd147),
	  .guarded(32'd0)) ssNoSynth_0_w_buffer_ff(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(ssNoSynth_0_w_buffer_ff$D_IN),
						   .ENQ(ssNoSynth_0_w_buffer_ff$ENQ),
						   .DEQ(ssNoSynth_0_w_buffer_ff$DEQ),
						   .CLR(ssNoSynth_0_w_buffer_ff$CLR),
						   .D_OUT(ssNoSynth_0_w_buffer_ff$D_OUT),
						   .FULL_N(ssNoSynth_0_w_buffer_ff$FULL_N),
						   .EMPTY_N(ssNoSynth_0_w_buffer_ff$EMPTY_N));

  // submodule ssNoSynth_0_w_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) ssNoSynth_0_w_buffer_firstValid(.CLK(CLK),
							   .D_IN(ssNoSynth_0_w_buffer_firstValid$D_IN),
							   .EN(ssNoSynth_0_w_buffer_firstValid$EN),
							   .Q_OUT(ssNoSynth_0_w_buffer_firstValid$Q_OUT));

  // submodule ssNoSynth_1_ar_buffer_ff
  FIFO1 #(.width(32'd98),
	  .guarded(32'd0)) ssNoSynth_1_ar_buffer_ff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ssNoSynth_1_ar_buffer_ff$D_IN),
						    .ENQ(ssNoSynth_1_ar_buffer_ff$ENQ),
						    .DEQ(ssNoSynth_1_ar_buffer_ff$DEQ),
						    .CLR(ssNoSynth_1_ar_buffer_ff$CLR),
						    .D_OUT(ssNoSynth_1_ar_buffer_ff$D_OUT),
						    .FULL_N(ssNoSynth_1_ar_buffer_ff$FULL_N),
						    .EMPTY_N(ssNoSynth_1_ar_buffer_ff$EMPTY_N));

  // submodule ssNoSynth_1_ar_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) ssNoSynth_1_ar_buffer_firstValid(.CLK(CLK),
							    .D_IN(ssNoSynth_1_ar_buffer_firstValid$D_IN),
							    .EN(ssNoSynth_1_ar_buffer_firstValid$EN),
							    .Q_OUT(ssNoSynth_1_ar_buffer_firstValid$Q_OUT));

  // submodule ssNoSynth_1_aw_buffer_ff
  FIFO1 #(.width(32'd98),
	  .guarded(32'd0)) ssNoSynth_1_aw_buffer_ff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ssNoSynth_1_aw_buffer_ff$D_IN),
						    .ENQ(ssNoSynth_1_aw_buffer_ff$ENQ),
						    .DEQ(ssNoSynth_1_aw_buffer_ff$DEQ),
						    .CLR(ssNoSynth_1_aw_buffer_ff$CLR),
						    .D_OUT(ssNoSynth_1_aw_buffer_ff$D_OUT),
						    .FULL_N(ssNoSynth_1_aw_buffer_ff$FULL_N),
						    .EMPTY_N(ssNoSynth_1_aw_buffer_ff$EMPTY_N));

  // submodule ssNoSynth_1_aw_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) ssNoSynth_1_aw_buffer_firstValid(.CLK(CLK),
							    .D_IN(ssNoSynth_1_aw_buffer_firstValid$D_IN),
							    .EN(ssNoSynth_1_aw_buffer_firstValid$EN),
							    .Q_OUT(ssNoSynth_1_aw_buffer_firstValid$Q_OUT));

  // submodule ssNoSynth_1_w_buffer_ff
  FIFO1 #(.width(32'd147),
	  .guarded(32'd0)) ssNoSynth_1_w_buffer_ff(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(ssNoSynth_1_w_buffer_ff$D_IN),
						   .ENQ(ssNoSynth_1_w_buffer_ff$ENQ),
						   .DEQ(ssNoSynth_1_w_buffer_ff$DEQ),
						   .CLR(ssNoSynth_1_w_buffer_ff$CLR),
						   .D_OUT(ssNoSynth_1_w_buffer_ff$D_OUT),
						   .FULL_N(ssNoSynth_1_w_buffer_ff$FULL_N),
						   .EMPTY_N(ssNoSynth_1_w_buffer_ff$EMPTY_N));

  // submodule ssNoSynth_1_w_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) ssNoSynth_1_w_buffer_firstValid(.CLK(CLK),
							   .D_IN(ssNoSynth_1_w_buffer_firstValid$D_IN),
							   .EN(ssNoSynth_1_w_buffer_firstValid$EN),
							   .Q_OUT(ssNoSynth_1_w_buffer_firstValid$Q_OUT));

  // submodule ssNoSynth_2_ar_buffer_ff
  FIFO1 #(.width(32'd98),
	  .guarded(32'd0)) ssNoSynth_2_ar_buffer_ff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ssNoSynth_2_ar_buffer_ff$D_IN),
						    .ENQ(ssNoSynth_2_ar_buffer_ff$ENQ),
						    .DEQ(ssNoSynth_2_ar_buffer_ff$DEQ),
						    .CLR(ssNoSynth_2_ar_buffer_ff$CLR),
						    .D_OUT(ssNoSynth_2_ar_buffer_ff$D_OUT),
						    .FULL_N(ssNoSynth_2_ar_buffer_ff$FULL_N),
						    .EMPTY_N(ssNoSynth_2_ar_buffer_ff$EMPTY_N));

  // submodule ssNoSynth_2_ar_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) ssNoSynth_2_ar_buffer_firstValid(.CLK(CLK),
							    .D_IN(ssNoSynth_2_ar_buffer_firstValid$D_IN),
							    .EN(ssNoSynth_2_ar_buffer_firstValid$EN),
							    .Q_OUT(ssNoSynth_2_ar_buffer_firstValid$Q_OUT));

  // submodule ssNoSynth_2_aw_buffer_ff
  FIFO1 #(.width(32'd98),
	  .guarded(32'd0)) ssNoSynth_2_aw_buffer_ff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ssNoSynth_2_aw_buffer_ff$D_IN),
						    .ENQ(ssNoSynth_2_aw_buffer_ff$ENQ),
						    .DEQ(ssNoSynth_2_aw_buffer_ff$DEQ),
						    .CLR(ssNoSynth_2_aw_buffer_ff$CLR),
						    .D_OUT(ssNoSynth_2_aw_buffer_ff$D_OUT),
						    .FULL_N(ssNoSynth_2_aw_buffer_ff$FULL_N),
						    .EMPTY_N(ssNoSynth_2_aw_buffer_ff$EMPTY_N));

  // submodule ssNoSynth_2_aw_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) ssNoSynth_2_aw_buffer_firstValid(.CLK(CLK),
							    .D_IN(ssNoSynth_2_aw_buffer_firstValid$D_IN),
							    .EN(ssNoSynth_2_aw_buffer_firstValid$EN),
							    .Q_OUT(ssNoSynth_2_aw_buffer_firstValid$Q_OUT));

  // submodule ssNoSynth_2_w_buffer_ff
  FIFO1 #(.width(32'd147),
	  .guarded(32'd0)) ssNoSynth_2_w_buffer_ff(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(ssNoSynth_2_w_buffer_ff$D_IN),
						   .ENQ(ssNoSynth_2_w_buffer_ff$ENQ),
						   .DEQ(ssNoSynth_2_w_buffer_ff$DEQ),
						   .CLR(ssNoSynth_2_w_buffer_ff$CLR),
						   .D_OUT(ssNoSynth_2_w_buffer_ff$D_OUT),
						   .FULL_N(ssNoSynth_2_w_buffer_ff$FULL_N),
						   .EMPTY_N(ssNoSynth_2_w_buffer_ff$EMPTY_N));

  // submodule ssNoSynth_2_w_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) ssNoSynth_2_w_buffer_firstValid(.CLK(CLK),
							   .D_IN(ssNoSynth_2_w_buffer_firstValid$D_IN),
							   .EN(ssNoSynth_2_w_buffer_firstValid$EN),
							   .Q_OUT(ssNoSynth_2_w_buffer_firstValid$Q_OUT));

  // submodule tagController_tmp_limiter
  FIFO10 #(.guarded(32'd1)) tagController_tmp_limiter(.RST(RST_N),
						      .CLK(CLK),
						      .ENQ(tagController_tmp_limiter$ENQ),
						      .DEQ(tagController_tmp_limiter$DEQ),
						      .CLR(tagController_tmp_limiter$CLR),
						      .FULL_N(tagController_tmp_limiter$FULL_N),
						      .EMPTY_N(tagController_tmp_limiter$EMPTY_N));

  // submodule tagController_tmp_newRst
  MakeReset0 #(.init(1'd0)) tagController_tmp_newRst(.CLK(CLK),
						     .RST(RST_N),
						     .ASSERT_IN(tagController_tmp_newRst$ASSERT_IN),
						     .ASSERT_OUT(),
						     .OUT_RST(tagController_tmp_newRst$OUT_RST));

  // submodule tagController_tmp_shimMaster_arff
  SizedFIFO #(.p1width(32'd99),
	      .p2depth(32'd32),
	      .p3cntr_width(32'd5),
	      .guarded(32'd0)) tagController_tmp_shimMaster_arff(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(tagController_tmp_shimMaster_arff$D_IN),
								 .ENQ(tagController_tmp_shimMaster_arff$ENQ),
								 .DEQ(tagController_tmp_shimMaster_arff$DEQ),
								 .CLR(tagController_tmp_shimMaster_arff$CLR),
								 .D_OUT(tagController_tmp_shimMaster_arff$D_OUT),
								 .FULL_N(),
								 .EMPTY_N(tagController_tmp_shimMaster_arff$EMPTY_N));

  // submodule tagController_tmp_shimMaster_awff
  SizedFIFO #(.p1width(32'd99),
	      .p2depth(32'd32),
	      .p3cntr_width(32'd5),
	      .guarded(32'd0)) tagController_tmp_shimMaster_awff(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(tagController_tmp_shimMaster_awff$D_IN),
								 .ENQ(tagController_tmp_shimMaster_awff$ENQ),
								 .DEQ(tagController_tmp_shimMaster_awff$DEQ),
								 .CLR(tagController_tmp_shimMaster_awff$CLR),
								 .D_OUT(tagController_tmp_shimMaster_awff$D_OUT),
								 .FULL_N(),
								 .EMPTY_N(tagController_tmp_shimMaster_awff$EMPTY_N));

  // submodule tagController_tmp_shimMaster_bff
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd32),
	      .p3cntr_width(32'd5),
	      .guarded(32'd0)) tagController_tmp_shimMaster_bff(.RST(RST_N),
								.CLK(CLK),
								.D_IN(tagController_tmp_shimMaster_bff$D_IN),
								.ENQ(tagController_tmp_shimMaster_bff$ENQ),
								.DEQ(tagController_tmp_shimMaster_bff$DEQ),
								.CLR(tagController_tmp_shimMaster_bff$CLR),
								.D_OUT(tagController_tmp_shimMaster_bff$D_OUT),
								.FULL_N(tagController_tmp_shimMaster_bff$FULL_N),
								.EMPTY_N(tagController_tmp_shimMaster_bff$EMPTY_N));

  // submodule tagController_tmp_shimMaster_rff
  SizedFIFO #(.p1width(32'd137),
	      .p2depth(32'd32),
	      .p3cntr_width(32'd5),
	      .guarded(32'd0)) tagController_tmp_shimMaster_rff(.RST(RST_N),
								.CLK(CLK),
								.D_IN(tagController_tmp_shimMaster_rff$D_IN),
								.ENQ(tagController_tmp_shimMaster_rff$ENQ),
								.DEQ(tagController_tmp_shimMaster_rff$DEQ),
								.CLR(tagController_tmp_shimMaster_rff$CLR),
								.D_OUT(tagController_tmp_shimMaster_rff$D_OUT),
								.FULL_N(tagController_tmp_shimMaster_rff$FULL_N),
								.EMPTY_N(tagController_tmp_shimMaster_rff$EMPTY_N));

  // submodule tagController_tmp_shimMaster_wff
  SizedFIFO #(.p1width(32'd145),
	      .p2depth(32'd32),
	      .p3cntr_width(32'd5),
	      .guarded(32'd0)) tagController_tmp_shimMaster_wff(.RST(RST_N),
								.CLK(CLK),
								.D_IN(tagController_tmp_shimMaster_wff$D_IN),
								.ENQ(tagController_tmp_shimMaster_wff$ENQ),
								.DEQ(tagController_tmp_shimMaster_wff$DEQ),
								.CLR(tagController_tmp_shimMaster_wff$CLR),
								.D_OUT(tagController_tmp_shimMaster_wff$D_OUT),
								.FULL_N(),
								.EMPTY_N(tagController_tmp_shimMaster_wff$EMPTY_N));

  // submodule tagController_tmp_shimSlave_arff
  SizedFIFO #(.p1width(32'd98),
	      .p2depth(32'd32),
	      .p3cntr_width(32'd5),
	      .guarded(32'd0)) tagController_tmp_shimSlave_arff(.RST(RST_N),
								.CLK(CLK),
								.D_IN(tagController_tmp_shimSlave_arff$D_IN),
								.ENQ(tagController_tmp_shimSlave_arff$ENQ),
								.DEQ(tagController_tmp_shimSlave_arff$DEQ),
								.CLR(tagController_tmp_shimSlave_arff$CLR),
								.D_OUT(tagController_tmp_shimSlave_arff$D_OUT),
								.FULL_N(tagController_tmp_shimSlave_arff$FULL_N),
								.EMPTY_N(tagController_tmp_shimSlave_arff$EMPTY_N));

  // submodule tagController_tmp_shimSlave_awff
  SizedFIFO #(.p1width(32'd98),
	      .p2depth(32'd32),
	      .p3cntr_width(32'd5),
	      .guarded(32'd0)) tagController_tmp_shimSlave_awff(.RST(RST_N),
								.CLK(CLK),
								.D_IN(tagController_tmp_shimSlave_awff$D_IN),
								.ENQ(tagController_tmp_shimSlave_awff$ENQ),
								.DEQ(tagController_tmp_shimSlave_awff$DEQ),
								.CLR(tagController_tmp_shimSlave_awff$CLR),
								.D_OUT(tagController_tmp_shimSlave_awff$D_OUT),
								.FULL_N(tagController_tmp_shimSlave_awff$FULL_N),
								.EMPTY_N(tagController_tmp_shimSlave_awff$EMPTY_N));

  // submodule tagController_tmp_shimSlave_bff
  SizedFIFO #(.p1width(32'd7),
	      .p2depth(32'd32),
	      .p3cntr_width(32'd5),
	      .guarded(32'd0)) tagController_tmp_shimSlave_bff(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(tagController_tmp_shimSlave_bff$D_IN),
							       .ENQ(tagController_tmp_shimSlave_bff$ENQ),
							       .DEQ(tagController_tmp_shimSlave_bff$DEQ),
							       .CLR(tagController_tmp_shimSlave_bff$CLR),
							       .D_OUT(tagController_tmp_shimSlave_bff$D_OUT),
							       .FULL_N(),
							       .EMPTY_N(tagController_tmp_shimSlave_bff$EMPTY_N));

  // submodule tagController_tmp_shimSlave_rff
  SizedFIFO #(.p1width(32'd138),
	      .p2depth(32'd32),
	      .p3cntr_width(32'd5),
	      .guarded(32'd0)) tagController_tmp_shimSlave_rff(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(tagController_tmp_shimSlave_rff$D_IN),
							       .ENQ(tagController_tmp_shimSlave_rff$ENQ),
							       .DEQ(tagController_tmp_shimSlave_rff$DEQ),
							       .CLR(tagController_tmp_shimSlave_rff$CLR),
							       .D_OUT(tagController_tmp_shimSlave_rff$D_OUT),
							       .FULL_N(),
							       .EMPTY_N(tagController_tmp_shimSlave_rff$EMPTY_N));

  // submodule tagController_tmp_shimSlave_wff
  SizedFIFO #(.p1width(32'd147),
	      .p2depth(32'd32),
	      .p3cntr_width(32'd5),
	      .guarded(32'd0)) tagController_tmp_shimSlave_wff(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(tagController_tmp_shimSlave_wff$D_IN),
							       .ENQ(tagController_tmp_shimSlave_wff$ENQ),
							       .DEQ(tagController_tmp_shimSlave_wff$DEQ),
							       .CLR(tagController_tmp_shimSlave_wff$CLR),
							       .D_OUT(tagController_tmp_shimSlave_wff$D_OUT),
							       .FULL_N(tagController_tmp_shimSlave_wff$FULL_N),
							       .EMPTY_N(tagController_tmp_shimSlave_wff$EMPTY_N));

  // submodule tagController_tmp_tagCon
  mkTagController tagController_tmp_tagCon(.CLK(CLK),
					   .RST_N(tagController_tmp_newRst$OUT_RST),
					   .cache_request_put_val(tagController_tmp_tagCon$cache_request_put_val),
					   .memory_response_put_val(tagController_tmp_tagCon$memory_response_put_val),
					   .EN_cache_request_put(tagController_tmp_tagCon$EN_cache_request_put),
					   .EN_cache_response_get(tagController_tmp_tagCon$EN_cache_response_get),
					   .EN_memory_request_get(tagController_tmp_tagCon$EN_memory_request_get),
					   .EN_memory_response_put(tagController_tmp_tagCon$EN_memory_response_put),
					   .cache_request_canPut(),
					   .RDY_cache_request_put(tagController_tmp_tagCon$RDY_cache_request_put),
					   .cache_response_canGet(),
					   .cache_response_peek(),
					   .RDY_cache_response_peek(),
					   .cache_response_get(tagController_tmp_tagCon$cache_response_get),
					   .RDY_cache_response_get(tagController_tmp_tagCon$RDY_cache_response_get),
					   .memory_request_canGet(),
					   .memory_request_peek(),
					   .RDY_memory_request_peek(),
					   .memory_request_get(tagController_tmp_tagCon$memory_request_get),
					   .RDY_memory_request_get(tagController_tmp_tagCon$RDY_memory_request_get),
					   .memory_response_canPut(),
					   .RDY_memory_response_put(tagController_tmp_tagCon$RDY_memory_response_put));

  // submodule tv_encode
  mkTV_Encode tv_encode(.CLK(CLK),
			.RST_N(RST_N),
			.trace_data_in_put(tv_encode$trace_data_in_put),
			.EN_reset(tv_encode$EN_reset),
			.EN_trace_data_in_put(tv_encode$EN_trace_data_in_put),
			.EN_tv_vb_out_get(tv_encode$EN_tv_vb_out_get),
			.RDY_reset(),
			.RDY_trace_data_in_put(tv_encode$RDY_trace_data_in_put),
			.tv_vb_out_get(tv_encode$tv_vb_out_get),
			.RDY_tv_vb_out_get(tv_encode$RDY_tv_vb_out_get));

  // rule RL_ClientServerRequest
  assign CAN_FIRE_RL_ClientServerRequest =
	     debug_module$RDY_hart0_client_run_halt_request_get &&
	     cpu$RDY_hart0_server_run_halt_request_put ;
  assign WILL_FIRE_RL_ClientServerRequest = CAN_FIRE_RL_ClientServerRequest ;

  // rule RL_ClientServerResponse
  assign CAN_FIRE_RL_ClientServerResponse =
	     debug_module$RDY_hart0_client_run_halt_response_put &&
	     cpu$RDY_hart0_server_run_halt_response_get ;
  assign WILL_FIRE_RL_ClientServerResponse =
	     CAN_FIRE_RL_ClientServerResponse ;

  // rule RL_mkConnectionGetPut
  assign CAN_FIRE_RL_mkConnectionGetPut =
	     debug_module$RDY_hart0_get_other_req_get ;
  assign WILL_FIRE_RL_mkConnectionGetPut =
	     debug_module$RDY_hart0_get_other_req_get ;

  // rule RL_mkConnectionGetPut_1
  assign CAN_FIRE_RL_mkConnectionGetPut_1 =
	     tv_encode$RDY_trace_data_in_put && f_trace_data_merged$EMPTY_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut_1 =
	     CAN_FIRE_RL_mkConnectionGetPut_1 ;

  // rule RL_ClientServerRequest_1
  assign CAN_FIRE_RL_ClientServerRequest_1 =
	     debug_module$RDY_hart0_gpr_mem_client_request_get &&
	     dm_gpr_tap_ifc$RDY_server_request_put ;
  assign WILL_FIRE_RL_ClientServerRequest_1 =
	     CAN_FIRE_RL_ClientServerRequest_1 ;

  // rule RL_ClientServerResponse_1
  assign CAN_FIRE_RL_ClientServerResponse_1 =
	     debug_module$RDY_hart0_gpr_mem_client_response_put &&
	     dm_gpr_tap_ifc$RDY_server_response_get ;
  assign WILL_FIRE_RL_ClientServerResponse_1 =
	     CAN_FIRE_RL_ClientServerResponse_1 ;

  // rule RL_ClientServerRequest_2
  assign CAN_FIRE_RL_ClientServerRequest_2 =
	     dm_gpr_tap_ifc$RDY_client_request_get &&
	     cpu$RDY_hart0_gpr_mem_server_request_put ;
  assign WILL_FIRE_RL_ClientServerRequest_2 =
	     CAN_FIRE_RL_ClientServerRequest_2 ;

  // rule RL_ClientServerResponse_2
  assign CAN_FIRE_RL_ClientServerResponse_2 =
	     dm_gpr_tap_ifc$RDY_client_response_put &&
	     cpu$RDY_hart0_gpr_mem_server_response_get ;
  assign WILL_FIRE_RL_ClientServerResponse_2 =
	     CAN_FIRE_RL_ClientServerResponse_2 ;

  // rule RL_merge_dm_gpr_trace_data
  assign CAN_FIRE_RL_merge_dm_gpr_trace_data =
	     dm_gpr_tap_ifc$RDY_trace_data_out_get &&
	     f_trace_data_merged$FULL_N ;
  assign WILL_FIRE_RL_merge_dm_gpr_trace_data =
	     CAN_FIRE_RL_merge_dm_gpr_trace_data ;

  // rule RL_ClientServerRequest_3
  assign CAN_FIRE_RL_ClientServerRequest_3 =
	     debug_module$RDY_hart0_csr_mem_client_request_get &&
	     dm_csr_tap$RDY_server_request_put ;
  assign WILL_FIRE_RL_ClientServerRequest_3 =
	     CAN_FIRE_RL_ClientServerRequest_3 ;

  // rule RL_ClientServerResponse_3
  assign CAN_FIRE_RL_ClientServerResponse_3 =
	     debug_module$RDY_hart0_csr_mem_client_response_put &&
	     dm_csr_tap$RDY_server_response_get ;
  assign WILL_FIRE_RL_ClientServerResponse_3 =
	     CAN_FIRE_RL_ClientServerResponse_3 ;

  // rule RL_ClientServerRequest_4
  assign CAN_FIRE_RL_ClientServerRequest_4 =
	     dm_csr_tap$RDY_client_request_get &&
	     cpu$RDY_hart0_csr_mem_server_request_put ;
  assign WILL_FIRE_RL_ClientServerRequest_4 =
	     CAN_FIRE_RL_ClientServerRequest_4 ;

  // rule RL_ClientServerResponse_4
  assign CAN_FIRE_RL_ClientServerResponse_4 =
	     dm_csr_tap$RDY_client_response_put &&
	     cpu$RDY_hart0_csr_mem_server_response_get ;
  assign WILL_FIRE_RL_ClientServerResponse_4 =
	     CAN_FIRE_RL_ClientServerResponse_4 ;

  // rule RL_merge_cpu_trace_data
  assign CAN_FIRE_RL_merge_cpu_trace_data =
	     cpu$RDY_trace_data_out_get && f_trace_data_merged$FULL_N ;
  assign WILL_FIRE_RL_merge_cpu_trace_data =
	     CAN_FIRE_RL_merge_cpu_trace_data &&
	     !WILL_FIRE_RL_merge_dm_mem_trace_data &&
	     !WILL_FIRE_RL_merge_dm_csr_trace_data &&
	     !WILL_FIRE_RL_merge_dm_gpr_trace_data ;

  // rule RL_merge_dm_mem_trace_data
  assign CAN_FIRE_RL_merge_dm_mem_trace_data =
	     dm_mem_tap$RDY_trace_data_out_get && f_trace_data_merged$FULL_N ;
  assign WILL_FIRE_RL_merge_dm_mem_trace_data =
	     CAN_FIRE_RL_merge_dm_mem_trace_data &&
	     !WILL_FIRE_RL_merge_dm_csr_trace_data &&
	     !WILL_FIRE_RL_merge_dm_gpr_trace_data ;

  // rule RL_merge_dm_csr_trace_data
  assign CAN_FIRE_RL_merge_dm_csr_trace_data =
	     dm_csr_tap$RDY_trace_data_out_get && f_trace_data_merged$FULL_N ;
  assign WILL_FIRE_RL_merge_dm_csr_trace_data =
	     CAN_FIRE_RL_merge_dm_csr_trace_data &&
	     !WILL_FIRE_RL_merge_dm_gpr_trace_data ;

  // rule RL_checkSinkReady
  assign CAN_FIRE_RL_checkSinkReady = 1'd1 ;
  assign WILL_FIRE_RL_checkSinkReady = 1'd1 ;

  // rule RL_checkSinkReady_1
  assign CAN_FIRE_RL_checkSinkReady_1 = 1'd1 ;
  assign WILL_FIRE_RL_checkSinkReady_1 = 1'd1 ;

  // rule RL_checkSinkReady_2
  assign CAN_FIRE_RL_checkSinkReady_2 = 1'd1 ;
  assign WILL_FIRE_RL_checkSinkReady_2 = 1'd1 ;

  // rule RL_craftReq
  assign CAN_FIRE_RL_craftReq =
	     ifcs_0_innerRoute$EMPTY_N && ifcs_0_innerReq$EMPTY_N ;
  assign WILL_FIRE_RL_craftReq = CAN_FIRE_RL_craftReq ;

  // rule RL_craftReq_1
  assign CAN_FIRE_RL_craftReq_1 =
	     ifcs_1_innerRoute$EMPTY_N && ifcs_1_innerReq$EMPTY_N ;
  assign WILL_FIRE_RL_craftReq_1 = CAN_FIRE_RL_craftReq_1 ;

  // rule RL_arbitrate
  assign CAN_FIRE_RL_arbitrate =
	     (CAN_FIRE_RL_craftReq && reqWires_0$wget ||
	      CAN_FIRE_RL_craftReq_1 && reqWires_1$wget) &&
	     !state ;
  assign WILL_FIRE_RL_arbitrate = CAN_FIRE_RL_arbitrate ;

  // rule RL_source_selected
  assign CAN_FIRE_RL_source_selected =
	     (!ifcs_0_innerRoute$EMPTY_N || ifcs_0_innerReq$EMPTY_N) &&
	     !state &&
	     MUX_activeSource_0$write_1__VAL_1 ;
  assign WILL_FIRE_RL_source_selected = CAN_FIRE_RL_source_selected ;

  // rule RL_burst
  assign CAN_FIRE_RL_burst =
	     ifcs_0_innerReq$EMPTY_N && ifcs_0_innerRoute$EMPTY_N &&
	     state_512_AND_activeSource_0_585_586_AND_ifcs__ETC___d1588 ;
  assign WILL_FIRE_RL_burst = CAN_FIRE_RL_burst ;

  // rule RL_source_selected_1
  assign CAN_FIRE_RL_source_selected_1 =
	     (!ifcs_1_innerRoute$EMPTY_N || ifcs_1_innerReq$EMPTY_N) &&
	     !state &&
	     MUX_activeSource_1$write_1__VAL_1 ;
  assign WILL_FIRE_RL_source_selected_1 = CAN_FIRE_RL_source_selected_1 ;

  // rule RL_burst_1
  assign CAN_FIRE_RL_burst_1 =
	     ifcs_1_innerReq$EMPTY_N && ifcs_1_innerRoute$EMPTY_N &&
	     state_512_AND_activeSource_1_629_630_AND_ifcs__ETC___d1632 ;
  assign WILL_FIRE_RL_burst_1 = CAN_FIRE_RL_burst_1 ;

  // rule __me_check_181
  assign CAN_FIRE___me_check_181 = 1'b1 ;
  assign WILL_FIRE___me_check_181 = 1'b1 ;

  // rule __me_check_183
  assign CAN_FIRE___me_check_183 = 1'b1 ;
  assign WILL_FIRE___me_check_183 = 1'b1 ;

  // rule RL_sink_selected
  assign CAN_FIRE_RL_sink_selected =
	     IF_split_0_flitLeft_129_EQ_0_130_THEN_ssNoSynt_ETC___d1457 &&
	     flitToSink_0$whas ;
  assign WILL_FIRE_RL_sink_selected = CAN_FIRE_RL_sink_selected ;

  // rule RL_sink_selected_1
  assign CAN_FIRE_RL_sink_selected_1 =
	     IF_split_1_flitLeft_158_EQ_0_159_THEN_ssNoSynt_ETC___d1458 &&
	     flitToSink_1$whas ;
  assign WILL_FIRE_RL_sink_selected_1 = CAN_FIRE_RL_sink_selected_1 ;

  // rule RL_sink_selected_2
  assign CAN_FIRE_RL_sink_selected_2 =
	     IF_split_2_flitLeft_187_EQ_0_188_THEN_ssNoSynt_ETC___d1459 &&
	     flitToSink_2$whas ;
  assign WILL_FIRE_RL_sink_selected_2 = CAN_FIRE_RL_sink_selected_2 ;

  // rule __me_check_185
  assign CAN_FIRE___me_check_185 = 1'b1 ;
  assign WILL_FIRE___me_check_185 = 1'b1 ;

  // rule RL_checkSinkReady_5
  assign CAN_FIRE_RL_checkSinkReady_5 = 1'd1 ;
  assign WILL_FIRE_RL_checkSinkReady_5 = 1'd1 ;

  // rule RL_checkSinkReady_6
  assign CAN_FIRE_RL_checkSinkReady_6 = 1'd1 ;
  assign WILL_FIRE_RL_checkSinkReady_6 = 1'd1 ;

  // rule RL_checkSinkReady_7
  assign CAN_FIRE_RL_checkSinkReady_7 = 1'd1 ;
  assign WILL_FIRE_RL_checkSinkReady_7 = 1'd1 ;

  // rule RL_craftReq_5
  assign CAN_FIRE_RL_craftReq_5 =
	     ifcs_0_1_innerRoute$EMPTY_N && ifcs_0_1_innerReq$EMPTY_N ;
  assign WILL_FIRE_RL_craftReq_5 = CAN_FIRE_RL_craftReq_5 ;

  // rule RL_craftReq_6
  assign CAN_FIRE_RL_craftReq_6 =
	     ifcs_1_1_innerRoute$EMPTY_N && ifcs_1_1_innerReq$EMPTY_N ;
  assign WILL_FIRE_RL_craftReq_6 = CAN_FIRE_RL_craftReq_6 ;

  // rule RL_arbitrate_2
  assign CAN_FIRE_RL_arbitrate_2 =
	     (CAN_FIRE_RL_craftReq_5 && reqWires_1_0_1$wget ||
	      CAN_FIRE_RL_craftReq_6 && reqWires_1_1_1$wget) &&
	     !state_1_1 ;
  assign WILL_FIRE_RL_arbitrate_2 = CAN_FIRE_RL_arbitrate_2 ;

  // rule RL_source_selected_5
  assign CAN_FIRE_RL_source_selected_5 =
	     (!ifcs_0_1_innerRoute$EMPTY_N || ifcs_0_1_innerReq$EMPTY_N) &&
	     !state_1_1 &&
	     sourceSelect_1_0_1$whas ;
  assign WILL_FIRE_RL_source_selected_5 = CAN_FIRE_RL_source_selected_5 ;

  // rule RL_burst_5
  assign CAN_FIRE_RL_burst_5 =
	     ifcs_0_1_innerReq$EMPTY_N && ifcs_0_1_innerRoute$EMPTY_N &&
	     state_1_1_149_AND_activeSource_1_0_1_216_217_A_ETC___d2219 ;
  assign WILL_FIRE_RL_burst_5 = CAN_FIRE_RL_burst_5 ;

  // rule RL_source_selected_6
  assign CAN_FIRE_RL_source_selected_6 =
	     (!ifcs_1_1_innerRoute$EMPTY_N || ifcs_1_1_innerReq$EMPTY_N) &&
	     !state_1_1 &&
	     sourceSelect_1_1_1$whas ;
  assign WILL_FIRE_RL_source_selected_6 = CAN_FIRE_RL_source_selected_6 ;

  // rule RL_burst_6
  assign CAN_FIRE_RL_burst_6 =
	     ifcs_1_1_innerReq$EMPTY_N && ifcs_1_1_innerRoute$EMPTY_N &&
	     state_1_1_149_AND_activeSource_1_1_1_256_257_A_ETC___d2259 ;
  assign WILL_FIRE_RL_burst_6 = CAN_FIRE_RL_burst_6 ;

  // rule __me_check_228
  assign CAN_FIRE___me_check_228 = 1'b1 ;
  assign WILL_FIRE___me_check_228 = 1'b1 ;

  // rule __me_check_230
  assign CAN_FIRE___me_check_230 = 1'b1 ;
  assign WILL_FIRE___me_check_230 = 1'b1 ;

  // rule RL_sink_selected_5
  assign CAN_FIRE_RL_sink_selected_5 =
	     ssNoSynth_0_ar_buffer_ff$FULL_N && flitToSink_1_0_1$whas ;
  assign WILL_FIRE_RL_sink_selected_5 = CAN_FIRE_RL_sink_selected_5 ;

  // rule RL_sink_selected_6
  assign CAN_FIRE_RL_sink_selected_6 =
	     ssNoSynth_1_ar_buffer_ff$FULL_N && flitToSink_1_1_1$whas ;
  assign WILL_FIRE_RL_sink_selected_6 = CAN_FIRE_RL_sink_selected_6 ;

  // rule RL_sink_selected_7
  assign CAN_FIRE_RL_sink_selected_7 =
	     ssNoSynth_2_ar_buffer_ff$FULL_N && flitToSink_1_2$whas ;
  assign WILL_FIRE_RL_sink_selected_7 = CAN_FIRE_RL_sink_selected_7 ;

  // rule __me_check_232
  assign CAN_FIRE___me_check_232 = 1'b1 ;
  assign WILL_FIRE___me_check_232 = 1'b1 ;

  // rule RL_cpu_imem_ug_u_b_warnDoPut
  assign CAN_FIRE_RL_cpu_imem_ug_u_b_warnDoPut =
	     cpu_imem_ug_u_b_putWire$whas && !cpu_imem_b_buffer_ff$FULL_N ;
  assign WILL_FIRE_RL_cpu_imem_ug_u_b_warnDoPut =
	     CAN_FIRE_RL_cpu_imem_ug_u_b_warnDoPut ;

  // rule RL_cpu_imem_ug_u_b_doPut
  assign CAN_FIRE_RL_cpu_imem_ug_u_b_doPut =
	     cpu_imem_b_buffer_ff$FULL_N && cpu_imem_ug_u_b_putWire$whas ;
  assign WILL_FIRE_RL_cpu_imem_ug_u_b_doPut =
	     CAN_FIRE_RL_cpu_imem_ug_u_b_doPut ;

  // rule RL_cpu_imem_b_forwardFlit
  assign CAN_FIRE_RL_cpu_imem_b_forwardFlit =
	     cpu_imem_b_buffer_firstValid$Q_OUT &&
	     (cpu_imem_b_buffer_ff$EMPTY_N ||
	      CAN_FIRE_RL_cpu_imem_ug_u_b_doPut) ;
  assign WILL_FIRE_RL_cpu_imem_b_forwardFlit =
	     CAN_FIRE_RL_cpu_imem_b_forwardFlit ;

  // rule RL_cpu_imem_b_dropFlit
  assign CAN_FIRE_RL_cpu_imem_b_dropFlit =
	     (cpu_imem_b_buffer_ff$EMPTY_N ||
	      CAN_FIRE_RL_cpu_imem_ug_u_b_doPut) &&
	     cpu$imem_master_bready ;
  assign WILL_FIRE_RL_cpu_imem_b_dropFlit = CAN_FIRE_RL_cpu_imem_b_dropFlit ;

  // rule RL_cpu_imem_b_buffer_enqueue
  assign CAN_FIRE_RL_cpu_imem_b_buffer_enqueue =
	     CAN_FIRE_RL_cpu_imem_ug_u_b_doPut &&
	     (!CAN_FIRE_RL_cpu_imem_b_dropFlit ||
	      cpu_imem_b_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_cpu_imem_b_buffer_enqueue =
	     CAN_FIRE_RL_cpu_imem_b_buffer_enqueue ;

  // rule RL_cpu_imem_b_buffer_dequeue
  assign CAN_FIRE_RL_cpu_imem_b_buffer_dequeue =
	     CAN_FIRE_RL_cpu_imem_b_dropFlit && cpu_imem_b_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_cpu_imem_b_buffer_dequeue =
	     CAN_FIRE_RL_cpu_imem_b_buffer_dequeue ;

  // rule RL_cpu_imem_ug_u_r_warnDoPut
  assign CAN_FIRE_RL_cpu_imem_ug_u_r_warnDoPut =
	     cpu_imem_ug_u_r_putWire$whas && !cpu_imem_r_buffer_ff$FULL_N ;
  assign WILL_FIRE_RL_cpu_imem_ug_u_r_warnDoPut =
	     CAN_FIRE_RL_cpu_imem_ug_u_r_warnDoPut ;

  // rule RL_cpu_imem_ug_u_r_doPut
  assign CAN_FIRE_RL_cpu_imem_ug_u_r_doPut =
	     cpu_imem_r_buffer_ff$FULL_N && cpu_imem_ug_u_r_putWire$whas ;
  assign WILL_FIRE_RL_cpu_imem_ug_u_r_doPut =
	     CAN_FIRE_RL_cpu_imem_ug_u_r_doPut ;

  // rule RL_cpu_imem_r_forwardFlit
  assign CAN_FIRE_RL_cpu_imem_r_forwardFlit =
	     cpu_imem_r_buffer_firstValid$Q_OUT &&
	     (cpu_imem_r_buffer_ff$EMPTY_N ||
	      CAN_FIRE_RL_cpu_imem_ug_u_r_doPut) ;
  assign WILL_FIRE_RL_cpu_imem_r_forwardFlit =
	     CAN_FIRE_RL_cpu_imem_r_forwardFlit ;

  // rule RL_cpu_imem_r_dropFlit
  assign CAN_FIRE_RL_cpu_imem_r_dropFlit =
	     (cpu_imem_r_buffer_ff$EMPTY_N ||
	      CAN_FIRE_RL_cpu_imem_ug_u_r_doPut) &&
	     cpu$imem_master_rready ;
  assign WILL_FIRE_RL_cpu_imem_r_dropFlit = CAN_FIRE_RL_cpu_imem_r_dropFlit ;

  // rule RL_cpu_imem_r_buffer_enqueue
  assign CAN_FIRE_RL_cpu_imem_r_buffer_enqueue =
	     CAN_FIRE_RL_cpu_imem_ug_u_r_doPut &&
	     (!CAN_FIRE_RL_cpu_imem_r_dropFlit ||
	      cpu_imem_r_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_cpu_imem_r_buffer_enqueue =
	     CAN_FIRE_RL_cpu_imem_r_buffer_enqueue ;

  // rule RL_cpu_imem_r_buffer_dequeue
  assign CAN_FIRE_RL_cpu_imem_r_buffer_dequeue =
	     CAN_FIRE_RL_cpu_imem_r_dropFlit && cpu_imem_r_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_cpu_imem_r_buffer_dequeue =
	     CAN_FIRE_RL_cpu_imem_r_buffer_dequeue ;

  // rule RL_cpu_imem_ug_u_aw_setPeek
  assign CAN_FIRE_RL_cpu_imem_ug_u_aw_setPeek = cpu$imem_master_awvalid ;
  assign WILL_FIRE_RL_cpu_imem_ug_u_aw_setPeek = cpu$imem_master_awvalid ;

  // rule RL_cpu_imem_ug_u_aw_warnDoDrop
  assign CAN_FIRE_RL_cpu_imem_ug_u_aw_warnDoDrop =
	     cpu_imem_ug_u_aw_dropWire$whas && !cpu$imem_master_awvalid ;
  assign WILL_FIRE_RL_cpu_imem_ug_u_aw_warnDoDrop =
	     CAN_FIRE_RL_cpu_imem_ug_u_aw_warnDoDrop ;

  // rule RL_cpu_imem_ug_u_aw_doDrop
  assign CAN_FIRE_RL_cpu_imem_ug_u_aw_doDrop =
	     cpu$imem_master_awvalid && cpu_imem_ug_u_aw_dropWire$whas ;
  assign WILL_FIRE_RL_cpu_imem_ug_u_aw_doDrop =
	     CAN_FIRE_RL_cpu_imem_ug_u_aw_doDrop ;

  // rule RL_cpu_imem_aw_forwardReady
  assign CAN_FIRE_RL_cpu_imem_aw_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_cpu_imem_aw_forwardReady = 1'd1 ;

  // rule RL_cpu_imem_ug_u_w_setPeek
  assign CAN_FIRE_RL_cpu_imem_ug_u_w_setPeek = cpu$imem_master_wvalid ;
  assign WILL_FIRE_RL_cpu_imem_ug_u_w_setPeek = cpu$imem_master_wvalid ;

  // rule RL_cpu_imem_ug_u_w_warnDoDrop
  assign CAN_FIRE_RL_cpu_imem_ug_u_w_warnDoDrop =
	     cpu_imem_ug_u_w_dropWire$whas && !cpu$imem_master_wvalid ;
  assign WILL_FIRE_RL_cpu_imem_ug_u_w_warnDoDrop =
	     CAN_FIRE_RL_cpu_imem_ug_u_w_warnDoDrop ;

  // rule RL_cpu_imem_ug_u_w_doDrop
  assign CAN_FIRE_RL_cpu_imem_ug_u_w_doDrop =
	     cpu$imem_master_wvalid && cpu_imem_ug_u_w_dropWire$whas ;
  assign WILL_FIRE_RL_cpu_imem_ug_u_w_doDrop =
	     CAN_FIRE_RL_cpu_imem_ug_u_w_doDrop ;

  // rule RL_cpu_imem_w_forwardReady
  assign CAN_FIRE_RL_cpu_imem_w_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_cpu_imem_w_forwardReady = 1'd1 ;

  // rule RL_tagController_tmp_passCacheWrite
  assign CAN_FIRE_RL_tagController_tmp_passCacheWrite =
	     tagController_tmp_tagCon$RDY_cache_request_put &&
	     tagController_tmp_shimSlave_awff$EMPTY_N &&
	     tagController_tmp_shimSlave_wff$EMPTY_N &&
	     tagController_tmp_limiter$FULL_N &&
	     (!tagController_tmp_shimSlave_arff$EMPTY_N || x__h4924 < 5'd4) ;
  assign WILL_FIRE_RL_tagController_tmp_passCacheWrite =
	     CAN_FIRE_RL_tagController_tmp_passCacheWrite &&
	     !WILL_FIRE_RL_tagController_tmp_passCacheRead ;

  // rule RL_tagController_tmp_passCacheRead
  assign CAN_FIRE_RL_tagController_tmp_passCacheRead =
	     tagController_tmp_tagCon$RDY_cache_request_put &&
	     tagController_tmp_shimSlave_arff$EMPTY_N &&
	     tagController_tmp_limiter$FULL_N &&
	     (!tagController_tmp_shimSlave_awff$EMPTY_N || x__h7558 < 5'd4) ;
  assign WILL_FIRE_RL_tagController_tmp_passCacheRead =
	     CAN_FIRE_RL_tagController_tmp_passCacheRead ;

  // rule RL_tagController_tmp_passCacheResponse
  assign CAN_FIRE_RL_tagController_tmp_passCacheResponse =
	     tagController_tmp_tagCon$RDY_cache_response_get &&
	     tagController_tmp_limiter$EMPTY_N ;
  assign WILL_FIRE_RL_tagController_tmp_passCacheResponse =
	     CAN_FIRE_RL_tagController_tmp_passCacheResponse ;

  // rule RL_tagController_tmp_passMemoryRequest
  assign CAN_FIRE_RL_tagController_tmp_passMemoryRequest =
	     tagController_tmp_tagCon$RDY_memory_request_get ;
  assign WILL_FIRE_RL_tagController_tmp_passMemoryRequest =
	     tagController_tmp_tagCon$RDY_memory_request_get ;

  // rule RL_tagController_tmp_passMemoryResponseWrite
  assign CAN_FIRE_RL_tagController_tmp_passMemoryResponseWrite =
	     tagController_tmp_tagCon$RDY_memory_response_put &&
	     tagController_tmp_shimMaster_bff$EMPTY_N ;
  assign WILL_FIRE_RL_tagController_tmp_passMemoryResponseWrite =
	     CAN_FIRE_RL_tagController_tmp_passMemoryResponseWrite &&
	     !WILL_FIRE_RL_tagController_tmp_passMemoryResponseRead ;

  // rule RL_tagController_tmp_passMemoryResponseRead
  assign CAN_FIRE_RL_tagController_tmp_passMemoryResponseRead =
	     tagController_tmp_tagCon$RDY_memory_response_put &&
	     tagController_tmp_shimMaster_rff$EMPTY_N ;
  assign WILL_FIRE_RL_tagController_tmp_passMemoryResponseRead =
	     CAN_FIRE_RL_tagController_tmp_passMemoryResponseRead ;

  // rule RL_dm_master_nonsynth_canAW
  assign CAN_FIRE_RL_dm_master_nonsynth_canAW = 1'd1 ;
  assign WILL_FIRE_RL_dm_master_nonsynth_canAW = 1'd1 ;

  // rule RL_dm_master_nonsynth_canW
  assign CAN_FIRE_RL_dm_master_nonsynth_canW = 1'd1 ;
  assign WILL_FIRE_RL_dm_master_nonsynth_canW = 1'd1 ;

  // rule RL_dm_master_nonsynth_canAR
  assign CAN_FIRE_RL_dm_master_nonsynth_canAR = 1'd1 ;
  assign WILL_FIRE_RL_dm_master_nonsynth_canAR = 1'd1 ;

  // rule RL_dm_master_nonsynth_canB
  assign CAN_FIRE_RL_dm_master_nonsynth_canB = 1'd1 ;
  assign WILL_FIRE_RL_dm_master_nonsynth_canB = 1'd1 ;

  // rule RL_dm_master_nonsynth_canR
  assign CAN_FIRE_RL_dm_master_nonsynth_canR = 1'd1 ;
  assign WILL_FIRE_RL_dm_master_nonsynth_canR = 1'd1 ;

  // rule RL_dm_master_nonsynth_2_mkConnectionGetPut
  assign CAN_FIRE_RL_dm_master_nonsynth_2_mkConnectionGetPut =
	     dm_master_nonsynth_bufferShim_bff$EMPTY_N &&
	     dm_mem_tap_nosynth_b_buffer_ff$FULL_N ;
  assign WILL_FIRE_RL_dm_master_nonsynth_2_mkConnectionGetPut =
	     CAN_FIRE_RL_dm_master_nonsynth_2_mkConnectionGetPut ;

  // rule RL_dm_mem_tap_nosynth_b_forwardFlit
  assign CAN_FIRE_RL_dm_mem_tap_nosynth_b_forwardFlit =
	     dm_mem_tap_nosynth_b_buffer_firstValid$Q_OUT &&
	     (dm_mem_tap_nosynth_b_buffer_ff$EMPTY_N ||
	      CAN_FIRE_RL_dm_master_nonsynth_2_mkConnectionGetPut) ;
  assign WILL_FIRE_RL_dm_mem_tap_nosynth_b_forwardFlit =
	     CAN_FIRE_RL_dm_mem_tap_nosynth_b_forwardFlit ;

  // rule RL_dm_mem_tap_nosynth_b_dropFlit
  assign CAN_FIRE_RL_dm_mem_tap_nosynth_b_dropFlit =
	     (dm_mem_tap_nosynth_b_buffer_ff$EMPTY_N ||
	      CAN_FIRE_RL_dm_master_nonsynth_2_mkConnectionGetPut) &&
	     dm_mem_tap$master_bready ;
  assign WILL_FIRE_RL_dm_mem_tap_nosynth_b_dropFlit =
	     CAN_FIRE_RL_dm_mem_tap_nosynth_b_dropFlit ;

  // rule RL_connect_bflit
  assign CAN_FIRE_RL_connect_bflit = dm_mem_tap$slave_bvalid ;
  assign WILL_FIRE_RL_connect_bflit = dm_mem_tap$slave_bvalid ;

  // rule RL_connect_bready
  assign CAN_FIRE_RL_connect_bready = 1'd1 ;
  assign WILL_FIRE_RL_connect_bready = 1'd1 ;

  // rule RL_dm_mem_tap_nosynth_b_buffer_enqueue
  assign CAN_FIRE_RL_dm_mem_tap_nosynth_b_buffer_enqueue =
	     CAN_FIRE_RL_dm_master_nonsynth_2_mkConnectionGetPut &&
	     (!CAN_FIRE_RL_dm_mem_tap_nosynth_b_dropFlit ||
	      dm_mem_tap_nosynth_b_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_dm_mem_tap_nosynth_b_buffer_enqueue =
	     CAN_FIRE_RL_dm_mem_tap_nosynth_b_buffer_enqueue ;

  // rule RL_dm_mem_tap_nosynth_b_buffer_dequeue
  assign CAN_FIRE_RL_dm_mem_tap_nosynth_b_buffer_dequeue =
	     CAN_FIRE_RL_dm_mem_tap_nosynth_b_dropFlit &&
	     dm_mem_tap_nosynth_b_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_dm_mem_tap_nosynth_b_buffer_dequeue =
	     CAN_FIRE_RL_dm_mem_tap_nosynth_b_buffer_dequeue ;

  // rule RL_dm_master_nonsynth_4_mkConnectionGetPut
  assign CAN_FIRE_RL_dm_master_nonsynth_4_mkConnectionGetPut =
	     dm_master_nonsynth_bufferShim_rff$EMPTY_N &&
	     dm_mem_tap_nosynth_r_buffer_ff$FULL_N ;
  assign WILL_FIRE_RL_dm_master_nonsynth_4_mkConnectionGetPut =
	     CAN_FIRE_RL_dm_master_nonsynth_4_mkConnectionGetPut ;

  // rule RL_dm_mem_tap_nosynth_r_forwardFlit
  assign CAN_FIRE_RL_dm_mem_tap_nosynth_r_forwardFlit =
	     dm_mem_tap_nosynth_r_buffer_firstValid$Q_OUT &&
	     (dm_mem_tap_nosynth_r_buffer_ff$EMPTY_N ||
	      CAN_FIRE_RL_dm_master_nonsynth_4_mkConnectionGetPut) ;
  assign WILL_FIRE_RL_dm_mem_tap_nosynth_r_forwardFlit =
	     CAN_FIRE_RL_dm_mem_tap_nosynth_r_forwardFlit ;

  // rule RL_dm_mem_tap_nosynth_r_dropFlit
  assign CAN_FIRE_RL_dm_mem_tap_nosynth_r_dropFlit =
	     (dm_mem_tap_nosynth_r_buffer_ff$EMPTY_N ||
	      CAN_FIRE_RL_dm_master_nonsynth_4_mkConnectionGetPut) &&
	     dm_mem_tap$master_rready ;
  assign WILL_FIRE_RL_dm_mem_tap_nosynth_r_dropFlit =
	     CAN_FIRE_RL_dm_mem_tap_nosynth_r_dropFlit ;

  // rule RL_connect_rflit
  assign CAN_FIRE_RL_connect_rflit = dm_mem_tap$slave_rvalid ;
  assign WILL_FIRE_RL_connect_rflit = dm_mem_tap$slave_rvalid ;

  // rule RL_connect_rready
  assign CAN_FIRE_RL_connect_rready = 1'd1 ;
  assign WILL_FIRE_RL_connect_rready = 1'd1 ;

  // rule RL_connect_awflit
  assign CAN_FIRE_RL_connect_awflit = debug_module$master_awvalid ;
  assign WILL_FIRE_RL_connect_awflit = debug_module$master_awvalid ;

  // rule RL_connect_awready
  assign CAN_FIRE_RL_connect_awready = 1'd1 ;
  assign WILL_FIRE_RL_connect_awready = 1'd1 ;

  // rule RL_connect_wflit
  assign CAN_FIRE_RL_connect_wflit = debug_module$master_wvalid ;
  assign WILL_FIRE_RL_connect_wflit = debug_module$master_wvalid ;

  // rule RL_connect_wready
  assign CAN_FIRE_RL_connect_wready = 1'd1 ;
  assign WILL_FIRE_RL_connect_wready = 1'd1 ;

  // rule RL_connect_arflit
  assign CAN_FIRE_RL_connect_arflit = debug_module$master_arvalid ;
  assign WILL_FIRE_RL_connect_arflit = debug_module$master_arvalid ;

  // rule RL_connect_arready
  assign CAN_FIRE_RL_connect_arready = 1'd1 ;
  assign WILL_FIRE_RL_connect_arready = 1'd1 ;

  // rule RL_dm_mem_tap_nosynth_r_buffer_enqueue
  assign CAN_FIRE_RL_dm_mem_tap_nosynth_r_buffer_enqueue =
	     CAN_FIRE_RL_dm_master_nonsynth_4_mkConnectionGetPut &&
	     (!CAN_FIRE_RL_dm_mem_tap_nosynth_r_dropFlit ||
	      dm_mem_tap_nosynth_r_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_dm_mem_tap_nosynth_r_buffer_enqueue =
	     CAN_FIRE_RL_dm_mem_tap_nosynth_r_buffer_enqueue ;

  // rule RL_dm_mem_tap_nosynth_r_buffer_dequeue
  assign CAN_FIRE_RL_dm_mem_tap_nosynth_r_buffer_dequeue =
	     CAN_FIRE_RL_dm_mem_tap_nosynth_r_dropFlit &&
	     dm_mem_tap_nosynth_r_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_dm_mem_tap_nosynth_r_buffer_dequeue =
	     CAN_FIRE_RL_dm_mem_tap_nosynth_r_buffer_dequeue ;

  // rule RL_dm_master_nonsynth_mkConnectionGetPut
  assign CAN_FIRE_RL_dm_master_nonsynth_mkConnectionGetPut =
	     dm_mem_tap$master_awvalid &&
	     dm_master_nonsynth_bufferShim_awff$FULL_N ;
  assign WILL_FIRE_RL_dm_master_nonsynth_mkConnectionGetPut =
	     CAN_FIRE_RL_dm_master_nonsynth_mkConnectionGetPut ;

  // rule RL_dm_mem_tap_nosynth_aw_forwardReady
  assign CAN_FIRE_RL_dm_mem_tap_nosynth_aw_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_dm_mem_tap_nosynth_aw_forwardReady = 1'd1 ;

  // rule RL_dm_master_nonsynth_1_mkConnectionGetPut
  assign CAN_FIRE_RL_dm_master_nonsynth_1_mkConnectionGetPut =
	     dm_mem_tap$master_wvalid &&
	     dm_master_nonsynth_bufferShim_wff$FULL_N ;
  assign WILL_FIRE_RL_dm_master_nonsynth_1_mkConnectionGetPut =
	     CAN_FIRE_RL_dm_master_nonsynth_1_mkConnectionGetPut ;

  // rule RL_dm_mem_tap_nosynth_w_forwardReady
  assign CAN_FIRE_RL_dm_mem_tap_nosynth_w_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_dm_mem_tap_nosynth_w_forwardReady = 1'd1 ;

  // rule RL_dm_master_nonsynth_3_mkConnectionGetPut
  assign CAN_FIRE_RL_dm_master_nonsynth_3_mkConnectionGetPut =
	     dm_mem_tap$master_arvalid &&
	     dm_master_nonsynth_bufferShim_arff$FULL_N ;
  assign WILL_FIRE_RL_dm_master_nonsynth_3_mkConnectionGetPut =
	     CAN_FIRE_RL_dm_master_nonsynth_3_mkConnectionGetPut ;

  // rule RL_dm_mem_tap_nosynth_ar_forwardReady
  assign CAN_FIRE_RL_dm_mem_tap_nosynth_ar_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_dm_mem_tap_nosynth_ar_forwardReady = 1'd1 ;

  // rule RL_ssNoSynth_0_ar_forwardFlit
  assign CAN_FIRE_RL_ssNoSynth_0_ar_forwardFlit =
	     !tagController_tmp_shimSlave_arff$FULL_N ||
	     ssNoSynth_0_ar_buffer_firstValid$Q_OUT &&
	     (ssNoSynth_0_ar_buffer_ff$EMPTY_N ||
	      CAN_FIRE_RL_sink_selected_5) ;
  assign WILL_FIRE_RL_ssNoSynth_0_ar_forwardFlit =
	     CAN_FIRE_RL_ssNoSynth_0_ar_forwardFlit ;

  // rule RL_ssNoSynth_0_ar_dropFlit
  assign CAN_FIRE_RL_ssNoSynth_0_ar_dropFlit =
	     (ssNoSynth_0_ar_buffer_ff$EMPTY_N ||
	      CAN_FIRE_RL_sink_selected_5) &&
	     tagController_tmp_shimSlave_arff$FULL_N ;
  assign WILL_FIRE_RL_ssNoSynth_0_ar_dropFlit =
	     CAN_FIRE_RL_ssNoSynth_0_ar_dropFlit ;

  // rule RL_ssNoSynth_0_ar_buffer_enqueue
  assign CAN_FIRE_RL_ssNoSynth_0_ar_buffer_enqueue =
	     CAN_FIRE_RL_sink_selected_5 &&
	     (!CAN_FIRE_RL_ssNoSynth_0_ar_dropFlit ||
	      ssNoSynth_0_ar_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_ssNoSynth_0_ar_buffer_enqueue =
	     CAN_FIRE_RL_ssNoSynth_0_ar_buffer_enqueue ;

  // rule RL_ssNoSynth_0_ar_buffer_dequeue
  assign CAN_FIRE_RL_ssNoSynth_0_ar_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_0_ar_dropFlit &&
	     ssNoSynth_0_ar_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_ssNoSynth_0_ar_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_0_ar_buffer_dequeue ;

  // rule RL_ssNoSynth_1_ar_forwardFlit
  assign CAN_FIRE_RL_ssNoSynth_1_ar_forwardFlit =
	     ssNoSynth_1_ar_buffer_firstValid$Q_OUT &&
	     (ssNoSynth_1_ar_buffer_ff$EMPTY_N ||
	      CAN_FIRE_RL_sink_selected_6) ;
  assign WILL_FIRE_RL_ssNoSynth_1_ar_forwardFlit =
	     CAN_FIRE_RL_ssNoSynth_1_ar_forwardFlit ;

  // rule RL_ssNoSynth_1_ar_dropFlit
  assign CAN_FIRE_RL_ssNoSynth_1_ar_dropFlit =
	     (ssNoSynth_1_ar_buffer_ff$EMPTY_N ||
	      CAN_FIRE_RL_sink_selected_6) &&
	     near_mem_io$axi4_slave_arready ;
  assign WILL_FIRE_RL_ssNoSynth_1_ar_dropFlit =
	     CAN_FIRE_RL_ssNoSynth_1_ar_dropFlit ;

  // rule RL_ssNoSynth_1_ar_buffer_enqueue
  assign CAN_FIRE_RL_ssNoSynth_1_ar_buffer_enqueue =
	     CAN_FIRE_RL_sink_selected_6 &&
	     (!CAN_FIRE_RL_ssNoSynth_1_ar_dropFlit ||
	      ssNoSynth_1_ar_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_ssNoSynth_1_ar_buffer_enqueue =
	     CAN_FIRE_RL_ssNoSynth_1_ar_buffer_enqueue ;

  // rule RL_ssNoSynth_1_ar_buffer_dequeue
  assign CAN_FIRE_RL_ssNoSynth_1_ar_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_1_ar_dropFlit &&
	     ssNoSynth_1_ar_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_ssNoSynth_1_ar_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_1_ar_buffer_dequeue ;

  // rule RL_ssNoSynth_2_ar_forwardFlit
  assign CAN_FIRE_RL_ssNoSynth_2_ar_forwardFlit =
	     ssNoSynth_2_ar_buffer_firstValid$Q_OUT &&
	     (ssNoSynth_2_ar_buffer_ff$EMPTY_N ||
	      CAN_FIRE_RL_sink_selected_7) ;
  assign WILL_FIRE_RL_ssNoSynth_2_ar_forwardFlit =
	     CAN_FIRE_RL_ssNoSynth_2_ar_forwardFlit ;

  // rule RL_ssNoSynth_2_ar_dropFlit
  assign CAN_FIRE_RL_ssNoSynth_2_ar_dropFlit =
	     (ssNoSynth_2_ar_buffer_ff$EMPTY_N ||
	      CAN_FIRE_RL_sink_selected_7) &&
	     plic$axi4_slave_arready ;
  assign WILL_FIRE_RL_ssNoSynth_2_ar_dropFlit =
	     CAN_FIRE_RL_ssNoSynth_2_ar_dropFlit ;

  // rule RL_ssNoSynth_2_ar_buffer_enqueue
  assign CAN_FIRE_RL_ssNoSynth_2_ar_buffer_enqueue =
	     CAN_FIRE_RL_sink_selected_7 &&
	     (!CAN_FIRE_RL_ssNoSynth_2_ar_dropFlit ||
	      ssNoSynth_2_ar_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_ssNoSynth_2_ar_buffer_enqueue =
	     CAN_FIRE_RL_ssNoSynth_2_ar_buffer_enqueue ;

  // rule RL_ssNoSynth_2_ar_buffer_dequeue
  assign CAN_FIRE_RL_ssNoSynth_2_ar_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_2_ar_dropFlit &&
	     ssNoSynth_2_ar_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_ssNoSynth_2_ar_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_2_ar_buffer_dequeue ;

  // rule RL_split_0_putFirst
  assign CAN_FIRE_RL_split_0_putFirst =
	     split_0_doPut_whas__121_AND_split_0_doPut_wget_ETC___d1128 &&
	     split_0_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_split_0_putFirst = CAN_FIRE_RL_split_0_putFirst ;

  // rule RL_ssNoSynth_0_aw_forwardFlit
  assign CAN_FIRE_RL_ssNoSynth_0_aw_forwardFlit =
	     !tagController_tmp_shimSlave_awff$FULL_N ||
	     ssNoSynth_0_aw_buffer_firstValid$Q_OUT &&
	     (ssNoSynth_0_aw_buffer_ff$EMPTY_N ||
	      MUX_split_0_flitLeft$write_1__SEL_2) ;
  assign WILL_FIRE_RL_ssNoSynth_0_aw_forwardFlit =
	     CAN_FIRE_RL_ssNoSynth_0_aw_forwardFlit ;

  // rule RL_ssNoSynth_0_aw_dropFlit
  assign CAN_FIRE_RL_ssNoSynth_0_aw_dropFlit =
	     (ssNoSynth_0_aw_buffer_ff$EMPTY_N ||
	      MUX_split_0_flitLeft$write_1__SEL_2) &&
	     tagController_tmp_shimSlave_awff$FULL_N ;
  assign WILL_FIRE_RL_ssNoSynth_0_aw_dropFlit =
	     CAN_FIRE_RL_ssNoSynth_0_aw_dropFlit ;

  // rule RL_ssNoSynth_0_aw_buffer_enqueue
  assign CAN_FIRE_RL_ssNoSynth_0_aw_buffer_enqueue =
	     MUX_split_0_flitLeft$write_1__SEL_2 &&
	     (!CAN_FIRE_RL_ssNoSynth_0_aw_dropFlit ||
	      ssNoSynth_0_aw_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_ssNoSynth_0_aw_buffer_enqueue =
	     CAN_FIRE_RL_ssNoSynth_0_aw_buffer_enqueue ;

  // rule RL_ssNoSynth_0_aw_buffer_dequeue
  assign CAN_FIRE_RL_ssNoSynth_0_aw_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_0_aw_dropFlit &&
	     ssNoSynth_0_aw_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_ssNoSynth_0_aw_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_0_aw_buffer_dequeue ;

  // rule RL_split_0_putOther
  assign CAN_FIRE_RL_split_0_putOther =
	     CAN_FIRE_RL_sink_selected &&
	     (!split_0_doPut$wget[245] || ssNoSynth_0_w_buffer_ff$FULL_N) &&
	     split_0_flitLeft != 8'd0 ;
  assign WILL_FIRE_RL_split_0_putOther = CAN_FIRE_RL_split_0_putOther ;

  // rule RL_ssNoSynth_0_w_forwardFlit
  assign CAN_FIRE_RL_ssNoSynth_0_w_forwardFlit =
	     !tagController_tmp_shimSlave_wff$FULL_N ||
	     ssNoSynth_0_w_buffer_firstValid$Q_OUT &&
	     (ssNoSynth_0_w_buffer_ff$EMPTY_N ||
	      ssNoSynth_0_w_buffer_enqw$whas) ;
  assign WILL_FIRE_RL_ssNoSynth_0_w_forwardFlit =
	     CAN_FIRE_RL_ssNoSynth_0_w_forwardFlit ;

  // rule RL_ssNoSynth_0_w_dropFlit
  assign CAN_FIRE_RL_ssNoSynth_0_w_dropFlit =
	     (ssNoSynth_0_w_buffer_ff$EMPTY_N ||
	      ssNoSynth_0_w_buffer_enqw$whas) &&
	     tagController_tmp_shimSlave_wff$FULL_N ;
  assign WILL_FIRE_RL_ssNoSynth_0_w_dropFlit =
	     CAN_FIRE_RL_ssNoSynth_0_w_dropFlit ;

  // rule RL_ssNoSynth_0_w_buffer_enqueue
  assign CAN_FIRE_RL_ssNoSynth_0_w_buffer_enqueue =
	     ssNoSynth_0_w_buffer_enqw$whas &&
	     (!CAN_FIRE_RL_ssNoSynth_0_w_dropFlit ||
	      ssNoSynth_0_w_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_ssNoSynth_0_w_buffer_enqueue =
	     CAN_FIRE_RL_ssNoSynth_0_w_buffer_enqueue ;

  // rule RL_ssNoSynth_0_w_buffer_dequeue
  assign CAN_FIRE_RL_ssNoSynth_0_w_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_0_w_dropFlit &&
	     ssNoSynth_0_w_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_ssNoSynth_0_w_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_0_w_buffer_dequeue ;

  // rule RL_split_1_putFirst
  assign CAN_FIRE_RL_split_1_putFirst =
	     split_1_doPut_whas__150_AND_split_1_doPut_wget_ETC___d1157 &&
	     split_1_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_split_1_putFirst = CAN_FIRE_RL_split_1_putFirst ;

  // rule RL_ssNoSynth_1_aw_forwardFlit
  assign CAN_FIRE_RL_ssNoSynth_1_aw_forwardFlit =
	     ssNoSynth_1_aw_buffer_firstValid$Q_OUT &&
	     (ssNoSynth_1_aw_buffer_ff$EMPTY_N ||
	      MUX_split_1_flitLeft$write_1__SEL_2) ;
  assign WILL_FIRE_RL_ssNoSynth_1_aw_forwardFlit =
	     CAN_FIRE_RL_ssNoSynth_1_aw_forwardFlit ;

  // rule RL_ssNoSynth_1_aw_dropFlit
  assign CAN_FIRE_RL_ssNoSynth_1_aw_dropFlit =
	     (ssNoSynth_1_aw_buffer_ff$EMPTY_N ||
	      MUX_split_1_flitLeft$write_1__SEL_2) &&
	     near_mem_io$axi4_slave_awready ;
  assign WILL_FIRE_RL_ssNoSynth_1_aw_dropFlit =
	     CAN_FIRE_RL_ssNoSynth_1_aw_dropFlit ;

  // rule RL_ssNoSynth_1_aw_buffer_enqueue
  assign CAN_FIRE_RL_ssNoSynth_1_aw_buffer_enqueue =
	     MUX_split_1_flitLeft$write_1__SEL_2 &&
	     (!CAN_FIRE_RL_ssNoSynth_1_aw_dropFlit ||
	      ssNoSynth_1_aw_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_ssNoSynth_1_aw_buffer_enqueue =
	     CAN_FIRE_RL_ssNoSynth_1_aw_buffer_enqueue ;

  // rule RL_ssNoSynth_1_aw_buffer_dequeue
  assign CAN_FIRE_RL_ssNoSynth_1_aw_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_1_aw_dropFlit &&
	     ssNoSynth_1_aw_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_ssNoSynth_1_aw_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_1_aw_buffer_dequeue ;

  // rule RL_split_1_putOther
  assign CAN_FIRE_RL_split_1_putOther =
	     CAN_FIRE_RL_sink_selected_1 &&
	     (!split_1_doPut$wget[245] || ssNoSynth_1_w_buffer_ff$FULL_N) &&
	     split_1_flitLeft != 8'd0 ;
  assign WILL_FIRE_RL_split_1_putOther = CAN_FIRE_RL_split_1_putOther ;

  // rule RL_ssNoSynth_1_w_forwardFlit
  assign CAN_FIRE_RL_ssNoSynth_1_w_forwardFlit =
	     ssNoSynth_1_w_buffer_firstValid$Q_OUT &&
	     (ssNoSynth_1_w_buffer_ff$EMPTY_N ||
	      ssNoSynth_1_w_buffer_enqw$whas) ;
  assign WILL_FIRE_RL_ssNoSynth_1_w_forwardFlit =
	     CAN_FIRE_RL_ssNoSynth_1_w_forwardFlit ;

  // rule RL_ssNoSynth_1_w_dropFlit
  assign CAN_FIRE_RL_ssNoSynth_1_w_dropFlit =
	     (ssNoSynth_1_w_buffer_ff$EMPTY_N ||
	      ssNoSynth_1_w_buffer_enqw$whas) &&
	     near_mem_io$axi4_slave_wready ;
  assign WILL_FIRE_RL_ssNoSynth_1_w_dropFlit =
	     CAN_FIRE_RL_ssNoSynth_1_w_dropFlit ;

  // rule RL_ssNoSynth_1_w_buffer_enqueue
  assign CAN_FIRE_RL_ssNoSynth_1_w_buffer_enqueue =
	     ssNoSynth_1_w_buffer_enqw$whas &&
	     (!CAN_FIRE_RL_ssNoSynth_1_w_dropFlit ||
	      ssNoSynth_1_w_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_ssNoSynth_1_w_buffer_enqueue =
	     CAN_FIRE_RL_ssNoSynth_1_w_buffer_enqueue ;

  // rule RL_ssNoSynth_1_w_buffer_dequeue
  assign CAN_FIRE_RL_ssNoSynth_1_w_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_1_w_dropFlit &&
	     ssNoSynth_1_w_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_ssNoSynth_1_w_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_1_w_buffer_dequeue ;

  // rule RL_split_2_putFirst
  assign CAN_FIRE_RL_split_2_putFirst =
	     split_2_doPut_whas__179_AND_split_2_doPut_wget_ETC___d1186 &&
	     split_2_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_split_2_putFirst = CAN_FIRE_RL_split_2_putFirst ;

  // rule RL_ssNoSynth_2_aw_forwardFlit
  assign CAN_FIRE_RL_ssNoSynth_2_aw_forwardFlit =
	     ssNoSynth_2_aw_buffer_firstValid$Q_OUT &&
	     (ssNoSynth_2_aw_buffer_ff$EMPTY_N ||
	      MUX_split_2_flitLeft$write_1__SEL_2) ;
  assign WILL_FIRE_RL_ssNoSynth_2_aw_forwardFlit =
	     CAN_FIRE_RL_ssNoSynth_2_aw_forwardFlit ;

  // rule RL_ssNoSynth_2_aw_dropFlit
  assign CAN_FIRE_RL_ssNoSynth_2_aw_dropFlit =
	     (ssNoSynth_2_aw_buffer_ff$EMPTY_N ||
	      MUX_split_2_flitLeft$write_1__SEL_2) &&
	     plic$axi4_slave_awready ;
  assign WILL_FIRE_RL_ssNoSynth_2_aw_dropFlit =
	     CAN_FIRE_RL_ssNoSynth_2_aw_dropFlit ;

  // rule RL_ssNoSynth_2_aw_buffer_enqueue
  assign CAN_FIRE_RL_ssNoSynth_2_aw_buffer_enqueue =
	     MUX_split_2_flitLeft$write_1__SEL_2 &&
	     (!CAN_FIRE_RL_ssNoSynth_2_aw_dropFlit ||
	      ssNoSynth_2_aw_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_ssNoSynth_2_aw_buffer_enqueue =
	     CAN_FIRE_RL_ssNoSynth_2_aw_buffer_enqueue ;

  // rule RL_ssNoSynth_2_aw_buffer_dequeue
  assign CAN_FIRE_RL_ssNoSynth_2_aw_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_2_aw_dropFlit &&
	     ssNoSynth_2_aw_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_ssNoSynth_2_aw_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_2_aw_buffer_dequeue ;

  // rule RL_split_2_putOther
  assign CAN_FIRE_RL_split_2_putOther =
	     CAN_FIRE_RL_sink_selected_2 &&
	     (!split_2_doPut$wget[245] || ssNoSynth_2_w_buffer_ff$FULL_N) &&
	     split_2_flitLeft != 8'd0 ;
  assign WILL_FIRE_RL_split_2_putOther = CAN_FIRE_RL_split_2_putOther ;

  // rule RL_ssNoSynth_2_w_forwardFlit
  assign CAN_FIRE_RL_ssNoSynth_2_w_forwardFlit =
	     ssNoSynth_2_w_buffer_firstValid$Q_OUT &&
	     (ssNoSynth_2_w_buffer_ff$EMPTY_N ||
	      ssNoSynth_2_w_buffer_enqw$whas) ;
  assign WILL_FIRE_RL_ssNoSynth_2_w_forwardFlit =
	     CAN_FIRE_RL_ssNoSynth_2_w_forwardFlit ;

  // rule RL_ssNoSynth_2_w_dropFlit
  assign CAN_FIRE_RL_ssNoSynth_2_w_dropFlit =
	     (ssNoSynth_2_w_buffer_ff$EMPTY_N ||
	      ssNoSynth_2_w_buffer_enqw$whas) &&
	     plic$axi4_slave_wready ;
  assign WILL_FIRE_RL_ssNoSynth_2_w_dropFlit =
	     CAN_FIRE_RL_ssNoSynth_2_w_dropFlit ;

  // rule RL_ssNoSynth_2_w_buffer_enqueue
  assign CAN_FIRE_RL_ssNoSynth_2_w_buffer_enqueue =
	     ssNoSynth_2_w_buffer_enqw$whas &&
	     (!CAN_FIRE_RL_ssNoSynth_2_w_dropFlit ||
	      ssNoSynth_2_w_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_ssNoSynth_2_w_buffer_enqueue =
	     CAN_FIRE_RL_ssNoSynth_2_w_buffer_enqueue ;

  // rule RL_ssNoSynth_2_w_buffer_dequeue
  assign CAN_FIRE_RL_ssNoSynth_2_w_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_2_w_dropFlit &&
	     ssNoSynth_2_w_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_ssNoSynth_2_w_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_2_w_buffer_dequeue ;

  // rule RL_ifcs_0_drainNoRouteResponse
  assign CAN_FIRE_RL_ifcs_0_drainNoRouteResponse =
	     msNoSynth_0_b_buffer_ff$FULL_N && ifcs_0_noRouteRsp$EMPTY_N ;
  assign WILL_FIRE_RL_ifcs_0_drainNoRouteResponse =
	     CAN_FIRE_RL_ifcs_0_drainNoRouteResponse ;

  // rule RL_checkSinkReady_3
  assign CAN_FIRE_RL_checkSinkReady_3 = 1'd1 ;
  assign WILL_FIRE_RL_checkSinkReady_3 = 1'd1 ;

  // rule RL_ifcs_1_firstFlit
  assign CAN_FIRE_RL_ifcs_1_firstFlit =
	     dm_master_nonsynth_wCanPeek$wget &&
	     dm_master_nonsynth_takeUpperW_i_notEmpty__39_A_ETC___d1325 &&
	     ifcs_1_state == 2'd0 &&
	     IF_IF_merged_1_flitLeft_103_EQ_0_104_THEN_dm_m_ETC___d1356 ==
	     2'd1 ;
  assign WILL_FIRE_RL_ifcs_1_firstFlit = CAN_FIRE_RL_ifcs_1_firstFlit ;

  // rule RL_ifcs_1_followFlits
  assign CAN_FIRE_RL_ifcs_1_followFlits =
	     dm_master_nonsynth_wCanPeek_whas__28_AND_dm_ma_ETC___d1378 &&
	     ifcs_1_state == 2'd1 ;
  assign WILL_FIRE_RL_ifcs_1_followFlits = CAN_FIRE_RL_ifcs_1_followFlits ;

  // rule RL_ifcs_1_nonRoutableFlit
  assign CAN_FIRE_RL_ifcs_1_nonRoutableFlit =
	     IF_merged_1_flitLeft_103_EQ_0_104_THEN_dm_mast_ETC___d1314 &&
	     (merged_1_flitLeft != 8'd0 ||
	      !ifcs_1_noRoute_inner_pendingReq &&
	      dm_master_nonsynth_awFF$EMPTY_N) &&
	     ifcs_1_state == 2'd0 &&
	     IF_IF_merged_1_flitLeft_103_EQ_0_104_THEN_dm_m_ETC___d1356 !=
	     2'd1 ;
  assign WILL_FIRE_RL_ifcs_1_nonRoutableFlit =
	     CAN_FIRE_RL_ifcs_1_nonRoutableFlit ;

  // rule RL_ifcs_1_drainFlits
  assign CAN_FIRE_RL_ifcs_1_drainFlits =
	     IF_merged_1_flitLeft_103_EQ_0_104_THEN_dm_mast_ETC___d1314 &&
	     dm_master_nonsynth_wCanPeek$wget &&
	     ifcs_1_state == 2'd2 ;
  assign WILL_FIRE_RL_ifcs_1_drainFlits = CAN_FIRE_RL_ifcs_1_drainFlits ;

  // rule __me_check_164
  assign CAN_FIRE___me_check_164 = 1'b1 ;
  assign WILL_FIRE___me_check_164 = 1'b1 ;

  // rule RL_ifcs_1_drainNoRouteResponse
  assign CAN_FIRE_RL_ifcs_1_drainNoRouteResponse =
	     msNoSynth_1_b_buffer_ff$FULL_N && ifcs_1_noRouteRsp$EMPTY_N ;
  assign WILL_FIRE_RL_ifcs_1_drainNoRouteResponse =
	     CAN_FIRE_RL_ifcs_1_drainNoRouteResponse ;

  // rule RL_checkSinkReady_4
  assign CAN_FIRE_RL_checkSinkReady_4 = 1'd1 ;
  assign WILL_FIRE_RL_checkSinkReady_4 = 1'd1 ;

  // rule RL_craftReq_2
  assign CAN_FIRE_RL_craftReq_2 =
	     ifcs_0_routeBack$EMPTY_N && ifcs_0_rspBack$EMPTY_N ;
  assign WILL_FIRE_RL_craftReq_2 = CAN_FIRE_RL_craftReq_2 ;

  // rule RL_craftReq_3
  assign CAN_FIRE_RL_craftReq_3 =
	     ifcs_1_routeBack$EMPTY_N && ifcs_1_rspBack$EMPTY_N ;
  assign WILL_FIRE_RL_craftReq_3 = CAN_FIRE_RL_craftReq_3 ;

  // rule RL_craftReq_4
  assign CAN_FIRE_RL_craftReq_4 =
	     ifcs_2_routeBack$EMPTY_N && ifcs_2_rspBack$EMPTY_N ;
  assign WILL_FIRE_RL_craftReq_4 = CAN_FIRE_RL_craftReq_4 ;

  // rule RL_arbitrate_1
  assign CAN_FIRE_RL_arbitrate_1 =
	     reqWires_1_0_whas__691_AND_reqWires_1_0_wget___ETC___d1701 &&
	     !state_1 ;
  assign WILL_FIRE_RL_arbitrate_1 = CAN_FIRE_RL_arbitrate_1 ;

  // rule RL_source_selected_2
  assign CAN_FIRE_RL_source_selected_2 =
	     (!ifcs_0_routeBack$EMPTY_N || ifcs_0_rspBack$EMPTY_N) &&
	     !state_1 &&
	     sourceSelect_1_0$whas ;
  assign WILL_FIRE_RL_source_selected_2 = CAN_FIRE_RL_source_selected_2 ;

  // rule RL_burst_2
  assign CAN_FIRE_RL_burst_2 =
	     ifcs_0_rspBack$EMPTY_N && ifcs_0_routeBack$EMPTY_N &&
	     state_1_702_AND_activeSource_1_0_790_791_AND_i_ETC___d1793 ;
  assign WILL_FIRE_RL_burst_2 = CAN_FIRE_RL_burst_2 ;

  // rule RL_source_selected_3
  assign CAN_FIRE_RL_source_selected_3 =
	     (!ifcs_1_routeBack$EMPTY_N || ifcs_1_rspBack$EMPTY_N) &&
	     !state_1 &&
	     sourceSelect_1_1$whas ;
  assign WILL_FIRE_RL_source_selected_3 = CAN_FIRE_RL_source_selected_3 ;

  // rule RL_burst_3
  assign CAN_FIRE_RL_burst_3 =
	     ifcs_1_rspBack$EMPTY_N && ifcs_1_routeBack$EMPTY_N &&
	     state_1_702_AND_activeSource_1_1_823_824_AND_i_ETC___d1826 ;
  assign WILL_FIRE_RL_burst_3 = CAN_FIRE_RL_burst_3 ;

  // rule __me_check_196
  assign CAN_FIRE___me_check_196 = 1'b1 ;
  assign WILL_FIRE___me_check_196 = 1'b1 ;

  // rule RL_source_selected_4
  assign CAN_FIRE_RL_source_selected_4 =
	     (!ifcs_2_routeBack$EMPTY_N || ifcs_2_rspBack$EMPTY_N) &&
	     !state_1 &&
	     sourceSelect_1_2$whas ;
  assign WILL_FIRE_RL_source_selected_4 = CAN_FIRE_RL_source_selected_4 ;

  // rule RL_burst_4
  assign CAN_FIRE_RL_burst_4 =
	     ifcs_2_rspBack$EMPTY_N && ifcs_2_routeBack$EMPTY_N &&
	     state_1_702_AND_activeSource_1_2_857_858_AND_i_ETC___d1860 ;
  assign WILL_FIRE_RL_burst_4 = CAN_FIRE_RL_burst_4 ;

  // rule __me_check_194
  assign CAN_FIRE___me_check_194 = 1'b1 ;
  assign WILL_FIRE___me_check_194 = 1'b1 ;

  // rule __me_check_198
  assign CAN_FIRE___me_check_198 = 1'b1 ;
  assign WILL_FIRE___me_check_198 = 1'b1 ;

  // rule RL_sink_selected_3
  assign CAN_FIRE_RL_sink_selected_3 =
	     !CAN_FIRE_RL_ifcs_0_drainNoRouteResponse && flitToSink_1_0$whas ;
  assign WILL_FIRE_RL_sink_selected_3 = CAN_FIRE_RL_sink_selected_3 ;

  // rule RL_sink_selected_4
  assign CAN_FIRE_RL_sink_selected_4 =
	     !CAN_FIRE_RL_ifcs_1_drainNoRouteResponse && flitToSink_1_1$whas ;
  assign WILL_FIRE_RL_sink_selected_4 = CAN_FIRE_RL_sink_selected_4 ;

  // rule __me_check_200
  assign CAN_FIRE___me_check_200 = 1'b1 ;
  assign WILL_FIRE___me_check_200 = 1'b1 ;

  // rule RL_ifcs_0_forwardRsp
  assign CAN_FIRE_RL_ifcs_0_forwardRsp =
	     msNoSynth_0_b_buffer_ff$FULL_N && CAN_FIRE_RL_sink_selected_3 &&
	     !ifcs_0_noRouteRsp$EMPTY_N ;
  assign WILL_FIRE_RL_ifcs_0_forwardRsp = CAN_FIRE_RL_ifcs_0_forwardRsp ;

  // rule RL_msNoSynth_0_b_forwardFlit
  assign CAN_FIRE_RL_msNoSynth_0_b_forwardFlit =
	     msNoSynth_0_b_buffer_firstValid$Q_OUT &&
	     (msNoSynth_0_b_buffer_ff$EMPTY_N ||
	      msNoSynth_0_b_buffer_enqw$whas) ;
  assign WILL_FIRE_RL_msNoSynth_0_b_forwardFlit =
	     CAN_FIRE_RL_msNoSynth_0_b_forwardFlit ;

  // rule RL_msNoSynth_0_b_dropFlit
  assign CAN_FIRE_RL_msNoSynth_0_b_dropFlit =
	     (msNoSynth_0_b_buffer_ff$EMPTY_N ||
	      msNoSynth_0_b_buffer_enqw$whas) &&
	     cpu$dmem_master_bready ;
  assign WILL_FIRE_RL_msNoSynth_0_b_dropFlit =
	     CAN_FIRE_RL_msNoSynth_0_b_dropFlit ;

  // rule RL_msNoSynth_0_b_buffer_enqueue
  assign CAN_FIRE_RL_msNoSynth_0_b_buffer_enqueue =
	     msNoSynth_0_b_buffer_enqw$whas &&
	     (!CAN_FIRE_RL_msNoSynth_0_b_dropFlit ||
	      msNoSynth_0_b_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_msNoSynth_0_b_buffer_enqueue =
	     CAN_FIRE_RL_msNoSynth_0_b_buffer_enqueue ;

  // rule RL_msNoSynth_0_b_buffer_dequeue
  assign CAN_FIRE_RL_msNoSynth_0_b_buffer_dequeue =
	     CAN_FIRE_RL_msNoSynth_0_b_dropFlit &&
	     msNoSynth_0_b_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_msNoSynth_0_b_buffer_dequeue =
	     CAN_FIRE_RL_msNoSynth_0_b_buffer_dequeue ;

  // rule RL_ifcs_1_forwardRsp
  assign CAN_FIRE_RL_ifcs_1_forwardRsp =
	     msNoSynth_1_b_buffer_ff$FULL_N && CAN_FIRE_RL_sink_selected_4 &&
	     !ifcs_1_noRouteRsp$EMPTY_N ;
  assign WILL_FIRE_RL_ifcs_1_forwardRsp = CAN_FIRE_RL_ifcs_1_forwardRsp ;

  // rule RL_msNoSynth_1_b_forwardFlit
  assign CAN_FIRE_RL_msNoSynth_1_b_forwardFlit =
	     !dm_master_nonsynth_bufferShim_bff$FULL_N ||
	     msNoSynth_1_b_buffer_firstValid$Q_OUT &&
	     (msNoSynth_1_b_buffer_ff$EMPTY_N ||
	      msNoSynth_1_b_buffer_enqw$whas) ;
  assign WILL_FIRE_RL_msNoSynth_1_b_forwardFlit =
	     CAN_FIRE_RL_msNoSynth_1_b_forwardFlit ;

  // rule RL_msNoSynth_1_b_dropFlit
  assign CAN_FIRE_RL_msNoSynth_1_b_dropFlit =
	     (msNoSynth_1_b_buffer_ff$EMPTY_N ||
	      msNoSynth_1_b_buffer_enqw$whas) &&
	     dm_master_nonsynth_bufferShim_bff$FULL_N ;
  assign WILL_FIRE_RL_msNoSynth_1_b_dropFlit =
	     CAN_FIRE_RL_msNoSynth_1_b_dropFlit ;

  // rule RL_msNoSynth_1_b_buffer_enqueue
  assign CAN_FIRE_RL_msNoSynth_1_b_buffer_enqueue =
	     msNoSynth_1_b_buffer_enqw$whas &&
	     (!CAN_FIRE_RL_msNoSynth_1_b_dropFlit ||
	      msNoSynth_1_b_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_msNoSynth_1_b_buffer_enqueue =
	     CAN_FIRE_RL_msNoSynth_1_b_buffer_enqueue ;

  // rule RL_msNoSynth_1_b_buffer_dequeue
  assign CAN_FIRE_RL_msNoSynth_1_b_buffer_dequeue =
	     CAN_FIRE_RL_msNoSynth_1_b_dropFlit &&
	     msNoSynth_1_b_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_msNoSynth_1_b_buffer_dequeue =
	     CAN_FIRE_RL_msNoSynth_1_b_buffer_dequeue ;

  // rule RL_ifcs_1_nonRoutableGenRsp
  assign CAN_FIRE_RL_ifcs_1_nonRoutableGenRsp =
	     IF_merged_1_flitLeft_103_EQ_0_104_THEN_dm_mast_ETC___d1314 &&
	     ifcs_1_noRoute_inner_pendingReq$port1__read &&
	     ifcs_1_noRouteRsp$FULL_N &&
	     dm_master_nonsynth_wCanPeek$wget ;
  assign WILL_FIRE_RL_ifcs_1_nonRoutableGenRsp =
	     CAN_FIRE_RL_ifcs_1_nonRoutableGenRsp ;

  // rule __me_check_162
  assign CAN_FIRE___me_check_162 = 1'b1 ;
  assign WILL_FIRE___me_check_162 = 1'b1 ;

  // rule __me_check_163
  assign CAN_FIRE___me_check_163 = 1'b1 ;
  assign WILL_FIRE___me_check_163 = 1'b1 ;

  // rule __me_check_166
  assign CAN_FIRE___me_check_166 = 1'b1 ;
  assign WILL_FIRE___me_check_166 = 1'b1 ;

  // rule RL_merged_1_genFirst
  assign CAN_FIRE_RL_merged_1_genFirst =
	     dm_master_nonsynth_awFF$EMPTY_N &&
	     dm_master_nonsynth_wCanPeek$wget &&
	     merged_1_doDrop$whas &&
	     merged_1_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_merged_1_genFirst = CAN_FIRE_RL_merged_1_genFirst ;

  // rule RL_msNoSynth_1_aw_forwardReady
  assign CAN_FIRE_RL_msNoSynth_1_aw_forwardReady = 1'b1 ;
  assign WILL_FIRE_RL_msNoSynth_1_aw_forwardReady = 1'b1 ;

  // rule RL_dm_master_nonsynth_consumeAW
  assign CAN_FIRE_RL_dm_master_nonsynth_consumeAW =
	     dm_master_nonsynth_bufferShim_awff$EMPTY_N &&
	     dm_master_nonsynth_takeUpperW$FULL_N &&
	     dm_master_nonsynth_awFF$FULL_N &&
	     dm_master_nonsynth_awCanPeek$wget ;
  assign WILL_FIRE_RL_dm_master_nonsynth_consumeAW =
	     CAN_FIRE_RL_dm_master_nonsynth_consumeAW ;

  // rule RL_merged_1_genOther
  assign CAN_FIRE_RL_merged_1_genOther =
	     dm_master_nonsynth_wCanPeek$wget && merged_1_doDrop$whas &&
	     merged_1_flitLeft != 8'd0 ;
  assign WILL_FIRE_RL_merged_1_genOther = CAN_FIRE_RL_merged_1_genOther ;

  // rule RL_msNoSynth_1_w_forwardReady
  assign CAN_FIRE_RL_msNoSynth_1_w_forwardReady =
	     !dm_master_nonsynth_wCanPeek$wget ||
	     !msNoSynth_1_w_dwReady$whas ||
	     dm_master_nonsynth_bufferShim_wff$EMPTY_N &&
	     dm_master_nonsynth_takeUpperW$EMPTY_N ;
  assign WILL_FIRE_RL_msNoSynth_1_w_forwardReady =
	     CAN_FIRE_RL_msNoSynth_1_w_forwardReady ;

  // rule RL_ifcs_0_firstFlit_1
  assign CAN_FIRE_RL_ifcs_0_firstFlit_1 =
	     tagController_tmp_shimSlave_bff$EMPTY_N &&
	     ifcs_0_rspBack$FULL_N &&
	     ifcs_0_routeBack$FULL_N &&
	     !ifcs_0_state_1 ;
  assign WILL_FIRE_RL_ifcs_0_firstFlit_1 = CAN_FIRE_RL_ifcs_0_firstFlit_1 ;

  // rule RL_ifcs_0_followFlits_1
  assign CAN_FIRE_RL_ifcs_0_followFlits_1 =
	     tagController_tmp_shimSlave_bff$EMPTY_N &&
	     ifcs_0_rspBack$FULL_N &&
	     ifcs_0_state_1 ;
  assign WILL_FIRE_RL_ifcs_0_followFlits_1 =
	     CAN_FIRE_RL_ifcs_0_followFlits_1 ;

  // rule __me_check_169
  assign CAN_FIRE___me_check_169 = 1'b1 ;
  assign WILL_FIRE___me_check_169 = 1'b1 ;

  // rule RL_ssNoSynth_0_b_forwardReady
  assign CAN_FIRE_RL_ssNoSynth_0_b_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_ssNoSynth_0_b_forwardReady = 1'd1 ;

  // rule RL_ifcs_1_firstFlit_1
  assign CAN_FIRE_RL_ifcs_1_firstFlit_1 =
	     near_mem_io$axi4_slave_bvalid && ifcs_1_rspBack$FULL_N &&
	     ifcs_1_routeBack$FULL_N &&
	     !ifcs_1_state_1 ;
  assign WILL_FIRE_RL_ifcs_1_firstFlit_1 = CAN_FIRE_RL_ifcs_1_firstFlit_1 ;

  // rule RL_ifcs_1_followFlits_1
  assign CAN_FIRE_RL_ifcs_1_followFlits_1 =
	     near_mem_io$axi4_slave_bvalid && ifcs_1_rspBack$FULL_N &&
	     ifcs_1_state_1 ;
  assign WILL_FIRE_RL_ifcs_1_followFlits_1 =
	     CAN_FIRE_RL_ifcs_1_followFlits_1 ;

  // rule __me_check_171
  assign CAN_FIRE___me_check_171 = 1'b1 ;
  assign WILL_FIRE___me_check_171 = 1'b1 ;

  // rule RL_ssNoSynth_1_b_forwardReady
  assign CAN_FIRE_RL_ssNoSynth_1_b_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_ssNoSynth_1_b_forwardReady = 1'd1 ;

  // rule RL_ifcs_0_1_drainNoRouteResponse
  assign CAN_FIRE_RL_ifcs_0_1_drainNoRouteResponse =
	     msNoSynth_0_r_buffer_ff$FULL_N && ifcs_0_1_noRouteRsp$EMPTY_N ;
  assign WILL_FIRE_RL_ifcs_0_1_drainNoRouteResponse =
	     CAN_FIRE_RL_ifcs_0_1_drainNoRouteResponse ;

  // rule RL_checkSinkReady_8
  assign CAN_FIRE_RL_checkSinkReady_8 = 1'd1 ;
  assign WILL_FIRE_RL_checkSinkReady_8 = 1'd1 ;

  // rule RL_ifcs_1_1_firstFlit
  assign CAN_FIRE_RL_ifcs_1_1_firstFlit =
	     dm_master_nonsynth_arCanPeek$wget && ifcs_1_1_innerReq$FULL_N &&
	     ifcs_1_1_innerRoute$FULL_N &&
	     ifcs_1_1_state == 2'd0 &&
	     IF_dm_master_nonsynth_bufferShim_arff_first__8_ETC___d1992 ==
	     2'd1 ;
  assign WILL_FIRE_RL_ifcs_1_1_firstFlit = CAN_FIRE_RL_ifcs_1_1_firstFlit ;

  // rule RL_ifcs_1_1_followFlits
  assign CAN_FIRE_RL_ifcs_1_1_followFlits =
	     dm_master_nonsynth_arCanPeek$wget && ifcs_1_1_innerReq$FULL_N &&
	     ifcs_1_1_state == 2'd1 ;
  assign WILL_FIRE_RL_ifcs_1_1_followFlits =
	     CAN_FIRE_RL_ifcs_1_1_followFlits ;

  // rule RL_ifcs_1_1_nonRoutableFlit
  assign CAN_FIRE_RL_ifcs_1_1_nonRoutableFlit =
	     ifcs_1_1_noRoute_flitCount == 9'd0 &&
	     dm_master_nonsynth_arCanPeek$wget &&
	     ifcs_1_1_state == 2'd0 &&
	     IF_dm_master_nonsynth_bufferShim_arff_first__8_ETC___d1992 !=
	     2'd1 ;
  assign WILL_FIRE_RL_ifcs_1_1_nonRoutableFlit =
	     CAN_FIRE_RL_ifcs_1_1_nonRoutableFlit ;

  // rule RL_ifcs_1_1_drainFlits
  assign CAN_FIRE_RL_ifcs_1_1_drainFlits =
	     dm_master_nonsynth_arCanPeek$wget && ifcs_1_1_state == 2'd2 ;
  assign WILL_FIRE_RL_ifcs_1_1_drainFlits = CAN_FIRE_RL_ifcs_1_1_drainFlits ;

  // rule __me_check_211
  assign CAN_FIRE___me_check_211 = 1'b1 ;
  assign WILL_FIRE___me_check_211 = 1'b1 ;

  // rule RL_ifcs_1_1_drainNoRouteResponse
  assign CAN_FIRE_RL_ifcs_1_1_drainNoRouteResponse =
	     msNoSynth_1_r_buffer_ff$FULL_N && ifcs_1_1_noRouteRsp$EMPTY_N ;
  assign WILL_FIRE_RL_ifcs_1_1_drainNoRouteResponse =
	     CAN_FIRE_RL_ifcs_1_1_drainNoRouteResponse ;

  // rule RL_checkSinkReady_9
  assign CAN_FIRE_RL_checkSinkReady_9 = 1'd1 ;
  assign WILL_FIRE_RL_checkSinkReady_9 = 1'd1 ;

  // rule RL_craftReq_7
  assign CAN_FIRE_RL_craftReq_7 =
	     ifcs_0_1_routeBack$EMPTY_N && ifcs_0_1_rspBack$EMPTY_N ;
  assign WILL_FIRE_RL_craftReq_7 = CAN_FIRE_RL_craftReq_7 ;

  // rule RL_craftReq_8
  assign CAN_FIRE_RL_craftReq_8 =
	     ifcs_1_1_routeBack$EMPTY_N && ifcs_1_1_rspBack$EMPTY_N ;
  assign WILL_FIRE_RL_craftReq_8 = CAN_FIRE_RL_craftReq_8 ;

  // rule RL_craftReq_9
  assign CAN_FIRE_RL_craftReq_9 =
	     ifcs_2_1_routeBack$EMPTY_N && ifcs_2_1_rspBack$EMPTY_N ;
  assign WILL_FIRE_RL_craftReq_9 = CAN_FIRE_RL_craftReq_9 ;

  // rule RL_arbitrate_3
  assign CAN_FIRE_RL_arbitrate_3 =
	     reqWires_1_1_0_whas__318_AND_reqWires_1_1_0_wg_ETC___d2328 &&
	     !state_1_1_1 ;
  assign WILL_FIRE_RL_arbitrate_3 = CAN_FIRE_RL_arbitrate_3 ;

  // rule RL_source_selected_7
  assign CAN_FIRE_RL_source_selected_7 =
	     (!ifcs_0_1_routeBack$EMPTY_N || ifcs_0_1_rspBack$EMPTY_N) &&
	     !state_1_1_1 &&
	     MUX_activeSource_1_1_0$write_1__VAL_1 ;
  assign WILL_FIRE_RL_source_selected_7 = CAN_FIRE_RL_source_selected_7 ;

  // rule RL_burst_7
  assign CAN_FIRE_RL_burst_7 =
	     ifcs_0_1_rspBack$EMPTY_N && ifcs_0_1_routeBack$EMPTY_N &&
	     state_1_1_1_329_AND_activeSource_1_1_0_423_424_ETC___d2426 ;
  assign WILL_FIRE_RL_burst_7 = CAN_FIRE_RL_burst_7 ;

  // rule RL_source_selected_8
  assign CAN_FIRE_RL_source_selected_8 =
	     (!ifcs_1_1_routeBack$EMPTY_N || ifcs_1_1_rspBack$EMPTY_N) &&
	     !state_1_1_1 &&
	     MUX_activeSource_1_1_1_1$write_1__VAL_1 ;
  assign WILL_FIRE_RL_source_selected_8 = CAN_FIRE_RL_source_selected_8 ;

  // rule RL_burst_8
  assign CAN_FIRE_RL_burst_8 =
	     ifcs_1_1_rspBack$EMPTY_N && ifcs_1_1_routeBack$EMPTY_N &&
	     state_1_1_1_329_AND_activeSource_1_1_1_1_459_4_ETC___d2462 ;
  assign WILL_FIRE_RL_burst_8 = CAN_FIRE_RL_burst_8 ;

  // rule __me_check_243
  assign CAN_FIRE___me_check_243 = 1'b1 ;
  assign WILL_FIRE___me_check_243 = 1'b1 ;

  // rule RL_source_selected_9
  assign CAN_FIRE_RL_source_selected_9 =
	     (!ifcs_2_1_routeBack$EMPTY_N || ifcs_2_1_rspBack$EMPTY_N) &&
	     !state_1_1_1 &&
	     MUX_activeSource_1_1_2$write_1__VAL_1 ;
  assign WILL_FIRE_RL_source_selected_9 = CAN_FIRE_RL_source_selected_9 ;

  // rule RL_burst_9
  assign CAN_FIRE_RL_burst_9 =
	     ifcs_2_1_rspBack$EMPTY_N && ifcs_2_1_routeBack$EMPTY_N &&
	     state_1_1_1_329_AND_activeSource_1_1_2_495_496_ETC___d2498 ;
  assign WILL_FIRE_RL_burst_9 = CAN_FIRE_RL_burst_9 ;

  // rule __me_check_241
  assign CAN_FIRE___me_check_241 = 1'b1 ;
  assign WILL_FIRE___me_check_241 = 1'b1 ;

  // rule __me_check_245
  assign CAN_FIRE___me_check_245 = 1'b1 ;
  assign WILL_FIRE___me_check_245 = 1'b1 ;

  // rule RL_sink_selected_8
  assign CAN_FIRE_RL_sink_selected_8 =
	     !CAN_FIRE_RL_ifcs_0_1_drainNoRouteResponse &&
	     flitToSink_1_1_0$whas ;
  assign WILL_FIRE_RL_sink_selected_8 = CAN_FIRE_RL_sink_selected_8 ;

  // rule RL_sink_selected_9
  assign CAN_FIRE_RL_sink_selected_9 =
	     !CAN_FIRE_RL_ifcs_1_1_drainNoRouteResponse &&
	     flitToSink_1_1_1_1$whas ;
  assign WILL_FIRE_RL_sink_selected_9 = CAN_FIRE_RL_sink_selected_9 ;

  // rule __me_check_247
  assign CAN_FIRE___me_check_247 = 1'b1 ;
  assign WILL_FIRE___me_check_247 = 1'b1 ;

  // rule RL_ifcs_0_1_forwardRsp
  assign CAN_FIRE_RL_ifcs_0_1_forwardRsp =
	     msNoSynth_0_r_buffer_ff$FULL_N && CAN_FIRE_RL_sink_selected_8 &&
	     !ifcs_0_1_noRouteRsp$EMPTY_N ;
  assign WILL_FIRE_RL_ifcs_0_1_forwardRsp = CAN_FIRE_RL_ifcs_0_1_forwardRsp ;

  // rule RL_msNoSynth_0_r_forwardFlit
  assign CAN_FIRE_RL_msNoSynth_0_r_forwardFlit =
	     msNoSynth_0_r_buffer_firstValid$Q_OUT &&
	     (msNoSynth_0_r_buffer_ff$EMPTY_N ||
	      msNoSynth_0_r_buffer_enqw$whas) ;
  assign WILL_FIRE_RL_msNoSynth_0_r_forwardFlit =
	     CAN_FIRE_RL_msNoSynth_0_r_forwardFlit ;

  // rule RL_msNoSynth_0_r_dropFlit
  assign CAN_FIRE_RL_msNoSynth_0_r_dropFlit =
	     (msNoSynth_0_r_buffer_ff$EMPTY_N ||
	      msNoSynth_0_r_buffer_enqw$whas) &&
	     cpu$dmem_master_rready ;
  assign WILL_FIRE_RL_msNoSynth_0_r_dropFlit =
	     CAN_FIRE_RL_msNoSynth_0_r_dropFlit ;

  // rule RL_rl_relay_sw_interrupts
  assign CAN_FIRE_RL_rl_relay_sw_interrupts =
	     near_mem_io$RDY_get_sw_interrupt_req_get ;
  assign WILL_FIRE_RL_rl_relay_sw_interrupts =
	     near_mem_io$RDY_get_sw_interrupt_req_get ;

  // rule RL_rl_relay_timer_interrupts
  assign CAN_FIRE_RL_rl_relay_timer_interrupts =
	     near_mem_io$RDY_get_timer_interrupt_req_get ;
  assign WILL_FIRE_RL_rl_relay_timer_interrupts =
	     near_mem_io$RDY_get_timer_interrupt_req_get ;

  // rule RL_rl_relay_external_interrupts
  assign CAN_FIRE_RL_rl_relay_external_interrupts = 1'd1 ;
  assign WILL_FIRE_RL_rl_relay_external_interrupts = 1'd1 ;

  // rule RL_rl_cpu_hart0_reset_complete
  assign CAN_FIRE_RL_rl_cpu_hart0_reset_complete =
	     near_mem_io$RDY_server_reset_response_get &&
	     plic$RDY_server_reset_response_get &&
	     cpu$RDY_hart0_server_reset_response_get &&
	     f_reset_requestor$EMPTY_N &&
	     (f_reset_requestor$D_OUT ||
	      debug_module$RDY_hart0_reset_client_response_put) &&
	     (!f_reset_requestor$D_OUT || f_reset_rsps$FULL_N) ;
  assign WILL_FIRE_RL_rl_cpu_hart0_reset_complete =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_complete ;

  // rule RL_cpu_imem_ug_u_ar_setPeek
  assign CAN_FIRE_RL_cpu_imem_ug_u_ar_setPeek = cpu$imem_master_arvalid ;
  assign WILL_FIRE_RL_cpu_imem_ug_u_ar_setPeek = cpu$imem_master_arvalid ;

  // rule RL_cpu_imem_ug_u_ar_warnDoDrop
  assign CAN_FIRE_RL_cpu_imem_ug_u_ar_warnDoDrop =
	     cpu_imem_ug_u_ar_dropWire$whas && !cpu$imem_master_arvalid ;
  assign WILL_FIRE_RL_cpu_imem_ug_u_ar_warnDoDrop =
	     CAN_FIRE_RL_cpu_imem_ug_u_ar_warnDoDrop ;

  // rule RL_cpu_imem_ug_u_ar_doDrop
  assign CAN_FIRE_RL_cpu_imem_ug_u_ar_doDrop =
	     cpu$imem_master_arvalid && cpu_imem_ug_u_ar_dropWire$whas ;
  assign WILL_FIRE_RL_cpu_imem_ug_u_ar_doDrop =
	     CAN_FIRE_RL_cpu_imem_ug_u_ar_doDrop ;

  // rule RL_cpu_imem_ar_forwardReady
  assign CAN_FIRE_RL_cpu_imem_ar_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_cpu_imem_ar_forwardReady = 1'd1 ;

  // rule RL_msNoSynth_0_r_buffer_enqueue
  assign CAN_FIRE_RL_msNoSynth_0_r_buffer_enqueue =
	     msNoSynth_0_r_buffer_enqw$whas &&
	     (!CAN_FIRE_RL_msNoSynth_0_r_dropFlit ||
	      msNoSynth_0_r_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_msNoSynth_0_r_buffer_enqueue =
	     CAN_FIRE_RL_msNoSynth_0_r_buffer_enqueue ;

  // rule RL_msNoSynth_0_r_buffer_dequeue
  assign CAN_FIRE_RL_msNoSynth_0_r_buffer_dequeue =
	     CAN_FIRE_RL_msNoSynth_0_r_dropFlit &&
	     msNoSynth_0_r_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_msNoSynth_0_r_buffer_dequeue =
	     CAN_FIRE_RL_msNoSynth_0_r_buffer_dequeue ;

  // rule RL_ifcs_0_firstFlit
  assign CAN_FIRE_RL_ifcs_0_firstFlit =
	     cpu$dmem_master_wvalid &&
	     IF_merged_0_flitLeft_084_EQ_0_085_THEN_cpu_dme_ETC___d1208 &&
	     ifcs_0_innerReq$FULL_N &&
	     ifcs_0_innerRoute$FULL_N &&
	     (IF_merged_0_flitLeft_084_EQ_0_085_THEN_NOT_cpu_ETC___d1215 ||
	      cpu$dmem_master_awvalid) &&
	     ifcs_0_state == 2'd0 &&
	     IF_IF_merged_0_flitLeft_084_EQ_0_085_THEN_cpu__ETC___d1250 ==
	     2'd1 ;
  assign WILL_FIRE_RL_ifcs_0_firstFlit = CAN_FIRE_RL_ifcs_0_firstFlit ;

  // rule RL_ifcs_0_followFlits
  assign CAN_FIRE_RL_ifcs_0_followFlits =
	     cpu$dmem_master_wvalid &&
	     IF_merged_0_flitLeft_084_EQ_0_085_THEN_cpu_dme_ETC___d1208 &&
	     ifcs_0_innerReq$FULL_N &&
	     (IF_merged_0_flitLeft_084_EQ_0_085_THEN_NOT_cpu_ETC___d1215 ||
	      cpu$dmem_master_awvalid) &&
	     ifcs_0_state == 2'd1 ;
  assign WILL_FIRE_RL_ifcs_0_followFlits = CAN_FIRE_RL_ifcs_0_followFlits ;

  // rule RL_ifcs_0_nonRoutableFlit
  assign CAN_FIRE_RL_ifcs_0_nonRoutableFlit =
	     IF_merged_0_flitLeft_084_EQ_0_085_THEN_cpu_dme_ETC___d1208 &&
	     IF_merged_0_flitLeft_084_EQ_0_085_THEN_NOT_cpu_ETC___d1285 &&
	     ifcs_0_state == 2'd0 &&
	     IF_IF_merged_0_flitLeft_084_EQ_0_085_THEN_cpu__ETC___d1250 !=
	     2'd1 ;
  assign WILL_FIRE_RL_ifcs_0_nonRoutableFlit =
	     CAN_FIRE_RL_ifcs_0_nonRoutableFlit ;

  // rule RL_ifcs_0_nonRoutableGenRsp
  assign CAN_FIRE_RL_ifcs_0_nonRoutableGenRsp =
	     IF_merged_0_flitLeft_084_EQ_0_085_THEN_cpu_dme_ETC___d1208 &&
	     ifcs_0_noRoute_inner_pendingReq$port1__read &&
	     ifcs_0_noRouteRsp$FULL_N &&
	     cpu$dmem_master_wvalid ;
  assign WILL_FIRE_RL_ifcs_0_nonRoutableGenRsp =
	     CAN_FIRE_RL_ifcs_0_nonRoutableGenRsp ;

  // rule RL_ifcs_0_drainFlits
  assign CAN_FIRE_RL_ifcs_0_drainFlits =
	     IF_merged_0_flitLeft_084_EQ_0_085_THEN_cpu_dme_ETC___d1208 &&
	     cpu$dmem_master_wvalid &&
	     ifcs_0_state == 2'd2 ;
  assign WILL_FIRE_RL_ifcs_0_drainFlits = CAN_FIRE_RL_ifcs_0_drainFlits ;

  // rule __me_check_155
  assign CAN_FIRE___me_check_155 = 1'b1 ;
  assign WILL_FIRE___me_check_155 = 1'b1 ;

  // rule __me_check_156
  assign CAN_FIRE___me_check_156 = 1'b1 ;
  assign WILL_FIRE___me_check_156 = 1'b1 ;

  // rule __me_check_157
  assign CAN_FIRE___me_check_157 = 1'b1 ;
  assign WILL_FIRE___me_check_157 = 1'b1 ;

  // rule __me_check_159
  assign CAN_FIRE___me_check_159 = 1'b1 ;
  assign WILL_FIRE___me_check_159 = 1'b1 ;

  // rule RL_merged_0_genFirst
  assign CAN_FIRE_RL_merged_0_genFirst =
	     cpu$dmem_master_awvalid && cpu$dmem_master_wvalid &&
	     merged_0_doDrop$whas &&
	     merged_0_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_merged_0_genFirst = CAN_FIRE_RL_merged_0_genFirst ;

  // rule RL_msNoSynth_0_aw_forwardReady
  assign CAN_FIRE_RL_msNoSynth_0_aw_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_msNoSynth_0_aw_forwardReady = 1'd1 ;

  // rule RL_merged_0_genOther
  assign CAN_FIRE_RL_merged_0_genOther =
	     cpu$dmem_master_wvalid && merged_0_doDrop$whas &&
	     merged_0_flitLeft != 8'd0 ;
  assign WILL_FIRE_RL_merged_0_genOther = CAN_FIRE_RL_merged_0_genOther ;

  // rule RL_msNoSynth_0_w_forwardReady
  assign CAN_FIRE_RL_msNoSynth_0_w_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_msNoSynth_0_w_forwardReady = 1'd1 ;

  // rule RL_ifcs_2_firstFlit
  assign CAN_FIRE_RL_ifcs_2_firstFlit =
	     plic$axi4_slave_bvalid && ifcs_2_rspBack$FULL_N &&
	     ifcs_2_routeBack$FULL_N &&
	     !ifcs_2_state ;
  assign WILL_FIRE_RL_ifcs_2_firstFlit = CAN_FIRE_RL_ifcs_2_firstFlit ;

  // rule RL_ifcs_2_followFlits
  assign CAN_FIRE_RL_ifcs_2_followFlits =
	     plic$axi4_slave_bvalid && ifcs_2_rspBack$FULL_N && ifcs_2_state ;
  assign WILL_FIRE_RL_ifcs_2_followFlits = CAN_FIRE_RL_ifcs_2_followFlits ;

  // rule __me_check_173
  assign CAN_FIRE___me_check_173 = 1'b1 ;
  assign WILL_FIRE___me_check_173 = 1'b1 ;

  // rule RL_ssNoSynth_2_b_forwardReady
  assign CAN_FIRE_RL_ssNoSynth_2_b_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_ssNoSynth_2_b_forwardReady = 1'd1 ;

  // rule RL_ifcs_0_1_firstFlit
  assign CAN_FIRE_RL_ifcs_0_1_firstFlit =
	     cpu$dmem_master_arvalid && ifcs_0_1_innerReq$FULL_N &&
	     ifcs_0_1_innerRoute$FULL_N &&
	     ifcs_0_1_state == 2'd0 &&
	     IF_cpu_dmem_master_ar_araddr__875_BITS_63_TO_4_ETC___d1901 ==
	     2'd1 ;
  assign WILL_FIRE_RL_ifcs_0_1_firstFlit = CAN_FIRE_RL_ifcs_0_1_firstFlit ;

  // rule RL_ifcs_0_1_followFlits
  assign CAN_FIRE_RL_ifcs_0_1_followFlits =
	     cpu$dmem_master_arvalid && ifcs_0_1_innerReq$FULL_N &&
	     ifcs_0_1_state == 2'd1 ;
  assign WILL_FIRE_RL_ifcs_0_1_followFlits =
	     CAN_FIRE_RL_ifcs_0_1_followFlits ;

  // rule RL_ifcs_0_1_nonRoutableFlit
  assign CAN_FIRE_RL_ifcs_0_1_nonRoutableFlit =
	     ifcs_0_1_noRoute_flitCount == 9'd0 && cpu$dmem_master_arvalid &&
	     ifcs_0_1_state == 2'd0 &&
	     IF_cpu_dmem_master_ar_araddr__875_BITS_63_TO_4_ETC___d1901 !=
	     2'd1 ;
  assign WILL_FIRE_RL_ifcs_0_1_nonRoutableFlit =
	     CAN_FIRE_RL_ifcs_0_1_nonRoutableFlit ;

  // rule RL_ifcs_0_1_nonRoutableGenRsp
  assign CAN_FIRE_RL_ifcs_0_1_nonRoutableGenRsp =
	     x_port1__read__h70706 != 9'd0 && ifcs_0_1_noRouteRsp$FULL_N &&
	     (x_port1__read__h70706 != 9'd1 || cpu$dmem_master_arvalid) ;
  assign WILL_FIRE_RL_ifcs_0_1_nonRoutableGenRsp =
	     CAN_FIRE_RL_ifcs_0_1_nonRoutableGenRsp ;

  // rule RL_ifcs_0_1_drainFlits
  assign CAN_FIRE_RL_ifcs_0_1_drainFlits =
	     cpu$dmem_master_arvalid && ifcs_0_1_state == 2'd2 ;
  assign WILL_FIRE_RL_ifcs_0_1_drainFlits = CAN_FIRE_RL_ifcs_0_1_drainFlits ;

  // rule __me_check_202
  assign CAN_FIRE___me_check_202 = 1'b1 ;
  assign WILL_FIRE___me_check_202 = 1'b1 ;

  // rule __me_check_203
  assign CAN_FIRE___me_check_203 = 1'b1 ;
  assign WILL_FIRE___me_check_203 = 1'b1 ;

  // rule __me_check_204
  assign CAN_FIRE___me_check_204 = 1'b1 ;
  assign WILL_FIRE___me_check_204 = 1'b1 ;

  // rule __me_check_206
  assign CAN_FIRE___me_check_206 = 1'b1 ;
  assign WILL_FIRE___me_check_206 = 1'b1 ;

  // rule RL_msNoSynth_0_ar_forwardReady
  assign CAN_FIRE_RL_msNoSynth_0_ar_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_msNoSynth_0_ar_forwardReady = 1'd1 ;

  // rule RL_ifcs_1_1_forwardRsp
  assign CAN_FIRE_RL_ifcs_1_1_forwardRsp =
	     msNoSynth_1_r_buffer_ff$FULL_N && CAN_FIRE_RL_sink_selected_9 &&
	     !ifcs_1_1_noRouteRsp$EMPTY_N ;
  assign WILL_FIRE_RL_ifcs_1_1_forwardRsp = CAN_FIRE_RL_ifcs_1_1_forwardRsp ;

  // rule RL_msNoSynth_1_r_forwardFlit
  assign CAN_FIRE_RL_msNoSynth_1_r_forwardFlit =
	     !dm_master_nonsynth_rCanPut$wget ||
	     msNoSynth_1_r_buffer_firstValid$Q_OUT &&
	     (msNoSynth_1_r_buffer_ff$EMPTY_N ||
	      msNoSynth_1_r_buffer_enqw$whas) &&
	     dm_master_nonsynth_takeUpperR$EMPTY_N ;
  assign WILL_FIRE_RL_msNoSynth_1_r_forwardFlit =
	     CAN_FIRE_RL_msNoSynth_1_r_forwardFlit ;

  // rule RL_msNoSynth_1_r_dropFlit
  assign CAN_FIRE_RL_msNoSynth_1_r_dropFlit =
	     (msNoSynth_1_r_buffer_ff$EMPTY_N ||
	      msNoSynth_1_r_buffer_enqw$whas) &&
	     dm_master_nonsynth_rCanPut$wget ;
  assign WILL_FIRE_RL_msNoSynth_1_r_dropFlit =
	     CAN_FIRE_RL_msNoSynth_1_r_dropFlit ;

  // rule RL_msNoSynth_1_r_buffer_enqueue
  assign CAN_FIRE_RL_msNoSynth_1_r_buffer_enqueue =
	     msNoSynth_1_r_buffer_enqw$whas &&
	     (!CAN_FIRE_RL_msNoSynth_1_r_dropFlit ||
	      msNoSynth_1_r_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_msNoSynth_1_r_buffer_enqueue =
	     CAN_FIRE_RL_msNoSynth_1_r_buffer_enqueue ;

  // rule RL_msNoSynth_1_r_buffer_dequeue
  assign CAN_FIRE_RL_msNoSynth_1_r_buffer_dequeue =
	     CAN_FIRE_RL_msNoSynth_1_r_dropFlit &&
	     msNoSynth_1_r_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_msNoSynth_1_r_buffer_dequeue =
	     CAN_FIRE_RL_msNoSynth_1_r_buffer_dequeue ;

  // rule RL_ifcs_1_1_nonRoutableGenRsp
  assign CAN_FIRE_RL_ifcs_1_1_nonRoutableGenRsp =
	     x_port1__read__h73154 != 9'd0 && ifcs_1_1_noRouteRsp$FULL_N &&
	     (x_port1__read__h73154 != 9'd1 ||
	      dm_master_nonsynth_arCanPeek$wget) ;
  assign WILL_FIRE_RL_ifcs_1_1_nonRoutableGenRsp =
	     CAN_FIRE_RL_ifcs_1_1_nonRoutableGenRsp ;

  // rule __me_check_209
  assign CAN_FIRE___me_check_209 = 1'b1 ;
  assign WILL_FIRE___me_check_209 = 1'b1 ;

  // rule __me_check_210
  assign CAN_FIRE___me_check_210 = 1'b1 ;
  assign WILL_FIRE___me_check_210 = 1'b1 ;

  // rule __me_check_213
  assign CAN_FIRE___me_check_213 = 1'b1 ;
  assign WILL_FIRE___me_check_213 = 1'b1 ;

  // rule RL_msNoSynth_1_ar_forwardReady
  assign CAN_FIRE_RL_msNoSynth_1_ar_forwardReady =
	     !dm_master_nonsynth_arCanPeek$wget ||
	     !msNoSynth_1_ar_dwReady$whas ||
	     dm_master_nonsynth_bufferShim_arff$EMPTY_N &&
	     dm_master_nonsynth_takeUpperR$FULL_N ;
  assign WILL_FIRE_RL_msNoSynth_1_ar_forwardReady =
	     CAN_FIRE_RL_msNoSynth_1_ar_forwardReady ;

  // rule RL_ifcs_0_1_firstFlit_1
  assign CAN_FIRE_RL_ifcs_0_1_firstFlit_1 =
	     tagController_tmp_shimSlave_rff$EMPTY_N &&
	     ifcs_0_1_rspBack$FULL_N &&
	     ifcs_0_1_routeBack$FULL_N &&
	     !ifcs_0_1_state_1 ;
  assign WILL_FIRE_RL_ifcs_0_1_firstFlit_1 =
	     CAN_FIRE_RL_ifcs_0_1_firstFlit_1 ;

  // rule RL_ifcs_0_1_followFlits_1
  assign CAN_FIRE_RL_ifcs_0_1_followFlits_1 =
	     tagController_tmp_shimSlave_rff$EMPTY_N &&
	     ifcs_0_1_rspBack$FULL_N &&
	     ifcs_0_1_state_1 ;
  assign WILL_FIRE_RL_ifcs_0_1_followFlits_1 =
	     CAN_FIRE_RL_ifcs_0_1_followFlits_1 ;

  // rule __me_check_216
  assign CAN_FIRE___me_check_216 = 1'b1 ;
  assign WILL_FIRE___me_check_216 = 1'b1 ;

  // rule RL_ssNoSynth_0_r_forwardReady
  assign CAN_FIRE_RL_ssNoSynth_0_r_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_ssNoSynth_0_r_forwardReady = 1'd1 ;

  // rule RL_rl_cpu_hart0_reset_from_soc_start
  assign CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start =
	     near_mem_io$RDY_server_reset_request_put &&
	     plic_RDY_server_reset_request_put__42_AND_cpu__ETC___d248 ;
  assign WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;

  // rule RL_rl_cpu_hart0_reset_from_dm_start
  assign CAN_FIRE_RL_rl_cpu_hart0_reset_from_dm_start =
	     debug_module$RDY_hart0_reset_client_request_get &&
	     near_mem_io$RDY_server_reset_request_put &&
	     plic$RDY_server_reset_request_put &&
	     cpu$RDY_hart0_server_reset_request_put &&
	     f_reset_requestor$FULL_N &&
	     !CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;
  assign WILL_FIRE_RL_rl_cpu_hart0_reset_from_dm_start =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_from_dm_start &&
	     !WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;

  // rule RL_ifcs_1_1_firstFlit_1
  assign CAN_FIRE_RL_ifcs_1_1_firstFlit_1 =
	     near_mem_io$axi4_slave_rvalid && ifcs_1_1_rspBack$FULL_N &&
	     ifcs_1_1_routeBack$FULL_N &&
	     !ifcs_1_1_state_1 ;
  assign WILL_FIRE_RL_ifcs_1_1_firstFlit_1 =
	     CAN_FIRE_RL_ifcs_1_1_firstFlit_1 ;

  // rule RL_ifcs_1_1_followFlits_1
  assign CAN_FIRE_RL_ifcs_1_1_followFlits_1 =
	     near_mem_io$axi4_slave_rvalid && ifcs_1_1_rspBack$FULL_N &&
	     ifcs_1_1_state_1 ;
  assign WILL_FIRE_RL_ifcs_1_1_followFlits_1 =
	     CAN_FIRE_RL_ifcs_1_1_followFlits_1 ;

  // rule __me_check_218
  assign CAN_FIRE___me_check_218 = 1'b1 ;
  assign WILL_FIRE___me_check_218 = 1'b1 ;

  // rule RL_ssNoSynth_1_r_forwardReady
  assign CAN_FIRE_RL_ssNoSynth_1_r_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_ssNoSynth_1_r_forwardReady = 1'd1 ;

  // rule RL_ifcs_2_1_firstFlit
  assign CAN_FIRE_RL_ifcs_2_1_firstFlit =
	     plic$axi4_slave_rvalid && ifcs_2_1_rspBack$FULL_N &&
	     ifcs_2_1_routeBack$FULL_N &&
	     !ifcs_2_1_state ;
  assign WILL_FIRE_RL_ifcs_2_1_firstFlit = CAN_FIRE_RL_ifcs_2_1_firstFlit ;

  // rule RL_ifcs_2_1_followFlits
  assign CAN_FIRE_RL_ifcs_2_1_followFlits =
	     plic$axi4_slave_rvalid && ifcs_2_1_rspBack$FULL_N &&
	     ifcs_2_1_state ;
  assign WILL_FIRE_RL_ifcs_2_1_followFlits =
	     CAN_FIRE_RL_ifcs_2_1_followFlits ;

  // rule __me_check_220
  assign CAN_FIRE___me_check_220 = 1'b1 ;
  assign WILL_FIRE___me_check_220 = 1'b1 ;

  // rule RL_ssNoSynth_2_r_forwardReady
  assign CAN_FIRE_RL_ssNoSynth_2_r_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_ssNoSynth_2_r_forwardReady = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_activeSource_0$write_1__SEL_1 =
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     !ifcs_0_innerReq$D_OUT[2] ;
  assign MUX_activeSource_1_1_0$write_1__SEL_1 =
	     WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	     !ifcs_0_1_rspBack$D_OUT[2] ;
  assign MUX_activeSource_1_1_0$write_1__SEL_2 =
	     WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	     !ifcs_1_1_rspBack$D_OUT[2] ;
  assign MUX_activeSource_1_1_0$write_1__SEL_3 =
	     WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	     !ifcs_2_1_rspBack$D_OUT[2] ;
  assign MUX_flitToSink_0$wset_1__SEL_1 =
	     WILL_FIRE_RL_burst && ifcs_0_innerRoute$D_OUT[0] ;
  assign MUX_flitToSink_0$wset_1__SEL_3 =
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     ifcs_0_innerRoute$D_OUT[0] ;
  assign MUX_flitToSink_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_burst && ifcs_0_innerRoute$D_OUT[1] ;
  assign MUX_flitToSink_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     ifcs_0_innerRoute$D_OUT[1] ;
  assign MUX_flitToSink_1_0$wset_1__SEL_1 =
	     WILL_FIRE_RL_burst_2 && ifcs_0_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_0$wset_1__SEL_2 =
	     WILL_FIRE_RL_burst_3 && ifcs_1_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_0$wset_1__SEL_3 =
	     WILL_FIRE_RL_burst_4 && ifcs_2_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_0$wset_1__SEL_4 =
	     WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	     ifcs_0_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_0$wset_1__SEL_5 =
	     WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	     ifcs_1_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_0$wset_1__SEL_6 =
	     WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	     ifcs_2_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_0_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_burst_5 && ifcs_0_1_innerRoute$D_OUT[0] ;
  assign MUX_flitToSink_1_0_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	     ifcs_0_1_innerRoute$D_OUT[0] ;
  assign MUX_flitToSink_1_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_burst_2 && ifcs_0_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1$wset_1__SEL_2 =
	     WILL_FIRE_RL_burst_3 && ifcs_1_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_burst_4 && ifcs_2_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1$wset_1__SEL_4 =
	     WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	     ifcs_0_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1$wset_1__SEL_5 =
	     WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	     ifcs_1_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1$wset_1__SEL_6 =
	     WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	     ifcs_2_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1_0$wset_1__SEL_1 =
	     WILL_FIRE_RL_burst_7 && ifcs_0_1_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_1_0$wset_1__SEL_2 =
	     WILL_FIRE_RL_burst_8 && ifcs_1_1_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_1_0$wset_1__SEL_3 =
	     WILL_FIRE_RL_burst_9 && ifcs_2_1_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_1_0$wset_1__SEL_4 =
	     WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	     ifcs_0_1_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_1_0$wset_1__SEL_5 =
	     WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	     ifcs_1_1_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_1_0$wset_1__SEL_6 =
	     WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	     ifcs_2_1_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_1_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_burst_5 && ifcs_0_1_innerRoute$D_OUT[1] ;
  assign MUX_flitToSink_1_1_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	     ifcs_0_1_innerRoute$D_OUT[1] ;
  assign MUX_flitToSink_1_1_1_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_burst_7 && ifcs_0_1_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1_1_1$wset_1__SEL_2 =
	     WILL_FIRE_RL_burst_8 && ifcs_1_1_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1_1_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_burst_9 && ifcs_2_1_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1_1_1$wset_1__SEL_4 =
	     WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	     ifcs_0_1_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1_1_1$wset_1__SEL_5 =
	     WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	     ifcs_1_1_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1_1_1$wset_1__SEL_6 =
	     WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	     ifcs_2_1_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_2$wset_1__SEL_1 =
	     WILL_FIRE_RL_burst_5 && ifcs_0_1_innerRoute$D_OUT[2] ;
  assign MUX_flitToSink_1_2$wset_1__SEL_3 =
	     WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	     ifcs_0_1_innerRoute$D_OUT[2] ;
  assign MUX_flitToSink_2$wset_1__SEL_1 =
	     WILL_FIRE_RL_burst && ifcs_0_innerRoute$D_OUT[2] ;
  assign MUX_flitToSink_2$wset_1__SEL_3 =
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     ifcs_0_innerRoute$D_OUT[2] ;
  assign MUX_ifcs_0_1_state_1$write_1__SEL_1 =
	     WILL_FIRE_RL_ifcs_0_1_followFlits_1 &&
	     tagController_tmp_shimSlave_rff$D_OUT[2] ;
  assign MUX_ifcs_0_state$write_1__PSEL_1 =
	     WILL_FIRE_RL_ifcs_0_drainFlits ||
	     WILL_FIRE_RL_ifcs_0_followFlits ;
  assign MUX_ifcs_0_state$write_1__SEL_1 =
	     MUX_ifcs_0_state$write_1__PSEL_1 && cpu$dmem_master_wlast ;
  assign MUX_ifcs_0_state$write_1__SEL_2 =
	     WILL_FIRE_RL_ifcs_0_firstFlit && !cpu$dmem_master_wlast ;
  assign MUX_ifcs_0_state$write_1__SEL_3 =
	     WILL_FIRE_RL_ifcs_0_nonRoutableGenRsp && !cpu$dmem_master_wlast ;
  assign MUX_ifcs_1_1_state_1$write_1__SEL_1 =
	     WILL_FIRE_RL_ifcs_1_1_followFlits_1 &&
	     near_mem_io$axi4_slave_rlast ;
  assign MUX_ifcs_1_state$write_1__PSEL_1 =
	     WILL_FIRE_RL_ifcs_1_drainFlits ||
	     WILL_FIRE_RL_ifcs_1_followFlits ;
  assign MUX_ifcs_1_state$write_1__SEL_1 =
	     MUX_ifcs_1_state$write_1__PSEL_1 &&
	     dm_master_nonsynth_bufferShim_wff$D_OUT[2] ;
  assign MUX_ifcs_1_state$write_1__SEL_2 =
	     WILL_FIRE_RL_ifcs_1_firstFlit &&
	     !dm_master_nonsynth_bufferShim_wff$D_OUT[2] ;
  assign MUX_ifcs_1_state$write_1__SEL_3 =
	     WILL_FIRE_RL_ifcs_1_nonRoutableGenRsp &&
	     !dm_master_nonsynth_bufferShim_wff$D_OUT[2] ;
  assign MUX_ifcs_2_1_state$write_1__SEL_1 =
	     WILL_FIRE_RL_ifcs_2_1_followFlits && plic$axi4_slave_rlast ;
  assign MUX_split_0_flitLeft$write_1__SEL_1 =
	     WILL_FIRE_RL_split_0_putOther && split_0_doPut$wget[245] ;
  assign MUX_split_0_flitLeft$write_1__SEL_2 =
	     WILL_FIRE_RL_split_0_putFirst && !split_0_doPut$wget[245] ;
  assign MUX_split_1_flitLeft$write_1__SEL_1 =
	     WILL_FIRE_RL_split_1_putOther && split_1_doPut$wget[245] ;
  assign MUX_split_1_flitLeft$write_1__SEL_2 =
	     WILL_FIRE_RL_split_1_putFirst && !split_1_doPut$wget[245] ;
  assign MUX_split_2_flitLeft$write_1__SEL_1 =
	     WILL_FIRE_RL_split_2_putOther && split_2_doPut$wget[245] ;
  assign MUX_split_2_flitLeft$write_1__SEL_2 =
	     WILL_FIRE_RL_split_2_putFirst && !split_2_doPut$wget[245] ;
  assign MUX_state$write_1__SEL_1 =
	     WILL_FIRE_RL_burst && ifcs_0_innerReq$D_OUT[2] ;
  assign MUX_state$write_1__SEL_2 =
	     WILL_FIRE_RL_burst_1 && ifcs_1_innerReq$D_OUT[2] ;
  assign MUX_state_1_1_1$write_1__SEL_1 =
	     WILL_FIRE_RL_burst_7 && ifcs_0_1_rspBack$D_OUT[2] ;
  assign MUX_state_1_1_1$write_1__SEL_2 =
	     WILL_FIRE_RL_burst_8 && ifcs_1_1_rspBack$D_OUT[2] ;
  assign MUX_state_1_1_1$write_1__SEL_3 =
	     WILL_FIRE_RL_burst_9 && ifcs_2_1_rspBack$D_OUT[2] ;
  assign MUX_activeSource_0$write_1__VAL_1 =
	     WILL_FIRE_RL_arbitrate &&
	     IF_SEXT_arbiter_lastSelect_515_516_BIT_0_517_A_ETC___d1539 ;
  assign MUX_activeSource_1$write_1__VAL_1 =
	     WILL_FIRE_RL_arbitrate &&
	     IF_SEXT_arbiter_lastSelect_515_516_BIT_0_517_A_ETC___d1543 ;
  assign MUX_activeSource_1_1_0$write_1__VAL_1 =
	     WILL_FIRE_RL_arbitrate_3 &&
	     IF_SEXT_arbiter_1_1_lastSelect_332_333_BIT_0_3_ETC___d2376 ;
  assign MUX_activeSource_1_1_1_1$write_1__VAL_1 =
	     WILL_FIRE_RL_arbitrate_3 &&
	     IF_SEXT_arbiter_1_1_lastSelect_332_333_BIT_0_3_ETC___d2382 ;
  assign MUX_activeSource_1_1_2$write_1__VAL_1 =
	     WILL_FIRE_RL_arbitrate_3 &&
	     IF_SEXT_arbiter_1_1_lastSelect_332_333_BIT_0_3_ETC___d2388 ;
  assign MUX_merged_0_flitLeft$write_1__VAL_1 = merged_0_flitLeft - 8'd1 ;
  assign MUX_merged_1_flitLeft$write_1__VAL_2 = merged_1_flitLeft - 8'd1 ;
  always@(MUX_flitToSink_1_0$wset_1__SEL_1 or
	  MUX_flitToSink_1_0$wset_1__SEL_4 or
	  ifcs_0_rspBack$D_OUT or
	  MUX_flitToSink_1_0$wset_1__SEL_2 or
	  MUX_flitToSink_1_0$wset_1__SEL_5 or
	  ifcs_1_rspBack$D_OUT or
	  MUX_flitToSink_1_0$wset_1__SEL_3 or
	  MUX_flitToSink_1_0$wset_1__SEL_6 or ifcs_2_rspBack$D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_flitToSink_1_0$wset_1__SEL_1 || MUX_flitToSink_1_0$wset_1__SEL_4:
	  MUX_msNoSynth_0_b_buffer_enqw$wset_1__VAL_2 = ifcs_0_rspBack$D_OUT;
      MUX_flitToSink_1_0$wset_1__SEL_2 || MUX_flitToSink_1_0$wset_1__SEL_5:
	  MUX_msNoSynth_0_b_buffer_enqw$wset_1__VAL_2 = ifcs_1_rspBack$D_OUT;
      MUX_flitToSink_1_0$wset_1__SEL_3 || MUX_flitToSink_1_0$wset_1__SEL_6:
	  MUX_msNoSynth_0_b_buffer_enqw$wset_1__VAL_2 = ifcs_2_rspBack$D_OUT;
      default: MUX_msNoSynth_0_b_buffer_enqw$wset_1__VAL_2 =
		   6'b101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_flitToSink_1_1_0$wset_1__SEL_1 or
	  MUX_flitToSink_1_1_0$wset_1__SEL_4 or
	  ifcs_0_1_rspBack$D_OUT or
	  MUX_flitToSink_1_1_0$wset_1__SEL_2 or
	  MUX_flitToSink_1_1_0$wset_1__SEL_5 or
	  ifcs_1_1_rspBack$D_OUT or
	  MUX_flitToSink_1_1_0$wset_1__SEL_3 or
	  MUX_flitToSink_1_1_0$wset_1__SEL_6 or ifcs_2_1_rspBack$D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_flitToSink_1_1_0$wset_1__SEL_1 ||
      MUX_flitToSink_1_1_0$wset_1__SEL_4:
	  MUX_msNoSynth_0_r_buffer_enqw$wset_1__VAL_2 =
	      ifcs_0_1_rspBack$D_OUT;
      MUX_flitToSink_1_1_0$wset_1__SEL_2 ||
      MUX_flitToSink_1_1_0$wset_1__SEL_5:
	  MUX_msNoSynth_0_r_buffer_enqw$wset_1__VAL_2 =
	      ifcs_1_1_rspBack$D_OUT;
      MUX_flitToSink_1_1_0$wset_1__SEL_3 ||
      MUX_flitToSink_1_1_0$wset_1__SEL_6:
	  MUX_msNoSynth_0_r_buffer_enqw$wset_1__VAL_2 =
	      ifcs_2_1_rspBack$D_OUT;
      default: MUX_msNoSynth_0_r_buffer_enqw$wset_1__VAL_2 =
		   137'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(MUX_flitToSink_1_1$wset_1__SEL_1 or
	  MUX_flitToSink_1_1$wset_1__SEL_4 or
	  ifcs_0_rspBack$D_OUT or
	  MUX_flitToSink_1_1$wset_1__SEL_2 or
	  MUX_flitToSink_1_1$wset_1__SEL_5 or
	  ifcs_1_rspBack$D_OUT or
	  MUX_flitToSink_1_1$wset_1__SEL_3 or
	  MUX_flitToSink_1_1$wset_1__SEL_6 or ifcs_2_rspBack$D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_flitToSink_1_1$wset_1__SEL_1 || MUX_flitToSink_1_1$wset_1__SEL_4:
	  MUX_msNoSynth_1_b_buffer_enqw$wset_1__VAL_2 = ifcs_0_rspBack$D_OUT;
      MUX_flitToSink_1_1$wset_1__SEL_2 || MUX_flitToSink_1_1$wset_1__SEL_5:
	  MUX_msNoSynth_1_b_buffer_enqw$wset_1__VAL_2 = ifcs_1_rspBack$D_OUT;
      MUX_flitToSink_1_1$wset_1__SEL_3 || MUX_flitToSink_1_1$wset_1__SEL_6:
	  MUX_msNoSynth_1_b_buffer_enqw$wset_1__VAL_2 = ifcs_2_rspBack$D_OUT;
      default: MUX_msNoSynth_1_b_buffer_enqw$wset_1__VAL_2 =
		   6'b101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_flitToSink_1_1_1_1$wset_1__SEL_1 or
	  MUX_flitToSink_1_1_1_1$wset_1__SEL_4 or
	  ifcs_0_1_rspBack$D_OUT or
	  MUX_flitToSink_1_1_1_1$wset_1__SEL_2 or
	  MUX_flitToSink_1_1_1_1$wset_1__SEL_5 or
	  ifcs_1_1_rspBack$D_OUT or
	  MUX_flitToSink_1_1_1_1$wset_1__SEL_3 or
	  MUX_flitToSink_1_1_1_1$wset_1__SEL_6 or ifcs_2_1_rspBack$D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_flitToSink_1_1_1_1$wset_1__SEL_1 ||
      MUX_flitToSink_1_1_1_1$wset_1__SEL_4:
	  MUX_msNoSynth_1_r_buffer_enqw$wset_1__VAL_2 =
	      ifcs_0_1_rspBack$D_OUT;
      MUX_flitToSink_1_1_1_1$wset_1__SEL_2 ||
      MUX_flitToSink_1_1_1_1$wset_1__SEL_5:
	  MUX_msNoSynth_1_r_buffer_enqw$wset_1__VAL_2 =
	      ifcs_1_1_rspBack$D_OUT;
      MUX_flitToSink_1_1_1_1$wset_1__SEL_3 ||
      MUX_flitToSink_1_1_1_1$wset_1__SEL_6:
	  MUX_msNoSynth_1_r_buffer_enqw$wset_1__VAL_2 =
	      ifcs_2_1_rspBack$D_OUT;
      default: MUX_msNoSynth_1_r_buffer_enqw$wset_1__VAL_2 =
		   137'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_split_0_flitLeft$write_1__VAL_1 = split_0_flitLeft - 8'd1 ;
  assign MUX_split_1_flitLeft$write_1__VAL_1 = split_1_flitLeft - 8'd1 ;
  assign MUX_split_2_flitLeft$write_1__VAL_1 = split_2_flitLeft - 8'd1 ;
  assign MUX_tagController_tmp_tagCon$cache_request_put_1__VAL_1 =
	     { tagController_tmp_shimSlave_awff$D_OUT[68:33],
	       5'd0,
	       tagController_tmp_shimSlave_awff$D_OUT[97:93],
	       3'd1,
	       tagController_tmp_shimSlave_wff$D_OUT[2],
	       tagController_tmp_shimSlave_awff$D_OUT[14:11] < 4'd4,
	       1'd0,
	       tagController_tmp_shimSlave_wff$D_OUT[18:3],
	       8'd255,
	       tagController_tmp_shimSlave_wff$D_OUT[1:0],
	       tagController_tmp_shimSlave_wff$D_OUT[146:19] } ;
  assign MUX_tagController_tmp_tagCon$cache_request_put_1__VAL_2 =
	     { tagController_tmp_shimSlave_arff$D_OUT[68:29],
	       1'b0,
	       tagController_tmp_shimSlave_arff$D_OUT[97:93],
	       152'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA,
	       tagController_tmp_shimSlave_arff$D_OUT[14:11] < 4'd4,
	       2'd0,
	       tagController_tmp_shimSlave_arff$D_OUT[22:18] } ;
  assign MUX_tagController_tmp_tagCon$memory_response_put_1__VAL_1 =
	     { tagController_tmp_shimMaster_bff$D_OUT[7:2],
	       136'h1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA } ;
  assign MUX_tagController_tmp_tagCon$memory_response_put_1__VAL_2 =
	     { tagController_tmp_shimMaster_rff$D_OUT[136:131],
	       4'd0,
	       tagController_tmp_shimMaster_rff$D_OUT[0],
	       1'd0,
	       tagController_tmp_shimMaster_rff$D_OUT[132:3] } ;

  // inlined wires
  assign cpu_imem_b_buffer_enqw$wget =
	     { cpu_imem_master_bid[4:0], cpu_imem_master_bresp } ;
  assign cpu_imem_r_buffer_enqw$wget =
	     { cpu_imem_master_rid[4:0],
	       cpu_imem_master_rdata,
	       cpu_imem_master_rresp,
	       cpu_imem_master_rlast,
	       2'd0 } ;
  assign cpu_imem_ug_u_aw_peekWire$wget =
	     { cpu$imem_master_awid,
	       cpu$imem_master_awaddr,
	       cpu$imem_master_awlen,
	       cpu$imem_master_awsize,
	       cpu$imem_master_awburst,
	       cpu$imem_master_awlock,
	       cpu$imem_master_awcache,
	       cpu$imem_master_awprot,
	       cpu$imem_master_awqos,
	       cpu$imem_master_awregion } ;
  assign cpu_imem_ug_u_w_peekWire$wget =
	     { cpu$imem_master_wdata,
	       cpu$imem_master_wstrb,
	       cpu$imem_master_wlast,
	       cpu$imem_master_wuser } ;
  assign cpu_imem_ug_u_b_putWire$whas =
	     cpu_imem_master_bvalid && cpu_imem_b_buffer_ff$FULL_N ;
  assign cpu_imem_ug_u_ar_peekWire$wget =
	     { cpu$imem_master_arid,
	       cpu$imem_master_araddr,
	       cpu$imem_master_arlen,
	       cpu$imem_master_arsize,
	       cpu$imem_master_arburst,
	       cpu$imem_master_arlock,
	       cpu$imem_master_arcache,
	       cpu$imem_master_arprot,
	       cpu$imem_master_arqos,
	       cpu$imem_master_arregion } ;
  assign cpu_imem_ug_u_r_putWire$whas =
	     cpu_imem_master_rvalid && cpu_imem_r_buffer_ff$FULL_N ;
  assign dm_master_nonsynth_awCanPeek$wget =
	     dm_master_nonsynth_bufferShim_awff_i_notEmpty__ETC___d471 &&
	     dm_master_nonsynth_takeUpperW$FULL_N &&
	     dm_master_nonsynth_awFF$FULL_N ;
  assign dm_master_nonsynth_wCanPeek$wget =
	     dm_master_nonsynth_bufferShim_wff$EMPTY_N &&
	     dm_master_nonsynth_takeUpperW$EMPTY_N ;
  assign dm_master_nonsynth_arCanPeek$wget =
	     dm_master_nonsynth_bufferShim_arff_i_notEmpty__ETC___d486 &&
	     dm_master_nonsynth_takeUpperR$FULL_N ;
  assign dm_master_nonsynth_rCanPut$wget =
	     dm_master_nonsynth_bufferShim_rff$FULL_N &&
	     dm_master_nonsynth_takeUpperR$EMPTY_N ;
  assign msNoSynth_0_w_dwReady$whas =
	     WILL_FIRE_RL_merged_0_genOther ||
	     WILL_FIRE_RL_merged_0_genFirst ;
  assign msNoSynth_0_b_buffer_enqw$wget =
	     WILL_FIRE_RL_ifcs_0_drainNoRouteResponse ?
	       ifcs_0_noRouteRsp$D_OUT :
	       MUX_msNoSynth_0_b_buffer_enqw$wset_1__VAL_2 ;
  assign msNoSynth_0_b_buffer_enqw$whas =
	     WILL_FIRE_RL_ifcs_0_drainNoRouteResponse ||
	     WILL_FIRE_RL_ifcs_0_forwardRsp ;
  assign msNoSynth_0_ar_dwReady$whas =
	     WILL_FIRE_RL_ifcs_0_1_nonRoutableGenRsp &&
	     x_port1__read__h70706 == 9'd1 ||
	     WILL_FIRE_RL_ifcs_0_1_drainFlits ||
	     WILL_FIRE_RL_ifcs_0_1_followFlits ||
	     WILL_FIRE_RL_ifcs_0_1_firstFlit ;
  assign msNoSynth_0_r_buffer_enqw$wget =
	     WILL_FIRE_RL_ifcs_0_1_drainNoRouteResponse ?
	       ifcs_0_1_noRouteRsp$D_OUT :
	       MUX_msNoSynth_0_r_buffer_enqw$wset_1__VAL_2 ;
  assign msNoSynth_0_r_buffer_enqw$whas =
	     WILL_FIRE_RL_ifcs_0_1_drainNoRouteResponse ||
	     WILL_FIRE_RL_ifcs_0_1_forwardRsp ;
  assign msNoSynth_1_w_dwReady$whas =
	     WILL_FIRE_RL_merged_1_genOther ||
	     WILL_FIRE_RL_merged_1_genFirst ;
  assign msNoSynth_1_b_buffer_enqw$wget =
	     WILL_FIRE_RL_ifcs_1_drainNoRouteResponse ?
	       ifcs_1_noRouteRsp$D_OUT :
	       MUX_msNoSynth_1_b_buffer_enqw$wset_1__VAL_2 ;
  assign msNoSynth_1_b_buffer_enqw$whas =
	     WILL_FIRE_RL_ifcs_1_drainNoRouteResponse ||
	     WILL_FIRE_RL_ifcs_1_forwardRsp ;
  assign msNoSynth_1_ar_dwReady$whas =
	     WILL_FIRE_RL_ifcs_1_1_nonRoutableGenRsp &&
	     x_port1__read__h73154 == 9'd1 ||
	     WILL_FIRE_RL_ifcs_1_1_drainFlits ||
	     WILL_FIRE_RL_ifcs_1_1_followFlits ||
	     WILL_FIRE_RL_ifcs_1_1_firstFlit ;
  assign msNoSynth_1_r_buffer_enqw$wget =
	     WILL_FIRE_RL_ifcs_1_1_drainNoRouteResponse ?
	       ifcs_1_1_noRouteRsp$D_OUT :
	       MUX_msNoSynth_1_r_buffer_enqw$wset_1__VAL_2 ;
  assign msNoSynth_1_r_buffer_enqw$whas =
	     WILL_FIRE_RL_ifcs_1_1_drainNoRouteResponse ||
	     WILL_FIRE_RL_ifcs_1_1_forwardRsp ;
  assign ssNoSynth_0_w_buffer_enqw$whas =
	     WILL_FIRE_RL_split_0_putOther && split_0_doPut$wget[245] ||
	     WILL_FIRE_RL_split_0_putFirst && !split_0_doPut$wget[245] ;
  assign ssNoSynth_0_b_dwReady$whas =
	     WILL_FIRE_RL_ifcs_0_followFlits_1 ||
	     WILL_FIRE_RL_ifcs_0_firstFlit_1 ;
  assign ssNoSynth_0_ar_buffer_enqw$wget =
	     (MUX_flitToSink_1_0_1$wset_1__SEL_1 ||
	      MUX_flitToSink_1_0_1$wset_1__SEL_3) ?
	       ifcs_0_1_innerReq$D_OUT :
	       ifcs_1_1_innerReq$D_OUT ;
  assign ssNoSynth_0_r_dwReady$whas =
	     WILL_FIRE_RL_ifcs_0_1_followFlits_1 ||
	     WILL_FIRE_RL_ifcs_0_1_firstFlit_1 ;
  assign ssNoSynth_1_aw_buffer_enqw$wget = split_1_doPut$wget[244:147] ;
  assign ssNoSynth_1_w_buffer_enqw$wget = split_1_doPut$wget[146:0] ;
  assign ssNoSynth_1_w_buffer_enqw$whas =
	     WILL_FIRE_RL_split_1_putOther && split_1_doPut$wget[245] ||
	     WILL_FIRE_RL_split_1_putFirst && !split_1_doPut$wget[245] ;
  assign ssNoSynth_1_b_dwReady$whas =
	     WILL_FIRE_RL_ifcs_1_followFlits_1 ||
	     WILL_FIRE_RL_ifcs_1_firstFlit_1 ;
  assign ssNoSynth_1_ar_buffer_enqw$wget =
	     (MUX_flitToSink_1_1_1$wset_1__SEL_1 ||
	      MUX_flitToSink_1_1_1$wset_1__SEL_3) ?
	       ifcs_0_1_innerReq$D_OUT :
	       ifcs_1_1_innerReq$D_OUT ;
  assign ssNoSynth_1_r_dwReady$whas =
	     WILL_FIRE_RL_ifcs_1_1_followFlits_1 ||
	     WILL_FIRE_RL_ifcs_1_1_firstFlit_1 ;
  assign ssNoSynth_2_aw_buffer_enqw$wget = split_2_doPut$wget[244:147] ;
  assign ssNoSynth_2_w_buffer_enqw$wget = split_2_doPut$wget[146:0] ;
  assign ssNoSynth_2_w_buffer_enqw$whas =
	     WILL_FIRE_RL_split_2_putOther && split_2_doPut$wget[245] ||
	     WILL_FIRE_RL_split_2_putFirst && !split_2_doPut$wget[245] ;
  assign ssNoSynth_2_b_dwReady$whas =
	     WILL_FIRE_RL_ifcs_2_followFlits ||
	     WILL_FIRE_RL_ifcs_2_firstFlit ;
  assign ssNoSynth_2_ar_buffer_enqw$wget =
	     (MUX_flitToSink_1_2$wset_1__SEL_1 ||
	      MUX_flitToSink_1_2$wset_1__SEL_3) ?
	       ifcs_0_1_innerReq$D_OUT :
	       ifcs_1_1_innerReq$D_OUT ;
  assign ssNoSynth_2_r_dwReady$whas =
	     WILL_FIRE_RL_ifcs_2_1_followFlits ||
	     WILL_FIRE_RL_ifcs_2_1_firstFlit ;
  assign split_0_doPut$wget =
	     (MUX_flitToSink_0$wset_1__SEL_1 ||
	      MUX_flitToSink_0$wset_1__SEL_3) ?
	       ifcs_0_innerReq$D_OUT :
	       ifcs_1_innerReq$D_OUT ;
  assign split_1_doPut$wget =
	     (MUX_flitToSink_1$wset_1__SEL_1 ||
	      MUX_flitToSink_1$wset_1__SEL_3) ?
	       ifcs_0_innerReq$D_OUT :
	       ifcs_1_innerReq$D_OUT ;
  assign split_2_doPut$wget =
	     (MUX_flitToSink_2$wset_1__SEL_1 ||
	      MUX_flitToSink_2$wset_1__SEL_3) ?
	       ifcs_0_innerReq$D_OUT :
	       ifcs_1_innerReq$D_OUT ;
  assign reqWires_0$wget =
	     (!ifcs_0_innerRoute$D_OUT[0] ||
	      !IF_split_0_flitLeft_129_EQ_0_130_THEN_ssNoSynt_ETC___d1457) ?
	       IF_NOT_ifcs_0_innerRoute_first__465_BIT_1_474__ETC___d1487 :
	       ifcs_0_innerRoute$D_OUT[0] ;
  assign reqWires_1$wget =
	     (!ifcs_1_innerRoute$D_OUT[0] ||
	      !IF_split_0_flitLeft_129_EQ_0_130_THEN_ssNoSynt_ETC___d1457) ?
	       IF_NOT_ifcs_1_innerRoute_first__494_BIT_1_498__ETC___d1503 :
	       ifcs_1_innerRoute$D_OUT[0] ;
  assign flitToSink_0$whas =
	     WILL_FIRE_RL_burst && ifcs_0_innerRoute$D_OUT[0] ||
	     WILL_FIRE_RL_burst_1 && ifcs_1_innerRoute$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     ifcs_0_innerRoute$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	     ifcs_1_innerRoute$D_OUT[0] ;
  assign flitToSink_1$whas =
	     WILL_FIRE_RL_burst && ifcs_0_innerRoute$D_OUT[1] ||
	     WILL_FIRE_RL_burst_1 && ifcs_1_innerRoute$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     ifcs_0_innerRoute$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	     ifcs_1_innerRoute$D_OUT[1] ;
  assign flitToSink_2$whas =
	     WILL_FIRE_RL_burst && ifcs_0_innerRoute$D_OUT[2] ||
	     WILL_FIRE_RL_burst_1 && ifcs_1_innerRoute$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     ifcs_0_innerRoute$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	     ifcs_1_innerRoute$D_OUT[2] ;
  assign reqWires_1_0$wget =
	     (!ifcs_0_routeBack$D_OUT[0] ||
	      !(!CAN_FIRE_RL_ifcs_0_drainNoRouteResponse)) ?
	       ifcs_0_routeBack$D_OUT[1] &&
	       !CAN_FIRE_RL_ifcs_1_drainNoRouteResponse :
	       ifcs_0_routeBack$D_OUT[0] ;
  assign reqWires_1_1$wget =
	     (!ifcs_1_routeBack$D_OUT[0] ||
	      !(!CAN_FIRE_RL_ifcs_0_drainNoRouteResponse)) ?
	       ifcs_1_routeBack$D_OUT[1] &&
	       !CAN_FIRE_RL_ifcs_1_drainNoRouteResponse :
	       ifcs_1_routeBack$D_OUT[0] ;
  assign reqWires_1_2$wget =
	     (!ifcs_2_routeBack$D_OUT[0] ||
	      !(!CAN_FIRE_RL_ifcs_0_drainNoRouteResponse)) ?
	       ifcs_2_routeBack$D_OUT[1] &&
	       !CAN_FIRE_RL_ifcs_1_drainNoRouteResponse :
	       ifcs_2_routeBack$D_OUT[0] ;
  assign flitToSink_1_0$whas =
	     WILL_FIRE_RL_burst_2 && ifcs_0_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_burst_3 && ifcs_1_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_burst_4 && ifcs_2_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	     ifcs_0_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	     ifcs_1_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	     ifcs_2_routeBack$D_OUT[0] ;
  assign flitToSink_1_1$whas =
	     WILL_FIRE_RL_burst_2 && ifcs_0_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_burst_3 && ifcs_1_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_burst_4 && ifcs_2_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	     ifcs_0_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	     ifcs_1_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	     ifcs_2_routeBack$D_OUT[1] ;
  assign reqWires_1_0_1$wget =
	     (!ifcs_0_1_innerRoute$D_OUT[0] ||
	      !ssNoSynth_0_ar_buffer_ff$FULL_N) ?
	       IF_NOT_ifcs_0_1_innerRoute_first__102_BIT_1_11_ETC___d2124 :
	       ifcs_0_1_innerRoute$D_OUT[0] ;
  assign reqWires_1_1_1$wget =
	     (!ifcs_1_1_innerRoute$D_OUT[0] ||
	      !ssNoSynth_0_ar_buffer_ff$FULL_N) ?
	       IF_NOT_ifcs_1_1_innerRoute_first__131_BIT_1_13_ETC___d2140 :
	       ifcs_1_1_innerRoute$D_OUT[0] ;
  assign flitToSink_1_0_1$whas =
	     WILL_FIRE_RL_burst_5 && ifcs_0_1_innerRoute$D_OUT[0] ||
	     WILL_FIRE_RL_burst_6 && ifcs_1_1_innerRoute$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	     ifcs_0_1_innerRoute$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	     ifcs_1_1_innerRoute$D_OUT[0] ;
  assign flitToSink_1_1_1$whas =
	     WILL_FIRE_RL_burst_5 && ifcs_0_1_innerRoute$D_OUT[1] ||
	     WILL_FIRE_RL_burst_6 && ifcs_1_1_innerRoute$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	     ifcs_0_1_innerRoute$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	     ifcs_1_1_innerRoute$D_OUT[1] ;
  assign flitToSink_1_2$whas =
	     WILL_FIRE_RL_burst_5 && ifcs_0_1_innerRoute$D_OUT[2] ||
	     WILL_FIRE_RL_burst_6 && ifcs_1_1_innerRoute$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	     ifcs_0_1_innerRoute$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	     ifcs_1_1_innerRoute$D_OUT[2] ;
  assign reqWires_1_1_0$wget =
	     (!ifcs_0_1_routeBack$D_OUT[0] ||
	      !(!CAN_FIRE_RL_ifcs_0_1_drainNoRouteResponse)) ?
	       ifcs_0_1_routeBack$D_OUT[1] &&
	       !CAN_FIRE_RL_ifcs_1_1_drainNoRouteResponse :
	       ifcs_0_1_routeBack$D_OUT[0] ;
  assign reqWires_1_1_1_1$wget =
	     (!ifcs_1_1_routeBack$D_OUT[0] ||
	      !(!CAN_FIRE_RL_ifcs_0_1_drainNoRouteResponse)) ?
	       ifcs_1_1_routeBack$D_OUT[1] &&
	       !CAN_FIRE_RL_ifcs_1_1_drainNoRouteResponse :
	       ifcs_1_1_routeBack$D_OUT[0] ;
  assign reqWires_1_1_2$wget =
	     (!ifcs_2_1_routeBack$D_OUT[0] ||
	      !(!CAN_FIRE_RL_ifcs_0_1_drainNoRouteResponse)) ?
	       ifcs_2_1_routeBack$D_OUT[1] &&
	       !CAN_FIRE_RL_ifcs_1_1_drainNoRouteResponse :
	       ifcs_2_1_routeBack$D_OUT[0] ;
  assign flitToSink_1_1_0$whas =
	     WILL_FIRE_RL_burst_7 && ifcs_0_1_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_burst_8 && ifcs_1_1_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_burst_9 && ifcs_2_1_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	     ifcs_0_1_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	     ifcs_1_1_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	     ifcs_2_1_routeBack$D_OUT[0] ;
  assign flitToSink_1_1_1_1$whas =
	     WILL_FIRE_RL_burst_7 && ifcs_0_1_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_burst_8 && ifcs_1_1_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_burst_9 && ifcs_2_1_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	     ifcs_0_1_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	     ifcs_1_1_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	     ifcs_2_1_routeBack$D_OUT[1] ;
  assign cpu_imem_ug_u_aw_dropWire$whas =
	     cpu$imem_master_awvalid && cpu_imem_master_awready ;
  assign cpu_imem_ug_u_w_dropWire$whas =
	     cpu$imem_master_wvalid && cpu_imem_master_wready ;
  assign cpu_imem_ug_u_ar_dropWire$whas =
	     cpu$imem_master_arvalid && cpu_imem_master_arready ;
  assign merged_0_doDrop$whas =
	     WILL_FIRE_RL_ifcs_0_nonRoutableGenRsp ||
	     WILL_FIRE_RL_ifcs_0_drainFlits ||
	     WILL_FIRE_RL_ifcs_0_followFlits ||
	     WILL_FIRE_RL_ifcs_0_firstFlit ;
  assign merged_1_doDrop$whas =
	     WILL_FIRE_RL_ifcs_1_nonRoutableGenRsp ||
	     WILL_FIRE_RL_ifcs_1_drainFlits ||
	     WILL_FIRE_RL_ifcs_1_followFlits ||
	     WILL_FIRE_RL_ifcs_1_firstFlit ;
  assign sourceSelect_1_0$whas =
	     WILL_FIRE_RL_arbitrate_1 &&
	     IF_SEXT_arbiter_1_lastSelect_705_706_BIT_0_707_ETC___d1749 ;
  assign sourceSelect_1_1$whas =
	     WILL_FIRE_RL_arbitrate_1 &&
	     IF_SEXT_arbiter_1_lastSelect_705_706_BIT_0_707_ETC___d1755 ;
  assign sourceSelect_1_2$whas =
	     WILL_FIRE_RL_arbitrate_1 &&
	     IF_SEXT_arbiter_1_lastSelect_705_706_BIT_0_707_ETC___d1761 ;
  assign sourceSelect_1_0_1$whas =
	     WILL_FIRE_RL_arbitrate_2 &&
	     IF_SEXT_arbiter_1_lastSelect_2_152_153_BIT_0_1_ETC___d2176 ;
  assign sourceSelect_1_1_1$whas =
	     WILL_FIRE_RL_arbitrate_2 &&
	     IF_SEXT_arbiter_1_lastSelect_2_152_153_BIT_0_1_ETC___d2180 ;
  assign ifcs_0_noRoute_inner_currentReq$EN_port0__write =
	     WILL_FIRE_RL_ifcs_0_nonRoutableFlit &&
	     merged_0_flitLeft == 8'd0 ;
  assign ifcs_0_noRoute_inner_currentReq$port0__write_1 =
	     { cpu$dmem_master_awid,
	       cpu$dmem_master_awaddr,
	       cpu$dmem_master_awlen,
	       cpu$dmem_master_awsize,
	       cpu$dmem_master_awburst,
	       cpu$dmem_master_awlock,
	       cpu$dmem_master_awcache,
	       cpu$dmem_master_awprot,
	       cpu$dmem_master_awqos,
	       cpu$dmem_master_awregion } ;
  assign ifcs_0_noRoute_inner_currentReq$port1__read =
	     ifcs_0_noRoute_inner_currentReq$EN_port0__write ?
	       ifcs_0_noRoute_inner_currentReq$port0__write_1 :
	       ifcs_0_noRoute_inner_currentReq ;
  assign ifcs_0_noRoute_inner_pendingReq$EN_port0__write =
	     WILL_FIRE_RL_ifcs_0_nonRoutableFlit &&
	     merged_0_flitLeft == 8'd0 ;
  assign ifcs_0_noRoute_inner_pendingReq$port1__read =
	     ifcs_0_noRoute_inner_pendingReq$EN_port0__write ||
	     ifcs_0_noRoute_inner_pendingReq ;
  assign ifcs_0_noRoute_inner_pendingReq$port2__read =
	     !CAN_FIRE_RL_ifcs_0_nonRoutableGenRsp &&
	     ifcs_0_noRoute_inner_pendingReq$port1__read ;
  assign ifcs_1_noRoute_inner_currentReq$EN_port0__write =
	     WILL_FIRE_RL_ifcs_1_nonRoutableFlit &&
	     merged_1_flitLeft == 8'd0 ;
  assign ifcs_1_noRoute_inner_currentReq$port1__read =
	     ifcs_1_noRoute_inner_currentReq$EN_port0__write ?
	       dm_master_nonsynth_awFF$D_OUT :
	       ifcs_1_noRoute_inner_currentReq ;
  assign ifcs_1_noRoute_inner_pendingReq$EN_port0__write =
	     WILL_FIRE_RL_ifcs_1_nonRoutableFlit &&
	     merged_1_flitLeft == 8'd0 ;
  assign ifcs_1_noRoute_inner_pendingReq$port1__read =
	     ifcs_1_noRoute_inner_pendingReq$EN_port0__write ||
	     ifcs_1_noRoute_inner_pendingReq ;
  assign ifcs_1_noRoute_inner_pendingReq$port2__read =
	     !CAN_FIRE_RL_ifcs_1_nonRoutableGenRsp &&
	     ifcs_1_noRoute_inner_pendingReq$port1__read ;
  assign ifcs_0_1_noRoute_currentReq$port0__write_1 =
	     { cpu$dmem_master_arid,
	       cpu$dmem_master_araddr,
	       cpu$dmem_master_arlen,
	       cpu$dmem_master_arsize,
	       cpu$dmem_master_arburst,
	       cpu$dmem_master_arlock,
	       cpu$dmem_master_arcache,
	       cpu$dmem_master_arprot,
	       cpu$dmem_master_arqos,
	       cpu$dmem_master_arregion } ;
  assign ifcs_0_1_noRoute_currentReq$port1__read =
	     CAN_FIRE_RL_ifcs_0_1_nonRoutableFlit ?
	       ifcs_0_1_noRoute_currentReq$port0__write_1 :
	       ifcs_0_1_noRoute_currentReq ;
  assign ifcs_0_1_noRoute_flitCount$port0__write_1 =
	     { 1'd0, cpu$dmem_master_arlen } + 9'd1 ;
  assign ifcs_0_1_noRoute_flitCount$port1__write_1 =
	     x_port1__read__h70706 - 9'd1 ;
  assign ifcs_0_1_noRoute_flitCount$port2__read =
	     CAN_FIRE_RL_ifcs_0_1_nonRoutableGenRsp ?
	       ifcs_0_1_noRoute_flitCount$port1__write_1 :
	       x_port1__read__h70706 ;
  assign ifcs_1_1_noRoute_currentReq$port1__read =
	     CAN_FIRE_RL_ifcs_1_1_nonRoutableFlit ?
	       dm_master_nonsynth_bufferShim_arff$D_OUT :
	       ifcs_1_1_noRoute_currentReq ;
  assign ifcs_1_1_noRoute_flitCount$port0__write_1 =
	     { 1'd0, dm_master_nonsynth_bufferShim_arff$D_OUT[28:21] } +
	     9'd1 ;
  assign ifcs_1_1_noRoute_flitCount$port1__write_1 =
	     x_port1__read__h73154 - 9'd1 ;
  assign ifcs_1_1_noRoute_flitCount$port2__read =
	     CAN_FIRE_RL_ifcs_1_1_nonRoutableGenRsp ?
	       ifcs_1_1_noRoute_flitCount$port1__write_1 :
	       x_port1__read__h73154 ;

  // register activeSource_0
  assign activeSource_0$D_IN =
	     MUX_activeSource_0$write_1__SEL_1 ?
	       MUX_activeSource_0$write_1__VAL_1 :
	       MUX_activeSource_0$write_1__VAL_1 ;
  assign activeSource_0$EN =
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     !ifcs_0_innerReq$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	     !ifcs_1_innerReq$D_OUT[2] ;

  // register activeSource_1
  assign activeSource_1$D_IN =
	     MUX_activeSource_0$write_1__SEL_1 ?
	       MUX_activeSource_1$write_1__VAL_1 :
	       MUX_activeSource_1$write_1__VAL_1 ;
  assign activeSource_1$EN =
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     !ifcs_0_innerReq$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	     !ifcs_1_innerReq$D_OUT[2] ;

  // register activeSource_1_0
  assign activeSource_1_0$D_IN = 1'b0 ;
  assign activeSource_1_0$EN = 1'b0 ;

  // register activeSource_1_0_1
  assign activeSource_1_0_1$D_IN = 1'b0 ;
  assign activeSource_1_0_1$EN = 1'b0 ;

  // register activeSource_1_1
  assign activeSource_1_1$D_IN = 1'b0 ;
  assign activeSource_1_1$EN = 1'b0 ;

  // register activeSource_1_1_0
  always@(MUX_activeSource_1_1_0$write_1__SEL_1 or
	  MUX_activeSource_1_1_0$write_1__VAL_1 or
	  MUX_activeSource_1_1_0$write_1__SEL_2 or
	  MUX_activeSource_1_1_0$write_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_activeSource_1_1_0$write_1__SEL_1:
	  activeSource_1_1_0$D_IN = MUX_activeSource_1_1_0$write_1__VAL_1;
      MUX_activeSource_1_1_0$write_1__SEL_2:
	  activeSource_1_1_0$D_IN = MUX_activeSource_1_1_0$write_1__VAL_1;
      MUX_activeSource_1_1_0$write_1__SEL_3:
	  activeSource_1_1_0$D_IN = MUX_activeSource_1_1_0$write_1__VAL_1;
      default: activeSource_1_1_0$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign activeSource_1_1_0$EN =
	     WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	     !ifcs_0_1_rspBack$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	     !ifcs_1_1_rspBack$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	     !ifcs_2_1_rspBack$D_OUT[2] ;

  // register activeSource_1_1_1
  assign activeSource_1_1_1$D_IN = 1'b0 ;
  assign activeSource_1_1_1$EN = 1'b0 ;

  // register activeSource_1_1_1_1
  always@(MUX_activeSource_1_1_0$write_1__SEL_1 or
	  MUX_activeSource_1_1_1_1$write_1__VAL_1 or
	  MUX_activeSource_1_1_0$write_1__SEL_2 or
	  MUX_activeSource_1_1_0$write_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_activeSource_1_1_0$write_1__SEL_1:
	  activeSource_1_1_1_1$D_IN = MUX_activeSource_1_1_1_1$write_1__VAL_1;
      MUX_activeSource_1_1_0$write_1__SEL_2:
	  activeSource_1_1_1_1$D_IN = MUX_activeSource_1_1_1_1$write_1__VAL_1;
      MUX_activeSource_1_1_0$write_1__SEL_3:
	  activeSource_1_1_1_1$D_IN = MUX_activeSource_1_1_1_1$write_1__VAL_1;
      default: activeSource_1_1_1_1$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign activeSource_1_1_1_1$EN =
	     WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	     !ifcs_0_1_rspBack$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	     !ifcs_1_1_rspBack$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	     !ifcs_2_1_rspBack$D_OUT[2] ;

  // register activeSource_1_1_2
  always@(MUX_activeSource_1_1_0$write_1__SEL_1 or
	  MUX_activeSource_1_1_2$write_1__VAL_1 or
	  MUX_activeSource_1_1_0$write_1__SEL_2 or
	  MUX_activeSource_1_1_0$write_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_activeSource_1_1_0$write_1__SEL_1:
	  activeSource_1_1_2$D_IN = MUX_activeSource_1_1_2$write_1__VAL_1;
      MUX_activeSource_1_1_0$write_1__SEL_2:
	  activeSource_1_1_2$D_IN = MUX_activeSource_1_1_2$write_1__VAL_1;
      MUX_activeSource_1_1_0$write_1__SEL_3:
	  activeSource_1_1_2$D_IN = MUX_activeSource_1_1_2$write_1__VAL_1;
      default: activeSource_1_1_2$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign activeSource_1_1_2$EN =
	     WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	     !ifcs_0_1_rspBack$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	     !ifcs_1_1_rspBack$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	     !ifcs_2_1_rspBack$D_OUT[2] ;

  // register activeSource_1_2
  assign activeSource_1_2$D_IN = 1'b0 ;
  assign activeSource_1_2$EN = 1'b0 ;

  // register arbiter_1_1_firstHot
  assign arbiter_1_1_firstHot$D_IN =
	     IF_SEXT_arbiter_1_1_lastSelect_332_333_BIT_0_3_ETC___d2388 ;
  assign arbiter_1_1_firstHot$EN = CAN_FIRE_RL_arbitrate_3 ;

  // register arbiter_1_1_lastSelect
  assign arbiter_1_1_lastSelect$D_IN =
	     IF_SEXT_arbiter_1_1_lastSelect_332_333_BIT_0_3_ETC___d2376 ;
  assign arbiter_1_1_lastSelect$EN = CAN_FIRE_RL_arbitrate_3 ;

  // register arbiter_1_1_lastSelect_1
  assign arbiter_1_1_lastSelect_1$D_IN =
	     IF_SEXT_arbiter_1_1_lastSelect_332_333_BIT_0_3_ETC___d2382 ;
  assign arbiter_1_1_lastSelect_1$EN = CAN_FIRE_RL_arbitrate_3 ;

  // register arbiter_1_firstHot
  assign arbiter_1_firstHot$D_IN =
	     IF_SEXT_arbiter_1_lastSelect_705_706_BIT_0_707_ETC___d1761 ;
  assign arbiter_1_firstHot$EN = CAN_FIRE_RL_arbitrate_1 ;

  // register arbiter_1_firstHot_1
  assign arbiter_1_firstHot_1$D_IN =
	     IF_SEXT_arbiter_1_lastSelect_2_152_153_BIT_0_1_ETC___d2180 ;
  assign arbiter_1_firstHot_1$EN = CAN_FIRE_RL_arbitrate_2 ;

  // register arbiter_1_lastSelect
  assign arbiter_1_lastSelect$D_IN =
	     IF_SEXT_arbiter_1_lastSelect_705_706_BIT_0_707_ETC___d1749 ;
  assign arbiter_1_lastSelect$EN = CAN_FIRE_RL_arbitrate_1 ;

  // register arbiter_1_lastSelect_1
  assign arbiter_1_lastSelect_1$D_IN =
	     IF_SEXT_arbiter_1_lastSelect_705_706_BIT_0_707_ETC___d1755 ;
  assign arbiter_1_lastSelect_1$EN = CAN_FIRE_RL_arbitrate_1 ;

  // register arbiter_1_lastSelect_2
  assign arbiter_1_lastSelect_2$D_IN =
	     IF_SEXT_arbiter_1_lastSelect_2_152_153_BIT_0_1_ETC___d2176 ;
  assign arbiter_1_lastSelect_2$EN = CAN_FIRE_RL_arbitrate_2 ;

  // register arbiter_firstHot
  assign arbiter_firstHot$D_IN =
	     IF_SEXT_arbiter_lastSelect_515_516_BIT_0_517_A_ETC___d1543 ;
  assign arbiter_firstHot$EN = CAN_FIRE_RL_arbitrate ;

  // register arbiter_lastSelect
  assign arbiter_lastSelect$D_IN =
	     IF_SEXT_arbiter_lastSelect_515_516_BIT_0_517_A_ETC___d1539 ;
  assign arbiter_lastSelect$EN = CAN_FIRE_RL_arbitrate ;

  // register dm_master_nonsynth_currentRID
  assign dm_master_nonsynth_currentRID$D_IN =
	     dm_master_nonsynth_bufferShim_arff$D_OUT[96:93] ;
  assign dm_master_nonsynth_currentRID$EN =
	     WILL_FIRE_RL_msNoSynth_1_ar_forwardReady &&
	     dm_master_nonsynth_arCanPeek$wget &&
	     msNoSynth_1_ar_dwReady$whas ;

  // register dm_master_nonsynth_currentWID
  assign dm_master_nonsynth_currentWID$D_IN =
	     dm_master_nonsynth_bufferShim_awff$D_OUT[96:93] ;
  assign dm_master_nonsynth_currentWID$EN =
	     CAN_FIRE_RL_dm_master_nonsynth_consumeAW ;

  // register ifcs_0_1_noRoute_currentReq
  assign ifcs_0_1_noRoute_currentReq$D_IN =
	     ifcs_0_1_noRoute_currentReq$port1__read ;
  assign ifcs_0_1_noRoute_currentReq$EN = 1'b1 ;

  // register ifcs_0_1_noRoute_flitCount
  assign ifcs_0_1_noRoute_flitCount$D_IN =
	     ifcs_0_1_noRoute_flitCount$port2__read ;
  assign ifcs_0_1_noRoute_flitCount$EN = 1'b1 ;

  // register ifcs_0_1_state
  assign ifcs_0_1_state$D_IN = 2'd0 ;
  assign ifcs_0_1_state$EN =
	     WILL_FIRE_RL_ifcs_0_1_drainFlits ||
	     WILL_FIRE_RL_ifcs_0_1_followFlits ;

  // register ifcs_0_1_state_1
  assign ifcs_0_1_state_1$D_IN = !MUX_ifcs_0_1_state_1$write_1__SEL_1 ;
  assign ifcs_0_1_state_1$EN =
	     WILL_FIRE_RL_ifcs_0_1_followFlits_1 &&
	     tagController_tmp_shimSlave_rff$D_OUT[2] ||
	     WILL_FIRE_RL_ifcs_0_1_firstFlit_1 &&
	     !tagController_tmp_shimSlave_rff$D_OUT[2] ;

  // register ifcs_0_noRoute_inner_currentReq
  assign ifcs_0_noRoute_inner_currentReq$D_IN =
	     ifcs_0_noRoute_inner_currentReq$port1__read ;
  assign ifcs_0_noRoute_inner_currentReq$EN = 1'b1 ;

  // register ifcs_0_noRoute_inner_pendingReq
  assign ifcs_0_noRoute_inner_pendingReq$D_IN =
	     ifcs_0_noRoute_inner_pendingReq$port2__read ;
  assign ifcs_0_noRoute_inner_pendingReq$EN = 1'b1 ;

  // register ifcs_0_state
  always@(MUX_ifcs_0_state$write_1__SEL_1 or
	  MUX_ifcs_0_state$write_1__SEL_2 or MUX_ifcs_0_state$write_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ifcs_0_state$write_1__SEL_1: ifcs_0_state$D_IN = 2'd0;
      MUX_ifcs_0_state$write_1__SEL_2: ifcs_0_state$D_IN = 2'd1;
      MUX_ifcs_0_state$write_1__SEL_3: ifcs_0_state$D_IN = 2'd2;
      default: ifcs_0_state$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign ifcs_0_state$EN =
	     (WILL_FIRE_RL_ifcs_0_drainFlits ||
	      WILL_FIRE_RL_ifcs_0_followFlits) &&
	     cpu$dmem_master_wlast ||
	     WILL_FIRE_RL_ifcs_0_firstFlit && !cpu$dmem_master_wlast ||
	     WILL_FIRE_RL_ifcs_0_nonRoutableGenRsp && !cpu$dmem_master_wlast ;

  // register ifcs_0_state_1
  assign ifcs_0_state_1$D_IN = 1'd0 ;
  assign ifcs_0_state_1$EN = CAN_FIRE_RL_ifcs_0_followFlits_1 ;

  // register ifcs_1_1_noRoute_currentReq
  assign ifcs_1_1_noRoute_currentReq$D_IN =
	     ifcs_1_1_noRoute_currentReq$port1__read ;
  assign ifcs_1_1_noRoute_currentReq$EN = 1'b1 ;

  // register ifcs_1_1_noRoute_flitCount
  assign ifcs_1_1_noRoute_flitCount$D_IN =
	     ifcs_1_1_noRoute_flitCount$port2__read ;
  assign ifcs_1_1_noRoute_flitCount$EN = 1'b1 ;

  // register ifcs_1_1_state
  assign ifcs_1_1_state$D_IN = 2'd0 ;
  assign ifcs_1_1_state$EN =
	     WILL_FIRE_RL_ifcs_1_1_drainFlits ||
	     WILL_FIRE_RL_ifcs_1_1_followFlits ;

  // register ifcs_1_1_state_1
  assign ifcs_1_1_state_1$D_IN = !MUX_ifcs_1_1_state_1$write_1__SEL_1 ;
  assign ifcs_1_1_state_1$EN =
	     WILL_FIRE_RL_ifcs_1_1_followFlits_1 &&
	     near_mem_io$axi4_slave_rlast ||
	     WILL_FIRE_RL_ifcs_1_1_firstFlit_1 &&
	     !near_mem_io$axi4_slave_rlast ;

  // register ifcs_1_noRoute_inner_currentReq
  assign ifcs_1_noRoute_inner_currentReq$D_IN =
	     ifcs_1_noRoute_inner_currentReq$port1__read ;
  assign ifcs_1_noRoute_inner_currentReq$EN = 1'b1 ;

  // register ifcs_1_noRoute_inner_pendingReq
  assign ifcs_1_noRoute_inner_pendingReq$D_IN =
	     ifcs_1_noRoute_inner_pendingReq$port2__read ;
  assign ifcs_1_noRoute_inner_pendingReq$EN = 1'b1 ;

  // register ifcs_1_state
  always@(MUX_ifcs_1_state$write_1__SEL_1 or
	  MUX_ifcs_1_state$write_1__SEL_2 or MUX_ifcs_1_state$write_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ifcs_1_state$write_1__SEL_1: ifcs_1_state$D_IN = 2'd0;
      MUX_ifcs_1_state$write_1__SEL_2: ifcs_1_state$D_IN = 2'd1;
      MUX_ifcs_1_state$write_1__SEL_3: ifcs_1_state$D_IN = 2'd2;
      default: ifcs_1_state$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign ifcs_1_state$EN =
	     (WILL_FIRE_RL_ifcs_1_drainFlits ||
	      WILL_FIRE_RL_ifcs_1_followFlits) &&
	     dm_master_nonsynth_bufferShim_wff$D_OUT[2] ||
	     WILL_FIRE_RL_ifcs_1_firstFlit &&
	     !dm_master_nonsynth_bufferShim_wff$D_OUT[2] ||
	     WILL_FIRE_RL_ifcs_1_nonRoutableGenRsp &&
	     !dm_master_nonsynth_bufferShim_wff$D_OUT[2] ;

  // register ifcs_1_state_1
  assign ifcs_1_state_1$D_IN = 1'd0 ;
  assign ifcs_1_state_1$EN = CAN_FIRE_RL_ifcs_1_followFlits_1 ;

  // register ifcs_2_1_state
  assign ifcs_2_1_state$D_IN = !MUX_ifcs_2_1_state$write_1__SEL_1 ;
  assign ifcs_2_1_state$EN =
	     WILL_FIRE_RL_ifcs_2_1_followFlits && plic$axi4_slave_rlast ||
	     WILL_FIRE_RL_ifcs_2_1_firstFlit && !plic$axi4_slave_rlast ;

  // register ifcs_2_state
  assign ifcs_2_state$D_IN = 1'd0 ;
  assign ifcs_2_state$EN = CAN_FIRE_RL_ifcs_2_followFlits ;

  // register merged_0_flitLeft
  assign merged_0_flitLeft$D_IN =
	     WILL_FIRE_RL_merged_0_genOther ?
	       MUX_merged_0_flitLeft$write_1__VAL_1 :
	       cpu$dmem_master_awlen ;
  assign merged_0_flitLeft$EN = msNoSynth_0_w_dwReady$whas ;

  // register merged_1_flitLeft
  assign merged_1_flitLeft$D_IN =
	     WILL_FIRE_RL_merged_1_genFirst ?
	       dm_master_nonsynth_awFF$D_OUT[28:21] :
	       MUX_merged_1_flitLeft$write_1__VAL_2 ;
  assign merged_1_flitLeft$EN =
	     WILL_FIRE_RL_merged_1_genFirst ||
	     WILL_FIRE_RL_merged_1_genOther ;

  // register split_0_flitLeft
  assign split_0_flitLeft$D_IN =
	     MUX_split_0_flitLeft$write_1__SEL_1 ?
	       MUX_split_0_flitLeft$write_1__VAL_1 :
	       split_0_doPut$wget[175:168] ;
  assign split_0_flitLeft$EN = ssNoSynth_0_w_buffer_enqw$whas ;

  // register split_1_flitLeft
  assign split_1_flitLeft$D_IN =
	     MUX_split_1_flitLeft$write_1__SEL_1 ?
	       MUX_split_1_flitLeft$write_1__VAL_1 :
	       split_1_doPut$wget[175:168] ;
  assign split_1_flitLeft$EN = ssNoSynth_1_w_buffer_enqw$whas ;

  // register split_2_flitLeft
  assign split_2_flitLeft$D_IN =
	     MUX_split_2_flitLeft$write_1__SEL_1 ?
	       MUX_split_2_flitLeft$write_1__VAL_1 :
	       split_2_doPut$wget[175:168] ;
  assign split_2_flitLeft$EN = ssNoSynth_2_w_buffer_enqw$whas ;

  // register state
  assign state$D_IN = !MUX_state$write_1__SEL_1 && !MUX_state$write_1__SEL_2 ;
  assign state$EN =
	     WILL_FIRE_RL_burst && ifcs_0_innerReq$D_OUT[2] ||
	     WILL_FIRE_RL_burst_1 && ifcs_1_innerReq$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     !ifcs_0_innerReq$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	     !ifcs_1_innerReq$D_OUT[2] ;

  // register state_1
  assign state_1$D_IN = 1'd0 ;
  assign state_1$EN =
	     WILL_FIRE_RL_burst_4 || WILL_FIRE_RL_burst_3 ||
	     WILL_FIRE_RL_burst_2 ;

  // register state_1_1
  assign state_1_1$D_IN = 1'd0 ;
  assign state_1_1$EN = WILL_FIRE_RL_burst_6 || WILL_FIRE_RL_burst_5 ;

  // register state_1_1_1
  assign state_1_1_1$D_IN =
	     !MUX_state_1_1_1$write_1__SEL_1 &&
	     !MUX_state_1_1_1$write_1__SEL_2 &&
	     !MUX_state_1_1_1$write_1__SEL_3 ;
  assign state_1_1_1$EN =
	     WILL_FIRE_RL_burst_7 && ifcs_0_1_rspBack$D_OUT[2] ||
	     WILL_FIRE_RL_burst_8 && ifcs_1_1_rspBack$D_OUT[2] ||
	     WILL_FIRE_RL_burst_9 && ifcs_2_1_rspBack$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	     !ifcs_0_1_rspBack$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	     !ifcs_1_1_rspBack$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	     !ifcs_2_1_rspBack$D_OUT[2] ;

  // submodule cpu
  assign cpu$dmem_master_arready = msNoSynth_0_ar_dwReady$whas ;
  assign cpu$dmem_master_awready = CAN_FIRE_RL_merged_0_genFirst ;
  assign cpu$dmem_master_bid =
	     msNoSynth_0_b_buffer_ff$EMPTY_N ?
	       msNoSynth_0_b_buffer_ff$D_OUT[5:2] :
	       msNoSynth_0_b_buffer_enqw$wget[5:2] ;
  assign cpu$dmem_master_bresp =
	     msNoSynth_0_b_buffer_ff$EMPTY_N ?
	       msNoSynth_0_b_buffer_ff$D_OUT[1:0] :
	       msNoSynth_0_b_buffer_enqw$wget[1:0] ;
  assign cpu$dmem_master_rdata =
	     msNoSynth_0_r_buffer_ff$EMPTY_N ?
	       msNoSynth_0_r_buffer_ff$D_OUT[132:5] :
	       msNoSynth_0_r_buffer_enqw$wget[132:5] ;
  assign cpu$dmem_master_rid =
	     msNoSynth_0_r_buffer_ff$EMPTY_N ?
	       msNoSynth_0_r_buffer_ff$D_OUT[136:133] :
	       msNoSynth_0_r_buffer_enqw$wget[136:133] ;
  assign cpu$dmem_master_rlast =
	     msNoSynth_0_r_buffer_ff$EMPTY_N ?
	       msNoSynth_0_r_buffer_ff$D_OUT[2] :
	       msNoSynth_0_r_buffer_enqw$wget[2] ;
  assign cpu$dmem_master_rresp =
	     msNoSynth_0_r_buffer_ff$EMPTY_N ?
	       msNoSynth_0_r_buffer_ff$D_OUT[4:3] :
	       msNoSynth_0_r_buffer_enqw$wget[4:3] ;
  assign cpu$dmem_master_ruser =
	     msNoSynth_0_r_buffer_ff$EMPTY_N ?
	       msNoSynth_0_r_buffer_ff$D_OUT[1:0] :
	       msNoSynth_0_r_buffer_enqw$wget[1:0] ;
  assign cpu$dmem_master_wready = msNoSynth_0_w_dwReady$whas ;
  assign cpu$hart0_csr_mem_server_request_put =
	     dm_csr_tap$client_request_get ;
  assign cpu$hart0_gpr_mem_server_request_put =
	     dm_gpr_tap_ifc$client_request_get ;
  assign cpu$hart0_put_other_req_put = debug_module$hart0_get_other_req_get ;
  assign cpu$hart0_server_reset_request_put =
	     WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ?
	       f_reset_reqs$D_OUT :
	       debug_module$hart0_reset_client_request_get ;
  assign cpu$hart0_server_run_halt_request_put =
	     debug_module$hart0_client_run_halt_request_get ;
  assign cpu$imem_master_arready = CAN_FIRE_RL_cpu_imem_ug_u_ar_doDrop ;
  assign cpu$imem_master_awready = CAN_FIRE_RL_cpu_imem_ug_u_aw_doDrop ;
  assign cpu$imem_master_bid =
	     cpu_imem_b_buffer_ff$EMPTY_N ?
	       cpu_imem_b_buffer_ff$D_OUT[6:2] :
	       cpu_imem_b_buffer_enqw$wget[6:2] ;
  assign cpu$imem_master_bresp =
	     cpu_imem_b_buffer_ff$EMPTY_N ?
	       cpu_imem_b_buffer_ff$D_OUT[1:0] :
	       cpu_imem_b_buffer_enqw$wget[1:0] ;
  assign cpu$imem_master_rdata =
	     cpu_imem_r_buffer_ff$EMPTY_N ?
	       cpu_imem_r_buffer_ff$D_OUT[132:5] :
	       cpu_imem_r_buffer_enqw$wget[132:5] ;
  assign cpu$imem_master_rid =
	     cpu_imem_r_buffer_ff$EMPTY_N ?
	       cpu_imem_r_buffer_ff$D_OUT[137:133] :
	       cpu_imem_r_buffer_enqw$wget[137:133] ;
  assign cpu$imem_master_rlast =
	     cpu_imem_r_buffer_ff$EMPTY_N ?
	       cpu_imem_r_buffer_ff$D_OUT[2] :
	       cpu_imem_r_buffer_enqw$wget[2] ;
  assign cpu$imem_master_rresp =
	     cpu_imem_r_buffer_ff$EMPTY_N ?
	       cpu_imem_r_buffer_ff$D_OUT[4:3] :
	       cpu_imem_r_buffer_enqw$wget[4:3] ;
  assign cpu$imem_master_ruser =
	     cpu_imem_r_buffer_ff$EMPTY_N ?
	       cpu_imem_r_buffer_ff$D_OUT[1:0] :
	       cpu_imem_r_buffer_enqw$wget[1:0] ;
  assign cpu$imem_master_wready = CAN_FIRE_RL_cpu_imem_ug_u_w_doDrop ;
  assign cpu$m_external_interrupt_req_set_not_clear = plic$v_targets_0_m_eip ;
  assign cpu$nmi_req_set_not_clear = nmi_req_set_not_clear ;
  assign cpu$s_external_interrupt_req_set_not_clear = plic$v_targets_1_m_eip ;
  assign cpu$set_verbosity_logdelay = set_verbosity_logdelay ;
  assign cpu$set_verbosity_verbosity = set_verbosity_verbosity ;
  assign cpu$software_interrupt_req_set_not_clear =
	     near_mem_io$get_sw_interrupt_req_get ;
  assign cpu$timer_interrupt_req_set_not_clear =
	     near_mem_io$get_timer_interrupt_req_get ;
  assign cpu$EN_hart0_server_reset_request_put =
	     WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ||
	     WILL_FIRE_RL_rl_cpu_hart0_reset_from_dm_start ;
  assign cpu$EN_hart0_server_reset_response_get =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_complete ;
  assign cpu$imem_master_bvalid = CAN_FIRE_RL_cpu_imem_b_forwardFlit ;
  assign cpu$imem_master_rvalid = CAN_FIRE_RL_cpu_imem_r_forwardFlit ;
  assign cpu$dmem_master_bvalid = CAN_FIRE_RL_msNoSynth_0_b_forwardFlit ;
  assign cpu$dmem_master_rvalid = CAN_FIRE_RL_msNoSynth_0_r_forwardFlit ;
  assign cpu$EN_set_verbosity = EN_set_verbosity ;
  assign cpu$EN_trace_data_out_get = WILL_FIRE_RL_merge_cpu_trace_data ;
  assign cpu$EN_hart0_server_run_halt_request_put =
	     CAN_FIRE_RL_ClientServerRequest ;
  assign cpu$EN_hart0_server_run_halt_response_get =
	     CAN_FIRE_RL_ClientServerResponse ;
  assign cpu$EN_hart0_put_other_req_put =
	     debug_module$RDY_hart0_get_other_req_get ;
  assign cpu$EN_hart0_gpr_mem_server_request_put =
	     CAN_FIRE_RL_ClientServerRequest_2 ;
  assign cpu$EN_hart0_gpr_mem_server_response_get =
	     CAN_FIRE_RL_ClientServerResponse_2 ;
  assign cpu$EN_hart0_csr_mem_server_request_put =
	     CAN_FIRE_RL_ClientServerRequest_4 ;
  assign cpu$EN_hart0_csr_mem_server_response_get =
	     CAN_FIRE_RL_ClientServerResponse_4 ;

  // submodule cpu_imem_b_buffer_ff
  assign cpu_imem_b_buffer_ff$D_IN = cpu_imem_b_buffer_enqw$wget ;
  assign cpu_imem_b_buffer_ff$ENQ = CAN_FIRE_RL_cpu_imem_b_buffer_enqueue ;
  assign cpu_imem_b_buffer_ff$DEQ = CAN_FIRE_RL_cpu_imem_b_buffer_dequeue ;
  assign cpu_imem_b_buffer_ff$CLR = 1'b0 ;

  // submodule cpu_imem_b_buffer_firstValid
  assign cpu_imem_b_buffer_firstValid$D_IN = 1'd1 ;
  assign cpu_imem_b_buffer_firstValid$EN = CAN_FIRE_RL_cpu_imem_b_dropFlit ;

  // submodule cpu_imem_r_buffer_ff
  assign cpu_imem_r_buffer_ff$D_IN = cpu_imem_r_buffer_enqw$wget ;
  assign cpu_imem_r_buffer_ff$ENQ = CAN_FIRE_RL_cpu_imem_r_buffer_enqueue ;
  assign cpu_imem_r_buffer_ff$DEQ = CAN_FIRE_RL_cpu_imem_r_buffer_dequeue ;
  assign cpu_imem_r_buffer_ff$CLR = 1'b0 ;

  // submodule cpu_imem_r_buffer_firstValid
  assign cpu_imem_r_buffer_firstValid$D_IN = 1'd1 ;
  assign cpu_imem_r_buffer_firstValid$EN = CAN_FIRE_RL_cpu_imem_r_dropFlit ;

  // submodule debug_module
  assign debug_module$dmi_read_addr_dm_addr = dm_dmi_read_addr_dm_addr ;
  assign debug_module$dmi_write_dm_addr = dm_dmi_write_dm_addr ;
  assign debug_module$dmi_write_dm_word = dm_dmi_write_dm_word ;
  assign debug_module$hart0_client_run_halt_response_put =
	     cpu$hart0_server_run_halt_response_get ;
  assign debug_module$hart0_csr_mem_client_response_put =
	     dm_csr_tap$server_response_get ;
  assign debug_module$hart0_gpr_mem_client_response_put =
	     dm_gpr_tap_ifc$server_response_get ;
  assign debug_module$hart0_reset_client_response_put =
	     cpu$hart0_server_reset_response_get ;
  assign debug_module$master_arready = dm_mem_tap$slave_arready ;
  assign debug_module$master_awready = dm_mem_tap$slave_awready ;
  assign debug_module$master_bid = dm_mem_tap$slave_bid ;
  assign debug_module$master_bresp = dm_mem_tap$slave_bresp ;
  assign debug_module$master_rdata = dm_mem_tap$slave_rdata ;
  assign debug_module$master_rid = dm_mem_tap$slave_rid ;
  assign debug_module$master_rlast = dm_mem_tap$slave_rlast ;
  assign debug_module$master_rresp = dm_mem_tap$slave_rresp ;
  assign debug_module$master_ruser = dm_mem_tap$slave_ruser ;
  assign debug_module$master_wready = dm_mem_tap$slave_wready ;
  assign debug_module$ndm_reset_client_response_put =
	     ndm_reset_client_response_put ;
  assign debug_module$EN_dmi_read_addr = EN_dm_dmi_read_addr ;
  assign debug_module$EN_dmi_read_data = EN_dm_dmi_read_data ;
  assign debug_module$EN_dmi_write = EN_dm_dmi_write ;
  assign debug_module$EN_hart0_reset_client_request_get =
	     WILL_FIRE_RL_rl_cpu_hart0_reset_from_dm_start ;
  assign debug_module$EN_hart0_reset_client_response_put =
	     WILL_FIRE_RL_rl_cpu_hart0_reset_complete &&
	     !f_reset_requestor$D_OUT ;
  assign debug_module$EN_hart0_client_run_halt_request_get =
	     CAN_FIRE_RL_ClientServerRequest ;
  assign debug_module$EN_hart0_client_run_halt_response_put =
	     CAN_FIRE_RL_ClientServerResponse ;
  assign debug_module$EN_hart0_get_other_req_get =
	     debug_module$RDY_hart0_get_other_req_get ;
  assign debug_module$EN_hart0_gpr_mem_client_request_get =
	     CAN_FIRE_RL_ClientServerRequest_1 ;
  assign debug_module$EN_hart0_gpr_mem_client_response_put =
	     CAN_FIRE_RL_ClientServerResponse_1 ;
  assign debug_module$EN_hart0_csr_mem_client_request_get =
	     CAN_FIRE_RL_ClientServerRequest_3 ;
  assign debug_module$EN_hart0_csr_mem_client_response_put =
	     CAN_FIRE_RL_ClientServerResponse_3 ;
  assign debug_module$EN_ndm_reset_client_request_get =
	     EN_ndm_reset_client_request_get ;
  assign debug_module$EN_ndm_reset_client_response_put =
	     EN_ndm_reset_client_response_put ;
  assign debug_module$master_bvalid = dm_mem_tap$slave_bvalid ;
  assign debug_module$master_rvalid = dm_mem_tap$slave_rvalid ;

  // submodule dm_csr_tap
  assign dm_csr_tap$client_response_put =
	     cpu$hart0_csr_mem_server_response_get ;
  assign dm_csr_tap$server_request_put =
	     debug_module$hart0_csr_mem_client_request_get ;
  assign dm_csr_tap$EN_client_request_get =
	     CAN_FIRE_RL_ClientServerRequest_4 ;
  assign dm_csr_tap$EN_client_response_put =
	     CAN_FIRE_RL_ClientServerResponse_4 ;
  assign dm_csr_tap$EN_server_request_put =
	     CAN_FIRE_RL_ClientServerRequest_3 ;
  assign dm_csr_tap$EN_server_response_get =
	     CAN_FIRE_RL_ClientServerResponse_3 ;
  assign dm_csr_tap$EN_trace_data_out_get =
	     WILL_FIRE_RL_merge_dm_csr_trace_data ;

  // submodule dm_gpr_tap_ifc
  assign dm_gpr_tap_ifc$client_response_put =
	     cpu$hart0_gpr_mem_server_response_get ;
  assign dm_gpr_tap_ifc$server_request_put =
	     debug_module$hart0_gpr_mem_client_request_get ;
  assign dm_gpr_tap_ifc$EN_client_request_get =
	     CAN_FIRE_RL_ClientServerRequest_2 ;
  assign dm_gpr_tap_ifc$EN_client_response_put =
	     CAN_FIRE_RL_ClientServerResponse_2 ;
  assign dm_gpr_tap_ifc$EN_server_request_put =
	     CAN_FIRE_RL_ClientServerRequest_1 ;
  assign dm_gpr_tap_ifc$EN_server_response_get =
	     CAN_FIRE_RL_ClientServerResponse_1 ;
  assign dm_gpr_tap_ifc$EN_trace_data_out_get =
	     CAN_FIRE_RL_merge_dm_gpr_trace_data ;

  // submodule dm_master_nonsynth_awFF
  assign dm_master_nonsynth_awFF$D_IN =
	     dm_master_nonsynth_bufferShim_awff$D_OUT ;
  assign dm_master_nonsynth_awFF$ENQ =
	     CAN_FIRE_RL_dm_master_nonsynth_consumeAW ;
  assign dm_master_nonsynth_awFF$DEQ =
	     dm_master_nonsynth_awFF$EMPTY_N &&
	     CAN_FIRE_RL_merged_1_genFirst ;
  assign dm_master_nonsynth_awFF$CLR = 1'b0 ;

  // submodule dm_master_nonsynth_bufferShim_arff
  assign dm_master_nonsynth_bufferShim_arff$D_IN =
	     { dm_mem_tap$master_arid,
	       dm_mem_tap$master_araddr,
	       dm_mem_tap$master_arlen,
	       dm_mem_tap$master_arsize,
	       dm_mem_tap$master_arburst,
	       dm_mem_tap$master_arlock,
	       dm_mem_tap$master_arcache,
	       dm_mem_tap$master_arprot,
	       dm_mem_tap$master_arqos,
	       dm_mem_tap$master_arregion } ;
  assign dm_master_nonsynth_bufferShim_arff$ENQ =
	     CAN_FIRE_RL_dm_master_nonsynth_3_mkConnectionGetPut ;
  assign dm_master_nonsynth_bufferShim_arff$DEQ =
	     WILL_FIRE_RL_msNoSynth_1_ar_forwardReady &&
	     dm_master_nonsynth_arCanPeek$wget &&
	     msNoSynth_1_ar_dwReady$whas ;
  assign dm_master_nonsynth_bufferShim_arff$CLR = 1'b0 ;

  // submodule dm_master_nonsynth_bufferShim_awff
  assign dm_master_nonsynth_bufferShim_awff$D_IN =
	     { dm_mem_tap$master_awid,
	       dm_mem_tap$master_awaddr,
	       dm_mem_tap$master_awlen,
	       dm_mem_tap$master_awsize,
	       dm_mem_tap$master_awburst,
	       dm_mem_tap$master_awlock,
	       dm_mem_tap$master_awcache,
	       dm_mem_tap$master_awprot,
	       dm_mem_tap$master_awqos,
	       dm_mem_tap$master_awregion } ;
  assign dm_master_nonsynth_bufferShim_awff$ENQ =
	     CAN_FIRE_RL_dm_master_nonsynth_mkConnectionGetPut ;
  assign dm_master_nonsynth_bufferShim_awff$DEQ =
	     CAN_FIRE_RL_dm_master_nonsynth_consumeAW ;
  assign dm_master_nonsynth_bufferShim_awff$CLR = 1'b0 ;

  // submodule dm_master_nonsynth_bufferShim_bff
  assign dm_master_nonsynth_bufferShim_bff$D_IN =
	     msNoSynth_1_b_buffer_ff$EMPTY_N ?
	       msNoSynth_1_b_buffer_ff$D_OUT :
	       msNoSynth_1_b_buffer_enqw$wget ;
  assign dm_master_nonsynth_bufferShim_bff$ENQ =
	     WILL_FIRE_RL_msNoSynth_1_b_forwardFlit &&
	     dm_master_nonsynth_bufferShim_bff$FULL_N ;
  assign dm_master_nonsynth_bufferShim_bff$DEQ =
	     CAN_FIRE_RL_dm_master_nonsynth_2_mkConnectionGetPut ;
  assign dm_master_nonsynth_bufferShim_bff$CLR = 1'b0 ;

  // submodule dm_master_nonsynth_bufferShim_rff
  assign dm_master_nonsynth_bufferShim_rff$D_IN =
	     { x_rid__h24209,
	       x_rdata__h24210,
	       msNoSynth_1_r_buffer_ff$EMPTY_N ?
		 msNoSynth_1_r_buffer_ff$D_OUT[4:0] :
		 msNoSynth_1_r_buffer_enqw$wget[4:0] } ;
  assign dm_master_nonsynth_bufferShim_rff$ENQ =
	     WILL_FIRE_RL_msNoSynth_1_r_forwardFlit &&
	     dm_master_nonsynth_rCanPut$wget ;
  assign dm_master_nonsynth_bufferShim_rff$DEQ =
	     CAN_FIRE_RL_dm_master_nonsynth_4_mkConnectionGetPut ;
  assign dm_master_nonsynth_bufferShim_rff$CLR = 1'b0 ;

  // submodule dm_master_nonsynth_bufferShim_wff
  assign dm_master_nonsynth_bufferShim_wff$D_IN =
	     { dm_mem_tap$master_wdata,
	       dm_mem_tap$master_wstrb,
	       dm_mem_tap$master_wlast,
	       dm_mem_tap$master_wuser } ;
  assign dm_master_nonsynth_bufferShim_wff$ENQ =
	     CAN_FIRE_RL_dm_master_nonsynth_1_mkConnectionGetPut ;
  assign dm_master_nonsynth_bufferShim_wff$DEQ =
	     WILL_FIRE_RL_msNoSynth_1_w_forwardReady &&
	     dm_master_nonsynth_wCanPeek$wget &&
	     msNoSynth_1_w_dwReady$whas ;
  assign dm_master_nonsynth_bufferShim_wff$CLR = 1'b0 ;

  // submodule dm_master_nonsynth_takeUpperR
  assign dm_master_nonsynth_takeUpperR$D_IN =
	     dm_master_nonsynth_bufferShim_arff$D_OUT[32] ;
  assign dm_master_nonsynth_takeUpperR$ENQ =
	     WILL_FIRE_RL_msNoSynth_1_ar_forwardReady &&
	     dm_master_nonsynth_arCanPeek$wget &&
	     msNoSynth_1_ar_dwReady$whas ;
  assign dm_master_nonsynth_takeUpperR$DEQ =
	     WILL_FIRE_RL_msNoSynth_1_r_forwardFlit &&
	     dm_master_nonsynth_rCanPut$wget ;
  assign dm_master_nonsynth_takeUpperR$CLR = 1'b0 ;

  // submodule dm_master_nonsynth_takeUpperW
  assign dm_master_nonsynth_takeUpperW$D_IN =
	     dm_master_nonsynth_bufferShim_awff$D_OUT[32] ;
  assign dm_master_nonsynth_takeUpperW$ENQ =
	     CAN_FIRE_RL_dm_master_nonsynth_consumeAW ;
  assign dm_master_nonsynth_takeUpperW$DEQ =
	     WILL_FIRE_RL_msNoSynth_1_w_forwardReady &&
	     dm_master_nonsynth_wCanPeek$wget &&
	     msNoSynth_1_w_dwReady$whas ;
  assign dm_master_nonsynth_takeUpperW$CLR = 1'b0 ;

  // submodule dm_mem_tap
  assign dm_mem_tap$master_arready =
	     CAN_FIRE_RL_dm_master_nonsynth_3_mkConnectionGetPut ;
  assign dm_mem_tap$master_awready =
	     CAN_FIRE_RL_dm_master_nonsynth_mkConnectionGetPut ;
  assign dm_mem_tap$master_bid =
	     dm_mem_tap_nosynth_b_buffer_ff$EMPTY_N ?
	       dm_mem_tap_nosynth_b_buffer_ff$D_OUT[5:2] :
	       dm_master_nonsynth_bufferShim_bff$D_OUT[5:2] ;
  assign dm_mem_tap$master_bresp =
	     dm_mem_tap_nosynth_b_buffer_ff$EMPTY_N ?
	       dm_mem_tap_nosynth_b_buffer_ff$D_OUT[1:0] :
	       dm_master_nonsynth_bufferShim_bff$D_OUT[1:0] ;
  assign dm_mem_tap$master_rdata =
	     dm_mem_tap_nosynth_r_buffer_ff$EMPTY_N ?
	       dm_mem_tap_nosynth_r_buffer_ff$D_OUT[68:5] :
	       dm_master_nonsynth_bufferShim_rff$D_OUT[68:5] ;
  assign dm_mem_tap$master_rid =
	     dm_mem_tap_nosynth_r_buffer_ff$EMPTY_N ?
	       dm_mem_tap_nosynth_r_buffer_ff$D_OUT[72:69] :
	       dm_master_nonsynth_bufferShim_rff$D_OUT[72:69] ;
  assign dm_mem_tap$master_rlast =
	     dm_mem_tap_nosynth_r_buffer_ff$EMPTY_N ?
	       dm_mem_tap_nosynth_r_buffer_ff$D_OUT[2] :
	       dm_master_nonsynth_bufferShim_rff$D_OUT[2] ;
  assign dm_mem_tap$master_rresp =
	     dm_mem_tap_nosynth_r_buffer_ff$EMPTY_N ?
	       dm_mem_tap_nosynth_r_buffer_ff$D_OUT[4:3] :
	       dm_master_nonsynth_bufferShim_rff$D_OUT[4:3] ;
  assign dm_mem_tap$master_ruser =
	     dm_mem_tap_nosynth_r_buffer_ff$EMPTY_N ?
	       dm_mem_tap_nosynth_r_buffer_ff$D_OUT[1:0] :
	       dm_master_nonsynth_bufferShim_rff$D_OUT[1:0] ;
  assign dm_mem_tap$master_wready =
	     CAN_FIRE_RL_dm_master_nonsynth_1_mkConnectionGetPut ;
  assign dm_mem_tap$slave_araddr = debug_module$master_araddr ;
  assign dm_mem_tap$slave_arburst = debug_module$master_arburst ;
  assign dm_mem_tap$slave_arcache = debug_module$master_arcache ;
  assign dm_mem_tap$slave_arid = debug_module$master_arid ;
  assign dm_mem_tap$slave_arlen = debug_module$master_arlen ;
  assign dm_mem_tap$slave_arlock = debug_module$master_arlock ;
  assign dm_mem_tap$slave_arprot = debug_module$master_arprot ;
  assign dm_mem_tap$slave_arqos = debug_module$master_arqos ;
  assign dm_mem_tap$slave_arregion = debug_module$master_arregion ;
  assign dm_mem_tap$slave_arsize = debug_module$master_arsize ;
  assign dm_mem_tap$slave_awaddr = debug_module$master_awaddr ;
  assign dm_mem_tap$slave_awburst = debug_module$master_awburst ;
  assign dm_mem_tap$slave_awcache = debug_module$master_awcache ;
  assign dm_mem_tap$slave_awid = debug_module$master_awid ;
  assign dm_mem_tap$slave_awlen = debug_module$master_awlen ;
  assign dm_mem_tap$slave_awlock = debug_module$master_awlock ;
  assign dm_mem_tap$slave_awprot = debug_module$master_awprot ;
  assign dm_mem_tap$slave_awqos = debug_module$master_awqos ;
  assign dm_mem_tap$slave_awregion = debug_module$master_awregion ;
  assign dm_mem_tap$slave_awsize = debug_module$master_awsize ;
  assign dm_mem_tap$slave_bready = debug_module$master_bready ;
  assign dm_mem_tap$slave_rready = debug_module$master_rready ;
  assign dm_mem_tap$slave_wdata = debug_module$master_wdata ;
  assign dm_mem_tap$slave_wlast = debug_module$master_wlast ;
  assign dm_mem_tap$slave_wstrb = debug_module$master_wstrb ;
  assign dm_mem_tap$slave_wuser = debug_module$master_wuser ;
  assign dm_mem_tap$slave_awvalid = debug_module$master_awvalid ;
  assign dm_mem_tap$slave_wvalid = debug_module$master_wvalid ;
  assign dm_mem_tap$slave_arvalid = debug_module$master_arvalid ;
  assign dm_mem_tap$master_bvalid =
	     CAN_FIRE_RL_dm_mem_tap_nosynth_b_forwardFlit ;
  assign dm_mem_tap$master_rvalid =
	     CAN_FIRE_RL_dm_mem_tap_nosynth_r_forwardFlit ;
  assign dm_mem_tap$EN_trace_data_out_get =
	     WILL_FIRE_RL_merge_dm_mem_trace_data ;

  // submodule dm_mem_tap_nosynth_b_buffer_ff
  assign dm_mem_tap_nosynth_b_buffer_ff$D_IN =
	     dm_master_nonsynth_bufferShim_bff$D_OUT ;
  assign dm_mem_tap_nosynth_b_buffer_ff$ENQ =
	     CAN_FIRE_RL_dm_mem_tap_nosynth_b_buffer_enqueue ;
  assign dm_mem_tap_nosynth_b_buffer_ff$DEQ =
	     CAN_FIRE_RL_dm_mem_tap_nosynth_b_buffer_dequeue ;
  assign dm_mem_tap_nosynth_b_buffer_ff$CLR = 1'b0 ;

  // submodule dm_mem_tap_nosynth_b_buffer_firstValid
  assign dm_mem_tap_nosynth_b_buffer_firstValid$D_IN = 1'd1 ;
  assign dm_mem_tap_nosynth_b_buffer_firstValid$EN =
	     CAN_FIRE_RL_dm_mem_tap_nosynth_b_dropFlit ;

  // submodule dm_mem_tap_nosynth_r_buffer_ff
  assign dm_mem_tap_nosynth_r_buffer_ff$D_IN =
	     dm_master_nonsynth_bufferShim_rff$D_OUT ;
  assign dm_mem_tap_nosynth_r_buffer_ff$ENQ =
	     CAN_FIRE_RL_dm_mem_tap_nosynth_r_buffer_enqueue ;
  assign dm_mem_tap_nosynth_r_buffer_ff$DEQ =
	     CAN_FIRE_RL_dm_mem_tap_nosynth_r_buffer_dequeue ;
  assign dm_mem_tap_nosynth_r_buffer_ff$CLR = 1'b0 ;

  // submodule dm_mem_tap_nosynth_r_buffer_firstValid
  assign dm_mem_tap_nosynth_r_buffer_firstValid$D_IN = 1'd1 ;
  assign dm_mem_tap_nosynth_r_buffer_firstValid$EN =
	     CAN_FIRE_RL_dm_mem_tap_nosynth_r_dropFlit ;

  // submodule f_reset_reqs
  assign f_reset_reqs$D_IN = cpu_reset_server_request_put ;
  assign f_reset_reqs$ENQ = EN_cpu_reset_server_request_put ;
  assign f_reset_reqs$DEQ =
	     near_mem_io$RDY_server_reset_request_put &&
	     plic_RDY_server_reset_request_put__42_AND_cpu__ETC___d248 ;
  assign f_reset_reqs$CLR = 1'b0 ;

  // submodule f_reset_requestor
  assign f_reset_requestor$D_IN =
	     !WILL_FIRE_RL_rl_cpu_hart0_reset_from_dm_start ;
  assign f_reset_requestor$ENQ =
	     WILL_FIRE_RL_rl_cpu_hart0_reset_from_dm_start ||
	     WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;
  assign f_reset_requestor$DEQ = CAN_FIRE_RL_rl_cpu_hart0_reset_complete ;
  assign f_reset_requestor$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$D_IN = cpu$hart0_server_reset_response_get ;
  assign f_reset_rsps$ENQ =
	     WILL_FIRE_RL_rl_cpu_hart0_reset_complete &&
	     f_reset_requestor$D_OUT ;
  assign f_reset_rsps$DEQ = EN_cpu_reset_server_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule f_trace_data_merged
  always@(WILL_FIRE_RL_merge_cpu_trace_data or
	  cpu$trace_data_out_get or
	  WILL_FIRE_RL_merge_dm_mem_trace_data or
	  dm_mem_tap$trace_data_out_get or
	  WILL_FIRE_RL_merge_dm_gpr_trace_data or
	  dm_gpr_tap_ifc$trace_data_out_get or
	  WILL_FIRE_RL_merge_dm_csr_trace_data or
	  dm_csr_tap$trace_data_out_get)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_merge_cpu_trace_data:
	  f_trace_data_merged$D_IN = cpu$trace_data_out_get;
      WILL_FIRE_RL_merge_dm_mem_trace_data:
	  f_trace_data_merged$D_IN = dm_mem_tap$trace_data_out_get;
      WILL_FIRE_RL_merge_dm_gpr_trace_data:
	  f_trace_data_merged$D_IN = dm_gpr_tap_ifc$trace_data_out_get;
      WILL_FIRE_RL_merge_dm_csr_trace_data:
	  f_trace_data_merged$D_IN = dm_csr_tap$trace_data_out_get;
      default: f_trace_data_merged$D_IN =
		   234'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign f_trace_data_merged$ENQ =
	     WILL_FIRE_RL_merge_cpu_trace_data ||
	     WILL_FIRE_RL_merge_dm_mem_trace_data ||
	     WILL_FIRE_RL_merge_dm_gpr_trace_data ||
	     WILL_FIRE_RL_merge_dm_csr_trace_data ;
  assign f_trace_data_merged$DEQ = CAN_FIRE_RL_mkConnectionGetPut_1 ;
  assign f_trace_data_merged$CLR = 1'b0 ;

  // submodule ifcs_0_1_innerReq
  assign ifcs_0_1_innerReq$D_IN =
	     { fatReq_arid__h70145,
	       cpu$dmem_master_araddr,
	       cpu$dmem_master_arlen,
	       cpu$dmem_master_arsize,
	       cpu$dmem_master_arburst,
	       cpu$dmem_master_arlock,
	       cpu$dmem_master_arcache,
	       cpu$dmem_master_arprot,
	       cpu$dmem_master_arqos,
	       cpu$dmem_master_arregion } ;
  assign ifcs_0_1_innerReq$ENQ =
	     WILL_FIRE_RL_ifcs_0_1_followFlits ||
	     WILL_FIRE_RL_ifcs_0_1_firstFlit ;
  assign ifcs_0_1_innerReq$DEQ =
	     WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N ||
	     WILL_FIRE_RL_burst_5 ;
  assign ifcs_0_1_innerReq$CLR = 1'b0 ;

  // submodule ifcs_0_1_innerRoute
  assign ifcs_0_1_innerRoute$D_IN =
	     { cpu_dmem_master_ar_araddr__875_BITS_63_TO_40_8_ETC___d1899,
	       cpu$dmem_master_araddr[63:40] == 24'd0 &&
	       !cpu_dmem_master_ar_araddr__875_ULT_soc_map_m_n_ETC___d1878 &&
	       cpu_dmem_master_ar_araddr__875_MINUS_soc_map_m_ETC___d1880,
	       cpu_dmem_master_ar_araddr__875_BITS_63_TO_40_8_ETC___d1889 } ;
  assign ifcs_0_1_innerRoute$ENQ = CAN_FIRE_RL_ifcs_0_1_firstFlit ;
  assign ifcs_0_1_innerRoute$DEQ =
	     WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N ||
	     WILL_FIRE_RL_burst_5 ;
  assign ifcs_0_1_innerRoute$CLR = 1'b0 ;

  // submodule ifcs_0_1_noRouteRsp
  assign ifcs_0_1_noRouteRsp$D_IN =
	     { ifcs_0_1_noRoute_currentReq$port1__read[96:93],
	       130'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB,
	       x_port1__read__h70706 == 9'd1,
	       2'h2 } ;
  assign ifcs_0_1_noRouteRsp$ENQ = CAN_FIRE_RL_ifcs_0_1_nonRoutableGenRsp ;
  assign ifcs_0_1_noRouteRsp$DEQ = CAN_FIRE_RL_ifcs_0_1_drainNoRouteResponse ;
  assign ifcs_0_1_noRouteRsp$CLR = 1'b0 ;

  // submodule ifcs_0_1_routeBack
  assign ifcs_0_1_routeBack$D_IN =
	     2'd1 << tagController_tmp_shimSlave_rff$D_OUT[137] ;
  assign ifcs_0_1_routeBack$ENQ = CAN_FIRE_RL_ifcs_0_1_firstFlit_1 ;
  assign ifcs_0_1_routeBack$DEQ =
	     WILL_FIRE_RL_burst_7 && ifcs_0_1_rspBack$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	     ifcs_0_1_rspBack$D_OUT[2] ;
  assign ifcs_0_1_routeBack$CLR = 1'b0 ;

  // submodule ifcs_0_1_rspBack
  assign ifcs_0_1_rspBack$D_IN =
	     tagController_tmp_shimSlave_rff$D_OUT[136:0] ;
  assign ifcs_0_1_rspBack$ENQ = ssNoSynth_0_r_dwReady$whas ;
  assign ifcs_0_1_rspBack$DEQ =
	     WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_burst_7 ;
  assign ifcs_0_1_rspBack$CLR = 1'b0 ;

  // submodule ifcs_0_innerReq
  assign ifcs_0_innerReq$D_IN =
	     { merged_0_flitLeft != 8'd0,
	       a_awid__h36313,
	       cpu$dmem_master_awaddr,
	       cpu$dmem_master_awlen,
	       cpu$dmem_master_awsize,
	       cpu$dmem_master_awburst,
	       cpu$dmem_master_awlock,
	       cpu$dmem_master_awcache,
	       cpu$dmem_master_awprot,
	       cpu$dmem_master_awqos,
	       cpu$dmem_master_awregion,
	       cpu$dmem_master_wdata,
	       cpu$dmem_master_wstrb,
	       cpu$dmem_master_wlast,
	       cpu$dmem_master_wuser } ;
  assign ifcs_0_innerReq$ENQ =
	     WILL_FIRE_RL_ifcs_0_followFlits ||
	     WILL_FIRE_RL_ifcs_0_firstFlit ;
  assign ifcs_0_innerReq$DEQ =
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N ||
	     WILL_FIRE_RL_burst ;
  assign ifcs_0_innerReq$CLR = 1'b0 ;

  // submodule ifcs_0_innerRoute
  assign ifcs_0_innerRoute$D_IN =
	     { IF_merged_0_flitLeft_084_EQ_0_085_THEN_cpu_dme_ETC___d1248,
	       cpu$dmem_master_awaddr[63:40] == 24'd0 &&
	       !IF_merged_0_flitLeft_084_EQ_0_085_THEN_cpu_dme_ETC___d1227 &&
	       IF_merged_0_flitLeft_084_EQ_0_085_THEN_cpu_dme_ETC___d1229,
	       IF_merged_0_flitLeft_084_EQ_0_085_THEN_cpu_dme_ETC___d1238 } ;
  assign ifcs_0_innerRoute$ENQ = CAN_FIRE_RL_ifcs_0_firstFlit ;
  assign ifcs_0_innerRoute$DEQ =
	     WILL_FIRE_RL_burst && ifcs_0_innerReq$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     ifcs_0_innerReq$D_OUT[2] ;
  assign ifcs_0_innerRoute$CLR = 1'b0 ;

  // submodule ifcs_0_noRouteRsp
  assign ifcs_0_noRouteRsp$D_IN =
	     { ifcs_0_noRoute_inner_currentReq$port1__read[96:93], 2'd3 } ;
  assign ifcs_0_noRouteRsp$ENQ = CAN_FIRE_RL_ifcs_0_nonRoutableGenRsp ;
  assign ifcs_0_noRouteRsp$DEQ = CAN_FIRE_RL_ifcs_0_drainNoRouteResponse ;
  assign ifcs_0_noRouteRsp$CLR = 1'b0 ;

  // submodule ifcs_0_routeBack
  assign ifcs_0_routeBack$D_IN =
	     2'd1 << tagController_tmp_shimSlave_bff$D_OUT[6] ;
  assign ifcs_0_routeBack$ENQ = CAN_FIRE_RL_ifcs_0_firstFlit_1 ;
  assign ifcs_0_routeBack$DEQ =
	     WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_burst_2 ;
  assign ifcs_0_routeBack$CLR = 1'b0 ;

  // submodule ifcs_0_rspBack
  assign ifcs_0_rspBack$D_IN = tagController_tmp_shimSlave_bff$D_OUT[5:0] ;
  assign ifcs_0_rspBack$ENQ = ssNoSynth_0_b_dwReady$whas ;
  assign ifcs_0_rspBack$DEQ =
	     WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_burst_2 ;
  assign ifcs_0_rspBack$CLR = 1'b0 ;

  // submodule ifcs_1_1_innerReq
  assign ifcs_1_1_innerReq$D_IN =
	     { 1'd1, dm_master_nonsynth_bufferShim_arff$D_OUT } ;
  assign ifcs_1_1_innerReq$ENQ =
	     WILL_FIRE_RL_ifcs_1_1_followFlits ||
	     WILL_FIRE_RL_ifcs_1_1_firstFlit ;
  assign ifcs_1_1_innerReq$DEQ =
	     WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N ||
	     WILL_FIRE_RL_burst_6 ;
  assign ifcs_1_1_innerReq$CLR = 1'b0 ;

  // submodule ifcs_1_1_innerRoute
  assign ifcs_1_1_innerRoute$D_IN =
	     { dm_master_nonsynth_bufferShim_arff_first__81_B_ETC___d1990,
	       dm_master_nonsynth_bufferShim_arff$D_OUT[92:69] == 24'd0 &&
	       !dm_master_nonsynth_bufferShim_arff_first__81_B_ETC___d1969 &&
	       dm_master_nonsynth_bufferShim_arff_first__81_B_ETC___d1971,
	       dm_master_nonsynth_bufferShim_arff_first__81_B_ETC___d1980 } ;
  assign ifcs_1_1_innerRoute$ENQ = CAN_FIRE_RL_ifcs_1_1_firstFlit ;
  assign ifcs_1_1_innerRoute$DEQ =
	     WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N ||
	     WILL_FIRE_RL_burst_6 ;
  assign ifcs_1_1_innerRoute$CLR = 1'b0 ;

  // submodule ifcs_1_1_noRouteRsp
  assign ifcs_1_1_noRouteRsp$D_IN =
	     { ifcs_1_1_noRoute_currentReq$port1__read[96:93],
	       130'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB,
	       x_port1__read__h73154 == 9'd1,
	       2'h2 } ;
  assign ifcs_1_1_noRouteRsp$ENQ = CAN_FIRE_RL_ifcs_1_1_nonRoutableGenRsp ;
  assign ifcs_1_1_noRouteRsp$DEQ = CAN_FIRE_RL_ifcs_1_1_drainNoRouteResponse ;
  assign ifcs_1_1_noRouteRsp$CLR = 1'b0 ;

  // submodule ifcs_1_1_routeBack
  assign ifcs_1_1_routeBack$D_IN = 2'd1 << near_mem_io$axi4_slave_rid[4] ;
  assign ifcs_1_1_routeBack$ENQ = CAN_FIRE_RL_ifcs_1_1_firstFlit_1 ;
  assign ifcs_1_1_routeBack$DEQ =
	     WILL_FIRE_RL_burst_8 && ifcs_1_1_rspBack$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	     ifcs_1_1_rspBack$D_OUT[2] ;
  assign ifcs_1_1_routeBack$CLR = 1'b0 ;

  // submodule ifcs_1_1_rspBack
  assign ifcs_1_1_rspBack$D_IN =
	     { near_mem_io$axi4_slave_rid[3:0],
	       near_mem_io$axi4_slave_rdata,
	       near_mem_io$axi4_slave_rresp,
	       near_mem_io$axi4_slave_rlast,
	       near_mem_io$axi4_slave_ruser } ;
  assign ifcs_1_1_rspBack$ENQ = ssNoSynth_1_r_dwReady$whas ;
  assign ifcs_1_1_rspBack$DEQ =
	     WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_burst_8 ;
  assign ifcs_1_1_rspBack$CLR = 1'b0 ;

  // submodule ifcs_1_innerReq
  assign ifcs_1_innerReq$D_IN =
	     { merged_1_flitLeft != 8'd0,
	       1'd1,
	       dm_master_nonsynth_awFF$D_OUT,
	       dm_master_nonsynth_takeUpperW$D_OUT ?
		 { dm_master_nonsynth_bufferShim_wff$D_OUT[74:11], 64'd0 } :
		 { 64'd0, dm_master_nonsynth_bufferShim_wff$D_OUT[74:11] },
	       dm_master_nonsynth_takeUpperW$D_OUT ?
		 { dm_master_nonsynth_bufferShim_wff$D_OUT[10:3], 8'd0 } :
		 { 8'd0, dm_master_nonsynth_bufferShim_wff$D_OUT[10:3] },
	       dm_master_nonsynth_bufferShim_wff$D_OUT[2:0] } ;
  assign ifcs_1_innerReq$ENQ =
	     WILL_FIRE_RL_ifcs_1_followFlits ||
	     WILL_FIRE_RL_ifcs_1_firstFlit ;
  assign ifcs_1_innerReq$DEQ =
	     WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N ||
	     WILL_FIRE_RL_burst_1 ;
  assign ifcs_1_innerReq$CLR = 1'b0 ;

  // submodule ifcs_1_innerRoute
  assign ifcs_1_innerRoute$D_IN =
	     { IF_merged_1_flitLeft_103_EQ_0_104_THEN_dm_mast_ETC___d1354,
	       dm_master_nonsynth_awFFD_OUT_BITS_92_TO_29__q1[63:40] ==
	       24'd0 &&
	       !IF_merged_1_flitLeft_103_EQ_0_104_THEN_dm_mast_ETC___d1333 &&
	       IF_merged_1_flitLeft_103_EQ_0_104_THEN_dm_mast_ETC___d1335,
	       IF_merged_1_flitLeft_103_EQ_0_104_THEN_dm_mast_ETC___d1344 } ;
  assign ifcs_1_innerRoute$ENQ = CAN_FIRE_RL_ifcs_1_firstFlit ;
  assign ifcs_1_innerRoute$DEQ =
	     WILL_FIRE_RL_burst_1 && ifcs_1_innerReq$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	     ifcs_1_innerReq$D_OUT[2] ;
  assign ifcs_1_innerRoute$CLR = 1'b0 ;

  // submodule ifcs_1_noRouteRsp
  assign ifcs_1_noRouteRsp$D_IN =
	     { ifcs_1_noRoute_inner_currentReq$port1__read[96:93], 2'd3 } ;
  assign ifcs_1_noRouteRsp$ENQ = CAN_FIRE_RL_ifcs_1_nonRoutableGenRsp ;
  assign ifcs_1_noRouteRsp$DEQ = CAN_FIRE_RL_ifcs_1_drainNoRouteResponse ;
  assign ifcs_1_noRouteRsp$CLR = 1'b0 ;

  // submodule ifcs_1_routeBack
  assign ifcs_1_routeBack$D_IN = 2'd1 << near_mem_io$axi4_slave_bid[4] ;
  assign ifcs_1_routeBack$ENQ = CAN_FIRE_RL_ifcs_1_firstFlit_1 ;
  assign ifcs_1_routeBack$DEQ =
	     WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_burst_3 ;
  assign ifcs_1_routeBack$CLR = 1'b0 ;

  // submodule ifcs_1_rspBack
  assign ifcs_1_rspBack$D_IN =
	     { near_mem_io$axi4_slave_bid[3:0],
	       near_mem_io$axi4_slave_bresp } ;
  assign ifcs_1_rspBack$ENQ = ssNoSynth_1_b_dwReady$whas ;
  assign ifcs_1_rspBack$DEQ =
	     WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_burst_3 ;
  assign ifcs_1_rspBack$CLR = 1'b0 ;

  // submodule ifcs_2_1_routeBack
  assign ifcs_2_1_routeBack$D_IN = 2'd1 << plic$axi4_slave_rid[4] ;
  assign ifcs_2_1_routeBack$ENQ = CAN_FIRE_RL_ifcs_2_1_firstFlit ;
  assign ifcs_2_1_routeBack$DEQ =
	     WILL_FIRE_RL_burst_9 && ifcs_2_1_rspBack$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	     ifcs_2_1_rspBack$D_OUT[2] ;
  assign ifcs_2_1_routeBack$CLR = 1'b0 ;

  // submodule ifcs_2_1_rspBack
  assign ifcs_2_1_rspBack$D_IN =
	     { plic$axi4_slave_rid[3:0],
	       plic$axi4_slave_rdata,
	       plic$axi4_slave_rresp,
	       plic$axi4_slave_rlast,
	       plic$axi4_slave_ruser } ;
  assign ifcs_2_1_rspBack$ENQ = ssNoSynth_2_r_dwReady$whas ;
  assign ifcs_2_1_rspBack$DEQ =
	     WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_burst_9 ;
  assign ifcs_2_1_rspBack$CLR = 1'b0 ;

  // submodule ifcs_2_routeBack
  assign ifcs_2_routeBack$D_IN = 2'd1 << plic$axi4_slave_bid[4] ;
  assign ifcs_2_routeBack$ENQ = CAN_FIRE_RL_ifcs_2_firstFlit ;
  assign ifcs_2_routeBack$DEQ =
	     WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_burst_4 ;
  assign ifcs_2_routeBack$CLR = 1'b0 ;

  // submodule ifcs_2_rspBack
  assign ifcs_2_rspBack$D_IN =
	     { plic$axi4_slave_bid[3:0], plic$axi4_slave_bresp } ;
  assign ifcs_2_rspBack$ENQ = ssNoSynth_2_b_dwReady$whas ;
  assign ifcs_2_rspBack$DEQ =
	     WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_burst_4 ;
  assign ifcs_2_rspBack$CLR = 1'b0 ;

  // submodule msNoSynth_0_b_buffer_ff
  assign msNoSynth_0_b_buffer_ff$D_IN = msNoSynth_0_b_buffer_enqw$wget ;
  assign msNoSynth_0_b_buffer_ff$ENQ =
	     CAN_FIRE_RL_msNoSynth_0_b_buffer_enqueue ;
  assign msNoSynth_0_b_buffer_ff$DEQ =
	     CAN_FIRE_RL_msNoSynth_0_b_buffer_dequeue ;
  assign msNoSynth_0_b_buffer_ff$CLR = 1'b0 ;

  // submodule msNoSynth_0_b_buffer_firstValid
  assign msNoSynth_0_b_buffer_firstValid$D_IN = 1'd1 ;
  assign msNoSynth_0_b_buffer_firstValid$EN =
	     CAN_FIRE_RL_msNoSynth_0_b_dropFlit ;

  // submodule msNoSynth_0_r_buffer_ff
  assign msNoSynth_0_r_buffer_ff$D_IN = msNoSynth_0_r_buffer_enqw$wget ;
  assign msNoSynth_0_r_buffer_ff$ENQ =
	     CAN_FIRE_RL_msNoSynth_0_r_buffer_enqueue ;
  assign msNoSynth_0_r_buffer_ff$DEQ =
	     CAN_FIRE_RL_msNoSynth_0_r_buffer_dequeue ;
  assign msNoSynth_0_r_buffer_ff$CLR = 1'b0 ;

  // submodule msNoSynth_0_r_buffer_firstValid
  assign msNoSynth_0_r_buffer_firstValid$D_IN = 1'd1 ;
  assign msNoSynth_0_r_buffer_firstValid$EN =
	     CAN_FIRE_RL_msNoSynth_0_r_dropFlit ;

  // submodule msNoSynth_1_b_buffer_ff
  assign msNoSynth_1_b_buffer_ff$D_IN = msNoSynth_1_b_buffer_enqw$wget ;
  assign msNoSynth_1_b_buffer_ff$ENQ =
	     CAN_FIRE_RL_msNoSynth_1_b_buffer_enqueue ;
  assign msNoSynth_1_b_buffer_ff$DEQ =
	     CAN_FIRE_RL_msNoSynth_1_b_buffer_dequeue ;
  assign msNoSynth_1_b_buffer_ff$CLR = 1'b0 ;

  // submodule msNoSynth_1_b_buffer_firstValid
  assign msNoSynth_1_b_buffer_firstValid$D_IN = 1'd1 ;
  assign msNoSynth_1_b_buffer_firstValid$EN =
	     CAN_FIRE_RL_msNoSynth_1_b_dropFlit ;

  // submodule msNoSynth_1_r_buffer_ff
  assign msNoSynth_1_r_buffer_ff$D_IN = msNoSynth_1_r_buffer_enqw$wget ;
  assign msNoSynth_1_r_buffer_ff$ENQ =
	     CAN_FIRE_RL_msNoSynth_1_r_buffer_enqueue ;
  assign msNoSynth_1_r_buffer_ff$DEQ =
	     CAN_FIRE_RL_msNoSynth_1_r_buffer_dequeue ;
  assign msNoSynth_1_r_buffer_ff$CLR = 1'b0 ;

  // submodule msNoSynth_1_r_buffer_firstValid
  assign msNoSynth_1_r_buffer_firstValid$D_IN = 1'd1 ;
  assign msNoSynth_1_r_buffer_firstValid$EN =
	     CAN_FIRE_RL_msNoSynth_1_r_dropFlit ;

  // submodule near_mem_io
  assign near_mem_io$axi4_slave_araddr =
	     ssNoSynth_1_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_ar_buffer_ff$D_OUT[92:29] :
	       ssNoSynth_1_ar_buffer_enqw$wget[92:29] ;
  assign near_mem_io$axi4_slave_arburst =
	     ssNoSynth_1_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_ar_buffer_ff$D_OUT[17:16] :
	       ssNoSynth_1_ar_buffer_enqw$wget[17:16] ;
  assign near_mem_io$axi4_slave_arcache =
	     ssNoSynth_1_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_ar_buffer_ff$D_OUT[14:11] :
	       ssNoSynth_1_ar_buffer_enqw$wget[14:11] ;
  assign near_mem_io$axi4_slave_arid =
	     ssNoSynth_1_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_ar_buffer_ff$D_OUT[97:93] :
	       ssNoSynth_1_ar_buffer_enqw$wget[97:93] ;
  assign near_mem_io$axi4_slave_arlen =
	     ssNoSynth_1_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_ar_buffer_ff$D_OUT[28:21] :
	       ssNoSynth_1_ar_buffer_enqw$wget[28:21] ;
  assign near_mem_io$axi4_slave_arlock =
	     ssNoSynth_1_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_ar_buffer_ff$D_OUT[15] :
	       ssNoSynth_1_ar_buffer_enqw$wget[15] ;
  assign near_mem_io$axi4_slave_arprot =
	     ssNoSynth_1_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_ar_buffer_ff$D_OUT[10:8] :
	       ssNoSynth_1_ar_buffer_enqw$wget[10:8] ;
  assign near_mem_io$axi4_slave_arqos =
	     ssNoSynth_1_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_ar_buffer_ff$D_OUT[7:4] :
	       ssNoSynth_1_ar_buffer_enqw$wget[7:4] ;
  assign near_mem_io$axi4_slave_arregion =
	     ssNoSynth_1_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_ar_buffer_ff$D_OUT[3:0] :
	       ssNoSynth_1_ar_buffer_enqw$wget[3:0] ;
  assign near_mem_io$axi4_slave_arsize =
	     ssNoSynth_1_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_ar_buffer_ff$D_OUT[20:18] :
	       ssNoSynth_1_ar_buffer_enqw$wget[20:18] ;
  assign near_mem_io$axi4_slave_awaddr =
	     ssNoSynth_1_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_aw_buffer_ff$D_OUT[92:29] :
	       ssNoSynth_1_aw_buffer_enqw$wget[92:29] ;
  assign near_mem_io$axi4_slave_awburst =
	     ssNoSynth_1_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_aw_buffer_ff$D_OUT[17:16] :
	       ssNoSynth_1_aw_buffer_enqw$wget[17:16] ;
  assign near_mem_io$axi4_slave_awcache =
	     ssNoSynth_1_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_aw_buffer_ff$D_OUT[14:11] :
	       ssNoSynth_1_aw_buffer_enqw$wget[14:11] ;
  assign near_mem_io$axi4_slave_awid =
	     ssNoSynth_1_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_aw_buffer_ff$D_OUT[97:93] :
	       ssNoSynth_1_aw_buffer_enqw$wget[97:93] ;
  assign near_mem_io$axi4_slave_awlen =
	     ssNoSynth_1_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_aw_buffer_ff$D_OUT[28:21] :
	       ssNoSynth_1_aw_buffer_enqw$wget[28:21] ;
  assign near_mem_io$axi4_slave_awlock =
	     ssNoSynth_1_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_aw_buffer_ff$D_OUT[15] :
	       ssNoSynth_1_aw_buffer_enqw$wget[15] ;
  assign near_mem_io$axi4_slave_awprot =
	     ssNoSynth_1_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_aw_buffer_ff$D_OUT[10:8] :
	       ssNoSynth_1_aw_buffer_enqw$wget[10:8] ;
  assign near_mem_io$axi4_slave_awqos =
	     ssNoSynth_1_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_aw_buffer_ff$D_OUT[7:4] :
	       ssNoSynth_1_aw_buffer_enqw$wget[7:4] ;
  assign near_mem_io$axi4_slave_awregion =
	     ssNoSynth_1_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_aw_buffer_ff$D_OUT[3:0] :
	       ssNoSynth_1_aw_buffer_enqw$wget[3:0] ;
  assign near_mem_io$axi4_slave_awsize =
	     ssNoSynth_1_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_aw_buffer_ff$D_OUT[20:18] :
	       ssNoSynth_1_aw_buffer_enqw$wget[20:18] ;
  assign near_mem_io$axi4_slave_bready = ssNoSynth_1_b_dwReady$whas ;
  assign near_mem_io$axi4_slave_rready = ssNoSynth_1_r_dwReady$whas ;
  assign near_mem_io$axi4_slave_wdata =
	     ssNoSynth_1_w_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_w_buffer_ff$D_OUT[146:19] :
	       ssNoSynth_1_w_buffer_enqw$wget[146:19] ;
  assign near_mem_io$axi4_slave_wlast =
	     ssNoSynth_1_w_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_w_buffer_ff$D_OUT[2] :
	       ssNoSynth_1_w_buffer_enqw$wget[2] ;
  assign near_mem_io$axi4_slave_wstrb =
	     ssNoSynth_1_w_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_w_buffer_ff$D_OUT[18:3] :
	       ssNoSynth_1_w_buffer_enqw$wget[18:3] ;
  assign near_mem_io$axi4_slave_wuser =
	     ssNoSynth_1_w_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_w_buffer_ff$D_OUT[1:0] :
	       ssNoSynth_1_w_buffer_enqw$wget[1:0] ;
  assign near_mem_io$set_addr_map_addr_base =
	     soc_map$m_near_mem_io_addr_range[127:64] ;
  assign near_mem_io$set_addr_map_addr_lim =
	     soc_map$m_near_mem_io_addr_range[127:64] +
	     soc_map$m_near_mem_io_addr_range[63:0] ;
  assign near_mem_io$EN_server_reset_request_put =
	     WILL_FIRE_RL_rl_cpu_hart0_reset_from_dm_start ||
	     WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;
  assign near_mem_io$EN_server_reset_response_get =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_complete ;
  assign near_mem_io$EN_set_addr_map =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_complete ;
  assign near_mem_io$axi4_slave_awvalid =
	     CAN_FIRE_RL_ssNoSynth_1_aw_forwardFlit ;
  assign near_mem_io$axi4_slave_wvalid =
	     CAN_FIRE_RL_ssNoSynth_1_w_forwardFlit ;
  assign near_mem_io$axi4_slave_arvalid =
	     CAN_FIRE_RL_ssNoSynth_1_ar_forwardFlit ;
  assign near_mem_io$EN_get_timer_interrupt_req_get =
	     near_mem_io$RDY_get_timer_interrupt_req_get ;
  assign near_mem_io$EN_get_sw_interrupt_req_get =
	     near_mem_io$RDY_get_sw_interrupt_req_get ;

  // submodule plic
  assign plic$axi4_slave_araddr =
	     ssNoSynth_2_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_ar_buffer_ff$D_OUT[92:29] :
	       ssNoSynth_2_ar_buffer_enqw$wget[92:29] ;
  assign plic$axi4_slave_arburst =
	     ssNoSynth_2_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_ar_buffer_ff$D_OUT[17:16] :
	       ssNoSynth_2_ar_buffer_enqw$wget[17:16] ;
  assign plic$axi4_slave_arcache =
	     ssNoSynth_2_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_ar_buffer_ff$D_OUT[14:11] :
	       ssNoSynth_2_ar_buffer_enqw$wget[14:11] ;
  assign plic$axi4_slave_arid =
	     ssNoSynth_2_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_ar_buffer_ff$D_OUT[97:93] :
	       ssNoSynth_2_ar_buffer_enqw$wget[97:93] ;
  assign plic$axi4_slave_arlen =
	     ssNoSynth_2_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_ar_buffer_ff$D_OUT[28:21] :
	       ssNoSynth_2_ar_buffer_enqw$wget[28:21] ;
  assign plic$axi4_slave_arlock =
	     ssNoSynth_2_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_ar_buffer_ff$D_OUT[15] :
	       ssNoSynth_2_ar_buffer_enqw$wget[15] ;
  assign plic$axi4_slave_arprot =
	     ssNoSynth_2_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_ar_buffer_ff$D_OUT[10:8] :
	       ssNoSynth_2_ar_buffer_enqw$wget[10:8] ;
  assign plic$axi4_slave_arqos =
	     ssNoSynth_2_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_ar_buffer_ff$D_OUT[7:4] :
	       ssNoSynth_2_ar_buffer_enqw$wget[7:4] ;
  assign plic$axi4_slave_arregion =
	     ssNoSynth_2_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_ar_buffer_ff$D_OUT[3:0] :
	       ssNoSynth_2_ar_buffer_enqw$wget[3:0] ;
  assign plic$axi4_slave_arsize =
	     ssNoSynth_2_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_ar_buffer_ff$D_OUT[20:18] :
	       ssNoSynth_2_ar_buffer_enqw$wget[20:18] ;
  assign plic$axi4_slave_awaddr =
	     ssNoSynth_2_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_aw_buffer_ff$D_OUT[92:29] :
	       ssNoSynth_2_aw_buffer_enqw$wget[92:29] ;
  assign plic$axi4_slave_awburst =
	     ssNoSynth_2_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_aw_buffer_ff$D_OUT[17:16] :
	       ssNoSynth_2_aw_buffer_enqw$wget[17:16] ;
  assign plic$axi4_slave_awcache =
	     ssNoSynth_2_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_aw_buffer_ff$D_OUT[14:11] :
	       ssNoSynth_2_aw_buffer_enqw$wget[14:11] ;
  assign plic$axi4_slave_awid =
	     ssNoSynth_2_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_aw_buffer_ff$D_OUT[97:93] :
	       ssNoSynth_2_aw_buffer_enqw$wget[97:93] ;
  assign plic$axi4_slave_awlen =
	     ssNoSynth_2_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_aw_buffer_ff$D_OUT[28:21] :
	       ssNoSynth_2_aw_buffer_enqw$wget[28:21] ;
  assign plic$axi4_slave_awlock =
	     ssNoSynth_2_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_aw_buffer_ff$D_OUT[15] :
	       ssNoSynth_2_aw_buffer_enqw$wget[15] ;
  assign plic$axi4_slave_awprot =
	     ssNoSynth_2_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_aw_buffer_ff$D_OUT[10:8] :
	       ssNoSynth_2_aw_buffer_enqw$wget[10:8] ;
  assign plic$axi4_slave_awqos =
	     ssNoSynth_2_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_aw_buffer_ff$D_OUT[7:4] :
	       ssNoSynth_2_aw_buffer_enqw$wget[7:4] ;
  assign plic$axi4_slave_awregion =
	     ssNoSynth_2_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_aw_buffer_ff$D_OUT[3:0] :
	       ssNoSynth_2_aw_buffer_enqw$wget[3:0] ;
  assign plic$axi4_slave_awsize =
	     ssNoSynth_2_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_aw_buffer_ff$D_OUT[20:18] :
	       ssNoSynth_2_aw_buffer_enqw$wget[20:18] ;
  assign plic$axi4_slave_bready = ssNoSynth_2_b_dwReady$whas ;
  assign plic$axi4_slave_rready = ssNoSynth_2_r_dwReady$whas ;
  assign plic$axi4_slave_wdata =
	     ssNoSynth_2_w_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_w_buffer_ff$D_OUT[146:19] :
	       ssNoSynth_2_w_buffer_enqw$wget[146:19] ;
  assign plic$axi4_slave_wlast =
	     ssNoSynth_2_w_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_w_buffer_ff$D_OUT[2] :
	       ssNoSynth_2_w_buffer_enqw$wget[2] ;
  assign plic$axi4_slave_wstrb =
	     ssNoSynth_2_w_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_w_buffer_ff$D_OUT[18:3] :
	       ssNoSynth_2_w_buffer_enqw$wget[18:3] ;
  assign plic$axi4_slave_wuser =
	     ssNoSynth_2_w_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_w_buffer_ff$D_OUT[1:0] :
	       ssNoSynth_2_w_buffer_enqw$wget[1:0] ;
  assign plic$set_addr_map_addr_base = soc_map$m_plic_addr_range[127:64] ;
  assign plic$set_addr_map_addr_lim =
	     soc_map$m_plic_addr_range[127:64] +
	     soc_map$m_plic_addr_range[63:0] ;
  assign plic$set_verbosity_verbosity = 4'h0 ;
  assign plic$v_sources_0_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_0_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_10_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_10_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_11_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_11_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_12_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_12_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_13_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_13_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_14_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_14_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_15_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_15_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_1_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_1_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_2_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_2_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_3_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_3_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_4_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_4_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_5_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_5_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_6_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_6_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_7_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_7_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_8_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_8_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_9_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_9_m_interrupt_req_set_not_clear ;
  assign plic$EN_set_verbosity = 1'b0 ;
  assign plic$EN_show_PLIC_state = 1'b0 ;
  assign plic$EN_server_reset_request_put =
	     WILL_FIRE_RL_rl_cpu_hart0_reset_from_dm_start ||
	     WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;
  assign plic$EN_server_reset_response_get =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_complete ;
  assign plic$EN_set_addr_map = CAN_FIRE_RL_rl_cpu_hart0_reset_complete ;
  assign plic$axi4_slave_awvalid = CAN_FIRE_RL_ssNoSynth_2_aw_forwardFlit ;
  assign plic$axi4_slave_wvalid = CAN_FIRE_RL_ssNoSynth_2_w_forwardFlit ;
  assign plic$axi4_slave_arvalid = CAN_FIRE_RL_ssNoSynth_2_ar_forwardFlit ;

  // submodule soc_map
  assign soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign soc_map$m_is_mem_addr_addr = 64'h0 ;
  assign soc_map$m_is_near_mem_IO_addr_addr = 64'h0 ;

  // submodule ssNoSynth_0_ar_buffer_ff
  assign ssNoSynth_0_ar_buffer_ff$D_IN = ssNoSynth_0_ar_buffer_enqw$wget ;
  assign ssNoSynth_0_ar_buffer_ff$ENQ =
	     CAN_FIRE_RL_ssNoSynth_0_ar_buffer_enqueue ;
  assign ssNoSynth_0_ar_buffer_ff$DEQ =
	     CAN_FIRE_RL_ssNoSynth_0_ar_buffer_dequeue ;
  assign ssNoSynth_0_ar_buffer_ff$CLR = 1'b0 ;

  // submodule ssNoSynth_0_ar_buffer_firstValid
  assign ssNoSynth_0_ar_buffer_firstValid$D_IN = 1'd1 ;
  assign ssNoSynth_0_ar_buffer_firstValid$EN =
	     CAN_FIRE_RL_ssNoSynth_0_ar_dropFlit ;

  // submodule ssNoSynth_0_aw_buffer_ff
  assign ssNoSynth_0_aw_buffer_ff$D_IN = split_0_doPut$wget[244:147] ;
  assign ssNoSynth_0_aw_buffer_ff$ENQ =
	     CAN_FIRE_RL_ssNoSynth_0_aw_buffer_enqueue ;
  assign ssNoSynth_0_aw_buffer_ff$DEQ =
	     CAN_FIRE_RL_ssNoSynth_0_aw_buffer_dequeue ;
  assign ssNoSynth_0_aw_buffer_ff$CLR = 1'b0 ;

  // submodule ssNoSynth_0_aw_buffer_firstValid
  assign ssNoSynth_0_aw_buffer_firstValid$D_IN = 1'd1 ;
  assign ssNoSynth_0_aw_buffer_firstValid$EN =
	     CAN_FIRE_RL_ssNoSynth_0_aw_dropFlit ;

  // submodule ssNoSynth_0_w_buffer_ff
  assign ssNoSynth_0_w_buffer_ff$D_IN = split_0_doPut$wget[146:0] ;
  assign ssNoSynth_0_w_buffer_ff$ENQ =
	     CAN_FIRE_RL_ssNoSynth_0_w_buffer_enqueue ;
  assign ssNoSynth_0_w_buffer_ff$DEQ =
	     CAN_FIRE_RL_ssNoSynth_0_w_buffer_dequeue ;
  assign ssNoSynth_0_w_buffer_ff$CLR = 1'b0 ;

  // submodule ssNoSynth_0_w_buffer_firstValid
  assign ssNoSynth_0_w_buffer_firstValid$D_IN = 1'd1 ;
  assign ssNoSynth_0_w_buffer_firstValid$EN =
	     CAN_FIRE_RL_ssNoSynth_0_w_dropFlit ;

  // submodule ssNoSynth_1_ar_buffer_ff
  assign ssNoSynth_1_ar_buffer_ff$D_IN = ssNoSynth_1_ar_buffer_enqw$wget ;
  assign ssNoSynth_1_ar_buffer_ff$ENQ =
	     CAN_FIRE_RL_ssNoSynth_1_ar_buffer_enqueue ;
  assign ssNoSynth_1_ar_buffer_ff$DEQ =
	     CAN_FIRE_RL_ssNoSynth_1_ar_buffer_dequeue ;
  assign ssNoSynth_1_ar_buffer_ff$CLR = 1'b0 ;

  // submodule ssNoSynth_1_ar_buffer_firstValid
  assign ssNoSynth_1_ar_buffer_firstValid$D_IN = 1'd1 ;
  assign ssNoSynth_1_ar_buffer_firstValid$EN =
	     CAN_FIRE_RL_ssNoSynth_1_ar_dropFlit ;

  // submodule ssNoSynth_1_aw_buffer_ff
  assign ssNoSynth_1_aw_buffer_ff$D_IN = split_1_doPut$wget[244:147] ;
  assign ssNoSynth_1_aw_buffer_ff$ENQ =
	     CAN_FIRE_RL_ssNoSynth_1_aw_buffer_enqueue ;
  assign ssNoSynth_1_aw_buffer_ff$DEQ =
	     CAN_FIRE_RL_ssNoSynth_1_aw_buffer_dequeue ;
  assign ssNoSynth_1_aw_buffer_ff$CLR = 1'b0 ;

  // submodule ssNoSynth_1_aw_buffer_firstValid
  assign ssNoSynth_1_aw_buffer_firstValid$D_IN = 1'd1 ;
  assign ssNoSynth_1_aw_buffer_firstValid$EN =
	     CAN_FIRE_RL_ssNoSynth_1_aw_dropFlit ;

  // submodule ssNoSynth_1_w_buffer_ff
  assign ssNoSynth_1_w_buffer_ff$D_IN = split_1_doPut$wget[146:0] ;
  assign ssNoSynth_1_w_buffer_ff$ENQ =
	     CAN_FIRE_RL_ssNoSynth_1_w_buffer_enqueue ;
  assign ssNoSynth_1_w_buffer_ff$DEQ =
	     CAN_FIRE_RL_ssNoSynth_1_w_buffer_dequeue ;
  assign ssNoSynth_1_w_buffer_ff$CLR = 1'b0 ;

  // submodule ssNoSynth_1_w_buffer_firstValid
  assign ssNoSynth_1_w_buffer_firstValid$D_IN = 1'd1 ;
  assign ssNoSynth_1_w_buffer_firstValid$EN =
	     CAN_FIRE_RL_ssNoSynth_1_w_dropFlit ;

  // submodule ssNoSynth_2_ar_buffer_ff
  assign ssNoSynth_2_ar_buffer_ff$D_IN = ssNoSynth_2_ar_buffer_enqw$wget ;
  assign ssNoSynth_2_ar_buffer_ff$ENQ =
	     CAN_FIRE_RL_ssNoSynth_2_ar_buffer_enqueue ;
  assign ssNoSynth_2_ar_buffer_ff$DEQ =
	     CAN_FIRE_RL_ssNoSynth_2_ar_buffer_dequeue ;
  assign ssNoSynth_2_ar_buffer_ff$CLR = 1'b0 ;

  // submodule ssNoSynth_2_ar_buffer_firstValid
  assign ssNoSynth_2_ar_buffer_firstValid$D_IN = 1'd1 ;
  assign ssNoSynth_2_ar_buffer_firstValid$EN =
	     CAN_FIRE_RL_ssNoSynth_2_ar_dropFlit ;

  // submodule ssNoSynth_2_aw_buffer_ff
  assign ssNoSynth_2_aw_buffer_ff$D_IN = split_2_doPut$wget[244:147] ;
  assign ssNoSynth_2_aw_buffer_ff$ENQ =
	     CAN_FIRE_RL_ssNoSynth_2_aw_buffer_enqueue ;
  assign ssNoSynth_2_aw_buffer_ff$DEQ =
	     CAN_FIRE_RL_ssNoSynth_2_aw_buffer_dequeue ;
  assign ssNoSynth_2_aw_buffer_ff$CLR = 1'b0 ;

  // submodule ssNoSynth_2_aw_buffer_firstValid
  assign ssNoSynth_2_aw_buffer_firstValid$D_IN = 1'd1 ;
  assign ssNoSynth_2_aw_buffer_firstValid$EN =
	     CAN_FIRE_RL_ssNoSynth_2_aw_dropFlit ;

  // submodule ssNoSynth_2_w_buffer_ff
  assign ssNoSynth_2_w_buffer_ff$D_IN = split_2_doPut$wget[146:0] ;
  assign ssNoSynth_2_w_buffer_ff$ENQ =
	     CAN_FIRE_RL_ssNoSynth_2_w_buffer_enqueue ;
  assign ssNoSynth_2_w_buffer_ff$DEQ =
	     CAN_FIRE_RL_ssNoSynth_2_w_buffer_dequeue ;
  assign ssNoSynth_2_w_buffer_ff$CLR = 1'b0 ;

  // submodule ssNoSynth_2_w_buffer_firstValid
  assign ssNoSynth_2_w_buffer_firstValid$D_IN = 1'd1 ;
  assign ssNoSynth_2_w_buffer_firstValid$EN =
	     CAN_FIRE_RL_ssNoSynth_2_w_dropFlit ;

  // submodule tagController_tmp_limiter
  assign tagController_tmp_limiter$ENQ =
	     WILL_FIRE_RL_tagController_tmp_passCacheWrite ||
	     WILL_FIRE_RL_tagController_tmp_passCacheRead ;
  assign tagController_tmp_limiter$DEQ =
	     WILL_FIRE_RL_tagController_tmp_passCacheResponse &&
	     (tagController_tmp_tagCon$cache_response_get[133:132] != 2'd0 ||
	      tagController_tmp_tagCon$cache_response_get[131]) ;
  assign tagController_tmp_limiter$CLR =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;

  // submodule tagController_tmp_newRst
  assign tagController_tmp_newRst$ASSERT_IN =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;

  // submodule tagController_tmp_shimMaster_arff
  assign tagController_tmp_shimMaster_arff$D_IN =
	     { x_arid__h10802,
	       x_araddr__h10803,
	       x_arlen__h10804,
	       x_arsize_val__h10849,
	       3'd2,
	       x__h10867,
	       11'd0 } ;
  assign tagController_tmp_shimMaster_arff$ENQ =
	     tagController_tmp_tagCon$RDY_memory_request_get &&
	     tagController_tmp_tagCon$memory_request_get[158:157] != 2'd1 ;
  assign tagController_tmp_shimMaster_arff$DEQ =
	     tagController_tmp_shimMaster_arff$EMPTY_N &&
	     cpu_dmem_master_arready ;
  assign tagController_tmp_shimMaster_arff$CLR =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;

  // submodule tagController_tmp_shimMaster_awff
  assign tagController_tmp_shimMaster_awff$D_IN =
	     { tagController_tmp_tagCon$memory_request_get[165:160],
	       aw_awaddr__h8469,
	       14'd34,
	       x__h8545,
	       11'd0 } ;
  assign tagController_tmp_shimMaster_awff$ENQ =
	     tagController_tmp_tagCon$RDY_memory_request_get &&
	     tagController_tmp_tagCon$memory_request_get[158:157] == 2'd1 ;
  assign tagController_tmp_shimMaster_awff$DEQ =
	     tagController_tmp_shimMaster_awff$EMPTY_N &&
	     cpu_dmem_master_awready ;
  assign tagController_tmp_shimMaster_awff$CLR =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;

  // submodule tagController_tmp_shimMaster_bff
  assign tagController_tmp_shimMaster_bff$D_IN =
	     { cpu_dmem_master_bid, cpu_dmem_master_bresp } ;
  assign tagController_tmp_shimMaster_bff$ENQ =
	     cpu_dmem_master_bvalid &&
	     tagController_tmp_shimMaster_bff$FULL_N ;
  assign tagController_tmp_shimMaster_bff$DEQ =
	     WILL_FIRE_RL_tagController_tmp_passMemoryResponseWrite ;
  assign tagController_tmp_shimMaster_bff$CLR =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;

  // submodule tagController_tmp_shimMaster_rff
  assign tagController_tmp_shimMaster_rff$D_IN =
	     { cpu_dmem_master_rid,
	       cpu_dmem_master_rdata,
	       cpu_dmem_master_rresp,
	       cpu_dmem_master_rlast } ;
  assign tagController_tmp_shimMaster_rff$ENQ =
	     cpu_dmem_master_rvalid &&
	     tagController_tmp_shimMaster_rff$FULL_N ;
  assign tagController_tmp_shimMaster_rff$DEQ =
	     CAN_FIRE_RL_tagController_tmp_passMemoryResponseRead ;
  assign tagController_tmp_shimMaster_rff$CLR =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;

  // submodule tagController_tmp_shimMaster_wff
  assign tagController_tmp_shimMaster_wff$D_IN =
	     { tagController_tmp_tagCon$memory_request_get[127:0],
	       tagController_tmp_tagCon$memory_request_get[153:138],
	       tagController_tmp_tagCon$memory_request_get[156] } ;
  assign tagController_tmp_shimMaster_wff$ENQ =
	     tagController_tmp_tagCon$RDY_memory_request_get &&
	     tagController_tmp_tagCon$memory_request_get[158:157] == 2'd1 ;
  assign tagController_tmp_shimMaster_wff$DEQ =
	     tagController_tmp_shimMaster_wff$EMPTY_N &&
	     cpu_dmem_master_wready ;
  assign tagController_tmp_shimMaster_wff$CLR =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;

  // submodule tagController_tmp_shimSlave_arff
  assign tagController_tmp_shimSlave_arff$D_IN =
	     ssNoSynth_0_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_0_ar_buffer_ff$D_OUT :
	       ssNoSynth_0_ar_buffer_enqw$wget ;
  assign tagController_tmp_shimSlave_arff$ENQ =
	     WILL_FIRE_RL_ssNoSynth_0_ar_forwardFlit &&
	     tagController_tmp_shimSlave_arff$FULL_N ;
  assign tagController_tmp_shimSlave_arff$DEQ =
	     CAN_FIRE_RL_tagController_tmp_passCacheRead ;
  assign tagController_tmp_shimSlave_arff$CLR =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;

  // submodule tagController_tmp_shimSlave_awff
  assign tagController_tmp_shimSlave_awff$D_IN =
	     ssNoSynth_0_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_0_aw_buffer_ff$D_OUT :
	       split_0_doPut$wget[244:147] ;
  assign tagController_tmp_shimSlave_awff$ENQ =
	     WILL_FIRE_RL_ssNoSynth_0_aw_forwardFlit &&
	     tagController_tmp_shimSlave_awff$FULL_N ;
  assign tagController_tmp_shimSlave_awff$DEQ =
	     WILL_FIRE_RL_tagController_tmp_passCacheWrite ;
  assign tagController_tmp_shimSlave_awff$CLR =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;

  // submodule tagController_tmp_shimSlave_bff
  assign tagController_tmp_shimSlave_bff$D_IN =
	     { (tagController_tmp_tagCon$cache_response_get[133:132] ==
		2'd1) ?
		 tagController_tmp_tagCon$cache_response_get[140:136] :
		 5'd0,
	       2'd0 } ;
  assign tagController_tmp_shimSlave_bff$ENQ =
	     WILL_FIRE_RL_tagController_tmp_passCacheResponse &&
	     tagController_tmp_tagCon$cache_response_get[133:132] != 2'd0 ;
  assign tagController_tmp_shimSlave_bff$DEQ =
	     tagController_tmp_shimSlave_bff$EMPTY_N &&
	     ssNoSynth_0_b_dwReady$whas ;
  assign tagController_tmp_shimSlave_bff$CLR =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;

  // submodule tagController_tmp_shimSlave_rff
  assign tagController_tmp_shimSlave_rff$D_IN =
	     { tagController_tmp_tagCon$cache_response_get[140:136],
	       tagController_tmp_tagCon$cache_response_get[127:0],
	       2'd0,
	       tagController_tmp_tagCon$cache_response_get[131],
	       tagController_tmp_tagCon$cache_response_get[129:128] } ;
  assign tagController_tmp_shimSlave_rff$ENQ =
	     WILL_FIRE_RL_tagController_tmp_passCacheResponse &&
	     tagController_tmp_tagCon$cache_response_get[133:132] == 2'd0 ;
  assign tagController_tmp_shimSlave_rff$DEQ =
	     tagController_tmp_shimSlave_rff$EMPTY_N &&
	     ssNoSynth_0_r_dwReady$whas ;
  assign tagController_tmp_shimSlave_rff$CLR =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;

  // submodule tagController_tmp_shimSlave_wff
  assign tagController_tmp_shimSlave_wff$D_IN =
	     ssNoSynth_0_w_buffer_ff$EMPTY_N ?
	       ssNoSynth_0_w_buffer_ff$D_OUT :
	       split_0_doPut$wget[146:0] ;
  assign tagController_tmp_shimSlave_wff$ENQ =
	     WILL_FIRE_RL_ssNoSynth_0_w_forwardFlit &&
	     tagController_tmp_shimSlave_wff$FULL_N ;
  assign tagController_tmp_shimSlave_wff$DEQ =
	     WILL_FIRE_RL_tagController_tmp_passCacheWrite ;
  assign tagController_tmp_shimSlave_wff$CLR =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;

  // submodule tagController_tmp_tagCon
  assign tagController_tmp_tagCon$cache_request_put_val =
	     WILL_FIRE_RL_tagController_tmp_passCacheWrite ?
	       MUX_tagController_tmp_tagCon$cache_request_put_1__VAL_1 :
	       MUX_tagController_tmp_tagCon$cache_request_put_1__VAL_2 ;
  assign tagController_tmp_tagCon$memory_response_put_val =
	     WILL_FIRE_RL_tagController_tmp_passMemoryResponseWrite ?
	       MUX_tagController_tmp_tagCon$memory_response_put_1__VAL_1 :
	       MUX_tagController_tmp_tagCon$memory_response_put_1__VAL_2 ;
  assign tagController_tmp_tagCon$EN_cache_request_put =
	     WILL_FIRE_RL_tagController_tmp_passCacheWrite ||
	     WILL_FIRE_RL_tagController_tmp_passCacheRead ;
  assign tagController_tmp_tagCon$EN_cache_response_get =
	     CAN_FIRE_RL_tagController_tmp_passCacheResponse ;
  assign tagController_tmp_tagCon$EN_memory_request_get =
	     tagController_tmp_tagCon$RDY_memory_request_get ;
  assign tagController_tmp_tagCon$EN_memory_response_put =
	     WILL_FIRE_RL_tagController_tmp_passMemoryResponseWrite ||
	     WILL_FIRE_RL_tagController_tmp_passMemoryResponseRead ;

  // submodule tv_encode
  assign tv_encode$trace_data_in_put = f_trace_data_merged$D_OUT ;
  assign tv_encode$EN_reset = 1'b0 ;
  assign tv_encode$EN_trace_data_in_put = CAN_FIRE_RL_mkConnectionGetPut_1 ;
  assign tv_encode$EN_tv_vb_out_get = EN_tv_verifier_info_get_get ;

  // remaining internal signals
  assign IF_IF_merged_0_flitLeft_084_EQ_0_085_THEN_cpu__ETC___d1250 =
	     (IF_merged_0_flitLeft_084_EQ_0_085_THEN_cpu_dme_ETC___d1238 ?
		2'd1 :
		2'd0) +
	     ((cpu$dmem_master_awaddr[63:40] == 24'd0 &&
	       !IF_merged_0_flitLeft_084_EQ_0_085_THEN_cpu_dme_ETC___d1227 &&
	       IF_merged_0_flitLeft_084_EQ_0_085_THEN_cpu_dme_ETC___d1229) ?
		2'd1 :
		2'd0) +
	     (IF_merged_0_flitLeft_084_EQ_0_085_THEN_cpu_dme_ETC___d1248 ?
		2'd1 :
		2'd0) ;
  assign IF_IF_merged_1_flitLeft_103_EQ_0_104_THEN_dm_m_ETC___d1356 =
	     (IF_merged_1_flitLeft_103_EQ_0_104_THEN_dm_mast_ETC___d1344 ?
		2'd1 :
		2'd0) +
	     ((dm_master_nonsynth_awFFD_OUT_BITS_92_TO_29__q1[63:40] ==
	       24'd0 &&
	       !IF_merged_1_flitLeft_103_EQ_0_104_THEN_dm_mast_ETC___d1333 &&
	       IF_merged_1_flitLeft_103_EQ_0_104_THEN_dm_mast_ETC___d1335) ?
		2'd1 :
		2'd0) +
	     (IF_merged_1_flitLeft_103_EQ_0_104_THEN_dm_mast_ETC___d1354 ?
		2'd1 :
		2'd0) ;
  assign IF_NOT_ifcs_0_1_innerRoute_first__102_BIT_1_11_ETC___d2124 =
	     (!ifcs_0_1_innerRoute$D_OUT[1] ||
	      !ssNoSynth_1_ar_buffer_ff$FULL_N) ?
	       ifcs_0_1_innerRoute$D_OUT[2] &&
	       ssNoSynth_2_ar_buffer_ff$FULL_N :
	       ifcs_0_1_innerRoute$D_OUT[1] ;
  assign IF_NOT_ifcs_0_innerRoute_first__465_BIT_1_474__ETC___d1487 =
	     (!ifcs_0_innerRoute$D_OUT[1] ||
	      !IF_split_1_flitLeft_158_EQ_0_159_THEN_ssNoSynt_ETC___d1458) ?
	       ifcs_0_innerRoute$D_OUT[2] &&
	       IF_split_2_flitLeft_187_EQ_0_188_THEN_ssNoSynt_ETC___d1459 :
	       ifcs_0_innerRoute$D_OUT[1] ;
  assign IF_NOT_ifcs_1_1_innerRoute_first__131_BIT_1_13_ETC___d2140 =
	     (!ifcs_1_1_innerRoute$D_OUT[1] ||
	      !ssNoSynth_1_ar_buffer_ff$FULL_N) ?
	       ifcs_1_1_innerRoute$D_OUT[2] &&
	       ssNoSynth_2_ar_buffer_ff$FULL_N :
	       ifcs_1_1_innerRoute$D_OUT[1] ;
  assign IF_NOT_ifcs_1_innerRoute_first__494_BIT_1_498__ETC___d1503 =
	     (!ifcs_1_innerRoute$D_OUT[1] ||
	      !IF_split_1_flitLeft_158_EQ_0_159_THEN_ssNoSynt_ETC___d1458) ?
	       ifcs_1_innerRoute$D_OUT[2] &&
	       IF_split_2_flitLeft_187_EQ_0_188_THEN_ssNoSynt_ETC___d1459 :
	       ifcs_1_innerRoute$D_OUT[1] ;
  assign IF_SEXT_arbiter_1_1_lastSelect_332_333_BIT_0_3_ETC___d2376 =
	     (SEXT_arbiter_1_1_lastSelect_332_333_BIT_0_334__ETC___d2345 ||
	      SEXT_arbiter_1_1_lastSelect_1_336_337_BIT_0_33_ETC___d2351 ||
	      SEXT_arbiter_1_1_firstHot_341_342_BIT_0_343_AN_ETC___d2357) ?
	       x__h92630 | y__h92631 :
	       arbiter_1_1_lastSelect ;
  assign IF_SEXT_arbiter_1_1_lastSelect_332_333_BIT_0_3_ETC___d2382 =
	     (SEXT_arbiter_1_1_lastSelect_332_333_BIT_0_334__ETC___d2345 ||
	      SEXT_arbiter_1_1_lastSelect_1_336_337_BIT_0_33_ETC___d2351 ||
	      SEXT_arbiter_1_1_firstHot_341_342_BIT_0_343_AN_ETC___d2357) ?
	       x__h92818 | y__h92819 :
	       arbiter_1_1_lastSelect_1 ;
  assign IF_SEXT_arbiter_1_1_lastSelect_332_333_BIT_0_3_ETC___d2388 =
	     (SEXT_arbiter_1_1_lastSelect_332_333_BIT_0_334__ETC___d2345 ||
	      SEXT_arbiter_1_1_lastSelect_1_336_337_BIT_0_33_ETC___d2351 ||
	      SEXT_arbiter_1_1_firstHot_341_342_BIT_0_343_AN_ETC___d2357) ?
	       x__h92999 | y__h93000 :
	       arbiter_1_1_firstHot ;
  assign IF_SEXT_arbiter_1_lastSelect_2_152_153_BIT_0_1_ETC___d2176 =
	     (SEXT_arbiter_1_lastSelect_2_152_153_BIT_0_154__ETC___d2160 ||
	      SEXT_arbiter_1_firstHot_1_156_157_BIT_0_158_AN_ETC___d2164) ?
	       x__h80688 | y__h80689 :
	       arbiter_1_lastSelect_2 ;
  assign IF_SEXT_arbiter_1_lastSelect_2_152_153_BIT_0_1_ETC___d2180 =
	     (SEXT_arbiter_1_lastSelect_2_152_153_BIT_0_154__ETC___d2160 ||
	      SEXT_arbiter_1_firstHot_1_156_157_BIT_0_158_AN_ETC___d2164) ?
	       x__h80829 | y__h80830 :
	       arbiter_1_firstHot_1 ;
  assign IF_SEXT_arbiter_1_lastSelect_705_706_BIT_0_707_ETC___d1749 =
	     (SEXT_arbiter_1_lastSelect_705_706_BIT_0_707_AN_ETC___d1718 ||
	      SEXT_arbiter_1_lastSelect_1_709_710_BIT_0_711__ETC___d1724 ||
	      SEXT_arbiter_1_firstHot_714_715_BIT_0_716_AND__ETC___d1730) ?
	       x__h61271 | y__h61272 :
	       arbiter_1_lastSelect ;
  assign IF_SEXT_arbiter_1_lastSelect_705_706_BIT_0_707_ETC___d1755 =
	     (SEXT_arbiter_1_lastSelect_705_706_BIT_0_707_AN_ETC___d1718 ||
	      SEXT_arbiter_1_lastSelect_1_709_710_BIT_0_711__ETC___d1724 ||
	      SEXT_arbiter_1_firstHot_714_715_BIT_0_716_AND__ETC___d1730) ?
	       x__h61459 | y__h61460 :
	       arbiter_1_lastSelect_1 ;
  assign IF_SEXT_arbiter_1_lastSelect_705_706_BIT_0_707_ETC___d1761 =
	     (SEXT_arbiter_1_lastSelect_705_706_BIT_0_707_AN_ETC___d1718 ||
	      SEXT_arbiter_1_lastSelect_1_709_710_BIT_0_711__ETC___d1724 ||
	      SEXT_arbiter_1_firstHot_714_715_BIT_0_716_AND__ETC___d1730) ?
	       x__h61640 | y__h61641 :
	       arbiter_1_firstHot ;
  assign IF_SEXT_arbiter_lastSelect_515_516_BIT_0_517_A_ETC___d1539 =
	     (SEXT_arbiter_lastSelect_515_516_BIT_0_517_AND__ETC___d1523 ||
	      SEXT_arbiter_firstHot_519_520_BIT_0_521_AND_re_ETC___d1527) ?
	       x__h46788 | y__h46789 :
	       arbiter_lastSelect ;
  assign IF_SEXT_arbiter_lastSelect_515_516_BIT_0_517_A_ETC___d1543 =
	     (SEXT_arbiter_lastSelect_515_516_BIT_0_517_AND__ETC___d1523 ||
	      SEXT_arbiter_firstHot_519_520_BIT_0_521_AND_re_ETC___d1527) ?
	       x__h46929 | y__h46930 :
	       arbiter_firstHot ;
  assign IF_cpu_dmem_master_ar_araddr__875_BITS_63_TO_4_ETC___d1901 =
	     (cpu_dmem_master_ar_araddr__875_BITS_63_TO_40_8_ETC___d1889 ?
		2'd1 :
		2'd0) +
	     ((cpu$dmem_master_araddr[63:40] == 24'd0 &&
	       !cpu_dmem_master_ar_araddr__875_ULT_soc_map_m_n_ETC___d1878 &&
	       cpu_dmem_master_ar_araddr__875_MINUS_soc_map_m_ETC___d1880) ?
		2'd1 :
		2'd0) +
	     (cpu_dmem_master_ar_araddr__875_BITS_63_TO_40_8_ETC___d1899 ?
		2'd1 :
		2'd0) ;
  assign IF_dm_master_nonsynth_bufferShim_arff_first__8_ETC___d1992 =
	     (dm_master_nonsynth_bufferShim_arff_first__81_B_ETC___d1980 ?
		2'd1 :
		2'd0) +
	     ((dm_master_nonsynth_bufferShim_arff$D_OUT[92:69] == 24'd0 &&
	       !dm_master_nonsynth_bufferShim_arff_first__81_B_ETC___d1969 &&
	       dm_master_nonsynth_bufferShim_arff_first__81_B_ETC___d1971) ?
		2'd1 :
		2'd0) +
	     (dm_master_nonsynth_bufferShim_arff_first__81_B_ETC___d1990 ?
		2'd1 :
		2'd0) ;
  assign IF_merged_0_flitLeft_084_EQ_0_085_THEN_NOT_cpu_ETC___d1215 =
	     ((merged_0_flitLeft == 8'd0) ?
		!cpu$dmem_master_awvalid || !cpu$dmem_master_wvalid :
		!cpu$dmem_master_wvalid) ||
	     merged_0_flitLeft != 8'd0 ;
  assign IF_merged_0_flitLeft_084_EQ_0_085_THEN_NOT_cpu_ETC___d1285 =
	     (IF_merged_0_flitLeft_084_EQ_0_085_THEN_NOT_cpu_ETC___d1215 ||
	      cpu$dmem_master_awvalid) &&
	     (merged_0_flitLeft != 8'd0 ||
	      !ifcs_0_noRoute_inner_pendingReq && cpu$dmem_master_awvalid) ;
  assign IF_merged_0_flitLeft_084_EQ_0_085_THEN_cpu_dme_ETC___d1208 =
	     (merged_0_flitLeft == 8'd0) ?
	       cpu$dmem_master_awvalid && cpu$dmem_master_wvalid :
	       cpu$dmem_master_wvalid ;
  assign IF_merged_0_flitLeft_084_EQ_0_085_THEN_cpu_dme_ETC___d1227 =
	     cpu$dmem_master_awaddr <
	     soc_map$m_near_mem_io_addr_range[127:64] ;
  assign IF_merged_0_flitLeft_084_EQ_0_085_THEN_cpu_dme_ETC___d1229 =
	     x__h35153 < soc_map$m_near_mem_io_addr_range[63:0] ;
  assign IF_merged_0_flitLeft_084_EQ_0_085_THEN_cpu_dme_ETC___d1232 =
	     cpu$dmem_master_awaddr < soc_map$m_plic_addr_range[127:64] ;
  assign IF_merged_0_flitLeft_084_EQ_0_085_THEN_cpu_dme_ETC___d1234 =
	     x__h35178 < soc_map$m_plic_addr_range[63:0] ;
  assign IF_merged_0_flitLeft_084_EQ_0_085_THEN_cpu_dme_ETC___d1238 =
	     cpu$dmem_master_awaddr[63:40] == 24'd0 &&
	     (IF_merged_0_flitLeft_084_EQ_0_085_THEN_cpu_dme_ETC___d1227 ||
	      !IF_merged_0_flitLeft_084_EQ_0_085_THEN_cpu_dme_ETC___d1229) &&
	     (IF_merged_0_flitLeft_084_EQ_0_085_THEN_cpu_dme_ETC___d1232 ||
	      !IF_merged_0_flitLeft_084_EQ_0_085_THEN_cpu_dme_ETC___d1234) ;
  assign IF_merged_0_flitLeft_084_EQ_0_085_THEN_cpu_dme_ETC___d1248 =
	     cpu$dmem_master_awaddr[63:40] == 24'd0 &&
	     (IF_merged_0_flitLeft_084_EQ_0_085_THEN_cpu_dme_ETC___d1227 ||
	      !IF_merged_0_flitLeft_084_EQ_0_085_THEN_cpu_dme_ETC___d1229) &&
	     !IF_merged_0_flitLeft_084_EQ_0_085_THEN_cpu_dme_ETC___d1232 &&
	     IF_merged_0_flitLeft_084_EQ_0_085_THEN_cpu_dme_ETC___d1234 ;
  assign IF_merged_1_flitLeft_103_EQ_0_104_THEN_NOT_dm__ETC___d1318 =
	     (merged_1_flitLeft == 8'd0) ?
	       !dm_master_nonsynth_awFF$EMPTY_N ||
	       !dm_master_nonsynth_wCanPeek$wget :
	       !dm_master_nonsynth_wCanPeek$wget ;
  assign IF_merged_1_flitLeft_103_EQ_0_104_THEN_dm_mast_ETC___d1314 =
	     (merged_1_flitLeft == 8'd0) ?
	       dm_master_nonsynth_awFF$EMPTY_N &&
	       dm_master_nonsynth_wCanPeek$wget :
	       dm_master_nonsynth_wCanPeek$wget ;
  assign IF_merged_1_flitLeft_103_EQ_0_104_THEN_dm_mast_ETC___d1333 =
	     dm_master_nonsynth_awFF$D_OUT[92:29] <
	     soc_map$m_near_mem_io_addr_range[127:64] ;
  assign IF_merged_1_flitLeft_103_EQ_0_104_THEN_dm_mast_ETC___d1335 =
	     x__h37957 < soc_map$m_near_mem_io_addr_range[63:0] ;
  assign IF_merged_1_flitLeft_103_EQ_0_104_THEN_dm_mast_ETC___d1338 =
	     dm_master_nonsynth_awFF$D_OUT[92:29] <
	     soc_map$m_plic_addr_range[127:64] ;
  assign IF_merged_1_flitLeft_103_EQ_0_104_THEN_dm_mast_ETC___d1340 =
	     x__h37982 < soc_map$m_plic_addr_range[63:0] ;
  assign IF_merged_1_flitLeft_103_EQ_0_104_THEN_dm_mast_ETC___d1344 =
	     dm_master_nonsynth_awFFD_OUT_BITS_92_TO_29__q1[63:40] == 24'd0 &&
	     (IF_merged_1_flitLeft_103_EQ_0_104_THEN_dm_mast_ETC___d1333 ||
	      !IF_merged_1_flitLeft_103_EQ_0_104_THEN_dm_mast_ETC___d1335) &&
	     (IF_merged_1_flitLeft_103_EQ_0_104_THEN_dm_mast_ETC___d1338 ||
	      !IF_merged_1_flitLeft_103_EQ_0_104_THEN_dm_mast_ETC___d1340) ;
  assign IF_merged_1_flitLeft_103_EQ_0_104_THEN_dm_mast_ETC___d1354 =
	     dm_master_nonsynth_awFFD_OUT_BITS_92_TO_29__q1[63:40] == 24'd0 &&
	     (IF_merged_1_flitLeft_103_EQ_0_104_THEN_dm_mast_ETC___d1333 ||
	      !IF_merged_1_flitLeft_103_EQ_0_104_THEN_dm_mast_ETC___d1335) &&
	     !IF_merged_1_flitLeft_103_EQ_0_104_THEN_dm_mast_ETC___d1338 &&
	     IF_merged_1_flitLeft_103_EQ_0_104_THEN_dm_mast_ETC___d1340 ;
  assign IF_split_0_flitLeft_129_EQ_0_130_THEN_ssNoSynt_ETC___d1457 =
	     (split_0_flitLeft == 8'd0) ?
	       ssNoSynth_0_aw_buffer_ff$FULL_N &&
	       ssNoSynth_0_w_buffer_ff$FULL_N :
	       ssNoSynth_0_w_buffer_ff$FULL_N ;
  assign IF_split_1_flitLeft_158_EQ_0_159_THEN_ssNoSynt_ETC___d1458 =
	     (split_1_flitLeft == 8'd0) ?
	       ssNoSynth_1_aw_buffer_ff$FULL_N &&
	       ssNoSynth_1_w_buffer_ff$FULL_N :
	       ssNoSynth_1_w_buffer_ff$FULL_N ;
  assign IF_split_2_flitLeft_187_EQ_0_188_THEN_ssNoSynt_ETC___d1459 =
	     (split_2_flitLeft == 8'd0) ?
	       ssNoSynth_2_aw_buffer_ff$FULL_N &&
	       ssNoSynth_2_w_buffer_ff$FULL_N :
	       ssNoSynth_2_w_buffer_ff$FULL_N ;
  assign SEXT_SEXT_arbiter_1_1_firstHot_341_342_BIT_0_3_ETC__q19 =
	     {2{SEXT_arbiter_1_1_firstHot_341_342_BIT_0_343_AN_ETC___d2357}} ;
  assign SEXT_SEXT_arbiter_1_firstHot_1_156_157_BIT_0_1_ETC__q14 =
	     {2{SEXT_arbiter_1_firstHot_1_156_157_BIT_0_158_AN_ETC___d2164}} ;
  assign SEXT_SEXT_arbiter_1_firstHot_714_715_BIT_0_716_ETC__q9 =
	     {2{SEXT_arbiter_1_firstHot_714_715_BIT_0_716_AND__ETC___d1730}} ;
  assign SEXT_SEXT_arbiter_firstHot_519_520_BIT_0_521_A_ETC__q4 =
	     {2{SEXT_arbiter_firstHot_519_520_BIT_0_521_AND_re_ETC___d1527}} ;
  assign SEXT_arbiter_1_1_firstHot_341_342_BIT_0_343_AN_ETC___d2357 =
	     x__h92158 | y__h92159 ;
  assign SEXT_arbiter_1_1_firstHot__q16 = {2{arbiter_1_1_firstHot}} ;
  assign SEXT_arbiter_1_1_lastSelect_1_336_337_BIT_0_33_ETC___d2351 =
	     x__h92022 | y__h92023 ;
  assign SEXT_arbiter_1_1_lastSelect_1__q18 = {2{arbiter_1_1_lastSelect_1}} ;
  assign SEXT_arbiter_1_1_lastSelect_332_333_BIT_0_334__ETC___d2345 =
	     x__h91871 | y__h91872 ;
  assign SEXT_arbiter_1_1_lastSelect__q17 = {2{arbiter_1_1_lastSelect}} ;
  assign SEXT_arbiter_1_firstHot_1_156_157_BIT_0_158_AN_ETC___d2164 =
	     x__h80323 | y__h80324 ;
  assign SEXT_arbiter_1_firstHot_1__q12 = {2{arbiter_1_firstHot_1}} ;
  assign SEXT_arbiter_1_firstHot_714_715_BIT_0_716_AND__ETC___d1730 =
	     x__h60799 | y__h60800 ;
  assign SEXT_arbiter_1_firstHot__q6 = {2{arbiter_1_firstHot}} ;
  assign SEXT_arbiter_1_lastSelect_1_709_710_BIT_0_711__ETC___d1724 =
	     x__h60663 | y__h60664 ;
  assign SEXT_arbiter_1_lastSelect_1__q8 = {2{arbiter_1_lastSelect_1}} ;
  assign SEXT_arbiter_1_lastSelect_2_152_153_BIT_0_154__ETC___d2160 =
	     x__h80220 | y__h80221 ;
  assign SEXT_arbiter_1_lastSelect_2__q13 = {2{arbiter_1_lastSelect_2}} ;
  assign SEXT_arbiter_1_lastSelect_705_706_BIT_0_707_AN_ETC___d1718 =
	     x__h60512 | y__h60513 ;
  assign SEXT_arbiter_1_lastSelect__q7 = {2{arbiter_1_lastSelect}} ;
  assign SEXT_arbiter_firstHot_519_520_BIT_0_521_AND_re_ETC___d1527 =
	     x__h46423 | y__h46424 ;
  assign SEXT_arbiter_firstHot__q2 = {2{arbiter_firstHot}} ;
  assign SEXT_arbiter_lastSelect_515_516_BIT_0_517_AND__ETC___d1523 =
	     x__h46320 | y__h46321 ;
  assign SEXT_arbiter_lastSelect__q3 = {2{arbiter_lastSelect}} ;
  assign SEXT_x0747__q15 = {2{x__h80747}} ;
  assign SEXT_x1333__q10 = {2{x__h61333}} ;
  assign SEXT_x1367__q11 = {2{x__h61367}} ;
  assign SEXT_x2692__q20 = {2{x__h92692}} ;
  assign SEXT_x2726__q21 = {2{x__h92726}} ;
  assign SEXT_x6847__q5 = {2{x__h46847}} ;
  assign a_awid__h36313 = { 1'd0, cpu$dmem_master_awid } ;
  assign araddr__h10786 =
	     { 24'd0, tagController_tmp_tagCon$memory_request_get[205:166] } ;
  assign arcache__h10791 =
	     tagController_tmp_tagCon$memory_request_get[7] ? 4'd0 : 4'd15 ;
  assign arlen__h10787 =
	     { 6'd0, tagController_tmp_tagCon$memory_request_get[4:3] } ;
  assign aw_awaddr__h8469 = { 24'd0, x__h8500 } ;
  assign cpu_dmem_master_ar_araddr__875_BITS_63_TO_40_8_ETC___d1889 =
	     cpu$dmem_master_araddr[63:40] == 24'd0 &&
	     (cpu_dmem_master_ar_araddr__875_ULT_soc_map_m_n_ETC___d1878 ||
	      !cpu_dmem_master_ar_araddr__875_MINUS_soc_map_m_ETC___d1880) &&
	     (cpu_dmem_master_ar_araddr__875_ULT_soc_map_m_p_ETC___d1883 ||
	      !cpu_dmem_master_ar_araddr__875_MINUS_soc_map_m_ETC___d1885) ;
  assign cpu_dmem_master_ar_araddr__875_BITS_63_TO_40_8_ETC___d1899 =
	     cpu$dmem_master_araddr[63:40] == 24'd0 &&
	     (cpu_dmem_master_ar_araddr__875_ULT_soc_map_m_n_ETC___d1878 ||
	      !cpu_dmem_master_ar_araddr__875_MINUS_soc_map_m_ETC___d1880) &&
	     !cpu_dmem_master_ar_araddr__875_ULT_soc_map_m_p_ETC___d1883 &&
	     cpu_dmem_master_ar_araddr__875_MINUS_soc_map_m_ETC___d1885 ;
  assign cpu_dmem_master_ar_araddr__875_MINUS_soc_map_m_ETC___d1880 =
	     x__h69577 < soc_map$m_near_mem_io_addr_range[63:0] ;
  assign cpu_dmem_master_ar_araddr__875_MINUS_soc_map_m_ETC___d1885 =
	     x__h69602 < soc_map$m_plic_addr_range[63:0] ;
  assign cpu_dmem_master_ar_araddr__875_ULT_soc_map_m_n_ETC___d1878 =
	     cpu$dmem_master_araddr <
	     soc_map$m_near_mem_io_addr_range[127:64] ;
  assign cpu_dmem_master_ar_araddr__875_ULT_soc_map_m_p_ETC___d1883 =
	     cpu$dmem_master_araddr < soc_map$m_plic_addr_range[127:64] ;
  assign dm_master_nonsynth_awFFD_OUT_BITS_92_TO_29__q1 =
	     dm_master_nonsynth_awFF$D_OUT[92:29] ;
  assign dm_master_nonsynth_bufferShim_arff_first__81_B_ETC___d1969 =
	     dm_master_nonsynth_bufferShim_arff$D_OUT[92:29] <
	     soc_map$m_near_mem_io_addr_range[127:64] ;
  assign dm_master_nonsynth_bufferShim_arff_first__81_B_ETC___d1971 =
	     x__h72055 < soc_map$m_near_mem_io_addr_range[63:0] ;
  assign dm_master_nonsynth_bufferShim_arff_first__81_B_ETC___d1974 =
	     dm_master_nonsynth_bufferShim_arff$D_OUT[92:29] <
	     soc_map$m_plic_addr_range[127:64] ;
  assign dm_master_nonsynth_bufferShim_arff_first__81_B_ETC___d1976 =
	     x__h72080 < soc_map$m_plic_addr_range[63:0] ;
  assign dm_master_nonsynth_bufferShim_arff_first__81_B_ETC___d1980 =
	     dm_master_nonsynth_bufferShim_arff$D_OUT[92:69] == 24'd0 &&
	     (dm_master_nonsynth_bufferShim_arff_first__81_B_ETC___d1969 ||
	      !dm_master_nonsynth_bufferShim_arff_first__81_B_ETC___d1971) &&
	     (dm_master_nonsynth_bufferShim_arff_first__81_B_ETC___d1974 ||
	      !dm_master_nonsynth_bufferShim_arff_first__81_B_ETC___d1976) ;
  assign dm_master_nonsynth_bufferShim_arff_first__81_B_ETC___d1990 =
	     dm_master_nonsynth_bufferShim_arff$D_OUT[92:69] == 24'd0 &&
	     (dm_master_nonsynth_bufferShim_arff_first__81_B_ETC___d1969 ||
	      !dm_master_nonsynth_bufferShim_arff_first__81_B_ETC___d1971) &&
	     !dm_master_nonsynth_bufferShim_arff_first__81_B_ETC___d1974 &&
	     dm_master_nonsynth_bufferShim_arff_first__81_B_ETC___d1976 ;
  assign dm_master_nonsynth_bufferShim_arff_i_notEmpty__ETC___d486 =
	     dm_master_nonsynth_bufferShim_arff$EMPTY_N &&
	     (!dm_master_nonsynth_takeUpperR$EMPTY_N ||
	      dm_master_nonsynth_bufferShim_arff$D_OUT[96:93] ==
	      dm_master_nonsynth_currentRID) ;
  assign dm_master_nonsynth_bufferShim_awff_i_notEmpty__ETC___d471 =
	     dm_master_nonsynth_bufferShim_awff$EMPTY_N &&
	     (!dm_master_nonsynth_takeUpperW$EMPTY_N ||
	      dm_master_nonsynth_bufferShim_awff$D_OUT[96:93] ==
	      dm_master_nonsynth_currentWID) ;
  assign dm_master_nonsynth_takeUpperW_i_notEmpty__39_A_ETC___d1325 =
	     dm_master_nonsynth_takeUpperW$EMPTY_N &&
	     IF_merged_1_flitLeft_103_EQ_0_104_THEN_dm_mast_ETC___d1314 &&
	     ifcs_1_innerReq$FULL_N &&
	     ifcs_1_innerRoute$FULL_N &&
	     (IF_merged_1_flitLeft_103_EQ_0_104_THEN_NOT_dm__ETC___d1318 ||
	      merged_1_flitLeft != 8'd0 ||
	      dm_master_nonsynth_awFF$EMPTY_N) ;
  assign dm_master_nonsynth_wCanPeek_whas__28_AND_dm_ma_ETC___d1378 =
	     dm_master_nonsynth_wCanPeek$wget &&
	     dm_master_nonsynth_takeUpperW$EMPTY_N &&
	     IF_merged_1_flitLeft_103_EQ_0_104_THEN_dm_mast_ETC___d1314 &&
	     ifcs_1_innerReq$FULL_N &&
	     (IF_merged_1_flitLeft_103_EQ_0_104_THEN_NOT_dm__ETC___d1318 ||
	      merged_1_flitLeft != 8'd0 ||
	      dm_master_nonsynth_awFF$EMPTY_N) ;
  assign fatReq_arid__h70145 = { 1'd0, cpu$dmem_master_arid } ;
  assign plic_RDY_server_reset_request_put__42_AND_cpu__ETC___d248 =
	     plic$RDY_server_reset_request_put &&
	     cpu$RDY_hart0_server_reset_request_put &&
	     f_reset_reqs$EMPTY_N &&
	     f_reset_requestor$FULL_N ;
  assign reqWires_1_0_whas__691_AND_reqWires_1_0_wget___ETC___d1701 =
	     CAN_FIRE_RL_craftReq_2 && reqWires_1_0$wget ||
	     CAN_FIRE_RL_craftReq_3 && reqWires_1_1$wget ||
	     CAN_FIRE_RL_craftReq_4 && reqWires_1_2$wget ;
  assign reqWires_1_1_0_whas__318_AND_reqWires_1_1_0_wg_ETC___d2328 =
	     CAN_FIRE_RL_craftReq_7 && reqWires_1_1_0$wget ||
	     CAN_FIRE_RL_craftReq_8 && reqWires_1_1_1_1$wget ||
	     CAN_FIRE_RL_craftReq_9 && reqWires_1_1_2$wget ;
  assign split_0_doPut_whas__121_AND_split_0_doPut_wget_ETC___d1128 =
	     CAN_FIRE_RL_sink_selected &&
	     (split_0_doPut$wget[245] ||
	      ssNoSynth_0_aw_buffer_ff$FULL_N &&
	      ssNoSynth_0_w_buffer_ff$FULL_N) ;
  assign split_1_doPut_whas__150_AND_split_1_doPut_wget_ETC___d1157 =
	     CAN_FIRE_RL_sink_selected_1 &&
	     (split_1_doPut$wget[245] ||
	      ssNoSynth_1_aw_buffer_ff$FULL_N &&
	      ssNoSynth_1_w_buffer_ff$FULL_N) ;
  assign split_2_doPut_whas__179_AND_split_2_doPut_wget_ETC___d1186 =
	     CAN_FIRE_RL_sink_selected_2 &&
	     (split_2_doPut$wget[245] ||
	      ssNoSynth_2_aw_buffer_ff$FULL_N &&
	      ssNoSynth_2_w_buffer_ff$FULL_N) ;
  assign state_1_1_149_AND_activeSource_1_0_1_216_217_A_ETC___d2219 =
	     state_1_1 && activeSource_1_0_1 && ifcs_0_1_innerRoute$EMPTY_N &&
	     ((!ifcs_0_1_innerRoute$D_OUT[0] ||
	       !ssNoSynth_0_ar_buffer_ff$FULL_N) ?
		IF_NOT_ifcs_0_1_innerRoute_first__102_BIT_1_11_ETC___d2124 :
		ifcs_0_1_innerRoute$D_OUT[0]) ;
  assign state_1_1_149_AND_activeSource_1_1_1_256_257_A_ETC___d2259 =
	     state_1_1 && activeSource_1_1_1 && ifcs_1_1_innerRoute$EMPTY_N &&
	     ((!ifcs_1_1_innerRoute$D_OUT[0] ||
	       !ssNoSynth_0_ar_buffer_ff$FULL_N) ?
		IF_NOT_ifcs_1_1_innerRoute_first__131_BIT_1_13_ETC___d2140 :
		ifcs_1_1_innerRoute$D_OUT[0]) ;
  assign state_1_1_1_329_AND_activeSource_1_1_0_423_424_ETC___d2426 =
	     state_1_1_1 && activeSource_1_1_0 &&
	     ifcs_0_1_routeBack$EMPTY_N &&
	     ((!ifcs_0_1_routeBack$D_OUT[0] ||
	       !(!CAN_FIRE_RL_ifcs_0_1_drainNoRouteResponse)) ?
		ifcs_0_1_routeBack$D_OUT[1] &&
		!CAN_FIRE_RL_ifcs_1_1_drainNoRouteResponse :
		ifcs_0_1_routeBack$D_OUT[0]) ;
  assign state_1_1_1_329_AND_activeSource_1_1_1_1_459_4_ETC___d2462 =
	     state_1_1_1 && activeSource_1_1_1_1 &&
	     ifcs_1_1_routeBack$EMPTY_N &&
	     ((!ifcs_1_1_routeBack$D_OUT[0] ||
	       !(!CAN_FIRE_RL_ifcs_0_1_drainNoRouteResponse)) ?
		ifcs_1_1_routeBack$D_OUT[1] &&
		!CAN_FIRE_RL_ifcs_1_1_drainNoRouteResponse :
		ifcs_1_1_routeBack$D_OUT[0]) ;
  assign state_1_1_1_329_AND_activeSource_1_1_2_495_496_ETC___d2498 =
	     state_1_1_1 && activeSource_1_1_2 &&
	     ifcs_2_1_routeBack$EMPTY_N &&
	     ((!ifcs_2_1_routeBack$D_OUT[0] ||
	       !(!CAN_FIRE_RL_ifcs_0_1_drainNoRouteResponse)) ?
		ifcs_2_1_routeBack$D_OUT[1] &&
		!CAN_FIRE_RL_ifcs_1_1_drainNoRouteResponse :
		ifcs_2_1_routeBack$D_OUT[0]) ;
  assign state_1_702_AND_activeSource_1_0_790_791_AND_i_ETC___d1793 =
	     state_1 && activeSource_1_0 && ifcs_0_routeBack$EMPTY_N &&
	     ((!ifcs_0_routeBack$D_OUT[0] ||
	       !(!CAN_FIRE_RL_ifcs_0_drainNoRouteResponse)) ?
		ifcs_0_routeBack$D_OUT[1] &&
		!CAN_FIRE_RL_ifcs_1_drainNoRouteResponse :
		ifcs_0_routeBack$D_OUT[0]) ;
  assign state_1_702_AND_activeSource_1_1_823_824_AND_i_ETC___d1826 =
	     state_1 && activeSource_1_1 && ifcs_1_routeBack$EMPTY_N &&
	     ((!ifcs_1_routeBack$D_OUT[0] ||
	       !(!CAN_FIRE_RL_ifcs_0_drainNoRouteResponse)) ?
		ifcs_1_routeBack$D_OUT[1] &&
		!CAN_FIRE_RL_ifcs_1_drainNoRouteResponse :
		ifcs_1_routeBack$D_OUT[0]) ;
  assign state_1_702_AND_activeSource_1_2_857_858_AND_i_ETC___d1860 =
	     state_1 && activeSource_1_2 && ifcs_2_routeBack$EMPTY_N &&
	     ((!ifcs_2_routeBack$D_OUT[0] ||
	       !(!CAN_FIRE_RL_ifcs_0_drainNoRouteResponse)) ?
		ifcs_2_routeBack$D_OUT[1] &&
		!CAN_FIRE_RL_ifcs_1_drainNoRouteResponse :
		ifcs_2_routeBack$D_OUT[0]) ;
  assign state_512_AND_activeSource_0_585_586_AND_ifcs__ETC___d1588 =
	     state && activeSource_0 && ifcs_0_innerRoute$EMPTY_N &&
	     ((!ifcs_0_innerRoute$D_OUT[0] ||
	       !IF_split_0_flitLeft_129_EQ_0_130_THEN_ssNoSynt_ETC___d1457) ?
		IF_NOT_ifcs_0_innerRoute_first__465_BIT_1_474__ETC___d1487 :
		ifcs_0_innerRoute$D_OUT[0]) ;
  assign state_512_AND_activeSource_1_629_630_AND_ifcs__ETC___d1632 =
	     state && activeSource_1 && ifcs_1_innerRoute$EMPTY_N &&
	     ((!ifcs_1_innerRoute$D_OUT[0] ||
	       !IF_split_0_flitLeft_129_EQ_0_130_THEN_ssNoSynt_ETC___d1457) ?
		IF_NOT_ifcs_1_innerRoute_first__494_BIT_1_498__ETC___d1503 :
		ifcs_1_innerRoute$D_OUT[0]) ;
  assign x__h10867 =
	     (tagController_tmp_tagCon$memory_request_get[158:157] == 2'd0) ?
	       arcache__h10791 :
	       4'd0 ;
  assign x__h24260 =
	     msNoSynth_1_r_buffer_ff$EMPTY_N ?
	       msNoSynth_1_r_buffer_ff$D_OUT[132:5] :
	       msNoSynth_1_r_buffer_enqw$wget[132:5] ;
  assign x__h35153 =
	     cpu$dmem_master_awaddr -
	     soc_map$m_near_mem_io_addr_range[127:64] ;
  assign x__h35178 =
	     cpu$dmem_master_awaddr - soc_map$m_plic_addr_range[127:64] ;
  assign x__h37957 =
	     dm_master_nonsynth_awFF$D_OUT[92:29] -
	     soc_map$m_near_mem_io_addr_range[127:64] ;
  assign x__h37982 =
	     dm_master_nonsynth_awFF$D_OUT[92:29] -
	     soc_map$m_plic_addr_range[127:64] ;
  assign x__h46320 =
	     SEXT_arbiter_lastSelect__q3[0] &
	     (CAN_FIRE_RL_craftReq && reqWires_0$wget) ;
  assign x__h46423 =
	     SEXT_arbiter_firstHot__q2[0] &
	     (CAN_FIRE_RL_craftReq && reqWires_0$wget) ;
  assign x__h46788 =
	     SEXT_SEXT_arbiter_firstHot_519_520_BIT_0_521_A_ETC__q4[0] &
	     arbiter_firstHot ;
  assign x__h46847 =
	     !SEXT_arbiter_firstHot_519_520_BIT_0_521_AND_re_ETC___d1527 &&
	     SEXT_arbiter_lastSelect_515_516_BIT_0_517_AND__ETC___d1523 ;
  assign x__h46929 = SEXT_x6847__q5[0] & arbiter_firstHot ;
  assign x__h4924 =
	     tagController_tmp_shimSlave_arff$D_OUT[97:93] -
	     tagController_tmp_shimSlave_awff$D_OUT[97:93] ;
  assign x__h60512 = x__h60514 | y__h60515 ;
  assign x__h60514 =
	     SEXT_arbiter_1_lastSelect__q7[0] &
	     (CAN_FIRE_RL_craftReq_2 && reqWires_1_0$wget) ;
  assign x__h60663 = x__h60665 | y__h60666 ;
  assign x__h60665 =
	     SEXT_arbiter_1_lastSelect_1__q8[0] &
	     (CAN_FIRE_RL_craftReq_2 && reqWires_1_0$wget) ;
  assign x__h60799 = x__h60801 | y__h60802 ;
  assign x__h60801 =
	     SEXT_arbiter_1_firstHot__q6[0] &
	     (CAN_FIRE_RL_craftReq_2 && reqWires_1_0$wget) ;
  assign x__h61271 = x__h61273 | y__h61274 ;
  assign x__h61273 =
	     SEXT_SEXT_arbiter_1_firstHot_714_715_BIT_0_716_ETC__q9[0] &
	     arbiter_1_firstHot ;
  assign x__h61333 =
	     !SEXT_arbiter_1_firstHot_714_715_BIT_0_716_AND__ETC___d1730 &&
	     SEXT_arbiter_1_lastSelect_1_709_710_BIT_0_711__ETC___d1724 ;
  assign x__h61367 =
	     !SEXT_arbiter_1_lastSelect_1_709_710_BIT_0_711__ETC___d1724 &&
	     !SEXT_arbiter_1_firstHot_714_715_BIT_0_716_AND__ETC___d1730 &&
	     SEXT_arbiter_1_lastSelect_705_706_BIT_0_707_AN_ETC___d1718 ;
  assign x__h61459 = x__h61461 | y__h61462 ;
  assign x__h61461 = SEXT_x1333__q10[0] & arbiter_1_firstHot ;
  assign x__h61640 = x__h61642 | y__h61643 ;
  assign x__h61642 = SEXT_x1367__q11[0] & arbiter_1_firstHot ;
  assign x__h69577 =
	     cpu$dmem_master_araddr -
	     soc_map$m_near_mem_io_addr_range[127:64] ;
  assign x__h69602 =
	     cpu$dmem_master_araddr - soc_map$m_plic_addr_range[127:64] ;
  assign x__h72055 =
	     dm_master_nonsynth_bufferShim_arff$D_OUT[92:29] -
	     soc_map$m_near_mem_io_addr_range[127:64] ;
  assign x__h72080 =
	     dm_master_nonsynth_bufferShim_arff$D_OUT[92:29] -
	     soc_map$m_plic_addr_range[127:64] ;
  assign x__h7558 =
	     tagController_tmp_shimSlave_awff$D_OUT[97:93] -
	     tagController_tmp_shimSlave_arff$D_OUT[97:93] ;
  assign x__h80220 =
	     SEXT_arbiter_1_lastSelect_2__q13[0] &
	     (CAN_FIRE_RL_craftReq_5 && reqWires_1_0_1$wget) ;
  assign x__h80323 =
	     SEXT_arbiter_1_firstHot_1__q12[0] &
	     (CAN_FIRE_RL_craftReq_5 && reqWires_1_0_1$wget) ;
  assign x__h80688 =
	     SEXT_SEXT_arbiter_1_firstHot_1_156_157_BIT_0_1_ETC__q14[0] &
	     arbiter_1_firstHot_1 ;
  assign x__h80747 =
	     !SEXT_arbiter_1_firstHot_1_156_157_BIT_0_158_AN_ETC___d2164 &&
	     SEXT_arbiter_1_lastSelect_2_152_153_BIT_0_154__ETC___d2160 ;
  assign x__h80829 = SEXT_x0747__q15[0] & arbiter_1_firstHot_1 ;
  assign x__h8500 =
	     { tagController_tmp_tagCon$memory_request_get[205:170], 4'd0 } ;
  assign x__h8545 =
	     tagController_tmp_tagCon$memory_request_get[155] ? 4'd0 : 4'd15 ;
  assign x__h91871 = x__h91873 | y__h91874 ;
  assign x__h91873 =
	     SEXT_arbiter_1_1_lastSelect__q17[0] &
	     (CAN_FIRE_RL_craftReq_7 && reqWires_1_1_0$wget) ;
  assign x__h92022 = x__h92024 | y__h92025 ;
  assign x__h92024 =
	     SEXT_arbiter_1_1_lastSelect_1__q18[0] &
	     (CAN_FIRE_RL_craftReq_7 && reqWires_1_1_0$wget) ;
  assign x__h92158 = x__h92160 | y__h92161 ;
  assign x__h92160 =
	     SEXT_arbiter_1_1_firstHot__q16[0] &
	     (CAN_FIRE_RL_craftReq_7 && reqWires_1_1_0$wget) ;
  assign x__h92630 = x__h92632 | y__h92633 ;
  assign x__h92632 =
	     SEXT_SEXT_arbiter_1_1_firstHot_341_342_BIT_0_3_ETC__q19[0] &
	     arbiter_1_1_firstHot ;
  assign x__h92692 =
	     !SEXT_arbiter_1_1_firstHot_341_342_BIT_0_343_AN_ETC___d2357 &&
	     SEXT_arbiter_1_1_lastSelect_1_336_337_BIT_0_33_ETC___d2351 ;
  assign x__h92726 =
	     !SEXT_arbiter_1_1_lastSelect_1_336_337_BIT_0_33_ETC___d2351 &&
	     !SEXT_arbiter_1_1_firstHot_341_342_BIT_0_343_AN_ETC___d2357 &&
	     SEXT_arbiter_1_1_lastSelect_332_333_BIT_0_334__ETC___d2345 ;
  assign x__h92818 = x__h92820 | y__h92821 ;
  assign x__h92820 = SEXT_x2692__q20[0] & arbiter_1_1_firstHot ;
  assign x__h92999 = x__h93001 | y__h93002 ;
  assign x__h93001 = SEXT_x2726__q21[0] & arbiter_1_1_firstHot ;
  assign x_araddr__h10803 =
	     (tagController_tmp_tagCon$memory_request_get[158:157] == 2'd0) ?
	       araddr__h10786 :
	       64'hAAAAAAAAAAAAAAAA ;
  assign x_arid__h10802 =
	     (tagController_tmp_tagCon$memory_request_get[158:157] == 2'd0) ?
	       tagController_tmp_tagCon$memory_request_get[165:160] :
	       6'd0 ;
  assign x_arlen__h10804 =
	     (tagController_tmp_tagCon$memory_request_get[158:157] == 2'd0) ?
	       arlen__h10787 :
	       8'd0 ;
  assign x_arsize_val__h10849 =
	     (tagController_tmp_tagCon$memory_request_get[158:157] == 2'd0) ?
	       tagController_tmp_tagCon$memory_request_get[2:0] :
	       3'b0 ;
  assign x_port1__read__h70706 =
	     CAN_FIRE_RL_ifcs_0_1_nonRoutableFlit ?
	       ifcs_0_1_noRoute_flitCount$port0__write_1 :
	       ifcs_0_1_noRoute_flitCount ;
  assign x_port1__read__h73154 =
	     CAN_FIRE_RL_ifcs_1_1_nonRoutableFlit ?
	       ifcs_1_1_noRoute_flitCount$port0__write_1 :
	       ifcs_1_1_noRoute_flitCount ;
  assign x_rdata__h24210 =
	     dm_master_nonsynth_takeUpperR$D_OUT ?
	       x__h24260[127:64] :
	       x__h24260[63:0] ;
  assign x_rid__h24209 =
	     msNoSynth_1_r_buffer_ff$EMPTY_N ?
	       msNoSynth_1_r_buffer_ff$D_OUT[136:133] :
	       msNoSynth_1_r_buffer_enqw$wget[136:133] ;
  assign y__h46321 =
	     SEXT_arbiter_firstHot__q2[0] &
	     (CAN_FIRE_RL_craftReq_1 && reqWires_1$wget) ;
  assign y__h46424 =
	     SEXT_arbiter_lastSelect__q3[0] &
	     (CAN_FIRE_RL_craftReq_1 && reqWires_1$wget) ;
  assign y__h46789 = SEXT_x6847__q5[0] & arbiter_lastSelect ;
  assign y__h46930 =
	     SEXT_SEXT_arbiter_firstHot_519_520_BIT_0_521_A_ETC__q4[0] &
	     arbiter_lastSelect ;
  assign y__h60513 =
	     SEXT_arbiter_1_firstHot__q6[0] &
	     (CAN_FIRE_RL_craftReq_4 && reqWires_1_2$wget) ;
  assign y__h60515 =
	     SEXT_arbiter_1_lastSelect_1__q8[0] &
	     (CAN_FIRE_RL_craftReq_3 && reqWires_1_1$wget) ;
  assign y__h60664 =
	     SEXT_arbiter_1_lastSelect__q7[0] &
	     (CAN_FIRE_RL_craftReq_4 && reqWires_1_2$wget) ;
  assign y__h60666 =
	     SEXT_arbiter_1_firstHot__q6[0] &
	     (CAN_FIRE_RL_craftReq_3 && reqWires_1_1$wget) ;
  assign y__h60800 =
	     SEXT_arbiter_1_lastSelect_1__q8[0] &
	     (CAN_FIRE_RL_craftReq_4 && reqWires_1_2$wget) ;
  assign y__h60802 =
	     SEXT_arbiter_1_lastSelect__q7[0] &
	     (CAN_FIRE_RL_craftReq_3 && reqWires_1_1$wget) ;
  assign y__h61272 = SEXT_x1367__q11[0] & arbiter_1_lastSelect ;
  assign y__h61274 = SEXT_x1333__q10[0] & arbiter_1_lastSelect_1 ;
  assign y__h61460 =
	     SEXT_SEXT_arbiter_1_firstHot_714_715_BIT_0_716_ETC__q9[0] &
	     arbiter_1_lastSelect ;
  assign y__h61462 = SEXT_x1367__q11[0] & arbiter_1_lastSelect_1 ;
  assign y__h61641 = SEXT_x1333__q10[0] & arbiter_1_lastSelect ;
  assign y__h61643 =
	     SEXT_SEXT_arbiter_1_firstHot_714_715_BIT_0_716_ETC__q9[0] &
	     arbiter_1_lastSelect_1 ;
  assign y__h80221 =
	     SEXT_arbiter_1_firstHot_1__q12[0] &
	     (CAN_FIRE_RL_craftReq_6 && reqWires_1_1_1$wget) ;
  assign y__h80324 =
	     SEXT_arbiter_1_lastSelect_2__q13[0] &
	     (CAN_FIRE_RL_craftReq_6 && reqWires_1_1_1$wget) ;
  assign y__h80689 = SEXT_x0747__q15[0] & arbiter_1_lastSelect_2 ;
  assign y__h80830 =
	     SEXT_SEXT_arbiter_1_firstHot_1_156_157_BIT_0_1_ETC__q14[0] &
	     arbiter_1_lastSelect_2 ;
  assign y__h91872 =
	     SEXT_arbiter_1_1_firstHot__q16[0] &
	     (CAN_FIRE_RL_craftReq_9 && reqWires_1_1_2$wget) ;
  assign y__h91874 =
	     SEXT_arbiter_1_1_lastSelect_1__q18[0] &
	     (CAN_FIRE_RL_craftReq_8 && reqWires_1_1_1_1$wget) ;
  assign y__h92023 =
	     SEXT_arbiter_1_1_lastSelect__q17[0] &
	     (CAN_FIRE_RL_craftReq_9 && reqWires_1_1_2$wget) ;
  assign y__h92025 =
	     SEXT_arbiter_1_1_firstHot__q16[0] &
	     (CAN_FIRE_RL_craftReq_8 && reqWires_1_1_1_1$wget) ;
  assign y__h92159 =
	     SEXT_arbiter_1_1_lastSelect_1__q18[0] &
	     (CAN_FIRE_RL_craftReq_9 && reqWires_1_1_2$wget) ;
  assign y__h92161 =
	     SEXT_arbiter_1_1_lastSelect__q17[0] &
	     (CAN_FIRE_RL_craftReq_8 && reqWires_1_1_1_1$wget) ;
  assign y__h92631 = SEXT_x2726__q21[0] & arbiter_1_1_lastSelect ;
  assign y__h92633 = SEXT_x2692__q20[0] & arbiter_1_1_lastSelect_1 ;
  assign y__h92819 =
	     SEXT_SEXT_arbiter_1_1_firstHot_341_342_BIT_0_3_ETC__q19[0] &
	     arbiter_1_1_lastSelect ;
  assign y__h92821 = SEXT_x2726__q21[0] & arbiter_1_1_lastSelect_1 ;
  assign y__h93000 = SEXT_x2692__q20[0] & arbiter_1_1_lastSelect ;
  assign y__h93002 =
	     SEXT_SEXT_arbiter_1_1_firstHot_341_342_BIT_0_3_ETC__q19[0] &
	     arbiter_1_1_lastSelect_1 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        activeSource_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	activeSource_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	activeSource_1_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	activeSource_1_0_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	activeSource_1_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	activeSource_1_1_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	activeSource_1_1_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	activeSource_1_1_1_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	activeSource_1_1_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	activeSource_1_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	arbiter_1_1_firstHot <= `BSV_ASSIGNMENT_DELAY 1'd1;
	arbiter_1_1_lastSelect <= `BSV_ASSIGNMENT_DELAY 1'd0;
	arbiter_1_1_lastSelect_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	arbiter_1_firstHot <= `BSV_ASSIGNMENT_DELAY 1'd1;
	arbiter_1_firstHot_1 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	arbiter_1_lastSelect <= `BSV_ASSIGNMENT_DELAY 1'd0;
	arbiter_1_lastSelect_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	arbiter_1_lastSelect_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	arbiter_firstHot <= `BSV_ASSIGNMENT_DELAY 1'd1;
	arbiter_lastSelect <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ifcs_0_1_noRoute_currentReq <= `BSV_ASSIGNMENT_DELAY
	    97'h0AAAAAAAAAAAAAAAAAAAAAAAA;
	ifcs_0_1_noRoute_flitCount <= `BSV_ASSIGNMENT_DELAY 9'd0;
	ifcs_0_1_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ifcs_0_1_state_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ifcs_0_noRoute_inner_currentReq <= `BSV_ASSIGNMENT_DELAY
	    97'h0AAAAAAAAAAAAAAAAAAAAAAAA;
	ifcs_0_noRoute_inner_pendingReq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ifcs_0_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ifcs_0_state_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ifcs_1_1_noRoute_currentReq <= `BSV_ASSIGNMENT_DELAY
	    97'h0AAAAAAAAAAAAAAAAAAAAAAAA;
	ifcs_1_1_noRoute_flitCount <= `BSV_ASSIGNMENT_DELAY 9'd0;
	ifcs_1_1_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ifcs_1_1_state_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ifcs_1_noRoute_inner_currentReq <= `BSV_ASSIGNMENT_DELAY
	    97'h0AAAAAAAAAAAAAAAAAAAAAAAA;
	ifcs_1_noRoute_inner_pendingReq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ifcs_1_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ifcs_1_state_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ifcs_2_1_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ifcs_2_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
	merged_0_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	merged_1_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	split_0_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	split_1_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	split_2_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	state <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_1_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_1_1_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (activeSource_0$EN)
	  activeSource_0 <= `BSV_ASSIGNMENT_DELAY activeSource_0$D_IN;
	if (activeSource_1$EN)
	  activeSource_1 <= `BSV_ASSIGNMENT_DELAY activeSource_1$D_IN;
	if (activeSource_1_0$EN)
	  activeSource_1_0 <= `BSV_ASSIGNMENT_DELAY activeSource_1_0$D_IN;
	if (activeSource_1_0_1$EN)
	  activeSource_1_0_1 <= `BSV_ASSIGNMENT_DELAY activeSource_1_0_1$D_IN;
	if (activeSource_1_1$EN)
	  activeSource_1_1 <= `BSV_ASSIGNMENT_DELAY activeSource_1_1$D_IN;
	if (activeSource_1_1_0$EN)
	  activeSource_1_1_0 <= `BSV_ASSIGNMENT_DELAY activeSource_1_1_0$D_IN;
	if (activeSource_1_1_1$EN)
	  activeSource_1_1_1 <= `BSV_ASSIGNMENT_DELAY activeSource_1_1_1$D_IN;
	if (activeSource_1_1_1_1$EN)
	  activeSource_1_1_1_1 <= `BSV_ASSIGNMENT_DELAY
	      activeSource_1_1_1_1$D_IN;
	if (activeSource_1_1_2$EN)
	  activeSource_1_1_2 <= `BSV_ASSIGNMENT_DELAY activeSource_1_1_2$D_IN;
	if (activeSource_1_2$EN)
	  activeSource_1_2 <= `BSV_ASSIGNMENT_DELAY activeSource_1_2$D_IN;
	if (arbiter_1_1_firstHot$EN)
	  arbiter_1_1_firstHot <= `BSV_ASSIGNMENT_DELAY
	      arbiter_1_1_firstHot$D_IN;
	if (arbiter_1_1_lastSelect$EN)
	  arbiter_1_1_lastSelect <= `BSV_ASSIGNMENT_DELAY
	      arbiter_1_1_lastSelect$D_IN;
	if (arbiter_1_1_lastSelect_1$EN)
	  arbiter_1_1_lastSelect_1 <= `BSV_ASSIGNMENT_DELAY
	      arbiter_1_1_lastSelect_1$D_IN;
	if (arbiter_1_firstHot$EN)
	  arbiter_1_firstHot <= `BSV_ASSIGNMENT_DELAY arbiter_1_firstHot$D_IN;
	if (arbiter_1_firstHot_1$EN)
	  arbiter_1_firstHot_1 <= `BSV_ASSIGNMENT_DELAY
	      arbiter_1_firstHot_1$D_IN;
	if (arbiter_1_lastSelect$EN)
	  arbiter_1_lastSelect <= `BSV_ASSIGNMENT_DELAY
	      arbiter_1_lastSelect$D_IN;
	if (arbiter_1_lastSelect_1$EN)
	  arbiter_1_lastSelect_1 <= `BSV_ASSIGNMENT_DELAY
	      arbiter_1_lastSelect_1$D_IN;
	if (arbiter_1_lastSelect_2$EN)
	  arbiter_1_lastSelect_2 <= `BSV_ASSIGNMENT_DELAY
	      arbiter_1_lastSelect_2$D_IN;
	if (arbiter_firstHot$EN)
	  arbiter_firstHot <= `BSV_ASSIGNMENT_DELAY arbiter_firstHot$D_IN;
	if (arbiter_lastSelect$EN)
	  arbiter_lastSelect <= `BSV_ASSIGNMENT_DELAY arbiter_lastSelect$D_IN;
	if (ifcs_0_1_noRoute_currentReq$EN)
	  ifcs_0_1_noRoute_currentReq <= `BSV_ASSIGNMENT_DELAY
	      ifcs_0_1_noRoute_currentReq$D_IN;
	if (ifcs_0_1_noRoute_flitCount$EN)
	  ifcs_0_1_noRoute_flitCount <= `BSV_ASSIGNMENT_DELAY
	      ifcs_0_1_noRoute_flitCount$D_IN;
	if (ifcs_0_1_state$EN)
	  ifcs_0_1_state <= `BSV_ASSIGNMENT_DELAY ifcs_0_1_state$D_IN;
	if (ifcs_0_1_state_1$EN)
	  ifcs_0_1_state_1 <= `BSV_ASSIGNMENT_DELAY ifcs_0_1_state_1$D_IN;
	if (ifcs_0_noRoute_inner_currentReq$EN)
	  ifcs_0_noRoute_inner_currentReq <= `BSV_ASSIGNMENT_DELAY
	      ifcs_0_noRoute_inner_currentReq$D_IN;
	if (ifcs_0_noRoute_inner_pendingReq$EN)
	  ifcs_0_noRoute_inner_pendingReq <= `BSV_ASSIGNMENT_DELAY
	      ifcs_0_noRoute_inner_pendingReq$D_IN;
	if (ifcs_0_state$EN)
	  ifcs_0_state <= `BSV_ASSIGNMENT_DELAY ifcs_0_state$D_IN;
	if (ifcs_0_state_1$EN)
	  ifcs_0_state_1 <= `BSV_ASSIGNMENT_DELAY ifcs_0_state_1$D_IN;
	if (ifcs_1_1_noRoute_currentReq$EN)
	  ifcs_1_1_noRoute_currentReq <= `BSV_ASSIGNMENT_DELAY
	      ifcs_1_1_noRoute_currentReq$D_IN;
	if (ifcs_1_1_noRoute_flitCount$EN)
	  ifcs_1_1_noRoute_flitCount <= `BSV_ASSIGNMENT_DELAY
	      ifcs_1_1_noRoute_flitCount$D_IN;
	if (ifcs_1_1_state$EN)
	  ifcs_1_1_state <= `BSV_ASSIGNMENT_DELAY ifcs_1_1_state$D_IN;
	if (ifcs_1_1_state_1$EN)
	  ifcs_1_1_state_1 <= `BSV_ASSIGNMENT_DELAY ifcs_1_1_state_1$D_IN;
	if (ifcs_1_noRoute_inner_currentReq$EN)
	  ifcs_1_noRoute_inner_currentReq <= `BSV_ASSIGNMENT_DELAY
	      ifcs_1_noRoute_inner_currentReq$D_IN;
	if (ifcs_1_noRoute_inner_pendingReq$EN)
	  ifcs_1_noRoute_inner_pendingReq <= `BSV_ASSIGNMENT_DELAY
	      ifcs_1_noRoute_inner_pendingReq$D_IN;
	if (ifcs_1_state$EN)
	  ifcs_1_state <= `BSV_ASSIGNMENT_DELAY ifcs_1_state$D_IN;
	if (ifcs_1_state_1$EN)
	  ifcs_1_state_1 <= `BSV_ASSIGNMENT_DELAY ifcs_1_state_1$D_IN;
	if (ifcs_2_1_state$EN)
	  ifcs_2_1_state <= `BSV_ASSIGNMENT_DELAY ifcs_2_1_state$D_IN;
	if (ifcs_2_state$EN)
	  ifcs_2_state <= `BSV_ASSIGNMENT_DELAY ifcs_2_state$D_IN;
	if (merged_0_flitLeft$EN)
	  merged_0_flitLeft <= `BSV_ASSIGNMENT_DELAY merged_0_flitLeft$D_IN;
	if (merged_1_flitLeft$EN)
	  merged_1_flitLeft <= `BSV_ASSIGNMENT_DELAY merged_1_flitLeft$D_IN;
	if (split_0_flitLeft$EN)
	  split_0_flitLeft <= `BSV_ASSIGNMENT_DELAY split_0_flitLeft$D_IN;
	if (split_1_flitLeft$EN)
	  split_1_flitLeft <= `BSV_ASSIGNMENT_DELAY split_1_flitLeft$D_IN;
	if (split_2_flitLeft$EN)
	  split_2_flitLeft <= `BSV_ASSIGNMENT_DELAY split_2_flitLeft$D_IN;
	if (state$EN) state <= `BSV_ASSIGNMENT_DELAY state$D_IN;
	if (state_1$EN) state_1 <= `BSV_ASSIGNMENT_DELAY state_1$D_IN;
	if (state_1_1$EN) state_1_1 <= `BSV_ASSIGNMENT_DELAY state_1_1$D_IN;
	if (state_1_1_1$EN)
	  state_1_1_1 <= `BSV_ASSIGNMENT_DELAY state_1_1_1$D_IN;
      end
    if (dm_master_nonsynth_currentRID$EN)
      dm_master_nonsynth_currentRID <= `BSV_ASSIGNMENT_DELAY
	  dm_master_nonsynth_currentRID$D_IN;
    if (dm_master_nonsynth_currentWID$EN)
      dm_master_nonsynth_currentWID <= `BSV_ASSIGNMENT_DELAY
	  dm_master_nonsynth_currentWID$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    activeSource_0 = 1'h0;
    activeSource_1 = 1'h0;
    activeSource_1_0 = 1'h0;
    activeSource_1_0_1 = 1'h0;
    activeSource_1_1 = 1'h0;
    activeSource_1_1_0 = 1'h0;
    activeSource_1_1_1 = 1'h0;
    activeSource_1_1_1_1 = 1'h0;
    activeSource_1_1_2 = 1'h0;
    activeSource_1_2 = 1'h0;
    arbiter_1_1_firstHot = 1'h0;
    arbiter_1_1_lastSelect = 1'h0;
    arbiter_1_1_lastSelect_1 = 1'h0;
    arbiter_1_firstHot = 1'h0;
    arbiter_1_firstHot_1 = 1'h0;
    arbiter_1_lastSelect = 1'h0;
    arbiter_1_lastSelect_1 = 1'h0;
    arbiter_1_lastSelect_2 = 1'h0;
    arbiter_firstHot = 1'h0;
    arbiter_lastSelect = 1'h0;
    dm_master_nonsynth_currentRID = 4'hA;
    dm_master_nonsynth_currentWID = 4'hA;
    ifcs_0_1_noRoute_currentReq = 97'h0AAAAAAAAAAAAAAAAAAAAAAAA;
    ifcs_0_1_noRoute_flitCount = 9'h0AA;
    ifcs_0_1_state = 2'h2;
    ifcs_0_1_state_1 = 1'h0;
    ifcs_0_noRoute_inner_currentReq = 97'h0AAAAAAAAAAAAAAAAAAAAAAAA;
    ifcs_0_noRoute_inner_pendingReq = 1'h0;
    ifcs_0_state = 2'h2;
    ifcs_0_state_1 = 1'h0;
    ifcs_1_1_noRoute_currentReq = 97'h0AAAAAAAAAAAAAAAAAAAAAAAA;
    ifcs_1_1_noRoute_flitCount = 9'h0AA;
    ifcs_1_1_state = 2'h2;
    ifcs_1_1_state_1 = 1'h0;
    ifcs_1_noRoute_inner_currentReq = 97'h0AAAAAAAAAAAAAAAAAAAAAAAA;
    ifcs_1_noRoute_inner_pendingReq = 1'h0;
    ifcs_1_state = 2'h2;
    ifcs_1_state_1 = 1'h0;
    ifcs_2_1_state = 1'h0;
    ifcs_2_state = 1'h0;
    merged_0_flitLeft = 8'hAA;
    merged_1_flitLeft = 8'hAA;
    split_0_flitLeft = 8'hAA;
    split_1_flitLeft = 8'hAA;
    split_2_flitLeft = 8'hAA;
    state = 1'h0;
    state_1 = 1'h0;
    state_1_1 = 1'h0;
    state_1_1_1 = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate &&
	  !SEXT_arbiter_lastSelect_515_516_BIT_0_517_AND__ETC___d1523 &&
	  !SEXT_arbiter_firstHot_519_520_BIT_0_521_AND_re_ETC___d1527)
	$display("mkOneHotArbiter: next method should not be run with no pending request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate &&
	  !SEXT_arbiter_lastSelect_515_516_BIT_0_517_AND__ETC___d1523 &&
	  !SEXT_arbiter_firstHot_519_520_BIT_0_521_AND_re_ETC___d1527)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h48328 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the",
	       " requested path ",
	       v__h48328,
	       $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_0_innerRoute$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_0_innerRoute$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_0_innerRoute$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_0_innerRoute$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_0_innerRoute$D_OUT[2])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_0_innerRoute$D_OUT[2])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && !ifcs_0_innerRoute$EMPTY_N)
	begin
	  v__h47717 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && !ifcs_0_innerRoute$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there",
		 " was no requested path.",
		 v__h47717,
		 $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && !ifcs_0_innerRoute$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h52337 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the",
	       " requested path ",
	       v__h52337,
	       $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_1_innerRoute$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_1_innerRoute$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_1_innerRoute$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_1_innerRoute$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_1_innerRoute$D_OUT[2])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_1_innerRoute$D_OUT[2])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && !ifcs_1_innerRoute$EMPTY_N)
	begin
	  v__h51726 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && !ifcs_1_innerRoute$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there",
		 " was no requested path.",
		 v__h51726,
		 $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && !ifcs_1_innerRoute$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && WILL_FIRE_RL_burst)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 113, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected] and\n  [RL_burst] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_source_selected || WILL_FIRE_RL_burst) &&
	  (WILL_FIRE_RL_source_selected_1 || WILL_FIRE_RL_burst_1))
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected, RL_burst]\n  and [RL_source_selected_1, RL_burst_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && WILL_FIRE_RL_burst_1)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_1] and\n  [RL_burst_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_sink_selected && WILL_FIRE_RL_sink_selected_1)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 155, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_sink_selected] and\n  [RL_sink_selected_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_sink_selected || WILL_FIRE_RL_sink_selected_1) &&
	  WILL_FIRE_RL_sink_selected_2)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 155, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_sink_selected,\n  RL_sink_selected_1] and [RL_sink_selected_2] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate_2 &&
	  !SEXT_arbiter_1_lastSelect_2_152_153_BIT_0_154__ETC___d2160 &&
	  !SEXT_arbiter_1_firstHot_1_156_157_BIT_0_158_AN_ETC___d2164)
	$display("mkOneHotArbiter: next method should not be run with no pending request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate_2 &&
	  !SEXT_arbiter_1_lastSelect_2_152_153_BIT_0_154__ETC___d2160 &&
	  !SEXT_arbiter_1_firstHot_1_156_157_BIT_0_158_AN_ETC___d2164)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h82222 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the",
	       " requested path ",
	       v__h82222,
	       $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_0_1_innerRoute$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_0_1_innerRoute$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_0_1_innerRoute$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_0_1_innerRoute$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_0_1_innerRoute$D_OUT[2])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_0_1_innerRoute$D_OUT[2])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && !ifcs_0_1_innerRoute$EMPTY_N)
	begin
	  v__h81611 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && !ifcs_0_1_innerRoute$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there",
		 " was no requested path.",
		 v__h81611,
		 $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && !ifcs_0_1_innerRoute$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h85115 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the",
	       " requested path ",
	       v__h85115,
	       $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_1_1_innerRoute$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_1_1_innerRoute$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_1_1_innerRoute$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_1_1_innerRoute$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_1_1_innerRoute$D_OUT[2])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_1_1_innerRoute$D_OUT[2])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && !ifcs_1_1_innerRoute$EMPTY_N)
	begin
	  v__h84504 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && !ifcs_1_1_innerRoute$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there",
		 " was no requested path.",
		 v__h84504,
		 $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && !ifcs_1_1_innerRoute$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && WILL_FIRE_RL_burst_5)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_5] and\n  [RL_burst_5] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_source_selected_5 || WILL_FIRE_RL_burst_5) &&
	  (WILL_FIRE_RL_source_selected_6 || WILL_FIRE_RL_burst_6))
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_5,\n  RL_burst_5] and [RL_source_selected_6, RL_burst_6] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && WILL_FIRE_RL_burst_6)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_6] and\n  [RL_burst_6] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_sink_selected_5 && WILL_FIRE_RL_sink_selected_6)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 155, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_sink_selected_5] and\n  [RL_sink_selected_6] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_sink_selected_5 || WILL_FIRE_RL_sink_selected_6) &&
	  WILL_FIRE_RL_sink_selected_7)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 155, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_sink_selected_5,\n  RL_sink_selected_6] and [RL_sink_selected_7] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cpu_imem_ug_u_b_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cpu_imem_ug_u_r_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cpu_imem_ug_u_aw_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cpu_imem_ug_u_w_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putFirst && split_0_doPut$wget[245])
	$display("Expecting FirstFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putFirst && split_0_doPut$wget[245])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putOther && split_0_doPut$wget[245] &&
	  split_0_doPut$wget[2] &&
	  split_0_flitLeft > 8'd1)
	$display("Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putOther && split_0_doPut$wget[245] &&
	  split_0_doPut$wget[2] &&
	  split_0_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putOther && split_0_doPut$wget[245] &&
	  !split_0_doPut$wget[2] &&
	  split_0_flitLeft == 8'd1)
	$display("Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putOther && split_0_doPut$wget[245] &&
	  !split_0_doPut$wget[2] &&
	  split_0_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putOther && !split_0_doPut$wget[245])
	$display("Expecting OtherFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putOther && !split_0_doPut$wget[245])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putFirst && split_1_doPut$wget[245])
	$display("Expecting FirstFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putFirst && split_1_doPut$wget[245])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putOther && split_1_doPut$wget[245] &&
	  split_1_doPut$wget[2] &&
	  split_1_flitLeft > 8'd1)
	$display("Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putOther && split_1_doPut$wget[245] &&
	  split_1_doPut$wget[2] &&
	  split_1_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putOther && split_1_doPut$wget[245] &&
	  !split_1_doPut$wget[2] &&
	  split_1_flitLeft == 8'd1)
	$display("Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putOther && split_1_doPut$wget[245] &&
	  !split_1_doPut$wget[2] &&
	  split_1_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putOther && !split_1_doPut$wget[245])
	$display("Expecting OtherFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putOther && !split_1_doPut$wget[245])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putFirst && split_2_doPut$wget[245])
	$display("Expecting FirstFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putFirst && split_2_doPut$wget[245])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putOther && split_2_doPut$wget[245] &&
	  split_2_doPut$wget[2] &&
	  split_2_flitLeft > 8'd1)
	$display("Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putOther && split_2_doPut$wget[245] &&
	  split_2_doPut$wget[2] &&
	  split_2_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putOther && split_2_doPut$wget[245] &&
	  !split_2_doPut$wget[2] &&
	  split_2_flitLeft == 8'd1)
	$display("Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putOther && split_2_doPut$wget[245] &&
	  !split_2_doPut$wget[2] &&
	  split_2_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putOther && !split_2_doPut$wget[245])
	$display("Expecting OtherFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putOther && !split_2_doPut$wget[245])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_nonRoutableFlit &&
	  WILL_FIRE_RL_ifcs_1_drainFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 216, column 54: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_nonRoutableFlit] and\n  [RL_ifcs_1_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate_1 &&
	  !SEXT_arbiter_1_lastSelect_705_706_BIT_0_707_AN_ETC___d1718 &&
	  !SEXT_arbiter_1_lastSelect_1_709_710_BIT_0_711__ETC___d1724 &&
	  !SEXT_arbiter_1_firstHot_714_715_BIT_0_716_AND__ETC___d1730)
	$display("mkOneHotArbiter: next method should not be run with no pending request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate_1 &&
	  !SEXT_arbiter_1_lastSelect_705_706_BIT_0_707_AN_ETC___d1718 &&
	  !SEXT_arbiter_1_lastSelect_1_709_710_BIT_0_711__ETC___d1724 &&
	  !SEXT_arbiter_1_firstHot_714_715_BIT_0_716_AND__ETC___d1730)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h63032 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the",
	       " requested path ",
	       v__h63032,
	       $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_0_routeBack$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_0_routeBack$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_0_routeBack$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_0_routeBack$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && !ifcs_0_routeBack$EMPTY_N)
	begin
	  v__h62651 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && !ifcs_0_routeBack$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there",
		 " was no requested path.",
		 v__h62651,
		 $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && !ifcs_0_routeBack$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h65102 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the",
	       " requested path ",
	       v__h65102,
	       $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_1_routeBack$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_1_routeBack$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_1_routeBack$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_1_routeBack$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && !ifcs_1_routeBack$EMPTY_N)
	begin
	  v__h64721 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && !ifcs_1_routeBack$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there",
		 " was no requested path.",
		 v__h64721,
		 $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && !ifcs_1_routeBack$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && WILL_FIRE_RL_burst_3)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_3] and\n  [RL_burst_3] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h67001 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the",
	       " requested path ",
	       v__h67001,
	       $signed(32'd2));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_2_routeBack$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_2_routeBack$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_2_routeBack$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_2_routeBack$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && !ifcs_2_routeBack$EMPTY_N)
	begin
	  v__h66620 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && !ifcs_2_routeBack$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there",
		 " was no requested path.",
		 v__h66620,
		 $signed(32'd2));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && !ifcs_2_routeBack$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && WILL_FIRE_RL_burst_2)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_2] and\n  [RL_burst_2] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_source_selected_2 || WILL_FIRE_RL_burst_2) &&
	  (WILL_FIRE_RL_source_selected_3 || WILL_FIRE_RL_burst_3))
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_2,\n  RL_burst_2] and [RL_source_selected_3, RL_burst_3] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_source_selected_2 || WILL_FIRE_RL_burst_2 ||
	   WILL_FIRE_RL_source_selected_3 ||
	   WILL_FIRE_RL_burst_3) &&
	  (WILL_FIRE_RL_source_selected_4 || WILL_FIRE_RL_burst_4))
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_2,\n  RL_burst_2, RL_source_selected_3, RL_burst_3] and [RL_source_selected_4,\n  RL_burst_4] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && WILL_FIRE_RL_burst_4)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_4] and\n  [RL_burst_4] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_sink_selected_3 && WILL_FIRE_RL_sink_selected_4)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 155, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_sink_selected_3] and\n  [RL_sink_selected_4] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_firstFlit &&
	  WILL_FIRE_RL_ifcs_1_nonRoutableGenRsp)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 217, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_firstFlit] and\n  [RL_ifcs_1_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_firstFlit && WILL_FIRE_RL_ifcs_1_drainFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 216, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_firstFlit] and\n  [RL_ifcs_1_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_firstFlit &&
	  WILL_FIRE_RL_ifcs_1_nonRoutableFlit)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 216, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_firstFlit] and\n  [RL_ifcs_1_nonRoutableFlit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_firstFlit && WILL_FIRE_RL_ifcs_1_followFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 216, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_firstFlit] and\n  [RL_ifcs_1_followFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_followFlits &&
	  WILL_FIRE_RL_ifcs_1_nonRoutableGenRsp)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 217, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_followFlits] and\n  [RL_ifcs_1_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_followFlits && WILL_FIRE_RL_ifcs_1_drainFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 216, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_followFlits] and\n  [RL_ifcs_1_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_followFlits &&
	  WILL_FIRE_RL_ifcs_1_nonRoutableFlit)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 216, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_followFlits] and\n  [RL_ifcs_1_nonRoutableFlit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_drainFlits &&
	  WILL_FIRE_RL_ifcs_1_nonRoutableGenRsp)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 217, column 73: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_drainFlits] and\n  [RL_ifcs_1_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_1_genOther &&
	  dm_master_nonsynth_bufferShim_wff$D_OUT[2] &&
	  merged_1_flitLeft > 8'd1)
	$display("Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_1_genOther &&
	  dm_master_nonsynth_bufferShim_wff$D_OUT[2] &&
	  merged_1_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_1_genOther &&
	  !dm_master_nonsynth_bufferShim_wff$D_OUT[2] &&
	  merged_1_flitLeft == 8'd1)
	$display("Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_1_genOther &&
	  !dm_master_nonsynth_bufferShim_wff$D_OUT[2] &&
	  merged_1_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_firstFlit_1 &&
	  WILL_FIRE_RL_ifcs_0_followFlits_1)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 284, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_firstFlit_1] and\n  [RL_ifcs_0_followFlits_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_firstFlit_1 &&
	  WILL_FIRE_RL_ifcs_1_followFlits_1)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 284, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_firstFlit_1] and\n  [RL_ifcs_1_followFlits_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_1_nonRoutableFlit &&
	  WILL_FIRE_RL_ifcs_1_1_drainFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 216, column 54: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_1_nonRoutableFlit] and\n  [RL_ifcs_1_1_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate_3 &&
	  !SEXT_arbiter_1_1_lastSelect_332_333_BIT_0_334__ETC___d2345 &&
	  !SEXT_arbiter_1_1_lastSelect_1_336_337_BIT_0_33_ETC___d2351 &&
	  !SEXT_arbiter_1_1_firstHot_341_342_BIT_0_343_AN_ETC___d2357)
	$display("mkOneHotArbiter: next method should not be run with no pending request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate_3 &&
	  !SEXT_arbiter_1_1_lastSelect_332_333_BIT_0_334__ETC___d2345 &&
	  !SEXT_arbiter_1_1_lastSelect_1_336_337_BIT_0_33_ETC___d2351 &&
	  !SEXT_arbiter_1_1_firstHot_341_342_BIT_0_343_AN_ETC___d2357)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h94395 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the",
	       " requested path ",
	       v__h94395,
	       $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_0_1_routeBack$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_0_1_routeBack$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_0_1_routeBack$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_0_1_routeBack$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && !ifcs_0_1_routeBack$EMPTY_N)
	begin
	  v__h94014 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && !ifcs_0_1_routeBack$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there",
		 " was no requested path.",
		 v__h94014,
		 $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && !ifcs_0_1_routeBack$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h96886 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the",
	       " requested path ",
	       v__h96886,
	       $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_1_1_routeBack$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_1_1_routeBack$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_1_1_routeBack$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_1_1_routeBack$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && !ifcs_1_1_routeBack$EMPTY_N)
	begin
	  v__h96505 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && !ifcs_1_1_routeBack$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there",
		 " was no requested path.",
		 v__h96505,
		 $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && !ifcs_1_1_routeBack$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && WILL_FIRE_RL_burst_8)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_8] and\n  [RL_burst_8] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h99196 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the",
	       " requested path ",
	       v__h99196,
	       $signed(32'd2));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_2_1_routeBack$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_2_1_routeBack$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_2_1_routeBack$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_2_1_routeBack$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && !ifcs_2_1_routeBack$EMPTY_N)
	begin
	  v__h98815 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && !ifcs_2_1_routeBack$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there",
		 " was no requested path.",
		 v__h98815,
		 $signed(32'd2));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && !ifcs_2_1_routeBack$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && WILL_FIRE_RL_burst_7)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_7] and\n  [RL_burst_7] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_source_selected_7 || WILL_FIRE_RL_burst_7) &&
	  (WILL_FIRE_RL_source_selected_8 || WILL_FIRE_RL_burst_8))
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_7,\n  RL_burst_7] and [RL_source_selected_8, RL_burst_8] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_source_selected_7 || WILL_FIRE_RL_burst_7 ||
	   WILL_FIRE_RL_source_selected_8 ||
	   WILL_FIRE_RL_burst_8) &&
	  (WILL_FIRE_RL_source_selected_9 || WILL_FIRE_RL_burst_9))
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_7,\n  RL_burst_7, RL_source_selected_8, RL_burst_8] and [RL_source_selected_9,\n  RL_burst_9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && WILL_FIRE_RL_burst_9)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_9] and\n  [RL_burst_9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_sink_selected_8 && WILL_FIRE_RL_sink_selected_9)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 155, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_sink_selected_8] and\n  [RL_sink_selected_9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cpu_hart0_reset_complete)
	begin
	  v__h14499 = $stime;
	  #0;
	end
    v__h14493 = v__h14499 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cpu_hart0_reset_complete)
	$display("%0d: Core.rl_cpu_hart0_reset_complete", v__h14493);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cpu_imem_ug_u_ar_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_firstFlit &&
	  WILL_FIRE_RL_ifcs_0_nonRoutableGenRsp)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 217, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_firstFlit] and\n  [RL_ifcs_0_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_firstFlit && WILL_FIRE_RL_ifcs_0_drainFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 216, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_firstFlit] and\n  [RL_ifcs_0_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_firstFlit &&
	  WILL_FIRE_RL_ifcs_0_nonRoutableFlit)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 216, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_firstFlit] and\n  [RL_ifcs_0_nonRoutableFlit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_firstFlit && WILL_FIRE_RL_ifcs_0_followFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 216, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_firstFlit] and\n  [RL_ifcs_0_followFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_followFlits &&
	  WILL_FIRE_RL_ifcs_0_nonRoutableGenRsp)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 217, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_followFlits] and\n  [RL_ifcs_0_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_followFlits && WILL_FIRE_RL_ifcs_0_drainFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 216, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_followFlits] and\n  [RL_ifcs_0_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_followFlits &&
	  WILL_FIRE_RL_ifcs_0_nonRoutableFlit)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 216, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_followFlits] and\n  [RL_ifcs_0_nonRoutableFlit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_nonRoutableFlit &&
	  WILL_FIRE_RL_ifcs_0_drainFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 216, column 54: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_nonRoutableFlit] and\n  [RL_ifcs_0_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_drainFlits &&
	  WILL_FIRE_RL_ifcs_0_nonRoutableGenRsp)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 217, column 73: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_drainFlits] and\n  [RL_ifcs_0_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_0_genOther && cpu$dmem_master_wlast &&
	  merged_0_flitLeft > 8'd1)
	$display("Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_0_genOther && cpu$dmem_master_wlast &&
	  merged_0_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_0_genOther && !cpu$dmem_master_wlast &&
	  merged_0_flitLeft == 8'd1)
	$display("Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_0_genOther && !cpu$dmem_master_wlast &&
	  merged_0_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_2_firstFlit && WILL_FIRE_RL_ifcs_2_followFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 283, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_2_firstFlit] and\n  [RL_ifcs_2_followFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_1_firstFlit &&
	  WILL_FIRE_RL_ifcs_0_1_nonRoutableGenRsp)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 217, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_1_firstFlit] and\n  [RL_ifcs_0_1_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_1_firstFlit && WILL_FIRE_RL_ifcs_0_1_drainFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 216, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_1_firstFlit] and\n  [RL_ifcs_0_1_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_1_firstFlit &&
	  WILL_FIRE_RL_ifcs_0_1_nonRoutableFlit)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 216, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_1_firstFlit] and\n  [RL_ifcs_0_1_nonRoutableFlit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_1_firstFlit &&
	  WILL_FIRE_RL_ifcs_0_1_followFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 216, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_1_firstFlit] and\n  [RL_ifcs_0_1_followFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_1_followFlits &&
	  WILL_FIRE_RL_ifcs_0_1_nonRoutableGenRsp)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 217, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_1_followFlits] and\n  [RL_ifcs_0_1_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_1_followFlits &&
	  WILL_FIRE_RL_ifcs_0_1_drainFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 216, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_1_followFlits] and\n  [RL_ifcs_0_1_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_1_followFlits &&
	  WILL_FIRE_RL_ifcs_0_1_nonRoutableFlit)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 216, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_1_followFlits] and\n  [RL_ifcs_0_1_nonRoutableFlit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_1_nonRoutableFlit &&
	  WILL_FIRE_RL_ifcs_0_1_drainFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 216, column 54: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_1_nonRoutableFlit] and\n  [RL_ifcs_0_1_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_1_drainFlits &&
	  WILL_FIRE_RL_ifcs_0_1_nonRoutableGenRsp)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 217, column 73: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_1_drainFlits] and\n  [RL_ifcs_0_1_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_1_firstFlit &&
	  WILL_FIRE_RL_ifcs_1_1_nonRoutableGenRsp)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 217, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_1_firstFlit] and\n  [RL_ifcs_1_1_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_1_firstFlit && WILL_FIRE_RL_ifcs_1_1_drainFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 216, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_1_firstFlit] and\n  [RL_ifcs_1_1_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_1_firstFlit &&
	  WILL_FIRE_RL_ifcs_1_1_nonRoutableFlit)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 216, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_1_firstFlit] and\n  [RL_ifcs_1_1_nonRoutableFlit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_1_firstFlit &&
	  WILL_FIRE_RL_ifcs_1_1_followFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 216, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_1_firstFlit] and\n  [RL_ifcs_1_1_followFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_1_followFlits &&
	  WILL_FIRE_RL_ifcs_1_1_nonRoutableGenRsp)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 217, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_1_followFlits] and\n  [RL_ifcs_1_1_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_1_followFlits &&
	  WILL_FIRE_RL_ifcs_1_1_drainFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 216, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_1_followFlits] and\n  [RL_ifcs_1_1_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_1_followFlits &&
	  WILL_FIRE_RL_ifcs_1_1_nonRoutableFlit)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 216, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_1_followFlits] and\n  [RL_ifcs_1_1_nonRoutableFlit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_1_drainFlits &&
	  WILL_FIRE_RL_ifcs_1_1_nonRoutableGenRsp)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 217, column 73: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_1_drainFlits] and\n  [RL_ifcs_1_1_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_1_firstFlit_1 &&
	  WILL_FIRE_RL_ifcs_0_1_followFlits_1)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 284, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_1_firstFlit_1] and\n  [RL_ifcs_0_1_followFlits_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start)
	begin
	  v__h13955 = $stime;
	  #0;
	end
    v__h13949 = v__h13955 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start)
	$display("%0d: Core.rl_cpu_hart0_reset_from_soc_start", v__h13949);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cpu_hart0_reset_from_dm_start)
	begin
	  v__h14133 = $stime;
	  #0;
	end
    v__h14127 = v__h14133 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cpu_hart0_reset_from_dm_start)
	$display("%0d: Core.rl_cpu_hart0_reset_from_dm_start", v__h14127);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_1_firstFlit_1 &&
	  WILL_FIRE_RL_ifcs_1_1_followFlits_1)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 284, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_1_firstFlit_1] and\n  [RL_ifcs_1_1_followFlits_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_2_1_firstFlit &&
	  WILL_FIRE_RL_ifcs_2_1_followFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 283, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_2_1_firstFlit] and\n  [RL_ifcs_2_1_followFlits] ) fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkCore

