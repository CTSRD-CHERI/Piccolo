//
// Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
//
// On Wed Jun 19 15:59:33 BST 2019
//
//
// Ports:
// Name                         I/O  size props
// RDY_set_verbosity              O     1 const
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1
// valid                          O     1
// addr                           O    32 reg
// word128_fst                    O     1
// word128_snd                    O   128
// st_amo_val_fst                 O     1
// st_amo_val_snd                 O   128
// exc                            O     1
// exc_code                       O     6 reg
// RDY_server_flush_request_put   O     1 reg
// RDY_server_flush_response_get  O     1
// RDY_tlb_flush                  O     1 const
// mem_master_awid                O     4
// mem_master_awaddr              O    64
// mem_master_awlen               O     8
// mem_master_awsize              O     3
// mem_master_awburst             O     2
// mem_master_awlock              O     1
// mem_master_awcache             O     4
// mem_master_awprot              O     3
// mem_master_awqos               O     4
// mem_master_awregion            O     4
// mem_master_awvalid             O     1
// mem_master_wdata               O   128
// mem_master_wstrb               O    16
// mem_master_wlast               O     1
// mem_master_wuser               O     2
// mem_master_wvalid              O     1
// mem_master_bready              O     1
// mem_master_arid                O     4
// mem_master_araddr              O    64
// mem_master_arlen               O     8
// mem_master_arsize              O     3
// mem_master_arburst             O     2
// mem_master_arlock              O     1
// mem_master_arcache             O     4
// mem_master_arprot              O     3
// mem_master_arqos               O     4
// mem_master_arregion            O     4
// mem_master_arvalid             O     1
// mem_master_rready              O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_verbosity_verbosity        I     4 reg
// req_op                         I     2
// req_width_code                 I     3
// req_is_unsigned                I     1 reg
// req_amo_funct7                 I     7 reg
// req_addr                       I    32
// req_st_value                   I   129
// req_priv                       I     2 unused
// req_sstatus_SUM                I     1 unused
// req_mstatus_MXR                I     1 unused
// req_satp                       I    32 unused
// mem_master_awready             I     1
// mem_master_wready              I     1
// mem_master_bid                 I     4
// mem_master_bresp               I     2
// mem_master_arready             I     1
// mem_master_rid                 I     4
// mem_master_rdata               I   128
// mem_master_rresp               I     2
// mem_master_rlast               I     1
// mem_master_ruser               I     2
// EN_set_verbosity               I     1
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_req                         I     1
// EN_commit                      I     1
// EN_server_flush_request_put    I     1
// EN_server_flush_response_get   I     1
// EN_tlb_flush                   I     1 unused
// mem_master_bvalid              I     1
// mem_master_rvalid              I     1
//
// Combinational paths from inputs to outputs:
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> valid
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> word128_fst
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> word128_snd
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awid
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awaddr
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awlen
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awsize
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awburst
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awlock
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awcache
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awprot
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awqos
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awregion
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awuser
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awvalid
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_wdata
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_wstrb
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_wlast
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_wuser
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_wvalid
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_req,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_arid
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_req,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_araddr
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_req,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_arlen
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_req,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_arsize
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_req,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_arburst
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_req,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_arlock
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_req,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_arcache
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_req,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_arprot
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_req,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_arqos
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_req,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_arregion
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_req,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_aruser
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_req,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_arvalid
//   EN_commit -> st_amo_val_fst
//   EN_commit -> st_amo_val_snd
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMMU_DCache(CLK,
		    RST_N,

		    set_verbosity_verbosity,
		    EN_set_verbosity,
		    RDY_set_verbosity,

		    EN_server_reset_request_put,
		    RDY_server_reset_request_put,

		    EN_server_reset_response_get,
		    RDY_server_reset_response_get,

		    req_op,
		    req_width_code,
		    req_is_unsigned,
		    req_amo_funct7,
		    req_addr,
		    req_st_value,
		    req_priv,
		    req_sstatus_SUM,
		    req_mstatus_MXR,
		    req_satp,
		    EN_req,

		    EN_commit,

		    valid,

		    addr,

		    word128_fst,

		    word128_snd,

		    st_amo_val_fst,

		    st_amo_val_snd,

		    exc,

		    exc_code,

		    EN_server_flush_request_put,
		    RDY_server_flush_request_put,

		    EN_server_flush_response_get,
		    RDY_server_flush_response_get,

		    EN_tlb_flush,
		    RDY_tlb_flush,

		    mem_master_awid,

		    mem_master_awaddr,

		    mem_master_awlen,

		    mem_master_awsize,

		    mem_master_awburst,

		    mem_master_awlock,

		    mem_master_awcache,

		    mem_master_awprot,

		    mem_master_awqos,

		    mem_master_awregion,

		    mem_master_awvalid,

		    mem_master_awready,

		    mem_master_wdata,

		    mem_master_wstrb,

		    mem_master_wlast,

		    mem_master_wuser,

		    mem_master_wvalid,

		    mem_master_wready,

		    mem_master_bid,
		    mem_master_bresp,
		    mem_master_bvalid,

		    mem_master_bready,

		    mem_master_arid,

		    mem_master_araddr,

		    mem_master_arlen,

		    mem_master_arsize,

		    mem_master_arburst,

		    mem_master_arlock,

		    mem_master_arcache,

		    mem_master_arprot,

		    mem_master_arqos,

		    mem_master_arregion,

		    mem_master_arvalid,

		    mem_master_arready,

		    mem_master_rid,
		    mem_master_rdata,
		    mem_master_rresp,
		    mem_master_rlast,
		    mem_master_ruser,
		    mem_master_rvalid,

		    mem_master_rready);
  input  CLK;
  input  RST_N;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // action method req
  input  [1 : 0] req_op;
  input  [2 : 0] req_width_code;
  input  req_is_unsigned;
  input  [6 : 0] req_amo_funct7;
  input  [31 : 0] req_addr;
  input  [128 : 0] req_st_value;
  input  [1 : 0] req_priv;
  input  req_sstatus_SUM;
  input  req_mstatus_MXR;
  input  [31 : 0] req_satp;
  input  EN_req;

  // action method commit
  input  EN_commit;

  // value method valid
  output valid;

  // value method addr
  output [31 : 0] addr;

  // value method word128_fst
  output word128_fst;

  // value method word128_snd
  output [127 : 0] word128_snd;

  // value method st_amo_val_fst
  output st_amo_val_fst;

  // value method st_amo_val_snd
  output [127 : 0] st_amo_val_snd;

  // value method exc
  output exc;

  // value method exc_code
  output [5 : 0] exc_code;

  // action method server_flush_request_put
  input  EN_server_flush_request_put;
  output RDY_server_flush_request_put;

  // action method server_flush_response_get
  input  EN_server_flush_response_get;
  output RDY_server_flush_response_get;

  // action method tlb_flush
  input  EN_tlb_flush;
  output RDY_tlb_flush;

  // value method mem_master_aw_awid
  output [3 : 0] mem_master_awid;

  // value method mem_master_aw_awaddr
  output [63 : 0] mem_master_awaddr;

  // value method mem_master_aw_awlen
  output [7 : 0] mem_master_awlen;

  // value method mem_master_aw_awsize
  output [2 : 0] mem_master_awsize;

  // value method mem_master_aw_awburst
  output [1 : 0] mem_master_awburst;

  // value method mem_master_aw_awlock
  output mem_master_awlock;

  // value method mem_master_aw_awcache
  output [3 : 0] mem_master_awcache;

  // value method mem_master_aw_awprot
  output [2 : 0] mem_master_awprot;

  // value method mem_master_aw_awqos
  output [3 : 0] mem_master_awqos;

  // value method mem_master_aw_awregion
  output [3 : 0] mem_master_awregion;

  // value method mem_master_aw_awuser

  // value method mem_master_aw_awvalid
  output mem_master_awvalid;

  // action method mem_master_aw_awready
  input  mem_master_awready;

  // value method mem_master_w_wdata
  output [127 : 0] mem_master_wdata;

  // value method mem_master_w_wstrb
  output [15 : 0] mem_master_wstrb;

  // value method mem_master_w_wlast
  output mem_master_wlast;

  // value method mem_master_w_wuser
  output [1 : 0] mem_master_wuser;

  // value method mem_master_w_wvalid
  output mem_master_wvalid;

  // action method mem_master_w_wready
  input  mem_master_wready;

  // action method mem_master_b_bflit
  input  [3 : 0] mem_master_bid;
  input  [1 : 0] mem_master_bresp;
  input  mem_master_bvalid;

  // value method mem_master_b_bready
  output mem_master_bready;

  // value method mem_master_ar_arid
  output [3 : 0] mem_master_arid;

  // value method mem_master_ar_araddr
  output [63 : 0] mem_master_araddr;

  // value method mem_master_ar_arlen
  output [7 : 0] mem_master_arlen;

  // value method mem_master_ar_arsize
  output [2 : 0] mem_master_arsize;

  // value method mem_master_ar_arburst
  output [1 : 0] mem_master_arburst;

  // value method mem_master_ar_arlock
  output mem_master_arlock;

  // value method mem_master_ar_arcache
  output [3 : 0] mem_master_arcache;

  // value method mem_master_ar_arprot
  output [2 : 0] mem_master_arprot;

  // value method mem_master_ar_arqos
  output [3 : 0] mem_master_arqos;

  // value method mem_master_ar_arregion
  output [3 : 0] mem_master_arregion;

  // value method mem_master_ar_aruser

  // value method mem_master_ar_arvalid
  output mem_master_arvalid;

  // action method mem_master_ar_arready
  input  mem_master_arready;

  // action method mem_master_r_rflit
  input  [3 : 0] mem_master_rid;
  input  [127 : 0] mem_master_rdata;
  input  [1 : 0] mem_master_rresp;
  input  mem_master_rlast;
  input  [1 : 0] mem_master_ruser;
  input  mem_master_rvalid;

  // value method mem_master_r_rready
  output mem_master_rready;

  // signals for module outputs
  wire [127 : 0] mem_master_wdata, st_amo_val_snd, word128_snd;
  wire [63 : 0] mem_master_araddr, mem_master_awaddr;
  wire [31 : 0] addr;
  wire [15 : 0] mem_master_wstrb;
  wire [7 : 0] mem_master_arlen, mem_master_awlen;
  wire [5 : 0] exc_code;
  wire [3 : 0] mem_master_arcache,
	       mem_master_arid,
	       mem_master_arqos,
	       mem_master_arregion,
	       mem_master_awcache,
	       mem_master_awid,
	       mem_master_awqos,
	       mem_master_awregion;
  wire [2 : 0] mem_master_arprot,
	       mem_master_arsize,
	       mem_master_awprot,
	       mem_master_awsize;
  wire [1 : 0] mem_master_arburst, mem_master_awburst, mem_master_wuser;
  wire RDY_server_flush_request_put,
       RDY_server_flush_response_get,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_set_verbosity,
       RDY_tlb_flush,
       exc,
       mem_master_arlock,
       mem_master_arvalid,
       mem_master_awlock,
       mem_master_awvalid,
       mem_master_bready,
       mem_master_rready,
       mem_master_wlast,
       mem_master_wvalid,
       st_amo_val_fst,
       valid,
       word128_fst;

  // inlined wires
  reg [147 : 0] cache_master_xactor_shim_wff_rv$port0__write_1;
  reg [128 : 0] cache_dw_output_ld_val$wget;
  reg [97 : 0] cache_master_xactor_shim_awff_rv$port0__write_1;
  reg [3 : 0] cache_ctr_wr_rsps_pending_crg$port0__write_1;
  wire [147 : 0] cache_master_xactor_shim_wff_rv$port1__read,
		 cache_master_xactor_shim_wff_rv$port2__read,
		 cache_master_xactor_shim_wff_rv$port3__read;
  wire [137 : 0] cache_master_xactor_shim_rff_rv$port0__write_1,
		 cache_master_xactor_shim_rff_rv$port1__read,
		 cache_master_xactor_shim_rff_rv$port2__read,
		 cache_master_xactor_shim_rff_rv$port3__read;
  wire [136 : 0] cache_master_xactor_ug_master_u_r_putWire$wget;
  wire [128 : 0] cache_dw_output_st_amo_val$wget;
  wire [97 : 0] cache_master_xactor_shim_arff_rv$port0__write_1,
		cache_master_xactor_shim_arff_rv$port1__read,
		cache_master_xactor_shim_arff_rv$port2__read,
		cache_master_xactor_shim_arff_rv$port3__read,
		cache_master_xactor_shim_awff_rv$port1__read,
		cache_master_xactor_shim_awff_rv$port2__read,
		cache_master_xactor_shim_awff_rv$port3__read;
  wire [10 : 0] cache_crg_sb_to_load_delay$port0__write_1,
		cache_crg_sb_to_load_delay$port2__read;
  wire [6 : 0] cache_master_xactor_shim_bff_rv$port0__write_1,
	       cache_master_xactor_shim_bff_rv$port1__read,
	       cache_master_xactor_shim_bff_rv$port2__read,
	       cache_master_xactor_shim_bff_rv$port3__read;
  wire [5 : 0] cache_master_xactor_ug_master_u_b_putWire$wget;
  wire [3 : 0] cache_ctr_wr_rsps_pending_crg$port1__read,
	       cache_ctr_wr_rsps_pending_crg$port1__write_1,
	       cache_ctr_wr_rsps_pending_crg$port2__read,
	       cache_ctr_wr_rsps_pending_crg$port3__read;
  wire cache_crg_sb_to_load_delay$EN_port1__write,
       cache_ctr_wr_rsps_pending_crg$EN_port0__write,
       cache_dw_valid$whas,
       cache_master_xactor_shim_arff_rv$EN_port0__write,
       cache_master_xactor_shim_awff_rv$EN_port0__write,
       cache_master_xactor_shim_rff_rv$EN_port1__write,
       cache_master_xactor_shim_wff_rv$EN_port0__write,
       cache_master_xactor_ug_master_u_ar_dropWire$whas,
       cache_master_xactor_ug_master_u_aw_dropWire$whas,
       cache_master_xactor_ug_master_u_b_putWire$whas,
       cache_master_xactor_ug_master_u_r_putWire$whas,
       cache_master_xactor_ug_master_u_w_dropWire$whas;

  // register cache_cfg_verbosity
  reg [3 : 0] cache_cfg_verbosity;
  wire [3 : 0] cache_cfg_verbosity$D_IN;
  wire cache_cfg_verbosity$EN;

  // register cache_crg_sb_to_load_delay
  reg [10 : 0] cache_crg_sb_to_load_delay;
  wire [10 : 0] cache_crg_sb_to_load_delay$D_IN;
  wire cache_crg_sb_to_load_delay$EN;

  // register cache_ctr_wr_rsps_pending_crg
  reg [3 : 0] cache_ctr_wr_rsps_pending_crg;
  wire [3 : 0] cache_ctr_wr_rsps_pending_crg$D_IN;
  wire cache_ctr_wr_rsps_pending_crg$EN;

  // register cache_master_xactor_clearing
  reg cache_master_xactor_clearing;
  wire cache_master_xactor_clearing$D_IN, cache_master_xactor_clearing$EN;

  // register cache_master_xactor_shim_arff_rv
  reg [97 : 0] cache_master_xactor_shim_arff_rv;
  wire [97 : 0] cache_master_xactor_shim_arff_rv$D_IN;
  wire cache_master_xactor_shim_arff_rv$EN;

  // register cache_master_xactor_shim_awff_rv
  reg [97 : 0] cache_master_xactor_shim_awff_rv;
  wire [97 : 0] cache_master_xactor_shim_awff_rv$D_IN;
  wire cache_master_xactor_shim_awff_rv$EN;

  // register cache_master_xactor_shim_bff_rv
  reg [6 : 0] cache_master_xactor_shim_bff_rv;
  wire [6 : 0] cache_master_xactor_shim_bff_rv$D_IN;
  wire cache_master_xactor_shim_bff_rv$EN;

  // register cache_master_xactor_shim_rff_rv
  reg [137 : 0] cache_master_xactor_shim_rff_rv;
  wire [137 : 0] cache_master_xactor_shim_rff_rv$D_IN;
  wire cache_master_xactor_shim_rff_rv$EN;

  // register cache_master_xactor_shim_wff_rv
  reg [147 : 0] cache_master_xactor_shim_wff_rv;
  wire [147 : 0] cache_master_xactor_shim_wff_rv$D_IN;
  wire cache_master_xactor_shim_wff_rv$EN;

  // register cache_rg_addr
  reg [31 : 0] cache_rg_addr;
  wire [31 : 0] cache_rg_addr$D_IN;
  wire cache_rg_addr$EN;

  // register cache_rg_amo_funct7
  reg [6 : 0] cache_rg_amo_funct7;
  wire [6 : 0] cache_rg_amo_funct7$D_IN;
  wire cache_rg_amo_funct7$EN;

  // register cache_rg_cset_in_cache
  reg [5 : 0] cache_rg_cset_in_cache;
  wire [5 : 0] cache_rg_cset_in_cache$D_IN;
  wire cache_rg_cset_in_cache$EN;

  // register cache_rg_error_during_refill
  reg cache_rg_error_during_refill;
  wire cache_rg_error_during_refill$D_IN, cache_rg_error_during_refill$EN;

  // register cache_rg_exc_code
  reg [5 : 0] cache_rg_exc_code;
  reg [5 : 0] cache_rg_exc_code$D_IN;
  wire cache_rg_exc_code$EN;

  // register cache_rg_is_unsigned
  reg cache_rg_is_unsigned;
  wire cache_rg_is_unsigned$D_IN, cache_rg_is_unsigned$EN;

  // register cache_rg_ld_val
  reg [128 : 0] cache_rg_ld_val;
  reg [128 : 0] cache_rg_ld_val$D_IN;
  wire cache_rg_ld_val$EN;

  // register cache_rg_lower_word64
  reg [63 : 0] cache_rg_lower_word64;
  wire [63 : 0] cache_rg_lower_word64$D_IN;
  wire cache_rg_lower_word64$EN;

  // register cache_rg_lower_word64_full
  reg cache_rg_lower_word64_full;
  wire cache_rg_lower_word64_full$D_IN, cache_rg_lower_word64_full$EN;

  // register cache_rg_lrsc_pa
  reg [31 : 0] cache_rg_lrsc_pa;
  wire [31 : 0] cache_rg_lrsc_pa$D_IN;
  wire cache_rg_lrsc_pa$EN;

  // register cache_rg_lrsc_valid
  reg cache_rg_lrsc_valid;
  wire cache_rg_lrsc_valid$D_IN, cache_rg_lrsc_valid$EN;

  // register cache_rg_op
  reg [1 : 0] cache_rg_op;
  wire [1 : 0] cache_rg_op$D_IN;
  wire cache_rg_op$EN;

  // register cache_rg_pa
  reg [31 : 0] cache_rg_pa;
  wire [31 : 0] cache_rg_pa$D_IN;
  wire cache_rg_pa$EN;

  // register cache_rg_pte_pa
  reg [31 : 0] cache_rg_pte_pa;
  wire [31 : 0] cache_rg_pte_pa$D_IN;
  wire cache_rg_pte_pa$EN;

  // register cache_rg_st_amo_val
  reg [128 : 0] cache_rg_st_amo_val;
  wire [128 : 0] cache_rg_st_amo_val$D_IN;
  wire cache_rg_st_amo_val$EN;

  // register cache_rg_state
  reg [3 : 0] cache_rg_state;
  reg [3 : 0] cache_rg_state$D_IN;
  wire cache_rg_state$EN;

  // register cache_rg_width_code
  reg [2 : 0] cache_rg_width_code;
  wire [2 : 0] cache_rg_width_code$D_IN;
  wire cache_rg_width_code$EN;

  // register cache_rg_word128_set_in_cache
  reg [7 : 0] cache_rg_word128_set_in_cache;
  wire [7 : 0] cache_rg_word128_set_in_cache$D_IN;
  wire cache_rg_word128_set_in_cache$EN;

  // ports of submodule cache_f_reset_reqs
  wire cache_f_reset_reqs$CLR,
       cache_f_reset_reqs$DEQ,
       cache_f_reset_reqs$D_IN,
       cache_f_reset_reqs$D_OUT,
       cache_f_reset_reqs$EMPTY_N,
       cache_f_reset_reqs$ENQ,
       cache_f_reset_reqs$FULL_N;

  // ports of submodule cache_f_reset_rsps
  wire cache_f_reset_rsps$CLR,
       cache_f_reset_rsps$DEQ,
       cache_f_reset_rsps$D_IN,
       cache_f_reset_rsps$D_OUT,
       cache_f_reset_rsps$EMPTY_N,
       cache_f_reset_rsps$ENQ,
       cache_f_reset_rsps$FULL_N;

  // ports of submodule cache_ram_state_and_ctag_cset
  wire [22 : 0] cache_ram_state_and_ctag_cset$DIA,
		cache_ram_state_and_ctag_cset$DIB,
		cache_ram_state_and_ctag_cset$DOB;
  wire [5 : 0] cache_ram_state_and_ctag_cset$ADDRA,
	       cache_ram_state_and_ctag_cset$ADDRB;
  wire cache_ram_state_and_ctag_cset$ENA,
       cache_ram_state_and_ctag_cset$ENB,
       cache_ram_state_and_ctag_cset$WEA,
       cache_ram_state_and_ctag_cset$WEB;

  // ports of submodule cache_ram_word128_set
  reg [129 : 0] cache_ram_word128_set$DIB;
  reg [7 : 0] cache_ram_word128_set$ADDRB;
  wire [129 : 0] cache_ram_word128_set$DIA, cache_ram_word128_set$DOB;
  wire [7 : 0] cache_ram_word128_set$ADDRA;
  wire cache_ram_word128_set$ENA,
       cache_ram_word128_set$ENB,
       cache_ram_word128_set$WEA,
       cache_ram_word128_set$WEB;

  // ports of submodule cache_soc_map
  wire [63 : 0] cache_soc_map$m_is_IO_addr_addr,
		cache_soc_map$m_is_mem_addr_addr,
		cache_soc_map$m_is_near_mem_IO_addr_addr;
  wire cache_soc_map$m_is_mem_addr;

  // rule scheduling signals
  wire CAN_FIRE_RL_cache_master_xactor_do_clear,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop,
       CAN_FIRE_RL_cache_rl_ST_AMO_response,
       CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop,
       CAN_FIRE_RL_cache_rl_discard_write_rsp,
       CAN_FIRE_RL_cache_rl_drive_exception_rsp,
       CAN_FIRE_RL_cache_rl_io_AMO_SC_req,
       CAN_FIRE_RL_cache_rl_io_AMO_op_req,
       CAN_FIRE_RL_cache_rl_io_AMO_read_rsp,
       CAN_FIRE_RL_cache_rl_io_read_req,
       CAN_FIRE_RL_cache_rl_io_read_rsp,
       CAN_FIRE_RL_cache_rl_io_write_req,
       CAN_FIRE_RL_cache_rl_maintain_io_read_rsp,
       CAN_FIRE_RL_cache_rl_probe_and_immed_rsp,
       CAN_FIRE_RL_cache_rl_rereq,
       CAN_FIRE_RL_cache_rl_reset,
       CAN_FIRE_RL_cache_rl_shift_sb_to_load_delay,
       CAN_FIRE_RL_cache_rl_start_cache_refill,
       CAN_FIRE_RL_cache_rl_start_reset,
       CAN_FIRE_commit,
       CAN_FIRE_mem_master_ar_arready,
       CAN_FIRE_mem_master_aw_awready,
       CAN_FIRE_mem_master_b_bflit,
       CAN_FIRE_mem_master_r_rflit,
       CAN_FIRE_mem_master_w_wready,
       CAN_FIRE_req,
       CAN_FIRE_server_flush_request_put,
       CAN_FIRE_server_flush_response_get,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_tlb_flush,
       WILL_FIRE_RL_cache_master_xactor_do_clear,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop,
       WILL_FIRE_RL_cache_rl_ST_AMO_response,
       WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop,
       WILL_FIRE_RL_cache_rl_discard_write_rsp,
       WILL_FIRE_RL_cache_rl_drive_exception_rsp,
       WILL_FIRE_RL_cache_rl_io_AMO_SC_req,
       WILL_FIRE_RL_cache_rl_io_AMO_op_req,
       WILL_FIRE_RL_cache_rl_io_AMO_read_rsp,
       WILL_FIRE_RL_cache_rl_io_read_req,
       WILL_FIRE_RL_cache_rl_io_read_rsp,
       WILL_FIRE_RL_cache_rl_io_write_req,
       WILL_FIRE_RL_cache_rl_maintain_io_read_rsp,
       WILL_FIRE_RL_cache_rl_probe_and_immed_rsp,
       WILL_FIRE_RL_cache_rl_rereq,
       WILL_FIRE_RL_cache_rl_reset,
       WILL_FIRE_RL_cache_rl_shift_sb_to_load_delay,
       WILL_FIRE_RL_cache_rl_start_cache_refill,
       WILL_FIRE_RL_cache_rl_start_reset,
       WILL_FIRE_commit,
       WILL_FIRE_mem_master_ar_arready,
       WILL_FIRE_mem_master_aw_awready,
       WILL_FIRE_mem_master_b_bflit,
       WILL_FIRE_mem_master_r_rflit,
       WILL_FIRE_mem_master_w_wready,
       WILL_FIRE_req,
       WILL_FIRE_server_flush_request_put,
       WILL_FIRE_server_flush_response_get,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_tlb_flush;

  // inputs to muxes for submodule ports
  wire [147 : 0] MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_1,
		 MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_2,
		 MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_3;
  wire [129 : 0] MUX_cache_ram_word128_set$a_put_3__VAL_1,
		 MUX_cache_ram_word128_set$a_put_3__VAL_2;
  wire [128 : 0] MUX_cache_dw_output_ld_val$wset_1__VAL_1,
		 MUX_cache_dw_output_ld_val$wset_1__VAL_2,
		 MUX_cache_dw_output_ld_val$wset_1__VAL_3,
		 MUX_cache_dw_output_st_amo_val$wset_1__VAL_1,
		 MUX_cache_rg_ld_val$write_1__VAL_2,
		 MUX_cache_rg_st_amo_val$write_1__VAL_2;
  wire [97 : 0] MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_1,
		MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_2,
		MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_1,
		MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_2;
  wire [22 : 0] MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1;
  wire [7 : 0] MUX_cache_ram_word128_set$b_put_2__VAL_2,
	       MUX_cache_ram_word128_set$b_put_2__VAL_4;
  wire [5 : 0] MUX_cache_rg_cset_in_cache$write_1__VAL_1,
	       MUX_cache_rg_exc_code$write_1__VAL_1,
	       MUX_cache_rg_exc_code$write_1__VAL_4;
  wire [3 : 0] MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1,
	       MUX_cache_rg_state$write_1__VAL_1,
	       MUX_cache_rg_state$write_1__VAL_12,
	       MUX_cache_rg_state$write_1__VAL_5,
	       MUX_cache_rg_state$write_1__VAL_7;
  wire MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1,
       MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2,
       MUX_cache_dw_output_ld_val$wset_1__SEL_1,
       MUX_cache_dw_output_ld_val$wset_1__SEL_3,
       MUX_cache_dw_output_ld_val$wset_1__SEL_4,
       MUX_cache_master_xactor_clearing$write_1__SEL_1,
       MUX_cache_master_xactor_shim_arff_rv$port0__write_1__SEL_1,
       MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1,
       MUX_cache_ram_word128_set$a_put_1__SEL_1,
       MUX_cache_ram_word128_set$b_put_1__SEL_2,
       MUX_cache_rg_error_during_refill$write_1__SEL_1,
       MUX_cache_rg_exc_code$write_1__SEL_1,
       MUX_cache_rg_exc_code$write_1__SEL_2,
       MUX_cache_rg_exc_code$write_1__SEL_3,
       MUX_cache_rg_ld_val$write_1__SEL_2,
       MUX_cache_rg_lrsc_valid$write_1__SEL_2,
       MUX_cache_rg_lrsc_valid$write_1__VAL_2,
       MUX_cache_rg_state$write_1__SEL_12,
       MUX_cache_rg_state$write_1__SEL_13,
       MUX_cache_rg_state$write_1__SEL_7;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h5541;
  reg [31 : 0] v__h5642;
  reg [31 : 0] v__h6095;
  reg [31 : 0] v__h21466;
  reg [31 : 0] v__h27528;
  reg [31 : 0] v__h26795;
  reg [31 : 0] v__h32486;
  reg [31 : 0] v__h37809;
  reg [31 : 0] v__h37895;
  reg [31 : 0] v__h38400;
  reg [31 : 0] v__h38696;
  reg [31 : 0] v__h38816;
  reg [31 : 0] v__h33886;
  reg [31 : 0] v__h34148;
  reg [31 : 0] v__h36141;
  reg [31 : 0] v__h37586;
  reg [31 : 0] v__h37700;
  reg [31 : 0] v__h39115;
  reg [31 : 0] v__h39310;
  reg [31 : 0] v__h42372;
  reg [31 : 0] v__h42625;
  reg [31 : 0] v__h39408;
  reg [31 : 0] v__h32934;
  reg [31 : 0] v__h35786;
  reg [31 : 0] v__h43350;
  reg [31 : 0] v__h43311;
  reg [31 : 0] v__h5176;
  reg [31 : 0] v__h43740;
  reg [31 : 0] v__h5170;
  reg [31 : 0] v__h5535;
  reg [31 : 0] v__h5636;
  reg [31 : 0] v__h6089;
  reg [31 : 0] v__h21460;
  reg [31 : 0] v__h26789;
  reg [31 : 0] v__h27522;
  reg [31 : 0] v__h32480;
  reg [31 : 0] v__h32928;
  reg [31 : 0] v__h33880;
  reg [31 : 0] v__h34142;
  reg [31 : 0] v__h35780;
  reg [31 : 0] v__h36135;
  reg [31 : 0] v__h37580;
  reg [31 : 0] v__h37694;
  reg [31 : 0] v__h37803;
  reg [31 : 0] v__h37889;
  reg [31 : 0] v__h38394;
  reg [31 : 0] v__h38690;
  reg [31 : 0] v__h38810;
  reg [31 : 0] v__h39109;
  reg [31 : 0] v__h39304;
  reg [31 : 0] v__h39402;
  reg [31 : 0] v__h42366;
  reg [31 : 0] v__h42619;
  reg [31 : 0] v__h43305;
  reg [31 : 0] v__h43344;
  reg [31 : 0] v__h43734;
  // synopsys translate_on

  // remaining internal signals
  reg [127 : 0] CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q63,
		CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q64,
		CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q65,
		CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q66,
		CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q69,
		IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1056,
		IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1096,
		IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1116,
		IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1228,
		IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1252,
		IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1264,
		IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d375,
		IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d415,
		IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d435,
		IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d620,
		IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d637,
		IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d646,
		IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d730,
		IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d747,
		IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d756,
		_theResult___fst__h29304,
		_theResult___fst__h36379,
		_theResult___fst__h41983,
		_theResult___fst__h7418,
		mem_req_wr_data_wdata__h27234,
		mem_req_wr_data_wdata__h32225,
		mem_req_wr_data_wdata__h38137,
		mem_req_wr_data_wdata__h39627,
		x__h20323,
		x__h22716,
		x__h25752,
		x__h28041,
		x__h28299,
		x__h36453,
		x__h39813;
  reg [63 : 0] _theResult_____2__h27988, _theResult_____2__h39656;
  reg [15 : 0] mem_req_wr_data_wstrb__h32226, mem_req_wr_data_wstrb__h39628;
  reg [2 : 0] _theResult___fst_val__h39574, size_val__h38953;
  wire [146 : 0] cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q72;
  wire [129 : 0] cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270,
		 y__h7470;
  wire [127 : 0] IF_cache_rg_op_3_EQ_0_4_OR_cache_rg_op_3_EQ_2__ETC___d458,
		 IF_cache_rg_op_3_EQ_1_01_OR_cache_rg_op_3_EQ_2_ETC___d795,
		 _theResult___fst__h25676,
		 _theResult___snd_fst__h27243,
		 _theResult___snd_fst__h32234,
		 _theResult___snd_fst__h38146,
		 _theResult___snd_fst__h39636,
		 result__h20266,
		 result__h20334,
		 result__h20372,
		 result__h20405,
		 result__h20438,
		 result__h20471,
		 result__h20504,
		 result__h20537,
		 result__h20570,
		 result__h20603,
		 result__h20636,
		 result__h20669,
		 result__h20702,
		 result__h20735,
		 result__h20768,
		 result__h20801,
		 result__h20834,
		 result__h20889,
		 result__h20922,
		 result__h20955,
		 result__h20988,
		 result__h21021,
		 result__h21054,
		 result__h21087,
		 result__h21120,
		 result__h21167,
		 result__h21200,
		 result__h21233,
		 result__h21266,
		 result__h36381,
		 result__h36406,
		 result__h36464,
		 result__h36500,
		 result__h36533,
		 result__h36566,
		 result__h36599,
		 result__h36632,
		 result__h36665,
		 result__h36698,
		 result__h36731,
		 result__h36764,
		 result__h36797,
		 result__h36830,
		 result__h36863,
		 result__h36896,
		 result__h36929,
		 result__h36962,
		 result__h37017,
		 result__h37050,
		 result__h37083,
		 result__h37116,
		 result__h37149,
		 result__h37182,
		 result__h37215,
		 result__h37248,
		 result__h37295,
		 result__h37328,
		 result__h37361,
		 result__h37394,
		 result__h39894,
		 result__h41063,
		 result__h41095,
		 result__h41127,
		 result__h41159,
		 result__h41191,
		 result__h41223,
		 result__h41255,
		 result__h41287,
		 result__h41319,
		 result__h41351,
		 result__h41383,
		 result__h41415,
		 result__h41447,
		 result__h41479,
		 result__h41511,
		 result__h41565,
		 result__h41597,
		 result__h41629,
		 result__h41661,
		 result__h41693,
		 result__h41725,
		 result__h41757,
		 result__h41789,
		 result__h41835,
		 result__h41867,
		 result__h41899,
		 result__h41931,
		 result__h41985,
		 result__h42014,
		 result__h7420,
		 word128__h39495;
  wire [96 : 0] cache_master_xactor_shim_arff_rvport1__read_B_ETC__q73,
		cache_master_xactor_shim_awff_rvport1__read_B_ETC__q71;
  wire [63 : 0] IF_cache_rg_width_code_94_EQ_2_99_THEN_SEXT_IF_ETC___d1279,
		IF_cache_rg_width_code_94_EQ_2_99_THEN_SEXT_IF_ETC___d535,
		IF_cache_rg_width_code_94_EQ_2_99_THEN_SEXT_ca_ETC___d664,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q18,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q3,
		cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q33,
		cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q48,
		cline_fabric_addr__h32987,
		mem_req_wr_addr_awaddr__h32089,
		mem_req_wr_addr_awaddr__h39491,
		new_st_val__h28154,
		new_st_val__h28247,
		new_st_val__h29395,
		new_st_val__h29399,
		new_st_val__h29403,
		new_st_val__h29407,
		new_st_val__h29412,
		new_st_val__h29418,
		new_st_val__h29423,
		new_st_val__h39668,
		new_st_val__h39761,
		new_st_val__h42076,
		new_st_val__h42080,
		new_st_val__h42084,
		new_st_val__h42088,
		new_st_val__h42093,
		new_st_val__h42099,
		new_st_val__h42104,
		w1___1__h28213,
		w1___1__h39727,
		w1__h27980,
		w1__h39648,
		w2__h27982,
		x__h28152,
		x__h39666;
  wire [31 : 0] IF_cache_rg_addr_BITS_4_TO_0_EQ_0_THEN_1_ELSE_0__q2,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q13,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q21,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q28,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q6,
		cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q36,
		cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q43,
		cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q51,
		cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q58,
		cache_rg_st_amo_val_BITS_31_TO_0__q68,
		cline_addr__h32986,
		x8299_BITS_31_TO_0__q67,
		x9813_BITS_31_TO_0__q70,
		x__h28021;
  wire [21 : 0] pa_ctag__h6986;
  wire [15 : 0] cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q12,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q16,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q20,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q24,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q27,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q31,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q5,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q9,
		cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q35,
		cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q39,
		cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q42,
		cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q46,
		cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q50,
		cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q54,
		cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q57,
		cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q61,
		strobe128__h32153,
		strobe128__h32156,
		strobe128__h32159,
		strobe128__h32162,
		strobe128__h39555,
		strobe128__h39558,
		strobe128__h39561,
		strobe128__h39564;
  wire [7 : 0] cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q10,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q11,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q14,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q15,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q17,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q19,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q22,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q23,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q25,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q26,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q29,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q30,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q32,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q4,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q7,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q8,
	       cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q34,
	       cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q37,
	       cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q38,
	       cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q40,
	       cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q41,
	       cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q44,
	       cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q45,
	       cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q47,
	       cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q49,
	       cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q52,
	       cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q53,
	       cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q55,
	       cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q56,
	       cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q59,
	       cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q60,
	       cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q62;
  wire [6 : 0] shift_bits__h32096, shift_bits__h39498;
  wire [5 : 0] access_exc_code__h4892;
  wire [3 : 0] IF_cache_rg_op_3_EQ_0_4_OR_cache_rg_op_3_EQ_2__ETC___d165,
	       IF_cache_rg_op_3_EQ_1_01_OR_cache_rg_op_3_EQ_2_ETC___d164,
	       b__h32888;
  wire [2 : 0] IF_cache_rg_op_3_EQ_1_01_OR_cache_rg_op_3_EQ_2_ETC___d808;
  wire [1 : 0] _0__q1,
	       cache_ram_word128_set_b_read__53_BITS_129_TO_1_ETC___d555,
	       mem_req_wr_data_wuser__h27237,
	       x__h22607,
	       x__h27956,
	       y__h28004;
  wire IF_cache_rg_op_3_EQ_1_01_OR_cache_rg_op_3_EQ_2_ETC___d131,
       IF_cache_rg_width_code_94_EQ_3_03_THEN_IF_cach_ETC___d278,
       NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57,
       NOT_cache_cfg_verbosity_read__5_ULE_2_11___d912,
       NOT_cache_dw_commit_whas__4_5_OR_NOT_cache_dw__ETC___d162,
       NOT_cache_master_xactor_clearing_0_5_AND_cache_ETC___d1174,
       NOT_cache_ram_state_and_ctag_cset_b_read__21_B_ETC___d130,
       NOT_cache_ram_state_and_ctag_cset_b_read__21_B_ETC___d173,
       NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d159,
       NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d780,
       NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d833,
       NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d843,
       NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d849,
       NOT_cache_rg_op_3_EQ_1_01_79_AND_NOT_cache_rg__ETC___d182,
       NOT_cache_rg_op_3_EQ_1_01_79_AND_NOT_cache_rg__ETC___d540,
       NOT_cache_rg_op_3_EQ_1_01_79_AND_NOT_cache_rg__ETC___d773,
       NOT_cache_rg_op_3_EQ_1_01_79_AND_NOT_cache_rg__ETC___d861,
       NOT_cache_rg_op_3_EQ_1_01_79_AND_NOT_cache_rg__ETC___d865,
       NOT_cache_rg_op_3_EQ_1_01_79_AND_NOT_cache_rg__ETC___d871,
       NOT_cache_rg_op_3_EQ_1_01_79_AND_NOT_cache_rg__ETC___d878,
       NOT_cache_rg_op_3_EQ_2_5_37_OR_NOT_cache_rg_am_ETC___d538,
       NOT_cache_rg_op_3_EQ_2_5_37_OR_NOT_cache_rg_am_ETC___d771,
       NOT_cache_rg_op_3_EQ_2_5_37_OR_NOT_cache_rg_am_ETC___d831,
       NOT_cache_rg_op_3_EQ_2_5_37_OR_NOT_cache_rg_am_ETC___d836,
       NOT_cache_rg_op_3_EQ_2_5_37_OR_NOT_cache_rg_am_ETC___d841,
       NOT_cache_rg_op_3_EQ_2_5_37_OR_NOT_cache_rg_am_ETC___d847,
       NOT_req_width_code_EQ_0_369_370_AND_NOT_req_wi_ETC___d1389,
       cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d481,
       cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d821,
       cache_ram_state_and_ctag_cset_b_read__21_BITS__ETC___d127,
       cache_ram_state_and_ctag_cset_b_read__21_BIT_2_ETC___d174,
       cache_rg_addr_9_EQ_cache_rg_lrsc_pa_07___d171,
       cache_rg_amo_funct7_6_BITS_6_TO_2_7_EQ_0b10_8__ETC___d488,
       cache_rg_lrsc_pa_07_EQ_cache_rg_addr_9___d108,
       cache_rg_op_3_EQ_0_4_OR_cache_rg_op_3_EQ_2_5_A_ETC___d154,
       cache_rg_op_3_EQ_0_4_OR_cache_rg_op_3_EQ_2_5_A_ETC___d185,
       cache_rg_op_3_EQ_0_4_OR_cache_rg_op_3_EQ_2_5_A_ETC___d191,
       cache_rg_op_3_EQ_0_4_OR_cache_rg_op_3_EQ_2_5_A_ETC___d280,
       cache_rg_op_3_EQ_0_4_OR_cache_rg_op_3_EQ_2_5_A_ETC___d467,
       cache_rg_op_3_EQ_0_4_OR_cache_rg_op_3_EQ_2_5_A_ETC___d483,
       cache_rg_op_3_EQ_1_01_OR_cache_rg_op_3_EQ_2_5__ETC___d183,
       cache_rg_op_3_EQ_1_01_OR_cache_rg_op_3_EQ_2_5__ETC___d541,
       cache_rg_op_3_EQ_1_01_OR_cache_rg_op_3_EQ_2_5__ETC___d774,
       cache_rg_op_3_EQ_1_01_OR_cache_rg_op_3_EQ_2_5__ETC___d778,
       cache_rg_op_3_EQ_2_5_AND_cache_rg_amo_funct7_6_ETC___d120,
       cache_rg_op_3_EQ_2_5_AND_cache_rg_amo_funct7_6_ETC___d856,
       cache_rg_state_9_EQ_12_57_AND_cache_rg_op_3_EQ_ETC___d959,
       cache_rg_state_9_EQ_3_35_AND_NOT_cache_rg_op_3_ETC___d144,
       cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d495,
       cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d543,
       cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d867,
       cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d873,
       cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d883,
       lrsc_result__h21856,
       req_width_code_EQ_0_369_OR_req_width_code_EQ_1_ETC___d1405,
       req_width_code_EQ_0_369_OR_req_width_code_EQ_1_ETC___d1410;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = cache_f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = cache_f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get =
	     !cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get =
	     !cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // action method req
  assign CAN_FIRE_req = 1'd1 ;
  assign WILL_FIRE_req = EN_req ;

  // action method commit
  assign CAN_FIRE_commit = 1'd1 ;
  assign WILL_FIRE_commit = EN_commit ;

  // value method valid
  assign valid = cache_dw_valid$whas ;

  // value method addr
  assign addr = cache_rg_addr ;

  // value method word128_fst
  assign word128_fst = cache_dw_output_ld_val$wget[128] ;

  // value method word128_snd
  assign word128_snd = cache_dw_output_ld_val$wget[127:0] ;

  // value method st_amo_val_fst
  assign st_amo_val_fst = cache_dw_output_st_amo_val$wget[128] ;

  // value method st_amo_val_snd
  assign st_amo_val_snd = cache_dw_output_st_amo_val$wget[127:0] ;

  // value method exc
  assign exc = cache_rg_state == 4'd4 ;

  // value method exc_code
  assign exc_code = cache_rg_exc_code ;

  // action method server_flush_request_put
  assign RDY_server_flush_request_put = cache_f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_flush_request_put = cache_f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_flush_request_put = EN_server_flush_request_put ;

  // action method server_flush_response_get
  assign RDY_server_flush_response_get =
	     cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_flush_response_get =
	     cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_flush_response_get = EN_server_flush_response_get ;

  // action method tlb_flush
  assign RDY_tlb_flush = 1'd1 ;
  assign CAN_FIRE_tlb_flush = 1'd1 ;
  assign WILL_FIRE_tlb_flush = EN_tlb_flush ;

  // value method mem_master_aw_awid
  assign mem_master_awid =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q71[96:93] ;

  // value method mem_master_aw_awaddr
  assign mem_master_awaddr =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q71[92:29] ;

  // value method mem_master_aw_awlen
  assign mem_master_awlen =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q71[28:21] ;

  // value method mem_master_aw_awsize
  assign mem_master_awsize =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q71[20:18] ;

  // value method mem_master_aw_awburst
  assign mem_master_awburst =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q71[17:16] ;

  // value method mem_master_aw_awlock
  assign mem_master_awlock =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q71[15] ;

  // value method mem_master_aw_awcache
  assign mem_master_awcache =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q71[14:11] ;

  // value method mem_master_aw_awprot
  assign mem_master_awprot =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q71[10:8] ;

  // value method mem_master_aw_awqos
  assign mem_master_awqos =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q71[7:4] ;

  // value method mem_master_aw_awregion
  assign mem_master_awregion =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q71[3:0] ;

  // value method mem_master_aw_awvalid
  assign mem_master_awvalid =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek ;

  // action method mem_master_aw_awready
  assign CAN_FIRE_mem_master_aw_awready = 1'd1 ;
  assign WILL_FIRE_mem_master_aw_awready = 1'd1 ;

  // value method mem_master_w_wdata
  assign mem_master_wdata =
	     cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q72[146:19] ;

  // value method mem_master_w_wstrb
  assign mem_master_wstrb =
	     cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q72[18:3] ;

  // value method mem_master_w_wlast
  assign mem_master_wlast =
	     cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q72[2] ;

  // value method mem_master_w_wuser
  assign mem_master_wuser =
	     cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q72[1:0] ;

  // value method mem_master_w_wvalid
  assign mem_master_wvalid =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek ;

  // action method mem_master_w_wready
  assign CAN_FIRE_mem_master_w_wready = 1'd1 ;
  assign WILL_FIRE_mem_master_w_wready = 1'd1 ;

  // action method mem_master_b_bflit
  assign CAN_FIRE_mem_master_b_bflit = 1'd1 ;
  assign WILL_FIRE_mem_master_b_bflit = mem_master_bvalid ;

  // value method mem_master_b_bready
  assign mem_master_bready = !cache_master_xactor_shim_bff_rv[6] ;

  // value method mem_master_ar_arid
  assign mem_master_arid =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q73[96:93] ;

  // value method mem_master_ar_araddr
  assign mem_master_araddr =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q73[92:29] ;

  // value method mem_master_ar_arlen
  assign mem_master_arlen =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q73[28:21] ;

  // value method mem_master_ar_arsize
  assign mem_master_arsize =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q73[20:18] ;

  // value method mem_master_ar_arburst
  assign mem_master_arburst =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q73[17:16] ;

  // value method mem_master_ar_arlock
  assign mem_master_arlock =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q73[15] ;

  // value method mem_master_ar_arcache
  assign mem_master_arcache =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q73[14:11] ;

  // value method mem_master_ar_arprot
  assign mem_master_arprot =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q73[10:8] ;

  // value method mem_master_ar_arqos
  assign mem_master_arqos =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q73[7:4] ;

  // value method mem_master_ar_arregion
  assign mem_master_arregion =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q73[3:0] ;

  // value method mem_master_ar_arvalid
  assign mem_master_arvalid =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek ;

  // action method mem_master_ar_arready
  assign CAN_FIRE_mem_master_ar_arready = 1'd1 ;
  assign WILL_FIRE_mem_master_ar_arready = 1'd1 ;

  // action method mem_master_r_rflit
  assign CAN_FIRE_mem_master_r_rflit = 1'd1 ;
  assign WILL_FIRE_mem_master_r_rflit = mem_master_rvalid ;

  // value method mem_master_r_rready
  assign mem_master_rready = !cache_master_xactor_shim_rff_rv[137] ;

  // submodule cache_f_reset_reqs
  FIFO2 #(.width(32'd1), .guarded(32'd1)) cache_f_reset_reqs(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(cache_f_reset_reqs$D_IN),
							     .ENQ(cache_f_reset_reqs$ENQ),
							     .DEQ(cache_f_reset_reqs$DEQ),
							     .CLR(cache_f_reset_reqs$CLR),
							     .D_OUT(cache_f_reset_reqs$D_OUT),
							     .FULL_N(cache_f_reset_reqs$FULL_N),
							     .EMPTY_N(cache_f_reset_reqs$EMPTY_N));

  // submodule cache_f_reset_rsps
  FIFO2 #(.width(32'd1), .guarded(32'd1)) cache_f_reset_rsps(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(cache_f_reset_rsps$D_IN),
							     .ENQ(cache_f_reset_rsps$ENQ),
							     .DEQ(cache_f_reset_rsps$DEQ),
							     .CLR(cache_f_reset_rsps$CLR),
							     .D_OUT(cache_f_reset_rsps$D_OUT),
							     .FULL_N(cache_f_reset_rsps$FULL_N),
							     .EMPTY_N(cache_f_reset_rsps$EMPTY_N));

  // submodule cache_ram_state_and_ctag_cset
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd23),
	  .MEMSIZE(7'd64)) cache_ram_state_and_ctag_cset(.CLKA(CLK),
							 .CLKB(CLK),
							 .ADDRA(cache_ram_state_and_ctag_cset$ADDRA),
							 .ADDRB(cache_ram_state_and_ctag_cset$ADDRB),
							 .DIA(cache_ram_state_and_ctag_cset$DIA),
							 .DIB(cache_ram_state_and_ctag_cset$DIB),
							 .WEA(cache_ram_state_and_ctag_cset$WEA),
							 .WEB(cache_ram_state_and_ctag_cset$WEB),
							 .ENA(cache_ram_state_and_ctag_cset$ENA),
							 .ENB(cache_ram_state_and_ctag_cset$ENB),
							 .DOA(),
							 .DOB(cache_ram_state_and_ctag_cset$DOB));

  // submodule cache_ram_word128_set
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd8),
	  .DATA_WIDTH(32'd130),
	  .MEMSIZE(9'd256)) cache_ram_word128_set(.CLKA(CLK),
						  .CLKB(CLK),
						  .ADDRA(cache_ram_word128_set$ADDRA),
						  .ADDRB(cache_ram_word128_set$ADDRB),
						  .DIA(cache_ram_word128_set$DIA),
						  .DIB(cache_ram_word128_set$DIB),
						  .WEA(cache_ram_word128_set$WEA),
						  .WEB(cache_ram_word128_set$WEB),
						  .ENA(cache_ram_word128_set$ENA),
						  .ENB(cache_ram_word128_set$ENB),
						  .DOA(),
						  .DOB(cache_ram_word128_set$DOB));

  // submodule cache_soc_map
  mkSoC_Map cache_soc_map(.CLK(CLK),
			  .RST_N(RST_N),
			  .m_is_IO_addr_addr(cache_soc_map$m_is_IO_addr_addr),
			  .m_is_mem_addr_addr(cache_soc_map$m_is_mem_addr_addr),
			  .m_is_near_mem_IO_addr_addr(cache_soc_map$m_is_near_mem_IO_addr_addr),
			  .m_plic_addr_range(),
			  .m_near_mem_io_addr_range(),
			  .m_flash_mem_addr_range(),
			  .m_ethernet_0_addr_range(),
			  .m_dma_0_addr_range(),
			  .m_uart16550_0_addr_range(),
			  .m_gpio_0_addr_range(),
			  .m_boot_rom_addr_range(),
			  .m_ddr4_0_uncached_addr_range(),
			  .m_ddr4_0_cached_addr_range(),
			  .m_is_mem_addr(cache_soc_map$m_is_mem_addr),
			  .m_is_IO_addr(),
			  .m_is_near_mem_IO_addr(),
			  .m_pc_reset_value(),
			  .m_mtvec_reset_value(),
			  .m_nmivec_reset_value());

  // rule RL_cache_rl_reset
  assign CAN_FIRE_RL_cache_rl_reset =
	     (cache_rg_cset_in_cache != 6'd63 ||
	      cache_f_reset_reqs$EMPTY_N && cache_f_reset_rsps$FULL_N) &&
	     cache_rg_state == 4'd1 ;
  assign WILL_FIRE_RL_cache_rl_reset = CAN_FIRE_RL_cache_rl_reset ;

  // rule RL_cache_rl_shift_sb_to_load_delay
  assign CAN_FIRE_RL_cache_rl_shift_sb_to_load_delay = 1'd1 ;
  assign WILL_FIRE_RL_cache_rl_shift_sb_to_load_delay = 1'd1 ;

  // rule RL_cache_rl_probe_and_immed_rsp
  assign CAN_FIRE_RL_cache_rl_probe_and_immed_rsp =
	     (!EN_commit || !cache_soc_map$m_is_mem_addr ||
	      cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010 ||
	      IF_cache_rg_op_3_EQ_1_01_OR_cache_rg_op_3_EQ_2_ETC___d131) &&
	     cache_rg_state_9_EQ_3_35_AND_NOT_cache_rg_op_3_ETC___d144 ;
  assign WILL_FIRE_RL_cache_rl_probe_and_immed_rsp =
	     CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     !WILL_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_rereq
  assign CAN_FIRE_RL_cache_rl_rereq = cache_rg_state == 4'd10 ;
  assign WILL_FIRE_RL_cache_rl_rereq =
	     CAN_FIRE_RL_cache_rl_rereq &&
	     !WILL_FIRE_RL_cache_rl_start_reset &&
	     !EN_req ;

  // rule RL_cache_rl_ST_AMO_response
  assign CAN_FIRE_RL_cache_rl_ST_AMO_response = cache_rg_state == 4'd11 ;
  assign WILL_FIRE_RL_cache_rl_ST_AMO_response =
	     CAN_FIRE_RL_cache_rl_ST_AMO_response ;

  // rule RL_cache_rl_maintain_io_read_rsp
  assign CAN_FIRE_RL_cache_rl_maintain_io_read_rsp = cache_rg_state == 4'd14 ;
  assign WILL_FIRE_RL_cache_rl_maintain_io_read_rsp =
	     CAN_FIRE_RL_cache_rl_maintain_io_read_rsp ;

  // rule RL_cache_rl_io_write_req
  assign CAN_FIRE_RL_cache_rl_io_write_req =
	     !cache_master_xactor_clearing &&
	     !cache_master_xactor_shim_awff_rv[97] &&
	     !cache_master_xactor_shim_wff_rv[147] &&
	     cache_rg_state == 4'd12 &&
	     cache_rg_op == 2'd1 ;
  assign WILL_FIRE_RL_cache_rl_io_write_req =
	     CAN_FIRE_RL_cache_rl_io_write_req &&
	     !WILL_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_io_AMO_SC_req
  assign CAN_FIRE_RL_cache_rl_io_AMO_SC_req =
	     cache_rg_state == 4'd12 && cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00011 ;
  assign WILL_FIRE_RL_cache_rl_io_AMO_SC_req =
	     CAN_FIRE_RL_cache_rl_io_AMO_SC_req &&
	     !WILL_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_io_AMO_op_req
  assign CAN_FIRE_RL_cache_rl_io_AMO_op_req =
	     !cache_master_xactor_clearing &&
	     !cache_master_xactor_shim_arff_rv[97] &&
	     cache_rg_state == 4'd12 &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] != 5'b00010 &&
	     cache_rg_amo_funct7[6:2] != 5'b00011 ;
  assign WILL_FIRE_RL_cache_rl_io_AMO_op_req =
	     CAN_FIRE_RL_cache_rl_io_AMO_op_req &&
	     !WILL_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_drive_exception_rsp
  assign CAN_FIRE_RL_cache_rl_drive_exception_rsp = cache_rg_state == 4'd4 ;
  assign WILL_FIRE_RL_cache_rl_drive_exception_rsp = cache_rg_state == 4'd4 ;

  // rule RL_cache_master_xactor_ug_master_u_b_warnDoPut
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut =
	     cache_master_xactor_ug_master_u_b_putWire$whas &&
	     cache_master_xactor_shim_bff_rv[6] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut ;

  // rule RL_cache_master_xactor_ug_master_u_b_doPut
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut =
	     !cache_master_xactor_shim_bff_rv[6] &&
	     cache_master_xactor_ug_master_u_b_putWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut ;

  // rule RL_cache_master_xactor_ug_master_u_r_warnDoPut
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut =
	     cache_master_xactor_ug_master_u_r_putWire$whas &&
	     cache_master_xactor_shim_rff_rv[137] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut ;

  // rule RL_cache_master_xactor_ug_master_u_r_doPut
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut =
	     !cache_master_xactor_shim_rff_rv[137] &&
	     cache_master_xactor_ug_master_u_r_putWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut ;

  // rule RL_cache_rl_cache_refill_rsps_loop
  assign CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop =
	     !cache_master_xactor_clearing &&
	     cache_master_xactor_shim_rff_rv$port1__read[137] &&
	     cache_rg_state == 4'd9 ;
  assign WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop =
	     CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     !WILL_FIRE_RL_cache_rl_start_reset &&
	     !EN_req ;

  // rule RL_cache_rl_io_read_rsp
  assign CAN_FIRE_RL_cache_rl_io_read_rsp =
	     !cache_master_xactor_clearing &&
	     cache_master_xactor_shim_rff_rv$port1__read[137] &&
	     cache_rg_state == 4'd13 ;
  assign WILL_FIRE_RL_cache_rl_io_read_rsp =
	     CAN_FIRE_RL_cache_rl_io_read_rsp &&
	     !WILL_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_io_AMO_read_rsp
  assign CAN_FIRE_RL_cache_rl_io_AMO_read_rsp =
	     NOT_cache_master_xactor_clearing_0_5_AND_cache_ETC___d1174 &&
	     cache_rg_state == 4'd15 ;
  assign WILL_FIRE_RL_cache_rl_io_AMO_read_rsp =
	     CAN_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     !WILL_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_start_cache_refill
  assign CAN_FIRE_RL_cache_rl_start_cache_refill =
	     !cache_master_xactor_clearing &&
	     !cache_master_xactor_shim_arff_rv[97] &&
	     cache_rg_state == 4'd8 &&
	     b__h32888 == 4'd0 ;
  assign WILL_FIRE_RL_cache_rl_start_cache_refill =
	     CAN_FIRE_RL_cache_rl_start_cache_refill &&
	     !WILL_FIRE_RL_cache_rl_start_reset &&
	     !EN_req ;

  // rule RL_cache_rl_io_read_req
  assign CAN_FIRE_RL_cache_rl_io_read_req =
	     !cache_master_xactor_clearing &&
	     !cache_master_xactor_shim_arff_rv[97] &&
	     cache_rg_state_9_EQ_12_57_AND_cache_rg_op_3_EQ_ETC___d959 ;
  assign WILL_FIRE_RL_cache_rl_io_read_req =
	     CAN_FIRE_RL_cache_rl_io_read_req &&
	     !WILL_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_discard_write_rsp
  assign CAN_FIRE_RL_cache_rl_discard_write_rsp =
	     !cache_master_xactor_clearing &&
	     cache_master_xactor_shim_bff_rv$port1__read[6] &&
	     b__h32888 != 4'd0 ;
  assign WILL_FIRE_RL_cache_rl_discard_write_rsp =
	     CAN_FIRE_RL_cache_rl_discard_write_rsp ;

  // rule RL_cache_rl_start_reset
  assign CAN_FIRE_RL_cache_rl_start_reset =
	     cache_f_reset_reqs$EMPTY_N &&
	     (cache_f_reset_reqs$D_OUT || !cache_master_xactor_clearing) &&
	     cache_rg_state != 4'd1 ;
  assign WILL_FIRE_RL_cache_rl_start_reset =
	     CAN_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_master_xactor_ug_master_u_aw_setPeek
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek =
	     cache_master_xactor_shim_awff_rv$port1__read[97] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek ;

  // rule RL_cache_master_xactor_ug_master_u_aw_warnDoDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop =
	     cache_master_xactor_ug_master_u_aw_dropWire$whas &&
	     !cache_master_xactor_shim_awff_rv$port1__read[97] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop ;

  // rule RL_cache_master_xactor_ug_master_u_aw_doDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop =
	     cache_master_xactor_shim_awff_rv$port1__read[97] &&
	     cache_master_xactor_ug_master_u_aw_dropWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop ;

  // rule RL_cache_master_xactor_ug_master_u_w_setPeek
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek =
	     cache_master_xactor_shim_wff_rv$port1__read[147] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek ;

  // rule RL_cache_master_xactor_ug_master_u_w_warnDoDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop =
	     cache_master_xactor_ug_master_u_w_dropWire$whas &&
	     !cache_master_xactor_shim_wff_rv$port1__read[147] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop ;

  // rule RL_cache_master_xactor_ug_master_u_w_doDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop =
	     cache_master_xactor_shim_wff_rv$port1__read[147] &&
	     cache_master_xactor_ug_master_u_w_dropWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop ;

  // rule RL_cache_master_xactor_ug_master_u_ar_setPeek
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek =
	     cache_master_xactor_shim_arff_rv$port1__read[97] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek ;

  // rule RL_cache_master_xactor_ug_master_u_ar_warnDoDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop =
	     cache_master_xactor_ug_master_u_ar_dropWire$whas &&
	     !cache_master_xactor_shim_arff_rv$port1__read[97] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop ;

  // rule RL_cache_master_xactor_ug_master_u_ar_doDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop =
	     cache_master_xactor_shim_arff_rv$port1__read[97] &&
	     cache_master_xactor_ug_master_u_ar_dropWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop ;

  // rule RL_cache_master_xactor_do_clear
  assign CAN_FIRE_RL_cache_master_xactor_do_clear =
	     cache_master_xactor_clearing ;
  assign WILL_FIRE_RL_cache_master_xactor_do_clear =
	     cache_master_xactor_clearing &&
	     !WILL_FIRE_RL_cache_rl_start_reset ;

  // inputs to muxes for submodule ports
  assign MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 ;
  assign MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_soc_map$m_is_mem_addr &&
	     NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d780 ;
  assign MUX_cache_dw_output_ld_val$wset_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 ;
  assign MUX_cache_dw_output_ld_val$wset_1__SEL_3 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op_3_EQ_0_4_OR_cache_rg_op_3_EQ_2_5_A_ETC___d191 ;
  assign MUX_cache_dw_output_ld_val$wset_1__SEL_4 =
	     WILL_FIRE_RL_cache_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_ST_AMO_response ;
  assign MUX_cache_master_xactor_clearing$write_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_start_reset && !cache_f_reset_reqs$D_OUT ;
  assign MUX_cache_master_xactor_shim_arff_rv$port0__write_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_io_AMO_op_req ||
	     WILL_FIRE_RL_cache_rl_io_read_req ;
  assign MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 =
	     EN_req &&
	     (req_width_code_EQ_0_369_OR_req_width_code_EQ_1_ETC___d1405 ||
	      req_width_code == 3'b100 && req_addr[3:0] == 4'b0) ;
  assign MUX_cache_ram_word128_set$a_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 ;
  assign MUX_cache_ram_word128_set$b_put_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_word128_set_in_cache[1:0] != 2'd3 ;
  assign MUX_cache_rg_error_during_refill$write_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 ;
  assign MUX_cache_rg_exc_code$write_1__SEL_1 =
	     EN_req &&
	     NOT_req_width_code_EQ_0_369_370_AND_NOT_req_wi_ETC___d1389 &&
	     (req_width_code != 3'b100 || req_addr[3:0] != 4'b0) ;
  assign MUX_cache_rg_exc_code$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 ;
  assign MUX_cache_rg_exc_code$write_1__SEL_3 =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 ;
  assign MUX_cache_rg_ld_val$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d495 ;
  assign MUX_cache_rg_lrsc_valid$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op_3_EQ_0_4_OR_cache_rg_op_3_EQ_2_5_A_ETC___d185 ;
  assign MUX_cache_rg_state$write_1__SEL_7 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_word128_set_in_cache[1:0] == 2'd3 ;
  assign MUX_cache_rg_state$write_1__SEL_12 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     NOT_cache_dw_commit_whas__4_5_OR_NOT_cache_dw__ETC___d162 ;
  assign MUX_cache_rg_state$write_1__SEL_13 =
	     WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 ;
  assign MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1 =
	     cache_ctr_wr_rsps_pending_crg + 4'd1 ;
  assign MUX_cache_dw_output_ld_val$wset_1__VAL_1 = { 1'd0, x__h36453 } ;
  assign MUX_cache_dw_output_ld_val$wset_1__VAL_2 =
	     { 65'd0,
	       IF_cache_rg_width_code_94_EQ_2_99_THEN_SEXT_IF_ETC___d1279 } ;
  assign MUX_cache_dw_output_ld_val$wset_1__VAL_3 =
	     { cache_rg_op_3_EQ_0_4_OR_cache_rg_op_3_EQ_2_5_A_ETC___d280,
	       IF_cache_rg_op_3_EQ_0_4_OR_cache_rg_op_3_EQ_2__ETC___d458 } ;
  assign MUX_cache_dw_output_st_amo_val$wset_1__VAL_1 =
	     { _0__q1[IF_cache_rg_addr_BITS_4_TO_0_EQ_0_THEN_1_ELSE_0__q2[0]],
	       128'd0 } ;
  assign MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_1 =
	     { 5'd16,
	       mem_req_wr_addr_awaddr__h39491,
	       8'd0,
	       size_val__h38953,
	       18'd65536 } ;
  assign MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_2 =
	     { 5'd16, cline_fabric_addr__h32987, 29'd7405568 } ;
  assign MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_1 =
	     { 5'd16,
	       mem_req_wr_addr_awaddr__h39491,
	       8'd0,
	       _theResult___fst_val__h39574,
	       18'd65536 } ;
  assign MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_2 =
	     { 5'd16,
	       mem_req_wr_addr_awaddr__h32089,
	       8'd0,
	       _theResult___fst_val__h39574,
	       18'd65536 } ;
  assign MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_1 =
	     { 1'd1,
	       mem_req_wr_data_wdata__h39627,
	       mem_req_wr_data_wstrb__h39628,
	       3'd4 } ;
  assign MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_2 =
	     { 1'd1,
	       IF_cache_rg_op_3_EQ_1_01_OR_cache_rg_op_3_EQ_2_ETC___d795,
	       mem_req_wr_data_wstrb__h32226,
	       IF_cache_rg_op_3_EQ_1_01_OR_cache_rg_op_3_EQ_2_ETC___d808 } ;
  assign MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_3 =
	     { 1'd1,
	       mem_req_wr_data_wdata__h38137,
	       mem_req_wr_data_wstrb__h39628,
	       1'd1,
	       mem_req_wr_data_wuser__h27237 } ;
  assign MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1 =
	     { 3'd4, cache_rg_pa[31:12] } ;
  assign MUX_cache_ram_word128_set$a_put_3__VAL_1 =
	     { cache_master_xactor_shim_rff_rv$port1__read[1:0],
	       cache_master_xactor_shim_rff_rv$port1__read[132:5] } ;
  assign MUX_cache_ram_word128_set$a_put_3__VAL_2 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       { x__h22607, x__h22716 } :
	       { cache_ram_word128_set_b_read__53_BITS_129_TO_1_ETC___d555,
		 x__h28041 } ;
  assign MUX_cache_ram_word128_set$b_put_2__VAL_2 =
	     cache_rg_word128_set_in_cache + 8'd1 ;
  assign MUX_cache_ram_word128_set$b_put_2__VAL_4 =
	     { cache_rg_addr[11:6], 2'd0 } ;
  assign MUX_cache_rg_cset_in_cache$write_1__VAL_1 =
	     cache_rg_cset_in_cache + 6'd1 ;
  assign MUX_cache_rg_exc_code$write_1__VAL_1 =
	     (req_op == 2'd0) ? 6'd4 : 6'd6 ;
  assign MUX_cache_rg_exc_code$write_1__VAL_4 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) ?
	       6'd5 :
	       6'd7 ;
  assign MUX_cache_rg_ld_val$write_1__VAL_2 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       { 128'd0, lrsc_result__h21856 } :
	       { 65'd0,
		 IF_cache_rg_width_code_94_EQ_2_99_THEN_SEXT_IF_ETC___d535 } ;
  assign MUX_cache_rg_lrsc_valid$write_1__VAL_2 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__21_BITS__ETC___d127 ;
  assign MUX_cache_rg_st_amo_val$write_1__VAL_2 = { 65'd0, x__h28152 } ;
  assign MUX_cache_rg_state$write_1__VAL_1 =
	     (NOT_req_width_code_EQ_0_369_370_AND_NOT_req_wi_ETC___d1389 &&
	      (req_width_code != 3'b100 || req_addr[3:0] != 4'b0)) ?
	       4'd4 :
	       4'd3 ;
  assign MUX_cache_rg_state$write_1__VAL_5 =
	     (cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0) ?
	       4'd14 :
	       4'd4 ;
  assign MUX_cache_rg_state$write_1__VAL_7 =
	     (cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 ||
	      cache_rg_error_during_refill) ?
	       4'd4 :
	       4'd10 ;
  assign MUX_cache_rg_state$write_1__VAL_12 =
	     EN_commit ?
	       (cache_soc_map$m_is_mem_addr ?
		  IF_cache_rg_op_3_EQ_0_4_OR_cache_rg_op_3_EQ_2__ETC___d165 :
		  4'd12) :
	       4'd4 ;

  // inlined wires
  assign cache_master_xactor_ug_master_u_b_putWire$wget =
	     { mem_master_bid, mem_master_bresp } ;
  assign cache_master_xactor_ug_master_u_b_putWire$whas =
	     mem_master_bvalid && !cache_master_xactor_shim_bff_rv[6] ;
  assign cache_master_xactor_ug_master_u_r_putWire$wget =
	     { mem_master_rid,
	       mem_master_rdata,
	       mem_master_rresp,
	       mem_master_rlast,
	       mem_master_ruser } ;
  assign cache_master_xactor_ug_master_u_r_putWire$whas =
	     mem_master_rvalid && !cache_master_xactor_shim_rff_rv[137] ;
  assign cache_dw_valid$whas =
	     (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp ||
	      WILL_FIRE_RL_cache_rl_io_read_rsp) &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op_3_EQ_0_4_OR_cache_rg_op_3_EQ_2_5_A_ETC___d191 ||
	     WILL_FIRE_RL_cache_rl_drive_exception_rsp ||
	     WILL_FIRE_RL_cache_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_ST_AMO_response ;
  always@(MUX_cache_dw_output_ld_val$wset_1__SEL_1 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_1 or
	  MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_2 or
	  MUX_cache_dw_output_ld_val$wset_1__SEL_3 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_3 or
	  MUX_cache_dw_output_ld_val$wset_1__SEL_4 or cache_rg_ld_val)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_dw_output_ld_val$wset_1__SEL_1:
	  cache_dw_output_ld_val$wget =
	      MUX_cache_dw_output_ld_val$wset_1__VAL_1;
      MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  cache_dw_output_ld_val$wget =
	      MUX_cache_dw_output_ld_val$wset_1__VAL_2;
      MUX_cache_dw_output_ld_val$wset_1__SEL_3:
	  cache_dw_output_ld_val$wget =
	      MUX_cache_dw_output_ld_val$wset_1__VAL_3;
      MUX_cache_dw_output_ld_val$wset_1__SEL_4:
	  cache_dw_output_ld_val$wget = cache_rg_ld_val;
      default: cache_dw_output_ld_val$wget =
		   129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_dw_output_st_amo_val$wget =
	     MUX_cache_dw_output_ld_val$wset_1__SEL_3 ?
	       MUX_cache_dw_output_st_amo_val$wset_1__VAL_1 :
	       cache_rg_st_amo_val ;
  assign cache_master_xactor_ug_master_u_aw_dropWire$whas =
	     cache_master_xactor_shim_awff_rv$port1__read[97] &&
	     mem_master_awready ;
  assign cache_master_xactor_ug_master_u_w_dropWire$whas =
	     cache_master_xactor_shim_wff_rv$port1__read[147] &&
	     mem_master_wready ;
  assign cache_master_xactor_ug_master_u_ar_dropWire$whas =
	     cache_master_xactor_shim_arff_rv$port1__read[97] &&
	     mem_master_arready ;
  assign cache_master_xactor_shim_awff_rv$EN_port0__write =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_soc_map$m_is_mem_addr &&
	     NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d780 ||
	     WILL_FIRE_RL_cache_rl_io_write_req ;
  always@(MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_1 or
	  MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2 or
	  MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_2 or
	  WILL_FIRE_RL_cache_rl_io_write_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  cache_master_xactor_shim_awff_rv$port0__write_1 =
	      MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_1;
      MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2:
	  cache_master_xactor_shim_awff_rv$port0__write_1 =
	      MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_2;
      WILL_FIRE_RL_cache_rl_io_write_req:
	  cache_master_xactor_shim_awff_rv$port0__write_1 =
	      MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_1;
      default: cache_master_xactor_shim_awff_rv$port0__write_1 =
		   98'h2AAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_master_xactor_shim_awff_rv$port1__read =
	     cache_master_xactor_shim_awff_rv$EN_port0__write ?
	       cache_master_xactor_shim_awff_rv$port0__write_1 :
	       cache_master_xactor_shim_awff_rv ;
  assign cache_master_xactor_shim_awff_rv$port2__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop ?
	       98'h0AAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_awff_rv$port1__read ;
  assign cache_master_xactor_shim_awff_rv$port3__read =
	     WILL_FIRE_RL_cache_master_xactor_do_clear ?
	       98'h0AAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_awff_rv$port2__read ;
  assign cache_master_xactor_shim_wff_rv$EN_port0__write =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_soc_map$m_is_mem_addr &&
	     NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d780 ||
	     WILL_FIRE_RL_cache_rl_io_write_req ;
  always@(MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_1 or
	  MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2 or
	  MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_2 or
	  WILL_FIRE_RL_cache_rl_io_write_req or
	  MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  cache_master_xactor_shim_wff_rv$port0__write_1 =
	      MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_1;
      MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2:
	  cache_master_xactor_shim_wff_rv$port0__write_1 =
	      MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_2;
      WILL_FIRE_RL_cache_rl_io_write_req:
	  cache_master_xactor_shim_wff_rv$port0__write_1 =
	      MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_3;
      default: cache_master_xactor_shim_wff_rv$port0__write_1 =
		   148'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_master_xactor_shim_wff_rv$port1__read =
	     cache_master_xactor_shim_wff_rv$EN_port0__write ?
	       cache_master_xactor_shim_wff_rv$port0__write_1 :
	       cache_master_xactor_shim_wff_rv ;
  assign cache_master_xactor_shim_wff_rv$port2__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop ?
	       148'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_wff_rv$port1__read ;
  assign cache_master_xactor_shim_wff_rv$port3__read =
	     WILL_FIRE_RL_cache_master_xactor_do_clear ?
	       148'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_wff_rv$port2__read ;
  assign cache_master_xactor_shim_bff_rv$port0__write_1 =
	     { 1'd1, cache_master_xactor_ug_master_u_b_putWire$wget } ;
  assign cache_master_xactor_shim_bff_rv$port1__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut ?
	       cache_master_xactor_shim_bff_rv$port0__write_1 :
	       cache_master_xactor_shim_bff_rv ;
  assign cache_master_xactor_shim_bff_rv$port2__read =
	     CAN_FIRE_RL_cache_rl_discard_write_rsp ?
	       7'd42 :
	       cache_master_xactor_shim_bff_rv$port1__read ;
  assign cache_master_xactor_shim_bff_rv$port3__read =
	     WILL_FIRE_RL_cache_master_xactor_do_clear ?
	       7'd42 :
	       cache_master_xactor_shim_bff_rv$port2__read ;
  assign cache_master_xactor_shim_arff_rv$EN_port0__write =
	     WILL_FIRE_RL_cache_rl_io_AMO_op_req ||
	     WILL_FIRE_RL_cache_rl_io_read_req ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;
  assign cache_master_xactor_shim_arff_rv$port0__write_1 =
	     MUX_cache_master_xactor_shim_arff_rv$port0__write_1__SEL_1 ?
	       MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_1 :
	       MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_2 ;
  assign cache_master_xactor_shim_arff_rv$port1__read =
	     cache_master_xactor_shim_arff_rv$EN_port0__write ?
	       cache_master_xactor_shim_arff_rv$port0__write_1 :
	       cache_master_xactor_shim_arff_rv ;
  assign cache_master_xactor_shim_arff_rv$port2__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop ?
	       98'h0AAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_arff_rv$port1__read ;
  assign cache_master_xactor_shim_arff_rv$port3__read =
	     WILL_FIRE_RL_cache_master_xactor_do_clear ?
	       98'h0AAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_arff_rv$port2__read ;
  assign cache_master_xactor_shim_rff_rv$port0__write_1 =
	     { 1'd1, cache_master_xactor_ug_master_u_r_putWire$wget } ;
  assign cache_master_xactor_shim_rff_rv$port1__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut ?
	       cache_master_xactor_shim_rff_rv$port0__write_1 :
	       cache_master_xactor_shim_rff_rv ;
  assign cache_master_xactor_shim_rff_rv$EN_port1__write =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop ;
  assign cache_master_xactor_shim_rff_rv$port2__read =
	     cache_master_xactor_shim_rff_rv$EN_port1__write ?
	       138'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_rff_rv$port1__read ;
  assign cache_master_xactor_shim_rff_rv$port3__read =
	     WILL_FIRE_RL_cache_master_xactor_do_clear ?
	       138'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_rff_rv$port2__read ;
  assign cache_ctr_wr_rsps_pending_crg$EN_port0__write =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_soc_map$m_is_mem_addr &&
	     NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d780 ||
	     WILL_FIRE_RL_cache_rl_io_write_req ;
  always@(MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1 or
	  MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2 or
	  WILL_FIRE_RL_cache_rl_io_write_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  cache_ctr_wr_rsps_pending_crg$port0__write_1 =
	      MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1;
      MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2:
	  cache_ctr_wr_rsps_pending_crg$port0__write_1 =
	      MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1;
      WILL_FIRE_RL_cache_rl_io_write_req:
	  cache_ctr_wr_rsps_pending_crg$port0__write_1 =
	      MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1;
      default: cache_ctr_wr_rsps_pending_crg$port0__write_1 =
		   4'b1010 /* unspecified value */ ;
    endcase
  end
  assign cache_ctr_wr_rsps_pending_crg$port1__read =
	     cache_ctr_wr_rsps_pending_crg$EN_port0__write ?
	       cache_ctr_wr_rsps_pending_crg$port0__write_1 :
	       cache_ctr_wr_rsps_pending_crg ;
  assign cache_ctr_wr_rsps_pending_crg$port1__write_1 = b__h32888 - 4'd1 ;
  assign cache_ctr_wr_rsps_pending_crg$port2__read =
	     CAN_FIRE_RL_cache_rl_discard_write_rsp ?
	       cache_ctr_wr_rsps_pending_crg$port1__write_1 :
	       cache_ctr_wr_rsps_pending_crg$port1__read ;
  assign cache_ctr_wr_rsps_pending_crg$port3__read =
	     MUX_cache_master_xactor_clearing$write_1__SEL_1 ?
	       4'd0 :
	       cache_ctr_wr_rsps_pending_crg$port2__read ;
  assign cache_crg_sb_to_load_delay$port0__write_1 =
	     { 1'd0, cache_crg_sb_to_load_delay[10:1] } ;
  assign cache_crg_sb_to_load_delay$EN_port1__write =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     cache_rg_op_3_EQ_1_01_OR_cache_rg_op_3_EQ_2_5__ETC___d774 ;
  assign cache_crg_sb_to_load_delay$port2__read =
	     cache_crg_sb_to_load_delay$EN_port1__write ?
	       11'd2047 :
	       cache_crg_sb_to_load_delay$port0__write_1 ;

  // register cache_cfg_verbosity
  assign cache_cfg_verbosity$D_IN = set_verbosity_verbosity ;
  assign cache_cfg_verbosity$EN = EN_set_verbosity ;

  // register cache_crg_sb_to_load_delay
  assign cache_crg_sb_to_load_delay$D_IN =
	     cache_crg_sb_to_load_delay$port2__read ;
  assign cache_crg_sb_to_load_delay$EN = 1'b1 ;

  // register cache_ctr_wr_rsps_pending_crg
  assign cache_ctr_wr_rsps_pending_crg$D_IN =
	     cache_ctr_wr_rsps_pending_crg$port3__read ;
  assign cache_ctr_wr_rsps_pending_crg$EN = 1'b1 ;

  // register cache_master_xactor_clearing
  assign cache_master_xactor_clearing$D_IN =
	     MUX_cache_master_xactor_clearing$write_1__SEL_1 ;
  assign cache_master_xactor_clearing$EN =
	     WILL_FIRE_RL_cache_rl_start_reset && !cache_f_reset_reqs$D_OUT ||
	     WILL_FIRE_RL_cache_master_xactor_do_clear ;

  // register cache_master_xactor_shim_arff_rv
  assign cache_master_xactor_shim_arff_rv$D_IN =
	     cache_master_xactor_shim_arff_rv$port3__read ;
  assign cache_master_xactor_shim_arff_rv$EN = 1'b1 ;

  // register cache_master_xactor_shim_awff_rv
  assign cache_master_xactor_shim_awff_rv$D_IN =
	     cache_master_xactor_shim_awff_rv$port3__read ;
  assign cache_master_xactor_shim_awff_rv$EN = 1'b1 ;

  // register cache_master_xactor_shim_bff_rv
  assign cache_master_xactor_shim_bff_rv$D_IN =
	     cache_master_xactor_shim_bff_rv$port3__read ;
  assign cache_master_xactor_shim_bff_rv$EN = 1'b1 ;

  // register cache_master_xactor_shim_rff_rv
  assign cache_master_xactor_shim_rff_rv$D_IN =
	     cache_master_xactor_shim_rff_rv$port3__read ;
  assign cache_master_xactor_shim_rff_rv$EN = 1'b1 ;

  // register cache_master_xactor_shim_wff_rv
  assign cache_master_xactor_shim_wff_rv$D_IN =
	     cache_master_xactor_shim_wff_rv$port3__read ;
  assign cache_master_xactor_shim_wff_rv$EN = 1'b1 ;

  // register cache_rg_addr
  assign cache_rg_addr$D_IN = req_addr ;
  assign cache_rg_addr$EN = EN_req ;

  // register cache_rg_amo_funct7
  assign cache_rg_amo_funct7$D_IN = req_amo_funct7 ;
  assign cache_rg_amo_funct7$EN = EN_req ;

  // register cache_rg_cset_in_cache
  assign cache_rg_cset_in_cache$D_IN =
	     WILL_FIRE_RL_cache_rl_reset ?
	       MUX_cache_rg_cset_in_cache$write_1__VAL_1 :
	       6'd0 ;
  assign cache_rg_cset_in_cache$EN =
	     WILL_FIRE_RL_cache_rl_reset ||
	     WILL_FIRE_RL_cache_rl_start_reset ;

  // register cache_rg_error_during_refill
  assign cache_rg_error_during_refill$D_IN =
	     MUX_cache_rg_error_during_refill$write_1__SEL_1 ;
  assign cache_rg_error_during_refill$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // register cache_rg_exc_code
  always@(MUX_cache_rg_exc_code$write_1__SEL_1 or
	  MUX_cache_rg_exc_code$write_1__VAL_1 or
	  MUX_cache_rg_exc_code$write_1__SEL_2 or
	  MUX_cache_rg_exc_code$write_1__SEL_3 or
	  MUX_cache_rg_error_during_refill$write_1__SEL_1 or
	  MUX_cache_rg_exc_code$write_1__VAL_4)
  case (1'b1)
    MUX_cache_rg_exc_code$write_1__SEL_1:
	cache_rg_exc_code$D_IN = MUX_cache_rg_exc_code$write_1__VAL_1;
    MUX_cache_rg_exc_code$write_1__SEL_2: cache_rg_exc_code$D_IN = 6'd7;
    MUX_cache_rg_exc_code$write_1__SEL_3: cache_rg_exc_code$D_IN = 6'd5;
    MUX_cache_rg_error_during_refill$write_1__SEL_1:
	cache_rg_exc_code$D_IN = MUX_cache_rg_exc_code$write_1__VAL_4;
    default: cache_rg_exc_code$D_IN = 6'b101010 /* unspecified value */ ;
  endcase
  assign cache_rg_exc_code$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 ||
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 ||
	     EN_req &&
	     NOT_req_width_code_EQ_0_369_370_AND_NOT_req_wi_ETC___d1389 &&
	     (req_width_code != 3'b100 || req_addr[3:0] != 4'b0) ;

  // register cache_rg_is_unsigned
  assign cache_rg_is_unsigned$D_IN = req_is_unsigned ;
  assign cache_rg_is_unsigned$EN = EN_req ;

  // register cache_rg_ld_val
  always@(MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_2 or
	  MUX_cache_rg_ld_val$write_1__SEL_2 or
	  MUX_cache_rg_ld_val$write_1__VAL_2 or
	  WILL_FIRE_RL_cache_rl_io_read_rsp or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_1 or
	  WILL_FIRE_RL_cache_rl_io_AMO_SC_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  cache_rg_ld_val$D_IN = MUX_cache_dw_output_ld_val$wset_1__VAL_2;
      MUX_cache_rg_ld_val$write_1__SEL_2:
	  cache_rg_ld_val$D_IN = MUX_cache_rg_ld_val$write_1__VAL_2;
      WILL_FIRE_RL_cache_rl_io_read_rsp:
	  cache_rg_ld_val$D_IN = MUX_cache_dw_output_ld_val$wset_1__VAL_1;
      WILL_FIRE_RL_cache_rl_io_AMO_SC_req: cache_rg_ld_val$D_IN = 129'd1;
      default: cache_rg_ld_val$D_IN =
		   129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_rg_ld_val$EN =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d495 ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_io_AMO_SC_req ;

  // register cache_rg_lower_word64
  assign cache_rg_lower_word64$D_IN = 64'h0 ;
  assign cache_rg_lower_word64$EN = 1'b0 ;

  // register cache_rg_lower_word64_full
  assign cache_rg_lower_word64_full$D_IN = 1'd0 ;
  assign cache_rg_lower_word64_full$EN =
	     WILL_FIRE_RL_cache_rl_start_cache_refill ||
	     WILL_FIRE_RL_cache_rl_start_reset ;

  // register cache_rg_lrsc_pa
  assign cache_rg_lrsc_pa$D_IN = cache_rg_addr ;
  assign cache_rg_lrsc_pa$EN =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00010 &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__21_BITS__ETC___d127 ;

  // register cache_rg_lrsc_valid
  assign cache_rg_lrsc_valid$D_IN =
	     MUX_cache_rg_lrsc_valid$write_1__SEL_2 &&
	     MUX_cache_rg_lrsc_valid$write_1__VAL_2 ;
  assign cache_rg_lrsc_valid$EN =
	     WILL_FIRE_RL_cache_rl_io_read_req && cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00010 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op_3_EQ_0_4_OR_cache_rg_op_3_EQ_2_5_A_ETC___d185 ||
	     WILL_FIRE_RL_cache_rl_start_reset ;

  // register cache_rg_op
  assign cache_rg_op$D_IN = req_op ;
  assign cache_rg_op$EN = EN_req ;

  // register cache_rg_pa
  assign cache_rg_pa$D_IN = EN_req ? req_addr : cache_rg_addr ;
  assign cache_rg_pa$EN =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit ||
	     EN_req ;

  // register cache_rg_pte_pa
  assign cache_rg_pte_pa$D_IN = 32'h0 ;
  assign cache_rg_pte_pa$EN = 1'b0 ;

  // register cache_rg_st_amo_val
  assign cache_rg_st_amo_val$D_IN =
	     EN_req ? req_st_value : MUX_cache_rg_st_amo_val$write_1__VAL_2 ;
  assign cache_rg_st_amo_val$EN =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d883 ||
	     EN_req ;

  // register cache_rg_state
  always@(EN_req or
	  MUX_cache_rg_state$write_1__VAL_1 or
	  WILL_FIRE_RL_cache_rl_start_reset or
	  WILL_FIRE_RL_cache_rl_io_read_req or
	  WILL_FIRE_RL_cache_rl_start_cache_refill or
	  WILL_FIRE_RL_cache_rl_io_AMO_read_rsp or
	  MUX_cache_rg_state$write_1__VAL_5 or
	  WILL_FIRE_RL_cache_rl_io_read_rsp or
	  MUX_cache_rg_state$write_1__SEL_7 or
	  MUX_cache_rg_state$write_1__VAL_7 or
	  WILL_FIRE_RL_cache_rl_io_AMO_op_req or
	  WILL_FIRE_RL_cache_rl_io_AMO_SC_req or
	  WILL_FIRE_RL_cache_rl_io_write_req or
	  WILL_FIRE_RL_cache_rl_rereq or
	  MUX_cache_rg_state$write_1__SEL_12 or
	  MUX_cache_rg_state$write_1__VAL_12 or
	  MUX_cache_rg_state$write_1__SEL_13)
  case (1'b1)
    EN_req: cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_1;
    WILL_FIRE_RL_cache_rl_start_reset: cache_rg_state$D_IN = 4'd1;
    WILL_FIRE_RL_cache_rl_io_read_req: cache_rg_state$D_IN = 4'd13;
    WILL_FIRE_RL_cache_rl_start_cache_refill: cache_rg_state$D_IN = 4'd9;
    WILL_FIRE_RL_cache_rl_io_AMO_read_rsp:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_5;
    WILL_FIRE_RL_cache_rl_io_read_rsp:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_5;
    MUX_cache_rg_state$write_1__SEL_7:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_7;
    WILL_FIRE_RL_cache_rl_io_AMO_op_req: cache_rg_state$D_IN = 4'd15;
    WILL_FIRE_RL_cache_rl_io_AMO_SC_req || WILL_FIRE_RL_cache_rl_io_write_req:
	cache_rg_state$D_IN = 4'd11;
    WILL_FIRE_RL_cache_rl_rereq: cache_rg_state$D_IN = 4'd3;
    MUX_cache_rg_state$write_1__SEL_12:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_12;
    MUX_cache_rg_state$write_1__SEL_13: cache_rg_state$D_IN = 4'd2;
    default: cache_rg_state$D_IN = 4'b1010 /* unspecified value */ ;
  endcase
  assign cache_rg_state$EN =
	     WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_word128_set_in_cache[1:0] == 2'd3 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     NOT_cache_dw_commit_whas__4_5_OR_NOT_cache_dw__ETC___d162 ||
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp ||
	     EN_req ||
	     WILL_FIRE_RL_cache_rl_start_reset ||
	     WILL_FIRE_RL_cache_rl_rereq ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ||
	     WILL_FIRE_RL_cache_rl_io_AMO_SC_req ||
	     WILL_FIRE_RL_cache_rl_io_write_req ||
	     WILL_FIRE_RL_cache_rl_io_read_req ||
	     WILL_FIRE_RL_cache_rl_io_AMO_op_req ;

  // register cache_rg_width_code
  assign cache_rg_width_code$D_IN = req_width_code ;
  assign cache_rg_width_code$EN = EN_req ;

  // register cache_rg_word128_set_in_cache
  assign cache_rg_word128_set_in_cache$D_IN =
	     MUX_cache_ram_word128_set$b_put_1__SEL_2 ?
	       MUX_cache_ram_word128_set$b_put_2__VAL_2 :
	       MUX_cache_ram_word128_set$b_put_2__VAL_4 ;
  assign cache_rg_word128_set_in_cache$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_word128_set_in_cache[1:0] != 2'd3 ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // submodule cache_f_reset_reqs
  assign cache_f_reset_reqs$D_IN = !EN_server_reset_request_put ;
  assign cache_f_reset_reqs$ENQ =
	     EN_server_reset_request_put || EN_server_flush_request_put ;
  assign cache_f_reset_reqs$DEQ = MUX_cache_rg_state$write_1__SEL_13 ;
  assign cache_f_reset_reqs$CLR = 1'b0 ;

  // submodule cache_f_reset_rsps
  assign cache_f_reset_rsps$D_IN = cache_f_reset_reqs$D_OUT ;
  assign cache_f_reset_rsps$ENQ = MUX_cache_rg_state$write_1__SEL_13 ;
  assign cache_f_reset_rsps$DEQ =
	     EN_server_reset_response_get || EN_server_flush_response_get ;
  assign cache_f_reset_rsps$CLR = 1'b0 ;

  // submodule cache_ram_state_and_ctag_cset
  assign cache_ram_state_and_ctag_cset$ADDRA =
	     WILL_FIRE_RL_cache_rl_start_cache_refill ?
	       cache_rg_addr[11:6] :
	       cache_rg_cset_in_cache ;
  assign cache_ram_state_and_ctag_cset$ADDRB =
	     MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       req_addr[11:6] :
	       cache_rg_addr[11:6] ;
  assign cache_ram_state_and_ctag_cset$DIA =
	     WILL_FIRE_RL_cache_rl_start_cache_refill ?
	       MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1 :
	       23'd2796202 ;
  assign cache_ram_state_and_ctag_cset$DIB =
	     MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       23'b01010101010101010101010 /* unspecified value */  :
	       23'b01010101010101010101010 /* unspecified value */  ;
  assign cache_ram_state_and_ctag_cset$WEA = 1'd1 ;
  assign cache_ram_state_and_ctag_cset$WEB = 1'd0 ;
  assign cache_ram_state_and_ctag_cset$ENA =
	     WILL_FIRE_RL_cache_rl_start_cache_refill ||
	     WILL_FIRE_RL_cache_rl_reset ;
  assign cache_ram_state_and_ctag_cset$ENB =
	     MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 ||
	     WILL_FIRE_RL_cache_rl_rereq ;

  // submodule cache_ram_word128_set
  assign cache_ram_word128_set$ADDRA =
	     MUX_cache_ram_word128_set$a_put_1__SEL_1 ?
	       cache_rg_word128_set_in_cache :
	       cache_rg_addr[11:4] ;
  always@(MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  req_addr or
	  MUX_cache_ram_word128_set$b_put_1__SEL_2 or
	  MUX_cache_ram_word128_set$b_put_2__VAL_2 or
	  WILL_FIRE_RL_cache_rl_rereq or
	  cache_rg_addr or
	  WILL_FIRE_RL_cache_rl_start_cache_refill or
	  MUX_cache_ram_word128_set$b_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  cache_ram_word128_set$ADDRB = req_addr[11:4];
      MUX_cache_ram_word128_set$b_put_1__SEL_2:
	  cache_ram_word128_set$ADDRB =
	      MUX_cache_ram_word128_set$b_put_2__VAL_2;
      WILL_FIRE_RL_cache_rl_rereq:
	  cache_ram_word128_set$ADDRB = cache_rg_addr[11:4];
      WILL_FIRE_RL_cache_rl_start_cache_refill:
	  cache_ram_word128_set$ADDRB =
	      MUX_cache_ram_word128_set$b_put_2__VAL_4;
      default: cache_ram_word128_set$ADDRB =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  assign cache_ram_word128_set$DIA =
	     MUX_cache_ram_word128_set$a_put_1__SEL_1 ?
	       MUX_cache_ram_word128_set$a_put_3__VAL_1 :
	       MUX_cache_ram_word128_set$a_put_3__VAL_2 ;
  always@(MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  MUX_cache_ram_word128_set$b_put_1__SEL_2 or
	  WILL_FIRE_RL_cache_rl_rereq or
	  WILL_FIRE_RL_cache_rl_start_cache_refill)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  cache_ram_word128_set$DIB =
	      130'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      MUX_cache_ram_word128_set$b_put_1__SEL_2:
	  cache_ram_word128_set$DIB =
	      130'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_cache_rl_rereq:
	  cache_ram_word128_set$DIB =
	      130'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_cache_rl_start_cache_refill:
	  cache_ram_word128_set$DIB =
	      130'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      default: cache_ram_word128_set$DIB =
		   130'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_ram_word128_set$WEA = 1'd1 ;
  assign cache_ram_word128_set$WEB = 1'd0 ;
  assign cache_ram_word128_set$ENA =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d543 ;
  assign cache_ram_word128_set$ENB =
	     MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_word128_set_in_cache[1:0] != 2'd3 ||
	     WILL_FIRE_RL_cache_rl_rereq ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // submodule cache_soc_map
  assign cache_soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign cache_soc_map$m_is_mem_addr_addr = { 32'd0, cache_rg_addr } ;
  assign cache_soc_map$m_is_near_mem_IO_addr_addr = 64'h0 ;

  // remaining internal signals
  assign IF_cache_rg_addr_BITS_4_TO_0_EQ_0_THEN_1_ELSE_0__q2 =
	     (cache_rg_addr[4:0] == 5'd0) ? 32'd1 : 32'd0 ;
  assign IF_cache_rg_op_3_EQ_0_4_OR_cache_rg_op_3_EQ_2__ETC___d165 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) ?
	       4'd8 :
	       IF_cache_rg_op_3_EQ_1_01_OR_cache_rg_op_3_EQ_2_ETC___d164 ;
  assign IF_cache_rg_op_3_EQ_0_4_OR_cache_rg_op_3_EQ_2__ETC___d458 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) ?
	       x__h20323 :
	       x__h25752 ;
  assign IF_cache_rg_op_3_EQ_1_01_OR_cache_rg_op_3_EQ_2_ETC___d131 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       cache_rg_op_3_EQ_2_5_AND_cache_rg_amo_funct7_6_ETC___d120 :
	       NOT_cache_ram_state_and_ctag_cset_b_read__21_B_ETC___d130 ;
  assign IF_cache_rg_op_3_EQ_1_01_OR_cache_rg_op_3_EQ_2_ETC___d164 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       4'd11 :
	       ((!cache_ram_state_and_ctag_cset$DOB[22] ||
		 !cache_ram_state_and_ctag_cset_b_read__21_BITS__ETC___d127) ?
		  4'd8 :
		  4'd11) ;
  assign IF_cache_rg_op_3_EQ_1_01_OR_cache_rg_op_3_EQ_2_ETC___d795 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       mem_req_wr_data_wdata__h27234 :
	       mem_req_wr_data_wdata__h32225 ;
  assign IF_cache_rg_op_3_EQ_1_01_OR_cache_rg_op_3_EQ_2_ETC___d808 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       { 1'd1, mem_req_wr_data_wuser__h27237 } :
	       3'd4 ;
  assign IF_cache_rg_width_code_94_EQ_2_99_THEN_SEXT_IF_ETC___d1279 =
	     (cache_rg_width_code == 3'd2) ?
	       { {32{x9813_BITS_31_TO_0__q70[31]}},
		 x9813_BITS_31_TO_0__q70 } :
	       x__h39813[63:0] ;
  assign IF_cache_rg_width_code_94_EQ_2_99_THEN_SEXT_IF_ETC___d535 =
	     (cache_rg_width_code == 3'd2) ?
	       { {32{x8299_BITS_31_TO_0__q67[31]}},
		 x8299_BITS_31_TO_0__q67 } :
	       x__h28299[63:0] ;
  assign IF_cache_rg_width_code_94_EQ_2_99_THEN_SEXT_ca_ETC___d664 =
	     (cache_rg_width_code == 3'd2) ?
	       { {32{cache_rg_st_amo_val_BITS_31_TO_0__q68[31]}},
		 cache_rg_st_amo_val_BITS_31_TO_0__q68 } :
	       cache_rg_st_amo_val[63:0] ;
  assign IF_cache_rg_width_code_94_EQ_3_03_THEN_IF_cach_ETC___d278 =
	     (cache_rg_width_code == 3'd3) ?
	       ((cache_rg_addr[3:0] == 4'h0) ?
		  cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[128] :
		  cache_rg_addr[3:0] == 4'h8 &&
		  cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[129]) :
	       cache_rg_width_code == 3'd4 &&
	       cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[128] ;
  assign NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 =
	     cache_cfg_verbosity > 4'd1 ;
  assign NOT_cache_cfg_verbosity_read__5_ULE_2_11___d912 =
	     cache_cfg_verbosity > 4'd2 ;
  assign NOT_cache_dw_commit_whas__4_5_OR_NOT_cache_dw__ETC___d162 =
	     !EN_commit ||
	     cache_rg_op_3_EQ_0_4_OR_cache_rg_op_3_EQ_2_5_A_ETC___d154 ||
	     NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d159 ||
	     !cache_soc_map$m_is_mem_addr ;
  assign NOT_cache_master_xactor_clearing_0_5_AND_cache_ETC___d1174 =
	     !cache_master_xactor_clearing &&
	     cache_master_xactor_shim_rff_rv$port1__read[137] &&
	     (cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 ||
	      !cache_master_xactor_shim_awff_rv[97] &&
	      !cache_master_xactor_shim_wff_rv[147]) ;
  assign NOT_cache_ram_state_and_ctag_cset_b_read__21_B_ETC___d130 =
	     !cache_ram_state_and_ctag_cset$DOB[22] ||
	     !cache_ram_state_and_ctag_cset_b_read__21_BITS__ETC___d127 ||
	     !cache_master_xactor_clearing &&
	     !cache_master_xactor_shim_awff_rv[97] &&
	     !cache_master_xactor_shim_wff_rv[147] ;
  assign NOT_cache_ram_state_and_ctag_cset_b_read__21_B_ETC___d173 =
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__21_BITS__ETC___d127) &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00010 &&
	     cache_rg_addr_9_EQ_cache_rg_lrsc_pa_07___d171 ;
  assign NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d159 =
	     cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_07_EQ_cache_rg_addr_9___d108) ;
  assign NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d780 =
	     cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     (cache_rg_op_3_EQ_1_01_OR_cache_rg_op_3_EQ_2_5__ETC___d778 ||
	      NOT_cache_rg_op_3_EQ_1_01_79_AND_NOT_cache_rg__ETC___d540) ;
  assign NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d833 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_cache_rg_op_3_EQ_2_5_37_OR_NOT_cache_rg_am_ETC___d831 ;
  assign NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d843 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_cache_rg_op_3_EQ_2_5_37_OR_NOT_cache_rg_am_ETC___d841 ;
  assign NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d849 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_cache_rg_op_3_EQ_2_5_37_OR_NOT_cache_rg_am_ETC___d847 ;
  assign NOT_cache_rg_op_3_EQ_1_01_79_AND_NOT_cache_rg__ETC___d182 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__21_BITS__ETC___d127 &&
	     cache_rg_addr_9_EQ_cache_rg_lrsc_pa_07___d171 ;
  assign NOT_cache_rg_op_3_EQ_1_01_79_AND_NOT_cache_rg__ETC___d540 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__21_BITS__ETC___d127 ;
  assign NOT_cache_rg_op_3_EQ_1_01_79_AND_NOT_cache_rg__ETC___d773 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__21_BITS__ETC___d127 &&
	     (cache_rg_width_code == 3'd0 || cache_rg_width_code == 3'd1) ;
  assign NOT_cache_rg_op_3_EQ_1_01_79_AND_NOT_cache_rg__ETC___d861 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__21_BITS__ETC___d127) &&
	     NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 ;
  assign NOT_cache_rg_op_3_EQ_1_01_79_AND_NOT_cache_rg__ETC___d865 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__21_BITS__ETC___d127 &&
	     NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 ;
  assign NOT_cache_rg_op_3_EQ_1_01_79_AND_NOT_cache_rg__ETC___d871 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__21_BITS__ETC___d127 &&
	     cache_ctr_wr_rsps_pending_crg == 4'd15 ;
  assign NOT_cache_rg_op_3_EQ_1_01_79_AND_NOT_cache_rg__ETC___d878 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__21_BITS__ETC___d127 &&
	     cache_rg_addr_9_EQ_cache_rg_lrsc_pa_07___d171 &&
	     NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 ;
  assign NOT_cache_rg_op_3_EQ_2_5_37_OR_NOT_cache_rg_am_ETC___d538 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_07_EQ_cache_rg_addr_9___d108) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__21_BITS__ETC___d127 ;
  assign NOT_cache_rg_op_3_EQ_2_5_37_OR_NOT_cache_rg_am_ETC___d771 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_07_EQ_cache_rg_addr_9___d108) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__21_BITS__ETC___d127 &&
	     (cache_rg_width_code == 3'd0 || cache_rg_width_code == 3'd1) ;
  assign NOT_cache_rg_op_3_EQ_2_5_37_OR_NOT_cache_rg_am_ETC___d831 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_07_EQ_cache_rg_addr_9___d108) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__21_BITS__ETC___d127 &&
	     NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 ;
  assign NOT_cache_rg_op_3_EQ_2_5_37_OR_NOT_cache_rg_am_ETC___d836 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_07_EQ_cache_rg_addr_9___d108) &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__21_BITS__ETC___d127) &&
	     NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 ;
  assign NOT_cache_rg_op_3_EQ_2_5_37_OR_NOT_cache_rg_am_ETC___d841 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_07_EQ_cache_rg_addr_9___d108) &&
	     NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 ;
  assign NOT_cache_rg_op_3_EQ_2_5_37_OR_NOT_cache_rg_am_ETC___d847 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_07_EQ_cache_rg_addr_9___d108) &&
	     cache_ctr_wr_rsps_pending_crg == 4'd15 ;
  assign NOT_req_width_code_EQ_0_369_370_AND_NOT_req_wi_ETC___d1389 =
	     req_width_code != 3'd0 &&
	     (req_width_code != 3'd1 || req_addr[0]) &&
	     (req_width_code != 3'd2 || req_addr[1:0] != 2'b0) &&
	     (req_width_code != 3'd3 || req_addr[2:0] != 3'b0) ;
  assign _0__q1 = 2'd0 ;
  assign _theResult___fst__h25676 =
	     (cache_rg_addr[3:0] == 4'h0) ? 128'd1 : 128'd0 ;
  assign _theResult___snd_fst__h27243 =
	     cache_rg_st_amo_val[127:0] << shift_bits__h32096 ;
  assign _theResult___snd_fst__h32234 =
	     { 64'd0, x__h28152 } << shift_bits__h32096 ;
  assign _theResult___snd_fst__h38146 =
	     cache_rg_st_amo_val[127:0] << shift_bits__h39498 ;
  assign _theResult___snd_fst__h39636 =
	     word128__h39495 << shift_bits__h39498 ;
  assign access_exc_code__h4892 = MUX_cache_rg_exc_code$write_1__VAL_4 ;
  assign b__h32888 = cache_ctr_wr_rsps_pending_crg$port1__read ;
  assign cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d481 =
	     EN_commit && cache_soc_map$m_is_mem_addr &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00010 &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__21_BITS__ETC___d127 &&
	     NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 ;
  assign cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d821 =
	     EN_commit && cache_soc_map$m_is_mem_addr &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00011 &&
	     cache_rg_lrsc_valid &&
	     !cache_rg_lrsc_pa_07_EQ_cache_rg_addr_9___d108 &&
	     NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 ;
  assign cache_master_xactor_shim_arff_rvport1__read_B_ETC__q73 =
	     cache_master_xactor_shim_arff_rv$port1__read[96:0] ;
  assign cache_master_xactor_shim_awff_rvport1__read_B_ETC__q71 =
	     cache_master_xactor_shim_awff_rv$port1__read[96:0] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q10 =
	     cache_master_xactor_shim_rff_rv$port1__read[36:29] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q11 =
	     cache_master_xactor_shim_rff_rv$port1__read[44:37] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q12 =
	     cache_master_xactor_shim_rff_rv$port1__read[52:37] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q13 =
	     cache_master_xactor_shim_rff_rv$port1__read[68:37] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q14 =
	     cache_master_xactor_shim_rff_rv$port1__read[52:45] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q15 =
	     cache_master_xactor_shim_rff_rv$port1__read[60:53] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q16 =
	     cache_master_xactor_shim_rff_rv$port1__read[68:53] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q17 =
	     cache_master_xactor_shim_rff_rv$port1__read[68:61] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q18 =
	     cache_master_xactor_shim_rff_rv$port1__read[132:69] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q19 =
	     cache_master_xactor_shim_rff_rv$port1__read[76:69] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q20 =
	     cache_master_xactor_shim_rff_rv$port1__read[84:69] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q21 =
	     cache_master_xactor_shim_rff_rv$port1__read[100:69] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q22 =
	     cache_master_xactor_shim_rff_rv$port1__read[84:77] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q23 =
	     cache_master_xactor_shim_rff_rv$port1__read[92:85] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q24 =
	     cache_master_xactor_shim_rff_rv$port1__read[100:85] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q25 =
	     cache_master_xactor_shim_rff_rv$port1__read[100:93] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q26 =
	     cache_master_xactor_shim_rff_rv$port1__read[108:101] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q27 =
	     cache_master_xactor_shim_rff_rv$port1__read[116:101] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q28 =
	     cache_master_xactor_shim_rff_rv$port1__read[132:101] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q29 =
	     cache_master_xactor_shim_rff_rv$port1__read[116:109] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q3 =
	     cache_master_xactor_shim_rff_rv$port1__read[68:5] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q30 =
	     cache_master_xactor_shim_rff_rv$port1__read[124:117] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q31 =
	     cache_master_xactor_shim_rff_rv$port1__read[132:117] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q32 =
	     cache_master_xactor_shim_rff_rv$port1__read[132:125] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q4 =
	     cache_master_xactor_shim_rff_rv$port1__read[12:5] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q5 =
	     cache_master_xactor_shim_rff_rv$port1__read[20:5] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q6 =
	     cache_master_xactor_shim_rff_rv$port1__read[36:5] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q7 =
	     cache_master_xactor_shim_rff_rv$port1__read[20:13] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q8 =
	     cache_master_xactor_shim_rff_rv$port1__read[28:21] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q9 =
	     cache_master_xactor_shim_rff_rv$port1__read[36:21] ;
  assign cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q72 =
	     cache_master_xactor_shim_wff_rv$port1__read[146:0] ;
  assign cache_ram_state_and_ctag_cset_b_read__21_BITS__ETC___d127 =
	     cache_ram_state_and_ctag_cset$DOB[21:0] == pa_ctag__h6986 ;
  assign cache_ram_state_and_ctag_cset_b_read__21_BIT_2_ETC___d174 =
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__21_BITS__ETC___d127 &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00010 ||
	     NOT_cache_ram_state_and_ctag_cset_b_read__21_B_ETC___d173 ;
  assign cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270 =
	     cache_ram_word128_set$DOB & y__h7470 ;
  assign cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q33 =
	     cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[63:0] ;
  assign cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q34 =
	     cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[7:0] ;
  assign cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q35 =
	     cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[15:0] ;
  assign cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q36 =
	     cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[31:0] ;
  assign cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q37 =
	     cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[15:8] ;
  assign cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q38 =
	     cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[23:16] ;
  assign cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q39 =
	     cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[31:16] ;
  assign cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q40 =
	     cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[31:24] ;
  assign cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q41 =
	     cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[39:32] ;
  assign cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q42 =
	     cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[47:32] ;
  assign cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q43 =
	     cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[63:32] ;
  assign cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q44 =
	     cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[47:40] ;
  assign cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q45 =
	     cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[55:48] ;
  assign cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q46 =
	     cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[63:48] ;
  assign cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q47 =
	     cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[63:56] ;
  assign cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q48 =
	     cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[127:64] ;
  assign cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q49 =
	     cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[71:64] ;
  assign cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q50 =
	     cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[79:64] ;
  assign cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q51 =
	     cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[95:64] ;
  assign cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q52 =
	     cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[79:72] ;
  assign cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q53 =
	     cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[87:80] ;
  assign cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q54 =
	     cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[95:80] ;
  assign cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q55 =
	     cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[95:88] ;
  assign cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q56 =
	     cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[103:96] ;
  assign cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q57 =
	     cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[111:96] ;
  assign cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q58 =
	     cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[127:96] ;
  assign cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q59 =
	     cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[111:104] ;
  assign cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q60 =
	     cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[119:112] ;
  assign cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q61 =
	     cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[127:112] ;
  assign cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q62 =
	     cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[127:120] ;
  assign cache_ram_word128_set_b_read__53_BITS_129_TO_1_ETC___d555 =
	     cache_ram_word128_set$DOB[129:128] & y__h28004 ;
  assign cache_rg_addr_9_EQ_cache_rg_lrsc_pa_07___d171 =
	     cache_rg_addr == cache_rg_lrsc_pa ;
  assign cache_rg_amo_funct7_6_BITS_6_TO_2_7_EQ_0b10_8__ETC___d488 =
	     cache_rg_amo_funct7[6:2] == 5'b00010 &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__21_BITS__ETC___d127) &&
	     cache_rg_addr_9_EQ_cache_rg_lrsc_pa_07___d171 &&
	     NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 ;
  assign cache_rg_lrsc_pa_07_EQ_cache_rg_addr_9___d108 =
	     cache_rg_lrsc_pa == cache_rg_addr ;
  assign cache_rg_op_3_EQ_0_4_OR_cache_rg_op_3_EQ_2_5_A_ETC___d154 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__21_BITS__ETC___d127) ;
  assign cache_rg_op_3_EQ_0_4_OR_cache_rg_op_3_EQ_2_5_A_ETC___d185 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     cache_ram_state_and_ctag_cset_b_read__21_BIT_2_ETC___d174 ||
	     cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     cache_rg_op_3_EQ_1_01_OR_cache_rg_op_3_EQ_2_5__ETC___d183 ;
  assign cache_rg_op_3_EQ_0_4_OR_cache_rg_op_3_EQ_2_5_A_ETC___d191 =
	     MUX_cache_rg_lrsc_valid$write_1__VAL_2 ||
	     cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h21856 ;
  assign cache_rg_op_3_EQ_0_4_OR_cache_rg_op_3_EQ_2_5_A_ETC___d280 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     cache_rg_width_code != 3'd0 &&
	     cache_rg_width_code != 3'd1 &&
	     cache_rg_width_code != 3'd2 &&
	     IF_cache_rg_width_code_94_EQ_3_03_THEN_IF_cach_ETC___d278 ;
  assign cache_rg_op_3_EQ_0_4_OR_cache_rg_op_3_EQ_2_5_A_ETC___d467 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__21_BITS__ETC___d127 &&
	     NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 ;
  assign cache_rg_op_3_EQ_0_4_OR_cache_rg_op_3_EQ_2_5_A_ETC___d483 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__21_BITS__ETC___d127) &&
	     NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 ;
  assign cache_rg_op_3_EQ_1_01_OR_cache_rg_op_3_EQ_2_5__ETC___d183 =
	     cache_rg_op == 2'd1 &&
	     cache_rg_addr_9_EQ_cache_rg_lrsc_pa_07___d171 ||
	     cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011 ||
	     NOT_cache_rg_op_3_EQ_1_01_79_AND_NOT_cache_rg__ETC___d182 ;
  assign cache_rg_op_3_EQ_1_01_OR_cache_rg_op_3_EQ_2_5__ETC___d541 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_cache_rg_op_3_EQ_2_5_37_OR_NOT_cache_rg_am_ETC___d538 ||
	     NOT_cache_rg_op_3_EQ_1_01_79_AND_NOT_cache_rg__ETC___d540 ;
  assign cache_rg_op_3_EQ_1_01_OR_cache_rg_op_3_EQ_2_5__ETC___d774 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_cache_rg_op_3_EQ_2_5_37_OR_NOT_cache_rg_am_ETC___d771 ||
	     NOT_cache_rg_op_3_EQ_1_01_79_AND_NOT_cache_rg__ETC___d773 ;
  assign cache_rg_op_3_EQ_1_01_OR_cache_rg_op_3_EQ_2_5__ETC___d778 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_07_EQ_cache_rg_addr_9___d108) ;
  assign cache_rg_op_3_EQ_2_5_AND_cache_rg_amo_funct7_6_ETC___d120 =
	     cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h21856 ||
	     !cache_master_xactor_clearing &&
	     !cache_master_xactor_shim_awff_rv[97] &&
	     !cache_master_xactor_shim_wff_rv[147] ;
  assign cache_rg_op_3_EQ_2_5_AND_cache_rg_amo_funct7_6_ETC___d856 =
	     cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h21856 &&
	     NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 ;
  assign cache_rg_st_amo_val_BITS_31_TO_0__q68 = cache_rg_st_amo_val[31:0] ;
  assign cache_rg_state_9_EQ_12_57_AND_cache_rg_op_3_EQ_ETC___d959 =
	     cache_rg_state == 4'd12 &&
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     b__h32888 == 4'd0 ;
  assign cache_rg_state_9_EQ_3_35_AND_NOT_cache_rg_op_3_ETC___d144 =
	     cache_rg_state == 4'd3 &&
	     (cache_rg_op != 2'd0 &&
	      (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) ||
	      cache_crg_sb_to_load_delay$port0__write_1 == 11'd0) ;
  assign cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d495 =
	     cache_soc_map$m_is_mem_addr && cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     (cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011 ||
	      cache_rg_op != 2'd1 && cache_ram_state_and_ctag_cset$DOB[22] &&
	      cache_ram_state_and_ctag_cset_b_read__21_BITS__ETC___d127) ;
  assign cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d543 =
	     cache_soc_map$m_is_mem_addr && cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     cache_rg_op_3_EQ_1_01_OR_cache_rg_op_3_EQ_2_5__ETC___d541 ;
  assign cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d867 =
	     cache_soc_map$m_is_mem_addr && cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_cache_rg_op_3_EQ_1_01_79_AND_NOT_cache_rg__ETC___d865 ;
  assign cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d873 =
	     cache_soc_map$m_is_mem_addr && cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_cache_rg_op_3_EQ_1_01_79_AND_NOT_cache_rg__ETC___d871 ;
  assign cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d883 =
	     cache_soc_map$m_is_mem_addr && cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_cache_rg_op_3_EQ_1_01_79_AND_NOT_cache_rg__ETC___d540 ;
  assign cline_addr__h32986 = { cache_rg_pa[31:6], 6'd0 } ;
  assign cline_fabric_addr__h32987 = { 32'd0, cline_addr__h32986 } ;
  assign lrsc_result__h21856 =
	     !cache_rg_lrsc_valid ||
	     !cache_rg_lrsc_pa_07_EQ_cache_rg_addr_9___d108 ;
  assign mem_req_wr_addr_awaddr__h32089 = { 32'd0, cache_rg_addr } ;
  assign mem_req_wr_addr_awaddr__h39491 = { 32'd0, cache_rg_pa } ;
  assign mem_req_wr_data_wuser__h27237 =
	     (cache_rg_width_code == 3'd3) ?
	       {2{cache_rg_st_amo_val[128]}} :
	       2'd0 ;
  assign new_st_val__h28154 = { 32'd0, _theResult_____2__h27988[31:0] } ;
  assign new_st_val__h28247 =
	     IF_cache_rg_width_code_94_EQ_2_99_THEN_SEXT_IF_ETC___d535 +
	     IF_cache_rg_width_code_94_EQ_2_99_THEN_SEXT_ca_ETC___d664 ;
  assign new_st_val__h29395 = w1__h27980 ^ w2__h27982 ;
  assign new_st_val__h29399 = w1__h27980 & w2__h27982 ;
  assign new_st_val__h29403 = w1__h27980 | w2__h27982 ;
  assign new_st_val__h29407 =
	     (w1__h27980 < w2__h27982) ? w1__h27980 : w2__h27982 ;
  assign new_st_val__h29412 =
	     (w1__h27980 <= w2__h27982) ? w2__h27982 : w1__h27980 ;
  assign new_st_val__h29418 =
	     ((IF_cache_rg_width_code_94_EQ_2_99_THEN_SEXT_IF_ETC___d535 ^
	       64'h8000000000000000) <
	      (IF_cache_rg_width_code_94_EQ_2_99_THEN_SEXT_ca_ETC___d664 ^
	       64'h8000000000000000)) ?
	       w1__h27980 :
	       w2__h27982 ;
  assign new_st_val__h29423 =
	     ((IF_cache_rg_width_code_94_EQ_2_99_THEN_SEXT_IF_ETC___d535 ^
	       64'h8000000000000000) <=
	      (IF_cache_rg_width_code_94_EQ_2_99_THEN_SEXT_ca_ETC___d664 ^
	       64'h8000000000000000)) ?
	       w2__h27982 :
	       w1__h27980 ;
  assign new_st_val__h39668 = { 32'd0, _theResult_____2__h39656[31:0] } ;
  assign new_st_val__h39761 =
	     IF_cache_rg_width_code_94_EQ_2_99_THEN_SEXT_IF_ETC___d1279 +
	     IF_cache_rg_width_code_94_EQ_2_99_THEN_SEXT_ca_ETC___d664 ;
  assign new_st_val__h42076 = w1__h39648 ^ w2__h27982 ;
  assign new_st_val__h42080 = w1__h39648 & w2__h27982 ;
  assign new_st_val__h42084 = w1__h39648 | w2__h27982 ;
  assign new_st_val__h42088 =
	     (w1__h39648 < w2__h27982) ? w1__h39648 : w2__h27982 ;
  assign new_st_val__h42093 =
	     (w1__h39648 <= w2__h27982) ? w2__h27982 : w1__h39648 ;
  assign new_st_val__h42099 =
	     ((IF_cache_rg_width_code_94_EQ_2_99_THEN_SEXT_IF_ETC___d1279 ^
	       64'h8000000000000000) <
	      (IF_cache_rg_width_code_94_EQ_2_99_THEN_SEXT_ca_ETC___d664 ^
	       64'h8000000000000000)) ?
	       w1__h39648 :
	       w2__h27982 ;
  assign new_st_val__h42104 =
	     ((IF_cache_rg_width_code_94_EQ_2_99_THEN_SEXT_IF_ETC___d1279 ^
	       64'h8000000000000000) <=
	      (IF_cache_rg_width_code_94_EQ_2_99_THEN_SEXT_ca_ETC___d664 ^
	       64'h8000000000000000)) ?
	       w2__h27982 :
	       w1__h39648 ;
  assign pa_ctag__h6986 = { 2'd0, cache_rg_addr[31:12] } ;
  assign req_width_code_EQ_0_369_OR_req_width_code_EQ_1_ETC___d1405 =
	     req_width_code == 3'd0 ||
	     req_width_code == 3'd1 && !req_addr[0] ||
	     req_width_code == 3'd2 && req_addr[1:0] == 2'b0 ||
	     req_width_code == 3'd3 && req_addr[2:0] == 3'b0 ;
  assign req_width_code_EQ_0_369_OR_req_width_code_EQ_1_ETC___d1410 =
	     (req_width_code_EQ_0_369_OR_req_width_code_EQ_1_ETC___d1405 ||
	      req_width_code == 3'b100 && req_addr[3:0] == 4'b0) &&
	     NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 ;
  assign result__h20266 =
	     cache_rg_is_unsigned ?
	       { 64'd0,
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[127:64] } :
	       { {64{cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q48[63]}},
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q48 } ;
  assign result__h20334 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[7:0] } :
	       { {120{cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q34[7]}},
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q34 } ;
  assign result__h20372 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[15:8] } :
	       { {120{cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q37[7]}},
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q37 } ;
  assign result__h20405 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[23:16] } :
	       { {120{cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q38[7]}},
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q38 } ;
  assign result__h20438 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[31:24] } :
	       { {120{cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q40[7]}},
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q40 } ;
  assign result__h20471 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[39:32] } :
	       { {120{cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q41[7]}},
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q41 } ;
  assign result__h20504 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[47:40] } :
	       { {120{cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q44[7]}},
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q44 } ;
  assign result__h20537 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[55:48] } :
	       { {120{cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q45[7]}},
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q45 } ;
  assign result__h20570 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[63:56] } :
	       { {120{cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q47[7]}},
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q47 } ;
  assign result__h20603 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[71:64] } :
	       { {120{cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q49[7]}},
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q49 } ;
  assign result__h20636 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[79:72] } :
	       { {120{cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q52[7]}},
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q52 } ;
  assign result__h20669 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[87:80] } :
	       { {120{cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q53[7]}},
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q53 } ;
  assign result__h20702 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[95:88] } :
	       { {120{cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q55[7]}},
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q55 } ;
  assign result__h20735 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[103:96] } :
	       { {120{cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q56[7]}},
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q56 } ;
  assign result__h20768 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[111:104] } :
	       { {120{cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q59[7]}},
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q59 } ;
  assign result__h20801 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[119:112] } :
	       { {120{cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q60[7]}},
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q60 } ;
  assign result__h20834 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[127:120] } :
	       { {120{cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q62[7]}},
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q62 } ;
  assign result__h20889 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[15:0] } :
	       { {112{cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q35[15]}},
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q35 } ;
  assign result__h20922 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[31:16] } :
	       { {112{cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q39[15]}},
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q39 } ;
  assign result__h20955 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[47:32] } :
	       { {112{cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q42[15]}},
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q42 } ;
  assign result__h20988 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[63:48] } :
	       { {112{cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q46[15]}},
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q46 } ;
  assign result__h21021 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[79:64] } :
	       { {112{cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q50[15]}},
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q50 } ;
  assign result__h21054 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[95:80] } :
	       { {112{cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q54[15]}},
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q54 } ;
  assign result__h21087 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[111:96] } :
	       { {112{cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q57[15]}},
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q57 } ;
  assign result__h21120 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[127:112] } :
	       { {112{cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q61[15]}},
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q61 } ;
  assign result__h21167 =
	     cache_rg_is_unsigned ?
	       { 96'd0,
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[31:0] } :
	       { {96{cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q36[31]}},
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q36 } ;
  assign result__h21200 =
	     cache_rg_is_unsigned ?
	       { 96'd0,
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[63:32] } :
	       { {96{cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q43[31]}},
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q43 } ;
  assign result__h21233 =
	     cache_rg_is_unsigned ?
	       { 96'd0,
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[95:64] } :
	       { {96{cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q51[31]}},
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q51 } ;
  assign result__h21266 =
	     cache_rg_is_unsigned ?
	       { 96'd0,
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[127:96] } :
	       { {96{cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q58[31]}},
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q58 } ;
  assign result__h36381 =
	     cache_rg_is_unsigned ?
	       { 64'd0, cache_master_xactor_shim_rff_rv$port1__read[68:5] } :
	       { {64{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q3[63]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q3 } ;
  assign result__h36406 =
	     cache_rg_is_unsigned ?
	       { 64'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[132:69] } :
	       { {64{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q18[63]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q18 } ;
  assign result__h36464 =
	     cache_rg_is_unsigned ?
	       { 120'd0, cache_master_xactor_shim_rff_rv$port1__read[12:5] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q4[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q4 } ;
  assign result__h36500 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[20:13] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q7[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q7 } ;
  assign result__h36533 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[28:21] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q8[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q8 } ;
  assign result__h36566 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[36:29] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q10[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q10 } ;
  assign result__h36599 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[44:37] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q11[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q11 } ;
  assign result__h36632 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[52:45] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q14[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q14 } ;
  assign result__h36665 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[60:53] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q15[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q15 } ;
  assign result__h36698 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[68:61] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q17[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q17 } ;
  assign result__h36731 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[76:69] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q19[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q19 } ;
  assign result__h36764 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[84:77] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q22[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q22 } ;
  assign result__h36797 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[92:85] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q23[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q23 } ;
  assign result__h36830 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[100:93] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q25[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q25 } ;
  assign result__h36863 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[108:101] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q26[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q26 } ;
  assign result__h36896 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[116:109] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q29[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q29 } ;
  assign result__h36929 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[124:117] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q30[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q30 } ;
  assign result__h36962 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[132:125] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q32[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q32 } ;
  assign result__h37017 =
	     cache_rg_is_unsigned ?
	       { 112'd0, cache_master_xactor_shim_rff_rv$port1__read[20:5] } :
	       { {112{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q5[15]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q5 } ;
  assign result__h37050 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[36:21] } :
	       { {112{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q9[15]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q9 } ;
  assign result__h37083 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[52:37] } :
	       { {112{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q12[15]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q12 } ;
  assign result__h37116 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[68:53] } :
	       { {112{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q16[15]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q16 } ;
  assign result__h37149 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[84:69] } :
	       { {112{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q20[15]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q20 } ;
  assign result__h37182 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[100:85] } :
	       { {112{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q24[15]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q24 } ;
  assign result__h37215 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[116:101] } :
	       { {112{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q27[15]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q27 } ;
  assign result__h37248 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[132:117] } :
	       { {112{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q31[15]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q31 } ;
  assign result__h37295 =
	     cache_rg_is_unsigned ?
	       { 96'd0, cache_master_xactor_shim_rff_rv$port1__read[36:5] } :
	       { {96{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q6[31]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q6 } ;
  assign result__h37328 =
	     cache_rg_is_unsigned ?
	       { 96'd0, cache_master_xactor_shim_rff_rv$port1__read[68:37] } :
	       { {96{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q13[31]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q13 } ;
  assign result__h37361 =
	     cache_rg_is_unsigned ?
	       { 96'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[100:69] } :
	       { {96{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q21[31]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q21 } ;
  assign result__h37394 =
	     cache_rg_is_unsigned ?
	       { 96'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[132:101] } :
	       { {96{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q28[31]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q28 } ;
  assign result__h39894 = { 120'd0, x__h36453[7:0] } ;
  assign result__h41063 = { 120'd0, x__h36453[15:8] } ;
  assign result__h41095 = { 120'd0, x__h36453[23:16] } ;
  assign result__h41127 = { 120'd0, x__h36453[31:24] } ;
  assign result__h41159 = { 120'd0, x__h36453[39:32] } ;
  assign result__h41191 = { 120'd0, x__h36453[47:40] } ;
  assign result__h41223 = { 120'd0, x__h36453[55:48] } ;
  assign result__h41255 = { 120'd0, x__h36453[63:56] } ;
  assign result__h41287 = { 120'd0, x__h36453[71:64] } ;
  assign result__h41319 = { 120'd0, x__h36453[79:72] } ;
  assign result__h41351 = { 120'd0, x__h36453[87:80] } ;
  assign result__h41383 = { 120'd0, x__h36453[95:88] } ;
  assign result__h41415 = { 120'd0, x__h36453[103:96] } ;
  assign result__h41447 = { 120'd0, x__h36453[111:104] } ;
  assign result__h41479 = { 120'd0, x__h36453[119:112] } ;
  assign result__h41511 = { 120'd0, x__h36453[127:120] } ;
  assign result__h41565 = { 112'd0, x__h36453[15:0] } ;
  assign result__h41597 = { 112'd0, x__h36453[31:16] } ;
  assign result__h41629 = { 112'd0, x__h36453[47:32] } ;
  assign result__h41661 = { 112'd0, x__h36453[63:48] } ;
  assign result__h41693 = { 112'd0, x__h36453[79:64] } ;
  assign result__h41725 = { 112'd0, x__h36453[95:80] } ;
  assign result__h41757 = { 112'd0, x__h36453[111:96] } ;
  assign result__h41789 = { 112'd0, x__h36453[127:112] } ;
  assign result__h41835 = { 96'd0, x__h36453[31:0] } ;
  assign result__h41867 = { 96'd0, x__h36453[63:32] } ;
  assign result__h41899 = { 96'd0, x__h36453[95:64] } ;
  assign result__h41931 = { 96'd0, x__h36453[127:96] } ;
  assign result__h41985 = { 64'd0, x__h36453[63:0] } ;
  assign result__h42014 = { 64'd0, x__h36453[127:64] } ;
  assign result__h7420 =
	     cache_rg_is_unsigned ?
	       { 64'd0,
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[63:0] } :
	       { {64{cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q33[63]}},
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC__q33 } ;
  assign shift_bits__h32096 = { cache_rg_addr[3:0], 3'b0 } ;
  assign shift_bits__h39498 = { cache_rg_pa[3:0], 3'b0 } ;
  assign strobe128__h32153 = 16'b0000000000000001 << cache_rg_addr[3:0] ;
  assign strobe128__h32156 = 16'b0000000000000011 << cache_rg_addr[3:0] ;
  assign strobe128__h32159 = 16'b0000000000001111 << cache_rg_addr[3:0] ;
  assign strobe128__h32162 = 16'b0000000011111111 << cache_rg_addr[3:0] ;
  assign strobe128__h39555 = 16'b0000000000000001 << cache_rg_pa[3:0] ;
  assign strobe128__h39558 = 16'b0000000000000011 << cache_rg_pa[3:0] ;
  assign strobe128__h39561 = 16'b0000000000001111 << cache_rg_pa[3:0] ;
  assign strobe128__h39564 = 16'b0000000011111111 << cache_rg_pa[3:0] ;
  assign w1___1__h28213 = { 32'd0, x__h28299[31:0] } ;
  assign w1___1__h39727 = { 32'd0, x__h39813[31:0] } ;
  assign w1__h27980 =
	     (cache_rg_width_code == 3'd2) ?
	       w1___1__h28213 :
	       x__h28299[63:0] ;
  assign w1__h39648 =
	     (cache_rg_width_code == 3'd2) ?
	       w1___1__h39727 :
	       x__h39813[63:0] ;
  assign w2__h27982 =
	     (cache_rg_width_code == 3'd2) ?
	       { 32'd0, cache_rg_st_amo_val[31:0] } :
	       cache_rg_st_amo_val[63:0] ;
  assign word128__h39495 = { 64'd0, x__h39666 } ;
  assign x8299_BITS_31_TO_0__q67 = x__h28299[31:0] ;
  assign x9813_BITS_31_TO_0__q70 = x__h39813[31:0] ;
  assign x__h22607 =
	     (cache_rg_width_code == 3'd3 && cache_rg_st_amo_val[128]) ?
	       cache_ram_word128_set$DOB[129:128] | x__h27956 :
	       cache_ram_word128_set_b_read__53_BITS_129_TO_1_ETC___d555 ;
  assign x__h27956 = 2'd1 << x__h28021 ;
  assign x__h28021 = { 8'd0, cache_rg_addr[31:8] } ;
  assign x__h28152 =
	     (cache_rg_width_code == 3'd2) ?
	       new_st_val__h28154 :
	       _theResult_____2__h27988 ;
  assign x__h39666 =
	     (cache_rg_width_code == 3'd2) ?
	       new_st_val__h39668 :
	       _theResult_____2__h39656 ;
  assign y__h28004 = ~x__h27956 ;
  assign y__h7470 =
	     {130{cache_ram_state_and_ctag_cset$DOB[22] &&
		  cache_ram_state_and_ctag_cset_b_read__21_BITS__ETC___d127}} ;
  always@(cache_rg_width_code)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'd2, 3'd3: size_val__h38953 = cache_rg_width_code;
      default: size_val__h38953 = 3'b100;
    endcase
  end
  always@(cache_rg_width_code)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4:
	  _theResult___fst_val__h39574 = cache_rg_width_code;
      default: _theResult___fst_val__h39574 = 3'b111;
    endcase
  end
  always@(cache_rg_width_code or _theResult___fst__h25676)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'd2, 3'd3: x__h25752 = _theResult___fst__h25676;
      3'd4: x__h25752 = 128'd1;
      default: x__h25752 = 128'd0;
    endcase
  end
  always@(cache_rg_addr or result__h36381 or result__h36406)
  begin
    case (cache_rg_addr[3:0])
      4'h0: _theResult___fst__h36379 = result__h36381;
      4'h8: _theResult___fst__h36379 = result__h36406;
      default: _theResult___fst__h36379 = 128'd0;
    endcase
  end
  always@(cache_rg_width_code or
	  strobe128__h39555 or
	  strobe128__h39558 or strobe128__h39561 or strobe128__h39564)
  begin
    case (cache_rg_width_code)
      3'd0: mem_req_wr_data_wstrb__h39628 = strobe128__h39555;
      3'd1: mem_req_wr_data_wstrb__h39628 = strobe128__h39558;
      3'd2: mem_req_wr_data_wstrb__h39628 = strobe128__h39561;
      3'd3: mem_req_wr_data_wstrb__h39628 = strobe128__h39564;
      3'd4: mem_req_wr_data_wstrb__h39628 = 16'b1111111111111111;
      default: mem_req_wr_data_wstrb__h39628 = 16'd0;
    endcase
  end
  always@(cache_rg_width_code or
	  strobe128__h32153 or
	  strobe128__h32156 or strobe128__h32159 or strobe128__h32162)
  begin
    case (cache_rg_width_code)
      3'd0: mem_req_wr_data_wstrb__h32226 = strobe128__h32153;
      3'd1: mem_req_wr_data_wstrb__h32226 = strobe128__h32156;
      3'd2: mem_req_wr_data_wstrb__h32226 = strobe128__h32159;
      3'd3: mem_req_wr_data_wstrb__h32226 = strobe128__h32162;
      3'd4: mem_req_wr_data_wstrb__h32226 = 16'b1111111111111111;
      default: mem_req_wr_data_wstrb__h32226 = 16'd0;
    endcase
  end
  always@(cache_rg_width_code or
	  cache_rg_st_amo_val or _theResult___snd_fst__h38146)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'd2, 3'd3:
	  mem_req_wr_data_wdata__h38137 = _theResult___snd_fst__h38146;
      default: mem_req_wr_data_wdata__h38137 = cache_rg_st_amo_val[127:0];
    endcase
  end
  always@(cache_rg_width_code or
	  cache_rg_st_amo_val or _theResult___snd_fst__h27243)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'd2, 3'd3:
	  mem_req_wr_data_wdata__h27234 = _theResult___snd_fst__h27243;
      default: mem_req_wr_data_wdata__h27234 = cache_rg_st_amo_val[127:0];
    endcase
  end
  always@(cache_rg_addr or
	  cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  _theResult___fst__h29304 =
	      { 64'd0,
		cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[63:0] };
      4'h8:
	  _theResult___fst__h29304 =
	      { 64'd0,
		cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[127:64] };
      default: _theResult___fst__h29304 = 128'd0;
    endcase
  end
  always@(cache_rg_addr or result__h7420 or result__h20266)
  begin
    case (cache_rg_addr[3:0])
      4'h0: _theResult___fst__h7418 = result__h7420;
      4'h8: _theResult___fst__h7418 = result__h20266;
      default: _theResult___fst__h7418 = 128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q63 =
	      { 120'd0,
		cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[7:0] };
      4'h1:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q63 =
	      { 120'd0,
		cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[15:8] };
      4'h2:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q63 =
	      { 120'd0,
		cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[23:16] };
      4'h3:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q63 =
	      { 120'd0,
		cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[31:24] };
      4'h4:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q63 =
	      { 120'd0,
		cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[39:32] };
      4'h5:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q63 =
	      { 120'd0,
		cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[47:40] };
      4'h6:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q63 =
	      { 120'd0,
		cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[55:48] };
      4'h7:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q63 =
	      { 120'd0,
		cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[63:56] };
      4'h8:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q63 =
	      { 120'd0,
		cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[71:64] };
      4'h9:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q63 =
	      { 120'd0,
		cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[79:72] };
      4'hA:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q63 =
	      { 120'd0,
		cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[87:80] };
      4'hB:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q63 =
	      { 120'd0,
		cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[95:88] };
      4'hC:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q63 =
	      { 120'd0,
		cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[103:96] };
      4'hD:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q63 =
	      { 120'd0,
		cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[111:104] };
      4'hE:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q63 =
	      { 120'd0,
		cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[119:112] };
      4'hF:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q63 =
	      { 120'd0,
		cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[127:120] };
    endcase
  end
  always@(cache_rg_addr or
	  cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q64 =
	      { 112'd0,
		cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[15:0] };
      4'h2:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q64 =
	      { 112'd0,
		cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[31:16] };
      4'h4:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q64 =
	      { 112'd0,
		cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[47:32] };
      4'h6:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q64 =
	      { 112'd0,
		cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[63:48] };
      4'h8:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q64 =
	      { 112'd0,
		cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[79:64] };
      4'hA:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q64 =
	      { 112'd0,
		cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[95:80] };
      4'hC:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q64 =
	      { 112'd0,
		cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[111:96] };
      4'hE:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q64 =
	      { 112'd0,
		cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[127:112] };
      default: CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q64 =
		   128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q65 =
	      { 96'd0,
		cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[31:0] };
      4'h4:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q65 =
	      { 96'd0,
		cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[63:32] };
      4'h8:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q65 =
	      { 96'd0,
		cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[95:64] };
      4'hC:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q65 =
	      { 96'd0,
		cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[127:96] };
      default: CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q65 =
		   128'd0;
    endcase
  end
  always@(cache_rg_width_code or
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q63 or
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q64 or
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q65 or
	  _theResult___fst__h29304 or
	  cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270)
  begin
    case (cache_rg_width_code)
      3'd0:
	  x__h28299 = CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q63;
      3'd1:
	  x__h28299 = CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q64;
      3'd2:
	  x__h28299 = CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q65;
      3'd3: x__h28299 = _theResult___fst__h29304;
      3'd4:
	  x__h28299 =
	      cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[127:0];
      default: x__h28299 = 128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h21167 or
	  result__h21200 or result__h21233 or result__h21266)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d435 =
	      result__h21167;
      4'h4:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d435 =
	      result__h21200;
      4'h8:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d435 =
	      result__h21233;
      4'hC:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d435 =
	      result__h21266;
      default: IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d435 =
		   128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h20889 or
	  result__h20922 or
	  result__h20955 or
	  result__h20988 or
	  result__h21021 or
	  result__h21054 or result__h21087 or result__h21120)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d415 =
	      result__h20889;
      4'h2:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d415 =
	      result__h20922;
      4'h4:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d415 =
	      result__h20955;
      4'h6:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d415 =
	      result__h20988;
      4'h8:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d415 =
	      result__h21021;
      4'hA:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d415 =
	      result__h21054;
      4'hC:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d415 =
	      result__h21087;
      4'hE:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d415 =
	      result__h21120;
      default: IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d415 =
		   128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h20334 or
	  result__h20372 or
	  result__h20405 or
	  result__h20438 or
	  result__h20471 or
	  result__h20504 or
	  result__h20537 or
	  result__h20570 or
	  result__h20603 or
	  result__h20636 or
	  result__h20669 or
	  result__h20702 or
	  result__h20735 or
	  result__h20768 or result__h20801 or result__h20834)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d375 =
	      result__h20334;
      4'h1:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d375 =
	      result__h20372;
      4'h2:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d375 =
	      result__h20405;
      4'h3:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d375 =
	      result__h20438;
      4'h4:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d375 =
	      result__h20471;
      4'h5:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d375 =
	      result__h20504;
      4'h6:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d375 =
	      result__h20537;
      4'h7:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d375 =
	      result__h20570;
      4'h8:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d375 =
	      result__h20603;
      4'h9:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d375 =
	      result__h20636;
      4'hA:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d375 =
	      result__h20669;
      4'hB:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d375 =
	      result__h20702;
      4'hC:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d375 =
	      result__h20735;
      4'hD:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d375 =
	      result__h20768;
      4'hE:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d375 =
	      result__h20801;
      4'hF:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d375 =
	      result__h20834;
    endcase
  end
  always@(cache_rg_width_code or
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d375 or
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d415 or
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d435 or
	  _theResult___fst__h7418 or
	  cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270)
  begin
    case (cache_rg_width_code)
      3'd0:
	  x__h20323 =
	      IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d375;
      3'd1:
	  x__h20323 =
	      IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d415;
      3'd2:
	  x__h20323 =
	      IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d435;
      3'd3: x__h20323 = _theResult___fst__h7418;
      3'd4:
	  x__h20323 =
	      cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270[127:0];
      default: x__h20323 = 128'd0;
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or cache_rg_st_amo_val)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d646 =
	      { cache_ram_word128_set$DOB[127:32],
		cache_rg_st_amo_val[31:0] };
      4'h4:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d646 =
	      { cache_ram_word128_set$DOB[127:64],
		cache_rg_st_amo_val[31:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h8:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d646 =
	      { cache_ram_word128_set$DOB[127:96],
		cache_rg_st_amo_val[31:0],
		cache_ram_word128_set$DOB[63:0] };
      4'hC:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d646 =
	      { cache_rg_st_amo_val[31:0], cache_ram_word128_set$DOB[95:0] };
      default: IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d646 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or cache_rg_st_amo_val)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d637 =
	      { cache_ram_word128_set$DOB[127:16],
		cache_rg_st_amo_val[15:0] };
      4'h2:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d637 =
	      { cache_ram_word128_set$DOB[127:32],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[15:0] };
      4'h4:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d637 =
	      { cache_ram_word128_set$DOB[127:48],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h6:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d637 =
	      { cache_ram_word128_set$DOB[127:64],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[47:0] };
      4'h8:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d637 =
	      { cache_ram_word128_set$DOB[127:80],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[63:0] };
      4'hA:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d637 =
	      { cache_ram_word128_set$DOB[127:96],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[79:0] };
      4'hC:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d637 =
	      { cache_ram_word128_set$DOB[127:112],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[95:0] };
      4'hE:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d637 =
	      { cache_rg_st_amo_val[15:0], cache_ram_word128_set$DOB[111:0] };
      default: IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d637 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or cache_rg_st_amo_val)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d620 =
	      { cache_ram_word128_set$DOB[127:8], cache_rg_st_amo_val[7:0] };
      4'h1:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d620 =
	      { cache_ram_word128_set$DOB[127:16],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[7:0] };
      4'h2:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d620 =
	      { cache_ram_word128_set$DOB[127:24],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[15:0] };
      4'h3:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d620 =
	      { cache_ram_word128_set$DOB[127:32],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[23:0] };
      4'h4:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d620 =
	      { cache_ram_word128_set$DOB[127:40],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h5:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d620 =
	      { cache_ram_word128_set$DOB[127:48],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[39:0] };
      4'h6:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d620 =
	      { cache_ram_word128_set$DOB[127:56],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[47:0] };
      4'h7:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d620 =
	      { cache_ram_word128_set$DOB[127:64],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[55:0] };
      4'h8:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d620 =
	      { cache_ram_word128_set$DOB[127:72],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[63:0] };
      4'h9:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d620 =
	      { cache_ram_word128_set$DOB[127:80],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[71:0] };
      4'hA:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d620 =
	      { cache_ram_word128_set$DOB[127:88],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[79:0] };
      4'hB:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d620 =
	      { cache_ram_word128_set$DOB[127:96],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[87:0] };
      4'hC:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d620 =
	      { cache_ram_word128_set$DOB[127:104],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[95:0] };
      4'hD:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d620 =
	      { cache_ram_word128_set$DOB[127:112],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[103:0] };
      4'hE:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d620 =
	      { cache_ram_word128_set$DOB[127:120],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[111:0] };
      4'hF:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d620 =
	      { cache_rg_st_amo_val[7:0], cache_ram_word128_set$DOB[119:0] };
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or cache_rg_st_amo_val)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q66 =
	      { cache_ram_word128_set$DOB[127:64],
		cache_rg_st_amo_val[63:0] };
      4'h8:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q66 =
	      { cache_rg_st_amo_val[63:0], cache_ram_word128_set$DOB[63:0] };
      default: CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q66 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_width_code or
	  cache_ram_word128_set$DOB or
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d620 or
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d637 or
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d646 or
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q66 or
	  cache_rg_st_amo_val)
  begin
    case (cache_rg_width_code)
      3'd0:
	  x__h22716 =
	      IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d620;
      3'd1:
	  x__h22716 =
	      IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d637;
      3'd2:
	  x__h22716 =
	      IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d646;
      3'd3:
	  x__h22716 = CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q66;
      3'd4: x__h22716 = cache_rg_st_amo_val[127:0];
      default: x__h22716 = cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_amo_funct7 or
	  new_st_val__h29423 or
	  new_st_val__h28247 or
	  w2__h27982 or
	  new_st_val__h29395 or
	  new_st_val__h29403 or
	  new_st_val__h29399 or
	  new_st_val__h29418 or new_st_val__h29407 or new_st_val__h29412)
  begin
    case (cache_rg_amo_funct7[6:2])
      5'b0: _theResult_____2__h27988 = new_st_val__h28247;
      5'b00001: _theResult_____2__h27988 = w2__h27982;
      5'b00100: _theResult_____2__h27988 = new_st_val__h29395;
      5'b01000: _theResult_____2__h27988 = new_st_val__h29403;
      5'b01100: _theResult_____2__h27988 = new_st_val__h29399;
      5'b10000: _theResult_____2__h27988 = new_st_val__h29418;
      5'b11000: _theResult_____2__h27988 = new_st_val__h29407;
      5'b11100: _theResult_____2__h27988 = new_st_val__h29412;
      default: _theResult_____2__h27988 = new_st_val__h29423;
    endcase
  end
  always@(cache_rg_width_code or x__h28152 or _theResult___snd_fst__h32234)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'd2, 3'd3:
	  mem_req_wr_data_wdata__h32225 = _theResult___snd_fst__h32234;
      default: mem_req_wr_data_wdata__h32225 = { 64'd0, x__h28152 };
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or x__h28152)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d756 =
	      { cache_ram_word128_set$DOB[127:32], x__h28152[31:0] };
      4'h4:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d756 =
	      { cache_ram_word128_set$DOB[127:64],
		x__h28152[31:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h8:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d756 =
	      { cache_ram_word128_set$DOB[127:96],
		x__h28152[31:0],
		cache_ram_word128_set$DOB[63:0] };
      4'hC:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d756 =
	      { x__h28152[31:0], cache_ram_word128_set$DOB[95:0] };
      default: IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d756 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or x__h28152)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d747 =
	      { cache_ram_word128_set$DOB[127:16], x__h28152[15:0] };
      4'h2:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d747 =
	      { cache_ram_word128_set$DOB[127:32],
		x__h28152[15:0],
		cache_ram_word128_set$DOB[15:0] };
      4'h4:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d747 =
	      { cache_ram_word128_set$DOB[127:48],
		x__h28152[15:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h6:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d747 =
	      { cache_ram_word128_set$DOB[127:64],
		x__h28152[15:0],
		cache_ram_word128_set$DOB[47:0] };
      4'h8:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d747 =
	      { cache_ram_word128_set$DOB[127:80],
		x__h28152[15:0],
		cache_ram_word128_set$DOB[63:0] };
      4'hA:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d747 =
	      { cache_ram_word128_set$DOB[127:96],
		x__h28152[15:0],
		cache_ram_word128_set$DOB[79:0] };
      4'hC:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d747 =
	      { cache_ram_word128_set$DOB[127:112],
		x__h28152[15:0],
		cache_ram_word128_set$DOB[95:0] };
      4'hE:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d747 =
	      { x__h28152[15:0], cache_ram_word128_set$DOB[111:0] };
      default: IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d747 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or x__h28152)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d730 =
	      { cache_ram_word128_set$DOB[127:8], x__h28152[7:0] };
      4'h1:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d730 =
	      { cache_ram_word128_set$DOB[127:16],
		x__h28152[7:0],
		cache_ram_word128_set$DOB[7:0] };
      4'h2:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d730 =
	      { cache_ram_word128_set$DOB[127:24],
		x__h28152[7:0],
		cache_ram_word128_set$DOB[15:0] };
      4'h3:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d730 =
	      { cache_ram_word128_set$DOB[127:32],
		x__h28152[7:0],
		cache_ram_word128_set$DOB[23:0] };
      4'h4:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d730 =
	      { cache_ram_word128_set$DOB[127:40],
		x__h28152[7:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h5:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d730 =
	      { cache_ram_word128_set$DOB[127:48],
		x__h28152[7:0],
		cache_ram_word128_set$DOB[39:0] };
      4'h6:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d730 =
	      { cache_ram_word128_set$DOB[127:56],
		x__h28152[7:0],
		cache_ram_word128_set$DOB[47:0] };
      4'h7:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d730 =
	      { cache_ram_word128_set$DOB[127:64],
		x__h28152[7:0],
		cache_ram_word128_set$DOB[55:0] };
      4'h8:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d730 =
	      { cache_ram_word128_set$DOB[127:72],
		x__h28152[7:0],
		cache_ram_word128_set$DOB[63:0] };
      4'h9:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d730 =
	      { cache_ram_word128_set$DOB[127:80],
		x__h28152[7:0],
		cache_ram_word128_set$DOB[71:0] };
      4'hA:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d730 =
	      { cache_ram_word128_set$DOB[127:88],
		x__h28152[7:0],
		cache_ram_word128_set$DOB[79:0] };
      4'hB:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d730 =
	      { cache_ram_word128_set$DOB[127:96],
		x__h28152[7:0],
		cache_ram_word128_set$DOB[87:0] };
      4'hC:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d730 =
	      { cache_ram_word128_set$DOB[127:104],
		x__h28152[7:0],
		cache_ram_word128_set$DOB[95:0] };
      4'hD:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d730 =
	      { cache_ram_word128_set$DOB[127:112],
		x__h28152[7:0],
		cache_ram_word128_set$DOB[103:0] };
      4'hE:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d730 =
	      { cache_ram_word128_set$DOB[127:120],
		x__h28152[7:0],
		cache_ram_word128_set$DOB[111:0] };
      4'hF:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d730 =
	      { x__h28152[7:0], cache_ram_word128_set$DOB[119:0] };
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or x__h28152)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q69 =
	      { cache_ram_word128_set$DOB[127:64], x__h28152 };
      4'h8:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q69 =
	      { x__h28152, cache_ram_word128_set$DOB[63:0] };
      default: CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q69 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_width_code or
	  cache_ram_word128_set$DOB or
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d730 or
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d747 or
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d756 or
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q69 or
	  x__h28152)
  begin
    case (cache_rg_width_code)
      3'd0:
	  x__h28041 =
	      IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d730;
      3'd1:
	  x__h28041 =
	      IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d747;
      3'd2:
	  x__h28041 =
	      IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d756;
      3'd3:
	  x__h28041 = CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q69;
      3'd4: x__h28041 = { 64'd0, x__h28152 };
      default: x__h28041 = cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_addr or
	  result__h37295 or
	  result__h37328 or result__h37361 or result__h37394)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1116 =
	      result__h37295;
      4'h4:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1116 =
	      result__h37328;
      4'h8:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1116 =
	      result__h37361;
      4'hC:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1116 =
	      result__h37394;
      default: IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1116 =
		   128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h37017 or
	  result__h37050 or
	  result__h37083 or
	  result__h37116 or
	  result__h37149 or
	  result__h37182 or result__h37215 or result__h37248)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1096 =
	      result__h37017;
      4'h2:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1096 =
	      result__h37050;
      4'h4:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1096 =
	      result__h37083;
      4'h6:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1096 =
	      result__h37116;
      4'h8:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1096 =
	      result__h37149;
      4'hA:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1096 =
	      result__h37182;
      4'hC:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1096 =
	      result__h37215;
      4'hE:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1096 =
	      result__h37248;
      default: IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1096 =
		   128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h36464 or
	  result__h36500 or
	  result__h36533 or
	  result__h36566 or
	  result__h36599 or
	  result__h36632 or
	  result__h36665 or
	  result__h36698 or
	  result__h36731 or
	  result__h36764 or
	  result__h36797 or
	  result__h36830 or
	  result__h36863 or
	  result__h36896 or result__h36929 or result__h36962)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1056 =
	      result__h36464;
      4'h1:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1056 =
	      result__h36500;
      4'h2:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1056 =
	      result__h36533;
      4'h3:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1056 =
	      result__h36566;
      4'h4:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1056 =
	      result__h36599;
      4'h5:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1056 =
	      result__h36632;
      4'h6:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1056 =
	      result__h36665;
      4'h7:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1056 =
	      result__h36698;
      4'h8:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1056 =
	      result__h36731;
      4'h9:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1056 =
	      result__h36764;
      4'hA:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1056 =
	      result__h36797;
      4'hB:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1056 =
	      result__h36830;
      4'hC:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1056 =
	      result__h36863;
      4'hD:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1056 =
	      result__h36896;
      4'hE:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1056 =
	      result__h36929;
      4'hF:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1056 =
	      result__h36962;
    endcase
  end
  always@(cache_rg_width_code or
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1056 or
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1096 or
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1116 or
	  _theResult___fst__h36379 or
	  cache_master_xactor_shim_rff_rv$port1__read)
  begin
    case (cache_rg_width_code)
      3'd0:
	  x__h36453 =
	      IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1056;
      3'd1:
	  x__h36453 =
	      IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1096;
      3'd2:
	  x__h36453 =
	      IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1116;
      3'd3: x__h36453 = _theResult___fst__h36379;
      3'd4: x__h36453 = cache_master_xactor_shim_rff_rv$port1__read[132:5];
      default: x__h36453 = 128'd0;
    endcase
  end
  always@(cache_rg_addr or result__h41985 or result__h42014)
  begin
    case (cache_rg_addr[3:0])
      4'h0: _theResult___fst__h41983 = result__h41985;
      4'h8: _theResult___fst__h41983 = result__h42014;
      default: _theResult___fst__h41983 = 128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h41835 or
	  result__h41867 or result__h41899 or result__h41931)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1264 =
	      result__h41835;
      4'h4:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1264 =
	      result__h41867;
      4'h8:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1264 =
	      result__h41899;
      4'hC:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1264 =
	      result__h41931;
      default: IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1264 =
		   128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h41565 or
	  result__h41597 or
	  result__h41629 or
	  result__h41661 or
	  result__h41693 or
	  result__h41725 or result__h41757 or result__h41789)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1252 =
	      result__h41565;
      4'h2:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1252 =
	      result__h41597;
      4'h4:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1252 =
	      result__h41629;
      4'h6:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1252 =
	      result__h41661;
      4'h8:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1252 =
	      result__h41693;
      4'hA:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1252 =
	      result__h41725;
      4'hC:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1252 =
	      result__h41757;
      4'hE:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1252 =
	      result__h41789;
      default: IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1252 =
		   128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h39894 or
	  result__h41063 or
	  result__h41095 or
	  result__h41127 or
	  result__h41159 or
	  result__h41191 or
	  result__h41223 or
	  result__h41255 or
	  result__h41287 or
	  result__h41319 or
	  result__h41351 or
	  result__h41383 or
	  result__h41415 or
	  result__h41447 or result__h41479 or result__h41511)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1228 =
	      result__h39894;
      4'h1:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1228 =
	      result__h41063;
      4'h2:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1228 =
	      result__h41095;
      4'h3:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1228 =
	      result__h41127;
      4'h4:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1228 =
	      result__h41159;
      4'h5:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1228 =
	      result__h41191;
      4'h6:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1228 =
	      result__h41223;
      4'h7:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1228 =
	      result__h41255;
      4'h8:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1228 =
	      result__h41287;
      4'h9:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1228 =
	      result__h41319;
      4'hA:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1228 =
	      result__h41351;
      4'hB:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1228 =
	      result__h41383;
      4'hC:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1228 =
	      result__h41415;
      4'hD:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1228 =
	      result__h41447;
      4'hE:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1228 =
	      result__h41479;
      4'hF:
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1228 =
	      result__h41511;
    endcase
  end
  always@(cache_rg_width_code or
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1228 or
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1252 or
	  IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1264 or
	  _theResult___fst__h41983 or x__h36453)
  begin
    case (cache_rg_width_code)
      3'd0:
	  x__h39813 =
	      IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1228;
      3'd1:
	  x__h39813 =
	      IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1252;
      3'd2:
	  x__h39813 =
	      IF_cache_rg_addr_9_BITS_3_TO_0_50_EQ_0x0_04_TH_ETC___d1264;
      3'd3: x__h39813 = _theResult___fst__h41983;
      3'd4: x__h39813 = x__h36453;
      default: x__h39813 = 128'd0;
    endcase
  end
  always@(cache_rg_amo_funct7 or
	  new_st_val__h42104 or
	  new_st_val__h39761 or
	  w2__h27982 or
	  new_st_val__h42076 or
	  new_st_val__h42084 or
	  new_st_val__h42080 or
	  new_st_val__h42099 or new_st_val__h42088 or new_st_val__h42093)
  begin
    case (cache_rg_amo_funct7[6:2])
      5'b0: _theResult_____2__h39656 = new_st_val__h39761;
      5'b00001: _theResult_____2__h39656 = w2__h27982;
      5'b00100: _theResult_____2__h39656 = new_st_val__h42076;
      5'b01000: _theResult_____2__h39656 = new_st_val__h42084;
      5'b01100: _theResult_____2__h39656 = new_st_val__h42080;
      5'b10000: _theResult_____2__h39656 = new_st_val__h42099;
      5'b11000: _theResult_____2__h39656 = new_st_val__h42088;
      5'b11100: _theResult_____2__h39656 = new_st_val__h42093;
      default: _theResult_____2__h39656 = new_st_val__h42104;
    endcase
  end
  always@(cache_rg_width_code or
	  word128__h39495 or _theResult___snd_fst__h39636)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'd2, 3'd3:
	  mem_req_wr_data_wdata__h39627 = _theResult___snd_fst__h39636;
      default: mem_req_wr_data_wdata__h39627 = word128__h39495;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cache_cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	cache_crg_sb_to_load_delay <= `BSV_ASSIGNMENT_DELAY 11'd0;
	cache_ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY 4'd0;
	cache_master_xactor_clearing <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_master_xactor_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	    98'h0AAAAAAAAAAAAAAAAAAAAAAAA;
	cache_master_xactor_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	    98'h0AAAAAAAAAAAAAAAAAAAAAAAA;
	cache_master_xactor_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY 7'd42;
	cache_master_xactor_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	    138'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	cache_master_xactor_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	    148'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	cache_rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY 6'd0;
	cache_rg_lower_word64_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_state <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (cache_cfg_verbosity$EN)
	  cache_cfg_verbosity <= `BSV_ASSIGNMENT_DELAY
	      cache_cfg_verbosity$D_IN;
	if (cache_crg_sb_to_load_delay$EN)
	  cache_crg_sb_to_load_delay <= `BSV_ASSIGNMENT_DELAY
	      cache_crg_sb_to_load_delay$D_IN;
	if (cache_ctr_wr_rsps_pending_crg$EN)
	  cache_ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY
	      cache_ctr_wr_rsps_pending_crg$D_IN;
	if (cache_master_xactor_clearing$EN)
	  cache_master_xactor_clearing <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_clearing$D_IN;
	if (cache_master_xactor_shim_arff_rv$EN)
	  cache_master_xactor_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_arff_rv$D_IN;
	if (cache_master_xactor_shim_awff_rv$EN)
	  cache_master_xactor_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_awff_rv$D_IN;
	if (cache_master_xactor_shim_bff_rv$EN)
	  cache_master_xactor_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_bff_rv$D_IN;
	if (cache_master_xactor_shim_rff_rv$EN)
	  cache_master_xactor_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_rff_rv$D_IN;
	if (cache_master_xactor_shim_wff_rv$EN)
	  cache_master_xactor_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_wff_rv$D_IN;
	if (cache_rg_cset_in_cache$EN)
	  cache_rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_cset_in_cache$D_IN;
	if (cache_rg_lower_word64_full$EN)
	  cache_rg_lower_word64_full <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_lower_word64_full$D_IN;
	if (cache_rg_lrsc_valid$EN)
	  cache_rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_lrsc_valid$D_IN;
	if (cache_rg_state$EN)
	  cache_rg_state <= `BSV_ASSIGNMENT_DELAY cache_rg_state$D_IN;
      end
    if (cache_rg_addr$EN)
      cache_rg_addr <= `BSV_ASSIGNMENT_DELAY cache_rg_addr$D_IN;
    if (cache_rg_amo_funct7$EN)
      cache_rg_amo_funct7 <= `BSV_ASSIGNMENT_DELAY cache_rg_amo_funct7$D_IN;
    if (cache_rg_error_during_refill$EN)
      cache_rg_error_during_refill <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_error_during_refill$D_IN;
    if (cache_rg_exc_code$EN)
      cache_rg_exc_code <= `BSV_ASSIGNMENT_DELAY cache_rg_exc_code$D_IN;
    if (cache_rg_is_unsigned$EN)
      cache_rg_is_unsigned <= `BSV_ASSIGNMENT_DELAY cache_rg_is_unsigned$D_IN;
    if (cache_rg_ld_val$EN)
      cache_rg_ld_val <= `BSV_ASSIGNMENT_DELAY cache_rg_ld_val$D_IN;
    if (cache_rg_lower_word64$EN)
      cache_rg_lower_word64 <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_lower_word64$D_IN;
    if (cache_rg_lrsc_pa$EN)
      cache_rg_lrsc_pa <= `BSV_ASSIGNMENT_DELAY cache_rg_lrsc_pa$D_IN;
    if (cache_rg_op$EN) cache_rg_op <= `BSV_ASSIGNMENT_DELAY cache_rg_op$D_IN;
    if (cache_rg_pa$EN) cache_rg_pa <= `BSV_ASSIGNMENT_DELAY cache_rg_pa$D_IN;
    if (cache_rg_pte_pa$EN)
      cache_rg_pte_pa <= `BSV_ASSIGNMENT_DELAY cache_rg_pte_pa$D_IN;
    if (cache_rg_st_amo_val$EN)
      cache_rg_st_amo_val <= `BSV_ASSIGNMENT_DELAY cache_rg_st_amo_val$D_IN;
    if (cache_rg_width_code$EN)
      cache_rg_width_code <= `BSV_ASSIGNMENT_DELAY cache_rg_width_code$D_IN;
    if (cache_rg_word128_set_in_cache$EN)
      cache_rg_word128_set_in_cache <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_word128_set_in_cache$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cache_cfg_verbosity = 4'hA;
    cache_crg_sb_to_load_delay = 11'h2AA;
    cache_ctr_wr_rsps_pending_crg = 4'hA;
    cache_master_xactor_clearing = 1'h0;
    cache_master_xactor_shim_arff_rv = 98'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    cache_master_xactor_shim_awff_rv = 98'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    cache_master_xactor_shim_bff_rv = 7'h2A;
    cache_master_xactor_shim_rff_rv =
	138'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    cache_master_xactor_shim_wff_rv =
	148'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    cache_rg_addr = 32'hAAAAAAAA;
    cache_rg_amo_funct7 = 7'h2A;
    cache_rg_cset_in_cache = 6'h2A;
    cache_rg_error_during_refill = 1'h0;
    cache_rg_exc_code = 6'h2A;
    cache_rg_is_unsigned = 1'h0;
    cache_rg_ld_val = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    cache_rg_lower_word64 = 64'hAAAAAAAAAAAAAAAA;
    cache_rg_lower_word64_full = 1'h0;
    cache_rg_lrsc_pa = 32'hAAAAAAAA;
    cache_rg_lrsc_valid = 1'h0;
    cache_rg_op = 2'h2;
    cache_rg_pa = 32'hAAAAAAAA;
    cache_rg_pte_pa = 32'hAAAAAAAA;
    cache_rg_st_amo_val = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    cache_rg_state = 4'hA;
    cache_rg_width_code = 3'h2;
    cache_rg_word128_set_in_cache = 8'hAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 &&
	  cache_cfg_verbosity != 4'd0 &&
	  !cache_f_reset_reqs$D_OUT)
	begin
	  v__h5541 = $stime;
	  #0;
	end
    v__h5535 = v__h5541 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 &&
	  cache_cfg_verbosity != 4'd0 &&
	  !cache_f_reset_reqs$D_OUT)
	$display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		 v__h5535,
		 "D_MMU_Cache",
		 $signed(32'd64),
		 $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_f_reset_reqs$D_OUT)
	begin
	  v__h5642 = $stime;
	  #0;
	end
    v__h5636 = v__h5642 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_f_reset_reqs$D_OUT)
	$display("%0d: %s.rl_reset: Flushed", v__h5636, "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h6095 = $stime;
	  #0;
	end
    v__h6089 = v__h6095 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h",
		 v__h6089,
		 "D_MMU_Cache",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("        eaddr = {CTag 0x%0h  CSet 0x%0h  Word128 0x%0h  Byte 0x%0h}",
		 pa_ctag__h6986,
		 cache_rg_addr[11:6],
		 cache_rg_addr[5:4],
		 cache_rg_addr[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("        CSet 0x%0x: (state, tag):", cache_rg_addr[11:6]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(" (");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_ram_state_and_ctag_cset$DOB[22])
	$write("CTAG_CLEAN");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  !cache_ram_state_and_ctag_cset$DOB[22])
	$write("CTAG_EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_ram_state_and_ctag_cset$DOB[22])
	$write(", 0x%0x", cache_ram_state_and_ctag_cset$DOB[21:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  !cache_ram_state_and_ctag_cset$DOB[22])
	$write(", --");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(")");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("        CSet 0x%0x, Word128 0x%0x: ",
	       cache_rg_addr[11:6],
	       cache_rg_addr[5:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(" 0x%0x", cache_ram_word128_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("    TLB result: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("VM_Xlate_Result { ", "outcome: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("VM_XLATE_OK");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "pa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 6'h2A, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_3_EQ_0_4_OR_cache_rg_op_3_EQ_2_5_A_ETC___d467)
	begin
	  v__h21466 = $stime;
	  #0;
	end
    v__h21460 = v__h21466 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_3_EQ_0_4_OR_cache_rg_op_3_EQ_2_5_A_ETC___d467)
	$display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		 v__h21460,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270,
		 130'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d481)
	$display("        AMO LR: reserving PA 0x%0h", cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_3_EQ_0_4_OR_cache_rg_op_3_EQ_2_5_A_ETC___d467)
	$display("        Read-hit: addr 0x%0h word128 0x%0h",
		 cache_rg_addr,
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_3_EQ_0_4_OR_cache_rg_op_3_EQ_2_5_A_ETC___d483)
	$display("        Read Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct7_6_BITS_6_TO_2_7_EQ_0b10_8__ETC___d488)
	$display("        AMO LR: cache refill: cancelling LR/SC reservation for PA 0x%0h",
		 cache_rg_lrsc_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op == 2'd1 &&
	  cache_rg_addr_9_EQ_cache_rg_lrsc_pa_07___d171 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("        ST: cancelling LR/SC reservation for PA",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d821)
	$display("        AMO SC: fail: reserved addr 0x%0h, this address 0x%0h",
		 cache_rg_lrsc_pa,
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct7[6:2] == 5'b00011 &&
	  !cache_rg_lrsc_valid &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("        AMO SC: fail due to invalid LR/SC reservation");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct7[6:2] == 5'b00011 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("        AMO SC result = %0d", lrsc_result__h21856);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d833)
	$display("        Write-Cache-Hit: pa 0x%0h word128 0x%0h",
		 cache_rg_addr,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d833)
	$write("        New Word128_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d833)
	$write("        CSet 0x%0x, Word128 0x%0x: ",
	       cache_rg_addr[11:6],
	       cache_rg_addr[5:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d833)
	$write(" 0x%0x", { x__h22607, x__h22716 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d833)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  (cache_rg_op == 2'd1 ||
	   cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	  NOT_cache_rg_op_3_EQ_2_5_37_OR_NOT_cache_rg_am_ETC___d836)
	$display("        Write-Cache-Miss: pa 0x%0h word128 0x%0h",
		 cache_rg_addr,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d843)
	$display("        Write-Cache-Hit/Miss: eaddr 0x%0h word128 0x%0h",
		 cache_rg_addr,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d849)
	begin
	  v__h27528 = $stime;
	  #0;
	end
    v__h27522 = v__h27528 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d849)
	$display("%0d: ERROR: CreditCounter: overflow", v__h27522);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d849)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d843)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d843)
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d843)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d843)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d843)
	$write("'h%h", mem_req_wr_addr_awaddr__h32089);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d843)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d843)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d843)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d843)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d843)
	$write("'h%h", _theResult___fst_val__h39574, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d843)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d843)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d843)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d843)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d843)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d843)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d843)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d843)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d843)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d843)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d843)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d843)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d843)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d843)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d843)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d843)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d843)
	$write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d843)
	$write("'h%h", mem_req_wr_data_wdata__h27234);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d843)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d843)
	$write("'h%h", mem_req_wr_data_wstrb__h32226);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d843)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d843)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d843)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d843)
	$write("'h%h", mem_req_wr_data_wuser__h27237, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d843)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_3_EQ_0_4_36_AND_NOT_cache_rg_o_ETC___d843)
	$display("        => rl_write_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_3_EQ_2_5_AND_cache_rg_amo_funct7_6_ETC___d856)
	begin
	  v__h26795 = $stime;
	  #0;
	end
    v__h26789 = v__h26795 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_3_EQ_2_5_AND_cache_rg_amo_funct7_6_ETC___d856)
	$display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		 v__h26789,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 130'd1,
		 130'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_3_EQ_2_5_AND_cache_rg_amo_funct7_6_ETC___d856)
	$display("        AMO SC: Fail response for addr 0x%0h",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_3_EQ_1_01_79_AND_NOT_cache_rg__ETC___d861)
	$display("        AMO Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d867)
	$display("        AMO: addr 0x%0h amo_f7 0x%0h width_code %0d is_unsigned %0d rs2_val 0x%0h",
		 cache_rg_addr,
		 cache_rg_amo_funct7,
		 cache_rg_width_code,
		 cache_rg_is_unsigned,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d867)
	$display("          PA 0x%0h ", cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d867)
	$display("          Cache word128 0x%0h, load-result 0x%0h",
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270,
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d867)
	$display("          0x%0h  op  0x%0h -> 0x%0h",
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270,
		 cache_ram_word128_set_b_read__53_AND_cache_ram_ETC___d270,
		 { 65'd0, x__h28152 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d867)
	$write("          New Word128_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d867)
	$write("        CSet 0x%0x, Word128 0x%0x: ",
	       cache_rg_addr[11:6],
	       cache_rg_addr[5:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d867)
	$write(" 0x%0x",
	       { cache_ram_word128_set_b_read__53_BITS_129_TO_1_ETC___d555,
		 x__h28041 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d867)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d873)
	begin
	  v__h32486 = $stime;
	  #0;
	end
    v__h32480 = v__h32486 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d873)
	$display("%0d: ERROR: CreditCounter: overflow", v__h32480);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d873)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d867)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d867)
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d867)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d867)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d867)
	$write("'h%h", mem_req_wr_addr_awaddr__h32089);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d867)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d867)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d867)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d867)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d867)
	$write("'h%h", _theResult___fst_val__h39574, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d867)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d867)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d867)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d867)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d867)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d867)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d867)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d867)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d867)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d867)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d867)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d867)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d867)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d867)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d867)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d867)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d867)
	$write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d867)
	$write("'h%h", mem_req_wr_data_wdata__h32225);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d867)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d867)
	$write("'h%h", mem_req_wr_data_wstrb__h32226);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d867)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d867)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d867)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d867)
	$write("'h%h", 2'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d867)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_3_EQ_1_01_79_AND_NOT_cache_rg__ETC___d878)
	$display("        AMO_op: cancelling LR/SC reservation for PA",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  !cache_soc_map$m_is_mem_addr &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("    => IO_REQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_rereq &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("    fa_req_ram_B tagCSet [0x%0x] word128_set [0x%0d]",
		 cache_rg_addr[11:6],
		 cache_rg_addr[11:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_maintain_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h37809 = $stime;
	  #0;
	end
    v__h37803 = v__h37809 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_maintain_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		 v__h37803,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 cache_rg_ld_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h37895 = $stime;
	  #0;
	end
    v__h37889 = v__h37895 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s: rl_io_write_req; width_code 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		 v__h37889,
		 "D_MMU_Cache",
		 cache_rg_width_code,
		 cache_rg_addr,
		 cache_rg_pa,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  cache_ctr_wr_rsps_pending_crg == 4'd15)
	begin
	  v__h38400 = $stime;
	  #0;
	end
    v__h38394 = v__h38400 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  cache_ctr_wr_rsps_pending_crg == 4'd15)
	$display("%0d: ERROR: CreditCounter: overflow", v__h38394);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  cache_ctr_wr_rsps_pending_crg == 4'd15)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", mem_req_wr_addr_awaddr__h39491);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", _theResult___fst_val__h39574, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", mem_req_wr_data_wdata__h38137);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", mem_req_wr_data_wstrb__h39628);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", mem_req_wr_data_wuser__h27237, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_SC_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h38696 = $stime;
	  #0;
	end
    v__h38690 = v__h38696 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_SC_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s: rl_io_AMO_SC_req; width_code 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		 v__h38690,
		 "D_MMU_Cache",
		 cache_rg_width_code,
		 cache_rg_addr,
		 cache_rg_pa,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_SC_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("    FAIL due to I/O address.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_SC_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h38816 = $stime;
	  #0;
	end
    v__h38810 = v__h38816 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s.rl_io_AMO_op_req; width_code 0x%0h vaddr %0h  paddr %0h",
		 v__h38810,
		 "D_MMU_Cache",
		 cache_rg_width_code,
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", mem_req_wr_addr_awaddr__h39491);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", size_val__h38953, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_11___d912)
	begin
	  v__h33886 = $stime;
	  #0;
	end
    v__h33880 = v__h33886 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_11___d912)
	$display("%0d: %s.rl_cache_refill_rsps_loop:",
		 v__h33880,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_11___d912)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_11___d912)
	$write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_11___d912)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[136:133]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_11___d912)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_11___d912)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[132:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_11___d912)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_11___d912 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_11___d912 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_11___d912 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_11___d912 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd1 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_11___d912)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_11___d912 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_11___d912 &&
	  !cache_master_xactor_shim_rff_rv$port1__read[2])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_11___d912)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_11___d912)
	$write("'h%h",
	       cache_master_xactor_shim_rff_rv$port1__read[1:0],
	       " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_11___d912)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h34148 = $stime;
	  #0;
	end
    v__h34142 = v__h34148 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d",
		 v__h34142,
		 "D_MMU_Cache",
		 access_exc_code__h4892);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_word128_set_in_cache[1:0] == 2'd3 &&
	  (cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 ||
	   cache_rg_error_during_refill) &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("    => MODULE_EXCEPTION_RSP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_word128_set_in_cache[1:0] == 2'd3 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  !cache_rg_error_during_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("    => CACHE_REREQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_11___d912)
	$display("        Updating Cache word128_set 0x%0h, word128_in_cline %0d) old => new",
		 cache_rg_word128_set_in_cache,
		 cache_rg_word128_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_11___d912)
	$write("        CSet 0x%0x, Word128 0x%0x: ",
	       cache_rg_addr[11:6],
	       cache_rg_word128_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_11___d912)
	$write(" 0x%0x", cache_ram_word128_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_11___d912)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_11___d912)
	$write("        CSet 0x%0x, Word128 0x%0x: ",
	       cache_rg_addr[11:6],
	       cache_rg_word128_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_11___d912)
	$write(" 0x%0x",
	       { cache_master_xactor_shim_rff_rv$port1__read[1:0],
		 cache_master_xactor_shim_rff_rv$port1__read[132:5] });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_11___d912)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h36141 = $stime;
	  #0;
	end
    v__h36135 = v__h36141 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s.rl_io_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		 v__h36135,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[136:133]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[132:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd1 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  !cache_master_xactor_shim_rff_rv$port1__read[2])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h",
	       cache_master_xactor_shim_rff_rv$port1__read[1:0],
	       " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h37586 = $stime;
	  #0;
	end
    v__h37580 = v__h37586 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		 v__h37580,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 { 1'd0, x__h36453 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h37700 = $stime;
	  #0;
	end
    v__h37694 = v__h37700 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		 v__h37694,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h39115 = $stime;
	  #0;
	end
    v__h39109 = v__h39115 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s.rl_io_AMO_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		 v__h39109,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[136:133]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[132:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd1 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  !cache_master_xactor_shim_rff_rv$port1__read[2])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h",
	       cache_master_xactor_shim_rff_rv$port1__read[1:0],
	       " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h39310 = $stime;
	  #0;
	end
    v__h39304 = v__h39310 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s: rl_io_AMO_read_rsp; f3 0x%0h  vaddr %0h  paddr %0h  word128 0x%0h",
		 v__h39304,
		 "D_MMU_Cache",
		 cache_rg_width_code,
		 cache_rg_addr,
		 cache_rg_pa,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  cache_ctr_wr_rsps_pending_crg == 4'd15)
	begin
	  v__h42372 = $stime;
	  #0;
	end
    v__h42366 = v__h42372 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  cache_ctr_wr_rsps_pending_crg == 4'd15)
	$display("%0d: ERROR: CreditCounter: overflow", v__h42366);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  cache_ctr_wr_rsps_pending_crg == 4'd15)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", mem_req_wr_addr_awaddr__h39491);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", _theResult___fst_val__h39574, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", mem_req_wr_data_wdata__h39627);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", mem_req_wr_data_wstrb__h39628);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 2'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h42625 = $stime;
	  #0;
	end
    v__h42619 = v__h42625 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		 v__h42619,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 { 65'd0,
		   IF_cache_rg_width_code_94_EQ_2_99_THEN_SEXT_IF_ETC___d1279 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h39408 = $stime;
	  #0;
	end
    v__h39402 = v__h39408 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s.rl_io_AMO_read_rsp: FABRIC_RSP_ERR: raising trap STORE_AMO_ACCESS_FAULT",
		 v__h39402,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h32934 = $stime;
	  #0;
	end
    v__h32928 = v__h32934 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s.rl_start_cache_refill: ", v__h32928, "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("    To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", cline_fabric_addr__h32987);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 8'd3);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 3'b100, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("    Victim way %0d; => CACHE_REFILL", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h35786 = $stime;
	  #0;
	end
    v__h35780 = v__h35786 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s.rl_io_read_req; width_code 0x%0h vaddr %0h  paddr %0h",
		 v__h35780,
		 "D_MMU_Cache",
		 cache_rg_width_code,
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", mem_req_wr_addr_awaddr__h39491);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", size_val__h38953, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h43350 = $stime;
	  #0;
	end
    v__h43344 = v__h43350 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("%0d: %s.rl_discard_write_rsp: pending %0d ",
	       v__h43344,
	       "D_MMU_Cache",
	       $unsigned(b__h32888));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_BFlit { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", cache_master_xactor_shim_bff_rv$port1__read[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	begin
	  v__h43311 = $stime;
	  #0;
	end
    v__h43305 = v__h43311 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$display("%0d: %s.rl_discard_write_rsp: fabric response error: exit",
		 v__h43305,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("AXI4_BFlit { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("'h%h", cache_master_xactor_shim_bff_rv$port1__read[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd1 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_reset &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h5176 = $stime;
	  #0;
	end
    v__h5170 = v__h5176 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_reset &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s.rl_start_reset", v__h5170, "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h43740 = $stime;
	  #0;
	end
    v__h43734 = v__h43740 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("%0d: %s.req: op:", v__h43734, "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  req_op == 2'd0)
	$write("CACHE_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  req_op == 2'd1)
	$write("CACHE_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  req_op != 2'd0 &&
	  req_op != 2'd1)
	$write("CACHE_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(" width_code:%0d addr:0x%0h st_value:0x%0h priv:",
	       req_width_code,
	       req_addr,
	       req_st_value);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  req_priv == 2'b0)
	$write("U");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  req_priv == 2'b01)
	$write("S");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  req_priv == 2'b11)
	$write("M");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  req_priv != 2'b0 &&
	  req_priv != 2'b01 &&
	  req_priv != 2'b11)
	$write("RESERVED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(" sstatus_SUM:%0d mstatus_MXR:%0d satp:0x%0h",
	       req_sstatus_SUM,
	       req_mstatus_MXR,
	       req_satp,
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("    amo_funct7 = 0x%0h", req_amo_funct7);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req &&
	  req_width_code_EQ_0_369_OR_req_width_code_EQ_1_ETC___d1410)
	$display("    fa_req_ram_B tagCSet [0x%0x] word128_set [0x%0d]",
		 req_addr[11:6],
		 req_addr[11:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
  end
  // synopsys translate_on
endmodule  // mkMMU_DCache

