//
// Generated by Bluespec Compiler, version 2019.05.beta2 (build a88bf40db, 2019-05-24)
//
// On Sun Mar  1 15:58:22 GMT 2020
//
//
// Ports:
// Name                         I/O  size props
// RDY_set_verbosity              O     1 const
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1
// valid                          O     1
// addr                           O    32 reg
// word128_fst                    O     1
// word128_snd                    O   128
// st_amo_val_fst                 O     1
// st_amo_val_snd                 O   128
// exc                            O     1
// exc_code                       O     6 reg
// RDY_server_flush_request_put   O     1
// RDY_server_flush_response_get  O     1
// RDY_tlb_flush                  O     1
// mem_master_awid                O     4
// mem_master_awaddr              O    64
// mem_master_awlen               O     8
// mem_master_awsize              O     3
// mem_master_awburst             O     2
// mem_master_awlock              O     1
// mem_master_awcache             O     4
// mem_master_awprot              O     3
// mem_master_awqos               O     4
// mem_master_awregion            O     4
// mem_master_awvalid             O     1
// mem_master_wdata               O    64
// mem_master_wstrb               O     8
// mem_master_wlast               O     1
// mem_master_wuser               O     1
// mem_master_wvalid              O     1
// mem_master_bready              O     1
// mem_master_arid                O     4
// mem_master_araddr              O    64
// mem_master_arlen               O     8
// mem_master_arsize              O     3
// mem_master_arburst             O     2
// mem_master_arlock              O     1
// mem_master_arcache             O     4
// mem_master_arprot              O     3
// mem_master_arqos               O     4
// mem_master_arregion            O     4
// mem_master_arvalid             O     1
// mem_master_rready              O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_verbosity_verbosity        I     4 reg
// req_op                         I     2
// req_width_code                 I     3
// req_is_unsigned                I     1 reg
// req_amo_funct7                 I     7 reg
// req_addr                       I    32
// req_st_value                   I   129
// req_priv                       I     2 unused
// req_sstatus_SUM                I     1 unused
// req_mstatus_MXR                I     1 unused
// req_satp                       I    32 unused
// mem_master_awready             I     1
// mem_master_wready              I     1
// mem_master_bid                 I     4
// mem_master_bresp               I     2
// mem_master_arready             I     1
// mem_master_rid                 I     4
// mem_master_rdata               I    64
// mem_master_rresp               I     2
// mem_master_rlast               I     1
// mem_master_ruser               I     1
// EN_set_verbosity               I     1
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_req                         I     1
// EN_commit                      I     1
// EN_server_flush_request_put    I     1
// EN_server_flush_response_get   I     1
// EN_tlb_flush                   I     1 unused
// mem_master_bvalid              I     1
// mem_master_rvalid              I     1
//
// Combinational paths from inputs to outputs:
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> valid
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> word128_fst
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> word128_snd
//   EN_req -> RDY_server_flush_request_put
//   EN_req -> RDY_tlb_flush
//   EN_req -> mem_master_arid
//   EN_req -> mem_master_araddr
//   EN_req -> mem_master_arlen
//   EN_req -> mem_master_arsize
//   EN_req -> mem_master_arburst
//   EN_req -> mem_master_arlock
//   EN_req -> mem_master_arcache
//   EN_req -> mem_master_arprot
//   EN_req -> mem_master_arqos
//   EN_req -> mem_master_arregion
//   EN_req -> mem_master_aruser
//   EN_req -> mem_master_arvalid
//   EN_commit -> st_amo_val_fst
//   EN_commit -> st_amo_val_snd
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMMU_DCache(CLK,
		    RST_N,

		    set_verbosity_verbosity,
		    EN_set_verbosity,
		    RDY_set_verbosity,

		    EN_server_reset_request_put,
		    RDY_server_reset_request_put,

		    EN_server_reset_response_get,
		    RDY_server_reset_response_get,

		    req_op,
		    req_width_code,
		    req_is_unsigned,
		    req_amo_funct7,
		    req_addr,
		    req_st_value,
		    req_priv,
		    req_sstatus_SUM,
		    req_mstatus_MXR,
		    req_satp,
		    EN_req,

		    EN_commit,

		    valid,

		    addr,

		    word128_fst,

		    word128_snd,

		    st_amo_val_fst,

		    st_amo_val_snd,

		    exc,

		    exc_code,

		    EN_server_flush_request_put,
		    RDY_server_flush_request_put,

		    EN_server_flush_response_get,
		    RDY_server_flush_response_get,

		    EN_tlb_flush,
		    RDY_tlb_flush,

		    mem_master_awid,

		    mem_master_awaddr,

		    mem_master_awlen,

		    mem_master_awsize,

		    mem_master_awburst,

		    mem_master_awlock,

		    mem_master_awcache,

		    mem_master_awprot,

		    mem_master_awqos,

		    mem_master_awregion,

		    mem_master_awvalid,

		    mem_master_awready,

		    mem_master_wdata,

		    mem_master_wstrb,

		    mem_master_wlast,

		    mem_master_wuser,

		    mem_master_wvalid,

		    mem_master_wready,

		    mem_master_bid,
		    mem_master_bresp,
		    mem_master_bvalid,

		    mem_master_bready,

		    mem_master_arid,

		    mem_master_araddr,

		    mem_master_arlen,

		    mem_master_arsize,

		    mem_master_arburst,

		    mem_master_arlock,

		    mem_master_arcache,

		    mem_master_arprot,

		    mem_master_arqos,

		    mem_master_arregion,

		    mem_master_arvalid,

		    mem_master_arready,

		    mem_master_rid,
		    mem_master_rdata,
		    mem_master_rresp,
		    mem_master_rlast,
		    mem_master_ruser,
		    mem_master_rvalid,

		    mem_master_rready);
  input  CLK;
  input  RST_N;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // action method req
  input  [1 : 0] req_op;
  input  [2 : 0] req_width_code;
  input  req_is_unsigned;
  input  [6 : 0] req_amo_funct7;
  input  [31 : 0] req_addr;
  input  [128 : 0] req_st_value;
  input  [1 : 0] req_priv;
  input  req_sstatus_SUM;
  input  req_mstatus_MXR;
  input  [31 : 0] req_satp;
  input  EN_req;

  // action method commit
  input  EN_commit;

  // value method valid
  output valid;

  // value method addr
  output [31 : 0] addr;

  // value method word128_fst
  output word128_fst;

  // value method word128_snd
  output [127 : 0] word128_snd;

  // value method st_amo_val_fst
  output st_amo_val_fst;

  // value method st_amo_val_snd
  output [127 : 0] st_amo_val_snd;

  // value method exc
  output exc;

  // value method exc_code
  output [5 : 0] exc_code;

  // action method server_flush_request_put
  input  EN_server_flush_request_put;
  output RDY_server_flush_request_put;

  // action method server_flush_response_get
  input  EN_server_flush_response_get;
  output RDY_server_flush_response_get;

  // action method tlb_flush
  input  EN_tlb_flush;
  output RDY_tlb_flush;

  // value method mem_master_aw_awid
  output [3 : 0] mem_master_awid;

  // value method mem_master_aw_awaddr
  output [63 : 0] mem_master_awaddr;

  // value method mem_master_aw_awlen
  output [7 : 0] mem_master_awlen;

  // value method mem_master_aw_awsize
  output [2 : 0] mem_master_awsize;

  // value method mem_master_aw_awburst
  output [1 : 0] mem_master_awburst;

  // value method mem_master_aw_awlock
  output mem_master_awlock;

  // value method mem_master_aw_awcache
  output [3 : 0] mem_master_awcache;

  // value method mem_master_aw_awprot
  output [2 : 0] mem_master_awprot;

  // value method mem_master_aw_awqos
  output [3 : 0] mem_master_awqos;

  // value method mem_master_aw_awregion
  output [3 : 0] mem_master_awregion;

  // value method mem_master_aw_awuser

  // value method mem_master_aw_awvalid
  output mem_master_awvalid;

  // action method mem_master_aw_awready
  input  mem_master_awready;

  // value method mem_master_w_wdata
  output [63 : 0] mem_master_wdata;

  // value method mem_master_w_wstrb
  output [7 : 0] mem_master_wstrb;

  // value method mem_master_w_wlast
  output mem_master_wlast;

  // value method mem_master_w_wuser
  output mem_master_wuser;

  // value method mem_master_w_wvalid
  output mem_master_wvalid;

  // action method mem_master_w_wready
  input  mem_master_wready;

  // action method mem_master_b_bflit
  input  [3 : 0] mem_master_bid;
  input  [1 : 0] mem_master_bresp;
  input  mem_master_bvalid;

  // value method mem_master_b_bready
  output mem_master_bready;

  // value method mem_master_ar_arid
  output [3 : 0] mem_master_arid;

  // value method mem_master_ar_araddr
  output [63 : 0] mem_master_araddr;

  // value method mem_master_ar_arlen
  output [7 : 0] mem_master_arlen;

  // value method mem_master_ar_arsize
  output [2 : 0] mem_master_arsize;

  // value method mem_master_ar_arburst
  output [1 : 0] mem_master_arburst;

  // value method mem_master_ar_arlock
  output mem_master_arlock;

  // value method mem_master_ar_arcache
  output [3 : 0] mem_master_arcache;

  // value method mem_master_ar_arprot
  output [2 : 0] mem_master_arprot;

  // value method mem_master_ar_arqos
  output [3 : 0] mem_master_arqos;

  // value method mem_master_ar_arregion
  output [3 : 0] mem_master_arregion;

  // value method mem_master_ar_aruser

  // value method mem_master_ar_arvalid
  output mem_master_arvalid;

  // action method mem_master_ar_arready
  input  mem_master_arready;

  // action method mem_master_r_rflit
  input  [3 : 0] mem_master_rid;
  input  [63 : 0] mem_master_rdata;
  input  [1 : 0] mem_master_rresp;
  input  mem_master_rlast;
  input  mem_master_ruser;
  input  mem_master_rvalid;

  // value method mem_master_r_rready
  output mem_master_rready;

  // signals for module outputs
  wire [127 : 0] st_amo_val_snd, word128_snd;
  wire [63 : 0] mem_master_araddr, mem_master_awaddr, mem_master_wdata;
  wire [31 : 0] addr;
  wire [7 : 0] mem_master_arlen, mem_master_awlen, mem_master_wstrb;
  wire [5 : 0] exc_code;
  wire [3 : 0] mem_master_arcache,
	       mem_master_arid,
	       mem_master_arqos,
	       mem_master_arregion,
	       mem_master_awcache,
	       mem_master_awid,
	       mem_master_awqos,
	       mem_master_awregion;
  wire [2 : 0] mem_master_arprot,
	       mem_master_arsize,
	       mem_master_awprot,
	       mem_master_awsize;
  wire [1 : 0] mem_master_arburst, mem_master_awburst;
  wire RDY_server_flush_request_put,
       RDY_server_flush_response_get,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_set_verbosity,
       RDY_tlb_flush,
       exc,
       mem_master_arlock,
       mem_master_arvalid,
       mem_master_awlock,
       mem_master_awvalid,
       mem_master_bready,
       mem_master_rready,
       mem_master_wlast,
       mem_master_wuser,
       mem_master_wvalid,
       st_amo_val_fst,
       valid,
       word128_fst;

  // inlined wires
  reg [128 : 0] cache_dw_output_ld_val$wget;
  wire [128 : 0] cache_dw_output_st_amo_val$wget;
  wire [97 : 0] cache_master_xactor_shim_arff_rv$port0__write_1,
		cache_master_xactor_shim_arff_rv$port1__read,
		cache_master_xactor_shim_arff_rv$port2__read,
		cache_master_xactor_shim_arff_rv$port3__read,
		cache_master_xactor_shim_awff_rv$port0__write_1,
		cache_master_xactor_shim_awff_rv$port1__read,
		cache_master_xactor_shim_awff_rv$port2__read,
		cache_master_xactor_shim_awff_rv$port3__read;
  wire [74 : 0] cache_master_xactor_shim_wff_rv$port0__write_1,
		cache_master_xactor_shim_wff_rv$port1__read,
		cache_master_xactor_shim_wff_rv$port2__read,
		cache_master_xactor_shim_wff_rv$port3__read;
  wire [72 : 0] cache_master_xactor_shim_rff_rv$port0__write_1,
		cache_master_xactor_shim_rff_rv$port1__read,
		cache_master_xactor_shim_rff_rv$port2__read,
		cache_master_xactor_shim_rff_rv$port3__read;
  wire [71 : 0] cache_master_xactor_ug_master_u_r_putWire$wget;
  wire [10 : 0] cache_crg_sb_to_load_delay$port0__write_1,
		cache_crg_sb_to_load_delay$port2__read;
  wire [6 : 0] cache_master_xactor_shim_bff_rv$port0__write_1,
	       cache_master_xactor_shim_bff_rv$port1__read,
	       cache_master_xactor_shim_bff_rv$port2__read,
	       cache_master_xactor_shim_bff_rv$port3__read;
  wire [5 : 0] cache_master_xactor_ug_master_u_b_putWire$wget;
  wire cache_crg_commit$port1__read,
       cache_crg_commit$port3__read,
       cache_crg_sb_to_load_delay$EN_port1__write,
       cache_dw_valid$whas,
       cache_master_xactor_shim_arff_rv$EN_port0__write,
       cache_master_xactor_shim_rff_rv$EN_port1__write,
       cache_master_xactor_ug_master_u_ar_dropWire$whas,
       cache_master_xactor_ug_master_u_aw_dropWire$whas,
       cache_master_xactor_ug_master_u_b_putWire$whas,
       cache_master_xactor_ug_master_u_r_putWire$whas,
       cache_master_xactor_ug_master_u_w_dropWire$whas;

  // register cache_cfg_verbosity
  reg [3 : 0] cache_cfg_verbosity;
  wire [3 : 0] cache_cfg_verbosity$D_IN;
  wire cache_cfg_verbosity$EN;

  // register cache_crg_commit
  reg cache_crg_commit;
  wire cache_crg_commit$D_IN, cache_crg_commit$EN;

  // register cache_crg_sb_to_load_delay
  reg [10 : 0] cache_crg_sb_to_load_delay;
  wire [10 : 0] cache_crg_sb_to_load_delay$D_IN;
  wire cache_crg_sb_to_load_delay$EN;

  // register cache_ctr_wr_rsps_pending_inrg
  reg [3 : 0] cache_ctr_wr_rsps_pending_inrg;
  wire [3 : 0] cache_ctr_wr_rsps_pending_inrg$D_IN;
  wire cache_ctr_wr_rsps_pending_inrg$EN;

  // register cache_ctr_wr_rsps_pending_outrg
  reg [3 : 0] cache_ctr_wr_rsps_pending_outrg;
  wire [3 : 0] cache_ctr_wr_rsps_pending_outrg$D_IN;
  wire cache_ctr_wr_rsps_pending_outrg$EN;

  // register cache_master_xactor_clearing
  reg cache_master_xactor_clearing;
  wire cache_master_xactor_clearing$D_IN, cache_master_xactor_clearing$EN;

  // register cache_master_xactor_shim_arff_rv
  reg [97 : 0] cache_master_xactor_shim_arff_rv;
  wire [97 : 0] cache_master_xactor_shim_arff_rv$D_IN;
  wire cache_master_xactor_shim_arff_rv$EN;

  // register cache_master_xactor_shim_awff_rv
  reg [97 : 0] cache_master_xactor_shim_awff_rv;
  wire [97 : 0] cache_master_xactor_shim_awff_rv$D_IN;
  wire cache_master_xactor_shim_awff_rv$EN;

  // register cache_master_xactor_shim_bff_rv
  reg [6 : 0] cache_master_xactor_shim_bff_rv;
  wire [6 : 0] cache_master_xactor_shim_bff_rv$D_IN;
  wire cache_master_xactor_shim_bff_rv$EN;

  // register cache_master_xactor_shim_rff_rv
  reg [72 : 0] cache_master_xactor_shim_rff_rv;
  wire [72 : 0] cache_master_xactor_shim_rff_rv$D_IN;
  wire cache_master_xactor_shim_rff_rv$EN;

  // register cache_master_xactor_shim_wff_rv
  reg [74 : 0] cache_master_xactor_shim_wff_rv;
  wire [74 : 0] cache_master_xactor_shim_wff_rv$D_IN;
  wire cache_master_xactor_shim_wff_rv$EN;

  // register cache_rg_addr
  reg [31 : 0] cache_rg_addr;
  wire [31 : 0] cache_rg_addr$D_IN;
  wire cache_rg_addr$EN;

  // register cache_rg_amo_funct7
  reg [6 : 0] cache_rg_amo_funct7;
  wire [6 : 0] cache_rg_amo_funct7$D_IN;
  wire cache_rg_amo_funct7$EN;

  // register cache_rg_cset_in_cache
  reg [6 : 0] cache_rg_cset_in_cache;
  wire [6 : 0] cache_rg_cset_in_cache$D_IN;
  wire cache_rg_cset_in_cache$EN;

  // register cache_rg_error_during_refill
  reg cache_rg_error_during_refill;
  wire cache_rg_error_during_refill$D_IN, cache_rg_error_during_refill$EN;

  // register cache_rg_exc_code
  reg [5 : 0] cache_rg_exc_code;
  reg [5 : 0] cache_rg_exc_code$D_IN;
  wire cache_rg_exc_code$EN;

  // register cache_rg_is_unsigned
  reg cache_rg_is_unsigned;
  wire cache_rg_is_unsigned$D_IN, cache_rg_is_unsigned$EN;

  // register cache_rg_ld_val
  reg [128 : 0] cache_rg_ld_val;
  reg [128 : 0] cache_rg_ld_val$D_IN;
  wire cache_rg_ld_val$EN;

  // register cache_rg_lower_tag
  reg cache_rg_lower_tag;
  wire cache_rg_lower_tag$D_IN, cache_rg_lower_tag$EN;

  // register cache_rg_lower_word64
  reg [63 : 0] cache_rg_lower_word64;
  wire [63 : 0] cache_rg_lower_word64$D_IN;
  wire cache_rg_lower_word64$EN;

  // register cache_rg_lower_word64_full
  reg cache_rg_lower_word64_full;
  wire cache_rg_lower_word64_full$D_IN, cache_rg_lower_word64_full$EN;

  // register cache_rg_lrsc_pa
  reg [31 : 0] cache_rg_lrsc_pa;
  wire [31 : 0] cache_rg_lrsc_pa$D_IN;
  wire cache_rg_lrsc_pa$EN;

  // register cache_rg_lrsc_valid
  reg cache_rg_lrsc_valid;
  wire cache_rg_lrsc_valid$D_IN, cache_rg_lrsc_valid$EN;

  // register cache_rg_op
  reg [1 : 0] cache_rg_op;
  wire [1 : 0] cache_rg_op$D_IN;
  wire cache_rg_op$EN;

  // register cache_rg_pa
  reg [31 : 0] cache_rg_pa;
  wire [31 : 0] cache_rg_pa$D_IN;
  wire cache_rg_pa$EN;

  // register cache_rg_pte_pa
  reg [31 : 0] cache_rg_pte_pa;
  wire [31 : 0] cache_rg_pte_pa$D_IN;
  wire cache_rg_pte_pa$EN;

  // register cache_rg_st_amo_val
  reg [128 : 0] cache_rg_st_amo_val;
  wire [128 : 0] cache_rg_st_amo_val$D_IN;
  wire cache_rg_st_amo_val$EN;

  // register cache_rg_state
  reg [3 : 0] cache_rg_state;
  reg [3 : 0] cache_rg_state$D_IN;
  wire cache_rg_state$EN;

  // register cache_rg_width_code
  reg [2 : 0] cache_rg_width_code;
  wire [2 : 0] cache_rg_width_code$D_IN;
  wire cache_rg_width_code$EN;

  // register cache_rg_word128_set_in_cache
  reg [7 : 0] cache_rg_word128_set_in_cache;
  wire [7 : 0] cache_rg_word128_set_in_cache$D_IN;
  wire cache_rg_word128_set_in_cache$EN;

  // ports of submodule cache_f_fabric_write_reqs
  reg [163 : 0] cache_f_fabric_write_reqs$D_IN;
  wire [163 : 0] cache_f_fabric_write_reqs$D_OUT;
  wire cache_f_fabric_write_reqs$CLR,
       cache_f_fabric_write_reqs$DEQ,
       cache_f_fabric_write_reqs$EMPTY_N,
       cache_f_fabric_write_reqs$ENQ,
       cache_f_fabric_write_reqs$FULL_N;

  // ports of submodule cache_f_reset_reqs
  wire cache_f_reset_reqs$CLR,
       cache_f_reset_reqs$DEQ,
       cache_f_reset_reqs$D_IN,
       cache_f_reset_reqs$D_OUT,
       cache_f_reset_reqs$EMPTY_N,
       cache_f_reset_reqs$ENQ,
       cache_f_reset_reqs$FULL_N;

  // ports of submodule cache_f_reset_rsps
  wire cache_f_reset_rsps$CLR,
       cache_f_reset_rsps$DEQ,
       cache_f_reset_rsps$D_IN,
       cache_f_reset_rsps$D_OUT,
       cache_f_reset_rsps$EMPTY_N,
       cache_f_reset_rsps$ENQ,
       cache_f_reset_rsps$FULL_N;

  // ports of submodule cache_ram_state_and_ctag_cset
  reg [22 : 0] cache_ram_state_and_ctag_cset$DIB;
  wire [22 : 0] cache_ram_state_and_ctag_cset$DIA,
		cache_ram_state_and_ctag_cset$DOB;
  wire [6 : 0] cache_ram_state_and_ctag_cset$ADDRA,
	       cache_ram_state_and_ctag_cset$ADDRB;
  wire cache_ram_state_and_ctag_cset$ENA,
       cache_ram_state_and_ctag_cset$ENB,
       cache_ram_state_and_ctag_cset$WEA,
       cache_ram_state_and_ctag_cset$WEB;

  // ports of submodule cache_ram_word128_set
  reg [129 : 0] cache_ram_word128_set$DIB;
  reg [7 : 0] cache_ram_word128_set$ADDRB;
  wire [129 : 0] cache_ram_word128_set$DIA, cache_ram_word128_set$DOB;
  wire [7 : 0] cache_ram_word128_set$ADDRA;
  wire cache_ram_word128_set$ENA,
       cache_ram_word128_set$ENB,
       cache_ram_word128_set$WEA,
       cache_ram_word128_set$WEB;

  // ports of submodule cache_soc_map
  wire [63 : 0] cache_soc_map$m_is_IO_addr_addr,
		cache_soc_map$m_is_mem_addr_addr,
		cache_soc_map$m_is_near_mem_IO_addr_addr;
  wire cache_soc_map$m_is_mem_addr;

  // rule scheduling signals
  wire CAN_FIRE_RL_cache_master_xactor_do_clear,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop,
       CAN_FIRE_RL_cache_rl_ST_AMO_response,
       CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop,
       CAN_FIRE_RL_cache_rl_discard_write_rsp,
       CAN_FIRE_RL_cache_rl_drive_exception_rsp,
       CAN_FIRE_RL_cache_rl_fabric_send_write_req,
       CAN_FIRE_RL_cache_rl_io_AMO_SC_req,
       CAN_FIRE_RL_cache_rl_io_AMO_op_req,
       CAN_FIRE_RL_cache_rl_io_AMO_read_rsp,
       CAN_FIRE_RL_cache_rl_io_read_req,
       CAN_FIRE_RL_cache_rl_io_read_rsp,
       CAN_FIRE_RL_cache_rl_io_write_req,
       CAN_FIRE_RL_cache_rl_maintain_io_read_rsp,
       CAN_FIRE_RL_cache_rl_probe_and_immed_rsp,
       CAN_FIRE_RL_cache_rl_rereq,
       CAN_FIRE_RL_cache_rl_reset,
       CAN_FIRE_RL_cache_rl_shift_sb_to_load_delay,
       CAN_FIRE_RL_cache_rl_start_cache_refill,
       CAN_FIRE_RL_cache_rl_start_reset,
       CAN_FIRE_commit,
       CAN_FIRE_mem_master_ar_arready,
       CAN_FIRE_mem_master_aw_awready,
       CAN_FIRE_mem_master_b_bflit,
       CAN_FIRE_mem_master_r_rflit,
       CAN_FIRE_mem_master_w_wready,
       CAN_FIRE_req,
       CAN_FIRE_server_flush_request_put,
       CAN_FIRE_server_flush_response_get,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_tlb_flush,
       WILL_FIRE_RL_cache_master_xactor_do_clear,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop,
       WILL_FIRE_RL_cache_rl_ST_AMO_response,
       WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop,
       WILL_FIRE_RL_cache_rl_discard_write_rsp,
       WILL_FIRE_RL_cache_rl_drive_exception_rsp,
       WILL_FIRE_RL_cache_rl_fabric_send_write_req,
       WILL_FIRE_RL_cache_rl_io_AMO_SC_req,
       WILL_FIRE_RL_cache_rl_io_AMO_op_req,
       WILL_FIRE_RL_cache_rl_io_AMO_read_rsp,
       WILL_FIRE_RL_cache_rl_io_read_req,
       WILL_FIRE_RL_cache_rl_io_read_rsp,
       WILL_FIRE_RL_cache_rl_io_write_req,
       WILL_FIRE_RL_cache_rl_maintain_io_read_rsp,
       WILL_FIRE_RL_cache_rl_probe_and_immed_rsp,
       WILL_FIRE_RL_cache_rl_rereq,
       WILL_FIRE_RL_cache_rl_reset,
       WILL_FIRE_RL_cache_rl_shift_sb_to_load_delay,
       WILL_FIRE_RL_cache_rl_start_cache_refill,
       WILL_FIRE_RL_cache_rl_start_reset,
       WILL_FIRE_commit,
       WILL_FIRE_mem_master_ar_arready,
       WILL_FIRE_mem_master_aw_awready,
       WILL_FIRE_mem_master_b_bflit,
       WILL_FIRE_mem_master_r_rflit,
       WILL_FIRE_mem_master_w_wready,
       WILL_FIRE_req,
       WILL_FIRE_server_flush_request_put,
       WILL_FIRE_server_flush_response_get,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_tlb_flush;

  // inputs to muxes for submodule ports
  wire [163 : 0] MUX_cache_f_fabric_write_reqs$enq_1__VAL_1,
		 MUX_cache_f_fabric_write_reqs$enq_1__VAL_2,
		 MUX_cache_f_fabric_write_reqs$enq_1__VAL_3;
  wire [129 : 0] MUX_cache_ram_word128_set$a_put_3__VAL_1,
		 MUX_cache_ram_word128_set$a_put_3__VAL_2;
  wire [128 : 0] MUX_cache_dw_output_ld_val$wset_1__VAL_1,
		 MUX_cache_dw_output_ld_val$wset_1__VAL_2,
		 MUX_cache_dw_output_ld_val$wset_1__VAL_3,
		 MUX_cache_dw_output_st_amo_val$wset_1__VAL_1,
		 MUX_cache_rg_ld_val$write_1__VAL_2,
		 MUX_cache_rg_st_amo_val$write_1__VAL_2;
  wire [97 : 0] MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_1,
		MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_2;
  wire [22 : 0] MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1;
  wire [7 : 0] MUX_cache_ram_word128_set$b_put_2__VAL_2,
	       MUX_cache_ram_word128_set$b_put_2__VAL_4;
  wire [6 : 0] MUX_cache_rg_cset_in_cache$write_1__VAL_1;
  wire [5 : 0] MUX_cache_rg_exc_code$write_1__VAL_1,
	       MUX_cache_rg_exc_code$write_1__VAL_2;
  wire [3 : 0] MUX_cache_ctr_wr_rsps_pending_outrg$write_1__VAL_1,
	       MUX_cache_rg_state$write_1__VAL_12,
	       MUX_cache_rg_state$write_1__VAL_2,
	       MUX_cache_rg_state$write_1__VAL_4,
	       MUX_cache_rg_state$write_1__VAL_5;
  wire MUX_cache_dw_output_ld_val$wset_1__SEL_1,
       MUX_cache_dw_output_ld_val$wset_1__SEL_2,
       MUX_cache_dw_output_ld_val$wset_1__SEL_3,
       MUX_cache_dw_output_ld_val$wset_1__SEL_4,
       MUX_cache_f_fabric_write_reqs$enq_1__SEL_2,
       MUX_cache_master_xactor_shim_arff_rv$port0__write_1__SEL_1,
       MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1,
       MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1,
       MUX_cache_ram_word128_set$a_put_1__SEL_1,
       MUX_cache_ram_word128_set$b_put_1__SEL_2,
       MUX_cache_rg_error_during_refill$write_1__SEL_1,
       MUX_cache_rg_exc_code$write_1__SEL_2,
       MUX_cache_rg_exc_code$write_1__SEL_3,
       MUX_cache_rg_exc_code$write_1__SEL_4,
       MUX_cache_rg_exc_code$write_1__SEL_5,
       MUX_cache_rg_ld_val$write_1__SEL_2,
       MUX_cache_rg_lrsc_valid$write_1__SEL_2,
       MUX_cache_rg_lrsc_valid$write_1__VAL_2,
       MUX_cache_rg_state$write_1__SEL_12,
       MUX_cache_rg_state$write_1__SEL_13,
       MUX_cache_rg_state$write_1__SEL_2;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h6549;
  reg [31 : 0] v__h6648;
  reg [31 : 0] v__h7101;
  reg [31 : 0] v__h22500;
  reg [31 : 0] v__h26987;
  reg [31 : 0] v__h6118;
  reg [31 : 0] v__h35025;
  reg [31 : 0] v__h36569;
  reg [31 : 0] v__h36657;
  reg [31 : 0] v__h36875;
  reg [31 : 0] v__h36997;
  reg [31 : 0] v__h40073;
  reg [31 : 0] v__h40320;
  reg [31 : 0] v__h40281;
  reg [31 : 0] v__h35382;
  reg [31 : 0] v__h36344;
  reg [31 : 0] v__h36458;
  reg [31 : 0] v__h37298;
  reg [31 : 0] v__h37493;
  reg [31 : 0] v__h39766;
  reg [31 : 0] v__h37591;
  reg [31 : 0] v__h40711;
  reg [31 : 0] v__h31758;
  reg [31 : 0] v__h32719;
  reg [31 : 0] v__h32981;
  reg [31 : 0] v__h6112;
  reg [31 : 0] v__h6543;
  reg [31 : 0] v__h6642;
  reg [31 : 0] v__h7095;
  reg [31 : 0] v__h22494;
  reg [31 : 0] v__h26981;
  reg [31 : 0] v__h31752;
  reg [31 : 0] v__h32713;
  reg [31 : 0] v__h32975;
  reg [31 : 0] v__h35019;
  reg [31 : 0] v__h35376;
  reg [31 : 0] v__h36338;
  reg [31 : 0] v__h36452;
  reg [31 : 0] v__h36563;
  reg [31 : 0] v__h36651;
  reg [31 : 0] v__h36869;
  reg [31 : 0] v__h36991;
  reg [31 : 0] v__h37292;
  reg [31 : 0] v__h37487;
  reg [31 : 0] v__h37585;
  reg [31 : 0] v__h39760;
  reg [31 : 0] v__h40067;
  reg [31 : 0] v__h40275;
  reg [31 : 0] v__h40314;
  reg [31 : 0] v__h40705;
  // synopsys translate_on

  // remaining internal signals
  reg [127 : 0] CASE_cache_rg_addr_BITS_2_TO_0_0_result6146_4__ETC__q54,
		CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q49,
		CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q52,
		IF_cache_rg_addr_37_BITS_2_TO_0_001_EQ_0_002_T_ETC___d1049,
		IF_cache_rg_addr_37_BITS_2_TO_0_001_EQ_0_002_T_ETC___d1069,
		IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d1171,
		IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d1195,
		IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d1207,
		IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d417,
		IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d457,
		IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d477,
		IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d555,
		IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d563,
		IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d567,
		IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d662,
		IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d679,
		IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d688,
		IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d772,
		IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d789,
		IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d798,
		_theResult___fst__h28713,
		_theResult___fst__h39537,
		_theResult___fst__h8452,
		x__h21357,
		x__h23770,
		x__h26750,
		x__h27470,
		x__h27708,
		x__h35688,
		x__h37828;
  reg [63 : 0] _theResult_____2__h27417,
	       _theResult_____2__h37670,
	       mem_req_wr_data_wdata__h5534;
  reg [7 : 0] mem_req_wr_data_wstrb__h5535;
  reg [2 : 0] _theResult___snd_fst_val__h5423, size_val__h37134;
  wire [129 : 0] cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312,
		 y__h8504;
  wire [128 : 0] IF_cache_rg_op_41_EQ_1_49_OR_cache_rg_op_41_EQ_ETC___d826;
  wire [127 : 0] IF_cache_rg_op_41_EQ_0_42_OR_cache_rg_op_41_EQ_ETC___d499,
		 SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d326,
		 SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d331,
		 SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d336,
		 SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d341,
		 SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d346,
		 SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d351,
		 SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d356,
		 SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d361,
		 SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d365,
		 SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d370,
		 SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d375,
		 SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d380,
		 SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d385,
		 SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d390,
		 SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d395,
		 SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d400,
		 SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d420,
		 SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d424,
		 SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d428,
		 SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d432,
		 SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d436,
		 SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d440,
		 SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d444,
		 SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d448,
		 SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d460,
		 SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d464,
		 SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d468,
		 SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d472,
		 SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d480,
		 SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d484,
		 _theResult___fst__h35638,
		 result__h21300,
		 result__h21368,
		 result__h21406,
		 result__h21439,
		 result__h21472,
		 result__h21505,
		 result__h21538,
		 result__h21571,
		 result__h21604,
		 result__h21637,
		 result__h21670,
		 result__h21703,
		 result__h21736,
		 result__h21769,
		 result__h21802,
		 result__h21835,
		 result__h21868,
		 result__h21923,
		 result__h21956,
		 result__h21989,
		 result__h22022,
		 result__h22055,
		 result__h22088,
		 result__h22121,
		 result__h22154,
		 result__h22201,
		 result__h22234,
		 result__h22267,
		 result__h22300,
		 result__h35640,
		 result__h35699,
		 result__h35735,
		 result__h35768,
		 result__h35801,
		 result__h35834,
		 result__h35867,
		 result__h35900,
		 result__h35933,
		 result__h35996,
		 result__h36029,
		 result__h36062,
		 result__h36095,
		 result__h36146,
		 result__h36179,
		 result__h37909,
		 result__h38617,
		 result__h38649,
		 result__h38681,
		 result__h38713,
		 result__h38745,
		 result__h38777,
		 result__h38809,
		 result__h38841,
		 result__h38873,
		 result__h38905,
		 result__h38937,
		 result__h38969,
		 result__h39001,
		 result__h39033,
		 result__h39065,
		 result__h39119,
		 result__h39151,
		 result__h39183,
		 result__h39215,
		 result__h39247,
		 result__h39279,
		 result__h39311,
		 result__h39343,
		 result__h39389,
		 result__h39421,
		 result__h39453,
		 result__h39485,
		 result__h39539,
		 result__h39568,
		 result__h8454,
		 word128__h35533,
		 x__h33228;
  wire [96 : 0] cache_master_xactor_shim_arff_rvport1__read_B_ETC__q53,
		cache_master_xactor_shim_awff_rvport1__read_B_ETC__q3;
  wire [73 : 0] cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q18;
  wire [63 : 0] IF_cache_rg_width_code_36_EQ_2_41_THEN_SEXT_IF_ETC___d1222,
		IF_cache_rg_width_code_36_EQ_2_41_THEN_SEXT_IF_ETC___d577,
		IF_cache_rg_width_code_36_EQ_2_41_THEN_SEXT_ca_ETC___d706,
		cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q39,
		cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q40,
		cline_fabric_addr__h31811,
		fabric_addr__h37049,
		mem_req_wr_addr_awaddr__h5317,
		new_st_val__h27563,
		new_st_val__h27656,
		new_st_val__h28804,
		new_st_val__h28808,
		new_st_val__h28812,
		new_st_val__h28816,
		new_st_val__h28821,
		new_st_val__h28827,
		new_st_val__h28832,
		new_st_val__h37683,
		new_st_val__h37776,
		new_st_val__h39630,
		new_st_val__h39634,
		new_st_val__h39638,
		new_st_val__h39642,
		new_st_val__h39647,
		new_st_val__h39653,
		new_st_val__h39658,
		w1___1__h27622,
		w1___1__h37742,
		w1__h27409,
		w1__h37662,
		w2__h27411,
		word64__h5404,
		x5688_BITS_127_TO_64__q74,
		x5688_BITS_63_TO_0__q58,
		x__h27561,
		x__h37681;
  wire [31 : 0] IF_cache_rg_addr_BITS_4_TO_0_EQ_0_THEN_1_ELSE_0__q2,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q13,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q7,
		cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q35,
		cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q36,
		cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q37,
		cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q38,
		cache_rg_st_amo_val_BITS_31_TO_0__q51,
		cline_addr__h31810,
		x5688_BITS_127_TO_96__q81,
		x5688_BITS_31_TO_0__q57,
		x5688_BITS_63_TO_32__q65,
		x5688_BITS_95_TO_64__q73,
		x7708_BITS_31_TO_0__q50,
		x7828_BITS_31_TO_0__q85;
  wire [21 : 0] pa_ctag__h8020;
  wire [15 : 0] cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q12,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q16,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q5,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q9,
		cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q19,
		cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q21,
		cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q23,
		cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q25,
		cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q27,
		cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q28,
		cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q31,
		cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q34,
		x5688_BITS_111_TO_96__q79,
		x5688_BITS_127_TO_112__q83,
		x5688_BITS_15_TO_0__q56,
		x5688_BITS_31_TO_16__q62,
		x5688_BITS_47_TO_32__q64,
		x5688_BITS_63_TO_48__q68,
		x5688_BITS_79_TO_64__q71,
		x5688_BITS_95_TO_80__q76;
  wire [7 : 0] cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q10,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q11,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q14,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q15,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q17,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q4,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q6,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q8,
	       cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q20,
	       cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q22,
	       cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q24,
	       cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q26,
	       cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q29,
	       cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q30,
	       cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q32,
	       cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q33,
	       cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q41,
	       cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q42,
	       cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q43,
	       cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q44,
	       cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q45,
	       cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q46,
	       cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q47,
	       cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q48,
	       strobe128__h5405,
	       strobe128__h5409,
	       strobe128__h5413,
	       strobe128__h5417,
	       x5688_BITS_103_TO_96__q78,
	       x5688_BITS_111_TO_104__q82,
	       x5688_BITS_119_TO_112__q80,
	       x5688_BITS_127_TO_120__q84,
	       x5688_BITS_15_TO_8__q59,
	       x5688_BITS_23_TO_16__q60,
	       x5688_BITS_31_TO_24__q61,
	       x5688_BITS_39_TO_32__q63,
	       x5688_BITS_47_TO_40__q66,
	       x5688_BITS_55_TO_48__q67,
	       x5688_BITS_63_TO_56__q69,
	       x5688_BITS_71_TO_64__q70,
	       x5688_BITS_79_TO_72__q72,
	       x5688_BITS_7_TO_0__q55,
	       x5688_BITS_87_TO_80__q75,
	       x5688_BITS_95_TO_88__q77;
  wire [5 : 0] access_exc_code__h5041, shift_bits__h5333;
  wire [3 : 0] IF_cache_rg_op_41_EQ_0_42_OR_cache_rg_op_41_EQ_ETC___d208,
	       IF_cache_rg_op_41_EQ_1_49_OR_cache_rg_op_41_EQ_ETC___d207,
	       cache_ctr_wr_rsps_pending_inrg_read__4_MINUS_c_ETC___d46,
	       x__h27450;
  wire [1 : 0] _0__q1,
	       cache_ram_word128_set_b_read__96_BITS_129_TO_1_ETC___d597,
	       x__h23641,
	       x__h27365,
	       x__h33223,
	       y__h27433;
  wire IF_cache_rg_op_41_EQ_1_49_OR_cache_rg_op_41_EQ_ETC___d172,
       IF_cache_rg_width_code_36_EQ_3_45_THEN_IF_cach_ETC___d320,
       NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94,
       NOT_cache_cfg_verbosity_read__2_ULE_2_12___d913,
       NOT_cache_f_reset_reqs_notEmpty__6_76_AND_cach_ETC___d187,
       NOT_cache_f_reset_reqs_notEmpty__6_76_AND_cach_ETC___d978,
       NOT_cache_ram_state_and_ctag_cset_b_read__62_B_ETC___d215,
       NOT_cache_rg_op_41_EQ_0_42_79_AND_NOT_cache_rg_ETC___d202,
       NOT_cache_rg_op_41_EQ_0_42_79_AND_NOT_cache_rg_ETC___d822,
       NOT_cache_rg_op_41_EQ_0_42_79_AND_NOT_cache_rg_ETC___d848,
       NOT_cache_rg_op_41_EQ_0_42_79_AND_NOT_cache_rg_ETC___d858,
       NOT_cache_rg_op_41_EQ_1_49_21_AND_NOT_cache_rg_ETC___d224,
       NOT_cache_rg_op_41_EQ_1_49_21_AND_NOT_cache_rg_ETC___d582,
       NOT_cache_rg_op_41_EQ_1_49_21_AND_NOT_cache_rg_ETC___d815,
       NOT_cache_rg_op_41_EQ_1_49_21_AND_NOT_cache_rg_ETC___d868,
       NOT_cache_rg_op_41_EQ_1_49_21_AND_NOT_cache_rg_ETC___d872,
       NOT_cache_rg_op_41_EQ_1_49_21_AND_NOT_cache_rg_ETC___d877,
       NOT_cache_rg_op_41_EQ_2_43_80_OR_NOT_cache_rg__ETC___d580,
       NOT_cache_rg_op_41_EQ_2_43_80_OR_NOT_cache_rg__ETC___d813,
       NOT_cache_rg_op_41_EQ_2_43_80_OR_NOT_cache_rg__ETC___d846,
       NOT_cache_rg_op_41_EQ_2_43_80_OR_NOT_cache_rg__ETC___d851,
       NOT_cache_rg_op_41_EQ_2_43_80_OR_NOT_cache_rg__ETC___d856,
       NOT_req_width_code_EQ_0b0_311_312_AND_NOT_req__ETC___d1331,
       cache_crg_commit_port1__read__35_AND_cache_soc_ETC___d523,
       cache_crg_commit_port1__read__35_AND_cache_soc_ETC___d836,
       cache_f_reset_reqs_i_notEmpty__5_AND_cache_f_r_ETC___d117,
       cache_ram_state_and_ctag_cset_b_read__62_BITS__ETC___d168,
       cache_ram_state_and_ctag_cset_b_read__62_BIT_2_ETC___d216,
       cache_rg_addr_37_EQ_cache_rg_lrsc_pa_55___d213,
       cache_rg_amo_funct7_44_BITS_6_TO_2_45_EQ_0b10__ETC___d530,
       cache_rg_lrsc_pa_55_EQ_cache_rg_addr_37___d156,
       cache_rg_op_41_EQ_0_42_OR_cache_rg_op_41_EQ_2__ETC___d197,
       cache_rg_op_41_EQ_0_42_OR_cache_rg_op_41_EQ_2__ETC___d205,
       cache_rg_op_41_EQ_0_42_OR_cache_rg_op_41_EQ_2__ETC___d227,
       cache_rg_op_41_EQ_0_42_OR_cache_rg_op_41_EQ_2__ETC___d233,
       cache_rg_op_41_EQ_0_42_OR_cache_rg_op_41_EQ_2__ETC___d322,
       cache_rg_op_41_EQ_0_42_OR_cache_rg_op_41_EQ_2__ETC___d509,
       cache_rg_op_41_EQ_0_42_OR_cache_rg_op_41_EQ_2__ETC___d525,
       cache_rg_op_41_EQ_1_49_OR_cache_rg_op_41_EQ_2__ETC___d225,
       cache_rg_op_41_EQ_1_49_OR_cache_rg_op_41_EQ_2__ETC___d583,
       cache_rg_op_41_EQ_1_49_OR_cache_rg_op_41_EQ_2__ETC___d816,
       cache_rg_op_41_EQ_1_49_OR_cache_rg_op_41_EQ_2__ETC___d820,
       cache_rg_op_41_EQ_2_43_AND_cache_rg_amo_funct7_ETC___d863,
       cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d537,
       cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d585,
       cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d874,
       cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d882,
       lrsc_result__h22890,
       mem_req_wr_data_wuser__h5537,
       req_width_code_EQ_0b0_311_OR_req_width_code_EQ_ETC___d1347,
       req_width_code_EQ_0b0_311_OR_req_width_code_EQ_ETC___d1352;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = cache_f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = cache_f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get =
	     !cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get =
	     !cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // action method req
  assign CAN_FIRE_req = 1'd1 ;
  assign WILL_FIRE_req = EN_req ;

  // action method commit
  assign CAN_FIRE_commit = 1'd1 ;
  assign WILL_FIRE_commit = EN_commit ;

  // value method valid
  assign valid = cache_dw_valid$whas ;

  // value method addr
  assign addr = cache_rg_addr ;

  // value method word128_fst
  assign word128_fst = cache_dw_output_ld_val$wget[128] ;

  // value method word128_snd
  assign word128_snd = cache_dw_output_ld_val$wget[127:0] ;

  // value method st_amo_val_fst
  assign st_amo_val_fst = cache_dw_output_st_amo_val$wget[128] ;

  // value method st_amo_val_snd
  assign st_amo_val_snd = cache_dw_output_st_amo_val$wget[127:0] ;

  // value method exc
  assign exc = CAN_FIRE_RL_cache_rl_drive_exception_rsp ;

  // value method exc_code
  assign exc_code = cache_rg_exc_code ;

  // action method server_flush_request_put
  assign RDY_server_flush_request_put = !EN_req && cache_f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_flush_request_put =
	     !EN_req && cache_f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_flush_request_put = EN_server_flush_request_put ;

  // action method server_flush_response_get
  assign RDY_server_flush_response_get =
	     cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_flush_response_get =
	     cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_flush_response_get = EN_server_flush_response_get ;

  // action method tlb_flush
  assign RDY_tlb_flush = !EN_req ;
  assign CAN_FIRE_tlb_flush = !EN_req ;
  assign WILL_FIRE_tlb_flush = EN_tlb_flush ;

  // value method mem_master_aw_awid
  assign mem_master_awid =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q3[96:93] ;

  // value method mem_master_aw_awaddr
  assign mem_master_awaddr =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q3[92:29] ;

  // value method mem_master_aw_awlen
  assign mem_master_awlen =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q3[28:21] ;

  // value method mem_master_aw_awsize
  assign mem_master_awsize =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q3[20:18] ;

  // value method mem_master_aw_awburst
  assign mem_master_awburst =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q3[17:16] ;

  // value method mem_master_aw_awlock
  assign mem_master_awlock =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q3[15] ;

  // value method mem_master_aw_awcache
  assign mem_master_awcache =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q3[14:11] ;

  // value method mem_master_aw_awprot
  assign mem_master_awprot =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q3[10:8] ;

  // value method mem_master_aw_awqos
  assign mem_master_awqos =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q3[7:4] ;

  // value method mem_master_aw_awregion
  assign mem_master_awregion =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q3[3:0] ;

  // value method mem_master_aw_awvalid
  assign mem_master_awvalid =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek ;

  // action method mem_master_aw_awready
  assign CAN_FIRE_mem_master_aw_awready = 1'd1 ;
  assign WILL_FIRE_mem_master_aw_awready = 1'd1 ;

  // value method mem_master_w_wdata
  assign mem_master_wdata =
	     cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q18[73:10] ;

  // value method mem_master_w_wstrb
  assign mem_master_wstrb =
	     cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q18[9:2] ;

  // value method mem_master_w_wlast
  assign mem_master_wlast =
	     cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q18[1] ;

  // value method mem_master_w_wuser
  assign mem_master_wuser =
	     cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q18[0] ;

  // value method mem_master_w_wvalid
  assign mem_master_wvalid =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek ;

  // action method mem_master_w_wready
  assign CAN_FIRE_mem_master_w_wready = 1'd1 ;
  assign WILL_FIRE_mem_master_w_wready = 1'd1 ;

  // action method mem_master_b_bflit
  assign CAN_FIRE_mem_master_b_bflit = 1'd1 ;
  assign WILL_FIRE_mem_master_b_bflit = mem_master_bvalid ;

  // value method mem_master_b_bready
  assign mem_master_bready = !cache_master_xactor_shim_bff_rv[6] ;

  // value method mem_master_ar_arid
  assign mem_master_arid =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q53[96:93] ;

  // value method mem_master_ar_araddr
  assign mem_master_araddr =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q53[92:29] ;

  // value method mem_master_ar_arlen
  assign mem_master_arlen =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q53[28:21] ;

  // value method mem_master_ar_arsize
  assign mem_master_arsize =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q53[20:18] ;

  // value method mem_master_ar_arburst
  assign mem_master_arburst =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q53[17:16] ;

  // value method mem_master_ar_arlock
  assign mem_master_arlock =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q53[15] ;

  // value method mem_master_ar_arcache
  assign mem_master_arcache =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q53[14:11] ;

  // value method mem_master_ar_arprot
  assign mem_master_arprot =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q53[10:8] ;

  // value method mem_master_ar_arqos
  assign mem_master_arqos =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q53[7:4] ;

  // value method mem_master_ar_arregion
  assign mem_master_arregion =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q53[3:0] ;

  // value method mem_master_ar_arvalid
  assign mem_master_arvalid =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek ;

  // action method mem_master_ar_arready
  assign CAN_FIRE_mem_master_ar_arready = 1'd1 ;
  assign WILL_FIRE_mem_master_ar_arready = 1'd1 ;

  // action method mem_master_r_rflit
  assign CAN_FIRE_mem_master_r_rflit = 1'd1 ;
  assign WILL_FIRE_mem_master_r_rflit = mem_master_rvalid ;

  // value method mem_master_r_rready
  assign mem_master_rready = !cache_master_xactor_shim_rff_rv[72] ;

  // submodule cache_f_fabric_write_reqs
  FIFO2 #(.width(32'd164),
	  .guarded(32'd1)) cache_f_fabric_write_reqs(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(cache_f_fabric_write_reqs$D_IN),
						     .ENQ(cache_f_fabric_write_reqs$ENQ),
						     .DEQ(cache_f_fabric_write_reqs$DEQ),
						     .CLR(cache_f_fabric_write_reqs$CLR),
						     .D_OUT(cache_f_fabric_write_reqs$D_OUT),
						     .FULL_N(cache_f_fabric_write_reqs$FULL_N),
						     .EMPTY_N(cache_f_fabric_write_reqs$EMPTY_N));

  // submodule cache_f_reset_reqs
  FIFO2 #(.width(32'd1), .guarded(32'd1)) cache_f_reset_reqs(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(cache_f_reset_reqs$D_IN),
							     .ENQ(cache_f_reset_reqs$ENQ),
							     .DEQ(cache_f_reset_reqs$DEQ),
							     .CLR(cache_f_reset_reqs$CLR),
							     .D_OUT(cache_f_reset_reqs$D_OUT),
							     .FULL_N(cache_f_reset_reqs$FULL_N),
							     .EMPTY_N(cache_f_reset_reqs$EMPTY_N));

  // submodule cache_f_reset_rsps
  FIFO2 #(.width(32'd1), .guarded(32'd1)) cache_f_reset_rsps(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(cache_f_reset_rsps$D_IN),
							     .ENQ(cache_f_reset_rsps$ENQ),
							     .DEQ(cache_f_reset_rsps$DEQ),
							     .CLR(cache_f_reset_rsps$CLR),
							     .D_OUT(cache_f_reset_rsps$D_OUT),
							     .FULL_N(cache_f_reset_rsps$FULL_N),
							     .EMPTY_N(cache_f_reset_rsps$EMPTY_N));

  // submodule cache_ram_state_and_ctag_cset
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd23),
	  .MEMSIZE(8'd128)) cache_ram_state_and_ctag_cset(.CLKA(CLK),
							  .CLKB(CLK),
							  .ADDRA(cache_ram_state_and_ctag_cset$ADDRA),
							  .ADDRB(cache_ram_state_and_ctag_cset$ADDRB),
							  .DIA(cache_ram_state_and_ctag_cset$DIA),
							  .DIB(cache_ram_state_and_ctag_cset$DIB),
							  .WEA(cache_ram_state_and_ctag_cset$WEA),
							  .WEB(cache_ram_state_and_ctag_cset$WEB),
							  .ENA(cache_ram_state_and_ctag_cset$ENA),
							  .ENB(cache_ram_state_and_ctag_cset$ENB),
							  .DOA(),
							  .DOB(cache_ram_state_and_ctag_cset$DOB));

  // submodule cache_ram_word128_set
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd8),
	  .DATA_WIDTH(32'd130),
	  .MEMSIZE(9'd256)) cache_ram_word128_set(.CLKA(CLK),
						  .CLKB(CLK),
						  .ADDRA(cache_ram_word128_set$ADDRA),
						  .ADDRB(cache_ram_word128_set$ADDRB),
						  .DIA(cache_ram_word128_set$DIA),
						  .DIB(cache_ram_word128_set$DIB),
						  .WEA(cache_ram_word128_set$WEA),
						  .WEB(cache_ram_word128_set$WEB),
						  .ENA(cache_ram_word128_set$ENA),
						  .ENB(cache_ram_word128_set$ENB),
						  .DOA(),
						  .DOB(cache_ram_word128_set$DOB));

  // submodule cache_soc_map
  mkSoC_Map cache_soc_map(.CLK(CLK),
			  .RST_N(RST_N),
			  .m_is_IO_addr_addr(cache_soc_map$m_is_IO_addr_addr),
			  .m_is_mem_addr_addr(cache_soc_map$m_is_mem_addr_addr),
			  .m_is_near_mem_IO_addr_addr(cache_soc_map$m_is_near_mem_IO_addr_addr),
			  .m_plic_addr_range(),
			  .m_near_mem_io_addr_range(),
			  .m_ethernet_0_addr_range(),
			  .m_dma_0_addr_range(),
			  .m_uart16550_0_addr_range(),
			  .m_uart16550_1_addr_range(),
			  .m_iic_0_addr_range(),
			  .m_axi_quad_spi_0_full_addr_range(),
			  .m_axi_quad_spi_0_lite_addr_range(),
			  .m_axi_quad_spi_1_addr_range(),
			  .m_gpio_0_addr_range(),
			  .m_gpio_1_addr_range(),
			  .m_boot_rom_addr_range(),
			  .m_ddr4_0_uncached_addr_range(),
			  .m_ddr4_0_cached_addr_range(),
			  .m_is_mem_addr(cache_soc_map$m_is_mem_addr),
			  .m_is_IO_addr(),
			  .m_is_near_mem_IO_addr(),
			  .m_pc_reset_value(),
			  .m_pcc_reset_value(),
			  .m_ddc_reset_value(),
			  .m_mtcc_reset_value(),
			  .m_mepcc_reset_value(),
			  .m_mtvec_reset_value(),
			  .m_nmivec_reset_value());

  // rule RL_cache_rl_fabric_send_write_req
  assign CAN_FIRE_RL_cache_rl_fabric_send_write_req =
	     !cache_master_xactor_clearing &&
	     cache_ctr_wr_rsps_pending_inrg_read__4_MINUS_c_ETC___d46 !=
	     4'd15 &&
	     cache_f_fabric_write_reqs$EMPTY_N &&
	     !cache_master_xactor_shim_awff_rv[97] &&
	     !cache_master_xactor_shim_wff_rv[74] ;
  assign WILL_FIRE_RL_cache_rl_fabric_send_write_req =
	     CAN_FIRE_RL_cache_rl_fabric_send_write_req ;

  // rule RL_cache_rl_reset
  assign CAN_FIRE_RL_cache_rl_reset =
	     cache_f_reset_reqs_i_notEmpty__5_AND_cache_f_r_ETC___d117 &&
	     cache_rg_state == 4'd1 ;
  assign WILL_FIRE_RL_cache_rl_reset = CAN_FIRE_RL_cache_rl_reset ;

  // rule RL_cache_rl_shift_sb_to_load_delay
  assign CAN_FIRE_RL_cache_rl_shift_sb_to_load_delay = 1'd1 ;
  assign WILL_FIRE_RL_cache_rl_shift_sb_to_load_delay = 1'd1 ;

  // rule RL_cache_rl_probe_and_immed_rsp
  assign CAN_FIRE_RL_cache_rl_probe_and_immed_rsp =
	     (!cache_crg_commit$port1__read || !cache_soc_map$m_is_mem_addr ||
	      cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010 ||
	      IF_cache_rg_op_41_EQ_1_49_OR_cache_rg_op_41_EQ_ETC___d172) &&
	     NOT_cache_f_reset_reqs_notEmpty__6_76_AND_cach_ETC___d187 ;
  assign WILL_FIRE_RL_cache_rl_probe_and_immed_rsp =
	     CAN_FIRE_RL_cache_rl_probe_and_immed_rsp ;

  // rule RL_cache_rl_ST_AMO_response
  assign CAN_FIRE_RL_cache_rl_ST_AMO_response = cache_rg_state == 4'd11 ;
  assign WILL_FIRE_RL_cache_rl_ST_AMO_response =
	     CAN_FIRE_RL_cache_rl_ST_AMO_response ;

  // rule RL_cache_rl_start_reset
  assign CAN_FIRE_RL_cache_rl_start_reset =
	     cache_f_reset_reqs$EMPTY_N && cache_rg_state != 4'd1 ;
  assign WILL_FIRE_RL_cache_rl_start_reset =
	     CAN_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_io_read_req
  assign CAN_FIRE_RL_cache_rl_io_read_req =
	     !cache_master_xactor_clearing &&
	     !cache_master_xactor_shim_arff_rv[97] &&
	     NOT_cache_f_reset_reqs_notEmpty__6_76_AND_cach_ETC___d978 &&
	     cache_ctr_wr_rsps_pending_inrg_read__4_MINUS_c_ETC___d46 ==
	     4'd0 ;
  assign WILL_FIRE_RL_cache_rl_io_read_req =
	     CAN_FIRE_RL_cache_rl_io_read_req ;

  // rule RL_cache_rl_maintain_io_read_rsp
  assign CAN_FIRE_RL_cache_rl_maintain_io_read_rsp =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_state == 4'd14 ;
  assign WILL_FIRE_RL_cache_rl_maintain_io_read_rsp =
	     CAN_FIRE_RL_cache_rl_maintain_io_read_rsp ;

  // rule RL_cache_rl_io_write_req
  assign CAN_FIRE_RL_cache_rl_io_write_req =
	     cache_f_fabric_write_reqs$FULL_N &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 4'd12 &&
	     cache_rg_op == 2'd1 ;
  assign WILL_FIRE_RL_cache_rl_io_write_req =
	     CAN_FIRE_RL_cache_rl_io_write_req ;

  // rule RL_cache_rl_io_AMO_SC_req
  assign CAN_FIRE_RL_cache_rl_io_AMO_SC_req =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_state == 4'd12 &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00011 ;
  assign WILL_FIRE_RL_cache_rl_io_AMO_SC_req =
	     CAN_FIRE_RL_cache_rl_io_AMO_SC_req ;

  // rule RL_cache_rl_io_AMO_op_req
  assign CAN_FIRE_RL_cache_rl_io_AMO_op_req =
	     !cache_master_xactor_clearing &&
	     !cache_master_xactor_shim_arff_rv[97] &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 4'd12 &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] != 5'b00010 &&
	     cache_rg_amo_funct7[6:2] != 5'b00011 ;
  assign WILL_FIRE_RL_cache_rl_io_AMO_op_req =
	     CAN_FIRE_RL_cache_rl_io_AMO_op_req ;

  // rule RL_cache_rl_drive_exception_rsp
  assign CAN_FIRE_RL_cache_rl_drive_exception_rsp =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_state == 4'd4 ;
  assign WILL_FIRE_RL_cache_rl_drive_exception_rsp =
	     CAN_FIRE_RL_cache_rl_drive_exception_rsp ;

  // rule RL_cache_master_xactor_ug_master_u_aw_setPeek
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek =
	     cache_master_xactor_shim_awff_rv$port1__read[97] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek ;

  // rule RL_cache_master_xactor_ug_master_u_aw_warnDoDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop =
	     cache_master_xactor_ug_master_u_aw_dropWire$whas &&
	     !cache_master_xactor_shim_awff_rv$port1__read[97] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop ;

  // rule RL_cache_master_xactor_ug_master_u_aw_doDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop =
	     cache_master_xactor_shim_awff_rv$port1__read[97] &&
	     cache_master_xactor_ug_master_u_aw_dropWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop ;

  // rule RL_cache_master_xactor_ug_master_u_w_setPeek
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek =
	     cache_master_xactor_shim_wff_rv$port1__read[74] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek ;

  // rule RL_cache_master_xactor_ug_master_u_w_warnDoDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop =
	     cache_master_xactor_ug_master_u_w_dropWire$whas &&
	     !cache_master_xactor_shim_wff_rv$port1__read[74] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop ;

  // rule RL_cache_master_xactor_ug_master_u_w_doDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop =
	     cache_master_xactor_shim_wff_rv$port1__read[74] &&
	     cache_master_xactor_ug_master_u_w_dropWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop ;

  // rule RL_cache_master_xactor_ug_master_u_b_warnDoPut
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut =
	     cache_master_xactor_ug_master_u_b_putWire$whas &&
	     cache_master_xactor_shim_bff_rv[6] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut ;

  // rule RL_cache_master_xactor_ug_master_u_b_doPut
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut =
	     !cache_master_xactor_shim_bff_rv[6] &&
	     cache_master_xactor_ug_master_u_b_putWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut ;

  // rule RL_cache_rl_discard_write_rsp
  assign CAN_FIRE_RL_cache_rl_discard_write_rsp =
	     !cache_master_xactor_clearing &&
	     cache_master_xactor_shim_bff_rv$port1__read[6] ;
  assign WILL_FIRE_RL_cache_rl_discard_write_rsp =
	     CAN_FIRE_RL_cache_rl_discard_write_rsp ;

  // rule RL_cache_master_xactor_ug_master_u_r_warnDoPut
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut =
	     cache_master_xactor_ug_master_u_r_putWire$whas &&
	     cache_master_xactor_shim_rff_rv[72] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut ;

  // rule RL_cache_master_xactor_ug_master_u_r_doPut
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut =
	     !cache_master_xactor_shim_rff_rv[72] &&
	     cache_master_xactor_ug_master_u_r_putWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut ;

  // rule RL_cache_rl_io_read_rsp
  assign CAN_FIRE_RL_cache_rl_io_read_rsp =
	     !cache_master_xactor_clearing &&
	     cache_master_xactor_shim_rff_rv$port1__read[72] &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 4'd13 ;
  assign WILL_FIRE_RL_cache_rl_io_read_rsp =
	     CAN_FIRE_RL_cache_rl_io_read_rsp ;

  // rule RL_cache_rl_io_AMO_read_rsp
  assign CAN_FIRE_RL_cache_rl_io_AMO_read_rsp =
	     !cache_master_xactor_clearing &&
	     cache_master_xactor_shim_rff_rv$port1__read[72] &&
	     (cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 ||
	      cache_f_fabric_write_reqs$FULL_N) &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 4'd15 ;
  assign WILL_FIRE_RL_cache_rl_io_AMO_read_rsp =
	     CAN_FIRE_RL_cache_rl_io_AMO_read_rsp ;

  // rule RL_cache_rl_start_cache_refill
  assign CAN_FIRE_RL_cache_rl_start_cache_refill =
	     !cache_master_xactor_clearing &&
	     !cache_master_xactor_shim_arff_rv[97] &&
	     !EN_req &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 4'd8 &&
	     cache_ctr_wr_rsps_pending_inrg_read__4_MINUS_c_ETC___d46 ==
	     4'd0 ;
  assign WILL_FIRE_RL_cache_rl_start_cache_refill =
	     CAN_FIRE_RL_cache_rl_start_cache_refill && !EN_req ;

  // rule RL_cache_rl_cache_refill_rsps_loop
  assign CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop =
	     !cache_master_xactor_clearing &&
	     cache_master_xactor_shim_rff_rv$port1__read[72] &&
	     !EN_req &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 4'd9 ;
  assign WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop =
	     CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop && !EN_req ;

  // rule RL_cache_rl_rereq
  assign CAN_FIRE_RL_cache_rl_rereq =
	     !EN_req && !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 4'd10 ;
  assign WILL_FIRE_RL_cache_rl_rereq = CAN_FIRE_RL_cache_rl_rereq && !EN_req ;

  // rule RL_cache_master_xactor_ug_master_u_ar_setPeek
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek =
	     cache_master_xactor_shim_arff_rv$port1__read[97] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek ;

  // rule RL_cache_master_xactor_ug_master_u_ar_warnDoDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop =
	     cache_master_xactor_ug_master_u_ar_dropWire$whas &&
	     !cache_master_xactor_shim_arff_rv$port1__read[97] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop ;

  // rule RL_cache_master_xactor_ug_master_u_ar_doDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop =
	     cache_master_xactor_shim_arff_rv$port1__read[97] &&
	     cache_master_xactor_ug_master_u_ar_dropWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop ;

  // rule RL_cache_master_xactor_do_clear
  assign CAN_FIRE_RL_cache_master_xactor_do_clear =
	     cache_master_xactor_clearing ;
  assign WILL_FIRE_RL_cache_master_xactor_do_clear =
	     cache_master_xactor_clearing ;

  // inputs to muxes for submodule ports
  assign MUX_cache_dw_output_ld_val$wset_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 ;
  assign MUX_cache_dw_output_ld_val$wset_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 ;
  assign MUX_cache_dw_output_ld_val$wset_1__SEL_3 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_crg_commit$port1__read &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op_41_EQ_0_42_OR_cache_rg_op_41_EQ_2__ETC___d233 ;
  assign MUX_cache_dw_output_ld_val$wset_1__SEL_4 =
	     WILL_FIRE_RL_cache_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_ST_AMO_response ;
  assign MUX_cache_f_fabric_write_reqs$enq_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_crg_commit$port1__read &&
	     cache_soc_map$m_is_mem_addr &&
	     NOT_cache_rg_op_41_EQ_0_42_79_AND_NOT_cache_rg_ETC___d822 ;
  assign MUX_cache_master_xactor_shim_arff_rv$port0__write_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_io_AMO_op_req ||
	     WILL_FIRE_RL_cache_rl_io_read_req ;
  assign MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     !cache_rg_word128_set_in_cache[0] &&
	     cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 ;
  assign MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 =
	     EN_req &&
	     (req_width_code_EQ_0b0_311_OR_req_width_code_EQ_ETC___d1347 ||
	      req_width_code == 3'b100 && req_addr[3:0] == 4'b0) ;
  assign MUX_cache_ram_word128_set$a_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_crg_commit$port1__read &&
	     cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d585 ;
  assign MUX_cache_ram_word128_set$b_put_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     !cache_rg_word128_set_in_cache[0] ;
  assign MUX_cache_rg_error_during_refill$write_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 ;
  assign MUX_cache_rg_exc_code$write_1__SEL_2 =
	     EN_req &&
	     NOT_req_width_code_EQ_0b0_311_312_AND_NOT_req__ETC___d1331 &&
	     (req_width_code != 3'b100 || req_addr[3:0] != 4'b0) ;
  assign MUX_cache_rg_exc_code$write_1__SEL_3 =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 ;
  assign MUX_cache_rg_exc_code$write_1__SEL_4 =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 ;
  assign MUX_cache_rg_exc_code$write_1__SEL_5 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     !cache_crg_commit$port1__read ;
  assign MUX_cache_rg_ld_val$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_crg_commit$port1__read &&
	     cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d537 ;
  assign MUX_cache_rg_lrsc_valid$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_crg_commit$port1__read &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op_41_EQ_0_42_OR_cache_rg_op_41_EQ_2__ETC___d227 ;
  assign MUX_cache_rg_state$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_rg_word128_set_in_cache[0] ;
  assign MUX_cache_rg_state$write_1__SEL_12 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_rg_op_41_EQ_0_42_OR_cache_rg_op_41_EQ_2__ETC___d205 ;
  assign MUX_cache_rg_state$write_1__SEL_13 =
	     WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 7'd127 ;
  assign MUX_cache_ctr_wr_rsps_pending_outrg$write_1__VAL_1 =
	     cache_ctr_wr_rsps_pending_outrg + 4'd1 ;
  assign MUX_cache_dw_output_ld_val$wset_1__VAL_1 = { 1'd0, x__h35688 } ;
  assign MUX_cache_dw_output_ld_val$wset_1__VAL_2 =
	     { 65'd0,
	       IF_cache_rg_width_code_36_EQ_2_41_THEN_SEXT_IF_ETC___d1222 } ;
  assign MUX_cache_dw_output_ld_val$wset_1__VAL_3 =
	     { cache_rg_op_41_EQ_0_42_OR_cache_rg_op_41_EQ_2__ETC___d322,
	       IF_cache_rg_op_41_EQ_0_42_OR_cache_rg_op_41_EQ_ETC___d499 } ;
  assign MUX_cache_dw_output_st_amo_val$wset_1__VAL_1 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) ?
	       { _0__q1[IF_cache_rg_addr_BITS_4_TO_0_EQ_0_THEN_1_ELSE_0__q2[0]],
		 128'd0 } :
	       129'd0 ;
  assign MUX_cache_f_fabric_write_reqs$enq_1__VAL_1 =
	     { cache_rg_width_code, cache_rg_pa, 65'd0, x__h37681 } ;
  assign MUX_cache_f_fabric_write_reqs$enq_1__VAL_2 =
	     { cache_rg_width_code,
	       cache_rg_addr,
	       IF_cache_rg_op_41_EQ_1_49_OR_cache_rg_op_41_EQ_ETC___d826 } ;
  assign MUX_cache_f_fabric_write_reqs$enq_1__VAL_3 =
	     { cache_rg_width_code, cache_rg_pa, cache_rg_st_amo_val } ;
  assign MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_1 =
	     { 5'd16,
	       fabric_addr__h37049,
	       8'd0,
	       size_val__h37134,
	       18'd65536 } ;
  assign MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_2 =
	     { 5'd16, cline_fabric_addr__h31811, 29'd7143424 } ;
  assign MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1 =
	     { 3'd4, cache_rg_pa[31:12] } ;
  assign MUX_cache_ram_word128_set$a_put_3__VAL_1 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       { x__h23641, x__h23770 } :
	       { cache_ram_word128_set_b_read__96_BITS_129_TO_1_ETC___d597,
		 x__h27470 } ;
  assign MUX_cache_ram_word128_set$a_put_3__VAL_2 = { x__h33223, x__h33228 } ;
  assign MUX_cache_ram_word128_set$b_put_2__VAL_2 =
	     cache_rg_word128_set_in_cache + 8'd1 ;
  assign MUX_cache_ram_word128_set$b_put_2__VAL_4 =
	     { cache_rg_addr[11:5], 1'd0 } ;
  assign MUX_cache_rg_cset_in_cache$write_1__VAL_1 =
	     cache_rg_cset_in_cache + 7'd1 ;
  assign MUX_cache_rg_exc_code$write_1__VAL_1 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) ?
	       6'd5 :
	       6'd7 ;
  assign MUX_cache_rg_exc_code$write_1__VAL_2 =
	     (req_op == 2'd0) ? 6'd4 : 6'd6 ;
  assign MUX_cache_rg_ld_val$write_1__VAL_2 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       { 128'd0, lrsc_result__h22890 } :
	       { 65'd0,
		 IF_cache_rg_width_code_36_EQ_2_41_THEN_SEXT_IF_ETC___d577 } ;
  assign MUX_cache_rg_lrsc_valid$write_1__VAL_2 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__62_BITS__ETC___d168 ;
  assign MUX_cache_rg_st_amo_val$write_1__VAL_2 = { 65'd0, x__h27561 } ;
  assign MUX_cache_rg_state$write_1__VAL_2 =
	     (cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 ||
	      cache_rg_error_during_refill) ?
	       4'd4 :
	       4'd10 ;
  assign MUX_cache_rg_state$write_1__VAL_4 =
	     (NOT_req_width_code_EQ_0b0_311_312_AND_NOT_req__ETC___d1331 &&
	      (req_width_code != 3'b100 || req_addr[3:0] != 4'b0)) ?
	       4'd4 :
	       4'd3 ;
  assign MUX_cache_rg_state$write_1__VAL_5 =
	     (cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0) ?
	       4'd14 :
	       4'd4 ;
  assign MUX_cache_rg_state$write_1__VAL_12 =
	     cache_crg_commit$port1__read ?
	       (cache_soc_map$m_is_mem_addr ?
		  IF_cache_rg_op_41_EQ_0_42_OR_cache_rg_op_41_EQ_ETC___d208 :
		  4'd12) :
	       4'd4 ;

  // inlined wires
  assign cache_master_xactor_ug_master_u_b_putWire$wget =
	     { mem_master_bid, mem_master_bresp } ;
  assign cache_master_xactor_ug_master_u_b_putWire$whas =
	     mem_master_bvalid && !cache_master_xactor_shim_bff_rv[6] ;
  assign cache_master_xactor_ug_master_u_r_putWire$wget =
	     { mem_master_rid,
	       mem_master_rdata,
	       mem_master_rresp,
	       mem_master_rlast,
	       mem_master_ruser } ;
  assign cache_master_xactor_ug_master_u_r_putWire$whas =
	     mem_master_rvalid && !cache_master_xactor_shim_rff_rv[72] ;
  assign cache_dw_valid$whas =
	     (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp ||
	      WILL_FIRE_RL_cache_rl_io_read_rsp) &&
	     cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_crg_commit$port1__read &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op_41_EQ_0_42_OR_cache_rg_op_41_EQ_2__ETC___d233 ||
	     WILL_FIRE_RL_cache_rl_drive_exception_rsp ||
	     WILL_FIRE_RL_cache_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_ST_AMO_response ;
  always@(MUX_cache_dw_output_ld_val$wset_1__SEL_1 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_1 or
	  MUX_cache_dw_output_ld_val$wset_1__SEL_2 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_2 or
	  MUX_cache_dw_output_ld_val$wset_1__SEL_3 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_3 or
	  MUX_cache_dw_output_ld_val$wset_1__SEL_4 or cache_rg_ld_val)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_dw_output_ld_val$wset_1__SEL_1:
	  cache_dw_output_ld_val$wget =
	      MUX_cache_dw_output_ld_val$wset_1__VAL_1;
      MUX_cache_dw_output_ld_val$wset_1__SEL_2:
	  cache_dw_output_ld_val$wget =
	      MUX_cache_dw_output_ld_val$wset_1__VAL_2;
      MUX_cache_dw_output_ld_val$wset_1__SEL_3:
	  cache_dw_output_ld_val$wget =
	      MUX_cache_dw_output_ld_val$wset_1__VAL_3;
      MUX_cache_dw_output_ld_val$wset_1__SEL_4:
	  cache_dw_output_ld_val$wget = cache_rg_ld_val;
      default: cache_dw_output_ld_val$wget =
		   129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_dw_output_st_amo_val$wget =
	     MUX_cache_dw_output_ld_val$wset_1__SEL_3 ?
	       MUX_cache_dw_output_st_amo_val$wset_1__VAL_1 :
	       cache_rg_st_amo_val ;
  assign cache_master_xactor_ug_master_u_aw_dropWire$whas =
	     cache_master_xactor_shim_awff_rv$port1__read[97] &&
	     mem_master_awready ;
  assign cache_master_xactor_ug_master_u_w_dropWire$whas =
	     cache_master_xactor_shim_wff_rv$port1__read[74] &&
	     mem_master_wready ;
  assign cache_master_xactor_ug_master_u_ar_dropWire$whas =
	     cache_master_xactor_shim_arff_rv$port1__read[97] &&
	     mem_master_arready ;
  assign cache_crg_commit$port1__read = EN_commit || cache_crg_commit ;
  assign cache_crg_commit$port3__read =
	     !EN_req && cache_crg_commit$port1__read ;
  assign cache_master_xactor_shim_awff_rv$port0__write_1 =
	     { 5'd16,
	       mem_req_wr_addr_awaddr__h5317,
	       8'd0,
	       _theResult___snd_fst_val__h5423,
	       18'd65536 } ;
  assign cache_master_xactor_shim_awff_rv$port1__read =
	     CAN_FIRE_RL_cache_rl_fabric_send_write_req ?
	       cache_master_xactor_shim_awff_rv$port0__write_1 :
	       cache_master_xactor_shim_awff_rv ;
  assign cache_master_xactor_shim_awff_rv$port2__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop ?
	       98'h0AAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_awff_rv$port1__read ;
  assign cache_master_xactor_shim_awff_rv$port3__read =
	     cache_master_xactor_clearing ?
	       98'h0AAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_awff_rv$port2__read ;
  assign cache_master_xactor_shim_wff_rv$port0__write_1 =
	     { 1'd1,
	       mem_req_wr_data_wdata__h5534,
	       mem_req_wr_data_wstrb__h5535,
	       1'd1,
	       mem_req_wr_data_wuser__h5537 } ;
  assign cache_master_xactor_shim_wff_rv$port1__read =
	     CAN_FIRE_RL_cache_rl_fabric_send_write_req ?
	       cache_master_xactor_shim_wff_rv$port0__write_1 :
	       cache_master_xactor_shim_wff_rv ;
  assign cache_master_xactor_shim_wff_rv$port2__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop ?
	       75'h2AAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_wff_rv$port1__read ;
  assign cache_master_xactor_shim_wff_rv$port3__read =
	     cache_master_xactor_clearing ?
	       75'h2AAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_wff_rv$port2__read ;
  assign cache_master_xactor_shim_bff_rv$port0__write_1 =
	     { 1'd1, cache_master_xactor_ug_master_u_b_putWire$wget } ;
  assign cache_master_xactor_shim_bff_rv$port1__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut ?
	       cache_master_xactor_shim_bff_rv$port0__write_1 :
	       cache_master_xactor_shim_bff_rv ;
  assign cache_master_xactor_shim_bff_rv$port2__read =
	     CAN_FIRE_RL_cache_rl_discard_write_rsp ?
	       7'd42 :
	       cache_master_xactor_shim_bff_rv$port1__read ;
  assign cache_master_xactor_shim_bff_rv$port3__read =
	     cache_master_xactor_clearing ?
	       7'd42 :
	       cache_master_xactor_shim_bff_rv$port2__read ;
  assign cache_master_xactor_shim_arff_rv$EN_port0__write =
	     WILL_FIRE_RL_cache_rl_io_AMO_op_req ||
	     WILL_FIRE_RL_cache_rl_io_read_req ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;
  assign cache_master_xactor_shim_arff_rv$port0__write_1 =
	     MUX_cache_master_xactor_shim_arff_rv$port0__write_1__SEL_1 ?
	       MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_1 :
	       MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_2 ;
  assign cache_master_xactor_shim_arff_rv$port1__read =
	     cache_master_xactor_shim_arff_rv$EN_port0__write ?
	       cache_master_xactor_shim_arff_rv$port0__write_1 :
	       cache_master_xactor_shim_arff_rv ;
  assign cache_master_xactor_shim_arff_rv$port2__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop ?
	       98'h0AAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_arff_rv$port1__read ;
  assign cache_master_xactor_shim_arff_rv$port3__read =
	     cache_master_xactor_clearing ?
	       98'h0AAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_arff_rv$port2__read ;
  assign cache_master_xactor_shim_rff_rv$port0__write_1 =
	     { 1'd1, cache_master_xactor_ug_master_u_r_putWire$wget } ;
  assign cache_master_xactor_shim_rff_rv$port1__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut ?
	       cache_master_xactor_shim_rff_rv$port0__write_1 :
	       cache_master_xactor_shim_rff_rv ;
  assign cache_master_xactor_shim_rff_rv$EN_port1__write =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop ;
  assign cache_master_xactor_shim_rff_rv$port2__read =
	     cache_master_xactor_shim_rff_rv$EN_port1__write ?
	       73'h0AAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_rff_rv$port1__read ;
  assign cache_master_xactor_shim_rff_rv$port3__read =
	     cache_master_xactor_clearing ?
	       73'h0AAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_rff_rv$port2__read ;
  assign cache_crg_sb_to_load_delay$port0__write_1 =
	     { 1'd0, cache_crg_sb_to_load_delay[10:1] } ;
  assign cache_crg_sb_to_load_delay$EN_port1__write =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_crg_commit$port1__read &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     cache_rg_op_41_EQ_1_49_OR_cache_rg_op_41_EQ_2__ETC___d816 ;
  assign cache_crg_sb_to_load_delay$port2__read =
	     cache_crg_sb_to_load_delay$EN_port1__write ?
	       11'd2047 :
	       cache_crg_sb_to_load_delay$port0__write_1 ;

  // register cache_cfg_verbosity
  assign cache_cfg_verbosity$D_IN = set_verbosity_verbosity ;
  assign cache_cfg_verbosity$EN = EN_set_verbosity ;

  // register cache_crg_commit
  assign cache_crg_commit$D_IN = cache_crg_commit$port3__read ;
  assign cache_crg_commit$EN = 1'b1 ;

  // register cache_crg_sb_to_load_delay
  assign cache_crg_sb_to_load_delay$D_IN =
	     cache_crg_sb_to_load_delay$port2__read ;
  assign cache_crg_sb_to_load_delay$EN = 1'b1 ;

  // register cache_ctr_wr_rsps_pending_inrg
  assign cache_ctr_wr_rsps_pending_inrg$D_IN =
	     cache_ctr_wr_rsps_pending_inrg + 4'd1 ;
  assign cache_ctr_wr_rsps_pending_inrg$EN =
	     CAN_FIRE_RL_cache_rl_fabric_send_write_req ;

  // register cache_ctr_wr_rsps_pending_outrg
  assign cache_ctr_wr_rsps_pending_outrg$D_IN =
	     WILL_FIRE_RL_cache_rl_discard_write_rsp ?
	       MUX_cache_ctr_wr_rsps_pending_outrg$write_1__VAL_1 :
	       cache_ctr_wr_rsps_pending_inrg ;
  assign cache_ctr_wr_rsps_pending_outrg$EN =
	     WILL_FIRE_RL_cache_rl_start_reset && !cache_f_reset_reqs$D_OUT ||
	     WILL_FIRE_RL_cache_rl_discard_write_rsp ;

  // register cache_master_xactor_clearing
  assign cache_master_xactor_clearing$D_IN = !cache_master_xactor_clearing ;
  assign cache_master_xactor_clearing$EN =
	     WILL_FIRE_RL_cache_rl_reset && !cache_f_reset_reqs$D_OUT ||
	     cache_master_xactor_clearing ;

  // register cache_master_xactor_shim_arff_rv
  assign cache_master_xactor_shim_arff_rv$D_IN =
	     cache_master_xactor_shim_arff_rv$port3__read ;
  assign cache_master_xactor_shim_arff_rv$EN = 1'b1 ;

  // register cache_master_xactor_shim_awff_rv
  assign cache_master_xactor_shim_awff_rv$D_IN =
	     cache_master_xactor_shim_awff_rv$port3__read ;
  assign cache_master_xactor_shim_awff_rv$EN = 1'b1 ;

  // register cache_master_xactor_shim_bff_rv
  assign cache_master_xactor_shim_bff_rv$D_IN =
	     cache_master_xactor_shim_bff_rv$port3__read ;
  assign cache_master_xactor_shim_bff_rv$EN = 1'b1 ;

  // register cache_master_xactor_shim_rff_rv
  assign cache_master_xactor_shim_rff_rv$D_IN =
	     cache_master_xactor_shim_rff_rv$port3__read ;
  assign cache_master_xactor_shim_rff_rv$EN = 1'b1 ;

  // register cache_master_xactor_shim_wff_rv
  assign cache_master_xactor_shim_wff_rv$D_IN =
	     cache_master_xactor_shim_wff_rv$port3__read ;
  assign cache_master_xactor_shim_wff_rv$EN = 1'b1 ;

  // register cache_rg_addr
  assign cache_rg_addr$D_IN = req_addr ;
  assign cache_rg_addr$EN = EN_req ;

  // register cache_rg_amo_funct7
  assign cache_rg_amo_funct7$D_IN = req_amo_funct7 ;
  assign cache_rg_amo_funct7$EN = EN_req ;

  // register cache_rg_cset_in_cache
  assign cache_rg_cset_in_cache$D_IN =
	     WILL_FIRE_RL_cache_rl_reset ?
	       MUX_cache_rg_cset_in_cache$write_1__VAL_1 :
	       7'd0 ;
  assign cache_rg_cset_in_cache$EN =
	     WILL_FIRE_RL_cache_rl_reset ||
	     WILL_FIRE_RL_cache_rl_start_reset ;

  // register cache_rg_error_during_refill
  assign cache_rg_error_during_refill$D_IN =
	     MUX_cache_rg_error_during_refill$write_1__SEL_1 ;
  assign cache_rg_error_during_refill$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // register cache_rg_exc_code
  always@(MUX_cache_rg_error_during_refill$write_1__SEL_1 or
	  MUX_cache_rg_exc_code$write_1__VAL_1 or
	  MUX_cache_rg_exc_code$write_1__SEL_2 or
	  MUX_cache_rg_exc_code$write_1__VAL_2 or
	  MUX_cache_rg_exc_code$write_1__SEL_3 or
	  MUX_cache_rg_exc_code$write_1__SEL_4 or
	  MUX_cache_rg_exc_code$write_1__SEL_5)
  case (1'b1)
    MUX_cache_rg_error_during_refill$write_1__SEL_1:
	cache_rg_exc_code$D_IN = MUX_cache_rg_exc_code$write_1__VAL_1;
    MUX_cache_rg_exc_code$write_1__SEL_2:
	cache_rg_exc_code$D_IN = MUX_cache_rg_exc_code$write_1__VAL_2;
    MUX_cache_rg_exc_code$write_1__SEL_3: cache_rg_exc_code$D_IN = 6'd7;
    MUX_cache_rg_exc_code$write_1__SEL_4: cache_rg_exc_code$D_IN = 6'd5;
    MUX_cache_rg_exc_code$write_1__SEL_5: cache_rg_exc_code$D_IN = 6'd28;
    default: cache_rg_exc_code$D_IN = 6'b101010 /* unspecified value */ ;
  endcase
  assign cache_rg_exc_code$EN =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     !cache_crg_commit$port1__read ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 ||
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 ||
	     EN_req &&
	     NOT_req_width_code_EQ_0b0_311_312_AND_NOT_req__ETC___d1331 &&
	     (req_width_code != 3'b100 || req_addr[3:0] != 4'b0) ;

  // register cache_rg_is_unsigned
  assign cache_rg_is_unsigned$D_IN = req_is_unsigned ;
  assign cache_rg_is_unsigned$EN = EN_req ;

  // register cache_rg_ld_val
  always@(MUX_cache_dw_output_ld_val$wset_1__SEL_2 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_2 or
	  MUX_cache_rg_ld_val$write_1__SEL_2 or
	  MUX_cache_rg_ld_val$write_1__VAL_2 or
	  WILL_FIRE_RL_cache_rl_io_read_rsp or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_1 or
	  WILL_FIRE_RL_cache_rl_io_AMO_SC_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_dw_output_ld_val$wset_1__SEL_2:
	  cache_rg_ld_val$D_IN = MUX_cache_dw_output_ld_val$wset_1__VAL_2;
      MUX_cache_rg_ld_val$write_1__SEL_2:
	  cache_rg_ld_val$D_IN = MUX_cache_rg_ld_val$write_1__VAL_2;
      WILL_FIRE_RL_cache_rl_io_read_rsp:
	  cache_rg_ld_val$D_IN = MUX_cache_dw_output_ld_val$wset_1__VAL_1;
      WILL_FIRE_RL_cache_rl_io_AMO_SC_req: cache_rg_ld_val$D_IN = 129'd1;
      default: cache_rg_ld_val$D_IN =
		   129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_rg_ld_val$EN =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_crg_commit$port1__read &&
	     cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d537 ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_io_AMO_SC_req ;

  // register cache_rg_lower_tag
  assign cache_rg_lower_tag$D_IN =
	     cache_master_xactor_shim_rff_rv$port1__read[0] ;
  assign cache_rg_lower_tag$EN = cache_rg_lower_word64_full$D_IN ;

  // register cache_rg_lower_word64
  assign cache_rg_lower_word64$D_IN =
	     cache_master_xactor_shim_rff_rv$port1__read[67:4] ;
  assign cache_rg_lower_word64$EN = cache_rg_lower_word64_full$D_IN ;

  // register cache_rg_lower_word64_full
  assign cache_rg_lower_word64_full$D_IN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     !cache_rg_lower_word64_full ;
  assign cache_rg_lower_word64_full$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ||
	     WILL_FIRE_RL_cache_rl_start_reset ;

  // register cache_rg_lrsc_pa
  assign cache_rg_lrsc_pa$D_IN = cache_rg_addr ;
  assign cache_rg_lrsc_pa$EN =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_crg_commit$port1__read &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00010 &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__62_BITS__ETC___d168 ;

  // register cache_rg_lrsc_valid
  assign cache_rg_lrsc_valid$D_IN =
	     MUX_cache_rg_lrsc_valid$write_1__SEL_2 &&
	     MUX_cache_rg_lrsc_valid$write_1__VAL_2 ;
  assign cache_rg_lrsc_valid$EN =
	     WILL_FIRE_RL_cache_rl_io_read_req && cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00010 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_crg_commit$port1__read &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op_41_EQ_0_42_OR_cache_rg_op_41_EQ_2__ETC___d227 ||
	     WILL_FIRE_RL_cache_rl_start_reset ;

  // register cache_rg_op
  assign cache_rg_op$D_IN = req_op ;
  assign cache_rg_op$EN = EN_req ;

  // register cache_rg_pa
  assign cache_rg_pa$D_IN = EN_req ? req_addr : cache_rg_addr ;
  assign cache_rg_pa$EN =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_crg_commit$port1__read ||
	     EN_req ;

  // register cache_rg_pte_pa
  assign cache_rg_pte_pa$D_IN = 32'h0 ;
  assign cache_rg_pte_pa$EN = 1'b0 ;

  // register cache_rg_st_amo_val
  assign cache_rg_st_amo_val$D_IN =
	     EN_req ? req_st_value : MUX_cache_rg_st_amo_val$write_1__VAL_2 ;
  assign cache_rg_st_amo_val$EN =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_crg_commit$port1__read &&
	     cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d882 ||
	     EN_req ;

  // register cache_rg_state
  always@(WILL_FIRE_RL_cache_rl_rereq or
	  MUX_cache_rg_state$write_1__SEL_2 or
	  MUX_cache_rg_state$write_1__VAL_2 or
	  WILL_FIRE_RL_cache_rl_start_cache_refill or
	  EN_req or
	  MUX_cache_rg_state$write_1__VAL_4 or
	  WILL_FIRE_RL_cache_rl_io_AMO_read_rsp or
	  MUX_cache_rg_state$write_1__VAL_5 or
	  WILL_FIRE_RL_cache_rl_io_read_rsp or
	  WILL_FIRE_RL_cache_rl_io_AMO_op_req or
	  WILL_FIRE_RL_cache_rl_io_AMO_SC_req or
	  WILL_FIRE_RL_cache_rl_io_write_req or
	  WILL_FIRE_RL_cache_rl_io_read_req or
	  WILL_FIRE_RL_cache_rl_start_reset or
	  MUX_cache_rg_state$write_1__SEL_12 or
	  MUX_cache_rg_state$write_1__VAL_12 or
	  MUX_cache_rg_state$write_1__SEL_13)
  case (1'b1)
    WILL_FIRE_RL_cache_rl_rereq: cache_rg_state$D_IN = 4'd3;
    MUX_cache_rg_state$write_1__SEL_2:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_2;
    WILL_FIRE_RL_cache_rl_start_cache_refill: cache_rg_state$D_IN = 4'd9;
    EN_req: cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_4;
    WILL_FIRE_RL_cache_rl_io_AMO_read_rsp:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_5;
    WILL_FIRE_RL_cache_rl_io_read_rsp:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_5;
    WILL_FIRE_RL_cache_rl_io_AMO_op_req: cache_rg_state$D_IN = 4'd15;
    WILL_FIRE_RL_cache_rl_io_AMO_SC_req || WILL_FIRE_RL_cache_rl_io_write_req:
	cache_rg_state$D_IN = 4'd11;
    WILL_FIRE_RL_cache_rl_io_read_req: cache_rg_state$D_IN = 4'd13;
    WILL_FIRE_RL_cache_rl_start_reset: cache_rg_state$D_IN = 4'd1;
    MUX_cache_rg_state$write_1__SEL_12:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_12;
    MUX_cache_rg_state$write_1__SEL_13: cache_rg_state$D_IN = 4'd2;
    default: cache_rg_state$D_IN = 4'b1010 /* unspecified value */ ;
  endcase
  assign cache_rg_state$EN =
	     WILL_FIRE_RL_cache_rl_reset &&
	     cache_rg_cset_in_cache == 7'd127 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_rg_op_41_EQ_0_42_OR_cache_rg_op_41_EQ_2__ETC___d205 ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_rg_word128_set_in_cache[0] ||
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp ||
	     EN_req ||
	     WILL_FIRE_RL_cache_rl_start_reset ||
	     WILL_FIRE_RL_cache_rl_rereq ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ||
	     WILL_FIRE_RL_cache_rl_io_AMO_SC_req ||
	     WILL_FIRE_RL_cache_rl_io_write_req ||
	     WILL_FIRE_RL_cache_rl_io_read_req ||
	     WILL_FIRE_RL_cache_rl_io_AMO_op_req ;

  // register cache_rg_width_code
  assign cache_rg_width_code$D_IN = req_width_code ;
  assign cache_rg_width_code$EN = EN_req ;

  // register cache_rg_word128_set_in_cache
  assign cache_rg_word128_set_in_cache$D_IN =
	     MUX_cache_ram_word128_set$b_put_1__SEL_2 ?
	       MUX_cache_ram_word128_set$b_put_2__VAL_2 :
	       MUX_cache_ram_word128_set$b_put_2__VAL_4 ;
  assign cache_rg_word128_set_in_cache$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     !cache_rg_word128_set_in_cache[0] ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // submodule cache_f_fabric_write_reqs
  always@(MUX_cache_dw_output_ld_val$wset_1__SEL_2 or
	  MUX_cache_f_fabric_write_reqs$enq_1__VAL_1 or
	  MUX_cache_f_fabric_write_reqs$enq_1__SEL_2 or
	  MUX_cache_f_fabric_write_reqs$enq_1__VAL_2 or
	  WILL_FIRE_RL_cache_rl_io_write_req or
	  MUX_cache_f_fabric_write_reqs$enq_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_dw_output_ld_val$wset_1__SEL_2:
	  cache_f_fabric_write_reqs$D_IN =
	      MUX_cache_f_fabric_write_reqs$enq_1__VAL_1;
      MUX_cache_f_fabric_write_reqs$enq_1__SEL_2:
	  cache_f_fabric_write_reqs$D_IN =
	      MUX_cache_f_fabric_write_reqs$enq_1__VAL_2;
      WILL_FIRE_RL_cache_rl_io_write_req:
	  cache_f_fabric_write_reqs$D_IN =
	      MUX_cache_f_fabric_write_reqs$enq_1__VAL_3;
      default: cache_f_fabric_write_reqs$D_IN =
		   164'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_f_fabric_write_reqs$ENQ =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_crg_commit$port1__read &&
	     cache_soc_map$m_is_mem_addr &&
	     NOT_cache_rg_op_41_EQ_0_42_79_AND_NOT_cache_rg_ETC___d822 ||
	     WILL_FIRE_RL_cache_rl_io_write_req ;
  assign cache_f_fabric_write_reqs$DEQ =
	     CAN_FIRE_RL_cache_rl_fabric_send_write_req ;
  assign cache_f_fabric_write_reqs$CLR = 1'b0 ;

  // submodule cache_f_reset_reqs
  assign cache_f_reset_reqs$D_IN = !EN_server_reset_request_put ;
  assign cache_f_reset_reqs$ENQ =
	     EN_server_reset_request_put || EN_server_flush_request_put ;
  assign cache_f_reset_reqs$DEQ = MUX_cache_rg_state$write_1__SEL_13 ;
  assign cache_f_reset_reqs$CLR = 1'b0 ;

  // submodule cache_f_reset_rsps
  assign cache_f_reset_rsps$D_IN = cache_f_reset_reqs$D_OUT ;
  assign cache_f_reset_rsps$ENQ = MUX_cache_rg_state$write_1__SEL_13 ;
  assign cache_f_reset_rsps$DEQ =
	     EN_server_flush_response_get || EN_server_reset_response_get ;
  assign cache_f_reset_rsps$CLR = 1'b0 ;

  // submodule cache_ram_state_and_ctag_cset
  assign cache_ram_state_and_ctag_cset$ADDRA =
	     MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 ?
	       cache_rg_word128_set_in_cache[7:1] :
	       cache_rg_cset_in_cache ;
  assign cache_ram_state_and_ctag_cset$ADDRB =
	     MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       req_addr[11:5] :
	       cache_rg_addr[11:5] ;
  assign cache_ram_state_and_ctag_cset$DIA =
	     MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 ?
	       MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1 :
	       23'd2796202 ;
  always@(MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  WILL_FIRE_RL_cache_rl_rereq or
	  WILL_FIRE_RL_cache_rl_start_cache_refill)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  cache_ram_state_and_ctag_cset$DIB =
	      23'b01010101010101010101010 /* unspecified value */ ;
      WILL_FIRE_RL_cache_rl_rereq:
	  cache_ram_state_and_ctag_cset$DIB =
	      23'b01010101010101010101010 /* unspecified value */ ;
      WILL_FIRE_RL_cache_rl_start_cache_refill:
	  cache_ram_state_and_ctag_cset$DIB =
	      23'b01010101010101010101010 /* unspecified value */ ;
      default: cache_ram_state_and_ctag_cset$DIB =
		   23'b01010101010101010101010 /* unspecified value */ ;
    endcase
  end
  assign cache_ram_state_and_ctag_cset$WEA = 1'd1 ;
  assign cache_ram_state_and_ctag_cset$WEB =
	     !MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 &&
	     !WILL_FIRE_RL_cache_rl_rereq ;
  assign cache_ram_state_and_ctag_cset$ENA =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     !cache_rg_word128_set_in_cache[0] &&
	     cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_reset ;
  assign cache_ram_state_and_ctag_cset$ENB =
	     MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 ||
	     WILL_FIRE_RL_cache_rl_rereq ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // submodule cache_ram_word128_set
  assign cache_ram_word128_set$ADDRA =
	     MUX_cache_ram_word128_set$a_put_1__SEL_1 ?
	       cache_rg_addr[11:4] :
	       cache_rg_word128_set_in_cache ;
  always@(MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  req_addr or
	  MUX_cache_ram_word128_set$b_put_1__SEL_2 or
	  MUX_cache_ram_word128_set$b_put_2__VAL_2 or
	  WILL_FIRE_RL_cache_rl_rereq or
	  cache_rg_addr or
	  WILL_FIRE_RL_cache_rl_start_cache_refill or
	  MUX_cache_ram_word128_set$b_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  cache_ram_word128_set$ADDRB = req_addr[11:4];
      MUX_cache_ram_word128_set$b_put_1__SEL_2:
	  cache_ram_word128_set$ADDRB =
	      MUX_cache_ram_word128_set$b_put_2__VAL_2;
      WILL_FIRE_RL_cache_rl_rereq:
	  cache_ram_word128_set$ADDRB = cache_rg_addr[11:4];
      WILL_FIRE_RL_cache_rl_start_cache_refill:
	  cache_ram_word128_set$ADDRB =
	      MUX_cache_ram_word128_set$b_put_2__VAL_4;
      default: cache_ram_word128_set$ADDRB =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  assign cache_ram_word128_set$DIA =
	     MUX_cache_ram_word128_set$a_put_1__SEL_1 ?
	       MUX_cache_ram_word128_set$a_put_3__VAL_1 :
	       MUX_cache_ram_word128_set$a_put_3__VAL_2 ;
  always@(MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  MUX_cache_ram_word128_set$b_put_1__SEL_2 or
	  WILL_FIRE_RL_cache_rl_rereq or
	  WILL_FIRE_RL_cache_rl_start_cache_refill)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  cache_ram_word128_set$DIB =
	      130'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      MUX_cache_ram_word128_set$b_put_1__SEL_2:
	  cache_ram_word128_set$DIB =
	      130'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_cache_rl_rereq:
	  cache_ram_word128_set$DIB =
	      130'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_cache_rl_start_cache_refill:
	  cache_ram_word128_set$DIB =
	      130'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      default: cache_ram_word128_set$DIB =
		   130'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_ram_word128_set$WEA = 1'd1 ;
  assign cache_ram_word128_set$WEB = 1'd0 ;
  assign cache_ram_word128_set$ENA =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_crg_commit$port1__read &&
	     cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d585 ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 ;
  assign cache_ram_word128_set$ENB =
	     MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     !cache_rg_word128_set_in_cache[0] ||
	     WILL_FIRE_RL_cache_rl_rereq ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // submodule cache_soc_map
  assign cache_soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign cache_soc_map$m_is_mem_addr_addr = { 32'd0, cache_rg_addr } ;
  assign cache_soc_map$m_is_near_mem_IO_addr_addr = 64'h0 ;

  // remaining internal signals
  assign IF_cache_rg_addr_BITS_4_TO_0_EQ_0_THEN_1_ELSE_0__q2 =
	     (cache_rg_addr[4:0] == 5'd0) ? 32'd1 : 32'd0 ;
  assign IF_cache_rg_op_41_EQ_0_42_OR_cache_rg_op_41_EQ_ETC___d208 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) ?
	       4'd8 :
	       IF_cache_rg_op_41_EQ_1_49_OR_cache_rg_op_41_EQ_ETC___d207 ;
  assign IF_cache_rg_op_41_EQ_0_42_OR_cache_rg_op_41_EQ_ETC___d499 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) ?
	       x__h21357 :
	       x__h26750 ;
  assign IF_cache_rg_op_41_EQ_1_49_OR_cache_rg_op_41_EQ_ETC___d172 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011 &&
	       lrsc_result__h22890 ||
	       cache_f_fabric_write_reqs$FULL_N :
	       !cache_ram_state_and_ctag_cset$DOB[22] ||
	       !cache_ram_state_and_ctag_cset_b_read__62_BITS__ETC___d168 ||
	       cache_f_fabric_write_reqs$FULL_N ;
  assign IF_cache_rg_op_41_EQ_1_49_OR_cache_rg_op_41_EQ_ETC___d207 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       4'd11 :
	       ((!cache_ram_state_and_ctag_cset$DOB[22] ||
		 !cache_ram_state_and_ctag_cset_b_read__62_BITS__ETC___d168) ?
		  4'd8 :
		  4'd11) ;
  assign IF_cache_rg_op_41_EQ_1_49_OR_cache_rg_op_41_EQ_ETC___d826 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       cache_rg_st_amo_val :
	       { 65'd0, x__h27561 } ;
  assign IF_cache_rg_width_code_36_EQ_2_41_THEN_SEXT_IF_ETC___d1222 =
	     (cache_rg_width_code == 3'd2) ?
	       { {32{x7828_BITS_31_TO_0__q85[31]}},
		 x7828_BITS_31_TO_0__q85 } :
	       x__h37828[63:0] ;
  assign IF_cache_rg_width_code_36_EQ_2_41_THEN_SEXT_IF_ETC___d577 =
	     (cache_rg_width_code == 3'd2) ?
	       { {32{x7708_BITS_31_TO_0__q50[31]}},
		 x7708_BITS_31_TO_0__q50 } :
	       x__h27708[63:0] ;
  assign IF_cache_rg_width_code_36_EQ_2_41_THEN_SEXT_ca_ETC___d706 =
	     (cache_rg_width_code == 3'd2) ?
	       { {32{cache_rg_st_amo_val_BITS_31_TO_0__q51[31]}},
		 cache_rg_st_amo_val_BITS_31_TO_0__q51 } :
	       cache_rg_st_amo_val[63:0] ;
  assign IF_cache_rg_width_code_36_EQ_3_45_THEN_IF_cach_ETC___d320 =
	     (cache_rg_width_code == 3'd3) ?
	       ((cache_rg_addr[3:0] == 4'h0) ?
		  cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[128] :
		  cache_rg_addr[3:0] == 4'h8 &&
		  cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[129]) :
	       cache_rg_width_code == 3'd4 &&
	       cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[128] ;
  assign NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94 =
	     cache_cfg_verbosity > 4'd1 ;
  assign NOT_cache_cfg_verbosity_read__2_ULE_2_12___d913 =
	     cache_cfg_verbosity > 4'd2 ;
  assign NOT_cache_f_reset_reqs_notEmpty__6_76_AND_cach_ETC___d187 =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_state == 4'd3 &&
	     (cache_rg_op != 2'd0 &&
	      (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) ||
	      cache_crg_sb_to_load_delay$port0__write_1 == 11'd0) ;
  assign NOT_cache_f_reset_reqs_notEmpty__6_76_AND_cach_ETC___d978 =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_state == 4'd12 &&
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) ;
  assign NOT_cache_ram_state_and_ctag_cset_b_read__62_B_ETC___d215 =
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__62_BITS__ETC___d168) &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00010 &&
	     cache_rg_addr_37_EQ_cache_rg_lrsc_pa_55___d213 ;
  assign NOT_cache_rg_op_41_EQ_0_42_79_AND_NOT_cache_rg_ETC___d202 =
	     cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_55_EQ_cache_rg_addr_37___d156) ;
  assign NOT_cache_rg_op_41_EQ_0_42_79_AND_NOT_cache_rg_ETC___d822 =
	     cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     (cache_rg_op_41_EQ_1_49_OR_cache_rg_op_41_EQ_2__ETC___d820 ||
	      NOT_cache_rg_op_41_EQ_1_49_21_AND_NOT_cache_rg_ETC___d582) ;
  assign NOT_cache_rg_op_41_EQ_0_42_79_AND_NOT_cache_rg_ETC___d848 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_cache_rg_op_41_EQ_2_43_80_OR_NOT_cache_rg__ETC___d846 ;
  assign NOT_cache_rg_op_41_EQ_0_42_79_AND_NOT_cache_rg_ETC___d858 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_cache_rg_op_41_EQ_2_43_80_OR_NOT_cache_rg__ETC___d856 ;
  assign NOT_cache_rg_op_41_EQ_1_49_21_AND_NOT_cache_rg_ETC___d224 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__62_BITS__ETC___d168 &&
	     cache_rg_addr_37_EQ_cache_rg_lrsc_pa_55___d213 ;
  assign NOT_cache_rg_op_41_EQ_1_49_21_AND_NOT_cache_rg_ETC___d582 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__62_BITS__ETC___d168 ;
  assign NOT_cache_rg_op_41_EQ_1_49_21_AND_NOT_cache_rg_ETC___d815 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__62_BITS__ETC___d168 &&
	     (cache_rg_width_code == 3'd0 || cache_rg_width_code == 3'd1) ;
  assign NOT_cache_rg_op_41_EQ_1_49_21_AND_NOT_cache_rg_ETC___d868 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__62_BITS__ETC___d168) &&
	     NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94 ;
  assign NOT_cache_rg_op_41_EQ_1_49_21_AND_NOT_cache_rg_ETC___d872 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__62_BITS__ETC___d168 &&
	     NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94 ;
  assign NOT_cache_rg_op_41_EQ_1_49_21_AND_NOT_cache_rg_ETC___d877 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__62_BITS__ETC___d168 &&
	     cache_rg_addr_37_EQ_cache_rg_lrsc_pa_55___d213 &&
	     NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94 ;
  assign NOT_cache_rg_op_41_EQ_2_43_80_OR_NOT_cache_rg__ETC___d580 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_55_EQ_cache_rg_addr_37___d156) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__62_BITS__ETC___d168 ;
  assign NOT_cache_rg_op_41_EQ_2_43_80_OR_NOT_cache_rg__ETC___d813 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_55_EQ_cache_rg_addr_37___d156) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__62_BITS__ETC___d168 &&
	     (cache_rg_width_code == 3'd0 || cache_rg_width_code == 3'd1) ;
  assign NOT_cache_rg_op_41_EQ_2_43_80_OR_NOT_cache_rg__ETC___d846 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_55_EQ_cache_rg_addr_37___d156) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__62_BITS__ETC___d168 &&
	     NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94 ;
  assign NOT_cache_rg_op_41_EQ_2_43_80_OR_NOT_cache_rg__ETC___d851 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_55_EQ_cache_rg_addr_37___d156) &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__62_BITS__ETC___d168) &&
	     NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94 ;
  assign NOT_cache_rg_op_41_EQ_2_43_80_OR_NOT_cache_rg__ETC___d856 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_55_EQ_cache_rg_addr_37___d156) &&
	     NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94 ;
  assign NOT_req_width_code_EQ_0b0_311_312_AND_NOT_req__ETC___d1331 =
	     req_width_code != 3'b0 &&
	     (req_width_code != 3'b001 || req_addr[0]) &&
	     (req_width_code != 3'b010 || req_addr[1:0] != 2'b0) &&
	     (req_width_code != 3'b011 || req_addr[2:0] != 3'b0) ;
  assign SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d326 =
	     { {120{cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q33[7]}},
	       cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q33 } ;
  assign SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d331 =
	     { {120{cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q48[7]}},
	       cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q48 } ;
  assign SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d336 =
	     { {120{cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q32[7]}},
	       cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q32 } ;
  assign SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d341 =
	     { {120{cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q46[7]}},
	       cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q46 } ;
  assign SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d346 =
	     { {120{cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q29[7]}},
	       cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q29 } ;
  assign SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d351 =
	     { {120{cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q47[7]}},
	       cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q47 } ;
  assign SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d356 =
	     { {120{cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q30[7]}},
	       cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q30 } ;
  assign SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d361 =
	     { {120{cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q45[7]}},
	       cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q45 } ;
  assign SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d365 =
	     { {120{cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q26[7]}},
	       cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q26 } ;
  assign SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d370 =
	     { {120{cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q44[7]}},
	       cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q44 } ;
  assign SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d375 =
	     { {120{cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q24[7]}},
	       cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q24 } ;
  assign SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d380 =
	     { {120{cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q43[7]}},
	       cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q43 } ;
  assign SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d385 =
	     { {120{cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q22[7]}},
	       cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q22 } ;
  assign SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d390 =
	     { {120{cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q42[7]}},
	       cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q42 } ;
  assign SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d395 =
	     { {120{cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q20[7]}},
	       cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q20 } ;
  assign SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d400 =
	     { {120{cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q41[7]}},
	       cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q41 } ;
  assign SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d420 =
	     { {112{cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q34[15]}},
	       cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q34 } ;
  assign SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d424 =
	     { {112{cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q31[15]}},
	       cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q31 } ;
  assign SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d428 =
	     { {112{cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q27[15]}},
	       cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q27 } ;
  assign SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d432 =
	     { {112{cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q28[15]}},
	       cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q28 } ;
  assign SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d436 =
	     { {112{cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q25[15]}},
	       cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q25 } ;
  assign SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d440 =
	     { {112{cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q23[15]}},
	       cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q23 } ;
  assign SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d444 =
	     { {112{cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q21[15]}},
	       cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q21 } ;
  assign SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d448 =
	     { {112{cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q19[15]}},
	       cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q19 } ;
  assign SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d460 =
	     { {96{cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q38[31]}},
	       cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q38 } ;
  assign SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d464 =
	     { {96{cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q37[31]}},
	       cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q37 } ;
  assign SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d468 =
	     { {96{cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q36[31]}},
	       cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q36 } ;
  assign SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d472 =
	     { {96{cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q35[31]}},
	       cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q35 } ;
  assign SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d480 =
	     { {64{cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q40[63]}},
	       cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q40 } ;
  assign SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d484 =
	     { {64{cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q39[63]}},
	       cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q39 } ;
  assign _0__q1 = 2'd0 ;
  assign _theResult___fst__h35638 =
	     (cache_rg_addr[2:0] == 3'd0) ? result__h35640 : 128'd0 ;
  assign access_exc_code__h5041 = MUX_cache_rg_exc_code$write_1__VAL_1 ;
  assign cache_crg_commit_port1__read__35_AND_cache_soc_ETC___d523 =
	     cache_crg_commit$port1__read && cache_soc_map$m_is_mem_addr &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00010 &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__62_BITS__ETC___d168 &&
	     NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94 ;
  assign cache_crg_commit_port1__read__35_AND_cache_soc_ETC___d836 =
	     cache_crg_commit$port1__read && cache_soc_map$m_is_mem_addr &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00011 &&
	     cache_rg_lrsc_valid &&
	     !cache_rg_lrsc_pa_55_EQ_cache_rg_addr_37___d156 &&
	     NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94 ;
  assign cache_ctr_wr_rsps_pending_inrg_read__4_MINUS_c_ETC___d46 =
	     cache_ctr_wr_rsps_pending_inrg -
	     cache_ctr_wr_rsps_pending_outrg ;
  assign cache_f_reset_reqs_i_notEmpty__5_AND_cache_f_r_ETC___d117 =
	     cache_f_reset_reqs$EMPTY_N &&
	     (cache_f_reset_reqs$D_OUT || !cache_master_xactor_clearing) &&
	     (cache_rg_cset_in_cache != 7'd127 || cache_f_reset_rsps$FULL_N) ;
  assign cache_master_xactor_shim_arff_rvport1__read_B_ETC__q53 =
	     cache_master_xactor_shim_arff_rv$port1__read[96:0] ;
  assign cache_master_xactor_shim_awff_rvport1__read_B_ETC__q3 =
	     cache_master_xactor_shim_awff_rv$port1__read[96:0] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q10 =
	     cache_master_xactor_shim_rff_rv$port1__read[35:28] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q11 =
	     cache_master_xactor_shim_rff_rv$port1__read[43:36] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q12 =
	     cache_master_xactor_shim_rff_rv$port1__read[51:36] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q13 =
	     cache_master_xactor_shim_rff_rv$port1__read[67:36] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q14 =
	     cache_master_xactor_shim_rff_rv$port1__read[59:52] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q15 =
	     cache_master_xactor_shim_rff_rv$port1__read[51:44] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q16 =
	     cache_master_xactor_shim_rff_rv$port1__read[67:52] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q17 =
	     cache_master_xactor_shim_rff_rv$port1__read[67:60] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q4 =
	     cache_master_xactor_shim_rff_rv$port1__read[11:4] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q5 =
	     cache_master_xactor_shim_rff_rv$port1__read[19:4] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q6 =
	     cache_master_xactor_shim_rff_rv$port1__read[19:12] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q7 =
	     cache_master_xactor_shim_rff_rv$port1__read[35:4] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q8 =
	     cache_master_xactor_shim_rff_rv$port1__read[27:20] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q9 =
	     cache_master_xactor_shim_rff_rv$port1__read[35:20] ;
  assign cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q18 =
	     cache_master_xactor_shim_wff_rv$port1__read[73:0] ;
  assign cache_ram_state_and_ctag_cset_b_read__62_BITS__ETC___d168 =
	     cache_ram_state_and_ctag_cset$DOB[21:0] == pa_ctag__h8020 ;
  assign cache_ram_state_and_ctag_cset_b_read__62_BIT_2_ETC___d216 =
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__62_BITS__ETC___d168 &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00010 ||
	     NOT_cache_ram_state_and_ctag_cset_b_read__62_B_ETC___d215 ;
  assign cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312 =
	     cache_ram_word128_set$DOB & y__h8504 ;
  assign cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q19 =
	     cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[127:112] ;
  assign cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q20 =
	     cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[119:112] ;
  assign cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q21 =
	     cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[111:96] ;
  assign cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q22 =
	     cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[103:96] ;
  assign cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q23 =
	     cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[95:80] ;
  assign cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q24 =
	     cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[87:80] ;
  assign cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q25 =
	     cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[79:64] ;
  assign cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q26 =
	     cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[71:64] ;
  assign cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q27 =
	     cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[47:32] ;
  assign cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q28 =
	     cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[63:48] ;
  assign cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q29 =
	     cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[39:32] ;
  assign cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q30 =
	     cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[55:48] ;
  assign cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q31 =
	     cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[31:16] ;
  assign cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q32 =
	     cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[23:16] ;
  assign cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q33 =
	     cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[7:0] ;
  assign cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q34 =
	     cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[15:0] ;
  assign cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q35 =
	     cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[127:96] ;
  assign cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q36 =
	     cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[95:64] ;
  assign cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q37 =
	     cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[63:32] ;
  assign cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q38 =
	     cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[31:0] ;
  assign cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q39 =
	     cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[127:64] ;
  assign cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q40 =
	     cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[63:0] ;
  assign cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q41 =
	     cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[127:120] ;
  assign cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q42 =
	     cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[111:104] ;
  assign cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q43 =
	     cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[95:88] ;
  assign cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q44 =
	     cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[79:72] ;
  assign cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q45 =
	     cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[63:56] ;
  assign cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q46 =
	     cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[31:24] ;
  assign cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q47 =
	     cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[47:40] ;
  assign cache_ram_word128_set_b_read__96_AND_cache_ram_ETC__q48 =
	     cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[15:8] ;
  assign cache_ram_word128_set_b_read__96_BITS_129_TO_1_ETC___d597 =
	     cache_ram_word128_set$DOB[129:128] & y__h27433 ;
  assign cache_rg_addr_37_EQ_cache_rg_lrsc_pa_55___d213 =
	     cache_rg_addr == cache_rg_lrsc_pa ;
  assign cache_rg_amo_funct7_44_BITS_6_TO_2_45_EQ_0b10__ETC___d530 =
	     cache_rg_amo_funct7[6:2] == 5'b00010 &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__62_BITS__ETC___d168) &&
	     cache_rg_addr_37_EQ_cache_rg_lrsc_pa_55___d213 &&
	     NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94 ;
  assign cache_rg_lrsc_pa_55_EQ_cache_rg_addr_37___d156 =
	     cache_rg_lrsc_pa == cache_rg_addr ;
  assign cache_rg_op_41_EQ_0_42_OR_cache_rg_op_41_EQ_2__ETC___d197 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__62_BITS__ETC___d168) ;
  assign cache_rg_op_41_EQ_0_42_OR_cache_rg_op_41_EQ_2__ETC___d205 =
	     cache_rg_op_41_EQ_0_42_OR_cache_rg_op_41_EQ_2__ETC___d197 ||
	     NOT_cache_rg_op_41_EQ_0_42_79_AND_NOT_cache_rg_ETC___d202 ||
	     !cache_soc_map$m_is_mem_addr ||
	     !cache_crg_commit$port1__read ;
  assign cache_rg_op_41_EQ_0_42_OR_cache_rg_op_41_EQ_2__ETC___d227 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     cache_ram_state_and_ctag_cset_b_read__62_BIT_2_ETC___d216 ||
	     cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     cache_rg_op_41_EQ_1_49_OR_cache_rg_op_41_EQ_2__ETC___d225 ;
  assign cache_rg_op_41_EQ_0_42_OR_cache_rg_op_41_EQ_2__ETC___d233 =
	     MUX_cache_rg_lrsc_valid$write_1__VAL_2 ||
	     cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h22890 ;
  assign cache_rg_op_41_EQ_0_42_OR_cache_rg_op_41_EQ_2__ETC___d322 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     cache_rg_width_code != 3'd0 &&
	     cache_rg_width_code != 3'd1 &&
	     cache_rg_width_code != 3'd2 &&
	     IF_cache_rg_width_code_36_EQ_3_45_THEN_IF_cach_ETC___d320 ;
  assign cache_rg_op_41_EQ_0_42_OR_cache_rg_op_41_EQ_2__ETC___d509 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__62_BITS__ETC___d168 &&
	     NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94 ;
  assign cache_rg_op_41_EQ_0_42_OR_cache_rg_op_41_EQ_2__ETC___d525 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__62_BITS__ETC___d168) &&
	     NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94 ;
  assign cache_rg_op_41_EQ_1_49_OR_cache_rg_op_41_EQ_2__ETC___d225 =
	     cache_rg_op == 2'd1 &&
	     cache_rg_addr_37_EQ_cache_rg_lrsc_pa_55___d213 ||
	     cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011 ||
	     NOT_cache_rg_op_41_EQ_1_49_21_AND_NOT_cache_rg_ETC___d224 ;
  assign cache_rg_op_41_EQ_1_49_OR_cache_rg_op_41_EQ_2__ETC___d583 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_cache_rg_op_41_EQ_2_43_80_OR_NOT_cache_rg__ETC___d580 ||
	     NOT_cache_rg_op_41_EQ_1_49_21_AND_NOT_cache_rg_ETC___d582 ;
  assign cache_rg_op_41_EQ_1_49_OR_cache_rg_op_41_EQ_2__ETC___d816 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_cache_rg_op_41_EQ_2_43_80_OR_NOT_cache_rg__ETC___d813 ||
	     NOT_cache_rg_op_41_EQ_1_49_21_AND_NOT_cache_rg_ETC___d815 ;
  assign cache_rg_op_41_EQ_1_49_OR_cache_rg_op_41_EQ_2__ETC___d820 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_55_EQ_cache_rg_addr_37___d156) ;
  assign cache_rg_op_41_EQ_2_43_AND_cache_rg_amo_funct7_ETC___d863 =
	     cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h22890 &&
	     NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94 ;
  assign cache_rg_st_amo_val_BITS_31_TO_0__q51 = cache_rg_st_amo_val[31:0] ;
  assign cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d537 =
	     cache_soc_map$m_is_mem_addr && cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     (cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011 ||
	      cache_rg_op != 2'd1 && cache_ram_state_and_ctag_cset$DOB[22] &&
	      cache_ram_state_and_ctag_cset_b_read__62_BITS__ETC___d168) ;
  assign cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d585 =
	     cache_soc_map$m_is_mem_addr && cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     cache_rg_op_41_EQ_1_49_OR_cache_rg_op_41_EQ_2__ETC___d583 ;
  assign cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d874 =
	     cache_soc_map$m_is_mem_addr && cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_cache_rg_op_41_EQ_1_49_21_AND_NOT_cache_rg_ETC___d872 ;
  assign cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d882 =
	     cache_soc_map$m_is_mem_addr && cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_cache_rg_op_41_EQ_1_49_21_AND_NOT_cache_rg_ETC___d582 ;
  assign cline_addr__h31810 = { cache_rg_pa[31:5], 5'd0 } ;
  assign cline_fabric_addr__h31811 = { 32'd0, cline_addr__h31810 } ;
  assign fabric_addr__h37049 = { 32'd0, cache_rg_pa } ;
  assign lrsc_result__h22890 =
	     !cache_rg_lrsc_valid ||
	     !cache_rg_lrsc_pa_55_EQ_cache_rg_addr_37___d156 ;
  assign mem_req_wr_addr_awaddr__h5317 =
	     { 32'd0, cache_f_fabric_write_reqs$D_OUT[160:129] } ;
  assign mem_req_wr_data_wuser__h5537 =
	     cache_f_fabric_write_reqs$D_OUT[163:161] == 3'b011 &&
	     cache_f_fabric_write_reqs$D_OUT[128] ;
  assign new_st_val__h27563 = { 32'd0, _theResult_____2__h27417[31:0] } ;
  assign new_st_val__h27656 =
	     IF_cache_rg_width_code_36_EQ_2_41_THEN_SEXT_IF_ETC___d577 +
	     IF_cache_rg_width_code_36_EQ_2_41_THEN_SEXT_ca_ETC___d706 ;
  assign new_st_val__h28804 = w1__h27409 ^ w2__h27411 ;
  assign new_st_val__h28808 = w1__h27409 & w2__h27411 ;
  assign new_st_val__h28812 = w1__h27409 | w2__h27411 ;
  assign new_st_val__h28816 =
	     (w1__h27409 < w2__h27411) ? w1__h27409 : w2__h27411 ;
  assign new_st_val__h28821 =
	     (w1__h27409 <= w2__h27411) ? w2__h27411 : w1__h27409 ;
  assign new_st_val__h28827 =
	     ((IF_cache_rg_width_code_36_EQ_2_41_THEN_SEXT_IF_ETC___d577 ^
	       64'h8000000000000000) <
	      (IF_cache_rg_width_code_36_EQ_2_41_THEN_SEXT_ca_ETC___d706 ^
	       64'h8000000000000000)) ?
	       w1__h27409 :
	       w2__h27411 ;
  assign new_st_val__h28832 =
	     ((IF_cache_rg_width_code_36_EQ_2_41_THEN_SEXT_IF_ETC___d577 ^
	       64'h8000000000000000) <=
	      (IF_cache_rg_width_code_36_EQ_2_41_THEN_SEXT_ca_ETC___d706 ^
	       64'h8000000000000000)) ?
	       w2__h27411 :
	       w1__h27409 ;
  assign new_st_val__h37683 = { 32'd0, _theResult_____2__h37670[31:0] } ;
  assign new_st_val__h37776 =
	     IF_cache_rg_width_code_36_EQ_2_41_THEN_SEXT_IF_ETC___d1222 +
	     IF_cache_rg_width_code_36_EQ_2_41_THEN_SEXT_ca_ETC___d706 ;
  assign new_st_val__h39630 = w1__h37662 ^ w2__h27411 ;
  assign new_st_val__h39634 = w1__h37662 & w2__h27411 ;
  assign new_st_val__h39638 = w1__h37662 | w2__h27411 ;
  assign new_st_val__h39642 =
	     (w1__h37662 < w2__h27411) ? w1__h37662 : w2__h27411 ;
  assign new_st_val__h39647 =
	     (w1__h37662 <= w2__h27411) ? w2__h27411 : w1__h37662 ;
  assign new_st_val__h39653 =
	     ((IF_cache_rg_width_code_36_EQ_2_41_THEN_SEXT_IF_ETC___d1222 ^
	       64'h8000000000000000) <
	      (IF_cache_rg_width_code_36_EQ_2_41_THEN_SEXT_ca_ETC___d706 ^
	       64'h8000000000000000)) ?
	       w1__h37662 :
	       w2__h27411 ;
  assign new_st_val__h39658 =
	     ((IF_cache_rg_width_code_36_EQ_2_41_THEN_SEXT_IF_ETC___d1222 ^
	       64'h8000000000000000) <=
	      (IF_cache_rg_width_code_36_EQ_2_41_THEN_SEXT_ca_ETC___d706 ^
	       64'h8000000000000000)) ?
	       w2__h27411 :
	       w1__h37662 ;
  assign pa_ctag__h8020 = { 2'd0, cache_rg_addr[31:12] } ;
  assign req_width_code_EQ_0b0_311_OR_req_width_code_EQ_ETC___d1347 =
	     req_width_code == 3'b0 ||
	     req_width_code == 3'b001 && !req_addr[0] ||
	     req_width_code == 3'b010 && req_addr[1:0] == 2'b0 ||
	     req_width_code == 3'b011 && req_addr[2:0] == 3'b0 ;
  assign req_width_code_EQ_0b0_311_OR_req_width_code_EQ_ETC___d1352 =
	     (req_width_code_EQ_0b0_311_OR_req_width_code_EQ_ETC___d1347 ||
	      req_width_code == 3'b100 && req_addr[3:0] == 4'b0) &&
	     NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94 ;
  assign result__h21300 =
	     cache_rg_is_unsigned ?
	       { 64'd0,
		 cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[127:64] } :
	       SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d484 ;
  assign result__h21368 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[7:0] } :
	       SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d326 ;
  assign result__h21406 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[15:8] } :
	       SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d331 ;
  assign result__h21439 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[23:16] } :
	       SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d336 ;
  assign result__h21472 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[31:24] } :
	       SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d341 ;
  assign result__h21505 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[39:32] } :
	       SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d346 ;
  assign result__h21538 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[47:40] } :
	       SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d351 ;
  assign result__h21571 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[55:48] } :
	       SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d356 ;
  assign result__h21604 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[63:56] } :
	       SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d361 ;
  assign result__h21637 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[71:64] } :
	       SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d365 ;
  assign result__h21670 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[79:72] } :
	       SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d370 ;
  assign result__h21703 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[87:80] } :
	       SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d375 ;
  assign result__h21736 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[95:88] } :
	       SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d380 ;
  assign result__h21769 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[103:96] } :
	       SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d385 ;
  assign result__h21802 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[111:104] } :
	       SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d390 ;
  assign result__h21835 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[119:112] } :
	       SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d395 ;
  assign result__h21868 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[127:120] } :
	       SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d400 ;
  assign result__h21923 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[15:0] } :
	       SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d420 ;
  assign result__h21956 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[31:16] } :
	       SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d424 ;
  assign result__h21989 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[47:32] } :
	       SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d428 ;
  assign result__h22022 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[63:48] } :
	       SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d432 ;
  assign result__h22055 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[79:64] } :
	       SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d436 ;
  assign result__h22088 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[95:80] } :
	       SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d440 ;
  assign result__h22121 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[111:96] } :
	       SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d444 ;
  assign result__h22154 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[127:112] } :
	       SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d448 ;
  assign result__h22201 =
	     cache_rg_is_unsigned ?
	       { 96'd0,
		 cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[31:0] } :
	       SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d460 ;
  assign result__h22234 =
	     cache_rg_is_unsigned ?
	       { 96'd0,
		 cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[63:32] } :
	       SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d464 ;
  assign result__h22267 =
	     cache_rg_is_unsigned ?
	       { 96'd0,
		 cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[95:64] } :
	       SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d468 ;
  assign result__h22300 =
	     cache_rg_is_unsigned ?
	       { 96'd0,
		 cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[127:96] } :
	       SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d472 ;
  assign result__h35640 =
	     cache_rg_is_unsigned ?
	       word128__h35533 :
	       { {64{cache_rg_lower_word64$D_IN[63]}},
		 cache_rg_lower_word64$D_IN } ;
  assign result__h35699 =
	     cache_rg_is_unsigned ?
	       { 120'd0, cache_master_xactor_shim_rff_rv$port1__read[11:4] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q4[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q4 } ;
  assign result__h35735 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[19:12] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q6[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q6 } ;
  assign result__h35768 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[27:20] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q8[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q8 } ;
  assign result__h35801 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[35:28] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q10[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q10 } ;
  assign result__h35834 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[43:36] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q11[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q11 } ;
  assign result__h35867 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[51:44] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q15[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q15 } ;
  assign result__h35900 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[59:52] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q14[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q14 } ;
  assign result__h35933 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[67:60] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q17[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q17 } ;
  assign result__h35996 =
	     cache_rg_is_unsigned ?
	       { 112'd0, cache_master_xactor_shim_rff_rv$port1__read[19:4] } :
	       { {112{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q5[15]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q5 } ;
  assign result__h36029 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[35:20] } :
	       { {112{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q9[15]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q9 } ;
  assign result__h36062 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[51:36] } :
	       { {112{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q12[15]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q12 } ;
  assign result__h36095 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[67:52] } :
	       { {112{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q16[15]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q16 } ;
  assign result__h36146 =
	     cache_rg_is_unsigned ?
	       { 96'd0, cache_master_xactor_shim_rff_rv$port1__read[35:4] } :
	       { {96{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q7[31]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q7 } ;
  assign result__h36179 =
	     cache_rg_is_unsigned ?
	       { 96'd0, cache_master_xactor_shim_rff_rv$port1__read[67:36] } :
	       { {96{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q13[31]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q13 } ;
  assign result__h37909 =
	     { {120{x5688_BITS_7_TO_0__q55[7]}}, x5688_BITS_7_TO_0__q55 } ;
  assign result__h38617 =
	     { {120{x5688_BITS_15_TO_8__q59[7]}}, x5688_BITS_15_TO_8__q59 } ;
  assign result__h38649 =
	     { {120{x5688_BITS_23_TO_16__q60[7]}},
	       x5688_BITS_23_TO_16__q60 } ;
  assign result__h38681 =
	     { {120{x5688_BITS_31_TO_24__q61[7]}},
	       x5688_BITS_31_TO_24__q61 } ;
  assign result__h38713 =
	     { {120{x5688_BITS_39_TO_32__q63[7]}},
	       x5688_BITS_39_TO_32__q63 } ;
  assign result__h38745 =
	     { {120{x5688_BITS_47_TO_40__q66[7]}},
	       x5688_BITS_47_TO_40__q66 } ;
  assign result__h38777 =
	     { {120{x5688_BITS_55_TO_48__q67[7]}},
	       x5688_BITS_55_TO_48__q67 } ;
  assign result__h38809 =
	     { {120{x5688_BITS_63_TO_56__q69[7]}},
	       x5688_BITS_63_TO_56__q69 } ;
  assign result__h38841 =
	     { {120{x5688_BITS_71_TO_64__q70[7]}},
	       x5688_BITS_71_TO_64__q70 } ;
  assign result__h38873 =
	     { {120{x5688_BITS_79_TO_72__q72[7]}},
	       x5688_BITS_79_TO_72__q72 } ;
  assign result__h38905 =
	     { {120{x5688_BITS_87_TO_80__q75[7]}},
	       x5688_BITS_87_TO_80__q75 } ;
  assign result__h38937 =
	     { {120{x5688_BITS_95_TO_88__q77[7]}},
	       x5688_BITS_95_TO_88__q77 } ;
  assign result__h38969 =
	     { {120{x5688_BITS_103_TO_96__q78[7]}},
	       x5688_BITS_103_TO_96__q78 } ;
  assign result__h39001 =
	     { {120{x5688_BITS_111_TO_104__q82[7]}},
	       x5688_BITS_111_TO_104__q82 } ;
  assign result__h39033 =
	     { {120{x5688_BITS_119_TO_112__q80[7]}},
	       x5688_BITS_119_TO_112__q80 } ;
  assign result__h39065 =
	     { {120{x5688_BITS_127_TO_120__q84[7]}},
	       x5688_BITS_127_TO_120__q84 } ;
  assign result__h39119 =
	     { {112{x5688_BITS_15_TO_0__q56[15]}}, x5688_BITS_15_TO_0__q56 } ;
  assign result__h39151 =
	     { {112{x5688_BITS_31_TO_16__q62[15]}},
	       x5688_BITS_31_TO_16__q62 } ;
  assign result__h39183 =
	     { {112{x5688_BITS_47_TO_32__q64[15]}},
	       x5688_BITS_47_TO_32__q64 } ;
  assign result__h39215 =
	     { {112{x5688_BITS_63_TO_48__q68[15]}},
	       x5688_BITS_63_TO_48__q68 } ;
  assign result__h39247 =
	     { {112{x5688_BITS_79_TO_64__q71[15]}},
	       x5688_BITS_79_TO_64__q71 } ;
  assign result__h39279 =
	     { {112{x5688_BITS_95_TO_80__q76[15]}},
	       x5688_BITS_95_TO_80__q76 } ;
  assign result__h39311 =
	     { {112{x5688_BITS_111_TO_96__q79[15]}},
	       x5688_BITS_111_TO_96__q79 } ;
  assign result__h39343 =
	     { {112{x5688_BITS_127_TO_112__q83[15]}},
	       x5688_BITS_127_TO_112__q83 } ;
  assign result__h39389 =
	     { {96{x5688_BITS_31_TO_0__q57[31]}}, x5688_BITS_31_TO_0__q57 } ;
  assign result__h39421 =
	     { {96{x5688_BITS_63_TO_32__q65[31]}},
	       x5688_BITS_63_TO_32__q65 } ;
  assign result__h39453 =
	     { {96{x5688_BITS_95_TO_64__q73[31]}},
	       x5688_BITS_95_TO_64__q73 } ;
  assign result__h39485 =
	     { {96{x5688_BITS_127_TO_96__q81[31]}},
	       x5688_BITS_127_TO_96__q81 } ;
  assign result__h39539 =
	     { {64{x5688_BITS_63_TO_0__q58[63]}}, x5688_BITS_63_TO_0__q58 } ;
  assign result__h39568 =
	     { {64{x5688_BITS_127_TO_64__q74[63]}},
	       x5688_BITS_127_TO_64__q74 } ;
  assign result__h8454 =
	     cache_rg_is_unsigned ?
	       { 64'd0,
		 cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[63:0] } :
	       SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d480 ;
  assign shift_bits__h5333 =
	     { cache_f_fabric_write_reqs$D_OUT[131:129], 3'b0 } ;
  assign strobe128__h5405 =
	     8'b00000001 << cache_f_fabric_write_reqs$D_OUT[131:129] ;
  assign strobe128__h5409 =
	     8'b00000011 << cache_f_fabric_write_reqs$D_OUT[131:129] ;
  assign strobe128__h5413 =
	     8'b00001111 << cache_f_fabric_write_reqs$D_OUT[131:129] ;
  assign strobe128__h5417 =
	     8'b11111111 << cache_f_fabric_write_reqs$D_OUT[131:129] ;
  assign w1___1__h27622 = { 32'd0, x__h27708[31:0] } ;
  assign w1___1__h37742 = { 32'd0, x__h37828[31:0] } ;
  assign w1__h27409 =
	     (cache_rg_width_code == 3'd2) ?
	       w1___1__h27622 :
	       x__h27708[63:0] ;
  assign w1__h37662 =
	     (cache_rg_width_code == 3'd2) ?
	       w1___1__h37742 :
	       x__h37828[63:0] ;
  assign w2__h27411 =
	     (cache_rg_width_code == 3'd2) ?
	       { 32'd0, cache_rg_st_amo_val[31:0] } :
	       cache_rg_st_amo_val[63:0] ;
  assign word128__h35533 =
	     { 64'd0, cache_master_xactor_shim_rff_rv$port1__read[67:4] } ;
  assign word64__h5404 =
	     cache_f_fabric_write_reqs$D_OUT[63:0] << shift_bits__h5333 ;
  assign x5688_BITS_103_TO_96__q78 = x__h35688[103:96] ;
  assign x5688_BITS_111_TO_104__q82 = x__h35688[111:104] ;
  assign x5688_BITS_111_TO_96__q79 = x__h35688[111:96] ;
  assign x5688_BITS_119_TO_112__q80 = x__h35688[119:112] ;
  assign x5688_BITS_127_TO_112__q83 = x__h35688[127:112] ;
  assign x5688_BITS_127_TO_120__q84 = x__h35688[127:120] ;
  assign x5688_BITS_127_TO_64__q74 = x__h35688[127:64] ;
  assign x5688_BITS_127_TO_96__q81 = x__h35688[127:96] ;
  assign x5688_BITS_15_TO_0__q56 = x__h35688[15:0] ;
  assign x5688_BITS_15_TO_8__q59 = x__h35688[15:8] ;
  assign x5688_BITS_23_TO_16__q60 = x__h35688[23:16] ;
  assign x5688_BITS_31_TO_0__q57 = x__h35688[31:0] ;
  assign x5688_BITS_31_TO_16__q62 = x__h35688[31:16] ;
  assign x5688_BITS_31_TO_24__q61 = x__h35688[31:24] ;
  assign x5688_BITS_39_TO_32__q63 = x__h35688[39:32] ;
  assign x5688_BITS_47_TO_32__q64 = x__h35688[47:32] ;
  assign x5688_BITS_47_TO_40__q66 = x__h35688[47:40] ;
  assign x5688_BITS_55_TO_48__q67 = x__h35688[55:48] ;
  assign x5688_BITS_63_TO_0__q58 = x__h35688[63:0] ;
  assign x5688_BITS_63_TO_32__q65 = x__h35688[63:32] ;
  assign x5688_BITS_63_TO_48__q68 = x__h35688[63:48] ;
  assign x5688_BITS_63_TO_56__q69 = x__h35688[63:56] ;
  assign x5688_BITS_71_TO_64__q70 = x__h35688[71:64] ;
  assign x5688_BITS_79_TO_64__q71 = x__h35688[79:64] ;
  assign x5688_BITS_79_TO_72__q72 = x__h35688[79:72] ;
  assign x5688_BITS_7_TO_0__q55 = x__h35688[7:0] ;
  assign x5688_BITS_87_TO_80__q75 = x__h35688[87:80] ;
  assign x5688_BITS_95_TO_64__q73 = x__h35688[95:64] ;
  assign x5688_BITS_95_TO_80__q76 = x__h35688[95:80] ;
  assign x5688_BITS_95_TO_88__q77 = x__h35688[95:88] ;
  assign x7708_BITS_31_TO_0__q50 = x__h27708[31:0] ;
  assign x7828_BITS_31_TO_0__q85 = x__h37828[31:0] ;
  assign x__h23641 =
	     (cache_rg_width_code == 3'd3 && cache_rg_st_amo_val[128]) ?
	       cache_ram_word128_set$DOB[129:128] | x__h27365 :
	       cache_ram_word128_set_b_read__96_BITS_129_TO_1_ETC___d597 ;
  assign x__h27365 = 2'd1 << x__h27450 ;
  assign x__h27450 = { 3'd0, cache_rg_addr[3] } ;
  assign x__h27561 =
	     (cache_rg_width_code == 3'd2) ?
	       new_st_val__h27563 :
	       _theResult_____2__h27417 ;
  assign x__h33223 =
	     { cache_master_xactor_shim_rff_rv$port1__read[0],
	       cache_rg_lower_tag } ;
  assign x__h33228 =
	     { cache_master_xactor_shim_rff_rv$port1__read[67:4],
	       cache_rg_lower_word64 } ;
  assign x__h37681 =
	     (cache_rg_width_code == 3'd2) ?
	       new_st_val__h37683 :
	       _theResult_____2__h37670 ;
  assign y__h27433 = ~x__h27365 ;
  assign y__h8504 =
	     {130{cache_ram_state_and_ctag_cset$DOB[22] &&
		  cache_ram_state_and_ctag_cset_b_read__62_BITS__ETC___d168}} ;
  always@(cache_rg_width_code)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4: x__h26750 = 128'd1;
      default: x__h26750 = 128'd0;
    endcase
  end
  always@(cache_f_fabric_write_reqs$D_OUT)
  begin
    case (cache_f_fabric_write_reqs$D_OUT[163:161])
      3'b0, 3'b001, 3'b010, 3'b011:
	  _theResult___snd_fst_val__h5423 =
	      cache_f_fabric_write_reqs$D_OUT[163:161];
      default: _theResult___snd_fst_val__h5423 = 3'b111;
    endcase
  end
  always@(cache_rg_width_code)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'd2, 3'd3: size_val__h37134 = cache_rg_width_code;
      default: size_val__h37134 = 3'b100;
    endcase
  end
  always@(cache_f_fabric_write_reqs$D_OUT or
	  strobe128__h5405 or
	  strobe128__h5409 or strobe128__h5413 or strobe128__h5417)
  begin
    case (cache_f_fabric_write_reqs$D_OUT[163:161])
      3'b0: mem_req_wr_data_wstrb__h5535 = strobe128__h5405;
      3'b001: mem_req_wr_data_wstrb__h5535 = strobe128__h5409;
      3'b010: mem_req_wr_data_wstrb__h5535 = strobe128__h5413;
      3'b011: mem_req_wr_data_wstrb__h5535 = strobe128__h5417;
      default: mem_req_wr_data_wstrb__h5535 = 8'd0;
    endcase
  end
  always@(cache_f_fabric_write_reqs$D_OUT or word64__h5404)
  begin
    case (cache_f_fabric_write_reqs$D_OUT[163:161])
      3'b0, 3'b001, 3'b010, 3'b011:
	  mem_req_wr_data_wdata__h5534 = word64__h5404;
      default: mem_req_wr_data_wdata__h5534 =
		   cache_f_fabric_write_reqs$D_OUT[63:0];
    endcase
  end
  always@(cache_rg_addr or result__h8454 or result__h21300)
  begin
    case (cache_rg_addr[3:0])
      4'h0: _theResult___fst__h8452 = result__h8454;
      4'h8: _theResult___fst__h8452 = result__h21300;
      default: _theResult___fst__h8452 = 128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d480 or
	  SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d484)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  _theResult___fst__h28713 =
	      SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d480;
      4'h8:
	  _theResult___fst__h28713 =
	      SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d484;
      default: _theResult___fst__h28713 = 128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d460 or
	  SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d464 or
	  SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d468 or
	  SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d472)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d567 =
	      SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d460;
      4'h4:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d567 =
	      SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d464;
      4'h8:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d567 =
	      SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d468;
      4'hC:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d567 =
	      SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d472;
      default: IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d567 =
		   128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h22201 or
	  result__h22234 or result__h22267 or result__h22300)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d477 =
	      result__h22201;
      4'h4:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d477 =
	      result__h22234;
      4'h8:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d477 =
	      result__h22267;
      4'hC:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d477 =
	      result__h22300;
      default: IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d477 =
		   128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d420 or
	  SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d424 or
	  SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d428 or
	  SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d432 or
	  SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d436 or
	  SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d440 or
	  SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d444 or
	  SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d448)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d563 =
	      SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d420;
      4'h2:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d563 =
	      SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d424;
      4'h4:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d563 =
	      SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d428;
      4'h6:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d563 =
	      SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d432;
      4'h8:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d563 =
	      SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d436;
      4'hA:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d563 =
	      SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d440;
      4'hC:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d563 =
	      SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d444;
      4'hE:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d563 =
	      SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d448;
      default: IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d563 =
		   128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h21923 or
	  result__h21956 or
	  result__h21989 or
	  result__h22022 or
	  result__h22055 or
	  result__h22088 or result__h22121 or result__h22154)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d457 =
	      result__h21923;
      4'h2:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d457 =
	      result__h21956;
      4'h4:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d457 =
	      result__h21989;
      4'h6:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d457 =
	      result__h22022;
      4'h8:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d457 =
	      result__h22055;
      4'hA:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d457 =
	      result__h22088;
      4'hC:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d457 =
	      result__h22121;
      4'hE:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d457 =
	      result__h22154;
      default: IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d457 =
		   128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h21368 or
	  result__h21406 or
	  result__h21439 or
	  result__h21472 or
	  result__h21505 or
	  result__h21538 or
	  result__h21571 or
	  result__h21604 or
	  result__h21637 or
	  result__h21670 or
	  result__h21703 or
	  result__h21736 or
	  result__h21769 or
	  result__h21802 or result__h21835 or result__h21868)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d417 =
	      result__h21368;
      4'h1:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d417 =
	      result__h21406;
      4'h2:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d417 =
	      result__h21439;
      4'h3:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d417 =
	      result__h21472;
      4'h4:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d417 =
	      result__h21505;
      4'h5:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d417 =
	      result__h21538;
      4'h6:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d417 =
	      result__h21571;
      4'h7:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d417 =
	      result__h21604;
      4'h8:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d417 =
	      result__h21637;
      4'h9:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d417 =
	      result__h21670;
      4'hA:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d417 =
	      result__h21703;
      4'hB:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d417 =
	      result__h21736;
      4'hC:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d417 =
	      result__h21769;
      4'hD:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d417 =
	      result__h21802;
      4'hE:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d417 =
	      result__h21835;
      4'hF:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d417 =
	      result__h21868;
    endcase
  end
  always@(cache_rg_width_code or
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d417 or
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d457 or
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d477 or
	  _theResult___fst__h8452 or
	  cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312)
  begin
    case (cache_rg_width_code)
      3'd0:
	  x__h21357 =
	      IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d417;
      3'd1:
	  x__h21357 =
	      IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d457;
      3'd2:
	  x__h21357 =
	      IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d477;
      3'd3: x__h21357 = _theResult___fst__h8452;
      3'd4:
	  x__h21357 =
	      cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[127:0];
      default: x__h21357 = 128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d326 or
	  SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d331 or
	  SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d336 or
	  SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d341 or
	  SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d346 or
	  SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d351 or
	  SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d356 or
	  SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d361 or
	  SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d365 or
	  SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d370 or
	  SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d375 or
	  SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d380 or
	  SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d385 or
	  SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d390 or
	  SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d395 or
	  SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d400)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d555 =
	      SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d326;
      4'h1:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d555 =
	      SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d331;
      4'h2:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d555 =
	      SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d336;
      4'h3:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d555 =
	      SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d341;
      4'h4:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d555 =
	      SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d346;
      4'h5:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d555 =
	      SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d351;
      4'h6:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d555 =
	      SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d356;
      4'h7:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d555 =
	      SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d361;
      4'h8:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d555 =
	      SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d365;
      4'h9:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d555 =
	      SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d370;
      4'hA:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d555 =
	      SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d375;
      4'hB:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d555 =
	      SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d380;
      4'hC:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d555 =
	      SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d385;
      4'hD:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d555 =
	      SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d390;
      4'hE:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d555 =
	      SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d395;
      4'hF:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d555 =
	      SEXT_cache_ram_word128_set_b_read__96_AND_cach_ETC___d400;
    endcase
  end
  always@(cache_rg_width_code or
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d555 or
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d563 or
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d567 or
	  _theResult___fst__h28713 or
	  cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312)
  begin
    case (cache_rg_width_code)
      3'd0:
	  x__h27708 =
	      IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d555;
      3'd1:
	  x__h27708 =
	      IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d563;
      3'd2:
	  x__h27708 =
	      IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d567;
      3'd3: x__h27708 = _theResult___fst__h28713;
      3'd4:
	  x__h27708 =
	      cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312[127:0];
      default: x__h27708 = 128'd0;
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or cache_rg_st_amo_val)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d688 =
	      { cache_ram_word128_set$DOB[127:32],
		cache_rg_st_amo_val[31:0] };
      4'h4:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d688 =
	      { cache_ram_word128_set$DOB[127:64],
		cache_rg_st_amo_val[31:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h8:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d688 =
	      { cache_ram_word128_set$DOB[127:96],
		cache_rg_st_amo_val[31:0],
		cache_ram_word128_set$DOB[63:0] };
      4'hC:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d688 =
	      { cache_rg_st_amo_val[31:0], cache_ram_word128_set$DOB[95:0] };
      default: IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d688 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or cache_rg_st_amo_val)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d662 =
	      { cache_ram_word128_set$DOB[127:8], cache_rg_st_amo_val[7:0] };
      4'h1:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d662 =
	      { cache_ram_word128_set$DOB[127:16],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[7:0] };
      4'h2:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d662 =
	      { cache_ram_word128_set$DOB[127:24],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[15:0] };
      4'h3:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d662 =
	      { cache_ram_word128_set$DOB[127:32],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[23:0] };
      4'h4:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d662 =
	      { cache_ram_word128_set$DOB[127:40],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h5:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d662 =
	      { cache_ram_word128_set$DOB[127:48],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[39:0] };
      4'h6:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d662 =
	      { cache_ram_word128_set$DOB[127:56],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[47:0] };
      4'h7:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d662 =
	      { cache_ram_word128_set$DOB[127:64],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[55:0] };
      4'h8:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d662 =
	      { cache_ram_word128_set$DOB[127:72],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[63:0] };
      4'h9:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d662 =
	      { cache_ram_word128_set$DOB[127:80],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[71:0] };
      4'hA:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d662 =
	      { cache_ram_word128_set$DOB[127:88],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[79:0] };
      4'hB:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d662 =
	      { cache_ram_word128_set$DOB[127:96],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[87:0] };
      4'hC:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d662 =
	      { cache_ram_word128_set$DOB[127:104],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[95:0] };
      4'hD:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d662 =
	      { cache_ram_word128_set$DOB[127:112],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[103:0] };
      4'hE:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d662 =
	      { cache_ram_word128_set$DOB[127:120],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[111:0] };
      4'hF:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d662 =
	      { cache_rg_st_amo_val[7:0], cache_ram_word128_set$DOB[119:0] };
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or cache_rg_st_amo_val)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d679 =
	      { cache_ram_word128_set$DOB[127:16],
		cache_rg_st_amo_val[15:0] };
      4'h2:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d679 =
	      { cache_ram_word128_set$DOB[127:32],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[15:0] };
      4'h4:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d679 =
	      { cache_ram_word128_set$DOB[127:48],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h6:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d679 =
	      { cache_ram_word128_set$DOB[127:64],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[47:0] };
      4'h8:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d679 =
	      { cache_ram_word128_set$DOB[127:80],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[63:0] };
      4'hA:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d679 =
	      { cache_ram_word128_set$DOB[127:96],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[79:0] };
      4'hC:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d679 =
	      { cache_ram_word128_set$DOB[127:112],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[95:0] };
      4'hE:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d679 =
	      { cache_rg_st_amo_val[15:0], cache_ram_word128_set$DOB[111:0] };
      default: IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d679 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or cache_rg_st_amo_val)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q49 =
	      { cache_ram_word128_set$DOB[127:64],
		cache_rg_st_amo_val[63:0] };
      4'h8:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q49 =
	      { cache_rg_st_amo_val[63:0], cache_ram_word128_set$DOB[63:0] };
      default: CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q49 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_width_code or
	  cache_ram_word128_set$DOB or
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d662 or
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d679 or
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d688 or
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q49 or
	  cache_rg_st_amo_val)
  begin
    case (cache_rg_width_code)
      3'd0:
	  x__h23770 =
	      IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d662;
      3'd1:
	  x__h23770 =
	      IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d679;
      3'd2:
	  x__h23770 =
	      IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d688;
      3'd3:
	  x__h23770 = CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q49;
      3'd4: x__h23770 = cache_rg_st_amo_val[127:0];
      default: x__h23770 = cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_amo_funct7 or
	  new_st_val__h28832 or
	  new_st_val__h27656 or
	  w2__h27411 or
	  new_st_val__h28804 or
	  new_st_val__h28812 or
	  new_st_val__h28808 or
	  new_st_val__h28827 or new_st_val__h28816 or new_st_val__h28821)
  begin
    case (cache_rg_amo_funct7[6:2])
      5'b0: _theResult_____2__h27417 = new_st_val__h27656;
      5'b00001: _theResult_____2__h27417 = w2__h27411;
      5'b00100: _theResult_____2__h27417 = new_st_val__h28804;
      5'b01000: _theResult_____2__h27417 = new_st_val__h28812;
      5'b01100: _theResult_____2__h27417 = new_st_val__h28808;
      5'b10000: _theResult_____2__h27417 = new_st_val__h28827;
      5'b11000: _theResult_____2__h27417 = new_st_val__h28816;
      5'b11100: _theResult_____2__h27417 = new_st_val__h28821;
      default: _theResult_____2__h27417 = new_st_val__h28832;
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or x__h27561)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d798 =
	      { cache_ram_word128_set$DOB[127:32], x__h27561[31:0] };
      4'h4:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d798 =
	      { cache_ram_word128_set$DOB[127:64],
		x__h27561[31:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h8:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d798 =
	      { cache_ram_word128_set$DOB[127:96],
		x__h27561[31:0],
		cache_ram_word128_set$DOB[63:0] };
      4'hC:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d798 =
	      { x__h27561[31:0], cache_ram_word128_set$DOB[95:0] };
      default: IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d798 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or x__h27561)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d789 =
	      { cache_ram_word128_set$DOB[127:16], x__h27561[15:0] };
      4'h2:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d789 =
	      { cache_ram_word128_set$DOB[127:32],
		x__h27561[15:0],
		cache_ram_word128_set$DOB[15:0] };
      4'h4:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d789 =
	      { cache_ram_word128_set$DOB[127:48],
		x__h27561[15:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h6:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d789 =
	      { cache_ram_word128_set$DOB[127:64],
		x__h27561[15:0],
		cache_ram_word128_set$DOB[47:0] };
      4'h8:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d789 =
	      { cache_ram_word128_set$DOB[127:80],
		x__h27561[15:0],
		cache_ram_word128_set$DOB[63:0] };
      4'hA:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d789 =
	      { cache_ram_word128_set$DOB[127:96],
		x__h27561[15:0],
		cache_ram_word128_set$DOB[79:0] };
      4'hC:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d789 =
	      { cache_ram_word128_set$DOB[127:112],
		x__h27561[15:0],
		cache_ram_word128_set$DOB[95:0] };
      4'hE:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d789 =
	      { x__h27561[15:0], cache_ram_word128_set$DOB[111:0] };
      default: IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d789 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or x__h27561)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d772 =
	      { cache_ram_word128_set$DOB[127:8], x__h27561[7:0] };
      4'h1:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d772 =
	      { cache_ram_word128_set$DOB[127:16],
		x__h27561[7:0],
		cache_ram_word128_set$DOB[7:0] };
      4'h2:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d772 =
	      { cache_ram_word128_set$DOB[127:24],
		x__h27561[7:0],
		cache_ram_word128_set$DOB[15:0] };
      4'h3:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d772 =
	      { cache_ram_word128_set$DOB[127:32],
		x__h27561[7:0],
		cache_ram_word128_set$DOB[23:0] };
      4'h4:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d772 =
	      { cache_ram_word128_set$DOB[127:40],
		x__h27561[7:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h5:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d772 =
	      { cache_ram_word128_set$DOB[127:48],
		x__h27561[7:0],
		cache_ram_word128_set$DOB[39:0] };
      4'h6:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d772 =
	      { cache_ram_word128_set$DOB[127:56],
		x__h27561[7:0],
		cache_ram_word128_set$DOB[47:0] };
      4'h7:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d772 =
	      { cache_ram_word128_set$DOB[127:64],
		x__h27561[7:0],
		cache_ram_word128_set$DOB[55:0] };
      4'h8:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d772 =
	      { cache_ram_word128_set$DOB[127:72],
		x__h27561[7:0],
		cache_ram_word128_set$DOB[63:0] };
      4'h9:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d772 =
	      { cache_ram_word128_set$DOB[127:80],
		x__h27561[7:0],
		cache_ram_word128_set$DOB[71:0] };
      4'hA:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d772 =
	      { cache_ram_word128_set$DOB[127:88],
		x__h27561[7:0],
		cache_ram_word128_set$DOB[79:0] };
      4'hB:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d772 =
	      { cache_ram_word128_set$DOB[127:96],
		x__h27561[7:0],
		cache_ram_word128_set$DOB[87:0] };
      4'hC:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d772 =
	      { cache_ram_word128_set$DOB[127:104],
		x__h27561[7:0],
		cache_ram_word128_set$DOB[95:0] };
      4'hD:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d772 =
	      { cache_ram_word128_set$DOB[127:112],
		x__h27561[7:0],
		cache_ram_word128_set$DOB[103:0] };
      4'hE:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d772 =
	      { cache_ram_word128_set$DOB[127:120],
		x__h27561[7:0],
		cache_ram_word128_set$DOB[111:0] };
      4'hF:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d772 =
	      { x__h27561[7:0], cache_ram_word128_set$DOB[119:0] };
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or x__h27561)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q52 =
	      { cache_ram_word128_set$DOB[127:64], x__h27561 };
      4'h8:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q52 =
	      { x__h27561, cache_ram_word128_set$DOB[63:0] };
      default: CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q52 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_width_code or
	  cache_ram_word128_set$DOB or
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d772 or
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d789 or
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d798 or
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q52 or
	  x__h27561)
  begin
    case (cache_rg_width_code)
      3'd0:
	  x__h27470 =
	      IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d772;
      3'd1:
	  x__h27470 =
	      IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d789;
      3'd2:
	  x__h27470 =
	      IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d798;
      3'd3:
	  x__h27470 = CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q52;
      3'd4: x__h27470 = { 64'd0, x__h27561 };
      default: x__h27470 = cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_addr or
	  result__h35996 or
	  result__h36029 or result__h36062 or result__h36095)
  begin
    case (cache_rg_addr[2:0])
      3'd0:
	  IF_cache_rg_addr_37_BITS_2_TO_0_001_EQ_0_002_T_ETC___d1069 =
	      result__h35996;
      3'd2:
	  IF_cache_rg_addr_37_BITS_2_TO_0_001_EQ_0_002_T_ETC___d1069 =
	      result__h36029;
      3'd4:
	  IF_cache_rg_addr_37_BITS_2_TO_0_001_EQ_0_002_T_ETC___d1069 =
	      result__h36062;
      3'd6:
	  IF_cache_rg_addr_37_BITS_2_TO_0_001_EQ_0_002_T_ETC___d1069 =
	      result__h36095;
      default: IF_cache_rg_addr_37_BITS_2_TO_0_001_EQ_0_002_T_ETC___d1069 =
		   128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h35699 or
	  result__h35735 or
	  result__h35768 or
	  result__h35801 or
	  result__h35834 or
	  result__h35867 or result__h35900 or result__h35933)
  begin
    case (cache_rg_addr[2:0])
      3'd0:
	  IF_cache_rg_addr_37_BITS_2_TO_0_001_EQ_0_002_T_ETC___d1049 =
	      result__h35699;
      3'd1:
	  IF_cache_rg_addr_37_BITS_2_TO_0_001_EQ_0_002_T_ETC___d1049 =
	      result__h35735;
      3'd2:
	  IF_cache_rg_addr_37_BITS_2_TO_0_001_EQ_0_002_T_ETC___d1049 =
	      result__h35768;
      3'd3:
	  IF_cache_rg_addr_37_BITS_2_TO_0_001_EQ_0_002_T_ETC___d1049 =
	      result__h35801;
      3'd4:
	  IF_cache_rg_addr_37_BITS_2_TO_0_001_EQ_0_002_T_ETC___d1049 =
	      result__h35834;
      3'd5:
	  IF_cache_rg_addr_37_BITS_2_TO_0_001_EQ_0_002_T_ETC___d1049 =
	      result__h35867;
      3'd6:
	  IF_cache_rg_addr_37_BITS_2_TO_0_001_EQ_0_002_T_ETC___d1049 =
	      result__h35900;
      3'd7:
	  IF_cache_rg_addr_37_BITS_2_TO_0_001_EQ_0_002_T_ETC___d1049 =
	      result__h35933;
    endcase
  end
  always@(cache_rg_addr or result__h36146 or result__h36179)
  begin
    case (cache_rg_addr[2:0])
      3'd0:
	  CASE_cache_rg_addr_BITS_2_TO_0_0_result6146_4__ETC__q54 =
	      result__h36146;
      3'd4:
	  CASE_cache_rg_addr_BITS_2_TO_0_0_result6146_4__ETC__q54 =
	      result__h36179;
      default: CASE_cache_rg_addr_BITS_2_TO_0_0_result6146_4__ETC__q54 =
		   128'd0;
    endcase
  end
  always@(cache_rg_width_code or
	  IF_cache_rg_addr_37_BITS_2_TO_0_001_EQ_0_002_T_ETC___d1049 or
	  IF_cache_rg_addr_37_BITS_2_TO_0_001_EQ_0_002_T_ETC___d1069 or
	  CASE_cache_rg_addr_BITS_2_TO_0_0_result6146_4__ETC__q54 or
	  _theResult___fst__h35638 or word128__h35533)
  begin
    case (cache_rg_width_code)
      3'd0:
	  x__h35688 =
	      IF_cache_rg_addr_37_BITS_2_TO_0_001_EQ_0_002_T_ETC___d1049;
      3'd1:
	  x__h35688 =
	      IF_cache_rg_addr_37_BITS_2_TO_0_001_EQ_0_002_T_ETC___d1069;
      3'd2:
	  x__h35688 = CASE_cache_rg_addr_BITS_2_TO_0_0_result6146_4__ETC__q54;
      3'd3: x__h35688 = _theResult___fst__h35638;
      3'd4: x__h35688 = word128__h35533;
      default: x__h35688 = 128'd0;
    endcase
  end
  always@(cache_rg_addr or result__h39539 or result__h39568)
  begin
    case (cache_rg_addr[3:0])
      4'h0: _theResult___fst__h39537 = result__h39539;
      4'h8: _theResult___fst__h39537 = result__h39568;
      default: _theResult___fst__h39537 = 128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h39389 or
	  result__h39421 or result__h39453 or result__h39485)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d1207 =
	      result__h39389;
      4'h4:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d1207 =
	      result__h39421;
      4'h8:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d1207 =
	      result__h39453;
      4'hC:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d1207 =
	      result__h39485;
      default: IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d1207 =
		   128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h39119 or
	  result__h39151 or
	  result__h39183 or
	  result__h39215 or
	  result__h39247 or
	  result__h39279 or result__h39311 or result__h39343)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d1195 =
	      result__h39119;
      4'h2:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d1195 =
	      result__h39151;
      4'h4:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d1195 =
	      result__h39183;
      4'h6:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d1195 =
	      result__h39215;
      4'h8:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d1195 =
	      result__h39247;
      4'hA:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d1195 =
	      result__h39279;
      4'hC:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d1195 =
	      result__h39311;
      4'hE:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d1195 =
	      result__h39343;
      default: IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d1195 =
		   128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h37909 or
	  result__h38617 or
	  result__h38649 or
	  result__h38681 or
	  result__h38713 or
	  result__h38745 or
	  result__h38777 or
	  result__h38809 or
	  result__h38841 or
	  result__h38873 or
	  result__h38905 or
	  result__h38937 or
	  result__h38969 or
	  result__h39001 or result__h39033 or result__h39065)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d1171 =
	      result__h37909;
      4'h1:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d1171 =
	      result__h38617;
      4'h2:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d1171 =
	      result__h38649;
      4'h3:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d1171 =
	      result__h38681;
      4'h4:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d1171 =
	      result__h38713;
      4'h5:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d1171 =
	      result__h38745;
      4'h6:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d1171 =
	      result__h38777;
      4'h7:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d1171 =
	      result__h38809;
      4'h8:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d1171 =
	      result__h38841;
      4'h9:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d1171 =
	      result__h38873;
      4'hA:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d1171 =
	      result__h38905;
      4'hB:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d1171 =
	      result__h38937;
      4'hC:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d1171 =
	      result__h38969;
      4'hD:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d1171 =
	      result__h39001;
      4'hE:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d1171 =
	      result__h39033;
      4'hF:
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d1171 =
	      result__h39065;
    endcase
  end
  always@(cache_rg_width_code or
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d1171 or
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d1195 or
	  IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d1207 or
	  _theResult___fst__h39537 or x__h35688)
  begin
    case (cache_rg_width_code)
      3'd0:
	  x__h37828 =
	      IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d1171;
      3'd1:
	  x__h37828 =
	      IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d1195;
      3'd2:
	  x__h37828 =
	      IF_cache_rg_addr_37_BITS_3_TO_0_93_EQ_0x0_46_T_ETC___d1207;
      3'd3: x__h37828 = _theResult___fst__h39537;
      3'd4: x__h37828 = x__h35688;
      default: x__h37828 = 128'd0;
    endcase
  end
  always@(cache_rg_amo_funct7 or
	  new_st_val__h39658 or
	  new_st_val__h37776 or
	  w2__h27411 or
	  new_st_val__h39630 or
	  new_st_val__h39638 or
	  new_st_val__h39634 or
	  new_st_val__h39653 or new_st_val__h39642 or new_st_val__h39647)
  begin
    case (cache_rg_amo_funct7[6:2])
      5'b0: _theResult_____2__h37670 = new_st_val__h37776;
      5'b00001: _theResult_____2__h37670 = w2__h27411;
      5'b00100: _theResult_____2__h37670 = new_st_val__h39630;
      5'b01000: _theResult_____2__h37670 = new_st_val__h39638;
      5'b01100: _theResult_____2__h37670 = new_st_val__h39634;
      5'b10000: _theResult_____2__h37670 = new_st_val__h39653;
      5'b11000: _theResult_____2__h37670 = new_st_val__h39642;
      5'b11100: _theResult_____2__h37670 = new_st_val__h39647;
      default: _theResult_____2__h37670 = new_st_val__h39658;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cache_cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	cache_crg_commit <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_crg_sb_to_load_delay <= `BSV_ASSIGNMENT_DELAY 11'd0;
	cache_ctr_wr_rsps_pending_inrg <= `BSV_ASSIGNMENT_DELAY 4'd0;
	cache_ctr_wr_rsps_pending_outrg <= `BSV_ASSIGNMENT_DELAY 4'd0;
	cache_master_xactor_clearing <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_master_xactor_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	    98'h0AAAAAAAAAAAAAAAAAAAAAAAA;
	cache_master_xactor_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	    98'h0AAAAAAAAAAAAAAAAAAAAAAAA;
	cache_master_xactor_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY 7'd42;
	cache_master_xactor_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	    73'h0AAAAAAAAAAAAAAAAAA;
	cache_master_xactor_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	    75'h2AAAAAAAAAAAAAAAAAA;
	cache_rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY 7'd0;
	cache_rg_lower_word64_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_state <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (cache_cfg_verbosity$EN)
	  cache_cfg_verbosity <= `BSV_ASSIGNMENT_DELAY
	      cache_cfg_verbosity$D_IN;
	if (cache_crg_commit$EN)
	  cache_crg_commit <= `BSV_ASSIGNMENT_DELAY cache_crg_commit$D_IN;
	if (cache_crg_sb_to_load_delay$EN)
	  cache_crg_sb_to_load_delay <= `BSV_ASSIGNMENT_DELAY
	      cache_crg_sb_to_load_delay$D_IN;
	if (cache_ctr_wr_rsps_pending_inrg$EN)
	  cache_ctr_wr_rsps_pending_inrg <= `BSV_ASSIGNMENT_DELAY
	      cache_ctr_wr_rsps_pending_inrg$D_IN;
	if (cache_ctr_wr_rsps_pending_outrg$EN)
	  cache_ctr_wr_rsps_pending_outrg <= `BSV_ASSIGNMENT_DELAY
	      cache_ctr_wr_rsps_pending_outrg$D_IN;
	if (cache_master_xactor_clearing$EN)
	  cache_master_xactor_clearing <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_clearing$D_IN;
	if (cache_master_xactor_shim_arff_rv$EN)
	  cache_master_xactor_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_arff_rv$D_IN;
	if (cache_master_xactor_shim_awff_rv$EN)
	  cache_master_xactor_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_awff_rv$D_IN;
	if (cache_master_xactor_shim_bff_rv$EN)
	  cache_master_xactor_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_bff_rv$D_IN;
	if (cache_master_xactor_shim_rff_rv$EN)
	  cache_master_xactor_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_rff_rv$D_IN;
	if (cache_master_xactor_shim_wff_rv$EN)
	  cache_master_xactor_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_wff_rv$D_IN;
	if (cache_rg_cset_in_cache$EN)
	  cache_rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_cset_in_cache$D_IN;
	if (cache_rg_lower_word64_full$EN)
	  cache_rg_lower_word64_full <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_lower_word64_full$D_IN;
	if (cache_rg_lrsc_valid$EN)
	  cache_rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_lrsc_valid$D_IN;
	if (cache_rg_state$EN)
	  cache_rg_state <= `BSV_ASSIGNMENT_DELAY cache_rg_state$D_IN;
      end
    if (cache_rg_addr$EN)
      cache_rg_addr <= `BSV_ASSIGNMENT_DELAY cache_rg_addr$D_IN;
    if (cache_rg_amo_funct7$EN)
      cache_rg_amo_funct7 <= `BSV_ASSIGNMENT_DELAY cache_rg_amo_funct7$D_IN;
    if (cache_rg_error_during_refill$EN)
      cache_rg_error_during_refill <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_error_during_refill$D_IN;
    if (cache_rg_exc_code$EN)
      cache_rg_exc_code <= `BSV_ASSIGNMENT_DELAY cache_rg_exc_code$D_IN;
    if (cache_rg_is_unsigned$EN)
      cache_rg_is_unsigned <= `BSV_ASSIGNMENT_DELAY cache_rg_is_unsigned$D_IN;
    if (cache_rg_ld_val$EN)
      cache_rg_ld_val <= `BSV_ASSIGNMENT_DELAY cache_rg_ld_val$D_IN;
    if (cache_rg_lower_tag$EN)
      cache_rg_lower_tag <= `BSV_ASSIGNMENT_DELAY cache_rg_lower_tag$D_IN;
    if (cache_rg_lower_word64$EN)
      cache_rg_lower_word64 <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_lower_word64$D_IN;
    if (cache_rg_lrsc_pa$EN)
      cache_rg_lrsc_pa <= `BSV_ASSIGNMENT_DELAY cache_rg_lrsc_pa$D_IN;
    if (cache_rg_op$EN) cache_rg_op <= `BSV_ASSIGNMENT_DELAY cache_rg_op$D_IN;
    if (cache_rg_pa$EN) cache_rg_pa <= `BSV_ASSIGNMENT_DELAY cache_rg_pa$D_IN;
    if (cache_rg_pte_pa$EN)
      cache_rg_pte_pa <= `BSV_ASSIGNMENT_DELAY cache_rg_pte_pa$D_IN;
    if (cache_rg_st_amo_val$EN)
      cache_rg_st_amo_val <= `BSV_ASSIGNMENT_DELAY cache_rg_st_amo_val$D_IN;
    if (cache_rg_width_code$EN)
      cache_rg_width_code <= `BSV_ASSIGNMENT_DELAY cache_rg_width_code$D_IN;
    if (cache_rg_word128_set_in_cache$EN)
      cache_rg_word128_set_in_cache <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_word128_set_in_cache$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cache_cfg_verbosity = 4'hA;
    cache_crg_commit = 1'h0;
    cache_crg_sb_to_load_delay = 11'h2AA;
    cache_ctr_wr_rsps_pending_inrg = 4'hA;
    cache_ctr_wr_rsps_pending_outrg = 4'hA;
    cache_master_xactor_clearing = 1'h0;
    cache_master_xactor_shim_arff_rv = 98'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    cache_master_xactor_shim_awff_rv = 98'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    cache_master_xactor_shim_bff_rv = 7'h2A;
    cache_master_xactor_shim_rff_rv = 73'h0AAAAAAAAAAAAAAAAAA;
    cache_master_xactor_shim_wff_rv = 75'h2AAAAAAAAAAAAAAAAAA;
    cache_rg_addr = 32'hAAAAAAAA;
    cache_rg_amo_funct7 = 7'h2A;
    cache_rg_cset_in_cache = 7'h2A;
    cache_rg_error_during_refill = 1'h0;
    cache_rg_exc_code = 6'h2A;
    cache_rg_is_unsigned = 1'h0;
    cache_rg_ld_val = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    cache_rg_lower_tag = 1'h0;
    cache_rg_lower_word64 = 64'hAAAAAAAAAAAAAAAA;
    cache_rg_lower_word64_full = 1'h0;
    cache_rg_lrsc_pa = 32'hAAAAAAAA;
    cache_rg_lrsc_valid = 1'h0;
    cache_rg_op = 2'h2;
    cache_rg_pa = 32'hAAAAAAAA;
    cache_rg_pte_pa = 32'hAAAAAAAA;
    cache_rg_st_amo_val = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    cache_rg_state = 4'hA;
    cache_rg_width_code = 3'h2;
    cache_rg_word128_set_in_cache = 8'hAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("'h%h", mem_req_wr_addr_awaddr__h5317);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("'h%h", _theResult___snd_fst_val__h5423, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("'h%h", mem_req_wr_data_wdata__h5534);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("'h%h", mem_req_wr_data_wstrb__h5535);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("'h%h", mem_req_wr_data_wuser__h5537, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 7'd127 &&
	  cache_cfg_verbosity != 4'd0 &&
	  !cache_f_reset_reqs$D_OUT)
	begin
	  v__h6549 = $stime;
	  #0;
	end
    v__h6543 = v__h6549 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 7'd127 &&
	  cache_cfg_verbosity != 4'd0 &&
	  !cache_f_reset_reqs$D_OUT)
	$display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		 v__h6543,
		 "D_MMU_Cache",
		 $signed(32'd128),
		 $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 7'd127 &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94 &&
	  cache_f_reset_reqs$D_OUT)
	begin
	  v__h6648 = $stime;
	  #0;
	end
    v__h6642 = v__h6648 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 7'd127 &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94 &&
	  cache_f_reset_reqs$D_OUT)
	$display("%0d: %s.rl_reset: Flushed", v__h6642, "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	begin
	  v__h7101 = $stime;
	  #0;
	end
    v__h7095 = v__h7101 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h",
		 v__h7095,
		 "D_MMU_Cache",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$display("        eaddr = {CTag 0x%0h  CSet 0x%0h  Word128 0x%0h  Byte 0x%0h}",
		 pa_ctag__h8020,
		 cache_rg_addr[11:5],
		 cache_rg_addr[4],
		 cache_rg_addr[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("        CSet 0x%0x: (state, tag):", cache_rg_addr[11:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(" (");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94 &&
	  cache_ram_state_and_ctag_cset$DOB[22])
	$write("CTAG_CLEAN");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94 &&
	  !cache_ram_state_and_ctag_cset$DOB[22])
	$write("CTAG_EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94 &&
	  cache_ram_state_and_ctag_cset$DOB[22])
	$write(", 0x%0x", cache_ram_state_and_ctag_cset$DOB[21:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94 &&
	  !cache_ram_state_and_ctag_cset$DOB[22])
	$write(", --");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(")");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("        CSet 0x%0x, Word128 0x%0x: ",
	       cache_rg_addr[11:5],
	       cache_rg_addr[4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(" 0x%0x", cache_ram_word128_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("    TLB result: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("VM_Xlate_Result { ", "outcome: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("VM_XLATE_OK");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "pa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("'h%h", cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("'h%h", 6'h2A, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_41_EQ_0_42_OR_cache_rg_op_41_EQ_2__ETC___d509)
	begin
	  v__h22500 = $stime;
	  #0;
	end
    v__h22494 = v__h22500 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_41_EQ_0_42_OR_cache_rg_op_41_EQ_2__ETC___d509)
	$display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		 v__h22494,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312,
		 130'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit_port1__read__35_AND_cache_soc_ETC___d523)
	$display("        AMO LR: reserving PA 0x%0h", cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_41_EQ_0_42_OR_cache_rg_op_41_EQ_2__ETC___d509)
	$display("        Read-hit: addr 0x%0h word128 0x%0h",
		 cache_rg_addr,
		 cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_41_EQ_0_42_OR_cache_rg_op_41_EQ_2__ETC___d525)
	$display("        Read Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct7_44_BITS_6_TO_2_45_EQ_0b10__ETC___d530)
	$display("        AMO LR: cache refill: cancelling LR/SC reservation for PA 0x%0h",
		 cache_rg_lrsc_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op == 2'd1 &&
	  cache_rg_addr_37_EQ_cache_rg_lrsc_pa_55___d213 &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$display("        ST: cancelling LR/SC reservation for PA",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit_port1__read__35_AND_cache_soc_ETC___d836)
	$display("        AMO SC: fail: reserved addr 0x%0h, this address 0x%0h",
		 cache_rg_lrsc_pa,
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct7[6:2] == 5'b00011 &&
	  !cache_rg_lrsc_valid &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$display("        AMO SC: fail due to invalid LR/SC reservation");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct7[6:2] == 5'b00011 &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$display("        AMO SC result = %0d", lrsc_result__h22890);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_41_EQ_0_42_79_AND_NOT_cache_rg_ETC___d848)
	$display("        Write-Cache-Hit: pa 0x%0h word128 0x%0h",
		 cache_rg_addr,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_41_EQ_0_42_79_AND_NOT_cache_rg_ETC___d848)
	$write("        New Word128_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_41_EQ_0_42_79_AND_NOT_cache_rg_ETC___d848)
	$write("        CSet 0x%0x, Word128 0x%0x: ",
	       cache_rg_addr[11:5],
	       cache_rg_addr[4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_41_EQ_0_42_79_AND_NOT_cache_rg_ETC___d848)
	$write(" 0x%0x", { x__h23641, x__h23770 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_41_EQ_0_42_79_AND_NOT_cache_rg_ETC___d848)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  (cache_rg_op == 2'd1 ||
	   cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	  NOT_cache_rg_op_41_EQ_2_43_80_OR_NOT_cache_rg__ETC___d851)
	$display("        Write-Cache-Miss: pa 0x%0h word128 0x%0h",
		 cache_rg_addr,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_41_EQ_0_42_79_AND_NOT_cache_rg_ETC___d858)
	$display("        Write-Cache-Hit/Miss: eaddr 0x%0h word128 0x%0h",
		 cache_rg_addr,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_41_EQ_0_42_79_AND_NOT_cache_rg_ETC___d858)
	$display("        => rl_write_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_41_EQ_2_43_AND_cache_rg_amo_funct7_ETC___d863)
	begin
	  v__h26987 = $stime;
	  #0;
	end
    v__h26981 = v__h26987 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_41_EQ_2_43_AND_cache_rg_amo_funct7_ETC___d863)
	$display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		 v__h26981,
		 "D_MMU_Cache",
		 32'd0,
		 130'd1,
		 130'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_41_EQ_2_43_AND_cache_rg_amo_funct7_ETC___d863)
	$display("        AMO SC: Fail response for addr 0x%0h",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_41_EQ_1_49_21_AND_NOT_cache_rg_ETC___d868)
	$display("        AMO Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d874)
	$display("        AMO: addr 0x%0h amo_f7 0x%0h width_code %0d is_unsigned %0d rs2_val 0x%0h",
		 cache_rg_addr,
		 cache_rg_amo_funct7,
		 cache_rg_width_code,
		 cache_rg_is_unsigned,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d874)
	$display("          PA 0x%0h ", cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d874)
	$display("          Cache word128 0x%0h, load-result 0x%0h",
		 cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312,
		 cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d874)
	$display("          0x%0h  op  0x%0h -> 0x%0h",
		 cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312,
		 cache_ram_word128_set_b_read__96_AND_cache_ram_ETC___d312,
		 { 65'd0, x__h27561 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d874)
	$write("          New Word128_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d874)
	$write("        CSet 0x%0x, Word128 0x%0x: ",
	       cache_rg_addr[11:5],
	       cache_rg_addr[4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d874)
	$write(" 0x%0x",
	       { cache_ram_word128_set_b_read__96_BITS_129_TO_1_ETC___d597,
		 x__h27470 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d874)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_41_EQ_1_49_21_AND_NOT_cache_rg_ETC___d877)
	$display("        AMO_op: cancelling LR/SC reservation for PA",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  !cache_soc_map$m_is_mem_addr &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$display("    => IO_REQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_reset)
	begin
	  v__h6118 = $stime;
	  #0;
	end
    v__h6112 = v__h6118 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_reset)
	$display("%0d: %s: cache size %0d KB, associativity %0d, line size %0d bytes (= %0d XLEN words)",
		 v__h6112,
		 "D_MMU_Cache",
		 $signed(32'd4),
		 $signed(32'd1),
		 $signed(32'd32),
		 $signed(32'd8));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	begin
	  v__h35025 = $stime;
	  #0;
	end
    v__h35019 = v__h35025 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$display("%0d: %s.rl_io_read_req; width_code 0x%0h vaddr %0h  paddr %0h",
		 v__h35019,
		 "D_MMU_Cache",
		 cache_rg_width_code,
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("'h%h", fabric_addr__h37049);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("'h%h", size_val__h37134, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_maintain_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	begin
	  v__h36569 = $stime;
	  #0;
	end
    v__h36563 = v__h36569 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_maintain_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		 v__h36563,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 cache_rg_ld_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	begin
	  v__h36657 = $stime;
	  #0;
	end
    v__h36651 = v__h36657 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$display("%0d: %s: rl_io_write_req; width_code 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		 v__h36651,
		 "D_MMU_Cache",
		 cache_rg_width_code,
		 cache_rg_addr,
		 cache_rg_pa,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_SC_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	begin
	  v__h36875 = $stime;
	  #0;
	end
    v__h36869 = v__h36875 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_SC_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$display("%0d: %s: rl_io_AMO_SC_req; width_code 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		 v__h36869,
		 "D_MMU_Cache",
		 cache_rg_width_code,
		 cache_rg_addr,
		 cache_rg_pa,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_SC_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$display("    FAIL due to I/O address.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_SC_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	begin
	  v__h36997 = $stime;
	  #0;
	end
    v__h36991 = v__h36997 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$display("%0d: %s.rl_io_AMO_op_req; width_code 0x%0h vaddr %0h  paddr %0h",
		 v__h36991,
		 "D_MMU_Cache",
		 cache_rg_width_code,
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("'h%h", fabric_addr__h37049);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("'h%h", size_val__h37134, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__4_MINUS_c_ETC___d46 == 4'd0)
	begin
	  v__h40073 = $stime;
	  #0;
	end
    v__h40067 = v__h40073 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__4_MINUS_c_ETC___d46 == 4'd0)
	$display("%0d: ERROR: %s.rl_discard_write_rsp: unexpected W response (ctr_wr_rsps_pending.value == 0)",
		 v__h40067,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__4_MINUS_c_ETC___d46 == 4'd0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__4_MINUS_c_ETC___d46 == 4'd0)
	$write("AXI4_BFlit { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__4_MINUS_c_ETC___d46 == 4'd0)
	$write("'h%h", cache_master_xactor_shim_bff_rv$port1__read[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__4_MINUS_c_ETC___d46 == 4'd0)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__4_MINUS_c_ETC___d46 == 4'd0 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__4_MINUS_c_ETC___d46 == 4'd0 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__4_MINUS_c_ETC___d46 == 4'd0 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__4_MINUS_c_ETC___d46 == 4'd0 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd1 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__4_MINUS_c_ETC___d46 == 4'd0)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__4_MINUS_c_ETC___d46 == 4'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__4_MINUS_c_ETC___d46 == 4'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__4_MINUS_c_ETC___d46 == 4'd0)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	begin
	  v__h40320 = $stime;
	  #0;
	end
    v__h40314 = v__h40320 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("%0d: %s.rl_discard_write_rsp: pending %0d ",
	       v__h40314,
	       "D_MMU_Cache",
	       $unsigned(cache_ctr_wr_rsps_pending_inrg_read__4_MINUS_c_ETC___d46));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("AXI4_BFlit { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("'h%h", cache_master_xactor_shim_bff_rv$port1__read[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	begin
	  v__h40281 = $stime;
	  #0;
	end
    v__h40275 = v__h40281 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$display("%0d: %s.rl_discard_write_rsp: fabric response error: exit",
		 v__h40275,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("AXI4_BFlit { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("'h%h", cache_master_xactor_shim_bff_rv$port1__read[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd1 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	begin
	  v__h35382 = $stime;
	  #0;
	end
    v__h35376 = v__h35382 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$display("%0d: %s.rl_io_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		 v__h35376,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[71:68]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[67:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd1 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94 &&
	  cache_master_xactor_shim_rff_rv$port1__read[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94 &&
	  !cache_master_xactor_shim_rff_rv$port1__read[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	begin
	  v__h36344 = $stime;
	  #0;
	end
    v__h36338 = v__h36344 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		 v__h36338,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 { 1'd0, x__h35688 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	begin
	  v__h36458 = $stime;
	  #0;
	end
    v__h36452 = v__h36458 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		 v__h36452,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	begin
	  v__h37298 = $stime;
	  #0;
	end
    v__h37292 = v__h37298 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$display("%0d: %s.rl_io_AMO_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		 v__h37292,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[71:68]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[67:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd1 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94 &&
	  cache_master_xactor_shim_rff_rv$port1__read[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94 &&
	  !cache_master_xactor_shim_rff_rv$port1__read[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	begin
	  v__h37493 = $stime;
	  #0;
	end
    v__h37487 = v__h37493 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$display("%0d: %s: rl_io_AMO_read_rsp; f3 0x%0h  vaddr %0h  paddr %0h  word128 0x%0h",
		 v__h37487,
		 "D_MMU_Cache",
		 cache_rg_width_code,
		 cache_rg_addr,
		 cache_rg_pa,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	begin
	  v__h39766 = $stime;
	  #0;
	end
    v__h39760 = v__h39766 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		 v__h39760,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 { 65'd0,
		   IF_cache_rg_width_code_36_EQ_2_41_THEN_SEXT_IF_ETC___d1222 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	begin
	  v__h37591 = $stime;
	  #0;
	end
    v__h37585 = v__h37591 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$display("%0d: %s.rl_io_AMO_read_rsp: FABRIC_RSP_ERR: raising trap STORE_AMO_ACCESS_FAULT",
		 v__h37585,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	begin
	  v__h40711 = $stime;
	  #0;
	end
    v__h40705 = v__h40711 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("%0d: %m.req: op:", v__h40705);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94 &&
	  req_op == 2'd0)
	$write("CACHE_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94 &&
	  req_op == 2'd1)
	$write("CACHE_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94 &&
	  req_op != 2'd0 &&
	  req_op != 2'd1)
	$write("CACHE_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(" f3:%0d addr:0x%0h st_value:0x%0h",
	       req_width_code,
	       req_addr,
	       req_st_value,
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("    priv:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94 &&
	  req_priv == 2'b0)
	$write("U");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94 &&
	  req_priv == 2'b01)
	$write("S");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94 &&
	  req_priv == 2'b11)
	$write("M");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94 &&
	  req_priv != 2'b0 &&
	  req_priv != 2'b01 &&
	  req_priv != 2'b11)
	$write("RESERVED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(" sstatus_SUM:%0d mstatus_MXR:%0d satp:0x%0h",
	       req_sstatus_SUM,
	       req_mstatus_MXR,
	       req_satp,
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$display("    amo_funct7 = 0x%0h", req_amo_funct7);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req &&
	  req_width_code_EQ_0b0_311_OR_req_width_code_EQ_ETC___d1352)
	$display("    fa_req_ram_B tagCSet [0x%0x] word128_set [0x%0d]",
		 req_addr[11:5],
		 req_addr[11:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	begin
	  v__h31758 = $stime;
	  #0;
	end
    v__h31752 = v__h31758 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$display("%0d: %s.rl_start_cache_refill: ", v__h31752, "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("    To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("'h%h", cline_fabric_addr__h31811);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("'h%h", 8'd3);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("'h%h", 3'b011, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$display("    Victim way %0d; => CACHE_REFILL", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_12___d913)
	begin
	  v__h32719 = $stime;
	  #0;
	end
    v__h32713 = v__h32719 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_12___d913)
	$display("%0d: %s.rl_cache_refill_rsps_loop:",
		 v__h32713,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_12___d913)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_12___d913)
	$write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_12___d913)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[71:68]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_12___d913)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_12___d913)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[67:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_12___d913)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_12___d913 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_12___d913 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_12___d913 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_12___d913 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd1 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_12___d913)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_12___d913 &&
	  cache_master_xactor_shim_rff_rv$port1__read[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_12___d913 &&
	  !cache_master_xactor_shim_rff_rv$port1__read[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_12___d913)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_12___d913)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_12___d913)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	begin
	  v__h32981 = $stime;
	  #0;
	end
    v__h32975 = v__h32981 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d",
		 v__h32975,
		 "D_MMU_Cache",
		 access_exc_code__h5041);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_12___d913)
	$display("        64b fabric: concat with rg_lower_word64: new_word128 0x%0x",
		 { x__h33223, x__h33228 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  cache_rg_word128_set_in_cache[0] &&
	  (cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 ||
	   cache_rg_error_during_refill) &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$display("    => MODULE_EXCEPTION_RSP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  cache_rg_word128_set_in_cache[0] &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  !cache_rg_error_during_refill &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$display("    => CACHE_REREQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_12___d913)
	$display("        Updating Cache word128_set 0x%0h, word128_in_cline %0d) old => new",
		 cache_rg_word128_set_in_cache,
		 cache_rg_word128_set_in_cache[0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_12___d913)
	$write("        CSet 0x%0x, Word128 0x%0x: ",
	       cache_rg_word128_set_in_cache[7:1],
	       cache_rg_word128_set_in_cache[0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_12___d913)
	$write(" 0x%0x", cache_ram_word128_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_12___d913)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_12___d913)
	$write("        CSet 0x%0x, Word128 0x%0x: ",
	       cache_rg_word128_set_in_cache[7:1],
	       cache_rg_word128_set_in_cache[0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_12___d913)
	$write(" 0x%0x", { x__h33223, x__h33228 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_12___d913)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  !cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_12___d913)
	$display("        Recording rdata in rg_lower_word64");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_rereq &&
	  NOT_cache_cfg_verbosity_read__2_ULE_1_3___d94)
	$display("    fa_req_ram_B tagCSet [0x%0x] word128_set [0x%0d]",
		 cache_rg_addr[11:5],
		 cache_rg_addr[11:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
  end
  // synopsys translate_on
endmodule  // mkMMU_DCache

