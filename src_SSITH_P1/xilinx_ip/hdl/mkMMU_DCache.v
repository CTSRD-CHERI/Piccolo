//
// Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
//
// On Tue Aug 13 15:43:31 BST 2019
//
//
// Ports:
// Name                         I/O  size props
// RDY_set_verbosity              O     1 const
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1
// valid                          O     1
// addr                           O    32 reg
// word128_fst                    O     1
// word128_snd                    O   128
// st_amo_val_fst                 O     1
// st_amo_val_snd                 O   128
// exc                            O     1
// exc_code                       O     6 reg
// RDY_server_flush_request_put   O     1
// RDY_server_flush_response_get  O     1
// RDY_tlb_flush                  O     1
// mem_master_awid                O     4
// mem_master_awaddr              O    64
// mem_master_awlen               O     8
// mem_master_awsize              O     3
// mem_master_awburst             O     2
// mem_master_awlock              O     1
// mem_master_awcache             O     4
// mem_master_awprot              O     3
// mem_master_awqos               O     4
// mem_master_awregion            O     4
// mem_master_awvalid             O     1
// mem_master_wdata               O   128
// mem_master_wstrb               O    16
// mem_master_wlast               O     1
// mem_master_wuser               O     2
// mem_master_wvalid              O     1
// mem_master_bready              O     1
// mem_master_arid                O     4
// mem_master_araddr              O    64
// mem_master_arlen               O     8
// mem_master_arsize              O     3
// mem_master_arburst             O     2
// mem_master_arlock              O     1
// mem_master_arcache             O     4
// mem_master_arprot              O     3
// mem_master_arqos               O     4
// mem_master_arregion            O     4
// mem_master_arvalid             O     1
// mem_master_rready              O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_verbosity_verbosity        I     4 reg
// req_op                         I     2
// req_width_code                 I     3
// req_is_unsigned                I     1 reg
// req_amo_funct7                 I     7 reg
// req_addr                       I    32
// req_st_value                   I   129
// req_priv                       I     2 unused
// req_sstatus_SUM                I     1 unused
// req_mstatus_MXR                I     1 unused
// req_satp                       I    32 unused
// mem_master_awready             I     1
// mem_master_wready              I     1
// mem_master_bid                 I     4
// mem_master_bresp               I     2
// mem_master_arready             I     1
// mem_master_rid                 I     4
// mem_master_rdata               I   128
// mem_master_rresp               I     2
// mem_master_rlast               I     1
// mem_master_ruser               I     2
// EN_set_verbosity               I     1
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_req                         I     1
// EN_commit                      I     1
// EN_server_flush_request_put    I     1
// EN_server_flush_response_get   I     1
// EN_tlb_flush                   I     1 unused
// mem_master_bvalid              I     1
// mem_master_rvalid              I     1
//
// Combinational paths from inputs to outputs:
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> valid
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> word128_fst
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> word128_snd
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awid
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awaddr
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awlen
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awsize
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awburst
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awlock
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awcache
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awprot
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awqos
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awregion
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awuser
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awvalid
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_wdata
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_wstrb
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_wlast
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_wuser
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_wvalid
//   EN_req -> RDY_server_flush_request_put
//   EN_req -> RDY_tlb_flush
//   EN_req -> mem_master_arid
//   EN_req -> mem_master_araddr
//   EN_req -> mem_master_arlen
//   EN_req -> mem_master_arsize
//   EN_req -> mem_master_arburst
//   EN_req -> mem_master_arlock
//   EN_req -> mem_master_arcache
//   EN_req -> mem_master_arprot
//   EN_req -> mem_master_arqos
//   EN_req -> mem_master_arregion
//   EN_req -> mem_master_aruser
//   EN_req -> mem_master_arvalid
//   EN_commit -> st_amo_val_fst
//   EN_commit -> st_amo_val_snd
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMMU_DCache(CLK,
		    RST_N,

		    set_verbosity_verbosity,
		    EN_set_verbosity,
		    RDY_set_verbosity,

		    EN_server_reset_request_put,
		    RDY_server_reset_request_put,

		    EN_server_reset_response_get,
		    RDY_server_reset_response_get,

		    req_op,
		    req_width_code,
		    req_is_unsigned,
		    req_amo_funct7,
		    req_addr,
		    req_st_value,
		    req_priv,
		    req_sstatus_SUM,
		    req_mstatus_MXR,
		    req_satp,
		    EN_req,

		    EN_commit,

		    valid,

		    addr,

		    word128_fst,

		    word128_snd,

		    st_amo_val_fst,

		    st_amo_val_snd,

		    exc,

		    exc_code,

		    EN_server_flush_request_put,
		    RDY_server_flush_request_put,

		    EN_server_flush_response_get,
		    RDY_server_flush_response_get,

		    EN_tlb_flush,
		    RDY_tlb_flush,

		    mem_master_awid,

		    mem_master_awaddr,

		    mem_master_awlen,

		    mem_master_awsize,

		    mem_master_awburst,

		    mem_master_awlock,

		    mem_master_awcache,

		    mem_master_awprot,

		    mem_master_awqos,

		    mem_master_awregion,

		    mem_master_awvalid,

		    mem_master_awready,

		    mem_master_wdata,

		    mem_master_wstrb,

		    mem_master_wlast,

		    mem_master_wuser,

		    mem_master_wvalid,

		    mem_master_wready,

		    mem_master_bid,
		    mem_master_bresp,
		    mem_master_bvalid,

		    mem_master_bready,

		    mem_master_arid,

		    mem_master_araddr,

		    mem_master_arlen,

		    mem_master_arsize,

		    mem_master_arburst,

		    mem_master_arlock,

		    mem_master_arcache,

		    mem_master_arprot,

		    mem_master_arqos,

		    mem_master_arregion,

		    mem_master_arvalid,

		    mem_master_arready,

		    mem_master_rid,
		    mem_master_rdata,
		    mem_master_rresp,
		    mem_master_rlast,
		    mem_master_ruser,
		    mem_master_rvalid,

		    mem_master_rready);
  input  CLK;
  input  RST_N;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // action method req
  input  [1 : 0] req_op;
  input  [2 : 0] req_width_code;
  input  req_is_unsigned;
  input  [6 : 0] req_amo_funct7;
  input  [31 : 0] req_addr;
  input  [128 : 0] req_st_value;
  input  [1 : 0] req_priv;
  input  req_sstatus_SUM;
  input  req_mstatus_MXR;
  input  [31 : 0] req_satp;
  input  EN_req;

  // action method commit
  input  EN_commit;

  // value method valid
  output valid;

  // value method addr
  output [31 : 0] addr;

  // value method word128_fst
  output word128_fst;

  // value method word128_snd
  output [127 : 0] word128_snd;

  // value method st_amo_val_fst
  output st_amo_val_fst;

  // value method st_amo_val_snd
  output [127 : 0] st_amo_val_snd;

  // value method exc
  output exc;

  // value method exc_code
  output [5 : 0] exc_code;

  // action method server_flush_request_put
  input  EN_server_flush_request_put;
  output RDY_server_flush_request_put;

  // action method server_flush_response_get
  input  EN_server_flush_response_get;
  output RDY_server_flush_response_get;

  // action method tlb_flush
  input  EN_tlb_flush;
  output RDY_tlb_flush;

  // value method mem_master_aw_awid
  output [3 : 0] mem_master_awid;

  // value method mem_master_aw_awaddr
  output [63 : 0] mem_master_awaddr;

  // value method mem_master_aw_awlen
  output [7 : 0] mem_master_awlen;

  // value method mem_master_aw_awsize
  output [2 : 0] mem_master_awsize;

  // value method mem_master_aw_awburst
  output [1 : 0] mem_master_awburst;

  // value method mem_master_aw_awlock
  output mem_master_awlock;

  // value method mem_master_aw_awcache
  output [3 : 0] mem_master_awcache;

  // value method mem_master_aw_awprot
  output [2 : 0] mem_master_awprot;

  // value method mem_master_aw_awqos
  output [3 : 0] mem_master_awqos;

  // value method mem_master_aw_awregion
  output [3 : 0] mem_master_awregion;

  // value method mem_master_aw_awuser

  // value method mem_master_aw_awvalid
  output mem_master_awvalid;

  // action method mem_master_aw_awready
  input  mem_master_awready;

  // value method mem_master_w_wdata
  output [127 : 0] mem_master_wdata;

  // value method mem_master_w_wstrb
  output [15 : 0] mem_master_wstrb;

  // value method mem_master_w_wlast
  output mem_master_wlast;

  // value method mem_master_w_wuser
  output [1 : 0] mem_master_wuser;

  // value method mem_master_w_wvalid
  output mem_master_wvalid;

  // action method mem_master_w_wready
  input  mem_master_wready;

  // action method mem_master_b_bflit
  input  [3 : 0] mem_master_bid;
  input  [1 : 0] mem_master_bresp;
  input  mem_master_bvalid;

  // value method mem_master_b_bready
  output mem_master_bready;

  // value method mem_master_ar_arid
  output [3 : 0] mem_master_arid;

  // value method mem_master_ar_araddr
  output [63 : 0] mem_master_araddr;

  // value method mem_master_ar_arlen
  output [7 : 0] mem_master_arlen;

  // value method mem_master_ar_arsize
  output [2 : 0] mem_master_arsize;

  // value method mem_master_ar_arburst
  output [1 : 0] mem_master_arburst;

  // value method mem_master_ar_arlock
  output mem_master_arlock;

  // value method mem_master_ar_arcache
  output [3 : 0] mem_master_arcache;

  // value method mem_master_ar_arprot
  output [2 : 0] mem_master_arprot;

  // value method mem_master_ar_arqos
  output [3 : 0] mem_master_arqos;

  // value method mem_master_ar_arregion
  output [3 : 0] mem_master_arregion;

  // value method mem_master_ar_aruser

  // value method mem_master_ar_arvalid
  output mem_master_arvalid;

  // action method mem_master_ar_arready
  input  mem_master_arready;

  // action method mem_master_r_rflit
  input  [3 : 0] mem_master_rid;
  input  [127 : 0] mem_master_rdata;
  input  [1 : 0] mem_master_rresp;
  input  mem_master_rlast;
  input  [1 : 0] mem_master_ruser;
  input  mem_master_rvalid;

  // value method mem_master_r_rready
  output mem_master_rready;

  // signals for module outputs
  wire [127 : 0] mem_master_wdata, st_amo_val_snd, word128_snd;
  wire [63 : 0] mem_master_araddr, mem_master_awaddr;
  wire [31 : 0] addr;
  wire [15 : 0] mem_master_wstrb;
  wire [7 : 0] mem_master_arlen, mem_master_awlen;
  wire [5 : 0] exc_code;
  wire [3 : 0] mem_master_arcache,
	       mem_master_arid,
	       mem_master_arqos,
	       mem_master_arregion,
	       mem_master_awcache,
	       mem_master_awid,
	       mem_master_awqos,
	       mem_master_awregion;
  wire [2 : 0] mem_master_arprot,
	       mem_master_arsize,
	       mem_master_awprot,
	       mem_master_awsize;
  wire [1 : 0] mem_master_arburst, mem_master_awburst, mem_master_wuser;
  wire RDY_server_flush_request_put,
       RDY_server_flush_response_get,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_set_verbosity,
       RDY_tlb_flush,
       exc,
       mem_master_arlock,
       mem_master_arvalid,
       mem_master_awlock,
       mem_master_awvalid,
       mem_master_bready,
       mem_master_rready,
       mem_master_wlast,
       mem_master_wvalid,
       st_amo_val_fst,
       valid,
       word128_fst;

  // inlined wires
  reg [147 : 0] cache_master_xactor_shim_wff_rv$port0__write_1;
  reg [128 : 0] cache_dw_output_ld_val$wget;
  reg [97 : 0] cache_master_xactor_shim_awff_rv$port0__write_1;
  wire [147 : 0] cache_master_xactor_shim_wff_rv$port1__read,
		 cache_master_xactor_shim_wff_rv$port2__read,
		 cache_master_xactor_shim_wff_rv$port3__read;
  wire [137 : 0] cache_master_xactor_shim_rff_rv$port0__write_1,
		 cache_master_xactor_shim_rff_rv$port1__read,
		 cache_master_xactor_shim_rff_rv$port2__read,
		 cache_master_xactor_shim_rff_rv$port3__read;
  wire [136 : 0] cache_master_xactor_ug_master_u_r_putWire$wget;
  wire [128 : 0] cache_dw_output_st_amo_val$wget;
  wire [97 : 0] cache_master_xactor_shim_arff_rv$port0__write_1,
		cache_master_xactor_shim_arff_rv$port1__read,
		cache_master_xactor_shim_arff_rv$port2__read,
		cache_master_xactor_shim_arff_rv$port3__read,
		cache_master_xactor_shim_awff_rv$port1__read,
		cache_master_xactor_shim_awff_rv$port2__read,
		cache_master_xactor_shim_awff_rv$port3__read;
  wire [10 : 0] cache_crg_sb_to_load_delay$port0__write_1,
		cache_crg_sb_to_load_delay$port2__read;
  wire [6 : 0] cache_master_xactor_shim_bff_rv$port0__write_1,
	       cache_master_xactor_shim_bff_rv$port1__read,
	       cache_master_xactor_shim_bff_rv$port2__read,
	       cache_master_xactor_shim_bff_rv$port3__read;
  wire [5 : 0] cache_master_xactor_ug_master_u_b_putWire$wget;
  wire cache_crg_sb_to_load_delay$EN_port1__write,
       cache_dw_valid$whas,
       cache_master_xactor_shim_arff_rv$EN_port0__write,
       cache_master_xactor_shim_awff_rv$EN_port0__write,
       cache_master_xactor_shim_rff_rv$EN_port1__write,
       cache_master_xactor_shim_wff_rv$EN_port0__write,
       cache_master_xactor_ug_master_u_ar_dropWire$whas,
       cache_master_xactor_ug_master_u_aw_dropWire$whas,
       cache_master_xactor_ug_master_u_b_putWire$whas,
       cache_master_xactor_ug_master_u_r_putWire$whas,
       cache_master_xactor_ug_master_u_w_dropWire$whas;

  // register cache_cfg_verbosity
  reg [3 : 0] cache_cfg_verbosity;
  wire [3 : 0] cache_cfg_verbosity$D_IN;
  wire cache_cfg_verbosity$EN;

  // register cache_crg_sb_to_load_delay
  reg [10 : 0] cache_crg_sb_to_load_delay;
  wire [10 : 0] cache_crg_sb_to_load_delay$D_IN;
  wire cache_crg_sb_to_load_delay$EN;

  // register cache_ctr_wr_rsps_pending_inrg
  reg [3 : 0] cache_ctr_wr_rsps_pending_inrg;
  reg [3 : 0] cache_ctr_wr_rsps_pending_inrg$D_IN;
  wire cache_ctr_wr_rsps_pending_inrg$EN;

  // register cache_ctr_wr_rsps_pending_outrg
  reg [3 : 0] cache_ctr_wr_rsps_pending_outrg;
  wire [3 : 0] cache_ctr_wr_rsps_pending_outrg$D_IN;
  wire cache_ctr_wr_rsps_pending_outrg$EN;

  // register cache_master_xactor_clearing
  reg cache_master_xactor_clearing;
  wire cache_master_xactor_clearing$D_IN, cache_master_xactor_clearing$EN;

  // register cache_master_xactor_shim_arff_rv
  reg [97 : 0] cache_master_xactor_shim_arff_rv;
  wire [97 : 0] cache_master_xactor_shim_arff_rv$D_IN;
  wire cache_master_xactor_shim_arff_rv$EN;

  // register cache_master_xactor_shim_awff_rv
  reg [97 : 0] cache_master_xactor_shim_awff_rv;
  wire [97 : 0] cache_master_xactor_shim_awff_rv$D_IN;
  wire cache_master_xactor_shim_awff_rv$EN;

  // register cache_master_xactor_shim_bff_rv
  reg [6 : 0] cache_master_xactor_shim_bff_rv;
  wire [6 : 0] cache_master_xactor_shim_bff_rv$D_IN;
  wire cache_master_xactor_shim_bff_rv$EN;

  // register cache_master_xactor_shim_rff_rv
  reg [137 : 0] cache_master_xactor_shim_rff_rv;
  wire [137 : 0] cache_master_xactor_shim_rff_rv$D_IN;
  wire cache_master_xactor_shim_rff_rv$EN;

  // register cache_master_xactor_shim_wff_rv
  reg [147 : 0] cache_master_xactor_shim_wff_rv;
  wire [147 : 0] cache_master_xactor_shim_wff_rv$D_IN;
  wire cache_master_xactor_shim_wff_rv$EN;

  // register cache_rg_addr
  reg [31 : 0] cache_rg_addr;
  wire [31 : 0] cache_rg_addr$D_IN;
  wire cache_rg_addr$EN;

  // register cache_rg_amo_funct7
  reg [6 : 0] cache_rg_amo_funct7;
  wire [6 : 0] cache_rg_amo_funct7$D_IN;
  wire cache_rg_amo_funct7$EN;

  // register cache_rg_cset_in_cache
  reg [5 : 0] cache_rg_cset_in_cache;
  wire [5 : 0] cache_rg_cset_in_cache$D_IN;
  wire cache_rg_cset_in_cache$EN;

  // register cache_rg_error_during_refill
  reg cache_rg_error_during_refill;
  wire cache_rg_error_during_refill$D_IN, cache_rg_error_during_refill$EN;

  // register cache_rg_exc_code
  reg [5 : 0] cache_rg_exc_code;
  reg [5 : 0] cache_rg_exc_code$D_IN;
  wire cache_rg_exc_code$EN;

  // register cache_rg_is_unsigned
  reg cache_rg_is_unsigned;
  wire cache_rg_is_unsigned$D_IN, cache_rg_is_unsigned$EN;

  // register cache_rg_ld_val
  reg [128 : 0] cache_rg_ld_val;
  reg [128 : 0] cache_rg_ld_val$D_IN;
  wire cache_rg_ld_val$EN;

  // register cache_rg_lower_word64
  reg [63 : 0] cache_rg_lower_word64;
  wire [63 : 0] cache_rg_lower_word64$D_IN;
  wire cache_rg_lower_word64$EN;

  // register cache_rg_lower_word64_full
  reg cache_rg_lower_word64_full;
  wire cache_rg_lower_word64_full$D_IN, cache_rg_lower_word64_full$EN;

  // register cache_rg_lrsc_pa
  reg [31 : 0] cache_rg_lrsc_pa;
  wire [31 : 0] cache_rg_lrsc_pa$D_IN;
  wire cache_rg_lrsc_pa$EN;

  // register cache_rg_lrsc_valid
  reg cache_rg_lrsc_valid;
  wire cache_rg_lrsc_valid$D_IN, cache_rg_lrsc_valid$EN;

  // register cache_rg_op
  reg [1 : 0] cache_rg_op;
  wire [1 : 0] cache_rg_op$D_IN;
  wire cache_rg_op$EN;

  // register cache_rg_pa
  reg [31 : 0] cache_rg_pa;
  wire [31 : 0] cache_rg_pa$D_IN;
  wire cache_rg_pa$EN;

  // register cache_rg_pte_pa
  reg [31 : 0] cache_rg_pte_pa;
  wire [31 : 0] cache_rg_pte_pa$D_IN;
  wire cache_rg_pte_pa$EN;

  // register cache_rg_st_amo_val
  reg [128 : 0] cache_rg_st_amo_val;
  wire [128 : 0] cache_rg_st_amo_val$D_IN;
  wire cache_rg_st_amo_val$EN;

  // register cache_rg_state
  reg [3 : 0] cache_rg_state;
  reg [3 : 0] cache_rg_state$D_IN;
  wire cache_rg_state$EN;

  // register cache_rg_width_code
  reg [2 : 0] cache_rg_width_code;
  wire [2 : 0] cache_rg_width_code$D_IN;
  wire cache_rg_width_code$EN;

  // register cache_rg_word128_set_in_cache
  reg [7 : 0] cache_rg_word128_set_in_cache;
  wire [7 : 0] cache_rg_word128_set_in_cache$D_IN;
  wire cache_rg_word128_set_in_cache$EN;

  // ports of submodule cache_f_reset_reqs
  wire cache_f_reset_reqs$CLR,
       cache_f_reset_reqs$DEQ,
       cache_f_reset_reqs$D_IN,
       cache_f_reset_reqs$D_OUT,
       cache_f_reset_reqs$EMPTY_N,
       cache_f_reset_reqs$ENQ,
       cache_f_reset_reqs$FULL_N;

  // ports of submodule cache_f_reset_rsps
  wire cache_f_reset_rsps$CLR,
       cache_f_reset_rsps$DEQ,
       cache_f_reset_rsps$D_IN,
       cache_f_reset_rsps$D_OUT,
       cache_f_reset_rsps$EMPTY_N,
       cache_f_reset_rsps$ENQ,
       cache_f_reset_rsps$FULL_N;

  // ports of submodule cache_ram_state_and_ctag_cset
  wire [22 : 0] cache_ram_state_and_ctag_cset$DIA,
		cache_ram_state_and_ctag_cset$DIB,
		cache_ram_state_and_ctag_cset$DOB;
  wire [5 : 0] cache_ram_state_and_ctag_cset$ADDRA,
	       cache_ram_state_and_ctag_cset$ADDRB;
  wire cache_ram_state_and_ctag_cset$ENA,
       cache_ram_state_and_ctag_cset$ENB,
       cache_ram_state_and_ctag_cset$WEA,
       cache_ram_state_and_ctag_cset$WEB;

  // ports of submodule cache_ram_word128_set
  reg [129 : 0] cache_ram_word128_set$DIB;
  reg [7 : 0] cache_ram_word128_set$ADDRB;
  wire [129 : 0] cache_ram_word128_set$DIA, cache_ram_word128_set$DOB;
  wire [7 : 0] cache_ram_word128_set$ADDRA;
  wire cache_ram_word128_set$ENA,
       cache_ram_word128_set$ENB,
       cache_ram_word128_set$WEA,
       cache_ram_word128_set$WEB;

  // ports of submodule cache_soc_map
  wire [63 : 0] cache_soc_map$m_is_IO_addr_addr,
		cache_soc_map$m_is_mem_addr_addr,
		cache_soc_map$m_is_near_mem_IO_addr_addr;
  wire cache_soc_map$m_is_mem_addr;

  // rule scheduling signals
  wire CAN_FIRE_RL_cache_master_xactor_do_clear,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop,
       CAN_FIRE_RL_cache_rl_ST_AMO_response,
       CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop,
       CAN_FIRE_RL_cache_rl_discard_write_rsp,
       CAN_FIRE_RL_cache_rl_drive_exception_rsp,
       CAN_FIRE_RL_cache_rl_io_AMO_SC_req,
       CAN_FIRE_RL_cache_rl_io_AMO_op_req,
       CAN_FIRE_RL_cache_rl_io_AMO_read_rsp,
       CAN_FIRE_RL_cache_rl_io_read_req,
       CAN_FIRE_RL_cache_rl_io_read_rsp,
       CAN_FIRE_RL_cache_rl_io_write_req,
       CAN_FIRE_RL_cache_rl_maintain_io_read_rsp,
       CAN_FIRE_RL_cache_rl_probe_and_immed_rsp,
       CAN_FIRE_RL_cache_rl_rereq,
       CAN_FIRE_RL_cache_rl_reset,
       CAN_FIRE_RL_cache_rl_shift_sb_to_load_delay,
       CAN_FIRE_RL_cache_rl_start_cache_refill,
       CAN_FIRE_RL_cache_rl_start_reset,
       CAN_FIRE_commit,
       CAN_FIRE_mem_master_ar_arready,
       CAN_FIRE_mem_master_aw_awready,
       CAN_FIRE_mem_master_b_bflit,
       CAN_FIRE_mem_master_r_rflit,
       CAN_FIRE_mem_master_w_wready,
       CAN_FIRE_req,
       CAN_FIRE_server_flush_request_put,
       CAN_FIRE_server_flush_response_get,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_tlb_flush,
       WILL_FIRE_RL_cache_master_xactor_do_clear,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop,
       WILL_FIRE_RL_cache_rl_ST_AMO_response,
       WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop,
       WILL_FIRE_RL_cache_rl_discard_write_rsp,
       WILL_FIRE_RL_cache_rl_drive_exception_rsp,
       WILL_FIRE_RL_cache_rl_io_AMO_SC_req,
       WILL_FIRE_RL_cache_rl_io_AMO_op_req,
       WILL_FIRE_RL_cache_rl_io_AMO_read_rsp,
       WILL_FIRE_RL_cache_rl_io_read_req,
       WILL_FIRE_RL_cache_rl_io_read_rsp,
       WILL_FIRE_RL_cache_rl_io_write_req,
       WILL_FIRE_RL_cache_rl_maintain_io_read_rsp,
       WILL_FIRE_RL_cache_rl_probe_and_immed_rsp,
       WILL_FIRE_RL_cache_rl_rereq,
       WILL_FIRE_RL_cache_rl_reset,
       WILL_FIRE_RL_cache_rl_shift_sb_to_load_delay,
       WILL_FIRE_RL_cache_rl_start_cache_refill,
       WILL_FIRE_RL_cache_rl_start_reset,
       WILL_FIRE_commit,
       WILL_FIRE_mem_master_ar_arready,
       WILL_FIRE_mem_master_aw_awready,
       WILL_FIRE_mem_master_b_bflit,
       WILL_FIRE_mem_master_r_rflit,
       WILL_FIRE_mem_master_w_wready,
       WILL_FIRE_req,
       WILL_FIRE_server_flush_request_put,
       WILL_FIRE_server_flush_response_get,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_tlb_flush;

  // inputs to muxes for submodule ports
  wire [147 : 0] MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_1,
		 MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_2,
		 MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_3;
  wire [129 : 0] MUX_cache_ram_word128_set$a_put_3__VAL_1,
		 MUX_cache_ram_word128_set$a_put_3__VAL_2;
  wire [128 : 0] MUX_cache_dw_output_ld_val$wset_1__VAL_1,
		 MUX_cache_dw_output_ld_val$wset_1__VAL_2,
		 MUX_cache_dw_output_ld_val$wset_1__VAL_3,
		 MUX_cache_dw_output_st_amo_val$wset_1__VAL_1,
		 MUX_cache_rg_ld_val$write_1__VAL_2,
		 MUX_cache_rg_st_amo_val$write_1__VAL_2;
  wire [97 : 0] MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_1,
		MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_2,
		MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_1,
		MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_2;
  wire [22 : 0] MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1;
  wire [7 : 0] MUX_cache_ram_word128_set$b_put_2__VAL_2,
	       MUX_cache_ram_word128_set$b_put_2__VAL_4;
  wire [5 : 0] MUX_cache_rg_cset_in_cache$write_1__VAL_1,
	       MUX_cache_rg_exc_code$write_1__VAL_1,
	       MUX_cache_rg_exc_code$write_1__VAL_2;
  wire [3 : 0] MUX_cache_ctr_wr_rsps_pending_inrg$write_1__VAL_1,
	       MUX_cache_ctr_wr_rsps_pending_outrg$write_1__VAL_1,
	       MUX_cache_rg_state$write_1__VAL_12,
	       MUX_cache_rg_state$write_1__VAL_2,
	       MUX_cache_rg_state$write_1__VAL_4,
	       MUX_cache_rg_state$write_1__VAL_5;
  wire MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_1,
       MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_2,
       MUX_cache_dw_output_ld_val$wset_1__SEL_1,
       MUX_cache_dw_output_ld_val$wset_1__SEL_3,
       MUX_cache_dw_output_ld_val$wset_1__SEL_4,
       MUX_cache_master_xactor_shim_arff_rv$port0__write_1__SEL_1,
       MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1,
       MUX_cache_ram_word128_set$a_put_1__SEL_1,
       MUX_cache_ram_word128_set$b_put_1__SEL_2,
       MUX_cache_rg_error_during_refill$write_1__SEL_1,
       MUX_cache_rg_exc_code$write_1__SEL_2,
       MUX_cache_rg_exc_code$write_1__SEL_3,
       MUX_cache_rg_exc_code$write_1__SEL_4,
       MUX_cache_rg_exc_code$write_1__SEL_5,
       MUX_cache_rg_ld_val$write_1__SEL_2,
       MUX_cache_rg_lrsc_valid$write_1__SEL_2,
       MUX_cache_rg_lrsc_valid$write_1__VAL_2,
       MUX_cache_rg_state$write_1__SEL_12,
       MUX_cache_rg_state$write_1__SEL_13,
       MUX_cache_rg_state$write_1__SEL_2;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h5569;
  reg [31 : 0] v__h5670;
  reg [31 : 0] v__h6125;
  reg [31 : 0] v__h21518;
  reg [31 : 0] v__h26004;
  reg [31 : 0] v__h5143;
  reg [31 : 0] v__h34746;
  reg [31 : 0] v__h36773;
  reg [31 : 0] v__h36861;
  reg [31 : 0] v__h37559;
  reg [31 : 0] v__h37681;
  reg [31 : 0] v__h41694;
  reg [31 : 0] v__h41941;
  reg [31 : 0] v__h41902;
  reg [31 : 0] v__h35103;
  reg [31 : 0] v__h36548;
  reg [31 : 0] v__h36662;
  reg [31 : 0] v__h37982;
  reg [31 : 0] v__h38177;
  reg [31 : 0] v__h41386;
  reg [31 : 0] v__h38275;
  reg [31 : 0] v__h42332;
  reg [31 : 0] v__h31884;
  reg [31 : 0] v__h32840;
  reg [31 : 0] v__h33102;
  reg [31 : 0] v__h5137;
  reg [31 : 0] v__h5563;
  reg [31 : 0] v__h5664;
  reg [31 : 0] v__h6119;
  reg [31 : 0] v__h21512;
  reg [31 : 0] v__h25998;
  reg [31 : 0] v__h31878;
  reg [31 : 0] v__h32834;
  reg [31 : 0] v__h33096;
  reg [31 : 0] v__h34740;
  reg [31 : 0] v__h35097;
  reg [31 : 0] v__h36542;
  reg [31 : 0] v__h36656;
  reg [31 : 0] v__h36767;
  reg [31 : 0] v__h36855;
  reg [31 : 0] v__h37553;
  reg [31 : 0] v__h37675;
  reg [31 : 0] v__h37976;
  reg [31 : 0] v__h38171;
  reg [31 : 0] v__h38269;
  reg [31 : 0] v__h41380;
  reg [31 : 0] v__h41688;
  reg [31 : 0] v__h41896;
  reg [31 : 0] v__h41935;
  reg [31 : 0] v__h42326;
  // synopsys translate_on

  // remaining internal signals
  reg [127 : 0] CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q63,
		CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q66,
		IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1054,
		IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1094,
		IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1114,
		IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1226,
		IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1250,
		IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1262,
		IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d383,
		IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d423,
		IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d443,
		IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d521,
		IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d529,
		IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d533,
		IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d628,
		IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d645,
		IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d654,
		IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d738,
		IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d755,
		IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d764,
		_theResult___fst__h28362,
		_theResult___fst__h35341,
		_theResult___fst__h40850,
		_theResult___fst__h7470,
		mem_req_wr_data_wdata__h26440,
		mem_req_wr_data_wdata__h31283,
		mem_req_wr_data_wdata__h37103,
		mem_req_wr_data_wdata__h38494,
		x__h20375,
		x__h22787,
		x__h25767,
		x__h27119,
		x__h27357,
		x__h35415,
		x__h38680;
  reg [63 : 0] _theResult_____2__h27066, _theResult_____2__h38523;
  reg [15 : 0] mem_req_wr_data_wstrb__h31284, mem_req_wr_data_wstrb__h38495;
  reg [2 : 0] _theResult___fst_val__h38441, size_val__h37818;
  wire [146 : 0] cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q100;
  wire [129 : 0] cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278,
		 y__h7522;
  wire [127 : 0] IF_cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2__ETC___d465,
		 IF_cache_rg_op_4_EQ_1_02_OR_cache_rg_op_4_EQ_2_ETC___d802,
		 SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d292,
		 SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d297,
		 SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d302,
		 SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d307,
		 SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d312,
		 SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d317,
		 SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d322,
		 SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d327,
		 SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d331,
		 SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d336,
		 SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d341,
		 SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d346,
		 SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d351,
		 SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d356,
		 SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d361,
		 SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d366,
		 SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d386,
		 SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d390,
		 SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d394,
		 SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d398,
		 SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d402,
		 SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d406,
		 SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d410,
		 SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d414,
		 SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d426,
		 SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d430,
		 SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d434,
		 SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d438,
		 SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d446,
		 SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d450,
		 _theResult___snd_fst__h26449,
		 _theResult___snd_fst__h31292,
		 _theResult___snd_fst__h37112,
		 _theResult___snd_fst__h38503,
		 result__h20318,
		 result__h20386,
		 result__h20424,
		 result__h20457,
		 result__h20490,
		 result__h20523,
		 result__h20556,
		 result__h20589,
		 result__h20622,
		 result__h20655,
		 result__h20688,
		 result__h20721,
		 result__h20754,
		 result__h20787,
		 result__h20820,
		 result__h20853,
		 result__h20886,
		 result__h20941,
		 result__h20974,
		 result__h21007,
		 result__h21040,
		 result__h21073,
		 result__h21106,
		 result__h21139,
		 result__h21172,
		 result__h21219,
		 result__h21252,
		 result__h21285,
		 result__h21318,
		 result__h35343,
		 result__h35368,
		 result__h35426,
		 result__h35462,
		 result__h35495,
		 result__h35528,
		 result__h35561,
		 result__h35594,
		 result__h35627,
		 result__h35660,
		 result__h35693,
		 result__h35726,
		 result__h35759,
		 result__h35792,
		 result__h35825,
		 result__h35858,
		 result__h35891,
		 result__h35924,
		 result__h35979,
		 result__h36012,
		 result__h36045,
		 result__h36078,
		 result__h36111,
		 result__h36144,
		 result__h36177,
		 result__h36210,
		 result__h36257,
		 result__h36290,
		 result__h36323,
		 result__h36356,
		 result__h38761,
		 result__h39930,
		 result__h39962,
		 result__h39994,
		 result__h40026,
		 result__h40058,
		 result__h40090,
		 result__h40122,
		 result__h40154,
		 result__h40186,
		 result__h40218,
		 result__h40250,
		 result__h40282,
		 result__h40314,
		 result__h40346,
		 result__h40378,
		 result__h40432,
		 result__h40464,
		 result__h40496,
		 result__h40528,
		 result__h40560,
		 result__h40592,
		 result__h40624,
		 result__h40656,
		 result__h40702,
		 result__h40734,
		 result__h40766,
		 result__h40798,
		 result__h40852,
		 result__h40881,
		 result__h7472,
		 word128__h38362;
  wire [96 : 0] cache_master_xactor_shim_arff_rvport1__read_B_ETC__q67,
		cache_master_xactor_shim_awff_rvport1__read_B_ETC__q99;
  wire [63 : 0] IF_cache_rg_width_code_02_EQ_2_07_THEN_SEXT_IF_ETC___d1277,
		IF_cache_rg_width_code_02_EQ_2_07_THEN_SEXT_IF_ETC___d543,
		IF_cache_rg_width_code_02_EQ_2_07_THEN_SEXT_ca_ETC___d672,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q18,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q3,
		cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q53,
		cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q54,
		cline_fabric_addr__h31937,
		mem_req_wr_addr_awaddr__h31147,
		mem_req_wr_addr_awaddr__h38358,
		new_st_val__h27212,
		new_st_val__h27305,
		new_st_val__h28453,
		new_st_val__h28457,
		new_st_val__h28461,
		new_st_val__h28465,
		new_st_val__h28470,
		new_st_val__h28476,
		new_st_val__h28481,
		new_st_val__h38535,
		new_st_val__h38628,
		new_st_val__h40943,
		new_st_val__h40947,
		new_st_val__h40951,
		new_st_val__h40955,
		new_st_val__h40960,
		new_st_val__h40966,
		new_st_val__h40971,
		w1___1__h27271,
		w1___1__h38594,
		w1__h27058,
		w1__h38515,
		w2__h27060,
		x5415_BITS_127_TO_64__q86,
		x5415_BITS_63_TO_0__q71,
		x__h27210,
		x__h38533;
  wire [31 : 0] IF_cache_rg_addr_BITS_4_TO_0_EQ_0_THEN_1_ELSE_0__q2,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q13,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q21,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q28,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q7,
		cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q49,
		cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q50,
		cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q51,
		cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q52,
		cache_rg_st_amo_val_BITS_31_TO_0__q65,
		cline_addr__h31936,
		x5415_BITS_127_TO_96__q93,
		x5415_BITS_31_TO_0__q70,
		x5415_BITS_63_TO_32__q78,
		x5415_BITS_95_TO_64__q85,
		x7357_BITS_31_TO_0__q64,
		x8680_BITS_31_TO_0__q98;
  wire [21 : 0] pa_ctag__h7038;
  wire [15 : 0] cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q10,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q12,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q16,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q20,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q24,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q27,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q31,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q6,
		cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q33,
		cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q35,
		cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q37,
		cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q39,
		cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q41,
		cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q43,
		cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q45,
		cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q47,
		strobe128__h31211,
		strobe128__h31214,
		strobe128__h31217,
		strobe128__h31220,
		strobe128__h38422,
		strobe128__h38425,
		strobe128__h38428,
		strobe128__h38431,
		x5415_BITS_111_TO_96__q92,
		x5415_BITS_127_TO_112__q96,
		x5415_BITS_15_TO_0__q69,
		x5415_BITS_31_TO_16__q75,
		x5415_BITS_47_TO_32__q77,
		x5415_BITS_63_TO_48__q81,
		x5415_BITS_79_TO_64__q84,
		x5415_BITS_95_TO_80__q89;
  wire [7 : 0] cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q11,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q14,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q15,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q17,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q19,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q22,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q23,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q25,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q26,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q29,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q30,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q32,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q4,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q5,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q8,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q9,
	       cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q34,
	       cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q36,
	       cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q38,
	       cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q40,
	       cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q42,
	       cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q44,
	       cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q46,
	       cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q48,
	       cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q55,
	       cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q56,
	       cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q57,
	       cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q58,
	       cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q59,
	       cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q60,
	       cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q61,
	       cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q62,
	       x5415_BITS_103_TO_96__q91,
	       x5415_BITS_111_TO_104__q94,
	       x5415_BITS_119_TO_112__q95,
	       x5415_BITS_127_TO_120__q97,
	       x5415_BITS_15_TO_8__q72,
	       x5415_BITS_23_TO_16__q73,
	       x5415_BITS_31_TO_24__q76,
	       x5415_BITS_39_TO_32__q74,
	       x5415_BITS_47_TO_40__q79,
	       x5415_BITS_55_TO_48__q80,
	       x5415_BITS_63_TO_56__q82,
	       x5415_BITS_71_TO_64__q83,
	       x5415_BITS_79_TO_72__q87,
	       x5415_BITS_7_TO_0__q68,
	       x5415_BITS_87_TO_80__q88,
	       x5415_BITS_95_TO_88__q90;
  wire [6 : 0] shift_bits__h31154, shift_bits__h38365;
  wire [5 : 0] access_exc_code__h4894;
  wire [3 : 0] IF_cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2__ETC___d173,
	       IF_cache_rg_op_4_EQ_1_02_OR_cache_rg_op_4_EQ_2_ETC___d172,
	       cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d114,
	       x__h27099;
  wire [2 : 0] IF_cache_rg_op_4_EQ_1_02_OR_cache_rg_op_4_EQ_2_ETC___d815;
  wire [1 : 0] _0__q1,
	       cache_ram_word128_set_b_read__61_BITS_129_TO_1_ETC___d563,
	       mem_req_wr_data_wuser__h26443,
	       x__h22659,
	       x__h27014,
	       y__h27082;
  wire IF_cache_rg_op_4_EQ_1_02_OR_cache_rg_op_4_EQ_2_ETC___d137,
       IF_cache_rg_width_code_02_EQ_3_11_THEN_IF_cach_ETC___d286,
       NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55,
       NOT_cache_cfg_verbosity_read__3_ULE_2_06___d907,
       NOT_cache_dw_commit_whas__5_6_OR_NOT_cache_dw__ETC___d170,
       NOT_cache_f_reset_reqs_notEmpty__4_41_AND_cach_ETC___d152,
       NOT_cache_f_reset_reqs_notEmpty__4_41_AND_cach_ETC___d955,
       NOT_cache_master_xactor_clearing_read__0_8_AND_ETC___d125,
       NOT_cache_ram_state_and_ctag_cset_b_read__27_B_ETC___d181,
       NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d167,
       NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d788,
       NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d839,
       NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d849,
       NOT_cache_rg_op_4_EQ_1_02_87_AND_NOT_cache_rg__ETC___d190,
       NOT_cache_rg_op_4_EQ_1_02_87_AND_NOT_cache_rg__ETC___d548,
       NOT_cache_rg_op_4_EQ_1_02_87_AND_NOT_cache_rg__ETC___d781,
       NOT_cache_rg_op_4_EQ_1_02_87_AND_NOT_cache_rg__ETC___d859,
       NOT_cache_rg_op_4_EQ_1_02_87_AND_NOT_cache_rg__ETC___d863,
       NOT_cache_rg_op_4_EQ_1_02_87_AND_NOT_cache_rg__ETC___d869,
       NOT_cache_rg_op_4_EQ_2_6_45_OR_NOT_cache_rg_am_ETC___d546,
       NOT_cache_rg_op_4_EQ_2_6_45_OR_NOT_cache_rg_am_ETC___d779,
       NOT_cache_rg_op_4_EQ_2_6_45_OR_NOT_cache_rg_am_ETC___d837,
       NOT_cache_rg_op_4_EQ_2_6_45_OR_NOT_cache_rg_am_ETC___d842,
       NOT_cache_rg_op_4_EQ_2_6_45_OR_NOT_cache_rg_am_ETC___d847,
       NOT_req_width_code_EQ_0b0_369_370_AND_NOT_req__ETC___d1389,
       cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d489,
       cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d827,
       cache_f_reset_reqs_i_notEmpty__3_AND_cache_f_r_ETC___d66,
       cache_ram_state_and_ctag_cset_b_read__27_BITS__ETC___d133,
       cache_ram_state_and_ctag_cset_b_read__27_BIT_2_ETC___d182,
       cache_rg_addr_0_EQ_cache_rg_lrsc_pa_08___d179,
       cache_rg_amo_funct7_7_BITS_6_TO_2_8_EQ_0b10_9__ETC___d496,
       cache_rg_lrsc_pa_08_EQ_cache_rg_addr_0___d109,
       cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d162,
       cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d193,
       cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d199,
       cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d288,
       cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d475,
       cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d491,
       cache_rg_op_4_EQ_1_02_OR_cache_rg_op_4_EQ_2_6__ETC___d191,
       cache_rg_op_4_EQ_1_02_OR_cache_rg_op_4_EQ_2_6__ETC___d549,
       cache_rg_op_4_EQ_1_02_OR_cache_rg_op_4_EQ_2_6__ETC___d782,
       cache_rg_op_4_EQ_1_02_OR_cache_rg_op_4_EQ_2_6__ETC___d786,
       cache_rg_op_4_EQ_2_6_AND_cache_rg_amo_funct7_7_ETC___d854,
       cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d503,
       cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d551,
       cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d865,
       cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d874,
       lrsc_result__h21908,
       req_width_code_EQ_0b0_369_OR_req_width_code_EQ_ETC___d1405,
       req_width_code_EQ_0b0_369_OR_req_width_code_EQ_ETC___d1410;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = cache_f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = cache_f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get =
	     !cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get =
	     !cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // action method req
  assign CAN_FIRE_req = 1'd1 ;
  assign WILL_FIRE_req = EN_req ;

  // action method commit
  assign CAN_FIRE_commit = 1'd1 ;
  assign WILL_FIRE_commit = EN_commit ;

  // value method valid
  assign valid = cache_dw_valid$whas ;

  // value method addr
  assign addr = cache_rg_addr ;

  // value method word128_fst
  assign word128_fst = cache_dw_output_ld_val$wget[128] ;

  // value method word128_snd
  assign word128_snd = cache_dw_output_ld_val$wget[127:0] ;

  // value method st_amo_val_fst
  assign st_amo_val_fst = cache_dw_output_st_amo_val$wget[128] ;

  // value method st_amo_val_snd
  assign st_amo_val_snd = cache_dw_output_st_amo_val$wget[127:0] ;

  // value method exc
  assign exc = CAN_FIRE_RL_cache_rl_drive_exception_rsp ;

  // value method exc_code
  assign exc_code = cache_rg_exc_code ;

  // action method server_flush_request_put
  assign RDY_server_flush_request_put = !EN_req && cache_f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_flush_request_put =
	     !EN_req && cache_f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_flush_request_put = EN_server_flush_request_put ;

  // action method server_flush_response_get
  assign RDY_server_flush_response_get =
	     cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_flush_response_get =
	     cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_flush_response_get = EN_server_flush_response_get ;

  // action method tlb_flush
  assign RDY_tlb_flush = !EN_req ;
  assign CAN_FIRE_tlb_flush = !EN_req ;
  assign WILL_FIRE_tlb_flush = EN_tlb_flush ;

  // value method mem_master_aw_awid
  assign mem_master_awid =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q99[96:93] ;

  // value method mem_master_aw_awaddr
  assign mem_master_awaddr =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q99[92:29] ;

  // value method mem_master_aw_awlen
  assign mem_master_awlen =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q99[28:21] ;

  // value method mem_master_aw_awsize
  assign mem_master_awsize =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q99[20:18] ;

  // value method mem_master_aw_awburst
  assign mem_master_awburst =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q99[17:16] ;

  // value method mem_master_aw_awlock
  assign mem_master_awlock =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q99[15] ;

  // value method mem_master_aw_awcache
  assign mem_master_awcache =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q99[14:11] ;

  // value method mem_master_aw_awprot
  assign mem_master_awprot =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q99[10:8] ;

  // value method mem_master_aw_awqos
  assign mem_master_awqos =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q99[7:4] ;

  // value method mem_master_aw_awregion
  assign mem_master_awregion =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q99[3:0] ;

  // value method mem_master_aw_awvalid
  assign mem_master_awvalid =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek ;

  // action method mem_master_aw_awready
  assign CAN_FIRE_mem_master_aw_awready = 1'd1 ;
  assign WILL_FIRE_mem_master_aw_awready = 1'd1 ;

  // value method mem_master_w_wdata
  assign mem_master_wdata =
	     cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q100[146:19] ;

  // value method mem_master_w_wstrb
  assign mem_master_wstrb =
	     cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q100[18:3] ;

  // value method mem_master_w_wlast
  assign mem_master_wlast =
	     cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q100[2] ;

  // value method mem_master_w_wuser
  assign mem_master_wuser =
	     cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q100[1:0] ;

  // value method mem_master_w_wvalid
  assign mem_master_wvalid =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek ;

  // action method mem_master_w_wready
  assign CAN_FIRE_mem_master_w_wready = 1'd1 ;
  assign WILL_FIRE_mem_master_w_wready = 1'd1 ;

  // action method mem_master_b_bflit
  assign CAN_FIRE_mem_master_b_bflit = 1'd1 ;
  assign WILL_FIRE_mem_master_b_bflit = mem_master_bvalid ;

  // value method mem_master_b_bready
  assign mem_master_bready = !cache_master_xactor_shim_bff_rv[6] ;

  // value method mem_master_ar_arid
  assign mem_master_arid =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q67[96:93] ;

  // value method mem_master_ar_araddr
  assign mem_master_araddr =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q67[92:29] ;

  // value method mem_master_ar_arlen
  assign mem_master_arlen =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q67[28:21] ;

  // value method mem_master_ar_arsize
  assign mem_master_arsize =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q67[20:18] ;

  // value method mem_master_ar_arburst
  assign mem_master_arburst =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q67[17:16] ;

  // value method mem_master_ar_arlock
  assign mem_master_arlock =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q67[15] ;

  // value method mem_master_ar_arcache
  assign mem_master_arcache =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q67[14:11] ;

  // value method mem_master_ar_arprot
  assign mem_master_arprot =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q67[10:8] ;

  // value method mem_master_ar_arqos
  assign mem_master_arqos =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q67[7:4] ;

  // value method mem_master_ar_arregion
  assign mem_master_arregion =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q67[3:0] ;

  // value method mem_master_ar_arvalid
  assign mem_master_arvalid =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek ;

  // action method mem_master_ar_arready
  assign CAN_FIRE_mem_master_ar_arready = 1'd1 ;
  assign WILL_FIRE_mem_master_ar_arready = 1'd1 ;

  // action method mem_master_r_rflit
  assign CAN_FIRE_mem_master_r_rflit = 1'd1 ;
  assign WILL_FIRE_mem_master_r_rflit = mem_master_rvalid ;

  // value method mem_master_r_rready
  assign mem_master_rready = !cache_master_xactor_shim_rff_rv[137] ;

  // submodule cache_f_reset_reqs
  FIFO2 #(.width(32'd1), .guarded(32'd1)) cache_f_reset_reqs(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(cache_f_reset_reqs$D_IN),
							     .ENQ(cache_f_reset_reqs$ENQ),
							     .DEQ(cache_f_reset_reqs$DEQ),
							     .CLR(cache_f_reset_reqs$CLR),
							     .D_OUT(cache_f_reset_reqs$D_OUT),
							     .FULL_N(cache_f_reset_reqs$FULL_N),
							     .EMPTY_N(cache_f_reset_reqs$EMPTY_N));

  // submodule cache_f_reset_rsps
  FIFO2 #(.width(32'd1), .guarded(32'd1)) cache_f_reset_rsps(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(cache_f_reset_rsps$D_IN),
							     .ENQ(cache_f_reset_rsps$ENQ),
							     .DEQ(cache_f_reset_rsps$DEQ),
							     .CLR(cache_f_reset_rsps$CLR),
							     .D_OUT(cache_f_reset_rsps$D_OUT),
							     .FULL_N(cache_f_reset_rsps$FULL_N),
							     .EMPTY_N(cache_f_reset_rsps$EMPTY_N));

  // submodule cache_ram_state_and_ctag_cset
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd23),
	  .MEMSIZE(7'd64)) cache_ram_state_and_ctag_cset(.CLKA(CLK),
							 .CLKB(CLK),
							 .ADDRA(cache_ram_state_and_ctag_cset$ADDRA),
							 .ADDRB(cache_ram_state_and_ctag_cset$ADDRB),
							 .DIA(cache_ram_state_and_ctag_cset$DIA),
							 .DIB(cache_ram_state_and_ctag_cset$DIB),
							 .WEA(cache_ram_state_and_ctag_cset$WEA),
							 .WEB(cache_ram_state_and_ctag_cset$WEB),
							 .ENA(cache_ram_state_and_ctag_cset$ENA),
							 .ENB(cache_ram_state_and_ctag_cset$ENB),
							 .DOA(),
							 .DOB(cache_ram_state_and_ctag_cset$DOB));

  // submodule cache_ram_word128_set
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd8),
	  .DATA_WIDTH(32'd130),
	  .MEMSIZE(9'd256)) cache_ram_word128_set(.CLKA(CLK),
						  .CLKB(CLK),
						  .ADDRA(cache_ram_word128_set$ADDRA),
						  .ADDRB(cache_ram_word128_set$ADDRB),
						  .DIA(cache_ram_word128_set$DIA),
						  .DIB(cache_ram_word128_set$DIB),
						  .WEA(cache_ram_word128_set$WEA),
						  .WEB(cache_ram_word128_set$WEB),
						  .ENA(cache_ram_word128_set$ENA),
						  .ENB(cache_ram_word128_set$ENB),
						  .DOA(),
						  .DOB(cache_ram_word128_set$DOB));

  // submodule cache_soc_map
  mkSoC_Map cache_soc_map(.CLK(CLK),
			  .RST_N(RST_N),
			  .m_is_IO_addr_addr(cache_soc_map$m_is_IO_addr_addr),
			  .m_is_mem_addr_addr(cache_soc_map$m_is_mem_addr_addr),
			  .m_is_near_mem_IO_addr_addr(cache_soc_map$m_is_near_mem_IO_addr_addr),
			  .m_plic_addr_range(),
			  .m_near_mem_io_addr_range(),
			  .m_ethernet_0_addr_range(),
			  .m_dma_0_addr_range(),
			  .m_uart16550_0_addr_range(),
			  .m_uart16550_1_addr_range(),
			  .m_iic_0_addr_range(),
			  .m_axi_quad_spi_0_full_addr_range(),
			  .m_axi_quad_spi_0_lite_addr_range(),
			  .m_axi_quad_spi_1_addr_range(),
			  .m_gpio_0_addr_range(),
			  .m_gpio_1_addr_range(),
			  .m_boot_rom_addr_range(),
			  .m_ddr4_0_uncached_addr_range(),
			  .m_ddr4_0_cached_addr_range(),
			  .m_is_mem_addr(cache_soc_map$m_is_mem_addr),
			  .m_is_IO_addr(),
			  .m_is_near_mem_IO_addr(),
			  .m_pc_reset_value(),
			  .m_pcc_reset_value(),
			  .m_ddc_reset_value(),
			  .m_mtcc_reset_value(),
			  .m_mepcc_reset_value(),
			  .m_mtvec_reset_value(),
			  .m_nmivec_reset_value());

  // rule RL_cache_rl_reset
  assign CAN_FIRE_RL_cache_rl_reset =
	     cache_f_reset_reqs_i_notEmpty__3_AND_cache_f_r_ETC___d66 &&
	     cache_rg_state == 4'd1 ;
  assign WILL_FIRE_RL_cache_rl_reset = CAN_FIRE_RL_cache_rl_reset ;

  // rule RL_cache_rl_shift_sb_to_load_delay
  assign CAN_FIRE_RL_cache_rl_shift_sb_to_load_delay = 1'd1 ;
  assign WILL_FIRE_RL_cache_rl_shift_sb_to_load_delay = 1'd1 ;

  // rule RL_cache_rl_probe_and_immed_rsp
  assign CAN_FIRE_RL_cache_rl_probe_and_immed_rsp =
	     (!EN_commit || !cache_soc_map$m_is_mem_addr ||
	      cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010 ||
	      IF_cache_rg_op_4_EQ_1_02_OR_cache_rg_op_4_EQ_2_ETC___d137) &&
	     NOT_cache_f_reset_reqs_notEmpty__4_41_AND_cach_ETC___d152 ;
  assign WILL_FIRE_RL_cache_rl_probe_and_immed_rsp =
	     CAN_FIRE_RL_cache_rl_probe_and_immed_rsp ;

  // rule RL_cache_rl_ST_AMO_response
  assign CAN_FIRE_RL_cache_rl_ST_AMO_response = cache_rg_state == 4'd11 ;
  assign WILL_FIRE_RL_cache_rl_ST_AMO_response =
	     CAN_FIRE_RL_cache_rl_ST_AMO_response ;

  // rule RL_cache_rl_start_reset
  assign CAN_FIRE_RL_cache_rl_start_reset =
	     cache_f_reset_reqs$EMPTY_N && cache_rg_state != 4'd1 ;
  assign WILL_FIRE_RL_cache_rl_start_reset =
	     CAN_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_io_read_req
  assign CAN_FIRE_RL_cache_rl_io_read_req =
	     !cache_master_xactor_clearing &&
	     !cache_master_xactor_shim_arff_rv[97] &&
	     NOT_cache_f_reset_reqs_notEmpty__4_41_AND_cach_ETC___d955 &&
	     cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d114 ==
	     4'd0 ;
  assign WILL_FIRE_RL_cache_rl_io_read_req =
	     CAN_FIRE_RL_cache_rl_io_read_req ;

  // rule RL_cache_rl_maintain_io_read_rsp
  assign CAN_FIRE_RL_cache_rl_maintain_io_read_rsp =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_state == 4'd14 ;
  assign WILL_FIRE_RL_cache_rl_maintain_io_read_rsp =
	     CAN_FIRE_RL_cache_rl_maintain_io_read_rsp ;

  // rule RL_cache_rl_io_write_req
  assign CAN_FIRE_RL_cache_rl_io_write_req =
	     NOT_cache_master_xactor_clearing_read__0_8_AND_ETC___d125 &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 4'd12 &&
	     cache_rg_op == 2'd1 ;
  assign WILL_FIRE_RL_cache_rl_io_write_req =
	     CAN_FIRE_RL_cache_rl_io_write_req ;

  // rule RL_cache_rl_io_AMO_SC_req
  assign CAN_FIRE_RL_cache_rl_io_AMO_SC_req =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_state == 4'd12 &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00011 ;
  assign WILL_FIRE_RL_cache_rl_io_AMO_SC_req =
	     CAN_FIRE_RL_cache_rl_io_AMO_SC_req ;

  // rule RL_cache_rl_io_AMO_op_req
  assign CAN_FIRE_RL_cache_rl_io_AMO_op_req =
	     !cache_master_xactor_clearing &&
	     !cache_master_xactor_shim_arff_rv[97] &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 4'd12 &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] != 5'b00010 &&
	     cache_rg_amo_funct7[6:2] != 5'b00011 ;
  assign WILL_FIRE_RL_cache_rl_io_AMO_op_req =
	     CAN_FIRE_RL_cache_rl_io_AMO_op_req ;

  // rule RL_cache_rl_drive_exception_rsp
  assign CAN_FIRE_RL_cache_rl_drive_exception_rsp =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_state == 4'd4 ;
  assign WILL_FIRE_RL_cache_rl_drive_exception_rsp =
	     CAN_FIRE_RL_cache_rl_drive_exception_rsp ;

  // rule RL_cache_master_xactor_ug_master_u_b_warnDoPut
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut =
	     cache_master_xactor_ug_master_u_b_putWire$whas &&
	     cache_master_xactor_shim_bff_rv[6] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut ;

  // rule RL_cache_master_xactor_ug_master_u_b_doPut
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut =
	     !cache_master_xactor_shim_bff_rv[6] &&
	     cache_master_xactor_ug_master_u_b_putWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut ;

  // rule RL_cache_rl_discard_write_rsp
  assign CAN_FIRE_RL_cache_rl_discard_write_rsp =
	     !cache_master_xactor_clearing &&
	     cache_master_xactor_shim_bff_rv$port1__read[6] ;
  assign WILL_FIRE_RL_cache_rl_discard_write_rsp =
	     CAN_FIRE_RL_cache_rl_discard_write_rsp ;

  // rule RL_cache_master_xactor_ug_master_u_r_warnDoPut
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut =
	     cache_master_xactor_ug_master_u_r_putWire$whas &&
	     cache_master_xactor_shim_rff_rv[137] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut ;

  // rule RL_cache_master_xactor_ug_master_u_r_doPut
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut =
	     !cache_master_xactor_shim_rff_rv[137] &&
	     cache_master_xactor_ug_master_u_r_putWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut ;

  // rule RL_cache_rl_io_read_rsp
  assign CAN_FIRE_RL_cache_rl_io_read_rsp =
	     !cache_master_xactor_clearing &&
	     cache_master_xactor_shim_rff_rv$port1__read[137] &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 4'd13 ;
  assign WILL_FIRE_RL_cache_rl_io_read_rsp =
	     CAN_FIRE_RL_cache_rl_io_read_rsp ;

  // rule RL_cache_rl_io_AMO_read_rsp
  assign CAN_FIRE_RL_cache_rl_io_AMO_read_rsp =
	     !cache_master_xactor_clearing &&
	     cache_master_xactor_shim_rff_rv$port1__read[137] &&
	     (cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 ||
	      cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d114 !=
	      4'd15 &&
	      !cache_master_xactor_shim_awff_rv[97] &&
	      !cache_master_xactor_shim_wff_rv[147]) &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 4'd15 ;
  assign WILL_FIRE_RL_cache_rl_io_AMO_read_rsp =
	     CAN_FIRE_RL_cache_rl_io_AMO_read_rsp ;

  // rule RL_cache_rl_start_cache_refill
  assign CAN_FIRE_RL_cache_rl_start_cache_refill =
	     !cache_master_xactor_clearing &&
	     !cache_master_xactor_shim_arff_rv[97] &&
	     !EN_req &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 4'd8 &&
	     cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d114 ==
	     4'd0 ;
  assign WILL_FIRE_RL_cache_rl_start_cache_refill =
	     CAN_FIRE_RL_cache_rl_start_cache_refill && !EN_req ;

  // rule RL_cache_rl_cache_refill_rsps_loop
  assign CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop =
	     !cache_master_xactor_clearing &&
	     cache_master_xactor_shim_rff_rv$port1__read[137] &&
	     !EN_req &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 4'd9 ;
  assign WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop =
	     CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop && !EN_req ;

  // rule RL_cache_rl_rereq
  assign CAN_FIRE_RL_cache_rl_rereq =
	     !EN_req && !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 4'd10 ;
  assign WILL_FIRE_RL_cache_rl_rereq = CAN_FIRE_RL_cache_rl_rereq && !EN_req ;

  // rule RL_cache_master_xactor_ug_master_u_aw_setPeek
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek =
	     cache_master_xactor_shim_awff_rv$port1__read[97] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek ;

  // rule RL_cache_master_xactor_ug_master_u_aw_warnDoDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop =
	     cache_master_xactor_ug_master_u_aw_dropWire$whas &&
	     !cache_master_xactor_shim_awff_rv$port1__read[97] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop ;

  // rule RL_cache_master_xactor_ug_master_u_aw_doDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop =
	     cache_master_xactor_shim_awff_rv$port1__read[97] &&
	     cache_master_xactor_ug_master_u_aw_dropWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop ;

  // rule RL_cache_master_xactor_ug_master_u_w_setPeek
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek =
	     cache_master_xactor_shim_wff_rv$port1__read[147] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek ;

  // rule RL_cache_master_xactor_ug_master_u_w_warnDoDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop =
	     cache_master_xactor_ug_master_u_w_dropWire$whas &&
	     !cache_master_xactor_shim_wff_rv$port1__read[147] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop ;

  // rule RL_cache_master_xactor_ug_master_u_w_doDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop =
	     cache_master_xactor_shim_wff_rv$port1__read[147] &&
	     cache_master_xactor_ug_master_u_w_dropWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop ;

  // rule RL_cache_master_xactor_ug_master_u_ar_setPeek
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek =
	     cache_master_xactor_shim_arff_rv$port1__read[97] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek ;

  // rule RL_cache_master_xactor_ug_master_u_ar_warnDoDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop =
	     cache_master_xactor_ug_master_u_ar_dropWire$whas &&
	     !cache_master_xactor_shim_arff_rv$port1__read[97] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop ;

  // rule RL_cache_master_xactor_ug_master_u_ar_doDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop =
	     cache_master_xactor_shim_arff_rv$port1__read[97] &&
	     cache_master_xactor_ug_master_u_ar_dropWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop ;

  // rule RL_cache_master_xactor_do_clear
  assign CAN_FIRE_RL_cache_master_xactor_do_clear =
	     cache_master_xactor_clearing ;
  assign WILL_FIRE_RL_cache_master_xactor_do_clear =
	     cache_master_xactor_clearing ;

  // inputs to muxes for submodule ports
  assign MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 ;
  assign MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_soc_map$m_is_mem_addr &&
	     NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d788 ;
  assign MUX_cache_dw_output_ld_val$wset_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 ;
  assign MUX_cache_dw_output_ld_val$wset_1__SEL_3 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d199 ;
  assign MUX_cache_dw_output_ld_val$wset_1__SEL_4 =
	     WILL_FIRE_RL_cache_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_ST_AMO_response ;
  assign MUX_cache_master_xactor_shim_arff_rv$port0__write_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_io_AMO_op_req ||
	     WILL_FIRE_RL_cache_rl_io_read_req ;
  assign MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 =
	     EN_req &&
	     (req_width_code_EQ_0b0_369_OR_req_width_code_EQ_ETC___d1405 ||
	      req_width_code == 3'b100 && req_addr[3:0] == 4'b0) ;
  assign MUX_cache_ram_word128_set$a_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 ;
  assign MUX_cache_ram_word128_set$b_put_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_word128_set_in_cache[1:0] != 2'd3 ;
  assign MUX_cache_rg_error_during_refill$write_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 ;
  assign MUX_cache_rg_exc_code$write_1__SEL_2 =
	     EN_req &&
	     NOT_req_width_code_EQ_0b0_369_370_AND_NOT_req__ETC___d1389 &&
	     (req_width_code != 3'b100 || req_addr[3:0] != 4'b0) ;
  assign MUX_cache_rg_exc_code$write_1__SEL_3 =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 ;
  assign MUX_cache_rg_exc_code$write_1__SEL_4 =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 ;
  assign MUX_cache_rg_exc_code$write_1__SEL_5 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && !EN_commit ;
  assign MUX_cache_rg_ld_val$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d503 ;
  assign MUX_cache_rg_lrsc_valid$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d193 ;
  assign MUX_cache_rg_state$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_word128_set_in_cache[1:0] == 2'd3 ;
  assign MUX_cache_rg_state$write_1__SEL_12 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     NOT_cache_dw_commit_whas__5_6_OR_NOT_cache_dw__ETC___d170 ;
  assign MUX_cache_rg_state$write_1__SEL_13 =
	     WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 ;
  assign MUX_cache_ctr_wr_rsps_pending_inrg$write_1__VAL_1 =
	     cache_ctr_wr_rsps_pending_inrg + 4'd1 ;
  assign MUX_cache_ctr_wr_rsps_pending_outrg$write_1__VAL_1 =
	     cache_ctr_wr_rsps_pending_outrg + 4'd1 ;
  assign MUX_cache_dw_output_ld_val$wset_1__VAL_1 = { 1'd0, x__h35415 } ;
  assign MUX_cache_dw_output_ld_val$wset_1__VAL_2 =
	     { 65'd0,
	       IF_cache_rg_width_code_02_EQ_2_07_THEN_SEXT_IF_ETC___d1277 } ;
  assign MUX_cache_dw_output_ld_val$wset_1__VAL_3 =
	     { cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d288,
	       IF_cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2__ETC___d465 } ;
  assign MUX_cache_dw_output_st_amo_val$wset_1__VAL_1 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) ?
	       { _0__q1[IF_cache_rg_addr_BITS_4_TO_0_EQ_0_THEN_1_ELSE_0__q2[0]],
		 128'd0 } :
	       129'd0 ;
  assign MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_1 =
	     { 5'd16,
	       mem_req_wr_addr_awaddr__h38358,
	       8'd0,
	       size_val__h37818,
	       18'd65536 } ;
  assign MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_2 =
	     { 5'd16, cline_fabric_addr__h31937, 29'd7405568 } ;
  assign MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_1 =
	     { 5'd16,
	       mem_req_wr_addr_awaddr__h38358,
	       8'd0,
	       _theResult___fst_val__h38441,
	       18'd65536 } ;
  assign MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_2 =
	     { 5'd16,
	       mem_req_wr_addr_awaddr__h31147,
	       8'd0,
	       _theResult___fst_val__h38441,
	       18'd65536 } ;
  assign MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_1 =
	     { 1'd1,
	       mem_req_wr_data_wdata__h38494,
	       mem_req_wr_data_wstrb__h38495,
	       3'd4 } ;
  assign MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_2 =
	     { 1'd1,
	       IF_cache_rg_op_4_EQ_1_02_OR_cache_rg_op_4_EQ_2_ETC___d802,
	       mem_req_wr_data_wstrb__h31284,
	       IF_cache_rg_op_4_EQ_1_02_OR_cache_rg_op_4_EQ_2_ETC___d815 } ;
  assign MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_3 =
	     { 1'd1,
	       mem_req_wr_data_wdata__h37103,
	       mem_req_wr_data_wstrb__h38495,
	       1'd1,
	       mem_req_wr_data_wuser__h26443 } ;
  assign MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1 =
	     { 3'd4, cache_rg_pa[31:12] } ;
  assign MUX_cache_ram_word128_set$a_put_3__VAL_1 =
	     { cache_master_xactor_shim_rff_rv$port1__read[1:0],
	       cache_master_xactor_shim_rff_rv$port1__read[132:5] } ;
  assign MUX_cache_ram_word128_set$a_put_3__VAL_2 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       { x__h22659, x__h22787 } :
	       { cache_ram_word128_set_b_read__61_BITS_129_TO_1_ETC___d563,
		 x__h27119 } ;
  assign MUX_cache_ram_word128_set$b_put_2__VAL_2 =
	     cache_rg_word128_set_in_cache + 8'd1 ;
  assign MUX_cache_ram_word128_set$b_put_2__VAL_4 =
	     { cache_rg_addr[11:6], 2'd0 } ;
  assign MUX_cache_rg_cset_in_cache$write_1__VAL_1 =
	     cache_rg_cset_in_cache + 6'd1 ;
  assign MUX_cache_rg_exc_code$write_1__VAL_1 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) ?
	       6'd5 :
	       6'd7 ;
  assign MUX_cache_rg_exc_code$write_1__VAL_2 =
	     (req_op == 2'd0) ? 6'd4 : 6'd6 ;
  assign MUX_cache_rg_ld_val$write_1__VAL_2 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       { 128'd0, lrsc_result__h21908 } :
	       { 65'd0,
		 IF_cache_rg_width_code_02_EQ_2_07_THEN_SEXT_IF_ETC___d543 } ;
  assign MUX_cache_rg_lrsc_valid$write_1__VAL_2 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__27_BITS__ETC___d133 ;
  assign MUX_cache_rg_st_amo_val$write_1__VAL_2 = { 65'd0, x__h27210 } ;
  assign MUX_cache_rg_state$write_1__VAL_2 =
	     (cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 ||
	      cache_rg_error_during_refill) ?
	       4'd4 :
	       4'd10 ;
  assign MUX_cache_rg_state$write_1__VAL_4 =
	     (NOT_req_width_code_EQ_0b0_369_370_AND_NOT_req__ETC___d1389 &&
	      (req_width_code != 3'b100 || req_addr[3:0] != 4'b0)) ?
	       4'd4 :
	       4'd3 ;
  assign MUX_cache_rg_state$write_1__VAL_5 =
	     (cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0) ?
	       4'd14 :
	       4'd4 ;
  assign MUX_cache_rg_state$write_1__VAL_12 =
	     EN_commit ?
	       (cache_soc_map$m_is_mem_addr ?
		  IF_cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2__ETC___d173 :
		  4'd12) :
	       4'd4 ;

  // inlined wires
  assign cache_master_xactor_ug_master_u_b_putWire$wget =
	     { mem_master_bid, mem_master_bresp } ;
  assign cache_master_xactor_ug_master_u_b_putWire$whas =
	     mem_master_bvalid && !cache_master_xactor_shim_bff_rv[6] ;
  assign cache_master_xactor_ug_master_u_r_putWire$wget =
	     { mem_master_rid,
	       mem_master_rdata,
	       mem_master_rresp,
	       mem_master_rlast,
	       mem_master_ruser } ;
  assign cache_master_xactor_ug_master_u_r_putWire$whas =
	     mem_master_rvalid && !cache_master_xactor_shim_rff_rv[137] ;
  assign cache_dw_valid$whas =
	     (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp ||
	      WILL_FIRE_RL_cache_rl_io_read_rsp) &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d199 ||
	     WILL_FIRE_RL_cache_rl_drive_exception_rsp ||
	     WILL_FIRE_RL_cache_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_ST_AMO_response ;
  always@(MUX_cache_dw_output_ld_val$wset_1__SEL_1 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_1 or
	  MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_1 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_2 or
	  MUX_cache_dw_output_ld_val$wset_1__SEL_3 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_3 or
	  MUX_cache_dw_output_ld_val$wset_1__SEL_4 or cache_rg_ld_val)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_dw_output_ld_val$wset_1__SEL_1:
	  cache_dw_output_ld_val$wget =
	      MUX_cache_dw_output_ld_val$wset_1__VAL_1;
      MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_1:
	  cache_dw_output_ld_val$wget =
	      MUX_cache_dw_output_ld_val$wset_1__VAL_2;
      MUX_cache_dw_output_ld_val$wset_1__SEL_3:
	  cache_dw_output_ld_val$wget =
	      MUX_cache_dw_output_ld_val$wset_1__VAL_3;
      MUX_cache_dw_output_ld_val$wset_1__SEL_4:
	  cache_dw_output_ld_val$wget = cache_rg_ld_val;
      default: cache_dw_output_ld_val$wget =
		   129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_dw_output_st_amo_val$wget =
	     MUX_cache_dw_output_ld_val$wset_1__SEL_3 ?
	       MUX_cache_dw_output_st_amo_val$wset_1__VAL_1 :
	       cache_rg_st_amo_val ;
  assign cache_master_xactor_ug_master_u_aw_dropWire$whas =
	     cache_master_xactor_shim_awff_rv$port1__read[97] &&
	     mem_master_awready ;
  assign cache_master_xactor_ug_master_u_w_dropWire$whas =
	     cache_master_xactor_shim_wff_rv$port1__read[147] &&
	     mem_master_wready ;
  assign cache_master_xactor_ug_master_u_ar_dropWire$whas =
	     cache_master_xactor_shim_arff_rv$port1__read[97] &&
	     mem_master_arready ;
  assign cache_master_xactor_shim_awff_rv$EN_port0__write =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_soc_map$m_is_mem_addr &&
	     NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d788 ||
	     WILL_FIRE_RL_cache_rl_io_write_req ;
  always@(MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_1 or
	  MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_1 or
	  MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_2 or
	  MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_2 or
	  WILL_FIRE_RL_cache_rl_io_write_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_1:
	  cache_master_xactor_shim_awff_rv$port0__write_1 =
	      MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_1;
      MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_2:
	  cache_master_xactor_shim_awff_rv$port0__write_1 =
	      MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_2;
      WILL_FIRE_RL_cache_rl_io_write_req:
	  cache_master_xactor_shim_awff_rv$port0__write_1 =
	      MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_1;
      default: cache_master_xactor_shim_awff_rv$port0__write_1 =
		   98'h2AAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_master_xactor_shim_awff_rv$port1__read =
	     cache_master_xactor_shim_awff_rv$EN_port0__write ?
	       cache_master_xactor_shim_awff_rv$port0__write_1 :
	       cache_master_xactor_shim_awff_rv ;
  assign cache_master_xactor_shim_awff_rv$port2__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop ?
	       98'h0AAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_awff_rv$port1__read ;
  assign cache_master_xactor_shim_awff_rv$port3__read =
	     cache_master_xactor_clearing ?
	       98'h0AAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_awff_rv$port2__read ;
  assign cache_master_xactor_shim_wff_rv$EN_port0__write =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_soc_map$m_is_mem_addr &&
	     NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d788 ||
	     WILL_FIRE_RL_cache_rl_io_write_req ;
  always@(MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_1 or
	  MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_1 or
	  MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_2 or
	  MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_2 or
	  WILL_FIRE_RL_cache_rl_io_write_req or
	  MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_1:
	  cache_master_xactor_shim_wff_rv$port0__write_1 =
	      MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_1;
      MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_2:
	  cache_master_xactor_shim_wff_rv$port0__write_1 =
	      MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_2;
      WILL_FIRE_RL_cache_rl_io_write_req:
	  cache_master_xactor_shim_wff_rv$port0__write_1 =
	      MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_3;
      default: cache_master_xactor_shim_wff_rv$port0__write_1 =
		   148'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_master_xactor_shim_wff_rv$port1__read =
	     cache_master_xactor_shim_wff_rv$EN_port0__write ?
	       cache_master_xactor_shim_wff_rv$port0__write_1 :
	       cache_master_xactor_shim_wff_rv ;
  assign cache_master_xactor_shim_wff_rv$port2__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop ?
	       148'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_wff_rv$port1__read ;
  assign cache_master_xactor_shim_wff_rv$port3__read =
	     cache_master_xactor_clearing ?
	       148'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_wff_rv$port2__read ;
  assign cache_master_xactor_shim_bff_rv$port0__write_1 =
	     { 1'd1, cache_master_xactor_ug_master_u_b_putWire$wget } ;
  assign cache_master_xactor_shim_bff_rv$port1__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut ?
	       cache_master_xactor_shim_bff_rv$port0__write_1 :
	       cache_master_xactor_shim_bff_rv ;
  assign cache_master_xactor_shim_bff_rv$port2__read =
	     CAN_FIRE_RL_cache_rl_discard_write_rsp ?
	       7'd42 :
	       cache_master_xactor_shim_bff_rv$port1__read ;
  assign cache_master_xactor_shim_bff_rv$port3__read =
	     cache_master_xactor_clearing ?
	       7'd42 :
	       cache_master_xactor_shim_bff_rv$port2__read ;
  assign cache_master_xactor_shim_arff_rv$EN_port0__write =
	     WILL_FIRE_RL_cache_rl_io_AMO_op_req ||
	     WILL_FIRE_RL_cache_rl_io_read_req ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;
  assign cache_master_xactor_shim_arff_rv$port0__write_1 =
	     MUX_cache_master_xactor_shim_arff_rv$port0__write_1__SEL_1 ?
	       MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_1 :
	       MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_2 ;
  assign cache_master_xactor_shim_arff_rv$port1__read =
	     cache_master_xactor_shim_arff_rv$EN_port0__write ?
	       cache_master_xactor_shim_arff_rv$port0__write_1 :
	       cache_master_xactor_shim_arff_rv ;
  assign cache_master_xactor_shim_arff_rv$port2__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop ?
	       98'h0AAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_arff_rv$port1__read ;
  assign cache_master_xactor_shim_arff_rv$port3__read =
	     cache_master_xactor_clearing ?
	       98'h0AAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_arff_rv$port2__read ;
  assign cache_master_xactor_shim_rff_rv$port0__write_1 =
	     { 1'd1, cache_master_xactor_ug_master_u_r_putWire$wget } ;
  assign cache_master_xactor_shim_rff_rv$port1__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut ?
	       cache_master_xactor_shim_rff_rv$port0__write_1 :
	       cache_master_xactor_shim_rff_rv ;
  assign cache_master_xactor_shim_rff_rv$EN_port1__write =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop ;
  assign cache_master_xactor_shim_rff_rv$port2__read =
	     cache_master_xactor_shim_rff_rv$EN_port1__write ?
	       138'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_rff_rv$port1__read ;
  assign cache_master_xactor_shim_rff_rv$port3__read =
	     cache_master_xactor_clearing ?
	       138'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_rff_rv$port2__read ;
  assign cache_crg_sb_to_load_delay$port0__write_1 =
	     { 1'd0, cache_crg_sb_to_load_delay[10:1] } ;
  assign cache_crg_sb_to_load_delay$EN_port1__write =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     cache_rg_op_4_EQ_1_02_OR_cache_rg_op_4_EQ_2_6__ETC___d782 ;
  assign cache_crg_sb_to_load_delay$port2__read =
	     cache_crg_sb_to_load_delay$EN_port1__write ?
	       11'd2047 :
	       cache_crg_sb_to_load_delay$port0__write_1 ;

  // register cache_cfg_verbosity
  assign cache_cfg_verbosity$D_IN = set_verbosity_verbosity ;
  assign cache_cfg_verbosity$EN = EN_set_verbosity ;

  // register cache_crg_sb_to_load_delay
  assign cache_crg_sb_to_load_delay$D_IN =
	     cache_crg_sb_to_load_delay$port2__read ;
  assign cache_crg_sb_to_load_delay$EN = 1'b1 ;

  // register cache_ctr_wr_rsps_pending_inrg
  always@(MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_1 or
	  MUX_cache_ctr_wr_rsps_pending_inrg$write_1__VAL_1 or
	  MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_2 or
	  WILL_FIRE_RL_cache_rl_io_write_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_1:
	  cache_ctr_wr_rsps_pending_inrg$D_IN =
	      MUX_cache_ctr_wr_rsps_pending_inrg$write_1__VAL_1;
      MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_2:
	  cache_ctr_wr_rsps_pending_inrg$D_IN =
	      MUX_cache_ctr_wr_rsps_pending_inrg$write_1__VAL_1;
      WILL_FIRE_RL_cache_rl_io_write_req:
	  cache_ctr_wr_rsps_pending_inrg$D_IN =
	      MUX_cache_ctr_wr_rsps_pending_inrg$write_1__VAL_1;
      default: cache_ctr_wr_rsps_pending_inrg$D_IN =
		   4'b1010 /* unspecified value */ ;
    endcase
  end
  assign cache_ctr_wr_rsps_pending_inrg$EN =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_soc_map$m_is_mem_addr &&
	     NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d788 ||
	     WILL_FIRE_RL_cache_rl_io_write_req ;

  // register cache_ctr_wr_rsps_pending_outrg
  assign cache_ctr_wr_rsps_pending_outrg$D_IN =
	     WILL_FIRE_RL_cache_rl_discard_write_rsp ?
	       MUX_cache_ctr_wr_rsps_pending_outrg$write_1__VAL_1 :
	       cache_ctr_wr_rsps_pending_inrg ;
  assign cache_ctr_wr_rsps_pending_outrg$EN =
	     WILL_FIRE_RL_cache_rl_start_reset && !cache_f_reset_reqs$D_OUT ||
	     WILL_FIRE_RL_cache_rl_discard_write_rsp ;

  // register cache_master_xactor_clearing
  assign cache_master_xactor_clearing$D_IN = !cache_master_xactor_clearing ;
  assign cache_master_xactor_clearing$EN =
	     WILL_FIRE_RL_cache_rl_reset && !cache_f_reset_reqs$D_OUT ||
	     cache_master_xactor_clearing ;

  // register cache_master_xactor_shim_arff_rv
  assign cache_master_xactor_shim_arff_rv$D_IN =
	     cache_master_xactor_shim_arff_rv$port3__read ;
  assign cache_master_xactor_shim_arff_rv$EN = 1'b1 ;

  // register cache_master_xactor_shim_awff_rv
  assign cache_master_xactor_shim_awff_rv$D_IN =
	     cache_master_xactor_shim_awff_rv$port3__read ;
  assign cache_master_xactor_shim_awff_rv$EN = 1'b1 ;

  // register cache_master_xactor_shim_bff_rv
  assign cache_master_xactor_shim_bff_rv$D_IN =
	     cache_master_xactor_shim_bff_rv$port3__read ;
  assign cache_master_xactor_shim_bff_rv$EN = 1'b1 ;

  // register cache_master_xactor_shim_rff_rv
  assign cache_master_xactor_shim_rff_rv$D_IN =
	     cache_master_xactor_shim_rff_rv$port3__read ;
  assign cache_master_xactor_shim_rff_rv$EN = 1'b1 ;

  // register cache_master_xactor_shim_wff_rv
  assign cache_master_xactor_shim_wff_rv$D_IN =
	     cache_master_xactor_shim_wff_rv$port3__read ;
  assign cache_master_xactor_shim_wff_rv$EN = 1'b1 ;

  // register cache_rg_addr
  assign cache_rg_addr$D_IN = req_addr ;
  assign cache_rg_addr$EN = EN_req ;

  // register cache_rg_amo_funct7
  assign cache_rg_amo_funct7$D_IN = req_amo_funct7 ;
  assign cache_rg_amo_funct7$EN = EN_req ;

  // register cache_rg_cset_in_cache
  assign cache_rg_cset_in_cache$D_IN =
	     WILL_FIRE_RL_cache_rl_reset ?
	       MUX_cache_rg_cset_in_cache$write_1__VAL_1 :
	       6'd0 ;
  assign cache_rg_cset_in_cache$EN =
	     WILL_FIRE_RL_cache_rl_reset ||
	     WILL_FIRE_RL_cache_rl_start_reset ;

  // register cache_rg_error_during_refill
  assign cache_rg_error_during_refill$D_IN =
	     MUX_cache_rg_error_during_refill$write_1__SEL_1 ;
  assign cache_rg_error_during_refill$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // register cache_rg_exc_code
  always@(MUX_cache_rg_error_during_refill$write_1__SEL_1 or
	  MUX_cache_rg_exc_code$write_1__VAL_1 or
	  MUX_cache_rg_exc_code$write_1__SEL_2 or
	  MUX_cache_rg_exc_code$write_1__VAL_2 or
	  MUX_cache_rg_exc_code$write_1__SEL_3 or
	  MUX_cache_rg_exc_code$write_1__SEL_4 or
	  MUX_cache_rg_exc_code$write_1__SEL_5)
  case (1'b1)
    MUX_cache_rg_error_during_refill$write_1__SEL_1:
	cache_rg_exc_code$D_IN = MUX_cache_rg_exc_code$write_1__VAL_1;
    MUX_cache_rg_exc_code$write_1__SEL_2:
	cache_rg_exc_code$D_IN = MUX_cache_rg_exc_code$write_1__VAL_2;
    MUX_cache_rg_exc_code$write_1__SEL_3: cache_rg_exc_code$D_IN = 6'd7;
    MUX_cache_rg_exc_code$write_1__SEL_4: cache_rg_exc_code$D_IN = 6'd5;
    MUX_cache_rg_exc_code$write_1__SEL_5: cache_rg_exc_code$D_IN = 6'd32;
    default: cache_rg_exc_code$D_IN = 6'b101010 /* unspecified value */ ;
  endcase
  assign cache_rg_exc_code$EN =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && !EN_commit ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 ||
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 ||
	     EN_req &&
	     NOT_req_width_code_EQ_0b0_369_370_AND_NOT_req__ETC___d1389 &&
	     (req_width_code != 3'b100 || req_addr[3:0] != 4'b0) ;

  // register cache_rg_is_unsigned
  assign cache_rg_is_unsigned$D_IN = req_is_unsigned ;
  assign cache_rg_is_unsigned$EN = EN_req ;

  // register cache_rg_ld_val
  always@(MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_1 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_2 or
	  MUX_cache_rg_ld_val$write_1__SEL_2 or
	  MUX_cache_rg_ld_val$write_1__VAL_2 or
	  WILL_FIRE_RL_cache_rl_io_read_rsp or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_1 or
	  WILL_FIRE_RL_cache_rl_io_AMO_SC_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_1:
	  cache_rg_ld_val$D_IN = MUX_cache_dw_output_ld_val$wset_1__VAL_2;
      MUX_cache_rg_ld_val$write_1__SEL_2:
	  cache_rg_ld_val$D_IN = MUX_cache_rg_ld_val$write_1__VAL_2;
      WILL_FIRE_RL_cache_rl_io_read_rsp:
	  cache_rg_ld_val$D_IN = MUX_cache_dw_output_ld_val$wset_1__VAL_1;
      WILL_FIRE_RL_cache_rl_io_AMO_SC_req: cache_rg_ld_val$D_IN = 129'd1;
      default: cache_rg_ld_val$D_IN =
		   129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_rg_ld_val$EN =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d503 ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_io_AMO_SC_req ;

  // register cache_rg_lower_word64
  assign cache_rg_lower_word64$D_IN = 64'h0 ;
  assign cache_rg_lower_word64$EN = 1'b0 ;

  // register cache_rg_lower_word64_full
  assign cache_rg_lower_word64_full$D_IN = 1'd0 ;
  assign cache_rg_lower_word64_full$EN =
	     WILL_FIRE_RL_cache_rl_start_cache_refill ||
	     WILL_FIRE_RL_cache_rl_start_reset ;

  // register cache_rg_lrsc_pa
  assign cache_rg_lrsc_pa$D_IN = cache_rg_addr ;
  assign cache_rg_lrsc_pa$EN =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00010 &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__27_BITS__ETC___d133 ;

  // register cache_rg_lrsc_valid
  assign cache_rg_lrsc_valid$D_IN =
	     MUX_cache_rg_lrsc_valid$write_1__SEL_2 &&
	     MUX_cache_rg_lrsc_valid$write_1__VAL_2 ;
  assign cache_rg_lrsc_valid$EN =
	     WILL_FIRE_RL_cache_rl_io_read_req && cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00010 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d193 ||
	     WILL_FIRE_RL_cache_rl_start_reset ;

  // register cache_rg_op
  assign cache_rg_op$D_IN = req_op ;
  assign cache_rg_op$EN = EN_req ;

  // register cache_rg_pa
  assign cache_rg_pa$D_IN = EN_req ? req_addr : cache_rg_addr ;
  assign cache_rg_pa$EN =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit ||
	     EN_req ;

  // register cache_rg_pte_pa
  assign cache_rg_pte_pa$D_IN = 32'h0 ;
  assign cache_rg_pte_pa$EN = 1'b0 ;

  // register cache_rg_st_amo_val
  assign cache_rg_st_amo_val$D_IN =
	     EN_req ? req_st_value : MUX_cache_rg_st_amo_val$write_1__VAL_2 ;
  assign cache_rg_st_amo_val$EN =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d874 ||
	     EN_req ;

  // register cache_rg_state
  always@(WILL_FIRE_RL_cache_rl_rereq or
	  MUX_cache_rg_state$write_1__SEL_2 or
	  MUX_cache_rg_state$write_1__VAL_2 or
	  WILL_FIRE_RL_cache_rl_start_cache_refill or
	  EN_req or
	  MUX_cache_rg_state$write_1__VAL_4 or
	  WILL_FIRE_RL_cache_rl_io_AMO_read_rsp or
	  MUX_cache_rg_state$write_1__VAL_5 or
	  WILL_FIRE_RL_cache_rl_io_read_rsp or
	  WILL_FIRE_RL_cache_rl_io_AMO_op_req or
	  WILL_FIRE_RL_cache_rl_io_AMO_SC_req or
	  WILL_FIRE_RL_cache_rl_io_write_req or
	  WILL_FIRE_RL_cache_rl_io_read_req or
	  WILL_FIRE_RL_cache_rl_start_reset or
	  MUX_cache_rg_state$write_1__SEL_12 or
	  MUX_cache_rg_state$write_1__VAL_12 or
	  MUX_cache_rg_state$write_1__SEL_13)
  case (1'b1)
    WILL_FIRE_RL_cache_rl_rereq: cache_rg_state$D_IN = 4'd3;
    MUX_cache_rg_state$write_1__SEL_2:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_2;
    WILL_FIRE_RL_cache_rl_start_cache_refill: cache_rg_state$D_IN = 4'd9;
    EN_req: cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_4;
    WILL_FIRE_RL_cache_rl_io_AMO_read_rsp:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_5;
    WILL_FIRE_RL_cache_rl_io_read_rsp:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_5;
    WILL_FIRE_RL_cache_rl_io_AMO_op_req: cache_rg_state$D_IN = 4'd15;
    WILL_FIRE_RL_cache_rl_io_AMO_SC_req || WILL_FIRE_RL_cache_rl_io_write_req:
	cache_rg_state$D_IN = 4'd11;
    WILL_FIRE_RL_cache_rl_io_read_req: cache_rg_state$D_IN = 4'd13;
    WILL_FIRE_RL_cache_rl_start_reset: cache_rg_state$D_IN = 4'd1;
    MUX_cache_rg_state$write_1__SEL_12:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_12;
    MUX_cache_rg_state$write_1__SEL_13: cache_rg_state$D_IN = 4'd2;
    default: cache_rg_state$D_IN = 4'b1010 /* unspecified value */ ;
  endcase
  assign cache_rg_state$EN =
	     WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_word128_set_in_cache[1:0] == 2'd3 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     NOT_cache_dw_commit_whas__5_6_OR_NOT_cache_dw__ETC___d170 ||
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp ||
	     EN_req ||
	     WILL_FIRE_RL_cache_rl_start_reset ||
	     WILL_FIRE_RL_cache_rl_rereq ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ||
	     WILL_FIRE_RL_cache_rl_io_AMO_SC_req ||
	     WILL_FIRE_RL_cache_rl_io_write_req ||
	     WILL_FIRE_RL_cache_rl_io_read_req ||
	     WILL_FIRE_RL_cache_rl_io_AMO_op_req ;

  // register cache_rg_width_code
  assign cache_rg_width_code$D_IN = req_width_code ;
  assign cache_rg_width_code$EN = EN_req ;

  // register cache_rg_word128_set_in_cache
  assign cache_rg_word128_set_in_cache$D_IN =
	     MUX_cache_ram_word128_set$b_put_1__SEL_2 ?
	       MUX_cache_ram_word128_set$b_put_2__VAL_2 :
	       MUX_cache_ram_word128_set$b_put_2__VAL_4 ;
  assign cache_rg_word128_set_in_cache$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_word128_set_in_cache[1:0] != 2'd3 ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // submodule cache_f_reset_reqs
  assign cache_f_reset_reqs$D_IN = !EN_server_reset_request_put ;
  assign cache_f_reset_reqs$ENQ =
	     EN_server_reset_request_put || EN_server_flush_request_put ;
  assign cache_f_reset_reqs$DEQ = MUX_cache_rg_state$write_1__SEL_13 ;
  assign cache_f_reset_reqs$CLR = 1'b0 ;

  // submodule cache_f_reset_rsps
  assign cache_f_reset_rsps$D_IN = cache_f_reset_reqs$D_OUT ;
  assign cache_f_reset_rsps$ENQ = MUX_cache_rg_state$write_1__SEL_13 ;
  assign cache_f_reset_rsps$DEQ =
	     EN_server_flush_response_get || EN_server_reset_response_get ;
  assign cache_f_reset_rsps$CLR = 1'b0 ;

  // submodule cache_ram_state_and_ctag_cset
  assign cache_ram_state_and_ctag_cset$ADDRA =
	     WILL_FIRE_RL_cache_rl_start_cache_refill ?
	       cache_rg_addr[11:6] :
	       cache_rg_cset_in_cache ;
  assign cache_ram_state_and_ctag_cset$ADDRB =
	     MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       req_addr[11:6] :
	       cache_rg_addr[11:6] ;
  assign cache_ram_state_and_ctag_cset$DIA =
	     WILL_FIRE_RL_cache_rl_start_cache_refill ?
	       MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1 :
	       23'd2796202 ;
  assign cache_ram_state_and_ctag_cset$DIB =
	     MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       23'b01010101010101010101010 /* unspecified value */  :
	       23'b01010101010101010101010 /* unspecified value */  ;
  assign cache_ram_state_and_ctag_cset$WEA = 1'd1 ;
  assign cache_ram_state_and_ctag_cset$WEB = 1'd0 ;
  assign cache_ram_state_and_ctag_cset$ENA =
	     WILL_FIRE_RL_cache_rl_start_cache_refill ||
	     WILL_FIRE_RL_cache_rl_reset ;
  assign cache_ram_state_and_ctag_cset$ENB =
	     MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 ||
	     WILL_FIRE_RL_cache_rl_rereq ;

  // submodule cache_ram_word128_set
  assign cache_ram_word128_set$ADDRA =
	     MUX_cache_ram_word128_set$a_put_1__SEL_1 ?
	       cache_rg_word128_set_in_cache :
	       cache_rg_addr[11:4] ;
  always@(MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  req_addr or
	  MUX_cache_ram_word128_set$b_put_1__SEL_2 or
	  MUX_cache_ram_word128_set$b_put_2__VAL_2 or
	  WILL_FIRE_RL_cache_rl_rereq or
	  cache_rg_addr or
	  WILL_FIRE_RL_cache_rl_start_cache_refill or
	  MUX_cache_ram_word128_set$b_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  cache_ram_word128_set$ADDRB = req_addr[11:4];
      MUX_cache_ram_word128_set$b_put_1__SEL_2:
	  cache_ram_word128_set$ADDRB =
	      MUX_cache_ram_word128_set$b_put_2__VAL_2;
      WILL_FIRE_RL_cache_rl_rereq:
	  cache_ram_word128_set$ADDRB = cache_rg_addr[11:4];
      WILL_FIRE_RL_cache_rl_start_cache_refill:
	  cache_ram_word128_set$ADDRB =
	      MUX_cache_ram_word128_set$b_put_2__VAL_4;
      default: cache_ram_word128_set$ADDRB =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  assign cache_ram_word128_set$DIA =
	     MUX_cache_ram_word128_set$a_put_1__SEL_1 ?
	       MUX_cache_ram_word128_set$a_put_3__VAL_1 :
	       MUX_cache_ram_word128_set$a_put_3__VAL_2 ;
  always@(MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  MUX_cache_ram_word128_set$b_put_1__SEL_2 or
	  WILL_FIRE_RL_cache_rl_rereq or
	  WILL_FIRE_RL_cache_rl_start_cache_refill)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  cache_ram_word128_set$DIB =
	      130'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      MUX_cache_ram_word128_set$b_put_1__SEL_2:
	  cache_ram_word128_set$DIB =
	      130'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_cache_rl_rereq:
	  cache_ram_word128_set$DIB =
	      130'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_cache_rl_start_cache_refill:
	  cache_ram_word128_set$DIB =
	      130'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      default: cache_ram_word128_set$DIB =
		   130'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_ram_word128_set$WEA = 1'd1 ;
  assign cache_ram_word128_set$WEB = 1'd0 ;
  assign cache_ram_word128_set$ENA =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d551 ;
  assign cache_ram_word128_set$ENB =
	     MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_word128_set_in_cache[1:0] != 2'd3 ||
	     WILL_FIRE_RL_cache_rl_rereq ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // submodule cache_soc_map
  assign cache_soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign cache_soc_map$m_is_mem_addr_addr = { 32'd0, cache_rg_addr } ;
  assign cache_soc_map$m_is_near_mem_IO_addr_addr = 64'h0 ;

  // remaining internal signals
  assign IF_cache_rg_addr_BITS_4_TO_0_EQ_0_THEN_1_ELSE_0__q2 =
	     (cache_rg_addr[4:0] == 5'd0) ? 32'd1 : 32'd0 ;
  assign IF_cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2__ETC___d173 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) ?
	       4'd8 :
	       IF_cache_rg_op_4_EQ_1_02_OR_cache_rg_op_4_EQ_2_ETC___d172 ;
  assign IF_cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2__ETC___d465 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) ?
	       x__h20375 :
	       x__h25767 ;
  assign IF_cache_rg_op_4_EQ_1_02_OR_cache_rg_op_4_EQ_2_ETC___d137 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011 &&
	       lrsc_result__h21908 ||
	       NOT_cache_master_xactor_clearing_read__0_8_AND_ETC___d125 :
	       !cache_ram_state_and_ctag_cset$DOB[22] ||
	       !cache_ram_state_and_ctag_cset_b_read__27_BITS__ETC___d133 ||
	       NOT_cache_master_xactor_clearing_read__0_8_AND_ETC___d125 ;
  assign IF_cache_rg_op_4_EQ_1_02_OR_cache_rg_op_4_EQ_2_ETC___d172 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       4'd11 :
	       ((!cache_ram_state_and_ctag_cset$DOB[22] ||
		 !cache_ram_state_and_ctag_cset_b_read__27_BITS__ETC___d133) ?
		  4'd8 :
		  4'd11) ;
  assign IF_cache_rg_op_4_EQ_1_02_OR_cache_rg_op_4_EQ_2_ETC___d802 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       mem_req_wr_data_wdata__h26440 :
	       mem_req_wr_data_wdata__h31283 ;
  assign IF_cache_rg_op_4_EQ_1_02_OR_cache_rg_op_4_EQ_2_ETC___d815 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       { 1'd1, mem_req_wr_data_wuser__h26443 } :
	       3'd4 ;
  assign IF_cache_rg_width_code_02_EQ_2_07_THEN_SEXT_IF_ETC___d1277 =
	     (cache_rg_width_code == 3'd2) ?
	       { {32{x8680_BITS_31_TO_0__q98[31]}},
		 x8680_BITS_31_TO_0__q98 } :
	       x__h38680[63:0] ;
  assign IF_cache_rg_width_code_02_EQ_2_07_THEN_SEXT_IF_ETC___d543 =
	     (cache_rg_width_code == 3'd2) ?
	       { {32{x7357_BITS_31_TO_0__q64[31]}},
		 x7357_BITS_31_TO_0__q64 } :
	       x__h27357[63:0] ;
  assign IF_cache_rg_width_code_02_EQ_2_07_THEN_SEXT_ca_ETC___d672 =
	     (cache_rg_width_code == 3'd2) ?
	       { {32{cache_rg_st_amo_val_BITS_31_TO_0__q65[31]}},
		 cache_rg_st_amo_val_BITS_31_TO_0__q65 } :
	       cache_rg_st_amo_val[63:0] ;
  assign IF_cache_rg_width_code_02_EQ_3_11_THEN_IF_cach_ETC___d286 =
	     (cache_rg_width_code == 3'd3) ?
	       ((cache_rg_addr[3:0] == 4'h0) ?
		  cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[128] :
		  cache_rg_addr[3:0] == 4'h8 &&
		  cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[129]) :
	       cache_rg_width_code == 3'd4 &&
	       cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[128] ;
  assign NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 =
	     cache_cfg_verbosity > 4'd1 ;
  assign NOT_cache_cfg_verbosity_read__3_ULE_2_06___d907 =
	     cache_cfg_verbosity > 4'd2 ;
  assign NOT_cache_dw_commit_whas__5_6_OR_NOT_cache_dw__ETC___d170 =
	     !EN_commit ||
	     cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d162 ||
	     NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d167 ||
	     !cache_soc_map$m_is_mem_addr ;
  assign NOT_cache_f_reset_reqs_notEmpty__4_41_AND_cach_ETC___d152 =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_state == 4'd3 &&
	     (cache_rg_op != 2'd0 &&
	      (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) ||
	      cache_crg_sb_to_load_delay$port0__write_1 == 11'd0) ;
  assign NOT_cache_f_reset_reqs_notEmpty__4_41_AND_cach_ETC___d955 =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_state == 4'd12 &&
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) ;
  assign NOT_cache_master_xactor_clearing_read__0_8_AND_ETC___d125 =
	     !cache_master_xactor_clearing &&
	     cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d114 !=
	     4'd15 &&
	     !cache_master_xactor_shim_awff_rv[97] &&
	     !cache_master_xactor_shim_wff_rv[147] ;
  assign NOT_cache_ram_state_and_ctag_cset_b_read__27_B_ETC___d181 =
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__27_BITS__ETC___d133) &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00010 &&
	     cache_rg_addr_0_EQ_cache_rg_lrsc_pa_08___d179 ;
  assign NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d167 =
	     cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_08_EQ_cache_rg_addr_0___d109) ;
  assign NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d788 =
	     cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     (cache_rg_op_4_EQ_1_02_OR_cache_rg_op_4_EQ_2_6__ETC___d786 ||
	      NOT_cache_rg_op_4_EQ_1_02_87_AND_NOT_cache_rg__ETC___d548) ;
  assign NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d839 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_cache_rg_op_4_EQ_2_6_45_OR_NOT_cache_rg_am_ETC___d837 ;
  assign NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d849 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_cache_rg_op_4_EQ_2_6_45_OR_NOT_cache_rg_am_ETC___d847 ;
  assign NOT_cache_rg_op_4_EQ_1_02_87_AND_NOT_cache_rg__ETC___d190 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__27_BITS__ETC___d133 &&
	     cache_rg_addr_0_EQ_cache_rg_lrsc_pa_08___d179 ;
  assign NOT_cache_rg_op_4_EQ_1_02_87_AND_NOT_cache_rg__ETC___d548 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__27_BITS__ETC___d133 ;
  assign NOT_cache_rg_op_4_EQ_1_02_87_AND_NOT_cache_rg__ETC___d781 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__27_BITS__ETC___d133 &&
	     (cache_rg_width_code == 3'd0 || cache_rg_width_code == 3'd1) ;
  assign NOT_cache_rg_op_4_EQ_1_02_87_AND_NOT_cache_rg__ETC___d859 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__27_BITS__ETC___d133) &&
	     NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 ;
  assign NOT_cache_rg_op_4_EQ_1_02_87_AND_NOT_cache_rg__ETC___d863 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__27_BITS__ETC___d133 &&
	     NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 ;
  assign NOT_cache_rg_op_4_EQ_1_02_87_AND_NOT_cache_rg__ETC___d869 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__27_BITS__ETC___d133 &&
	     cache_rg_addr_0_EQ_cache_rg_lrsc_pa_08___d179 &&
	     NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 ;
  assign NOT_cache_rg_op_4_EQ_2_6_45_OR_NOT_cache_rg_am_ETC___d546 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_08_EQ_cache_rg_addr_0___d109) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__27_BITS__ETC___d133 ;
  assign NOT_cache_rg_op_4_EQ_2_6_45_OR_NOT_cache_rg_am_ETC___d779 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_08_EQ_cache_rg_addr_0___d109) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__27_BITS__ETC___d133 &&
	     (cache_rg_width_code == 3'd0 || cache_rg_width_code == 3'd1) ;
  assign NOT_cache_rg_op_4_EQ_2_6_45_OR_NOT_cache_rg_am_ETC___d837 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_08_EQ_cache_rg_addr_0___d109) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__27_BITS__ETC___d133 &&
	     NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 ;
  assign NOT_cache_rg_op_4_EQ_2_6_45_OR_NOT_cache_rg_am_ETC___d842 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_08_EQ_cache_rg_addr_0___d109) &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__27_BITS__ETC___d133) &&
	     NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 ;
  assign NOT_cache_rg_op_4_EQ_2_6_45_OR_NOT_cache_rg_am_ETC___d847 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_08_EQ_cache_rg_addr_0___d109) &&
	     NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 ;
  assign NOT_req_width_code_EQ_0b0_369_370_AND_NOT_req__ETC___d1389 =
	     req_width_code != 3'b0 &&
	     (req_width_code != 3'b001 || req_addr[0]) &&
	     (req_width_code != 3'b010 || req_addr[1:0] != 2'b0) &&
	     (req_width_code != 3'b011 || req_addr[2:0] != 3'b0) ;
  assign SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d292 =
	     { {120{cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q48[7]}},
	       cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q48 } ;
  assign SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d297 =
	     { {120{cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q62[7]}},
	       cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q62 } ;
  assign SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d302 =
	     { {120{cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q46[7]}},
	       cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q46 } ;
  assign SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d307 =
	     { {120{cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q61[7]}},
	       cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q61 } ;
  assign SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d312 =
	     { {120{cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q44[7]}},
	       cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q44 } ;
  assign SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d317 =
	     { {120{cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q60[7]}},
	       cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q60 } ;
  assign SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d322 =
	     { {120{cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q42[7]}},
	       cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q42 } ;
  assign SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d327 =
	     { {120{cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q59[7]}},
	       cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q59 } ;
  assign SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d331 =
	     { {120{cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q40[7]}},
	       cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q40 } ;
  assign SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d336 =
	     { {120{cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q58[7]}},
	       cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q58 } ;
  assign SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d341 =
	     { {120{cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q38[7]}},
	       cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q38 } ;
  assign SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d346 =
	     { {120{cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q57[7]}},
	       cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q57 } ;
  assign SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d351 =
	     { {120{cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q36[7]}},
	       cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q36 } ;
  assign SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d356 =
	     { {120{cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q55[7]}},
	       cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q55 } ;
  assign SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d361 =
	     { {120{cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q34[7]}},
	       cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q34 } ;
  assign SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d366 =
	     { {120{cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q56[7]}},
	       cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q56 } ;
  assign SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d386 =
	     { {112{cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q47[15]}},
	       cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q47 } ;
  assign SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d390 =
	     { {112{cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q45[15]}},
	       cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q45 } ;
  assign SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d394 =
	     { {112{cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q43[15]}},
	       cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q43 } ;
  assign SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d398 =
	     { {112{cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q41[15]}},
	       cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q41 } ;
  assign SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d402 =
	     { {112{cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q39[15]}},
	       cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q39 } ;
  assign SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d406 =
	     { {112{cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q37[15]}},
	       cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q37 } ;
  assign SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d410 =
	     { {112{cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q35[15]}},
	       cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q35 } ;
  assign SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d414 =
	     { {112{cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q33[15]}},
	       cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q33 } ;
  assign SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d426 =
	     { {96{cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q52[31]}},
	       cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q52 } ;
  assign SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d430 =
	     { {96{cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q51[31]}},
	       cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q51 } ;
  assign SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d434 =
	     { {96{cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q50[31]}},
	       cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q50 } ;
  assign SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d438 =
	     { {96{cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q49[31]}},
	       cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q49 } ;
  assign SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d446 =
	     { {64{cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q53[63]}},
	       cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q53 } ;
  assign SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d450 =
	     { {64{cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q54[63]}},
	       cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q54 } ;
  assign _0__q1 = 2'd0 ;
  assign _theResult___snd_fst__h26449 =
	     cache_rg_st_amo_val[127:0] << shift_bits__h31154 ;
  assign _theResult___snd_fst__h31292 =
	     { 64'd0, x__h27210 } << shift_bits__h31154 ;
  assign _theResult___snd_fst__h37112 =
	     cache_rg_st_amo_val[127:0] << shift_bits__h38365 ;
  assign _theResult___snd_fst__h38503 =
	     word128__h38362 << shift_bits__h38365 ;
  assign access_exc_code__h4894 = MUX_cache_rg_exc_code$write_1__VAL_1 ;
  assign cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d114 =
	     cache_ctr_wr_rsps_pending_inrg -
	     cache_ctr_wr_rsps_pending_outrg ;
  assign cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d489 =
	     EN_commit && cache_soc_map$m_is_mem_addr &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00010 &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__27_BITS__ETC___d133 &&
	     NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 ;
  assign cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d827 =
	     EN_commit && cache_soc_map$m_is_mem_addr &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00011 &&
	     cache_rg_lrsc_valid &&
	     !cache_rg_lrsc_pa_08_EQ_cache_rg_addr_0___d109 &&
	     NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 ;
  assign cache_f_reset_reqs_i_notEmpty__3_AND_cache_f_r_ETC___d66 =
	     cache_f_reset_reqs$EMPTY_N &&
	     (cache_f_reset_reqs$D_OUT || !cache_master_xactor_clearing) &&
	     (cache_rg_cset_in_cache != 6'd63 || cache_f_reset_rsps$FULL_N) ;
  assign cache_master_xactor_shim_arff_rvport1__read_B_ETC__q67 =
	     cache_master_xactor_shim_arff_rv$port1__read[96:0] ;
  assign cache_master_xactor_shim_awff_rvport1__read_B_ETC__q99 =
	     cache_master_xactor_shim_awff_rv$port1__read[96:0] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q10 =
	     cache_master_xactor_shim_rff_rv$port1__read[36:21] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q11 =
	     cache_master_xactor_shim_rff_rv$port1__read[44:37] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q12 =
	     cache_master_xactor_shim_rff_rv$port1__read[52:37] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q13 =
	     cache_master_xactor_shim_rff_rv$port1__read[68:37] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q14 =
	     cache_master_xactor_shim_rff_rv$port1__read[52:45] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q15 =
	     cache_master_xactor_shim_rff_rv$port1__read[60:53] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q16 =
	     cache_master_xactor_shim_rff_rv$port1__read[68:53] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q17 =
	     cache_master_xactor_shim_rff_rv$port1__read[68:61] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q18 =
	     cache_master_xactor_shim_rff_rv$port1__read[132:69] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q19 =
	     cache_master_xactor_shim_rff_rv$port1__read[76:69] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q20 =
	     cache_master_xactor_shim_rff_rv$port1__read[84:69] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q21 =
	     cache_master_xactor_shim_rff_rv$port1__read[100:69] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q22 =
	     cache_master_xactor_shim_rff_rv$port1__read[84:77] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q23 =
	     cache_master_xactor_shim_rff_rv$port1__read[92:85] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q24 =
	     cache_master_xactor_shim_rff_rv$port1__read[100:85] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q25 =
	     cache_master_xactor_shim_rff_rv$port1__read[100:93] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q26 =
	     cache_master_xactor_shim_rff_rv$port1__read[108:101] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q27 =
	     cache_master_xactor_shim_rff_rv$port1__read[116:101] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q28 =
	     cache_master_xactor_shim_rff_rv$port1__read[132:101] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q29 =
	     cache_master_xactor_shim_rff_rv$port1__read[116:109] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q3 =
	     cache_master_xactor_shim_rff_rv$port1__read[68:5] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q30 =
	     cache_master_xactor_shim_rff_rv$port1__read[124:117] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q31 =
	     cache_master_xactor_shim_rff_rv$port1__read[132:117] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q32 =
	     cache_master_xactor_shim_rff_rv$port1__read[132:125] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q4 =
	     cache_master_xactor_shim_rff_rv$port1__read[12:5] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q5 =
	     cache_master_xactor_shim_rff_rv$port1__read[36:29] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q6 =
	     cache_master_xactor_shim_rff_rv$port1__read[20:5] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q7 =
	     cache_master_xactor_shim_rff_rv$port1__read[36:5] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q8 =
	     cache_master_xactor_shim_rff_rv$port1__read[20:13] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q9 =
	     cache_master_xactor_shim_rff_rv$port1__read[28:21] ;
  assign cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q100 =
	     cache_master_xactor_shim_wff_rv$port1__read[146:0] ;
  assign cache_ram_state_and_ctag_cset_b_read__27_BITS__ETC___d133 =
	     cache_ram_state_and_ctag_cset$DOB[21:0] == pa_ctag__h7038 ;
  assign cache_ram_state_and_ctag_cset_b_read__27_BIT_2_ETC___d182 =
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__27_BITS__ETC___d133 &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00010 ||
	     NOT_cache_ram_state_and_ctag_cset_b_read__27_B_ETC___d181 ;
  assign cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278 =
	     cache_ram_word128_set$DOB & y__h7522 ;
  assign cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q33 =
	     cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[127:112] ;
  assign cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q34 =
	     cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[119:112] ;
  assign cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q35 =
	     cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[111:96] ;
  assign cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q36 =
	     cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[103:96] ;
  assign cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q37 =
	     cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[95:80] ;
  assign cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q38 =
	     cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[87:80] ;
  assign cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q39 =
	     cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[79:64] ;
  assign cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q40 =
	     cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[71:64] ;
  assign cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q41 =
	     cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[63:48] ;
  assign cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q42 =
	     cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[55:48] ;
  assign cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q43 =
	     cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[47:32] ;
  assign cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q44 =
	     cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[39:32] ;
  assign cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q45 =
	     cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[31:16] ;
  assign cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q46 =
	     cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[23:16] ;
  assign cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q47 =
	     cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[15:0] ;
  assign cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q48 =
	     cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[7:0] ;
  assign cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q49 =
	     cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[127:96] ;
  assign cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q50 =
	     cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[95:64] ;
  assign cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q51 =
	     cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[63:32] ;
  assign cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q52 =
	     cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[31:0] ;
  assign cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q53 =
	     cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[63:0] ;
  assign cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q54 =
	     cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[127:64] ;
  assign cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q55 =
	     cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[111:104] ;
  assign cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q56 =
	     cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[127:120] ;
  assign cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q57 =
	     cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[95:88] ;
  assign cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q58 =
	     cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[79:72] ;
  assign cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q59 =
	     cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[63:56] ;
  assign cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q60 =
	     cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[47:40] ;
  assign cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q61 =
	     cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[31:24] ;
  assign cache_ram_word128_set_b_read__61_AND_cache_ram_ETC__q62 =
	     cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[15:8] ;
  assign cache_ram_word128_set_b_read__61_BITS_129_TO_1_ETC___d563 =
	     cache_ram_word128_set$DOB[129:128] & y__h27082 ;
  assign cache_rg_addr_0_EQ_cache_rg_lrsc_pa_08___d179 =
	     cache_rg_addr == cache_rg_lrsc_pa ;
  assign cache_rg_amo_funct7_7_BITS_6_TO_2_8_EQ_0b10_9__ETC___d496 =
	     cache_rg_amo_funct7[6:2] == 5'b00010 &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__27_BITS__ETC___d133) &&
	     cache_rg_addr_0_EQ_cache_rg_lrsc_pa_08___d179 &&
	     NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 ;
  assign cache_rg_lrsc_pa_08_EQ_cache_rg_addr_0___d109 =
	     cache_rg_lrsc_pa == cache_rg_addr ;
  assign cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d162 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__27_BITS__ETC___d133) ;
  assign cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d193 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     cache_ram_state_and_ctag_cset_b_read__27_BIT_2_ETC___d182 ||
	     cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     cache_rg_op_4_EQ_1_02_OR_cache_rg_op_4_EQ_2_6__ETC___d191 ;
  assign cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d199 =
	     MUX_cache_rg_lrsc_valid$write_1__VAL_2 ||
	     cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h21908 ;
  assign cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d288 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     cache_rg_width_code != 3'd0 &&
	     cache_rg_width_code != 3'd1 &&
	     cache_rg_width_code != 3'd2 &&
	     IF_cache_rg_width_code_02_EQ_3_11_THEN_IF_cach_ETC___d286 ;
  assign cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d475 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__27_BITS__ETC___d133 &&
	     NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 ;
  assign cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d491 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__27_BITS__ETC___d133) &&
	     NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 ;
  assign cache_rg_op_4_EQ_1_02_OR_cache_rg_op_4_EQ_2_6__ETC___d191 =
	     cache_rg_op == 2'd1 &&
	     cache_rg_addr_0_EQ_cache_rg_lrsc_pa_08___d179 ||
	     cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011 ||
	     NOT_cache_rg_op_4_EQ_1_02_87_AND_NOT_cache_rg__ETC___d190 ;
  assign cache_rg_op_4_EQ_1_02_OR_cache_rg_op_4_EQ_2_6__ETC___d549 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_cache_rg_op_4_EQ_2_6_45_OR_NOT_cache_rg_am_ETC___d546 ||
	     NOT_cache_rg_op_4_EQ_1_02_87_AND_NOT_cache_rg__ETC___d548 ;
  assign cache_rg_op_4_EQ_1_02_OR_cache_rg_op_4_EQ_2_6__ETC___d782 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_cache_rg_op_4_EQ_2_6_45_OR_NOT_cache_rg_am_ETC___d779 ||
	     NOT_cache_rg_op_4_EQ_1_02_87_AND_NOT_cache_rg__ETC___d781 ;
  assign cache_rg_op_4_EQ_1_02_OR_cache_rg_op_4_EQ_2_6__ETC___d786 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_08_EQ_cache_rg_addr_0___d109) ;
  assign cache_rg_op_4_EQ_2_6_AND_cache_rg_amo_funct7_7_ETC___d854 =
	     cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h21908 &&
	     NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 ;
  assign cache_rg_st_amo_val_BITS_31_TO_0__q65 = cache_rg_st_amo_val[31:0] ;
  assign cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d503 =
	     cache_soc_map$m_is_mem_addr && cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     (cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011 ||
	      cache_rg_op != 2'd1 && cache_ram_state_and_ctag_cset$DOB[22] &&
	      cache_ram_state_and_ctag_cset_b_read__27_BITS__ETC___d133) ;
  assign cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d551 =
	     cache_soc_map$m_is_mem_addr && cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     cache_rg_op_4_EQ_1_02_OR_cache_rg_op_4_EQ_2_6__ETC___d549 ;
  assign cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d865 =
	     cache_soc_map$m_is_mem_addr && cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_cache_rg_op_4_EQ_1_02_87_AND_NOT_cache_rg__ETC___d863 ;
  assign cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d874 =
	     cache_soc_map$m_is_mem_addr && cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_cache_rg_op_4_EQ_1_02_87_AND_NOT_cache_rg__ETC___d548 ;
  assign cline_addr__h31936 = { cache_rg_pa[31:6], 6'd0 } ;
  assign cline_fabric_addr__h31937 = { 32'd0, cline_addr__h31936 } ;
  assign lrsc_result__h21908 =
	     !cache_rg_lrsc_valid ||
	     !cache_rg_lrsc_pa_08_EQ_cache_rg_addr_0___d109 ;
  assign mem_req_wr_addr_awaddr__h31147 = { 32'd0, cache_rg_addr } ;
  assign mem_req_wr_addr_awaddr__h38358 = { 32'd0, cache_rg_pa } ;
  assign mem_req_wr_data_wuser__h26443 =
	     (cache_rg_width_code == 3'd3) ?
	       {2{cache_rg_st_amo_val[128]}} :
	       2'd0 ;
  assign new_st_val__h27212 = { 32'd0, _theResult_____2__h27066[31:0] } ;
  assign new_st_val__h27305 =
	     IF_cache_rg_width_code_02_EQ_2_07_THEN_SEXT_IF_ETC___d543 +
	     IF_cache_rg_width_code_02_EQ_2_07_THEN_SEXT_ca_ETC___d672 ;
  assign new_st_val__h28453 = w1__h27058 ^ w2__h27060 ;
  assign new_st_val__h28457 = w1__h27058 & w2__h27060 ;
  assign new_st_val__h28461 = w1__h27058 | w2__h27060 ;
  assign new_st_val__h28465 =
	     (w1__h27058 < w2__h27060) ? w1__h27058 : w2__h27060 ;
  assign new_st_val__h28470 =
	     (w1__h27058 <= w2__h27060) ? w2__h27060 : w1__h27058 ;
  assign new_st_val__h28476 =
	     ((IF_cache_rg_width_code_02_EQ_2_07_THEN_SEXT_IF_ETC___d543 ^
	       64'h8000000000000000) <
	      (IF_cache_rg_width_code_02_EQ_2_07_THEN_SEXT_ca_ETC___d672 ^
	       64'h8000000000000000)) ?
	       w1__h27058 :
	       w2__h27060 ;
  assign new_st_val__h28481 =
	     ((IF_cache_rg_width_code_02_EQ_2_07_THEN_SEXT_IF_ETC___d543 ^
	       64'h8000000000000000) <=
	      (IF_cache_rg_width_code_02_EQ_2_07_THEN_SEXT_ca_ETC___d672 ^
	       64'h8000000000000000)) ?
	       w2__h27060 :
	       w1__h27058 ;
  assign new_st_val__h38535 = { 32'd0, _theResult_____2__h38523[31:0] } ;
  assign new_st_val__h38628 =
	     IF_cache_rg_width_code_02_EQ_2_07_THEN_SEXT_IF_ETC___d1277 +
	     IF_cache_rg_width_code_02_EQ_2_07_THEN_SEXT_ca_ETC___d672 ;
  assign new_st_val__h40943 = w1__h38515 ^ w2__h27060 ;
  assign new_st_val__h40947 = w1__h38515 & w2__h27060 ;
  assign new_st_val__h40951 = w1__h38515 | w2__h27060 ;
  assign new_st_val__h40955 =
	     (w1__h38515 < w2__h27060) ? w1__h38515 : w2__h27060 ;
  assign new_st_val__h40960 =
	     (w1__h38515 <= w2__h27060) ? w2__h27060 : w1__h38515 ;
  assign new_st_val__h40966 =
	     ((IF_cache_rg_width_code_02_EQ_2_07_THEN_SEXT_IF_ETC___d1277 ^
	       64'h8000000000000000) <
	      (IF_cache_rg_width_code_02_EQ_2_07_THEN_SEXT_ca_ETC___d672 ^
	       64'h8000000000000000)) ?
	       w1__h38515 :
	       w2__h27060 ;
  assign new_st_val__h40971 =
	     ((IF_cache_rg_width_code_02_EQ_2_07_THEN_SEXT_IF_ETC___d1277 ^
	       64'h8000000000000000) <=
	      (IF_cache_rg_width_code_02_EQ_2_07_THEN_SEXT_ca_ETC___d672 ^
	       64'h8000000000000000)) ?
	       w2__h27060 :
	       w1__h38515 ;
  assign pa_ctag__h7038 = { 2'd0, cache_rg_addr[31:12] } ;
  assign req_width_code_EQ_0b0_369_OR_req_width_code_EQ_ETC___d1405 =
	     req_width_code == 3'b0 ||
	     req_width_code == 3'b001 && !req_addr[0] ||
	     req_width_code == 3'b010 && req_addr[1:0] == 2'b0 ||
	     req_width_code == 3'b011 && req_addr[2:0] == 3'b0 ;
  assign req_width_code_EQ_0b0_369_OR_req_width_code_EQ_ETC___d1410 =
	     (req_width_code_EQ_0b0_369_OR_req_width_code_EQ_ETC___d1405 ||
	      req_width_code == 3'b100 && req_addr[3:0] == 4'b0) &&
	     NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 ;
  assign result__h20318 =
	     cache_rg_is_unsigned ?
	       { 64'd0,
		 cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[127:64] } :
	       SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d450 ;
  assign result__h20386 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[7:0] } :
	       SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d292 ;
  assign result__h20424 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[15:8] } :
	       SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d297 ;
  assign result__h20457 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[23:16] } :
	       SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d302 ;
  assign result__h20490 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[31:24] } :
	       SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d307 ;
  assign result__h20523 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[39:32] } :
	       SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d312 ;
  assign result__h20556 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[47:40] } :
	       SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d317 ;
  assign result__h20589 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[55:48] } :
	       SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d322 ;
  assign result__h20622 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[63:56] } :
	       SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d327 ;
  assign result__h20655 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[71:64] } :
	       SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d331 ;
  assign result__h20688 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[79:72] } :
	       SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d336 ;
  assign result__h20721 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[87:80] } :
	       SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d341 ;
  assign result__h20754 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[95:88] } :
	       SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d346 ;
  assign result__h20787 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[103:96] } :
	       SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d351 ;
  assign result__h20820 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[111:104] } :
	       SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d356 ;
  assign result__h20853 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[119:112] } :
	       SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d361 ;
  assign result__h20886 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[127:120] } :
	       SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d366 ;
  assign result__h20941 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[15:0] } :
	       SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d386 ;
  assign result__h20974 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[31:16] } :
	       SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d390 ;
  assign result__h21007 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[47:32] } :
	       SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d394 ;
  assign result__h21040 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[63:48] } :
	       SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d398 ;
  assign result__h21073 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[79:64] } :
	       SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d402 ;
  assign result__h21106 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[95:80] } :
	       SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d406 ;
  assign result__h21139 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[111:96] } :
	       SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d410 ;
  assign result__h21172 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[127:112] } :
	       SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d414 ;
  assign result__h21219 =
	     cache_rg_is_unsigned ?
	       { 96'd0,
		 cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[31:0] } :
	       SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d426 ;
  assign result__h21252 =
	     cache_rg_is_unsigned ?
	       { 96'd0,
		 cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[63:32] } :
	       SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d430 ;
  assign result__h21285 =
	     cache_rg_is_unsigned ?
	       { 96'd0,
		 cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[95:64] } :
	       SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d434 ;
  assign result__h21318 =
	     cache_rg_is_unsigned ?
	       { 96'd0,
		 cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[127:96] } :
	       SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d438 ;
  assign result__h35343 =
	     cache_rg_is_unsigned ?
	       { 64'd0, cache_master_xactor_shim_rff_rv$port1__read[68:5] } :
	       { {64{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q3[63]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q3 } ;
  assign result__h35368 =
	     cache_rg_is_unsigned ?
	       { 64'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[132:69] } :
	       { {64{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q18[63]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q18 } ;
  assign result__h35426 =
	     cache_rg_is_unsigned ?
	       { 120'd0, cache_master_xactor_shim_rff_rv$port1__read[12:5] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q4[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q4 } ;
  assign result__h35462 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[20:13] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q8[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q8 } ;
  assign result__h35495 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[28:21] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q9[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q9 } ;
  assign result__h35528 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[36:29] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q5[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q5 } ;
  assign result__h35561 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[44:37] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q11[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q11 } ;
  assign result__h35594 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[52:45] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q14[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q14 } ;
  assign result__h35627 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[60:53] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q15[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q15 } ;
  assign result__h35660 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[68:61] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q17[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q17 } ;
  assign result__h35693 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[76:69] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q19[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q19 } ;
  assign result__h35726 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[84:77] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q22[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q22 } ;
  assign result__h35759 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[92:85] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q23[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q23 } ;
  assign result__h35792 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[100:93] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q25[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q25 } ;
  assign result__h35825 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[108:101] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q26[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q26 } ;
  assign result__h35858 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[116:109] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q29[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q29 } ;
  assign result__h35891 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[124:117] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q30[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q30 } ;
  assign result__h35924 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[132:125] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q32[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q32 } ;
  assign result__h35979 =
	     cache_rg_is_unsigned ?
	       { 112'd0, cache_master_xactor_shim_rff_rv$port1__read[20:5] } :
	       { {112{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q6[15]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q6 } ;
  assign result__h36012 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[36:21] } :
	       { {112{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q10[15]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q10 } ;
  assign result__h36045 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[52:37] } :
	       { {112{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q12[15]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q12 } ;
  assign result__h36078 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[68:53] } :
	       { {112{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q16[15]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q16 } ;
  assign result__h36111 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[84:69] } :
	       { {112{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q20[15]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q20 } ;
  assign result__h36144 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[100:85] } :
	       { {112{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q24[15]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q24 } ;
  assign result__h36177 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[116:101] } :
	       { {112{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q27[15]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q27 } ;
  assign result__h36210 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[132:117] } :
	       { {112{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q31[15]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q31 } ;
  assign result__h36257 =
	     cache_rg_is_unsigned ?
	       { 96'd0, cache_master_xactor_shim_rff_rv$port1__read[36:5] } :
	       { {96{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q7[31]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q7 } ;
  assign result__h36290 =
	     cache_rg_is_unsigned ?
	       { 96'd0, cache_master_xactor_shim_rff_rv$port1__read[68:37] } :
	       { {96{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q13[31]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q13 } ;
  assign result__h36323 =
	     cache_rg_is_unsigned ?
	       { 96'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[100:69] } :
	       { {96{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q21[31]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q21 } ;
  assign result__h36356 =
	     cache_rg_is_unsigned ?
	       { 96'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[132:101] } :
	       { {96{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q28[31]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q28 } ;
  assign result__h38761 =
	     { {120{x5415_BITS_7_TO_0__q68[7]}}, x5415_BITS_7_TO_0__q68 } ;
  assign result__h39930 =
	     { {120{x5415_BITS_15_TO_8__q72[7]}}, x5415_BITS_15_TO_8__q72 } ;
  assign result__h39962 =
	     { {120{x5415_BITS_23_TO_16__q73[7]}},
	       x5415_BITS_23_TO_16__q73 } ;
  assign result__h39994 =
	     { {120{x5415_BITS_31_TO_24__q76[7]}},
	       x5415_BITS_31_TO_24__q76 } ;
  assign result__h40026 =
	     { {120{x5415_BITS_39_TO_32__q74[7]}},
	       x5415_BITS_39_TO_32__q74 } ;
  assign result__h40058 =
	     { {120{x5415_BITS_47_TO_40__q79[7]}},
	       x5415_BITS_47_TO_40__q79 } ;
  assign result__h40090 =
	     { {120{x5415_BITS_55_TO_48__q80[7]}},
	       x5415_BITS_55_TO_48__q80 } ;
  assign result__h40122 =
	     { {120{x5415_BITS_63_TO_56__q82[7]}},
	       x5415_BITS_63_TO_56__q82 } ;
  assign result__h40154 =
	     { {120{x5415_BITS_71_TO_64__q83[7]}},
	       x5415_BITS_71_TO_64__q83 } ;
  assign result__h40186 =
	     { {120{x5415_BITS_79_TO_72__q87[7]}},
	       x5415_BITS_79_TO_72__q87 } ;
  assign result__h40218 =
	     { {120{x5415_BITS_87_TO_80__q88[7]}},
	       x5415_BITS_87_TO_80__q88 } ;
  assign result__h40250 =
	     { {120{x5415_BITS_95_TO_88__q90[7]}},
	       x5415_BITS_95_TO_88__q90 } ;
  assign result__h40282 =
	     { {120{x5415_BITS_103_TO_96__q91[7]}},
	       x5415_BITS_103_TO_96__q91 } ;
  assign result__h40314 =
	     { {120{x5415_BITS_111_TO_104__q94[7]}},
	       x5415_BITS_111_TO_104__q94 } ;
  assign result__h40346 =
	     { {120{x5415_BITS_119_TO_112__q95[7]}},
	       x5415_BITS_119_TO_112__q95 } ;
  assign result__h40378 =
	     { {120{x5415_BITS_127_TO_120__q97[7]}},
	       x5415_BITS_127_TO_120__q97 } ;
  assign result__h40432 =
	     { {112{x5415_BITS_15_TO_0__q69[15]}}, x5415_BITS_15_TO_0__q69 } ;
  assign result__h40464 =
	     { {112{x5415_BITS_31_TO_16__q75[15]}},
	       x5415_BITS_31_TO_16__q75 } ;
  assign result__h40496 =
	     { {112{x5415_BITS_47_TO_32__q77[15]}},
	       x5415_BITS_47_TO_32__q77 } ;
  assign result__h40528 =
	     { {112{x5415_BITS_63_TO_48__q81[15]}},
	       x5415_BITS_63_TO_48__q81 } ;
  assign result__h40560 =
	     { {112{x5415_BITS_79_TO_64__q84[15]}},
	       x5415_BITS_79_TO_64__q84 } ;
  assign result__h40592 =
	     { {112{x5415_BITS_95_TO_80__q89[15]}},
	       x5415_BITS_95_TO_80__q89 } ;
  assign result__h40624 =
	     { {112{x5415_BITS_111_TO_96__q92[15]}},
	       x5415_BITS_111_TO_96__q92 } ;
  assign result__h40656 =
	     { {112{x5415_BITS_127_TO_112__q96[15]}},
	       x5415_BITS_127_TO_112__q96 } ;
  assign result__h40702 =
	     { {96{x5415_BITS_31_TO_0__q70[31]}}, x5415_BITS_31_TO_0__q70 } ;
  assign result__h40734 =
	     { {96{x5415_BITS_63_TO_32__q78[31]}},
	       x5415_BITS_63_TO_32__q78 } ;
  assign result__h40766 =
	     { {96{x5415_BITS_95_TO_64__q85[31]}},
	       x5415_BITS_95_TO_64__q85 } ;
  assign result__h40798 =
	     { {96{x5415_BITS_127_TO_96__q93[31]}},
	       x5415_BITS_127_TO_96__q93 } ;
  assign result__h40852 =
	     { {64{x5415_BITS_63_TO_0__q71[63]}}, x5415_BITS_63_TO_0__q71 } ;
  assign result__h40881 =
	     { {64{x5415_BITS_127_TO_64__q86[63]}},
	       x5415_BITS_127_TO_64__q86 } ;
  assign result__h7472 =
	     cache_rg_is_unsigned ?
	       { 64'd0,
		 cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[63:0] } :
	       SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d446 ;
  assign shift_bits__h31154 = { cache_rg_addr[3:0], 3'b0 } ;
  assign shift_bits__h38365 = { cache_rg_pa[3:0], 3'b0 } ;
  assign strobe128__h31211 = 16'b0000000000000001 << cache_rg_addr[3:0] ;
  assign strobe128__h31214 = 16'b0000000000000011 << cache_rg_addr[3:0] ;
  assign strobe128__h31217 = 16'b0000000000001111 << cache_rg_addr[3:0] ;
  assign strobe128__h31220 = 16'b0000000011111111 << cache_rg_addr[3:0] ;
  assign strobe128__h38422 = 16'b0000000000000001 << cache_rg_pa[3:0] ;
  assign strobe128__h38425 = 16'b0000000000000011 << cache_rg_pa[3:0] ;
  assign strobe128__h38428 = 16'b0000000000001111 << cache_rg_pa[3:0] ;
  assign strobe128__h38431 = 16'b0000000011111111 << cache_rg_pa[3:0] ;
  assign w1___1__h27271 = { 32'd0, x__h27357[31:0] } ;
  assign w1___1__h38594 = { 32'd0, x__h38680[31:0] } ;
  assign w1__h27058 =
	     (cache_rg_width_code == 3'd2) ?
	       w1___1__h27271 :
	       x__h27357[63:0] ;
  assign w1__h38515 =
	     (cache_rg_width_code == 3'd2) ?
	       w1___1__h38594 :
	       x__h38680[63:0] ;
  assign w2__h27060 =
	     (cache_rg_width_code == 3'd2) ?
	       { 32'd0, cache_rg_st_amo_val[31:0] } :
	       cache_rg_st_amo_val[63:0] ;
  assign word128__h38362 = { 64'd0, x__h38533 } ;
  assign x5415_BITS_103_TO_96__q91 = x__h35415[103:96] ;
  assign x5415_BITS_111_TO_104__q94 = x__h35415[111:104] ;
  assign x5415_BITS_111_TO_96__q92 = x__h35415[111:96] ;
  assign x5415_BITS_119_TO_112__q95 = x__h35415[119:112] ;
  assign x5415_BITS_127_TO_112__q96 = x__h35415[127:112] ;
  assign x5415_BITS_127_TO_120__q97 = x__h35415[127:120] ;
  assign x5415_BITS_127_TO_64__q86 = x__h35415[127:64] ;
  assign x5415_BITS_127_TO_96__q93 = x__h35415[127:96] ;
  assign x5415_BITS_15_TO_0__q69 = x__h35415[15:0] ;
  assign x5415_BITS_15_TO_8__q72 = x__h35415[15:8] ;
  assign x5415_BITS_23_TO_16__q73 = x__h35415[23:16] ;
  assign x5415_BITS_31_TO_0__q70 = x__h35415[31:0] ;
  assign x5415_BITS_31_TO_16__q75 = x__h35415[31:16] ;
  assign x5415_BITS_31_TO_24__q76 = x__h35415[31:24] ;
  assign x5415_BITS_39_TO_32__q74 = x__h35415[39:32] ;
  assign x5415_BITS_47_TO_32__q77 = x__h35415[47:32] ;
  assign x5415_BITS_47_TO_40__q79 = x__h35415[47:40] ;
  assign x5415_BITS_55_TO_48__q80 = x__h35415[55:48] ;
  assign x5415_BITS_63_TO_0__q71 = x__h35415[63:0] ;
  assign x5415_BITS_63_TO_32__q78 = x__h35415[63:32] ;
  assign x5415_BITS_63_TO_48__q81 = x__h35415[63:48] ;
  assign x5415_BITS_63_TO_56__q82 = x__h35415[63:56] ;
  assign x5415_BITS_71_TO_64__q83 = x__h35415[71:64] ;
  assign x5415_BITS_79_TO_64__q84 = x__h35415[79:64] ;
  assign x5415_BITS_79_TO_72__q87 = x__h35415[79:72] ;
  assign x5415_BITS_7_TO_0__q68 = x__h35415[7:0] ;
  assign x5415_BITS_87_TO_80__q88 = x__h35415[87:80] ;
  assign x5415_BITS_95_TO_64__q85 = x__h35415[95:64] ;
  assign x5415_BITS_95_TO_80__q89 = x__h35415[95:80] ;
  assign x5415_BITS_95_TO_88__q90 = x__h35415[95:88] ;
  assign x7357_BITS_31_TO_0__q64 = x__h27357[31:0] ;
  assign x8680_BITS_31_TO_0__q98 = x__h38680[31:0] ;
  assign x__h22659 =
	     (cache_rg_width_code == 3'd3 && cache_rg_st_amo_val[128]) ?
	       cache_ram_word128_set$DOB[129:128] | x__h27014 :
	       cache_ram_word128_set_b_read__61_BITS_129_TO_1_ETC___d563 ;
  assign x__h27014 = 2'd1 << x__h27099 ;
  assign x__h27099 = { 3'd0, cache_rg_addr[3] } ;
  assign x__h27210 =
	     (cache_rg_width_code == 3'd2) ?
	       new_st_val__h27212 :
	       _theResult_____2__h27066 ;
  assign x__h38533 =
	     (cache_rg_width_code == 3'd2) ?
	       new_st_val__h38535 :
	       _theResult_____2__h38523 ;
  assign y__h27082 = ~x__h27014 ;
  assign y__h7522 =
	     {130{cache_ram_state_and_ctag_cset$DOB[22] &&
		  cache_ram_state_and_ctag_cset_b_read__27_BITS__ETC___d133}} ;
  always@(cache_rg_width_code)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4: x__h25767 = 128'd1;
      default: x__h25767 = 128'd0;
    endcase
  end
  always@(cache_rg_width_code)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'd2, 3'd3: size_val__h37818 = cache_rg_width_code;
      default: size_val__h37818 = 3'b100;
    endcase
  end
  always@(cache_rg_width_code)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4:
	  _theResult___fst_val__h38441 = cache_rg_width_code;
      default: _theResult___fst_val__h38441 = 3'b111;
    endcase
  end
  always@(cache_rg_addr or result__h35343 or result__h35368)
  begin
    case (cache_rg_addr[3:0])
      4'h0: _theResult___fst__h35341 = result__h35343;
      4'h8: _theResult___fst__h35341 = result__h35368;
      default: _theResult___fst__h35341 = 128'd0;
    endcase
  end
  always@(cache_rg_width_code or
	  strobe128__h38422 or
	  strobe128__h38425 or strobe128__h38428 or strobe128__h38431)
  begin
    case (cache_rg_width_code)
      3'd0: mem_req_wr_data_wstrb__h38495 = strobe128__h38422;
      3'd1: mem_req_wr_data_wstrb__h38495 = strobe128__h38425;
      3'd2: mem_req_wr_data_wstrb__h38495 = strobe128__h38428;
      3'd3: mem_req_wr_data_wstrb__h38495 = strobe128__h38431;
      3'd4: mem_req_wr_data_wstrb__h38495 = 16'b1111111111111111;
      default: mem_req_wr_data_wstrb__h38495 = 16'd0;
    endcase
  end
  always@(cache_rg_width_code or
	  strobe128__h31211 or
	  strobe128__h31214 or strobe128__h31217 or strobe128__h31220)
  begin
    case (cache_rg_width_code)
      3'd0: mem_req_wr_data_wstrb__h31284 = strobe128__h31211;
      3'd1: mem_req_wr_data_wstrb__h31284 = strobe128__h31214;
      3'd2: mem_req_wr_data_wstrb__h31284 = strobe128__h31217;
      3'd3: mem_req_wr_data_wstrb__h31284 = strobe128__h31220;
      3'd4: mem_req_wr_data_wstrb__h31284 = 16'b1111111111111111;
      default: mem_req_wr_data_wstrb__h31284 = 16'd0;
    endcase
  end
  always@(cache_rg_width_code or
	  cache_rg_st_amo_val or _theResult___snd_fst__h26449)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'd2, 3'd3:
	  mem_req_wr_data_wdata__h26440 = _theResult___snd_fst__h26449;
      default: mem_req_wr_data_wdata__h26440 = cache_rg_st_amo_val[127:0];
    endcase
  end
  always@(cache_rg_width_code or
	  cache_rg_st_amo_val or _theResult___snd_fst__h37112)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'd2, 3'd3:
	  mem_req_wr_data_wdata__h37103 = _theResult___snd_fst__h37112;
      default: mem_req_wr_data_wdata__h37103 = cache_rg_st_amo_val[127:0];
    endcase
  end
  always@(cache_rg_addr or
	  SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d446 or
	  SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d450)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  _theResult___fst__h28362 =
	      SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d446;
      4'h8:
	  _theResult___fst__h28362 =
	      SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d450;
      default: _theResult___fst__h28362 = 128'd0;
    endcase
  end
  always@(cache_rg_addr or result__h7472 or result__h20318)
  begin
    case (cache_rg_addr[3:0])
      4'h0: _theResult___fst__h7470 = result__h7472;
      4'h8: _theResult___fst__h7470 = result__h20318;
      default: _theResult___fst__h7470 = 128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d426 or
	  SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d430 or
	  SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d434 or
	  SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d438)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d533 =
	      SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d426;
      4'h4:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d533 =
	      SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d430;
      4'h8:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d533 =
	      SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d434;
      4'hC:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d533 =
	      SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d438;
      default: IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d533 =
		   128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h21219 or
	  result__h21252 or result__h21285 or result__h21318)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d443 =
	      result__h21219;
      4'h4:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d443 =
	      result__h21252;
      4'h8:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d443 =
	      result__h21285;
      4'hC:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d443 =
	      result__h21318;
      default: IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d443 =
		   128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d386 or
	  SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d390 or
	  SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d394 or
	  SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d398 or
	  SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d402 or
	  SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d406 or
	  SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d410 or
	  SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d414)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d529 =
	      SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d386;
      4'h2:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d529 =
	      SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d390;
      4'h4:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d529 =
	      SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d394;
      4'h6:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d529 =
	      SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d398;
      4'h8:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d529 =
	      SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d402;
      4'hA:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d529 =
	      SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d406;
      4'hC:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d529 =
	      SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d410;
      4'hE:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d529 =
	      SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d414;
      default: IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d529 =
		   128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h20941 or
	  result__h20974 or
	  result__h21007 or
	  result__h21040 or
	  result__h21073 or
	  result__h21106 or result__h21139 or result__h21172)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d423 =
	      result__h20941;
      4'h2:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d423 =
	      result__h20974;
      4'h4:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d423 =
	      result__h21007;
      4'h6:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d423 =
	      result__h21040;
      4'h8:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d423 =
	      result__h21073;
      4'hA:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d423 =
	      result__h21106;
      4'hC:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d423 =
	      result__h21139;
      4'hE:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d423 =
	      result__h21172;
      default: IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d423 =
		   128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d292 or
	  SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d297 or
	  SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d302 or
	  SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d307 or
	  SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d312 or
	  SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d317 or
	  SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d322 or
	  SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d327 or
	  SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d331 or
	  SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d336 or
	  SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d341 or
	  SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d346 or
	  SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d351 or
	  SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d356 or
	  SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d361 or
	  SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d366)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d521 =
	      SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d292;
      4'h1:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d521 =
	      SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d297;
      4'h2:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d521 =
	      SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d302;
      4'h3:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d521 =
	      SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d307;
      4'h4:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d521 =
	      SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d312;
      4'h5:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d521 =
	      SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d317;
      4'h6:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d521 =
	      SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d322;
      4'h7:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d521 =
	      SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d327;
      4'h8:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d521 =
	      SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d331;
      4'h9:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d521 =
	      SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d336;
      4'hA:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d521 =
	      SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d341;
      4'hB:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d521 =
	      SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d346;
      4'hC:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d521 =
	      SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d351;
      4'hD:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d521 =
	      SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d356;
      4'hE:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d521 =
	      SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d361;
      4'hF:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d521 =
	      SEXT_cache_ram_word128_set_b_read__61_AND_cach_ETC___d366;
    endcase
  end
  always@(cache_rg_width_code or
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d521 or
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d529 or
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d533 or
	  _theResult___fst__h28362 or
	  cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278)
  begin
    case (cache_rg_width_code)
      3'd0:
	  x__h27357 =
	      IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d521;
      3'd1:
	  x__h27357 =
	      IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d529;
      3'd2:
	  x__h27357 =
	      IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d533;
      3'd3: x__h27357 = _theResult___fst__h28362;
      3'd4:
	  x__h27357 =
	      cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[127:0];
      default: x__h27357 = 128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h20386 or
	  result__h20424 or
	  result__h20457 or
	  result__h20490 or
	  result__h20523 or
	  result__h20556 or
	  result__h20589 or
	  result__h20622 or
	  result__h20655 or
	  result__h20688 or
	  result__h20721 or
	  result__h20754 or
	  result__h20787 or
	  result__h20820 or result__h20853 or result__h20886)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d383 =
	      result__h20386;
      4'h1:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d383 =
	      result__h20424;
      4'h2:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d383 =
	      result__h20457;
      4'h3:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d383 =
	      result__h20490;
      4'h4:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d383 =
	      result__h20523;
      4'h5:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d383 =
	      result__h20556;
      4'h6:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d383 =
	      result__h20589;
      4'h7:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d383 =
	      result__h20622;
      4'h8:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d383 =
	      result__h20655;
      4'h9:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d383 =
	      result__h20688;
      4'hA:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d383 =
	      result__h20721;
      4'hB:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d383 =
	      result__h20754;
      4'hC:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d383 =
	      result__h20787;
      4'hD:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d383 =
	      result__h20820;
      4'hE:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d383 =
	      result__h20853;
      4'hF:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d383 =
	      result__h20886;
    endcase
  end
  always@(cache_rg_width_code or
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d383 or
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d423 or
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d443 or
	  _theResult___fst__h7470 or
	  cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278)
  begin
    case (cache_rg_width_code)
      3'd0:
	  x__h20375 =
	      IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d383;
      3'd1:
	  x__h20375 =
	      IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d423;
      3'd2:
	  x__h20375 =
	      IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d443;
      3'd3: x__h20375 = _theResult___fst__h7470;
      3'd4:
	  x__h20375 =
	      cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278[127:0];
      default: x__h20375 = 128'd0;
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or cache_rg_st_amo_val)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d654 =
	      { cache_ram_word128_set$DOB[127:32],
		cache_rg_st_amo_val[31:0] };
      4'h4:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d654 =
	      { cache_ram_word128_set$DOB[127:64],
		cache_rg_st_amo_val[31:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h8:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d654 =
	      { cache_ram_word128_set$DOB[127:96],
		cache_rg_st_amo_val[31:0],
		cache_ram_word128_set$DOB[63:0] };
      4'hC:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d654 =
	      { cache_rg_st_amo_val[31:0], cache_ram_word128_set$DOB[95:0] };
      default: IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d654 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or cache_rg_st_amo_val)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d645 =
	      { cache_ram_word128_set$DOB[127:16],
		cache_rg_st_amo_val[15:0] };
      4'h2:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d645 =
	      { cache_ram_word128_set$DOB[127:32],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[15:0] };
      4'h4:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d645 =
	      { cache_ram_word128_set$DOB[127:48],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h6:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d645 =
	      { cache_ram_word128_set$DOB[127:64],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[47:0] };
      4'h8:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d645 =
	      { cache_ram_word128_set$DOB[127:80],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[63:0] };
      4'hA:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d645 =
	      { cache_ram_word128_set$DOB[127:96],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[79:0] };
      4'hC:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d645 =
	      { cache_ram_word128_set$DOB[127:112],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[95:0] };
      4'hE:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d645 =
	      { cache_rg_st_amo_val[15:0], cache_ram_word128_set$DOB[111:0] };
      default: IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d645 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or cache_rg_st_amo_val)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d628 =
	      { cache_ram_word128_set$DOB[127:8], cache_rg_st_amo_val[7:0] };
      4'h1:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d628 =
	      { cache_ram_word128_set$DOB[127:16],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[7:0] };
      4'h2:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d628 =
	      { cache_ram_word128_set$DOB[127:24],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[15:0] };
      4'h3:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d628 =
	      { cache_ram_word128_set$DOB[127:32],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[23:0] };
      4'h4:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d628 =
	      { cache_ram_word128_set$DOB[127:40],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h5:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d628 =
	      { cache_ram_word128_set$DOB[127:48],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[39:0] };
      4'h6:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d628 =
	      { cache_ram_word128_set$DOB[127:56],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[47:0] };
      4'h7:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d628 =
	      { cache_ram_word128_set$DOB[127:64],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[55:0] };
      4'h8:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d628 =
	      { cache_ram_word128_set$DOB[127:72],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[63:0] };
      4'h9:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d628 =
	      { cache_ram_word128_set$DOB[127:80],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[71:0] };
      4'hA:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d628 =
	      { cache_ram_word128_set$DOB[127:88],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[79:0] };
      4'hB:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d628 =
	      { cache_ram_word128_set$DOB[127:96],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[87:0] };
      4'hC:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d628 =
	      { cache_ram_word128_set$DOB[127:104],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[95:0] };
      4'hD:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d628 =
	      { cache_ram_word128_set$DOB[127:112],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[103:0] };
      4'hE:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d628 =
	      { cache_ram_word128_set$DOB[127:120],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[111:0] };
      4'hF:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d628 =
	      { cache_rg_st_amo_val[7:0], cache_ram_word128_set$DOB[119:0] };
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or cache_rg_st_amo_val)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q63 =
	      { cache_ram_word128_set$DOB[127:64],
		cache_rg_st_amo_val[63:0] };
      4'h8:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q63 =
	      { cache_rg_st_amo_val[63:0], cache_ram_word128_set$DOB[63:0] };
      default: CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q63 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_width_code or
	  cache_ram_word128_set$DOB or
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d628 or
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d645 or
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d654 or
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q63 or
	  cache_rg_st_amo_val)
  begin
    case (cache_rg_width_code)
      3'd0:
	  x__h22787 =
	      IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d628;
      3'd1:
	  x__h22787 =
	      IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d645;
      3'd2:
	  x__h22787 =
	      IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d654;
      3'd3:
	  x__h22787 = CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q63;
      3'd4: x__h22787 = cache_rg_st_amo_val[127:0];
      default: x__h22787 = cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_amo_funct7 or
	  new_st_val__h28481 or
	  new_st_val__h27305 or
	  w2__h27060 or
	  new_st_val__h28453 or
	  new_st_val__h28461 or
	  new_st_val__h28457 or
	  new_st_val__h28476 or new_st_val__h28465 or new_st_val__h28470)
  begin
    case (cache_rg_amo_funct7[6:2])
      5'b0: _theResult_____2__h27066 = new_st_val__h27305;
      5'b00001: _theResult_____2__h27066 = w2__h27060;
      5'b00100: _theResult_____2__h27066 = new_st_val__h28453;
      5'b01000: _theResult_____2__h27066 = new_st_val__h28461;
      5'b01100: _theResult_____2__h27066 = new_st_val__h28457;
      5'b10000: _theResult_____2__h27066 = new_st_val__h28476;
      5'b11000: _theResult_____2__h27066 = new_st_val__h28465;
      5'b11100: _theResult_____2__h27066 = new_st_val__h28470;
      default: _theResult_____2__h27066 = new_st_val__h28481;
    endcase
  end
  always@(cache_rg_width_code or x__h27210 or _theResult___snd_fst__h31292)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'd2, 3'd3:
	  mem_req_wr_data_wdata__h31283 = _theResult___snd_fst__h31292;
      default: mem_req_wr_data_wdata__h31283 = { 64'd0, x__h27210 };
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or x__h27210)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d764 =
	      { cache_ram_word128_set$DOB[127:32], x__h27210[31:0] };
      4'h4:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d764 =
	      { cache_ram_word128_set$DOB[127:64],
		x__h27210[31:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h8:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d764 =
	      { cache_ram_word128_set$DOB[127:96],
		x__h27210[31:0],
		cache_ram_word128_set$DOB[63:0] };
      4'hC:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d764 =
	      { x__h27210[31:0], cache_ram_word128_set$DOB[95:0] };
      default: IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d764 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or x__h27210)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d755 =
	      { cache_ram_word128_set$DOB[127:16], x__h27210[15:0] };
      4'h2:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d755 =
	      { cache_ram_word128_set$DOB[127:32],
		x__h27210[15:0],
		cache_ram_word128_set$DOB[15:0] };
      4'h4:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d755 =
	      { cache_ram_word128_set$DOB[127:48],
		x__h27210[15:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h6:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d755 =
	      { cache_ram_word128_set$DOB[127:64],
		x__h27210[15:0],
		cache_ram_word128_set$DOB[47:0] };
      4'h8:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d755 =
	      { cache_ram_word128_set$DOB[127:80],
		x__h27210[15:0],
		cache_ram_word128_set$DOB[63:0] };
      4'hA:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d755 =
	      { cache_ram_word128_set$DOB[127:96],
		x__h27210[15:0],
		cache_ram_word128_set$DOB[79:0] };
      4'hC:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d755 =
	      { cache_ram_word128_set$DOB[127:112],
		x__h27210[15:0],
		cache_ram_word128_set$DOB[95:0] };
      4'hE:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d755 =
	      { x__h27210[15:0], cache_ram_word128_set$DOB[111:0] };
      default: IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d755 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or x__h27210)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d738 =
	      { cache_ram_word128_set$DOB[127:8], x__h27210[7:0] };
      4'h1:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d738 =
	      { cache_ram_word128_set$DOB[127:16],
		x__h27210[7:0],
		cache_ram_word128_set$DOB[7:0] };
      4'h2:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d738 =
	      { cache_ram_word128_set$DOB[127:24],
		x__h27210[7:0],
		cache_ram_word128_set$DOB[15:0] };
      4'h3:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d738 =
	      { cache_ram_word128_set$DOB[127:32],
		x__h27210[7:0],
		cache_ram_word128_set$DOB[23:0] };
      4'h4:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d738 =
	      { cache_ram_word128_set$DOB[127:40],
		x__h27210[7:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h5:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d738 =
	      { cache_ram_word128_set$DOB[127:48],
		x__h27210[7:0],
		cache_ram_word128_set$DOB[39:0] };
      4'h6:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d738 =
	      { cache_ram_word128_set$DOB[127:56],
		x__h27210[7:0],
		cache_ram_word128_set$DOB[47:0] };
      4'h7:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d738 =
	      { cache_ram_word128_set$DOB[127:64],
		x__h27210[7:0],
		cache_ram_word128_set$DOB[55:0] };
      4'h8:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d738 =
	      { cache_ram_word128_set$DOB[127:72],
		x__h27210[7:0],
		cache_ram_word128_set$DOB[63:0] };
      4'h9:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d738 =
	      { cache_ram_word128_set$DOB[127:80],
		x__h27210[7:0],
		cache_ram_word128_set$DOB[71:0] };
      4'hA:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d738 =
	      { cache_ram_word128_set$DOB[127:88],
		x__h27210[7:0],
		cache_ram_word128_set$DOB[79:0] };
      4'hB:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d738 =
	      { cache_ram_word128_set$DOB[127:96],
		x__h27210[7:0],
		cache_ram_word128_set$DOB[87:0] };
      4'hC:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d738 =
	      { cache_ram_word128_set$DOB[127:104],
		x__h27210[7:0],
		cache_ram_word128_set$DOB[95:0] };
      4'hD:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d738 =
	      { cache_ram_word128_set$DOB[127:112],
		x__h27210[7:0],
		cache_ram_word128_set$DOB[103:0] };
      4'hE:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d738 =
	      { cache_ram_word128_set$DOB[127:120],
		x__h27210[7:0],
		cache_ram_word128_set$DOB[111:0] };
      4'hF:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d738 =
	      { x__h27210[7:0], cache_ram_word128_set$DOB[119:0] };
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or x__h27210)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q66 =
	      { cache_ram_word128_set$DOB[127:64], x__h27210 };
      4'h8:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q66 =
	      { x__h27210, cache_ram_word128_set$DOB[63:0] };
      default: CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q66 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_width_code or
	  cache_ram_word128_set$DOB or
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d738 or
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d755 or
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d764 or
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q66 or
	  x__h27210)
  begin
    case (cache_rg_width_code)
      3'd0:
	  x__h27119 =
	      IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d738;
      3'd1:
	  x__h27119 =
	      IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d755;
      3'd2:
	  x__h27119 =
	      IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d764;
      3'd3:
	  x__h27119 = CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q66;
      3'd4: x__h27119 = { 64'd0, x__h27210 };
      default: x__h27119 = cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_addr or
	  result__h36257 or
	  result__h36290 or result__h36323 or result__h36356)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1114 =
	      result__h36257;
      4'h4:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1114 =
	      result__h36290;
      4'h8:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1114 =
	      result__h36323;
      4'hC:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1114 =
	      result__h36356;
      default: IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1114 =
		   128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h35979 or
	  result__h36012 or
	  result__h36045 or
	  result__h36078 or
	  result__h36111 or
	  result__h36144 or result__h36177 or result__h36210)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1094 =
	      result__h35979;
      4'h2:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1094 =
	      result__h36012;
      4'h4:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1094 =
	      result__h36045;
      4'h6:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1094 =
	      result__h36078;
      4'h8:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1094 =
	      result__h36111;
      4'hA:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1094 =
	      result__h36144;
      4'hC:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1094 =
	      result__h36177;
      4'hE:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1094 =
	      result__h36210;
      default: IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1094 =
		   128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h35426 or
	  result__h35462 or
	  result__h35495 or
	  result__h35528 or
	  result__h35561 or
	  result__h35594 or
	  result__h35627 or
	  result__h35660 or
	  result__h35693 or
	  result__h35726 or
	  result__h35759 or
	  result__h35792 or
	  result__h35825 or
	  result__h35858 or result__h35891 or result__h35924)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1054 =
	      result__h35426;
      4'h1:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1054 =
	      result__h35462;
      4'h2:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1054 =
	      result__h35495;
      4'h3:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1054 =
	      result__h35528;
      4'h4:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1054 =
	      result__h35561;
      4'h5:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1054 =
	      result__h35594;
      4'h6:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1054 =
	      result__h35627;
      4'h7:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1054 =
	      result__h35660;
      4'h8:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1054 =
	      result__h35693;
      4'h9:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1054 =
	      result__h35726;
      4'hA:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1054 =
	      result__h35759;
      4'hB:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1054 =
	      result__h35792;
      4'hC:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1054 =
	      result__h35825;
      4'hD:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1054 =
	      result__h35858;
      4'hE:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1054 =
	      result__h35891;
      4'hF:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1054 =
	      result__h35924;
    endcase
  end
  always@(cache_rg_width_code or
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1054 or
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1094 or
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1114 or
	  _theResult___fst__h35341 or
	  cache_master_xactor_shim_rff_rv$port1__read)
  begin
    case (cache_rg_width_code)
      3'd0:
	  x__h35415 =
	      IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1054;
      3'd1:
	  x__h35415 =
	      IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1094;
      3'd2:
	  x__h35415 =
	      IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1114;
      3'd3: x__h35415 = _theResult___fst__h35341;
      3'd4: x__h35415 = cache_master_xactor_shim_rff_rv$port1__read[132:5];
      default: x__h35415 = 128'd0;
    endcase
  end
  always@(cache_rg_addr or result__h40852 or result__h40881)
  begin
    case (cache_rg_addr[3:0])
      4'h0: _theResult___fst__h40850 = result__h40852;
      4'h8: _theResult___fst__h40850 = result__h40881;
      default: _theResult___fst__h40850 = 128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h40702 or
	  result__h40734 or result__h40766 or result__h40798)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1262 =
	      result__h40702;
      4'h4:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1262 =
	      result__h40734;
      4'h8:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1262 =
	      result__h40766;
      4'hC:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1262 =
	      result__h40798;
      default: IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1262 =
		   128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h40432 or
	  result__h40464 or
	  result__h40496 or
	  result__h40528 or
	  result__h40560 or
	  result__h40592 or result__h40624 or result__h40656)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1250 =
	      result__h40432;
      4'h2:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1250 =
	      result__h40464;
      4'h4:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1250 =
	      result__h40496;
      4'h6:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1250 =
	      result__h40528;
      4'h8:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1250 =
	      result__h40560;
      4'hA:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1250 =
	      result__h40592;
      4'hC:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1250 =
	      result__h40624;
      4'hE:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1250 =
	      result__h40656;
      default: IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1250 =
		   128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h38761 or
	  result__h39930 or
	  result__h39962 or
	  result__h39994 or
	  result__h40026 or
	  result__h40058 or
	  result__h40090 or
	  result__h40122 or
	  result__h40154 or
	  result__h40186 or
	  result__h40218 or
	  result__h40250 or
	  result__h40282 or
	  result__h40314 or result__h40346 or result__h40378)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1226 =
	      result__h38761;
      4'h1:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1226 =
	      result__h39930;
      4'h2:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1226 =
	      result__h39962;
      4'h3:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1226 =
	      result__h39994;
      4'h4:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1226 =
	      result__h40026;
      4'h5:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1226 =
	      result__h40058;
      4'h6:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1226 =
	      result__h40090;
      4'h7:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1226 =
	      result__h40122;
      4'h8:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1226 =
	      result__h40154;
      4'h9:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1226 =
	      result__h40186;
      4'hA:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1226 =
	      result__h40218;
      4'hB:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1226 =
	      result__h40250;
      4'hC:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1226 =
	      result__h40282;
      4'hD:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1226 =
	      result__h40314;
      4'hE:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1226 =
	      result__h40346;
      4'hF:
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1226 =
	      result__h40378;
    endcase
  end
  always@(cache_rg_width_code or
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1226 or
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1250 or
	  IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1262 or
	  _theResult___fst__h40850 or x__h35415)
  begin
    case (cache_rg_width_code)
      3'd0:
	  x__h38680 =
	      IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1226;
      3'd1:
	  x__h38680 =
	      IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1250;
      3'd2:
	  x__h38680 =
	      IF_cache_rg_addr_0_BITS_3_TO_0_58_EQ_0x0_12_TH_ETC___d1262;
      3'd3: x__h38680 = _theResult___fst__h40850;
      3'd4: x__h38680 = x__h35415;
      default: x__h38680 = 128'd0;
    endcase
  end
  always@(cache_rg_amo_funct7 or
	  new_st_val__h40971 or
	  new_st_val__h38628 or
	  w2__h27060 or
	  new_st_val__h40943 or
	  new_st_val__h40951 or
	  new_st_val__h40947 or
	  new_st_val__h40966 or new_st_val__h40955 or new_st_val__h40960)
  begin
    case (cache_rg_amo_funct7[6:2])
      5'b0: _theResult_____2__h38523 = new_st_val__h38628;
      5'b00001: _theResult_____2__h38523 = w2__h27060;
      5'b00100: _theResult_____2__h38523 = new_st_val__h40943;
      5'b01000: _theResult_____2__h38523 = new_st_val__h40951;
      5'b01100: _theResult_____2__h38523 = new_st_val__h40947;
      5'b10000: _theResult_____2__h38523 = new_st_val__h40966;
      5'b11000: _theResult_____2__h38523 = new_st_val__h40955;
      5'b11100: _theResult_____2__h38523 = new_st_val__h40960;
      default: _theResult_____2__h38523 = new_st_val__h40971;
    endcase
  end
  always@(cache_rg_width_code or
	  word128__h38362 or _theResult___snd_fst__h38503)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'd2, 3'd3:
	  mem_req_wr_data_wdata__h38494 = _theResult___snd_fst__h38503;
      default: mem_req_wr_data_wdata__h38494 = word128__h38362;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cache_cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	cache_crg_sb_to_load_delay <= `BSV_ASSIGNMENT_DELAY 11'd0;
	cache_ctr_wr_rsps_pending_inrg <= `BSV_ASSIGNMENT_DELAY 4'd0;
	cache_ctr_wr_rsps_pending_outrg <= `BSV_ASSIGNMENT_DELAY 4'd0;
	cache_master_xactor_clearing <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_master_xactor_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	    98'h0AAAAAAAAAAAAAAAAAAAAAAAA;
	cache_master_xactor_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	    98'h0AAAAAAAAAAAAAAAAAAAAAAAA;
	cache_master_xactor_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY 7'd42;
	cache_master_xactor_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	    138'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	cache_master_xactor_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	    148'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	cache_rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY 6'd0;
	cache_rg_lower_word64_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_state <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (cache_cfg_verbosity$EN)
	  cache_cfg_verbosity <= `BSV_ASSIGNMENT_DELAY
	      cache_cfg_verbosity$D_IN;
	if (cache_crg_sb_to_load_delay$EN)
	  cache_crg_sb_to_load_delay <= `BSV_ASSIGNMENT_DELAY
	      cache_crg_sb_to_load_delay$D_IN;
	if (cache_ctr_wr_rsps_pending_inrg$EN)
	  cache_ctr_wr_rsps_pending_inrg <= `BSV_ASSIGNMENT_DELAY
	      cache_ctr_wr_rsps_pending_inrg$D_IN;
	if (cache_ctr_wr_rsps_pending_outrg$EN)
	  cache_ctr_wr_rsps_pending_outrg <= `BSV_ASSIGNMENT_DELAY
	      cache_ctr_wr_rsps_pending_outrg$D_IN;
	if (cache_master_xactor_clearing$EN)
	  cache_master_xactor_clearing <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_clearing$D_IN;
	if (cache_master_xactor_shim_arff_rv$EN)
	  cache_master_xactor_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_arff_rv$D_IN;
	if (cache_master_xactor_shim_awff_rv$EN)
	  cache_master_xactor_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_awff_rv$D_IN;
	if (cache_master_xactor_shim_bff_rv$EN)
	  cache_master_xactor_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_bff_rv$D_IN;
	if (cache_master_xactor_shim_rff_rv$EN)
	  cache_master_xactor_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_rff_rv$D_IN;
	if (cache_master_xactor_shim_wff_rv$EN)
	  cache_master_xactor_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_wff_rv$D_IN;
	if (cache_rg_cset_in_cache$EN)
	  cache_rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_cset_in_cache$D_IN;
	if (cache_rg_lower_word64_full$EN)
	  cache_rg_lower_word64_full <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_lower_word64_full$D_IN;
	if (cache_rg_lrsc_valid$EN)
	  cache_rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_lrsc_valid$D_IN;
	if (cache_rg_state$EN)
	  cache_rg_state <= `BSV_ASSIGNMENT_DELAY cache_rg_state$D_IN;
      end
    if (cache_rg_addr$EN)
      cache_rg_addr <= `BSV_ASSIGNMENT_DELAY cache_rg_addr$D_IN;
    if (cache_rg_amo_funct7$EN)
      cache_rg_amo_funct7 <= `BSV_ASSIGNMENT_DELAY cache_rg_amo_funct7$D_IN;
    if (cache_rg_error_during_refill$EN)
      cache_rg_error_during_refill <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_error_during_refill$D_IN;
    if (cache_rg_exc_code$EN)
      cache_rg_exc_code <= `BSV_ASSIGNMENT_DELAY cache_rg_exc_code$D_IN;
    if (cache_rg_is_unsigned$EN)
      cache_rg_is_unsigned <= `BSV_ASSIGNMENT_DELAY cache_rg_is_unsigned$D_IN;
    if (cache_rg_ld_val$EN)
      cache_rg_ld_val <= `BSV_ASSIGNMENT_DELAY cache_rg_ld_val$D_IN;
    if (cache_rg_lower_word64$EN)
      cache_rg_lower_word64 <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_lower_word64$D_IN;
    if (cache_rg_lrsc_pa$EN)
      cache_rg_lrsc_pa <= `BSV_ASSIGNMENT_DELAY cache_rg_lrsc_pa$D_IN;
    if (cache_rg_op$EN) cache_rg_op <= `BSV_ASSIGNMENT_DELAY cache_rg_op$D_IN;
    if (cache_rg_pa$EN) cache_rg_pa <= `BSV_ASSIGNMENT_DELAY cache_rg_pa$D_IN;
    if (cache_rg_pte_pa$EN)
      cache_rg_pte_pa <= `BSV_ASSIGNMENT_DELAY cache_rg_pte_pa$D_IN;
    if (cache_rg_st_amo_val$EN)
      cache_rg_st_amo_val <= `BSV_ASSIGNMENT_DELAY cache_rg_st_amo_val$D_IN;
    if (cache_rg_width_code$EN)
      cache_rg_width_code <= `BSV_ASSIGNMENT_DELAY cache_rg_width_code$D_IN;
    if (cache_rg_word128_set_in_cache$EN)
      cache_rg_word128_set_in_cache <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_word128_set_in_cache$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cache_cfg_verbosity = 4'hA;
    cache_crg_sb_to_load_delay = 11'h2AA;
    cache_ctr_wr_rsps_pending_inrg = 4'hA;
    cache_ctr_wr_rsps_pending_outrg = 4'hA;
    cache_master_xactor_clearing = 1'h0;
    cache_master_xactor_shim_arff_rv = 98'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    cache_master_xactor_shim_awff_rv = 98'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    cache_master_xactor_shim_bff_rv = 7'h2A;
    cache_master_xactor_shim_rff_rv =
	138'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    cache_master_xactor_shim_wff_rv =
	148'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    cache_rg_addr = 32'hAAAAAAAA;
    cache_rg_amo_funct7 = 7'h2A;
    cache_rg_cset_in_cache = 6'h2A;
    cache_rg_error_during_refill = 1'h0;
    cache_rg_exc_code = 6'h2A;
    cache_rg_is_unsigned = 1'h0;
    cache_rg_ld_val = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    cache_rg_lower_word64 = 64'hAAAAAAAAAAAAAAAA;
    cache_rg_lower_word64_full = 1'h0;
    cache_rg_lrsc_pa = 32'hAAAAAAAA;
    cache_rg_lrsc_valid = 1'h0;
    cache_rg_op = 2'h2;
    cache_rg_pa = 32'hAAAAAAAA;
    cache_rg_pte_pa = 32'hAAAAAAAA;
    cache_rg_st_amo_val = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    cache_rg_state = 4'hA;
    cache_rg_width_code = 3'h2;
    cache_rg_word128_set_in_cache = 8'hAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 &&
	  cache_cfg_verbosity != 4'd0 &&
	  !cache_f_reset_reqs$D_OUT)
	begin
	  v__h5569 = $stime;
	  #0;
	end
    v__h5563 = v__h5569 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 &&
	  cache_cfg_verbosity != 4'd0 &&
	  !cache_f_reset_reqs$D_OUT)
	$display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		 v__h5563,
		 "D_MMU_Cache",
		 $signed(32'd64),
		 $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_f_reset_reqs$D_OUT)
	begin
	  v__h5670 = $stime;
	  #0;
	end
    v__h5664 = v__h5670 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_f_reset_reqs$D_OUT)
	$display("%0d: %s.rl_reset: Flushed", v__h5664, "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h6125 = $stime;
	  #0;
	end
    v__h6119 = v__h6125 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h",
		 v__h6119,
		 "D_MMU_Cache",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("        eaddr = {CTag 0x%0h  CSet 0x%0h  Word128 0x%0h  Byte 0x%0h}",
		 pa_ctag__h7038,
		 cache_rg_addr[11:6],
		 cache_rg_addr[5:4],
		 cache_rg_addr[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("        CSet 0x%0x: (state, tag):", cache_rg_addr[11:6]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(" (");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_ram_state_and_ctag_cset$DOB[22])
	$write("CTAG_CLEAN");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  !cache_ram_state_and_ctag_cset$DOB[22])
	$write("CTAG_EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_ram_state_and_ctag_cset$DOB[22])
	$write(", 0x%0x", cache_ram_state_and_ctag_cset$DOB[21:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  !cache_ram_state_and_ctag_cset$DOB[22])
	$write(", --");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(")");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("        CSet 0x%0x, Word128 0x%0x: ",
	       cache_rg_addr[11:6],
	       cache_rg_addr[5:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(" 0x%0x", cache_ram_word128_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("    TLB result: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("VM_Xlate_Result { ", "outcome: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("VM_XLATE_OK");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "pa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 6'h2A, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d475)
	begin
	  v__h21518 = $stime;
	  #0;
	end
    v__h21512 = v__h21518 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d475)
	$display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		 v__h21512,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278,
		 130'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d489)
	$display("        AMO LR: reserving PA 0x%0h", cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d475)
	$display("        Read-hit: addr 0x%0h word128 0x%0h",
		 cache_rg_addr,
		 cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d491)
	$display("        Read Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct7_7_BITS_6_TO_2_8_EQ_0b10_9__ETC___d496)
	$display("        AMO LR: cache refill: cancelling LR/SC reservation for PA 0x%0h",
		 cache_rg_lrsc_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op == 2'd1 &&
	  cache_rg_addr_0_EQ_cache_rg_lrsc_pa_08___d179 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("        ST: cancelling LR/SC reservation for PA",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d827)
	$display("        AMO SC: fail: reserved addr 0x%0h, this address 0x%0h",
		 cache_rg_lrsc_pa,
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct7[6:2] == 5'b00011 &&
	  !cache_rg_lrsc_valid &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("        AMO SC: fail due to invalid LR/SC reservation");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct7[6:2] == 5'b00011 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("        AMO SC result = %0d", lrsc_result__h21908);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d839)
	$display("        Write-Cache-Hit: pa 0x%0h word128 0x%0h",
		 cache_rg_addr,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d839)
	$write("        New Word128_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d839)
	$write("        CSet 0x%0x, Word128 0x%0x: ",
	       cache_rg_addr[11:6],
	       cache_rg_addr[5:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d839)
	$write(" 0x%0x", { x__h22659, x__h22787 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d839)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  (cache_rg_op == 2'd1 ||
	   cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	  NOT_cache_rg_op_4_EQ_2_6_45_OR_NOT_cache_rg_am_ETC___d842)
	$display("        Write-Cache-Miss: pa 0x%0h word128 0x%0h",
		 cache_rg_addr,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d849)
	$display("        Write-Cache-Hit/Miss: eaddr 0x%0h word128 0x%0h",
		 cache_rg_addr,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d849)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d849)
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d849)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d849)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d849)
	$write("'h%h", mem_req_wr_addr_awaddr__h31147);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d849)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d849)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d849)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d849)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d849)
	$write("'h%h", _theResult___fst_val__h38441, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d849)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d849)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d849)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d849)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d849)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d849)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d849)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d849)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d849)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d849)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d849)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d849)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d849)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d849)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d849)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d849)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d849)
	$write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d849)
	$write("'h%h", mem_req_wr_data_wdata__h26440);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d849)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d849)
	$write("'h%h", mem_req_wr_data_wstrb__h31284);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d849)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d849)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d849)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d849)
	$write("'h%h", mem_req_wr_data_wuser__h26443, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d849)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_44_AND_NOT_cache_rg_o_ETC___d849)
	$display("        => rl_write_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_4_EQ_2_6_AND_cache_rg_amo_funct7_7_ETC___d854)
	begin
	  v__h26004 = $stime;
	  #0;
	end
    v__h25998 = v__h26004 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_4_EQ_2_6_AND_cache_rg_amo_funct7_7_ETC___d854)
	$display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		 v__h25998,
		 "D_MMU_Cache",
		 32'd0,
		 130'd1,
		 130'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_4_EQ_2_6_AND_cache_rg_amo_funct7_7_ETC___d854)
	$display("        AMO SC: Fail response for addr 0x%0h",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_4_EQ_1_02_87_AND_NOT_cache_rg__ETC___d859)
	$display("        AMO Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d865)
	$display("        AMO: addr 0x%0h amo_f7 0x%0h width_code %0d is_unsigned %0d rs2_val 0x%0h",
		 cache_rg_addr,
		 cache_rg_amo_funct7,
		 cache_rg_width_code,
		 cache_rg_is_unsigned,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d865)
	$display("          PA 0x%0h ", cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d865)
	$display("          Cache word128 0x%0h, load-result 0x%0h",
		 cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278,
		 cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d865)
	$display("          0x%0h  op  0x%0h -> 0x%0h",
		 cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278,
		 cache_ram_word128_set_b_read__61_AND_cache_ram_ETC___d278,
		 { 65'd0, x__h27210 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d865)
	$write("          New Word128_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d865)
	$write("        CSet 0x%0x, Word128 0x%0x: ",
	       cache_rg_addr[11:6],
	       cache_rg_addr[5:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d865)
	$write(" 0x%0x",
	       { cache_ram_word128_set_b_read__61_BITS_129_TO_1_ETC___d563,
		 x__h27119 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d865)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d865)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d865)
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d865)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d865)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d865)
	$write("'h%h", mem_req_wr_addr_awaddr__h31147);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d865)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d865)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d865)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d865)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d865)
	$write("'h%h", _theResult___fst_val__h38441, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d865)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d865)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d865)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d865)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d865)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d865)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d865)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d865)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d865)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d865)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d865)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d865)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d865)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d865)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d865)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d865)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d865)
	$write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d865)
	$write("'h%h", mem_req_wr_data_wdata__h31283);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d865)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d865)
	$write("'h%h", mem_req_wr_data_wstrb__h31284);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d865)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d865)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d865)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d865)
	$write("'h%h", 2'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d865)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_4_EQ_1_02_87_AND_NOT_cache_rg__ETC___d869)
	$display("        AMO_op: cancelling LR/SC reservation for PA",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  !cache_soc_map$m_is_mem_addr &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("    => IO_REQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_reset &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h5143 = $stime;
	  #0;
	end
    v__h5137 = v__h5143 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_reset &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s.rl_start_reset", v__h5137, "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h34746 = $stime;
	  #0;
	end
    v__h34740 = v__h34746 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s.rl_io_read_req; width_code 0x%0h vaddr %0h  paddr %0h",
		 v__h34740,
		 "D_MMU_Cache",
		 cache_rg_width_code,
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", mem_req_wr_addr_awaddr__h38358);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", size_val__h37818, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_maintain_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h36773 = $stime;
	  #0;
	end
    v__h36767 = v__h36773 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_maintain_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		 v__h36767,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 cache_rg_ld_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h36861 = $stime;
	  #0;
	end
    v__h36855 = v__h36861 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s: rl_io_write_req; width_code 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		 v__h36855,
		 "D_MMU_Cache",
		 cache_rg_width_code,
		 cache_rg_addr,
		 cache_rg_pa,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", mem_req_wr_addr_awaddr__h38358);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", _theResult___fst_val__h38441, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", mem_req_wr_data_wdata__h37103);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", mem_req_wr_data_wstrb__h38495);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", mem_req_wr_data_wuser__h26443, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_SC_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h37559 = $stime;
	  #0;
	end
    v__h37553 = v__h37559 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_SC_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s: rl_io_AMO_SC_req; width_code 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		 v__h37553,
		 "D_MMU_Cache",
		 cache_rg_width_code,
		 cache_rg_addr,
		 cache_rg_pa,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_SC_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("    FAIL due to I/O address.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_SC_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h37681 = $stime;
	  #0;
	end
    v__h37675 = v__h37681 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s.rl_io_AMO_op_req; width_code 0x%0h vaddr %0h  paddr %0h",
		 v__h37675,
		 "D_MMU_Cache",
		 cache_rg_width_code,
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", mem_req_wr_addr_awaddr__h38358);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", size_val__h37818, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d114 == 4'd0)
	begin
	  v__h41694 = $stime;
	  #0;
	end
    v__h41688 = v__h41694 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d114 == 4'd0)
	$display("%0d: ERROR: %s.rl_discard_write_rsp: unexpected W response (ctr_wr_rsps_pending.value == 0)",
		 v__h41688,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d114 == 4'd0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d114 == 4'd0)
	$write("AXI4_BFlit { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d114 == 4'd0)
	$write("'h%h", cache_master_xactor_shim_bff_rv$port1__read[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d114 == 4'd0)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d114 == 4'd0 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d114 == 4'd0 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d114 == 4'd0 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d114 == 4'd0 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd1 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d114 == 4'd0)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d114 == 4'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d114 == 4'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d114 == 4'd0)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h41941 = $stime;
	  #0;
	end
    v__h41935 = v__h41941 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("%0d: %s.rl_discard_write_rsp: pending %0d ",
	       v__h41935,
	       "D_MMU_Cache",
	       $unsigned(cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d114));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_BFlit { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", cache_master_xactor_shim_bff_rv$port1__read[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	begin
	  v__h41902 = $stime;
	  #0;
	end
    v__h41896 = v__h41902 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$display("%0d: %s.rl_discard_write_rsp: fabric response error: exit",
		 v__h41896,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("AXI4_BFlit { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("'h%h", cache_master_xactor_shim_bff_rv$port1__read[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd1 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h35103 = $stime;
	  #0;
	end
    v__h35097 = v__h35103 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s.rl_io_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		 v__h35097,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[136:133]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[132:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd1 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  !cache_master_xactor_shim_rff_rv$port1__read[2])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h",
	       cache_master_xactor_shim_rff_rv$port1__read[1:0],
	       " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h36548 = $stime;
	  #0;
	end
    v__h36542 = v__h36548 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		 v__h36542,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 { 1'd0, x__h35415 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h36662 = $stime;
	  #0;
	end
    v__h36656 = v__h36662 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		 v__h36656,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h37982 = $stime;
	  #0;
	end
    v__h37976 = v__h37982 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s.rl_io_AMO_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		 v__h37976,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[136:133]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[132:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd1 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  !cache_master_xactor_shim_rff_rv$port1__read[2])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h",
	       cache_master_xactor_shim_rff_rv$port1__read[1:0],
	       " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h38177 = $stime;
	  #0;
	end
    v__h38171 = v__h38177 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s: rl_io_AMO_read_rsp; f3 0x%0h  vaddr %0h  paddr %0h  word128 0x%0h",
		 v__h38171,
		 "D_MMU_Cache",
		 cache_rg_width_code,
		 cache_rg_addr,
		 cache_rg_pa,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", mem_req_wr_addr_awaddr__h38358);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", _theResult___fst_val__h38441, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", mem_req_wr_data_wdata__h38494);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", mem_req_wr_data_wstrb__h38495);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 2'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h41386 = $stime;
	  #0;
	end
    v__h41380 = v__h41386 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		 v__h41380,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 { 65'd0,
		   IF_cache_rg_width_code_02_EQ_2_07_THEN_SEXT_IF_ETC___d1277 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h38275 = $stime;
	  #0;
	end
    v__h38269 = v__h38275 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s.rl_io_AMO_read_rsp: FABRIC_RSP_ERR: raising trap STORE_AMO_ACCESS_FAULT",
		 v__h38269,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h42332 = $stime;
	  #0;
	end
    v__h42326 = v__h42332 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("%0d: %s.req: op:", v__h42326, "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  req_op == 2'd0)
	$write("CACHE_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  req_op == 2'd1)
	$write("CACHE_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  req_op != 2'd0 &&
	  req_op != 2'd1)
	$write("CACHE_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(" width_code:%0d addr:0x%0h st_value:0x%0h priv:",
	       req_width_code,
	       req_addr,
	       req_st_value);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  req_priv == 2'b0)
	$write("U");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  req_priv == 2'b01)
	$write("S");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  req_priv == 2'b11)
	$write("M");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  req_priv != 2'b0 &&
	  req_priv != 2'b01 &&
	  req_priv != 2'b11)
	$write("RESERVED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(" sstatus_SUM:%0d mstatus_MXR:%0d satp:0x%0h",
	       req_sstatus_SUM,
	       req_mstatus_MXR,
	       req_satp,
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("    amo_funct7 = 0x%0h", req_amo_funct7);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req &&
	  req_width_code_EQ_0b0_369_OR_req_width_code_EQ_ETC___d1410)
	$display("    fa_req_ram_B tagCSet [0x%0x] word128_set [0x%0d]",
		 req_addr[11:6],
		 req_addr[11:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h31884 = $stime;
	  #0;
	end
    v__h31878 = v__h31884 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s.rl_start_cache_refill: ", v__h31878, "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("    To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", cline_fabric_addr__h31937);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 8'd3);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 3'b100, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("    Victim way %0d; => CACHE_REFILL", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_06___d907)
	begin
	  v__h32840 = $stime;
	  #0;
	end
    v__h32834 = v__h32840 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_06___d907)
	$display("%0d: %s.rl_cache_refill_rsps_loop:",
		 v__h32834,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_06___d907)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_06___d907)
	$write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_06___d907)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[136:133]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_06___d907)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_06___d907)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[132:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_06___d907)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_06___d907 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_06___d907 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_06___d907 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_06___d907 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd1 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_06___d907)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_06___d907 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_06___d907 &&
	  !cache_master_xactor_shim_rff_rv$port1__read[2])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_06___d907)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_06___d907)
	$write("'h%h",
	       cache_master_xactor_shim_rff_rv$port1__read[1:0],
	       " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_06___d907)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h33102 = $stime;
	  #0;
	end
    v__h33096 = v__h33102 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d",
		 v__h33096,
		 "D_MMU_Cache",
		 access_exc_code__h4894);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_word128_set_in_cache[1:0] == 2'd3 &&
	  (cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 ||
	   cache_rg_error_during_refill) &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("    => MODULE_EXCEPTION_RSP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_word128_set_in_cache[1:0] == 2'd3 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  !cache_rg_error_during_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("    => CACHE_REREQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_06___d907)
	$display("        Updating Cache word128_set 0x%0h, word128_in_cline %0d) old => new",
		 cache_rg_word128_set_in_cache,
		 cache_rg_word128_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_06___d907)
	$write("        CSet 0x%0x, Word128 0x%0x: ",
	       cache_rg_addr[11:6],
	       cache_rg_word128_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_06___d907)
	$write(" 0x%0x", cache_ram_word128_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_06___d907)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_06___d907)
	$write("        CSet 0x%0x, Word128 0x%0x: ",
	       cache_rg_addr[11:6],
	       cache_rg_word128_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_06___d907)
	$write(" 0x%0x",
	       { cache_master_xactor_shim_rff_rv$port1__read[1:0],
		 cache_master_xactor_shim_rff_rv$port1__read[132:5] });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_06___d907)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_rereq &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("    fa_req_ram_B tagCSet [0x%0x] word128_set [0x%0d]",
		 cache_rg_addr[11:6],
		 cache_rg_addr[11:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
  end
  // synopsys translate_on
endmodule  // mkMMU_DCache

