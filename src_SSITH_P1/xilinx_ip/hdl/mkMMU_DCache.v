//
// Generated by Bluespec Compiler, version 2019.05.beta2 (build a88bf40db, 2019-05-24)
//
// On Tue Feb  4 13:01:15 GMT 2020
//
//
// Ports:
// Name                         I/O  size props
// RDY_set_verbosity              O     1 const
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1
// valid                          O     1
// addr                           O    32 reg
// word128_fst                    O     1
// word128_snd                    O   128
// st_amo_val_fst                 O     1
// st_amo_val_snd                 O   128
// exc                            O     1
// exc_code                       O     6 reg
// RDY_server_flush_request_put   O     1
// RDY_server_flush_response_get  O     1
// RDY_tlb_flush                  O     1
// mem_master_awid                O     4
// mem_master_awaddr              O    64
// mem_master_awlen               O     8
// mem_master_awsize              O     3
// mem_master_awburst             O     2
// mem_master_awlock              O     1
// mem_master_awcache             O     4
// mem_master_awprot              O     3
// mem_master_awqos               O     4
// mem_master_awregion            O     4
// mem_master_awvalid             O     1
// mem_master_wdata               O    64
// mem_master_wstrb               O     8
// mem_master_wlast               O     1
// mem_master_wuser               O     1
// mem_master_wvalid              O     1
// mem_master_bready              O     1
// mem_master_arid                O     4
// mem_master_araddr              O    64
// mem_master_arlen               O     8
// mem_master_arsize              O     3
// mem_master_arburst             O     2
// mem_master_arlock              O     1
// mem_master_arcache             O     4
// mem_master_arprot              O     3
// mem_master_arqos               O     4
// mem_master_arregion            O     4
// mem_master_arvalid             O     1
// mem_master_rready              O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_verbosity_verbosity        I     4 reg
// req_op                         I     2
// req_width_code                 I     3
// req_is_unsigned                I     1 reg
// req_amo_funct7                 I     7 reg
// req_addr                       I    32
// req_st_value                   I   129
// req_priv                       I     2 unused
// req_sstatus_SUM                I     1 unused
// req_mstatus_MXR                I     1 unused
// req_satp                       I    32 unused
// mem_master_awready             I     1
// mem_master_wready              I     1
// mem_master_bid                 I     4
// mem_master_bresp               I     2
// mem_master_arready             I     1
// mem_master_rid                 I     4
// mem_master_rdata               I    64
// mem_master_rresp               I     2
// mem_master_rlast               I     1
// mem_master_ruser               I     1
// EN_set_verbosity               I     1
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_req                         I     1
// EN_commit                      I     1
// EN_server_flush_request_put    I     1
// EN_server_flush_response_get   I     1
// EN_tlb_flush                   I     1 unused
// mem_master_bvalid              I     1
// mem_master_rvalid              I     1
//
// Combinational paths from inputs to outputs:
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> valid
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> word128_fst
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> word128_snd
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awid
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awaddr
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awlen
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awsize
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awburst
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awlock
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awcache
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awprot
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awqos
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awregion
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awuser
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awvalid
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_wdata
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_wstrb
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_wlast
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_wuser
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_wvalid
//   EN_req -> RDY_server_flush_request_put
//   EN_req -> RDY_tlb_flush
//   EN_req -> mem_master_arid
//   EN_req -> mem_master_araddr
//   EN_req -> mem_master_arlen
//   EN_req -> mem_master_arsize
//   EN_req -> mem_master_arburst
//   EN_req -> mem_master_arlock
//   EN_req -> mem_master_arcache
//   EN_req -> mem_master_arprot
//   EN_req -> mem_master_arqos
//   EN_req -> mem_master_arregion
//   EN_req -> mem_master_aruser
//   EN_req -> mem_master_arvalid
//   EN_commit -> st_amo_val_fst
//   EN_commit -> st_amo_val_snd
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMMU_DCache(CLK,
		    RST_N,

		    set_verbosity_verbosity,
		    EN_set_verbosity,
		    RDY_set_verbosity,

		    EN_server_reset_request_put,
		    RDY_server_reset_request_put,

		    EN_server_reset_response_get,
		    RDY_server_reset_response_get,

		    req_op,
		    req_width_code,
		    req_is_unsigned,
		    req_amo_funct7,
		    req_addr,
		    req_st_value,
		    req_priv,
		    req_sstatus_SUM,
		    req_mstatus_MXR,
		    req_satp,
		    EN_req,

		    EN_commit,

		    valid,

		    addr,

		    word128_fst,

		    word128_snd,

		    st_amo_val_fst,

		    st_amo_val_snd,

		    exc,

		    exc_code,

		    EN_server_flush_request_put,
		    RDY_server_flush_request_put,

		    EN_server_flush_response_get,
		    RDY_server_flush_response_get,

		    EN_tlb_flush,
		    RDY_tlb_flush,

		    mem_master_awid,

		    mem_master_awaddr,

		    mem_master_awlen,

		    mem_master_awsize,

		    mem_master_awburst,

		    mem_master_awlock,

		    mem_master_awcache,

		    mem_master_awprot,

		    mem_master_awqos,

		    mem_master_awregion,

		    mem_master_awvalid,

		    mem_master_awready,

		    mem_master_wdata,

		    mem_master_wstrb,

		    mem_master_wlast,

		    mem_master_wuser,

		    mem_master_wvalid,

		    mem_master_wready,

		    mem_master_bid,
		    mem_master_bresp,
		    mem_master_bvalid,

		    mem_master_bready,

		    mem_master_arid,

		    mem_master_araddr,

		    mem_master_arlen,

		    mem_master_arsize,

		    mem_master_arburst,

		    mem_master_arlock,

		    mem_master_arcache,

		    mem_master_arprot,

		    mem_master_arqos,

		    mem_master_arregion,

		    mem_master_arvalid,

		    mem_master_arready,

		    mem_master_rid,
		    mem_master_rdata,
		    mem_master_rresp,
		    mem_master_rlast,
		    mem_master_ruser,
		    mem_master_rvalid,

		    mem_master_rready);
  input  CLK;
  input  RST_N;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // action method req
  input  [1 : 0] req_op;
  input  [2 : 0] req_width_code;
  input  req_is_unsigned;
  input  [6 : 0] req_amo_funct7;
  input  [31 : 0] req_addr;
  input  [128 : 0] req_st_value;
  input  [1 : 0] req_priv;
  input  req_sstatus_SUM;
  input  req_mstatus_MXR;
  input  [31 : 0] req_satp;
  input  EN_req;

  // action method commit
  input  EN_commit;

  // value method valid
  output valid;

  // value method addr
  output [31 : 0] addr;

  // value method word128_fst
  output word128_fst;

  // value method word128_snd
  output [127 : 0] word128_snd;

  // value method st_amo_val_fst
  output st_amo_val_fst;

  // value method st_amo_val_snd
  output [127 : 0] st_amo_val_snd;

  // value method exc
  output exc;

  // value method exc_code
  output [5 : 0] exc_code;

  // action method server_flush_request_put
  input  EN_server_flush_request_put;
  output RDY_server_flush_request_put;

  // action method server_flush_response_get
  input  EN_server_flush_response_get;
  output RDY_server_flush_response_get;

  // action method tlb_flush
  input  EN_tlb_flush;
  output RDY_tlb_flush;

  // value method mem_master_aw_awid
  output [3 : 0] mem_master_awid;

  // value method mem_master_aw_awaddr
  output [63 : 0] mem_master_awaddr;

  // value method mem_master_aw_awlen
  output [7 : 0] mem_master_awlen;

  // value method mem_master_aw_awsize
  output [2 : 0] mem_master_awsize;

  // value method mem_master_aw_awburst
  output [1 : 0] mem_master_awburst;

  // value method mem_master_aw_awlock
  output mem_master_awlock;

  // value method mem_master_aw_awcache
  output [3 : 0] mem_master_awcache;

  // value method mem_master_aw_awprot
  output [2 : 0] mem_master_awprot;

  // value method mem_master_aw_awqos
  output [3 : 0] mem_master_awqos;

  // value method mem_master_aw_awregion
  output [3 : 0] mem_master_awregion;

  // value method mem_master_aw_awuser

  // value method mem_master_aw_awvalid
  output mem_master_awvalid;

  // action method mem_master_aw_awready
  input  mem_master_awready;

  // value method mem_master_w_wdata
  output [63 : 0] mem_master_wdata;

  // value method mem_master_w_wstrb
  output [7 : 0] mem_master_wstrb;

  // value method mem_master_w_wlast
  output mem_master_wlast;

  // value method mem_master_w_wuser
  output mem_master_wuser;

  // value method mem_master_w_wvalid
  output mem_master_wvalid;

  // action method mem_master_w_wready
  input  mem_master_wready;

  // action method mem_master_b_bflit
  input  [3 : 0] mem_master_bid;
  input  [1 : 0] mem_master_bresp;
  input  mem_master_bvalid;

  // value method mem_master_b_bready
  output mem_master_bready;

  // value method mem_master_ar_arid
  output [3 : 0] mem_master_arid;

  // value method mem_master_ar_araddr
  output [63 : 0] mem_master_araddr;

  // value method mem_master_ar_arlen
  output [7 : 0] mem_master_arlen;

  // value method mem_master_ar_arsize
  output [2 : 0] mem_master_arsize;

  // value method mem_master_ar_arburst
  output [1 : 0] mem_master_arburst;

  // value method mem_master_ar_arlock
  output mem_master_arlock;

  // value method mem_master_ar_arcache
  output [3 : 0] mem_master_arcache;

  // value method mem_master_ar_arprot
  output [2 : 0] mem_master_arprot;

  // value method mem_master_ar_arqos
  output [3 : 0] mem_master_arqos;

  // value method mem_master_ar_arregion
  output [3 : 0] mem_master_arregion;

  // value method mem_master_ar_aruser

  // value method mem_master_ar_arvalid
  output mem_master_arvalid;

  // action method mem_master_ar_arready
  input  mem_master_arready;

  // action method mem_master_r_rflit
  input  [3 : 0] mem_master_rid;
  input  [63 : 0] mem_master_rdata;
  input  [1 : 0] mem_master_rresp;
  input  mem_master_rlast;
  input  mem_master_ruser;
  input  mem_master_rvalid;

  // value method mem_master_r_rready
  output mem_master_rready;

  // signals for module outputs
  wire [127 : 0] st_amo_val_snd, word128_snd;
  wire [63 : 0] mem_master_araddr, mem_master_awaddr, mem_master_wdata;
  wire [31 : 0] addr;
  wire [7 : 0] mem_master_arlen, mem_master_awlen, mem_master_wstrb;
  wire [5 : 0] exc_code;
  wire [3 : 0] mem_master_arcache,
	       mem_master_arid,
	       mem_master_arqos,
	       mem_master_arregion,
	       mem_master_awcache,
	       mem_master_awid,
	       mem_master_awqos,
	       mem_master_awregion;
  wire [2 : 0] mem_master_arprot,
	       mem_master_arsize,
	       mem_master_awprot,
	       mem_master_awsize;
  wire [1 : 0] mem_master_arburst, mem_master_awburst;
  wire RDY_server_flush_request_put,
       RDY_server_flush_response_get,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_set_verbosity,
       RDY_tlb_flush,
       exc,
       mem_master_arlock,
       mem_master_arvalid,
       mem_master_awlock,
       mem_master_awvalid,
       mem_master_bready,
       mem_master_rready,
       mem_master_wlast,
       mem_master_wuser,
       mem_master_wvalid,
       st_amo_val_fst,
       valid,
       word128_fst;

  // inlined wires
  reg [128 : 0] cache_dw_output_ld_val$wget;
  reg [97 : 0] cache_master_xactor_shim_awff_rv$port0__write_1;
  reg [74 : 0] cache_master_xactor_shim_wff_rv$port0__write_1;
  wire [128 : 0] cache_dw_output_st_amo_val$wget;
  wire [97 : 0] cache_master_xactor_shim_arff_rv$port0__write_1,
		cache_master_xactor_shim_arff_rv$port1__read,
		cache_master_xactor_shim_arff_rv$port2__read,
		cache_master_xactor_shim_arff_rv$port3__read,
		cache_master_xactor_shim_awff_rv$port1__read,
		cache_master_xactor_shim_awff_rv$port2__read,
		cache_master_xactor_shim_awff_rv$port3__read;
  wire [74 : 0] cache_master_xactor_shim_wff_rv$port1__read,
		cache_master_xactor_shim_wff_rv$port2__read,
		cache_master_xactor_shim_wff_rv$port3__read;
  wire [72 : 0] cache_master_xactor_shim_rff_rv$port0__write_1,
		cache_master_xactor_shim_rff_rv$port1__read,
		cache_master_xactor_shim_rff_rv$port2__read,
		cache_master_xactor_shim_rff_rv$port3__read;
  wire [71 : 0] cache_master_xactor_ug_master_u_r_putWire$wget;
  wire [10 : 0] cache_crg_sb_to_load_delay$port0__write_1,
		cache_crg_sb_to_load_delay$port2__read;
  wire [6 : 0] cache_master_xactor_shim_bff_rv$port0__write_1,
	       cache_master_xactor_shim_bff_rv$port1__read,
	       cache_master_xactor_shim_bff_rv$port2__read,
	       cache_master_xactor_shim_bff_rv$port3__read;
  wire [5 : 0] cache_master_xactor_ug_master_u_b_putWire$wget;
  wire cache_crg_commit$port1__read,
       cache_crg_commit$port3__read,
       cache_crg_sb_to_load_delay$EN_port1__write,
       cache_dw_valid$whas,
       cache_master_xactor_shim_arff_rv$EN_port0__write,
       cache_master_xactor_shim_awff_rv$EN_port0__write,
       cache_master_xactor_shim_rff_rv$EN_port1__write,
       cache_master_xactor_shim_wff_rv$EN_port0__write,
       cache_master_xactor_ug_master_u_ar_dropWire$whas,
       cache_master_xactor_ug_master_u_aw_dropWire$whas,
       cache_master_xactor_ug_master_u_b_putWire$whas,
       cache_master_xactor_ug_master_u_r_putWire$whas,
       cache_master_xactor_ug_master_u_w_dropWire$whas;

  // register cache_cfg_verbosity
  reg [3 : 0] cache_cfg_verbosity;
  wire [3 : 0] cache_cfg_verbosity$D_IN;
  wire cache_cfg_verbosity$EN;

  // register cache_crg_commit
  reg cache_crg_commit;
  wire cache_crg_commit$D_IN, cache_crg_commit$EN;

  // register cache_crg_sb_to_load_delay
  reg [10 : 0] cache_crg_sb_to_load_delay;
  wire [10 : 0] cache_crg_sb_to_load_delay$D_IN;
  wire cache_crg_sb_to_load_delay$EN;

  // register cache_ctr_wr_rsps_pending_inrg
  reg [3 : 0] cache_ctr_wr_rsps_pending_inrg;
  reg [3 : 0] cache_ctr_wr_rsps_pending_inrg$D_IN;
  wire cache_ctr_wr_rsps_pending_inrg$EN;

  // register cache_ctr_wr_rsps_pending_outrg
  reg [3 : 0] cache_ctr_wr_rsps_pending_outrg;
  wire [3 : 0] cache_ctr_wr_rsps_pending_outrg$D_IN;
  wire cache_ctr_wr_rsps_pending_outrg$EN;

  // register cache_master_xactor_clearing
  reg cache_master_xactor_clearing;
  wire cache_master_xactor_clearing$D_IN, cache_master_xactor_clearing$EN;

  // register cache_master_xactor_shim_arff_rv
  reg [97 : 0] cache_master_xactor_shim_arff_rv;
  wire [97 : 0] cache_master_xactor_shim_arff_rv$D_IN;
  wire cache_master_xactor_shim_arff_rv$EN;

  // register cache_master_xactor_shim_awff_rv
  reg [97 : 0] cache_master_xactor_shim_awff_rv;
  wire [97 : 0] cache_master_xactor_shim_awff_rv$D_IN;
  wire cache_master_xactor_shim_awff_rv$EN;

  // register cache_master_xactor_shim_bff_rv
  reg [6 : 0] cache_master_xactor_shim_bff_rv;
  wire [6 : 0] cache_master_xactor_shim_bff_rv$D_IN;
  wire cache_master_xactor_shim_bff_rv$EN;

  // register cache_master_xactor_shim_rff_rv
  reg [72 : 0] cache_master_xactor_shim_rff_rv;
  wire [72 : 0] cache_master_xactor_shim_rff_rv$D_IN;
  wire cache_master_xactor_shim_rff_rv$EN;

  // register cache_master_xactor_shim_wff_rv
  reg [74 : 0] cache_master_xactor_shim_wff_rv;
  wire [74 : 0] cache_master_xactor_shim_wff_rv$D_IN;
  wire cache_master_xactor_shim_wff_rv$EN;

  // register cache_rg_addr
  reg [31 : 0] cache_rg_addr;
  wire [31 : 0] cache_rg_addr$D_IN;
  wire cache_rg_addr$EN;

  // register cache_rg_amo_funct7
  reg [6 : 0] cache_rg_amo_funct7;
  wire [6 : 0] cache_rg_amo_funct7$D_IN;
  wire cache_rg_amo_funct7$EN;

  // register cache_rg_cset_in_cache
  reg [5 : 0] cache_rg_cset_in_cache;
  wire [5 : 0] cache_rg_cset_in_cache$D_IN;
  wire cache_rg_cset_in_cache$EN;

  // register cache_rg_error_during_refill
  reg cache_rg_error_during_refill;
  wire cache_rg_error_during_refill$D_IN, cache_rg_error_during_refill$EN;

  // register cache_rg_exc_code
  reg [5 : 0] cache_rg_exc_code;
  reg [5 : 0] cache_rg_exc_code$D_IN;
  wire cache_rg_exc_code$EN;

  // register cache_rg_is_unsigned
  reg cache_rg_is_unsigned;
  wire cache_rg_is_unsigned$D_IN, cache_rg_is_unsigned$EN;

  // register cache_rg_ld_val
  reg [128 : 0] cache_rg_ld_val;
  reg [128 : 0] cache_rg_ld_val$D_IN;
  wire cache_rg_ld_val$EN;

  // register cache_rg_lower_tag
  reg cache_rg_lower_tag;
  wire cache_rg_lower_tag$D_IN, cache_rg_lower_tag$EN;

  // register cache_rg_lower_word64
  reg [63 : 0] cache_rg_lower_word64;
  wire [63 : 0] cache_rg_lower_word64$D_IN;
  wire cache_rg_lower_word64$EN;

  // register cache_rg_lower_word64_full
  reg cache_rg_lower_word64_full;
  wire cache_rg_lower_word64_full$D_IN, cache_rg_lower_word64_full$EN;

  // register cache_rg_lrsc_pa
  reg [31 : 0] cache_rg_lrsc_pa;
  wire [31 : 0] cache_rg_lrsc_pa$D_IN;
  wire cache_rg_lrsc_pa$EN;

  // register cache_rg_lrsc_valid
  reg cache_rg_lrsc_valid;
  wire cache_rg_lrsc_valid$D_IN, cache_rg_lrsc_valid$EN;

  // register cache_rg_op
  reg [1 : 0] cache_rg_op;
  wire [1 : 0] cache_rg_op$D_IN;
  wire cache_rg_op$EN;

  // register cache_rg_pa
  reg [31 : 0] cache_rg_pa;
  wire [31 : 0] cache_rg_pa$D_IN;
  wire cache_rg_pa$EN;

  // register cache_rg_pte_pa
  reg [31 : 0] cache_rg_pte_pa;
  wire [31 : 0] cache_rg_pte_pa$D_IN;
  wire cache_rg_pte_pa$EN;

  // register cache_rg_st_amo_val
  reg [128 : 0] cache_rg_st_amo_val;
  wire [128 : 0] cache_rg_st_amo_val$D_IN;
  wire cache_rg_st_amo_val$EN;

  // register cache_rg_state
  reg [3 : 0] cache_rg_state;
  reg [3 : 0] cache_rg_state$D_IN;
  wire cache_rg_state$EN;

  // register cache_rg_width_code
  reg [2 : 0] cache_rg_width_code;
  wire [2 : 0] cache_rg_width_code$D_IN;
  wire cache_rg_width_code$EN;

  // register cache_rg_word128_set_in_cache
  reg [7 : 0] cache_rg_word128_set_in_cache;
  wire [7 : 0] cache_rg_word128_set_in_cache$D_IN;
  wire cache_rg_word128_set_in_cache$EN;

  // ports of submodule cache_f_reset_reqs
  wire cache_f_reset_reqs$CLR,
       cache_f_reset_reqs$DEQ,
       cache_f_reset_reqs$D_IN,
       cache_f_reset_reqs$D_OUT,
       cache_f_reset_reqs$EMPTY_N,
       cache_f_reset_reqs$ENQ,
       cache_f_reset_reqs$FULL_N;

  // ports of submodule cache_f_reset_rsps
  wire cache_f_reset_rsps$CLR,
       cache_f_reset_rsps$DEQ,
       cache_f_reset_rsps$D_IN,
       cache_f_reset_rsps$D_OUT,
       cache_f_reset_rsps$EMPTY_N,
       cache_f_reset_rsps$ENQ,
       cache_f_reset_rsps$FULL_N;

  // ports of submodule cache_ram_state_and_ctag_cset
  wire [22 : 0] cache_ram_state_and_ctag_cset$DIA,
		cache_ram_state_and_ctag_cset$DIB,
		cache_ram_state_and_ctag_cset$DOB;
  wire [5 : 0] cache_ram_state_and_ctag_cset$ADDRA,
	       cache_ram_state_and_ctag_cset$ADDRB;
  wire cache_ram_state_and_ctag_cset$ENA,
       cache_ram_state_and_ctag_cset$ENB,
       cache_ram_state_and_ctag_cset$WEA,
       cache_ram_state_and_ctag_cset$WEB;

  // ports of submodule cache_ram_word128_set
  reg [129 : 0] cache_ram_word128_set$DIB;
  reg [7 : 0] cache_ram_word128_set$ADDRB;
  wire [129 : 0] cache_ram_word128_set$DIA, cache_ram_word128_set$DOB;
  wire [7 : 0] cache_ram_word128_set$ADDRA;
  wire cache_ram_word128_set$ENA,
       cache_ram_word128_set$ENB,
       cache_ram_word128_set$WEA,
       cache_ram_word128_set$WEB;

  // ports of submodule cache_soc_map
  wire [63 : 0] cache_soc_map$m_is_IO_addr_addr,
		cache_soc_map$m_is_mem_addr_addr,
		cache_soc_map$m_is_near_mem_IO_addr_addr;
  wire cache_soc_map$m_is_mem_addr;

  // rule scheduling signals
  wire CAN_FIRE_RL_cache_master_xactor_do_clear,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop,
       CAN_FIRE_RL_cache_rl_ST_AMO_response,
       CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop,
       CAN_FIRE_RL_cache_rl_discard_write_rsp,
       CAN_FIRE_RL_cache_rl_drive_exception_rsp,
       CAN_FIRE_RL_cache_rl_io_AMO_SC_req,
       CAN_FIRE_RL_cache_rl_io_AMO_op_req,
       CAN_FIRE_RL_cache_rl_io_AMO_read_rsp,
       CAN_FIRE_RL_cache_rl_io_read_req,
       CAN_FIRE_RL_cache_rl_io_read_rsp,
       CAN_FIRE_RL_cache_rl_io_write_req,
       CAN_FIRE_RL_cache_rl_maintain_io_read_rsp,
       CAN_FIRE_RL_cache_rl_probe_and_immed_rsp,
       CAN_FIRE_RL_cache_rl_rereq,
       CAN_FIRE_RL_cache_rl_reset,
       CAN_FIRE_RL_cache_rl_shift_sb_to_load_delay,
       CAN_FIRE_RL_cache_rl_start_cache_refill,
       CAN_FIRE_RL_cache_rl_start_reset,
       CAN_FIRE_commit,
       CAN_FIRE_mem_master_ar_arready,
       CAN_FIRE_mem_master_aw_awready,
       CAN_FIRE_mem_master_b_bflit,
       CAN_FIRE_mem_master_r_rflit,
       CAN_FIRE_mem_master_w_wready,
       CAN_FIRE_req,
       CAN_FIRE_server_flush_request_put,
       CAN_FIRE_server_flush_response_get,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_tlb_flush,
       WILL_FIRE_RL_cache_master_xactor_do_clear,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop,
       WILL_FIRE_RL_cache_rl_ST_AMO_response,
       WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop,
       WILL_FIRE_RL_cache_rl_discard_write_rsp,
       WILL_FIRE_RL_cache_rl_drive_exception_rsp,
       WILL_FIRE_RL_cache_rl_io_AMO_SC_req,
       WILL_FIRE_RL_cache_rl_io_AMO_op_req,
       WILL_FIRE_RL_cache_rl_io_AMO_read_rsp,
       WILL_FIRE_RL_cache_rl_io_read_req,
       WILL_FIRE_RL_cache_rl_io_read_rsp,
       WILL_FIRE_RL_cache_rl_io_write_req,
       WILL_FIRE_RL_cache_rl_maintain_io_read_rsp,
       WILL_FIRE_RL_cache_rl_probe_and_immed_rsp,
       WILL_FIRE_RL_cache_rl_rereq,
       WILL_FIRE_RL_cache_rl_reset,
       WILL_FIRE_RL_cache_rl_shift_sb_to_load_delay,
       WILL_FIRE_RL_cache_rl_start_cache_refill,
       WILL_FIRE_RL_cache_rl_start_reset,
       WILL_FIRE_commit,
       WILL_FIRE_mem_master_ar_arready,
       WILL_FIRE_mem_master_aw_awready,
       WILL_FIRE_mem_master_b_bflit,
       WILL_FIRE_mem_master_r_rflit,
       WILL_FIRE_mem_master_w_wready,
       WILL_FIRE_req,
       WILL_FIRE_server_flush_request_put,
       WILL_FIRE_server_flush_response_get,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_tlb_flush;

  // inputs to muxes for submodule ports
  wire [129 : 0] MUX_cache_ram_word128_set$a_put_3__VAL_1,
		 MUX_cache_ram_word128_set$a_put_3__VAL_2;
  wire [128 : 0] MUX_cache_dw_output_ld_val$wset_1__VAL_1,
		 MUX_cache_dw_output_ld_val$wset_1__VAL_2,
		 MUX_cache_dw_output_ld_val$wset_1__VAL_3,
		 MUX_cache_dw_output_st_amo_val$wset_1__VAL_1,
		 MUX_cache_rg_ld_val$write_1__VAL_2,
		 MUX_cache_rg_st_amo_val$write_1__VAL_2;
  wire [97 : 0] MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_1,
		MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_2,
		MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_1,
		MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_2;
  wire [74 : 0] MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_1,
		MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_2,
		MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_3;
  wire [22 : 0] MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1;
  wire [7 : 0] MUX_cache_ram_word128_set$b_put_2__VAL_2,
	       MUX_cache_ram_word128_set$b_put_2__VAL_4;
  wire [5 : 0] MUX_cache_rg_cset_in_cache$write_1__VAL_1,
	       MUX_cache_rg_exc_code$write_1__VAL_1,
	       MUX_cache_rg_exc_code$write_1__VAL_2;
  wire [3 : 0] MUX_cache_ctr_wr_rsps_pending_inrg$write_1__VAL_1,
	       MUX_cache_ctr_wr_rsps_pending_outrg$write_1__VAL_1,
	       MUX_cache_rg_state$write_1__VAL_12,
	       MUX_cache_rg_state$write_1__VAL_2,
	       MUX_cache_rg_state$write_1__VAL_4,
	       MUX_cache_rg_state$write_1__VAL_5;
  wire MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_1,
       MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_2,
       MUX_cache_dw_output_ld_val$wset_1__SEL_1,
       MUX_cache_dw_output_ld_val$wset_1__SEL_3,
       MUX_cache_dw_output_ld_val$wset_1__SEL_4,
       MUX_cache_master_xactor_shim_arff_rv$port0__write_1__SEL_1,
       MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1,
       MUX_cache_ram_word128_set$a_put_1__SEL_1,
       MUX_cache_ram_word128_set$b_put_1__SEL_2,
       MUX_cache_rg_error_during_refill$write_1__SEL_1,
       MUX_cache_rg_exc_code$write_1__SEL_2,
       MUX_cache_rg_exc_code$write_1__SEL_3,
       MUX_cache_rg_exc_code$write_1__SEL_4,
       MUX_cache_rg_exc_code$write_1__SEL_5,
       MUX_cache_rg_ld_val$write_1__SEL_2,
       MUX_cache_rg_lrsc_valid$write_1__SEL_2,
       MUX_cache_rg_lrsc_valid$write_1__VAL_2,
       MUX_cache_rg_state$write_1__SEL_12,
       MUX_cache_rg_state$write_1__SEL_13,
       MUX_cache_rg_state$write_1__SEL_2;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h5715;
  reg [31 : 0] v__h5816;
  reg [31 : 0] v__h6271;
  reg [31 : 0] v__h21668;
  reg [31 : 0] v__h26154;
  reg [31 : 0] v__h5289;
  reg [31 : 0] v__h35052;
  reg [31 : 0] v__h36596;
  reg [31 : 0] v__h36684;
  reg [31 : 0] v__h37372;
  reg [31 : 0] v__h37494;
  reg [31 : 0] v__h41035;
  reg [31 : 0] v__h41282;
  reg [31 : 0] v__h41243;
  reg [31 : 0] v__h35409;
  reg [31 : 0] v__h36371;
  reg [31 : 0] v__h36485;
  reg [31 : 0] v__h37795;
  reg [31 : 0] v__h37990;
  reg [31 : 0] v__h40727;
  reg [31 : 0] v__h38088;
  reg [31 : 0] v__h41673;
  reg [31 : 0] v__h32008;
  reg [31 : 0] v__h32959;
  reg [31 : 0] v__h33221;
  reg [31 : 0] v__h5283;
  reg [31 : 0] v__h5709;
  reg [31 : 0] v__h5810;
  reg [31 : 0] v__h6265;
  reg [31 : 0] v__h21662;
  reg [31 : 0] v__h26148;
  reg [31 : 0] v__h32002;
  reg [31 : 0] v__h32953;
  reg [31 : 0] v__h33215;
  reg [31 : 0] v__h35046;
  reg [31 : 0] v__h35403;
  reg [31 : 0] v__h36365;
  reg [31 : 0] v__h36479;
  reg [31 : 0] v__h36590;
  reg [31 : 0] v__h36678;
  reg [31 : 0] v__h37366;
  reg [31 : 0] v__h37488;
  reg [31 : 0] v__h37789;
  reg [31 : 0] v__h37984;
  reg [31 : 0] v__h38082;
  reg [31 : 0] v__h40721;
  reg [31 : 0] v__h41029;
  reg [31 : 0] v__h41237;
  reg [31 : 0] v__h41276;
  reg [31 : 0] v__h41667;
  // synopsys translate_on

  // remaining internal signals
  reg [127 : 0] CASE_cache_rg_addr_BITS_2_TO_0_0_result6173_4__ETC__q52,
		CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q48,
		CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q50,
		IF_cache_rg_addr_7_BITS_2_TO_0_93_EQ_0_82_THEN_ETC___d1029,
		IF_cache_rg_addr_7_BITS_2_TO_0_93_EQ_0_82_THEN_ETC___d1049,
		IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d1165,
		IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d1189,
		IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d1201,
		IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d379,
		IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d419,
		IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d439,
		IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d517,
		IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d525,
		IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d529,
		IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d624,
		IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d641,
		IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d650,
		IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d734,
		IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d751,
		IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d760,
		_theResult___fst__h28497,
		_theResult___fst__h40196,
		_theResult___fst__h7620,
		x__h20525,
		x__h22937,
		x__h25917,
		x__h27254,
		x__h27492,
		x__h35715,
		x__h38487;
  reg [63 : 0] _theResult_____2__h27201,
	       _theResult_____2__h38330,
	       mem_req_wr_data_wdata__h26579,
	       mem_req_wr_data_wdata__h31412,
	       mem_req_wr_data_wdata__h36920,
	       mem_req_wr_data_wdata__h38301;
  reg [7 : 0] mem_req_wr_data_wstrb__h31413, mem_req_wr_data_wstrb__h38302;
  reg [2 : 0] _theResult___snd_fst_val__h38249, size_val__h37631;
  wire [129 : 0] cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274,
		 y__h7672;
  wire [127 : 0] IF_cache_rg_op_1_EQ_0_2_OR_cache_rg_op_1_EQ_2__ETC___d461,
		 SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d288,
		 SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d293,
		 SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d298,
		 SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d303,
		 SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d308,
		 SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d313,
		 SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d318,
		 SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d323,
		 SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d327,
		 SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d332,
		 SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d337,
		 SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d342,
		 SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d347,
		 SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d352,
		 SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d357,
		 SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d362,
		 SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d382,
		 SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d386,
		 SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d390,
		 SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d394,
		 SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d398,
		 SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d402,
		 SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d406,
		 SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d410,
		 SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d422,
		 SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d426,
		 SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d430,
		 SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d434,
		 SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d442,
		 SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d446,
		 _theResult___fst__h35665,
		 result__h20468,
		 result__h20536,
		 result__h20574,
		 result__h20607,
		 result__h20640,
		 result__h20673,
		 result__h20706,
		 result__h20739,
		 result__h20772,
		 result__h20805,
		 result__h20838,
		 result__h20871,
		 result__h20904,
		 result__h20937,
		 result__h20970,
		 result__h21003,
		 result__h21036,
		 result__h21091,
		 result__h21124,
		 result__h21157,
		 result__h21190,
		 result__h21223,
		 result__h21256,
		 result__h21289,
		 result__h21322,
		 result__h21369,
		 result__h21402,
		 result__h21435,
		 result__h21468,
		 result__h35667,
		 result__h35726,
		 result__h35762,
		 result__h35795,
		 result__h35828,
		 result__h35861,
		 result__h35894,
		 result__h35927,
		 result__h35960,
		 result__h36023,
		 result__h36056,
		 result__h36089,
		 result__h36122,
		 result__h36173,
		 result__h36206,
		 result__h38568,
		 result__h39276,
		 result__h39308,
		 result__h39340,
		 result__h39372,
		 result__h39404,
		 result__h39436,
		 result__h39468,
		 result__h39500,
		 result__h39532,
		 result__h39564,
		 result__h39596,
		 result__h39628,
		 result__h39660,
		 result__h39692,
		 result__h39724,
		 result__h39778,
		 result__h39810,
		 result__h39842,
		 result__h39874,
		 result__h39906,
		 result__h39938,
		 result__h39970,
		 result__h40002,
		 result__h40048,
		 result__h40080,
		 result__h40112,
		 result__h40144,
		 result__h40198,
		 result__h40227,
		 result__h7622,
		 word128__h35560,
		 x__h33468;
  wire [96 : 0] cache_master_xactor_shim_arff_rvport1__read_B_ETC__q51,
		cache_master_xactor_shim_awff_rvport1__read_B_ETC__q84;
  wire [73 : 0] cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q85;
  wire [63 : 0] IF_cache_rg_op_1_EQ_1_9_OR_cache_rg_op_1_EQ_2__ETC___d799,
		IF_cache_rg_width_code_98_EQ_2_03_THEN_SEXT_IF_ETC___d1216,
		IF_cache_rg_width_code_98_EQ_2_03_THEN_SEXT_IF_ETC___d539,
		IF_cache_rg_width_code_98_EQ_2_03_THEN_SEXT_ca_ETC___d668,
		cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q37,
		cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q38,
		cline_fabric_addr__h32061,
		mem_req_wr_addr_awaddr__h31282,
		mem_req_wr_addr_awaddr__h38171,
		new_st_val__h27347,
		new_st_val__h27440,
		new_st_val__h28588,
		new_st_val__h28592,
		new_st_val__h28596,
		new_st_val__h28600,
		new_st_val__h28605,
		new_st_val__h28611,
		new_st_val__h28616,
		new_st_val__h38342,
		new_st_val__h38435,
		new_st_val__h40289,
		new_st_val__h40293,
		new_st_val__h40297,
		new_st_val__h40301,
		new_st_val__h40306,
		new_st_val__h40312,
		new_st_val__h40317,
		w1___1__h27406,
		w1___1__h38401,
		w1__h27193,
		w1__h38322,
		w2__h27195,
		word64__h26449,
		word64__h31341,
		word64__h36849,
		word64__h38175,
		word64__h38230,
		x5715_BITS_127_TO_64__q71,
		x5715_BITS_63_TO_0__q56,
		x__h27345;
  wire [31 : 0] IF_cache_rg_addr_BITS_4_TO_0_EQ_0_THEN_1_ELSE_0__q2,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q12,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q5,
		cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q32,
		cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q34,
		cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q35,
		cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q36,
		cache_rg_st_amo_val_BITS_31_TO_0__q49,
		cline_addr__h32060,
		x5715_BITS_127_TO_96__q78,
		x5715_BITS_31_TO_0__q55,
		x5715_BITS_63_TO_32__q63,
		x5715_BITS_95_TO_64__q70,
		x7492_BITS_31_TO_0__q47,
		x8487_BITS_31_TO_0__q83;
  wire [21 : 0] pa_ctag__h7188;
  wire [15 : 0] cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q11,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q15,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q4,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q9,
		cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q17,
		cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q19,
		cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q21,
		cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q23,
		cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q25,
		cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q28,
		cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q29,
		cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q31,
		x5715_BITS_111_TO_96__q77,
		x5715_BITS_127_TO_112__q81,
		x5715_BITS_15_TO_0__q54,
		x5715_BITS_31_TO_16__q59,
		x5715_BITS_47_TO_32__q62,
		x5715_BITS_63_TO_48__q66,
		x5715_BITS_79_TO_64__q69,
		x5715_BITS_95_TO_80__q74;
  wire [7 : 0] cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q10,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q13,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q14,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q16,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q3,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q6,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q7,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q8,
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q18,
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q20,
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q22,
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q24,
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q26,
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q27,
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q30,
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q33,
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q39,
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q40,
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q41,
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q42,
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q43,
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q44,
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q45,
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q46,
	       strobe128__h31342,
	       strobe128__h31346,
	       strobe128__h31350,
	       strobe128__h31354,
	       strobe128__h38231,
	       strobe128__h38235,
	       strobe128__h38239,
	       strobe128__h38243,
	       x5715_BITS_103_TO_96__q76,
	       x5715_BITS_111_TO_104__q79,
	       x5715_BITS_119_TO_112__q80,
	       x5715_BITS_127_TO_120__q82,
	       x5715_BITS_15_TO_8__q57,
	       x5715_BITS_23_TO_16__q58,
	       x5715_BITS_31_TO_24__q60,
	       x5715_BITS_39_TO_32__q61,
	       x5715_BITS_47_TO_40__q64,
	       x5715_BITS_55_TO_48__q65,
	       x5715_BITS_63_TO_56__q67,
	       x5715_BITS_71_TO_64__q68,
	       x5715_BITS_79_TO_72__q72,
	       x5715_BITS_7_TO_0__q53,
	       x5715_BITS_87_TO_80__q73,
	       x5715_BITS_95_TO_88__q75;
  wire [5 : 0] access_exc_code__h5040, shift_bits__h31289, shift_bits__h38178;
  wire [3 : 0] IF_cache_rg_op_1_EQ_0_2_OR_cache_rg_op_1_EQ_2__ETC___d170,
	       IF_cache_rg_op_1_EQ_1_9_OR_cache_rg_op_1_EQ_2__ETC___d169,
	       cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d111,
	       x__h27234;
  wire [1 : 0] IF_cache_rg_op_1_EQ_1_9_OR_cache_rg_op_1_EQ_2__ETC___d809,
	       _0__q1,
	       cache_ram_word128_set_b_read__58_BITS_129_TO_1_ETC___d559,
	       x__h22809,
	       x__h27149,
	       x__h33463,
	       y__h27217;
  wire IF_cache_rg_op_1_EQ_1_9_OR_cache_rg_op_1_EQ_2__ETC___d134,
       IF_cache_rg_width_code_98_EQ_3_07_THEN_IF_cach_ETC___d282,
       NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55,
       NOT_cache_cfg_verbosity_read__3_ULE_2_00___d901,
       NOT_cache_f_reset_reqs_notEmpty__4_38_AND_cach_ETC___d149,
       NOT_cache_f_reset_reqs_notEmpty__4_38_AND_cach_ETC___d962,
       NOT_cache_master_xactor_clearing_read__0_8_AND_ETC___d122,
       NOT_cache_ram_state_and_ctag_cset_b_read__24_B_ETC___d177,
       NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d164,
       NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d784,
       NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d833,
       NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d843,
       NOT_cache_rg_op_1_EQ_1_9_83_AND_NOT_cache_rg_o_ETC___d186,
       NOT_cache_rg_op_1_EQ_1_9_83_AND_NOT_cache_rg_o_ETC___d544,
       NOT_cache_rg_op_1_EQ_1_9_83_AND_NOT_cache_rg_o_ETC___d777,
       NOT_cache_rg_op_1_EQ_1_9_83_AND_NOT_cache_rg_o_ETC___d853,
       NOT_cache_rg_op_1_EQ_1_9_83_AND_NOT_cache_rg_o_ETC___d857,
       NOT_cache_rg_op_1_EQ_1_9_83_AND_NOT_cache_rg_o_ETC___d863,
       NOT_cache_rg_op_1_EQ_2_3_42_OR_NOT_cache_rg_am_ETC___d542,
       NOT_cache_rg_op_1_EQ_2_3_42_OR_NOT_cache_rg_am_ETC___d775,
       NOT_cache_rg_op_1_EQ_2_3_42_OR_NOT_cache_rg_am_ETC___d831,
       NOT_cache_rg_op_1_EQ_2_3_42_OR_NOT_cache_rg_am_ETC___d836,
       NOT_cache_rg_op_1_EQ_2_3_42_OR_NOT_cache_rg_am_ETC___d841,
       NOT_req_width_code_EQ_0b0_307_308_AND_NOT_req__ETC___d1327,
       cache_crg_commit_port1__read__5_AND_cache_soc__ETC___d485,
       cache_crg_commit_port1__read__5_AND_cache_soc__ETC___d821,
       cache_f_reset_reqs_i_notEmpty__3_AND_cache_f_r_ETC___d66,
       cache_ram_state_and_ctag_cset_b_read__24_BITS__ETC___d130,
       cache_ram_state_and_ctag_cset_b_read__24_BIT_2_ETC___d178,
       cache_rg_addr_7_EQ_cache_rg_lrsc_pa_05___d175,
       cache_rg_amo_funct7_4_BITS_6_TO_2_5_EQ_0b10_6__ETC___d492,
       cache_rg_lrsc_pa_05_EQ_cache_rg_addr_7___d106,
       cache_rg_op_1_EQ_0_2_OR_cache_rg_op_1_EQ_2_3_A_ETC___d159,
       cache_rg_op_1_EQ_0_2_OR_cache_rg_op_1_EQ_2_3_A_ETC___d167,
       cache_rg_op_1_EQ_0_2_OR_cache_rg_op_1_EQ_2_3_A_ETC___d189,
       cache_rg_op_1_EQ_0_2_OR_cache_rg_op_1_EQ_2_3_A_ETC___d195,
       cache_rg_op_1_EQ_0_2_OR_cache_rg_op_1_EQ_2_3_A_ETC___d284,
       cache_rg_op_1_EQ_0_2_OR_cache_rg_op_1_EQ_2_3_A_ETC___d471,
       cache_rg_op_1_EQ_0_2_OR_cache_rg_op_1_EQ_2_3_A_ETC___d487,
       cache_rg_op_1_EQ_1_9_OR_cache_rg_op_1_EQ_2_3_A_ETC___d187,
       cache_rg_op_1_EQ_1_9_OR_cache_rg_op_1_EQ_2_3_A_ETC___d545,
       cache_rg_op_1_EQ_1_9_OR_cache_rg_op_1_EQ_2_3_A_ETC___d778,
       cache_rg_op_1_EQ_1_9_OR_cache_rg_op_1_EQ_2_3_A_ETC___d782,
       cache_rg_op_1_EQ_2_3_AND_cache_rg_amo_funct7_4_ETC___d848,
       cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d499,
       cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d547,
       cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d859,
       cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d868,
       lrsc_result__h22058,
       req_width_code_EQ_0b0_307_OR_req_width_code_EQ_ETC___d1343,
       req_width_code_EQ_0b0_307_OR_req_width_code_EQ_ETC___d1348;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = cache_f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = cache_f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get =
	     !cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get =
	     !cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // action method req
  assign CAN_FIRE_req = 1'd1 ;
  assign WILL_FIRE_req = EN_req ;

  // action method commit
  assign CAN_FIRE_commit = 1'd1 ;
  assign WILL_FIRE_commit = EN_commit ;

  // value method valid
  assign valid = cache_dw_valid$whas ;

  // value method addr
  assign addr = cache_rg_addr ;

  // value method word128_fst
  assign word128_fst = cache_dw_output_ld_val$wget[128] ;

  // value method word128_snd
  assign word128_snd = cache_dw_output_ld_val$wget[127:0] ;

  // value method st_amo_val_fst
  assign st_amo_val_fst = cache_dw_output_st_amo_val$wget[128] ;

  // value method st_amo_val_snd
  assign st_amo_val_snd = cache_dw_output_st_amo_val$wget[127:0] ;

  // value method exc
  assign exc = CAN_FIRE_RL_cache_rl_drive_exception_rsp ;

  // value method exc_code
  assign exc_code = cache_rg_exc_code ;

  // action method server_flush_request_put
  assign RDY_server_flush_request_put = !EN_req && cache_f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_flush_request_put =
	     !EN_req && cache_f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_flush_request_put = EN_server_flush_request_put ;

  // action method server_flush_response_get
  assign RDY_server_flush_response_get =
	     cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_flush_response_get =
	     cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_flush_response_get = EN_server_flush_response_get ;

  // action method tlb_flush
  assign RDY_tlb_flush = !EN_req ;
  assign CAN_FIRE_tlb_flush = !EN_req ;
  assign WILL_FIRE_tlb_flush = EN_tlb_flush ;

  // value method mem_master_aw_awid
  assign mem_master_awid =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q84[96:93] ;

  // value method mem_master_aw_awaddr
  assign mem_master_awaddr =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q84[92:29] ;

  // value method mem_master_aw_awlen
  assign mem_master_awlen =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q84[28:21] ;

  // value method mem_master_aw_awsize
  assign mem_master_awsize =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q84[20:18] ;

  // value method mem_master_aw_awburst
  assign mem_master_awburst =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q84[17:16] ;

  // value method mem_master_aw_awlock
  assign mem_master_awlock =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q84[15] ;

  // value method mem_master_aw_awcache
  assign mem_master_awcache =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q84[14:11] ;

  // value method mem_master_aw_awprot
  assign mem_master_awprot =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q84[10:8] ;

  // value method mem_master_aw_awqos
  assign mem_master_awqos =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q84[7:4] ;

  // value method mem_master_aw_awregion
  assign mem_master_awregion =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q84[3:0] ;

  // value method mem_master_aw_awvalid
  assign mem_master_awvalid =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek ;

  // action method mem_master_aw_awready
  assign CAN_FIRE_mem_master_aw_awready = 1'd1 ;
  assign WILL_FIRE_mem_master_aw_awready = 1'd1 ;

  // value method mem_master_w_wdata
  assign mem_master_wdata =
	     cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q85[73:10] ;

  // value method mem_master_w_wstrb
  assign mem_master_wstrb =
	     cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q85[9:2] ;

  // value method mem_master_w_wlast
  assign mem_master_wlast =
	     cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q85[1] ;

  // value method mem_master_w_wuser
  assign mem_master_wuser =
	     cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q85[0] ;

  // value method mem_master_w_wvalid
  assign mem_master_wvalid =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek ;

  // action method mem_master_w_wready
  assign CAN_FIRE_mem_master_w_wready = 1'd1 ;
  assign WILL_FIRE_mem_master_w_wready = 1'd1 ;

  // action method mem_master_b_bflit
  assign CAN_FIRE_mem_master_b_bflit = 1'd1 ;
  assign WILL_FIRE_mem_master_b_bflit = mem_master_bvalid ;

  // value method mem_master_b_bready
  assign mem_master_bready = !cache_master_xactor_shim_bff_rv[6] ;

  // value method mem_master_ar_arid
  assign mem_master_arid =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q51[96:93] ;

  // value method mem_master_ar_araddr
  assign mem_master_araddr =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q51[92:29] ;

  // value method mem_master_ar_arlen
  assign mem_master_arlen =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q51[28:21] ;

  // value method mem_master_ar_arsize
  assign mem_master_arsize =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q51[20:18] ;

  // value method mem_master_ar_arburst
  assign mem_master_arburst =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q51[17:16] ;

  // value method mem_master_ar_arlock
  assign mem_master_arlock =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q51[15] ;

  // value method mem_master_ar_arcache
  assign mem_master_arcache =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q51[14:11] ;

  // value method mem_master_ar_arprot
  assign mem_master_arprot =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q51[10:8] ;

  // value method mem_master_ar_arqos
  assign mem_master_arqos =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q51[7:4] ;

  // value method mem_master_ar_arregion
  assign mem_master_arregion =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q51[3:0] ;

  // value method mem_master_ar_arvalid
  assign mem_master_arvalid =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek ;

  // action method mem_master_ar_arready
  assign CAN_FIRE_mem_master_ar_arready = 1'd1 ;
  assign WILL_FIRE_mem_master_ar_arready = 1'd1 ;

  // action method mem_master_r_rflit
  assign CAN_FIRE_mem_master_r_rflit = 1'd1 ;
  assign WILL_FIRE_mem_master_r_rflit = mem_master_rvalid ;

  // value method mem_master_r_rready
  assign mem_master_rready = !cache_master_xactor_shim_rff_rv[72] ;

  // submodule cache_f_reset_reqs
  FIFO2 #(.width(32'd1), .guarded(32'd1)) cache_f_reset_reqs(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(cache_f_reset_reqs$D_IN),
							     .ENQ(cache_f_reset_reqs$ENQ),
							     .DEQ(cache_f_reset_reqs$DEQ),
							     .CLR(cache_f_reset_reqs$CLR),
							     .D_OUT(cache_f_reset_reqs$D_OUT),
							     .FULL_N(cache_f_reset_reqs$FULL_N),
							     .EMPTY_N(cache_f_reset_reqs$EMPTY_N));

  // submodule cache_f_reset_rsps
  FIFO2 #(.width(32'd1), .guarded(32'd1)) cache_f_reset_rsps(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(cache_f_reset_rsps$D_IN),
							     .ENQ(cache_f_reset_rsps$ENQ),
							     .DEQ(cache_f_reset_rsps$DEQ),
							     .CLR(cache_f_reset_rsps$CLR),
							     .D_OUT(cache_f_reset_rsps$D_OUT),
							     .FULL_N(cache_f_reset_rsps$FULL_N),
							     .EMPTY_N(cache_f_reset_rsps$EMPTY_N));

  // submodule cache_ram_state_and_ctag_cset
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd23),
	  .MEMSIZE(7'd64)) cache_ram_state_and_ctag_cset(.CLKA(CLK),
							 .CLKB(CLK),
							 .ADDRA(cache_ram_state_and_ctag_cset$ADDRA),
							 .ADDRB(cache_ram_state_and_ctag_cset$ADDRB),
							 .DIA(cache_ram_state_and_ctag_cset$DIA),
							 .DIB(cache_ram_state_and_ctag_cset$DIB),
							 .WEA(cache_ram_state_and_ctag_cset$WEA),
							 .WEB(cache_ram_state_and_ctag_cset$WEB),
							 .ENA(cache_ram_state_and_ctag_cset$ENA),
							 .ENB(cache_ram_state_and_ctag_cset$ENB),
							 .DOA(),
							 .DOB(cache_ram_state_and_ctag_cset$DOB));

  // submodule cache_ram_word128_set
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd8),
	  .DATA_WIDTH(32'd130),
	  .MEMSIZE(9'd256)) cache_ram_word128_set(.CLKA(CLK),
						  .CLKB(CLK),
						  .ADDRA(cache_ram_word128_set$ADDRA),
						  .ADDRB(cache_ram_word128_set$ADDRB),
						  .DIA(cache_ram_word128_set$DIA),
						  .DIB(cache_ram_word128_set$DIB),
						  .WEA(cache_ram_word128_set$WEA),
						  .WEB(cache_ram_word128_set$WEB),
						  .ENA(cache_ram_word128_set$ENA),
						  .ENB(cache_ram_word128_set$ENB),
						  .DOA(),
						  .DOB(cache_ram_word128_set$DOB));

  // submodule cache_soc_map
  mkSoC_Map cache_soc_map(.CLK(CLK),
			  .RST_N(RST_N),
			  .m_is_IO_addr_addr(cache_soc_map$m_is_IO_addr_addr),
			  .m_is_mem_addr_addr(cache_soc_map$m_is_mem_addr_addr),
			  .m_is_near_mem_IO_addr_addr(cache_soc_map$m_is_near_mem_IO_addr_addr),
			  .m_plic_addr_range(),
			  .m_near_mem_io_addr_range(),
			  .m_ethernet_0_addr_range(),
			  .m_dma_0_addr_range(),
			  .m_uart16550_0_addr_range(),
			  .m_uart16550_1_addr_range(),
			  .m_iic_0_addr_range(),
			  .m_axi_quad_spi_0_full_addr_range(),
			  .m_axi_quad_spi_0_lite_addr_range(),
			  .m_axi_quad_spi_1_addr_range(),
			  .m_gpio_0_addr_range(),
			  .m_gpio_1_addr_range(),
			  .m_boot_rom_addr_range(),
			  .m_ddr4_0_uncached_addr_range(),
			  .m_ddr4_0_cached_addr_range(),
			  .m_is_mem_addr(cache_soc_map$m_is_mem_addr),
			  .m_is_IO_addr(),
			  .m_is_near_mem_IO_addr(),
			  .m_pc_reset_value(),
			  .m_pcc_reset_value(),
			  .m_ddc_reset_value(),
			  .m_mtcc_reset_value(),
			  .m_mepcc_reset_value(),
			  .m_mtvec_reset_value(),
			  .m_nmivec_reset_value());

  // rule RL_cache_rl_reset
  assign CAN_FIRE_RL_cache_rl_reset =
	     cache_f_reset_reqs_i_notEmpty__3_AND_cache_f_r_ETC___d66 &&
	     cache_rg_state == 4'd1 ;
  assign WILL_FIRE_RL_cache_rl_reset = CAN_FIRE_RL_cache_rl_reset ;

  // rule RL_cache_rl_shift_sb_to_load_delay
  assign CAN_FIRE_RL_cache_rl_shift_sb_to_load_delay = 1'd1 ;
  assign WILL_FIRE_RL_cache_rl_shift_sb_to_load_delay = 1'd1 ;

  // rule RL_cache_rl_probe_and_immed_rsp
  assign CAN_FIRE_RL_cache_rl_probe_and_immed_rsp =
	     (!cache_crg_commit$port1__read || !cache_soc_map$m_is_mem_addr ||
	      cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010 ||
	      IF_cache_rg_op_1_EQ_1_9_OR_cache_rg_op_1_EQ_2__ETC___d134) &&
	     NOT_cache_f_reset_reqs_notEmpty__4_38_AND_cach_ETC___d149 ;
  assign WILL_FIRE_RL_cache_rl_probe_and_immed_rsp =
	     CAN_FIRE_RL_cache_rl_probe_and_immed_rsp ;

  // rule RL_cache_rl_ST_AMO_response
  assign CAN_FIRE_RL_cache_rl_ST_AMO_response = cache_rg_state == 4'd11 ;
  assign WILL_FIRE_RL_cache_rl_ST_AMO_response =
	     CAN_FIRE_RL_cache_rl_ST_AMO_response ;

  // rule RL_cache_rl_start_reset
  assign CAN_FIRE_RL_cache_rl_start_reset =
	     cache_f_reset_reqs$EMPTY_N && cache_rg_state != 4'd1 ;
  assign WILL_FIRE_RL_cache_rl_start_reset =
	     CAN_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_io_read_req
  assign CAN_FIRE_RL_cache_rl_io_read_req =
	     !cache_master_xactor_clearing &&
	     !cache_master_xactor_shim_arff_rv[97] &&
	     NOT_cache_f_reset_reqs_notEmpty__4_38_AND_cach_ETC___d962 &&
	     cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d111 ==
	     4'd0 ;
  assign WILL_FIRE_RL_cache_rl_io_read_req =
	     CAN_FIRE_RL_cache_rl_io_read_req ;

  // rule RL_cache_rl_maintain_io_read_rsp
  assign CAN_FIRE_RL_cache_rl_maintain_io_read_rsp =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_state == 4'd14 ;
  assign WILL_FIRE_RL_cache_rl_maintain_io_read_rsp =
	     CAN_FIRE_RL_cache_rl_maintain_io_read_rsp ;

  // rule RL_cache_rl_io_write_req
  assign CAN_FIRE_RL_cache_rl_io_write_req =
	     NOT_cache_master_xactor_clearing_read__0_8_AND_ETC___d122 &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 4'd12 &&
	     cache_rg_op == 2'd1 ;
  assign WILL_FIRE_RL_cache_rl_io_write_req =
	     CAN_FIRE_RL_cache_rl_io_write_req ;

  // rule RL_cache_rl_io_AMO_SC_req
  assign CAN_FIRE_RL_cache_rl_io_AMO_SC_req =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_state == 4'd12 &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00011 ;
  assign WILL_FIRE_RL_cache_rl_io_AMO_SC_req =
	     CAN_FIRE_RL_cache_rl_io_AMO_SC_req ;

  // rule RL_cache_rl_io_AMO_op_req
  assign CAN_FIRE_RL_cache_rl_io_AMO_op_req =
	     !cache_master_xactor_clearing &&
	     !cache_master_xactor_shim_arff_rv[97] &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 4'd12 &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] != 5'b00010 &&
	     cache_rg_amo_funct7[6:2] != 5'b00011 ;
  assign WILL_FIRE_RL_cache_rl_io_AMO_op_req =
	     CAN_FIRE_RL_cache_rl_io_AMO_op_req ;

  // rule RL_cache_rl_drive_exception_rsp
  assign CAN_FIRE_RL_cache_rl_drive_exception_rsp =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_state == 4'd4 ;
  assign WILL_FIRE_RL_cache_rl_drive_exception_rsp =
	     CAN_FIRE_RL_cache_rl_drive_exception_rsp ;

  // rule RL_cache_master_xactor_ug_master_u_b_warnDoPut
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut =
	     cache_master_xactor_ug_master_u_b_putWire$whas &&
	     cache_master_xactor_shim_bff_rv[6] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut ;

  // rule RL_cache_master_xactor_ug_master_u_b_doPut
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut =
	     !cache_master_xactor_shim_bff_rv[6] &&
	     cache_master_xactor_ug_master_u_b_putWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut ;

  // rule RL_cache_rl_discard_write_rsp
  assign CAN_FIRE_RL_cache_rl_discard_write_rsp =
	     !cache_master_xactor_clearing &&
	     cache_master_xactor_shim_bff_rv$port1__read[6] ;
  assign WILL_FIRE_RL_cache_rl_discard_write_rsp =
	     CAN_FIRE_RL_cache_rl_discard_write_rsp ;

  // rule RL_cache_master_xactor_ug_master_u_r_warnDoPut
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut =
	     cache_master_xactor_ug_master_u_r_putWire$whas &&
	     cache_master_xactor_shim_rff_rv[72] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut ;

  // rule RL_cache_master_xactor_ug_master_u_r_doPut
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut =
	     !cache_master_xactor_shim_rff_rv[72] &&
	     cache_master_xactor_ug_master_u_r_putWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut ;

  // rule RL_cache_rl_io_read_rsp
  assign CAN_FIRE_RL_cache_rl_io_read_rsp =
	     !cache_master_xactor_clearing &&
	     cache_master_xactor_shim_rff_rv$port1__read[72] &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 4'd13 ;
  assign WILL_FIRE_RL_cache_rl_io_read_rsp =
	     CAN_FIRE_RL_cache_rl_io_read_rsp ;

  // rule RL_cache_rl_io_AMO_read_rsp
  assign CAN_FIRE_RL_cache_rl_io_AMO_read_rsp =
	     !cache_master_xactor_clearing &&
	     cache_master_xactor_shim_rff_rv$port1__read[72] &&
	     (cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 ||
	      cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d111 !=
	      4'd15 &&
	      !cache_master_xactor_shim_awff_rv[97] &&
	      !cache_master_xactor_shim_wff_rv[74]) &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 4'd15 ;
  assign WILL_FIRE_RL_cache_rl_io_AMO_read_rsp =
	     CAN_FIRE_RL_cache_rl_io_AMO_read_rsp ;

  // rule RL_cache_rl_start_cache_refill
  assign CAN_FIRE_RL_cache_rl_start_cache_refill =
	     !cache_master_xactor_clearing &&
	     !cache_master_xactor_shim_arff_rv[97] &&
	     !EN_req &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 4'd8 &&
	     cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d111 ==
	     4'd0 ;
  assign WILL_FIRE_RL_cache_rl_start_cache_refill =
	     CAN_FIRE_RL_cache_rl_start_cache_refill && !EN_req ;

  // rule RL_cache_rl_cache_refill_rsps_loop
  assign CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop =
	     !cache_master_xactor_clearing &&
	     cache_master_xactor_shim_rff_rv$port1__read[72] &&
	     !EN_req &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 4'd9 ;
  assign WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop =
	     CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop && !EN_req ;

  // rule RL_cache_rl_rereq
  assign CAN_FIRE_RL_cache_rl_rereq =
	     !EN_req && !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 4'd10 ;
  assign WILL_FIRE_RL_cache_rl_rereq = CAN_FIRE_RL_cache_rl_rereq && !EN_req ;

  // rule RL_cache_master_xactor_ug_master_u_aw_setPeek
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek =
	     cache_master_xactor_shim_awff_rv$port1__read[97] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek ;

  // rule RL_cache_master_xactor_ug_master_u_aw_warnDoDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop =
	     cache_master_xactor_ug_master_u_aw_dropWire$whas &&
	     !cache_master_xactor_shim_awff_rv$port1__read[97] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop ;

  // rule RL_cache_master_xactor_ug_master_u_aw_doDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop =
	     cache_master_xactor_shim_awff_rv$port1__read[97] &&
	     cache_master_xactor_ug_master_u_aw_dropWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop ;

  // rule RL_cache_master_xactor_ug_master_u_w_setPeek
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek =
	     cache_master_xactor_shim_wff_rv$port1__read[74] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek ;

  // rule RL_cache_master_xactor_ug_master_u_w_warnDoDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop =
	     cache_master_xactor_ug_master_u_w_dropWire$whas &&
	     !cache_master_xactor_shim_wff_rv$port1__read[74] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop ;

  // rule RL_cache_master_xactor_ug_master_u_w_doDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop =
	     cache_master_xactor_shim_wff_rv$port1__read[74] &&
	     cache_master_xactor_ug_master_u_w_dropWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop ;

  // rule RL_cache_master_xactor_ug_master_u_ar_setPeek
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek =
	     cache_master_xactor_shim_arff_rv$port1__read[97] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek ;

  // rule RL_cache_master_xactor_ug_master_u_ar_warnDoDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop =
	     cache_master_xactor_ug_master_u_ar_dropWire$whas &&
	     !cache_master_xactor_shim_arff_rv$port1__read[97] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop ;

  // rule RL_cache_master_xactor_ug_master_u_ar_doDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop =
	     cache_master_xactor_shim_arff_rv$port1__read[97] &&
	     cache_master_xactor_ug_master_u_ar_dropWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop ;

  // rule RL_cache_master_xactor_do_clear
  assign CAN_FIRE_RL_cache_master_xactor_do_clear =
	     cache_master_xactor_clearing ;
  assign WILL_FIRE_RL_cache_master_xactor_do_clear =
	     cache_master_xactor_clearing ;

  // inputs to muxes for submodule ports
  assign MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 ;
  assign MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_crg_commit$port1__read &&
	     cache_soc_map$m_is_mem_addr &&
	     NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d784 ;
  assign MUX_cache_dw_output_ld_val$wset_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 ;
  assign MUX_cache_dw_output_ld_val$wset_1__SEL_3 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_crg_commit$port1__read &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op_1_EQ_0_2_OR_cache_rg_op_1_EQ_2_3_A_ETC___d195 ;
  assign MUX_cache_dw_output_ld_val$wset_1__SEL_4 =
	     WILL_FIRE_RL_cache_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_ST_AMO_response ;
  assign MUX_cache_master_xactor_shim_arff_rv$port0__write_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_io_AMO_op_req ||
	     WILL_FIRE_RL_cache_rl_io_read_req ;
  assign MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 =
	     EN_req &&
	     (req_width_code_EQ_0b0_307_OR_req_width_code_EQ_ETC___d1343 ||
	      req_width_code == 3'b100 && req_addr[3:0] == 4'b0) ;
  assign MUX_cache_ram_word128_set$a_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_crg_commit$port1__read &&
	     cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d547 ;
  assign MUX_cache_ram_word128_set$b_put_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_rg_word128_set_in_cache[1:0] != 2'd3 ;
  assign MUX_cache_rg_error_during_refill$write_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 ;
  assign MUX_cache_rg_exc_code$write_1__SEL_2 =
	     EN_req &&
	     NOT_req_width_code_EQ_0b0_307_308_AND_NOT_req__ETC___d1327 &&
	     (req_width_code != 3'b100 || req_addr[3:0] != 4'b0) ;
  assign MUX_cache_rg_exc_code$write_1__SEL_3 =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 ;
  assign MUX_cache_rg_exc_code$write_1__SEL_4 =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 ;
  assign MUX_cache_rg_exc_code$write_1__SEL_5 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     !cache_crg_commit$port1__read ;
  assign MUX_cache_rg_ld_val$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_crg_commit$port1__read &&
	     cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d499 ;
  assign MUX_cache_rg_lrsc_valid$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_crg_commit$port1__read &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op_1_EQ_0_2_OR_cache_rg_op_1_EQ_2_3_A_ETC___d189 ;
  assign MUX_cache_rg_state$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_rg_word128_set_in_cache[1:0] == 2'd3 ;
  assign MUX_cache_rg_state$write_1__SEL_12 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_rg_op_1_EQ_0_2_OR_cache_rg_op_1_EQ_2_3_A_ETC___d167 ;
  assign MUX_cache_rg_state$write_1__SEL_13 =
	     WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 ;
  assign MUX_cache_ctr_wr_rsps_pending_inrg$write_1__VAL_1 =
	     cache_ctr_wr_rsps_pending_inrg + 4'd1 ;
  assign MUX_cache_ctr_wr_rsps_pending_outrg$write_1__VAL_1 =
	     cache_ctr_wr_rsps_pending_outrg + 4'd1 ;
  assign MUX_cache_dw_output_ld_val$wset_1__VAL_1 = { 1'd0, x__h35715 } ;
  assign MUX_cache_dw_output_ld_val$wset_1__VAL_2 =
	     { 65'd0,
	       IF_cache_rg_width_code_98_EQ_2_03_THEN_SEXT_IF_ETC___d1216 } ;
  assign MUX_cache_dw_output_ld_val$wset_1__VAL_3 =
	     { cache_rg_op_1_EQ_0_2_OR_cache_rg_op_1_EQ_2_3_A_ETC___d284,
	       IF_cache_rg_op_1_EQ_0_2_OR_cache_rg_op_1_EQ_2__ETC___d461 } ;
  assign MUX_cache_dw_output_st_amo_val$wset_1__VAL_1 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) ?
	       { _0__q1[IF_cache_rg_addr_BITS_4_TO_0_EQ_0_THEN_1_ELSE_0__q2[0]],
		 128'd0 } :
	       129'd0 ;
  assign MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_1 =
	     { 5'd16,
	       mem_req_wr_addr_awaddr__h38171,
	       8'd0,
	       size_val__h37631,
	       18'd65536 } ;
  assign MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_2 =
	     { 5'd16, cline_fabric_addr__h32061, 29'd15532032 } ;
  assign MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_1 =
	     { 5'd16,
	       mem_req_wr_addr_awaddr__h38171,
	       8'd0,
	       _theResult___snd_fst_val__h38249,
	       18'd65536 } ;
  assign MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_2 =
	     { 5'd16,
	       mem_req_wr_addr_awaddr__h31282,
	       8'd0,
	       _theResult___snd_fst_val__h38249,
	       18'd65536 } ;
  assign MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_1 =
	     { 1'd1,
	       mem_req_wr_data_wdata__h38301,
	       mem_req_wr_data_wstrb__h38302,
	       2'd2 } ;
  assign MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_2 =
	     { 1'd1,
	       IF_cache_rg_op_1_EQ_1_9_OR_cache_rg_op_1_EQ_2__ETC___d799,
	       mem_req_wr_data_wstrb__h31413,
	       IF_cache_rg_op_1_EQ_1_9_OR_cache_rg_op_1_EQ_2__ETC___d809 } ;
  assign MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_3 =
	     { 1'd1,
	       mem_req_wr_data_wdata__h36920,
	       mem_req_wr_data_wstrb__h38302,
	       1'd1,
	       cache_rg_width_code == 3'd3 && cache_rg_st_amo_val[128] } ;
  assign MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1 =
	     { 3'd4, cache_rg_pa[31:12] } ;
  assign MUX_cache_ram_word128_set$a_put_3__VAL_1 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       { x__h22809, x__h22937 } :
	       { cache_ram_word128_set_b_read__58_BITS_129_TO_1_ETC___d559,
		 x__h27254 } ;
  assign MUX_cache_ram_word128_set$a_put_3__VAL_2 = { x__h33463, x__h33468 } ;
  assign MUX_cache_ram_word128_set$b_put_2__VAL_2 =
	     cache_rg_word128_set_in_cache + 8'd1 ;
  assign MUX_cache_ram_word128_set$b_put_2__VAL_4 =
	     { cache_rg_addr[11:6], 2'd0 } ;
  assign MUX_cache_rg_cset_in_cache$write_1__VAL_1 =
	     cache_rg_cset_in_cache + 6'd1 ;
  assign MUX_cache_rg_exc_code$write_1__VAL_1 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) ?
	       6'd5 :
	       6'd7 ;
  assign MUX_cache_rg_exc_code$write_1__VAL_2 =
	     (req_op == 2'd0) ? 6'd4 : 6'd6 ;
  assign MUX_cache_rg_ld_val$write_1__VAL_2 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       { 128'd0, lrsc_result__h22058 } :
	       { 65'd0,
		 IF_cache_rg_width_code_98_EQ_2_03_THEN_SEXT_IF_ETC___d539 } ;
  assign MUX_cache_rg_lrsc_valid$write_1__VAL_2 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__24_BITS__ETC___d130 ;
  assign MUX_cache_rg_st_amo_val$write_1__VAL_2 = { 65'd0, x__h27345 } ;
  assign MUX_cache_rg_state$write_1__VAL_2 =
	     (cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 ||
	      cache_rg_error_during_refill) ?
	       4'd4 :
	       4'd10 ;
  assign MUX_cache_rg_state$write_1__VAL_4 =
	     (NOT_req_width_code_EQ_0b0_307_308_AND_NOT_req__ETC___d1327 &&
	      (req_width_code != 3'b100 || req_addr[3:0] != 4'b0)) ?
	       4'd4 :
	       4'd3 ;
  assign MUX_cache_rg_state$write_1__VAL_5 =
	     (cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0) ?
	       4'd14 :
	       4'd4 ;
  assign MUX_cache_rg_state$write_1__VAL_12 =
	     cache_crg_commit$port1__read ?
	       (cache_soc_map$m_is_mem_addr ?
		  IF_cache_rg_op_1_EQ_0_2_OR_cache_rg_op_1_EQ_2__ETC___d170 :
		  4'd12) :
	       4'd4 ;

  // inlined wires
  assign cache_master_xactor_ug_master_u_b_putWire$wget =
	     { mem_master_bid, mem_master_bresp } ;
  assign cache_master_xactor_ug_master_u_b_putWire$whas =
	     mem_master_bvalid && !cache_master_xactor_shim_bff_rv[6] ;
  assign cache_master_xactor_ug_master_u_r_putWire$wget =
	     { mem_master_rid,
	       mem_master_rdata,
	       mem_master_rresp,
	       mem_master_rlast,
	       mem_master_ruser } ;
  assign cache_master_xactor_ug_master_u_r_putWire$whas =
	     mem_master_rvalid && !cache_master_xactor_shim_rff_rv[72] ;
  assign cache_dw_valid$whas =
	     (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp ||
	      WILL_FIRE_RL_cache_rl_io_read_rsp) &&
	     cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_crg_commit$port1__read &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op_1_EQ_0_2_OR_cache_rg_op_1_EQ_2_3_A_ETC___d195 ||
	     WILL_FIRE_RL_cache_rl_drive_exception_rsp ||
	     WILL_FIRE_RL_cache_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_ST_AMO_response ;
  always@(MUX_cache_dw_output_ld_val$wset_1__SEL_1 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_1 or
	  MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_1 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_2 or
	  MUX_cache_dw_output_ld_val$wset_1__SEL_3 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_3 or
	  MUX_cache_dw_output_ld_val$wset_1__SEL_4 or cache_rg_ld_val)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_dw_output_ld_val$wset_1__SEL_1:
	  cache_dw_output_ld_val$wget =
	      MUX_cache_dw_output_ld_val$wset_1__VAL_1;
      MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_1:
	  cache_dw_output_ld_val$wget =
	      MUX_cache_dw_output_ld_val$wset_1__VAL_2;
      MUX_cache_dw_output_ld_val$wset_1__SEL_3:
	  cache_dw_output_ld_val$wget =
	      MUX_cache_dw_output_ld_val$wset_1__VAL_3;
      MUX_cache_dw_output_ld_val$wset_1__SEL_4:
	  cache_dw_output_ld_val$wget = cache_rg_ld_val;
      default: cache_dw_output_ld_val$wget =
		   129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_dw_output_st_amo_val$wget =
	     MUX_cache_dw_output_ld_val$wset_1__SEL_3 ?
	       MUX_cache_dw_output_st_amo_val$wset_1__VAL_1 :
	       cache_rg_st_amo_val ;
  assign cache_master_xactor_ug_master_u_aw_dropWire$whas =
	     cache_master_xactor_shim_awff_rv$port1__read[97] &&
	     mem_master_awready ;
  assign cache_master_xactor_ug_master_u_w_dropWire$whas =
	     cache_master_xactor_shim_wff_rv$port1__read[74] &&
	     mem_master_wready ;
  assign cache_master_xactor_ug_master_u_ar_dropWire$whas =
	     cache_master_xactor_shim_arff_rv$port1__read[97] &&
	     mem_master_arready ;
  assign cache_crg_commit$port1__read = EN_commit || cache_crg_commit ;
  assign cache_crg_commit$port3__read =
	     !EN_req && cache_crg_commit$port1__read ;
  assign cache_master_xactor_shim_awff_rv$EN_port0__write =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_crg_commit$port1__read &&
	     cache_soc_map$m_is_mem_addr &&
	     NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d784 ||
	     WILL_FIRE_RL_cache_rl_io_write_req ;
  always@(MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_1 or
	  MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_1 or
	  MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_2 or
	  MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_2 or
	  WILL_FIRE_RL_cache_rl_io_write_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_1:
	  cache_master_xactor_shim_awff_rv$port0__write_1 =
	      MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_1;
      MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_2:
	  cache_master_xactor_shim_awff_rv$port0__write_1 =
	      MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_2;
      WILL_FIRE_RL_cache_rl_io_write_req:
	  cache_master_xactor_shim_awff_rv$port0__write_1 =
	      MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_1;
      default: cache_master_xactor_shim_awff_rv$port0__write_1 =
		   98'h2AAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_master_xactor_shim_awff_rv$port1__read =
	     cache_master_xactor_shim_awff_rv$EN_port0__write ?
	       cache_master_xactor_shim_awff_rv$port0__write_1 :
	       cache_master_xactor_shim_awff_rv ;
  assign cache_master_xactor_shim_awff_rv$port2__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop ?
	       98'h0AAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_awff_rv$port1__read ;
  assign cache_master_xactor_shim_awff_rv$port3__read =
	     cache_master_xactor_clearing ?
	       98'h0AAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_awff_rv$port2__read ;
  assign cache_master_xactor_shim_wff_rv$EN_port0__write =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_crg_commit$port1__read &&
	     cache_soc_map$m_is_mem_addr &&
	     NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d784 ||
	     WILL_FIRE_RL_cache_rl_io_write_req ;
  always@(MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_1 or
	  MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_1 or
	  MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_2 or
	  MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_2 or
	  WILL_FIRE_RL_cache_rl_io_write_req or
	  MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_1:
	  cache_master_xactor_shim_wff_rv$port0__write_1 =
	      MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_1;
      MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_2:
	  cache_master_xactor_shim_wff_rv$port0__write_1 =
	      MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_2;
      WILL_FIRE_RL_cache_rl_io_write_req:
	  cache_master_xactor_shim_wff_rv$port0__write_1 =
	      MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_3;
      default: cache_master_xactor_shim_wff_rv$port0__write_1 =
		   75'h2AAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_master_xactor_shim_wff_rv$port1__read =
	     cache_master_xactor_shim_wff_rv$EN_port0__write ?
	       cache_master_xactor_shim_wff_rv$port0__write_1 :
	       cache_master_xactor_shim_wff_rv ;
  assign cache_master_xactor_shim_wff_rv$port2__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop ?
	       75'h2AAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_wff_rv$port1__read ;
  assign cache_master_xactor_shim_wff_rv$port3__read =
	     cache_master_xactor_clearing ?
	       75'h2AAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_wff_rv$port2__read ;
  assign cache_master_xactor_shim_bff_rv$port0__write_1 =
	     { 1'd1, cache_master_xactor_ug_master_u_b_putWire$wget } ;
  assign cache_master_xactor_shim_bff_rv$port1__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut ?
	       cache_master_xactor_shim_bff_rv$port0__write_1 :
	       cache_master_xactor_shim_bff_rv ;
  assign cache_master_xactor_shim_bff_rv$port2__read =
	     CAN_FIRE_RL_cache_rl_discard_write_rsp ?
	       7'd42 :
	       cache_master_xactor_shim_bff_rv$port1__read ;
  assign cache_master_xactor_shim_bff_rv$port3__read =
	     cache_master_xactor_clearing ?
	       7'd42 :
	       cache_master_xactor_shim_bff_rv$port2__read ;
  assign cache_master_xactor_shim_arff_rv$EN_port0__write =
	     WILL_FIRE_RL_cache_rl_io_AMO_op_req ||
	     WILL_FIRE_RL_cache_rl_io_read_req ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;
  assign cache_master_xactor_shim_arff_rv$port0__write_1 =
	     MUX_cache_master_xactor_shim_arff_rv$port0__write_1__SEL_1 ?
	       MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_1 :
	       MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_2 ;
  assign cache_master_xactor_shim_arff_rv$port1__read =
	     cache_master_xactor_shim_arff_rv$EN_port0__write ?
	       cache_master_xactor_shim_arff_rv$port0__write_1 :
	       cache_master_xactor_shim_arff_rv ;
  assign cache_master_xactor_shim_arff_rv$port2__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop ?
	       98'h0AAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_arff_rv$port1__read ;
  assign cache_master_xactor_shim_arff_rv$port3__read =
	     cache_master_xactor_clearing ?
	       98'h0AAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_arff_rv$port2__read ;
  assign cache_master_xactor_shim_rff_rv$port0__write_1 =
	     { 1'd1, cache_master_xactor_ug_master_u_r_putWire$wget } ;
  assign cache_master_xactor_shim_rff_rv$port1__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut ?
	       cache_master_xactor_shim_rff_rv$port0__write_1 :
	       cache_master_xactor_shim_rff_rv ;
  assign cache_master_xactor_shim_rff_rv$EN_port1__write =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop ;
  assign cache_master_xactor_shim_rff_rv$port2__read =
	     cache_master_xactor_shim_rff_rv$EN_port1__write ?
	       73'h0AAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_rff_rv$port1__read ;
  assign cache_master_xactor_shim_rff_rv$port3__read =
	     cache_master_xactor_clearing ?
	       73'h0AAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_rff_rv$port2__read ;
  assign cache_crg_sb_to_load_delay$port0__write_1 =
	     { 1'd0, cache_crg_sb_to_load_delay[10:1] } ;
  assign cache_crg_sb_to_load_delay$EN_port1__write =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_crg_commit$port1__read &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     cache_rg_op_1_EQ_1_9_OR_cache_rg_op_1_EQ_2_3_A_ETC___d778 ;
  assign cache_crg_sb_to_load_delay$port2__read =
	     cache_crg_sb_to_load_delay$EN_port1__write ?
	       11'd2047 :
	       cache_crg_sb_to_load_delay$port0__write_1 ;

  // register cache_cfg_verbosity
  assign cache_cfg_verbosity$D_IN = set_verbosity_verbosity ;
  assign cache_cfg_verbosity$EN = EN_set_verbosity ;

  // register cache_crg_commit
  assign cache_crg_commit$D_IN = cache_crg_commit$port3__read ;
  assign cache_crg_commit$EN = 1'b1 ;

  // register cache_crg_sb_to_load_delay
  assign cache_crg_sb_to_load_delay$D_IN =
	     cache_crg_sb_to_load_delay$port2__read ;
  assign cache_crg_sb_to_load_delay$EN = 1'b1 ;

  // register cache_ctr_wr_rsps_pending_inrg
  always@(MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_1 or
	  MUX_cache_ctr_wr_rsps_pending_inrg$write_1__VAL_1 or
	  MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_2 or
	  WILL_FIRE_RL_cache_rl_io_write_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_1:
	  cache_ctr_wr_rsps_pending_inrg$D_IN =
	      MUX_cache_ctr_wr_rsps_pending_inrg$write_1__VAL_1;
      MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_2:
	  cache_ctr_wr_rsps_pending_inrg$D_IN =
	      MUX_cache_ctr_wr_rsps_pending_inrg$write_1__VAL_1;
      WILL_FIRE_RL_cache_rl_io_write_req:
	  cache_ctr_wr_rsps_pending_inrg$D_IN =
	      MUX_cache_ctr_wr_rsps_pending_inrg$write_1__VAL_1;
      default: cache_ctr_wr_rsps_pending_inrg$D_IN =
		   4'b1010 /* unspecified value */ ;
    endcase
  end
  assign cache_ctr_wr_rsps_pending_inrg$EN =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_crg_commit$port1__read &&
	     cache_soc_map$m_is_mem_addr &&
	     NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d784 ||
	     WILL_FIRE_RL_cache_rl_io_write_req ;

  // register cache_ctr_wr_rsps_pending_outrg
  assign cache_ctr_wr_rsps_pending_outrg$D_IN =
	     WILL_FIRE_RL_cache_rl_discard_write_rsp ?
	       MUX_cache_ctr_wr_rsps_pending_outrg$write_1__VAL_1 :
	       cache_ctr_wr_rsps_pending_inrg ;
  assign cache_ctr_wr_rsps_pending_outrg$EN =
	     WILL_FIRE_RL_cache_rl_start_reset && !cache_f_reset_reqs$D_OUT ||
	     WILL_FIRE_RL_cache_rl_discard_write_rsp ;

  // register cache_master_xactor_clearing
  assign cache_master_xactor_clearing$D_IN = !cache_master_xactor_clearing ;
  assign cache_master_xactor_clearing$EN =
	     WILL_FIRE_RL_cache_rl_reset && !cache_f_reset_reqs$D_OUT ||
	     cache_master_xactor_clearing ;

  // register cache_master_xactor_shim_arff_rv
  assign cache_master_xactor_shim_arff_rv$D_IN =
	     cache_master_xactor_shim_arff_rv$port3__read ;
  assign cache_master_xactor_shim_arff_rv$EN = 1'b1 ;

  // register cache_master_xactor_shim_awff_rv
  assign cache_master_xactor_shim_awff_rv$D_IN =
	     cache_master_xactor_shim_awff_rv$port3__read ;
  assign cache_master_xactor_shim_awff_rv$EN = 1'b1 ;

  // register cache_master_xactor_shim_bff_rv
  assign cache_master_xactor_shim_bff_rv$D_IN =
	     cache_master_xactor_shim_bff_rv$port3__read ;
  assign cache_master_xactor_shim_bff_rv$EN = 1'b1 ;

  // register cache_master_xactor_shim_rff_rv
  assign cache_master_xactor_shim_rff_rv$D_IN =
	     cache_master_xactor_shim_rff_rv$port3__read ;
  assign cache_master_xactor_shim_rff_rv$EN = 1'b1 ;

  // register cache_master_xactor_shim_wff_rv
  assign cache_master_xactor_shim_wff_rv$D_IN =
	     cache_master_xactor_shim_wff_rv$port3__read ;
  assign cache_master_xactor_shim_wff_rv$EN = 1'b1 ;

  // register cache_rg_addr
  assign cache_rg_addr$D_IN = req_addr ;
  assign cache_rg_addr$EN = EN_req ;

  // register cache_rg_amo_funct7
  assign cache_rg_amo_funct7$D_IN = req_amo_funct7 ;
  assign cache_rg_amo_funct7$EN = EN_req ;

  // register cache_rg_cset_in_cache
  assign cache_rg_cset_in_cache$D_IN =
	     WILL_FIRE_RL_cache_rl_reset ?
	       MUX_cache_rg_cset_in_cache$write_1__VAL_1 :
	       6'd0 ;
  assign cache_rg_cset_in_cache$EN =
	     WILL_FIRE_RL_cache_rl_reset ||
	     WILL_FIRE_RL_cache_rl_start_reset ;

  // register cache_rg_error_during_refill
  assign cache_rg_error_during_refill$D_IN =
	     MUX_cache_rg_error_during_refill$write_1__SEL_1 ;
  assign cache_rg_error_during_refill$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // register cache_rg_exc_code
  always@(MUX_cache_rg_error_during_refill$write_1__SEL_1 or
	  MUX_cache_rg_exc_code$write_1__VAL_1 or
	  MUX_cache_rg_exc_code$write_1__SEL_2 or
	  MUX_cache_rg_exc_code$write_1__VAL_2 or
	  MUX_cache_rg_exc_code$write_1__SEL_3 or
	  MUX_cache_rg_exc_code$write_1__SEL_4 or
	  MUX_cache_rg_exc_code$write_1__SEL_5)
  case (1'b1)
    MUX_cache_rg_error_during_refill$write_1__SEL_1:
	cache_rg_exc_code$D_IN = MUX_cache_rg_exc_code$write_1__VAL_1;
    MUX_cache_rg_exc_code$write_1__SEL_2:
	cache_rg_exc_code$D_IN = MUX_cache_rg_exc_code$write_1__VAL_2;
    MUX_cache_rg_exc_code$write_1__SEL_3: cache_rg_exc_code$D_IN = 6'd7;
    MUX_cache_rg_exc_code$write_1__SEL_4: cache_rg_exc_code$D_IN = 6'd5;
    MUX_cache_rg_exc_code$write_1__SEL_5: cache_rg_exc_code$D_IN = 6'd28;
    default: cache_rg_exc_code$D_IN = 6'b101010 /* unspecified value */ ;
  endcase
  assign cache_rg_exc_code$EN =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     !cache_crg_commit$port1__read ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 ||
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 ||
	     EN_req &&
	     NOT_req_width_code_EQ_0b0_307_308_AND_NOT_req__ETC___d1327 &&
	     (req_width_code != 3'b100 || req_addr[3:0] != 4'b0) ;

  // register cache_rg_is_unsigned
  assign cache_rg_is_unsigned$D_IN = req_is_unsigned ;
  assign cache_rg_is_unsigned$EN = EN_req ;

  // register cache_rg_ld_val
  always@(MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_1 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_2 or
	  MUX_cache_rg_ld_val$write_1__SEL_2 or
	  MUX_cache_rg_ld_val$write_1__VAL_2 or
	  WILL_FIRE_RL_cache_rl_io_read_rsp or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_1 or
	  WILL_FIRE_RL_cache_rl_io_AMO_SC_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_1:
	  cache_rg_ld_val$D_IN = MUX_cache_dw_output_ld_val$wset_1__VAL_2;
      MUX_cache_rg_ld_val$write_1__SEL_2:
	  cache_rg_ld_val$D_IN = MUX_cache_rg_ld_val$write_1__VAL_2;
      WILL_FIRE_RL_cache_rl_io_read_rsp:
	  cache_rg_ld_val$D_IN = MUX_cache_dw_output_ld_val$wset_1__VAL_1;
      WILL_FIRE_RL_cache_rl_io_AMO_SC_req: cache_rg_ld_val$D_IN = 129'd1;
      default: cache_rg_ld_val$D_IN =
		   129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_rg_ld_val$EN =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_crg_commit$port1__read &&
	     cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d499 ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_io_AMO_SC_req ;

  // register cache_rg_lower_tag
  assign cache_rg_lower_tag$D_IN =
	     cache_master_xactor_shim_rff_rv$port1__read[0] ;
  assign cache_rg_lower_tag$EN = cache_rg_lower_word64_full$D_IN ;

  // register cache_rg_lower_word64
  assign cache_rg_lower_word64$D_IN =
	     cache_master_xactor_shim_rff_rv$port1__read[67:4] ;
  assign cache_rg_lower_word64$EN = cache_rg_lower_word64_full$D_IN ;

  // register cache_rg_lower_word64_full
  assign cache_rg_lower_word64_full$D_IN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     !cache_rg_lower_word64_full ;
  assign cache_rg_lower_word64_full$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ||
	     WILL_FIRE_RL_cache_rl_start_reset ;

  // register cache_rg_lrsc_pa
  assign cache_rg_lrsc_pa$D_IN = cache_rg_addr ;
  assign cache_rg_lrsc_pa$EN =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_crg_commit$port1__read &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00010 &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__24_BITS__ETC___d130 ;

  // register cache_rg_lrsc_valid
  assign cache_rg_lrsc_valid$D_IN =
	     MUX_cache_rg_lrsc_valid$write_1__SEL_2 &&
	     MUX_cache_rg_lrsc_valid$write_1__VAL_2 ;
  assign cache_rg_lrsc_valid$EN =
	     WILL_FIRE_RL_cache_rl_io_read_req && cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00010 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_crg_commit$port1__read &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op_1_EQ_0_2_OR_cache_rg_op_1_EQ_2_3_A_ETC___d189 ||
	     WILL_FIRE_RL_cache_rl_start_reset ;

  // register cache_rg_op
  assign cache_rg_op$D_IN = req_op ;
  assign cache_rg_op$EN = EN_req ;

  // register cache_rg_pa
  assign cache_rg_pa$D_IN = EN_req ? req_addr : cache_rg_addr ;
  assign cache_rg_pa$EN =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_crg_commit$port1__read ||
	     EN_req ;

  // register cache_rg_pte_pa
  assign cache_rg_pte_pa$D_IN = 32'h0 ;
  assign cache_rg_pte_pa$EN = 1'b0 ;

  // register cache_rg_st_amo_val
  assign cache_rg_st_amo_val$D_IN =
	     EN_req ? req_st_value : MUX_cache_rg_st_amo_val$write_1__VAL_2 ;
  assign cache_rg_st_amo_val$EN =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_crg_commit$port1__read &&
	     cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d868 ||
	     EN_req ;

  // register cache_rg_state
  always@(WILL_FIRE_RL_cache_rl_rereq or
	  MUX_cache_rg_state$write_1__SEL_2 or
	  MUX_cache_rg_state$write_1__VAL_2 or
	  WILL_FIRE_RL_cache_rl_start_cache_refill or
	  EN_req or
	  MUX_cache_rg_state$write_1__VAL_4 or
	  WILL_FIRE_RL_cache_rl_io_AMO_read_rsp or
	  MUX_cache_rg_state$write_1__VAL_5 or
	  WILL_FIRE_RL_cache_rl_io_read_rsp or
	  WILL_FIRE_RL_cache_rl_io_AMO_op_req or
	  WILL_FIRE_RL_cache_rl_io_AMO_SC_req or
	  WILL_FIRE_RL_cache_rl_io_write_req or
	  WILL_FIRE_RL_cache_rl_io_read_req or
	  WILL_FIRE_RL_cache_rl_start_reset or
	  MUX_cache_rg_state$write_1__SEL_12 or
	  MUX_cache_rg_state$write_1__VAL_12 or
	  MUX_cache_rg_state$write_1__SEL_13)
  case (1'b1)
    WILL_FIRE_RL_cache_rl_rereq: cache_rg_state$D_IN = 4'd3;
    MUX_cache_rg_state$write_1__SEL_2:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_2;
    WILL_FIRE_RL_cache_rl_start_cache_refill: cache_rg_state$D_IN = 4'd9;
    EN_req: cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_4;
    WILL_FIRE_RL_cache_rl_io_AMO_read_rsp:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_5;
    WILL_FIRE_RL_cache_rl_io_read_rsp:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_5;
    WILL_FIRE_RL_cache_rl_io_AMO_op_req: cache_rg_state$D_IN = 4'd15;
    WILL_FIRE_RL_cache_rl_io_AMO_SC_req || WILL_FIRE_RL_cache_rl_io_write_req:
	cache_rg_state$D_IN = 4'd11;
    WILL_FIRE_RL_cache_rl_io_read_req: cache_rg_state$D_IN = 4'd13;
    WILL_FIRE_RL_cache_rl_start_reset: cache_rg_state$D_IN = 4'd1;
    MUX_cache_rg_state$write_1__SEL_12:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_12;
    MUX_cache_rg_state$write_1__SEL_13: cache_rg_state$D_IN = 4'd2;
    default: cache_rg_state$D_IN = 4'b1010 /* unspecified value */ ;
  endcase
  assign cache_rg_state$EN =
	     WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_rg_op_1_EQ_0_2_OR_cache_rg_op_1_EQ_2_3_A_ETC___d167 ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_rg_word128_set_in_cache[1:0] == 2'd3 ||
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp ||
	     EN_req ||
	     WILL_FIRE_RL_cache_rl_start_reset ||
	     WILL_FIRE_RL_cache_rl_rereq ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ||
	     WILL_FIRE_RL_cache_rl_io_AMO_SC_req ||
	     WILL_FIRE_RL_cache_rl_io_write_req ||
	     WILL_FIRE_RL_cache_rl_io_read_req ||
	     WILL_FIRE_RL_cache_rl_io_AMO_op_req ;

  // register cache_rg_width_code
  assign cache_rg_width_code$D_IN = req_width_code ;
  assign cache_rg_width_code$EN = EN_req ;

  // register cache_rg_word128_set_in_cache
  assign cache_rg_word128_set_in_cache$D_IN =
	     MUX_cache_ram_word128_set$b_put_1__SEL_2 ?
	       MUX_cache_ram_word128_set$b_put_2__VAL_2 :
	       MUX_cache_ram_word128_set$b_put_2__VAL_4 ;
  assign cache_rg_word128_set_in_cache$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_rg_word128_set_in_cache[1:0] != 2'd3 ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // submodule cache_f_reset_reqs
  assign cache_f_reset_reqs$D_IN = !EN_server_reset_request_put ;
  assign cache_f_reset_reqs$ENQ =
	     EN_server_reset_request_put || EN_server_flush_request_put ;
  assign cache_f_reset_reqs$DEQ = MUX_cache_rg_state$write_1__SEL_13 ;
  assign cache_f_reset_reqs$CLR = 1'b0 ;

  // submodule cache_f_reset_rsps
  assign cache_f_reset_rsps$D_IN = cache_f_reset_reqs$D_OUT ;
  assign cache_f_reset_rsps$ENQ = MUX_cache_rg_state$write_1__SEL_13 ;
  assign cache_f_reset_rsps$DEQ =
	     EN_server_reset_response_get || EN_server_flush_response_get ;
  assign cache_f_reset_rsps$CLR = 1'b0 ;

  // submodule cache_ram_state_and_ctag_cset
  assign cache_ram_state_and_ctag_cset$ADDRA =
	     WILL_FIRE_RL_cache_rl_start_cache_refill ?
	       cache_rg_addr[11:6] :
	       cache_rg_cset_in_cache ;
  assign cache_ram_state_and_ctag_cset$ADDRB =
	     MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       req_addr[11:6] :
	       cache_rg_addr[11:6] ;
  assign cache_ram_state_and_ctag_cset$DIA =
	     WILL_FIRE_RL_cache_rl_start_cache_refill ?
	       MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1 :
	       23'd2796202 ;
  assign cache_ram_state_and_ctag_cset$DIB =
	     MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       23'b01010101010101010101010 /* unspecified value */  :
	       23'b01010101010101010101010 /* unspecified value */  ;
  assign cache_ram_state_and_ctag_cset$WEA = 1'd1 ;
  assign cache_ram_state_and_ctag_cset$WEB = 1'd0 ;
  assign cache_ram_state_and_ctag_cset$ENA =
	     WILL_FIRE_RL_cache_rl_start_cache_refill ||
	     WILL_FIRE_RL_cache_rl_reset ;
  assign cache_ram_state_and_ctag_cset$ENB =
	     MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 ||
	     WILL_FIRE_RL_cache_rl_rereq ;

  // submodule cache_ram_word128_set
  assign cache_ram_word128_set$ADDRA =
	     MUX_cache_ram_word128_set$a_put_1__SEL_1 ?
	       cache_rg_addr[11:4] :
	       cache_rg_word128_set_in_cache ;
  always@(MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  req_addr or
	  MUX_cache_ram_word128_set$b_put_1__SEL_2 or
	  MUX_cache_ram_word128_set$b_put_2__VAL_2 or
	  WILL_FIRE_RL_cache_rl_rereq or
	  cache_rg_addr or
	  WILL_FIRE_RL_cache_rl_start_cache_refill or
	  MUX_cache_ram_word128_set$b_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  cache_ram_word128_set$ADDRB = req_addr[11:4];
      MUX_cache_ram_word128_set$b_put_1__SEL_2:
	  cache_ram_word128_set$ADDRB =
	      MUX_cache_ram_word128_set$b_put_2__VAL_2;
      WILL_FIRE_RL_cache_rl_rereq:
	  cache_ram_word128_set$ADDRB = cache_rg_addr[11:4];
      WILL_FIRE_RL_cache_rl_start_cache_refill:
	  cache_ram_word128_set$ADDRB =
	      MUX_cache_ram_word128_set$b_put_2__VAL_4;
      default: cache_ram_word128_set$ADDRB =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  assign cache_ram_word128_set$DIA =
	     MUX_cache_ram_word128_set$a_put_1__SEL_1 ?
	       MUX_cache_ram_word128_set$a_put_3__VAL_1 :
	       MUX_cache_ram_word128_set$a_put_3__VAL_2 ;
  always@(MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  MUX_cache_ram_word128_set$b_put_1__SEL_2 or
	  WILL_FIRE_RL_cache_rl_rereq or
	  WILL_FIRE_RL_cache_rl_start_cache_refill)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  cache_ram_word128_set$DIB =
	      130'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      MUX_cache_ram_word128_set$b_put_1__SEL_2:
	  cache_ram_word128_set$DIB =
	      130'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_cache_rl_rereq:
	  cache_ram_word128_set$DIB =
	      130'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_cache_rl_start_cache_refill:
	  cache_ram_word128_set$DIB =
	      130'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      default: cache_ram_word128_set$DIB =
		   130'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_ram_word128_set$WEA = 1'd1 ;
  assign cache_ram_word128_set$WEB = 1'd0 ;
  assign cache_ram_word128_set$ENA =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_crg_commit$port1__read &&
	     cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d547 ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 ;
  assign cache_ram_word128_set$ENB =
	     MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_rg_word128_set_in_cache[1:0] != 2'd3 ||
	     WILL_FIRE_RL_cache_rl_rereq ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // submodule cache_soc_map
  assign cache_soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign cache_soc_map$m_is_mem_addr_addr = { 32'd0, cache_rg_addr } ;
  assign cache_soc_map$m_is_near_mem_IO_addr_addr = 64'h0 ;

  // remaining internal signals
  assign IF_cache_rg_addr_BITS_4_TO_0_EQ_0_THEN_1_ELSE_0__q2 =
	     (cache_rg_addr[4:0] == 5'd0) ? 32'd1 : 32'd0 ;
  assign IF_cache_rg_op_1_EQ_0_2_OR_cache_rg_op_1_EQ_2__ETC___d170 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) ?
	       4'd8 :
	       IF_cache_rg_op_1_EQ_1_9_OR_cache_rg_op_1_EQ_2__ETC___d169 ;
  assign IF_cache_rg_op_1_EQ_0_2_OR_cache_rg_op_1_EQ_2__ETC___d461 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) ?
	       x__h20525 :
	       x__h25917 ;
  assign IF_cache_rg_op_1_EQ_1_9_OR_cache_rg_op_1_EQ_2__ETC___d134 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011 &&
	       lrsc_result__h22058 ||
	       NOT_cache_master_xactor_clearing_read__0_8_AND_ETC___d122 :
	       !cache_ram_state_and_ctag_cset$DOB[22] ||
	       !cache_ram_state_and_ctag_cset_b_read__24_BITS__ETC___d130 ||
	       NOT_cache_master_xactor_clearing_read__0_8_AND_ETC___d122 ;
  assign IF_cache_rg_op_1_EQ_1_9_OR_cache_rg_op_1_EQ_2__ETC___d169 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       4'd11 :
	       ((!cache_ram_state_and_ctag_cset$DOB[22] ||
		 !cache_ram_state_and_ctag_cset_b_read__24_BITS__ETC___d130) ?
		  4'd8 :
		  4'd11) ;
  assign IF_cache_rg_op_1_EQ_1_9_OR_cache_rg_op_1_EQ_2__ETC___d799 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       mem_req_wr_data_wdata__h26579 :
	       mem_req_wr_data_wdata__h31412 ;
  assign IF_cache_rg_op_1_EQ_1_9_OR_cache_rg_op_1_EQ_2__ETC___d809 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       { 1'd1,
		 cache_rg_width_code == 3'd3 && cache_rg_st_amo_val[128] } :
	       2'd2 ;
  assign IF_cache_rg_width_code_98_EQ_2_03_THEN_SEXT_IF_ETC___d1216 =
	     (cache_rg_width_code == 3'd2) ?
	       { {32{x8487_BITS_31_TO_0__q83[31]}},
		 x8487_BITS_31_TO_0__q83 } :
	       x__h38487[63:0] ;
  assign IF_cache_rg_width_code_98_EQ_2_03_THEN_SEXT_IF_ETC___d539 =
	     (cache_rg_width_code == 3'd2) ?
	       { {32{x7492_BITS_31_TO_0__q47[31]}},
		 x7492_BITS_31_TO_0__q47 } :
	       x__h27492[63:0] ;
  assign IF_cache_rg_width_code_98_EQ_2_03_THEN_SEXT_ca_ETC___d668 =
	     (cache_rg_width_code == 3'd2) ?
	       { {32{cache_rg_st_amo_val_BITS_31_TO_0__q49[31]}},
		 cache_rg_st_amo_val_BITS_31_TO_0__q49 } :
	       cache_rg_st_amo_val[63:0] ;
  assign IF_cache_rg_width_code_98_EQ_3_07_THEN_IF_cach_ETC___d282 =
	     (cache_rg_width_code == 3'd3) ?
	       ((cache_rg_addr[3:0] == 4'h0) ?
		  cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[128] :
		  cache_rg_addr[3:0] == 4'h8 &&
		  cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[129]) :
	       cache_rg_width_code == 3'd4 &&
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[128] ;
  assign NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 =
	     cache_cfg_verbosity > 4'd1 ;
  assign NOT_cache_cfg_verbosity_read__3_ULE_2_00___d901 =
	     cache_cfg_verbosity > 4'd2 ;
  assign NOT_cache_f_reset_reqs_notEmpty__4_38_AND_cach_ETC___d149 =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_state == 4'd3 &&
	     (cache_rg_op != 2'd0 &&
	      (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) ||
	      cache_crg_sb_to_load_delay$port0__write_1 == 11'd0) ;
  assign NOT_cache_f_reset_reqs_notEmpty__4_38_AND_cach_ETC___d962 =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_state == 4'd12 &&
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) ;
  assign NOT_cache_master_xactor_clearing_read__0_8_AND_ETC___d122 =
	     !cache_master_xactor_clearing &&
	     cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d111 !=
	     4'd15 &&
	     !cache_master_xactor_shim_awff_rv[97] &&
	     !cache_master_xactor_shim_wff_rv[74] ;
  assign NOT_cache_ram_state_and_ctag_cset_b_read__24_B_ETC___d177 =
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__24_BITS__ETC___d130) &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00010 &&
	     cache_rg_addr_7_EQ_cache_rg_lrsc_pa_05___d175 ;
  assign NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d164 =
	     cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_05_EQ_cache_rg_addr_7___d106) ;
  assign NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d784 =
	     cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     (cache_rg_op_1_EQ_1_9_OR_cache_rg_op_1_EQ_2_3_A_ETC___d782 ||
	      NOT_cache_rg_op_1_EQ_1_9_83_AND_NOT_cache_rg_o_ETC___d544) ;
  assign NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d833 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_cache_rg_op_1_EQ_2_3_42_OR_NOT_cache_rg_am_ETC___d831 ;
  assign NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d843 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_cache_rg_op_1_EQ_2_3_42_OR_NOT_cache_rg_am_ETC___d841 ;
  assign NOT_cache_rg_op_1_EQ_1_9_83_AND_NOT_cache_rg_o_ETC___d186 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__24_BITS__ETC___d130 &&
	     cache_rg_addr_7_EQ_cache_rg_lrsc_pa_05___d175 ;
  assign NOT_cache_rg_op_1_EQ_1_9_83_AND_NOT_cache_rg_o_ETC___d544 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__24_BITS__ETC___d130 ;
  assign NOT_cache_rg_op_1_EQ_1_9_83_AND_NOT_cache_rg_o_ETC___d777 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__24_BITS__ETC___d130 &&
	     (cache_rg_width_code == 3'd0 || cache_rg_width_code == 3'd1) ;
  assign NOT_cache_rg_op_1_EQ_1_9_83_AND_NOT_cache_rg_o_ETC___d853 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__24_BITS__ETC___d130) &&
	     NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 ;
  assign NOT_cache_rg_op_1_EQ_1_9_83_AND_NOT_cache_rg_o_ETC___d857 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__24_BITS__ETC___d130 &&
	     NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 ;
  assign NOT_cache_rg_op_1_EQ_1_9_83_AND_NOT_cache_rg_o_ETC___d863 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__24_BITS__ETC___d130 &&
	     cache_rg_addr_7_EQ_cache_rg_lrsc_pa_05___d175 &&
	     NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 ;
  assign NOT_cache_rg_op_1_EQ_2_3_42_OR_NOT_cache_rg_am_ETC___d542 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_05_EQ_cache_rg_addr_7___d106) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__24_BITS__ETC___d130 ;
  assign NOT_cache_rg_op_1_EQ_2_3_42_OR_NOT_cache_rg_am_ETC___d775 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_05_EQ_cache_rg_addr_7___d106) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__24_BITS__ETC___d130 &&
	     (cache_rg_width_code == 3'd0 || cache_rg_width_code == 3'd1) ;
  assign NOT_cache_rg_op_1_EQ_2_3_42_OR_NOT_cache_rg_am_ETC___d831 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_05_EQ_cache_rg_addr_7___d106) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__24_BITS__ETC___d130 &&
	     NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 ;
  assign NOT_cache_rg_op_1_EQ_2_3_42_OR_NOT_cache_rg_am_ETC___d836 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_05_EQ_cache_rg_addr_7___d106) &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__24_BITS__ETC___d130) &&
	     NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 ;
  assign NOT_cache_rg_op_1_EQ_2_3_42_OR_NOT_cache_rg_am_ETC___d841 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_05_EQ_cache_rg_addr_7___d106) &&
	     NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 ;
  assign NOT_req_width_code_EQ_0b0_307_308_AND_NOT_req__ETC___d1327 =
	     req_width_code != 3'b0 &&
	     (req_width_code != 3'b001 || req_addr[0]) &&
	     (req_width_code != 3'b010 || req_addr[1:0] != 2'b0) &&
	     (req_width_code != 3'b011 || req_addr[2:0] != 3'b0) ;
  assign SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d288 =
	     { {120{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q33[7]}},
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q33 } ;
  assign SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d293 =
	     { {120{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q46[7]}},
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q46 } ;
  assign SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d298 =
	     { {120{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q30[7]}},
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q30 } ;
  assign SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d303 =
	     { {120{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q45[7]}},
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q45 } ;
  assign SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d308 =
	     { {120{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q27[7]}},
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q27 } ;
  assign SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d313 =
	     { {120{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q44[7]}},
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q44 } ;
  assign SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d318 =
	     { {120{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q26[7]}},
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q26 } ;
  assign SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d323 =
	     { {120{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q43[7]}},
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q43 } ;
  assign SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d327 =
	     { {120{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q24[7]}},
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q24 } ;
  assign SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d332 =
	     { {120{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q42[7]}},
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q42 } ;
  assign SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d337 =
	     { {120{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q22[7]}},
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q22 } ;
  assign SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d342 =
	     { {120{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q41[7]}},
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q41 } ;
  assign SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d347 =
	     { {120{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q20[7]}},
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q20 } ;
  assign SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d352 =
	     { {120{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q40[7]}},
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q40 } ;
  assign SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d357 =
	     { {120{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q18[7]}},
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q18 } ;
  assign SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d362 =
	     { {120{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q39[7]}},
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q39 } ;
  assign SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d382 =
	     { {112{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q31[15]}},
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q31 } ;
  assign SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d386 =
	     { {112{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q29[15]}},
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q29 } ;
  assign SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d390 =
	     { {112{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q28[15]}},
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q28 } ;
  assign SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d394 =
	     { {112{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q25[15]}},
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q25 } ;
  assign SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d398 =
	     { {112{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q23[15]}},
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q23 } ;
  assign SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d402 =
	     { {112{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q21[15]}},
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q21 } ;
  assign SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d406 =
	     { {112{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q19[15]}},
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q19 } ;
  assign SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d410 =
	     { {112{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q17[15]}},
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q17 } ;
  assign SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d422 =
	     { {96{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q36[31]}},
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q36 } ;
  assign SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d426 =
	     { {96{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q34[31]}},
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q34 } ;
  assign SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d430 =
	     { {96{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q32[31]}},
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q32 } ;
  assign SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d434 =
	     { {96{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q35[31]}},
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q35 } ;
  assign SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d442 =
	     { {64{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q38[63]}},
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q38 } ;
  assign SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d446 =
	     { {64{cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q37[63]}},
	       cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q37 } ;
  assign _0__q1 = 2'd0 ;
  assign _theResult___fst__h35665 =
	     (cache_rg_addr[2:0] == 3'd0) ? result__h35667 : 128'd0 ;
  assign access_exc_code__h5040 = MUX_cache_rg_exc_code$write_1__VAL_1 ;
  assign cache_crg_commit_port1__read__5_AND_cache_soc__ETC___d485 =
	     cache_crg_commit$port1__read && cache_soc_map$m_is_mem_addr &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00010 &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__24_BITS__ETC___d130 &&
	     NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 ;
  assign cache_crg_commit_port1__read__5_AND_cache_soc__ETC___d821 =
	     cache_crg_commit$port1__read && cache_soc_map$m_is_mem_addr &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00011 &&
	     cache_rg_lrsc_valid &&
	     !cache_rg_lrsc_pa_05_EQ_cache_rg_addr_7___d106 &&
	     NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 ;
  assign cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d111 =
	     cache_ctr_wr_rsps_pending_inrg -
	     cache_ctr_wr_rsps_pending_outrg ;
  assign cache_f_reset_reqs_i_notEmpty__3_AND_cache_f_r_ETC___d66 =
	     cache_f_reset_reqs$EMPTY_N &&
	     (cache_f_reset_reqs$D_OUT || !cache_master_xactor_clearing) &&
	     (cache_rg_cset_in_cache != 6'd63 || cache_f_reset_rsps$FULL_N) ;
  assign cache_master_xactor_shim_arff_rvport1__read_B_ETC__q51 =
	     cache_master_xactor_shim_arff_rv$port1__read[96:0] ;
  assign cache_master_xactor_shim_awff_rvport1__read_B_ETC__q84 =
	     cache_master_xactor_shim_awff_rv$port1__read[96:0] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q10 =
	     cache_master_xactor_shim_rff_rv$port1__read[43:36] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q11 =
	     cache_master_xactor_shim_rff_rv$port1__read[51:36] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q12 =
	     cache_master_xactor_shim_rff_rv$port1__read[67:36] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q13 =
	     cache_master_xactor_shim_rff_rv$port1__read[51:44] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q14 =
	     cache_master_xactor_shim_rff_rv$port1__read[59:52] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q15 =
	     cache_master_xactor_shim_rff_rv$port1__read[67:52] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q16 =
	     cache_master_xactor_shim_rff_rv$port1__read[67:60] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q3 =
	     cache_master_xactor_shim_rff_rv$port1__read[11:4] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q4 =
	     cache_master_xactor_shim_rff_rv$port1__read[19:4] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q5 =
	     cache_master_xactor_shim_rff_rv$port1__read[35:4] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q6 =
	     cache_master_xactor_shim_rff_rv$port1__read[19:12] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q7 =
	     cache_master_xactor_shim_rff_rv$port1__read[27:20] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q8 =
	     cache_master_xactor_shim_rff_rv$port1__read[35:28] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q9 =
	     cache_master_xactor_shim_rff_rv$port1__read[35:20] ;
  assign cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q85 =
	     cache_master_xactor_shim_wff_rv$port1__read[73:0] ;
  assign cache_ram_state_and_ctag_cset_b_read__24_BITS__ETC___d130 =
	     cache_ram_state_and_ctag_cset$DOB[21:0] == pa_ctag__h7188 ;
  assign cache_ram_state_and_ctag_cset_b_read__24_BIT_2_ETC___d178 =
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__24_BITS__ETC___d130 &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00010 ||
	     NOT_cache_ram_state_and_ctag_cset_b_read__24_B_ETC___d177 ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274 =
	     cache_ram_word128_set$DOB & y__h7672 ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q17 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[127:112] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q18 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[119:112] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q19 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[111:96] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q20 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[103:96] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q21 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[95:80] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q22 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[87:80] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q23 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[79:64] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q24 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[71:64] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q25 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[63:48] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q26 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[55:48] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q27 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[39:32] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q28 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[47:32] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q29 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[31:16] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q30 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[23:16] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q31 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[15:0] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q32 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[95:64] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q33 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[7:0] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q34 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[63:32] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q35 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[127:96] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q36 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[31:0] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q37 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[127:64] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q38 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[63:0] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q39 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[127:120] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q40 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[111:104] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q41 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[95:88] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q42 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[79:72] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q43 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[63:56] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q44 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[47:40] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q45 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[31:24] ;
  assign cache_ram_word128_set_b_read__58_AND_cache_ram_ETC__q46 =
	     cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[15:8] ;
  assign cache_ram_word128_set_b_read__58_BITS_129_TO_1_ETC___d559 =
	     cache_ram_word128_set$DOB[129:128] & y__h27217 ;
  assign cache_rg_addr_7_EQ_cache_rg_lrsc_pa_05___d175 =
	     cache_rg_addr == cache_rg_lrsc_pa ;
  assign cache_rg_amo_funct7_4_BITS_6_TO_2_5_EQ_0b10_6__ETC___d492 =
	     cache_rg_amo_funct7[6:2] == 5'b00010 &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__24_BITS__ETC___d130) &&
	     cache_rg_addr_7_EQ_cache_rg_lrsc_pa_05___d175 &&
	     NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 ;
  assign cache_rg_lrsc_pa_05_EQ_cache_rg_addr_7___d106 =
	     cache_rg_lrsc_pa == cache_rg_addr ;
  assign cache_rg_op_1_EQ_0_2_OR_cache_rg_op_1_EQ_2_3_A_ETC___d159 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__24_BITS__ETC___d130) ;
  assign cache_rg_op_1_EQ_0_2_OR_cache_rg_op_1_EQ_2_3_A_ETC___d167 =
	     cache_rg_op_1_EQ_0_2_OR_cache_rg_op_1_EQ_2_3_A_ETC___d159 ||
	     NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d164 ||
	     !cache_soc_map$m_is_mem_addr ||
	     !cache_crg_commit$port1__read ;
  assign cache_rg_op_1_EQ_0_2_OR_cache_rg_op_1_EQ_2_3_A_ETC___d189 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     cache_ram_state_and_ctag_cset_b_read__24_BIT_2_ETC___d178 ||
	     cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     cache_rg_op_1_EQ_1_9_OR_cache_rg_op_1_EQ_2_3_A_ETC___d187 ;
  assign cache_rg_op_1_EQ_0_2_OR_cache_rg_op_1_EQ_2_3_A_ETC___d195 =
	     MUX_cache_rg_lrsc_valid$write_1__VAL_2 ||
	     cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h22058 ;
  assign cache_rg_op_1_EQ_0_2_OR_cache_rg_op_1_EQ_2_3_A_ETC___d284 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     cache_rg_width_code != 3'd0 &&
	     cache_rg_width_code != 3'd1 &&
	     cache_rg_width_code != 3'd2 &&
	     IF_cache_rg_width_code_98_EQ_3_07_THEN_IF_cach_ETC___d282 ;
  assign cache_rg_op_1_EQ_0_2_OR_cache_rg_op_1_EQ_2_3_A_ETC___d471 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__24_BITS__ETC___d130 &&
	     NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 ;
  assign cache_rg_op_1_EQ_0_2_OR_cache_rg_op_1_EQ_2_3_A_ETC___d487 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__24_BITS__ETC___d130) &&
	     NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 ;
  assign cache_rg_op_1_EQ_1_9_OR_cache_rg_op_1_EQ_2_3_A_ETC___d187 =
	     cache_rg_op == 2'd1 &&
	     cache_rg_addr_7_EQ_cache_rg_lrsc_pa_05___d175 ||
	     cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011 ||
	     NOT_cache_rg_op_1_EQ_1_9_83_AND_NOT_cache_rg_o_ETC___d186 ;
  assign cache_rg_op_1_EQ_1_9_OR_cache_rg_op_1_EQ_2_3_A_ETC___d545 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_cache_rg_op_1_EQ_2_3_42_OR_NOT_cache_rg_am_ETC___d542 ||
	     NOT_cache_rg_op_1_EQ_1_9_83_AND_NOT_cache_rg_o_ETC___d544 ;
  assign cache_rg_op_1_EQ_1_9_OR_cache_rg_op_1_EQ_2_3_A_ETC___d778 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_cache_rg_op_1_EQ_2_3_42_OR_NOT_cache_rg_am_ETC___d775 ||
	     NOT_cache_rg_op_1_EQ_1_9_83_AND_NOT_cache_rg_o_ETC___d777 ;
  assign cache_rg_op_1_EQ_1_9_OR_cache_rg_op_1_EQ_2_3_A_ETC___d782 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_05_EQ_cache_rg_addr_7___d106) ;
  assign cache_rg_op_1_EQ_2_3_AND_cache_rg_amo_funct7_4_ETC___d848 =
	     cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h22058 &&
	     NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 ;
  assign cache_rg_st_amo_val_BITS_31_TO_0__q49 = cache_rg_st_amo_val[31:0] ;
  assign cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d499 =
	     cache_soc_map$m_is_mem_addr && cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     (cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011 ||
	      cache_rg_op != 2'd1 && cache_ram_state_and_ctag_cset$DOB[22] &&
	      cache_ram_state_and_ctag_cset_b_read__24_BITS__ETC___d130) ;
  assign cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d547 =
	     cache_soc_map$m_is_mem_addr && cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     cache_rg_op_1_EQ_1_9_OR_cache_rg_op_1_EQ_2_3_A_ETC___d545 ;
  assign cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d859 =
	     cache_soc_map$m_is_mem_addr && cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_cache_rg_op_1_EQ_1_9_83_AND_NOT_cache_rg_o_ETC___d857 ;
  assign cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d868 =
	     cache_soc_map$m_is_mem_addr && cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_cache_rg_op_1_EQ_1_9_83_AND_NOT_cache_rg_o_ETC___d544 ;
  assign cline_addr__h32060 = { cache_rg_pa[31:6], 6'd0 } ;
  assign cline_fabric_addr__h32061 = { 32'd0, cline_addr__h32060 } ;
  assign lrsc_result__h22058 =
	     !cache_rg_lrsc_valid ||
	     !cache_rg_lrsc_pa_05_EQ_cache_rg_addr_7___d106 ;
  assign mem_req_wr_addr_awaddr__h31282 = { 32'd0, cache_rg_addr } ;
  assign mem_req_wr_addr_awaddr__h38171 = { 32'd0, cache_rg_pa } ;
  assign new_st_val__h27347 = { 32'd0, _theResult_____2__h27201[31:0] } ;
  assign new_st_val__h27440 =
	     IF_cache_rg_width_code_98_EQ_2_03_THEN_SEXT_IF_ETC___d539 +
	     IF_cache_rg_width_code_98_EQ_2_03_THEN_SEXT_ca_ETC___d668 ;
  assign new_st_val__h28588 = w1__h27193 ^ w2__h27195 ;
  assign new_st_val__h28592 = w1__h27193 & w2__h27195 ;
  assign new_st_val__h28596 = w1__h27193 | w2__h27195 ;
  assign new_st_val__h28600 =
	     (w1__h27193 < w2__h27195) ? w1__h27193 : w2__h27195 ;
  assign new_st_val__h28605 =
	     (w1__h27193 <= w2__h27195) ? w2__h27195 : w1__h27193 ;
  assign new_st_val__h28611 =
	     ((IF_cache_rg_width_code_98_EQ_2_03_THEN_SEXT_IF_ETC___d539 ^
	       64'h8000000000000000) <
	      (IF_cache_rg_width_code_98_EQ_2_03_THEN_SEXT_ca_ETC___d668 ^
	       64'h8000000000000000)) ?
	       w1__h27193 :
	       w2__h27195 ;
  assign new_st_val__h28616 =
	     ((IF_cache_rg_width_code_98_EQ_2_03_THEN_SEXT_IF_ETC___d539 ^
	       64'h8000000000000000) <=
	      (IF_cache_rg_width_code_98_EQ_2_03_THEN_SEXT_ca_ETC___d668 ^
	       64'h8000000000000000)) ?
	       w2__h27195 :
	       w1__h27193 ;
  assign new_st_val__h38342 = { 32'd0, _theResult_____2__h38330[31:0] } ;
  assign new_st_val__h38435 =
	     IF_cache_rg_width_code_98_EQ_2_03_THEN_SEXT_IF_ETC___d1216 +
	     IF_cache_rg_width_code_98_EQ_2_03_THEN_SEXT_ca_ETC___d668 ;
  assign new_st_val__h40289 = w1__h38322 ^ w2__h27195 ;
  assign new_st_val__h40293 = w1__h38322 & w2__h27195 ;
  assign new_st_val__h40297 = w1__h38322 | w2__h27195 ;
  assign new_st_val__h40301 =
	     (w1__h38322 < w2__h27195) ? w1__h38322 : w2__h27195 ;
  assign new_st_val__h40306 =
	     (w1__h38322 <= w2__h27195) ? w2__h27195 : w1__h38322 ;
  assign new_st_val__h40312 =
	     ((IF_cache_rg_width_code_98_EQ_2_03_THEN_SEXT_IF_ETC___d1216 ^
	       64'h8000000000000000) <
	      (IF_cache_rg_width_code_98_EQ_2_03_THEN_SEXT_ca_ETC___d668 ^
	       64'h8000000000000000)) ?
	       w1__h38322 :
	       w2__h27195 ;
  assign new_st_val__h40317 =
	     ((IF_cache_rg_width_code_98_EQ_2_03_THEN_SEXT_IF_ETC___d1216 ^
	       64'h8000000000000000) <=
	      (IF_cache_rg_width_code_98_EQ_2_03_THEN_SEXT_ca_ETC___d668 ^
	       64'h8000000000000000)) ?
	       w2__h27195 :
	       w1__h38322 ;
  assign pa_ctag__h7188 = { 2'd0, cache_rg_addr[31:12] } ;
  assign req_width_code_EQ_0b0_307_OR_req_width_code_EQ_ETC___d1343 =
	     req_width_code == 3'b0 ||
	     req_width_code == 3'b001 && !req_addr[0] ||
	     req_width_code == 3'b010 && req_addr[1:0] == 2'b0 ||
	     req_width_code == 3'b011 && req_addr[2:0] == 3'b0 ;
  assign req_width_code_EQ_0b0_307_OR_req_width_code_EQ_ETC___d1348 =
	     (req_width_code_EQ_0b0_307_OR_req_width_code_EQ_ETC___d1343 ||
	      req_width_code == 3'b100 && req_addr[3:0] == 4'b0) &&
	     NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 ;
  assign result__h20468 =
	     cache_rg_is_unsigned ?
	       { 64'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[127:64] } :
	       SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d446 ;
  assign result__h20536 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[7:0] } :
	       SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d288 ;
  assign result__h20574 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[15:8] } :
	       SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d293 ;
  assign result__h20607 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[23:16] } :
	       SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d298 ;
  assign result__h20640 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[31:24] } :
	       SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d303 ;
  assign result__h20673 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[39:32] } :
	       SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d308 ;
  assign result__h20706 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[47:40] } :
	       SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d313 ;
  assign result__h20739 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[55:48] } :
	       SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d318 ;
  assign result__h20772 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[63:56] } :
	       SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d323 ;
  assign result__h20805 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[71:64] } :
	       SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d327 ;
  assign result__h20838 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[79:72] } :
	       SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d332 ;
  assign result__h20871 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[87:80] } :
	       SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d337 ;
  assign result__h20904 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[95:88] } :
	       SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d342 ;
  assign result__h20937 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[103:96] } :
	       SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d347 ;
  assign result__h20970 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[111:104] } :
	       SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d352 ;
  assign result__h21003 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[119:112] } :
	       SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d357 ;
  assign result__h21036 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[127:120] } :
	       SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d362 ;
  assign result__h21091 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[15:0] } :
	       SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d382 ;
  assign result__h21124 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[31:16] } :
	       SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d386 ;
  assign result__h21157 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[47:32] } :
	       SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d390 ;
  assign result__h21190 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[63:48] } :
	       SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d394 ;
  assign result__h21223 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[79:64] } :
	       SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d398 ;
  assign result__h21256 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[95:80] } :
	       SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d402 ;
  assign result__h21289 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[111:96] } :
	       SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d406 ;
  assign result__h21322 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[127:112] } :
	       SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d410 ;
  assign result__h21369 =
	     cache_rg_is_unsigned ?
	       { 96'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[31:0] } :
	       SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d422 ;
  assign result__h21402 =
	     cache_rg_is_unsigned ?
	       { 96'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[63:32] } :
	       SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d426 ;
  assign result__h21435 =
	     cache_rg_is_unsigned ?
	       { 96'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[95:64] } :
	       SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d430 ;
  assign result__h21468 =
	     cache_rg_is_unsigned ?
	       { 96'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[127:96] } :
	       SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d434 ;
  assign result__h35667 =
	     cache_rg_is_unsigned ?
	       word128__h35560 :
	       { {64{cache_rg_lower_word64$D_IN[63]}},
		 cache_rg_lower_word64$D_IN } ;
  assign result__h35726 =
	     cache_rg_is_unsigned ?
	       { 120'd0, cache_master_xactor_shim_rff_rv$port1__read[11:4] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q3[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q3 } ;
  assign result__h35762 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[19:12] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q6[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q6 } ;
  assign result__h35795 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[27:20] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q7[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q7 } ;
  assign result__h35828 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[35:28] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q8[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q8 } ;
  assign result__h35861 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[43:36] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q10[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q10 } ;
  assign result__h35894 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[51:44] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q13[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q13 } ;
  assign result__h35927 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[59:52] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q14[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q14 } ;
  assign result__h35960 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[67:60] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q16[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q16 } ;
  assign result__h36023 =
	     cache_rg_is_unsigned ?
	       { 112'd0, cache_master_xactor_shim_rff_rv$port1__read[19:4] } :
	       { {112{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q4[15]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q4 } ;
  assign result__h36056 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[35:20] } :
	       { {112{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q9[15]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q9 } ;
  assign result__h36089 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[51:36] } :
	       { {112{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q11[15]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q11 } ;
  assign result__h36122 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[67:52] } :
	       { {112{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q15[15]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q15 } ;
  assign result__h36173 =
	     cache_rg_is_unsigned ?
	       { 96'd0, cache_master_xactor_shim_rff_rv$port1__read[35:4] } :
	       { {96{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q5[31]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q5 } ;
  assign result__h36206 =
	     cache_rg_is_unsigned ?
	       { 96'd0, cache_master_xactor_shim_rff_rv$port1__read[67:36] } :
	       { {96{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q12[31]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q12 } ;
  assign result__h38568 =
	     { {120{x5715_BITS_7_TO_0__q53[7]}}, x5715_BITS_7_TO_0__q53 } ;
  assign result__h39276 =
	     { {120{x5715_BITS_15_TO_8__q57[7]}}, x5715_BITS_15_TO_8__q57 } ;
  assign result__h39308 =
	     { {120{x5715_BITS_23_TO_16__q58[7]}},
	       x5715_BITS_23_TO_16__q58 } ;
  assign result__h39340 =
	     { {120{x5715_BITS_31_TO_24__q60[7]}},
	       x5715_BITS_31_TO_24__q60 } ;
  assign result__h39372 =
	     { {120{x5715_BITS_39_TO_32__q61[7]}},
	       x5715_BITS_39_TO_32__q61 } ;
  assign result__h39404 =
	     { {120{x5715_BITS_47_TO_40__q64[7]}},
	       x5715_BITS_47_TO_40__q64 } ;
  assign result__h39436 =
	     { {120{x5715_BITS_55_TO_48__q65[7]}},
	       x5715_BITS_55_TO_48__q65 } ;
  assign result__h39468 =
	     { {120{x5715_BITS_63_TO_56__q67[7]}},
	       x5715_BITS_63_TO_56__q67 } ;
  assign result__h39500 =
	     { {120{x5715_BITS_71_TO_64__q68[7]}},
	       x5715_BITS_71_TO_64__q68 } ;
  assign result__h39532 =
	     { {120{x5715_BITS_79_TO_72__q72[7]}},
	       x5715_BITS_79_TO_72__q72 } ;
  assign result__h39564 =
	     { {120{x5715_BITS_87_TO_80__q73[7]}},
	       x5715_BITS_87_TO_80__q73 } ;
  assign result__h39596 =
	     { {120{x5715_BITS_95_TO_88__q75[7]}},
	       x5715_BITS_95_TO_88__q75 } ;
  assign result__h39628 =
	     { {120{x5715_BITS_103_TO_96__q76[7]}},
	       x5715_BITS_103_TO_96__q76 } ;
  assign result__h39660 =
	     { {120{x5715_BITS_111_TO_104__q79[7]}},
	       x5715_BITS_111_TO_104__q79 } ;
  assign result__h39692 =
	     { {120{x5715_BITS_119_TO_112__q80[7]}},
	       x5715_BITS_119_TO_112__q80 } ;
  assign result__h39724 =
	     { {120{x5715_BITS_127_TO_120__q82[7]}},
	       x5715_BITS_127_TO_120__q82 } ;
  assign result__h39778 =
	     { {112{x5715_BITS_15_TO_0__q54[15]}}, x5715_BITS_15_TO_0__q54 } ;
  assign result__h39810 =
	     { {112{x5715_BITS_31_TO_16__q59[15]}},
	       x5715_BITS_31_TO_16__q59 } ;
  assign result__h39842 =
	     { {112{x5715_BITS_47_TO_32__q62[15]}},
	       x5715_BITS_47_TO_32__q62 } ;
  assign result__h39874 =
	     { {112{x5715_BITS_63_TO_48__q66[15]}},
	       x5715_BITS_63_TO_48__q66 } ;
  assign result__h39906 =
	     { {112{x5715_BITS_79_TO_64__q69[15]}},
	       x5715_BITS_79_TO_64__q69 } ;
  assign result__h39938 =
	     { {112{x5715_BITS_95_TO_80__q74[15]}},
	       x5715_BITS_95_TO_80__q74 } ;
  assign result__h39970 =
	     { {112{x5715_BITS_111_TO_96__q77[15]}},
	       x5715_BITS_111_TO_96__q77 } ;
  assign result__h40002 =
	     { {112{x5715_BITS_127_TO_112__q81[15]}},
	       x5715_BITS_127_TO_112__q81 } ;
  assign result__h40048 =
	     { {96{x5715_BITS_31_TO_0__q55[31]}}, x5715_BITS_31_TO_0__q55 } ;
  assign result__h40080 =
	     { {96{x5715_BITS_63_TO_32__q63[31]}},
	       x5715_BITS_63_TO_32__q63 } ;
  assign result__h40112 =
	     { {96{x5715_BITS_95_TO_64__q70[31]}},
	       x5715_BITS_95_TO_64__q70 } ;
  assign result__h40144 =
	     { {96{x5715_BITS_127_TO_96__q78[31]}},
	       x5715_BITS_127_TO_96__q78 } ;
  assign result__h40198 =
	     { {64{x5715_BITS_63_TO_0__q56[63]}}, x5715_BITS_63_TO_0__q56 } ;
  assign result__h40227 =
	     { {64{x5715_BITS_127_TO_64__q71[63]}},
	       x5715_BITS_127_TO_64__q71 } ;
  assign result__h7622 =
	     cache_rg_is_unsigned ?
	       { 64'd0,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[63:0] } :
	       SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d442 ;
  assign shift_bits__h31289 = { cache_rg_addr[2:0], 3'b0 } ;
  assign shift_bits__h38178 = { cache_rg_pa[2:0], 3'b0 } ;
  assign strobe128__h31342 = 8'b00000001 << cache_rg_addr[2:0] ;
  assign strobe128__h31346 = 8'b00000011 << cache_rg_addr[2:0] ;
  assign strobe128__h31350 = 8'b00001111 << cache_rg_addr[2:0] ;
  assign strobe128__h31354 = 8'b11111111 << cache_rg_addr[2:0] ;
  assign strobe128__h38231 = 8'b00000001 << cache_rg_pa[2:0] ;
  assign strobe128__h38235 = 8'b00000011 << cache_rg_pa[2:0] ;
  assign strobe128__h38239 = 8'b00001111 << cache_rg_pa[2:0] ;
  assign strobe128__h38243 = 8'b11111111 << cache_rg_pa[2:0] ;
  assign w1___1__h27406 = { 32'd0, x__h27492[31:0] } ;
  assign w1___1__h38401 = { 32'd0, x__h38487[31:0] } ;
  assign w1__h27193 =
	     (cache_rg_width_code == 3'd2) ?
	       w1___1__h27406 :
	       x__h27492[63:0] ;
  assign w1__h38322 =
	     (cache_rg_width_code == 3'd2) ?
	       w1___1__h38401 :
	       x__h38487[63:0] ;
  assign w2__h27195 =
	     (cache_rg_width_code == 3'd2) ?
	       { 32'd0, cache_rg_st_amo_val[31:0] } :
	       cache_rg_st_amo_val[63:0] ;
  assign word128__h35560 =
	     { 64'd0, cache_master_xactor_shim_rff_rv$port1__read[67:4] } ;
  assign word64__h26449 = cache_rg_st_amo_val[63:0] << shift_bits__h31289 ;
  assign word64__h31341 = x__h27345 << shift_bits__h31289 ;
  assign word64__h36849 = cache_rg_st_amo_val[63:0] << shift_bits__h38178 ;
  assign word64__h38175 =
	     (cache_rg_width_code == 3'd2) ?
	       new_st_val__h38342 :
	       _theResult_____2__h38330 ;
  assign word64__h38230 = word64__h38175 << shift_bits__h38178 ;
  assign x5715_BITS_103_TO_96__q76 = x__h35715[103:96] ;
  assign x5715_BITS_111_TO_104__q79 = x__h35715[111:104] ;
  assign x5715_BITS_111_TO_96__q77 = x__h35715[111:96] ;
  assign x5715_BITS_119_TO_112__q80 = x__h35715[119:112] ;
  assign x5715_BITS_127_TO_112__q81 = x__h35715[127:112] ;
  assign x5715_BITS_127_TO_120__q82 = x__h35715[127:120] ;
  assign x5715_BITS_127_TO_64__q71 = x__h35715[127:64] ;
  assign x5715_BITS_127_TO_96__q78 = x__h35715[127:96] ;
  assign x5715_BITS_15_TO_0__q54 = x__h35715[15:0] ;
  assign x5715_BITS_15_TO_8__q57 = x__h35715[15:8] ;
  assign x5715_BITS_23_TO_16__q58 = x__h35715[23:16] ;
  assign x5715_BITS_31_TO_0__q55 = x__h35715[31:0] ;
  assign x5715_BITS_31_TO_16__q59 = x__h35715[31:16] ;
  assign x5715_BITS_31_TO_24__q60 = x__h35715[31:24] ;
  assign x5715_BITS_39_TO_32__q61 = x__h35715[39:32] ;
  assign x5715_BITS_47_TO_32__q62 = x__h35715[47:32] ;
  assign x5715_BITS_47_TO_40__q64 = x__h35715[47:40] ;
  assign x5715_BITS_55_TO_48__q65 = x__h35715[55:48] ;
  assign x5715_BITS_63_TO_0__q56 = x__h35715[63:0] ;
  assign x5715_BITS_63_TO_32__q63 = x__h35715[63:32] ;
  assign x5715_BITS_63_TO_48__q66 = x__h35715[63:48] ;
  assign x5715_BITS_63_TO_56__q67 = x__h35715[63:56] ;
  assign x5715_BITS_71_TO_64__q68 = x__h35715[71:64] ;
  assign x5715_BITS_79_TO_64__q69 = x__h35715[79:64] ;
  assign x5715_BITS_79_TO_72__q72 = x__h35715[79:72] ;
  assign x5715_BITS_7_TO_0__q53 = x__h35715[7:0] ;
  assign x5715_BITS_87_TO_80__q73 = x__h35715[87:80] ;
  assign x5715_BITS_95_TO_64__q70 = x__h35715[95:64] ;
  assign x5715_BITS_95_TO_80__q74 = x__h35715[95:80] ;
  assign x5715_BITS_95_TO_88__q75 = x__h35715[95:88] ;
  assign x7492_BITS_31_TO_0__q47 = x__h27492[31:0] ;
  assign x8487_BITS_31_TO_0__q83 = x__h38487[31:0] ;
  assign x__h22809 =
	     (cache_rg_width_code == 3'd3 && cache_rg_st_amo_val[128]) ?
	       cache_ram_word128_set$DOB[129:128] | x__h27149 :
	       cache_ram_word128_set_b_read__58_BITS_129_TO_1_ETC___d559 ;
  assign x__h27149 = 2'd1 << x__h27234 ;
  assign x__h27234 = { 3'd0, cache_rg_addr[3] } ;
  assign x__h27345 =
	     (cache_rg_width_code == 3'd2) ?
	       new_st_val__h27347 :
	       _theResult_____2__h27201 ;
  assign x__h33463 =
	     { cache_master_xactor_shim_rff_rv$port1__read[0],
	       cache_rg_lower_tag } ;
  assign x__h33468 =
	     { cache_master_xactor_shim_rff_rv$port1__read[67:4],
	       cache_rg_lower_word64 } ;
  assign y__h27217 = ~x__h27149 ;
  assign y__h7672 =
	     {130{cache_ram_state_and_ctag_cset$DOB[22] &&
		  cache_ram_state_and_ctag_cset_b_read__24_BITS__ETC___d130}} ;
  always@(cache_rg_width_code)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4: x__h25917 = 128'd1;
      default: x__h25917 = 128'd0;
    endcase
  end
  always@(cache_rg_width_code)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'd2, 3'd3: size_val__h37631 = cache_rg_width_code;
      default: size_val__h37631 = 3'b100;
    endcase
  end
  always@(cache_rg_width_code)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'd2, 3'd3:
	  _theResult___snd_fst_val__h38249 = cache_rg_width_code;
      default: _theResult___snd_fst_val__h38249 = 3'b111;
    endcase
  end
  always@(cache_rg_width_code or
	  strobe128__h38231 or
	  strobe128__h38235 or strobe128__h38239 or strobe128__h38243)
  begin
    case (cache_rg_width_code)
      3'd0: mem_req_wr_data_wstrb__h38302 = strobe128__h38231;
      3'd1: mem_req_wr_data_wstrb__h38302 = strobe128__h38235;
      3'd2: mem_req_wr_data_wstrb__h38302 = strobe128__h38239;
      3'd3: mem_req_wr_data_wstrb__h38302 = strobe128__h38243;
      default: mem_req_wr_data_wstrb__h38302 = 8'd0;
    endcase
  end
  always@(cache_rg_width_code or
	  strobe128__h31342 or
	  strobe128__h31346 or strobe128__h31350 or strobe128__h31354)
  begin
    case (cache_rg_width_code)
      3'd0: mem_req_wr_data_wstrb__h31413 = strobe128__h31342;
      3'd1: mem_req_wr_data_wstrb__h31413 = strobe128__h31346;
      3'd2: mem_req_wr_data_wstrb__h31413 = strobe128__h31350;
      3'd3: mem_req_wr_data_wstrb__h31413 = strobe128__h31354;
      default: mem_req_wr_data_wstrb__h31413 = 8'd0;
    endcase
  end
  always@(cache_rg_width_code or cache_rg_st_amo_val or word64__h26449)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'd2, 3'd3: mem_req_wr_data_wdata__h26579 = word64__h26449;
      default: mem_req_wr_data_wdata__h26579 = cache_rg_st_amo_val[63:0];
    endcase
  end
  always@(cache_rg_width_code or cache_rg_st_amo_val or word64__h36849)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'd2, 3'd3: mem_req_wr_data_wdata__h36920 = word64__h36849;
      default: mem_req_wr_data_wdata__h36920 = cache_rg_st_amo_val[63:0];
    endcase
  end
  always@(cache_rg_addr or result__h7622 or result__h20468)
  begin
    case (cache_rg_addr[3:0])
      4'h0: _theResult___fst__h7620 = result__h7622;
      4'h8: _theResult___fst__h7620 = result__h20468;
      default: _theResult___fst__h7620 = 128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d442 or
	  SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d446)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  _theResult___fst__h28497 =
	      SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d442;
      4'h8:
	  _theResult___fst__h28497 =
	      SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d446;
      default: _theResult___fst__h28497 = 128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h21369 or
	  result__h21402 or result__h21435 or result__h21468)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d439 =
	      result__h21369;
      4'h4:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d439 =
	      result__h21402;
      4'h8:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d439 =
	      result__h21435;
      4'hC:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d439 =
	      result__h21468;
      default: IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d439 =
		   128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d422 or
	  SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d426 or
	  SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d430 or
	  SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d434)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d529 =
	      SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d422;
      4'h4:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d529 =
	      SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d426;
      4'h8:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d529 =
	      SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d430;
      4'hC:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d529 =
	      SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d434;
      default: IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d529 =
		   128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d382 or
	  SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d386 or
	  SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d390 or
	  SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d394 or
	  SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d398 or
	  SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d402 or
	  SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d406 or
	  SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d410)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d525 =
	      SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d382;
      4'h2:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d525 =
	      SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d386;
      4'h4:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d525 =
	      SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d390;
      4'h6:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d525 =
	      SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d394;
      4'h8:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d525 =
	      SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d398;
      4'hA:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d525 =
	      SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d402;
      4'hC:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d525 =
	      SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d406;
      4'hE:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d525 =
	      SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d410;
      default: IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d525 =
		   128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h21091 or
	  result__h21124 or
	  result__h21157 or
	  result__h21190 or
	  result__h21223 or
	  result__h21256 or result__h21289 or result__h21322)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d419 =
	      result__h21091;
      4'h2:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d419 =
	      result__h21124;
      4'h4:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d419 =
	      result__h21157;
      4'h6:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d419 =
	      result__h21190;
      4'h8:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d419 =
	      result__h21223;
      4'hA:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d419 =
	      result__h21256;
      4'hC:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d419 =
	      result__h21289;
      4'hE:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d419 =
	      result__h21322;
      default: IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d419 =
		   128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h20536 or
	  result__h20574 or
	  result__h20607 or
	  result__h20640 or
	  result__h20673 or
	  result__h20706 or
	  result__h20739 or
	  result__h20772 or
	  result__h20805 or
	  result__h20838 or
	  result__h20871 or
	  result__h20904 or
	  result__h20937 or
	  result__h20970 or result__h21003 or result__h21036)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d379 =
	      result__h20536;
      4'h1:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d379 =
	      result__h20574;
      4'h2:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d379 =
	      result__h20607;
      4'h3:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d379 =
	      result__h20640;
      4'h4:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d379 =
	      result__h20673;
      4'h5:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d379 =
	      result__h20706;
      4'h6:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d379 =
	      result__h20739;
      4'h7:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d379 =
	      result__h20772;
      4'h8:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d379 =
	      result__h20805;
      4'h9:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d379 =
	      result__h20838;
      4'hA:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d379 =
	      result__h20871;
      4'hB:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d379 =
	      result__h20904;
      4'hC:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d379 =
	      result__h20937;
      4'hD:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d379 =
	      result__h20970;
      4'hE:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d379 =
	      result__h21003;
      4'hF:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d379 =
	      result__h21036;
    endcase
  end
  always@(cache_rg_width_code or
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d379 or
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d419 or
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d439 or
	  _theResult___fst__h7620 or
	  cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274)
  begin
    case (cache_rg_width_code)
      3'd0:
	  x__h20525 =
	      IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d379;
      3'd1:
	  x__h20525 =
	      IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d419;
      3'd2:
	  x__h20525 =
	      IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d439;
      3'd3: x__h20525 = _theResult___fst__h7620;
      3'd4:
	  x__h20525 =
	      cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[127:0];
      default: x__h20525 = 128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d288 or
	  SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d293 or
	  SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d298 or
	  SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d303 or
	  SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d308 or
	  SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d313 or
	  SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d318 or
	  SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d323 or
	  SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d327 or
	  SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d332 or
	  SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d337 or
	  SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d342 or
	  SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d347 or
	  SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d352 or
	  SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d357 or
	  SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d362)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d517 =
	      SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d288;
      4'h1:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d517 =
	      SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d293;
      4'h2:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d517 =
	      SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d298;
      4'h3:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d517 =
	      SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d303;
      4'h4:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d517 =
	      SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d308;
      4'h5:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d517 =
	      SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d313;
      4'h6:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d517 =
	      SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d318;
      4'h7:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d517 =
	      SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d323;
      4'h8:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d517 =
	      SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d327;
      4'h9:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d517 =
	      SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d332;
      4'hA:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d517 =
	      SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d337;
      4'hB:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d517 =
	      SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d342;
      4'hC:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d517 =
	      SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d347;
      4'hD:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d517 =
	      SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d352;
      4'hE:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d517 =
	      SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d357;
      4'hF:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d517 =
	      SEXT_cache_ram_word128_set_b_read__58_AND_cach_ETC___d362;
    endcase
  end
  always@(cache_rg_width_code or
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d517 or
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d525 or
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d529 or
	  _theResult___fst__h28497 or
	  cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274)
  begin
    case (cache_rg_width_code)
      3'd0:
	  x__h27492 =
	      IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d517;
      3'd1:
	  x__h27492 =
	      IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d525;
      3'd2:
	  x__h27492 =
	      IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d529;
      3'd3: x__h27492 = _theResult___fst__h28497;
      3'd4:
	  x__h27492 =
	      cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274[127:0];
      default: x__h27492 = 128'd0;
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or cache_rg_st_amo_val)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d650 =
	      { cache_ram_word128_set$DOB[127:32],
		cache_rg_st_amo_val[31:0] };
      4'h4:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d650 =
	      { cache_ram_word128_set$DOB[127:64],
		cache_rg_st_amo_val[31:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h8:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d650 =
	      { cache_ram_word128_set$DOB[127:96],
		cache_rg_st_amo_val[31:0],
		cache_ram_word128_set$DOB[63:0] };
      4'hC:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d650 =
	      { cache_rg_st_amo_val[31:0], cache_ram_word128_set$DOB[95:0] };
      default: IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d650 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or cache_rg_st_amo_val)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d641 =
	      { cache_ram_word128_set$DOB[127:16],
		cache_rg_st_amo_val[15:0] };
      4'h2:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d641 =
	      { cache_ram_word128_set$DOB[127:32],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[15:0] };
      4'h4:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d641 =
	      { cache_ram_word128_set$DOB[127:48],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h6:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d641 =
	      { cache_ram_word128_set$DOB[127:64],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[47:0] };
      4'h8:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d641 =
	      { cache_ram_word128_set$DOB[127:80],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[63:0] };
      4'hA:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d641 =
	      { cache_ram_word128_set$DOB[127:96],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[79:0] };
      4'hC:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d641 =
	      { cache_ram_word128_set$DOB[127:112],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[95:0] };
      4'hE:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d641 =
	      { cache_rg_st_amo_val[15:0], cache_ram_word128_set$DOB[111:0] };
      default: IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d641 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or cache_rg_st_amo_val)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d624 =
	      { cache_ram_word128_set$DOB[127:8], cache_rg_st_amo_val[7:0] };
      4'h1:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d624 =
	      { cache_ram_word128_set$DOB[127:16],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[7:0] };
      4'h2:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d624 =
	      { cache_ram_word128_set$DOB[127:24],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[15:0] };
      4'h3:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d624 =
	      { cache_ram_word128_set$DOB[127:32],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[23:0] };
      4'h4:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d624 =
	      { cache_ram_word128_set$DOB[127:40],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h5:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d624 =
	      { cache_ram_word128_set$DOB[127:48],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[39:0] };
      4'h6:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d624 =
	      { cache_ram_word128_set$DOB[127:56],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[47:0] };
      4'h7:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d624 =
	      { cache_ram_word128_set$DOB[127:64],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[55:0] };
      4'h8:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d624 =
	      { cache_ram_word128_set$DOB[127:72],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[63:0] };
      4'h9:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d624 =
	      { cache_ram_word128_set$DOB[127:80],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[71:0] };
      4'hA:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d624 =
	      { cache_ram_word128_set$DOB[127:88],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[79:0] };
      4'hB:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d624 =
	      { cache_ram_word128_set$DOB[127:96],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[87:0] };
      4'hC:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d624 =
	      { cache_ram_word128_set$DOB[127:104],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[95:0] };
      4'hD:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d624 =
	      { cache_ram_word128_set$DOB[127:112],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[103:0] };
      4'hE:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d624 =
	      { cache_ram_word128_set$DOB[127:120],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[111:0] };
      4'hF:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d624 =
	      { cache_rg_st_amo_val[7:0], cache_ram_word128_set$DOB[119:0] };
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or cache_rg_st_amo_val)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q48 =
	      { cache_ram_word128_set$DOB[127:64],
		cache_rg_st_amo_val[63:0] };
      4'h8:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q48 =
	      { cache_rg_st_amo_val[63:0], cache_ram_word128_set$DOB[63:0] };
      default: CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q48 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_width_code or
	  cache_ram_word128_set$DOB or
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d624 or
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d641 or
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d650 or
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q48 or
	  cache_rg_st_amo_val)
  begin
    case (cache_rg_width_code)
      3'd0:
	  x__h22937 =
	      IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d624;
      3'd1:
	  x__h22937 =
	      IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d641;
      3'd2:
	  x__h22937 =
	      IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d650;
      3'd3:
	  x__h22937 = CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q48;
      3'd4: x__h22937 = cache_rg_st_amo_val[127:0];
      default: x__h22937 = cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_amo_funct7 or
	  new_st_val__h28616 or
	  new_st_val__h27440 or
	  w2__h27195 or
	  new_st_val__h28588 or
	  new_st_val__h28596 or
	  new_st_val__h28592 or
	  new_st_val__h28611 or new_st_val__h28600 or new_st_val__h28605)
  begin
    case (cache_rg_amo_funct7[6:2])
      5'b0: _theResult_____2__h27201 = new_st_val__h27440;
      5'b00001: _theResult_____2__h27201 = w2__h27195;
      5'b00100: _theResult_____2__h27201 = new_st_val__h28588;
      5'b01000: _theResult_____2__h27201 = new_st_val__h28596;
      5'b01100: _theResult_____2__h27201 = new_st_val__h28592;
      5'b10000: _theResult_____2__h27201 = new_st_val__h28611;
      5'b11000: _theResult_____2__h27201 = new_st_val__h28600;
      5'b11100: _theResult_____2__h27201 = new_st_val__h28605;
      default: _theResult_____2__h27201 = new_st_val__h28616;
    endcase
  end
  always@(cache_rg_width_code or _theResult_____2__h27201 or word64__h31341)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'd2, 3'd3: mem_req_wr_data_wdata__h31412 = word64__h31341;
      default: mem_req_wr_data_wdata__h31412 = _theResult_____2__h27201;
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or x__h27345)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d760 =
	      { cache_ram_word128_set$DOB[127:32], x__h27345[31:0] };
      4'h4:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d760 =
	      { cache_ram_word128_set$DOB[127:64],
		x__h27345[31:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h8:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d760 =
	      { cache_ram_word128_set$DOB[127:96],
		x__h27345[31:0],
		cache_ram_word128_set$DOB[63:0] };
      4'hC:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d760 =
	      { x__h27345[31:0], cache_ram_word128_set$DOB[95:0] };
      default: IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d760 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or x__h27345)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d751 =
	      { cache_ram_word128_set$DOB[127:16], x__h27345[15:0] };
      4'h2:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d751 =
	      { cache_ram_word128_set$DOB[127:32],
		x__h27345[15:0],
		cache_ram_word128_set$DOB[15:0] };
      4'h4:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d751 =
	      { cache_ram_word128_set$DOB[127:48],
		x__h27345[15:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h6:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d751 =
	      { cache_ram_word128_set$DOB[127:64],
		x__h27345[15:0],
		cache_ram_word128_set$DOB[47:0] };
      4'h8:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d751 =
	      { cache_ram_word128_set$DOB[127:80],
		x__h27345[15:0],
		cache_ram_word128_set$DOB[63:0] };
      4'hA:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d751 =
	      { cache_ram_word128_set$DOB[127:96],
		x__h27345[15:0],
		cache_ram_word128_set$DOB[79:0] };
      4'hC:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d751 =
	      { cache_ram_word128_set$DOB[127:112],
		x__h27345[15:0],
		cache_ram_word128_set$DOB[95:0] };
      4'hE:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d751 =
	      { x__h27345[15:0], cache_ram_word128_set$DOB[111:0] };
      default: IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d751 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or x__h27345)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d734 =
	      { cache_ram_word128_set$DOB[127:8], x__h27345[7:0] };
      4'h1:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d734 =
	      { cache_ram_word128_set$DOB[127:16],
		x__h27345[7:0],
		cache_ram_word128_set$DOB[7:0] };
      4'h2:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d734 =
	      { cache_ram_word128_set$DOB[127:24],
		x__h27345[7:0],
		cache_ram_word128_set$DOB[15:0] };
      4'h3:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d734 =
	      { cache_ram_word128_set$DOB[127:32],
		x__h27345[7:0],
		cache_ram_word128_set$DOB[23:0] };
      4'h4:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d734 =
	      { cache_ram_word128_set$DOB[127:40],
		x__h27345[7:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h5:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d734 =
	      { cache_ram_word128_set$DOB[127:48],
		x__h27345[7:0],
		cache_ram_word128_set$DOB[39:0] };
      4'h6:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d734 =
	      { cache_ram_word128_set$DOB[127:56],
		x__h27345[7:0],
		cache_ram_word128_set$DOB[47:0] };
      4'h7:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d734 =
	      { cache_ram_word128_set$DOB[127:64],
		x__h27345[7:0],
		cache_ram_word128_set$DOB[55:0] };
      4'h8:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d734 =
	      { cache_ram_word128_set$DOB[127:72],
		x__h27345[7:0],
		cache_ram_word128_set$DOB[63:0] };
      4'h9:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d734 =
	      { cache_ram_word128_set$DOB[127:80],
		x__h27345[7:0],
		cache_ram_word128_set$DOB[71:0] };
      4'hA:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d734 =
	      { cache_ram_word128_set$DOB[127:88],
		x__h27345[7:0],
		cache_ram_word128_set$DOB[79:0] };
      4'hB:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d734 =
	      { cache_ram_word128_set$DOB[127:96],
		x__h27345[7:0],
		cache_ram_word128_set$DOB[87:0] };
      4'hC:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d734 =
	      { cache_ram_word128_set$DOB[127:104],
		x__h27345[7:0],
		cache_ram_word128_set$DOB[95:0] };
      4'hD:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d734 =
	      { cache_ram_word128_set$DOB[127:112],
		x__h27345[7:0],
		cache_ram_word128_set$DOB[103:0] };
      4'hE:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d734 =
	      { cache_ram_word128_set$DOB[127:120],
		x__h27345[7:0],
		cache_ram_word128_set$DOB[111:0] };
      4'hF:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d734 =
	      { x__h27345[7:0], cache_ram_word128_set$DOB[119:0] };
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or x__h27345)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q50 =
	      { cache_ram_word128_set$DOB[127:64], x__h27345 };
      4'h8:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q50 =
	      { x__h27345, cache_ram_word128_set$DOB[63:0] };
      default: CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q50 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_width_code or
	  cache_ram_word128_set$DOB or
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d734 or
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d751 or
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d760 or
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q50 or
	  x__h27345)
  begin
    case (cache_rg_width_code)
      3'd0:
	  x__h27254 =
	      IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d734;
      3'd1:
	  x__h27254 =
	      IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d751;
      3'd2:
	  x__h27254 =
	      IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d760;
      3'd3:
	  x__h27254 = CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q50;
      3'd4: x__h27254 = { 64'd0, x__h27345 };
      default: x__h27254 = cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_addr or
	  result__h36023 or
	  result__h36056 or result__h36089 or result__h36122)
  begin
    case (cache_rg_addr[2:0])
      3'd0:
	  IF_cache_rg_addr_7_BITS_2_TO_0_93_EQ_0_82_THEN_ETC___d1049 =
	      result__h36023;
      3'd2:
	  IF_cache_rg_addr_7_BITS_2_TO_0_93_EQ_0_82_THEN_ETC___d1049 =
	      result__h36056;
      3'd4:
	  IF_cache_rg_addr_7_BITS_2_TO_0_93_EQ_0_82_THEN_ETC___d1049 =
	      result__h36089;
      3'd6:
	  IF_cache_rg_addr_7_BITS_2_TO_0_93_EQ_0_82_THEN_ETC___d1049 =
	      result__h36122;
      default: IF_cache_rg_addr_7_BITS_2_TO_0_93_EQ_0_82_THEN_ETC___d1049 =
		   128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h35726 or
	  result__h35762 or
	  result__h35795 or
	  result__h35828 or
	  result__h35861 or
	  result__h35894 or result__h35927 or result__h35960)
  begin
    case (cache_rg_addr[2:0])
      3'd0:
	  IF_cache_rg_addr_7_BITS_2_TO_0_93_EQ_0_82_THEN_ETC___d1029 =
	      result__h35726;
      3'd1:
	  IF_cache_rg_addr_7_BITS_2_TO_0_93_EQ_0_82_THEN_ETC___d1029 =
	      result__h35762;
      3'd2:
	  IF_cache_rg_addr_7_BITS_2_TO_0_93_EQ_0_82_THEN_ETC___d1029 =
	      result__h35795;
      3'd3:
	  IF_cache_rg_addr_7_BITS_2_TO_0_93_EQ_0_82_THEN_ETC___d1029 =
	      result__h35828;
      3'd4:
	  IF_cache_rg_addr_7_BITS_2_TO_0_93_EQ_0_82_THEN_ETC___d1029 =
	      result__h35861;
      3'd5:
	  IF_cache_rg_addr_7_BITS_2_TO_0_93_EQ_0_82_THEN_ETC___d1029 =
	      result__h35894;
      3'd6:
	  IF_cache_rg_addr_7_BITS_2_TO_0_93_EQ_0_82_THEN_ETC___d1029 =
	      result__h35927;
      3'd7:
	  IF_cache_rg_addr_7_BITS_2_TO_0_93_EQ_0_82_THEN_ETC___d1029 =
	      result__h35960;
    endcase
  end
  always@(cache_rg_addr or result__h36173 or result__h36206)
  begin
    case (cache_rg_addr[2:0])
      3'd0:
	  CASE_cache_rg_addr_BITS_2_TO_0_0_result6173_4__ETC__q52 =
	      result__h36173;
      3'd4:
	  CASE_cache_rg_addr_BITS_2_TO_0_0_result6173_4__ETC__q52 =
	      result__h36206;
      default: CASE_cache_rg_addr_BITS_2_TO_0_0_result6173_4__ETC__q52 =
		   128'd0;
    endcase
  end
  always@(cache_rg_width_code or
	  IF_cache_rg_addr_7_BITS_2_TO_0_93_EQ_0_82_THEN_ETC___d1029 or
	  IF_cache_rg_addr_7_BITS_2_TO_0_93_EQ_0_82_THEN_ETC___d1049 or
	  CASE_cache_rg_addr_BITS_2_TO_0_0_result6173_4__ETC__q52 or
	  _theResult___fst__h35665 or word128__h35560)
  begin
    case (cache_rg_width_code)
      3'd0:
	  x__h35715 =
	      IF_cache_rg_addr_7_BITS_2_TO_0_93_EQ_0_82_THEN_ETC___d1029;
      3'd1:
	  x__h35715 =
	      IF_cache_rg_addr_7_BITS_2_TO_0_93_EQ_0_82_THEN_ETC___d1049;
      3'd2:
	  x__h35715 = CASE_cache_rg_addr_BITS_2_TO_0_0_result6173_4__ETC__q52;
      3'd3: x__h35715 = _theResult___fst__h35665;
      3'd4: x__h35715 = word128__h35560;
      default: x__h35715 = 128'd0;
    endcase
  end
  always@(cache_rg_addr or result__h40198 or result__h40227)
  begin
    case (cache_rg_addr[3:0])
      4'h0: _theResult___fst__h40196 = result__h40198;
      4'h8: _theResult___fst__h40196 = result__h40227;
      default: _theResult___fst__h40196 = 128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h40048 or
	  result__h40080 or result__h40112 or result__h40144)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d1201 =
	      result__h40048;
      4'h4:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d1201 =
	      result__h40080;
      4'h8:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d1201 =
	      result__h40112;
      4'hC:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d1201 =
	      result__h40144;
      default: IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d1201 =
		   128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h39778 or
	  result__h39810 or
	  result__h39842 or
	  result__h39874 or
	  result__h39906 or
	  result__h39938 or result__h39970 or result__h40002)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d1189 =
	      result__h39778;
      4'h2:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d1189 =
	      result__h39810;
      4'h4:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d1189 =
	      result__h39842;
      4'h6:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d1189 =
	      result__h39874;
      4'h8:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d1189 =
	      result__h39906;
      4'hA:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d1189 =
	      result__h39938;
      4'hC:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d1189 =
	      result__h39970;
      4'hE:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d1189 =
	      result__h40002;
      default: IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d1189 =
		   128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h38568 or
	  result__h39276 or
	  result__h39308 or
	  result__h39340 or
	  result__h39372 or
	  result__h39404 or
	  result__h39436 or
	  result__h39468 or
	  result__h39500 or
	  result__h39532 or
	  result__h39564 or
	  result__h39596 or
	  result__h39628 or
	  result__h39660 or result__h39692 or result__h39724)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d1165 =
	      result__h38568;
      4'h1:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d1165 =
	      result__h39276;
      4'h2:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d1165 =
	      result__h39308;
      4'h3:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d1165 =
	      result__h39340;
      4'h4:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d1165 =
	      result__h39372;
      4'h5:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d1165 =
	      result__h39404;
      4'h6:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d1165 =
	      result__h39436;
      4'h7:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d1165 =
	      result__h39468;
      4'h8:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d1165 =
	      result__h39500;
      4'h9:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d1165 =
	      result__h39532;
      4'hA:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d1165 =
	      result__h39564;
      4'hB:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d1165 =
	      result__h39596;
      4'hC:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d1165 =
	      result__h39628;
      4'hD:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d1165 =
	      result__h39660;
      4'hE:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d1165 =
	      result__h39692;
      4'hF:
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d1165 =
	      result__h39724;
    endcase
  end
  always@(cache_rg_width_code or
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d1165 or
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d1189 or
	  IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d1201 or
	  _theResult___fst__h40196 or x__h35715)
  begin
    case (cache_rg_width_code)
      3'd0:
	  x__h38487 =
	      IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d1165;
      3'd1:
	  x__h38487 =
	      IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d1189;
      3'd2:
	  x__h38487 =
	      IF_cache_rg_addr_7_BITS_3_TO_0_55_EQ_0x0_08_TH_ETC___d1201;
      3'd3: x__h38487 = _theResult___fst__h40196;
      3'd4: x__h38487 = x__h35715;
      default: x__h38487 = 128'd0;
    endcase
  end
  always@(cache_rg_amo_funct7 or
	  new_st_val__h40317 or
	  new_st_val__h38435 or
	  w2__h27195 or
	  new_st_val__h40289 or
	  new_st_val__h40297 or
	  new_st_val__h40293 or
	  new_st_val__h40312 or new_st_val__h40301 or new_st_val__h40306)
  begin
    case (cache_rg_amo_funct7[6:2])
      5'b0: _theResult_____2__h38330 = new_st_val__h38435;
      5'b00001: _theResult_____2__h38330 = w2__h27195;
      5'b00100: _theResult_____2__h38330 = new_st_val__h40289;
      5'b01000: _theResult_____2__h38330 = new_st_val__h40297;
      5'b01100: _theResult_____2__h38330 = new_st_val__h40293;
      5'b10000: _theResult_____2__h38330 = new_st_val__h40312;
      5'b11000: _theResult_____2__h38330 = new_st_val__h40301;
      5'b11100: _theResult_____2__h38330 = new_st_val__h40306;
      default: _theResult_____2__h38330 = new_st_val__h40317;
    endcase
  end
  always@(cache_rg_width_code or _theResult_____2__h38330 or word64__h38230)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'd2, 3'd3: mem_req_wr_data_wdata__h38301 = word64__h38230;
      default: mem_req_wr_data_wdata__h38301 = _theResult_____2__h38330;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cache_cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	cache_crg_commit <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_crg_sb_to_load_delay <= `BSV_ASSIGNMENT_DELAY 11'd0;
	cache_ctr_wr_rsps_pending_inrg <= `BSV_ASSIGNMENT_DELAY 4'd0;
	cache_ctr_wr_rsps_pending_outrg <= `BSV_ASSIGNMENT_DELAY 4'd0;
	cache_master_xactor_clearing <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_master_xactor_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	    98'h0AAAAAAAAAAAAAAAAAAAAAAAA;
	cache_master_xactor_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	    98'h0AAAAAAAAAAAAAAAAAAAAAAAA;
	cache_master_xactor_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY 7'd42;
	cache_master_xactor_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	    73'h0AAAAAAAAAAAAAAAAAA;
	cache_master_xactor_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	    75'h2AAAAAAAAAAAAAAAAAA;
	cache_rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY 6'd0;
	cache_rg_lower_word64_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_state <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (cache_cfg_verbosity$EN)
	  cache_cfg_verbosity <= `BSV_ASSIGNMENT_DELAY
	      cache_cfg_verbosity$D_IN;
	if (cache_crg_commit$EN)
	  cache_crg_commit <= `BSV_ASSIGNMENT_DELAY cache_crg_commit$D_IN;
	if (cache_crg_sb_to_load_delay$EN)
	  cache_crg_sb_to_load_delay <= `BSV_ASSIGNMENT_DELAY
	      cache_crg_sb_to_load_delay$D_IN;
	if (cache_ctr_wr_rsps_pending_inrg$EN)
	  cache_ctr_wr_rsps_pending_inrg <= `BSV_ASSIGNMENT_DELAY
	      cache_ctr_wr_rsps_pending_inrg$D_IN;
	if (cache_ctr_wr_rsps_pending_outrg$EN)
	  cache_ctr_wr_rsps_pending_outrg <= `BSV_ASSIGNMENT_DELAY
	      cache_ctr_wr_rsps_pending_outrg$D_IN;
	if (cache_master_xactor_clearing$EN)
	  cache_master_xactor_clearing <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_clearing$D_IN;
	if (cache_master_xactor_shim_arff_rv$EN)
	  cache_master_xactor_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_arff_rv$D_IN;
	if (cache_master_xactor_shim_awff_rv$EN)
	  cache_master_xactor_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_awff_rv$D_IN;
	if (cache_master_xactor_shim_bff_rv$EN)
	  cache_master_xactor_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_bff_rv$D_IN;
	if (cache_master_xactor_shim_rff_rv$EN)
	  cache_master_xactor_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_rff_rv$D_IN;
	if (cache_master_xactor_shim_wff_rv$EN)
	  cache_master_xactor_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_wff_rv$D_IN;
	if (cache_rg_cset_in_cache$EN)
	  cache_rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_cset_in_cache$D_IN;
	if (cache_rg_lower_word64_full$EN)
	  cache_rg_lower_word64_full <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_lower_word64_full$D_IN;
	if (cache_rg_lrsc_valid$EN)
	  cache_rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_lrsc_valid$D_IN;
	if (cache_rg_state$EN)
	  cache_rg_state <= `BSV_ASSIGNMENT_DELAY cache_rg_state$D_IN;
      end
    if (cache_rg_addr$EN)
      cache_rg_addr <= `BSV_ASSIGNMENT_DELAY cache_rg_addr$D_IN;
    if (cache_rg_amo_funct7$EN)
      cache_rg_amo_funct7 <= `BSV_ASSIGNMENT_DELAY cache_rg_amo_funct7$D_IN;
    if (cache_rg_error_during_refill$EN)
      cache_rg_error_during_refill <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_error_during_refill$D_IN;
    if (cache_rg_exc_code$EN)
      cache_rg_exc_code <= `BSV_ASSIGNMENT_DELAY cache_rg_exc_code$D_IN;
    if (cache_rg_is_unsigned$EN)
      cache_rg_is_unsigned <= `BSV_ASSIGNMENT_DELAY cache_rg_is_unsigned$D_IN;
    if (cache_rg_ld_val$EN)
      cache_rg_ld_val <= `BSV_ASSIGNMENT_DELAY cache_rg_ld_val$D_IN;
    if (cache_rg_lower_tag$EN)
      cache_rg_lower_tag <= `BSV_ASSIGNMENT_DELAY cache_rg_lower_tag$D_IN;
    if (cache_rg_lower_word64$EN)
      cache_rg_lower_word64 <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_lower_word64$D_IN;
    if (cache_rg_lrsc_pa$EN)
      cache_rg_lrsc_pa <= `BSV_ASSIGNMENT_DELAY cache_rg_lrsc_pa$D_IN;
    if (cache_rg_op$EN) cache_rg_op <= `BSV_ASSIGNMENT_DELAY cache_rg_op$D_IN;
    if (cache_rg_pa$EN) cache_rg_pa <= `BSV_ASSIGNMENT_DELAY cache_rg_pa$D_IN;
    if (cache_rg_pte_pa$EN)
      cache_rg_pte_pa <= `BSV_ASSIGNMENT_DELAY cache_rg_pte_pa$D_IN;
    if (cache_rg_st_amo_val$EN)
      cache_rg_st_amo_val <= `BSV_ASSIGNMENT_DELAY cache_rg_st_amo_val$D_IN;
    if (cache_rg_width_code$EN)
      cache_rg_width_code <= `BSV_ASSIGNMENT_DELAY cache_rg_width_code$D_IN;
    if (cache_rg_word128_set_in_cache$EN)
      cache_rg_word128_set_in_cache <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_word128_set_in_cache$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cache_cfg_verbosity = 4'hA;
    cache_crg_commit = 1'h0;
    cache_crg_sb_to_load_delay = 11'h2AA;
    cache_ctr_wr_rsps_pending_inrg = 4'hA;
    cache_ctr_wr_rsps_pending_outrg = 4'hA;
    cache_master_xactor_clearing = 1'h0;
    cache_master_xactor_shim_arff_rv = 98'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    cache_master_xactor_shim_awff_rv = 98'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    cache_master_xactor_shim_bff_rv = 7'h2A;
    cache_master_xactor_shim_rff_rv = 73'h0AAAAAAAAAAAAAAAAAA;
    cache_master_xactor_shim_wff_rv = 75'h2AAAAAAAAAAAAAAAAAA;
    cache_rg_addr = 32'hAAAAAAAA;
    cache_rg_amo_funct7 = 7'h2A;
    cache_rg_cset_in_cache = 6'h2A;
    cache_rg_error_during_refill = 1'h0;
    cache_rg_exc_code = 6'h2A;
    cache_rg_is_unsigned = 1'h0;
    cache_rg_ld_val = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    cache_rg_lower_tag = 1'h0;
    cache_rg_lower_word64 = 64'hAAAAAAAAAAAAAAAA;
    cache_rg_lower_word64_full = 1'h0;
    cache_rg_lrsc_pa = 32'hAAAAAAAA;
    cache_rg_lrsc_valid = 1'h0;
    cache_rg_op = 2'h2;
    cache_rg_pa = 32'hAAAAAAAA;
    cache_rg_pte_pa = 32'hAAAAAAAA;
    cache_rg_st_amo_val = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    cache_rg_state = 4'hA;
    cache_rg_width_code = 3'h2;
    cache_rg_word128_set_in_cache = 8'hAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 &&
	  cache_cfg_verbosity != 4'd0 &&
	  !cache_f_reset_reqs$D_OUT)
	begin
	  v__h5715 = $stime;
	  #0;
	end
    v__h5709 = v__h5715 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 &&
	  cache_cfg_verbosity != 4'd0 &&
	  !cache_f_reset_reqs$D_OUT)
	$display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		 v__h5709,
		 "D_MMU_Cache",
		 $signed(32'd64),
		 $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_f_reset_reqs$D_OUT)
	begin
	  v__h5816 = $stime;
	  #0;
	end
    v__h5810 = v__h5816 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_f_reset_reqs$D_OUT)
	$display("%0d: %s.rl_reset: Flushed", v__h5810, "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h6271 = $stime;
	  #0;
	end
    v__h6265 = v__h6271 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h",
		 v__h6265,
		 "D_MMU_Cache",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("        eaddr = {CTag 0x%0h  CSet 0x%0h  Word128 0x%0h  Byte 0x%0h}",
		 pa_ctag__h7188,
		 cache_rg_addr[11:6],
		 cache_rg_addr[5:4],
		 cache_rg_addr[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("        CSet 0x%0x: (state, tag):", cache_rg_addr[11:6]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(" (");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_ram_state_and_ctag_cset$DOB[22])
	$write("CTAG_CLEAN");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  !cache_ram_state_and_ctag_cset$DOB[22])
	$write("CTAG_EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_ram_state_and_ctag_cset$DOB[22])
	$write(", 0x%0x", cache_ram_state_and_ctag_cset$DOB[21:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  !cache_ram_state_and_ctag_cset$DOB[22])
	$write(", --");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(")");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("        CSet 0x%0x, Word128 0x%0x: ",
	       cache_rg_addr[11:6],
	       cache_rg_addr[5:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(" 0x%0x", cache_ram_word128_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("    TLB result: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("VM_Xlate_Result { ", "outcome: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("VM_XLATE_OK");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "pa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 6'h2A, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_1_EQ_0_2_OR_cache_rg_op_1_EQ_2_3_A_ETC___d471)
	begin
	  v__h21668 = $stime;
	  #0;
	end
    v__h21662 = v__h21668 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_1_EQ_0_2_OR_cache_rg_op_1_EQ_2_3_A_ETC___d471)
	$display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		 v__h21662,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274,
		 130'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit_port1__read__5_AND_cache_soc__ETC___d485)
	$display("        AMO LR: reserving PA 0x%0h", cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_1_EQ_0_2_OR_cache_rg_op_1_EQ_2_3_A_ETC___d471)
	$display("        Read-hit: addr 0x%0h word128 0x%0h",
		 cache_rg_addr,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_1_EQ_0_2_OR_cache_rg_op_1_EQ_2_3_A_ETC___d487)
	$display("        Read Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct7_4_BITS_6_TO_2_5_EQ_0b10_6__ETC___d492)
	$display("        AMO LR: cache refill: cancelling LR/SC reservation for PA 0x%0h",
		 cache_rg_lrsc_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op == 2'd1 &&
	  cache_rg_addr_7_EQ_cache_rg_lrsc_pa_05___d175 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("        ST: cancelling LR/SC reservation for PA",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit_port1__read__5_AND_cache_soc__ETC___d821)
	$display("        AMO SC: fail: reserved addr 0x%0h, this address 0x%0h",
		 cache_rg_lrsc_pa,
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct7[6:2] == 5'b00011 &&
	  !cache_rg_lrsc_valid &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("        AMO SC: fail due to invalid LR/SC reservation");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct7[6:2] == 5'b00011 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("        AMO SC result = %0d", lrsc_result__h22058);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d833)
	$display("        Write-Cache-Hit: pa 0x%0h word128 0x%0h",
		 cache_rg_addr,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d833)
	$write("        New Word128_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d833)
	$write("        CSet 0x%0x, Word128 0x%0x: ",
	       cache_rg_addr[11:6],
	       cache_rg_addr[5:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d833)
	$write(" 0x%0x", { x__h22809, x__h22937 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d833)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  (cache_rg_op == 2'd1 ||
	   cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	  NOT_cache_rg_op_1_EQ_2_3_42_OR_NOT_cache_rg_am_ETC___d836)
	$display("        Write-Cache-Miss: pa 0x%0h word128 0x%0h",
		 cache_rg_addr,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d843)
	$display("        Write-Cache-Hit/Miss: eaddr 0x%0h word128 0x%0h",
		 cache_rg_addr,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d843)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d843)
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d843)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d843)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d843)
	$write("'h%h", mem_req_wr_addr_awaddr__h31282);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d843)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d843)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d843)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d843)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d843)
	$write("'h%h", _theResult___snd_fst_val__h38249, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d843)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d843)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d843)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d843)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d843)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d843)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d843)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d843)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d843)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d843)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d843)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d843)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d843)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d843)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d843)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d843)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d843)
	$write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d843)
	$write("'h%h", mem_req_wr_data_wdata__h26579);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d843)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d843)
	$write("'h%h", mem_req_wr_data_wstrb__h31413);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d843)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d843)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d843)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d843)
	$write("'h%h",
	       cache_rg_width_code == 3'd3 && cache_rg_st_amo_val[128],
	       " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d843)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_1_EQ_0_2_41_AND_NOT_cache_rg_o_ETC___d843)
	$display("        => rl_write_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_1_EQ_2_3_AND_cache_rg_amo_funct7_4_ETC___d848)
	begin
	  v__h26154 = $stime;
	  #0;
	end
    v__h26148 = v__h26154 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_1_EQ_2_3_AND_cache_rg_amo_funct7_4_ETC___d848)
	$display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		 v__h26148,
		 "D_MMU_Cache",
		 32'd0,
		 130'd1,
		 130'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_1_EQ_2_3_AND_cache_rg_amo_funct7_4_ETC___d848)
	$display("        AMO SC: Fail response for addr 0x%0h",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_1_EQ_1_9_83_AND_NOT_cache_rg_o_ETC___d853)
	$display("        AMO Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d859)
	$display("        AMO: addr 0x%0h amo_f7 0x%0h width_code %0d is_unsigned %0d rs2_val 0x%0h",
		 cache_rg_addr,
		 cache_rg_amo_funct7,
		 cache_rg_width_code,
		 cache_rg_is_unsigned,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d859)
	$display("          PA 0x%0h ", cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d859)
	$display("          Cache word128 0x%0h, load-result 0x%0h",
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d859)
	$display("          0x%0h  op  0x%0h -> 0x%0h",
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274,
		 cache_ram_word128_set_b_read__58_AND_cache_ram_ETC___d274,
		 { 65'd0, x__h27345 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d859)
	$write("          New Word128_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d859)
	$write("        CSet 0x%0x, Word128 0x%0x: ",
	       cache_rg_addr[11:6],
	       cache_rg_addr[5:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d859)
	$write(" 0x%0x",
	       { cache_ram_word128_set_b_read__58_BITS_129_TO_1_ETC___d559,
		 x__h27254 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d859)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d859)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d859)
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d859)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d859)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d859)
	$write("'h%h", mem_req_wr_addr_awaddr__h31282);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d859)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d859)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d859)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d859)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d859)
	$write("'h%h", _theResult___snd_fst_val__h38249, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d859)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d859)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d859)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d859)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d859)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d859)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d859)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d859)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d859)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d859)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d859)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d859)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d859)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d859)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d859)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d859)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d859)
	$write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d859)
	$write("'h%h", mem_req_wr_data_wdata__h31412);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d859)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d859)
	$write("'h%h", mem_req_wr_data_wstrb__h31413);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d859)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d859)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d859)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d859)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d859)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_1_EQ_1_9_83_AND_NOT_cache_rg_o_ETC___d863)
	$display("        AMO_op: cancelling LR/SC reservation for PA",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_crg_commit$port1__read &&
	  !cache_soc_map$m_is_mem_addr &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("    => IO_REQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_reset &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h5289 = $stime;
	  #0;
	end
    v__h5283 = v__h5289 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_reset &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s.rl_start_reset", v__h5283, "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h35052 = $stime;
	  #0;
	end
    v__h35046 = v__h35052 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s.rl_io_read_req; width_code 0x%0h vaddr %0h  paddr %0h",
		 v__h35046,
		 "D_MMU_Cache",
		 cache_rg_width_code,
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", mem_req_wr_addr_awaddr__h38171);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", size_val__h37631, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_maintain_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h36596 = $stime;
	  #0;
	end
    v__h36590 = v__h36596 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_maintain_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		 v__h36590,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 cache_rg_ld_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h36684 = $stime;
	  #0;
	end
    v__h36678 = v__h36684 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s: rl_io_write_req; width_code 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		 v__h36678,
		 "D_MMU_Cache",
		 cache_rg_width_code,
		 cache_rg_addr,
		 cache_rg_pa,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", mem_req_wr_addr_awaddr__h38171);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", _theResult___snd_fst_val__h38249, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", mem_req_wr_data_wdata__h36920);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", mem_req_wr_data_wstrb__h38302);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h",
	       cache_rg_width_code == 3'd3 && cache_rg_st_amo_val[128],
	       " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_SC_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h37372 = $stime;
	  #0;
	end
    v__h37366 = v__h37372 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_SC_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s: rl_io_AMO_SC_req; width_code 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		 v__h37366,
		 "D_MMU_Cache",
		 cache_rg_width_code,
		 cache_rg_addr,
		 cache_rg_pa,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_SC_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("    FAIL due to I/O address.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_SC_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h37494 = $stime;
	  #0;
	end
    v__h37488 = v__h37494 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s.rl_io_AMO_op_req; width_code 0x%0h vaddr %0h  paddr %0h",
		 v__h37488,
		 "D_MMU_Cache",
		 cache_rg_width_code,
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", mem_req_wr_addr_awaddr__h38171);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", size_val__h37631, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d111 == 4'd0)
	begin
	  v__h41035 = $stime;
	  #0;
	end
    v__h41029 = v__h41035 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d111 == 4'd0)
	$display("%0d: ERROR: %s.rl_discard_write_rsp: unexpected W response (ctr_wr_rsps_pending.value == 0)",
		 v__h41029,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d111 == 4'd0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d111 == 4'd0)
	$write("AXI4_BFlit { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d111 == 4'd0)
	$write("'h%h", cache_master_xactor_shim_bff_rv$port1__read[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d111 == 4'd0)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d111 == 4'd0 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d111 == 4'd0 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d111 == 4'd0 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d111 == 4'd0 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd1 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d111 == 4'd0)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d111 == 4'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d111 == 4'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d111 == 4'd0)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h41282 = $stime;
	  #0;
	end
    v__h41276 = v__h41282 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("%0d: %s.rl_discard_write_rsp: pending %0d ",
	       v__h41276,
	       "D_MMU_Cache",
	       $unsigned(cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d111));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_BFlit { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", cache_master_xactor_shim_bff_rv$port1__read[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	begin
	  v__h41243 = $stime;
	  #0;
	end
    v__h41237 = v__h41243 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$display("%0d: %s.rl_discard_write_rsp: fabric response error: exit",
		 v__h41237,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("AXI4_BFlit { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("'h%h", cache_master_xactor_shim_bff_rv$port1__read[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd1 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h35409 = $stime;
	  #0;
	end
    v__h35403 = v__h35409 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s.rl_io_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		 v__h35403,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[71:68]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[67:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd1 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_master_xactor_shim_rff_rv$port1__read[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  !cache_master_xactor_shim_rff_rv$port1__read[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h36371 = $stime;
	  #0;
	end
    v__h36365 = v__h36371 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		 v__h36365,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 { 1'd0, x__h35715 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h36485 = $stime;
	  #0;
	end
    v__h36479 = v__h36485 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		 v__h36479,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h37795 = $stime;
	  #0;
	end
    v__h37789 = v__h37795 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s.rl_io_AMO_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		 v__h37789,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[71:68]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[67:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd1 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_master_xactor_shim_rff_rv$port1__read[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  !cache_master_xactor_shim_rff_rv$port1__read[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h37990 = $stime;
	  #0;
	end
    v__h37984 = v__h37990 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s: rl_io_AMO_read_rsp; f3 0x%0h  vaddr %0h  paddr %0h  word128 0x%0h",
		 v__h37984,
		 "D_MMU_Cache",
		 cache_rg_width_code,
		 cache_rg_addr,
		 cache_rg_pa,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", mem_req_wr_addr_awaddr__h38171);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", _theResult___snd_fst_val__h38249, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", mem_req_wr_data_wdata__h38301);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", mem_req_wr_data_wstrb__h38302);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h40727 = $stime;
	  #0;
	end
    v__h40721 = v__h40727 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		 v__h40721,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 { 65'd0,
		   IF_cache_rg_width_code_98_EQ_2_03_THEN_SEXT_IF_ETC___d1216 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h38088 = $stime;
	  #0;
	end
    v__h38082 = v__h38088 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s.rl_io_AMO_read_rsp: FABRIC_RSP_ERR: raising trap STORE_AMO_ACCESS_FAULT",
		 v__h38082,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h41673 = $stime;
	  #0;
	end
    v__h41667 = v__h41673 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("%0d: %s.req: op:", v__h41667, "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  req_op == 2'd0)
	$write("CACHE_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  req_op == 2'd1)
	$write("CACHE_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  req_op != 2'd0 &&
	  req_op != 2'd1)
	$write("CACHE_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(" width_code:%0d addr:0x%0h st_value:0x%0h priv:",
	       req_width_code,
	       req_addr,
	       req_st_value);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  req_priv == 2'b0)
	$write("U");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  req_priv == 2'b01)
	$write("S");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  req_priv == 2'b11)
	$write("M");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  req_priv != 2'b0 &&
	  req_priv != 2'b01 &&
	  req_priv != 2'b11)
	$write("RESERVED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(" sstatus_SUM:%0d mstatus_MXR:%0d satp:0x%0h",
	       req_sstatus_SUM,
	       req_mstatus_MXR,
	       req_satp,
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("    amo_funct7 = 0x%0h", req_amo_funct7);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req &&
	  req_width_code_EQ_0b0_307_OR_req_width_code_EQ_ETC___d1348)
	$display("    fa_req_ram_B tagCSet [0x%0x] word128_set [0x%0d]",
		 req_addr[11:6],
		 req_addr[11:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h32008 = $stime;
	  #0;
	end
    v__h32002 = v__h32008 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s.rl_start_cache_refill: ", v__h32002, "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("    To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", cline_fabric_addr__h32061);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 8'd7);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 3'b011, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("    Victim way %0d; => CACHE_REFILL", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_00___d901)
	begin
	  v__h32959 = $stime;
	  #0;
	end
    v__h32953 = v__h32959 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_00___d901)
	$display("%0d: %s.rl_cache_refill_rsps_loop:",
		 v__h32953,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_00___d901)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_00___d901)
	$write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_00___d901)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[71:68]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_00___d901)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_00___d901)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[67:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_00___d901)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_00___d901 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_00___d901 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_00___d901 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_00___d901 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd1 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_00___d901)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_00___d901 &&
	  cache_master_xactor_shim_rff_rv$port1__read[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_00___d901 &&
	  !cache_master_xactor_shim_rff_rv$port1__read[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_00___d901)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_00___d901)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_00___d901)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h33221 = $stime;
	  #0;
	end
    v__h33215 = v__h33221 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d",
		 v__h33215,
		 "D_MMU_Cache",
		 access_exc_code__h5040);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_00___d901)
	$display("        64b fabric: concat with rg_lower_word64: new_word128 0x%0x",
		 { x__h33463, x__h33468 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  cache_rg_word128_set_in_cache[1:0] == 2'd3 &&
	  (cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 ||
	   cache_rg_error_during_refill) &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("    => MODULE_EXCEPTION_RSP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  cache_rg_word128_set_in_cache[1:0] == 2'd3 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  !cache_rg_error_during_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("    => CACHE_REREQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_00___d901)
	$display("        Updating Cache word128_set 0x%0h, word128_in_cline %0d) old => new",
		 cache_rg_word128_set_in_cache,
		 cache_rg_word128_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_00___d901)
	$write("        CSet 0x%0x, Word128 0x%0x: ",
	       cache_rg_addr[11:6],
	       cache_rg_word128_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_00___d901)
	$write(" 0x%0x", cache_ram_word128_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_00___d901)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_00___d901)
	$write("        CSet 0x%0x, Word128 0x%0x: ",
	       cache_rg_addr[11:6],
	       cache_rg_word128_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_00___d901)
	$write(" 0x%0x", { x__h33463, x__h33468 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_00___d901)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  !cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_00___d901)
	$display("        Recording rdata in rg_lower_word64");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_rereq &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("    fa_req_ram_B tagCSet [0x%0x] word128_set [0x%0d]",
		 cache_rg_addr[11:6],
		 cache_rg_addr[11:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
  end
  // synopsys translate_on
endmodule  // mkMMU_DCache

