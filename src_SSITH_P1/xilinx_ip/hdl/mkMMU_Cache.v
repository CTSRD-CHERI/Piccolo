//
// Generated by Bluespec Compiler, version 2019.05.beta1 (build b38abf678, 2019-05-06)
//
//
//
//
// Ports:
// Name                         I/O  size props
// RDY_set_verbosity              O     1 const
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1
// valid                          O     1
// addr                           O    32 reg
// word64                         O    64
// st_amo_val                     O    64
// exc                            O     1
// exc_code                       O     4 reg
// RDY_server_flush_request_put   O     1 reg
// RDY_server_flush_response_get  O     1
// RDY_tlb_flush                  O     1 const
// mem_master_awvalid             O     1 reg
// mem_master_awid                O     4 reg
// mem_master_awaddr              O    64 reg
// mem_master_awlen               O     8 reg
// mem_master_awsize              O     3 reg
// mem_master_awburst             O     2 reg
// mem_master_awlock              O     1 reg
// mem_master_awcache             O     4 reg
// mem_master_awprot              O     3 reg
// mem_master_awqos               O     4 reg
// mem_master_awregion            O     4 reg
// mem_master_wvalid              O     1 reg
// mem_master_wdata               O    64 reg
// mem_master_wstrb               O     8 reg
// mem_master_wlast               O     1 reg
// mem_master_bready              O     1 reg
// mem_master_arvalid             O     1 reg
// mem_master_arid                O     4 reg
// mem_master_araddr              O    64 reg
// mem_master_arlen               O     8 reg
// mem_master_arsize              O     3 reg
// mem_master_arburst             O     2 reg
// mem_master_arlock              O     1 reg
// mem_master_arcache             O     4 reg
// mem_master_arprot              O     3 reg
// mem_master_arqos               O     4 reg
// mem_master_arregion            O     4 reg
// mem_master_rready              O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_verbosity_verbosity        I     4 reg
// req_op                         I     2
// req_f3                         I     3
// req_amo_funct7                 I     7 reg
// req_addr                       I    32
// req_st_value                   I    64
// req_priv                       I     2 unused
// req_sstatus_SUM                I     1 unused
// req_mstatus_MXR                I     1 unused
// req_satp                       I    32 unused
// mem_master_awready             I     1
// mem_master_wready              I     1
// mem_master_bvalid              I     1
// mem_master_bid                 I     4 reg
// mem_master_bresp               I     2 reg
// mem_master_arready             I     1
// mem_master_rvalid              I     1
// mem_master_rid                 I     4 reg
// mem_master_rdata               I    64 reg
// mem_master_rresp               I     2 reg
// mem_master_rlast               I     1 reg
// EN_set_verbosity               I     1
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_req                         I     1
// EN_server_flush_request_put    I     1
// EN_server_flush_response_get   I     1
// EN_tlb_flush                   I     1 unused
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMMU_Cache(CLK,
		   RST_N,

		   set_verbosity_verbosity,
		   EN_set_verbosity,
		   RDY_set_verbosity,

		   EN_server_reset_request_put,
		   RDY_server_reset_request_put,

		   EN_server_reset_response_get,
		   RDY_server_reset_response_get,

		   req_op,
		   req_f3,
		   req_amo_funct7,
		   req_addr,
		   req_st_value,
		   req_priv,
		   req_sstatus_SUM,
		   req_mstatus_MXR,
		   req_satp,
		   EN_req,

		   valid,

		   addr,

		   word64,

		   st_amo_val,

		   exc,

		   exc_code,

		   EN_server_flush_request_put,
		   RDY_server_flush_request_put,

		   EN_server_flush_response_get,
		   RDY_server_flush_response_get,

		   EN_tlb_flush,
		   RDY_tlb_flush,

		   mem_master_awvalid,

		   mem_master_awid,

		   mem_master_awaddr,

		   mem_master_awlen,

		   mem_master_awsize,

		   mem_master_awburst,

		   mem_master_awlock,

		   mem_master_awcache,

		   mem_master_awprot,

		   mem_master_awqos,

		   mem_master_awregion,

		   mem_master_awready,

		   mem_master_wvalid,

		   mem_master_wdata,

		   mem_master_wstrb,

		   mem_master_wlast,

		   mem_master_wready,

		   mem_master_bvalid,
		   mem_master_bid,
		   mem_master_bresp,

		   mem_master_bready,

		   mem_master_arvalid,

		   mem_master_arid,

		   mem_master_araddr,

		   mem_master_arlen,

		   mem_master_arsize,

		   mem_master_arburst,

		   mem_master_arlock,

		   mem_master_arcache,

		   mem_master_arprot,

		   mem_master_arqos,

		   mem_master_arregion,

		   mem_master_arready,

		   mem_master_rvalid,
		   mem_master_rid,
		   mem_master_rdata,
		   mem_master_rresp,
		   mem_master_rlast,

		   mem_master_rready);
  parameter [0 : 0] dmem_not_imem = 1'b0;
  input  CLK;
  input  RST_N;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // action method req
  input  [1 : 0] req_op;
  input  [2 : 0] req_f3;
  input  [6 : 0] req_amo_funct7;
  input  [31 : 0] req_addr;
  input  [63 : 0] req_st_value;
  input  [1 : 0] req_priv;
  input  req_sstatus_SUM;
  input  req_mstatus_MXR;
  input  [31 : 0] req_satp;
  input  EN_req;

  // value method valid
  output valid;

  // value method addr
  output [31 : 0] addr;

  // value method word64
  output [63 : 0] word64;

  // value method st_amo_val
  output [63 : 0] st_amo_val;

  // value method exc
  output exc;

  // value method exc_code
  output [3 : 0] exc_code;

  // action method server_flush_request_put
  input  EN_server_flush_request_put;
  output RDY_server_flush_request_put;

  // action method server_flush_response_get
  input  EN_server_flush_response_get;
  output RDY_server_flush_response_get;

  // action method tlb_flush
  input  EN_tlb_flush;
  output RDY_tlb_flush;

  // value method mem_master_m_awvalid
  output mem_master_awvalid;

  // value method mem_master_m_awid
  output [3 : 0] mem_master_awid;

  // value method mem_master_m_awaddr
  output [63 : 0] mem_master_awaddr;

  // value method mem_master_m_awlen
  output [7 : 0] mem_master_awlen;

  // value method mem_master_m_awsize
  output [2 : 0] mem_master_awsize;

  // value method mem_master_m_awburst
  output [1 : 0] mem_master_awburst;

  // value method mem_master_m_awlock
  output mem_master_awlock;

  // value method mem_master_m_awcache
  output [3 : 0] mem_master_awcache;

  // value method mem_master_m_awprot
  output [2 : 0] mem_master_awprot;

  // value method mem_master_m_awqos
  output [3 : 0] mem_master_awqos;

  // value method mem_master_m_awregion
  output [3 : 0] mem_master_awregion;

  // value method mem_master_m_awuser

  // action method mem_master_m_awready
  input  mem_master_awready;

  // value method mem_master_m_wvalid
  output mem_master_wvalid;

  // value method mem_master_m_wdata
  output [63 : 0] mem_master_wdata;

  // value method mem_master_m_wstrb
  output [7 : 0] mem_master_wstrb;

  // value method mem_master_m_wlast
  output mem_master_wlast;

  // value method mem_master_m_wuser

  // action method mem_master_m_wready
  input  mem_master_wready;

  // action method mem_master_m_bvalid
  input  mem_master_bvalid;
  input  [3 : 0] mem_master_bid;
  input  [1 : 0] mem_master_bresp;

  // value method mem_master_m_bready
  output mem_master_bready;

  // value method mem_master_m_arvalid
  output mem_master_arvalid;

  // value method mem_master_m_arid
  output [3 : 0] mem_master_arid;

  // value method mem_master_m_araddr
  output [63 : 0] mem_master_araddr;

  // value method mem_master_m_arlen
  output [7 : 0] mem_master_arlen;

  // value method mem_master_m_arsize
  output [2 : 0] mem_master_arsize;

  // value method mem_master_m_arburst
  output [1 : 0] mem_master_arburst;

  // value method mem_master_m_arlock
  output mem_master_arlock;

  // value method mem_master_m_arcache
  output [3 : 0] mem_master_arcache;

  // value method mem_master_m_arprot
  output [2 : 0] mem_master_arprot;

  // value method mem_master_m_arqos
  output [3 : 0] mem_master_arqos;

  // value method mem_master_m_arregion
  output [3 : 0] mem_master_arregion;

  // value method mem_master_m_aruser

  // action method mem_master_m_arready
  input  mem_master_arready;

  // action method mem_master_m_rvalid
  input  mem_master_rvalid;
  input  [3 : 0] mem_master_rid;
  input  [63 : 0] mem_master_rdata;
  input  [1 : 0] mem_master_rresp;
  input  mem_master_rlast;

  // value method mem_master_m_rready
  output mem_master_rready;

  // signals for module outputs
  reg [63 : 0] word64;
  wire [63 : 0] mem_master_araddr,
		mem_master_awaddr,
		mem_master_wdata,
		st_amo_val;
  wire [31 : 0] addr;
  wire [7 : 0] mem_master_arlen, mem_master_awlen, mem_master_wstrb;
  wire [3 : 0] exc_code,
	       mem_master_arcache,
	       mem_master_arid,
	       mem_master_arqos,
	       mem_master_arregion,
	       mem_master_awcache,
	       mem_master_awid,
	       mem_master_awqos,
	       mem_master_awregion;
  wire [2 : 0] mem_master_arprot,
	       mem_master_arsize,
	       mem_master_awprot,
	       mem_master_awsize;
  wire [1 : 0] mem_master_arburst, mem_master_awburst;
  wire RDY_server_flush_request_put,
       RDY_server_flush_response_get,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_set_verbosity,
       RDY_tlb_flush,
       exc,
       mem_master_arlock,
       mem_master_arvalid,
       mem_master_awlock,
       mem_master_awvalid,
       mem_master_bready,
       mem_master_rready,
       mem_master_wlast,
       mem_master_wvalid,
       valid;

  // inlined wires
  wire [3 : 0] ctr_wr_rsps_pending_crg$port0__write_1,
	       ctr_wr_rsps_pending_crg$port1__write_1,
	       ctr_wr_rsps_pending_crg$port2__read,
	       ctr_wr_rsps_pending_crg$port3__read;
  wire ctr_wr_rsps_pending_crg$EN_port2__write, dw_valid$whas;

  // register cfg_verbosity
  reg [3 : 0] cfg_verbosity;
  wire [3 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register ctr_wr_rsps_pending_crg
  reg [3 : 0] ctr_wr_rsps_pending_crg;
  wire [3 : 0] ctr_wr_rsps_pending_crg$D_IN;
  wire ctr_wr_rsps_pending_crg$EN;

  // register rg_addr
  reg [31 : 0] rg_addr;
  wire [31 : 0] rg_addr$D_IN;
  wire rg_addr$EN;

  // register rg_amo_funct7
  reg [6 : 0] rg_amo_funct7;
  wire [6 : 0] rg_amo_funct7$D_IN;
  wire rg_amo_funct7$EN;

  // register rg_cset_in_cache
  reg [6 : 0] rg_cset_in_cache;
  wire [6 : 0] rg_cset_in_cache$D_IN;
  wire rg_cset_in_cache$EN;

  // register rg_error_during_refill
  reg rg_error_during_refill;
  wire rg_error_during_refill$D_IN, rg_error_during_refill$EN;

  // register rg_exc_code
  reg [3 : 0] rg_exc_code;
  reg [3 : 0] rg_exc_code$D_IN;
  wire rg_exc_code$EN;

  // register rg_f3
  reg [2 : 0] rg_f3;
  wire [2 : 0] rg_f3$D_IN;
  wire rg_f3$EN;

  // register rg_ld_val
  reg [63 : 0] rg_ld_val;
  reg [63 : 0] rg_ld_val$D_IN;
  wire rg_ld_val$EN;

  // register rg_lower_word32
  reg [31 : 0] rg_lower_word32;
  wire [31 : 0] rg_lower_word32$D_IN;
  wire rg_lower_word32$EN;

  // register rg_lower_word32_full
  reg rg_lower_word32_full;
  wire rg_lower_word32_full$D_IN, rg_lower_word32_full$EN;

  // register rg_lrsc_pa
  reg [31 : 0] rg_lrsc_pa;
  wire [31 : 0] rg_lrsc_pa$D_IN;
  wire rg_lrsc_pa$EN;

  // register rg_lrsc_valid
  reg rg_lrsc_valid;
  wire rg_lrsc_valid$D_IN, rg_lrsc_valid$EN;

  // register rg_op
  reg [1 : 0] rg_op;
  wire [1 : 0] rg_op$D_IN;
  wire rg_op$EN;

  // register rg_pa
  reg [31 : 0] rg_pa;
  wire [31 : 0] rg_pa$D_IN;
  wire rg_pa$EN;

  // register rg_pte_pa
  reg [31 : 0] rg_pte_pa;
  wire [31 : 0] rg_pte_pa$D_IN;
  wire rg_pte_pa$EN;

  // register rg_st_amo_val
  reg [63 : 0] rg_st_amo_val;
  wire [63 : 0] rg_st_amo_val$D_IN;
  wire rg_st_amo_val$EN;

  // register rg_state
  reg [3 : 0] rg_state;
  reg [3 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // register rg_word64_set_in_cache
  reg [8 : 0] rg_word64_set_in_cache;
  wire [8 : 0] rg_word64_set_in_cache$D_IN;
  wire rg_word64_set_in_cache$EN;

  // ports of submodule f_fabric_write_reqs
  reg [98 : 0] f_fabric_write_reqs$D_IN;
  wire [98 : 0] f_fabric_write_reqs$D_OUT;
  wire f_fabric_write_reqs$CLR,
       f_fabric_write_reqs$DEQ,
       f_fabric_write_reqs$EMPTY_N,
       f_fabric_write_reqs$ENQ,
       f_fabric_write_reqs$FULL_N;

  // ports of submodule f_reset_reqs
  wire f_reset_reqs$CLR,
       f_reset_reqs$DEQ,
       f_reset_reqs$D_IN,
       f_reset_reqs$D_OUT,
       f_reset_reqs$EMPTY_N,
       f_reset_reqs$ENQ,
       f_reset_reqs$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$D_IN,
       f_reset_rsps$D_OUT,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule master_xactor_f_rd_addr
  wire [96 : 0] master_xactor_f_rd_addr$D_IN, master_xactor_f_rd_addr$D_OUT;
  wire master_xactor_f_rd_addr$CLR,
       master_xactor_f_rd_addr$DEQ,
       master_xactor_f_rd_addr$EMPTY_N,
       master_xactor_f_rd_addr$ENQ,
       master_xactor_f_rd_addr$FULL_N;

  // ports of submodule master_xactor_f_rd_data
  wire [70 : 0] master_xactor_f_rd_data$D_IN, master_xactor_f_rd_data$D_OUT;
  wire master_xactor_f_rd_data$CLR,
       master_xactor_f_rd_data$DEQ,
       master_xactor_f_rd_data$EMPTY_N,
       master_xactor_f_rd_data$ENQ,
       master_xactor_f_rd_data$FULL_N;

  // ports of submodule master_xactor_f_wr_addr
  wire [96 : 0] master_xactor_f_wr_addr$D_IN, master_xactor_f_wr_addr$D_OUT;
  wire master_xactor_f_wr_addr$CLR,
       master_xactor_f_wr_addr$DEQ,
       master_xactor_f_wr_addr$EMPTY_N,
       master_xactor_f_wr_addr$ENQ,
       master_xactor_f_wr_addr$FULL_N;

  // ports of submodule master_xactor_f_wr_data
  wire [72 : 0] master_xactor_f_wr_data$D_IN, master_xactor_f_wr_data$D_OUT;
  wire master_xactor_f_wr_data$CLR,
       master_xactor_f_wr_data$DEQ,
       master_xactor_f_wr_data$EMPTY_N,
       master_xactor_f_wr_data$ENQ,
       master_xactor_f_wr_data$FULL_N;

  // ports of submodule master_xactor_f_wr_resp
  wire [5 : 0] master_xactor_f_wr_resp$D_IN, master_xactor_f_wr_resp$D_OUT;
  wire master_xactor_f_wr_resp$CLR,
       master_xactor_f_wr_resp$DEQ,
       master_xactor_f_wr_resp$EMPTY_N,
       master_xactor_f_wr_resp$ENQ,
       master_xactor_f_wr_resp$FULL_N;

  // ports of submodule ram_state_and_ctag_cset
  wire [22 : 0] ram_state_and_ctag_cset$DIA,
		ram_state_and_ctag_cset$DIB,
		ram_state_and_ctag_cset$DOB;
  wire [6 : 0] ram_state_and_ctag_cset$ADDRA, ram_state_and_ctag_cset$ADDRB;
  wire ram_state_and_ctag_cset$ENA,
       ram_state_and_ctag_cset$ENB,
       ram_state_and_ctag_cset$WEA,
       ram_state_and_ctag_cset$WEB;

  // ports of submodule ram_word64_set
  reg [63 : 0] ram_word64_set$DIB;
  reg [8 : 0] ram_word64_set$ADDRB;
  wire [63 : 0] ram_word64_set$DIA, ram_word64_set$DOB;
  wire [8 : 0] ram_word64_set$ADDRA;
  wire ram_word64_set$ENA,
       ram_word64_set$ENB,
       ram_word64_set$WEA,
       ram_word64_set$WEB;

  // ports of submodule soc_map
  wire [63 : 0] soc_map$m_is_IO_addr_addr,
		soc_map$m_is_mem_addr_addr,
		soc_map$m_is_near_mem_IO_addr_addr;
  wire soc_map$m_is_mem_addr;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_ST_AMO_response,
       CAN_FIRE_RL_rl_cache_refill_rsps_loop,
       CAN_FIRE_RL_rl_discard_write_rsp,
       CAN_FIRE_RL_rl_drive_exception_rsp,
       CAN_FIRE_RL_rl_fabric_send_write_req,
       CAN_FIRE_RL_rl_io_AMO_SC_req,
       CAN_FIRE_RL_rl_io_AMO_op_req,
       CAN_FIRE_RL_rl_io_AMO_read_rsp,
       CAN_FIRE_RL_rl_io_read_req,
       CAN_FIRE_RL_rl_io_read_rsp,
       CAN_FIRE_RL_rl_io_write_req,
       CAN_FIRE_RL_rl_maintain_io_read_rsp,
       CAN_FIRE_RL_rl_probe_and_immed_rsp,
       CAN_FIRE_RL_rl_rereq,
       CAN_FIRE_RL_rl_reset,
       CAN_FIRE_RL_rl_start_cache_refill,
       CAN_FIRE_RL_rl_start_reset,
       CAN_FIRE_mem_master_m_arready,
       CAN_FIRE_mem_master_m_awready,
       CAN_FIRE_mem_master_m_bvalid,
       CAN_FIRE_mem_master_m_rvalid,
       CAN_FIRE_mem_master_m_wready,
       CAN_FIRE_req,
       CAN_FIRE_server_flush_request_put,
       CAN_FIRE_server_flush_response_get,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_tlb_flush,
       WILL_FIRE_RL_rl_ST_AMO_response,
       WILL_FIRE_RL_rl_cache_refill_rsps_loop,
       WILL_FIRE_RL_rl_discard_write_rsp,
       WILL_FIRE_RL_rl_drive_exception_rsp,
       WILL_FIRE_RL_rl_fabric_send_write_req,
       WILL_FIRE_RL_rl_io_AMO_SC_req,
       WILL_FIRE_RL_rl_io_AMO_op_req,
       WILL_FIRE_RL_rl_io_AMO_read_rsp,
       WILL_FIRE_RL_rl_io_read_req,
       WILL_FIRE_RL_rl_io_read_rsp,
       WILL_FIRE_RL_rl_io_write_req,
       WILL_FIRE_RL_rl_maintain_io_read_rsp,
       WILL_FIRE_RL_rl_probe_and_immed_rsp,
       WILL_FIRE_RL_rl_rereq,
       WILL_FIRE_RL_rl_reset,
       WILL_FIRE_RL_rl_start_cache_refill,
       WILL_FIRE_RL_rl_start_reset,
       WILL_FIRE_mem_master_m_arready,
       WILL_FIRE_mem_master_m_awready,
       WILL_FIRE_mem_master_m_bvalid,
       WILL_FIRE_mem_master_m_rvalid,
       WILL_FIRE_mem_master_m_wready,
       WILL_FIRE_req,
       WILL_FIRE_server_flush_request_put,
       WILL_FIRE_server_flush_response_get,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_tlb_flush;

  // inputs to muxes for submodule ports
  wire [98 : 0] MUX_f_fabric_write_reqs$enq_1__VAL_1,
		MUX_f_fabric_write_reqs$enq_1__VAL_2,
		MUX_f_fabric_write_reqs$enq_1__VAL_3;
  wire [96 : 0] MUX_master_xactor_f_rd_addr$enq_1__VAL_1,
		MUX_master_xactor_f_rd_addr$enq_1__VAL_2;
  wire [63 : 0] MUX_dw_output_ld_val$wset_1__VAL_3,
		MUX_ram_word64_set$a_put_3__VAL_2,
		MUX_rg_ld_val$write_1__VAL_2;
  wire [22 : 0] MUX_ram_state_and_ctag_cset$a_put_3__VAL_1;
  wire [8 : 0] MUX_ram_word64_set$b_put_2__VAL_2,
	       MUX_ram_word64_set$b_put_2__VAL_4;
  wire [6 : 0] MUX_rg_cset_in_cache$write_1__VAL_1;
  wire [3 : 0] MUX_rg_exc_code$write_1__VAL_1,
	       MUX_rg_state$write_1__VAL_1,
	       MUX_rg_state$write_1__VAL_10,
	       MUX_rg_state$write_1__VAL_12,
	       MUX_rg_state$write_1__VAL_3;
  wire MUX_dw_output_ld_val$wset_1__SEL_1,
       MUX_dw_output_ld_val$wset_1__SEL_2,
       MUX_dw_output_ld_val$wset_1__SEL_3,
       MUX_dw_output_ld_val$wset_1__SEL_4,
       MUX_f_fabric_write_reqs$enq_1__SEL_2,
       MUX_master_xactor_f_rd_addr$enq_1__SEL_1,
       MUX_master_xactor_f_rd_addr$enq_1__SEL_2,
       MUX_ram_state_and_ctag_cset$b_put_1__SEL_1,
       MUX_ram_word64_set$a_put_1__SEL_1,
       MUX_ram_word64_set$b_put_1__SEL_2,
       MUX_rg_error_during_refill$write_1__SEL_1,
       MUX_rg_exc_code$write_1__SEL_1,
       MUX_rg_exc_code$write_1__SEL_2,
       MUX_rg_exc_code$write_1__SEL_3,
       MUX_rg_ld_val$write_1__SEL_2,
       MUX_rg_lrsc_valid$write_1__SEL_2,
       MUX_rg_state$write_1__SEL_10,
       MUX_rg_state$write_1__SEL_12,
       MUX_rg_state$write_1__SEL_13,
       MUX_rg_state$write_1__SEL_2,
       MUX_rg_state$write_1__SEL_3;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h3151;
  reg [31 : 0] v__h4074;
  reg [31 : 0] v__h4175;
  reg [31 : 0] v__h4324;
  reg [31 : 0] v__h12834;
  reg [31 : 0] v__h16422;
  reg [31 : 0] v__h19612;
  reg [31 : 0] v__h20417;
  reg [31 : 0] v__h20658;
  reg [31 : 0] v__h22270;
  reg [31 : 0] v__h22620;
  reg [31 : 0] v__h23720;
  reg [31 : 0] v__h23827;
  reg [31 : 0] v__h23932;
  reg [31 : 0] v__h24012;
  reg [31 : 0] v__h24222;
  reg [31 : 0] v__h24340;
  reg [31 : 0] v__h24634;
  reg [31 : 0] v__h24809;
  reg [31 : 0] v__h27068;
  reg [31 : 0] v__h24905;
  reg [31 : 0] v__h27675;
  reg [31 : 0] v__h27636;
  reg [31 : 0] v__h3709;
  reg [31 : 0] v__h28023;
  reg [31 : 0] v__h3145;
  reg [31 : 0] v__h3703;
  reg [31 : 0] v__h4068;
  reg [31 : 0] v__h4169;
  reg [31 : 0] v__h4318;
  reg [31 : 0] v__h12828;
  reg [31 : 0] v__h16416;
  reg [31 : 0] v__h19606;
  reg [31 : 0] v__h20411;
  reg [31 : 0] v__h20652;
  reg [31 : 0] v__h22264;
  reg [31 : 0] v__h22614;
  reg [31 : 0] v__h23714;
  reg [31 : 0] v__h23821;
  reg [31 : 0] v__h23926;
  reg [31 : 0] v__h24006;
  reg [31 : 0] v__h24216;
  reg [31 : 0] v__h24334;
  reg [31 : 0] v__h24628;
  reg [31 : 0] v__h24803;
  reg [31 : 0] v__h24899;
  reg [31 : 0] v__h27062;
  reg [31 : 0] v__h27630;
  reg [31 : 0] v__h27669;
  reg [31 : 0] v__h28017;
  // synopsys translate_on

  // remaining internal signals
  reg [63 : 0] CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q32,
	       CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q52,
	       CASE_rg_addr_BITS_2_TO_0_0x0_result2654_0x4_re_ETC__q29,
	       CASE_rg_addr_BITS_2_TO_0_0x0_result3500_0x4_re_ETC__q33,
	       CASE_rg_addr_BITS_2_TO_0_0x0_result3565_0x4_re_ETC__q34,
	       CASE_rg_addr_BITS_2_TO_0_0x0_result6776_0x4_re_ETC__q49,
	       CASE_rg_f3_0b0_IF_rg_addr_6_BITS_2_TO_0_21_EQ__ETC__q51,
	       IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d251,
	       IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d273,
	       IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d285,
	       IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d634,
	       IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d654,
	       IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d743,
	       IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d763,
	       IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d773,
	       IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d234,
	       IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d264,
	       IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d618,
	       IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d646,
	       IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d727,
	       IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d755,
	       IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_ram_ETC___d374,
	       IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_ram_ETC___d383,
	       IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_ram_ETC___d448,
	       IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_ram_ETC___d457,
	       IF_rg_f3_01_EQ_0b0_02_THEN_IF_rg_addr_6_BITS_2_ETC___d294,
	       IF_rg_f3_01_EQ_0b0_02_THEN_IF_rg_addr_6_BITS_2_ETC___d392,
	       IF_rg_f3_01_EQ_0b0_02_THEN_IF_rg_addr_6_BITS_2_ETC___d466,
	       IF_rg_f3_01_EQ_0b10_74_THEN_SEXT_IF_rg_f3_01_E_ETC___d334,
	       _theResult_____2__h16922,
	       _theResult_____2__h24981,
	       ld_val__h22729,
	       mem_req_wr_data_wdata__h2907,
	       new_ld_val__h24935,
	       w1__h16914,
	       w1__h24969,
	       w1__h24973;
  reg [7 : 0] mem_req_wr_data_wstrb__h2908;
  reg [2 : 0] value__h24521, x__h2723;
  wire [63 : 0] IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_1_E_ETC___d302,
		IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_IF__ETC___d774,
		IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_ram_ETC___d287,
		IF_rg_f3_01_EQ_0b10_74_THEN_SEXT_rg_st_amo_val_ETC___d398,
		IF_rg_op_1_EQ_1_9_OR_rg_op_1_EQ_2_3_AND_rg_amo_ETC___d472,
		_theResult___fst__h2843,
		cline_fabric_addr__h19665,
		fabric_addr__h24392,
		mem_req_wr_addr_awaddr__h2676,
		new_st_val__h16644,
		new_st_val__h16926,
		new_st_val__h17017,
		new_st_val__h17997,
		new_st_val__h18001,
		new_st_val__h18005,
		new_st_val__h18009,
		new_st_val__h18014,
		new_st_val__h18020,
		new_st_val__h18025,
		new_st_val__h24985,
		new_st_val__h25076,
		new_st_val__h26936,
		new_st_val__h26940,
		new_st_val__h26944,
		new_st_val__h26948,
		new_st_val__h26953,
		new_st_val__h26959,
		new_st_val__h26964,
		new_value__h15512,
		new_value__h5539,
		result__h11922,
		result__h11950,
		result__h11978,
		result__h12006,
		result__h12034,
		result__h12062,
		result__h12090,
		result__h12118,
		result__h12163,
		result__h12191,
		result__h12219,
		result__h12247,
		result__h12275,
		result__h12303,
		result__h12331,
		result__h12359,
		result__h12404,
		result__h12432,
		result__h12460,
		result__h12488,
		result__h12529,
		result__h12557,
		result__h12585,
		result__h12613,
		result__h12654,
		result__h12682,
		result__h12721,
		result__h12749,
		result__h22789,
		result__h22819,
		result__h22846,
		result__h22873,
		result__h22900,
		result__h22927,
		result__h22954,
		result__h22981,
		result__h23025,
		result__h23052,
		result__h23079,
		result__h23106,
		result__h23133,
		result__h23160,
		result__h23187,
		result__h23214,
		result__h23258,
		result__h23285,
		result__h23312,
		result__h23339,
		result__h23379,
		result__h23406,
		result__h23433,
		result__h23460,
		result__h23500,
		result__h23527,
		result__h23565,
		result__h23592,
		result__h25164,
		result__h26072,
		result__h26100,
		result__h26128,
		result__h26156,
		result__h26184,
		result__h26212,
		result__h26240,
		result__h26285,
		result__h26313,
		result__h26341,
		result__h26369,
		result__h26397,
		result__h26425,
		result__h26453,
		result__h26481,
		result__h26526,
		result__h26554,
		result__h26582,
		result__h26610,
		result__h26651,
		result__h26679,
		result__h26707,
		result__h26735,
		result__h26776,
		result__h26804,
		result__h26843,
		result__h26871,
		w1___1__h16985,
		w1___1__h25044,
		w2___1__h25045,
		w2__h24975,
		word64__h5320,
		x__h13221,
		x__h24964,
		y__h5566;
  wire [31 : 0] IF_rg_f3_01_EQ_0b0_02_THEN_IF_rg_addr_6_BITS_2_ETC__q30,
		cline_addr__h19664,
		ld_val2729_BITS_31_TO_0__q37,
		ld_val2729_BITS_63_TO_32__q44,
		master_xactor_f_rd_dataD_OUT_BITS_34_TO_3__q4,
		master_xactor_f_rd_dataD_OUT_BITS_66_TO_35__q10,
		rg_st_amo_val_BITS_31_TO_0__q31,
		w14969_BITS_31_TO_0__q50,
		word64320_BITS_31_TO_0__q17,
		word64320_BITS_63_TO_32__q24;
  wire [21 : 0] pa_ctag__h5178;
  wire [15 : 0] ld_val2729_BITS_15_TO_0__q36,
		ld_val2729_BITS_31_TO_16__q40,
		ld_val2729_BITS_47_TO_32__q43,
		ld_val2729_BITS_63_TO_48__q47,
		master_xactor_f_rd_dataD_OUT_BITS_18_TO_3__q3,
		master_xactor_f_rd_dataD_OUT_BITS_34_TO_19__q6,
		master_xactor_f_rd_dataD_OUT_BITS_50_TO_35__q9,
		master_xactor_f_rd_dataD_OUT_BITS_66_TO_51__q13,
		word64320_BITS_15_TO_0__q16,
		word64320_BITS_31_TO_16__q20,
		word64320_BITS_47_TO_32__q23,
		word64320_BITS_63_TO_48__q27;
  wire [7 : 0] ld_val2729_BITS_15_TO_8__q38,
	       ld_val2729_BITS_23_TO_16__q39,
	       ld_val2729_BITS_31_TO_24__q41,
	       ld_val2729_BITS_39_TO_32__q42,
	       ld_val2729_BITS_47_TO_40__q45,
	       ld_val2729_BITS_55_TO_48__q46,
	       ld_val2729_BITS_63_TO_56__q48,
	       ld_val2729_BITS_7_TO_0__q35,
	       master_xactor_f_rd_dataD_OUT_BITS_10_TO_3__q2,
	       master_xactor_f_rd_dataD_OUT_BITS_18_TO_11__q5,
	       master_xactor_f_rd_dataD_OUT_BITS_26_TO_19__q1,
	       master_xactor_f_rd_dataD_OUT_BITS_34_TO_27__q7,
	       master_xactor_f_rd_dataD_OUT_BITS_42_TO_35__q8,
	       master_xactor_f_rd_dataD_OUT_BITS_50_TO_43__q11,
	       master_xactor_f_rd_dataD_OUT_BITS_58_TO_51__q12,
	       master_xactor_f_rd_dataD_OUT_BITS_66_TO_59__q14,
	       strobe64__h2842,
	       strobe64__h2845,
	       strobe64__h2848,
	       word64320_BITS_15_TO_8__q18,
	       word64320_BITS_23_TO_16__q19,
	       word64320_BITS_31_TO_24__q21,
	       word64320_BITS_39_TO_32__q22,
	       word64320_BITS_47_TO_40__q25,
	       word64320_BITS_55_TO_48__q26,
	       word64320_BITS_63_TO_56__q28,
	       word64320_BITS_7_TO_0__q15;
  wire [5 : 0] shift_bits__h2690;
  wire [3 : 0] IF_rg_op_1_EQ_0_2_OR_rg_op_1_EQ_2_3_AND_rg_amo_ETC___d140,
	       IF_rg_op_1_EQ_1_9_OR_rg_op_1_EQ_2_3_AND_rg_amo_ETC___d139,
	       access_exc_code__h2458,
	       b__h19566;
  wire IF_rg_op_1_EQ_1_9_OR_rg_op_1_EQ_2_3_AND_rg_amo_ETC___d112,
       NOT_cfg_verbosity_read__0_ULE_1_1___d42,
       NOT_cfg_verbosity_read__0_ULE_2_37___d538,
       NOT_dmem_not_imem_43_OR_soc_map_m_is_mem_addr__ETC___d330,
       NOT_dmem_not_imem_43_OR_soc_map_m_is_mem_addr__ETC___d341,
       NOT_dmem_not_imem_43_OR_soc_map_m_is_mem_addr__ETC___d475,
       NOT_dmem_not_imem_43_OR_soc_map_m_is_mem_addr__ETC___d487,
       NOT_dmem_not_imem_43_OR_soc_map_m_is_mem_addr__ETC___d508,
       NOT_dmem_not_imem_43_OR_soc_map_m_is_mem_addr__ETC___d511,
       NOT_dmem_not_imem_43_OR_soc_map_m_is_mem_addr__ETC___d515,
       NOT_dmem_not_imem_43_OR_soc_map_m_is_mem_addr__ETC___d517,
       NOT_ram_state_and_ctag_cset_b_read__02_BIT_22__ETC___d149,
       NOT_req_f3_BITS_1_TO_0_59_EQ_0b0_60_61_AND_NOT_ETC___d880,
       NOT_rg_op_1_EQ_0_2_26_AND_NOT_rg_op_1_EQ_2_3_2_ETC___d135,
       NOT_rg_op_1_EQ_0_2_26_AND_NOT_rg_op_1_EQ_2_3_2_ETC___d470,
       NOT_rg_op_1_EQ_0_2_26_AND_NOT_rg_op_1_EQ_2_3_2_ETC___d490,
       NOT_rg_op_1_EQ_0_2_26_AND_NOT_rg_op_1_EQ_2_3_2_ETC___d498,
       NOT_rg_op_1_EQ_1_9_55_AND_NOT_rg_op_1_EQ_2_3_2_ETC___d158,
       NOT_rg_op_1_EQ_1_9_55_AND_NOT_rg_op_1_EQ_2_3_2_ETC___d338,
       NOT_rg_op_1_EQ_1_9_55_AND_NOT_rg_op_1_EQ_2_3_2_ETC___d506,
       NOT_rg_op_1_EQ_1_9_55_AND_NOT_rg_op_1_EQ_2_3_2_ETC___d509,
       NOT_rg_op_1_EQ_1_9_55_AND_NOT_rg_op_1_EQ_2_3_2_ETC___d513,
       NOT_rg_op_1_EQ_2_3_27_OR_NOT_rg_amo_funct7_4_B_ETC___d336,
       NOT_rg_op_1_EQ_2_3_27_OR_NOT_rg_amo_funct7_4_B_ETC___d488,
       NOT_rg_op_1_EQ_2_3_27_OR_NOT_rg_amo_funct7_4_B_ETC___d492,
       NOT_rg_op_1_EQ_2_3_27_OR_NOT_rg_amo_funct7_4_B_ETC___d496,
       dmem_not_imem_AND_NOT_soc_map_m_is_mem_addr_0__ETC___d114,
       lrsc_result__h13211,
       ram_state_and_ctag_cset_b_read__02_BITS_21_TO__ETC___d108,
       ram_state_and_ctag_cset_b_read__02_BIT_22_03_A_ETC___d150,
       req_f3_BITS_1_TO_0_59_EQ_0b0_60_OR_req_f3_BITS_ETC___d889,
       rg_addr_6_EQ_rg_lrsc_pa_5___d147,
       rg_amo_funct7_4_BITS_6_TO_2_5_EQ_0b10_6_AND_NO_ETC___d324,
       rg_lrsc_pa_5_EQ_rg_addr_6___d96,
       rg_op_1_EQ_0_2_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d125,
       rg_op_1_EQ_0_2_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d161,
       rg_op_1_EQ_0_2_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d163,
       rg_op_1_EQ_0_2_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d166,
       rg_op_1_EQ_0_2_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d307,
       rg_op_1_EQ_0_2_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d320,
       rg_op_1_EQ_1_9_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d159,
       rg_op_1_EQ_1_9_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d339,
       rg_op_1_EQ_1_9_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d468,
       rg_op_1_EQ_2_3_AND_rg_amo_funct7_4_BITS_6_TO_2_ETC___d502,
       rg_state_5_EQ_12_73_AND_rg_op_1_EQ_0_2_OR_rg_o_ETC___d575;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get =
	     !f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get =
	     !f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // action method req
  assign CAN_FIRE_req = 1'd1 ;
  assign WILL_FIRE_req = EN_req ;

  // value method valid
  assign valid = dw_valid$whas ;

  // value method addr
  assign addr = rg_addr ;

  // value method word64
  always@(MUX_dw_output_ld_val$wset_1__SEL_1 or
	  ld_val__h22729 or
	  MUX_dw_output_ld_val$wset_1__SEL_2 or
	  new_ld_val__h24935 or
	  MUX_dw_output_ld_val$wset_1__SEL_3 or
	  MUX_dw_output_ld_val$wset_1__VAL_3 or
	  MUX_dw_output_ld_val$wset_1__SEL_4 or rg_ld_val)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dw_output_ld_val$wset_1__SEL_1: word64 = ld_val__h22729;
      MUX_dw_output_ld_val$wset_1__SEL_2: word64 = new_ld_val__h24935;
      MUX_dw_output_ld_val$wset_1__SEL_3:
	  word64 = MUX_dw_output_ld_val$wset_1__VAL_3;
      MUX_dw_output_ld_val$wset_1__SEL_4: word64 = rg_ld_val;
      default: word64 = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end

  // value method st_amo_val
  assign st_amo_val =
	     MUX_dw_output_ld_val$wset_1__SEL_3 ? 64'd0 : rg_st_amo_val ;

  // value method exc
  assign exc = rg_state == 4'd4 ;

  // value method exc_code
  assign exc_code = rg_exc_code ;

  // action method server_flush_request_put
  assign RDY_server_flush_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_flush_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_flush_request_put = EN_server_flush_request_put ;

  // action method server_flush_response_get
  assign RDY_server_flush_response_get =
	     f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_flush_response_get =
	     f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_flush_response_get = EN_server_flush_response_get ;

  // action method tlb_flush
  assign RDY_tlb_flush = 1'd1 ;
  assign CAN_FIRE_tlb_flush = 1'd1 ;
  assign WILL_FIRE_tlb_flush = EN_tlb_flush ;

  // value method mem_master_m_awvalid
  assign mem_master_awvalid = master_xactor_f_wr_addr$EMPTY_N ;

  // value method mem_master_m_awid
  assign mem_master_awid = master_xactor_f_wr_addr$D_OUT[96:93] ;

  // value method mem_master_m_awaddr
  assign mem_master_awaddr = master_xactor_f_wr_addr$D_OUT[92:29] ;

  // value method mem_master_m_awlen
  assign mem_master_awlen = master_xactor_f_wr_addr$D_OUT[28:21] ;

  // value method mem_master_m_awsize
  assign mem_master_awsize = master_xactor_f_wr_addr$D_OUT[20:18] ;

  // value method mem_master_m_awburst
  assign mem_master_awburst = master_xactor_f_wr_addr$D_OUT[17:16] ;

  // value method mem_master_m_awlock
  assign mem_master_awlock = master_xactor_f_wr_addr$D_OUT[15] ;

  // value method mem_master_m_awcache
  assign mem_master_awcache = master_xactor_f_wr_addr$D_OUT[14:11] ;

  // value method mem_master_m_awprot
  assign mem_master_awprot = master_xactor_f_wr_addr$D_OUT[10:8] ;

  // value method mem_master_m_awqos
  assign mem_master_awqos = master_xactor_f_wr_addr$D_OUT[7:4] ;

  // value method mem_master_m_awregion
  assign mem_master_awregion = master_xactor_f_wr_addr$D_OUT[3:0] ;

  // action method mem_master_m_awready
  assign CAN_FIRE_mem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_awready = 1'd1 ;

  // value method mem_master_m_wvalid
  assign mem_master_wvalid = master_xactor_f_wr_data$EMPTY_N ;

  // value method mem_master_m_wdata
  assign mem_master_wdata = master_xactor_f_wr_data$D_OUT[72:9] ;

  // value method mem_master_m_wstrb
  assign mem_master_wstrb = master_xactor_f_wr_data$D_OUT[8:1] ;

  // value method mem_master_m_wlast
  assign mem_master_wlast = master_xactor_f_wr_data$D_OUT[0] ;

  // action method mem_master_m_wready
  assign CAN_FIRE_mem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_wready = 1'd1 ;

  // action method mem_master_m_bvalid
  assign CAN_FIRE_mem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_mem_master_m_bvalid = 1'd1 ;

  // value method mem_master_m_bready
  assign mem_master_bready = master_xactor_f_wr_resp$FULL_N ;

  // value method mem_master_m_arvalid
  assign mem_master_arvalid = master_xactor_f_rd_addr$EMPTY_N ;

  // value method mem_master_m_arid
  assign mem_master_arid = master_xactor_f_rd_addr$D_OUT[96:93] ;

  // value method mem_master_m_araddr
  assign mem_master_araddr = master_xactor_f_rd_addr$D_OUT[92:29] ;

  // value method mem_master_m_arlen
  assign mem_master_arlen = master_xactor_f_rd_addr$D_OUT[28:21] ;

  // value method mem_master_m_arsize
  assign mem_master_arsize = master_xactor_f_rd_addr$D_OUT[20:18] ;

  // value method mem_master_m_arburst
  assign mem_master_arburst = master_xactor_f_rd_addr$D_OUT[17:16] ;

  // value method mem_master_m_arlock
  assign mem_master_arlock = master_xactor_f_rd_addr$D_OUT[15] ;

  // value method mem_master_m_arcache
  assign mem_master_arcache = master_xactor_f_rd_addr$D_OUT[14:11] ;

  // value method mem_master_m_arprot
  assign mem_master_arprot = master_xactor_f_rd_addr$D_OUT[10:8] ;

  // value method mem_master_m_arqos
  assign mem_master_arqos = master_xactor_f_rd_addr$D_OUT[7:4] ;

  // value method mem_master_m_arregion
  assign mem_master_arregion = master_xactor_f_rd_addr$D_OUT[3:0] ;

  // action method mem_master_m_arready
  assign CAN_FIRE_mem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_arready = 1'd1 ;

  // action method mem_master_m_rvalid
  assign CAN_FIRE_mem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_mem_master_m_rvalid = 1'd1 ;

  // value method mem_master_m_rready
  assign mem_master_rready = master_xactor_f_rd_data$FULL_N ;

  // submodule f_fabric_write_reqs
  FIFO2 #(.width(32'd99), .guarded(32'd1)) f_fabric_write_reqs(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(f_fabric_write_reqs$D_IN),
							       .ENQ(f_fabric_write_reqs$ENQ),
							       .DEQ(f_fabric_write_reqs$DEQ),
							       .CLR(f_fabric_write_reqs$CLR),
							       .D_OUT(f_fabric_write_reqs$D_OUT),
							       .FULL_N(f_fabric_write_reqs$FULL_N),
							       .EMPTY_N(f_fabric_write_reqs$EMPTY_N));

  // submodule f_reset_reqs
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_reqs(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_reset_reqs$D_IN),
						       .ENQ(f_reset_reqs$ENQ),
						       .DEQ(f_reset_reqs$DEQ),
						       .CLR(f_reset_reqs$CLR),
						       .D_OUT(f_reset_reqs$D_OUT),
						       .FULL_N(f_reset_reqs$FULL_N),
						       .EMPTY_N(f_reset_reqs$EMPTY_N));

  // submodule f_reset_rsps
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_rsps(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_reset_rsps$D_IN),
						       .ENQ(f_reset_rsps$ENQ),
						       .DEQ(f_reset_rsps$DEQ),
						       .CLR(f_reset_rsps$CLR),
						       .D_OUT(f_reset_rsps$D_OUT),
						       .FULL_N(f_reset_rsps$FULL_N),
						       .EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule master_xactor_f_rd_addr
  FIFO2 #(.width(32'd97),
	  .guarded(32'd1)) master_xactor_f_rd_addr(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(master_xactor_f_rd_addr$D_IN),
						   .ENQ(master_xactor_f_rd_addr$ENQ),
						   .DEQ(master_xactor_f_rd_addr$DEQ),
						   .CLR(master_xactor_f_rd_addr$CLR),
						   .D_OUT(master_xactor_f_rd_addr$D_OUT),
						   .FULL_N(master_xactor_f_rd_addr$FULL_N),
						   .EMPTY_N(master_xactor_f_rd_addr$EMPTY_N));

  // submodule master_xactor_f_rd_data
  FIFO2 #(.width(32'd71),
	  .guarded(32'd1)) master_xactor_f_rd_data(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(master_xactor_f_rd_data$D_IN),
						   .ENQ(master_xactor_f_rd_data$ENQ),
						   .DEQ(master_xactor_f_rd_data$DEQ),
						   .CLR(master_xactor_f_rd_data$CLR),
						   .D_OUT(master_xactor_f_rd_data$D_OUT),
						   .FULL_N(master_xactor_f_rd_data$FULL_N),
						   .EMPTY_N(master_xactor_f_rd_data$EMPTY_N));

  // submodule master_xactor_f_wr_addr
  FIFO2 #(.width(32'd97),
	  .guarded(32'd1)) master_xactor_f_wr_addr(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(master_xactor_f_wr_addr$D_IN),
						   .ENQ(master_xactor_f_wr_addr$ENQ),
						   .DEQ(master_xactor_f_wr_addr$DEQ),
						   .CLR(master_xactor_f_wr_addr$CLR),
						   .D_OUT(master_xactor_f_wr_addr$D_OUT),
						   .FULL_N(master_xactor_f_wr_addr$FULL_N),
						   .EMPTY_N(master_xactor_f_wr_addr$EMPTY_N));

  // submodule master_xactor_f_wr_data
  FIFO2 #(.width(32'd73),
	  .guarded(32'd1)) master_xactor_f_wr_data(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(master_xactor_f_wr_data$D_IN),
						   .ENQ(master_xactor_f_wr_data$ENQ),
						   .DEQ(master_xactor_f_wr_data$DEQ),
						   .CLR(master_xactor_f_wr_data$CLR),
						   .D_OUT(master_xactor_f_wr_data$D_OUT),
						   .FULL_N(master_xactor_f_wr_data$FULL_N),
						   .EMPTY_N(master_xactor_f_wr_data$EMPTY_N));

  // submodule master_xactor_f_wr_resp
  FIFO2 #(.width(32'd6), .guarded(32'd1)) master_xactor_f_wr_resp(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(master_xactor_f_wr_resp$D_IN),
								  .ENQ(master_xactor_f_wr_resp$ENQ),
								  .DEQ(master_xactor_f_wr_resp$DEQ),
								  .CLR(master_xactor_f_wr_resp$CLR),
								  .D_OUT(master_xactor_f_wr_resp$D_OUT),
								  .FULL_N(master_xactor_f_wr_resp$FULL_N),
								  .EMPTY_N(master_xactor_f_wr_resp$EMPTY_N));

  // submodule ram_state_and_ctag_cset
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd23),
	  .MEMSIZE(8'd128)) ram_state_and_ctag_cset(.CLKA(CLK),
						    .CLKB(CLK),
						    .ADDRA(ram_state_and_ctag_cset$ADDRA),
						    .ADDRB(ram_state_and_ctag_cset$ADDRB),
						    .DIA(ram_state_and_ctag_cset$DIA),
						    .DIB(ram_state_and_ctag_cset$DIB),
						    .WEA(ram_state_and_ctag_cset$WEA),
						    .WEB(ram_state_and_ctag_cset$WEB),
						    .ENA(ram_state_and_ctag_cset$ENA),
						    .ENB(ram_state_and_ctag_cset$ENB),
						    .DOA(),
						    .DOB(ram_state_and_ctag_cset$DOB));

  // submodule ram_word64_set
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd9),
	  .DATA_WIDTH(32'd64),
	  .MEMSIZE(10'd512)) ram_word64_set(.CLKA(CLK),
					    .CLKB(CLK),
					    .ADDRA(ram_word64_set$ADDRA),
					    .ADDRB(ram_word64_set$ADDRB),
					    .DIA(ram_word64_set$DIA),
					    .DIB(ram_word64_set$DIB),
					    .WEA(ram_word64_set$WEA),
					    .WEB(ram_word64_set$WEB),
					    .ENA(ram_word64_set$ENA),
					    .ENB(ram_word64_set$ENB),
					    .DOA(),
					    .DOB(ram_word64_set$DOB));

  // submodule soc_map
  mkSoC_Map soc_map(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_is_IO_addr_addr(soc_map$m_is_IO_addr_addr),
		    .m_is_mem_addr_addr(soc_map$m_is_mem_addr_addr),
		    .m_is_near_mem_IO_addr_addr(soc_map$m_is_near_mem_IO_addr_addr),
		    .m_plic_addr_base(),
		    .m_plic_addr_size(),
		    .m_plic_addr_lim(),
		    .m_near_mem_io_addr_base(),
		    .m_near_mem_io_addr_size(),
		    .m_near_mem_io_addr_lim(),
		    .m_flash_mem_addr_base(),
		    .m_flash_mem_addr_size(),
		    .m_flash_mem_addr_lim(),
		    .m_ethernet_0_addr_base(),
		    .m_ethernet_0_addr_size(),
		    .m_ethernet_0_addr_lim(),
		    .m_dma_0_addr_base(),
		    .m_dma_0_addr_size(),
		    .m_dma_0_addr_lim(),
		    .m_uart16550_0_addr_base(),
		    .m_uart16550_0_addr_size(),
		    .m_uart16550_0_addr_lim(),
		    .m_gpio_0_addr_base(),
		    .m_gpio_0_addr_size(),
		    .m_gpio_0_addr_lim(),
		    .m_boot_rom_addr_base(),
		    .m_boot_rom_addr_size(),
		    .m_boot_rom_addr_lim(),
		    .m_ddr4_0_uncached_addr_base(),
		    .m_ddr4_0_uncached_addr_size(),
		    .m_ddr4_0_uncached_addr_lim(),
		    .m_ddr4_0_cached_addr_base(),
		    .m_ddr4_0_cached_addr_size(),
		    .m_ddr4_0_cached_addr_lim(),
		    .m_is_mem_addr(soc_map$m_is_mem_addr),
		    .m_is_IO_addr(),
		    .m_is_near_mem_IO_addr(),
		    .m_pc_reset_value(),
		    .m_mtvec_reset_value(),
		    .m_nmivec_reset_value());

  // rule RL_rl_fabric_send_write_req
  assign CAN_FIRE_RL_rl_fabric_send_write_req =
	     f_fabric_write_reqs$EMPTY_N && master_xactor_f_wr_addr$FULL_N &&
	     master_xactor_f_wr_data$FULL_N ;
  assign WILL_FIRE_RL_rl_fabric_send_write_req =
	     CAN_FIRE_RL_rl_fabric_send_write_req ;

  // rule RL_rl_reset
  assign CAN_FIRE_RL_rl_reset =
	     (rg_cset_in_cache != 7'd127 ||
	      f_reset_reqs$EMPTY_N && f_reset_rsps$FULL_N) &&
	     rg_state == 4'd1 ;
  assign WILL_FIRE_RL_rl_reset = CAN_FIRE_RL_rl_reset ;

  // rule RL_rl_probe_and_immed_rsp
  assign CAN_FIRE_RL_rl_probe_and_immed_rsp =
	     dmem_not_imem_AND_NOT_soc_map_m_is_mem_addr_0__ETC___d114 &&
	     rg_state == 4'd3 ;
  assign WILL_FIRE_RL_rl_probe_and_immed_rsp =
	     CAN_FIRE_RL_rl_probe_and_immed_rsp &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_start_cache_refill
  assign CAN_FIRE_RL_rl_start_cache_refill =
	     master_xactor_f_rd_addr$FULL_N && rg_state == 4'd8 &&
	     b__h19566 == 4'd0 ;
  assign WILL_FIRE_RL_rl_start_cache_refill =
	     MUX_master_xactor_f_rd_addr$enq_1__SEL_2 ;

  // rule RL_rl_cache_refill_rsps_loop
  assign CAN_FIRE_RL_rl_cache_refill_rsps_loop =
	     master_xactor_f_rd_data$EMPTY_N && rg_state == 4'd9 ;
  assign WILL_FIRE_RL_rl_cache_refill_rsps_loop =
	     CAN_FIRE_RL_rl_cache_refill_rsps_loop &&
	     !WILL_FIRE_RL_rl_start_reset &&
	     !EN_req ;

  // rule RL_rl_rereq
  assign CAN_FIRE_RL_rl_rereq = rg_state == 4'd10 ;
  assign WILL_FIRE_RL_rl_rereq =
	     CAN_FIRE_RL_rl_rereq && !WILL_FIRE_RL_rl_start_reset && !EN_req ;

  // rule RL_rl_ST_AMO_response
  assign CAN_FIRE_RL_rl_ST_AMO_response = rg_state == 4'd11 ;
  assign WILL_FIRE_RL_rl_ST_AMO_response = CAN_FIRE_RL_rl_ST_AMO_response ;

  // rule RL_rl_io_read_req
  assign CAN_FIRE_RL_rl_io_read_req =
	     master_xactor_f_rd_addr$FULL_N &&
	     rg_state_5_EQ_12_73_AND_rg_op_1_EQ_0_2_OR_rg_o_ETC___d575 ;
  assign WILL_FIRE_RL_rl_io_read_req =
	     CAN_FIRE_RL_rl_io_read_req && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_read_rsp
  assign CAN_FIRE_RL_rl_io_read_rsp =
	     master_xactor_f_rd_data$EMPTY_N && rg_state == 4'd13 ;
  assign WILL_FIRE_RL_rl_io_read_rsp =
	     CAN_FIRE_RL_rl_io_read_rsp && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_maintain_io_read_rsp
  assign CAN_FIRE_RL_rl_maintain_io_read_rsp = rg_state == 4'd14 ;
  assign WILL_FIRE_RL_rl_maintain_io_read_rsp =
	     CAN_FIRE_RL_rl_maintain_io_read_rsp ;

  // rule RL_rl_io_write_req
  assign CAN_FIRE_RL_rl_io_write_req =
	     f_fabric_write_reqs$FULL_N && rg_state == 4'd12 &&
	     rg_op == 2'd1 ;
  assign WILL_FIRE_RL_rl_io_write_req =
	     CAN_FIRE_RL_rl_io_write_req && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_AMO_SC_req
  assign CAN_FIRE_RL_rl_io_AMO_SC_req =
	     rg_state == 4'd12 && rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 ;
  assign WILL_FIRE_RL_rl_io_AMO_SC_req =
	     CAN_FIRE_RL_rl_io_AMO_SC_req && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_AMO_op_req
  assign CAN_FIRE_RL_rl_io_AMO_op_req =
	     master_xactor_f_rd_addr$FULL_N && rg_state == 4'd12 &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] != 5'b00010 &&
	     rg_amo_funct7[6:2] != 5'b00011 ;
  assign WILL_FIRE_RL_rl_io_AMO_op_req =
	     CAN_FIRE_RL_rl_io_AMO_op_req && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_AMO_read_rsp
  assign CAN_FIRE_RL_rl_io_AMO_read_rsp =
	     master_xactor_f_rd_data$EMPTY_N &&
	     (master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	      f_fabric_write_reqs$FULL_N) &&
	     rg_state == 4'd15 ;
  assign WILL_FIRE_RL_rl_io_AMO_read_rsp = MUX_rg_state$write_1__SEL_3 ;

  // rule RL_rl_discard_write_rsp
  assign CAN_FIRE_RL_rl_discard_write_rsp =
	     b__h19566 != 4'd0 && master_xactor_f_wr_resp$EMPTY_N ;
  assign WILL_FIRE_RL_rl_discard_write_rsp =
	     CAN_FIRE_RL_rl_discard_write_rsp ;

  // rule RL_rl_drive_exception_rsp
  assign CAN_FIRE_RL_rl_drive_exception_rsp = rg_state == 4'd4 ;
  assign WILL_FIRE_RL_rl_drive_exception_rsp = rg_state == 4'd4 ;

  // rule RL_rl_start_reset
  assign CAN_FIRE_RL_rl_start_reset = MUX_rg_state$write_1__SEL_2 ;
  assign WILL_FIRE_RL_rl_start_reset = MUX_rg_state$write_1__SEL_2 ;

  // inputs to muxes for submodule ports
  assign MUX_dw_output_ld_val$wset_1__SEL_1 =
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ;
  assign MUX_dw_output_ld_val$wset_1__SEL_2 =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ;
  assign MUX_dw_output_ld_val$wset_1__SEL_3 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op_1_EQ_0_2_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d166 ;
  assign MUX_dw_output_ld_val$wset_1__SEL_4 =
	     WILL_FIRE_RL_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_rl_ST_AMO_response ;
  assign MUX_f_fabric_write_reqs$enq_1__SEL_2 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     NOT_rg_op_1_EQ_0_2_26_AND_NOT_rg_op_1_EQ_2_3_2_ETC___d470 ;
  assign MUX_master_xactor_f_rd_addr$enq_1__SEL_1 =
	     WILL_FIRE_RL_rl_io_AMO_op_req || WILL_FIRE_RL_rl_io_read_req ;
  assign MUX_master_xactor_f_rd_addr$enq_1__SEL_2 =
	     CAN_FIRE_RL_rl_start_cache_refill &&
	     !WILL_FIRE_RL_rl_start_reset &&
	     !EN_req ;
  assign MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 =
	     EN_req &&
	     req_f3_BITS_1_TO_0_59_EQ_0b0_60_OR_req_f3_BITS_ETC___d889 ;
  assign MUX_ram_word64_set$a_put_1__SEL_1 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ;
  assign MUX_ram_word64_set$b_put_1__SEL_2 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[1:0] != 2'd3 ;
  assign MUX_rg_error_during_refill$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ;
  assign MUX_rg_exc_code$write_1__SEL_1 =
	     EN_req &&
	     NOT_req_f3_BITS_1_TO_0_59_EQ_0b0_60_61_AND_NOT_ETC___d880 ;
  assign MUX_rg_exc_code$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ;
  assign MUX_rg_exc_code$write_1__SEL_3 =
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ;
  assign MUX_rg_ld_val$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_dmem_not_imem_43_OR_soc_map_m_is_mem_addr__ETC___d330 ;
  assign MUX_rg_lrsc_valid$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op_1_EQ_0_2_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d161 ;
  assign MUX_rg_state$write_1__SEL_2 =
	     f_reset_reqs$EMPTY_N && rg_state != 4'd1 ;
  assign MUX_rg_state$write_1__SEL_3 =
	     CAN_FIRE_RL_rl_io_AMO_read_rsp && !WILL_FIRE_RL_rl_start_reset ;
  assign MUX_rg_state$write_1__SEL_10 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[1:0] == 2'd3 ;
  assign MUX_rg_state$write_1__SEL_12 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     (dmem_not_imem && !soc_map$m_is_mem_addr ||
	      rg_op_1_EQ_0_2_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d125 ||
	      NOT_rg_op_1_EQ_0_2_26_AND_NOT_rg_op_1_EQ_2_3_2_ETC___d135) ;
  assign MUX_rg_state$write_1__SEL_13 =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 ;
  assign MUX_dw_output_ld_val$wset_1__VAL_3 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
	       new_value__h5539 :
	       new_value__h15512 ;
  assign MUX_f_fabric_write_reqs$enq_1__VAL_1 = { rg_f3, rg_pa, x__h24964 } ;
  assign MUX_f_fabric_write_reqs$enq_1__VAL_2 =
	     { rg_f3,
	       rg_addr,
	       IF_rg_op_1_EQ_1_9_OR_rg_op_1_EQ_2_3_AND_rg_amo_ETC___d472 } ;
  assign MUX_f_fabric_write_reqs$enq_1__VAL_3 =
	     { rg_f3, rg_pa, rg_st_amo_val } ;
  assign MUX_master_xactor_f_rd_addr$enq_1__VAL_1 =
	     { 4'd0, fabric_addr__h24392, 8'd0, value__h24521, 18'd65536 } ;
  assign MUX_master_xactor_f_rd_addr$enq_1__VAL_2 =
	     { 4'd0, cline_fabric_addr__h19665, 29'd7143424 } ;
  assign MUX_ram_state_and_ctag_cset$a_put_3__VAL_1 = { 3'd4, rg_pa[31:12] } ;
  assign MUX_ram_word64_set$a_put_3__VAL_2 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       IF_rg_f3_01_EQ_0b0_02_THEN_IF_rg_addr_6_BITS_2_ETC___d392 :
	       IF_rg_f3_01_EQ_0b0_02_THEN_IF_rg_addr_6_BITS_2_ETC___d466 ;
  assign MUX_ram_word64_set$b_put_2__VAL_2 = rg_word64_set_in_cache + 9'd1 ;
  assign MUX_ram_word64_set$b_put_2__VAL_4 = { rg_addr[11:5], 2'd0 } ;
  assign MUX_rg_cset_in_cache$write_1__VAL_1 = rg_cset_in_cache + 7'd1 ;
  assign MUX_rg_exc_code$write_1__VAL_1 = (req_op == 2'd0) ? 4'd4 : 4'd6 ;
  assign MUX_rg_ld_val$write_1__VAL_2 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       x__h13221 :
	       IF_rg_f3_01_EQ_0b10_74_THEN_SEXT_IF_rg_f3_01_E_ETC___d334 ;
  assign MUX_rg_state$write_1__VAL_1 =
	     NOT_req_f3_BITS_1_TO_0_59_EQ_0b0_60_61_AND_NOT_ETC___d880 ?
	       4'd4 :
	       4'd3 ;
  assign MUX_rg_state$write_1__VAL_3 =
	     (master_xactor_f_rd_data$D_OUT[2:1] == 2'b0) ? 4'd14 : 4'd4 ;
  assign MUX_rg_state$write_1__VAL_10 =
	     (master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	      rg_error_during_refill) ?
	       4'd4 :
	       4'd10 ;
  assign MUX_rg_state$write_1__VAL_12 =
	     (dmem_not_imem && !soc_map$m_is_mem_addr) ?
	       4'd12 :
	       IF_rg_op_1_EQ_0_2_OR_rg_op_1_EQ_2_3_AND_rg_amo_ETC___d140 ;

  // inlined wires
  assign dw_valid$whas =
	     (WILL_FIRE_RL_rl_io_AMO_read_rsp ||
	      WILL_FIRE_RL_rl_io_read_rsp) &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op_1_EQ_0_2_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d166 ||
	     WILL_FIRE_RL_rl_drive_exception_rsp ||
	     WILL_FIRE_RL_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_rl_ST_AMO_response ;
  assign ctr_wr_rsps_pending_crg$port0__write_1 =
	     ctr_wr_rsps_pending_crg + 4'd1 ;
  assign ctr_wr_rsps_pending_crg$port1__write_1 = b__h19566 - 4'd1 ;
  assign ctr_wr_rsps_pending_crg$port2__read =
	     CAN_FIRE_RL_rl_discard_write_rsp ?
	       ctr_wr_rsps_pending_crg$port1__write_1 :
	       b__h19566 ;
  assign ctr_wr_rsps_pending_crg$EN_port2__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign ctr_wr_rsps_pending_crg$port3__read =
	     ctr_wr_rsps_pending_crg$EN_port2__write ?
	       4'd0 :
	       ctr_wr_rsps_pending_crg$port2__read ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN = set_verbosity_verbosity ;
  assign cfg_verbosity$EN = EN_set_verbosity ;

  // register ctr_wr_rsps_pending_crg
  assign ctr_wr_rsps_pending_crg$D_IN = ctr_wr_rsps_pending_crg$port3__read ;
  assign ctr_wr_rsps_pending_crg$EN = 1'b1 ;

  // register rg_addr
  assign rg_addr$D_IN = req_addr ;
  assign rg_addr$EN = EN_req ;

  // register rg_amo_funct7
  assign rg_amo_funct7$D_IN = req_amo_funct7 ;
  assign rg_amo_funct7$EN = EN_req ;

  // register rg_cset_in_cache
  assign rg_cset_in_cache$D_IN =
	     WILL_FIRE_RL_rl_reset ?
	       MUX_rg_cset_in_cache$write_1__VAL_1 :
	       7'd0 ;
  assign rg_cset_in_cache$EN =
	     WILL_FIRE_RL_rl_reset || WILL_FIRE_RL_rl_start_reset ;

  // register rg_error_during_refill
  assign rg_error_during_refill$D_IN =
	     MUX_rg_error_during_refill$write_1__SEL_1 ;
  assign rg_error_during_refill$EN =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // register rg_exc_code
  always@(MUX_rg_exc_code$write_1__SEL_1 or
	  MUX_rg_exc_code$write_1__VAL_1 or
	  MUX_rg_exc_code$write_1__SEL_2 or
	  MUX_rg_exc_code$write_1__SEL_3 or
	  MUX_rg_error_during_refill$write_1__SEL_1 or access_exc_code__h2458)
  case (1'b1)
    MUX_rg_exc_code$write_1__SEL_1:
	rg_exc_code$D_IN = MUX_rg_exc_code$write_1__VAL_1;
    MUX_rg_exc_code$write_1__SEL_2: rg_exc_code$D_IN = 4'd7;
    MUX_rg_exc_code$write_1__SEL_3: rg_exc_code$D_IN = 4'd5;
    MUX_rg_error_during_refill$write_1__SEL_1:
	rg_exc_code$D_IN = access_exc_code__h2458;
    default: rg_exc_code$D_IN = 4'b1010 /* unspecified value */ ;
  endcase
  assign rg_exc_code$EN =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	     EN_req &&
	     NOT_req_f3_BITS_1_TO_0_59_EQ_0b0_60_61_AND_NOT_ETC___d880 ;

  // register rg_f3
  assign rg_f3$D_IN = req_f3 ;
  assign rg_f3$EN = EN_req ;

  // register rg_ld_val
  always@(MUX_dw_output_ld_val$wset_1__SEL_2 or
	  new_ld_val__h24935 or
	  MUX_rg_ld_val$write_1__SEL_2 or
	  MUX_rg_ld_val$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_io_read_rsp or
	  ld_val__h22729 or WILL_FIRE_RL_rl_io_AMO_SC_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dw_output_ld_val$wset_1__SEL_2: rg_ld_val$D_IN = new_ld_val__h24935;
      MUX_rg_ld_val$write_1__SEL_2:
	  rg_ld_val$D_IN = MUX_rg_ld_val$write_1__VAL_2;
      WILL_FIRE_RL_rl_io_read_rsp: rg_ld_val$D_IN = ld_val__h22729;
      WILL_FIRE_RL_rl_io_AMO_SC_req: rg_ld_val$D_IN = 64'd1;
      default: rg_ld_val$D_IN = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rg_ld_val$EN =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_dmem_not_imem_43_OR_soc_map_m_is_mem_addr__ETC___d330 ||
	     WILL_FIRE_RL_rl_io_read_rsp ||
	     WILL_FIRE_RL_rl_io_AMO_SC_req ;

  // register rg_lower_word32
  assign rg_lower_word32$D_IN = 32'h0 ;
  assign rg_lower_word32$EN = 1'b0 ;

  // register rg_lower_word32_full
  assign rg_lower_word32_full$D_IN = 1'd0 ;
  assign rg_lower_word32_full$EN =
	     WILL_FIRE_RL_rl_start_cache_refill ||
	     WILL_FIRE_RL_rl_start_reset ;

  // register rg_lrsc_pa
  assign rg_lrsc_pa$D_IN = rg_addr ;
  assign rg_lrsc_pa$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__02_BITS_21_TO__ETC___d108 ;

  // register rg_lrsc_valid
  assign rg_lrsc_valid$D_IN =
	     MUX_rg_lrsc_valid$write_1__SEL_2 &&
	     rg_op_1_EQ_0_2_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d163 ;
  assign rg_lrsc_valid$EN =
	     WILL_FIRE_RL_rl_io_read_req && rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op_1_EQ_0_2_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d161 ||
	     WILL_FIRE_RL_rl_start_reset ;

  // register rg_op
  assign rg_op$D_IN = req_op ;
  assign rg_op$EN = EN_req ;

  // register rg_pa
  assign rg_pa$D_IN = EN_req ? req_addr : rg_addr ;
  assign rg_pa$EN = EN_req || WILL_FIRE_RL_rl_probe_and_immed_rsp ;

  // register rg_pte_pa
  assign rg_pte_pa$D_IN = 32'h0 ;
  assign rg_pte_pa$EN = 1'b0 ;

  // register rg_st_amo_val
  assign rg_st_amo_val$D_IN = EN_req ? req_st_value : new_st_val__h16644 ;
  assign rg_st_amo_val$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_dmem_not_imem_43_OR_soc_map_m_is_mem_addr__ETC___d517 ||
	     EN_req ;

  // register rg_state
  always@(EN_req or
	  MUX_rg_state$write_1__VAL_1 or
	  WILL_FIRE_RL_rl_start_reset or
	  WILL_FIRE_RL_rl_io_AMO_read_rsp or
	  MUX_rg_state$write_1__VAL_3 or
	  WILL_FIRE_RL_rl_io_AMO_op_req or
	  WILL_FIRE_RL_rl_io_AMO_SC_req or
	  WILL_FIRE_RL_rl_io_write_req or
	  WILL_FIRE_RL_rl_io_read_rsp or
	  WILL_FIRE_RL_rl_io_read_req or
	  WILL_FIRE_RL_rl_rereq or
	  MUX_rg_state$write_1__SEL_10 or
	  MUX_rg_state$write_1__VAL_10 or
	  WILL_FIRE_RL_rl_start_cache_refill or
	  MUX_rg_state$write_1__SEL_12 or
	  MUX_rg_state$write_1__VAL_12 or MUX_rg_state$write_1__SEL_13)
  case (1'b1)
    EN_req: rg_state$D_IN = MUX_rg_state$write_1__VAL_1;
    WILL_FIRE_RL_rl_start_reset: rg_state$D_IN = 4'd1;
    WILL_FIRE_RL_rl_io_AMO_read_rsp:
	rg_state$D_IN = MUX_rg_state$write_1__VAL_3;
    WILL_FIRE_RL_rl_io_AMO_op_req: rg_state$D_IN = 4'd15;
    WILL_FIRE_RL_rl_io_AMO_SC_req || WILL_FIRE_RL_rl_io_write_req:
	rg_state$D_IN = 4'd11;
    WILL_FIRE_RL_rl_io_read_rsp: rg_state$D_IN = MUX_rg_state$write_1__VAL_3;
    WILL_FIRE_RL_rl_io_read_req: rg_state$D_IN = 4'd13;
    WILL_FIRE_RL_rl_rereq: rg_state$D_IN = 4'd3;
    MUX_rg_state$write_1__SEL_10:
	rg_state$D_IN = MUX_rg_state$write_1__VAL_10;
    WILL_FIRE_RL_rl_start_cache_refill: rg_state$D_IN = 4'd9;
    MUX_rg_state$write_1__SEL_12:
	rg_state$D_IN = MUX_rg_state$write_1__VAL_12;
    MUX_rg_state$write_1__SEL_13: rg_state$D_IN = 4'd2;
    default: rg_state$D_IN = 4'b1010 /* unspecified value */ ;
  endcase
  assign rg_state$EN =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[1:0] == 2'd3 ||
	     MUX_rg_state$write_1__SEL_12 ||
	     WILL_FIRE_RL_rl_io_AMO_read_rsp ||
	     WILL_FIRE_RL_rl_io_read_rsp ||
	     EN_req ||
	     WILL_FIRE_RL_rl_start_reset ||
	     WILL_FIRE_RL_rl_rereq ||
	     WILL_FIRE_RL_rl_start_cache_refill ||
	     WILL_FIRE_RL_rl_io_AMO_SC_req ||
	     WILL_FIRE_RL_rl_io_write_req ||
	     WILL_FIRE_RL_rl_io_read_req ||
	     WILL_FIRE_RL_rl_io_AMO_op_req ;

  // register rg_word64_set_in_cache
  assign rg_word64_set_in_cache$D_IN =
	     MUX_ram_word64_set$b_put_1__SEL_2 ?
	       MUX_ram_word64_set$b_put_2__VAL_2 :
	       MUX_ram_word64_set$b_put_2__VAL_4 ;
  assign rg_word64_set_in_cache$EN =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[1:0] != 2'd3 ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // submodule f_fabric_write_reqs
  always@(MUX_dw_output_ld_val$wset_1__SEL_2 or
	  MUX_f_fabric_write_reqs$enq_1__VAL_1 or
	  MUX_f_fabric_write_reqs$enq_1__SEL_2 or
	  MUX_f_fabric_write_reqs$enq_1__VAL_2 or
	  WILL_FIRE_RL_rl_io_write_req or
	  MUX_f_fabric_write_reqs$enq_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dw_output_ld_val$wset_1__SEL_2:
	  f_fabric_write_reqs$D_IN = MUX_f_fabric_write_reqs$enq_1__VAL_1;
      MUX_f_fabric_write_reqs$enq_1__SEL_2:
	  f_fabric_write_reqs$D_IN = MUX_f_fabric_write_reqs$enq_1__VAL_2;
      WILL_FIRE_RL_rl_io_write_req:
	  f_fabric_write_reqs$D_IN = MUX_f_fabric_write_reqs$enq_1__VAL_3;
      default: f_fabric_write_reqs$D_IN =
		   99'h2AAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign f_fabric_write_reqs$ENQ =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     NOT_rg_op_1_EQ_0_2_26_AND_NOT_rg_op_1_EQ_2_3_2_ETC___d470 ||
	     WILL_FIRE_RL_rl_io_write_req ;
  assign f_fabric_write_reqs$DEQ = CAN_FIRE_RL_rl_fabric_send_write_req ;
  assign f_fabric_write_reqs$CLR = 1'b0 ;

  // submodule f_reset_reqs
  assign f_reset_reqs$D_IN = !EN_server_reset_request_put ;
  assign f_reset_reqs$ENQ =
	     EN_server_reset_request_put || EN_server_flush_request_put ;
  assign f_reset_reqs$DEQ = MUX_rg_state$write_1__SEL_13 ;
  assign f_reset_reqs$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$D_IN = f_reset_reqs$D_OUT ;
  assign f_reset_rsps$ENQ =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 ;
  assign f_reset_rsps$DEQ =
	     EN_server_flush_response_get || EN_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule master_xactor_f_rd_addr
  assign master_xactor_f_rd_addr$D_IN =
	     MUX_master_xactor_f_rd_addr$enq_1__SEL_1 ?
	       MUX_master_xactor_f_rd_addr$enq_1__VAL_1 :
	       MUX_master_xactor_f_rd_addr$enq_1__VAL_2 ;
  assign master_xactor_f_rd_addr$ENQ =
	     WILL_FIRE_RL_rl_io_AMO_op_req || WILL_FIRE_RL_rl_io_read_req ||
	     WILL_FIRE_RL_rl_start_cache_refill ;
  assign master_xactor_f_rd_addr$DEQ =
	     master_xactor_f_rd_addr$EMPTY_N && mem_master_arready ;
  assign master_xactor_f_rd_addr$CLR =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;

  // submodule master_xactor_f_rd_data
  assign master_xactor_f_rd_data$D_IN =
	     { mem_master_rid,
	       mem_master_rdata,
	       mem_master_rresp,
	       mem_master_rlast } ;
  assign master_xactor_f_rd_data$ENQ =
	     mem_master_rvalid && master_xactor_f_rd_data$FULL_N ;
  assign master_xactor_f_rd_data$DEQ =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp || WILL_FIRE_RL_rl_io_read_rsp ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop ;
  assign master_xactor_f_rd_data$CLR =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;

  // submodule master_xactor_f_wr_addr
  assign master_xactor_f_wr_addr$D_IN =
	     { 4'd0,
	       mem_req_wr_addr_awaddr__h2676,
	       8'd0,
	       x__h2723,
	       18'd65536 } ;
  assign master_xactor_f_wr_addr$ENQ =
	     f_fabric_write_reqs$EMPTY_N && master_xactor_f_wr_addr$FULL_N &&
	     master_xactor_f_wr_data$FULL_N ;
  assign master_xactor_f_wr_addr$DEQ =
	     master_xactor_f_wr_addr$EMPTY_N && mem_master_awready ;
  assign master_xactor_f_wr_addr$CLR =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;

  // submodule master_xactor_f_wr_data
  assign master_xactor_f_wr_data$D_IN =
	     { mem_req_wr_data_wdata__h2907,
	       mem_req_wr_data_wstrb__h2908,
	       1'd1 } ;
  assign master_xactor_f_wr_data$ENQ =
	     f_fabric_write_reqs$EMPTY_N && master_xactor_f_wr_addr$FULL_N &&
	     master_xactor_f_wr_data$FULL_N ;
  assign master_xactor_f_wr_data$DEQ =
	     master_xactor_f_wr_data$EMPTY_N && mem_master_wready ;
  assign master_xactor_f_wr_data$CLR =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;

  // submodule master_xactor_f_wr_resp
  assign master_xactor_f_wr_resp$D_IN = { mem_master_bid, mem_master_bresp } ;
  assign master_xactor_f_wr_resp$ENQ =
	     mem_master_bvalid && master_xactor_f_wr_resp$FULL_N ;
  assign master_xactor_f_wr_resp$DEQ =
	     b__h19566 != 4'd0 && master_xactor_f_wr_resp$EMPTY_N ;
  assign master_xactor_f_wr_resp$CLR =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;

  // submodule ram_state_and_ctag_cset
  assign ram_state_and_ctag_cset$ADDRA =
	     WILL_FIRE_RL_rl_start_cache_refill ?
	       rg_addr[11:5] :
	       rg_cset_in_cache ;
  assign ram_state_and_ctag_cset$ADDRB =
	     MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       req_addr[11:5] :
	       rg_addr[11:5] ;
  assign ram_state_and_ctag_cset$DIA =
	     WILL_FIRE_RL_rl_start_cache_refill ?
	       MUX_ram_state_and_ctag_cset$a_put_3__VAL_1 :
	       23'd2796202 ;
  assign ram_state_and_ctag_cset$DIB =
	     MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       23'b01010101010101010101010 /* unspecified value */  :
	       23'b01010101010101010101010 /* unspecified value */  ;
  assign ram_state_and_ctag_cset$WEA = 1'd1 ;
  assign ram_state_and_ctag_cset$WEB = 1'd0 ;
  assign ram_state_and_ctag_cset$ENA =
	     WILL_FIRE_RL_rl_start_cache_refill || WILL_FIRE_RL_rl_reset ;
  assign ram_state_and_ctag_cset$ENB =
	     EN_req &&
	     req_f3_BITS_1_TO_0_59_EQ_0b0_60_OR_req_f3_BITS_ETC___d889 ||
	     WILL_FIRE_RL_rl_rereq ;

  // submodule ram_word64_set
  assign ram_word64_set$ADDRA =
	     MUX_ram_word64_set$a_put_1__SEL_1 ?
	       rg_word64_set_in_cache :
	       rg_addr[11:3] ;
  always@(MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  req_addr or
	  MUX_ram_word64_set$b_put_1__SEL_2 or
	  MUX_ram_word64_set$b_put_2__VAL_2 or
	  WILL_FIRE_RL_rl_rereq or
	  rg_addr or
	  WILL_FIRE_RL_rl_start_cache_refill or
	  MUX_ram_word64_set$b_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  ram_word64_set$ADDRB = req_addr[11:3];
      MUX_ram_word64_set$b_put_1__SEL_2:
	  ram_word64_set$ADDRB = MUX_ram_word64_set$b_put_2__VAL_2;
      WILL_FIRE_RL_rl_rereq: ram_word64_set$ADDRB = rg_addr[11:3];
      WILL_FIRE_RL_rl_start_cache_refill:
	  ram_word64_set$ADDRB = MUX_ram_word64_set$b_put_2__VAL_4;
      default: ram_word64_set$ADDRB = 9'b010101010 /* unspecified value */ ;
    endcase
  end
  assign ram_word64_set$DIA =
	     MUX_ram_word64_set$a_put_1__SEL_1 ?
	       master_xactor_f_rd_data$D_OUT[66:3] :
	       MUX_ram_word64_set$a_put_3__VAL_2 ;
  always@(MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  MUX_ram_word64_set$b_put_1__SEL_2 or
	  WILL_FIRE_RL_rl_rereq or WILL_FIRE_RL_rl_start_cache_refill)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      MUX_ram_word64_set$b_put_1__SEL_2:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_rl_rereq:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_rl_start_cache_refill:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      default: ram_word64_set$DIB =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ram_word64_set$WEA = 1'd1 ;
  assign ram_word64_set$WEB = 1'd0 ;
  assign ram_word64_set$ENA =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_dmem_not_imem_43_OR_soc_map_m_is_mem_addr__ETC___d341 ;
  assign ram_word64_set$ENB =
	     EN_req &&
	     req_f3_BITS_1_TO_0_59_EQ_0b0_60_OR_req_f3_BITS_ETC___d889 ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[1:0] != 2'd3 ||
	     WILL_FIRE_RL_rl_rereq ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // submodule soc_map
  assign soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign soc_map$m_is_mem_addr_addr = { 32'd0, rg_addr } ;
  assign soc_map$m_is_near_mem_IO_addr_addr = 64'h0 ;

  // remaining internal signals
  assign IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_1_E_ETC___d302 =
	     (rg_addr[2:0] == 3'h0) ? 64'd1 : 64'd0 ;
  assign IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_IF__ETC___d774 =
	     (rg_addr[2:0] == 3'h0) ? ld_val__h22729 : 64'd0 ;
  assign IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_ram_ETC___d287 =
	     (rg_addr[2:0] == 3'h0) ? word64__h5320 : 64'd0 ;
  assign IF_rg_f3_01_EQ_0b0_02_THEN_IF_rg_addr_6_BITS_2_ETC__q30 =
	     IF_rg_f3_01_EQ_0b0_02_THEN_IF_rg_addr_6_BITS_2_ETC___d294[31:0] ;
  assign IF_rg_f3_01_EQ_0b10_74_THEN_SEXT_rg_st_amo_val_ETC___d398 =
	     (rg_f3 == 3'b010) ?
	       { {32{rg_st_amo_val_BITS_31_TO_0__q31[31]}},
		 rg_st_amo_val_BITS_31_TO_0__q31 } :
	       rg_st_amo_val ;
  assign IF_rg_op_1_EQ_0_2_OR_rg_op_1_EQ_2_3_AND_rg_amo_ETC___d140 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
	       4'd8 :
	       IF_rg_op_1_EQ_1_9_OR_rg_op_1_EQ_2_3_AND_rg_amo_ETC___d139 ;
  assign IF_rg_op_1_EQ_1_9_OR_rg_op_1_EQ_2_3_AND_rg_amo_ETC___d112 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 &&
	       lrsc_result__h13211 ||
	       f_fabric_write_reqs$FULL_N :
	       !ram_state_and_ctag_cset$DOB[22] ||
	       !ram_state_and_ctag_cset_b_read__02_BITS_21_TO__ETC___d108 ||
	       f_fabric_write_reqs$FULL_N ;
  assign IF_rg_op_1_EQ_1_9_OR_rg_op_1_EQ_2_3_AND_rg_amo_ETC___d139 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       4'd11 :
	       ((!ram_state_and_ctag_cset$DOB[22] ||
		 !ram_state_and_ctag_cset_b_read__02_BITS_21_TO__ETC___d108) ?
		  4'd8 :
		  4'd11) ;
  assign IF_rg_op_1_EQ_1_9_OR_rg_op_1_EQ_2_3_AND_rg_amo_ETC___d472 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       rg_st_amo_val :
	       new_st_val__h16644 ;
  assign NOT_cfg_verbosity_read__0_ULE_1_1___d42 = cfg_verbosity > 4'd1 ;
  assign NOT_cfg_verbosity_read__0_ULE_2_37___d538 = cfg_verbosity > 4'd2 ;
  assign NOT_dmem_not_imem_43_OR_soc_map_m_is_mem_addr__ETC___d330 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     (rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 ||
	      rg_op != 2'd1 && ram_state_and_ctag_cset$DOB[22] &&
	      ram_state_and_ctag_cset_b_read__02_BITS_21_TO__ETC___d108) ;
  assign NOT_dmem_not_imem_43_OR_soc_map_m_is_mem_addr__ETC___d341 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     rg_op_1_EQ_1_9_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d339 ;
  assign NOT_dmem_not_imem_43_OR_soc_map_m_is_mem_addr__ETC___d475 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op == 2'd1 &&
	     rg_addr_6_EQ_rg_lrsc_pa_5___d147 &&
	     NOT_cfg_verbosity_read__0_ULE_1_1___d42 ;
  assign NOT_dmem_not_imem_43_OR_soc_map_m_is_mem_addr__ETC___d487 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 &&
	     NOT_cfg_verbosity_read__0_ULE_1_1___d42 ;
  assign NOT_dmem_not_imem_43_OR_soc_map_m_is_mem_addr__ETC___d508 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_1_EQ_1_9_55_AND_NOT_rg_op_1_EQ_2_3_2_ETC___d506 ;
  assign NOT_dmem_not_imem_43_OR_soc_map_m_is_mem_addr__ETC___d511 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_1_EQ_1_9_55_AND_NOT_rg_op_1_EQ_2_3_2_ETC___d509 ;
  assign NOT_dmem_not_imem_43_OR_soc_map_m_is_mem_addr__ETC___d515 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_1_EQ_1_9_55_AND_NOT_rg_op_1_EQ_2_3_2_ETC___d513 ;
  assign NOT_dmem_not_imem_43_OR_soc_map_m_is_mem_addr__ETC___d517 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_1_EQ_1_9_55_AND_NOT_rg_op_1_EQ_2_3_2_ETC___d338 ;
  assign NOT_ram_state_and_ctag_cset_b_read__02_BIT_22__ETC___d149 =
	     (!ram_state_and_ctag_cset$DOB[22] ||
	      !ram_state_and_ctag_cset_b_read__02_BITS_21_TO__ETC___d108) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     rg_addr_6_EQ_rg_lrsc_pa_5___d147 ;
  assign NOT_req_f3_BITS_1_TO_0_59_EQ_0b0_60_61_AND_NOT_ETC___d880 =
	     req_f3[1:0] != 2'b0 && (req_f3[1:0] != 2'b01 || req_addr[0]) &&
	     (req_f3[1:0] != 2'b10 || req_addr[1:0] != 2'b0) &&
	     (req_f3[1:0] != 2'b11 || req_addr[2:0] != 3'b0) ;
  assign NOT_rg_op_1_EQ_0_2_26_AND_NOT_rg_op_1_EQ_2_3_2_ETC___d135 =
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid && rg_lrsc_pa_5_EQ_rg_addr_6___d96) ;
  assign NOT_rg_op_1_EQ_0_2_26_AND_NOT_rg_op_1_EQ_2_3_2_ETC___d470 =
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     (rg_op_1_EQ_1_9_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d468 ||
	      NOT_rg_op_1_EQ_1_9_55_AND_NOT_rg_op_1_EQ_2_3_2_ETC___d338) ;
  assign NOT_rg_op_1_EQ_0_2_26_AND_NOT_rg_op_1_EQ_2_3_2_ETC___d490 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_1_EQ_2_3_27_OR_NOT_rg_amo_funct7_4_B_ETC___d488 ;
  assign NOT_rg_op_1_EQ_0_2_26_AND_NOT_rg_op_1_EQ_2_3_2_ETC___d498 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_1_EQ_2_3_27_OR_NOT_rg_amo_funct7_4_B_ETC___d496 ;
  assign NOT_rg_op_1_EQ_1_9_55_AND_NOT_rg_op_1_EQ_2_3_2_ETC___d158 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__02_BITS_21_TO__ETC___d108 &&
	     rg_addr_6_EQ_rg_lrsc_pa_5___d147 ;
  assign NOT_rg_op_1_EQ_1_9_55_AND_NOT_rg_op_1_EQ_2_3_2_ETC___d338 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__02_BITS_21_TO__ETC___d108 ;
  assign NOT_rg_op_1_EQ_1_9_55_AND_NOT_rg_op_1_EQ_2_3_2_ETC___d506 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     (!ram_state_and_ctag_cset$DOB[22] ||
	      !ram_state_and_ctag_cset_b_read__02_BITS_21_TO__ETC___d108) &&
	     NOT_cfg_verbosity_read__0_ULE_1_1___d42 ;
  assign NOT_rg_op_1_EQ_1_9_55_AND_NOT_rg_op_1_EQ_2_3_2_ETC___d509 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__02_BITS_21_TO__ETC___d108 &&
	     NOT_cfg_verbosity_read__0_ULE_1_1___d42 ;
  assign NOT_rg_op_1_EQ_1_9_55_AND_NOT_rg_op_1_EQ_2_3_2_ETC___d513 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__02_BITS_21_TO__ETC___d108 &&
	     rg_addr_6_EQ_rg_lrsc_pa_5___d147 &&
	     NOT_cfg_verbosity_read__0_ULE_1_1___d42 ;
  assign NOT_rg_op_1_EQ_2_3_27_OR_NOT_rg_amo_funct7_4_B_ETC___d336 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid && rg_lrsc_pa_5_EQ_rg_addr_6___d96) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__02_BITS_21_TO__ETC___d108 ;
  assign NOT_rg_op_1_EQ_2_3_27_OR_NOT_rg_amo_funct7_4_B_ETC___d488 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid && rg_lrsc_pa_5_EQ_rg_addr_6___d96) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__02_BITS_21_TO__ETC___d108 &&
	     NOT_cfg_verbosity_read__0_ULE_1_1___d42 ;
  assign NOT_rg_op_1_EQ_2_3_27_OR_NOT_rg_amo_funct7_4_B_ETC___d492 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid && rg_lrsc_pa_5_EQ_rg_addr_6___d96) &&
	     (!ram_state_and_ctag_cset$DOB[22] ||
	      !ram_state_and_ctag_cset_b_read__02_BITS_21_TO__ETC___d108) &&
	     NOT_cfg_verbosity_read__0_ULE_1_1___d42 ;
  assign NOT_rg_op_1_EQ_2_3_27_OR_NOT_rg_amo_funct7_4_B_ETC___d496 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid && rg_lrsc_pa_5_EQ_rg_addr_6___d96) &&
	     NOT_cfg_verbosity_read__0_ULE_1_1___d42 ;
  assign _theResult___fst__h2843 =
	     f_fabric_write_reqs$D_OUT[63:0] << shift_bits__h2690 ;
  assign access_exc_code__h2458 =
	     dmem_not_imem ?
	       ((rg_op == 2'd0 ||
		 rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
		  4'd5 :
		  4'd7) :
	       4'd1 ;
  assign b__h19566 =
	     CAN_FIRE_RL_rl_fabric_send_write_req ?
	       ctr_wr_rsps_pending_crg$port0__write_1 :
	       ctr_wr_rsps_pending_crg ;
  assign cline_addr__h19664 = { rg_pa[31:5], 5'd0 } ;
  assign cline_fabric_addr__h19665 = { 32'd0, cline_addr__h19664 } ;
  assign dmem_not_imem_AND_NOT_soc_map_m_is_mem_addr_0__ETC___d114 =
	     dmem_not_imem && !soc_map$m_is_mem_addr || rg_op == 2'd0 ||
	     rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010 ||
	     IF_rg_op_1_EQ_1_9_OR_rg_op_1_EQ_2_3_AND_rg_amo_ETC___d112 ;
  assign fabric_addr__h24392 = { 32'd0, rg_pa } ;
  assign ld_val2729_BITS_15_TO_0__q36 = ld_val__h22729[15:0] ;
  assign ld_val2729_BITS_15_TO_8__q38 = ld_val__h22729[15:8] ;
  assign ld_val2729_BITS_23_TO_16__q39 = ld_val__h22729[23:16] ;
  assign ld_val2729_BITS_31_TO_0__q37 = ld_val__h22729[31:0] ;
  assign ld_val2729_BITS_31_TO_16__q40 = ld_val__h22729[31:16] ;
  assign ld_val2729_BITS_31_TO_24__q41 = ld_val__h22729[31:24] ;
  assign ld_val2729_BITS_39_TO_32__q42 = ld_val__h22729[39:32] ;
  assign ld_val2729_BITS_47_TO_32__q43 = ld_val__h22729[47:32] ;
  assign ld_val2729_BITS_47_TO_40__q45 = ld_val__h22729[47:40] ;
  assign ld_val2729_BITS_55_TO_48__q46 = ld_val__h22729[55:48] ;
  assign ld_val2729_BITS_63_TO_32__q44 = ld_val__h22729[63:32] ;
  assign ld_val2729_BITS_63_TO_48__q47 = ld_val__h22729[63:48] ;
  assign ld_val2729_BITS_63_TO_56__q48 = ld_val__h22729[63:56] ;
  assign ld_val2729_BITS_7_TO_0__q35 = ld_val__h22729[7:0] ;
  assign lrsc_result__h13211 =
	     !rg_lrsc_valid || !rg_lrsc_pa_5_EQ_rg_addr_6___d96 ;
  assign master_xactor_f_rd_dataD_OUT_BITS_10_TO_3__q2 =
	     master_xactor_f_rd_data$D_OUT[10:3] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_18_TO_11__q5 =
	     master_xactor_f_rd_data$D_OUT[18:11] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_18_TO_3__q3 =
	     master_xactor_f_rd_data$D_OUT[18:3] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_26_TO_19__q1 =
	     master_xactor_f_rd_data$D_OUT[26:19] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_34_TO_19__q6 =
	     master_xactor_f_rd_data$D_OUT[34:19] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_34_TO_27__q7 =
	     master_xactor_f_rd_data$D_OUT[34:27] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_34_TO_3__q4 =
	     master_xactor_f_rd_data$D_OUT[34:3] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_42_TO_35__q8 =
	     master_xactor_f_rd_data$D_OUT[42:35] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_50_TO_35__q9 =
	     master_xactor_f_rd_data$D_OUT[50:35] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_50_TO_43__q11 =
	     master_xactor_f_rd_data$D_OUT[50:43] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_58_TO_51__q12 =
	     master_xactor_f_rd_data$D_OUT[58:51] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_66_TO_35__q10 =
	     master_xactor_f_rd_data$D_OUT[66:35] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_66_TO_51__q13 =
	     master_xactor_f_rd_data$D_OUT[66:51] ;
  assign master_xactor_f_rd_dataD_OUT_BITS_66_TO_59__q14 =
	     master_xactor_f_rd_data$D_OUT[66:59] ;
  assign mem_req_wr_addr_awaddr__h2676 =
	     { 32'd0, f_fabric_write_reqs$D_OUT[95:64] } ;
  assign new_st_val__h16644 =
	     (rg_f3 == 3'b010) ?
	       new_st_val__h16926 :
	       _theResult_____2__h16922 ;
  assign new_st_val__h16926 = { 32'd0, _theResult_____2__h16922[31:0] } ;
  assign new_st_val__h17017 =
	     IF_rg_f3_01_EQ_0b10_74_THEN_SEXT_IF_rg_f3_01_E_ETC___d334 +
	     IF_rg_f3_01_EQ_0b10_74_THEN_SEXT_rg_st_amo_val_ETC___d398 ;
  assign new_st_val__h17997 = w1__h16914 ^ w2__h24975 ;
  assign new_st_val__h18001 = w1__h16914 & w2__h24975 ;
  assign new_st_val__h18005 = w1__h16914 | w2__h24975 ;
  assign new_st_val__h18009 =
	     (w1__h16914 < w2__h24975) ? w1__h16914 : w2__h24975 ;
  assign new_st_val__h18014 =
	     (w1__h16914 <= w2__h24975) ? w2__h24975 : w1__h16914 ;
  assign new_st_val__h18020 =
	     ((IF_rg_f3_01_EQ_0b10_74_THEN_SEXT_IF_rg_f3_01_E_ETC___d334 ^
	       64'h8000000000000000) <
	      (IF_rg_f3_01_EQ_0b10_74_THEN_SEXT_rg_st_amo_val_ETC___d398 ^
	       64'h8000000000000000)) ?
	       w1__h16914 :
	       w2__h24975 ;
  assign new_st_val__h18025 =
	     ((IF_rg_f3_01_EQ_0b10_74_THEN_SEXT_IF_rg_f3_01_E_ETC___d334 ^
	       64'h8000000000000000) <=
	      (IF_rg_f3_01_EQ_0b10_74_THEN_SEXT_rg_st_amo_val_ETC___d398 ^
	       64'h8000000000000000)) ?
	       w2__h24975 :
	       w1__h16914 ;
  assign new_st_val__h24985 = { 32'd0, _theResult_____2__h24981[31:0] } ;
  assign new_st_val__h25076 =
	     new_ld_val__h24935 +
	     IF_rg_f3_01_EQ_0b10_74_THEN_SEXT_rg_st_amo_val_ETC___d398 ;
  assign new_st_val__h26936 = w1__h24973 ^ w2__h24975 ;
  assign new_st_val__h26940 = w1__h24973 & w2__h24975 ;
  assign new_st_val__h26944 = w1__h24973 | w2__h24975 ;
  assign new_st_val__h26948 =
	     (w1__h24973 < w2__h24975) ? w1__h24973 : w2__h24975 ;
  assign new_st_val__h26953 =
	     (w1__h24973 <= w2__h24975) ? w2__h24975 : w1__h24973 ;
  assign new_st_val__h26959 =
	     ((new_ld_val__h24935 ^ 64'h8000000000000000) <
	      (IF_rg_f3_01_EQ_0b10_74_THEN_SEXT_rg_st_amo_val_ETC___d398 ^
	       64'h8000000000000000)) ?
	       w1__h24973 :
	       w2__h24975 ;
  assign new_st_val__h26964 =
	     ((new_ld_val__h24935 ^ 64'h8000000000000000) <=
	      (IF_rg_f3_01_EQ_0b10_74_THEN_SEXT_rg_st_amo_val_ETC___d398 ^
	       64'h8000000000000000)) ?
	       w2__h24975 :
	       w1__h24973 ;
  assign new_value__h15512 =
	     (rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       64'd1 :
	       CASE_rg_f3_0b0_IF_rg_addr_6_BITS_2_TO_0_21_EQ__ETC__q51 ;
  assign new_value__h5539 =
	     (rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       word64__h5320 :
	       IF_rg_f3_01_EQ_0b0_02_THEN_IF_rg_addr_6_BITS_2_ETC___d294 ;
  assign pa_ctag__h5178 = { 2'd0, rg_addr[31:12] } ;
  assign ram_state_and_ctag_cset_b_read__02_BITS_21_TO__ETC___d108 =
	     ram_state_and_ctag_cset$DOB[21:0] == pa_ctag__h5178 ;
  assign ram_state_and_ctag_cset_b_read__02_BIT_22_03_A_ETC___d150 =
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__02_BITS_21_TO__ETC___d108 &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 ||
	     NOT_ram_state_and_ctag_cset_b_read__02_BIT_22__ETC___d149 ;
  assign req_f3_BITS_1_TO_0_59_EQ_0b0_60_OR_req_f3_BITS_ETC___d889 =
	     req_f3[1:0] == 2'b0 || req_f3[1:0] == 2'b01 && !req_addr[0] ||
	     req_f3[1:0] == 2'b10 && req_addr[1:0] == 2'b0 ||
	     req_f3[1:0] == 2'b11 && req_addr[2:0] == 3'b0 ;
  assign result__h11922 =
	     { {56{word64320_BITS_7_TO_0__q15[7]}},
	       word64320_BITS_7_TO_0__q15 } ;
  assign result__h11950 =
	     { {56{word64320_BITS_15_TO_8__q18[7]}},
	       word64320_BITS_15_TO_8__q18 } ;
  assign result__h11978 =
	     { {56{word64320_BITS_23_TO_16__q19[7]}},
	       word64320_BITS_23_TO_16__q19 } ;
  assign result__h12006 =
	     { {56{word64320_BITS_31_TO_24__q21[7]}},
	       word64320_BITS_31_TO_24__q21 } ;
  assign result__h12034 =
	     { {56{word64320_BITS_39_TO_32__q22[7]}},
	       word64320_BITS_39_TO_32__q22 } ;
  assign result__h12062 =
	     { {56{word64320_BITS_47_TO_40__q25[7]}},
	       word64320_BITS_47_TO_40__q25 } ;
  assign result__h12090 =
	     { {56{word64320_BITS_55_TO_48__q26[7]}},
	       word64320_BITS_55_TO_48__q26 } ;
  assign result__h12118 =
	     { {56{word64320_BITS_63_TO_56__q28[7]}},
	       word64320_BITS_63_TO_56__q28 } ;
  assign result__h12163 = { 56'd0, word64__h5320[7:0] } ;
  assign result__h12191 = { 56'd0, word64__h5320[15:8] } ;
  assign result__h12219 = { 56'd0, word64__h5320[23:16] } ;
  assign result__h12247 = { 56'd0, word64__h5320[31:24] } ;
  assign result__h12275 = { 56'd0, word64__h5320[39:32] } ;
  assign result__h12303 = { 56'd0, word64__h5320[47:40] } ;
  assign result__h12331 = { 56'd0, word64__h5320[55:48] } ;
  assign result__h12359 = { 56'd0, word64__h5320[63:56] } ;
  assign result__h12404 =
	     { {48{word64320_BITS_15_TO_0__q16[15]}},
	       word64320_BITS_15_TO_0__q16 } ;
  assign result__h12432 =
	     { {48{word64320_BITS_31_TO_16__q20[15]}},
	       word64320_BITS_31_TO_16__q20 } ;
  assign result__h12460 =
	     { {48{word64320_BITS_47_TO_32__q23[15]}},
	       word64320_BITS_47_TO_32__q23 } ;
  assign result__h12488 =
	     { {48{word64320_BITS_63_TO_48__q27[15]}},
	       word64320_BITS_63_TO_48__q27 } ;
  assign result__h12529 = { 48'd0, word64__h5320[15:0] } ;
  assign result__h12557 = { 48'd0, word64__h5320[31:16] } ;
  assign result__h12585 = { 48'd0, word64__h5320[47:32] } ;
  assign result__h12613 = { 48'd0, word64__h5320[63:48] } ;
  assign result__h12654 =
	     { {32{word64320_BITS_31_TO_0__q17[31]}},
	       word64320_BITS_31_TO_0__q17 } ;
  assign result__h12682 =
	     { {32{word64320_BITS_63_TO_32__q24[31]}},
	       word64320_BITS_63_TO_32__q24 } ;
  assign result__h12721 = { 32'd0, word64__h5320[31:0] } ;
  assign result__h12749 = { 32'd0, word64__h5320[63:32] } ;
  assign result__h22789 =
	     { {56{master_xactor_f_rd_dataD_OUT_BITS_10_TO_3__q2[7]}},
	       master_xactor_f_rd_dataD_OUT_BITS_10_TO_3__q2 } ;
  assign result__h22819 =
	     { {56{master_xactor_f_rd_dataD_OUT_BITS_18_TO_11__q5[7]}},
	       master_xactor_f_rd_dataD_OUT_BITS_18_TO_11__q5 } ;
  assign result__h22846 =
	     { {56{master_xactor_f_rd_dataD_OUT_BITS_26_TO_19__q1[7]}},
	       master_xactor_f_rd_dataD_OUT_BITS_26_TO_19__q1 } ;
  assign result__h22873 =
	     { {56{master_xactor_f_rd_dataD_OUT_BITS_34_TO_27__q7[7]}},
	       master_xactor_f_rd_dataD_OUT_BITS_34_TO_27__q7 } ;
  assign result__h22900 =
	     { {56{master_xactor_f_rd_dataD_OUT_BITS_42_TO_35__q8[7]}},
	       master_xactor_f_rd_dataD_OUT_BITS_42_TO_35__q8 } ;
  assign result__h22927 =
	     { {56{master_xactor_f_rd_dataD_OUT_BITS_50_TO_43__q11[7]}},
	       master_xactor_f_rd_dataD_OUT_BITS_50_TO_43__q11 } ;
  assign result__h22954 =
	     { {56{master_xactor_f_rd_dataD_OUT_BITS_58_TO_51__q12[7]}},
	       master_xactor_f_rd_dataD_OUT_BITS_58_TO_51__q12 } ;
  assign result__h22981 =
	     { {56{master_xactor_f_rd_dataD_OUT_BITS_66_TO_59__q14[7]}},
	       master_xactor_f_rd_dataD_OUT_BITS_66_TO_59__q14 } ;
  assign result__h23025 = { 56'd0, master_xactor_f_rd_data$D_OUT[10:3] } ;
  assign result__h23052 = { 56'd0, master_xactor_f_rd_data$D_OUT[18:11] } ;
  assign result__h23079 = { 56'd0, master_xactor_f_rd_data$D_OUT[26:19] } ;
  assign result__h23106 = { 56'd0, master_xactor_f_rd_data$D_OUT[34:27] } ;
  assign result__h23133 = { 56'd0, master_xactor_f_rd_data$D_OUT[42:35] } ;
  assign result__h23160 = { 56'd0, master_xactor_f_rd_data$D_OUT[50:43] } ;
  assign result__h23187 = { 56'd0, master_xactor_f_rd_data$D_OUT[58:51] } ;
  assign result__h23214 = { 56'd0, master_xactor_f_rd_data$D_OUT[66:59] } ;
  assign result__h23258 =
	     { {48{master_xactor_f_rd_dataD_OUT_BITS_18_TO_3__q3[15]}},
	       master_xactor_f_rd_dataD_OUT_BITS_18_TO_3__q3 } ;
  assign result__h23285 =
	     { {48{master_xactor_f_rd_dataD_OUT_BITS_34_TO_19__q6[15]}},
	       master_xactor_f_rd_dataD_OUT_BITS_34_TO_19__q6 } ;
  assign result__h23312 =
	     { {48{master_xactor_f_rd_dataD_OUT_BITS_50_TO_35__q9[15]}},
	       master_xactor_f_rd_dataD_OUT_BITS_50_TO_35__q9 } ;
  assign result__h23339 =
	     { {48{master_xactor_f_rd_dataD_OUT_BITS_66_TO_51__q13[15]}},
	       master_xactor_f_rd_dataD_OUT_BITS_66_TO_51__q13 } ;
  assign result__h23379 = { 48'd0, master_xactor_f_rd_data$D_OUT[18:3] } ;
  assign result__h23406 = { 48'd0, master_xactor_f_rd_data$D_OUT[34:19] } ;
  assign result__h23433 = { 48'd0, master_xactor_f_rd_data$D_OUT[50:35] } ;
  assign result__h23460 = { 48'd0, master_xactor_f_rd_data$D_OUT[66:51] } ;
  assign result__h23500 =
	     { {32{master_xactor_f_rd_dataD_OUT_BITS_34_TO_3__q4[31]}},
	       master_xactor_f_rd_dataD_OUT_BITS_34_TO_3__q4 } ;
  assign result__h23527 =
	     { {32{master_xactor_f_rd_dataD_OUT_BITS_66_TO_35__q10[31]}},
	       master_xactor_f_rd_dataD_OUT_BITS_66_TO_35__q10 } ;
  assign result__h23565 = { 32'd0, master_xactor_f_rd_data$D_OUT[34:3] } ;
  assign result__h23592 = { 32'd0, master_xactor_f_rd_data$D_OUT[66:35] } ;
  assign result__h25164 =
	     { {56{ld_val2729_BITS_7_TO_0__q35[7]}},
	       ld_val2729_BITS_7_TO_0__q35 } ;
  assign result__h26072 =
	     { {56{ld_val2729_BITS_15_TO_8__q38[7]}},
	       ld_val2729_BITS_15_TO_8__q38 } ;
  assign result__h26100 =
	     { {56{ld_val2729_BITS_23_TO_16__q39[7]}},
	       ld_val2729_BITS_23_TO_16__q39 } ;
  assign result__h26128 =
	     { {56{ld_val2729_BITS_31_TO_24__q41[7]}},
	       ld_val2729_BITS_31_TO_24__q41 } ;
  assign result__h26156 =
	     { {56{ld_val2729_BITS_39_TO_32__q42[7]}},
	       ld_val2729_BITS_39_TO_32__q42 } ;
  assign result__h26184 =
	     { {56{ld_val2729_BITS_47_TO_40__q45[7]}},
	       ld_val2729_BITS_47_TO_40__q45 } ;
  assign result__h26212 =
	     { {56{ld_val2729_BITS_55_TO_48__q46[7]}},
	       ld_val2729_BITS_55_TO_48__q46 } ;
  assign result__h26240 =
	     { {56{ld_val2729_BITS_63_TO_56__q48[7]}},
	       ld_val2729_BITS_63_TO_56__q48 } ;
  assign result__h26285 = { 56'd0, ld_val__h22729[7:0] } ;
  assign result__h26313 = { 56'd0, ld_val__h22729[15:8] } ;
  assign result__h26341 = { 56'd0, ld_val__h22729[23:16] } ;
  assign result__h26369 = { 56'd0, ld_val__h22729[31:24] } ;
  assign result__h26397 = { 56'd0, ld_val__h22729[39:32] } ;
  assign result__h26425 = { 56'd0, ld_val__h22729[47:40] } ;
  assign result__h26453 = { 56'd0, ld_val__h22729[55:48] } ;
  assign result__h26481 = { 56'd0, ld_val__h22729[63:56] } ;
  assign result__h26526 =
	     { {48{ld_val2729_BITS_15_TO_0__q36[15]}},
	       ld_val2729_BITS_15_TO_0__q36 } ;
  assign result__h26554 =
	     { {48{ld_val2729_BITS_31_TO_16__q40[15]}},
	       ld_val2729_BITS_31_TO_16__q40 } ;
  assign result__h26582 =
	     { {48{ld_val2729_BITS_47_TO_32__q43[15]}},
	       ld_val2729_BITS_47_TO_32__q43 } ;
  assign result__h26610 =
	     { {48{ld_val2729_BITS_63_TO_48__q47[15]}},
	       ld_val2729_BITS_63_TO_48__q47 } ;
  assign result__h26651 = { 48'd0, ld_val__h22729[15:0] } ;
  assign result__h26679 = { 48'd0, ld_val__h22729[31:16] } ;
  assign result__h26707 = { 48'd0, ld_val__h22729[47:32] } ;
  assign result__h26735 = { 48'd0, ld_val__h22729[63:48] } ;
  assign result__h26776 =
	     { {32{ld_val2729_BITS_31_TO_0__q37[31]}},
	       ld_val2729_BITS_31_TO_0__q37 } ;
  assign result__h26804 =
	     { {32{ld_val2729_BITS_63_TO_32__q44[31]}},
	       ld_val2729_BITS_63_TO_32__q44 } ;
  assign result__h26843 = { 32'd0, ld_val__h22729[31:0] } ;
  assign result__h26871 = { 32'd0, ld_val__h22729[63:32] } ;
  assign rg_addr_6_EQ_rg_lrsc_pa_5___d147 = rg_addr == rg_lrsc_pa ;
  assign rg_amo_funct7_4_BITS_6_TO_2_5_EQ_0b10_6_AND_NO_ETC___d324 =
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     (!ram_state_and_ctag_cset$DOB[22] ||
	      !ram_state_and_ctag_cset_b_read__02_BITS_21_TO__ETC___d108) &&
	     rg_addr_6_EQ_rg_lrsc_pa_5___d147 &&
	     NOT_cfg_verbosity_read__0_ULE_1_1___d42 ;
  assign rg_lrsc_pa_5_EQ_rg_addr_6___d96 = rg_lrsc_pa == rg_addr ;
  assign rg_op_1_EQ_0_2_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d125 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     (!ram_state_and_ctag_cset$DOB[22] ||
	      !ram_state_and_ctag_cset_b_read__02_BITS_21_TO__ETC___d108) ;
  assign rg_op_1_EQ_0_2_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d161 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     ram_state_and_ctag_cset_b_read__02_BIT_22_03_A_ETC___d150 ||
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     rg_op_1_EQ_1_9_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d159 ;
  assign rg_op_1_EQ_0_2_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d163 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__02_BITS_21_TO__ETC___d108 ;
  assign rg_op_1_EQ_0_2_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d166 =
	     rg_op_1_EQ_0_2_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d163 ||
	     rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h13211 ;
  assign rg_op_1_EQ_0_2_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d307 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__02_BITS_21_TO__ETC___d108 &&
	     NOT_cfg_verbosity_read__0_ULE_1_1___d42 ;
  assign rg_op_1_EQ_0_2_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d320 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     (!ram_state_and_ctag_cset$DOB[22] ||
	      !ram_state_and_ctag_cset_b_read__02_BITS_21_TO__ETC___d108) &&
	     NOT_cfg_verbosity_read__0_ULE_1_1___d42 ;
  assign rg_op_1_EQ_1_9_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d159 =
	     rg_op == 2'd1 && rg_addr_6_EQ_rg_lrsc_pa_5___d147 ||
	     rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 ||
	     NOT_rg_op_1_EQ_1_9_55_AND_NOT_rg_op_1_EQ_2_3_2_ETC___d158 ;
  assign rg_op_1_EQ_1_9_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d339 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_1_EQ_2_3_27_OR_NOT_rg_amo_funct7_4_B_ETC___d336 ||
	     NOT_rg_op_1_EQ_1_9_55_AND_NOT_rg_op_1_EQ_2_3_2_ETC___d338 ;
  assign rg_op_1_EQ_1_9_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d468 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid && rg_lrsc_pa_5_EQ_rg_addr_6___d96) ;
  assign rg_op_1_EQ_2_3_AND_rg_amo_funct7_4_BITS_6_TO_2_ETC___d502 =
	     rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h13211 &&
	     NOT_cfg_verbosity_read__0_ULE_1_1___d42 ;
  assign rg_st_amo_val_BITS_31_TO_0__q31 = rg_st_amo_val[31:0] ;
  assign rg_state_5_EQ_12_73_AND_rg_op_1_EQ_0_2_OR_rg_o_ETC___d575 =
	     rg_state == 4'd12 &&
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     b__h19566 == 4'd0 ;
  assign shift_bits__h2690 = { f_fabric_write_reqs$D_OUT[66:64], 3'b0 } ;
  assign strobe64__h2842 = 8'b00000001 << f_fabric_write_reqs$D_OUT[66:64] ;
  assign strobe64__h2845 = 8'b00000011 << f_fabric_write_reqs$D_OUT[66:64] ;
  assign strobe64__h2848 = 8'b00001111 << f_fabric_write_reqs$D_OUT[66:64] ;
  assign w14969_BITS_31_TO_0__q50 = w1__h24969[31:0] ;
  assign w1___1__h16985 =
	     { 32'd0,
	       IF_rg_f3_01_EQ_0b0_02_THEN_IF_rg_addr_6_BITS_2_ETC___d294[31:0] } ;
  assign w1___1__h25044 = { 32'd0, w1__h24969[31:0] } ;
  assign w2___1__h25045 = { 32'd0, rg_st_amo_val[31:0] } ;
  assign w2__h24975 = (rg_f3 == 3'b010) ? w2___1__h25045 : rg_st_amo_val ;
  assign word64320_BITS_15_TO_0__q16 = word64__h5320[15:0] ;
  assign word64320_BITS_15_TO_8__q18 = word64__h5320[15:8] ;
  assign word64320_BITS_23_TO_16__q19 = word64__h5320[23:16] ;
  assign word64320_BITS_31_TO_0__q17 = word64__h5320[31:0] ;
  assign word64320_BITS_31_TO_16__q20 = word64__h5320[31:16] ;
  assign word64320_BITS_31_TO_24__q21 = word64__h5320[31:24] ;
  assign word64320_BITS_39_TO_32__q22 = word64__h5320[39:32] ;
  assign word64320_BITS_47_TO_32__q23 = word64__h5320[47:32] ;
  assign word64320_BITS_47_TO_40__q25 = word64__h5320[47:40] ;
  assign word64320_BITS_55_TO_48__q26 = word64__h5320[55:48] ;
  assign word64320_BITS_63_TO_32__q24 = word64__h5320[63:32] ;
  assign word64320_BITS_63_TO_48__q27 = word64__h5320[63:48] ;
  assign word64320_BITS_63_TO_56__q28 = word64__h5320[63:56] ;
  assign word64320_BITS_7_TO_0__q15 = word64__h5320[7:0] ;
  assign word64__h5320 = ram_word64_set$DOB & y__h5566 ;
  assign x__h13221 = { 63'd0, lrsc_result__h13211 } ;
  assign x__h24964 =
	     (rg_f3 == 3'b010) ?
	       new_st_val__h24985 :
	       _theResult_____2__h24981 ;
  assign y__h5566 =
	     {64{ram_state_and_ctag_cset$DOB[22] &&
		 ram_state_and_ctag_cset_b_read__02_BITS_21_TO__ETC___d108}} ;
  always@(f_fabric_write_reqs$D_OUT)
  begin
    case (f_fabric_write_reqs$D_OUT[97:96])
      2'b0: x__h2723 = 3'b0;
      2'b01: x__h2723 = 3'b001;
      2'b10: x__h2723 = 3'b010;
      2'b11: x__h2723 = 3'b011;
    endcase
  end
  always@(rg_f3)
  begin
    case (rg_f3[1:0])
      2'b0: value__h24521 = 3'b0;
      2'b01: value__h24521 = 3'b001;
      2'b10: value__h24521 = 3'b010;
      2'd3: value__h24521 = 3'b011;
    endcase
  end
  always@(f_fabric_write_reqs$D_OUT or
	  strobe64__h2842 or strobe64__h2845 or strobe64__h2848)
  begin
    case (f_fabric_write_reqs$D_OUT[97:96])
      2'b0: mem_req_wr_data_wstrb__h2908 = strobe64__h2842;
      2'b01: mem_req_wr_data_wstrb__h2908 = strobe64__h2845;
      2'b10: mem_req_wr_data_wstrb__h2908 = strobe64__h2848;
      2'b11: mem_req_wr_data_wstrb__h2908 = 8'b11111111;
    endcase
  end
  always@(f_fabric_write_reqs$D_OUT or _theResult___fst__h2843)
  begin
    case (f_fabric_write_reqs$D_OUT[97:96])
      2'b0, 2'b01, 2'b10:
	  mem_req_wr_data_wdata__h2907 = _theResult___fst__h2843;
      2'd3: mem_req_wr_data_wdata__h2907 = f_fabric_write_reqs$D_OUT[63:0];
    endcase
  end
  always@(rg_addr or
	  result__h11922 or
	  result__h11950 or
	  result__h11978 or
	  result__h12006 or
	  result__h12034 or
	  result__h12062 or result__h12090 or result__h12118)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d234 =
	      result__h11922;
      3'h1:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d234 =
	      result__h11950;
      3'h2:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d234 =
	      result__h11978;
      3'h3:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d234 =
	      result__h12006;
      3'h4:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d234 =
	      result__h12034;
      3'h5:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d234 =
	      result__h12062;
      3'h6:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d234 =
	      result__h12090;
      3'h7:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d234 =
	      result__h12118;
    endcase
  end
  always@(rg_addr or
	  result__h12163 or
	  result__h12191 or
	  result__h12219 or
	  result__h12247 or
	  result__h12275 or
	  result__h12303 or result__h12331 or result__h12359)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d251 =
	      result__h12163;
      3'h1:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d251 =
	      result__h12191;
      3'h2:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d251 =
	      result__h12219;
      3'h3:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d251 =
	      result__h12247;
      3'h4:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d251 =
	      result__h12275;
      3'h5:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d251 =
	      result__h12303;
      3'h6:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d251 =
	      result__h12331;
      3'h7:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d251 =
	      result__h12359;
    endcase
  end
  always@(rg_addr or
	  result__h12404 or
	  result__h12432 or result__h12460 or result__h12488)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d264 =
	      result__h12404;
      3'h2:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d264 =
	      result__h12432;
      3'h4:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d264 =
	      result__h12460;
      3'h6:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d264 =
	      result__h12488;
      default: IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d264 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h12529 or
	  result__h12557 or result__h12585 or result__h12613)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d273 =
	      result__h12529;
      3'h2:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d273 =
	      result__h12557;
      3'h4:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d273 =
	      result__h12585;
      3'h6:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d273 =
	      result__h12613;
      default: IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d273 =
		   64'd0;
    endcase
  end
  always@(rg_addr or result__h12721 or result__h12749)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d285 =
	      result__h12721;
      3'h4:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d285 =
	      result__h12749;
      default: IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d285 =
		   64'd0;
    endcase
  end
  always@(rg_addr or result__h12654 or result__h12682)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result2654_0x4_re_ETC__q29 =
	      result__h12654;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result2654_0x4_re_ETC__q29 =
	      result__h12682;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result2654_0x4_re_ETC__q29 =
		   64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d234 or
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d264 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result2654_0x4_re_ETC__q29 or
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_ram_ETC___d287 or
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d251 or
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d273 or
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d285)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_01_EQ_0b0_02_THEN_IF_rg_addr_6_BITS_2_ETC___d294 =
	      IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d234;
      3'b001:
	  IF_rg_f3_01_EQ_0b0_02_THEN_IF_rg_addr_6_BITS_2_ETC___d294 =
	      IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d264;
      3'b010:
	  IF_rg_f3_01_EQ_0b0_02_THEN_IF_rg_addr_6_BITS_2_ETC___d294 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result2654_0x4_re_ETC__q29;
      3'b011:
	  IF_rg_f3_01_EQ_0b0_02_THEN_IF_rg_addr_6_BITS_2_ETC___d294 =
	      IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_ram_ETC___d287;
      3'b100:
	  IF_rg_f3_01_EQ_0b0_02_THEN_IF_rg_addr_6_BITS_2_ETC___d294 =
	      IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d251;
      3'b101:
	  IF_rg_f3_01_EQ_0b0_02_THEN_IF_rg_addr_6_BITS_2_ETC___d294 =
	      IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d273;
      3'b110:
	  IF_rg_f3_01_EQ_0b0_02_THEN_IF_rg_addr_6_BITS_2_ETC___d294 =
	      IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d285;
      3'd7: IF_rg_f3_01_EQ_0b0_02_THEN_IF_rg_addr_6_BITS_2_ETC___d294 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d234 or
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d264 or
	  w1___1__h16985 or
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_ram_ETC___d287 or
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d251 or
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d273 or
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d285)
  begin
    case (rg_f3)
      3'b0:
	  w1__h16914 =
	      IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d234;
      3'b001:
	  w1__h16914 =
	      IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d264;
      3'b010: w1__h16914 = w1___1__h16985;
      3'b011:
	  w1__h16914 =
	      IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_ram_ETC___d287;
      3'b100:
	  w1__h16914 =
	      IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d251;
      3'b101:
	  w1__h16914 =
	      IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d273;
      3'b110:
	  w1__h16914 =
	      IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d285;
      3'd7: w1__h16914 = 64'd0;
    endcase
  end
  always@(rg_addr or ram_word64_set$DOB or rg_st_amo_val)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_ram_ETC___d383 =
	      { ram_word64_set$DOB[63:16], rg_st_amo_val[15:0] };
      3'h2:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_ram_ETC___d383 =
	      { ram_word64_set$DOB[63:32],
		rg_st_amo_val[15:0],
		ram_word64_set$DOB[15:0] };
      3'h4:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_ram_ETC___d383 =
	      { ram_word64_set$DOB[63:48],
		rg_st_amo_val[15:0],
		ram_word64_set$DOB[31:0] };
      3'h6:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_ram_ETC___d383 =
	      { rg_st_amo_val[15:0], ram_word64_set$DOB[47:0] };
      default: IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_ram_ETC___d383 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_addr or ram_word64_set$DOB or rg_st_amo_val)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_ram_ETC___d374 =
	      { ram_word64_set$DOB[63:8], rg_st_amo_val[7:0] };
      3'h1:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_ram_ETC___d374 =
	      { ram_word64_set$DOB[63:16],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[7:0] };
      3'h2:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_ram_ETC___d374 =
	      { ram_word64_set$DOB[63:24],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[15:0] };
      3'h3:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_ram_ETC___d374 =
	      { ram_word64_set$DOB[63:32],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[23:0] };
      3'h4:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_ram_ETC___d374 =
	      { ram_word64_set$DOB[63:40],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[31:0] };
      3'h5:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_ram_ETC___d374 =
	      { ram_word64_set$DOB[63:48],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[39:0] };
      3'h6:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_ram_ETC___d374 =
	      { ram_word64_set$DOB[63:56],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[47:0] };
      3'h7:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_ram_ETC___d374 =
	      { rg_st_amo_val[7:0], ram_word64_set$DOB[55:0] };
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d234 or
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d264 or
	  IF_rg_f3_01_EQ_0b0_02_THEN_IF_rg_addr_6_BITS_2_ETC__q30 or
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_ram_ETC___d287 or
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d251 or
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d273 or
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d285)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_01_EQ_0b10_74_THEN_SEXT_IF_rg_f3_01_E_ETC___d334 =
	      IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d234;
      3'b001:
	  IF_rg_f3_01_EQ_0b10_74_THEN_SEXT_IF_rg_f3_01_E_ETC___d334 =
	      IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d264;
      3'b010:
	  IF_rg_f3_01_EQ_0b10_74_THEN_SEXT_IF_rg_f3_01_E_ETC___d334 =
	      { {32{IF_rg_f3_01_EQ_0b0_02_THEN_IF_rg_addr_6_BITS_2_ETC__q30[31]}},
		IF_rg_f3_01_EQ_0b0_02_THEN_IF_rg_addr_6_BITS_2_ETC__q30 };
      3'b011:
	  IF_rg_f3_01_EQ_0b10_74_THEN_SEXT_IF_rg_f3_01_E_ETC___d334 =
	      IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_ram_ETC___d287;
      3'b100:
	  IF_rg_f3_01_EQ_0b10_74_THEN_SEXT_IF_rg_f3_01_E_ETC___d334 =
	      IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d251;
      3'b101:
	  IF_rg_f3_01_EQ_0b10_74_THEN_SEXT_IF_rg_f3_01_E_ETC___d334 =
	      IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d273;
      3'b110:
	  IF_rg_f3_01_EQ_0b10_74_THEN_SEXT_IF_rg_f3_01_E_ETC___d334 =
	      IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d285;
      3'd7: IF_rg_f3_01_EQ_0b10_74_THEN_SEXT_IF_rg_f3_01_E_ETC___d334 = 64'd0;
    endcase
  end
  always@(rg_amo_funct7 or
	  new_st_val__h18025 or
	  new_st_val__h17017 or
	  w2__h24975 or
	  new_st_val__h17997 or
	  new_st_val__h18005 or
	  new_st_val__h18001 or
	  new_st_val__h18020 or new_st_val__h18009 or new_st_val__h18014)
  begin
    case (rg_amo_funct7[6:2])
      5'b0: _theResult_____2__h16922 = new_st_val__h17017;
      5'b00001: _theResult_____2__h16922 = w2__h24975;
      5'b00100: _theResult_____2__h16922 = new_st_val__h17997;
      5'b01000: _theResult_____2__h16922 = new_st_val__h18005;
      5'b01100: _theResult_____2__h16922 = new_st_val__h18001;
      5'b10000: _theResult_____2__h16922 = new_st_val__h18020;
      5'b11000: _theResult_____2__h16922 = new_st_val__h18009;
      5'b11100: _theResult_____2__h16922 = new_st_val__h18014;
      default: _theResult_____2__h16922 = new_st_val__h18025;
    endcase
  end
  always@(rg_addr or ram_word64_set$DOB or new_st_val__h16644)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_ram_ETC___d457 =
	      { ram_word64_set$DOB[63:16], new_st_val__h16644[15:0] };
      3'h2:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_ram_ETC___d457 =
	      { ram_word64_set$DOB[63:32],
		new_st_val__h16644[15:0],
		ram_word64_set$DOB[15:0] };
      3'h4:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_ram_ETC___d457 =
	      { ram_word64_set$DOB[63:48],
		new_st_val__h16644[15:0],
		ram_word64_set$DOB[31:0] };
      3'h6:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_ram_ETC___d457 =
	      { new_st_val__h16644[15:0], ram_word64_set$DOB[47:0] };
      default: IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_ram_ETC___d457 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_addr or ram_word64_set$DOB or new_st_val__h16644)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_ram_ETC___d448 =
	      { ram_word64_set$DOB[63:8], new_st_val__h16644[7:0] };
      3'h1:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_ram_ETC___d448 =
	      { ram_word64_set$DOB[63:16],
		new_st_val__h16644[7:0],
		ram_word64_set$DOB[7:0] };
      3'h2:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_ram_ETC___d448 =
	      { ram_word64_set$DOB[63:24],
		new_st_val__h16644[7:0],
		ram_word64_set$DOB[15:0] };
      3'h3:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_ram_ETC___d448 =
	      { ram_word64_set$DOB[63:32],
		new_st_val__h16644[7:0],
		ram_word64_set$DOB[23:0] };
      3'h4:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_ram_ETC___d448 =
	      { ram_word64_set$DOB[63:40],
		new_st_val__h16644[7:0],
		ram_word64_set$DOB[31:0] };
      3'h5:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_ram_ETC___d448 =
	      { ram_word64_set$DOB[63:48],
		new_st_val__h16644[7:0],
		ram_word64_set$DOB[39:0] };
      3'h6:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_ram_ETC___d448 =
	      { ram_word64_set$DOB[63:56],
		new_st_val__h16644[7:0],
		ram_word64_set$DOB[47:0] };
      3'h7:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_ram_ETC___d448 =
	      { new_st_val__h16644[7:0], ram_word64_set$DOB[55:0] };
    endcase
  end
  always@(rg_addr or ram_word64_set$DOB or rg_st_amo_val)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q32 =
	      { ram_word64_set$DOB[63:32], rg_st_amo_val[31:0] };
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q32 =
	      { rg_st_amo_val[31:0], ram_word64_set$DOB[31:0] };
      default: CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q32 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_f3 or
	  ram_word64_set$DOB or
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_ram_ETC___d374 or
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_ram_ETC___d383 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q32 or
	  rg_st_amo_val)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_01_EQ_0b0_02_THEN_IF_rg_addr_6_BITS_2_ETC___d392 =
	      IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_ram_ETC___d374;
      3'b001:
	  IF_rg_f3_01_EQ_0b0_02_THEN_IF_rg_addr_6_BITS_2_ETC___d392 =
	      IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_ram_ETC___d383;
      3'b010:
	  IF_rg_f3_01_EQ_0b0_02_THEN_IF_rg_addr_6_BITS_2_ETC___d392 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q32;
      3'b011:
	  IF_rg_f3_01_EQ_0b0_02_THEN_IF_rg_addr_6_BITS_2_ETC___d392 =
	      rg_st_amo_val;
      default: IF_rg_f3_01_EQ_0b0_02_THEN_IF_rg_addr_6_BITS_2_ETC___d392 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_addr or
	  result__h23379 or
	  result__h23406 or result__h23433 or result__h23460)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d654 =
	      result__h23379;
      3'h2:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d654 =
	      result__h23406;
      3'h4:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d654 =
	      result__h23433;
      3'h6:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d654 =
	      result__h23460;
      default: IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d654 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h23258 or
	  result__h23285 or result__h23312 or result__h23339)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d646 =
	      result__h23258;
      3'h2:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d646 =
	      result__h23285;
      3'h4:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d646 =
	      result__h23312;
      3'h6:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d646 =
	      result__h23339;
      default: IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d646 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h23025 or
	  result__h23052 or
	  result__h23079 or
	  result__h23106 or
	  result__h23133 or
	  result__h23160 or result__h23187 or result__h23214)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d634 =
	      result__h23025;
      3'h1:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d634 =
	      result__h23052;
      3'h2:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d634 =
	      result__h23079;
      3'h3:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d634 =
	      result__h23106;
      3'h4:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d634 =
	      result__h23133;
      3'h5:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d634 =
	      result__h23160;
      3'h6:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d634 =
	      result__h23187;
      3'h7:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d634 =
	      result__h23214;
    endcase
  end
  always@(rg_addr or
	  result__h22789 or
	  result__h22819 or
	  result__h22846 or
	  result__h22873 or
	  result__h22900 or
	  result__h22927 or result__h22954 or result__h22981)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d618 =
	      result__h22789;
      3'h1:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d618 =
	      result__h22819;
      3'h2:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d618 =
	      result__h22846;
      3'h3:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d618 =
	      result__h22873;
      3'h4:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d618 =
	      result__h22900;
      3'h5:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d618 =
	      result__h22927;
      3'h6:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d618 =
	      result__h22954;
      3'h7:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d618 =
	      result__h22981;
    endcase
  end
  always@(rg_addr or result__h23500 or result__h23527)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result3500_0x4_re_ETC__q33 =
	      result__h23500;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result3500_0x4_re_ETC__q33 =
	      result__h23527;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result3500_0x4_re_ETC__q33 =
		   64'd0;
    endcase
  end
  always@(rg_addr or result__h23565 or result__h23592)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result3565_0x4_re_ETC__q34 =
	      result__h23565;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result3565_0x4_re_ETC__q34 =
	      result__h23592;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result3565_0x4_re_ETC__q34 =
		   64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d618 or
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d646 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result3500_0x4_re_ETC__q33 or
	  rg_addr or
	  master_xactor_f_rd_data$D_OUT or
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d634 or
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d654 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result3565_0x4_re_ETC__q34)
  begin
    case (rg_f3)
      3'b0:
	  ld_val__h22729 =
	      IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d618;
      3'b001:
	  ld_val__h22729 =
	      IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d646;
      3'b010:
	  ld_val__h22729 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result3500_0x4_re_ETC__q33;
      3'b011:
	  ld_val__h22729 =
	      (rg_addr[2:0] == 3'h0) ?
		master_xactor_f_rd_data$D_OUT[66:3] :
		64'd0;
      3'b100:
	  ld_val__h22729 =
	      IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d634;
      3'b101:
	  ld_val__h22729 =
	      IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d654;
      3'b110:
	  ld_val__h22729 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result3565_0x4_re_ETC__q34;
      3'd7: ld_val__h22729 = 64'd0;
    endcase
  end
  always@(rg_addr or result__h26843 or result__h26871)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d773 =
	      result__h26843;
      3'h4:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d773 =
	      result__h26871;
      default: IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d773 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h26651 or
	  result__h26679 or result__h26707 or result__h26735)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d763 =
	      result__h26651;
      3'h2:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d763 =
	      result__h26679;
      3'h4:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d763 =
	      result__h26707;
      3'h6:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d763 =
	      result__h26735;
      default: IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d763 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h26526 or
	  result__h26554 or result__h26582 or result__h26610)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d755 =
	      result__h26526;
      3'h2:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d755 =
	      result__h26554;
      3'h4:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d755 =
	      result__h26582;
      3'h6:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d755 =
	      result__h26610;
      default: IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d755 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h26285 or
	  result__h26313 or
	  result__h26341 or
	  result__h26369 or
	  result__h26397 or
	  result__h26425 or result__h26453 or result__h26481)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d743 =
	      result__h26285;
      3'h1:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d743 =
	      result__h26313;
      3'h2:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d743 =
	      result__h26341;
      3'h3:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d743 =
	      result__h26369;
      3'h4:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d743 =
	      result__h26397;
      3'h5:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d743 =
	      result__h26425;
      3'h6:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d743 =
	      result__h26453;
      3'h7:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d743 =
	      result__h26481;
    endcase
  end
  always@(rg_addr or
	  result__h25164 or
	  result__h26072 or
	  result__h26100 or
	  result__h26128 or
	  result__h26156 or
	  result__h26184 or result__h26212 or result__h26240)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d727 =
	      result__h25164;
      3'h1:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d727 =
	      result__h26072;
      3'h2:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d727 =
	      result__h26100;
      3'h3:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d727 =
	      result__h26128;
      3'h4:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d727 =
	      result__h26156;
      3'h5:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d727 =
	      result__h26184;
      3'h6:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d727 =
	      result__h26212;
      3'h7:
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d727 =
	      result__h26240;
    endcase
  end
  always@(rg_addr or result__h26776 or result__h26804)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result6776_0x4_re_ETC__q49 =
	      result__h26776;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result6776_0x4_re_ETC__q49 =
	      result__h26804;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result6776_0x4_re_ETC__q49 =
		   64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d727 or
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d755 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result6776_0x4_re_ETC__q49 or
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_IF__ETC___d774 or
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d743 or
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d763 or
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d773)
  begin
    case (rg_f3)
      3'b0:
	  w1__h24969 =
	      IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d727;
      3'b001:
	  w1__h24969 =
	      IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d755;
      3'b010:
	  w1__h24969 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result6776_0x4_re_ETC__q49;
      3'b011:
	  w1__h24969 =
	      IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_IF__ETC___d774;
      3'b100:
	  w1__h24969 =
	      IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d743;
      3'b101:
	  w1__h24969 =
	      IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d763;
      3'b110:
	  w1__h24969 =
	      IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d773;
      3'd7: w1__h24969 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d727 or
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d755 or
	  w1___1__h25044 or
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_IF__ETC___d774 or
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d743 or
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d763 or
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d773)
  begin
    case (rg_f3)
      3'b0:
	  w1__h24973 =
	      IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d727;
      3'b001:
	  w1__h24973 =
	      IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d755;
      3'b010: w1__h24973 = w1___1__h25044;
      3'b011:
	  w1__h24973 =
	      IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_IF__ETC___d774;
      3'b100:
	  w1__h24973 =
	      IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d743;
      3'b101:
	  w1__h24973 =
	      IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d763;
      3'b110:
	  w1__h24973 =
	      IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d773;
      3'd7: w1__h24973 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d727 or
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d755 or
	  w14969_BITS_31_TO_0__q50 or
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_IF__ETC___d774 or
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d743 or
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d763 or
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d773)
  begin
    case (rg_f3)
      3'b0:
	  new_ld_val__h24935 =
	      IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d727;
      3'b001:
	  new_ld_val__h24935 =
	      IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_SEX_ETC___d755;
      3'b010:
	  new_ld_val__h24935 =
	      { {32{w14969_BITS_31_TO_0__q50[31]}},
		w14969_BITS_31_TO_0__q50 };
      3'b011:
	  new_ld_val__h24935 =
	      IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_IF__ETC___d774;
      3'b100:
	  new_ld_val__h24935 =
	      IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d743;
      3'b101:
	  new_ld_val__h24935 =
	      IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d763;
      3'b110:
	  new_ld_val__h24935 =
	      IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_0_C_ETC___d773;
      3'd7: new_ld_val__h24935 = 64'd0;
    endcase
  end
  always@(rg_amo_funct7 or
	  new_st_val__h26964 or
	  new_st_val__h25076 or
	  w2__h24975 or
	  new_st_val__h26936 or
	  new_st_val__h26944 or
	  new_st_val__h26940 or
	  new_st_val__h26959 or new_st_val__h26948 or new_st_val__h26953)
  begin
    case (rg_amo_funct7[6:2])
      5'b0: _theResult_____2__h24981 = new_st_val__h25076;
      5'b00001: _theResult_____2__h24981 = w2__h24975;
      5'b00100: _theResult_____2__h24981 = new_st_val__h26936;
      5'b01000: _theResult_____2__h24981 = new_st_val__h26944;
      5'b01100: _theResult_____2__h24981 = new_st_val__h26940;
      5'b10000: _theResult_____2__h24981 = new_st_val__h26959;
      5'b11000: _theResult_____2__h24981 = new_st_val__h26948;
      5'b11100: _theResult_____2__h24981 = new_st_val__h26953;
      default: _theResult_____2__h24981 = new_st_val__h26964;
    endcase
  end
  always@(rg_f3 or IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_1_E_ETC___d302)
  begin
    case (rg_f3)
      3'b0, 3'b001, 3'b010, 3'b011, 3'b100, 3'b101, 3'b110:
	  CASE_rg_f3_0b0_IF_rg_addr_6_BITS_2_TO_0_21_EQ__ETC__q51 =
	      IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_1_E_ETC___d302;
      3'd7: CASE_rg_f3_0b0_IF_rg_addr_6_BITS_2_TO_0_21_EQ__ETC__q51 = 64'd0;
    endcase
  end
  always@(rg_addr or ram_word64_set$DOB or new_st_val__h16644)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q52 =
	      { ram_word64_set$DOB[63:32], new_st_val__h16644[31:0] };
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q52 =
	      { new_st_val__h16644[31:0], ram_word64_set$DOB[31:0] };
      default: CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q52 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_f3 or
	  ram_word64_set$DOB or
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_ram_ETC___d448 or
	  IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_ram_ETC___d457 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q52 or
	  new_st_val__h16644)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_01_EQ_0b0_02_THEN_IF_rg_addr_6_BITS_2_ETC___d466 =
	      IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_ram_ETC___d448;
      3'b001:
	  IF_rg_f3_01_EQ_0b0_02_THEN_IF_rg_addr_6_BITS_2_ETC___d466 =
	      IF_rg_addr_6_BITS_2_TO_0_21_EQ_0x0_03_THEN_ram_ETC___d457;
      3'b010:
	  IF_rg_f3_01_EQ_0b0_02_THEN_IF_rg_addr_6_BITS_2_ETC___d466 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q52;
      3'b011:
	  IF_rg_f3_01_EQ_0b0_02_THEN_IF_rg_addr_6_BITS_2_ETC___d466 =
	      new_st_val__h16644;
      default: IF_rg_f3_01_EQ_0b0_02_THEN_IF_rg_addr_6_BITS_2_ETC___d466 =
		   ram_word64_set$DOB;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY 4'd0;
	rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY 7'd0;
	rg_lower_word32_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (ctr_wr_rsps_pending_crg$EN)
	  ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY
	      ctr_wr_rsps_pending_crg$D_IN;
	if (rg_cset_in_cache$EN)
	  rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY rg_cset_in_cache$D_IN;
	if (rg_lower_word32_full$EN)
	  rg_lower_word32_full <= `BSV_ASSIGNMENT_DELAY
	      rg_lower_word32_full$D_IN;
	if (rg_lrsc_valid$EN)
	  rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY rg_lrsc_valid$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
      end
    if (rg_addr$EN) rg_addr <= `BSV_ASSIGNMENT_DELAY rg_addr$D_IN;
    if (rg_amo_funct7$EN)
      rg_amo_funct7 <= `BSV_ASSIGNMENT_DELAY rg_amo_funct7$D_IN;
    if (rg_error_during_refill$EN)
      rg_error_during_refill <= `BSV_ASSIGNMENT_DELAY
	  rg_error_during_refill$D_IN;
    if (rg_exc_code$EN) rg_exc_code <= `BSV_ASSIGNMENT_DELAY rg_exc_code$D_IN;
    if (rg_f3$EN) rg_f3 <= `BSV_ASSIGNMENT_DELAY rg_f3$D_IN;
    if (rg_ld_val$EN) rg_ld_val <= `BSV_ASSIGNMENT_DELAY rg_ld_val$D_IN;
    if (rg_lower_word32$EN)
      rg_lower_word32 <= `BSV_ASSIGNMENT_DELAY rg_lower_word32$D_IN;
    if (rg_lrsc_pa$EN) rg_lrsc_pa <= `BSV_ASSIGNMENT_DELAY rg_lrsc_pa$D_IN;
    if (rg_op$EN) rg_op <= `BSV_ASSIGNMENT_DELAY rg_op$D_IN;
    if (rg_pa$EN) rg_pa <= `BSV_ASSIGNMENT_DELAY rg_pa$D_IN;
    if (rg_pte_pa$EN) rg_pte_pa <= `BSV_ASSIGNMENT_DELAY rg_pte_pa$D_IN;
    if (rg_st_amo_val$EN)
      rg_st_amo_val <= `BSV_ASSIGNMENT_DELAY rg_st_amo_val$D_IN;
    if (rg_word64_set_in_cache$EN)
      rg_word64_set_in_cache <= `BSV_ASSIGNMENT_DELAY
	  rg_word64_set_in_cache$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_verbosity = 4'hA;
    ctr_wr_rsps_pending_crg = 4'hA;
    rg_addr = 32'hAAAAAAAA;
    rg_amo_funct7 = 7'h2A;
    rg_cset_in_cache = 7'h2A;
    rg_error_during_refill = 1'h0;
    rg_exc_code = 4'hA;
    rg_f3 = 3'h2;
    rg_ld_val = 64'hAAAAAAAAAAAAAAAA;
    rg_lower_word32 = 32'hAAAAAAAA;
    rg_lower_word32_full = 1'h0;
    rg_lrsc_pa = 32'hAAAAAAAA;
    rg_lrsc_valid = 1'h0;
    rg_op = 2'h2;
    rg_pa = 32'hAAAAAAAA;
    rg_pte_pa = 32'hAAAAAAAA;
    rg_st_amo_val = 64'hAAAAAAAAAAAAAAAA;
    rg_state = 4'hA;
    rg_word64_set_in_cache = 9'h0AA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  ctr_wr_rsps_pending_crg == 4'd15)
	begin
	  v__h3151 = $stime;
	  #0;
	end
    v__h3145 = v__h3151 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  ctr_wr_rsps_pending_crg == 4'd15)
	$display("%0d: ERROR: CreditCounter: overflow", v__h3145);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  ctr_wr_rsps_pending_crg == 4'd15)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("AXI4_Wr_Addr { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", mem_req_wr_addr_awaddr__h2676);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", x__h2723);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("AXI4_Wr_Data { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", mem_req_wr_data_wdata__h2907);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", mem_req_wr_data_wstrb__h2908);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_fabric_send_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 &&
	  cfg_verbosity != 4'd0 &&
	  !f_reset_reqs$D_OUT)
	begin
	  v__h4074 = $stime;
	  #0;
	end
    v__h4068 = v__h4074 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 &&
	  cfg_verbosity != 4'd0 &&
	  !f_reset_reqs$D_OUT)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		   v__h4068,
		   "D_MMU_Cache",
		   $signed(32'd128),
		   $signed(32'd1));
	else
	  $display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		   v__h4068,
		   "I_MMU_Cache",
		   $signed(32'd128),
		   $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42 &&
	  f_reset_reqs$D_OUT)
	begin
	  v__h4175 = $stime;
	  #0;
	end
    v__h4169 = v__h4175 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42 &&
	  f_reset_reqs$D_OUT)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_reset: Flushed", v__h4169, "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_reset: Flushed", v__h4169, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	begin
	  v__h4324 = $stime;
	  #0;
	end
    v__h4318 = v__h4324 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h",
		   v__h4318,
		   "D_MMU_Cache",
		   rg_addr);
	else
	  $display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h",
		   v__h4318,
		   "I_MMU_Cache",
		   rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$display("        eaddr = {CTag 0x%0h  CSet 0x%0h  Word64 0x%0h  Byte 0x%0h}",
		 pa_ctag__h5178,
		 rg_addr[11:5],
		 rg_addr[4:3],
		 rg_addr[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("        CSet 0x%0x: (state, tag):", rg_addr[11:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(" (");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42 &&
	  ram_state_and_ctag_cset$DOB[22])
	$write("CTAG_CLEAN");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42 &&
	  !ram_state_and_ctag_cset$DOB[22])
	$write("CTAG_EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42 &&
	  ram_state_and_ctag_cset$DOB[22])
	$write(", 0x%0x", ram_state_and_ctag_cset$DOB[21:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42 &&
	  !ram_state_and_ctag_cset$DOB[22])
	$write(", --");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(")");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:5],
	       rg_addr[4:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(" 0x%0x", ram_word64_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("    TLB result: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("VM_Xlate_Result { ", "outcome: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("VM_XLATE_OK");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "pa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", 4'hA, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && dmem_not_imem &&
	  !soc_map$m_is_mem_addr &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$display("    => IO_REQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  rg_op_1_EQ_0_2_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d307)
	begin
	  v__h12834 = $stime;
	  #0;
	end
    v__h12828 = v__h12834 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  rg_op_1_EQ_0_2_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d307)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h12828,
		   "D_MMU_Cache",
		   rg_addr,
		   word64__h5320,
		   64'd0);
	else
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h12828,
		   "I_MMU_Cache",
		   rg_addr,
		   word64__h5320,
		   64'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  rg_op == 2'd2 &&
	  rg_amo_funct7[6:2] == 5'b00010 &&
	  ram_state_and_ctag_cset$DOB[22] &&
	  ram_state_and_ctag_cset_b_read__02_BITS_21_TO__ETC___d108 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$display("        AMO LR: reserving PA 0x%0h", rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  rg_op_1_EQ_0_2_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d307)
	$display("        Read-hit: addr 0x%0h word64 0x%0h",
		 rg_addr,
		 word64__h5320);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  rg_op_1_EQ_0_2_OR_rg_op_1_EQ_2_3_AND_rg_amo_fu_ETC___d320)
	$display("        Read Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  rg_op == 2'd2 &&
	  rg_amo_funct7_4_BITS_6_TO_2_5_EQ_0b10_6_AND_NO_ETC___d324)
	$display("        AMO LR: cache refill: cancelling LR/SC reservation for PA 0x%0h",
		 rg_lrsc_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_dmem_not_imem_43_OR_soc_map_m_is_mem_addr__ETC___d475)
	$display("        ST: cancelling LR/SC reservation for PA", rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  rg_op == 2'd2 &&
	  rg_amo_funct7[6:2] == 5'b00011 &&
	  rg_lrsc_valid &&
	  !rg_lrsc_pa_5_EQ_rg_addr_6___d96 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$display("        AMO SC: fail: reserved addr 0x%0h, this address 0x%0h",
		 rg_lrsc_pa,
		 rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  rg_op == 2'd2 &&
	  rg_amo_funct7[6:2] == 5'b00011 &&
	  !rg_lrsc_valid &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$display("        AMO SC: fail due to invalid LR/SC reservation");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_dmem_not_imem_43_OR_soc_map_m_is_mem_addr__ETC___d487)
	$display("        AMO SC result = %0d", lrsc_result__h13211);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  NOT_rg_op_1_EQ_0_2_26_AND_NOT_rg_op_1_EQ_2_3_2_ETC___d490)
	$display("        Write-Cache-Hit: pa 0x%0h word64 0x%0h",
		 rg_addr,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  NOT_rg_op_1_EQ_0_2_26_AND_NOT_rg_op_1_EQ_2_3_2_ETC___d490)
	$write("        New Word64_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  NOT_rg_op_1_EQ_0_2_26_AND_NOT_rg_op_1_EQ_2_3_2_ETC___d490)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:5],
	       rg_addr[4:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  NOT_rg_op_1_EQ_0_2_26_AND_NOT_rg_op_1_EQ_2_3_2_ETC___d490)
	$write(" 0x%0x",
	       IF_rg_f3_01_EQ_0b0_02_THEN_IF_rg_addr_6_BITS_2_ETC___d392);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  NOT_rg_op_1_EQ_0_2_26_AND_NOT_rg_op_1_EQ_2_3_2_ETC___d490)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  rg_op != 2'd0 &&
	  (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	  (rg_op == 2'd1 ||
	   rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	  NOT_rg_op_1_EQ_2_3_27_OR_NOT_rg_amo_funct7_4_B_ETC___d492)
	$display("        Write-Cache-Miss: pa 0x%0h word64 0x%0h",
		 rg_addr,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  NOT_rg_op_1_EQ_0_2_26_AND_NOT_rg_op_1_EQ_2_3_2_ETC___d498)
	$display("        Write-Cache-Hit/Miss: eaddr 0x%0h word64 0x%0h",
		 rg_addr,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  NOT_rg_op_1_EQ_0_2_26_AND_NOT_rg_op_1_EQ_2_3_2_ETC___d498)
	$display("        => rl_write_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  rg_op_1_EQ_2_3_AND_rg_amo_funct7_4_BITS_6_TO_2_ETC___d502)
	begin
	  v__h16422 = $stime;
	  #0;
	end
    v__h16416 = v__h16422 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  rg_op_1_EQ_2_3_AND_rg_amo_funct7_4_BITS_6_TO_2_ETC___d502)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h16416,
		   "D_MMU_Cache",
		   rg_addr,
		   64'd1,
		   64'd0);
	else
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h16416,
		   "I_MMU_Cache",
		   rg_addr,
		   64'd1,
		   64'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	  rg_op_1_EQ_2_3_AND_rg_amo_funct7_4_BITS_6_TO_2_ETC___d502)
	$display("        AMO SC: Fail response for addr 0x%0h", rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_dmem_not_imem_43_OR_soc_map_m_is_mem_addr__ETC___d508)
	$display("        AMO Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_dmem_not_imem_43_OR_soc_map_m_is_mem_addr__ETC___d511)
	$display("        AMO: addr 0x%0h amo_f7 0x%0h f3 %0d rs2_val 0x%0h",
		 rg_addr,
		 rg_amo_funct7,
		 rg_f3,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_dmem_not_imem_43_OR_soc_map_m_is_mem_addr__ETC___d511)
	$display("          PA 0x%0h ", rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_dmem_not_imem_43_OR_soc_map_m_is_mem_addr__ETC___d511)
	$display("          Cache word64 0x%0h, load-result 0x%0h",
		 word64__h5320,
		 word64__h5320);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_dmem_not_imem_43_OR_soc_map_m_is_mem_addr__ETC___d511)
	$display("          0x%0h  op  0x%0h -> 0x%0h",
		 word64__h5320,
		 word64__h5320,
		 new_st_val__h16644);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_dmem_not_imem_43_OR_soc_map_m_is_mem_addr__ETC___d511)
	$write("          New Word64_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_dmem_not_imem_43_OR_soc_map_m_is_mem_addr__ETC___d511)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:5],
	       rg_addr[4:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_dmem_not_imem_43_OR_soc_map_m_is_mem_addr__ETC___d511)
	$write(" 0x%0x",
	       IF_rg_f3_01_EQ_0b0_02_THEN_IF_rg_addr_6_BITS_2_ETC___d466);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_dmem_not_imem_43_OR_soc_map_m_is_mem_addr__ETC___d511)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_dmem_not_imem_43_OR_soc_map_m_is_mem_addr__ETC___d515)
	$display("        AMO_op: cancelling LR/SC reservation for PA",
		 rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	begin
	  v__h19612 = $stime;
	  #0;
	end
    v__h19606 = v__h19612 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_start_cache_refill: ",
		   v__h19606,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_start_cache_refill: ",
		   v__h19606,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("    To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", cline_fabric_addr__h19665);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", 8'd3);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", 3'b011);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$display("    Victim way %0d; => CACHE_REFILL", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_37___d538)
	begin
	  v__h20417 = $stime;
	  #0;
	end
    v__h20411 = v__h20417 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_37___d538)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_cache_refill_rsps_loop:",
		   v__h20411,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_cache_refill_rsps_loop:",
		   v__h20411,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_37___d538)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_37___d538)
	$write("AXI4_Rd_Data { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_37___d538)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[70:67]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_37___d538)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_37___d538)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_37___d538)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_37___d538)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[2:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_37___d538)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_37___d538 &&
	  master_xactor_f_rd_data$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_37___d538 &&
	  !master_xactor_f_rd_data$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_37___d538)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_37___d538)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_37___d538)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	begin
	  v__h20658 = $stime;
	  #0;
	end
    v__h20652 = v__h20658 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d",
		   v__h20652,
		   "D_MMU_Cache",
		   access_exc_code__h2458);
	else
	  $display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d",
		   v__h20652,
		   "I_MMU_Cache",
		   access_exc_code__h2458);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  rg_word64_set_in_cache[1:0] == 2'd3 &&
	  (master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 ||
	   rg_error_during_refill) &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$display("    => MODULE_EXCEPTION_RSP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  rg_word64_set_in_cache[1:0] == 2'd3 &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  !rg_error_during_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$display("    => CACHE_REREQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_37___d538)
	$display("        Updating Cache word64_set 0x%0h, word64_in_cline %0d) old => new",
		 rg_word64_set_in_cache,
		 rg_word64_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_37___d538)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:5],
	       rg_word64_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_37___d538)
	$write(" 0x%0x", ram_word64_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_37___d538)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_37___d538)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:5],
	       rg_word64_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_37___d538)
	$write(" 0x%0x", master_xactor_f_rd_data$D_OUT[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_37___d538)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_rereq && NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$display("    fa_req_ram_B tagCSet [0x%0x] word64_set [0x%0d]",
		 rg_addr[11:5],
		 rg_addr[11:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	begin
	  v__h22270 = $stime;
	  #0;
	end
    v__h22264 = v__h22270 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_read_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h22264,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_read_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h22264,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", fabric_addr__h24392);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", value__h24521);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	begin
	  v__h22620 = $stime;
	  #0;
	end
    v__h22614 = v__h22620 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h22614,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h22614,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("AXI4_Rd_Data { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[70:67]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[2:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42 &&
	  master_xactor_f_rd_data$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42 &&
	  !master_xactor_f_rd_data$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	begin
	  v__h23720 = $stime;
	  #0;
	end
    v__h23714 = v__h23720 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h23714,
		   "D_MMU_Cache",
		   rg_addr,
		   ld_val__h22729);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h23714,
		   "I_MMU_Cache",
		   rg_addr,
		   ld_val__h22729);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	begin
	  v__h23827 = $stime;
	  #0;
	end
    v__h23821 = v__h23827 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		   v__h23821,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		   v__h23821,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_maintain_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	begin
	  v__h23932 = $stime;
	  #0;
	end
    v__h23926 = v__h23932 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_maintain_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h23926,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_ld_val);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h23926,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_ld_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	begin
	  v__h24012 = $stime;
	  #0;
	end
    v__h24006 = v__h24012 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_write_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h24006,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_write_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h24006,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	begin
	  v__h24222 = $stime;
	  #0;
	end
    v__h24216 = v__h24222 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_AMO_SC_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h24216,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_AMO_SC_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h24216,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$display("    FAIL due to I/O address.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	begin
	  v__h24340 = $stime;
	  #0;
	end
    v__h24334 = v__h24340 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_AMO_op_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h24334,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_AMO_op_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h24334,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", fabric_addr__h24392);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", value__h24521);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	begin
	  v__h24634 = $stime;
	  #0;
	end
    v__h24628 = v__h24634 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_AMO_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h24628,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_AMO_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h24628,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("AXI4_Rd_Data { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[70:67]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", master_xactor_f_rd_data$D_OUT[2:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42 &&
	  master_xactor_f_rd_data$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42 &&
	  !master_xactor_f_rd_data$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	begin
	  v__h24809 = $stime;
	  #0;
	end
    v__h24803 = v__h24809 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_AMO_read_rsp; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h24803,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_AMO_read_rsp; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h24803,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	begin
	  v__h27068 = $stime;
	  #0;
	end
    v__h27062 = v__h27068 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h27062,
		   "D_MMU_Cache",
		   rg_addr,
		   new_ld_val__h24935);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h27062,
		   "I_MMU_Cache",
		   rg_addr,
		   new_ld_val__h24935);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	begin
	  v__h24905 = $stime;
	  #0;
	end
    v__h24899 = v__h24905 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_f_rd_data$D_OUT[2:1] != 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_AMO_read_rsp: FABRIC_RSP_ERR: raising trap STORE_AMO_ACCESS_FAULT",
		   v__h24899,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_io_AMO_read_rsp: FABRIC_RSP_ERR: raising trap STORE_AMO_ACCESS_FAULT",
		   v__h24899,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	begin
	  v__h27675 = $stime;
	  #0;
	end
    v__h27669 = v__h27675 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	if (dmem_not_imem)
	  $write("%0d: %s.rl_discard_write_rsp: pending %0d ",
		 v__h27669,
		 "D_MMU_Cache",
		 $unsigned(b__h19566));
	else
	  $write("%0d: %s.rl_discard_write_rsp: pending %0d ",
		 v__h27669,
		 "I_MMU_Cache",
		 $unsigned(b__h19566));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("AXI4_Wr_Resp { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", master_xactor_f_wr_resp$D_OUT[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", master_xactor_f_wr_resp$D_OUT[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	begin
	  v__h27636 = $stime;
	  #0;
	end
    v__h27630 = v__h27636 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_discard_write_rsp: fabric response error: exit",
		   v__h27630,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_discard_write_rsp: fabric response error: exit",
		   v__h27630,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write("AXI4_Wr_Resp { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write("'h%h", master_xactor_f_wr_resp$D_OUT[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write("'h%h", master_xactor_f_wr_resp$D_OUT[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_f_wr_resp$D_OUT[1:0] != 2'b0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_reset &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	begin
	  v__h3709 = $stime;
	  #0;
	end
    v__h3703 = v__h3709 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_reset &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_start_reset", v__h3703, "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_start_reset", v__h3703, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	begin
	  v__h28023 = $stime;
	  #0;
	end
    v__h28017 = v__h28023 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("%0d: %m.req: op:", v__h28017);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42 && req_op == 2'd0)
	$write("CACHE_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42 && req_op == 2'd1)
	$write("CACHE_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42 &&
	  req_op != 2'd0 &&
	  req_op != 2'd1)
	$write("CACHE_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(" f3:%0d addr:0x%0h st_value:0x%0h",
	       req_f3,
	       req_addr,
	       req_st_value,
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write("    priv:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42 &&
	  req_priv == 2'b0)
	$write("U");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42 &&
	  req_priv == 2'b01)
	$write("S");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42 &&
	  req_priv == 2'b11)
	$write("M");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42 &&
	  req_priv != 2'b0 &&
	  req_priv != 2'b01 &&
	  req_priv != 2'b11)
	$write("RESERVED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$write(" sstatus_SUM:%0d mstatus_MXR:%0d satp:0x%0h",
	       req_sstatus_SUM,
	       req_mstatus_MXR,
	       req_satp,
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$display("    amo_funct7 = 0x%0h", req_amo_funct7);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req &&
	  req_f3_BITS_1_TO_0_59_EQ_0b0_60_OR_req_f3_BITS_ETC___d889 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d42)
	$display("    fa_req_ram_B tagCSet [0x%0x] word64_set [0x%0d]",
		 req_addr[11:5],
		 req_addr[11:3]);
  end
  // synopsys translate_on
endmodule  // mkMMU_Cache

