//
// Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
//
// On Thu Feb  7 16:01:11 EST 2019
//
//
// Ports:
// Name                         I/O  size props
// RDY_set_verbosity              O     1 const
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1
// valid                          O     1
// addr                           O    32 reg
// word64                         O    64
// st_amo_val                     O    64
// exc                            O     1
// exc_code                       O     4 reg
// RDY_server_flush_request_put   O     1 reg
// RDY_server_flush_response_get  O     1
// RDY_tlb_flush                  O     1 const
// mem_master_awvalid             O     1
// mem_master_awid                O     4 reg
// mem_master_awaddr              O    64 reg
// mem_master_awlen               O     8 reg
// mem_master_awsize              O     3 reg
// mem_master_awburst             O     2 reg
// mem_master_awlock              O     1 reg
// mem_master_awcache             O     4 reg
// mem_master_awprot              O     3 reg
// mem_master_awqos               O     4 reg
// mem_master_awregion            O     4 reg
// mem_master_wvalid              O     1
// mem_master_wid                 O     4 reg
// mem_master_wdata               O    64 reg
// mem_master_wstrb               O     8 reg
// mem_master_wlast               O     1 reg
// mem_master_bready              O     1
// mem_master_arvalid             O     1
// mem_master_arid                O     4 reg
// mem_master_araddr              O    64 reg
// mem_master_arlen               O     8 reg
// mem_master_arsize              O     3 reg
// mem_master_arburst             O     2 reg
// mem_master_arlock              O     1 reg
// mem_master_arcache             O     4 reg
// mem_master_arprot              O     3 reg
// mem_master_arqos               O     4 reg
// mem_master_arregion            O     4 reg
// mem_master_rready              O     1
// near_mem_io_client_request_get  O   137 reg
// RDY_near_mem_io_client_request_get  O     1 reg
// RDY_near_mem_io_client_response_put  O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_verbosity_verbosity        I     4 reg
// req_op                         I     2
// req_f3                         I     3
// req_amo_funct7                 I     7 reg
// req_addr                       I    32
// req_st_value                   I    64
// req_priv                       I     2 unused
// req_sstatus_SUM                I     1 unused
// req_mstatus_MXR                I     1 unused
// req_satp                       I    32 unused
// mem_master_awready             I     1
// mem_master_wready              I     1
// mem_master_bvalid              I     1
// mem_master_bid                 I     4 reg
// mem_master_bresp               I     2 reg
// mem_master_arready             I     1
// mem_master_rvalid              I     1
// mem_master_rid                 I     4 reg
// mem_master_rdata               I    64 reg
// mem_master_rresp               I     2 reg
// mem_master_rlast               I     1 reg
// near_mem_io_client_response_put  I    66 reg
// EN_set_verbosity               I     1
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_req                         I     1
// EN_server_flush_request_put    I     1
// EN_server_flush_response_get   I     1
// EN_tlb_flush                   I     1 unused
// EN_near_mem_io_client_response_put  I     1
// EN_near_mem_io_client_request_get  I     1
//
// Combinational paths from inputs to outputs:
//   (mem_master_awready, mem_master_wready) -> valid
//   (mem_master_awready, mem_master_wready) -> word64
//   (mem_master_awready, mem_master_wready) -> st_amo_val
//   (mem_master_awready, mem_master_wready) -> mem_master_bready
//   (mem_master_awready, mem_master_wready, EN_req) -> mem_master_rready
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMMU_Cache(CLK,
		   RST_N,

		   set_verbosity_verbosity,
		   EN_set_verbosity,
		   RDY_set_verbosity,

		   EN_server_reset_request_put,
		   RDY_server_reset_request_put,

		   EN_server_reset_response_get,
		   RDY_server_reset_response_get,

		   req_op,
		   req_f3,
		   req_amo_funct7,
		   req_addr,
		   req_st_value,
		   req_priv,
		   req_sstatus_SUM,
		   req_mstatus_MXR,
		   req_satp,
		   EN_req,

		   valid,

		   addr,

		   word64,

		   st_amo_val,

		   exc,

		   exc_code,

		   EN_server_flush_request_put,
		   RDY_server_flush_request_put,

		   EN_server_flush_response_get,
		   RDY_server_flush_response_get,

		   EN_tlb_flush,
		   RDY_tlb_flush,

		   mem_master_awvalid,

		   mem_master_awid,

		   mem_master_awaddr,

		   mem_master_awlen,

		   mem_master_awsize,

		   mem_master_awburst,

		   mem_master_awlock,

		   mem_master_awcache,

		   mem_master_awprot,

		   mem_master_awqos,

		   mem_master_awregion,

		   mem_master_awready,

		   mem_master_wvalid,

		   mem_master_wid,

		   mem_master_wdata,

		   mem_master_wstrb,

		   mem_master_wlast,

		   mem_master_wready,

		   mem_master_bvalid,
		   mem_master_bid,
		   mem_master_bresp,

		   mem_master_bready,

		   mem_master_arvalid,

		   mem_master_arid,

		   mem_master_araddr,

		   mem_master_arlen,

		   mem_master_arsize,

		   mem_master_arburst,

		   mem_master_arlock,

		   mem_master_arcache,

		   mem_master_arprot,

		   mem_master_arqos,

		   mem_master_arregion,

		   mem_master_arready,

		   mem_master_rvalid,
		   mem_master_rid,
		   mem_master_rdata,
		   mem_master_rresp,
		   mem_master_rlast,

		   mem_master_rready,

		   EN_near_mem_io_client_request_get,
		   near_mem_io_client_request_get,
		   RDY_near_mem_io_client_request_get,

		   near_mem_io_client_response_put,
		   EN_near_mem_io_client_response_put,
		   RDY_near_mem_io_client_response_put);
  parameter [0 : 0] dmem_not_imem = 1'b0;
  input  CLK;
  input  RST_N;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // action method req
  input  [1 : 0] req_op;
  input  [2 : 0] req_f3;
  input  [6 : 0] req_amo_funct7;
  input  [31 : 0] req_addr;
  input  [63 : 0] req_st_value;
  input  [1 : 0] req_priv;
  input  req_sstatus_SUM;
  input  req_mstatus_MXR;
  input  [31 : 0] req_satp;
  input  EN_req;

  // value method valid
  output valid;

  // value method addr
  output [31 : 0] addr;

  // value method word64
  output [63 : 0] word64;

  // value method st_amo_val
  output [63 : 0] st_amo_val;

  // value method exc
  output exc;

  // value method exc_code
  output [3 : 0] exc_code;

  // action method server_flush_request_put
  input  EN_server_flush_request_put;
  output RDY_server_flush_request_put;

  // action method server_flush_response_get
  input  EN_server_flush_response_get;
  output RDY_server_flush_response_get;

  // action method tlb_flush
  input  EN_tlb_flush;
  output RDY_tlb_flush;

  // value method mem_master_m_awvalid
  output mem_master_awvalid;

  // value method mem_master_m_awid
  output [3 : 0] mem_master_awid;

  // value method mem_master_m_awaddr
  output [63 : 0] mem_master_awaddr;

  // value method mem_master_m_awlen
  output [7 : 0] mem_master_awlen;

  // value method mem_master_m_awsize
  output [2 : 0] mem_master_awsize;

  // value method mem_master_m_awburst
  output [1 : 0] mem_master_awburst;

  // value method mem_master_m_awlock
  output mem_master_awlock;

  // value method mem_master_m_awcache
  output [3 : 0] mem_master_awcache;

  // value method mem_master_m_awprot
  output [2 : 0] mem_master_awprot;

  // value method mem_master_m_awqos
  output [3 : 0] mem_master_awqos;

  // value method mem_master_m_awregion
  output [3 : 0] mem_master_awregion;

  // value method mem_master_m_awuser

  // action method mem_master_m_awready
  input  mem_master_awready;

  // value method mem_master_m_wvalid
  output mem_master_wvalid;

  // value method mem_master_m_wid
  output [3 : 0] mem_master_wid;

  // value method mem_master_m_wdata
  output [63 : 0] mem_master_wdata;

  // value method mem_master_m_wstrb
  output [7 : 0] mem_master_wstrb;

  // value method mem_master_m_wlast
  output mem_master_wlast;

  // value method mem_master_m_wuser

  // action method mem_master_m_wready
  input  mem_master_wready;

  // action method mem_master_m_bvalid
  input  mem_master_bvalid;
  input  [3 : 0] mem_master_bid;
  input  [1 : 0] mem_master_bresp;

  // value method mem_master_m_bready
  output mem_master_bready;

  // value method mem_master_m_arvalid
  output mem_master_arvalid;

  // value method mem_master_m_arid
  output [3 : 0] mem_master_arid;

  // value method mem_master_m_araddr
  output [63 : 0] mem_master_araddr;

  // value method mem_master_m_arlen
  output [7 : 0] mem_master_arlen;

  // value method mem_master_m_arsize
  output [2 : 0] mem_master_arsize;

  // value method mem_master_m_arburst
  output [1 : 0] mem_master_arburst;

  // value method mem_master_m_arlock
  output mem_master_arlock;

  // value method mem_master_m_arcache
  output [3 : 0] mem_master_arcache;

  // value method mem_master_m_arprot
  output [2 : 0] mem_master_arprot;

  // value method mem_master_m_arqos
  output [3 : 0] mem_master_arqos;

  // value method mem_master_m_arregion
  output [3 : 0] mem_master_arregion;

  // value method mem_master_m_aruser

  // action method mem_master_m_arready
  input  mem_master_arready;

  // action method mem_master_m_rvalid
  input  mem_master_rvalid;
  input  [3 : 0] mem_master_rid;
  input  [63 : 0] mem_master_rdata;
  input  [1 : 0] mem_master_rresp;
  input  mem_master_rlast;

  // value method mem_master_m_rready
  output mem_master_rready;

  // actionvalue method near_mem_io_client_request_get
  input  EN_near_mem_io_client_request_get;
  output [136 : 0] near_mem_io_client_request_get;
  output RDY_near_mem_io_client_request_get;

  // action method near_mem_io_client_response_put
  input  [65 : 0] near_mem_io_client_response_put;
  input  EN_near_mem_io_client_response_put;
  output RDY_near_mem_io_client_response_put;

  // signals for module outputs
  reg [63 : 0] word64;
  wire [136 : 0] near_mem_io_client_request_get;
  wire [63 : 0] mem_master_araddr,
		mem_master_awaddr,
		mem_master_wdata,
		st_amo_val;
  wire [31 : 0] addr;
  wire [7 : 0] mem_master_arlen, mem_master_awlen, mem_master_wstrb;
  wire [3 : 0] exc_code,
	       mem_master_arcache,
	       mem_master_arid,
	       mem_master_arqos,
	       mem_master_arregion,
	       mem_master_awcache,
	       mem_master_awid,
	       mem_master_awqos,
	       mem_master_awregion,
	       mem_master_wid;
  wire [2 : 0] mem_master_arprot,
	       mem_master_arsize,
	       mem_master_awprot,
	       mem_master_awsize;
  wire [1 : 0] mem_master_arburst, mem_master_awburst;
  wire RDY_near_mem_io_client_request_get,
       RDY_near_mem_io_client_response_put,
       RDY_server_flush_request_put,
       RDY_server_flush_response_get,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_set_verbosity,
       RDY_tlb_flush,
       exc,
       mem_master_arlock,
       mem_master_arvalid,
       mem_master_awlock,
       mem_master_awvalid,
       mem_master_bready,
       mem_master_rready,
       mem_master_wlast,
       mem_master_wvalid,
       valid;

  // inlined wires
  reg [3 : 0] ctr_wr_rsps_pending_crg$port0__write_1;
  wire [3 : 0] ctr_wr_rsps_pending_crg$port1__write_1,
	       ctr_wr_rsps_pending_crg$port2__read,
	       ctr_wr_rsps_pending_crg$port3__read;
  wire ctr_wr_rsps_pending_crg$EN_port0__write,
       ctr_wr_rsps_pending_crg$EN_port2__write,
       dw_valid$whas,
       master_xactor_crg_rd_addr_full$EN_port0__write,
       master_xactor_crg_rd_addr_full$EN_port1__write,
       master_xactor_crg_rd_addr_full$EN_port2__write,
       master_xactor_crg_rd_addr_full$port1__read,
       master_xactor_crg_rd_addr_full$port2__read,
       master_xactor_crg_rd_addr_full$port3__read,
       master_xactor_crg_rd_data_full$EN_port0__write,
       master_xactor_crg_rd_data_full$EN_port1__write,
       master_xactor_crg_rd_data_full$EN_port2__write,
       master_xactor_crg_rd_data_full$port1__read,
       master_xactor_crg_rd_data_full$port2__read,
       master_xactor_crg_rd_data_full$port3__read,
       master_xactor_crg_wr_addr_full$EN_port0__write,
       master_xactor_crg_wr_addr_full$EN_port1__write,
       master_xactor_crg_wr_addr_full$EN_port2__write,
       master_xactor_crg_wr_addr_full$port1__read,
       master_xactor_crg_wr_addr_full$port2__read,
       master_xactor_crg_wr_addr_full$port3__read,
       master_xactor_crg_wr_data_full$EN_port0__write,
       master_xactor_crg_wr_data_full$EN_port1__write,
       master_xactor_crg_wr_data_full$EN_port2__write,
       master_xactor_crg_wr_data_full$port1__read,
       master_xactor_crg_wr_data_full$port2__read,
       master_xactor_crg_wr_data_full$port3__read,
       master_xactor_crg_wr_resp_full$EN_port0__write,
       master_xactor_crg_wr_resp_full$EN_port2__write,
       master_xactor_crg_wr_resp_full$port1__read,
       master_xactor_crg_wr_resp_full$port2__read,
       master_xactor_crg_wr_resp_full$port3__read;

  // register cfg_verbosity
  reg [3 : 0] cfg_verbosity;
  wire [3 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register ctr_wr_rsps_pending_crg
  reg [3 : 0] ctr_wr_rsps_pending_crg;
  wire [3 : 0] ctr_wr_rsps_pending_crg$D_IN;
  wire ctr_wr_rsps_pending_crg$EN;

  // register master_xactor_crg_rd_addr_full
  reg master_xactor_crg_rd_addr_full;
  wire master_xactor_crg_rd_addr_full$D_IN, master_xactor_crg_rd_addr_full$EN;

  // register master_xactor_crg_rd_data_full
  reg master_xactor_crg_rd_data_full;
  wire master_xactor_crg_rd_data_full$D_IN, master_xactor_crg_rd_data_full$EN;

  // register master_xactor_crg_wr_addr_full
  reg master_xactor_crg_wr_addr_full;
  wire master_xactor_crg_wr_addr_full$D_IN, master_xactor_crg_wr_addr_full$EN;

  // register master_xactor_crg_wr_data_full
  reg master_xactor_crg_wr_data_full;
  wire master_xactor_crg_wr_data_full$D_IN, master_xactor_crg_wr_data_full$EN;

  // register master_xactor_crg_wr_resp_full
  reg master_xactor_crg_wr_resp_full;
  wire master_xactor_crg_wr_resp_full$D_IN, master_xactor_crg_wr_resp_full$EN;

  // register master_xactor_rg_rd_addr
  reg [96 : 0] master_xactor_rg_rd_addr;
  reg [96 : 0] master_xactor_rg_rd_addr$D_IN;
  wire master_xactor_rg_rd_addr$EN;

  // register master_xactor_rg_rd_data
  reg [70 : 0] master_xactor_rg_rd_data;
  wire [70 : 0] master_xactor_rg_rd_data$D_IN;
  wire master_xactor_rg_rd_data$EN;

  // register master_xactor_rg_wr_addr
  reg [96 : 0] master_xactor_rg_wr_addr;
  reg [96 : 0] master_xactor_rg_wr_addr$D_IN;
  wire master_xactor_rg_wr_addr$EN;

  // register master_xactor_rg_wr_data
  reg [76 : 0] master_xactor_rg_wr_data;
  reg [76 : 0] master_xactor_rg_wr_data$D_IN;
  wire master_xactor_rg_wr_data$EN;

  // register master_xactor_rg_wr_resp
  reg [5 : 0] master_xactor_rg_wr_resp;
  wire [5 : 0] master_xactor_rg_wr_resp$D_IN;
  wire master_xactor_rg_wr_resp$EN;

  // register rg_addr
  reg [31 : 0] rg_addr;
  wire [31 : 0] rg_addr$D_IN;
  wire rg_addr$EN;

  // register rg_amo_funct7
  reg [6 : 0] rg_amo_funct7;
  wire [6 : 0] rg_amo_funct7$D_IN;
  wire rg_amo_funct7$EN;

  // register rg_cset_in_cache
  reg [6 : 0] rg_cset_in_cache;
  wire [6 : 0] rg_cset_in_cache$D_IN;
  wire rg_cset_in_cache$EN;

  // register rg_error_during_refill
  reg rg_error_during_refill;
  wire rg_error_during_refill$D_IN, rg_error_during_refill$EN;

  // register rg_exc_code
  reg [3 : 0] rg_exc_code;
  reg [3 : 0] rg_exc_code$D_IN;
  wire rg_exc_code$EN;

  // register rg_f3
  reg [2 : 0] rg_f3;
  wire [2 : 0] rg_f3$D_IN;
  wire rg_f3$EN;

  // register rg_ld_val
  reg [63 : 0] rg_ld_val;
  reg [63 : 0] rg_ld_val$D_IN;
  wire rg_ld_val$EN;

  // register rg_lower_word32
  reg [31 : 0] rg_lower_word32;
  wire [31 : 0] rg_lower_word32$D_IN;
  wire rg_lower_word32$EN;

  // register rg_lower_word32_full
  reg rg_lower_word32_full;
  wire rg_lower_word32_full$D_IN, rg_lower_word32_full$EN;

  // register rg_lrsc_pa
  reg [31 : 0] rg_lrsc_pa;
  wire [31 : 0] rg_lrsc_pa$D_IN;
  wire rg_lrsc_pa$EN;

  // register rg_lrsc_valid
  reg rg_lrsc_valid;
  wire rg_lrsc_valid$D_IN, rg_lrsc_valid$EN;

  // register rg_op
  reg [1 : 0] rg_op;
  wire [1 : 0] rg_op$D_IN;
  wire rg_op$EN;

  // register rg_pa
  reg [31 : 0] rg_pa;
  wire [31 : 0] rg_pa$D_IN;
  wire rg_pa$EN;

  // register rg_pte_pa
  reg [31 : 0] rg_pte_pa;
  wire [31 : 0] rg_pte_pa$D_IN;
  wire rg_pte_pa$EN;

  // register rg_req_byte_in_cline
  reg [63 : 0] rg_req_byte_in_cline;
  wire [63 : 0] rg_req_byte_in_cline$D_IN;
  wire rg_req_byte_in_cline$EN;

  // register rg_requesting_cline
  reg rg_requesting_cline;
  reg rg_requesting_cline$D_IN;
  wire rg_requesting_cline$EN;

  // register rg_st_amo_val
  reg [63 : 0] rg_st_amo_val;
  wire [63 : 0] rg_st_amo_val$D_IN;
  wire rg_st_amo_val$EN;

  // register rg_state
  reg [3 : 0] rg_state;
  reg [3 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // register rg_word64_set_in_cache
  reg [8 : 0] rg_word64_set_in_cache;
  wire [8 : 0] rg_word64_set_in_cache$D_IN;
  wire rg_word64_set_in_cache$EN;

  // ports of submodule f_near_mem_io_reqs
  wire [136 : 0] f_near_mem_io_reqs$D_IN, f_near_mem_io_reqs$D_OUT;
  wire f_near_mem_io_reqs$CLR,
       f_near_mem_io_reqs$DEQ,
       f_near_mem_io_reqs$EMPTY_N,
       f_near_mem_io_reqs$ENQ,
       f_near_mem_io_reqs$FULL_N;

  // ports of submodule f_near_mem_io_rsps
  wire [65 : 0] f_near_mem_io_rsps$D_IN, f_near_mem_io_rsps$D_OUT;
  wire f_near_mem_io_rsps$CLR,
       f_near_mem_io_rsps$DEQ,
       f_near_mem_io_rsps$EMPTY_N,
       f_near_mem_io_rsps$ENQ,
       f_near_mem_io_rsps$FULL_N;

  // ports of submodule f_reset_reqs
  wire f_reset_reqs$CLR,
       f_reset_reqs$DEQ,
       f_reset_reqs$D_IN,
       f_reset_reqs$D_OUT,
       f_reset_reqs$EMPTY_N,
       f_reset_reqs$ENQ,
       f_reset_reqs$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$D_IN,
       f_reset_rsps$D_OUT,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule ram_state_and_ctag_cset
  wire [22 : 0] ram_state_and_ctag_cset$DIA,
		ram_state_and_ctag_cset$DIB,
		ram_state_and_ctag_cset$DOB;
  wire [6 : 0] ram_state_and_ctag_cset$ADDRA, ram_state_and_ctag_cset$ADDRB;
  wire ram_state_and_ctag_cset$ENA,
       ram_state_and_ctag_cset$ENB,
       ram_state_and_ctag_cset$WEA,
       ram_state_and_ctag_cset$WEB;

  // ports of submodule ram_word64_set
  reg [63 : 0] ram_word64_set$DIB;
  reg [8 : 0] ram_word64_set$ADDRB;
  wire [63 : 0] ram_word64_set$DIA, ram_word64_set$DOB;
  wire [8 : 0] ram_word64_set$ADDRA;
  wire ram_word64_set$ENA,
       ram_word64_set$ENB,
       ram_word64_set$WEA,
       ram_word64_set$WEB;

  // ports of submodule soc_map
  wire [63 : 0] soc_map$m_is_IO_addr_addr,
		soc_map$m_is_mem_addr_addr,
		soc_map$m_is_near_mem_IO_addr_addr;
  wire soc_map$m_is_IO_addr, soc_map$m_is_near_mem_IO_addr;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_ST_AMO_response,
       CAN_FIRE_RL_rl_cache_refill_req_loop,
       CAN_FIRE_RL_rl_cache_refill_rsps_loop,
       CAN_FIRE_RL_rl_discard_write_rsp,
       CAN_FIRE_RL_rl_drive_exception_rsp,
       CAN_FIRE_RL_rl_io_AMO_SC_req,
       CAN_FIRE_RL_rl_io_AMO_op_req,
       CAN_FIRE_RL_rl_io_AMO_read_rsp,
       CAN_FIRE_RL_rl_io_near_mem_read_req,
       CAN_FIRE_RL_rl_io_near_mem_read_rsp,
       CAN_FIRE_RL_rl_io_near_mem_write_req,
       CAN_FIRE_RL_rl_io_near_mem_write_rsp,
       CAN_FIRE_RL_rl_io_read_req,
       CAN_FIRE_RL_rl_io_read_rsp,
       CAN_FIRE_RL_rl_io_write_req,
       CAN_FIRE_RL_rl_maintain_io_read_rsp,
       CAN_FIRE_RL_rl_probe_and_immed_rsp,
       CAN_FIRE_RL_rl_rereq,
       CAN_FIRE_RL_rl_reset,
       CAN_FIRE_RL_rl_start_cache_refill,
       CAN_FIRE_RL_rl_start_reset,
       CAN_FIRE_mem_master_m_arready,
       CAN_FIRE_mem_master_m_awready,
       CAN_FIRE_mem_master_m_bvalid,
       CAN_FIRE_mem_master_m_rvalid,
       CAN_FIRE_mem_master_m_wready,
       CAN_FIRE_near_mem_io_client_request_get,
       CAN_FIRE_near_mem_io_client_response_put,
       CAN_FIRE_req,
       CAN_FIRE_server_flush_request_put,
       CAN_FIRE_server_flush_response_get,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_tlb_flush,
       WILL_FIRE_RL_rl_ST_AMO_response,
       WILL_FIRE_RL_rl_cache_refill_req_loop,
       WILL_FIRE_RL_rl_cache_refill_rsps_loop,
       WILL_FIRE_RL_rl_discard_write_rsp,
       WILL_FIRE_RL_rl_drive_exception_rsp,
       WILL_FIRE_RL_rl_io_AMO_SC_req,
       WILL_FIRE_RL_rl_io_AMO_op_req,
       WILL_FIRE_RL_rl_io_AMO_read_rsp,
       WILL_FIRE_RL_rl_io_near_mem_read_req,
       WILL_FIRE_RL_rl_io_near_mem_read_rsp,
       WILL_FIRE_RL_rl_io_near_mem_write_req,
       WILL_FIRE_RL_rl_io_near_mem_write_rsp,
       WILL_FIRE_RL_rl_io_read_req,
       WILL_FIRE_RL_rl_io_read_rsp,
       WILL_FIRE_RL_rl_io_write_req,
       WILL_FIRE_RL_rl_maintain_io_read_rsp,
       WILL_FIRE_RL_rl_probe_and_immed_rsp,
       WILL_FIRE_RL_rl_rereq,
       WILL_FIRE_RL_rl_reset,
       WILL_FIRE_RL_rl_start_cache_refill,
       WILL_FIRE_RL_rl_start_reset,
       WILL_FIRE_mem_master_m_arready,
       WILL_FIRE_mem_master_m_awready,
       WILL_FIRE_mem_master_m_bvalid,
       WILL_FIRE_mem_master_m_rvalid,
       WILL_FIRE_mem_master_m_wready,
       WILL_FIRE_near_mem_io_client_request_get,
       WILL_FIRE_near_mem_io_client_response_put,
       WILL_FIRE_req,
       WILL_FIRE_server_flush_request_put,
       WILL_FIRE_server_flush_response_get,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_tlb_flush;

  // inputs to muxes for submodule ports
  wire [136 : 0] MUX_f_near_mem_io_reqs$enq_1__VAL_1,
		 MUX_f_near_mem_io_reqs$enq_1__VAL_2;
  wire [96 : 0] MUX_master_xactor_rg_rd_addr$write_1__VAL_1,
		MUX_master_xactor_rg_rd_addr$write_1__VAL_2,
		MUX_master_xactor_rg_rd_addr$write_1__VAL_3,
		MUX_master_xactor_rg_wr_addr$write_1__VAL_1,
		MUX_master_xactor_rg_wr_addr$write_1__VAL_2;
  wire [76 : 0] MUX_master_xactor_rg_wr_data$write_1__VAL_1,
		MUX_master_xactor_rg_wr_data$write_1__VAL_2,
		MUX_master_xactor_rg_wr_data$write_1__VAL_3;
  wire [63 : 0] MUX_dw_output_ld_val$wset_1__VAL_4,
		MUX_ram_word64_set$a_put_3__VAL_2,
		MUX_rg_ld_val$write_1__VAL_2,
		MUX_rg_req_byte_in_cline$write_1__VAL_1;
  wire [22 : 0] MUX_ram_state_and_ctag_cset$a_put_3__VAL_1;
  wire [8 : 0] MUX_ram_word64_set$b_put_2__VAL_2,
	       MUX_ram_word64_set$b_put_2__VAL_4;
  wire [6 : 0] MUX_rg_cset_in_cache$write_1__VAL_1;
  wire [3 : 0] MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1,
	       MUX_rg_exc_code$write_1__VAL_1,
	       MUX_rg_state$write_1__VAL_13,
	       MUX_rg_state$write_1__VAL_2,
	       MUX_rg_state$write_1__VAL_3,
	       MUX_rg_state$write_1__VAL_8,
	       MUX_rg_state$write_1__VAL_9;
  wire MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1,
       MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2,
       MUX_dw_output_ld_val$wset_1__SEL_1,
       MUX_dw_output_ld_val$wset_1__SEL_3,
       MUX_dw_output_ld_val$wset_1__SEL_4,
       MUX_dw_output_ld_val$wset_1__SEL_5,
       MUX_master_xactor_rg_rd_addr$write_1__SEL_1,
       MUX_ram_state_and_ctag_cset$b_put_1__SEL_1,
       MUX_ram_word64_set$a_put_1__SEL_1,
       MUX_ram_word64_set$b_put_1__SEL_2,
       MUX_rg_error_during_refill$write_1__SEL_1,
       MUX_rg_exc_code$write_1__SEL_1,
       MUX_rg_exc_code$write_1__SEL_2,
       MUX_rg_exc_code$write_1__SEL_3,
       MUX_rg_exc_code$write_1__SEL_5,
       MUX_rg_ld_val$write_1__SEL_2,
       MUX_rg_lrsc_valid$write_1__SEL_2,
       MUX_rg_state$write_1__SEL_16,
       MUX_rg_state$write_1__SEL_8,
       MUX_rg_state$write_1__SEL_9;

  // remaining internal signals
  reg [63 : 0] CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q46,
	       CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q67,
	       CASE_rg_addr_BITS_2_TO_0_0x0_result1815_0x4_re_ETC__q65,
	       CASE_rg_addr_BITS_2_TO_0_0x0_result2675_0x4_re_ETC__q43,
	       CASE_rg_addr_BITS_2_TO_0_0x0_result5321_0x4_re_ETC__q47,
	       CASE_rg_addr_BITS_2_TO_0_0x0_result5386_0x4_re_ETC__q48,
	       CASE_rg_addr_BITS_2_TO_0_0x0_result6955_0x4_re_ETC__q63,
	       CASE_rg_addr_BITS_2_TO_0_0x0_result7020_0x4_re_ETC__q64,
	       IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d213,
	       IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d235,
	       IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d247,
	       IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d645,
	       IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d665,
	       IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d748,
	       IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d768,
	       IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d884,
	       IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d904,
	       IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d914,
	       IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d196,
	       IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d226,
	       IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d629,
	       IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d657,
	       IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d732,
	       IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d760,
	       IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d868,
	       IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d896,
	       IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d334,
	       IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d343,
	       IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d408,
	       IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d417,
	       IF_rg_f3_30_EQ_0b0_31_THEN_IF_rg_addr_7_BITS_2_ETC___d352,
	       IF_rg_f3_30_EQ_0b0_31_THEN_IF_rg_addr_7_BITS_2_ETC___d426,
	       IF_rg_f3_30_EQ_0b10_36_THEN_SEXT_IF_rg_f3_30_E_ETC___d294,
	       _theResult_____2__h17672,
	       _theResult_____2__h30020,
	       ld_val__h24550,
	       ld_val__h26184,
	       mem_req_wr_data_wdata__h16883,
	       mem_req_wr_data_wdata__h20326,
	       mem_req_wr_data_wdata__h29998,
	       new_ld_val__h29726,
	       new_value__h15532,
	       new_value__h5560,
	       value__h28727,
	       w1__h17664,
	       w1__h30008,
	       w1__h30012;
  reg [31 : 0] v__h12848,
	       v__h12854,
	       v__h16435,
	       v__h16441,
	       v__h17107,
	       v__h17113,
	       v__h20519,
	       v__h20525,
	       v__h20964,
	       v__h20970,
	       v__h21781,
	       v__h21787,
	       v__h22152,
	       v__h22158,
	       v__h22393,
	       v__h22399,
	       v__h24031,
	       v__h24037,
	       v__h24435,
	       v__h24441,
	       v__h25535,
	       v__h25541,
	       v__h25642,
	       v__h25648,
	       v__h25875,
	       v__h25881,
	       v__h26060,
	       v__h26066,
	       v__h27167,
	       v__h27173,
	       v__h27274,
	       v__h27280,
	       v__h27379,
	       v__h27385,
	       v__h27489,
	       v__h27495,
	       v__h28011,
	       v__h28017,
	       v__h28661,
	       v__h28667,
	       v__h28803,
	       v__h28809,
	       v__h28983,
	       v__h28989,
	       v__h29101,
	       v__h29107,
	       v__h29419,
	       v__h29425,
	       v__h29594,
	       v__h29600,
	       v__h29690,
	       v__h29696,
	       v__h32207,
	       v__h32213,
	       v__h32459,
	       v__h32465,
	       v__h33040,
	       v__h33046,
	       v__h33079,
	       v__h33085,
	       v__h33458,
	       v__h33464,
	       v__h3726,
	       v__h3732,
	       v__h4091,
	       v__h4097,
	       v__h4192,
	       v__h4198,
	       v__h4341,
	       v__h4347;
  reg [7 : 0] mem_req_wr_data_wstrb__h20327, mem_req_wr_data_wstrb__h29999;
  reg [2 : 0] value__h29311, value__h32337;
  wire [63 : 0] IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_1_EL_ETC___d263,
		IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_IF_r_ETC___d915,
		IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d249,
		IF_rg_f3_30_EQ_0b10_36_THEN_SEXT_rg_st_amo_val_ETC___d358,
		IF_rg_op_0_EQ_1_8_OR_rg_op_0_EQ_2_2_AND_rg_amo_ETC___d450,
		_theResult___fst__h16785,
		_theResult___fst__h20258,
		_theResult___fst__h28445,
		_theResult___fst__h29930,
		cline_fabric_addr__h21840,
		mem_req_wr_addr_awaddr__h20116,
		mem_req_wr_addr_awaddr__h29788,
		new_st_val__h17394,
		new_st_val__h17676,
		new_st_val__h17767,
		new_st_val__h18747,
		new_st_val__h18751,
		new_st_val__h18755,
		new_st_val__h18759,
		new_st_val__h18764,
		new_st_val__h18770,
		new_st_val__h18775,
		new_st_val__h30024,
		new_st_val__h30115,
		new_st_val__h31975,
		new_st_val__h31979,
		new_st_val__h31983,
		new_st_val__h31987,
		new_st_val__h31992,
		new_st_val__h31998,
		new_st_val__h32003,
		result__h11971,
		result__h11999,
		result__h12027,
		result__h12055,
		result__h12083,
		result__h12111,
		result__h12139,
		result__h12184,
		result__h12212,
		result__h12240,
		result__h12268,
		result__h12296,
		result__h12324,
		result__h12352,
		result__h12380,
		result__h12425,
		result__h12453,
		result__h12481,
		result__h12509,
		result__h12550,
		result__h12578,
		result__h12606,
		result__h12634,
		result__h12675,
		result__h12703,
		result__h12742,
		result__h12770,
		result__h24610,
		result__h24640,
		result__h24667,
		result__h24694,
		result__h24721,
		result__h24748,
		result__h24775,
		result__h24802,
		result__h24846,
		result__h24873,
		result__h24900,
		result__h24927,
		result__h24954,
		result__h24981,
		result__h25008,
		result__h25035,
		result__h25079,
		result__h25106,
		result__h25133,
		result__h25160,
		result__h25200,
		result__h25227,
		result__h25254,
		result__h25281,
		result__h25321,
		result__h25348,
		result__h25386,
		result__h25413,
		result__h26244,
		result__h26274,
		result__h26301,
		result__h26328,
		result__h26355,
		result__h26382,
		result__h26409,
		result__h26436,
		result__h26480,
		result__h26507,
		result__h26534,
		result__h26561,
		result__h26588,
		result__h26615,
		result__h26642,
		result__h26669,
		result__h26713,
		result__h26740,
		result__h26767,
		result__h26794,
		result__h26834,
		result__h26861,
		result__h26888,
		result__h26915,
		result__h26955,
		result__h26982,
		result__h27020,
		result__h27047,
		result__h30203,
		result__h31111,
		result__h31139,
		result__h31167,
		result__h31195,
		result__h31223,
		result__h31251,
		result__h31279,
		result__h31324,
		result__h31352,
		result__h31380,
		result__h31408,
		result__h31436,
		result__h31464,
		result__h31492,
		result__h31520,
		result__h31565,
		result__h31593,
		result__h31621,
		result__h31649,
		result__h31690,
		result__h31718,
		result__h31746,
		result__h31774,
		result__h31815,
		result__h31843,
		result__h31882,
		result__h31910,
		result__h5615,
		st_val__h29738,
		w1___1__h17735,
		w1___1__h30083,
		w2___1__h30084,
		w2__h30014,
		word64__h5341,
		x__h13241,
		y__h5651;
  wire [31 : 0] cline_addr__h21839,
		f_near_mem_io_rspsD_OUT_BITS_31_TO_0__q7,
		f_near_mem_io_rspsD_OUT_BITS_63_TO_32__q20,
		ld_val4550_BITS_31_TO_0__q51,
		ld_val4550_BITS_63_TO_32__q58,
		master_xactor_rg_rd_data_BITS_34_TO_3__q4,
		master_xactor_rg_rd_data_BITS_66_TO_35__q17,
		new_value560_BITS_31_TO_0__q44,
		rg_st_amo_val_BITS_31_TO_0__q45,
		w10008_BITS_31_TO_0__q66,
		word64341_BITS_31_TO_0__q31,
		word64341_BITS_63_TO_32__q39;
  wire [21 : 0] pa_ctag__h5199;
  wire [15 : 0] f_near_mem_io_rspsD_OUT_BITS_15_TO_0__q6,
		f_near_mem_io_rspsD_OUT_BITS_31_TO_16__q12,
		f_near_mem_io_rspsD_OUT_BITS_47_TO_32__q19,
		f_near_mem_io_rspsD_OUT_BITS_63_TO_48__q26,
		ld_val4550_BITS_15_TO_0__q50,
		ld_val4550_BITS_31_TO_16__q54,
		ld_val4550_BITS_47_TO_32__q57,
		ld_val4550_BITS_63_TO_48__q61,
		master_xactor_rg_rd_data_BITS_18_TO_3__q3,
		master_xactor_rg_rd_data_BITS_34_TO_19__q10,
		master_xactor_rg_rd_data_BITS_50_TO_35__q16,
		master_xactor_rg_rd_data_BITS_66_TO_51__q24,
		word64341_BITS_15_TO_0__q30,
		word64341_BITS_31_TO_16__q34,
		word64341_BITS_47_TO_32__q37,
		word64341_BITS_63_TO_48__q41;
  wire [7 : 0] f_near_mem_io_rspsD_OUT_BITS_15_TO_8__q8,
	       f_near_mem_io_rspsD_OUT_BITS_23_TO_16__q11,
	       f_near_mem_io_rspsD_OUT_BITS_31_TO_24__q14,
	       f_near_mem_io_rspsD_OUT_BITS_39_TO_32__q18,
	       f_near_mem_io_rspsD_OUT_BITS_47_TO_40__q22,
	       f_near_mem_io_rspsD_OUT_BITS_55_TO_48__q25,
	       f_near_mem_io_rspsD_OUT_BITS_63_TO_56__q28,
	       f_near_mem_io_rspsD_OUT_BITS_7_TO_0__q5,
	       ld_val4550_BITS_15_TO_8__q52,
	       ld_val4550_BITS_23_TO_16__q53,
	       ld_val4550_BITS_31_TO_24__q56,
	       ld_val4550_BITS_39_TO_32__q55,
	       ld_val4550_BITS_47_TO_40__q59,
	       ld_val4550_BITS_55_TO_48__q60,
	       ld_val4550_BITS_63_TO_56__q62,
	       ld_val4550_BITS_7_TO_0__q49,
	       master_xactor_rg_rd_data_BITS_10_TO_3__q1,
	       master_xactor_rg_rd_data_BITS_18_TO_11__q2,
	       master_xactor_rg_rd_data_BITS_26_TO_19__q9,
	       master_xactor_rg_rd_data_BITS_34_TO_27__q13,
	       master_xactor_rg_rd_data_BITS_42_TO_35__q15,
	       master_xactor_rg_rd_data_BITS_50_TO_43__q21,
	       master_xactor_rg_rd_data_BITS_58_TO_51__q23,
	       master_xactor_rg_rd_data_BITS_66_TO_59__q27,
	       strobe64__h20257,
	       strobe64__h20260,
	       strobe64__h20263,
	       strobe64__h29929,
	       strobe64__h29932,
	       strobe64__h29935,
	       word64341_BITS_15_TO_8__q32,
	       word64341_BITS_23_TO_16__q33,
	       word64341_BITS_31_TO_24__q36,
	       word64341_BITS_39_TO_32__q35,
	       word64341_BITS_47_TO_40__q38,
	       word64341_BITS_55_TO_48__q40,
	       word64341_BITS_63_TO_56__q42,
	       word64341_BITS_7_TO_0__q29;
  wire [5 : 0] shift_bits__h20122, shift_bits__h29794;
  wire [3 : 0] IF_rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_ETC___d103,
	       IF_rg_op_0_EQ_1_8_OR_rg_op_0_EQ_2_2_AND_rg_amo_ETC___d102,
	       access_exc_code__h3265,
	       b__h20924;
  wire IF_rg_op_0_EQ_1_8_OR_rg_op_0_EQ_2_2_AND_rg_amo_ETC___d75,
       NOT_cfg_verbosity_read__0_ULE_1_1___d12,
       NOT_cfg_verbosity_read__0_ULE_2_38___d539,
       NOT_ram_state_and_ctag_cset_b_read__5_BIT_22_6_ETC___d111,
       NOT_req_f3_BITS_1_TO_0_005_EQ_0b0_006_007_AND__ETC___d1026,
       NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d430,
       NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d478,
       NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d486,
       NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d491,
       NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d98,
       NOT_rg_op_0_EQ_1_8_17_AND_NOT_rg_op_0_EQ_2_2_0_ETC___d120,
       NOT_rg_op_0_EQ_1_8_17_AND_NOT_rg_op_0_EQ_2_2_0_ETC___d298,
       NOT_rg_op_0_EQ_1_8_17_AND_NOT_rg_op_0_EQ_2_2_0_ETC___d501,
       NOT_rg_op_0_EQ_1_8_17_AND_NOT_rg_op_0_EQ_2_2_0_ETC___d504,
       NOT_rg_op_0_EQ_1_8_17_AND_NOT_rg_op_0_EQ_2_2_0_ETC___d508,
       NOT_rg_op_0_EQ_1_8_17_AND_NOT_rg_op_0_EQ_2_2_0_ETC___d514,
       NOT_rg_op_0_EQ_2_2_0_OR_NOT_rg_amo_funct7_3_BI_ETC___d296,
       NOT_rg_op_0_EQ_2_2_0_OR_NOT_rg_amo_funct7_3_BI_ETC___d476,
       NOT_rg_op_0_EQ_2_2_0_OR_NOT_rg_amo_funct7_3_BI_ETC___d480,
       NOT_rg_op_0_EQ_2_2_0_OR_NOT_rg_amo_funct7_3_BI_ETC___d484,
       NOT_rg_op_0_EQ_2_2_0_OR_NOT_rg_amo_funct7_3_BI_ETC___d489,
       NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d290,
       NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d301,
       NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d506,
       NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d510,
       NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d518,
       lrsc_result__h13231,
       master_xactor_crg_rd_data_full_port1__read__48_ETC___d838,
       ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d71,
       ram_state_and_ctag_cset_b_read__5_BIT_22_6_AND_ETC___d112,
       req_f3_BITS_1_TO_0_005_EQ_0b0_006_OR_req_f3_BI_ETC___d1035,
       rg_addr_7_EQ_rg_lrsc_pa_4___d109,
       rg_amo_funct7_3_BITS_6_TO_2_4_EQ_0b10_5_AND_NO_ETC___d284,
       rg_lrsc_pa_4_EQ_rg_addr_7___d55,
       rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d123,
       rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d125,
       rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d128,
       rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d267,
       rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d280,
       rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d88,
       rg_op_0_EQ_1_8_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d121,
       rg_op_0_EQ_1_8_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d299,
       rg_op_0_EQ_1_8_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d428,
       rg_op_0_EQ_2_2_AND_rg_amo_funct7_3_BITS_6_TO_2_ETC___d497,
       rg_op_0_EQ_2_2_AND_rg_amo_funct7_3_BITS_6_TO_2_ETC___d64,
       rg_state_EQ_12_85_AND_rg_op_0_EQ_0_1_OR_rg_op__ETC___d590,
       rg_state_EQ_12_85_AND_rg_op_0_EQ_0_1_OR_rg_op__ETC___d691;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get =
	     !f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get =
	     !f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // action method req
  assign CAN_FIRE_req = 1'd1 ;
  assign WILL_FIRE_req = EN_req ;

  // value method valid
  assign valid = dw_valid$whas ;

  // value method addr
  assign addr = rg_addr ;

  // value method word64
  always@(MUX_dw_output_ld_val$wset_1__SEL_1 or
	  ld_val__h24550 or
	  MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  new_ld_val__h29726 or
	  MUX_dw_output_ld_val$wset_1__SEL_3 or
	  ld_val__h26184 or
	  MUX_dw_output_ld_val$wset_1__SEL_4 or
	  MUX_dw_output_ld_val$wset_1__VAL_4 or
	  MUX_dw_output_ld_val$wset_1__SEL_5 or rg_ld_val)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dw_output_ld_val$wset_1__SEL_1: word64 = ld_val__h24550;
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  word64 = new_ld_val__h29726;
      MUX_dw_output_ld_val$wset_1__SEL_3: word64 = ld_val__h26184;
      MUX_dw_output_ld_val$wset_1__SEL_4:
	  word64 = MUX_dw_output_ld_val$wset_1__VAL_4;
      MUX_dw_output_ld_val$wset_1__SEL_5: word64 = rg_ld_val;
      default: word64 = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end

  // value method st_amo_val
  assign st_amo_val =
	     MUX_dw_output_ld_val$wset_1__SEL_4 ? 64'd0 : rg_st_amo_val ;

  // value method exc
  assign exc = rg_state == 4'd4 ;

  // value method exc_code
  assign exc_code = rg_exc_code ;

  // action method server_flush_request_put
  assign RDY_server_flush_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_flush_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_flush_request_put = EN_server_flush_request_put ;

  // action method server_flush_response_get
  assign RDY_server_flush_response_get =
	     f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_flush_response_get =
	     f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_flush_response_get = EN_server_flush_response_get ;

  // action method tlb_flush
  assign RDY_tlb_flush = 1'd1 ;
  assign CAN_FIRE_tlb_flush = 1'd1 ;
  assign WILL_FIRE_tlb_flush = EN_tlb_flush ;

  // value method mem_master_m_awvalid
  assign mem_master_awvalid =
	     !master_xactor_crg_wr_addr_full$EN_port0__write &&
	     master_xactor_crg_wr_addr_full ;

  // value method mem_master_m_awid
  assign mem_master_awid = master_xactor_rg_wr_addr[96:93] ;

  // value method mem_master_m_awaddr
  assign mem_master_awaddr = master_xactor_rg_wr_addr[92:29] ;

  // value method mem_master_m_awlen
  assign mem_master_awlen = master_xactor_rg_wr_addr[28:21] ;

  // value method mem_master_m_awsize
  assign mem_master_awsize = master_xactor_rg_wr_addr[20:18] ;

  // value method mem_master_m_awburst
  assign mem_master_awburst = master_xactor_rg_wr_addr[17:16] ;

  // value method mem_master_m_awlock
  assign mem_master_awlock = master_xactor_rg_wr_addr[15] ;

  // value method mem_master_m_awcache
  assign mem_master_awcache = master_xactor_rg_wr_addr[14:11] ;

  // value method mem_master_m_awprot
  assign mem_master_awprot = master_xactor_rg_wr_addr[10:8] ;

  // value method mem_master_m_awqos
  assign mem_master_awqos = master_xactor_rg_wr_addr[7:4] ;

  // value method mem_master_m_awregion
  assign mem_master_awregion = master_xactor_rg_wr_addr[3:0] ;

  // action method mem_master_m_awready
  assign CAN_FIRE_mem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_awready = 1'd1 ;

  // value method mem_master_m_wvalid
  assign mem_master_wvalid =
	     !master_xactor_crg_wr_data_full$EN_port0__write &&
	     master_xactor_crg_wr_data_full ;

  // value method mem_master_m_wid
  assign mem_master_wid = master_xactor_rg_wr_data[76:73] ;

  // value method mem_master_m_wdata
  assign mem_master_wdata = master_xactor_rg_wr_data[72:9] ;

  // value method mem_master_m_wstrb
  assign mem_master_wstrb = master_xactor_rg_wr_data[8:1] ;

  // value method mem_master_m_wlast
  assign mem_master_wlast = master_xactor_rg_wr_data[0] ;

  // action method mem_master_m_wready
  assign CAN_FIRE_mem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_wready = 1'd1 ;

  // action method mem_master_m_bvalid
  assign CAN_FIRE_mem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_mem_master_m_bvalid = 1'd1 ;

  // value method mem_master_m_bready
  assign mem_master_bready = !master_xactor_crg_wr_resp_full$port2__read ;

  // value method mem_master_m_arvalid
  assign mem_master_arvalid =
	     !master_xactor_crg_rd_addr_full$EN_port0__write &&
	     master_xactor_crg_rd_addr_full ;

  // value method mem_master_m_arid
  assign mem_master_arid = master_xactor_rg_rd_addr[96:93] ;

  // value method mem_master_m_araddr
  assign mem_master_araddr = master_xactor_rg_rd_addr[92:29] ;

  // value method mem_master_m_arlen
  assign mem_master_arlen = master_xactor_rg_rd_addr[28:21] ;

  // value method mem_master_m_arsize
  assign mem_master_arsize = master_xactor_rg_rd_addr[20:18] ;

  // value method mem_master_m_arburst
  assign mem_master_arburst = master_xactor_rg_rd_addr[17:16] ;

  // value method mem_master_m_arlock
  assign mem_master_arlock = master_xactor_rg_rd_addr[15] ;

  // value method mem_master_m_arcache
  assign mem_master_arcache = master_xactor_rg_rd_addr[14:11] ;

  // value method mem_master_m_arprot
  assign mem_master_arprot = master_xactor_rg_rd_addr[10:8] ;

  // value method mem_master_m_arqos
  assign mem_master_arqos = master_xactor_rg_rd_addr[7:4] ;

  // value method mem_master_m_arregion
  assign mem_master_arregion = master_xactor_rg_rd_addr[3:0] ;

  // action method mem_master_m_arready
  assign CAN_FIRE_mem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_arready = 1'd1 ;

  // action method mem_master_m_rvalid
  assign CAN_FIRE_mem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_mem_master_m_rvalid = 1'd1 ;

  // value method mem_master_m_rready
  assign mem_master_rready = !master_xactor_crg_rd_data_full$port2__read ;

  // actionvalue method near_mem_io_client_request_get
  assign near_mem_io_client_request_get = f_near_mem_io_reqs$D_OUT ;
  assign RDY_near_mem_io_client_request_get = f_near_mem_io_reqs$EMPTY_N ;
  assign CAN_FIRE_near_mem_io_client_request_get =
	     f_near_mem_io_reqs$EMPTY_N ;
  assign WILL_FIRE_near_mem_io_client_request_get =
	     EN_near_mem_io_client_request_get ;

  // action method near_mem_io_client_response_put
  assign RDY_near_mem_io_client_response_put = f_near_mem_io_rsps$FULL_N ;
  assign CAN_FIRE_near_mem_io_client_response_put =
	     f_near_mem_io_rsps$FULL_N ;
  assign WILL_FIRE_near_mem_io_client_response_put =
	     EN_near_mem_io_client_response_put ;

  // submodule f_near_mem_io_reqs
  FIFO2 #(.width(32'd137), .guarded(32'd1)) f_near_mem_io_reqs(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(f_near_mem_io_reqs$D_IN),
							       .ENQ(f_near_mem_io_reqs$ENQ),
							       .DEQ(f_near_mem_io_reqs$DEQ),
							       .CLR(f_near_mem_io_reqs$CLR),
							       .D_OUT(f_near_mem_io_reqs$D_OUT),
							       .FULL_N(f_near_mem_io_reqs$FULL_N),
							       .EMPTY_N(f_near_mem_io_reqs$EMPTY_N));

  // submodule f_near_mem_io_rsps
  FIFO2 #(.width(32'd66), .guarded(32'd1)) f_near_mem_io_rsps(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(f_near_mem_io_rsps$D_IN),
							      .ENQ(f_near_mem_io_rsps$ENQ),
							      .DEQ(f_near_mem_io_rsps$DEQ),
							      .CLR(f_near_mem_io_rsps$CLR),
							      .D_OUT(f_near_mem_io_rsps$D_OUT),
							      .FULL_N(f_near_mem_io_rsps$FULL_N),
							      .EMPTY_N(f_near_mem_io_rsps$EMPTY_N));

  // submodule f_reset_reqs
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_reqs(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_reset_reqs$D_IN),
						       .ENQ(f_reset_reqs$ENQ),
						       .DEQ(f_reset_reqs$DEQ),
						       .CLR(f_reset_reqs$CLR),
						       .D_OUT(f_reset_reqs$D_OUT),
						       .FULL_N(f_reset_reqs$FULL_N),
						       .EMPTY_N(f_reset_reqs$EMPTY_N));

  // submodule f_reset_rsps
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_rsps(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_reset_rsps$D_IN),
						       .ENQ(f_reset_rsps$ENQ),
						       .DEQ(f_reset_rsps$DEQ),
						       .CLR(f_reset_rsps$CLR),
						       .D_OUT(f_reset_rsps$D_OUT),
						       .FULL_N(f_reset_rsps$FULL_N),
						       .EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule ram_state_and_ctag_cset
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd23),
	  .MEMSIZE(8'd128)) ram_state_and_ctag_cset(.CLKA(CLK),
						    .CLKB(CLK),
						    .ADDRA(ram_state_and_ctag_cset$ADDRA),
						    .ADDRB(ram_state_and_ctag_cset$ADDRB),
						    .DIA(ram_state_and_ctag_cset$DIA),
						    .DIB(ram_state_and_ctag_cset$DIB),
						    .WEA(ram_state_and_ctag_cset$WEA),
						    .WEB(ram_state_and_ctag_cset$WEB),
						    .ENA(ram_state_and_ctag_cset$ENA),
						    .ENB(ram_state_and_ctag_cset$ENB),
						    .DOA(),
						    .DOB(ram_state_and_ctag_cset$DOB));

  // submodule ram_word64_set
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd9),
	  .DATA_WIDTH(32'd64),
	  .MEMSIZE(10'd512)) ram_word64_set(.CLKA(CLK),
					    .CLKB(CLK),
					    .ADDRA(ram_word64_set$ADDRA),
					    .ADDRB(ram_word64_set$ADDRB),
					    .DIA(ram_word64_set$DIA),
					    .DIB(ram_word64_set$DIB),
					    .WEA(ram_word64_set$WEA),
					    .WEB(ram_word64_set$WEB),
					    .ENA(ram_word64_set$ENA),
					    .ENB(ram_word64_set$ENB),
					    .DOA(),
					    .DOB(ram_word64_set$DOB));

  // submodule soc_map
  mkSoC_Map soc_map(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_is_IO_addr_addr(soc_map$m_is_IO_addr_addr),
		    .m_is_mem_addr_addr(soc_map$m_is_mem_addr_addr),
		    .m_is_near_mem_IO_addr_addr(soc_map$m_is_near_mem_IO_addr_addr),
		    .m_near_mem_io_addr_base(),
		    .m_near_mem_io_addr_size(),
		    .m_near_mem_io_addr_lim(),
		    .m_plic_addr_base(),
		    .m_plic_addr_size(),
		    .m_plic_addr_lim(),
		    .m_pcie_ecam_slave_bridge_addr_base(),
		    .m_pcie_ecam_slave_bridge_addr_size(),
		    .m_pcie_ecam_slave_bridge_addr_lim(),
		    .m_flash_mem_addr_base(),
		    .m_flash_mem_addr_size(),
		    .m_flash_mem_addr_lim(),
		    .m_pcie_block_registers_addr_base(),
		    .m_pcie_block_registers_addr_size(),
		    .m_pcie_block_registers_addr_lim(),
		    .m_ethernet0_addr_base(),
		    .m_ethernet0_addr_size(),
		    .m_ethernet0_addr_lim(),
		    .m_dma0_addr_base(),
		    .m_dma0_addr_size(),
		    .m_dma0_addr_lim(),
		    .m_uart0_addr_base(),
		    .m_uart0_addr_size(),
		    .m_uart0_addr_lim(),
		    .m_boot_rom_addr_base(),
		    .m_boot_rom_addr_size(),
		    .m_boot_rom_addr_lim(),
		    .m_ddr4_0_addr_base(),
		    .m_ddr4_0_addr_size(),
		    .m_ddr4_0_addr_lim(),
		    .m_is_mem_addr(),
		    .m_is_IO_addr(soc_map$m_is_IO_addr),
		    .m_is_near_mem_IO_addr(soc_map$m_is_near_mem_IO_addr),
		    .m_pc_reset_value());

  // rule RL_rl_reset
  assign CAN_FIRE_RL_rl_reset =
	     (rg_cset_in_cache != 7'd127 ||
	      f_reset_reqs$EMPTY_N && f_reset_rsps$FULL_N) &&
	     rg_state == 4'd1 ;
  assign WILL_FIRE_RL_rl_reset = CAN_FIRE_RL_rl_reset ;

  // rule RL_rl_rereq
  assign CAN_FIRE_RL_rl_rereq = rg_state == 4'd10 ;
  assign WILL_FIRE_RL_rl_rereq =
	     CAN_FIRE_RL_rl_rereq && !WILL_FIRE_RL_rl_start_reset && !EN_req ;

  // rule RL_rl_ST_AMO_response
  assign CAN_FIRE_RL_rl_ST_AMO_response = rg_state == 4'd11 ;
  assign WILL_FIRE_RL_rl_ST_AMO_response = CAN_FIRE_RL_rl_ST_AMO_response ;

  // rule RL_rl_io_near_mem_read_req
  assign CAN_FIRE_RL_rl_io_near_mem_read_req =
	     f_near_mem_io_reqs$FULL_N &&
	     rg_state_EQ_12_85_AND_rg_op_0_EQ_0_1_OR_rg_op__ETC___d691 ;
  assign WILL_FIRE_RL_rl_io_near_mem_read_req =
	     CAN_FIRE_RL_rl_io_near_mem_read_req &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_near_mem_read_rsp
  assign CAN_FIRE_RL_rl_io_near_mem_read_rsp =
	     f_near_mem_io_rsps$EMPTY_N && rg_state == 4'd13 &&
	     soc_map$m_is_near_mem_IO_addr &&
	     f_near_mem_io_rsps$D_OUT[65] ;
  assign WILL_FIRE_RL_rl_io_near_mem_read_rsp =
	     CAN_FIRE_RL_rl_io_near_mem_read_rsp &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_maintain_io_read_rsp
  assign CAN_FIRE_RL_rl_maintain_io_read_rsp = rg_state == 4'd14 ;
  assign WILL_FIRE_RL_rl_maintain_io_read_rsp =
	     CAN_FIRE_RL_rl_maintain_io_read_rsp ;

  // rule RL_rl_io_near_mem_write_req
  assign CAN_FIRE_RL_rl_io_near_mem_write_req =
	     f_near_mem_io_reqs$FULL_N && rg_state == 4'd12 &&
	     rg_op == 2'd1 &&
	     soc_map$m_is_near_mem_IO_addr ;
  assign WILL_FIRE_RL_rl_io_near_mem_write_req =
	     CAN_FIRE_RL_rl_io_near_mem_write_req &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_near_mem_write_rsp
  assign CAN_FIRE_RL_rl_io_near_mem_write_rsp =
	     f_near_mem_io_rsps$EMPTY_N && !f_near_mem_io_rsps$D_OUT[65] ;
  assign WILL_FIRE_RL_rl_io_near_mem_write_rsp =
	     CAN_FIRE_RL_rl_io_near_mem_write_rsp ;

  // rule RL_rl_io_AMO_SC_req
  assign CAN_FIRE_RL_rl_io_AMO_SC_req =
	     rg_state == 4'd12 && rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 &&
	     !soc_map$m_is_near_mem_IO_addr ;
  assign WILL_FIRE_RL_rl_io_AMO_SC_req =
	     CAN_FIRE_RL_rl_io_AMO_SC_req && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_drive_exception_rsp
  assign CAN_FIRE_RL_rl_drive_exception_rsp = rg_state == 4'd4 ;
  assign WILL_FIRE_RL_rl_drive_exception_rsp = rg_state == 4'd4 ;

  // rule RL_rl_start_reset
  assign CAN_FIRE_RL_rl_start_reset =
	     f_reset_reqs$EMPTY_N && rg_state != 4'd1 ;
  assign WILL_FIRE_RL_rl_start_reset = CAN_FIRE_RL_rl_start_reset ;

  // rule RL_rl_cache_refill_req_loop
  assign CAN_FIRE_RL_rl_cache_refill_req_loop =
	     !master_xactor_crg_rd_addr_full$port2__read &&
	     rg_requesting_cline ;
  assign WILL_FIRE_RL_rl_cache_refill_req_loop =
	     CAN_FIRE_RL_rl_cache_refill_req_loop &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_probe_and_immed_rsp
  assign CAN_FIRE_RL_rl_probe_and_immed_rsp =
	     (soc_map$m_is_IO_addr || rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010 ||
	      IF_rg_op_0_EQ_1_8_OR_rg_op_0_EQ_2_2_AND_rg_amo_ETC___d75) &&
	     rg_state == 4'd3 ;
  assign WILL_FIRE_RL_rl_probe_and_immed_rsp =
	     CAN_FIRE_RL_rl_probe_and_immed_rsp &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_cache_refill_rsps_loop
  assign CAN_FIRE_RL_rl_cache_refill_rsps_loop =
	     master_xactor_crg_rd_data_full$port1__read && rg_state == 4'd9 ;
  assign WILL_FIRE_RL_rl_cache_refill_rsps_loop =
	     CAN_FIRE_RL_rl_cache_refill_rsps_loop &&
	     !WILL_FIRE_RL_rl_start_reset &&
	     !EN_req ;

  // rule RL_rl_io_read_req
  assign CAN_FIRE_RL_rl_io_read_req =
	     !master_xactor_crg_rd_addr_full$port2__read &&
	     rg_state_EQ_12_85_AND_rg_op_0_EQ_0_1_OR_rg_op__ETC___d590 ;
  assign WILL_FIRE_RL_rl_io_read_req =
	     CAN_FIRE_RL_rl_io_read_req &&
	     !WILL_FIRE_RL_rl_cache_refill_req_loop &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_read_rsp
  assign CAN_FIRE_RL_rl_io_read_rsp =
	     master_xactor_crg_rd_data_full$port1__read &&
	     rg_state == 4'd13 &&
	     !soc_map$m_is_near_mem_IO_addr ;
  assign WILL_FIRE_RL_rl_io_read_rsp =
	     CAN_FIRE_RL_rl_io_read_rsp && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_write_req
  assign CAN_FIRE_RL_rl_io_write_req =
	     !master_xactor_crg_wr_addr_full$port2__read &&
	     !master_xactor_crg_wr_data_full$port2__read &&
	     rg_state == 4'd12 &&
	     rg_op == 2'd1 &&
	     !soc_map$m_is_near_mem_IO_addr ;
  assign WILL_FIRE_RL_rl_io_write_req =
	     CAN_FIRE_RL_rl_io_write_req && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_AMO_op_req
  assign CAN_FIRE_RL_rl_io_AMO_op_req =
	     !master_xactor_crg_rd_addr_full$port2__read &&
	     rg_state == 4'd12 &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] != 5'b00010 &&
	     rg_amo_funct7[6:2] != 5'b00011 ;
  assign WILL_FIRE_RL_rl_io_AMO_op_req =
	     CAN_FIRE_RL_rl_io_AMO_op_req &&
	     !WILL_FIRE_RL_rl_cache_refill_req_loop &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_AMO_read_rsp
  assign CAN_FIRE_RL_rl_io_AMO_read_rsp =
	     master_xactor_crg_rd_data_full_port1__read__48_ETC___d838 &&
	     rg_state == 4'd15 ;
  assign WILL_FIRE_RL_rl_io_AMO_read_rsp =
	     CAN_FIRE_RL_rl_io_AMO_read_rsp && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_start_cache_refill
  assign CAN_FIRE_RL_rl_start_cache_refill =
	     !master_xactor_crg_rd_addr_full$port2__read &&
	     rg_state == 4'd8 &&
	     b__h20924 == 4'd0 ;
  assign WILL_FIRE_RL_rl_start_cache_refill =
	     CAN_FIRE_RL_rl_start_cache_refill &&
	     !WILL_FIRE_RL_rl_cache_refill_req_loop &&
	     !WILL_FIRE_RL_rl_start_reset &&
	     !EN_req ;

  // rule RL_rl_discard_write_rsp
  assign CAN_FIRE_RL_rl_discard_write_rsp =
	     b__h20924 != 4'd0 && master_xactor_crg_wr_resp_full$port1__read ;
  assign WILL_FIRE_RL_rl_discard_write_rsp =
	     CAN_FIRE_RL_rl_discard_write_rsp &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // inputs to muxes for submodule ports
  assign MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[2:1] == 2'b0 ;
  assign MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	     NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d430 ;
  assign MUX_dw_output_ld_val$wset_1__SEL_1 =
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_rg_rd_data[2:1] == 2'b0 ;
  assign MUX_dw_output_ld_val$wset_1__SEL_3 =
	     WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	     f_near_mem_io_rsps$D_OUT[64] ;
  assign MUX_dw_output_ld_val$wset_1__SEL_4 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	     rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d128 ;
  assign MUX_dw_output_ld_val$wset_1__SEL_5 =
	     WILL_FIRE_RL_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_rl_ST_AMO_response ;
  assign MUX_master_xactor_rg_rd_addr$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_io_AMO_op_req || WILL_FIRE_RL_rl_io_read_req ;
  assign MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 =
	     EN_req &&
	     req_f3_BITS_1_TO_0_005_EQ_0b0_006_OR_req_f3_BI_ETC___d1035 ;
  assign MUX_ram_word64_set$a_put_1__SEL_1 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_rg_rd_data[2:1] == 2'b0 ;
  assign MUX_ram_word64_set$b_put_1__SEL_2 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[1:0] != 2'd3 ;
  assign MUX_rg_error_during_refill$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_rg_rd_data[2:1] != 2'b0 ;
  assign MUX_rg_exc_code$write_1__SEL_1 =
	     EN_req &&
	     NOT_req_f3_BITS_1_TO_0_005_EQ_0b0_006_007_AND__ETC___d1026 ;
  assign MUX_rg_exc_code$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[2:1] != 2'b0 ;
  assign MUX_rg_exc_code$write_1__SEL_3 =
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_rg_rd_data[2:1] != 2'b0 ;
  assign MUX_rg_exc_code$write_1__SEL_5 =
	     WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	     !f_near_mem_io_rsps$D_OUT[64] ;
  assign MUX_rg_ld_val$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d290 ;
  assign MUX_rg_lrsc_valid$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	     rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d123 ;
  assign MUX_rg_state$write_1__SEL_8 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[1:0] == 2'd3 ;
  assign MUX_rg_state$write_1__SEL_9 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     (soc_map$m_is_IO_addr ||
	      rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d88 ||
	      NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d98) ;
  assign MUX_rg_state$write_1__SEL_16 =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 ;
  assign MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1 =
	     ctr_wr_rsps_pending_crg + 4'd1 ;
  assign MUX_dw_output_ld_val$wset_1__VAL_4 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
	       new_value__h5560 :
	       new_value__h15532 ;
  assign MUX_f_near_mem_io_reqs$enq_1__VAL_1 =
	     { 1'd1,
	       mem_req_wr_addr_awaddr__h29788,
	       72'hAAAAAAAAAAAAAAAAAA } ;
  assign MUX_f_near_mem_io_reqs$enq_1__VAL_2 =
	     { 1'd0,
	       mem_req_wr_addr_awaddr__h29788,
	       value__h28727,
	       mem_req_wr_data_wstrb__h29999 } ;
  assign MUX_master_xactor_rg_rd_addr$write_1__VAL_1 =
	     { 4'd0,
	       mem_req_wr_addr_awaddr__h29788,
	       8'd0,
	       value__h29311,
	       18'd65536 } ;
  assign MUX_master_xactor_rg_rd_addr$write_1__VAL_2 =
	     { 36'd0, cline_addr__h21839, 29'd851968 } ;
  assign MUX_master_xactor_rg_rd_addr$write_1__VAL_3 =
	     { 4'd0, cline_fabric_addr__h21840, 29'd851968 } ;
  assign MUX_master_xactor_rg_wr_addr$write_1__VAL_1 =
	     { 4'd0,
	       mem_req_wr_addr_awaddr__h29788,
	       8'd0,
	       value__h32337,
	       18'd65536 } ;
  assign MUX_master_xactor_rg_wr_addr$write_1__VAL_2 =
	     { 4'd0,
	       mem_req_wr_addr_awaddr__h20116,
	       8'd0,
	       value__h32337,
	       18'd65536 } ;
  assign MUX_master_xactor_rg_wr_data$write_1__VAL_1 =
	     { 4'd0,
	       mem_req_wr_data_wdata__h29998,
	       mem_req_wr_data_wstrb__h29999,
	       1'd1 } ;
  assign MUX_master_xactor_rg_wr_data$write_1__VAL_2 =
	     { 4'd0,
	       IF_rg_op_0_EQ_1_8_OR_rg_op_0_EQ_2_2_AND_rg_amo_ETC___d450,
	       mem_req_wr_data_wstrb__h20327,
	       1'd1 } ;
  assign MUX_master_xactor_rg_wr_data$write_1__VAL_3 =
	     { 4'd0, value__h28727, mem_req_wr_data_wstrb__h29999, 1'd1 } ;
  assign MUX_ram_state_and_ctag_cset$a_put_3__VAL_1 = { 3'd4, rg_pa[31:12] } ;
  assign MUX_ram_word64_set$a_put_3__VAL_2 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       IF_rg_f3_30_EQ_0b0_31_THEN_IF_rg_addr_7_BITS_2_ETC___d352 :
	       IF_rg_f3_30_EQ_0b0_31_THEN_IF_rg_addr_7_BITS_2_ETC___d426 ;
  assign MUX_ram_word64_set$b_put_2__VAL_2 = rg_word64_set_in_cache + 9'd1 ;
  assign MUX_ram_word64_set$b_put_2__VAL_4 = { rg_addr[11:5], 2'd0 } ;
  assign MUX_rg_cset_in_cache$write_1__VAL_1 = rg_cset_in_cache + 7'd1 ;
  assign MUX_rg_exc_code$write_1__VAL_1 = (req_op == 2'd0) ? 4'd4 : 4'd6 ;
  assign MUX_rg_ld_val$write_1__VAL_2 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       x__h13241 :
	       IF_rg_f3_30_EQ_0b10_36_THEN_SEXT_IF_rg_f3_30_E_ETC___d294 ;
  assign MUX_rg_req_byte_in_cline$write_1__VAL_1 =
	     rg_req_byte_in_cline + 64'd8 ;
  assign MUX_rg_state$write_1__VAL_2 =
	     NOT_req_f3_BITS_1_TO_0_005_EQ_0b0_006_007_AND__ETC___d1026 ?
	       4'd4 :
	       4'd3 ;
  assign MUX_rg_state$write_1__VAL_3 =
	     (master_xactor_rg_rd_data[2:1] == 2'b0) ? 4'd14 : 4'd4 ;
  assign MUX_rg_state$write_1__VAL_8 =
	     (master_xactor_rg_rd_data[2:1] != 2'b0 ||
	      rg_error_during_refill) ?
	       4'd4 :
	       4'd10 ;
  assign MUX_rg_state$write_1__VAL_9 =
	     soc_map$m_is_IO_addr ?
	       4'd12 :
	       IF_rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_ETC___d103 ;
  assign MUX_rg_state$write_1__VAL_13 =
	     f_near_mem_io_rsps$D_OUT[64] ? 4'd14 : 4'd4 ;

  // inlined wires
  assign dw_valid$whas =
	     (WILL_FIRE_RL_rl_io_AMO_read_rsp ||
	      WILL_FIRE_RL_rl_io_read_rsp) &&
	     master_xactor_rg_rd_data[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	     f_near_mem_io_rsps$D_OUT[64] ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	     rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d128 ||
	     WILL_FIRE_RL_rl_drive_exception_rsp ||
	     WILL_FIRE_RL_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_rl_ST_AMO_response ;
  assign master_xactor_crg_wr_addr_full$EN_port0__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign master_xactor_crg_wr_addr_full$port1__read =
	     !master_xactor_crg_wr_addr_full$EN_port0__write &&
	     master_xactor_crg_wr_addr_full ;
  assign master_xactor_crg_wr_addr_full$EN_port1__write =
	     master_xactor_crg_wr_addr_full$port1__read &&
	     mem_master_awready ;
  assign master_xactor_crg_wr_addr_full$port2__read =
	     !master_xactor_crg_wr_addr_full$EN_port1__write &&
	     master_xactor_crg_wr_addr_full$port1__read ;
  assign master_xactor_crg_wr_addr_full$EN_port2__write =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	     NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d430 ||
	     WILL_FIRE_RL_rl_io_write_req ;
  assign master_xactor_crg_wr_addr_full$port3__read =
	     master_xactor_crg_wr_addr_full$EN_port2__write ?
	       1'd1 :
	       master_xactor_crg_wr_addr_full$port2__read ;
  assign master_xactor_crg_wr_data_full$EN_port0__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign master_xactor_crg_wr_data_full$port1__read =
	     !master_xactor_crg_wr_data_full$EN_port0__write &&
	     master_xactor_crg_wr_data_full ;
  assign master_xactor_crg_wr_data_full$EN_port1__write =
	     master_xactor_crg_wr_data_full$port1__read && mem_master_wready ;
  assign master_xactor_crg_wr_data_full$port2__read =
	     !master_xactor_crg_wr_data_full$EN_port1__write &&
	     master_xactor_crg_wr_data_full$port1__read ;
  assign master_xactor_crg_wr_data_full$EN_port2__write =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	     NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d430 ||
	     WILL_FIRE_RL_rl_io_write_req ;
  assign master_xactor_crg_wr_data_full$port3__read =
	     master_xactor_crg_wr_data_full$EN_port2__write ?
	       1'd1 :
	       master_xactor_crg_wr_data_full$port2__read ;
  assign master_xactor_crg_wr_resp_full$EN_port0__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign master_xactor_crg_wr_resp_full$port1__read =
	     !master_xactor_crg_wr_resp_full$EN_port0__write &&
	     master_xactor_crg_wr_resp_full ;
  assign master_xactor_crg_wr_resp_full$port2__read =
	     !WILL_FIRE_RL_rl_discard_write_rsp &&
	     master_xactor_crg_wr_resp_full$port1__read ;
  assign master_xactor_crg_wr_resp_full$EN_port2__write =
	     mem_master_bvalid &&
	     !master_xactor_crg_wr_resp_full$port2__read ;
  assign master_xactor_crg_wr_resp_full$port3__read =
	     master_xactor_crg_wr_resp_full$EN_port2__write ||
	     master_xactor_crg_wr_resp_full$port2__read ;
  assign master_xactor_crg_rd_addr_full$EN_port0__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign master_xactor_crg_rd_addr_full$port1__read =
	     !master_xactor_crg_rd_addr_full$EN_port0__write &&
	     master_xactor_crg_rd_addr_full ;
  assign master_xactor_crg_rd_addr_full$EN_port1__write =
	     master_xactor_crg_rd_addr_full$port1__read &&
	     mem_master_arready ;
  assign master_xactor_crg_rd_addr_full$port2__read =
	     !master_xactor_crg_rd_addr_full$EN_port1__write &&
	     master_xactor_crg_rd_addr_full$port1__read ;
  assign master_xactor_crg_rd_addr_full$EN_port2__write =
	     WILL_FIRE_RL_rl_io_AMO_op_req || WILL_FIRE_RL_rl_io_read_req ||
	     WILL_FIRE_RL_rl_cache_refill_req_loop ||
	     WILL_FIRE_RL_rl_start_cache_refill ;
  assign master_xactor_crg_rd_addr_full$port3__read =
	     master_xactor_crg_rd_addr_full$EN_port2__write ||
	     master_xactor_crg_rd_addr_full$port2__read ;
  assign master_xactor_crg_rd_data_full$EN_port0__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign master_xactor_crg_rd_data_full$port1__read =
	     !master_xactor_crg_rd_data_full$EN_port0__write &&
	     master_xactor_crg_rd_data_full ;
  assign master_xactor_crg_rd_data_full$EN_port1__write =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp || WILL_FIRE_RL_rl_io_read_rsp ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop ;
  assign master_xactor_crg_rd_data_full$port2__read =
	     !master_xactor_crg_rd_data_full$EN_port1__write &&
	     master_xactor_crg_rd_data_full$port1__read ;
  assign master_xactor_crg_rd_data_full$EN_port2__write =
	     mem_master_rvalid &&
	     !master_xactor_crg_rd_data_full$port2__read ;
  assign master_xactor_crg_rd_data_full$port3__read =
	     master_xactor_crg_rd_data_full$EN_port2__write ||
	     master_xactor_crg_rd_data_full$port2__read ;
  assign ctr_wr_rsps_pending_crg$EN_port0__write =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	     NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d430 ||
	     WILL_FIRE_RL_rl_io_write_req ;
  always@(MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1 or
	  MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2 or
	  WILL_FIRE_RL_rl_io_write_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  ctr_wr_rsps_pending_crg$port0__write_1 =
	      MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1;
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2:
	  ctr_wr_rsps_pending_crg$port0__write_1 =
	      MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1;
      WILL_FIRE_RL_rl_io_write_req:
	  ctr_wr_rsps_pending_crg$port0__write_1 =
	      MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1;
      default: ctr_wr_rsps_pending_crg$port0__write_1 =
		   4'b1010 /* unspecified value */ ;
    endcase
  end
  assign ctr_wr_rsps_pending_crg$port1__write_1 = b__h20924 - 4'd1 ;
  assign ctr_wr_rsps_pending_crg$port2__read =
	     WILL_FIRE_RL_rl_discard_write_rsp ?
	       ctr_wr_rsps_pending_crg$port1__write_1 :
	       b__h20924 ;
  assign ctr_wr_rsps_pending_crg$EN_port2__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign ctr_wr_rsps_pending_crg$port3__read =
	     ctr_wr_rsps_pending_crg$EN_port2__write ?
	       4'd0 :
	       ctr_wr_rsps_pending_crg$port2__read ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN = set_verbosity_verbosity ;
  assign cfg_verbosity$EN = EN_set_verbosity ;

  // register ctr_wr_rsps_pending_crg
  assign ctr_wr_rsps_pending_crg$D_IN = ctr_wr_rsps_pending_crg$port3__read ;
  assign ctr_wr_rsps_pending_crg$EN = 1'b1 ;

  // register master_xactor_crg_rd_addr_full
  assign master_xactor_crg_rd_addr_full$D_IN =
	     master_xactor_crg_rd_addr_full$port3__read ;
  assign master_xactor_crg_rd_addr_full$EN = 1'b1 ;

  // register master_xactor_crg_rd_data_full
  assign master_xactor_crg_rd_data_full$D_IN =
	     master_xactor_crg_rd_data_full$port3__read ;
  assign master_xactor_crg_rd_data_full$EN = 1'b1 ;

  // register master_xactor_crg_wr_addr_full
  assign master_xactor_crg_wr_addr_full$D_IN =
	     master_xactor_crg_wr_addr_full$port3__read ;
  assign master_xactor_crg_wr_addr_full$EN = 1'b1 ;

  // register master_xactor_crg_wr_data_full
  assign master_xactor_crg_wr_data_full$D_IN =
	     master_xactor_crg_wr_data_full$port3__read ;
  assign master_xactor_crg_wr_data_full$EN = 1'b1 ;

  // register master_xactor_crg_wr_resp_full
  assign master_xactor_crg_wr_resp_full$D_IN =
	     master_xactor_crg_wr_resp_full$port3__read ;
  assign master_xactor_crg_wr_resp_full$EN = 1'b1 ;

  // register master_xactor_rg_rd_addr
  always@(MUX_master_xactor_rg_rd_addr$write_1__SEL_1 or
	  MUX_master_xactor_rg_rd_addr$write_1__VAL_1 or
	  WILL_FIRE_RL_rl_start_cache_refill or
	  MUX_master_xactor_rg_rd_addr$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_cache_refill_req_loop or
	  MUX_master_xactor_rg_rd_addr$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_master_xactor_rg_rd_addr$write_1__SEL_1:
	  master_xactor_rg_rd_addr$D_IN =
	      MUX_master_xactor_rg_rd_addr$write_1__VAL_1;
      WILL_FIRE_RL_rl_start_cache_refill:
	  master_xactor_rg_rd_addr$D_IN =
	      MUX_master_xactor_rg_rd_addr$write_1__VAL_2;
      WILL_FIRE_RL_rl_cache_refill_req_loop:
	  master_xactor_rg_rd_addr$D_IN =
	      MUX_master_xactor_rg_rd_addr$write_1__VAL_3;
      default: master_xactor_rg_rd_addr$D_IN =
		   97'h0AAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign master_xactor_rg_rd_addr$EN =
	     WILL_FIRE_RL_rl_io_AMO_op_req || WILL_FIRE_RL_rl_io_read_req ||
	     WILL_FIRE_RL_rl_start_cache_refill ||
	     WILL_FIRE_RL_rl_cache_refill_req_loop ;

  // register master_xactor_rg_rd_data
  assign master_xactor_rg_rd_data$D_IN =
	     { mem_master_rid,
	       mem_master_rdata,
	       mem_master_rresp,
	       mem_master_rlast } ;
  assign master_xactor_rg_rd_data$EN = 1'd1 ;

  // register master_xactor_rg_wr_addr
  always@(MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  MUX_master_xactor_rg_wr_addr$write_1__VAL_1 or
	  MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2 or
	  MUX_master_xactor_rg_wr_addr$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_io_write_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  master_xactor_rg_wr_addr$D_IN =
	      MUX_master_xactor_rg_wr_addr$write_1__VAL_1;
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2:
	  master_xactor_rg_wr_addr$D_IN =
	      MUX_master_xactor_rg_wr_addr$write_1__VAL_2;
      WILL_FIRE_RL_rl_io_write_req:
	  master_xactor_rg_wr_addr$D_IN =
	      MUX_master_xactor_rg_wr_addr$write_1__VAL_1;
      default: master_xactor_rg_wr_addr$D_IN =
		   97'h0AAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign master_xactor_rg_wr_addr$EN =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	     NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d430 ||
	     WILL_FIRE_RL_rl_io_write_req ;

  // register master_xactor_rg_wr_data
  always@(MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  MUX_master_xactor_rg_wr_data$write_1__VAL_1 or
	  MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2 or
	  MUX_master_xactor_rg_wr_data$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_io_write_req or
	  MUX_master_xactor_rg_wr_data$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  master_xactor_rg_wr_data$D_IN =
	      MUX_master_xactor_rg_wr_data$write_1__VAL_1;
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2:
	  master_xactor_rg_wr_data$D_IN =
	      MUX_master_xactor_rg_wr_data$write_1__VAL_2;
      WILL_FIRE_RL_rl_io_write_req:
	  master_xactor_rg_wr_data$D_IN =
	      MUX_master_xactor_rg_wr_data$write_1__VAL_3;
      default: master_xactor_rg_wr_data$D_IN =
		   77'h0AAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign master_xactor_rg_wr_data$EN =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	     NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d430 ||
	     WILL_FIRE_RL_rl_io_write_req ;

  // register master_xactor_rg_wr_resp
  assign master_xactor_rg_wr_resp$D_IN =
	     { mem_master_bid, mem_master_bresp } ;
  assign master_xactor_rg_wr_resp$EN =
	     mem_master_bvalid &&
	     !master_xactor_crg_wr_resp_full$port2__read ;

  // register rg_addr
  assign rg_addr$D_IN = req_addr ;
  assign rg_addr$EN = EN_req ;

  // register rg_amo_funct7
  assign rg_amo_funct7$D_IN = req_amo_funct7 ;
  assign rg_amo_funct7$EN = EN_req ;

  // register rg_cset_in_cache
  assign rg_cset_in_cache$D_IN =
	     WILL_FIRE_RL_rl_reset ?
	       MUX_rg_cset_in_cache$write_1__VAL_1 :
	       7'd0 ;
  assign rg_cset_in_cache$EN =
	     WILL_FIRE_RL_rl_reset || WILL_FIRE_RL_rl_start_reset ;

  // register rg_error_during_refill
  assign rg_error_during_refill$D_IN =
	     MUX_rg_error_during_refill$write_1__SEL_1 ;
  assign rg_error_during_refill$EN =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_rg_rd_data[2:1] != 2'b0 ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // register rg_exc_code
  always@(MUX_rg_exc_code$write_1__SEL_1 or
	  MUX_rg_exc_code$write_1__VAL_1 or
	  MUX_rg_exc_code$write_1__SEL_2 or
	  MUX_rg_exc_code$write_1__SEL_3 or
	  MUX_rg_error_during_refill$write_1__SEL_1 or
	  access_exc_code__h3265 or MUX_rg_exc_code$write_1__SEL_5)
  case (1'b1)
    MUX_rg_exc_code$write_1__SEL_1:
	rg_exc_code$D_IN = MUX_rg_exc_code$write_1__VAL_1;
    MUX_rg_exc_code$write_1__SEL_2: rg_exc_code$D_IN = 4'd7;
    MUX_rg_exc_code$write_1__SEL_3: rg_exc_code$D_IN = 4'd5;
    MUX_rg_error_during_refill$write_1__SEL_1:
	rg_exc_code$D_IN = access_exc_code__h3265;
    MUX_rg_exc_code$write_1__SEL_5: rg_exc_code$D_IN = 4'd5;
    default: rg_exc_code$D_IN = 4'b1010 /* unspecified value */ ;
  endcase
  assign rg_exc_code$EN =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_rg_rd_data[2:1] != 2'b0 ||
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_rg_rd_data[2:1] != 2'b0 ||
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[2:1] != 2'b0 ||
	     WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	     !f_near_mem_io_rsps$D_OUT[64] ||
	     EN_req &&
	     NOT_req_f3_BITS_1_TO_0_005_EQ_0b0_006_007_AND__ETC___d1026 ;

  // register rg_f3
  assign rg_f3$D_IN = req_f3 ;
  assign rg_f3$EN = EN_req ;

  // register rg_ld_val
  always@(MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  new_ld_val__h29726 or
	  MUX_rg_ld_val$write_1__SEL_2 or
	  MUX_rg_ld_val$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_io_read_rsp or
	  ld_val__h24550 or
	  WILL_FIRE_RL_rl_io_near_mem_read_rsp or
	  ld_val__h26184 or WILL_FIRE_RL_rl_io_AMO_SC_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  rg_ld_val$D_IN = new_ld_val__h29726;
      MUX_rg_ld_val$write_1__SEL_2:
	  rg_ld_val$D_IN = MUX_rg_ld_val$write_1__VAL_2;
      WILL_FIRE_RL_rl_io_read_rsp: rg_ld_val$D_IN = ld_val__h24550;
      WILL_FIRE_RL_rl_io_near_mem_read_rsp: rg_ld_val$D_IN = ld_val__h26184;
      WILL_FIRE_RL_rl_io_AMO_SC_req: rg_ld_val$D_IN = 64'd1;
      default: rg_ld_val$D_IN = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rg_ld_val$EN =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d290 ||
	     WILL_FIRE_RL_rl_io_read_rsp ||
	     WILL_FIRE_RL_rl_io_near_mem_read_rsp ||
	     WILL_FIRE_RL_rl_io_AMO_SC_req ;

  // register rg_lower_word32
  assign rg_lower_word32$D_IN = 32'h0 ;
  assign rg_lower_word32$EN = 1'b0 ;

  // register rg_lower_word32_full
  assign rg_lower_word32_full$D_IN = 1'd0 ;
  assign rg_lower_word32_full$EN =
	     WILL_FIRE_RL_rl_start_cache_refill ||
	     WILL_FIRE_RL_rl_start_reset ;

  // register rg_lrsc_pa
  assign rg_lrsc_pa$D_IN = rg_addr ;
  assign rg_lrsc_pa$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d71 ;

  // register rg_lrsc_valid
  assign rg_lrsc_valid$D_IN =
	     MUX_rg_lrsc_valid$write_1__SEL_2 &&
	     rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d125 ;
  assign rg_lrsc_valid$EN =
	     (WILL_FIRE_RL_rl_io_near_mem_read_req ||
	      WILL_FIRE_RL_rl_io_read_req) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	     rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d123 ||
	     WILL_FIRE_RL_rl_start_reset ;

  // register rg_op
  assign rg_op$D_IN = req_op ;
  assign rg_op$EN = EN_req ;

  // register rg_pa
  assign rg_pa$D_IN = EN_req ? req_addr : rg_addr ;
  assign rg_pa$EN = EN_req || WILL_FIRE_RL_rl_probe_and_immed_rsp ;

  // register rg_pte_pa
  assign rg_pte_pa$D_IN = 32'h0 ;
  assign rg_pte_pa$EN = 1'b0 ;

  // register rg_req_byte_in_cline
  assign rg_req_byte_in_cline$D_IN =
	     WILL_FIRE_RL_rl_cache_refill_req_loop ?
	       MUX_rg_req_byte_in_cline$write_1__VAL_1 :
	       64'd8 ;
  assign rg_req_byte_in_cline$EN =
	     WILL_FIRE_RL_rl_cache_refill_req_loop ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // register rg_requesting_cline
  always@(WILL_FIRE_RL_rl_cache_refill_req_loop or
	  rg_req_byte_in_cline or
	  WILL_FIRE_RL_rl_start_reset or WILL_FIRE_RL_rl_start_cache_refill)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_cache_refill_req_loop:
	  rg_requesting_cline$D_IN = rg_req_byte_in_cline != 64'd24;
      WILL_FIRE_RL_rl_start_reset: rg_requesting_cline$D_IN = 1'd0;
      WILL_FIRE_RL_rl_start_cache_refill: rg_requesting_cline$D_IN = 1'd1;
      default: rg_requesting_cline$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign rg_requesting_cline$EN =
	     WILL_FIRE_RL_rl_cache_refill_req_loop ||
	     WILL_FIRE_RL_rl_start_reset ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // register rg_st_amo_val
  assign rg_st_amo_val$D_IN = EN_req ? req_st_value : new_st_val__h17394 ;
  assign rg_st_amo_val$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d518 ||
	     EN_req ;

  // register rg_state
  always@(WILL_FIRE_RL_rl_start_cache_refill or
	  EN_req or
	  MUX_rg_state$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_io_AMO_read_rsp or
	  MUX_rg_state$write_1__VAL_3 or
	  WILL_FIRE_RL_rl_io_AMO_op_req or
	  WILL_FIRE_RL_rl_io_write_req or
	  WILL_FIRE_RL_rl_io_read_rsp or
	  WILL_FIRE_RL_rl_io_read_req or
	  MUX_rg_state$write_1__SEL_8 or
	  MUX_rg_state$write_1__VAL_8 or
	  MUX_rg_state$write_1__SEL_9 or
	  MUX_rg_state$write_1__VAL_9 or
	  WILL_FIRE_RL_rl_start_reset or
	  WILL_FIRE_RL_rl_io_AMO_SC_req or
	  WILL_FIRE_RL_rl_io_near_mem_write_req or
	  WILL_FIRE_RL_rl_io_near_mem_read_rsp or
	  MUX_rg_state$write_1__VAL_13 or
	  WILL_FIRE_RL_rl_io_near_mem_read_req or
	  WILL_FIRE_RL_rl_rereq or MUX_rg_state$write_1__SEL_16)
  case (1'b1)
    WILL_FIRE_RL_rl_start_cache_refill: rg_state$D_IN = 4'd9;
    EN_req: rg_state$D_IN = MUX_rg_state$write_1__VAL_2;
    WILL_FIRE_RL_rl_io_AMO_read_rsp:
	rg_state$D_IN = MUX_rg_state$write_1__VAL_3;
    WILL_FIRE_RL_rl_io_AMO_op_req: rg_state$D_IN = 4'd15;
    WILL_FIRE_RL_rl_io_write_req: rg_state$D_IN = 4'd11;
    WILL_FIRE_RL_rl_io_read_rsp: rg_state$D_IN = MUX_rg_state$write_1__VAL_3;
    WILL_FIRE_RL_rl_io_read_req: rg_state$D_IN = 4'd13;
    MUX_rg_state$write_1__SEL_8: rg_state$D_IN = MUX_rg_state$write_1__VAL_8;
    MUX_rg_state$write_1__SEL_9: rg_state$D_IN = MUX_rg_state$write_1__VAL_9;
    WILL_FIRE_RL_rl_start_reset: rg_state$D_IN = 4'd1;
    WILL_FIRE_RL_rl_io_AMO_SC_req || WILL_FIRE_RL_rl_io_near_mem_write_req:
	rg_state$D_IN = 4'd11;
    WILL_FIRE_RL_rl_io_near_mem_read_rsp:
	rg_state$D_IN = MUX_rg_state$write_1__VAL_13;
    WILL_FIRE_RL_rl_io_near_mem_read_req: rg_state$D_IN = 4'd13;
    WILL_FIRE_RL_rl_rereq: rg_state$D_IN = 4'd3;
    MUX_rg_state$write_1__SEL_16: rg_state$D_IN = 4'd2;
    default: rg_state$D_IN = 4'b1010 /* unspecified value */ ;
  endcase
  assign rg_state$EN =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[1:0] == 2'd3 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     (soc_map$m_is_IO_addr ||
	      rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d88 ||
	      NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d98) ||
	     WILL_FIRE_RL_rl_io_AMO_read_rsp ||
	     WILL_FIRE_RL_rl_io_read_rsp ||
	     WILL_FIRE_RL_rl_io_near_mem_read_rsp ||
	     EN_req ||
	     WILL_FIRE_RL_rl_start_reset ||
	     WILL_FIRE_RL_rl_rereq ||
	     WILL_FIRE_RL_rl_start_cache_refill ||
	     WILL_FIRE_RL_rl_io_AMO_SC_req ||
	     WILL_FIRE_RL_rl_io_near_mem_write_req ||
	     WILL_FIRE_RL_rl_io_write_req ||
	     WILL_FIRE_RL_rl_io_near_mem_read_req ||
	     WILL_FIRE_RL_rl_io_read_req ||
	     WILL_FIRE_RL_rl_io_AMO_op_req ;

  // register rg_word64_set_in_cache
  assign rg_word64_set_in_cache$D_IN =
	     MUX_ram_word64_set$b_put_1__SEL_2 ?
	       MUX_ram_word64_set$b_put_2__VAL_2 :
	       MUX_ram_word64_set$b_put_2__VAL_4 ;
  assign rg_word64_set_in_cache$EN =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[1:0] != 2'd3 ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // submodule f_near_mem_io_reqs
  assign f_near_mem_io_reqs$D_IN =
	     WILL_FIRE_RL_rl_io_near_mem_read_req ?
	       MUX_f_near_mem_io_reqs$enq_1__VAL_1 :
	       MUX_f_near_mem_io_reqs$enq_1__VAL_2 ;
  assign f_near_mem_io_reqs$ENQ =
	     WILL_FIRE_RL_rl_io_near_mem_read_req ||
	     WILL_FIRE_RL_rl_io_near_mem_write_req ;
  assign f_near_mem_io_reqs$DEQ = EN_near_mem_io_client_request_get ;
  assign f_near_mem_io_reqs$CLR = 1'b0 ;

  // submodule f_near_mem_io_rsps
  assign f_near_mem_io_rsps$D_IN = near_mem_io_client_response_put ;
  assign f_near_mem_io_rsps$ENQ = EN_near_mem_io_client_response_put ;
  assign f_near_mem_io_rsps$DEQ =
	     WILL_FIRE_RL_rl_io_near_mem_write_rsp ||
	     WILL_FIRE_RL_rl_io_near_mem_read_rsp ;
  assign f_near_mem_io_rsps$CLR = 1'b0 ;

  // submodule f_reset_reqs
  assign f_reset_reqs$D_IN = !EN_server_reset_request_put ;
  assign f_reset_reqs$ENQ =
	     EN_server_reset_request_put || EN_server_flush_request_put ;
  assign f_reset_reqs$DEQ = MUX_rg_state$write_1__SEL_16 ;
  assign f_reset_reqs$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$D_IN = f_reset_reqs$D_OUT ;
  assign f_reset_rsps$ENQ = MUX_rg_state$write_1__SEL_16 ;
  assign f_reset_rsps$DEQ =
	     EN_server_flush_response_get || EN_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule ram_state_and_ctag_cset
  assign ram_state_and_ctag_cset$ADDRA =
	     WILL_FIRE_RL_rl_start_cache_refill ?
	       rg_addr[11:5] :
	       rg_cset_in_cache ;
  assign ram_state_and_ctag_cset$ADDRB =
	     MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       req_addr[11:5] :
	       rg_addr[11:5] ;
  assign ram_state_and_ctag_cset$DIA =
	     WILL_FIRE_RL_rl_start_cache_refill ?
	       MUX_ram_state_and_ctag_cset$a_put_3__VAL_1 :
	       23'd2796202 ;
  assign ram_state_and_ctag_cset$DIB =
	     MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       23'b01010101010101010101010 /* unspecified value */  :
	       23'b01010101010101010101010 /* unspecified value */  ;
  assign ram_state_and_ctag_cset$WEA = 1'd1 ;
  assign ram_state_and_ctag_cset$WEB = 1'd0 ;
  assign ram_state_and_ctag_cset$ENA =
	     WILL_FIRE_RL_rl_start_cache_refill || WILL_FIRE_RL_rl_reset ;
  assign ram_state_and_ctag_cset$ENB =
	     EN_req &&
	     req_f3_BITS_1_TO_0_005_EQ_0b0_006_OR_req_f3_BI_ETC___d1035 ||
	     WILL_FIRE_RL_rl_rereq ;

  // submodule ram_word64_set
  assign ram_word64_set$ADDRA =
	     MUX_ram_word64_set$a_put_1__SEL_1 ?
	       rg_word64_set_in_cache :
	       rg_addr[11:3] ;
  always@(MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  req_addr or
	  MUX_ram_word64_set$b_put_1__SEL_2 or
	  MUX_ram_word64_set$b_put_2__VAL_2 or
	  WILL_FIRE_RL_rl_rereq or
	  rg_addr or
	  WILL_FIRE_RL_rl_start_cache_refill or
	  MUX_ram_word64_set$b_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  ram_word64_set$ADDRB = req_addr[11:3];
      MUX_ram_word64_set$b_put_1__SEL_2:
	  ram_word64_set$ADDRB = MUX_ram_word64_set$b_put_2__VAL_2;
      WILL_FIRE_RL_rl_rereq: ram_word64_set$ADDRB = rg_addr[11:3];
      WILL_FIRE_RL_rl_start_cache_refill:
	  ram_word64_set$ADDRB = MUX_ram_word64_set$b_put_2__VAL_4;
      default: ram_word64_set$ADDRB = 9'b010101010 /* unspecified value */ ;
    endcase
  end
  assign ram_word64_set$DIA =
	     MUX_ram_word64_set$a_put_1__SEL_1 ?
	       master_xactor_rg_rd_data[66:3] :
	       MUX_ram_word64_set$a_put_3__VAL_2 ;
  always@(MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  MUX_ram_word64_set$b_put_1__SEL_2 or
	  WILL_FIRE_RL_rl_rereq or WILL_FIRE_RL_rl_start_cache_refill)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      MUX_ram_word64_set$b_put_1__SEL_2:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_rl_rereq:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_rl_start_cache_refill:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      default: ram_word64_set$DIB =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ram_word64_set$WEA = 1'd1 ;
  assign ram_word64_set$WEB = 1'd0 ;
  assign ram_word64_set$ENA =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_rg_rd_data[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d301 ;
  assign ram_word64_set$ENB =
	     EN_req &&
	     req_f3_BITS_1_TO_0_005_EQ_0b0_006_OR_req_f3_BI_ETC___d1035 ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[1:0] != 2'd3 ||
	     WILL_FIRE_RL_rl_rereq ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // submodule soc_map
  assign soc_map$m_is_IO_addr_addr = mem_req_wr_addr_awaddr__h20116 ;
  assign soc_map$m_is_mem_addr_addr = 64'h0 ;
  assign soc_map$m_is_near_mem_IO_addr_addr = mem_req_wr_addr_awaddr__h29788 ;

  // remaining internal signals
  assign IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_1_EL_ETC___d263 =
	     (rg_addr[2:0] == 3'h0) ? 64'd1 : 64'd0 ;
  assign IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_IF_r_ETC___d915 =
	     (rg_addr[2:0] == 3'h0) ? ld_val__h24550 : 64'd0 ;
  assign IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d249 =
	     (rg_addr[2:0] == 3'h0) ? word64__h5341 : 64'd0 ;
  assign IF_rg_f3_30_EQ_0b10_36_THEN_SEXT_rg_st_amo_val_ETC___d358 =
	     (rg_f3 == 3'b010) ?
	       { {32{rg_st_amo_val_BITS_31_TO_0__q45[31]}},
		 rg_st_amo_val_BITS_31_TO_0__q45 } :
	       rg_st_amo_val ;
  assign IF_rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_ETC___d103 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
	       4'd8 :
	       IF_rg_op_0_EQ_1_8_OR_rg_op_0_EQ_2_2_AND_rg_amo_ETC___d102 ;
  assign IF_rg_op_0_EQ_1_8_OR_rg_op_0_EQ_2_2_AND_rg_amo_ETC___d102 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       4'd11 :
	       ((!ram_state_and_ctag_cset$DOB[22] ||
		 !ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d71) ?
		  4'd8 :
		  4'd11) ;
  assign IF_rg_op_0_EQ_1_8_OR_rg_op_0_EQ_2_2_AND_rg_amo_ETC___d450 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       mem_req_wr_data_wdata__h16883 :
	       mem_req_wr_data_wdata__h20326 ;
  assign IF_rg_op_0_EQ_1_8_OR_rg_op_0_EQ_2_2_AND_rg_amo_ETC___d75 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       rg_op_0_EQ_2_2_AND_rg_amo_funct7_3_BITS_6_TO_2_ETC___d64 :
	       !ram_state_and_ctag_cset$DOB[22] ||
	       !ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d71 ||
	       !master_xactor_crg_wr_addr_full$port2__read &&
	       !master_xactor_crg_wr_data_full$port2__read ;
  assign NOT_cfg_verbosity_read__0_ULE_1_1___d12 = cfg_verbosity > 4'd1 ;
  assign NOT_cfg_verbosity_read__0_ULE_2_38___d539 = cfg_verbosity > 4'd2 ;
  assign NOT_ram_state_and_ctag_cset_b_read__5_BIT_22_6_ETC___d111 =
	     (!ram_state_and_ctag_cset$DOB[22] ||
	      !ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d71) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     rg_addr_7_EQ_rg_lrsc_pa_4___d109 ;
  assign NOT_req_f3_BITS_1_TO_0_005_EQ_0b0_006_007_AND__ETC___d1026 =
	     req_f3[1:0] != 2'b0 && (req_f3[1:0] != 2'b01 || req_addr[0]) &&
	     (req_f3[1:0] != 2'b10 || req_addr[1:0] != 2'b0) &&
	     (req_f3[1:0] != 2'b11 || req_addr[2:0] != 3'b0) ;
  assign NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d430 =
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     (rg_op_0_EQ_1_8_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d428 ||
	      NOT_rg_op_0_EQ_1_8_17_AND_NOT_rg_op_0_EQ_2_2_0_ETC___d298) ;
  assign NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d478 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_0_EQ_2_2_0_OR_NOT_rg_amo_funct7_3_BI_ETC___d476 ;
  assign NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d486 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_0_EQ_2_2_0_OR_NOT_rg_amo_funct7_3_BI_ETC___d484 ;
  assign NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d491 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_0_EQ_2_2_0_OR_NOT_rg_amo_funct7_3_BI_ETC___d489 ;
  assign NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d98 =
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid && rg_lrsc_pa_4_EQ_rg_addr_7___d55) ;
  assign NOT_rg_op_0_EQ_1_8_17_AND_NOT_rg_op_0_EQ_2_2_0_ETC___d120 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d71 &&
	     rg_addr_7_EQ_rg_lrsc_pa_4___d109 ;
  assign NOT_rg_op_0_EQ_1_8_17_AND_NOT_rg_op_0_EQ_2_2_0_ETC___d298 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d71 ;
  assign NOT_rg_op_0_EQ_1_8_17_AND_NOT_rg_op_0_EQ_2_2_0_ETC___d501 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     (!ram_state_and_ctag_cset$DOB[22] ||
	      !ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d71) &&
	     NOT_cfg_verbosity_read__0_ULE_1_1___d12 ;
  assign NOT_rg_op_0_EQ_1_8_17_AND_NOT_rg_op_0_EQ_2_2_0_ETC___d504 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d71 &&
	     NOT_cfg_verbosity_read__0_ULE_1_1___d12 ;
  assign NOT_rg_op_0_EQ_1_8_17_AND_NOT_rg_op_0_EQ_2_2_0_ETC___d508 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d71 &&
	     ctr_wr_rsps_pending_crg == 4'd15 ;
  assign NOT_rg_op_0_EQ_1_8_17_AND_NOT_rg_op_0_EQ_2_2_0_ETC___d514 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d71 &&
	     rg_addr_7_EQ_rg_lrsc_pa_4___d109 &&
	     NOT_cfg_verbosity_read__0_ULE_1_1___d12 ;
  assign NOT_rg_op_0_EQ_2_2_0_OR_NOT_rg_amo_funct7_3_BI_ETC___d296 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid && rg_lrsc_pa_4_EQ_rg_addr_7___d55) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d71 ;
  assign NOT_rg_op_0_EQ_2_2_0_OR_NOT_rg_amo_funct7_3_BI_ETC___d476 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid && rg_lrsc_pa_4_EQ_rg_addr_7___d55) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d71 &&
	     NOT_cfg_verbosity_read__0_ULE_1_1___d12 ;
  assign NOT_rg_op_0_EQ_2_2_0_OR_NOT_rg_amo_funct7_3_BI_ETC___d480 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid && rg_lrsc_pa_4_EQ_rg_addr_7___d55) &&
	     (!ram_state_and_ctag_cset$DOB[22] ||
	      !ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d71) &&
	     NOT_cfg_verbosity_read__0_ULE_1_1___d12 ;
  assign NOT_rg_op_0_EQ_2_2_0_OR_NOT_rg_amo_funct7_3_BI_ETC___d484 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid && rg_lrsc_pa_4_EQ_rg_addr_7___d55) &&
	     NOT_cfg_verbosity_read__0_ULE_1_1___d12 ;
  assign NOT_rg_op_0_EQ_2_2_0_OR_NOT_rg_amo_funct7_3_BI_ETC___d489 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid && rg_lrsc_pa_4_EQ_rg_addr_7___d55) &&
	     ctr_wr_rsps_pending_crg == 4'd15 ;
  assign NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d290 =
	     !soc_map$m_is_IO_addr && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     (rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 ||
	      rg_op != 2'd1 && ram_state_and_ctag_cset$DOB[22] &&
	      ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d71) ;
  assign NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d301 =
	     !soc_map$m_is_IO_addr && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     rg_op_0_EQ_1_8_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d299 ;
  assign NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d506 =
	     !soc_map$m_is_IO_addr && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_0_EQ_1_8_17_AND_NOT_rg_op_0_EQ_2_2_0_ETC___d504 ;
  assign NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d510 =
	     !soc_map$m_is_IO_addr && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_0_EQ_1_8_17_AND_NOT_rg_op_0_EQ_2_2_0_ETC___d508 ;
  assign NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d518 =
	     !soc_map$m_is_IO_addr && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_0_EQ_1_8_17_AND_NOT_rg_op_0_EQ_2_2_0_ETC___d298 ;
  assign _theResult___fst__h16785 = rg_st_amo_val << shift_bits__h20122 ;
  assign _theResult___fst__h20258 = new_st_val__h17394 << shift_bits__h20122 ;
  assign _theResult___fst__h28445 = rg_st_amo_val << shift_bits__h29794 ;
  assign _theResult___fst__h29930 = st_val__h29738 << shift_bits__h29794 ;
  assign access_exc_code__h3265 =
	     dmem_not_imem ?
	       ((rg_op == 2'd0 ||
		 rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
		  4'd5 :
		  4'd7) :
	       4'd1 ;
  assign b__h20924 =
	     ctr_wr_rsps_pending_crg$EN_port0__write ?
	       ctr_wr_rsps_pending_crg$port0__write_1 :
	       ctr_wr_rsps_pending_crg ;
  assign cline_addr__h21839 = { rg_pa[31:5], 5'd0 } ;
  assign cline_fabric_addr__h21840 =
	     { 32'd0, cline_addr__h21839 } | rg_req_byte_in_cline ;
  assign f_near_mem_io_rspsD_OUT_BITS_15_TO_0__q6 =
	     f_near_mem_io_rsps$D_OUT[15:0] ;
  assign f_near_mem_io_rspsD_OUT_BITS_15_TO_8__q8 =
	     f_near_mem_io_rsps$D_OUT[15:8] ;
  assign f_near_mem_io_rspsD_OUT_BITS_23_TO_16__q11 =
	     f_near_mem_io_rsps$D_OUT[23:16] ;
  assign f_near_mem_io_rspsD_OUT_BITS_31_TO_0__q7 =
	     f_near_mem_io_rsps$D_OUT[31:0] ;
  assign f_near_mem_io_rspsD_OUT_BITS_31_TO_16__q12 =
	     f_near_mem_io_rsps$D_OUT[31:16] ;
  assign f_near_mem_io_rspsD_OUT_BITS_31_TO_24__q14 =
	     f_near_mem_io_rsps$D_OUT[31:24] ;
  assign f_near_mem_io_rspsD_OUT_BITS_39_TO_32__q18 =
	     f_near_mem_io_rsps$D_OUT[39:32] ;
  assign f_near_mem_io_rspsD_OUT_BITS_47_TO_32__q19 =
	     f_near_mem_io_rsps$D_OUT[47:32] ;
  assign f_near_mem_io_rspsD_OUT_BITS_47_TO_40__q22 =
	     f_near_mem_io_rsps$D_OUT[47:40] ;
  assign f_near_mem_io_rspsD_OUT_BITS_55_TO_48__q25 =
	     f_near_mem_io_rsps$D_OUT[55:48] ;
  assign f_near_mem_io_rspsD_OUT_BITS_63_TO_32__q20 =
	     f_near_mem_io_rsps$D_OUT[63:32] ;
  assign f_near_mem_io_rspsD_OUT_BITS_63_TO_48__q26 =
	     f_near_mem_io_rsps$D_OUT[63:48] ;
  assign f_near_mem_io_rspsD_OUT_BITS_63_TO_56__q28 =
	     f_near_mem_io_rsps$D_OUT[63:56] ;
  assign f_near_mem_io_rspsD_OUT_BITS_7_TO_0__q5 =
	     f_near_mem_io_rsps$D_OUT[7:0] ;
  assign ld_val4550_BITS_15_TO_0__q50 = ld_val__h24550[15:0] ;
  assign ld_val4550_BITS_15_TO_8__q52 = ld_val__h24550[15:8] ;
  assign ld_val4550_BITS_23_TO_16__q53 = ld_val__h24550[23:16] ;
  assign ld_val4550_BITS_31_TO_0__q51 = ld_val__h24550[31:0] ;
  assign ld_val4550_BITS_31_TO_16__q54 = ld_val__h24550[31:16] ;
  assign ld_val4550_BITS_31_TO_24__q56 = ld_val__h24550[31:24] ;
  assign ld_val4550_BITS_39_TO_32__q55 = ld_val__h24550[39:32] ;
  assign ld_val4550_BITS_47_TO_32__q57 = ld_val__h24550[47:32] ;
  assign ld_val4550_BITS_47_TO_40__q59 = ld_val__h24550[47:40] ;
  assign ld_val4550_BITS_55_TO_48__q60 = ld_val__h24550[55:48] ;
  assign ld_val4550_BITS_63_TO_32__q58 = ld_val__h24550[63:32] ;
  assign ld_val4550_BITS_63_TO_48__q61 = ld_val__h24550[63:48] ;
  assign ld_val4550_BITS_63_TO_56__q62 = ld_val__h24550[63:56] ;
  assign ld_val4550_BITS_7_TO_0__q49 = ld_val__h24550[7:0] ;
  assign lrsc_result__h13231 =
	     !rg_lrsc_valid || !rg_lrsc_pa_4_EQ_rg_addr_7___d55 ;
  assign master_xactor_crg_rd_data_full_port1__read__48_ETC___d838 =
	     master_xactor_crg_rd_data_full$port1__read &&
	     (master_xactor_rg_rd_data[2:1] != 2'b0 ||
	      !master_xactor_crg_wr_addr_full$port2__read &&
	      !master_xactor_crg_wr_data_full$port2__read) ;
  assign master_xactor_rg_rd_data_BITS_10_TO_3__q1 =
	     master_xactor_rg_rd_data[10:3] ;
  assign master_xactor_rg_rd_data_BITS_18_TO_11__q2 =
	     master_xactor_rg_rd_data[18:11] ;
  assign master_xactor_rg_rd_data_BITS_18_TO_3__q3 =
	     master_xactor_rg_rd_data[18:3] ;
  assign master_xactor_rg_rd_data_BITS_26_TO_19__q9 =
	     master_xactor_rg_rd_data[26:19] ;
  assign master_xactor_rg_rd_data_BITS_34_TO_19__q10 =
	     master_xactor_rg_rd_data[34:19] ;
  assign master_xactor_rg_rd_data_BITS_34_TO_27__q13 =
	     master_xactor_rg_rd_data[34:27] ;
  assign master_xactor_rg_rd_data_BITS_34_TO_3__q4 =
	     master_xactor_rg_rd_data[34:3] ;
  assign master_xactor_rg_rd_data_BITS_42_TO_35__q15 =
	     master_xactor_rg_rd_data[42:35] ;
  assign master_xactor_rg_rd_data_BITS_50_TO_35__q16 =
	     master_xactor_rg_rd_data[50:35] ;
  assign master_xactor_rg_rd_data_BITS_50_TO_43__q21 =
	     master_xactor_rg_rd_data[50:43] ;
  assign master_xactor_rg_rd_data_BITS_58_TO_51__q23 =
	     master_xactor_rg_rd_data[58:51] ;
  assign master_xactor_rg_rd_data_BITS_66_TO_35__q17 =
	     master_xactor_rg_rd_data[66:35] ;
  assign master_xactor_rg_rd_data_BITS_66_TO_51__q24 =
	     master_xactor_rg_rd_data[66:51] ;
  assign master_xactor_rg_rd_data_BITS_66_TO_59__q27 =
	     master_xactor_rg_rd_data[66:59] ;
  assign mem_req_wr_addr_awaddr__h20116 = { 32'd0, rg_addr } ;
  assign mem_req_wr_addr_awaddr__h29788 = { 32'd0, rg_pa } ;
  assign new_st_val__h17394 =
	     (rg_f3 == 3'b010) ?
	       new_st_val__h17676 :
	       _theResult_____2__h17672 ;
  assign new_st_val__h17676 = { 32'd0, _theResult_____2__h17672[31:0] } ;
  assign new_st_val__h17767 =
	     IF_rg_f3_30_EQ_0b10_36_THEN_SEXT_IF_rg_f3_30_E_ETC___d294 +
	     IF_rg_f3_30_EQ_0b10_36_THEN_SEXT_rg_st_amo_val_ETC___d358 ;
  assign new_st_val__h18747 = w1__h17664 ^ w2__h30014 ;
  assign new_st_val__h18751 = w1__h17664 & w2__h30014 ;
  assign new_st_val__h18755 = w1__h17664 | w2__h30014 ;
  assign new_st_val__h18759 =
	     (w1__h17664 < w2__h30014) ? w1__h17664 : w2__h30014 ;
  assign new_st_val__h18764 =
	     (w1__h17664 <= w2__h30014) ? w2__h30014 : w1__h17664 ;
  assign new_st_val__h18770 =
	     ((IF_rg_f3_30_EQ_0b10_36_THEN_SEXT_IF_rg_f3_30_E_ETC___d294 ^
	       64'h8000000000000000) <
	      (IF_rg_f3_30_EQ_0b10_36_THEN_SEXT_rg_st_amo_val_ETC___d358 ^
	       64'h8000000000000000)) ?
	       w1__h17664 :
	       w2__h30014 ;
  assign new_st_val__h18775 =
	     ((IF_rg_f3_30_EQ_0b10_36_THEN_SEXT_IF_rg_f3_30_E_ETC___d294 ^
	       64'h8000000000000000) <=
	      (IF_rg_f3_30_EQ_0b10_36_THEN_SEXT_rg_st_amo_val_ETC___d358 ^
	       64'h8000000000000000)) ?
	       w2__h30014 :
	       w1__h17664 ;
  assign new_st_val__h30024 = { 32'd0, _theResult_____2__h30020[31:0] } ;
  assign new_st_val__h30115 =
	     new_ld_val__h29726 +
	     IF_rg_f3_30_EQ_0b10_36_THEN_SEXT_rg_st_amo_val_ETC___d358 ;
  assign new_st_val__h31975 = w1__h30012 ^ w2__h30014 ;
  assign new_st_val__h31979 = w1__h30012 & w2__h30014 ;
  assign new_st_val__h31983 = w1__h30012 | w2__h30014 ;
  assign new_st_val__h31987 =
	     (w1__h30012 < w2__h30014) ? w1__h30012 : w2__h30014 ;
  assign new_st_val__h31992 =
	     (w1__h30012 <= w2__h30014) ? w2__h30014 : w1__h30012 ;
  assign new_st_val__h31998 =
	     ((new_ld_val__h29726 ^ 64'h8000000000000000) <
	      (IF_rg_f3_30_EQ_0b10_36_THEN_SEXT_rg_st_amo_val_ETC___d358 ^
	       64'h8000000000000000)) ?
	       w1__h30012 :
	       w2__h30014 ;
  assign new_st_val__h32003 =
	     ((new_ld_val__h29726 ^ 64'h8000000000000000) <=
	      (IF_rg_f3_30_EQ_0b10_36_THEN_SEXT_rg_st_amo_val_ETC___d358 ^
	       64'h8000000000000000)) ?
	       w2__h30014 :
	       w1__h30012 ;
  assign new_value560_BITS_31_TO_0__q44 = new_value__h5560[31:0] ;
  assign pa_ctag__h5199 = { 2'd0, rg_addr[31:12] } ;
  assign ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d71 =
	     ram_state_and_ctag_cset$DOB[21:0] == pa_ctag__h5199 ;
  assign ram_state_and_ctag_cset_b_read__5_BIT_22_6_AND_ETC___d112 =
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d71 &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 ||
	     NOT_ram_state_and_ctag_cset_b_read__5_BIT_22_6_ETC___d111 ;
  assign req_f3_BITS_1_TO_0_005_EQ_0b0_006_OR_req_f3_BI_ETC___d1035 =
	     req_f3[1:0] == 2'b0 || req_f3[1:0] == 2'b01 && !req_addr[0] ||
	     req_f3[1:0] == 2'b10 && req_addr[1:0] == 2'b0 ||
	     req_f3[1:0] == 2'b11 && req_addr[2:0] == 3'b0 ;
  assign result__h11971 =
	     { {56{word64341_BITS_15_TO_8__q32[7]}},
	       word64341_BITS_15_TO_8__q32 } ;
  assign result__h11999 =
	     { {56{word64341_BITS_23_TO_16__q33[7]}},
	       word64341_BITS_23_TO_16__q33 } ;
  assign result__h12027 =
	     { {56{word64341_BITS_31_TO_24__q36[7]}},
	       word64341_BITS_31_TO_24__q36 } ;
  assign result__h12055 =
	     { {56{word64341_BITS_39_TO_32__q35[7]}},
	       word64341_BITS_39_TO_32__q35 } ;
  assign result__h12083 =
	     { {56{word64341_BITS_47_TO_40__q38[7]}},
	       word64341_BITS_47_TO_40__q38 } ;
  assign result__h12111 =
	     { {56{word64341_BITS_55_TO_48__q40[7]}},
	       word64341_BITS_55_TO_48__q40 } ;
  assign result__h12139 =
	     { {56{word64341_BITS_63_TO_56__q42[7]}},
	       word64341_BITS_63_TO_56__q42 } ;
  assign result__h12184 = { 56'd0, word64__h5341[7:0] } ;
  assign result__h12212 = { 56'd0, word64__h5341[15:8] } ;
  assign result__h12240 = { 56'd0, word64__h5341[23:16] } ;
  assign result__h12268 = { 56'd0, word64__h5341[31:24] } ;
  assign result__h12296 = { 56'd0, word64__h5341[39:32] } ;
  assign result__h12324 = { 56'd0, word64__h5341[47:40] } ;
  assign result__h12352 = { 56'd0, word64__h5341[55:48] } ;
  assign result__h12380 = { 56'd0, word64__h5341[63:56] } ;
  assign result__h12425 =
	     { {48{word64341_BITS_15_TO_0__q30[15]}},
	       word64341_BITS_15_TO_0__q30 } ;
  assign result__h12453 =
	     { {48{word64341_BITS_31_TO_16__q34[15]}},
	       word64341_BITS_31_TO_16__q34 } ;
  assign result__h12481 =
	     { {48{word64341_BITS_47_TO_32__q37[15]}},
	       word64341_BITS_47_TO_32__q37 } ;
  assign result__h12509 =
	     { {48{word64341_BITS_63_TO_48__q41[15]}},
	       word64341_BITS_63_TO_48__q41 } ;
  assign result__h12550 = { 48'd0, word64__h5341[15:0] } ;
  assign result__h12578 = { 48'd0, word64__h5341[31:16] } ;
  assign result__h12606 = { 48'd0, word64__h5341[47:32] } ;
  assign result__h12634 = { 48'd0, word64__h5341[63:48] } ;
  assign result__h12675 =
	     { {32{word64341_BITS_31_TO_0__q31[31]}},
	       word64341_BITS_31_TO_0__q31 } ;
  assign result__h12703 =
	     { {32{word64341_BITS_63_TO_32__q39[31]}},
	       word64341_BITS_63_TO_32__q39 } ;
  assign result__h12742 = { 32'd0, word64__h5341[31:0] } ;
  assign result__h12770 = { 32'd0, word64__h5341[63:32] } ;
  assign result__h24610 =
	     { {56{master_xactor_rg_rd_data_BITS_10_TO_3__q1[7]}},
	       master_xactor_rg_rd_data_BITS_10_TO_3__q1 } ;
  assign result__h24640 =
	     { {56{master_xactor_rg_rd_data_BITS_18_TO_11__q2[7]}},
	       master_xactor_rg_rd_data_BITS_18_TO_11__q2 } ;
  assign result__h24667 =
	     { {56{master_xactor_rg_rd_data_BITS_26_TO_19__q9[7]}},
	       master_xactor_rg_rd_data_BITS_26_TO_19__q9 } ;
  assign result__h24694 =
	     { {56{master_xactor_rg_rd_data_BITS_34_TO_27__q13[7]}},
	       master_xactor_rg_rd_data_BITS_34_TO_27__q13 } ;
  assign result__h24721 =
	     { {56{master_xactor_rg_rd_data_BITS_42_TO_35__q15[7]}},
	       master_xactor_rg_rd_data_BITS_42_TO_35__q15 } ;
  assign result__h24748 =
	     { {56{master_xactor_rg_rd_data_BITS_50_TO_43__q21[7]}},
	       master_xactor_rg_rd_data_BITS_50_TO_43__q21 } ;
  assign result__h24775 =
	     { {56{master_xactor_rg_rd_data_BITS_58_TO_51__q23[7]}},
	       master_xactor_rg_rd_data_BITS_58_TO_51__q23 } ;
  assign result__h24802 =
	     { {56{master_xactor_rg_rd_data_BITS_66_TO_59__q27[7]}},
	       master_xactor_rg_rd_data_BITS_66_TO_59__q27 } ;
  assign result__h24846 = { 56'd0, master_xactor_rg_rd_data[10:3] } ;
  assign result__h24873 = { 56'd0, master_xactor_rg_rd_data[18:11] } ;
  assign result__h24900 = { 56'd0, master_xactor_rg_rd_data[26:19] } ;
  assign result__h24927 = { 56'd0, master_xactor_rg_rd_data[34:27] } ;
  assign result__h24954 = { 56'd0, master_xactor_rg_rd_data[42:35] } ;
  assign result__h24981 = { 56'd0, master_xactor_rg_rd_data[50:43] } ;
  assign result__h25008 = { 56'd0, master_xactor_rg_rd_data[58:51] } ;
  assign result__h25035 = { 56'd0, master_xactor_rg_rd_data[66:59] } ;
  assign result__h25079 =
	     { {48{master_xactor_rg_rd_data_BITS_18_TO_3__q3[15]}},
	       master_xactor_rg_rd_data_BITS_18_TO_3__q3 } ;
  assign result__h25106 =
	     { {48{master_xactor_rg_rd_data_BITS_34_TO_19__q10[15]}},
	       master_xactor_rg_rd_data_BITS_34_TO_19__q10 } ;
  assign result__h25133 =
	     { {48{master_xactor_rg_rd_data_BITS_50_TO_35__q16[15]}},
	       master_xactor_rg_rd_data_BITS_50_TO_35__q16 } ;
  assign result__h25160 =
	     { {48{master_xactor_rg_rd_data_BITS_66_TO_51__q24[15]}},
	       master_xactor_rg_rd_data_BITS_66_TO_51__q24 } ;
  assign result__h25200 = { 48'd0, master_xactor_rg_rd_data[18:3] } ;
  assign result__h25227 = { 48'd0, master_xactor_rg_rd_data[34:19] } ;
  assign result__h25254 = { 48'd0, master_xactor_rg_rd_data[50:35] } ;
  assign result__h25281 = { 48'd0, master_xactor_rg_rd_data[66:51] } ;
  assign result__h25321 =
	     { {32{master_xactor_rg_rd_data_BITS_34_TO_3__q4[31]}},
	       master_xactor_rg_rd_data_BITS_34_TO_3__q4 } ;
  assign result__h25348 =
	     { {32{master_xactor_rg_rd_data_BITS_66_TO_35__q17[31]}},
	       master_xactor_rg_rd_data_BITS_66_TO_35__q17 } ;
  assign result__h25386 = { 32'd0, master_xactor_rg_rd_data[34:3] } ;
  assign result__h25413 = { 32'd0, master_xactor_rg_rd_data[66:35] } ;
  assign result__h26244 =
	     { {56{f_near_mem_io_rspsD_OUT_BITS_7_TO_0__q5[7]}},
	       f_near_mem_io_rspsD_OUT_BITS_7_TO_0__q5 } ;
  assign result__h26274 =
	     { {56{f_near_mem_io_rspsD_OUT_BITS_15_TO_8__q8[7]}},
	       f_near_mem_io_rspsD_OUT_BITS_15_TO_8__q8 } ;
  assign result__h26301 =
	     { {56{f_near_mem_io_rspsD_OUT_BITS_23_TO_16__q11[7]}},
	       f_near_mem_io_rspsD_OUT_BITS_23_TO_16__q11 } ;
  assign result__h26328 =
	     { {56{f_near_mem_io_rspsD_OUT_BITS_31_TO_24__q14[7]}},
	       f_near_mem_io_rspsD_OUT_BITS_31_TO_24__q14 } ;
  assign result__h26355 =
	     { {56{f_near_mem_io_rspsD_OUT_BITS_39_TO_32__q18[7]}},
	       f_near_mem_io_rspsD_OUT_BITS_39_TO_32__q18 } ;
  assign result__h26382 =
	     { {56{f_near_mem_io_rspsD_OUT_BITS_47_TO_40__q22[7]}},
	       f_near_mem_io_rspsD_OUT_BITS_47_TO_40__q22 } ;
  assign result__h26409 =
	     { {56{f_near_mem_io_rspsD_OUT_BITS_55_TO_48__q25[7]}},
	       f_near_mem_io_rspsD_OUT_BITS_55_TO_48__q25 } ;
  assign result__h26436 =
	     { {56{f_near_mem_io_rspsD_OUT_BITS_63_TO_56__q28[7]}},
	       f_near_mem_io_rspsD_OUT_BITS_63_TO_56__q28 } ;
  assign result__h26480 = { 56'd0, f_near_mem_io_rsps$D_OUT[7:0] } ;
  assign result__h26507 = { 56'd0, f_near_mem_io_rsps$D_OUT[15:8] } ;
  assign result__h26534 = { 56'd0, f_near_mem_io_rsps$D_OUT[23:16] } ;
  assign result__h26561 = { 56'd0, f_near_mem_io_rsps$D_OUT[31:24] } ;
  assign result__h26588 = { 56'd0, f_near_mem_io_rsps$D_OUT[39:32] } ;
  assign result__h26615 = { 56'd0, f_near_mem_io_rsps$D_OUT[47:40] } ;
  assign result__h26642 = { 56'd0, f_near_mem_io_rsps$D_OUT[55:48] } ;
  assign result__h26669 = { 56'd0, f_near_mem_io_rsps$D_OUT[63:56] } ;
  assign result__h26713 =
	     { {48{f_near_mem_io_rspsD_OUT_BITS_15_TO_0__q6[15]}},
	       f_near_mem_io_rspsD_OUT_BITS_15_TO_0__q6 } ;
  assign result__h26740 =
	     { {48{f_near_mem_io_rspsD_OUT_BITS_31_TO_16__q12[15]}},
	       f_near_mem_io_rspsD_OUT_BITS_31_TO_16__q12 } ;
  assign result__h26767 =
	     { {48{f_near_mem_io_rspsD_OUT_BITS_47_TO_32__q19[15]}},
	       f_near_mem_io_rspsD_OUT_BITS_47_TO_32__q19 } ;
  assign result__h26794 =
	     { {48{f_near_mem_io_rspsD_OUT_BITS_63_TO_48__q26[15]}},
	       f_near_mem_io_rspsD_OUT_BITS_63_TO_48__q26 } ;
  assign result__h26834 = { 48'd0, f_near_mem_io_rsps$D_OUT[15:0] } ;
  assign result__h26861 = { 48'd0, f_near_mem_io_rsps$D_OUT[31:16] } ;
  assign result__h26888 = { 48'd0, f_near_mem_io_rsps$D_OUT[47:32] } ;
  assign result__h26915 = { 48'd0, f_near_mem_io_rsps$D_OUT[63:48] } ;
  assign result__h26955 =
	     { {32{f_near_mem_io_rspsD_OUT_BITS_31_TO_0__q7[31]}},
	       f_near_mem_io_rspsD_OUT_BITS_31_TO_0__q7 } ;
  assign result__h26982 =
	     { {32{f_near_mem_io_rspsD_OUT_BITS_63_TO_32__q20[31]}},
	       f_near_mem_io_rspsD_OUT_BITS_63_TO_32__q20 } ;
  assign result__h27020 = { 32'd0, f_near_mem_io_rsps$D_OUT[31:0] } ;
  assign result__h27047 = { 32'd0, f_near_mem_io_rsps$D_OUT[63:32] } ;
  assign result__h30203 =
	     { {56{ld_val4550_BITS_7_TO_0__q49[7]}},
	       ld_val4550_BITS_7_TO_0__q49 } ;
  assign result__h31111 =
	     { {56{ld_val4550_BITS_15_TO_8__q52[7]}},
	       ld_val4550_BITS_15_TO_8__q52 } ;
  assign result__h31139 =
	     { {56{ld_val4550_BITS_23_TO_16__q53[7]}},
	       ld_val4550_BITS_23_TO_16__q53 } ;
  assign result__h31167 =
	     { {56{ld_val4550_BITS_31_TO_24__q56[7]}},
	       ld_val4550_BITS_31_TO_24__q56 } ;
  assign result__h31195 =
	     { {56{ld_val4550_BITS_39_TO_32__q55[7]}},
	       ld_val4550_BITS_39_TO_32__q55 } ;
  assign result__h31223 =
	     { {56{ld_val4550_BITS_47_TO_40__q59[7]}},
	       ld_val4550_BITS_47_TO_40__q59 } ;
  assign result__h31251 =
	     { {56{ld_val4550_BITS_55_TO_48__q60[7]}},
	       ld_val4550_BITS_55_TO_48__q60 } ;
  assign result__h31279 =
	     { {56{ld_val4550_BITS_63_TO_56__q62[7]}},
	       ld_val4550_BITS_63_TO_56__q62 } ;
  assign result__h31324 = { 56'd0, ld_val__h24550[7:0] } ;
  assign result__h31352 = { 56'd0, ld_val__h24550[15:8] } ;
  assign result__h31380 = { 56'd0, ld_val__h24550[23:16] } ;
  assign result__h31408 = { 56'd0, ld_val__h24550[31:24] } ;
  assign result__h31436 = { 56'd0, ld_val__h24550[39:32] } ;
  assign result__h31464 = { 56'd0, ld_val__h24550[47:40] } ;
  assign result__h31492 = { 56'd0, ld_val__h24550[55:48] } ;
  assign result__h31520 = { 56'd0, ld_val__h24550[63:56] } ;
  assign result__h31565 =
	     { {48{ld_val4550_BITS_15_TO_0__q50[15]}},
	       ld_val4550_BITS_15_TO_0__q50 } ;
  assign result__h31593 =
	     { {48{ld_val4550_BITS_31_TO_16__q54[15]}},
	       ld_val4550_BITS_31_TO_16__q54 } ;
  assign result__h31621 =
	     { {48{ld_val4550_BITS_47_TO_32__q57[15]}},
	       ld_val4550_BITS_47_TO_32__q57 } ;
  assign result__h31649 =
	     { {48{ld_val4550_BITS_63_TO_48__q61[15]}},
	       ld_val4550_BITS_63_TO_48__q61 } ;
  assign result__h31690 = { 48'd0, ld_val__h24550[15:0] } ;
  assign result__h31718 = { 48'd0, ld_val__h24550[31:16] } ;
  assign result__h31746 = { 48'd0, ld_val__h24550[47:32] } ;
  assign result__h31774 = { 48'd0, ld_val__h24550[63:48] } ;
  assign result__h31815 =
	     { {32{ld_val4550_BITS_31_TO_0__q51[31]}},
	       ld_val4550_BITS_31_TO_0__q51 } ;
  assign result__h31843 =
	     { {32{ld_val4550_BITS_63_TO_32__q58[31]}},
	       ld_val4550_BITS_63_TO_32__q58 } ;
  assign result__h31882 = { 32'd0, ld_val__h24550[31:0] } ;
  assign result__h31910 = { 32'd0, ld_val__h24550[63:32] } ;
  assign result__h5615 =
	     { {56{word64341_BITS_7_TO_0__q29[7]}},
	       word64341_BITS_7_TO_0__q29 } ;
  assign rg_addr_7_EQ_rg_lrsc_pa_4___d109 = rg_addr == rg_lrsc_pa ;
  assign rg_amo_funct7_3_BITS_6_TO_2_4_EQ_0b10_5_AND_NO_ETC___d284 =
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     (!ram_state_and_ctag_cset$DOB[22] ||
	      !ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d71) &&
	     rg_addr_7_EQ_rg_lrsc_pa_4___d109 &&
	     NOT_cfg_verbosity_read__0_ULE_1_1___d12 ;
  assign rg_lrsc_pa_4_EQ_rg_addr_7___d55 = rg_lrsc_pa == rg_addr ;
  assign rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d123 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     ram_state_and_ctag_cset_b_read__5_BIT_22_6_AND_ETC___d112 ||
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     rg_op_0_EQ_1_8_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d121 ;
  assign rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d125 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d71 ;
  assign rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d128 =
	     rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d125 ||
	     rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h13231 ;
  assign rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d267 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d71 &&
	     NOT_cfg_verbosity_read__0_ULE_1_1___d12 ;
  assign rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d280 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     (!ram_state_and_ctag_cset$DOB[22] ||
	      !ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d71) &&
	     NOT_cfg_verbosity_read__0_ULE_1_1___d12 ;
  assign rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d88 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     (!ram_state_and_ctag_cset$DOB[22] ||
	      !ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d71) ;
  assign rg_op_0_EQ_1_8_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d121 =
	     rg_op == 2'd1 && rg_addr_7_EQ_rg_lrsc_pa_4___d109 ||
	     rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 ||
	     NOT_rg_op_0_EQ_1_8_17_AND_NOT_rg_op_0_EQ_2_2_0_ETC___d120 ;
  assign rg_op_0_EQ_1_8_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d299 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_0_EQ_2_2_0_OR_NOT_rg_amo_funct7_3_BI_ETC___d296 ||
	     NOT_rg_op_0_EQ_1_8_17_AND_NOT_rg_op_0_EQ_2_2_0_ETC___d298 ;
  assign rg_op_0_EQ_1_8_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d428 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid && rg_lrsc_pa_4_EQ_rg_addr_7___d55) ;
  assign rg_op_0_EQ_2_2_AND_rg_amo_funct7_3_BITS_6_TO_2_ETC___d497 =
	     rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h13231 &&
	     NOT_cfg_verbosity_read__0_ULE_1_1___d12 ;
  assign rg_op_0_EQ_2_2_AND_rg_amo_funct7_3_BITS_6_TO_2_ETC___d64 =
	     rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h13231 ||
	     !master_xactor_crg_wr_addr_full$port2__read &&
	     !master_xactor_crg_wr_data_full$port2__read ;
  assign rg_st_amo_val_BITS_31_TO_0__q45 = rg_st_amo_val[31:0] ;
  assign rg_state_EQ_12_85_AND_rg_op_0_EQ_0_1_OR_rg_op__ETC___d590 =
	     rg_state == 4'd12 &&
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     !soc_map$m_is_near_mem_IO_addr ;
  assign rg_state_EQ_12_85_AND_rg_op_0_EQ_0_1_OR_rg_op__ETC___d691 =
	     rg_state == 4'd12 &&
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     soc_map$m_is_near_mem_IO_addr ;
  assign shift_bits__h20122 = { rg_addr[2:0], 3'b0 } ;
  assign shift_bits__h29794 = { rg_pa[2:0], 3'b0 } ;
  assign st_val__h29738 =
	     (rg_f3 == 3'b010) ?
	       new_st_val__h30024 :
	       _theResult_____2__h30020 ;
  assign strobe64__h20257 = 8'b00000001 << rg_addr[2:0] ;
  assign strobe64__h20260 = 8'b00000011 << rg_addr[2:0] ;
  assign strobe64__h20263 = 8'b00001111 << rg_addr[2:0] ;
  assign strobe64__h29929 = 8'b00000001 << rg_pa[2:0] ;
  assign strobe64__h29932 = 8'b00000011 << rg_pa[2:0] ;
  assign strobe64__h29935 = 8'b00001111 << rg_pa[2:0] ;
  assign w10008_BITS_31_TO_0__q66 = w1__h30008[31:0] ;
  assign w1___1__h17735 = { 32'd0, new_value__h5560[31:0] } ;
  assign w1___1__h30083 = { 32'd0, w1__h30008[31:0] } ;
  assign w2___1__h30084 = { 32'd0, rg_st_amo_val[31:0] } ;
  assign w2__h30014 = (rg_f3 == 3'b010) ? w2___1__h30084 : rg_st_amo_val ;
  assign word64341_BITS_15_TO_0__q30 = word64__h5341[15:0] ;
  assign word64341_BITS_15_TO_8__q32 = word64__h5341[15:8] ;
  assign word64341_BITS_23_TO_16__q33 = word64__h5341[23:16] ;
  assign word64341_BITS_31_TO_0__q31 = word64__h5341[31:0] ;
  assign word64341_BITS_31_TO_16__q34 = word64__h5341[31:16] ;
  assign word64341_BITS_31_TO_24__q36 = word64__h5341[31:24] ;
  assign word64341_BITS_39_TO_32__q35 = word64__h5341[39:32] ;
  assign word64341_BITS_47_TO_32__q37 = word64__h5341[47:32] ;
  assign word64341_BITS_47_TO_40__q38 = word64__h5341[47:40] ;
  assign word64341_BITS_55_TO_48__q40 = word64__h5341[55:48] ;
  assign word64341_BITS_63_TO_32__q39 = word64__h5341[63:32] ;
  assign word64341_BITS_63_TO_48__q41 = word64__h5341[63:48] ;
  assign word64341_BITS_63_TO_56__q42 = word64__h5341[63:56] ;
  assign word64341_BITS_7_TO_0__q29 = word64__h5341[7:0] ;
  assign word64__h5341 = ram_word64_set$DOB & y__h5651 ;
  assign x__h13241 = { 63'd0, lrsc_result__h13231 } ;
  assign y__h5651 =
	     {64{ram_state_and_ctag_cset$DOB[22] &&
		 ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d71}} ;
  always@(rg_f3)
  begin
    case (rg_f3[1:0])
      2'b0: value__h32337 = 3'b0;
      2'b01: value__h32337 = 3'b001;
      2'b10: value__h32337 = 3'b010;
      2'b11: value__h32337 = 3'b011;
    endcase
  end
  always@(rg_f3)
  begin
    case (rg_f3[1:0])
      2'b0: value__h29311 = 3'b0;
      2'b01: value__h29311 = 3'b001;
      2'b10: value__h29311 = 3'b010;
      2'd3: value__h29311 = 3'b011;
    endcase
  end
  always@(rg_f3 or strobe64__h29929 or strobe64__h29932 or strobe64__h29935)
  begin
    case (rg_f3[1:0])
      2'b0: mem_req_wr_data_wstrb__h29999 = strobe64__h29929;
      2'b01: mem_req_wr_data_wstrb__h29999 = strobe64__h29932;
      2'b10: mem_req_wr_data_wstrb__h29999 = strobe64__h29935;
      2'b11: mem_req_wr_data_wstrb__h29999 = 8'b11111111;
    endcase
  end
  always@(rg_f3 or strobe64__h20257 or strobe64__h20260 or strobe64__h20263)
  begin
    case (rg_f3[1:0])
      2'b0: mem_req_wr_data_wstrb__h20327 = strobe64__h20257;
      2'b01: mem_req_wr_data_wstrb__h20327 = strobe64__h20260;
      2'b10: mem_req_wr_data_wstrb__h20327 = strobe64__h20263;
      2'b11: mem_req_wr_data_wstrb__h20327 = 8'b11111111;
    endcase
  end
  always@(rg_f3 or rg_st_amo_val or _theResult___fst__h16785)
  begin
    case (rg_f3[1:0])
      2'b0, 2'b01, 2'b10:
	  mem_req_wr_data_wdata__h16883 = _theResult___fst__h16785;
      2'd3: mem_req_wr_data_wdata__h16883 = rg_st_amo_val;
    endcase
  end
  always@(rg_f3 or rg_st_amo_val or _theResult___fst__h28445)
  begin
    case (rg_f3[1:0])
      2'b0, 2'b01, 2'b10: value__h28727 = _theResult___fst__h28445;
      2'd3: value__h28727 = rg_st_amo_val;
    endcase
  end
  always@(rg_addr or
	  result__h12184 or
	  result__h12212 or
	  result__h12240 or
	  result__h12268 or
	  result__h12296 or
	  result__h12324 or result__h12352 or result__h12380)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d213 =
	      result__h12184;
      3'h1:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d213 =
	      result__h12212;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d213 =
	      result__h12240;
      3'h3:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d213 =
	      result__h12268;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d213 =
	      result__h12296;
      3'h5:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d213 =
	      result__h12324;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d213 =
	      result__h12352;
      3'h7:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d213 =
	      result__h12380;
    endcase
  end
  always@(rg_addr or
	  result__h5615 or
	  result__h11971 or
	  result__h11999 or
	  result__h12027 or
	  result__h12055 or
	  result__h12083 or result__h12111 or result__h12139)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d196 =
	      result__h5615;
      3'h1:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d196 =
	      result__h11971;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d196 =
	      result__h11999;
      3'h3:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d196 =
	      result__h12027;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d196 =
	      result__h12055;
      3'h5:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d196 =
	      result__h12083;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d196 =
	      result__h12111;
      3'h7:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d196 =
	      result__h12139;
    endcase
  end
  always@(rg_addr or
	  result__h12425 or
	  result__h12453 or result__h12481 or result__h12509)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d226 =
	      result__h12425;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d226 =
	      result__h12453;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d226 =
	      result__h12481;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d226 =
	      result__h12509;
      default: IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d226 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h12550 or
	  result__h12578 or result__h12606 or result__h12634)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d235 =
	      result__h12550;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d235 =
	      result__h12578;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d235 =
	      result__h12606;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d235 =
	      result__h12634;
      default: IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d235 =
		   64'd0;
    endcase
  end
  always@(rg_addr or result__h12742 or result__h12770)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d247 =
	      result__h12742;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d247 =
	      result__h12770;
      default: IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d247 =
		   64'd0;
    endcase
  end
  always@(rg_addr or result__h12675 or result__h12703)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result2675_0x4_re_ETC__q43 =
	      result__h12675;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result2675_0x4_re_ETC__q43 =
	      result__h12703;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result2675_0x4_re_ETC__q43 =
		   64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d196 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d226 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result2675_0x4_re_ETC__q43 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d249 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d213 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d235 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d247)
  begin
    case (rg_f3)
      3'b0:
	  new_value__h5560 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d196;
      3'b001:
	  new_value__h5560 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d226;
      3'b010:
	  new_value__h5560 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result2675_0x4_re_ETC__q43;
      3'b011:
	  new_value__h5560 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d249;
      3'b100:
	  new_value__h5560 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d213;
      3'b101:
	  new_value__h5560 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d235;
      3'b110:
	  new_value__h5560 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d247;
      3'd7: new_value__h5560 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d196 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d226 or
	  w1___1__h17735 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d249 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d213 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d235 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d247)
  begin
    case (rg_f3)
      3'b0:
	  w1__h17664 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d196;
      3'b001:
	  w1__h17664 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d226;
      3'b010: w1__h17664 = w1___1__h17735;
      3'b011:
	  w1__h17664 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d249;
      3'b100:
	  w1__h17664 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d213;
      3'b101:
	  w1__h17664 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d235;
      3'b110:
	  w1__h17664 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d247;
      3'd7: w1__h17664 = 64'd0;
    endcase
  end
  always@(rg_addr or ram_word64_set$DOB or rg_st_amo_val)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d343 =
	      { ram_word64_set$DOB[63:16], rg_st_amo_val[15:0] };
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d343 =
	      { ram_word64_set$DOB[63:32],
		rg_st_amo_val[15:0],
		ram_word64_set$DOB[15:0] };
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d343 =
	      { ram_word64_set$DOB[63:48],
		rg_st_amo_val[15:0],
		ram_word64_set$DOB[31:0] };
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d343 =
	      { rg_st_amo_val[15:0], ram_word64_set$DOB[47:0] };
      default: IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d343 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_addr or ram_word64_set$DOB or rg_st_amo_val)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d334 =
	      { ram_word64_set$DOB[63:8], rg_st_amo_val[7:0] };
      3'h1:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d334 =
	      { ram_word64_set$DOB[63:16],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[7:0] };
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d334 =
	      { ram_word64_set$DOB[63:24],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[15:0] };
      3'h3:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d334 =
	      { ram_word64_set$DOB[63:32],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[23:0] };
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d334 =
	      { ram_word64_set$DOB[63:40],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[31:0] };
      3'h5:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d334 =
	      { ram_word64_set$DOB[63:48],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[39:0] };
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d334 =
	      { ram_word64_set$DOB[63:56],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[47:0] };
      3'h7:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d334 =
	      { rg_st_amo_val[7:0], ram_word64_set$DOB[55:0] };
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d196 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d226 or
	  new_value560_BITS_31_TO_0__q44 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d249 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d213 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d235 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d247)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_30_EQ_0b10_36_THEN_SEXT_IF_rg_f3_30_E_ETC___d294 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d196;
      3'b001:
	  IF_rg_f3_30_EQ_0b10_36_THEN_SEXT_IF_rg_f3_30_E_ETC___d294 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d226;
      3'b010:
	  IF_rg_f3_30_EQ_0b10_36_THEN_SEXT_IF_rg_f3_30_E_ETC___d294 =
	      { {32{new_value560_BITS_31_TO_0__q44[31]}},
		new_value560_BITS_31_TO_0__q44 };
      3'b011:
	  IF_rg_f3_30_EQ_0b10_36_THEN_SEXT_IF_rg_f3_30_E_ETC___d294 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d249;
      3'b100:
	  IF_rg_f3_30_EQ_0b10_36_THEN_SEXT_IF_rg_f3_30_E_ETC___d294 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d213;
      3'b101:
	  IF_rg_f3_30_EQ_0b10_36_THEN_SEXT_IF_rg_f3_30_E_ETC___d294 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d235;
      3'b110:
	  IF_rg_f3_30_EQ_0b10_36_THEN_SEXT_IF_rg_f3_30_E_ETC___d294 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d247;
      3'd7: IF_rg_f3_30_EQ_0b10_36_THEN_SEXT_IF_rg_f3_30_E_ETC___d294 = 64'd0;
    endcase
  end
  always@(rg_amo_funct7 or
	  new_st_val__h18775 or
	  new_st_val__h17767 or
	  w2__h30014 or
	  new_st_val__h18747 or
	  new_st_val__h18755 or
	  new_st_val__h18751 or
	  new_st_val__h18770 or new_st_val__h18759 or new_st_val__h18764)
  begin
    case (rg_amo_funct7[6:2])
      5'b0: _theResult_____2__h17672 = new_st_val__h17767;
      5'b00001: _theResult_____2__h17672 = w2__h30014;
      5'b00100: _theResult_____2__h17672 = new_st_val__h18747;
      5'b01000: _theResult_____2__h17672 = new_st_val__h18755;
      5'b01100: _theResult_____2__h17672 = new_st_val__h18751;
      5'b10000: _theResult_____2__h17672 = new_st_val__h18770;
      5'b11000: _theResult_____2__h17672 = new_st_val__h18759;
      5'b11100: _theResult_____2__h17672 = new_st_val__h18764;
      default: _theResult_____2__h17672 = new_st_val__h18775;
    endcase
  end
  always@(rg_f3 or new_st_val__h17394 or _theResult___fst__h20258)
  begin
    case (rg_f3[1:0])
      2'b0, 2'b01, 2'b10:
	  mem_req_wr_data_wdata__h20326 = _theResult___fst__h20258;
      2'd3: mem_req_wr_data_wdata__h20326 = new_st_val__h17394;
    endcase
  end
  always@(rg_addr or ram_word64_set$DOB or new_st_val__h17394)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d417 =
	      { ram_word64_set$DOB[63:16], new_st_val__h17394[15:0] };
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d417 =
	      { ram_word64_set$DOB[63:32],
		new_st_val__h17394[15:0],
		ram_word64_set$DOB[15:0] };
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d417 =
	      { ram_word64_set$DOB[63:48],
		new_st_val__h17394[15:0],
		ram_word64_set$DOB[31:0] };
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d417 =
	      { new_st_val__h17394[15:0], ram_word64_set$DOB[47:0] };
      default: IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d417 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_addr or ram_word64_set$DOB or new_st_val__h17394)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d408 =
	      { ram_word64_set$DOB[63:8], new_st_val__h17394[7:0] };
      3'h1:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d408 =
	      { ram_word64_set$DOB[63:16],
		new_st_val__h17394[7:0],
		ram_word64_set$DOB[7:0] };
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d408 =
	      { ram_word64_set$DOB[63:24],
		new_st_val__h17394[7:0],
		ram_word64_set$DOB[15:0] };
      3'h3:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d408 =
	      { ram_word64_set$DOB[63:32],
		new_st_val__h17394[7:0],
		ram_word64_set$DOB[23:0] };
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d408 =
	      { ram_word64_set$DOB[63:40],
		new_st_val__h17394[7:0],
		ram_word64_set$DOB[31:0] };
      3'h5:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d408 =
	      { ram_word64_set$DOB[63:48],
		new_st_val__h17394[7:0],
		ram_word64_set$DOB[39:0] };
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d408 =
	      { ram_word64_set$DOB[63:56],
		new_st_val__h17394[7:0],
		ram_word64_set$DOB[47:0] };
      3'h7:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d408 =
	      { new_st_val__h17394[7:0], ram_word64_set$DOB[55:0] };
    endcase
  end
  always@(rg_addr or ram_word64_set$DOB or rg_st_amo_val)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q46 =
	      { ram_word64_set$DOB[63:32], rg_st_amo_val[31:0] };
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q46 =
	      { rg_st_amo_val[31:0], ram_word64_set$DOB[31:0] };
      default: CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q46 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_f3 or
	  ram_word64_set$DOB or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d334 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d343 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q46 or
	  rg_st_amo_val)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_30_EQ_0b0_31_THEN_IF_rg_addr_7_BITS_2_ETC___d352 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d334;
      3'b001:
	  IF_rg_f3_30_EQ_0b0_31_THEN_IF_rg_addr_7_BITS_2_ETC___d352 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d343;
      3'b010:
	  IF_rg_f3_30_EQ_0b0_31_THEN_IF_rg_addr_7_BITS_2_ETC___d352 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q46;
      3'b011:
	  IF_rg_f3_30_EQ_0b0_31_THEN_IF_rg_addr_7_BITS_2_ETC___d352 =
	      rg_st_amo_val;
      default: IF_rg_f3_30_EQ_0b0_31_THEN_IF_rg_addr_7_BITS_2_ETC___d352 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_addr or
	  result__h25200 or
	  result__h25227 or result__h25254 or result__h25281)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d665 =
	      result__h25200;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d665 =
	      result__h25227;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d665 =
	      result__h25254;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d665 =
	      result__h25281;
      default: IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d665 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h25079 or
	  result__h25106 or result__h25133 or result__h25160)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d657 =
	      result__h25079;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d657 =
	      result__h25106;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d657 =
	      result__h25133;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d657 =
	      result__h25160;
      default: IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d657 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h24846 or
	  result__h24873 or
	  result__h24900 or
	  result__h24927 or
	  result__h24954 or
	  result__h24981 or result__h25008 or result__h25035)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d645 =
	      result__h24846;
      3'h1:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d645 =
	      result__h24873;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d645 =
	      result__h24900;
      3'h3:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d645 =
	      result__h24927;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d645 =
	      result__h24954;
      3'h5:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d645 =
	      result__h24981;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d645 =
	      result__h25008;
      3'h7:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d645 =
	      result__h25035;
    endcase
  end
  always@(rg_addr or
	  result__h24610 or
	  result__h24640 or
	  result__h24667 or
	  result__h24694 or
	  result__h24721 or
	  result__h24748 or result__h24775 or result__h24802)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d629 =
	      result__h24610;
      3'h1:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d629 =
	      result__h24640;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d629 =
	      result__h24667;
      3'h3:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d629 =
	      result__h24694;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d629 =
	      result__h24721;
      3'h5:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d629 =
	      result__h24748;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d629 =
	      result__h24775;
      3'h7:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d629 =
	      result__h24802;
    endcase
  end
  always@(rg_addr or result__h25321 or result__h25348)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result5321_0x4_re_ETC__q47 =
	      result__h25321;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result5321_0x4_re_ETC__q47 =
	      result__h25348;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result5321_0x4_re_ETC__q47 =
		   64'd0;
    endcase
  end
  always@(rg_addr or result__h25386 or result__h25413)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result5386_0x4_re_ETC__q48 =
	      result__h25386;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result5386_0x4_re_ETC__q48 =
	      result__h25413;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result5386_0x4_re_ETC__q48 =
		   64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d629 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d657 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result5321_0x4_re_ETC__q47 or
	  rg_addr or
	  master_xactor_rg_rd_data or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d645 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d665 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result5386_0x4_re_ETC__q48)
  begin
    case (rg_f3)
      3'b0:
	  ld_val__h24550 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d629;
      3'b001:
	  ld_val__h24550 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d657;
      3'b010:
	  ld_val__h24550 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result5321_0x4_re_ETC__q47;
      3'b011:
	  ld_val__h24550 =
	      (rg_addr[2:0] == 3'h0) ? master_xactor_rg_rd_data[66:3] : 64'd0;
      3'b100:
	  ld_val__h24550 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d645;
      3'b101:
	  ld_val__h24550 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d665;
      3'b110:
	  ld_val__h24550 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result5386_0x4_re_ETC__q48;
      3'd7: ld_val__h24550 = 64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h26834 or
	  result__h26861 or result__h26888 or result__h26915)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d768 =
	      result__h26834;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d768 =
	      result__h26861;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d768 =
	      result__h26888;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d768 =
	      result__h26915;
      default: IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d768 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h26713 or
	  result__h26740 or result__h26767 or result__h26794)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d760 =
	      result__h26713;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d760 =
	      result__h26740;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d760 =
	      result__h26767;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d760 =
	      result__h26794;
      default: IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d760 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h26480 or
	  result__h26507 or
	  result__h26534 or
	  result__h26561 or
	  result__h26588 or
	  result__h26615 or result__h26642 or result__h26669)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d748 =
	      result__h26480;
      3'h1:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d748 =
	      result__h26507;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d748 =
	      result__h26534;
      3'h3:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d748 =
	      result__h26561;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d748 =
	      result__h26588;
      3'h5:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d748 =
	      result__h26615;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d748 =
	      result__h26642;
      3'h7:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d748 =
	      result__h26669;
    endcase
  end
  always@(rg_addr or
	  result__h26244 or
	  result__h26274 or
	  result__h26301 or
	  result__h26328 or
	  result__h26355 or
	  result__h26382 or result__h26409 or result__h26436)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d732 =
	      result__h26244;
      3'h1:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d732 =
	      result__h26274;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d732 =
	      result__h26301;
      3'h3:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d732 =
	      result__h26328;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d732 =
	      result__h26355;
      3'h5:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d732 =
	      result__h26382;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d732 =
	      result__h26409;
      3'h7:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d732 =
	      result__h26436;
    endcase
  end
  always@(rg_addr or result__h26955 or result__h26982)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result6955_0x4_re_ETC__q63 =
	      result__h26955;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result6955_0x4_re_ETC__q63 =
	      result__h26982;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result6955_0x4_re_ETC__q63 =
		   64'd0;
    endcase
  end
  always@(rg_addr or result__h27020 or result__h27047)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result7020_0x4_re_ETC__q64 =
	      result__h27020;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result7020_0x4_re_ETC__q64 =
	      result__h27047;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result7020_0x4_re_ETC__q64 =
		   64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d732 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d760 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result6955_0x4_re_ETC__q63 or
	  rg_addr or
	  f_near_mem_io_rsps$D_OUT or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d748 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d768 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result7020_0x4_re_ETC__q64)
  begin
    case (rg_f3)
      3'b0:
	  ld_val__h26184 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d732;
      3'b001:
	  ld_val__h26184 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d760;
      3'b010:
	  ld_val__h26184 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result6955_0x4_re_ETC__q63;
      3'b011:
	  ld_val__h26184 =
	      (rg_addr[2:0] == 3'h0) ? f_near_mem_io_rsps$D_OUT[63:0] : 64'd0;
      3'b100:
	  ld_val__h26184 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d748;
      3'b101:
	  ld_val__h26184 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d768;
      3'b110:
	  ld_val__h26184 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result7020_0x4_re_ETC__q64;
      3'd7: ld_val__h26184 = 64'd0;
    endcase
  end
  always@(rg_addr or result__h31882 or result__h31910)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d914 =
	      result__h31882;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d914 =
	      result__h31910;
      default: IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d914 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h31690 or
	  result__h31718 or result__h31746 or result__h31774)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d904 =
	      result__h31690;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d904 =
	      result__h31718;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d904 =
	      result__h31746;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d904 =
	      result__h31774;
      default: IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d904 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h31324 or
	  result__h31352 or
	  result__h31380 or
	  result__h31408 or
	  result__h31436 or
	  result__h31464 or result__h31492 or result__h31520)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d884 =
	      result__h31324;
      3'h1:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d884 =
	      result__h31352;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d884 =
	      result__h31380;
      3'h3:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d884 =
	      result__h31408;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d884 =
	      result__h31436;
      3'h5:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d884 =
	      result__h31464;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d884 =
	      result__h31492;
      3'h7:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d884 =
	      result__h31520;
    endcase
  end
  always@(rg_addr or
	  result__h31565 or
	  result__h31593 or result__h31621 or result__h31649)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d896 =
	      result__h31565;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d896 =
	      result__h31593;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d896 =
	      result__h31621;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d896 =
	      result__h31649;
      default: IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d896 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h30203 or
	  result__h31111 or
	  result__h31139 or
	  result__h31167 or
	  result__h31195 or
	  result__h31223 or result__h31251 or result__h31279)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d868 =
	      result__h30203;
      3'h1:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d868 =
	      result__h31111;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d868 =
	      result__h31139;
      3'h3:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d868 =
	      result__h31167;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d868 =
	      result__h31195;
      3'h5:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d868 =
	      result__h31223;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d868 =
	      result__h31251;
      3'h7:
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d868 =
	      result__h31279;
    endcase
  end
  always@(rg_addr or result__h31815 or result__h31843)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result1815_0x4_re_ETC__q65 =
	      result__h31815;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result1815_0x4_re_ETC__q65 =
	      result__h31843;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result1815_0x4_re_ETC__q65 =
		   64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d868 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d896 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result1815_0x4_re_ETC__q65 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_IF_r_ETC___d915 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d884 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d904 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d914)
  begin
    case (rg_f3)
      3'b0:
	  w1__h30008 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d868;
      3'b001:
	  w1__h30008 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d896;
      3'b010:
	  w1__h30008 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result1815_0x4_re_ETC__q65;
      3'b011:
	  w1__h30008 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_IF_r_ETC___d915;
      3'b100:
	  w1__h30008 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d884;
      3'b101:
	  w1__h30008 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d904;
      3'b110:
	  w1__h30008 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d914;
      3'd7: w1__h30008 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d868 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d896 or
	  w1___1__h30083 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_IF_r_ETC___d915 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d884 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d904 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d914)
  begin
    case (rg_f3)
      3'b0:
	  w1__h30012 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d868;
      3'b001:
	  w1__h30012 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d896;
      3'b010: w1__h30012 = w1___1__h30083;
      3'b011:
	  w1__h30012 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_IF_r_ETC___d915;
      3'b100:
	  w1__h30012 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d884;
      3'b101:
	  w1__h30012 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d904;
      3'b110:
	  w1__h30012 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d914;
      3'd7: w1__h30012 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d868 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d896 or
	  w10008_BITS_31_TO_0__q66 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_IF_r_ETC___d915 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d884 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d904 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d914)
  begin
    case (rg_f3)
      3'b0:
	  new_ld_val__h29726 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d868;
      3'b001:
	  new_ld_val__h29726 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_SEXT_ETC___d896;
      3'b010:
	  new_ld_val__h29726 =
	      { {32{w10008_BITS_31_TO_0__q66[31]}},
		w10008_BITS_31_TO_0__q66 };
      3'b011:
	  new_ld_val__h29726 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_IF_r_ETC___d915;
      3'b100:
	  new_ld_val__h29726 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d884;
      3'b101:
	  new_ld_val__h29726 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d904;
      3'b110:
	  new_ld_val__h29726 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_0_CO_ETC___d914;
      3'd7: new_ld_val__h29726 = 64'd0;
    endcase
  end
  always@(rg_amo_funct7 or
	  new_st_val__h32003 or
	  new_st_val__h30115 or
	  w2__h30014 or
	  new_st_val__h31975 or
	  new_st_val__h31983 or
	  new_st_val__h31979 or
	  new_st_val__h31998 or new_st_val__h31987 or new_st_val__h31992)
  begin
    case (rg_amo_funct7[6:2])
      5'b0: _theResult_____2__h30020 = new_st_val__h30115;
      5'b00001: _theResult_____2__h30020 = w2__h30014;
      5'b00100: _theResult_____2__h30020 = new_st_val__h31975;
      5'b01000: _theResult_____2__h30020 = new_st_val__h31983;
      5'b01100: _theResult_____2__h30020 = new_st_val__h31979;
      5'b10000: _theResult_____2__h30020 = new_st_val__h31998;
      5'b11000: _theResult_____2__h30020 = new_st_val__h31987;
      5'b11100: _theResult_____2__h30020 = new_st_val__h31992;
      default: _theResult_____2__h30020 = new_st_val__h32003;
    endcase
  end
  always@(rg_f3 or st_val__h29738 or _theResult___fst__h29930)
  begin
    case (rg_f3[1:0])
      2'b0, 2'b01, 2'b10:
	  mem_req_wr_data_wdata__h29998 = _theResult___fst__h29930;
      2'd3: mem_req_wr_data_wdata__h29998 = st_val__h29738;
    endcase
  end
  always@(rg_addr or ram_word64_set$DOB or new_st_val__h17394)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q67 =
	      { ram_word64_set$DOB[63:32], new_st_val__h17394[31:0] };
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q67 =
	      { new_st_val__h17394[31:0], ram_word64_set$DOB[31:0] };
      default: CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q67 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_f3 or
	  ram_word64_set$DOB or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d408 or
	  IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d417 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q67 or
	  new_st_val__h17394)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_30_EQ_0b0_31_THEN_IF_rg_addr_7_BITS_2_ETC___d426 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d408;
      3'b001:
	  IF_rg_f3_30_EQ_0b0_31_THEN_IF_rg_addr_7_BITS_2_ETC___d426 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_ram__ETC___d417;
      3'b010:
	  IF_rg_f3_30_EQ_0b0_31_THEN_IF_rg_addr_7_BITS_2_ETC___d426 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q67;
      3'b011:
	  IF_rg_f3_30_EQ_0b0_31_THEN_IF_rg_addr_7_BITS_2_ETC___d426 =
	      new_st_val__h17394;
      default: IF_rg_f3_30_EQ_0b0_31_THEN_IF_rg_addr_7_BITS_2_ETC___d426 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_f3 or IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_1_EL_ETC___d263)
  begin
    case (rg_f3)
      3'b0, 3'b001, 3'b010, 3'b011, 3'b100, 3'b101, 3'b110:
	  new_value__h15532 =
	      IF_rg_addr_7_BITS_2_TO_0_4_EQ_0x0_32_THEN_1_EL_ETC___d263;
      3'd7: new_value__h15532 = 64'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY 4'd0;
	master_xactor_crg_rd_addr_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	master_xactor_crg_rd_data_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	master_xactor_crg_wr_addr_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	master_xactor_crg_wr_data_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	master_xactor_crg_wr_resp_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY 7'd0;
	rg_lower_word32_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_requesting_cline <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (ctr_wr_rsps_pending_crg$EN)
	  ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY
	      ctr_wr_rsps_pending_crg$D_IN;
	if (master_xactor_crg_rd_addr_full$EN)
	  master_xactor_crg_rd_addr_full <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_crg_rd_addr_full$D_IN;
	if (master_xactor_crg_rd_data_full$EN)
	  master_xactor_crg_rd_data_full <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_crg_rd_data_full$D_IN;
	if (master_xactor_crg_wr_addr_full$EN)
	  master_xactor_crg_wr_addr_full <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_crg_wr_addr_full$D_IN;
	if (master_xactor_crg_wr_data_full$EN)
	  master_xactor_crg_wr_data_full <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_crg_wr_data_full$D_IN;
	if (master_xactor_crg_wr_resp_full$EN)
	  master_xactor_crg_wr_resp_full <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_crg_wr_resp_full$D_IN;
	if (rg_cset_in_cache$EN)
	  rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY rg_cset_in_cache$D_IN;
	if (rg_lower_word32_full$EN)
	  rg_lower_word32_full <= `BSV_ASSIGNMENT_DELAY
	      rg_lower_word32_full$D_IN;
	if (rg_lrsc_valid$EN)
	  rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY rg_lrsc_valid$D_IN;
	if (rg_requesting_cline$EN)
	  rg_requesting_cline <= `BSV_ASSIGNMENT_DELAY
	      rg_requesting_cline$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
      end
    if (master_xactor_rg_rd_addr$EN)
      master_xactor_rg_rd_addr <= `BSV_ASSIGNMENT_DELAY
	  master_xactor_rg_rd_addr$D_IN;
    if (master_xactor_rg_rd_data$EN)
      master_xactor_rg_rd_data <= `BSV_ASSIGNMENT_DELAY
	  master_xactor_rg_rd_data$D_IN;
    if (master_xactor_rg_wr_addr$EN)
      master_xactor_rg_wr_addr <= `BSV_ASSIGNMENT_DELAY
	  master_xactor_rg_wr_addr$D_IN;
    if (master_xactor_rg_wr_data$EN)
      master_xactor_rg_wr_data <= `BSV_ASSIGNMENT_DELAY
	  master_xactor_rg_wr_data$D_IN;
    if (master_xactor_rg_wr_resp$EN)
      master_xactor_rg_wr_resp <= `BSV_ASSIGNMENT_DELAY
	  master_xactor_rg_wr_resp$D_IN;
    if (rg_addr$EN) rg_addr <= `BSV_ASSIGNMENT_DELAY rg_addr$D_IN;
    if (rg_amo_funct7$EN)
      rg_amo_funct7 <= `BSV_ASSIGNMENT_DELAY rg_amo_funct7$D_IN;
    if (rg_error_during_refill$EN)
      rg_error_during_refill <= `BSV_ASSIGNMENT_DELAY
	  rg_error_during_refill$D_IN;
    if (rg_exc_code$EN) rg_exc_code <= `BSV_ASSIGNMENT_DELAY rg_exc_code$D_IN;
    if (rg_f3$EN) rg_f3 <= `BSV_ASSIGNMENT_DELAY rg_f3$D_IN;
    if (rg_ld_val$EN) rg_ld_val <= `BSV_ASSIGNMENT_DELAY rg_ld_val$D_IN;
    if (rg_lower_word32$EN)
      rg_lower_word32 <= `BSV_ASSIGNMENT_DELAY rg_lower_word32$D_IN;
    if (rg_lrsc_pa$EN) rg_lrsc_pa <= `BSV_ASSIGNMENT_DELAY rg_lrsc_pa$D_IN;
    if (rg_op$EN) rg_op <= `BSV_ASSIGNMENT_DELAY rg_op$D_IN;
    if (rg_pa$EN) rg_pa <= `BSV_ASSIGNMENT_DELAY rg_pa$D_IN;
    if (rg_pte_pa$EN) rg_pte_pa <= `BSV_ASSIGNMENT_DELAY rg_pte_pa$D_IN;
    if (rg_req_byte_in_cline$EN)
      rg_req_byte_in_cline <= `BSV_ASSIGNMENT_DELAY rg_req_byte_in_cline$D_IN;
    if (rg_st_amo_val$EN)
      rg_st_amo_val <= `BSV_ASSIGNMENT_DELAY rg_st_amo_val$D_IN;
    if (rg_word64_set_in_cache$EN)
      rg_word64_set_in_cache <= `BSV_ASSIGNMENT_DELAY
	  rg_word64_set_in_cache$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_verbosity = 4'hA;
    ctr_wr_rsps_pending_crg = 4'hA;
    master_xactor_crg_rd_addr_full = 1'h0;
    master_xactor_crg_rd_data_full = 1'h0;
    master_xactor_crg_wr_addr_full = 1'h0;
    master_xactor_crg_wr_data_full = 1'h0;
    master_xactor_crg_wr_resp_full = 1'h0;
    master_xactor_rg_rd_addr = 97'h0AAAAAAAAAAAAAAAAAAAAAAAA;
    master_xactor_rg_rd_data = 71'h2AAAAAAAAAAAAAAAAA;
    master_xactor_rg_wr_addr = 97'h0AAAAAAAAAAAAAAAAAAAAAAAA;
    master_xactor_rg_wr_data = 77'h0AAAAAAAAAAAAAAAAAAA;
    master_xactor_rg_wr_resp = 6'h2A;
    rg_addr = 32'hAAAAAAAA;
    rg_amo_funct7 = 7'h2A;
    rg_cset_in_cache = 7'h2A;
    rg_error_during_refill = 1'h0;
    rg_exc_code = 4'hA;
    rg_f3 = 3'h2;
    rg_ld_val = 64'hAAAAAAAAAAAAAAAA;
    rg_lower_word32 = 32'hAAAAAAAA;
    rg_lower_word32_full = 1'h0;
    rg_lrsc_pa = 32'hAAAAAAAA;
    rg_lrsc_valid = 1'h0;
    rg_op = 2'h2;
    rg_pa = 32'hAAAAAAAA;
    rg_pte_pa = 32'hAAAAAAAA;
    rg_req_byte_in_cline = 64'hAAAAAAAAAAAAAAAA;
    rg_requesting_cline = 1'h0;
    rg_st_amo_val = 64'hAAAAAAAAAAAAAAAA;
    rg_state = 4'hA;
    rg_word64_set_in_cache = 9'h0AA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 &&
	  cfg_verbosity != 4'd0 &&
	  !f_reset_reqs$D_OUT)
	begin
	  v__h4097 = $stime;
	  #0;
	end
    v__h4091 = v__h4097 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 &&
	  cfg_verbosity != 4'd0 &&
	  !f_reset_reqs$D_OUT)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		   v__h4091,
		   "D_MMU_Cache",
		   $signed(32'd128),
		   $signed(32'd1));
	else
	  $display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		   v__h4091,
		   "I_MMU_Cache",
		   $signed(32'd128),
		   $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  f_reset_reqs$D_OUT)
	begin
	  v__h4198 = $stime;
	  #0;
	end
    v__h4192 = v__h4198 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  f_reset_reqs$D_OUT)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_reset: Flushed", v__h4192, "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_reset: Flushed", v__h4192, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_rereq && NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    fa_req_ram_B tagCSet [0x%0x] word64_set [0x%0d]",
		 rg_addr[11:5],
		 rg_addr[11:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h25881 = $stime;
	  #0;
	end
    v__h25875 = v__h25881 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_near_mem_read_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h25875,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_near_mem_read_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h25875,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    ",
		 { 1'd1,
		   mem_req_wr_addr_awaddr__h29788,
		   72'hAAAAAAAAAAAAAAAAAA });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h26066 = $stime;
	  #0;
	end
    v__h26060 = v__h26066 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_near_mem_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h26060,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_near_mem_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h26060,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("Near_Mem_IO_Rsp { ", "read_not_write: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "ok: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  f_near_mem_io_rsps$D_OUT[64])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  !f_near_mem_io_rsps$D_OUT[64])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", f_near_mem_io_rsps$D_OUT[63:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  f_near_mem_io_rsps$D_OUT[64] &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h27173 = $stime;
	  #0;
	end
    v__h27167 = v__h27173 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  f_near_mem_io_rsps$D_OUT[64] &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h27167,
		   "D_MMU_Cache",
		   rg_addr,
		   ld_val__h26184);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h27167,
		   "I_MMU_Cache",
		   rg_addr,
		   ld_val__h26184);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  !f_near_mem_io_rsps$D_OUT[64] &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h27280 = $stime;
	  #0;
	end
    v__h27274 = v__h27280 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  !f_near_mem_io_rsps$D_OUT[64] &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_near_mem_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		   v__h27274,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_io_near_mem_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		   v__h27274,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_maintain_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h27385 = $stime;
	  #0;
	end
    v__h27379 = v__h27385 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_maintain_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h27379,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_ld_val);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h27379,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_ld_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h28667 = $stime;
	  #0;
	end
    v__h28661 = v__h28667 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_near_mem_write_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h28661,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_near_mem_write_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h28661,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("Near_Mem_IO_Req { ", "read_not_write: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", mem_req_wr_addr_awaddr__h29788);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", value__h28727);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", mem_req_wr_data_wstrb__h29999, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h28809 = $stime;
	  #0;
	end
    v__h28803 = v__h28809 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_near_mem_write_rsp",
		   v__h28803,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_io_near_mem_write_rsp",
		   v__h28803,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("Near_Mem_IO_Rsp { ", "read_not_write: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "ok: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  f_near_mem_io_rsps$D_OUT[64])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  !f_near_mem_io_rsps$D_OUT[64])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", f_near_mem_io_rsps$D_OUT[63:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h28989 = $stime;
	  #0;
	end
    v__h28983 = v__h28989 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_AMO_SC_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h28983,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_AMO_SC_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h28983,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    FAIL due to I/O address.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_reset &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h3732 = $stime;
	  #0;
	end
    v__h3726 = v__h3732 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_reset &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_start_reset", v__h3726, "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_start_reset", v__h3726, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_38___d539)
	begin
	  v__h21787 = $stime;
	  #0;
	end
    v__h21781 = v__h21787 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_38___d539)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_cache_refill_req_loop",
		   v__h21781,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_cache_refill_req_loop",
		   v__h21781,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", cline_fabric_addr__h21840);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 3'b011);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h4347 = $stime;
	  #0;
	end
    v__h4341 = v__h4347 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h",
		   v__h4341,
		   "D_MMU_Cache",
		   rg_addr);
	else
	  $display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h",
		   v__h4341,
		   "I_MMU_Cache",
		   rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("        eaddr = {CTag 0x%0h  CSet 0x%0h  Word64 0x%0h  Byte 0x%0h}",
		 pa_ctag__h5199,
		 rg_addr[11:5],
		 rg_addr[4:3],
		 rg_addr[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("        CSet 0x%0x: (state, tag):", rg_addr[11:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(" (");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  ram_state_and_ctag_cset$DOB[22])
	$write("CTAG_CLEAN");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  !ram_state_and_ctag_cset$DOB[22])
	$write("CTAG_EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  ram_state_and_ctag_cset$DOB[22])
	$write(", 0x%0x", ram_state_and_ctag_cset$DOB[21:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  !ram_state_and_ctag_cset$DOB[22])
	$write(", --");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(")");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:5],
	       rg_addr[4:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(" 0x%0x", ram_word64_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("    TLB result: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("VM_Xlate_Result { ", "outcome: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("VM_XLATE_OK");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "pa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 4'hA, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && soc_map$m_is_IO_addr &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    => IO_REQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d267)
	begin
	  v__h12854 = $stime;
	  #0;
	end
    v__h12848 = v__h12854 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d267)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h12848,
		   "D_MMU_Cache",
		   rg_addr,
		   word64__h5341,
		   64'd0);
	else
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h12848,
		   "I_MMU_Cache",
		   rg_addr,
		   word64__h5341,
		   64'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op == 2'd2 &&
	  rg_amo_funct7[6:2] == 5'b00010 &&
	  ram_state_and_ctag_cset$DOB[22] &&
	  ram_state_and_ctag_cset_b_read__5_BITS_21_TO_0_ETC___d71 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("        AMO LR: reserving PA 0x%0h", rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d267)
	$display("        Read-hit: addr 0x%0h word64 0x%0h",
		 rg_addr,
		 word64__h5341);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op_0_EQ_0_1_OR_rg_op_0_EQ_2_2_AND_rg_amo_fu_ETC___d280)
	$display("        Read Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op == 2'd2 &&
	  rg_amo_funct7_3_BITS_6_TO_2_4_EQ_0b10_5_AND_NO_ETC___d284)
	$display("        AMO LR: cache refill: cancelling LR/SC reservation for PA 0x%0h",
		 rg_lrsc_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op == 2'd1 &&
	  rg_addr_7_EQ_rg_lrsc_pa_4___d109 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("        ST: cancelling LR/SC reservation for PA", rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op == 2'd2 &&
	  rg_amo_funct7[6:2] == 5'b00011 &&
	  rg_lrsc_valid &&
	  !rg_lrsc_pa_4_EQ_rg_addr_7___d55 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("        AMO SC: fail: reserved addr 0x%0h, this address 0x%0h",
		 rg_lrsc_pa,
		 rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op == 2'd2 &&
	  rg_amo_funct7[6:2] == 5'b00011 &&
	  !rg_lrsc_valid &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("        AMO SC: fail due to invalid LR/SC reservation");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op == 2'd2 &&
	  rg_amo_funct7[6:2] == 5'b00011 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("        AMO SC result = %0d", lrsc_result__h13231);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d478)
	$display("        Write-Cache-Hit: pa 0x%0h word64 0x%0h",
		 rg_addr,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d478)
	$write("        New Word64_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d478)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:5],
	       rg_addr[4:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d478)
	$write(" 0x%0x",
	       IF_rg_f3_30_EQ_0b0_31_THEN_IF_rg_addr_7_BITS_2_ETC___d352);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d478)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op != 2'd0 &&
	  (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	  (rg_op == 2'd1 ||
	   rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	  NOT_rg_op_0_EQ_2_2_0_OR_NOT_rg_amo_funct7_3_BI_ETC___d480)
	$display("        Write-Cache-Miss: pa 0x%0h word64 0x%0h",
		 rg_addr,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d486)
	$display("        Write-Cache-Hit/Miss: eaddr 0x%0h word64 0x%0h",
		 rg_addr,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d491)
	begin
	  v__h17113 = $stime;
	  #0;
	end
    v__h17107 = v__h17113 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d491)
	$display("%0d: ERROR: CreditCounter: overflow", v__h17107);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d491)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d486)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d486)
	$write("AXI4_Wr_Addr { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d486)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d486)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d486)
	$write("'h%h", mem_req_wr_addr_awaddr__h20116);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d486)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d486)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d486)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d486)
	$write("'h%h", value__h32337);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d486)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d486)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d486)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d486)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d486)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d486)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d486)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d486)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d486)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d486)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d486)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d486)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d486)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d486)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d486)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d486)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d486)
	$write("AXI4_Wr_Data { ", "wid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d486)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d486)
	$write(", ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d486)
	$write("'h%h", mem_req_wr_data_wdata__h16883);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d486)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d486)
	$write("'h%h", mem_req_wr_data_wstrb__h20327);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d486)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d486)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d486)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d486)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d486)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_0_EQ_0_1_9_AND_NOT_rg_op_0_EQ_2_2_0__ETC___d486)
	$display("        => rl_write_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op_0_EQ_2_2_AND_rg_amo_funct7_3_BITS_6_TO_2_ETC___d497)
	begin
	  v__h16441 = $stime;
	  #0;
	end
    v__h16435 = v__h16441 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op_0_EQ_2_2_AND_rg_amo_funct7_3_BITS_6_TO_2_ETC___d497)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h16435,
		   "D_MMU_Cache",
		   rg_addr,
		   64'd1,
		   64'd0);
	else
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h16435,
		   "I_MMU_Cache",
		   rg_addr,
		   64'd1,
		   64'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op_0_EQ_2_2_AND_rg_amo_funct7_3_BITS_6_TO_2_ETC___d497)
	$display("        AMO SC: Fail response for addr 0x%0h", rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op != 2'd0 &&
	  (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_rg_op_0_EQ_1_8_17_AND_NOT_rg_op_0_EQ_2_2_0_ETC___d501)
	$display("        AMO Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d506)
	$display("        AMO: addr 0x%0h amo_f7 0x%0h f3 %0d rs2_val 0x%0h",
		 rg_addr,
		 rg_amo_funct7,
		 rg_f3,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d506)
	$display("          PA 0x%0h ", rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d506)
	$display("          Cache word64 0x%0h, load-result 0x%0h",
		 word64__h5341,
		 word64__h5341);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d506)
	$display("          0x%0h  op  0x%0h -> 0x%0h",
		 word64__h5341,
		 word64__h5341,
		 new_st_val__h17394);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d506)
	$write("          New Word64_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d506)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:5],
	       rg_addr[4:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d506)
	$write(" 0x%0x",
	       IF_rg_f3_30_EQ_0b0_31_THEN_IF_rg_addr_7_BITS_2_ETC___d426);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d506)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d510)
	begin
	  v__h20525 = $stime;
	  #0;
	end
    v__h20519 = v__h20525 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d510)
	$display("%0d: ERROR: CreditCounter: overflow", v__h20519);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d510)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d506)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d506)
	$write("AXI4_Wr_Addr { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d506)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d506)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d506)
	$write("'h%h", mem_req_wr_addr_awaddr__h20116);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d506)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d506)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d506)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d506)
	$write("'h%h", value__h32337);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d506)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d506)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d506)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d506)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d506)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d506)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d506)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d506)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d506)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d506)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d506)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d506)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d506)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d506)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d506)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d506)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d506)
	$write("AXI4_Wr_Data { ", "wid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d506)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d506)
	$write(", ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d506)
	$write("'h%h", mem_req_wr_data_wdata__h20326);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d506)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d506)
	$write("'h%h", mem_req_wr_data_wstrb__h20327);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d506)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d506)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d506)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d506)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_0_CONCAT_rg_addr_7_8__ETC___d506)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op != 2'd0 &&
	  (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_rg_op_0_EQ_1_8_17_AND_NOT_rg_op_0_EQ_2_2_0_ETC___d514)
	$display("        AMO_op: cancelling LR/SC reservation for PA",
		 rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_38___d539)
	begin
	  v__h22158 = $stime;
	  #0;
	end
    v__h22152 = v__h22158 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_38___d539)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_cache_refill_rsps_loop:",
		   v__h22152,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_cache_refill_rsps_loop:",
		   v__h22152,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_38___d539)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_38___d539)
	$write("AXI4_Rd_Data { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_38___d539)
	$write("'h%h", master_xactor_rg_rd_data[70:67]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_38___d539)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_38___d539)
	$write("'h%h", master_xactor_rg_rd_data[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_38___d539)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_38___d539)
	$write("'h%h", master_xactor_rg_rd_data[2:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_38___d539)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_38___d539 &&
	  master_xactor_rg_rd_data[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_38___d539 &&
	  !master_xactor_rg_rd_data[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_38___d539)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_38___d539)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_38___d539)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  master_xactor_rg_rd_data[2:1] != 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h22399 = $stime;
	  #0;
	end
    v__h22393 = v__h22399 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  master_xactor_rg_rd_data[2:1] != 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d",
		   v__h22393,
		   "D_MMU_Cache",
		   access_exc_code__h3265);
	else
	  $display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d",
		   v__h22393,
		   "I_MMU_Cache",
		   access_exc_code__h3265);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  rg_word64_set_in_cache[1:0] == 2'd3 &&
	  (master_xactor_rg_rd_data[2:1] != 2'b0 || rg_error_during_refill) &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    => MODULE_EXCEPTION_RSP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  rg_word64_set_in_cache[1:0] == 2'd3 &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !rg_error_during_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    => CACHE_REREQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_38___d539)
	$display("        Updating Cache [0x%0x] (Word64_Set %0d) old => new",
		 rg_word64_set_in_cache,
		 rg_word64_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_38___d539)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:5],
	       rg_word64_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_38___d539)
	$write(" 0x%0x", ram_word64_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_38___d539)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_38___d539)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:5],
	       rg_word64_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_38___d539)
	$write(" 0x%0x", master_xactor_rg_rd_data[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_38___d539)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h24037 = $stime;
	  #0;
	end
    v__h24031 = v__h24037 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_read_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h24031,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_read_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h24031,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", mem_req_wr_addr_awaddr__h29788);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", value__h29311);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h24441 = $stime;
	  #0;
	end
    v__h24435 = v__h24441 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h24435,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h24435,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("AXI4_Rd_Data { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", master_xactor_rg_rd_data[70:67]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", master_xactor_rg_rd_data[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", master_xactor_rg_rd_data[2:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  master_xactor_rg_rd_data[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  !master_xactor_rg_rd_data[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h25541 = $stime;
	  #0;
	end
    v__h25535 = v__h25541 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h25535,
		   "D_MMU_Cache",
		   rg_addr,
		   ld_val__h24550);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h25535,
		   "I_MMU_Cache",
		   rg_addr,
		   ld_val__h24550);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_rg_rd_data[2:1] != 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h25648 = $stime;
	  #0;
	end
    v__h25642 = v__h25648 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_rg_rd_data[2:1] != 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		   v__h25642,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		   v__h25642,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h27495 = $stime;
	  #0;
	end
    v__h27489 = v__h27495 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_write_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h27489,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_write_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h27489,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && ctr_wr_rsps_pending_crg == 4'd15)
	begin
	  v__h28017 = $stime;
	  #0;
	end
    v__h28011 = v__h28017 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && ctr_wr_rsps_pending_crg == 4'd15)
	$display("%0d: ERROR: CreditCounter: overflow", v__h28011);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && ctr_wr_rsps_pending_crg == 4'd15)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("AXI4_Wr_Addr { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", mem_req_wr_addr_awaddr__h29788);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", value__h32337);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("AXI4_Wr_Data { ", "wid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", value__h28727);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", mem_req_wr_data_wstrb__h29999);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h29107 = $stime;
	  #0;
	end
    v__h29101 = v__h29107 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_AMO_op_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h29101,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_AMO_op_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h29101,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", mem_req_wr_addr_awaddr__h29788);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", value__h29311);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h29425 = $stime;
	  #0;
	end
    v__h29419 = v__h29425 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_AMO_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h29419,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_AMO_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h29419,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("AXI4_Rd_Data { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", master_xactor_rg_rd_data[70:67]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", master_xactor_rg_rd_data[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", master_xactor_rg_rd_data[2:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  master_xactor_rg_rd_data[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  !master_xactor_rg_rd_data[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h29600 = $stime;
	  #0;
	end
    v__h29594 = v__h29600 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_AMO_read_rsp; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h29594,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_AMO_read_rsp; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h29594,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  ctr_wr_rsps_pending_crg == 4'd15)
	begin
	  v__h32213 = $stime;
	  #0;
	end
    v__h32207 = v__h32213 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  ctr_wr_rsps_pending_crg == 4'd15)
	$display("%0d: ERROR: CreditCounter: overflow", v__h32207);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  ctr_wr_rsps_pending_crg == 4'd15)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("AXI4_Wr_Addr { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", mem_req_wr_addr_awaddr__h29788);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", value__h32337);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("AXI4_Wr_Data { ", "wid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", mem_req_wr_data_wdata__h29998);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", mem_req_wr_data_wstrb__h29999);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h32465 = $stime;
	  #0;
	end
    v__h32459 = v__h32465 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h32459,
		   "D_MMU_Cache",
		   rg_addr,
		   new_ld_val__h29726);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h32459,
		   "I_MMU_Cache",
		   rg_addr,
		   new_ld_val__h29726);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] != 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h29696 = $stime;
	  #0;
	end
    v__h29690 = v__h29696 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] != 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_AMO_read_rsp: FABRIC_RSP_ERR: raising trap STORE_AMO_ACCESS_FAULT",
		   v__h29690,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_io_AMO_read_rsp: FABRIC_RSP_ERR: raising trap STORE_AMO_ACCESS_FAULT",
		   v__h29690,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h33464 = $stime;
	  #0;
	end
    v__h33458 = v__h33464 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $write("%0d: %s.req: op:", v__h33458, "D_MMU_Cache");
	else
	  $write("%0d: %s.req: op:", v__h33458, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d12 && req_op == 2'd0)
	$write("CACHE_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d12 && req_op == 2'd1)
	$write("CACHE_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  req_op != 2'd0 &&
	  req_op != 2'd1)
	$write("CACHE_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(" f3:%0d addr:0x%0h st_value:0x%0h priv:",
	       req_f3,
	       req_addr,
	       req_st_value);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  req_priv == 2'b0)
	$write("U");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  req_priv == 2'b01)
	$write("S");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  req_priv == 2'b11)
	$write("M");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  req_priv != 2'b0 &&
	  req_priv != 2'b01 &&
	  req_priv != 2'b11)
	$write("RESERVED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(" sstatus_SUM:%0d mstatus_MXR:%0d satp:0x%0h",
	       req_sstatus_SUM,
	       req_mstatus_MXR,
	       req_satp,
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    amo_funct7 = 0x%0h", req_amo_funct7);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req &&
	  req_f3_BITS_1_TO_0_005_EQ_0b0_006_OR_req_f3_BI_ETC___d1035 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    fa_req_ram_B tagCSet [0x%0x] word64_set [0x%0d]",
		 req_addr[11:5],
		 req_addr[11:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h20970 = $stime;
	  #0;
	end
    v__h20964 = v__h20970 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_start_cache_refill: ",
		   v__h20964,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_start_cache_refill: ",
		   v__h20964,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", { 32'd0, cline_addr__h21839 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 3'b011);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    Victim way is %0d; => CACHE_REFILL", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h33085 = $stime;
	  #0;
	end
    v__h33079 = v__h33085 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $write("%0d: %s.rl_discard_write_rsp: pending %0d ",
		 v__h33079,
		 "D_MMU_Cache",
		 $unsigned(b__h20924));
	else
	  $write("%0d: %s.rl_discard_write_rsp: pending %0d ",
		 v__h33079,
		 "I_MMU_Cache",
		 $unsigned(b__h20924));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("AXI4_Wr_Resp { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", master_xactor_rg_wr_resp[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", master_xactor_rg_wr_resp[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] == 2'b0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] != 2'b0)
	begin
	  v__h33046 = $stime;
	  #0;
	end
    v__h33040 = v__h33046 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] != 2'b0)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_discard_write_rsp: fabric response error: exit",
		   v__h33040,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_discard_write_rsp: fabric response error: exit",
		   v__h33040,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] != 2'b0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] != 2'b0)
	$write("AXI4_Wr_Resp { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] != 2'b0)
	$write("'h%h", master_xactor_rg_wr_resp[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] != 2'b0)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] != 2'b0)
	$write("'h%h", master_xactor_rg_wr_resp[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] != 2'b0)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] != 2'b0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] != 2'b0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] != 2'b0)
	$finish(32'd1);
  end
  // synopsys translate_on
endmodule  // mkMMU_Cache

