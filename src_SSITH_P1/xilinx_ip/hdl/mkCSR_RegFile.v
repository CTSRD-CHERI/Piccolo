//
// Generated by Bluespec Compiler, version 2019.05.beta2 (build a88bf40db, 2019-05-24)
//
// On Fri Oct 23 17:47:40 BST 2020
//
//
// Ports:
// Name                         I/O  size props
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1
// read_csr                       O    33
// read_csr_port2                 O    33
// read_scr                       O    84
// mav_read_csr                   O    33
// mav_csr_write                  O    65
// mav_scr_write                  O    83
// read_misa                      O    28 const
// read_mstatus                   O    32 reg
// read_ustatus                   O    32
// read_satp                      O    32
// csr_trap_actions               O   149
// RDY_csr_trap_actions           O     1 const
// csr_ret_actions                O   127
// RDY_csr_ret_actions            O     1 const
// read_csr_minstret              O    64 reg
// read_csr_mcycle                O    64 reg
// read_csr_mtime                 O    64 reg
// access_permitted_1             O     2
// access_permitted_2             O     2
// access_permitted_scr           O     2
// csr_counter_read_fault         O     1
// csr_mip_read                   O    32
// interrupt_pending              O     7
// wfi_resume                     O     1
// nmi_pending                    O     1 reg
// read_dpc                       O    32 reg
// RDY_read_dpc                   O     1 const
// RDY_write_dpc                  O     1 const
// dcsr_break_enters_debug        O     1
// RDY_dcsr_break_enters_debug    O     1 const
// read_dcsr_step                 O     1 reg
// RDY_read_dcsr_step             O     1 const
// RDY_debug                      O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// read_csr_csr_addr              I    12
// read_csr_port2_csr_addr        I    12
// read_scr_scr_addr              I     5
// mav_read_csr_csr_addr          I    12
// mav_csr_write_csr_addr         I    12
// mav_csr_write_word             I    32
// mav_scr_write_scr_addr         I     5
// mav_scr_write_cap              I    83
// csr_trap_actions_from_priv     I     2
// csr_trap_actions_pcc           I    93
// csr_trap_actions_nmi           I     1
// csr_trap_actions_interrupt     I     1
// csr_trap_actions_cheri_exc_code  I     5
// csr_trap_actions_cheri_exc_reg  I     6
// csr_trap_actions_exc_code      I     6
// csr_trap_actions_xtval         I    32
// csr_ret_actions_from_priv      I     2
// access_permitted_1_priv        I     2
// access_permitted_1_csr_addr    I    12
// access_permitted_1_read_not_write  I     1
// access_permitted_2_priv        I     2
// access_permitted_2_csr_addr    I    12
// access_permitted_2_read_not_write  I     1
// access_permitted_scr_priv      I     2
// access_permitted_scr_scr_addr  I     5
// access_permitted_scr_read_not_write  I     1 unused
// csr_counter_read_fault_priv    I     2
// csr_counter_read_fault_csr_addr  I    12
// m_external_interrupt_req_set_not_clear  I     1 reg
// s_external_interrupt_req_set_not_clear  I     1 reg
// timer_interrupt_req_set_not_clear  I     1 reg
// software_interrupt_req_set_not_clear  I     1 reg
// interrupt_pending_cur_priv     I     2
// nmi_req_set_not_clear          I     1
// write_dpc_pc                   I    32
// dcsr_break_enters_debug_cur_priv  I     2
// write_dcsr_cause_priv_cause    I     3
// write_dcsr_cause_priv_priv     I     2
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_csr_minstret_incr           I     1
// EN_write_dpc                   I     1
// EN_write_dcsr_cause_priv       I     1
// EN_debug                       I     1 unused
// EN_mav_read_csr                I     1 unused
// EN_mav_csr_write               I     1
// EN_mav_scr_write               I     1
// EN_csr_trap_actions            I     1
// EN_csr_ret_actions             I     1
//
// Combinational paths from inputs to outputs:
//   read_csr_csr_addr -> read_csr
//   read_csr_port2_csr_addr -> read_csr_port2
//   read_scr_scr_addr -> read_scr
//   (access_permitted_1_priv,
//    access_permitted_1_csr_addr,
//    access_permitted_1_read_not_write) -> access_permitted_1
//   (access_permitted_2_priv,
//    access_permitted_2_csr_addr,
//    access_permitted_2_read_not_write) -> access_permitted_2
//   (access_permitted_scr_priv,
//    access_permitted_scr_scr_addr) -> access_permitted_scr
//   (csr_counter_read_fault_priv,
//    csr_counter_read_fault_csr_addr) -> csr_counter_read_fault
//   interrupt_pending_cur_priv -> interrupt_pending
//   dcsr_break_enters_debug_cur_priv -> dcsr_break_enters_debug
//   mav_read_csr_csr_addr -> mav_read_csr
//   (mav_csr_write_csr_addr,
//    mav_csr_write_word,
//    EN_mav_csr_write) -> mav_csr_write
//   (mav_scr_write_scr_addr, mav_scr_write_cap) -> mav_scr_write
//   (csr_trap_actions_from_priv,
//    csr_trap_actions_nmi,
//    csr_trap_actions_interrupt,
//    csr_trap_actions_exc_code) -> csr_trap_actions
//   csr_ret_actions_from_priv -> csr_ret_actions
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCSR_RegFile(CLK,
		     RST_N,

		     EN_server_reset_request_put,
		     RDY_server_reset_request_put,

		     EN_server_reset_response_get,
		     RDY_server_reset_response_get,

		     read_csr_csr_addr,
		     read_csr,

		     read_csr_port2_csr_addr,
		     read_csr_port2,

		     read_scr_scr_addr,
		     read_scr,

		     mav_read_csr_csr_addr,
		     EN_mav_read_csr,
		     mav_read_csr,

		     mav_csr_write_csr_addr,
		     mav_csr_write_word,
		     EN_mav_csr_write,
		     mav_csr_write,

		     mav_scr_write_scr_addr,
		     mav_scr_write_cap,
		     EN_mav_scr_write,
		     mav_scr_write,

		     read_misa,

		     read_mstatus,

		     read_ustatus,

		     read_satp,

		     csr_trap_actions_from_priv,
		     csr_trap_actions_pcc,
		     csr_trap_actions_nmi,
		     csr_trap_actions_interrupt,
		     csr_trap_actions_cheri_exc_code,
		     csr_trap_actions_cheri_exc_reg,
		     csr_trap_actions_exc_code,
		     csr_trap_actions_xtval,
		     EN_csr_trap_actions,
		     csr_trap_actions,
		     RDY_csr_trap_actions,

		     csr_ret_actions_from_priv,
		     EN_csr_ret_actions,
		     csr_ret_actions,
		     RDY_csr_ret_actions,

		     read_csr_minstret,

		     EN_csr_minstret_incr,

		     read_csr_mcycle,

		     read_csr_mtime,

		     access_permitted_1_priv,
		     access_permitted_1_csr_addr,
		     access_permitted_1_read_not_write,
		     access_permitted_1,

		     access_permitted_2_priv,
		     access_permitted_2_csr_addr,
		     access_permitted_2_read_not_write,
		     access_permitted_2,

		     access_permitted_scr_priv,
		     access_permitted_scr_scr_addr,
		     access_permitted_scr_read_not_write,
		     access_permitted_scr,

		     csr_counter_read_fault_priv,
		     csr_counter_read_fault_csr_addr,
		     csr_counter_read_fault,

		     csr_mip_read,

		     m_external_interrupt_req_set_not_clear,

		     s_external_interrupt_req_set_not_clear,

		     timer_interrupt_req_set_not_clear,

		     software_interrupt_req_set_not_clear,

		     interrupt_pending_cur_priv,
		     interrupt_pending,

		     wfi_resume,

		     nmi_req_set_not_clear,

		     nmi_pending,

		     read_dpc,
		     RDY_read_dpc,

		     write_dpc_pc,
		     EN_write_dpc,
		     RDY_write_dpc,

		     dcsr_break_enters_debug_cur_priv,
		     dcsr_break_enters_debug,
		     RDY_dcsr_break_enters_debug,

		     read_dcsr_step,
		     RDY_read_dcsr_step,

		     write_dcsr_cause_priv_cause,
		     write_dcsr_cause_priv_priv,
		     EN_write_dcsr_cause_priv,

		     EN_debug,
		     RDY_debug);
  input  CLK;
  input  RST_N;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // value method read_csr
  input  [11 : 0] read_csr_csr_addr;
  output [32 : 0] read_csr;

  // value method read_csr_port2
  input  [11 : 0] read_csr_port2_csr_addr;
  output [32 : 0] read_csr_port2;

  // value method read_scr
  input  [4 : 0] read_scr_scr_addr;
  output [83 : 0] read_scr;

  // actionvalue method mav_read_csr
  input  [11 : 0] mav_read_csr_csr_addr;
  input  EN_mav_read_csr;
  output [32 : 0] mav_read_csr;

  // actionvalue method mav_csr_write
  input  [11 : 0] mav_csr_write_csr_addr;
  input  [31 : 0] mav_csr_write_word;
  input  EN_mav_csr_write;
  output [64 : 0] mav_csr_write;

  // actionvalue method mav_scr_write
  input  [4 : 0] mav_scr_write_scr_addr;
  input  [82 : 0] mav_scr_write_cap;
  input  EN_mav_scr_write;
  output [82 : 0] mav_scr_write;

  // value method read_misa
  output [27 : 0] read_misa;

  // value method read_mstatus
  output [31 : 0] read_mstatus;

  // value method read_ustatus
  output [31 : 0] read_ustatus;

  // value method read_satp
  output [31 : 0] read_satp;

  // actionvalue method csr_trap_actions
  input  [1 : 0] csr_trap_actions_from_priv;
  input  [92 : 0] csr_trap_actions_pcc;
  input  csr_trap_actions_nmi;
  input  csr_trap_actions_interrupt;
  input  [4 : 0] csr_trap_actions_cheri_exc_code;
  input  [5 : 0] csr_trap_actions_cheri_exc_reg;
  input  [5 : 0] csr_trap_actions_exc_code;
  input  [31 : 0] csr_trap_actions_xtval;
  input  EN_csr_trap_actions;
  output [148 : 0] csr_trap_actions;
  output RDY_csr_trap_actions;

  // actionvalue method csr_ret_actions
  input  [1 : 0] csr_ret_actions_from_priv;
  input  EN_csr_ret_actions;
  output [126 : 0] csr_ret_actions;
  output RDY_csr_ret_actions;

  // value method read_csr_minstret
  output [63 : 0] read_csr_minstret;

  // action method csr_minstret_incr
  input  EN_csr_minstret_incr;

  // value method read_csr_mcycle
  output [63 : 0] read_csr_mcycle;

  // value method read_csr_mtime
  output [63 : 0] read_csr_mtime;

  // value method access_permitted_1
  input  [1 : 0] access_permitted_1_priv;
  input  [11 : 0] access_permitted_1_csr_addr;
  input  access_permitted_1_read_not_write;
  output [1 : 0] access_permitted_1;

  // value method access_permitted_2
  input  [1 : 0] access_permitted_2_priv;
  input  [11 : 0] access_permitted_2_csr_addr;
  input  access_permitted_2_read_not_write;
  output [1 : 0] access_permitted_2;

  // value method access_permitted_scr
  input  [1 : 0] access_permitted_scr_priv;
  input  [4 : 0] access_permitted_scr_scr_addr;
  input  access_permitted_scr_read_not_write;
  output [1 : 0] access_permitted_scr;

  // value method csr_counter_read_fault
  input  [1 : 0] csr_counter_read_fault_priv;
  input  [11 : 0] csr_counter_read_fault_csr_addr;
  output csr_counter_read_fault;

  // value method csr_mip_read
  output [31 : 0] csr_mip_read;

  // action method m_external_interrupt_req
  input  m_external_interrupt_req_set_not_clear;

  // action method s_external_interrupt_req
  input  s_external_interrupt_req_set_not_clear;

  // action method timer_interrupt_req
  input  timer_interrupt_req_set_not_clear;

  // action method software_interrupt_req
  input  software_interrupt_req_set_not_clear;

  // value method interrupt_pending
  input  [1 : 0] interrupt_pending_cur_priv;
  output [6 : 0] interrupt_pending;

  // value method wfi_resume
  output wfi_resume;

  // action method nmi_req
  input  nmi_req_set_not_clear;

  // value method nmi_pending
  output nmi_pending;

  // value method read_dpc
  output [31 : 0] read_dpc;
  output RDY_read_dpc;

  // action method write_dpc
  input  [31 : 0] write_dpc_pc;
  input  EN_write_dpc;
  output RDY_write_dpc;

  // value method dcsr_break_enters_debug
  input  [1 : 0] dcsr_break_enters_debug_cur_priv;
  output dcsr_break_enters_debug;
  output RDY_dcsr_break_enters_debug;

  // value method read_dcsr_step
  output read_dcsr_step;
  output RDY_read_dcsr_step;

  // action method write_dcsr_cause_priv
  input  [2 : 0] write_dcsr_cause_priv_cause;
  input  [1 : 0] write_dcsr_cause_priv_priv;
  input  EN_write_dcsr_cause_priv;

  // action method debug
  input  EN_debug;
  output RDY_debug;

  // signals for module outputs
  reg dcsr_break_enters_debug;
  wire [148 : 0] csr_trap_actions;
  wire [126 : 0] csr_ret_actions;
  wire [83 : 0] read_scr;
  wire [82 : 0] mav_scr_write;
  wire [64 : 0] mav_csr_write;
  wire [63 : 0] read_csr_mcycle, read_csr_minstret, read_csr_mtime;
  wire [32 : 0] mav_read_csr, read_csr, read_csr_port2;
  wire [31 : 0] csr_mip_read, read_dpc, read_mstatus, read_satp, read_ustatus;
  wire [27 : 0] read_misa;
  wire [6 : 0] interrupt_pending;
  wire [1 : 0] access_permitted_1, access_permitted_2, access_permitted_scr;
  wire RDY_csr_ret_actions,
       RDY_csr_trap_actions,
       RDY_dcsr_break_enters_debug,
       RDY_debug,
       RDY_read_dcsr_step,
       RDY_read_dpc,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_write_dpc,
       csr_counter_read_fault,
       nmi_pending,
       read_dcsr_step,
       wfi_resume;

  // register cfg_verbosity
  reg [3 : 0] cfg_verbosity;
  wire [3 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register csr_mstatus_rg_mstatus
  reg [31 : 0] csr_mstatus_rg_mstatus;
  reg [31 : 0] csr_mstatus_rg_mstatus$D_IN;
  wire csr_mstatus_rg_mstatus$EN;

  // register rg_dcsr
  reg [31 : 0] rg_dcsr;
  reg [31 : 0] rg_dcsr$D_IN;
  wire rg_dcsr$EN;

  // register rg_dpc
  reg [31 : 0] rg_dpc;
  reg [31 : 0] rg_dpc$D_IN;
  wire rg_dpc$EN;

  // register rg_dscratch0
  reg [31 : 0] rg_dscratch0;
  wire [31 : 0] rg_dscratch0$D_IN;
  wire rg_dscratch0$EN;

  // register rg_dscratch1
  reg [31 : 0] rg_dscratch1;
  wire [31 : 0] rg_dscratch1$D_IN;
  wire rg_dscratch1$EN;

  // register rg_mcause
  reg [6 : 0] rg_mcause;
  reg [6 : 0] rg_mcause$D_IN;
  wire rg_mcause$EN;

  // register rg_mccsr
  reg [10 : 0] rg_mccsr;
  wire [10 : 0] rg_mccsr$D_IN;
  wire rg_mccsr$EN;

  // register rg_mcounteren
  reg [2 : 0] rg_mcounteren;
  wire [2 : 0] rg_mcounteren$D_IN;
  wire rg_mcounteren$EN;

  // register rg_mcycle
  reg [63 : 0] rg_mcycle;
  wire [63 : 0] rg_mcycle$D_IN;
  wire rg_mcycle$EN;

  // register rg_mepcc
  reg [82 : 0] rg_mepcc;
  reg [82 : 0] rg_mepcc$D_IN;
  wire rg_mepcc$EN;

  // register rg_minstret
  reg [63 : 0] rg_minstret;
  wire [63 : 0] rg_minstret$D_IN;
  wire rg_minstret$EN;

  // register rg_mscratch
  reg [31 : 0] rg_mscratch;
  wire [31 : 0] rg_mscratch$D_IN;
  wire rg_mscratch$EN;

  // register rg_mscratchc
  reg [82 : 0] rg_mscratchc;
  wire [82 : 0] rg_mscratchc$D_IN;
  wire rg_mscratchc$EN;

  // register rg_mtcc
  reg [82 : 0] rg_mtcc;
  reg [82 : 0] rg_mtcc$D_IN;
  wire rg_mtcc$EN;

  // register rg_mtdc
  reg [82 : 0] rg_mtdc;
  wire [82 : 0] rg_mtdc$D_IN;
  wire rg_mtdc$EN;

  // register rg_mtval
  reg [31 : 0] rg_mtval;
  wire [31 : 0] rg_mtval$D_IN;
  wire rg_mtval$EN;

  // register rg_nmi
  reg rg_nmi;
  wire rg_nmi$D_IN, rg_nmi$EN;

  // register rg_nmi_vector
  reg [31 : 0] rg_nmi_vector;
  wire [31 : 0] rg_nmi_vector$D_IN;
  wire rg_nmi_vector$EN;

  // register rg_state
  reg rg_state;
  wire rg_state$D_IN, rg_state$EN;

  // register rg_tdata1
  reg [31 : 0] rg_tdata1;
  wire [31 : 0] rg_tdata1$D_IN;
  wire rg_tdata1$EN;

  // register rg_tdata2
  reg [31 : 0] rg_tdata2;
  wire [31 : 0] rg_tdata2$D_IN;
  wire rg_tdata2$EN;

  // register rg_tdata3
  reg [31 : 0] rg_tdata3;
  wire [31 : 0] rg_tdata3$D_IN;
  wire rg_tdata3$EN;

  // register rg_tselect
  reg [31 : 0] rg_tselect;
  wire [31 : 0] rg_tselect$D_IN;
  wire rg_tselect$EN;

  // ports of submodule csr_mie
  wire [31 : 0] csr_mie$mav_write, csr_mie$mav_write_wordxl, csr_mie$mv_read;
  wire [27 : 0] csr_mie$mav_write_misa;
  wire csr_mie$EN_mav_write, csr_mie$EN_reset;

  // ports of submodule csr_mip
  wire [31 : 0] csr_mip$mav_write, csr_mip$mav_write_wordxl, csr_mip$mv_read;
  wire [27 : 0] csr_mip$mav_write_misa;
  wire csr_mip$EN_mav_write,
       csr_mip$EN_reset,
       csr_mip$m_external_interrupt_req_req,
       csr_mip$s_external_interrupt_req_req,
       csr_mip$software_interrupt_req_req,
       csr_mip$timer_interrupt_req_req;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule soc_map
  wire [82 : 0] soc_map$m_mepcc_reset_value, soc_map$m_mtcc_reset_value;
  wire [63 : 0] soc_map$m_is_IO_addr_addr,
		soc_map$m_is_mem_addr_addr,
		soc_map$m_is_near_mem_IO_addr_addr;
  wire [31 : 0] soc_map$m_nmivec_reset_value, soc_map$m_pc_reset_value;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_mcycle_incr,
       CAN_FIRE_RL_rl_reset_start,
       CAN_FIRE_RL_rl_upd_minstret_csrrx,
       CAN_FIRE_RL_rl_upd_minstret_incr,
       CAN_FIRE_csr_minstret_incr,
       CAN_FIRE_csr_ret_actions,
       CAN_FIRE_csr_trap_actions,
       CAN_FIRE_debug,
       CAN_FIRE_m_external_interrupt_req,
       CAN_FIRE_mav_csr_write,
       CAN_FIRE_mav_read_csr,
       CAN_FIRE_mav_scr_write,
       CAN_FIRE_nmi_req,
       CAN_FIRE_s_external_interrupt_req,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_software_interrupt_req,
       CAN_FIRE_timer_interrupt_req,
       CAN_FIRE_write_dcsr_cause_priv,
       CAN_FIRE_write_dpc,
       WILL_FIRE_RL_rl_mcycle_incr,
       WILL_FIRE_RL_rl_reset_start,
       WILL_FIRE_RL_rl_upd_minstret_csrrx,
       WILL_FIRE_RL_rl_upd_minstret_incr,
       WILL_FIRE_csr_minstret_incr,
       WILL_FIRE_csr_ret_actions,
       WILL_FIRE_csr_trap_actions,
       WILL_FIRE_debug,
       WILL_FIRE_m_external_interrupt_req,
       WILL_FIRE_mav_csr_write,
       WILL_FIRE_mav_read_csr,
       WILL_FIRE_mav_scr_write,
       WILL_FIRE_nmi_req,
       WILL_FIRE_s_external_interrupt_req,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_software_interrupt_req,
       WILL_FIRE_timer_interrupt_req,
       WILL_FIRE_write_dcsr_cause_priv,
       WILL_FIRE_write_dpc;

  // inputs to muxes for submodule ports
  wire [82 : 0] MUX_rg_mepcc$write_1__VAL_2,
		MUX_rg_mepcc$write_1__VAL_3,
		MUX_rg_mtcc$write_1__VAL_2,
		MUX_rg_mtcc$write_1__VAL_3;
  wire [63 : 0] MUX_rg_minstret$write_1__VAL_1,
		MUX_rg_minstret$write_1__VAL_2,
		MUX_rw_minstret$wset_1__VAL_1;
  wire [31 : 0] MUX_csr_mstatus_rg_mstatus$write_1__VAL_3,
		MUX_rg_dcsr$write_1__VAL_3;
  wire [10 : 0] MUX_rg_mccsr$write_1__VAL_2;
  wire [6 : 0] MUX_rg_mcause$write_1__VAL_2, MUX_rg_mcause$write_1__VAL_3;
  wire MUX_csr_mstatus_rg_mstatus$write_1__SEL_2,
       MUX_rg_dcsr$write_1__SEL_2,
       MUX_rg_dpc$write_1__SEL_2,
       MUX_rg_mcause$write_1__SEL_2,
       MUX_rg_mcounteren$write_1__SEL_1,
       MUX_rg_mepcc$write_1__SEL_2,
       MUX_rg_mepcc$write_1__SEL_3,
       MUX_rg_mtcc$write_1__SEL_2,
       MUX_rg_mtcc$write_1__SEL_3,
       MUX_rg_mtval$write_1__SEL_1,
       MUX_rg_tdata1$write_1__SEL_1,
       MUX_rw_minstret$wset_1__SEL_1;

  // remaining internal signals
  reg [82 : 0] IF_read_scr_scr_addr_EQ_28_04_THEN_rg_mtcc_96__ETC___d522;
  reg [33 : 0] CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q10;
  reg [31 : 0] IF_mav_csr_write_csr_addr_EQ_0x300_40_THEN_0_C_ETC___d1043,
	       IF_mav_read_csr_csr_addr_EQ_0xC00_44_THEN_rg_m_ETC___d723,
	       IF_read_csr_csr_addr_EQ_0xC00_7_THEN_rg_mcycle_ETC___d299,
	       IF_read_csr_port2_csr_addr_EQ_0xC00_22_THEN_rg_ETC___d501;
  reg [21 : 0] CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q8;
  reg [7 : 0] CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q4;
  reg [3 : 0] CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q6;
  reg CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q5,
      CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q7,
      CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q9;
  wire [82 : 0] IF_mav_scr_write_scr_addr_EQ_29_129_THEN_mav_s_ETC___d1304;
  wire [63 : 0] x__h7895, x__h8003;
  wire [47 : 0] IF_mav_scr_write_scr_addr_EQ_29_129_THEN_mav_s_ETC___d1303;
  wire [33 : 0] IF_csr_ret_actions_from_priv_EQ_0b11_636_THEN__ETC___d1684,
		addTop__h10667,
		capUnpacked_capFat_address__h10180,
		capUnpacked_capFat_address__h9402,
		in__h11366,
		in__h11998,
		in__h3797,
		in__h4017,
		length__h11193,
		mav_scr_write_cap_BITS_81_TO_56_172_AND_671088_ETC___d1185,
		result__h11133,
		result_d_address__h14616,
		ret__h10671,
		rg_mtcc_BITS_81_TO_48__q2,
		x1_avValue_address__h9692,
		x__h11384,
		x__h12016,
		x__h3815,
		x__h4035,
		x_address__h6714,
		x_address__h7297,
		y__h11383,
		y__h12015,
		y__h3814,
		y__h4034;
  wire [31 : 0] IF_csr_ret_actions_from_priv_EQ_0b11_636_THEN__ETC___d1657,
		SEXT__0_CONCAT_mav_scr_write_cap_BITS_47_TO_40_ETC___d1074,
		SEXT__0_CONCAT_rg_mepcc_27_BITS_47_TO_40_28_29_ETC___d251,
		SEXT__0_CONCAT_rg_mtcc_96_BITS_47_TO_40_97_98__ETC___d220,
		_theResult_____2__h13535,
		_theResult___fst__h15039,
		_theResult___fst__h15240,
		addBase__h10545,
		addBase__h14641,
		addBase__h6734,
		addBase__h7317,
		bot__h10548,
		bot__h14644,
		bot__h6737,
		bot__h7320,
		csr_mstatus_rg_mstatus_94_AND_INV_1_SL_0_CONCA_ETC___d1650,
		exc_pc___1__h13591,
		exc_pc__h13156,
		exc_pc__h13533,
		mask__h15060,
		mask__h15077,
		new_csr_value__h8078,
		new_dcsr__h8182,
		offsetAddr__h6436,
		offsetAddr__h7043,
		offsetAddr__h8949,
		offsetAddr__h9805,
		v__h6880,
		v__h7463,
		val__h15078,
		vector_offset__h13534,
		wordxl1__h5928,
		x__h10054,
		x__h11297,
		x__h11299,
		x__h11889,
		x__h11891,
		x__h14532,
		x__h14894,
		x__h14895,
		x__h15059,
		x__h15072,
		x__h15089,
		x__h3678,
		x__h3680,
		x__h3901,
		x__h3903,
		x__h5702,
		x__h6581,
		x__h7172,
		x__h9276,
		y__h15073,
		y__h15090;
  wire [27 : 0] IF_mav_scr_write_cap_BITS_21_TO_16_046_EQ_0_04_ETC___d1262;
  wire [25 : 0] mask__h10668;
  wire [23 : 0] highBitsfilter__h14381,
		highBitsfilter__h6439,
		highBitsfilter__h7046,
		highOffsetBits__h14382,
		highOffsetBits__h6440,
		highOffsetBits__h7047,
		highOffsetBits__h9809,
		mask__h10546,
		mav_scr_write_cap_BITS_79_TO_56_PLUS_SEXT_x150_ETC__q3,
		signBits__h14379,
		signBits__h7044,
		signBits__h9806,
		x__h14408,
		x__h7073,
		x__h9835;
  wire [22 : 0] fixed_up_val_23__h12593,
		fixed_up_val_23__h14958,
		fixed_up_val_23__h5969;
  wire [15 : 0] x__h4551;
  wire [9 : 0] base__h11876,
	       newAddrBits__h10160,
	       newAddrBits__h14605,
	       newAddrBits__h6694,
	       newAddrBits__h7277,
	       newAddrBits__h9382,
	       offset__h11285,
	       offset__h11877,
	       offset__h3666,
	       offset__h3889,
	       x__h10602,
	       x__h10757,
	       x__h11198,
	       x__h14698,
	       x__h6791,
	       x__h7374;
  wire [7 : 0] capUnpacked_capFat_addrBits__h10181,
	       capUnpacked_capFat_addrBits__h9403,
	       repBoundBits__h14388,
	       repBoundBits__h6446,
	       repBoundBits__h7053,
	       repBoundBits__h9815,
	       result_d_addrBits__h14617,
	       rg_mtcc_BITS_7_TO_0__q1,
	       toBoundsM1__h14392,
	       toBoundsM1__h6450,
	       toBoundsM1__h7057,
	       toBoundsM1__h9819,
	       toBounds__h14391,
	       toBounds__h6449,
	       toBounds__h7056,
	       toBounds__h9818,
	       x1_avValue_addrBits__h9693,
	       x_addrBits__h6715,
	       x_addrBits__h7298;
  wire [5 : 0] IF_NOT_csr_mip_mv_read__57_BIT_11_977_024_OR_N_ETC___d2070,
	       IF_NOT_csr_mip_mv_read__57_BIT_11_977_024_OR_N_ETC___d2072,
	       IF_NOT_csr_mip_mv_read__57_BIT_11_977_024_OR_N_ETC___d2074,
	       IF_NOT_csr_mip_mv_read__57_BIT_11_977_024_OR_N_ETC___d2076,
	       exc_code__h14204,
	       ie_from_x__h15023,
	       pie_from_x__h15024;
  wire [3 : 0] IF_rg_mepcc_27_BITS_15_TO_13_670_ULT_rg_mepcc__ETC___d1676,
	       x1_avValue_otype__h9697;
  wire [2 : 0] repBound__h11424,
	       repBound__h3716,
	       repBound__h3939,
	       x1_avValue_fst_tempFields_repBoundTopBits__h14583;
  wire [1 : 0] IF_rg_mepcc_27_BITS_7_TO_5_30_ULT_rg_mepcc_27__ETC___d239,
	       mpp__h13632,
	       to_y__h15239,
	       x__h11485,
	       x__h11504;
  wire IF_IF_csr_trap_actions_interrupt_AND_NOT_csr_t_ETC___d1606,
       IF_SEXT__0_CONCAT_mav_scr_write_cap_BITS_47_TO_ETC___d1099,
       IF_SEXT__0_CONCAT_mav_scr_write_cap_BITS_47_TO_ETC___d1139,
       IF_mav_csr_write_word_BIT_31_59_THEN_NOT_mav_c_ETC___d782,
       IF_mav_csr_write_word_BIT_31_59_THEN_NOT_mav_c_ETC___d838,
       NOT_access_permitted_1_csr_addr_ULT_0xC03_685__ETC___d1698,
       NOT_access_permitted_1_csr_addr_ULT_0xC03_685__ETC___d1776,
       NOT_access_permitted_1_read_not_write_787_OR_a_ETC___d1794,
       NOT_access_permitted_2_csr_addr_ULT_0xC03_810__ETC___d1823,
       NOT_access_permitted_2_csr_addr_ULT_0xC03_810__ETC___d1901,
       NOT_access_permitted_2_read_not_write_911_OR_a_ETC___d1918,
       NOT_cfg_verbosity_read__002_ULE_1_003___d1004,
       NOT_csr_mip_mv_read__57_BIT_11_977_024_OR_NOT__ETC___d2034,
       NOT_csr_mip_mv_read__57_BIT_11_977_024_OR_NOT__ETC___d2039,
       NOT_csr_mip_mv_read__57_BIT_11_977_024_OR_NOT__ETC___d2044,
       NOT_csr_mip_mv_read__57_BIT_11_977_024_OR_NOT__ETC___d2049,
       NOT_csr_mip_mv_read__57_BIT_11_977_024_OR_NOT__ETC___d2054,
       NOT_csr_mip_mv_read__57_BIT_11_977_024_OR_NOT__ETC___d2059,
       NOT_csr_mip_mv_read__57_BIT_11_977_024_OR_NOT__ETC___d2064,
       NOT_csr_trap_actions_nmi_448_AND_csr_trap_acti_ETC___d1528,
       NOT_mav_csr_write_csr_addr_ULT_0xB03_26_006_AN_ETC___d1017,
       NOT_mav_scr_write_cap_BITS_21_TO_16_046_ULT_24_ETC___d1102,
       NOT_mav_scr_write_cap_BITS_7_TO_5_054_MINUS_0b_ETC___d1094,
       SEXT__0_CONCAT_mav_scr_write_cap_BITS_47_TO_40_ETC___d1106,
       SEXT__0_CONCAT_mav_scr_write_cap_BITS_47_TO_40_ETC___d1142,
       access_permitted_1_csr_addr_ULE_0xC1F___d1687,
       access_permitted_1_csr_addr_ULE_0xC9F___d1696,
       access_permitted_1_csr_addr_ULT_0xC03___d1685,
       access_permitted_1_csr_addr_ULT_0xC83___d1694,
       access_permitted_2_csr_addr_ULE_0xC1F___d1812,
       access_permitted_2_csr_addr_ULE_0xC9F___d1821,
       access_permitted_2_csr_addr_ULT_0xC03___d1810,
       access_permitted_2_csr_addr_ULT_0xC83___d1819,
       b__h15076,
       csr_mip_mv_read__57_BIT_11_977_AND_csr_mie_mv__ETC___d1988,
       csr_mip_mv_read__57_BIT_11_977_AND_csr_mie_mv__ETC___d1993,
       csr_mip_mv_read__57_BIT_11_977_AND_csr_mie_mv__ETC___d1998,
       csr_mip_mv_read__57_BIT_11_977_AND_csr_mie_mv__ETC___d2003,
       csr_mip_mv_read__57_BIT_11_977_AND_csr_mie_mv__ETC___d2008,
       csr_mip_mv_read__57_BIT_11_977_AND_csr_mie_mv__ETC___d2013,
       csr_mip_mv_read__57_BIT_11_977_AND_csr_mie_mv__ETC___d2018,
       csr_mip_mv_read__57_BIT_11_977_AND_csr_mie_mv__ETC___d2023,
       csr_trap_actions_nmi_OR_NOT_csr_trap_actions_i_ETC___d1579,
       mav_csr_write_csr_addr_ULE_0x33F___d735,
       mav_csr_write_csr_addr_ULE_0xB1F___d727,
       mav_csr_write_csr_addr_ULE_0xB9F___d731,
       mav_csr_write_csr_addr_ULT_0x323_34_OR_NOT_mav_ETC___d999,
       mav_csr_write_csr_addr_ULT_0x323___d734,
       mav_csr_write_csr_addr_ULT_0xB03_26_OR_NOT_mav_ETC___d1001,
       mav_csr_write_csr_addr_ULT_0xB03_26_OR_NOT_mav_ETC___d739,
       mav_csr_write_csr_addr_ULT_0xB03_26_OR_NOT_mav_ETC___d889,
       mav_csr_write_csr_addr_ULT_0xB03___d726,
       mav_csr_write_csr_addr_ULT_0xB83___d730,
       mav_scr_write_cap_BITS_15_TO_13_176_ULT_mav_sc_ETC___d1177,
       mav_scr_write_cap_BITS_21_TO_16_046_ULT_25_171_ETC___d1198,
       mav_scr_write_cap_BITS_47_TO_45_057_ULT_mav_sc_ETC___d1058,
       mav_scr_write_cap_BITS_7_TO_5_054_ULT_mav_scr__ETC___d1056,
       rg_mepcc_27_BITS_15_TO_13_670_ULT_rg_mepcc_27__ETC___d1671,
       rg_mepcc_27_BITS_47_TO_45_33_ULT_rg_mepcc_27_B_ETC___d234,
       rg_mepcc_27_BITS_7_TO_5_30_ULT_rg_mepcc_27_BIT_ETC___d232,
       rg_mtcc_96_BITS_47_TO_45_02_ULT_rg_mtcc_96_BIT_ETC___d203,
       rg_mtcc_96_BITS_7_TO_5_99_ULT_rg_mtcc_96_BITS__ETC___d201,
       x1_avValue_flags__h9695,
       x__h10851;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = f_reset_rsps$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = f_reset_rsps$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get = rg_state && f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get =
	     rg_state && f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // value method read_csr
  assign read_csr =
	     { read_csr_csr_addr >= 12'hC03 && read_csr_csr_addr <= 12'hC1F ||
	       read_csr_csr_addr >= 12'hC83 && read_csr_csr_addr <= 12'hC9F ||
	       read_csr_csr_addr >= 12'hB03 && read_csr_csr_addr <= 12'hB1F ||
	       read_csr_csr_addr >= 12'hB83 && read_csr_csr_addr <= 12'hB9F ||
	       read_csr_csr_addr >= 12'h323 && read_csr_csr_addr <= 12'h33F ||
	       read_csr_csr_addr == 12'hC00 ||
	       read_csr_csr_addr == 12'hC02 ||
	       read_csr_csr_addr == 12'hC80 ||
	       read_csr_csr_addr == 12'hC82 ||
	       read_csr_csr_addr == 12'hF11 ||
	       read_csr_csr_addr == 12'hF12 ||
	       read_csr_csr_addr == 12'hF13 ||
	       read_csr_csr_addr == 12'hF14 ||
	       read_csr_csr_addr == 12'h300 ||
	       read_csr_csr_addr == 12'h301 ||
	       read_csr_csr_addr == 12'h304 ||
	       read_csr_csr_addr == 12'h305 ||
	       read_csr_csr_addr == 12'h306 ||
	       read_csr_csr_addr == 12'h340 ||
	       read_csr_csr_addr == 12'h341 ||
	       read_csr_csr_addr == 12'h342 ||
	       read_csr_csr_addr == 12'h343 ||
	       read_csr_csr_addr == 12'h344 ||
	       read_csr_csr_addr == 12'hBC0 ||
	       read_csr_csr_addr == 12'hB00 ||
	       read_csr_csr_addr == 12'hB02 ||
	       read_csr_csr_addr == 12'hB80 ||
	       read_csr_csr_addr == 12'hB82 ||
	       read_csr_csr_addr == 12'h7A0 ||
	       read_csr_csr_addr == 12'h7A1 ||
	       read_csr_csr_addr == 12'h7A2 ||
	       read_csr_csr_addr == 12'h7A3 ||
	       read_csr_csr_addr == 12'h7B0 ||
	       read_csr_csr_addr == 12'h7B1 ||
	       read_csr_csr_addr == 12'h7B2 ||
	       read_csr_csr_addr == 12'h7B3,
	       (read_csr_csr_addr >= 12'hC03 &&
		read_csr_csr_addr <= 12'hC1F ||
		read_csr_csr_addr >= 12'hC83 &&
		read_csr_csr_addr <= 12'hC9F ||
		read_csr_csr_addr >= 12'hB03 &&
		read_csr_csr_addr <= 12'hB1F ||
		read_csr_csr_addr >= 12'hB83 &&
		read_csr_csr_addr <= 12'hB9F ||
		read_csr_csr_addr >= 12'h323 &&
		read_csr_csr_addr <= 12'h33F) ?
		 32'd0 :
		 IF_read_csr_csr_addr_EQ_0xC00_7_THEN_rg_mcycle_ETC___d299 } ;

  // value method read_csr_port2
  assign read_csr_port2 =
	     { read_csr_port2_csr_addr >= 12'hC03 &&
	       read_csr_port2_csr_addr <= 12'hC1F ||
	       read_csr_port2_csr_addr >= 12'hC83 &&
	       read_csr_port2_csr_addr <= 12'hC9F ||
	       read_csr_port2_csr_addr >= 12'hB03 &&
	       read_csr_port2_csr_addr <= 12'hB1F ||
	       read_csr_port2_csr_addr >= 12'hB83 &&
	       read_csr_port2_csr_addr <= 12'hB9F ||
	       read_csr_port2_csr_addr >= 12'h323 &&
	       read_csr_port2_csr_addr <= 12'h33F ||
	       read_csr_port2_csr_addr == 12'hC00 ||
	       read_csr_port2_csr_addr == 12'hC02 ||
	       read_csr_port2_csr_addr == 12'hC80 ||
	       read_csr_port2_csr_addr == 12'hC82 ||
	       read_csr_port2_csr_addr == 12'hF11 ||
	       read_csr_port2_csr_addr == 12'hF12 ||
	       read_csr_port2_csr_addr == 12'hF13 ||
	       read_csr_port2_csr_addr == 12'hF14 ||
	       read_csr_port2_csr_addr == 12'h300 ||
	       read_csr_port2_csr_addr == 12'h301 ||
	       read_csr_port2_csr_addr == 12'h304 ||
	       read_csr_port2_csr_addr == 12'h305 ||
	       read_csr_port2_csr_addr == 12'h306 ||
	       read_csr_port2_csr_addr == 12'h340 ||
	       read_csr_port2_csr_addr == 12'h341 ||
	       read_csr_port2_csr_addr == 12'h342 ||
	       read_csr_port2_csr_addr == 12'h343 ||
	       read_csr_port2_csr_addr == 12'h344 ||
	       read_csr_port2_csr_addr == 12'hBC0 ||
	       read_csr_port2_csr_addr == 12'hB00 ||
	       read_csr_port2_csr_addr == 12'hB02 ||
	       read_csr_port2_csr_addr == 12'hB80 ||
	       read_csr_port2_csr_addr == 12'hB82 ||
	       read_csr_port2_csr_addr == 12'h7A0 ||
	       read_csr_port2_csr_addr == 12'h7A1 ||
	       read_csr_port2_csr_addr == 12'h7A2 ||
	       read_csr_port2_csr_addr == 12'h7A3 ||
	       read_csr_port2_csr_addr == 12'h7B0 ||
	       read_csr_port2_csr_addr == 12'h7B1 ||
	       read_csr_port2_csr_addr == 12'h7B2 ||
	       read_csr_port2_csr_addr == 12'h7B3,
	       (read_csr_port2_csr_addr >= 12'hC03 &&
		read_csr_port2_csr_addr <= 12'hC1F ||
		read_csr_port2_csr_addr >= 12'hC83 &&
		read_csr_port2_csr_addr <= 12'hC9F ||
		read_csr_port2_csr_addr >= 12'hB03 &&
		read_csr_port2_csr_addr <= 12'hB1F ||
		read_csr_port2_csr_addr >= 12'hB83 &&
		read_csr_port2_csr_addr <= 12'hB9F ||
		read_csr_port2_csr_addr >= 12'h323 &&
		read_csr_port2_csr_addr <= 12'h33F) ?
		 32'd0 :
		 IF_read_csr_port2_csr_addr_EQ_0xC00_22_THEN_rg_ETC___d501 } ;

  // value method read_scr
  assign read_scr =
	     { read_scr_scr_addr == 5'd28 || read_scr_scr_addr == 5'd29 ||
	       read_scr_scr_addr == 5'd30 ||
	       read_scr_scr_addr == 5'd31,
	       IF_read_scr_scr_addr_EQ_28_04_THEN_rg_mtcc_96__ETC___d522 } ;

  // actionvalue method mav_read_csr
  assign mav_read_csr =
	     { mav_read_csr_csr_addr >= 12'hC03 &&
	       mav_read_csr_csr_addr <= 12'hC1F ||
	       mav_read_csr_csr_addr >= 12'hC83 &&
	       mav_read_csr_csr_addr <= 12'hC9F ||
	       mav_read_csr_csr_addr >= 12'hB03 &&
	       mav_read_csr_csr_addr <= 12'hB1F ||
	       mav_read_csr_csr_addr >= 12'hB83 &&
	       mav_read_csr_csr_addr <= 12'hB9F ||
	       mav_read_csr_csr_addr >= 12'h323 &&
	       mav_read_csr_csr_addr <= 12'h33F ||
	       mav_read_csr_csr_addr == 12'hC00 ||
	       mav_read_csr_csr_addr == 12'hC02 ||
	       mav_read_csr_csr_addr == 12'hC80 ||
	       mav_read_csr_csr_addr == 12'hC82 ||
	       mav_read_csr_csr_addr == 12'hF11 ||
	       mav_read_csr_csr_addr == 12'hF12 ||
	       mav_read_csr_csr_addr == 12'hF13 ||
	       mav_read_csr_csr_addr == 12'hF14 ||
	       mav_read_csr_csr_addr == 12'h300 ||
	       mav_read_csr_csr_addr == 12'h301 ||
	       mav_read_csr_csr_addr == 12'h304 ||
	       mav_read_csr_csr_addr == 12'h305 ||
	       mav_read_csr_csr_addr == 12'h306 ||
	       mav_read_csr_csr_addr == 12'h340 ||
	       mav_read_csr_csr_addr == 12'h341 ||
	       mav_read_csr_csr_addr == 12'h342 ||
	       mav_read_csr_csr_addr == 12'h343 ||
	       mav_read_csr_csr_addr == 12'h344 ||
	       mav_read_csr_csr_addr == 12'hBC0 ||
	       mav_read_csr_csr_addr == 12'hB00 ||
	       mav_read_csr_csr_addr == 12'hB02 ||
	       mav_read_csr_csr_addr == 12'hB80 ||
	       mav_read_csr_csr_addr == 12'hB82 ||
	       mav_read_csr_csr_addr == 12'h7A0 ||
	       mav_read_csr_csr_addr == 12'h7A1 ||
	       mav_read_csr_csr_addr == 12'h7A2 ||
	       mav_read_csr_csr_addr == 12'h7A3 ||
	       mav_read_csr_csr_addr == 12'h7B0 ||
	       mav_read_csr_csr_addr == 12'h7B1 ||
	       mav_read_csr_csr_addr == 12'h7B2 ||
	       mav_read_csr_csr_addr == 12'h7B3,
	       (mav_read_csr_csr_addr >= 12'hC03 &&
		mav_read_csr_csr_addr <= 12'hC1F ||
		mav_read_csr_csr_addr >= 12'hC83 &&
		mav_read_csr_csr_addr <= 12'hC9F ||
		mav_read_csr_csr_addr >= 12'hB03 &&
		mav_read_csr_csr_addr <= 12'hB1F ||
		mav_read_csr_csr_addr >= 12'hB83 &&
		mav_read_csr_csr_addr <= 12'hB9F ||
		mav_read_csr_csr_addr >= 12'h323 &&
		mav_read_csr_csr_addr <= 12'h33F) ?
		 32'd0 :
		 IF_mav_read_csr_csr_addr_EQ_0xC00_44_THEN_rg_m_ETC___d723 } ;
  assign CAN_FIRE_mav_read_csr = 1'd1 ;
  assign WILL_FIRE_mav_read_csr = EN_mav_read_csr ;

  // actionvalue method mav_csr_write
  assign mav_csr_write =
	     { x__h5702,
	       1'd0,
	       32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign CAN_FIRE_mav_csr_write = 1'd1 ;
  assign WILL_FIRE_mav_csr_write = EN_mav_csr_write ;

  // actionvalue method mav_scr_write
  assign mav_scr_write =
	     (mav_scr_write_scr_addr == 5'd28) ?
	       { ((mav_scr_write_cap[21:16] == 6'd0) ?
		    mav_scr_write_cap[1:0] :
		    2'b0) ==
		 2'd0 &&
		 SEXT__0_CONCAT_mav_scr_write_cap_BITS_47_TO_40_ETC___d1106 &&
		 mav_scr_write_cap[82],
		 x1_avValue_address__h9692,
		 x1_avValue_addrBits__h9693,
		 ((mav_scr_write_cap[21:16] == 6'd0) ?
		    mav_scr_write_cap[1:0] :
		    2'b0) ==
		 2'd0 &&
		 mav_scr_write_cap[39],
		 ((mav_scr_write_cap[21:16] == 6'd0) ?
		    mav_scr_write_cap[1:0] :
		    2'b0) ==
		 2'd0 &&
		 mav_scr_write_cap[38],
		 ((mav_scr_write_cap[21:16] == 6'd0) ?
		    mav_scr_write_cap[1:0] :
		    2'b0) ==
		 2'd0 &&
		 mav_scr_write_cap[37],
		 ((mav_scr_write_cap[21:16] == 6'd0) ?
		    mav_scr_write_cap[1:0] :
		    2'b0) ==
		 2'd0 &&
		 mav_scr_write_cap[36],
		 ((mav_scr_write_cap[21:16] == 6'd0) ?
		    mav_scr_write_cap[1:0] :
		    2'b0) ==
		 2'd0 &&
		 mav_scr_write_cap[35],
		 ((mav_scr_write_cap[21:16] == 6'd0) ?
		    mav_scr_write_cap[1:0] :
		    2'b0) ==
		 2'd0 &&
		 mav_scr_write_cap[34],
		 ((mav_scr_write_cap[21:16] == 6'd0) ?
		    mav_scr_write_cap[1:0] :
		    2'b0) ==
		 2'd0 &&
		 mav_scr_write_cap[33],
		 ((mav_scr_write_cap[21:16] == 6'd0) ?
		    mav_scr_write_cap[1:0] :
		    2'b0) ==
		 2'd0 &&
		 mav_scr_write_cap[32],
		 ((mav_scr_write_cap[21:16] == 6'd0) ?
		    mav_scr_write_cap[1:0] :
		    2'b0) ==
		 2'd0 &&
		 mav_scr_write_cap[31],
		 ((mav_scr_write_cap[21:16] == 6'd0) ?
		    mav_scr_write_cap[1:0] :
		    2'b0) ==
		 2'd0 &&
		 mav_scr_write_cap[30],
		 ((mav_scr_write_cap[21:16] == 6'd0) ?
		    mav_scr_write_cap[1:0] :
		    2'b0) ==
		 2'd0 &&
		 mav_scr_write_cap[29],
		 ((mav_scr_write_cap[21:16] == 6'd0) ?
		    mav_scr_write_cap[1:0] :
		    2'b0) ==
		 2'd0 &&
		 mav_scr_write_cap[28],
		 IF_mav_scr_write_cap_BITS_21_TO_16_046_EQ_0_04_ETC___d1262 } :
	       IF_mav_scr_write_scr_addr_EQ_29_129_THEN_mav_s_ETC___d1304 ;
  assign CAN_FIRE_mav_scr_write = 1'd1 ;
  assign WILL_FIRE_mav_scr_write = EN_mav_scr_write ;

  // value method read_misa
  assign read_misa = 28'd68161797 ;

  // value method read_mstatus
  assign read_mstatus = csr_mstatus_rg_mstatus ;

  // value method read_ustatus
  assign read_ustatus =
	     { 27'd0,
	       csr_mstatus_rg_mstatus[4],
	       3'd0,
	       csr_mstatus_rg_mstatus[0] } ;

  // value method read_satp
  assign read_satp =
	     32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  ;

  // actionvalue method csr_trap_actions
  assign csr_trap_actions =
	     { (highOffsetBits__h14382 == 24'd0 &&
		IF_IF_csr_trap_actions_interrupt_AND_NOT_csr_t_ETC___d1606 ||
		rg_mtcc[21:16] >= 6'd24) &&
	       rg_mtcc[82],
	       result_d_address__h14616,
	       result_d_addrBits__h14617,
	       rg_mtcc[39:0],
	       x__h14894,
	       x__h14895,
	       2'b11 } ;
  assign RDY_csr_trap_actions = 1'd1 ;
  assign CAN_FIRE_csr_trap_actions = 1'd1 ;
  assign WILL_FIRE_csr_trap_actions = EN_csr_trap_actions ;

  // actionvalue method csr_ret_actions
  assign csr_ret_actions =
	     { rg_mepcc,
	       repBound__h3939,
	       rg_mepcc_27_BITS_15_TO_13_670_ULT_rg_mepcc_27__ETC___d1671,
	       rg_mepcc_27_BITS_7_TO_5_30_ULT_rg_mepcc_27_BIT_ETC___d232,
	       rg_mepcc_27_BITS_47_TO_45_33_ULT_rg_mepcc_27_B_ETC___d234,
	       IF_rg_mepcc_27_BITS_15_TO_13_670_ULT_rg_mepcc__ETC___d1676,
	       IF_csr_ret_actions_from_priv_EQ_0b11_636_THEN__ETC___d1684 } ;
  assign RDY_csr_ret_actions = 1'd1 ;
  assign CAN_FIRE_csr_ret_actions = 1'd1 ;
  assign WILL_FIRE_csr_ret_actions = EN_csr_ret_actions ;

  // value method read_csr_minstret
  assign read_csr_minstret = rg_minstret ;

  // action method csr_minstret_incr
  assign CAN_FIRE_csr_minstret_incr = 1'd1 ;
  assign WILL_FIRE_csr_minstret_incr = EN_csr_minstret_incr ;

  // value method read_csr_mcycle
  assign read_csr_mcycle = rg_mcycle ;

  // value method read_csr_mtime
  assign read_csr_mtime = rg_mcycle ;

  // value method access_permitted_1
  assign access_permitted_1 =
	     { NOT_access_permitted_1_csr_addr_ULT_0xC03_685__ETC___d1776 &&
	       (access_permitted_1_csr_addr != 12'h180 ||
		!csr_mstatus_rg_mstatus[20]) &&
	       (access_permitted_1_read_not_write ||
		access_permitted_1_csr_addr[11:10] != 2'b11),
	       NOT_access_permitted_1_read_not_write_787_OR_a_ETC___d1794 &&
	       (access_permitted_1_csr_addr != 12'hC00 ||
		!access_permitted_1_read_not_write) &&
	       (access_permitted_1_csr_addr != 12'hC02 ||
		!access_permitted_1_read_not_write) &&
	       (access_permitted_1_csr_addr != 12'hC80 ||
		!access_permitted_1_read_not_write) &&
	       (access_permitted_1_csr_addr != 12'hC81 ||
		!access_permitted_1_read_not_write) &&
	       (access_permitted_1_csr_addr != 12'hC82 ||
		!access_permitted_1_read_not_write) } ;

  // value method access_permitted_2
  assign access_permitted_2 =
	     { NOT_access_permitted_2_csr_addr_ULT_0xC03_810__ETC___d1901 &&
	       (access_permitted_2_csr_addr != 12'h180 ||
		!csr_mstatus_rg_mstatus[20]) &&
	       (access_permitted_2_read_not_write ||
		access_permitted_2_csr_addr[11:10] != 2'b11),
	       NOT_access_permitted_2_read_not_write_911_OR_a_ETC___d1918 &&
	       (access_permitted_2_csr_addr != 12'hC00 ||
		!access_permitted_2_read_not_write) &&
	       (access_permitted_2_csr_addr != 12'hC02 ||
		!access_permitted_2_read_not_write) &&
	       (access_permitted_2_csr_addr != 12'hC80 ||
		!access_permitted_2_read_not_write) &&
	       (access_permitted_2_csr_addr != 12'hC81 ||
		!access_permitted_2_read_not_write) &&
	       (access_permitted_2_csr_addr != 12'hC82 ||
		!access_permitted_2_read_not_write) } ;

  // value method access_permitted_scr
  assign access_permitted_scr =
	     { (access_permitted_scr_scr_addr == 5'd28 ||
		access_permitted_scr_scr_addr == 5'd29 ||
		access_permitted_scr_scr_addr == 5'd31 ||
		access_permitted_scr_scr_addr == 5'd30) &&
	       access_permitted_scr_priv >=
	       access_permitted_scr_scr_addr[4:3] &&
	       access_permitted_scr_scr_addr != 5'd0,
	       access_permitted_scr_scr_addr != 5'd1 } ;

  // value method csr_counter_read_fault
  assign csr_counter_read_fault =
	     (csr_counter_read_fault_priv == 2'b01 ||
	      csr_counter_read_fault_priv == 2'b0) &&
	     (csr_counter_read_fault_csr_addr == 12'hC00 &&
	      !rg_mcounteren[0] ||
	      csr_counter_read_fault_csr_addr == 12'hC01 &&
	      !rg_mcounteren[1] ||
	      csr_counter_read_fault_csr_addr == 12'hC02 &&
	      !rg_mcounteren[2] ||
	      csr_counter_read_fault_csr_addr >= 12'hC03 &&
	      csr_counter_read_fault_csr_addr <= 12'hC1F ||
	      csr_counter_read_fault_csr_addr >= 12'hC83 &&
	      csr_counter_read_fault_csr_addr <= 12'hC9F) ;

  // value method csr_mip_read
  assign csr_mip_read = csr_mip$mv_read ;

  // action method m_external_interrupt_req
  assign CAN_FIRE_m_external_interrupt_req = 1'd1 ;
  assign WILL_FIRE_m_external_interrupt_req = 1'd1 ;

  // action method s_external_interrupt_req
  assign CAN_FIRE_s_external_interrupt_req = 1'd1 ;
  assign WILL_FIRE_s_external_interrupt_req = 1'd1 ;

  // action method timer_interrupt_req
  assign CAN_FIRE_timer_interrupt_req = 1'd1 ;
  assign WILL_FIRE_timer_interrupt_req = 1'd1 ;

  // action method software_interrupt_req
  assign CAN_FIRE_software_interrupt_req = 1'd1 ;
  assign WILL_FIRE_software_interrupt_req = 1'd1 ;

  // value method interrupt_pending
  assign interrupt_pending =
	     { csr_mip_mv_read__57_BIT_11_977_AND_csr_mie_mv__ETC___d2023,
	       NOT_csr_mip_mv_read__57_BIT_11_977_024_OR_NOT__ETC___d2064 ?
		 6'd4 :
		 IF_NOT_csr_mip_mv_read__57_BIT_11_977_024_OR_N_ETC___d2076 } ;

  // value method wfi_resume
  assign wfi_resume = (csr_mip$mv_read & csr_mie$mv_read) != 32'd0 ;

  // action method nmi_req
  assign CAN_FIRE_nmi_req = 1'd1 ;
  assign WILL_FIRE_nmi_req = 1'd1 ;

  // value method nmi_pending
  assign nmi_pending = rg_nmi ;

  // value method read_dpc
  assign read_dpc = rg_dpc ;
  assign RDY_read_dpc = 1'd1 ;

  // action method write_dpc
  assign RDY_write_dpc = 1'd1 ;
  assign CAN_FIRE_write_dpc = 1'd1 ;
  assign WILL_FIRE_write_dpc = EN_write_dpc ;

  // value method dcsr_break_enters_debug
  always@(dcsr_break_enters_debug_cur_priv or rg_dcsr)
  begin
    case (dcsr_break_enters_debug_cur_priv)
      2'b01: dcsr_break_enters_debug = rg_dcsr[13];
      2'b11: dcsr_break_enters_debug = rg_dcsr[15];
      default: dcsr_break_enters_debug = rg_dcsr[12];
    endcase
  end
  assign RDY_dcsr_break_enters_debug = 1'd1 ;

  // value method read_dcsr_step
  assign read_dcsr_step = rg_dcsr[2] ;
  assign RDY_read_dcsr_step = 1'd1 ;

  // action method write_dcsr_cause_priv
  assign CAN_FIRE_write_dcsr_cause_priv = 1'd1 ;
  assign WILL_FIRE_write_dcsr_cause_priv = EN_write_dcsr_cause_priv ;

  // action method debug
  assign RDY_debug = 1'd1 ;
  assign CAN_FIRE_debug = 1'd1 ;
  assign WILL_FIRE_debug = EN_debug ;

  // submodule csr_mie
  mkCSR_MIE csr_mie(.CLK(CLK),
		    .RST_N(RST_N),
		    .mav_write_misa(csr_mie$mav_write_misa),
		    .mav_write_wordxl(csr_mie$mav_write_wordxl),
		    .EN_reset(csr_mie$EN_reset),
		    .EN_mav_write(csr_mie$EN_mav_write),
		    .mv_read(csr_mie$mv_read),
		    .mav_write(csr_mie$mav_write));

  // submodule csr_mip
  mkCSR_MIP csr_mip(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_external_interrupt_req_req(csr_mip$m_external_interrupt_req_req),
		    .mav_write_misa(csr_mip$mav_write_misa),
		    .mav_write_wordxl(csr_mip$mav_write_wordxl),
		    .s_external_interrupt_req_req(csr_mip$s_external_interrupt_req_req),
		    .software_interrupt_req_req(csr_mip$software_interrupt_req_req),
		    .timer_interrupt_req_req(csr_mip$timer_interrupt_req_req),
		    .EN_reset(csr_mip$EN_reset),
		    .EN_mav_write(csr_mip$EN_mav_write),
		    .mv_read(csr_mip$mv_read),
		    .mav_write(csr_mip$mav_write));

  // submodule f_reset_rsps
  FIFO20 #(.guarded(32'd1)) f_reset_rsps(.RST(RST_N),
					 .CLK(CLK),
					 .ENQ(f_reset_rsps$ENQ),
					 .DEQ(f_reset_rsps$DEQ),
					 .CLR(f_reset_rsps$CLR),
					 .FULL_N(f_reset_rsps$FULL_N),
					 .EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule soc_map
  mkSoC_Map soc_map(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_is_IO_addr_addr(soc_map$m_is_IO_addr_addr),
		    .m_is_mem_addr_addr(soc_map$m_is_mem_addr_addr),
		    .m_is_near_mem_IO_addr_addr(soc_map$m_is_near_mem_IO_addr_addr),
		    .m_plic_addr_range(),
		    .m_near_mem_io_addr_range(),
		    .m_ethernet_0_addr_range(),
		    .m_dma_0_addr_range(),
		    .m_uart16550_0_addr_range(),
		    .m_uart16550_1_addr_range(),
		    .m_iic_0_addr_range(),
		    .m_axi_quad_spi_0_full_addr_range(),
		    .m_axi_quad_spi_0_lite_addr_range(),
		    .m_axi_quad_spi_1_addr_range(),
		    .m_gpio_0_addr_range(),
		    .m_gpio_1_addr_range(),
		    .m_boot_rom_addr_range(),
		    .m_ddr4_0_uncached_addr_range(),
		    .m_ddr4_0_cached_addr_range(),
		    .m_is_mem_addr(),
		    .m_is_IO_addr(),
		    .m_is_near_mem_IO_addr(),
		    .m_pc_reset_value(soc_map$m_pc_reset_value),
		    .m_pcc_reset_value(),
		    .m_ddc_reset_value(),
		    .m_mtcc_reset_value(soc_map$m_mtcc_reset_value),
		    .m_mepcc_reset_value(soc_map$m_mepcc_reset_value),
		    .m_mtvec_reset_value(),
		    .m_nmivec_reset_value(soc_map$m_nmivec_reset_value));

  // rule RL_rl_reset_start
  assign CAN_FIRE_RL_rl_reset_start = !rg_state ;
  assign WILL_FIRE_RL_rl_reset_start =
	     CAN_FIRE_RL_rl_reset_start && !EN_mav_csr_write ;

  // rule RL_rl_mcycle_incr
  assign CAN_FIRE_RL_rl_mcycle_incr = 1'd1 ;
  assign WILL_FIRE_RL_rl_mcycle_incr = 1'd1 ;

  // rule RL_rl_upd_minstret_csrrx
  assign CAN_FIRE_RL_rl_upd_minstret_csrrx =
	     MUX_rw_minstret$wset_1__SEL_1 || WILL_FIRE_RL_rl_reset_start ;
  assign WILL_FIRE_RL_rl_upd_minstret_csrrx =
	     CAN_FIRE_RL_rl_upd_minstret_csrrx ;

  // rule RL_rl_upd_minstret_incr
  assign CAN_FIRE_RL_rl_upd_minstret_incr =
	     !CAN_FIRE_RL_rl_upd_minstret_csrrx && EN_csr_minstret_incr ;
  assign WILL_FIRE_RL_rl_upd_minstret_incr =
	     CAN_FIRE_RL_rl_upd_minstret_incr ;

  // inputs to muxes for submodule ports
  assign MUX_csr_mstatus_rg_mstatus$write_1__SEL_2 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_26_OR_NOT_mav_ETC___d739 &&
	     mav_csr_write_csr_addr == 12'h300 ;
  assign MUX_rg_dcsr$write_1__SEL_2 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_26_OR_NOT_mav_ETC___d739 &&
	     mav_csr_write_csr_addr == 12'h7B0 ;
  assign MUX_rg_dpc$write_1__SEL_2 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_26_OR_NOT_mav_ETC___d739 &&
	     mav_csr_write_csr_addr == 12'h7B1 ;
  assign MUX_rg_mcause$write_1__SEL_2 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_26_OR_NOT_mav_ETC___d739 &&
	     mav_csr_write_csr_addr == 12'h342 ;
  assign MUX_rg_mcounteren$write_1__SEL_1 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_26_OR_NOT_mav_ETC___d739 &&
	     mav_csr_write_csr_addr == 12'h306 ;
  assign MUX_rg_mepcc$write_1__SEL_2 =
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd31 ;
  assign MUX_rg_mepcc$write_1__SEL_3 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_26_OR_NOT_mav_ETC___d739 &&
	     mav_csr_write_csr_addr == 12'h341 ;
  assign MUX_rg_mtcc$write_1__SEL_2 =
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd28 &&
	     ((mav_scr_write_cap[21:16] == 6'd0) ?
		mav_scr_write_cap[1:0] :
		2'b0) ==
	     2'd0 ;
  assign MUX_rg_mtcc$write_1__SEL_3 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_26_OR_NOT_mav_ETC___d739 &&
	     mav_csr_write_csr_addr == 12'h305 ;
  assign MUX_rg_mtval$write_1__SEL_1 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_26_OR_NOT_mav_ETC___d739 &&
	     mav_csr_write_csr_addr == 12'h343 ;
  assign MUX_rg_tdata1$write_1__SEL_1 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_26_OR_NOT_mav_ETC___d739 &&
	     mav_csr_write_csr_addr == 12'h7A1 ;
  assign MUX_rw_minstret$wset_1__SEL_1 =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_26_OR_NOT_mav_ETC___d889 &&
	     (mav_csr_write_csr_addr == 12'hB02 ||
	      mav_csr_write_csr_addr == 12'hB82) ;
  assign MUX_csr_mstatus_rg_mstatus$write_1__VAL_3 =
	     { 9'd0, fixed_up_val_23__h14958 } ;
  assign MUX_rg_dcsr$write_1__VAL_3 =
	     { rg_dcsr[31:9],
	       write_dcsr_cause_priv_cause,
	       rg_dcsr[5:2],
	       write_dcsr_cause_priv_priv } ;
  assign MUX_rg_mcause$write_1__VAL_2 =
	     { mav_csr_write_word[31], mav_csr_write_word[5:0] } ;
  assign MUX_rg_mcause$write_1__VAL_3 =
	     { !csr_trap_actions_nmi && csr_trap_actions_interrupt,
	       exc_code__h14204 } ;
  assign MUX_rg_mccsr$write_1__VAL_2 =
	     { csr_trap_actions_cheri_exc_reg,
	       csr_trap_actions_cheri_exc_code } ;
  assign MUX_rg_mepcc$write_1__VAL_2 =
	     { SEXT__0_CONCAT_mav_scr_write_cap_BITS_47_TO_40_ETC___d1142 &&
	       mav_scr_write_cap[82],
	       capUnpacked_capFat_address__h10180,
	       capUnpacked_capFat_addrBits__h10181,
	       mav_scr_write_cap[39:0] } ;
  assign MUX_rg_mepcc$write_1__VAL_3 =
	     { (highOffsetBits__h7047 == 24'd0 &&
		IF_mav_csr_write_word_BIT_31_59_THEN_NOT_mav_c_ETC___d838 ||
		rg_mepcc[21:16] >= 6'd24) &&
	       rg_mepcc[26:23] == 4'd15 &&
	       rg_mepcc[82],
	       x_address__h7297,
	       x_addrBits__h7298,
	       rg_mepcc[39:0] } ;
  assign MUX_rg_minstret$write_1__VAL_1 =
	     MUX_rw_minstret$wset_1__SEL_1 ?
	       MUX_rw_minstret$wset_1__VAL_1 :
	       64'd0 ;
  assign MUX_rg_minstret$write_1__VAL_2 = rg_minstret + 64'd1 ;
  assign MUX_rg_mtcc$write_1__VAL_2 =
	     { SEXT__0_CONCAT_mav_scr_write_cap_BITS_47_TO_40_ETC___d1106 &&
	       mav_scr_write_cap[82],
	       capUnpacked_capFat_address__h9402,
	       capUnpacked_capFat_addrBits__h9403,
	       mav_scr_write_cap[39:0] } ;
  assign MUX_rg_mtcc$write_1__VAL_3 =
	     { (highOffsetBits__h6440 == 24'd0 &&
		IF_mav_csr_write_word_BIT_31_59_THEN_NOT_mav_c_ETC___d782 ||
		rg_mtcc[21:16] >= 6'd24) &&
	       rg_mtcc[26:23] == 4'd15 &&
	       rg_mtcc[82],
	       x_address__h6714,
	       x_addrBits__h6715,
	       rg_mtcc[39:0] } ;
  assign MUX_rw_minstret$wset_1__VAL_1 =
	     (mav_csr_write_csr_addr == 12'hB02) ? x__h7895 : x__h8003 ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN = 4'h0 ;
  assign cfg_verbosity$EN = 1'b0 ;

  // register csr_mstatus_rg_mstatus
  always@(WILL_FIRE_RL_rl_reset_start or
	  MUX_csr_mstatus_rg_mstatus$write_1__SEL_2 or
	  wordxl1__h5928 or
	  EN_csr_ret_actions or
	  MUX_csr_mstatus_rg_mstatus$write_1__VAL_3 or
	  EN_csr_trap_actions or x__h14894)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: csr_mstatus_rg_mstatus$D_IN = 32'd0;
    MUX_csr_mstatus_rg_mstatus$write_1__SEL_2:
	csr_mstatus_rg_mstatus$D_IN = wordxl1__h5928;
    EN_csr_ret_actions:
	csr_mstatus_rg_mstatus$D_IN =
	    MUX_csr_mstatus_rg_mstatus$write_1__VAL_3;
    EN_csr_trap_actions: csr_mstatus_rg_mstatus$D_IN = x__h14894;
    default: csr_mstatus_rg_mstatus$D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign csr_mstatus_rg_mstatus$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_26_OR_NOT_mav_ETC___d739 &&
	     mav_csr_write_csr_addr == 12'h300 ||
	     EN_csr_trap_actions ||
	     EN_csr_ret_actions ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_dcsr
  always@(WILL_FIRE_RL_rl_reset_start or
	  MUX_rg_dcsr$write_1__SEL_2 or
	  new_dcsr__h8182 or
	  EN_write_dcsr_cause_priv or MUX_rg_dcsr$write_1__VAL_3)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_dcsr$D_IN = 32'd1073741843;
    MUX_rg_dcsr$write_1__SEL_2: rg_dcsr$D_IN = new_dcsr__h8182;
    EN_write_dcsr_cause_priv: rg_dcsr$D_IN = MUX_rg_dcsr$write_1__VAL_3;
    default: rg_dcsr$D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign rg_dcsr$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_26_OR_NOT_mav_ETC___d739 &&
	     mav_csr_write_csr_addr == 12'h7B0 ||
	     EN_write_dcsr_cause_priv ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_dpc
  always@(WILL_FIRE_RL_rl_reset_start or
	  soc_map$m_pc_reset_value or
	  MUX_rg_dpc$write_1__SEL_2 or
	  mav_csr_write_word or EN_write_dpc or write_dpc_pc)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_dpc$D_IN = soc_map$m_pc_reset_value;
    MUX_rg_dpc$write_1__SEL_2: rg_dpc$D_IN = mav_csr_write_word;
    EN_write_dpc: rg_dpc$D_IN = write_dpc_pc;
    default: rg_dpc$D_IN =
		 32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign rg_dpc$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_26_OR_NOT_mav_ETC___d739 &&
	     mav_csr_write_csr_addr == 12'h7B1 ||
	     EN_write_dpc ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_dscratch0
  assign rg_dscratch0$D_IN = mav_csr_write_word ;
  assign rg_dscratch0$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_26_OR_NOT_mav_ETC___d739 &&
	     mav_csr_write_csr_addr == 12'h7B2 ;

  // register rg_dscratch1
  assign rg_dscratch1$D_IN = mav_csr_write_word ;
  assign rg_dscratch1$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_26_OR_NOT_mav_ETC___d739 &&
	     mav_csr_write_csr_addr == 12'h7B3 ;

  // register rg_mcause
  always@(WILL_FIRE_RL_rl_reset_start or
	  MUX_rg_mcause$write_1__SEL_2 or
	  MUX_rg_mcause$write_1__VAL_2 or
	  EN_csr_trap_actions or MUX_rg_mcause$write_1__VAL_3)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_mcause$D_IN = 7'd0;
    MUX_rg_mcause$write_1__SEL_2:
	rg_mcause$D_IN = MUX_rg_mcause$write_1__VAL_2;
    EN_csr_trap_actions: rg_mcause$D_IN = MUX_rg_mcause$write_1__VAL_3;
    default: rg_mcause$D_IN = 7'bxxxxxxx /* unspecified value */ ;
  endcase
  assign rg_mcause$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_26_OR_NOT_mav_ETC___d739 &&
	     mav_csr_write_csr_addr == 12'h342 ||
	     EN_csr_trap_actions ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mccsr
  assign rg_mccsr$D_IN =
	     WILL_FIRE_RL_rl_reset_start ?
	       11'd0 :
	       MUX_rg_mccsr$write_1__VAL_2 ;
  assign rg_mccsr$EN =
	     EN_csr_trap_actions && !csr_trap_actions_nmi &&
	     csr_trap_actions_exc_code == 6'd28 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mcounteren
  assign rg_mcounteren$D_IN =
	     MUX_rg_mcounteren$write_1__SEL_1 ?
	       mav_csr_write_word[2:0] :
	       3'd0 ;
  assign rg_mcounteren$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_26_OR_NOT_mav_ETC___d739 &&
	     mav_csr_write_csr_addr == 12'h306 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mcycle
  assign rg_mcycle$D_IN = rg_mcycle + 64'd1 ;
  assign rg_mcycle$EN = 1'd1 ;

  // register rg_mepcc
  always@(WILL_FIRE_RL_rl_reset_start or
	  soc_map$m_mepcc_reset_value or
	  MUX_rg_mepcc$write_1__SEL_2 or
	  MUX_rg_mepcc$write_1__VAL_2 or
	  MUX_rg_mepcc$write_1__SEL_3 or
	  MUX_rg_mepcc$write_1__VAL_3 or
	  EN_csr_trap_actions or csr_trap_actions_pcc)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_mepcc$D_IN = soc_map$m_mepcc_reset_value;
    MUX_rg_mepcc$write_1__SEL_2: rg_mepcc$D_IN = MUX_rg_mepcc$write_1__VAL_2;
    MUX_rg_mepcc$write_1__SEL_3: rg_mepcc$D_IN = MUX_rg_mepcc$write_1__VAL_3;
    EN_csr_trap_actions: rg_mepcc$D_IN = csr_trap_actions_pcc[92:10];
    default: rg_mepcc$D_IN =
		 83'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign rg_mepcc$EN =
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd31 ||
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_26_OR_NOT_mav_ETC___d739 &&
	     mav_csr_write_csr_addr == 12'h341 ||
	     WILL_FIRE_RL_rl_reset_start ||
	     EN_csr_trap_actions ;

  // register rg_minstret
  assign rg_minstret$D_IN =
	     WILL_FIRE_RL_rl_upd_minstret_csrrx ?
	       MUX_rg_minstret$write_1__VAL_1 :
	       MUX_rg_minstret$write_1__VAL_2 ;
  assign rg_minstret$EN =
	     WILL_FIRE_RL_rl_upd_minstret_csrrx ||
	     WILL_FIRE_RL_rl_upd_minstret_incr ;

  // register rg_mscratch
  assign rg_mscratch$D_IN = mav_csr_write_word ;
  assign rg_mscratch$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_26_OR_NOT_mav_ETC___d739 &&
	     mav_csr_write_csr_addr == 12'h340 ;

  // register rg_mscratchc
  assign rg_mscratchc$D_IN = mav_scr_write_cap ;
  assign rg_mscratchc$EN =
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd30 ;

  // register rg_mtcc
  always@(WILL_FIRE_RL_rl_reset_start or
	  soc_map$m_mtcc_reset_value or
	  MUX_rg_mtcc$write_1__SEL_2 or
	  MUX_rg_mtcc$write_1__VAL_2 or
	  MUX_rg_mtcc$write_1__SEL_3 or MUX_rg_mtcc$write_1__VAL_3)
  case (1'b1)
    WILL_FIRE_RL_rl_reset_start: rg_mtcc$D_IN = soc_map$m_mtcc_reset_value;
    MUX_rg_mtcc$write_1__SEL_2: rg_mtcc$D_IN = MUX_rg_mtcc$write_1__VAL_2;
    MUX_rg_mtcc$write_1__SEL_3: rg_mtcc$D_IN = MUX_rg_mtcc$write_1__VAL_3;
    default: rg_mtcc$D_IN =
		 83'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
  endcase
  assign rg_mtcc$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_26_OR_NOT_mav_ETC___d739 &&
	     mav_csr_write_csr_addr == 12'h305 ||
	     EN_mav_scr_write && mav_scr_write_scr_addr == 5'd28 &&
	     ((mav_scr_write_cap[21:16] == 6'd0) ?
		mav_scr_write_cap[1:0] :
		2'b0) ==
	     2'd0 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mtdc
  assign rg_mtdc$D_IN = mav_scr_write_cap ;
  assign rg_mtdc$EN = EN_mav_scr_write && mav_scr_write_scr_addr == 5'd29 ;

  // register rg_mtval
  assign rg_mtval$D_IN =
	     MUX_rg_mtval$write_1__SEL_1 ?
	       mav_csr_write_word :
	       csr_trap_actions_xtval ;
  assign rg_mtval$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_26_OR_NOT_mav_ETC___d739 &&
	     mav_csr_write_csr_addr == 12'h343 ||
	     EN_csr_trap_actions ;

  // register rg_nmi
  assign rg_nmi$D_IN = !WILL_FIRE_RL_rl_reset_start && nmi_req_set_not_clear ;
  assign rg_nmi$EN = 1'b1 ;

  // register rg_nmi_vector
  assign rg_nmi_vector$D_IN = soc_map$m_nmivec_reset_value ;
  assign rg_nmi_vector$EN = WILL_FIRE_RL_rl_reset_start ;

  // register rg_state
  assign rg_state$D_IN = !EN_server_reset_request_put ;
  assign rg_state$EN =
	     EN_server_reset_request_put || WILL_FIRE_RL_rl_reset_start ;

  // register rg_tdata1
  assign rg_tdata1$D_IN =
	     MUX_rg_tdata1$write_1__SEL_1 ? new_csr_value__h8078 : 32'd0 ;
  assign rg_tdata1$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_26_OR_NOT_mav_ETC___d739 &&
	     mav_csr_write_csr_addr == 12'h7A1 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_tdata2
  assign rg_tdata2$D_IN = mav_csr_write_word ;
  assign rg_tdata2$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_26_OR_NOT_mav_ETC___d739 &&
	     mav_csr_write_csr_addr == 12'h7A2 ;

  // register rg_tdata3
  assign rg_tdata3$D_IN = mav_csr_write_word ;
  assign rg_tdata3$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_26_OR_NOT_mav_ETC___d739 &&
	     mav_csr_write_csr_addr == 12'h7A3 ;

  // register rg_tselect
  assign rg_tselect$D_IN = 32'd0 ;
  assign rg_tselect$EN =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_26_OR_NOT_mav_ETC___d739 &&
	     mav_csr_write_csr_addr == 12'h7A0 ||
	     WILL_FIRE_RL_rl_reset_start ;

  // submodule csr_mie
  assign csr_mie$mav_write_misa = 28'd68161797 ;
  assign csr_mie$mav_write_wordxl = mav_csr_write_word ;
  assign csr_mie$EN_reset = WILL_FIRE_RL_rl_reset_start ;
  assign csr_mie$EN_mav_write =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_26_OR_NOT_mav_ETC___d739 &&
	     mav_csr_write_csr_addr == 12'h304 ;

  // submodule csr_mip
  assign csr_mip$m_external_interrupt_req_req =
	     m_external_interrupt_req_set_not_clear ;
  assign csr_mip$mav_write_misa = 28'd68161797 ;
  assign csr_mip$mav_write_wordxl = mav_csr_write_word ;
  assign csr_mip$s_external_interrupt_req_req =
	     s_external_interrupt_req_set_not_clear ;
  assign csr_mip$software_interrupt_req_req =
	     software_interrupt_req_set_not_clear ;
  assign csr_mip$timer_interrupt_req_req = timer_interrupt_req_set_not_clear ;
  assign csr_mip$EN_reset = WILL_FIRE_RL_rl_reset_start ;
  assign csr_mip$EN_mav_write =
	     EN_mav_csr_write &&
	     mav_csr_write_csr_addr_ULT_0xB03_26_OR_NOT_mav_ETC___d739 &&
	     mav_csr_write_csr_addr == 12'h344 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$ENQ = EN_server_reset_request_put ;
  assign f_reset_rsps$DEQ = EN_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule soc_map
  assign soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign soc_map$m_is_mem_addr_addr = 64'h0 ;
  assign soc_map$m_is_near_mem_IO_addr_addr = 64'h0 ;

  // remaining internal signals
  assign IF_IF_csr_trap_actions_interrupt_AND_NOT_csr_t_ETC___d1606 =
	     _theResult_____2__h13535[31] ?
	       x__h14532[7:0] >= toBounds__h14391 &&
	       repBoundBits__h14388 != rg_mtcc[47:40] :
	       x__h14532[7:0] < toBoundsM1__h14392 ;
  assign IF_NOT_csr_mip_mv_read__57_BIT_11_977_024_OR_N_ETC___d2070 =
	     (!csr_mip$mv_read[11] || !csr_mie$mv_read[11] ||
	      interrupt_pending_cur_priv == 2'b11 &&
	      !csr_mstatus_rg_mstatus[3]) ?
	       6'd3 :
	       6'd11 ;
  assign IF_NOT_csr_mip_mv_read__57_BIT_11_977_024_OR_N_ETC___d2072 =
	     NOT_csr_mip_mv_read__57_BIT_11_977_024_OR_NOT__ETC___d2039 ?
	       6'd9 :
	       (NOT_csr_mip_mv_read__57_BIT_11_977_024_OR_NOT__ETC___d2034 ?
		  6'd7 :
		  IF_NOT_csr_mip_mv_read__57_BIT_11_977_024_OR_N_ETC___d2070) ;
  assign IF_NOT_csr_mip_mv_read__57_BIT_11_977_024_OR_N_ETC___d2074 =
	     NOT_csr_mip_mv_read__57_BIT_11_977_024_OR_NOT__ETC___d2049 ?
	       6'd5 :
	       (NOT_csr_mip_mv_read__57_BIT_11_977_024_OR_NOT__ETC___d2044 ?
		  6'd1 :
		  IF_NOT_csr_mip_mv_read__57_BIT_11_977_024_OR_N_ETC___d2072) ;
  assign IF_NOT_csr_mip_mv_read__57_BIT_11_977_024_OR_N_ETC___d2076 =
	     NOT_csr_mip_mv_read__57_BIT_11_977_024_OR_NOT__ETC___d2059 ?
	       6'd0 :
	       (NOT_csr_mip_mv_read__57_BIT_11_977_024_OR_NOT__ETC___d2054 ?
		  6'd8 :
		  IF_NOT_csr_mip_mv_read__57_BIT_11_977_024_OR_N_ETC___d2074) ;
  assign IF_SEXT__0_CONCAT_mav_scr_write_cap_BITS_47_TO_ETC___d1099 =
	     SEXT__0_CONCAT_mav_scr_write_cap_BITS_47_TO_40_ETC___d1074[31] ?
	       x__h9276[7:0] >= toBounds__h9818 &&
	       NOT_mav_scr_write_cap_BITS_7_TO_5_054_MINUS_0b_ETC___d1094 :
	       x__h9276[7:0] < toBoundsM1__h9819 ;
  assign IF_SEXT__0_CONCAT_mav_scr_write_cap_BITS_47_TO_ETC___d1139 =
	     SEXT__0_CONCAT_mav_scr_write_cap_BITS_47_TO_40_ETC___d1074[31] ?
	       x__h10054[7:0] >= toBounds__h9818 &&
	       NOT_mav_scr_write_cap_BITS_7_TO_5_054_MINUS_0b_ETC___d1094 :
	       x__h10054[7:0] < toBoundsM1__h9819 ;
  assign IF_csr_ret_actions_from_priv_EQ_0b11_636_THEN__ETC___d1657 =
	     (csr_ret_actions_from_priv == 2'b11) ?
	       _theResult___fst__h15039 :
	       _theResult___fst__h15240 ;
  assign IF_csr_ret_actions_from_priv_EQ_0b11_636_THEN__ETC___d1684 =
	     (csr_ret_actions_from_priv == 2'b11) ?
	       { csr_mstatus_rg_mstatus_94_AND_INV_1_SL_0_CONCA_ETC___d1650[12:11],
		 _theResult___fst__h15039 } :
	       { to_y__h15239, _theResult___fst__h15240 } ;
  assign IF_mav_csr_write_word_BIT_31_59_THEN_NOT_mav_c_ETC___d782 =
	     mav_csr_write_word[31] ?
	       x__h6581[7:0] >= toBounds__h6449 &&
	       repBoundBits__h6446 != rg_mtcc[47:40] :
	       x__h6581[7:0] < toBoundsM1__h6450 ;
  assign IF_mav_csr_write_word_BIT_31_59_THEN_NOT_mav_c_ETC___d838 =
	     mav_csr_write_word[31] ?
	       x__h7172[7:0] >= toBounds__h7056 &&
	       repBoundBits__h7053 != rg_mepcc[47:40] :
	       x__h7172[7:0] < toBoundsM1__h7057 ;
  assign IF_mav_scr_write_cap_BITS_21_TO_16_046_EQ_0_04_ETC___d1262 =
	     { x1_avValue_flags__h9695,
	       x1_avValue_otype__h9697,
	       ((mav_scr_write_cap[21:16] == 6'd0) ?
		  mav_scr_write_cap[1:0] :
		  2'b0) !=
	       2'd0 ||
	       mav_scr_write_cap[22],
	       (((mav_scr_write_cap[21:16] == 6'd0) ?
		   mav_scr_write_cap[1:0] :
		   2'b0) ==
		2'd0) ?
		 mav_scr_write_cap[21:0] :
		 22'd1720320 } ;
  assign IF_mav_scr_write_scr_addr_EQ_29_129_THEN_mav_s_ETC___d1303 =
	     { CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q4,
	       (mav_scr_write_scr_addr == 5'd29 ||
		mav_scr_write_scr_addr == 5'd31 ||
		mav_scr_write_scr_addr == 5'd30) &&
	       mav_scr_write_cap[39],
	       (mav_scr_write_scr_addr == 5'd29 ||
		mav_scr_write_scr_addr == 5'd31 ||
		mav_scr_write_scr_addr == 5'd30) &&
	       mav_scr_write_cap[38],
	       (mav_scr_write_scr_addr == 5'd29 ||
		mav_scr_write_scr_addr == 5'd31 ||
		mav_scr_write_scr_addr == 5'd30) &&
	       mav_scr_write_cap[37],
	       (mav_scr_write_scr_addr == 5'd29 ||
		mav_scr_write_scr_addr == 5'd31 ||
		mav_scr_write_scr_addr == 5'd30) &&
	       mav_scr_write_cap[36],
	       (mav_scr_write_scr_addr == 5'd29 ||
		mav_scr_write_scr_addr == 5'd31 ||
		mav_scr_write_scr_addr == 5'd30) &&
	       mav_scr_write_cap[35],
	       (mav_scr_write_scr_addr == 5'd29 ||
		mav_scr_write_scr_addr == 5'd31 ||
		mav_scr_write_scr_addr == 5'd30) &&
	       mav_scr_write_cap[34],
	       (mav_scr_write_scr_addr == 5'd29 ||
		mav_scr_write_scr_addr == 5'd31 ||
		mav_scr_write_scr_addr == 5'd30) &&
	       mav_scr_write_cap[33],
	       (mav_scr_write_scr_addr == 5'd29 ||
		mav_scr_write_scr_addr == 5'd31 ||
		mav_scr_write_scr_addr == 5'd30) &&
	       mav_scr_write_cap[32],
	       (mav_scr_write_scr_addr == 5'd29 ||
		mav_scr_write_scr_addr == 5'd31 ||
		mav_scr_write_scr_addr == 5'd30) &&
	       mav_scr_write_cap[31],
	       (mav_scr_write_scr_addr == 5'd29 ||
		mav_scr_write_scr_addr == 5'd31 ||
		mav_scr_write_scr_addr == 5'd30) &&
	       mav_scr_write_cap[30],
	       (mav_scr_write_scr_addr == 5'd29 ||
		mav_scr_write_scr_addr == 5'd31 ||
		mav_scr_write_scr_addr == 5'd30) &&
	       mav_scr_write_cap[29],
	       (mav_scr_write_scr_addr == 5'd29 ||
		mav_scr_write_scr_addr == 5'd31 ||
		mav_scr_write_scr_addr == 5'd30) &&
	       mav_scr_write_cap[28],
	       CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q5,
	       CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q6,
	       CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q7,
	       CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q8 } ;
  assign IF_mav_scr_write_scr_addr_EQ_29_129_THEN_mav_s_ETC___d1304 =
	     { CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q9,
	       CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q10,
	       IF_mav_scr_write_scr_addr_EQ_29_129_THEN_mav_s_ETC___d1303 } ;
  assign IF_rg_mepcc_27_BITS_15_TO_13_670_ULT_rg_mepcc__ETC___d1676 =
	     { (rg_mepcc_27_BITS_15_TO_13_670_ULT_rg_mepcc_27__ETC___d1671 ==
		rg_mepcc_27_BITS_47_TO_45_33_ULT_rg_mepcc_27_B_ETC___d234) ?
		 2'd0 :
		 ((rg_mepcc_27_BITS_15_TO_13_670_ULT_rg_mepcc_27__ETC___d1671 &&
		   !rg_mepcc_27_BITS_47_TO_45_33_ULT_rg_mepcc_27_B_ETC___d234) ?
		    2'd1 :
		    2'd3),
	       IF_rg_mepcc_27_BITS_7_TO_5_30_ULT_rg_mepcc_27__ETC___d239 } ;
  assign IF_rg_mepcc_27_BITS_7_TO_5_30_ULT_rg_mepcc_27__ETC___d239 =
	     (rg_mepcc_27_BITS_7_TO_5_30_ULT_rg_mepcc_27_BIT_ETC___d232 ==
	      rg_mepcc_27_BITS_47_TO_45_33_ULT_rg_mepcc_27_B_ETC___d234) ?
	       2'd0 :
	       ((rg_mepcc_27_BITS_7_TO_5_30_ULT_rg_mepcc_27_BIT_ETC___d232 &&
		 !rg_mepcc_27_BITS_47_TO_45_33_ULT_rg_mepcc_27_B_ETC___d234) ?
		  2'd1 :
		  2'd3) ;
  assign NOT_access_permitted_1_csr_addr_ULT_0xC03_685__ETC___d1698 =
	     !access_permitted_1_csr_addr_ULT_0xC03___d1685 &&
	     access_permitted_1_csr_addr_ULE_0xC1F___d1687 ||
	     access_permitted_1_csr_addr >= 12'hB03 &&
	     access_permitted_1_csr_addr <= 12'hB1F ||
	     !access_permitted_1_csr_addr_ULT_0xC83___d1694 &&
	     access_permitted_1_csr_addr_ULE_0xC9F___d1696 ;
  assign NOT_access_permitted_1_csr_addr_ULT_0xC03_685__ETC___d1776 =
	     (NOT_access_permitted_1_csr_addr_ULT_0xC03_685__ETC___d1698 ||
	      access_permitted_1_csr_addr >= 12'hB83 &&
	      access_permitted_1_csr_addr <= 12'hB9F ||
	      access_permitted_1_csr_addr >= 12'h323 &&
	      access_permitted_1_csr_addr <= 12'h33F ||
	      access_permitted_1_csr_addr == 12'hC00 ||
	      access_permitted_1_csr_addr == 12'hC02 ||
	      access_permitted_1_csr_addr == 12'hC80 ||
	      access_permitted_1_csr_addr == 12'hC81 ||
	      access_permitted_1_csr_addr == 12'hC82 ||
	      access_permitted_1_csr_addr == 12'hF11 ||
	      access_permitted_1_csr_addr == 12'hF12 ||
	      access_permitted_1_csr_addr == 12'hF13 ||
	      access_permitted_1_csr_addr == 12'hF14 ||
	      access_permitted_1_csr_addr == 12'h300 ||
	      access_permitted_1_csr_addr == 12'h301 ||
	      access_permitted_1_csr_addr == 12'h304 ||
	      access_permitted_1_csr_addr == 12'h305 ||
	      access_permitted_1_csr_addr == 12'h306 ||
	      access_permitted_1_csr_addr == 12'h340 ||
	      access_permitted_1_csr_addr == 12'h341 ||
	      access_permitted_1_csr_addr == 12'h342 ||
	      access_permitted_1_csr_addr == 12'h343 ||
	      access_permitted_1_csr_addr == 12'h344 ||
	      access_permitted_1_csr_addr == 12'hBC0 ||
	      access_permitted_1_csr_addr == 12'hB00 ||
	      access_permitted_1_csr_addr == 12'hB02 ||
	      access_permitted_1_csr_addr == 12'hB80 ||
	      access_permitted_1_csr_addr == 12'hB82 ||
	      access_permitted_1_csr_addr == 12'h7A0 ||
	      access_permitted_1_csr_addr == 12'h7A1 ||
	      access_permitted_1_csr_addr == 12'h7A2 ||
	      access_permitted_1_csr_addr == 12'h7A3 ||
	      access_permitted_1_csr_addr == 12'h7B0 ||
	      access_permitted_1_csr_addr == 12'h7B1 ||
	      access_permitted_1_csr_addr == 12'h7B2 ||
	      access_permitted_1_csr_addr == 12'h7B3) &&
	     access_permitted_1_priv >= access_permitted_1_csr_addr[9:8] ;
  assign NOT_access_permitted_1_read_not_write_787_OR_a_ETC___d1794 =
	     (!access_permitted_1_read_not_write ||
	      access_permitted_1_csr_addr_ULT_0xC03___d1685 ||
	      !access_permitted_1_csr_addr_ULE_0xC1F___d1687) &&
	     (!access_permitted_1_read_not_write ||
	      access_permitted_1_csr_addr_ULT_0xC83___d1694 ||
	      !access_permitted_1_csr_addr_ULE_0xC9F___d1696) ;
  assign NOT_access_permitted_2_csr_addr_ULT_0xC03_810__ETC___d1823 =
	     !access_permitted_2_csr_addr_ULT_0xC03___d1810 &&
	     access_permitted_2_csr_addr_ULE_0xC1F___d1812 ||
	     access_permitted_2_csr_addr >= 12'hB03 &&
	     access_permitted_2_csr_addr <= 12'hB1F ||
	     !access_permitted_2_csr_addr_ULT_0xC83___d1819 &&
	     access_permitted_2_csr_addr_ULE_0xC9F___d1821 ;
  assign NOT_access_permitted_2_csr_addr_ULT_0xC03_810__ETC___d1901 =
	     (NOT_access_permitted_2_csr_addr_ULT_0xC03_810__ETC___d1823 ||
	      access_permitted_2_csr_addr >= 12'hB83 &&
	      access_permitted_2_csr_addr <= 12'hB9F ||
	      access_permitted_2_csr_addr >= 12'h323 &&
	      access_permitted_2_csr_addr <= 12'h33F ||
	      access_permitted_2_csr_addr == 12'hC00 ||
	      access_permitted_2_csr_addr == 12'hC02 ||
	      access_permitted_2_csr_addr == 12'hC80 ||
	      access_permitted_2_csr_addr == 12'hC81 ||
	      access_permitted_2_csr_addr == 12'hC82 ||
	      access_permitted_2_csr_addr == 12'hF11 ||
	      access_permitted_2_csr_addr == 12'hF12 ||
	      access_permitted_2_csr_addr == 12'hF13 ||
	      access_permitted_2_csr_addr == 12'hF14 ||
	      access_permitted_2_csr_addr == 12'h300 ||
	      access_permitted_2_csr_addr == 12'h301 ||
	      access_permitted_2_csr_addr == 12'h304 ||
	      access_permitted_2_csr_addr == 12'h305 ||
	      access_permitted_2_csr_addr == 12'h306 ||
	      access_permitted_2_csr_addr == 12'h340 ||
	      access_permitted_2_csr_addr == 12'h341 ||
	      access_permitted_2_csr_addr == 12'h342 ||
	      access_permitted_2_csr_addr == 12'h343 ||
	      access_permitted_2_csr_addr == 12'h344 ||
	      access_permitted_2_csr_addr == 12'hBC0 ||
	      access_permitted_2_csr_addr == 12'hB00 ||
	      access_permitted_2_csr_addr == 12'hB02 ||
	      access_permitted_2_csr_addr == 12'hB80 ||
	      access_permitted_2_csr_addr == 12'hB82 ||
	      access_permitted_2_csr_addr == 12'h7A0 ||
	      access_permitted_2_csr_addr == 12'h7A1 ||
	      access_permitted_2_csr_addr == 12'h7A2 ||
	      access_permitted_2_csr_addr == 12'h7A3 ||
	      access_permitted_2_csr_addr == 12'h7B0 ||
	      access_permitted_2_csr_addr == 12'h7B1 ||
	      access_permitted_2_csr_addr == 12'h7B2 ||
	      access_permitted_2_csr_addr == 12'h7B3) &&
	     access_permitted_2_priv >= access_permitted_2_csr_addr[9:8] ;
  assign NOT_access_permitted_2_read_not_write_911_OR_a_ETC___d1918 =
	     (!access_permitted_2_read_not_write ||
	      access_permitted_2_csr_addr_ULT_0xC03___d1810 ||
	      !access_permitted_2_csr_addr_ULE_0xC1F___d1812) &&
	     (!access_permitted_2_read_not_write ||
	      access_permitted_2_csr_addr_ULT_0xC83___d1819 ||
	      !access_permitted_2_csr_addr_ULE_0xC9F___d1821) ;
  assign NOT_cfg_verbosity_read__002_ULE_1_003___d1004 =
	     cfg_verbosity > 4'd1 ;
  assign NOT_csr_mip_mv_read__57_BIT_11_977_024_OR_NOT__ETC___d2034 =
	     (!csr_mip$mv_read[11] || !csr_mie$mv_read[11] ||
	      interrupt_pending_cur_priv == 2'b11 &&
	      !csr_mstatus_rg_mstatus[3]) &&
	     (!csr_mip$mv_read[3] || !csr_mie$mv_read[3] ||
	      interrupt_pending_cur_priv == 2'b11 &&
	      !csr_mstatus_rg_mstatus[3]) ;
  assign NOT_csr_mip_mv_read__57_BIT_11_977_024_OR_NOT__ETC___d2039 =
	     NOT_csr_mip_mv_read__57_BIT_11_977_024_OR_NOT__ETC___d2034 &&
	     (!csr_mip$mv_read[7] || !csr_mie$mv_read[7] ||
	      interrupt_pending_cur_priv == 2'b11 &&
	      !csr_mstatus_rg_mstatus[3]) ;
  assign NOT_csr_mip_mv_read__57_BIT_11_977_024_OR_NOT__ETC___d2044 =
	     NOT_csr_mip_mv_read__57_BIT_11_977_024_OR_NOT__ETC___d2039 &&
	     (!csr_mip$mv_read[9] || !csr_mie$mv_read[9] ||
	      interrupt_pending_cur_priv == 2'b11 &&
	      !csr_mstatus_rg_mstatus[3]) ;
  assign NOT_csr_mip_mv_read__57_BIT_11_977_024_OR_NOT__ETC___d2049 =
	     NOT_csr_mip_mv_read__57_BIT_11_977_024_OR_NOT__ETC___d2044 &&
	     (!csr_mip$mv_read[1] || !csr_mie$mv_read[1] ||
	      interrupt_pending_cur_priv == 2'b11 &&
	      !csr_mstatus_rg_mstatus[3]) ;
  assign NOT_csr_mip_mv_read__57_BIT_11_977_024_OR_NOT__ETC___d2054 =
	     NOT_csr_mip_mv_read__57_BIT_11_977_024_OR_NOT__ETC___d2049 &&
	     (!csr_mip$mv_read[5] || !csr_mie$mv_read[5] ||
	      interrupt_pending_cur_priv == 2'b11 &&
	      !csr_mstatus_rg_mstatus[3]) ;
  assign NOT_csr_mip_mv_read__57_BIT_11_977_024_OR_NOT__ETC___d2059 =
	     NOT_csr_mip_mv_read__57_BIT_11_977_024_OR_NOT__ETC___d2054 &&
	     (!csr_mip$mv_read[8] || !csr_mie$mv_read[8] ||
	      interrupt_pending_cur_priv == 2'b11 &&
	      !csr_mstatus_rg_mstatus[3]) ;
  assign NOT_csr_mip_mv_read__57_BIT_11_977_024_OR_NOT__ETC___d2064 =
	     NOT_csr_mip_mv_read__57_BIT_11_977_024_OR_NOT__ETC___d2059 &&
	     (!csr_mip$mv_read[0] || !csr_mie$mv_read[0] ||
	      interrupt_pending_cur_priv == 2'b11 &&
	      !csr_mstatus_rg_mstatus[3]) ;
  assign NOT_csr_trap_actions_nmi_448_AND_csr_trap_acti_ETC___d1528 =
	     !csr_trap_actions_nmi && csr_trap_actions_interrupt &&
	     exc_code__h14204 != 6'd0 &&
	     exc_code__h14204 != 6'd1 &&
	     exc_code__h14204 != 6'd2 &&
	     exc_code__h14204 != 6'd3 &&
	     exc_code__h14204 != 6'd4 &&
	     exc_code__h14204 != 6'd5 &&
	     exc_code__h14204 != 6'd6 &&
	     exc_code__h14204 != 6'd7 &&
	     exc_code__h14204 != 6'd8 &&
	     exc_code__h14204 != 6'd9 &&
	     exc_code__h14204 != 6'd10 &&
	     exc_code__h14204 != 6'd11 ;
  assign NOT_mav_csr_write_csr_addr_ULT_0xB03_26_006_AN_ETC___d1017 =
	     !mav_csr_write_csr_addr_ULT_0xB03___d726 &&
	     mav_csr_write_csr_addr_ULE_0xB1F___d727 ||
	     !mav_csr_write_csr_addr_ULT_0xB83___d730 &&
	     mav_csr_write_csr_addr_ULE_0xB9F___d731 ||
	     !mav_csr_write_csr_addr_ULT_0x323___d734 &&
	     mav_csr_write_csr_addr_ULE_0x33F___d735 ||
	     mav_csr_write_csr_addr == 12'hF11 ||
	     mav_csr_write_csr_addr == 12'hF12 ||
	     mav_csr_write_csr_addr == 12'hF13 ||
	     mav_csr_write_csr_addr == 12'hF14 ;
  assign NOT_mav_scr_write_cap_BITS_21_TO_16_046_ULT_24_ETC___d1102 =
	     mav_scr_write_cap[21:16] >= 6'd24 ;
  assign NOT_mav_scr_write_cap_BITS_7_TO_5_054_MINUS_0b_ETC___d1094 =
	     repBoundBits__h9815 != mav_scr_write_cap[47:40] ;
  assign SEXT__0_CONCAT_mav_scr_write_cap_BITS_47_TO_40_ETC___d1074 =
	     x__h11297 | in__h11366[31:0] ;
  assign SEXT__0_CONCAT_mav_scr_write_cap_BITS_47_TO_40_ETC___d1106 =
	     (highOffsetBits__h9809 == 24'd0 &&
	      IF_SEXT__0_CONCAT_mav_scr_write_cap_BITS_47_TO_ETC___d1099 ||
	      NOT_mav_scr_write_cap_BITS_21_TO_16_046_ULT_24_ETC___d1102) &&
	     mav_scr_write_cap[26:23] == 4'd15 ;
  assign SEXT__0_CONCAT_mav_scr_write_cap_BITS_47_TO_40_ETC___d1142 =
	     (highOffsetBits__h9809 == 24'd0 &&
	      IF_SEXT__0_CONCAT_mav_scr_write_cap_BITS_47_TO_ETC___d1139 ||
	      NOT_mav_scr_write_cap_BITS_21_TO_16_046_ULT_24_ETC___d1102) &&
	     mav_scr_write_cap[26:23] == 4'd15 ;
  assign SEXT__0_CONCAT_rg_mepcc_27_BITS_47_TO_40_28_29_ETC___d251 =
	     x__h3901 | in__h4017[31:0] ;
  assign SEXT__0_CONCAT_rg_mtcc_96_BITS_47_TO_40_97_98__ETC___d220 =
	     x__h3678 | in__h3797[31:0] ;
  assign _theResult_____2__h13535 =
	     (csr_trap_actions_interrupt && !csr_trap_actions_nmi &&
	      SEXT__0_CONCAT_rg_mtcc_96_BITS_47_TO_40_97_98__ETC___d220[0]) ?
	       exc_pc___1__h13591 :
	       exc_pc__h13533 ;
  assign _theResult___fst__h15039 =
	     { csr_mstatus_rg_mstatus_94_AND_INV_1_SL_0_CONCA_ETC___d1650[31:13],
	       2'd0,
	       csr_mstatus_rg_mstatus_94_AND_INV_1_SL_0_CONCA_ETC___d1650[10:0] } ;
  assign _theResult___fst__h15240 =
	     { csr_mstatus_rg_mstatus_94_AND_INV_1_SL_0_CONCA_ETC___d1650[31:9],
	       1'd0,
	       csr_mstatus_rg_mstatus_94_AND_INV_1_SL_0_CONCA_ETC___d1650[7:0] } ;
  assign access_permitted_1_csr_addr_ULE_0xC1F___d1687 =
	     access_permitted_1_csr_addr <= 12'hC1F ;
  assign access_permitted_1_csr_addr_ULE_0xC9F___d1696 =
	     access_permitted_1_csr_addr <= 12'hC9F ;
  assign access_permitted_1_csr_addr_ULT_0xC03___d1685 =
	     access_permitted_1_csr_addr < 12'hC03 ;
  assign access_permitted_1_csr_addr_ULT_0xC83___d1694 =
	     access_permitted_1_csr_addr < 12'hC83 ;
  assign access_permitted_2_csr_addr_ULE_0xC1F___d1812 =
	     access_permitted_2_csr_addr <= 12'hC1F ;
  assign access_permitted_2_csr_addr_ULE_0xC9F___d1821 =
	     access_permitted_2_csr_addr <= 12'hC9F ;
  assign access_permitted_2_csr_addr_ULT_0xC03___d1810 =
	     access_permitted_2_csr_addr < 12'hC03 ;
  assign access_permitted_2_csr_addr_ULT_0xC83___d1819 =
	     access_permitted_2_csr_addr < 12'hC83 ;
  assign addBase__h10545 =
	     { {22{x__h10602[9]}}, x__h10602 } << mav_scr_write_cap[21:16] ;
  assign addBase__h14641 =
	     { {22{x__h14698[9]}}, x__h14698 } << rg_mtcc[21:16] ;
  assign addBase__h6734 = { {22{x__h6791[9]}}, x__h6791 } << rg_mtcc[21:16] ;
  assign addBase__h7317 = { {22{x__h7374[9]}}, x__h7374 } << rg_mepcc[21:16] ;
  assign addTop__h10667 =
	     { {24{x__h10757[9]}}, x__h10757 } << mav_scr_write_cap[21:16] ;
  assign b__h15076 =
	     csr_mstatus_rg_mstatus[{ 3'd1, csr_ret_actions_from_priv }] ;
  assign base__h11876 =
	     { csr_trap_actions_pcc[1:0], csr_trap_actions_pcc[17:10] } ;
  assign bot__h10548 =
	     { mav_scr_write_cap[79:56] & mask__h10546, 8'd0 } +
	     addBase__h10545 ;
  assign bot__h14644 =
	     { rg_mtcc_BITS_81_TO_48__q2[31:8] & highBitsfilter__h14381,
	       8'd0 } +
	     addBase__h14641 ;
  assign bot__h6737 =
	     { rg_mtcc[79:56] & highBitsfilter__h6439, 8'd0 } +
	     addBase__h6734 ;
  assign bot__h7320 =
	     { rg_mepcc[79:56] & highBitsfilter__h7046, 8'd0 } +
	     addBase__h7317 ;
  assign capUnpacked_capFat_addrBits__h10181 =
	     (mav_scr_write_cap[21:16] == 6'd26) ?
	       { 1'b0, newAddrBits__h10160[6:0] } :
	       newAddrBits__h10160[7:0] ;
  assign capUnpacked_capFat_addrBits__h9403 =
	     (mav_scr_write_cap[21:16] == 6'd26) ?
	       { 1'b0, newAddrBits__h9382[6:0] } :
	       newAddrBits__h9382[7:0] ;
  assign capUnpacked_capFat_address__h10180 =
	     { 2'd0, bot__h10548 } + { 2'd0, offsetAddr__h9805 } ;
  assign capUnpacked_capFat_address__h9402 =
	     { 2'd0, bot__h10548 } + { 2'd0, offsetAddr__h8949 } ;
  assign csr_mip_mv_read__57_BIT_11_977_AND_csr_mie_mv__ETC___d1988 =
	     csr_mip$mv_read[11] && csr_mie$mv_read[11] &&
	     (interrupt_pending_cur_priv != 2'b11 ||
	      csr_mstatus_rg_mstatus[3]) ||
	     csr_mip$mv_read[3] && csr_mie$mv_read[3] &&
	     (interrupt_pending_cur_priv != 2'b11 ||
	      csr_mstatus_rg_mstatus[3]) ;
  assign csr_mip_mv_read__57_BIT_11_977_AND_csr_mie_mv__ETC___d1993 =
	     csr_mip_mv_read__57_BIT_11_977_AND_csr_mie_mv__ETC___d1988 ||
	     csr_mip$mv_read[7] && csr_mie$mv_read[7] &&
	     (interrupt_pending_cur_priv != 2'b11 ||
	      csr_mstatus_rg_mstatus[3]) ;
  assign csr_mip_mv_read__57_BIT_11_977_AND_csr_mie_mv__ETC___d1998 =
	     csr_mip_mv_read__57_BIT_11_977_AND_csr_mie_mv__ETC___d1993 ||
	     csr_mip$mv_read[9] && csr_mie$mv_read[9] &&
	     (interrupt_pending_cur_priv != 2'b11 ||
	      csr_mstatus_rg_mstatus[3]) ;
  assign csr_mip_mv_read__57_BIT_11_977_AND_csr_mie_mv__ETC___d2003 =
	     csr_mip_mv_read__57_BIT_11_977_AND_csr_mie_mv__ETC___d1998 ||
	     csr_mip$mv_read[1] && csr_mie$mv_read[1] &&
	     (interrupt_pending_cur_priv != 2'b11 ||
	      csr_mstatus_rg_mstatus[3]) ;
  assign csr_mip_mv_read__57_BIT_11_977_AND_csr_mie_mv__ETC___d2008 =
	     csr_mip_mv_read__57_BIT_11_977_AND_csr_mie_mv__ETC___d2003 ||
	     csr_mip$mv_read[5] && csr_mie$mv_read[5] &&
	     (interrupt_pending_cur_priv != 2'b11 ||
	      csr_mstatus_rg_mstatus[3]) ;
  assign csr_mip_mv_read__57_BIT_11_977_AND_csr_mie_mv__ETC___d2013 =
	     csr_mip_mv_read__57_BIT_11_977_AND_csr_mie_mv__ETC___d2008 ||
	     csr_mip$mv_read[8] && csr_mie$mv_read[8] &&
	     (interrupt_pending_cur_priv != 2'b11 ||
	      csr_mstatus_rg_mstatus[3]) ;
  assign csr_mip_mv_read__57_BIT_11_977_AND_csr_mie_mv__ETC___d2018 =
	     csr_mip_mv_read__57_BIT_11_977_AND_csr_mie_mv__ETC___d2013 ||
	     csr_mip$mv_read[0] && csr_mie$mv_read[0] &&
	     (interrupt_pending_cur_priv != 2'b11 ||
	      csr_mstatus_rg_mstatus[3]) ;
  assign csr_mip_mv_read__57_BIT_11_977_AND_csr_mie_mv__ETC___d2023 =
	     csr_mip_mv_read__57_BIT_11_977_AND_csr_mie_mv__ETC___d2018 ||
	     csr_mip$mv_read[4] && csr_mie$mv_read[4] &&
	     (interrupt_pending_cur_priv != 2'b11 ||
	      csr_mstatus_rg_mstatus[3]) ;
  assign csr_mstatus_rg_mstatus_94_AND_INV_1_SL_0_CONCA_ETC___d1650 =
	     x__h15072 | mask__h15060 ;
  assign csr_trap_actions_nmi_OR_NOT_csr_trap_actions_i_ETC___d1579 =
	     (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	     exc_code__h14204 != 6'd0 &&
	     exc_code__h14204 != 6'd1 &&
	     exc_code__h14204 != 6'd2 &&
	     exc_code__h14204 != 6'd3 &&
	     exc_code__h14204 != 6'd4 &&
	     exc_code__h14204 != 6'd5 &&
	     exc_code__h14204 != 6'd6 &&
	     exc_code__h14204 != 6'd7 &&
	     exc_code__h14204 != 6'd8 &&
	     exc_code__h14204 != 6'd9 &&
	     exc_code__h14204 != 6'd11 &&
	     exc_code__h14204 != 6'd12 &&
	     exc_code__h14204 != 6'd13 &&
	     exc_code__h14204 != 6'd15 ;
  assign exc_code__h14204 =
	     csr_trap_actions_nmi ? 6'd0 : csr_trap_actions_exc_code ;
  assign exc_pc___1__h13591 = exc_pc__h13533 + vector_offset__h13534 ;
  assign exc_pc__h13156 =
	     { SEXT__0_CONCAT_rg_mtcc_96_BITS_47_TO_40_97_98__ETC___d220[31:2],
	       2'd0 } ;
  assign exc_pc__h13533 =
	     csr_trap_actions_nmi ? rg_nmi_vector : exc_pc__h13156 ;
  assign fixed_up_val_23__h12593 =
	     { csr_mstatus_rg_mstatus[22:17],
	       4'd0,
	       mpp__h13632,
	       csr_mstatus_rg_mstatus[10:9],
	       1'd0,
	       csr_mstatus_rg_mstatus[3],
	       csr_mstatus_rg_mstatus[6],
	       3'd0,
	       csr_mstatus_rg_mstatus[2],
	       2'd0 } ;
  assign fixed_up_val_23__h14958 =
	     { IF_csr_ret_actions_from_priv_EQ_0b11_636_THEN__ETC___d1657[22:17],
	       4'd0,
	       (IF_csr_ret_actions_from_priv_EQ_0b11_636_THEN__ETC___d1657[12:11] ==
		2'b11) ?
		 IF_csr_ret_actions_from_priv_EQ_0b11_636_THEN__ETC___d1657[12:11] :
		 2'b0,
	       IF_csr_ret_actions_from_priv_EQ_0b11_636_THEN__ETC___d1657[10:9],
	       1'd0,
	       IF_csr_ret_actions_from_priv_EQ_0b11_636_THEN__ETC___d1657[7:6],
	       2'd0,
	       IF_csr_ret_actions_from_priv_EQ_0b11_636_THEN__ETC___d1657[3:2],
	       2'd0 } ;
  assign fixed_up_val_23__h5969 =
	     { mav_csr_write_word[22:17],
	       4'd0,
	       (mav_csr_write_word[12:11] == 2'b11) ?
		 mav_csr_write_word[12:11] :
		 2'b0,
	       mav_csr_write_word[10:9],
	       1'd0,
	       mav_csr_write_word[7:6],
	       2'd0,
	       mav_csr_write_word[3:2],
	       2'd0 } ;
  assign highBitsfilter__h14381 = highBitsfilter__h6439 ;
  assign highBitsfilter__h6439 = 24'd16777215 << rg_mtcc[21:16] ;
  assign highBitsfilter__h7046 = 24'd16777215 << rg_mepcc[21:16] ;
  assign highOffsetBits__h14382 = x__h14408 & highBitsfilter__h14381 ;
  assign highOffsetBits__h6440 = x__h7073 & highBitsfilter__h6439 ;
  assign highOffsetBits__h7047 = x__h7073 & highBitsfilter__h7046 ;
  assign highOffsetBits__h9809 = x__h9835 & mask__h10546 ;
  assign ie_from_x__h15023 = { 4'd0, csr_ret_actions_from_priv } ;
  assign in__h11366 = mav_scr_write_cap[81:48] & y__h11383 ;
  assign in__h11998 = csr_trap_actions_pcc[91:58] & y__h12015 ;
  assign in__h3797 = rg_mtcc[81:48] & y__h3814 ;
  assign in__h4017 = rg_mepcc[81:48] & y__h4034 ;
  assign length__h11193 = { 24'd0, x__h11198 } << mav_scr_write_cap[21:16] ;
  assign mask__h10546 = 24'd16777215 << mav_scr_write_cap[21:16] ;
  assign mask__h10668 = 26'd67108863 << mav_scr_write_cap[21:16] ;
  assign mask__h15060 = 32'd1 << pie_from_x__h15024 ;
  assign mask__h15077 = 32'd1 << ie_from_x__h15023 ;
  assign mav_csr_write_csr_addr_ULE_0x33F___d735 =
	     mav_csr_write_csr_addr <= 12'h33F ;
  assign mav_csr_write_csr_addr_ULE_0xB1F___d727 =
	     mav_csr_write_csr_addr <= 12'hB1F ;
  assign mav_csr_write_csr_addr_ULE_0xB9F___d731 =
	     mav_csr_write_csr_addr <= 12'hB9F ;
  assign mav_csr_write_csr_addr_ULT_0x323_34_OR_NOT_mav_ETC___d999 =
	     (mav_csr_write_csr_addr_ULT_0x323___d734 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d735) &&
	     mav_csr_write_csr_addr != 12'hF11 &&
	     mav_csr_write_csr_addr != 12'hF12 &&
	     mav_csr_write_csr_addr != 12'hF13 &&
	     mav_csr_write_csr_addr != 12'hF14 &&
	     mav_csr_write_csr_addr != 12'h300 &&
	     mav_csr_write_csr_addr != 12'h301 &&
	     mav_csr_write_csr_addr != 12'h304 &&
	     mav_csr_write_csr_addr != 12'h305 &&
	     mav_csr_write_csr_addr != 12'h306 &&
	     mav_csr_write_csr_addr != 12'h340 &&
	     mav_csr_write_csr_addr != 12'h341 &&
	     mav_csr_write_csr_addr != 12'h342 &&
	     mav_csr_write_csr_addr != 12'h343 &&
	     mav_csr_write_csr_addr != 12'h344 &&
	     mav_csr_write_csr_addr != 12'hB00 &&
	     mav_csr_write_csr_addr != 12'hB02 &&
	     mav_csr_write_csr_addr != 12'hB80 &&
	     mav_csr_write_csr_addr != 12'hB82 &&
	     mav_csr_write_csr_addr != 12'h7A0 &&
	     mav_csr_write_csr_addr != 12'h7A1 &&
	     mav_csr_write_csr_addr != 12'h7A2 &&
	     mav_csr_write_csr_addr != 12'h7A3 &&
	     mav_csr_write_csr_addr != 12'h7B0 &&
	     mav_csr_write_csr_addr != 12'h7B1 &&
	     mav_csr_write_csr_addr != 12'h7B2 &&
	     mav_csr_write_csr_addr != 12'h7B3 ;
  assign mav_csr_write_csr_addr_ULT_0x323___d734 =
	     mav_csr_write_csr_addr < 12'h323 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_26_OR_NOT_mav_ETC___d1001 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d726 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d727) &&
	     (mav_csr_write_csr_addr_ULT_0xB83___d730 ||
	      !mav_csr_write_csr_addr_ULE_0xB9F___d731) &&
	     mav_csr_write_csr_addr_ULT_0x323_34_OR_NOT_mav_ETC___d999 ;
  assign mav_csr_write_csr_addr_ULT_0xB03_26_OR_NOT_mav_ETC___d739 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d726 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d727) &&
	     (mav_csr_write_csr_addr_ULT_0xB83___d730 ||
	      !mav_csr_write_csr_addr_ULE_0xB9F___d731) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d734 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d735) ;
  assign mav_csr_write_csr_addr_ULT_0xB03_26_OR_NOT_mav_ETC___d889 =
	     (mav_csr_write_csr_addr_ULT_0xB03___d726 ||
	      !mav_csr_write_csr_addr_ULE_0xB1F___d727) &&
	     (mav_csr_write_csr_addr_ULT_0xB83___d730 ||
	      !mav_csr_write_csr_addr_ULE_0xB9F___d731) &&
	     (mav_csr_write_csr_addr_ULT_0x323___d734 ||
	      !mav_csr_write_csr_addr_ULE_0x33F___d735) &&
	     mav_csr_write_csr_addr != 12'hF11 &&
	     mav_csr_write_csr_addr != 12'hF12 &&
	     mav_csr_write_csr_addr != 12'hF13 &&
	     mav_csr_write_csr_addr != 12'hF14 ;
  assign mav_csr_write_csr_addr_ULT_0xB03___d726 =
	     mav_csr_write_csr_addr < 12'hB03 ;
  assign mav_csr_write_csr_addr_ULT_0xB83___d730 =
	     mav_csr_write_csr_addr < 12'hB83 ;
  assign mav_scr_write_cap_BITS_15_TO_13_176_ULT_mav_sc_ETC___d1177 =
	     mav_scr_write_cap[15:13] < repBound__h11424 ;
  assign mav_scr_write_cap_BITS_21_TO_16_046_ULT_25_171_ETC___d1198 =
	     mav_scr_write_cap[21:16] < 6'd25 &&
	     mav_scr_write_cap_BITS_81_TO_56_172_AND_671088_ETC___d1185[32:31] -
	     { 1'd0, x__h10851 } >
	     2'd1 ;
  assign mav_scr_write_cap_BITS_47_TO_45_057_ULT_mav_sc_ETC___d1058 =
	     mav_scr_write_cap[47:45] < repBound__h11424 ;
  assign mav_scr_write_cap_BITS_79_TO_56_PLUS_SEXT_x150_ETC__q3 =
	     mav_scr_write_cap[79:56] +
	     ({ {22{x__h11504[1]}}, x__h11504 } << mav_scr_write_cap[21:16]) ;
  assign mav_scr_write_cap_BITS_7_TO_5_054_ULT_mav_scr__ETC___d1056 =
	     mav_scr_write_cap[7:5] < repBound__h11424 ;
  assign mav_scr_write_cap_BITS_81_TO_56_172_AND_671088_ETC___d1185 =
	     { mav_scr_write_cap[81:56] & mask__h10668, 8'd0 } +
	     addTop__h10667 ;
  assign mpp__h13632 =
	     (csr_trap_actions_from_priv == 2'b11) ?
	       csr_trap_actions_from_priv :
	       2'b0 ;
  assign newAddrBits__h10160 =
	     { 2'd0, mav_scr_write_cap[7:0] } + { 2'd0, x__h10054[7:0] } ;
  assign newAddrBits__h14605 =
	     { 2'd0, rg_mtcc[7:0] } + { 2'd0, x__h14532[7:0] } ;
  assign newAddrBits__h6694 =
	     { 2'd0, rg_mtcc[7:0] } + { 2'd0, x__h6581[7:0] } ;
  assign newAddrBits__h7277 =
	     { 2'd0, rg_mepcc[7:0] } + { 2'd0, x__h7172[7:0] } ;
  assign newAddrBits__h9382 =
	     { 2'd0, mav_scr_write_cap[7:0] } + { 2'd0, x__h9276[7:0] } ;
  assign new_csr_value__h8078 = { 4'd0, mav_csr_write_word[27:0] } ;
  assign new_dcsr__h8182 =
	     { rg_dcsr[31:16],
	       mav_csr_write_word[15:9],
	       rg_dcsr[8:5],
	       mav_csr_write_word[4],
	       rg_dcsr[3],
	       mav_csr_write_word[2:0] } ;
  assign offsetAddr__h6436 =
	     { mav_csr_write_word[31:2], 1'b0, mav_csr_write_word[0] } ;
  assign offsetAddr__h7043 = { mav_csr_write_word[31:1], 1'd0 } ;
  assign offsetAddr__h8949 =
	     { SEXT__0_CONCAT_mav_scr_write_cap_BITS_47_TO_40_ETC___d1074[31:2],
	       1'b0,
	       SEXT__0_CONCAT_mav_scr_write_cap_BITS_47_TO_40_ETC___d1074[0] } ;
  assign offsetAddr__h9805 =
	     { SEXT__0_CONCAT_mav_scr_write_cap_BITS_47_TO_40_ETC___d1074[31:1],
	       1'd0 } ;
  assign offset__h11285 = { 2'd0, mav_scr_write_cap[47:40] } - x__h10602 ;
  assign offset__h11877 =
	     { 2'd0, csr_trap_actions_pcc[57:50] } - base__h11876 ;
  assign offset__h3666 = { 2'd0, rg_mtcc[47:40] } - x__h6791 ;
  assign offset__h3889 = { 2'd0, rg_mepcc[47:40] } - x__h7374 ;
  assign pie_from_x__h15024 = { 4'd1, csr_ret_actions_from_priv } ;
  assign repBoundBits__h14388 =
	     { x1_avValue_fst_tempFields_repBoundTopBits__h14583, 5'd0 } ;
  assign repBoundBits__h6446 = { repBound__h3716, 5'd0 } ;
  assign repBoundBits__h7053 = { repBound__h3939, 5'd0 } ;
  assign repBoundBits__h9815 = { repBound__h11424, 5'd0 } ;
  assign repBound__h11424 = mav_scr_write_cap[7:5] - 3'b001 ;
  assign repBound__h3716 = x1_avValue_fst_tempFields_repBoundTopBits__h14583 ;
  assign repBound__h3939 = rg_mepcc[7:5] - 3'b001 ;
  assign result__h11133 =
	     { 1'd0,
	       ~mav_scr_write_cap_BITS_81_TO_56_172_AND_671088_ETC___d1185[32],
	       mav_scr_write_cap_BITS_81_TO_56_172_AND_671088_ETC___d1185[31:0] } ;
  assign result_d_addrBits__h14617 =
	     (rg_mtcc[21:16] == 6'd26) ?
	       { 1'b0, newAddrBits__h14605[6:0] } :
	       newAddrBits__h14605[7:0] ;
  assign result_d_address__h14616 =
	     { 2'd0, bot__h14644 } + { 2'd0, _theResult_____2__h13535 } ;
  assign ret__h10671 =
	     { 1'd0,
	       mav_scr_write_cap_BITS_81_TO_56_172_AND_671088_ETC___d1185[32:0] } ;
  assign rg_mepcc_27_BITS_15_TO_13_670_ULT_rg_mepcc_27__ETC___d1671 =
	     rg_mepcc[15:13] < repBound__h3939 ;
  assign rg_mepcc_27_BITS_47_TO_45_33_ULT_rg_mepcc_27_B_ETC___d234 =
	     rg_mepcc[47:45] < repBound__h3939 ;
  assign rg_mepcc_27_BITS_7_TO_5_30_ULT_rg_mepcc_27_BIT_ETC___d232 =
	     rg_mepcc[7:5] < repBound__h3939 ;
  assign rg_mtcc_96_BITS_47_TO_45_02_ULT_rg_mtcc_96_BIT_ETC___d203 =
	     rg_mtcc[47:45] < repBound__h3716 ;
  assign rg_mtcc_96_BITS_7_TO_5_99_ULT_rg_mtcc_96_BITS__ETC___d201 =
	     rg_mtcc[7:5] < repBound__h3716 ;
  assign rg_mtcc_BITS_7_TO_0__q1 = rg_mtcc[7:0] ;
  assign rg_mtcc_BITS_81_TO_48__q2 = rg_mtcc[81:48] ;
  assign signBits__h14379 = {24{_theResult_____2__h13535[31]}} ;
  assign signBits__h7044 = {24{mav_csr_write_word[31]}} ;
  assign signBits__h9806 =
	     {24{SEXT__0_CONCAT_mav_scr_write_cap_BITS_47_TO_40_ETC___d1074[31]}} ;
  assign toBoundsM1__h14392 = { 3'b110, ~rg_mtcc_BITS_7_TO_0__q1[4:0] } ;
  assign toBoundsM1__h6450 = { 3'b110, ~rg_mtcc[4:0] } ;
  assign toBoundsM1__h7057 = { 3'b110, ~rg_mepcc[4:0] } ;
  assign toBoundsM1__h9819 = { 3'b110, ~mav_scr_write_cap[4:0] } ;
  assign toBounds__h14391 = 8'd224 - { 3'b0, rg_mtcc_BITS_7_TO_0__q1[4:0] } ;
  assign toBounds__h6449 = 8'd224 - { 3'b0, rg_mtcc[4:0] } ;
  assign toBounds__h7056 = 8'd224 - { 3'b0, rg_mepcc[4:0] } ;
  assign toBounds__h9818 = 8'd224 - { 3'b0, mav_scr_write_cap[4:0] } ;
  assign to_y__h15239 =
	     { 1'b0,
	       csr_mstatus_rg_mstatus_94_AND_INV_1_SL_0_CONCA_ETC___d1650[8] } ;
  assign v__h6880 = { 29'd0, mav_csr_write_word[2:0] } ;
  assign v__h7463 =
	     { mav_csr_write_word[31], 25'd0, mav_csr_write_word[5:0] } ;
  assign val__h15078 = { 31'd0, b__h15076 } << ie_from_x__h15023 ;
  assign vector_offset__h13534 = { 24'd0, csr_trap_actions_exc_code, 2'd0 } ;
  assign wordxl1__h5928 = { 9'd0, fixed_up_val_23__h5969 } ;
  assign x1_avValue_addrBits__h9693 =
	     (((mav_scr_write_cap[21:16] == 6'd0) ?
		 mav_scr_write_cap[1:0] :
		 2'b0) ==
	      2'd0) ?
	       capUnpacked_capFat_addrBits__h9403 :
	       8'd0 ;
  assign x1_avValue_address__h9692 =
	     (((mav_scr_write_cap[21:16] == 6'd0) ?
		 mav_scr_write_cap[1:0] :
		 2'b0) ==
	      2'd0) ?
	       capUnpacked_capFat_address__h9402 :
	       34'd0 ;
  assign x1_avValue_flags__h9695 =
	     ((mav_scr_write_cap[21:16] == 6'd0) ?
		mav_scr_write_cap[1:0] :
		2'b0) ==
	     2'd0 &&
	     mav_scr_write_cap[27] ;
  assign x1_avValue_fst_tempFields_repBoundTopBits__h14583 =
	     rg_mtcc[7:5] - 3'b001 ;
  assign x1_avValue_otype__h9697 =
	     (((mav_scr_write_cap[21:16] == 6'd0) ?
		 mav_scr_write_cap[1:0] :
		 2'b0) ==
	      2'd0) ?
	       mav_scr_write_cap[26:23] :
	       4'd15 ;
  assign x__h10054 = offsetAddr__h9805 >> mav_scr_write_cap[21:16] ;
  assign x__h10602 = { x__h11504, mav_scr_write_cap[7:0] } ;
  assign x__h10757 = { x__h11485, mav_scr_write_cap[15:8] } ;
  assign x__h10851 =
	     (mav_scr_write_cap[21:16] == 6'd24) ?
	       mav_scr_write_cap[7] :
	       mav_scr_write_cap_BITS_79_TO_56_PLUS_SEXT_x150_ETC__q3[23] ;
  assign x__h11198 = x__h10757 - x__h10602 ;
  assign x__h11297 = x__h11299 << mav_scr_write_cap[21:16] ;
  assign x__h11299 = { {22{offset__h11285[9]}}, offset__h11285 } ;
  assign x__h11384 = 34'h3FFFFFFFF << mav_scr_write_cap[21:16] ;
  assign x__h11485 =
	     (mav_scr_write_cap_BITS_15_TO_13_176_ULT_mav_sc_ETC___d1177 ==
	      mav_scr_write_cap_BITS_47_TO_45_057_ULT_mav_sc_ETC___d1058) ?
	       2'd0 :
	       ((mav_scr_write_cap_BITS_15_TO_13_176_ULT_mav_sc_ETC___d1177 &&
		 !mav_scr_write_cap_BITS_47_TO_45_057_ULT_mav_sc_ETC___d1058) ?
		  2'd1 :
		  2'd3) ;
  assign x__h11504 =
	     (mav_scr_write_cap_BITS_7_TO_5_054_ULT_mav_scr__ETC___d1056 ==
	      mav_scr_write_cap_BITS_47_TO_45_057_ULT_mav_sc_ETC___d1058) ?
	       2'd0 :
	       ((mav_scr_write_cap_BITS_7_TO_5_054_ULT_mav_scr__ETC___d1056 &&
		 !mav_scr_write_cap_BITS_47_TO_45_057_ULT_mav_sc_ETC___d1058) ?
		  2'd1 :
		  2'd3) ;
  assign x__h11889 = x__h11891 << csr_trap_actions_pcc[31:26] ;
  assign x__h11891 = { {22{offset__h11877[9]}}, offset__h11877 } ;
  assign x__h12016 = 34'h3FFFFFFFF << csr_trap_actions_pcc[31:26] ;
  assign x__h14408 = _theResult_____2__h13535[31:8] ^ signBits__h14379 ;
  assign x__h14532 = _theResult_____2__h13535 >> rg_mtcc[21:16] ;
  assign x__h14698 = x__h6791 ;
  assign x__h14894 = { 9'd0, fixed_up_val_23__h12593 } ;
  assign x__h14895 =
	     { !csr_trap_actions_nmi && csr_trap_actions_interrupt,
	       25'd0,
	       exc_code__h14204 } ;
  assign x__h15059 = x__h15089 | val__h15078 ;
  assign x__h15072 = x__h15059 & y__h15073 ;
  assign x__h15089 = csr_mstatus_rg_mstatus & y__h15090 ;
  assign x__h3678 = x__h3680 << rg_mtcc[21:16] ;
  assign x__h3680 = { {22{offset__h3666[9]}}, offset__h3666 } ;
  assign x__h3815 = 34'h3FFFFFFFF << rg_mtcc[21:16] ;
  assign x__h3901 = x__h3903 << rg_mepcc[21:16] ;
  assign x__h3903 = { {22{offset__h3889[9]}}, offset__h3889 } ;
  assign x__h4035 = 34'h3FFFFFFFF << rg_mepcc[21:16] ;
  assign x__h4551 = { rg_mccsr, 5'd3 } ;
  assign x__h5702 =
	     NOT_mav_csr_write_csr_addr_ULT_0xB03_26_006_AN_ETC___d1017 ?
	       32'd0 :
	       IF_mav_csr_write_csr_addr_EQ_0x300_40_THEN_0_C_ETC___d1043 ;
  assign x__h6581 = offsetAddr__h6436 >> rg_mtcc[21:16] ;
  assign x__h6791 =
	     { (rg_mtcc_96_BITS_7_TO_5_99_ULT_rg_mtcc_96_BITS__ETC___d201 ==
		rg_mtcc_96_BITS_47_TO_45_02_ULT_rg_mtcc_96_BIT_ETC___d203) ?
		 2'd0 :
		 ((rg_mtcc_96_BITS_7_TO_5_99_ULT_rg_mtcc_96_BITS__ETC___d201 &&
		   !rg_mtcc_96_BITS_47_TO_45_02_ULT_rg_mtcc_96_BIT_ETC___d203) ?
		    2'd1 :
		    2'd3),
	       rg_mtcc[7:0] } ;
  assign x__h7073 = mav_csr_write_word[31:8] ^ signBits__h7044 ;
  assign x__h7172 = offsetAddr__h7043 >> rg_mepcc[21:16] ;
  assign x__h7374 =
	     { IF_rg_mepcc_27_BITS_7_TO_5_30_ULT_rg_mepcc_27__ETC___d239,
	       rg_mepcc[7:0] } ;
  assign x__h7895 = { rg_minstret[63:32], mav_csr_write_word } ;
  assign x__h8003 = { mav_csr_write_word, rg_minstret[31:0] } ;
  assign x__h9276 = offsetAddr__h8949 >> mav_scr_write_cap[21:16] ;
  assign x__h9835 =
	     SEXT__0_CONCAT_mav_scr_write_cap_BITS_47_TO_40_ETC___d1074[31:8] ^
	     signBits__h9806 ;
  assign x_addrBits__h6715 =
	     (rg_mtcc[21:16] == 6'd26) ?
	       { 1'b0, newAddrBits__h6694[6:0] } :
	       newAddrBits__h6694[7:0] ;
  assign x_addrBits__h7298 =
	     (rg_mepcc[21:16] == 6'd26) ?
	       { 1'b0, newAddrBits__h7277[6:0] } :
	       newAddrBits__h7277[7:0] ;
  assign x_address__h6714 =
	     { 2'd0, bot__h6737 } + { 2'd0, offsetAddr__h6436 } ;
  assign x_address__h7297 =
	     { 2'd0, bot__h7320 } + { 2'd0, offsetAddr__h7043 } ;
  assign y__h11383 = ~x__h11384 ;
  assign y__h12015 = ~x__h12016 ;
  assign y__h15073 = ~mask__h15060 ;
  assign y__h15090 = ~mask__h15077 ;
  assign y__h3814 = ~x__h3815 ;
  assign y__h4034 = ~x__h4035 ;
  always@(mav_csr_write_csr_addr or
	  mav_csr_write_word or
	  wordxl1__h5928 or
	  csr_mie$mav_write or
	  offsetAddr__h6436 or
	  v__h6880 or
	  offsetAddr__h7043 or
	  v__h7463 or
	  csr_mip$mav_write or new_csr_value__h8078 or new_dcsr__h8182)
  begin
    case (mav_csr_write_csr_addr)
      12'h300:
	  IF_mav_csr_write_csr_addr_EQ_0x300_40_THEN_0_C_ETC___d1043 =
	      wordxl1__h5928;
      12'h301:
	  IF_mav_csr_write_csr_addr_EQ_0x300_40_THEN_0_C_ETC___d1043 =
	      32'd1074794757;
      12'h304:
	  IF_mav_csr_write_csr_addr_EQ_0x300_40_THEN_0_C_ETC___d1043 =
	      csr_mie$mav_write;
      12'h305:
	  IF_mav_csr_write_csr_addr_EQ_0x300_40_THEN_0_C_ETC___d1043 =
	      offsetAddr__h6436;
      12'h306:
	  IF_mav_csr_write_csr_addr_EQ_0x300_40_THEN_0_C_ETC___d1043 =
	      v__h6880;
      12'h340, 12'h343, 12'h7A2, 12'h7A3, 12'hB00, 12'hB02, 12'hB80, 12'hB82:
	  IF_mav_csr_write_csr_addr_EQ_0x300_40_THEN_0_C_ETC___d1043 =
	      mav_csr_write_word;
      12'h341:
	  IF_mav_csr_write_csr_addr_EQ_0x300_40_THEN_0_C_ETC___d1043 =
	      offsetAddr__h7043;
      12'h342:
	  IF_mav_csr_write_csr_addr_EQ_0x300_40_THEN_0_C_ETC___d1043 =
	      v__h7463;
      12'h344:
	  IF_mav_csr_write_csr_addr_EQ_0x300_40_THEN_0_C_ETC___d1043 =
	      csr_mip$mav_write;
      12'h7A0:
	  IF_mav_csr_write_csr_addr_EQ_0x300_40_THEN_0_C_ETC___d1043 = 32'd0;
      12'h7A1:
	  IF_mav_csr_write_csr_addr_EQ_0x300_40_THEN_0_C_ETC___d1043 =
	      new_csr_value__h8078;
      12'h7B0:
	  IF_mav_csr_write_csr_addr_EQ_0x300_40_THEN_0_C_ETC___d1043 =
	      new_dcsr__h8182;
      default: IF_mav_csr_write_csr_addr_EQ_0x300_40_THEN_0_C_ETC___d1043 =
		   mav_csr_write_word;
    endcase
  end
  always@(mav_scr_write_scr_addr or
	  mav_scr_write_cap or capUnpacked_capFat_addrBits__h10181)
  begin
    case (mav_scr_write_scr_addr)
      5'd29, 5'd30:
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q4 =
	      mav_scr_write_cap[47:40];
      5'd31:
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q4 =
	      capUnpacked_capFat_addrBits__h10181;
      default: CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q4 = 8'd0;
    endcase
  end
  always@(mav_scr_write_scr_addr or mav_scr_write_cap)
  begin
    case (mav_scr_write_scr_addr)
      5'd29, 5'd31:
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q5 =
	      mav_scr_write_cap[27];
      default: CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q5 =
		   mav_scr_write_scr_addr == 5'd30 && mav_scr_write_cap[27];
    endcase
  end
  always@(mav_scr_write_scr_addr or mav_scr_write_cap)
  begin
    case (mav_scr_write_scr_addr)
      5'd29, 5'd30, 5'd31:
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q6 =
	      mav_scr_write_cap[26:23];
      default: CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q6 = 4'd15;
    endcase
  end
  always@(mav_scr_write_scr_addr or mav_scr_write_cap)
  begin
    case (mav_scr_write_scr_addr)
      5'd29, 5'd31:
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q7 =
	      mav_scr_write_cap[22];
      default: CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q7 =
		   mav_scr_write_scr_addr != 5'd30 || mav_scr_write_cap[22];
    endcase
  end
  always@(mav_scr_write_scr_addr or mav_scr_write_cap)
  begin
    case (mav_scr_write_scr_addr)
      5'd29, 5'd30, 5'd31:
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q8 =
	      mav_scr_write_cap[21:0];
      default: CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q8 =
		   22'd1720320;
    endcase
  end
  always@(read_csr_csr_addr or
	  rg_dscratch1 or
	  csr_mstatus_rg_mstatus or
	  csr_mie$mv_read or
	  SEXT__0_CONCAT_rg_mtcc_96_BITS_47_TO_40_97_98__ETC___d220 or
	  rg_mcounteren or
	  rg_mscratch or
	  SEXT__0_CONCAT_rg_mepcc_27_BITS_47_TO_40_28_29_ETC___d251 or
	  rg_mcause or
	  rg_mtval or
	  csr_mip$mv_read or
	  rg_tselect or
	  rg_tdata1 or
	  rg_tdata2 or
	  rg_tdata3 or
	  rg_dcsr or
	  rg_nmi or
	  rg_dpc or rg_dscratch0 or rg_mcycle or rg_minstret or x__h4551)
  begin
    case (read_csr_csr_addr)
      12'h300:
	  IF_read_csr_csr_addr_EQ_0xC00_7_THEN_rg_mcycle_ETC___d299 =
	      csr_mstatus_rg_mstatus;
      12'h301:
	  IF_read_csr_csr_addr_EQ_0xC00_7_THEN_rg_mcycle_ETC___d299 =
	      32'd1074794757;
      12'h304:
	  IF_read_csr_csr_addr_EQ_0xC00_7_THEN_rg_mcycle_ETC___d299 =
	      csr_mie$mv_read;
      12'h305:
	  IF_read_csr_csr_addr_EQ_0xC00_7_THEN_rg_mcycle_ETC___d299 =
	      { SEXT__0_CONCAT_rg_mtcc_96_BITS_47_TO_40_97_98__ETC___d220[31:2],
		1'b0,
		SEXT__0_CONCAT_rg_mtcc_96_BITS_47_TO_40_97_98__ETC___d220[0] };
      12'h306:
	  IF_read_csr_csr_addr_EQ_0xC00_7_THEN_rg_mcycle_ETC___d299 =
	      { 29'd0, rg_mcounteren };
      12'h340:
	  IF_read_csr_csr_addr_EQ_0xC00_7_THEN_rg_mcycle_ETC___d299 =
	      rg_mscratch;
      12'h341:
	  IF_read_csr_csr_addr_EQ_0xC00_7_THEN_rg_mcycle_ETC___d299 =
	      SEXT__0_CONCAT_rg_mepcc_27_BITS_47_TO_40_28_29_ETC___d251;
      12'h342:
	  IF_read_csr_csr_addr_EQ_0xC00_7_THEN_rg_mcycle_ETC___d299 =
	      { rg_mcause[6], 25'd0, rg_mcause[5:0] };
      12'h343:
	  IF_read_csr_csr_addr_EQ_0xC00_7_THEN_rg_mcycle_ETC___d299 =
	      rg_mtval;
      12'h344:
	  IF_read_csr_csr_addr_EQ_0xC00_7_THEN_rg_mcycle_ETC___d299 =
	      csr_mip$mv_read;
      12'h7A0:
	  IF_read_csr_csr_addr_EQ_0xC00_7_THEN_rg_mcycle_ETC___d299 =
	      rg_tselect;
      12'h7A1:
	  IF_read_csr_csr_addr_EQ_0xC00_7_THEN_rg_mcycle_ETC___d299 =
	      rg_tdata1;
      12'h7A2:
	  IF_read_csr_csr_addr_EQ_0xC00_7_THEN_rg_mcycle_ETC___d299 =
	      rg_tdata2;
      12'h7A3:
	  IF_read_csr_csr_addr_EQ_0xC00_7_THEN_rg_mcycle_ETC___d299 =
	      rg_tdata3;
      12'h7B0:
	  IF_read_csr_csr_addr_EQ_0xC00_7_THEN_rg_mcycle_ETC___d299 =
	      { rg_dcsr[31:4], rg_nmi, rg_dcsr[2:0] };
      12'h7B1:
	  IF_read_csr_csr_addr_EQ_0xC00_7_THEN_rg_mcycle_ETC___d299 = rg_dpc;
      12'h7B2:
	  IF_read_csr_csr_addr_EQ_0xC00_7_THEN_rg_mcycle_ETC___d299 =
	      rg_dscratch0;
      12'hB00, 12'hC00:
	  IF_read_csr_csr_addr_EQ_0xC00_7_THEN_rg_mcycle_ETC___d299 =
	      rg_mcycle[31:0];
      12'hB02, 12'hC02:
	  IF_read_csr_csr_addr_EQ_0xC00_7_THEN_rg_mcycle_ETC___d299 =
	      rg_minstret[31:0];
      12'hB80, 12'hC80:
	  IF_read_csr_csr_addr_EQ_0xC00_7_THEN_rg_mcycle_ETC___d299 =
	      rg_mcycle[63:32];
      12'hB82, 12'hC82:
	  IF_read_csr_csr_addr_EQ_0xC00_7_THEN_rg_mcycle_ETC___d299 =
	      rg_minstret[63:32];
      12'hBC0:
	  IF_read_csr_csr_addr_EQ_0xC00_7_THEN_rg_mcycle_ETC___d299 =
	      { 16'd0, x__h4551 };
      12'hF11, 12'hF12, 12'hF13, 12'hF14:
	  IF_read_csr_csr_addr_EQ_0xC00_7_THEN_rg_mcycle_ETC___d299 = 32'd0;
      default: IF_read_csr_csr_addr_EQ_0xC00_7_THEN_rg_mcycle_ETC___d299 =
		   rg_dscratch1;
    endcase
  end
  always@(read_csr_port2_csr_addr or
	  rg_dscratch1 or
	  csr_mstatus_rg_mstatus or
	  csr_mie$mv_read or
	  SEXT__0_CONCAT_rg_mtcc_96_BITS_47_TO_40_97_98__ETC___d220 or
	  rg_mcounteren or
	  rg_mscratch or
	  SEXT__0_CONCAT_rg_mepcc_27_BITS_47_TO_40_28_29_ETC___d251 or
	  rg_mcause or
	  rg_mtval or
	  csr_mip$mv_read or
	  rg_tselect or
	  rg_tdata1 or
	  rg_tdata2 or
	  rg_tdata3 or
	  rg_dcsr or
	  rg_nmi or
	  rg_dpc or rg_dscratch0 or rg_mcycle or rg_minstret or x__h4551)
  begin
    case (read_csr_port2_csr_addr)
      12'h300:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_22_THEN_rg_ETC___d501 =
	      csr_mstatus_rg_mstatus;
      12'h301:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_22_THEN_rg_ETC___d501 =
	      32'd1074794757;
      12'h304:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_22_THEN_rg_ETC___d501 =
	      csr_mie$mv_read;
      12'h305:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_22_THEN_rg_ETC___d501 =
	      { SEXT__0_CONCAT_rg_mtcc_96_BITS_47_TO_40_97_98__ETC___d220[31:2],
		1'b0,
		SEXT__0_CONCAT_rg_mtcc_96_BITS_47_TO_40_97_98__ETC___d220[0] };
      12'h306:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_22_THEN_rg_ETC___d501 =
	      { 29'd0, rg_mcounteren };
      12'h340:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_22_THEN_rg_ETC___d501 =
	      rg_mscratch;
      12'h341:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_22_THEN_rg_ETC___d501 =
	      SEXT__0_CONCAT_rg_mepcc_27_BITS_47_TO_40_28_29_ETC___d251;
      12'h342:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_22_THEN_rg_ETC___d501 =
	      { rg_mcause[6], 25'd0, rg_mcause[5:0] };
      12'h343:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_22_THEN_rg_ETC___d501 =
	      rg_mtval;
      12'h344:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_22_THEN_rg_ETC___d501 =
	      csr_mip$mv_read;
      12'h7A0:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_22_THEN_rg_ETC___d501 =
	      rg_tselect;
      12'h7A1:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_22_THEN_rg_ETC___d501 =
	      rg_tdata1;
      12'h7A2:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_22_THEN_rg_ETC___d501 =
	      rg_tdata2;
      12'h7A3:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_22_THEN_rg_ETC___d501 =
	      rg_tdata3;
      12'h7B0:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_22_THEN_rg_ETC___d501 =
	      { rg_dcsr[31:4], rg_nmi, rg_dcsr[2:0] };
      12'h7B1:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_22_THEN_rg_ETC___d501 = rg_dpc;
      12'h7B2:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_22_THEN_rg_ETC___d501 =
	      rg_dscratch0;
      12'hB00, 12'hC00:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_22_THEN_rg_ETC___d501 =
	      rg_mcycle[31:0];
      12'hB02, 12'hC02:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_22_THEN_rg_ETC___d501 =
	      rg_minstret[31:0];
      12'hB80, 12'hC80:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_22_THEN_rg_ETC___d501 =
	      rg_mcycle[63:32];
      12'hB82, 12'hC82:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_22_THEN_rg_ETC___d501 =
	      rg_minstret[63:32];
      12'hBC0:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_22_THEN_rg_ETC___d501 =
	      { 16'd0, x__h4551 };
      12'hF11, 12'hF12, 12'hF13, 12'hF14:
	  IF_read_csr_port2_csr_addr_EQ_0xC00_22_THEN_rg_ETC___d501 = 32'd0;
      default: IF_read_csr_port2_csr_addr_EQ_0xC00_22_THEN_rg_ETC___d501 =
		   rg_dscratch1;
    endcase
  end
  always@(mav_read_csr_csr_addr or
	  rg_dscratch1 or
	  csr_mstatus_rg_mstatus or
	  csr_mie$mv_read or
	  SEXT__0_CONCAT_rg_mtcc_96_BITS_47_TO_40_97_98__ETC___d220 or
	  rg_mcounteren or
	  rg_mscratch or
	  SEXT__0_CONCAT_rg_mepcc_27_BITS_47_TO_40_28_29_ETC___d251 or
	  rg_mcause or
	  rg_mtval or
	  csr_mip$mv_read or
	  rg_tselect or
	  rg_tdata1 or
	  rg_tdata2 or
	  rg_tdata3 or
	  rg_dcsr or
	  rg_nmi or
	  rg_dpc or rg_dscratch0 or rg_mcycle or rg_minstret or x__h4551)
  begin
    case (mav_read_csr_csr_addr)
      12'h300:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_44_THEN_rg_m_ETC___d723 =
	      csr_mstatus_rg_mstatus;
      12'h301:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_44_THEN_rg_m_ETC___d723 =
	      32'd1074794757;
      12'h304:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_44_THEN_rg_m_ETC___d723 =
	      csr_mie$mv_read;
      12'h305:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_44_THEN_rg_m_ETC___d723 =
	      { SEXT__0_CONCAT_rg_mtcc_96_BITS_47_TO_40_97_98__ETC___d220[31:2],
		1'b0,
		SEXT__0_CONCAT_rg_mtcc_96_BITS_47_TO_40_97_98__ETC___d220[0] };
      12'h306:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_44_THEN_rg_m_ETC___d723 =
	      { 29'd0, rg_mcounteren };
      12'h340:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_44_THEN_rg_m_ETC___d723 =
	      rg_mscratch;
      12'h341:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_44_THEN_rg_m_ETC___d723 =
	      SEXT__0_CONCAT_rg_mepcc_27_BITS_47_TO_40_28_29_ETC___d251;
      12'h342:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_44_THEN_rg_m_ETC___d723 =
	      { rg_mcause[6], 25'd0, rg_mcause[5:0] };
      12'h343:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_44_THEN_rg_m_ETC___d723 =
	      rg_mtval;
      12'h344:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_44_THEN_rg_m_ETC___d723 =
	      csr_mip$mv_read;
      12'h7A0:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_44_THEN_rg_m_ETC___d723 =
	      rg_tselect;
      12'h7A1:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_44_THEN_rg_m_ETC___d723 =
	      rg_tdata1;
      12'h7A2:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_44_THEN_rg_m_ETC___d723 =
	      rg_tdata2;
      12'h7A3:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_44_THEN_rg_m_ETC___d723 =
	      rg_tdata3;
      12'h7B0:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_44_THEN_rg_m_ETC___d723 =
	      { rg_dcsr[31:4], rg_nmi, rg_dcsr[2:0] };
      12'h7B1:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_44_THEN_rg_m_ETC___d723 = rg_dpc;
      12'h7B2:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_44_THEN_rg_m_ETC___d723 =
	      rg_dscratch0;
      12'hB00, 12'hC00:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_44_THEN_rg_m_ETC___d723 =
	      rg_mcycle[31:0];
      12'hB02, 12'hC02:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_44_THEN_rg_m_ETC___d723 =
	      rg_minstret[31:0];
      12'hB80, 12'hC80:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_44_THEN_rg_m_ETC___d723 =
	      rg_mcycle[63:32];
      12'hB82, 12'hC82:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_44_THEN_rg_m_ETC___d723 =
	      rg_minstret[63:32];
      12'hBC0:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_44_THEN_rg_m_ETC___d723 =
	      { 16'd0, x__h4551 };
      12'hF11, 12'hF12, 12'hF13, 12'hF14:
	  IF_mav_read_csr_csr_addr_EQ_0xC00_44_THEN_rg_m_ETC___d723 = 32'd0;
      default: IF_mav_read_csr_csr_addr_EQ_0xC00_44_THEN_rg_m_ETC___d723 =
		   rg_dscratch1;
    endcase
  end
  always@(read_scr_scr_addr or rg_mepcc or rg_mtcc or rg_mtdc or rg_mscratchc)
  begin
    case (read_scr_scr_addr)
      5'd28:
	  IF_read_scr_scr_addr_EQ_28_04_THEN_rg_mtcc_96__ETC___d522 = rg_mtcc;
      5'd29:
	  IF_read_scr_scr_addr_EQ_28_04_THEN_rg_mtcc_96__ETC___d522 = rg_mtdc;
      5'd30:
	  IF_read_scr_scr_addr_EQ_28_04_THEN_rg_mtcc_96__ETC___d522 =
	      rg_mscratchc;
      default: IF_read_scr_scr_addr_EQ_28_04_THEN_rg_mtcc_96__ETC___d522 =
		   rg_mepcc;
    endcase
  end
  always@(mav_scr_write_scr_addr or
	  mav_scr_write_cap or
	  SEXT__0_CONCAT_mav_scr_write_cap_BITS_47_TO_40_ETC___d1142)
  begin
    case (mav_scr_write_scr_addr)
      5'd29:
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q9 =
	      mav_scr_write_cap[82];
      5'd31:
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q9 =
	      SEXT__0_CONCAT_mav_scr_write_cap_BITS_47_TO_40_ETC___d1142 &&
	      mav_scr_write_cap[82];
      default: CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q9 =
		   mav_scr_write_scr_addr == 5'd30 && mav_scr_write_cap[82];
    endcase
  end
  always@(mav_scr_write_scr_addr or
	  mav_scr_write_cap or capUnpacked_capFat_address__h10180)
  begin
    case (mav_scr_write_scr_addr)
      5'd29, 5'd30:
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q10 =
	      mav_scr_write_cap[81:48];
      5'd31:
	  CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q10 =
	      capUnpacked_capFat_address__h10180;
      default: CASE_mav_scr_write_scr_addr_29_mav_scr_write_c_ETC__q10 =
		   34'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	csr_mstatus_rg_mstatus <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_mcycle <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_mepcc <= `BSV_ASSIGNMENT_DELAY 83'd131743744;
	rg_minstret <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_mscratchc <= `BSV_ASSIGNMENT_DELAY 83'd131743744;
	rg_mtcc <= `BSV_ASSIGNMENT_DELAY 83'd131743744;
	rg_mtdc <= `BSV_ASSIGNMENT_DELAY 83'd131743744;
	rg_nmi <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (csr_mstatus_rg_mstatus$EN)
	  csr_mstatus_rg_mstatus <= `BSV_ASSIGNMENT_DELAY
	      csr_mstatus_rg_mstatus$D_IN;
	if (rg_mcycle$EN) rg_mcycle <= `BSV_ASSIGNMENT_DELAY rg_mcycle$D_IN;
	if (rg_mepcc$EN) rg_mepcc <= `BSV_ASSIGNMENT_DELAY rg_mepcc$D_IN;
	if (rg_minstret$EN)
	  rg_minstret <= `BSV_ASSIGNMENT_DELAY rg_minstret$D_IN;
	if (rg_mscratchc$EN)
	  rg_mscratchc <= `BSV_ASSIGNMENT_DELAY rg_mscratchc$D_IN;
	if (rg_mtcc$EN) rg_mtcc <= `BSV_ASSIGNMENT_DELAY rg_mtcc$D_IN;
	if (rg_mtdc$EN) rg_mtdc <= `BSV_ASSIGNMENT_DELAY rg_mtdc$D_IN;
	if (rg_nmi$EN) rg_nmi <= `BSV_ASSIGNMENT_DELAY rg_nmi$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
      end
    if (rg_dcsr$EN) rg_dcsr <= `BSV_ASSIGNMENT_DELAY rg_dcsr$D_IN;
    if (rg_dpc$EN) rg_dpc <= `BSV_ASSIGNMENT_DELAY rg_dpc$D_IN;
    if (rg_dscratch0$EN)
      rg_dscratch0 <= `BSV_ASSIGNMENT_DELAY rg_dscratch0$D_IN;
    if (rg_dscratch1$EN)
      rg_dscratch1 <= `BSV_ASSIGNMENT_DELAY rg_dscratch1$D_IN;
    if (rg_mcause$EN) rg_mcause <= `BSV_ASSIGNMENT_DELAY rg_mcause$D_IN;
    if (rg_mccsr$EN) rg_mccsr <= `BSV_ASSIGNMENT_DELAY rg_mccsr$D_IN;
    if (rg_mcounteren$EN)
      rg_mcounteren <= `BSV_ASSIGNMENT_DELAY rg_mcounteren$D_IN;
    if (rg_mscratch$EN) rg_mscratch <= `BSV_ASSIGNMENT_DELAY rg_mscratch$D_IN;
    if (rg_mtval$EN) rg_mtval <= `BSV_ASSIGNMENT_DELAY rg_mtval$D_IN;
    if (rg_nmi_vector$EN)
      rg_nmi_vector <= `BSV_ASSIGNMENT_DELAY rg_nmi_vector$D_IN;
    if (rg_tdata1$EN) rg_tdata1 <= `BSV_ASSIGNMENT_DELAY rg_tdata1$D_IN;
    if (rg_tdata2$EN) rg_tdata2 <= `BSV_ASSIGNMENT_DELAY rg_tdata2$D_IN;
    if (rg_tdata3$EN) rg_tdata3 <= `BSV_ASSIGNMENT_DELAY rg_tdata3$D_IN;
    if (rg_tselect$EN) rg_tselect <= `BSV_ASSIGNMENT_DELAY rg_tselect$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_verbosity = 4'hA;
    csr_mstatus_rg_mstatus = 32'hAAAAAAAA;
    rg_dcsr = 32'hAAAAAAAA;
    rg_dpc = 32'hAAAAAAAA;
    rg_dscratch0 = 32'hAAAAAAAA;
    rg_dscratch1 = 32'hAAAAAAAA;
    rg_mcause = 7'h2A;
    rg_mccsr = 11'h2AA;
    rg_mcounteren = 3'h2;
    rg_mcycle = 64'hAAAAAAAAAAAAAAAA;
    rg_mepcc = 83'h2AAAAAAAAAAAAAAAAAAAA;
    rg_minstret = 64'hAAAAAAAAAAAAAAAA;
    rg_mscratch = 32'hAAAAAAAA;
    rg_mscratchc = 83'h2AAAAAAAAAAAAAAAAAAAA;
    rg_mtcc = 83'h2AAAAAAAAAAAAAAAAAAAA;
    rg_mtdc = 83'h2AAAAAAAAAAAAAAAAAAAA;
    rg_mtval = 32'hAAAAAAAA;
    rg_nmi = 1'h0;
    rg_nmi_vector = 32'hAAAAAAAA;
    rg_state = 1'h0;
    rg_tdata1 = 32'hAAAAAAAA;
    rg_tdata2 = 32'hAAAAAAAA;
    rg_tdata3 = 32'hAAAAAAAA;
    rg_tselect = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_debug) $display("mstatus = 0x%0h", csr_mstatus_rg_mstatus);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_debug) $display("mip     = 0x%0h", csr_mip$mv_read);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_debug) $display("mie     = 0x%0h", csr_mie$mv_read);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$display("%0d: CSR_Regfile.csr_trap_actions:", rg_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$display("    from priv %0d  pc 0x%0h  interrupt %0d  exc_code %0d  xtval 0x%0h",
		 csr_trap_actions_from_priv,
		 x__h11889 | in__h11998[31:0],
		 csr_trap_actions_interrupt,
		 csr_trap_actions_exc_code,
		 csr_trap_actions_xtval);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write("    priv %0d: ", 2'b11);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write(" ip: 0x%0h", csr_mip$mv_read);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write(" ie: 0x%0h", csr_mie$mv_read);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write(" edeleg: 0x%0h", 29'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write(" ideleg: 0x%0h", 12'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write(" cause:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd0)
	$write("USER_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd1)
	$write("SUPERVISOR_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd2)
	$write("HYPERVISOR_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd3)
	$write("MACHINE_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd4)
	$write("USER_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd5)
	$write("SUPERVISOR_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd6)
	$write("HYPERVISOR_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd7)
	$write("MACHINE_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd8)
	$write("USER_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd9)
	$write("SUPERVISOR_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd10)
	$write("HYPERVISOR_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd11)
	$write("MACHINE_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  rg_mcause[6] &&
	  rg_mcause[5:0] != 6'd0 &&
	  rg_mcause[5:0] != 6'd1 &&
	  rg_mcause[5:0] != 6'd2 &&
	  rg_mcause[5:0] != 6'd3 &&
	  rg_mcause[5:0] != 6'd4 &&
	  rg_mcause[5:0] != 6'd5 &&
	  rg_mcause[5:0] != 6'd6 &&
	  rg_mcause[5:0] != 6'd7 &&
	  rg_mcause[5:0] != 6'd8 &&
	  rg_mcause[5:0] != 6'd9 &&
	  rg_mcause[5:0] != 6'd10 &&
	  rg_mcause[5:0] != 6'd11)
	$write("unknown interrupt Exc_Code %d", rg_mcause[5:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd0)
	$write("INSTRUCTION_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd1)
	$write("INSTRUCTION_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd2)
	$write("ILLEGAL_INSTRUCTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd3)
	$write("BREAKPOINT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd4)
	$write("LOAD_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd5)
	$write("LOAD_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd6)
	$write("STORE_AMO_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd7)
	$write("STORE_AMO_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd8)
	$write("ECALL_FROM_U");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd9)
	$write("ECALL_FROM_S");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd11)
	$write("ECALL_FROM_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd12)
	$write("INSTRUCTION_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd13)
	$write("LOAD_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] == 6'd15)
	$write("STORE_AMO_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  !rg_mcause[6] &&
	  rg_mcause[5:0] != 6'd0 &&
	  rg_mcause[5:0] != 6'd1 &&
	  rg_mcause[5:0] != 6'd2 &&
	  rg_mcause[5:0] != 6'd3 &&
	  rg_mcause[5:0] != 6'd4 &&
	  rg_mcause[5:0] != 6'd5 &&
	  rg_mcause[5:0] != 6'd6 &&
	  rg_mcause[5:0] != 6'd7 &&
	  rg_mcause[5:0] != 6'd8 &&
	  rg_mcause[5:0] != 6'd9 &&
	  rg_mcause[5:0] != 6'd11 &&
	  rg_mcause[5:0] != 6'd12 &&
	  rg_mcause[5:0] != 6'd13 &&
	  rg_mcause[5:0] != 6'd15)
	$write("unknown trap Exc_Code %d", rg_mcause[5:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write(" status: 0x%0h", csr_mstatus_rg_mstatus);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write(" tvec: 0x%0h",
	       { SEXT__0_CONCAT_rg_mtcc_96_BITS_47_TO_40_97_98__ETC___d220[31:2],
		 1'b0,
		 SEXT__0_CONCAT_rg_mtcc_96_BITS_47_TO_40_97_98__ETC___d220[0] });
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write(" epc: 0x%0h",
	       SEXT__0_CONCAT_rg_mepcc_27_BITS_47_TO_40_28_29_ETC___d251);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write(" tval: 0x%0h", rg_mtval);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write("    Return: new pc 0x%0h  ", _theResult_____2__h13535);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write(" new mstatus:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write("MStatus{", "sd:%0d", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write(" tsr:%0d", csr_mstatus_rg_mstatus[22]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write(" tw:%0d", csr_mstatus_rg_mstatus[21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write(" tvm:%0d", csr_mstatus_rg_mstatus[20]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write(" mxr:%0d", csr_mstatus_rg_mstatus[19]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write(" sum:%0d", csr_mstatus_rg_mstatus[18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write(" mprv:%0d", csr_mstatus_rg_mstatus[17]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write(" xs:%0d", 2'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write(" fs:%0d", 2'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write(" mpp:%0d", mpp__h13632);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write(" spp:%0d", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write(" pies:%0d_%0d%0d", csr_mstatus_rg_mstatus[3], 1'd0, 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write(" ies:%0d_%0d%0d", 1'd0, 1'd0, 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write(" new xcause:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h14204 == 6'd0)
	$write("USER_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h14204 == 6'd1)
	$write("SUPERVISOR_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h14204 == 6'd2)
	$write("HYPERVISOR_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h14204 == 6'd3)
	$write("MACHINE_SW_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h14204 == 6'd4)
	$write("USER_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h14204 == 6'd5)
	$write("SUPERVISOR_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h14204 == 6'd6)
	$write("HYPERVISOR_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h14204 == 6'd7)
	$write("MACHINE_TIMER_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h14204 == 6'd8)
	$write("USER_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h14204 == 6'd9)
	$write("SUPERVISOR_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h14204 == 6'd10)
	$write("HYPERVISOR_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  !csr_trap_actions_nmi &&
	  csr_trap_actions_interrupt &&
	  exc_code__h14204 == 6'd11)
	$write("MACHINE_EXTERNAL_INTERRUPT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  NOT_csr_trap_actions_nmi_448_AND_csr_trap_acti_ETC___d1528)
	$write("unknown interrupt Exc_Code %d", exc_code__h14204);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h14204 == 6'd0)
	$write("INSTRUCTION_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h14204 == 6'd1)
	$write("INSTRUCTION_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h14204 == 6'd2)
	$write("ILLEGAL_INSTRUCTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h14204 == 6'd3)
	$write("BREAKPOINT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h14204 == 6'd4)
	$write("LOAD_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h14204 == 6'd5)
	$write("LOAD_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h14204 == 6'd6)
	$write("STORE_AMO_ADDR_MISALIGNED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h14204 == 6'd7)
	$write("STORE_AMO_ACCESS_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h14204 == 6'd8)
	$write("ECALL_FROM_U");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h14204 == 6'd9)
	$write("ECALL_FROM_S");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h14204 == 6'd11)
	$write("ECALL_FROM_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h14204 == 6'd12)
	$write("INSTRUCTION_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h14204 == 6'd13)
	$write("LOAD_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  (csr_trap_actions_nmi || !csr_trap_actions_interrupt) &&
	  exc_code__h14204 == 6'd15)
	$write("STORE_AMO_PAGE_FAULT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  csr_trap_actions_nmi_OR_NOT_csr_trap_actions_i_ETC___d1579)
	$write("unknown trap Exc_Code %d", exc_code__h14204);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write(" new priv %0d", 2'b11);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_csr_trap_actions &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$display("");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_csr_write &&
	  mav_csr_write_csr_addr_ULT_0xB03_26_OR_NOT_mav_ETC___d1001 &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$display("%0d: ERROR: CSR-write addr 0x%0h val 0x%0h not successful",
		 rg_mcycle,
		 mav_csr_write_csr_addr,
		 mav_csr_write_word);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write("%0d: ERROR: SCR-write addr 0x%0h val ",
	       rg_mcycle,
	       mav_scr_write_scr_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write("valid:%b",
	       mav_scr_write_cap[82],
	       " perms:0x%x",
	       { 19'd0, mav_scr_write_cap[39:28] });
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write(" reserved:0x%x", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write(" format:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  mav_scr_write_cap[22])
	$write("EmbeddedExp");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  !mav_scr_write_cap[22])
	$write("Exp0");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write(" bounds:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write("Bounds { ", "exp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write("%d", $unsigned(mav_scr_write_cap[21:16]));
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write(", ", "topBits: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write("'h%h", mav_scr_write_cap[15:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write(", ", "baseBits: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write("'h%h", mav_scr_write_cap[7:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write(" address:0x%x", mav_scr_write_cap[81:48]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write(" addrBits:0x%x", mav_scr_write_cap[47:40]);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write(" {bot:0x%x top:0x%x len:0x%x offset:0x%x}",
	       { 2'd0, bot__h10548 },
	       mav_scr_write_cap_BITS_21_TO_16_046_ULT_25_171_ETC___d1198 ?
		 result__h11133 :
		 ret__h10671,
	       (mav_scr_write_cap[21:16] < 6'd26) ?
		 length__h11193 :
		 34'h3FFFFFFFF,
	       SEXT__0_CONCAT_mav_scr_write_cap_BITS_47_TO_40_ETC___d1074);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write(" (TempFields: {");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write("MetaInfo { ", "repBoundTopBits: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write("'h%h", repBound__h11424);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write(", ", "topHi: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  mav_scr_write_cap_BITS_15_TO_13_176_ULT_mav_sc_ETC___d1177)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  !mav_scr_write_cap_BITS_15_TO_13_176_ULT_mav_sc_ETC___d1177)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write(", ", "baseHi: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  mav_scr_write_cap_BITS_7_TO_5_054_ULT_mav_scr__ETC___d1056)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  !mav_scr_write_cap_BITS_7_TO_5_054_ULT_mav_scr__ETC___d1056)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write(", ", "addrHi: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  mav_scr_write_cap_BITS_47_TO_45_057_ULT_mav_sc_ETC___d1058)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004 &&
	  !mav_scr_write_cap_BITS_47_TO_45_057_ULT_mav_sc_ETC___d1058)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write(", ", "topCorrection: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write("%d", $signed(x__h11485));
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write(", ", "baseCorrection: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write("%d", $signed(x__h11504), " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write("})");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_mav_scr_write && mav_scr_write_scr_addr != 5'd28 &&
	  mav_scr_write_scr_addr != 5'd29 &&
	  mav_scr_write_scr_addr != 5'd31 &&
	  mav_scr_write_scr_addr != 5'd30 &&
	  NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$write(" not successful", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$display("%0d: CSR_RegFile: m_external_interrupt_req: %x",
		 rg_mcycle,
		 m_external_interrupt_req_set_not_clear);
    if (RST_N != `BSV_RESET_VALUE)
      if (NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$display("%0d: CSR_RegFile: s_external_interrupt_req: %x",
		 rg_mcycle,
		 s_external_interrupt_req_set_not_clear);
    if (RST_N != `BSV_RESET_VALUE)
      if (NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$display("%0d: CSR_RegFile: timer_interrupt_req: %x",
		 rg_mcycle,
		 timer_interrupt_req_set_not_clear);
    if (RST_N != `BSV_RESET_VALUE)
      if (NOT_cfg_verbosity_read__002_ULE_1_003___d1004)
	$display("%0d: CSR_RegFile: software_interrupt_req: %x",
		 rg_mcycle,
		 software_interrupt_req_set_not_clear);
  end
  // synopsys translate_on
endmodule  // mkCSR_RegFile

