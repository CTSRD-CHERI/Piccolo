//
// Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
//
// On Mon Jun 24 11:45:52 BST 2019
//
//
// Ports:
// Name                         I/O  size props
// RDY_reset                      O     1 const
// av_read                        O    32
// RDY_av_read                    O     1
// RDY_write                      O     1
// master_awid                    O     4
// master_awaddr                  O    64
// master_awlen                   O     8
// master_awsize                  O     3
// master_awburst                 O     2
// master_awlock                  O     1
// master_awcache                 O     4
// master_awprot                  O     3
// master_awqos                   O     4
// master_awregion                O     4
// master_awvalid                 O     1
// master_wdata                   O    64
// master_wstrb                   O     8
// master_wlast                   O     1
// master_wuser                   O     2
// master_wvalid                  O     1
// master_bready                  O     1
// master_arid                    O     4
// master_araddr                  O    64
// master_arlen                   O     8
// master_arsize                  O     3
// master_arburst                 O     2
// master_arlock                  O     1
// master_arcache                 O     4
// master_arprot                  O     3
// master_arqos                   O     4
// master_arregion                O     4
// master_arvalid                 O     1
// master_rready                  O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// av_read_dm_addr                I     7
// write_dm_addr                  I     7
// write_dm_word                  I    32
// master_awready                 I     1
// master_wready                  I     1
// master_bid                     I     4
// master_bresp                   I     2
// master_arready                 I     1
// master_rid                     I     4
// master_rdata                   I    64
// master_rresp                   I     2
// master_rlast                   I     1
// master_ruser                   I     2
// EN_reset                       I     1
// EN_write                       I     1
// master_bvalid                  I     1
// master_rvalid                  I     1
// EN_av_read                     I     1
//
// Combinational paths from inputs to outputs:
//   (write_dm_addr,
//    master_rid,
//    master_rdata,
//    master_rresp,
//    master_rlast,
//    master_ruser,
//    EN_write,
//    master_rvalid) -> master_awid
//   (write_dm_addr,
//    master_rid,
//    master_rdata,
//    master_rresp,
//    master_rlast,
//    master_ruser,
//    EN_write,
//    master_rvalid) -> master_awaddr
//   (write_dm_addr,
//    master_rid,
//    master_rdata,
//    master_rresp,
//    master_rlast,
//    master_ruser,
//    EN_write,
//    master_rvalid) -> master_awlen
//   (write_dm_addr,
//    master_rid,
//    master_rdata,
//    master_rresp,
//    master_rlast,
//    master_ruser,
//    EN_write,
//    master_rvalid) -> master_awsize
//   (write_dm_addr,
//    master_rid,
//    master_rdata,
//    master_rresp,
//    master_rlast,
//    master_ruser,
//    EN_write,
//    master_rvalid) -> master_awburst
//   (write_dm_addr,
//    master_rid,
//    master_rdata,
//    master_rresp,
//    master_rlast,
//    master_ruser,
//    EN_write,
//    master_rvalid) -> master_awlock
//   (write_dm_addr,
//    master_rid,
//    master_rdata,
//    master_rresp,
//    master_rlast,
//    master_ruser,
//    EN_write,
//    master_rvalid) -> master_awcache
//   (write_dm_addr,
//    master_rid,
//    master_rdata,
//    master_rresp,
//    master_rlast,
//    master_ruser,
//    EN_write,
//    master_rvalid) -> master_awprot
//   (write_dm_addr,
//    master_rid,
//    master_rdata,
//    master_rresp,
//    master_rlast,
//    master_ruser,
//    EN_write,
//    master_rvalid) -> master_awqos
//   (write_dm_addr,
//    master_rid,
//    master_rdata,
//    master_rresp,
//    master_rlast,
//    master_ruser,
//    EN_write,
//    master_rvalid) -> master_awregion
//   (write_dm_addr,
//    master_rid,
//    master_rdata,
//    master_rresp,
//    master_rlast,
//    master_ruser,
//    EN_write,
//    master_rvalid) -> master_awuser
//   (write_dm_addr,
//    master_rid,
//    master_rdata,
//    master_rresp,
//    master_rlast,
//    master_ruser,
//    EN_write,
//    master_rvalid) -> master_awvalid
//   (write_dm_addr,
//    write_dm_word,
//    master_rid,
//    master_rdata,
//    master_rresp,
//    master_rlast,
//    master_ruser,
//    EN_write,
//    master_rvalid) -> master_wdata
//   (write_dm_addr,
//    write_dm_word,
//    master_rid,
//    master_rdata,
//    master_rresp,
//    master_rlast,
//    master_ruser,
//    EN_write,
//    master_rvalid) -> master_wstrb
//   (write_dm_addr,
//    write_dm_word,
//    master_rid,
//    master_rdata,
//    master_rresp,
//    master_rlast,
//    master_ruser,
//    EN_write,
//    master_rvalid) -> master_wlast
//   (write_dm_addr,
//    write_dm_word,
//    master_rid,
//    master_rdata,
//    master_rresp,
//    master_rlast,
//    master_ruser,
//    EN_write,
//    master_rvalid) -> master_wuser
//   (write_dm_addr,
//    write_dm_word,
//    master_rid,
//    master_rdata,
//    master_rresp,
//    master_rlast,
//    master_ruser,
//    EN_write,
//    master_rvalid) -> master_wvalid
//   (write_dm_addr,
//    write_dm_word,
//    master_rid,
//    master_rdata,
//    master_rresp,
//    master_rlast,
//    master_ruser,
//    av_read_dm_addr,
//    EN_write,
//    master_rvalid,
//    EN_av_read) -> master_arid
//   (write_dm_addr,
//    write_dm_word,
//    master_rid,
//    master_rdata,
//    master_rresp,
//    master_rlast,
//    master_ruser,
//    av_read_dm_addr,
//    EN_write,
//    master_rvalid,
//    EN_av_read) -> master_araddr
//   (write_dm_addr,
//    write_dm_word,
//    master_rid,
//    master_rdata,
//    master_rresp,
//    master_rlast,
//    master_ruser,
//    av_read_dm_addr,
//    EN_write,
//    master_rvalid,
//    EN_av_read) -> master_arlen
//   (write_dm_addr,
//    write_dm_word,
//    master_rid,
//    master_rdata,
//    master_rresp,
//    master_rlast,
//    master_ruser,
//    av_read_dm_addr,
//    EN_write,
//    master_rvalid,
//    EN_av_read) -> master_arsize
//   (write_dm_addr,
//    write_dm_word,
//    master_rid,
//    master_rdata,
//    master_rresp,
//    master_rlast,
//    master_ruser,
//    av_read_dm_addr,
//    EN_write,
//    master_rvalid,
//    EN_av_read) -> master_arburst
//   (write_dm_addr,
//    write_dm_word,
//    master_rid,
//    master_rdata,
//    master_rresp,
//    master_rlast,
//    master_ruser,
//    av_read_dm_addr,
//    EN_write,
//    master_rvalid,
//    EN_av_read) -> master_arlock
//   (write_dm_addr,
//    write_dm_word,
//    master_rid,
//    master_rdata,
//    master_rresp,
//    master_rlast,
//    master_ruser,
//    av_read_dm_addr,
//    EN_write,
//    master_rvalid,
//    EN_av_read) -> master_arcache
//   (write_dm_addr,
//    write_dm_word,
//    master_rid,
//    master_rdata,
//    master_rresp,
//    master_rlast,
//    master_ruser,
//    av_read_dm_addr,
//    EN_write,
//    master_rvalid,
//    EN_av_read) -> master_arprot
//   (write_dm_addr,
//    write_dm_word,
//    master_rid,
//    master_rdata,
//    master_rresp,
//    master_rlast,
//    master_ruser,
//    av_read_dm_addr,
//    EN_write,
//    master_rvalid,
//    EN_av_read) -> master_arqos
//   (write_dm_addr,
//    write_dm_word,
//    master_rid,
//    master_rdata,
//    master_rresp,
//    master_rlast,
//    master_ruser,
//    av_read_dm_addr,
//    EN_write,
//    master_rvalid,
//    EN_av_read) -> master_arregion
//   (write_dm_addr,
//    write_dm_word,
//    master_rid,
//    master_rdata,
//    master_rresp,
//    master_rlast,
//    master_ruser,
//    av_read_dm_addr,
//    EN_write,
//    master_rvalid,
//    EN_av_read) -> master_aruser
//   (write_dm_addr,
//    write_dm_word,
//    master_rid,
//    master_rdata,
//    master_rresp,
//    master_rlast,
//    master_ruser,
//    av_read_dm_addr,
//    EN_write,
//    master_rvalid,
//    EN_av_read) -> master_arvalid
//   av_read_dm_addr -> av_read
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkDM_System_Bus(CLK,
		       RST_N,

		       EN_reset,
		       RDY_reset,

		       av_read_dm_addr,
		       EN_av_read,
		       av_read,
		       RDY_av_read,

		       write_dm_addr,
		       write_dm_word,
		       EN_write,
		       RDY_write,

		       master_awid,

		       master_awaddr,

		       master_awlen,

		       master_awsize,

		       master_awburst,

		       master_awlock,

		       master_awcache,

		       master_awprot,

		       master_awqos,

		       master_awregion,

		       master_awvalid,

		       master_awready,

		       master_wdata,

		       master_wstrb,

		       master_wlast,

		       master_wuser,

		       master_wvalid,

		       master_wready,

		       master_bid,
		       master_bresp,
		       master_bvalid,

		       master_bready,

		       master_arid,

		       master_araddr,

		       master_arlen,

		       master_arsize,

		       master_arburst,

		       master_arlock,

		       master_arcache,

		       master_arprot,

		       master_arqos,

		       master_arregion,

		       master_arvalid,

		       master_arready,

		       master_rid,
		       master_rdata,
		       master_rresp,
		       master_rlast,
		       master_ruser,
		       master_rvalid,

		       master_rready);
  input  CLK;
  input  RST_N;

  // action method reset
  input  EN_reset;
  output RDY_reset;

  // actionvalue method av_read
  input  [6 : 0] av_read_dm_addr;
  input  EN_av_read;
  output [31 : 0] av_read;
  output RDY_av_read;

  // action method write
  input  [6 : 0] write_dm_addr;
  input  [31 : 0] write_dm_word;
  input  EN_write;
  output RDY_write;

  // value method master_aw_awid
  output [3 : 0] master_awid;

  // value method master_aw_awaddr
  output [63 : 0] master_awaddr;

  // value method master_aw_awlen
  output [7 : 0] master_awlen;

  // value method master_aw_awsize
  output [2 : 0] master_awsize;

  // value method master_aw_awburst
  output [1 : 0] master_awburst;

  // value method master_aw_awlock
  output master_awlock;

  // value method master_aw_awcache
  output [3 : 0] master_awcache;

  // value method master_aw_awprot
  output [2 : 0] master_awprot;

  // value method master_aw_awqos
  output [3 : 0] master_awqos;

  // value method master_aw_awregion
  output [3 : 0] master_awregion;

  // value method master_aw_awuser

  // value method master_aw_awvalid
  output master_awvalid;

  // action method master_aw_awready
  input  master_awready;

  // value method master_w_wdata
  output [63 : 0] master_wdata;

  // value method master_w_wstrb
  output [7 : 0] master_wstrb;

  // value method master_w_wlast
  output master_wlast;

  // value method master_w_wuser
  output [1 : 0] master_wuser;

  // value method master_w_wvalid
  output master_wvalid;

  // action method master_w_wready
  input  master_wready;

  // action method master_b_bflit
  input  [3 : 0] master_bid;
  input  [1 : 0] master_bresp;
  input  master_bvalid;

  // value method master_b_bready
  output master_bready;

  // value method master_ar_arid
  output [3 : 0] master_arid;

  // value method master_ar_araddr
  output [63 : 0] master_araddr;

  // value method master_ar_arlen
  output [7 : 0] master_arlen;

  // value method master_ar_arsize
  output [2 : 0] master_arsize;

  // value method master_ar_arburst
  output [1 : 0] master_arburst;

  // value method master_ar_arlock
  output master_arlock;

  // value method master_ar_arcache
  output [3 : 0] master_arcache;

  // value method master_ar_arprot
  output [2 : 0] master_arprot;

  // value method master_ar_arqos
  output [3 : 0] master_arqos;

  // value method master_ar_arregion
  output [3 : 0] master_arregion;

  // value method master_ar_aruser

  // value method master_ar_arvalid
  output master_arvalid;

  // action method master_ar_arready
  input  master_arready;

  // action method master_r_rflit
  input  [3 : 0] master_rid;
  input  [63 : 0] master_rdata;
  input  [1 : 0] master_rresp;
  input  master_rlast;
  input  [1 : 0] master_ruser;
  input  master_rvalid;

  // value method master_r_rready
  output master_rready;

  // signals for module outputs
  reg [31 : 0] av_read;
  wire [63 : 0] master_araddr, master_awaddr, master_wdata;
  wire [7 : 0] master_arlen, master_awlen, master_wstrb;
  wire [3 : 0] master_arcache,
	       master_arid,
	       master_arqos,
	       master_arregion,
	       master_awcache,
	       master_awid,
	       master_awqos,
	       master_awregion;
  wire [2 : 0] master_arprot, master_arsize, master_awprot, master_awsize;
  wire [1 : 0] master_arburst, master_awburst, master_wuser;
  wire RDY_av_read,
       RDY_reset,
       RDY_write,
       master_arlock,
       master_arvalid,
       master_awlock,
       master_awvalid,
       master_bready,
       master_rready,
       master_wlast,
       master_wvalid;

  // inlined wires
  wire [97 : 0] master_xactor_shim_arff_rv$port0__write_1,
		master_xactor_shim_arff_rv$port1__read,
		master_xactor_shim_arff_rv$port2__read,
		master_xactor_shim_arff_rv$port3__read,
		master_xactor_shim_awff_rv$port0__write_1,
		master_xactor_shim_awff_rv$port1__read,
		master_xactor_shim_awff_rv$port2__read,
		master_xactor_shim_awff_rv$port3__read;
  wire [75 : 0] master_xactor_shim_wff_rv$port0__write_1,
		master_xactor_shim_wff_rv$port1__read,
		master_xactor_shim_wff_rv$port2__read,
		master_xactor_shim_wff_rv$port3__read;
  wire [73 : 0] master_xactor_shim_rff_rv$port0__write_1,
		master_xactor_shim_rff_rv$port1__read,
		master_xactor_shim_rff_rv$port2__read,
		master_xactor_shim_rff_rv$port3__read;
  wire [72 : 0] master_xactor_ug_master_u_r_putWire$wget;
  wire [6 : 0] master_xactor_shim_bff_rv$port0__write_1,
	       master_xactor_shim_bff_rv$port1__read,
	       master_xactor_shim_bff_rv$port2__read,
	       master_xactor_shim_bff_rv$port3__read;
  wire [5 : 0] master_xactor_ug_master_u_b_putWire$wget;
  wire master_xactor_shim_arff_rv$EN_port0__write,
       master_xactor_shim_awff_rv$EN_port0__write,
       master_xactor_shim_bff_rv$EN_port1__write,
       master_xactor_shim_rff_rv$EN_port1__write,
       master_xactor_shim_wff_rv$EN_port0__write,
       master_xactor_ug_master_u_ar_dropWire$whas,
       master_xactor_ug_master_u_aw_dropWire$whas,
       master_xactor_ug_master_u_b_putWire$whas,
       master_xactor_ug_master_u_r_putWire$whas,
       master_xactor_ug_master_u_w_dropWire$whas;

  // register master_xactor_clearing
  reg master_xactor_clearing;
  wire master_xactor_clearing$D_IN, master_xactor_clearing$EN;

  // register master_xactor_shim_arff_rv
  reg [97 : 0] master_xactor_shim_arff_rv;
  wire [97 : 0] master_xactor_shim_arff_rv$D_IN;
  wire master_xactor_shim_arff_rv$EN;

  // register master_xactor_shim_awff_rv
  reg [97 : 0] master_xactor_shim_awff_rv;
  wire [97 : 0] master_xactor_shim_awff_rv$D_IN;
  wire master_xactor_shim_awff_rv$EN;

  // register master_xactor_shim_bff_rv
  reg [6 : 0] master_xactor_shim_bff_rv;
  wire [6 : 0] master_xactor_shim_bff_rv$D_IN;
  wire master_xactor_shim_bff_rv$EN;

  // register master_xactor_shim_rff_rv
  reg [73 : 0] master_xactor_shim_rff_rv;
  wire [73 : 0] master_xactor_shim_rff_rv$D_IN;
  wire master_xactor_shim_rff_rv$EN;

  // register master_xactor_shim_wff_rv
  reg [75 : 0] master_xactor_shim_wff_rv;
  wire [75 : 0] master_xactor_shim_wff_rv$D_IN;
  wire master_xactor_shim_wff_rv$EN;

  // register rg_sb_state
  reg [1 : 0] rg_sb_state;
  wire [1 : 0] rg_sb_state$D_IN;
  wire rg_sb_state$EN;

  // register rg_sbaddress0
  reg [31 : 0] rg_sbaddress0;
  reg [31 : 0] rg_sbaddress0$D_IN;
  wire rg_sbaddress0$EN;

  // register rg_sbaddress1
  reg [31 : 0] rg_sbaddress1;
  wire [31 : 0] rg_sbaddress1$D_IN;
  wire rg_sbaddress1$EN;

  // register rg_sbaddress_reading
  reg [63 : 0] rg_sbaddress_reading;
  wire [63 : 0] rg_sbaddress_reading$D_IN;
  wire rg_sbaddress_reading$EN;

  // register rg_sbcs_sbaccess
  reg [2 : 0] rg_sbcs_sbaccess;
  wire [2 : 0] rg_sbcs_sbaccess$D_IN;
  wire rg_sbcs_sbaccess$EN;

  // register rg_sbcs_sbautoincrement
  reg rg_sbcs_sbautoincrement;
  wire rg_sbcs_sbautoincrement$D_IN, rg_sbcs_sbautoincrement$EN;

  // register rg_sbcs_sbbusyerror
  reg rg_sbcs_sbbusyerror;
  reg rg_sbcs_sbbusyerror$D_IN;
  wire rg_sbcs_sbbusyerror$EN;

  // register rg_sbcs_sberror
  reg [2 : 0] rg_sbcs_sberror;
  reg [2 : 0] rg_sbcs_sberror$D_IN;
  wire rg_sbcs_sberror$EN;

  // register rg_sbcs_sbreadonaddr
  reg rg_sbcs_sbreadonaddr;
  wire rg_sbcs_sbreadonaddr$D_IN, rg_sbcs_sbreadonaddr$EN;

  // register rg_sbcs_sbreadondata
  reg rg_sbcs_sbreadondata;
  wire rg_sbcs_sbreadondata$D_IN, rg_sbcs_sbreadondata$EN;

  // register rg_sbdata0
  reg [31 : 0] rg_sbdata0;
  reg [31 : 0] rg_sbdata0$D_IN;
  wire rg_sbdata0$EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_master_xactor_do_clear,
       CAN_FIRE_RL_master_xactor_ug_master_u_ar_doDrop,
       CAN_FIRE_RL_master_xactor_ug_master_u_ar_setPeek,
       CAN_FIRE_RL_master_xactor_ug_master_u_ar_warnDoDrop,
       CAN_FIRE_RL_master_xactor_ug_master_u_aw_doDrop,
       CAN_FIRE_RL_master_xactor_ug_master_u_aw_setPeek,
       CAN_FIRE_RL_master_xactor_ug_master_u_aw_warnDoDrop,
       CAN_FIRE_RL_master_xactor_ug_master_u_b_doPut,
       CAN_FIRE_RL_master_xactor_ug_master_u_b_warnDoPut,
       CAN_FIRE_RL_master_xactor_ug_master_u_r_doPut,
       CAN_FIRE_RL_master_xactor_ug_master_u_r_warnDoPut,
       CAN_FIRE_RL_master_xactor_ug_master_u_w_doDrop,
       CAN_FIRE_RL_master_xactor_ug_master_u_w_setPeek,
       CAN_FIRE_RL_master_xactor_ug_master_u_w_warnDoDrop,
       CAN_FIRE_RL_rl_sb_read_finish,
       CAN_FIRE_RL_rl_sb_write_response,
       CAN_FIRE_av_read,
       CAN_FIRE_master_ar_arready,
       CAN_FIRE_master_aw_awready,
       CAN_FIRE_master_b_bflit,
       CAN_FIRE_master_r_rflit,
       CAN_FIRE_master_w_wready,
       CAN_FIRE_reset,
       CAN_FIRE_write,
       WILL_FIRE_RL_master_xactor_do_clear,
       WILL_FIRE_RL_master_xactor_ug_master_u_ar_doDrop,
       WILL_FIRE_RL_master_xactor_ug_master_u_ar_setPeek,
       WILL_FIRE_RL_master_xactor_ug_master_u_ar_warnDoDrop,
       WILL_FIRE_RL_master_xactor_ug_master_u_aw_doDrop,
       WILL_FIRE_RL_master_xactor_ug_master_u_aw_setPeek,
       WILL_FIRE_RL_master_xactor_ug_master_u_aw_warnDoDrop,
       WILL_FIRE_RL_master_xactor_ug_master_u_b_doPut,
       WILL_FIRE_RL_master_xactor_ug_master_u_b_warnDoPut,
       WILL_FIRE_RL_master_xactor_ug_master_u_r_doPut,
       WILL_FIRE_RL_master_xactor_ug_master_u_r_warnDoPut,
       WILL_FIRE_RL_master_xactor_ug_master_u_w_doDrop,
       WILL_FIRE_RL_master_xactor_ug_master_u_w_setPeek,
       WILL_FIRE_RL_master_xactor_ug_master_u_w_warnDoDrop,
       WILL_FIRE_RL_rl_sb_read_finish,
       WILL_FIRE_RL_rl_sb_write_response,
       WILL_FIRE_av_read,
       WILL_FIRE_master_ar_arready,
       WILL_FIRE_master_aw_awready,
       WILL_FIRE_master_b_bflit,
       WILL_FIRE_master_r_rflit,
       WILL_FIRE_master_w_wready,
       WILL_FIRE_reset,
       WILL_FIRE_write;

  // inputs to muxes for submodule ports
  reg [31 : 0] MUX_rg_sbaddress0$write_1__VAL_2;
  reg [2 : 0] MUX_rg_sbcs_sberror$write_1__VAL_4;
  wire [97 : 0] MUX_master_xactor_shim_arff_rv$port0__write_1__VAL_1,
		MUX_master_xactor_shim_arff_rv$port0__write_1__VAL_2;
  wire MUX_master_xactor_shim_arff_rv$port0__write_1__SEL_1,
       MUX_rg_sbaddress0$write_1__SEL_2,
       MUX_rg_sbaddress0$write_1__SEL_3,
       MUX_rg_sbaddress1$write_1__SEL_2,
       MUX_rg_sbcs_sbbusyerror$write_1__SEL_2,
       MUX_rg_sbcs_sbbusyerror$write_1__SEL_3,
       MUX_rg_sbcs_sberror$write_1__SEL_1,
       MUX_rg_sbcs_sberror$write_1__SEL_3,
       MUX_rg_sbcs_sberror$write_1__SEL_4,
       MUX_rg_sbdata0$write_1__SEL_3;

  // remaining internal signals
  reg [63 : 0] CASE_rg_sbaddress_reading_BITS_2_TO_0_0x0_resu_ETC__q1,
	       IF_rg_sbaddress_reading_1_BITS_2_TO_0_2_EQ_0x0_ETC___d104,
	       IF_rg_sbaddress_reading_1_BITS_2_TO_0_2_EQ_0x0_ETC___d117,
	       IF_rg_sbcs_sbaccess_9_EQ_0_0_THEN_1_ELSE_IF_rg_ETC___d155,
	       IF_rg_sbcs_sbaccess_9_EQ_0_0_THEN_IF_rg_sbaddr_ETC___d130,
	       wrd_wdata__h7218;
  reg [7 : 0] wrd_wstrb__h7219;
  reg [2 : 0] _theResult___snd_snd_val__h7104, axi4_size_val__h5373;
  wire [96 : 0] master_xactor_shim_arff_rvport1__read_BITS_96_ETC__q5,
		master_xactor_shim_awff_rvport1__read_BITS_96_ETC__q3;
  wire [74 : 0] master_xactor_shim_wff_rvport1__read_BITS_74__ETC__q4;
  wire [63 : 0] _theResult___fst__h7089,
		addr64395_PLUS_IF_rg_sbcs_sbaccess_9_EQ_0_0_TH_ETC__q2,
		addr64__h6395,
		result__h3810,
		result__h3840,
		result__h3867,
		result__h3894,
		result__h3921,
		result__h3948,
		result__h3975,
		result__h4002,
		result__h4047,
		result__h4074,
		result__h4101,
		result__h4128,
		result__h4169,
		result__h4196,
		sbaddress101_PLUS_IF_rg_sbcs_sbaccess_9_EQ_0_0_ETC__q6,
		sbaddress__h3101,
		word64__h7034;
  wire [31 : 0] IF_rg_sbcs_sbreadonaddr_75_THEN_IF_rg_sbcs_sba_ETC___d361,
		v__h4785,
		v__h4919;
  wire [7 : 0] strobe64__h7087, strobe64__h7091, strobe64__h7095;
  wire [5 : 0] shift_bits__h7037;
  wire rg_sb_state_7_EQ_0_39_AND_NOT_rg_sbcs_sbbusyer_ETC___d147,
       rg_sb_state_7_EQ_0_39_AND_NOT_rg_sbcs_sbbusyer_ETC___d161,
       rg_sb_state_7_EQ_0_39_AND_NOT_rg_sbcs_sbbusyer_ETC___d367,
       rg_sbcs_sberror_9_EQ_0_0_AND_rg_sbcs_sbreadona_ETC___d345,
       write_dm_addr_EQ_0x38_95_AND_rg_sbcs_sberror_9_ETC___d310,
       write_dm_addr_EQ_0x38_95_AND_rg_sbcs_sberror_9_ETC___d319,
       write_dm_addr_EQ_0x38_95_AND_rg_sbcs_sberror_9_ETC___d325,
       write_dm_addr_EQ_0x38_95_AND_rg_sbcs_sberror_9_ETC___d327,
       write_dm_addr_EQ_0x38_95_AND_rg_sbcs_sberror_9_ETC___d332,
       write_dm_addr_EQ_0x3C_15_AND_rg_sb_state_7_EQ__ETC___d377;

  // action method reset
  assign RDY_reset = 1'd1 ;
  assign CAN_FIRE_reset = 1'd1 ;
  assign WILL_FIRE_reset = EN_reset ;

  // actionvalue method av_read
  always@(av_read_dm_addr or
	  v__h4785 or rg_sbaddress0 or rg_sbaddress1 or v__h4919)
  begin
    case (av_read_dm_addr)
      7'h38: av_read = v__h4785;
      7'h39: av_read = rg_sbaddress0;
      7'h3A: av_read = rg_sbaddress1;
      7'h3C: av_read = v__h4919;
      default: av_read = 32'd0;
    endcase
  end
  assign RDY_av_read =
	     rg_sb_state == 2'd0 &&
	     (rg_sbcs_sbbusyerror || rg_sbcs_sberror != 3'd0 ||
	      !rg_sbcs_sbreadondata ||
	      !master_xactor_clearing && !master_xactor_shim_arff_rv[97]) ;
  assign CAN_FIRE_av_read = RDY_av_read ;
  assign WILL_FIRE_av_read = EN_av_read ;

  // action method write
  assign RDY_write = CAN_FIRE_write && !WILL_FIRE_RL_rl_sb_read_finish ;
  assign CAN_FIRE_write =
	     (rg_sb_state != 2'd0 || rg_sbcs_sbbusyerror ||
	      rg_sbcs_sberror != 3'd0 ||
	      !rg_sbcs_sbreadonaddr ||
	      !master_xactor_clearing && !master_xactor_shim_arff_rv[97]) &&
	     (rg_sb_state != 2'd0 || rg_sbcs_sbbusyerror ||
	      rg_sbcs_sberror != 3'd0 ||
	      !master_xactor_clearing && !master_xactor_shim_awff_rv[97] &&
	      !master_xactor_shim_wff_rv[75]) ;
  assign WILL_FIRE_write = EN_write ;

  // value method master_aw_awid
  assign master_awid =
	     master_xactor_shim_awff_rvport1__read_BITS_96_ETC__q3[96:93] ;

  // value method master_aw_awaddr
  assign master_awaddr =
	     master_xactor_shim_awff_rvport1__read_BITS_96_ETC__q3[92:29] ;

  // value method master_aw_awlen
  assign master_awlen =
	     master_xactor_shim_awff_rvport1__read_BITS_96_ETC__q3[28:21] ;

  // value method master_aw_awsize
  assign master_awsize =
	     master_xactor_shim_awff_rvport1__read_BITS_96_ETC__q3[20:18] ;

  // value method master_aw_awburst
  assign master_awburst =
	     master_xactor_shim_awff_rvport1__read_BITS_96_ETC__q3[17:16] ;

  // value method master_aw_awlock
  assign master_awlock =
	     master_xactor_shim_awff_rvport1__read_BITS_96_ETC__q3[15] ;

  // value method master_aw_awcache
  assign master_awcache =
	     master_xactor_shim_awff_rvport1__read_BITS_96_ETC__q3[14:11] ;

  // value method master_aw_awprot
  assign master_awprot =
	     master_xactor_shim_awff_rvport1__read_BITS_96_ETC__q3[10:8] ;

  // value method master_aw_awqos
  assign master_awqos =
	     master_xactor_shim_awff_rvport1__read_BITS_96_ETC__q3[7:4] ;

  // value method master_aw_awregion
  assign master_awregion =
	     master_xactor_shim_awff_rvport1__read_BITS_96_ETC__q3[3:0] ;

  // value method master_aw_awvalid
  assign master_awvalid = CAN_FIRE_RL_master_xactor_ug_master_u_aw_setPeek ;

  // action method master_aw_awready
  assign CAN_FIRE_master_aw_awready = 1'd1 ;
  assign WILL_FIRE_master_aw_awready = 1'd1 ;

  // value method master_w_wdata
  assign master_wdata =
	     master_xactor_shim_wff_rvport1__read_BITS_74__ETC__q4[74:11] ;

  // value method master_w_wstrb
  assign master_wstrb =
	     master_xactor_shim_wff_rvport1__read_BITS_74__ETC__q4[10:3] ;

  // value method master_w_wlast
  assign master_wlast =
	     master_xactor_shim_wff_rvport1__read_BITS_74__ETC__q4[2] ;

  // value method master_w_wuser
  assign master_wuser =
	     master_xactor_shim_wff_rvport1__read_BITS_74__ETC__q4[1:0] ;

  // value method master_w_wvalid
  assign master_wvalid = CAN_FIRE_RL_master_xactor_ug_master_u_w_setPeek ;

  // action method master_w_wready
  assign CAN_FIRE_master_w_wready = 1'd1 ;
  assign WILL_FIRE_master_w_wready = 1'd1 ;

  // action method master_b_bflit
  assign CAN_FIRE_master_b_bflit = 1'd1 ;
  assign WILL_FIRE_master_b_bflit = master_bvalid ;

  // value method master_b_bready
  assign master_bready = !master_xactor_shim_bff_rv[6] ;

  // value method master_ar_arid
  assign master_arid =
	     master_xactor_shim_arff_rvport1__read_BITS_96_ETC__q5[96:93] ;

  // value method master_ar_araddr
  assign master_araddr =
	     master_xactor_shim_arff_rvport1__read_BITS_96_ETC__q5[92:29] ;

  // value method master_ar_arlen
  assign master_arlen =
	     master_xactor_shim_arff_rvport1__read_BITS_96_ETC__q5[28:21] ;

  // value method master_ar_arsize
  assign master_arsize =
	     master_xactor_shim_arff_rvport1__read_BITS_96_ETC__q5[20:18] ;

  // value method master_ar_arburst
  assign master_arburst =
	     master_xactor_shim_arff_rvport1__read_BITS_96_ETC__q5[17:16] ;

  // value method master_ar_arlock
  assign master_arlock =
	     master_xactor_shim_arff_rvport1__read_BITS_96_ETC__q5[15] ;

  // value method master_ar_arcache
  assign master_arcache =
	     master_xactor_shim_arff_rvport1__read_BITS_96_ETC__q5[14:11] ;

  // value method master_ar_arprot
  assign master_arprot =
	     master_xactor_shim_arff_rvport1__read_BITS_96_ETC__q5[10:8] ;

  // value method master_ar_arqos
  assign master_arqos =
	     master_xactor_shim_arff_rvport1__read_BITS_96_ETC__q5[7:4] ;

  // value method master_ar_arregion
  assign master_arregion =
	     master_xactor_shim_arff_rvport1__read_BITS_96_ETC__q5[3:0] ;

  // value method master_ar_arvalid
  assign master_arvalid = CAN_FIRE_RL_master_xactor_ug_master_u_ar_setPeek ;

  // action method master_ar_arready
  assign CAN_FIRE_master_ar_arready = 1'd1 ;
  assign WILL_FIRE_master_ar_arready = 1'd1 ;

  // action method master_r_rflit
  assign CAN_FIRE_master_r_rflit = 1'd1 ;
  assign WILL_FIRE_master_r_rflit = master_rvalid ;

  // value method master_r_rready
  assign master_rready = !master_xactor_shim_rff_rv[73] ;

  // rule RL_master_xactor_ug_master_u_b_warnDoPut
  assign CAN_FIRE_RL_master_xactor_ug_master_u_b_warnDoPut =
	     master_xactor_ug_master_u_b_putWire$whas &&
	     master_xactor_shim_bff_rv[6] ;
  assign WILL_FIRE_RL_master_xactor_ug_master_u_b_warnDoPut =
	     CAN_FIRE_RL_master_xactor_ug_master_u_b_warnDoPut ;

  // rule RL_master_xactor_ug_master_u_b_doPut
  assign CAN_FIRE_RL_master_xactor_ug_master_u_b_doPut =
	     !master_xactor_shim_bff_rv[6] &&
	     master_xactor_ug_master_u_b_putWire$whas ;
  assign WILL_FIRE_RL_master_xactor_ug_master_u_b_doPut =
	     CAN_FIRE_RL_master_xactor_ug_master_u_b_doPut ;

  // rule RL_master_xactor_ug_master_u_r_warnDoPut
  assign CAN_FIRE_RL_master_xactor_ug_master_u_r_warnDoPut =
	     master_xactor_ug_master_u_r_putWire$whas &&
	     master_xactor_shim_rff_rv[73] ;
  assign WILL_FIRE_RL_master_xactor_ug_master_u_r_warnDoPut =
	     CAN_FIRE_RL_master_xactor_ug_master_u_r_warnDoPut ;

  // rule RL_master_xactor_ug_master_u_r_doPut
  assign CAN_FIRE_RL_master_xactor_ug_master_u_r_doPut =
	     !master_xactor_shim_rff_rv[73] &&
	     master_xactor_ug_master_u_r_putWire$whas ;
  assign WILL_FIRE_RL_master_xactor_ug_master_u_r_doPut =
	     CAN_FIRE_RL_master_xactor_ug_master_u_r_doPut ;

  // rule RL_rl_sb_read_finish
  assign CAN_FIRE_RL_rl_sb_read_finish =
	     !master_xactor_clearing &&
	     master_xactor_shim_rff_rv$port1__read[73] &&
	     rg_sb_state == 2'd1 &&
	     rg_sbcs_sberror == 3'd0 ;
  assign WILL_FIRE_RL_rl_sb_read_finish = CAN_FIRE_RL_rl_sb_read_finish ;

  // rule RL_rl_sb_write_response
  assign CAN_FIRE_RL_rl_sb_write_response =
	     !master_xactor_clearing &&
	     master_xactor_shim_bff_rv$port1__read[6] ;
  assign WILL_FIRE_RL_rl_sb_write_response =
	     CAN_FIRE_RL_rl_sb_write_response ;

  // rule RL_master_xactor_ug_master_u_aw_setPeek
  assign CAN_FIRE_RL_master_xactor_ug_master_u_aw_setPeek =
	     master_xactor_shim_awff_rv$port1__read[97] ;
  assign WILL_FIRE_RL_master_xactor_ug_master_u_aw_setPeek =
	     CAN_FIRE_RL_master_xactor_ug_master_u_aw_setPeek ;

  // rule RL_master_xactor_ug_master_u_aw_warnDoDrop
  assign CAN_FIRE_RL_master_xactor_ug_master_u_aw_warnDoDrop =
	     master_xactor_ug_master_u_aw_dropWire$whas &&
	     !master_xactor_shim_awff_rv$port1__read[97] ;
  assign WILL_FIRE_RL_master_xactor_ug_master_u_aw_warnDoDrop =
	     CAN_FIRE_RL_master_xactor_ug_master_u_aw_warnDoDrop ;

  // rule RL_master_xactor_ug_master_u_aw_doDrop
  assign CAN_FIRE_RL_master_xactor_ug_master_u_aw_doDrop =
	     master_xactor_shim_awff_rv$port1__read[97] &&
	     master_xactor_ug_master_u_aw_dropWire$whas ;
  assign WILL_FIRE_RL_master_xactor_ug_master_u_aw_doDrop =
	     CAN_FIRE_RL_master_xactor_ug_master_u_aw_doDrop ;

  // rule RL_master_xactor_ug_master_u_w_setPeek
  assign CAN_FIRE_RL_master_xactor_ug_master_u_w_setPeek =
	     master_xactor_shim_wff_rv$port1__read[75] ;
  assign WILL_FIRE_RL_master_xactor_ug_master_u_w_setPeek =
	     CAN_FIRE_RL_master_xactor_ug_master_u_w_setPeek ;

  // rule RL_master_xactor_ug_master_u_w_warnDoDrop
  assign CAN_FIRE_RL_master_xactor_ug_master_u_w_warnDoDrop =
	     master_xactor_ug_master_u_w_dropWire$whas &&
	     !master_xactor_shim_wff_rv$port1__read[75] ;
  assign WILL_FIRE_RL_master_xactor_ug_master_u_w_warnDoDrop =
	     CAN_FIRE_RL_master_xactor_ug_master_u_w_warnDoDrop ;

  // rule RL_master_xactor_ug_master_u_w_doDrop
  assign CAN_FIRE_RL_master_xactor_ug_master_u_w_doDrop =
	     master_xactor_shim_wff_rv$port1__read[75] &&
	     master_xactor_ug_master_u_w_dropWire$whas ;
  assign WILL_FIRE_RL_master_xactor_ug_master_u_w_doDrop =
	     CAN_FIRE_RL_master_xactor_ug_master_u_w_doDrop ;

  // rule RL_master_xactor_ug_master_u_ar_setPeek
  assign CAN_FIRE_RL_master_xactor_ug_master_u_ar_setPeek =
	     master_xactor_shim_arff_rv$port1__read[97] ;
  assign WILL_FIRE_RL_master_xactor_ug_master_u_ar_setPeek =
	     CAN_FIRE_RL_master_xactor_ug_master_u_ar_setPeek ;

  // rule RL_master_xactor_ug_master_u_ar_warnDoDrop
  assign CAN_FIRE_RL_master_xactor_ug_master_u_ar_warnDoDrop =
	     master_xactor_ug_master_u_ar_dropWire$whas &&
	     !master_xactor_shim_arff_rv$port1__read[97] ;
  assign WILL_FIRE_RL_master_xactor_ug_master_u_ar_warnDoDrop =
	     CAN_FIRE_RL_master_xactor_ug_master_u_ar_warnDoDrop ;

  // rule RL_master_xactor_ug_master_u_ar_doDrop
  assign CAN_FIRE_RL_master_xactor_ug_master_u_ar_doDrop =
	     master_xactor_shim_arff_rv$port1__read[97] &&
	     master_xactor_ug_master_u_ar_dropWire$whas ;
  assign WILL_FIRE_RL_master_xactor_ug_master_u_ar_doDrop =
	     CAN_FIRE_RL_master_xactor_ug_master_u_ar_doDrop ;

  // rule RL_master_xactor_do_clear
  assign CAN_FIRE_RL_master_xactor_do_clear = master_xactor_clearing ;
  assign WILL_FIRE_RL_master_xactor_do_clear = master_xactor_clearing ;

  // inputs to muxes for submodule ports
  assign MUX_master_xactor_shim_arff_rv$port0__write_1__SEL_1 =
	     EN_av_read && av_read_dm_addr == 7'h3C &&
	     rg_sb_state_7_EQ_0_39_AND_NOT_rg_sbcs_sbbusyer_ETC___d161 ;
  assign MUX_rg_sbaddress0$write_1__SEL_2 =
	     EN_write && write_dm_addr != 7'h38 &&
	     (rg_sb_state == 2'd0 && !rg_sbcs_sbbusyerror &&
	      rg_sbcs_sberror == 3'd0 &&
	      write_dm_addr == 7'h39 ||
	      write_dm_addr == 7'h3C &&
	      rg_sb_state_7_EQ_0_39_AND_NOT_rg_sbcs_sbbusyer_ETC___d147) ;
  assign MUX_rg_sbaddress0$write_1__SEL_3 =
	     EN_av_read && av_read_dm_addr == 7'h3C &&
	     rg_sb_state_7_EQ_0_39_AND_NOT_rg_sbcs_sbbusyer_ETC___d147 ;
  assign MUX_rg_sbaddress1$write_1__SEL_2 =
	     EN_write && write_dm_addr != 7'h38 &&
	     ((write_dm_addr == 7'h39 || write_dm_addr == 7'h3A) &&
	      rg_sb_state == 2'd0 &&
	      !rg_sbcs_sbbusyerror &&
	      rg_sbcs_sberror_9_EQ_0_0_AND_rg_sbcs_sbreadona_ETC___d345 ||
	      write_dm_addr == 7'h3C &&
	      rg_sb_state_7_EQ_0_39_AND_NOT_rg_sbcs_sbbusyer_ETC___d147) ;
  assign MUX_rg_sbcs_sbbusyerror$write_1__SEL_2 =
	     EN_write &&
	     write_dm_addr_EQ_0x38_95_AND_rg_sbcs_sberror_9_ETC___d319 ;
  assign MUX_rg_sbcs_sbbusyerror$write_1__SEL_3 =
	     EN_av_read && av_read_dm_addr == 7'h3C && rg_sb_state != 2'd0 ;
  assign MUX_rg_sbcs_sberror$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_sb_write_response &&
	     master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0 ;
  assign MUX_rg_sbcs_sberror$write_1__SEL_3 =
	     WILL_FIRE_RL_rl_sb_read_finish &&
	     master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 ;
  assign MUX_rg_sbcs_sberror$write_1__SEL_4 =
	     EN_write &&
	     write_dm_addr_EQ_0x38_95_AND_rg_sbcs_sberror_9_ETC___d327 ;
  assign MUX_rg_sbdata0$write_1__SEL_3 =
	     EN_write &&
	     write_dm_addr_EQ_0x3C_15_AND_rg_sb_state_7_EQ__ETC___d377 ;
  assign MUX_master_xactor_shim_arff_rv$port0__write_1__VAL_1 =
	     { 5'd16,
	       sbaddress__h3101,
	       8'd0,
	       axi4_size_val__h5373,
	       18'd65536 } ;
  assign MUX_master_xactor_shim_arff_rv$port0__write_1__VAL_2 =
	     { 5'd16, addr64__h6395, 8'd0, axi4_size_val__h5373, 18'd65536 } ;
  always@(write_dm_addr or
	  sbaddress101_PLUS_IF_rg_sbcs_sbaccess_9_EQ_0_0_ETC__q6 or
	  IF_rg_sbcs_sbreadonaddr_75_THEN_IF_rg_sbcs_sba_ETC___d361)
  begin
    case (write_dm_addr)
      7'h39, 7'h3A:
	  MUX_rg_sbaddress0$write_1__VAL_2 =
	      IF_rg_sbcs_sbreadonaddr_75_THEN_IF_rg_sbcs_sba_ETC___d361;
      default: MUX_rg_sbaddress0$write_1__VAL_2 =
		   sbaddress101_PLUS_IF_rg_sbcs_sbaccess_9_EQ_0_0_ETC__q6[31:0];
    endcase
  end
  always@(write_dm_word)
  begin
    case (write_dm_word[19:17])
      3'd3, 3'd4: MUX_rg_sbcs_sberror$write_1__VAL_4 = 3'd3;
      default: MUX_rg_sbcs_sberror$write_1__VAL_4 = 3'd0;
    endcase
  end

  // inlined wires
  assign master_xactor_ug_master_u_b_putWire$wget =
	     { master_bid, master_bresp } ;
  assign master_xactor_ug_master_u_b_putWire$whas =
	     master_bvalid && !master_xactor_shim_bff_rv[6] ;
  assign master_xactor_ug_master_u_r_putWire$wget =
	     { master_rid,
	       master_rdata,
	       master_rresp,
	       master_rlast,
	       master_ruser } ;
  assign master_xactor_ug_master_u_r_putWire$whas =
	     master_rvalid && !master_xactor_shim_rff_rv[73] ;
  assign master_xactor_ug_master_u_aw_dropWire$whas =
	     master_xactor_shim_awff_rv$port1__read[97] && master_awready ;
  assign master_xactor_ug_master_u_w_dropWire$whas =
	     master_xactor_shim_wff_rv$port1__read[75] && master_wready ;
  assign master_xactor_ug_master_u_ar_dropWire$whas =
	     master_xactor_shim_arff_rv$port1__read[97] && master_arready ;
  assign master_xactor_shim_awff_rv$EN_port0__write =
	     EN_write &&
	     write_dm_addr_EQ_0x3C_15_AND_rg_sb_state_7_EQ__ETC___d377 ;
  assign master_xactor_shim_awff_rv$port0__write_1 =
	     { 5'd16,
	       sbaddress__h3101,
	       8'd0,
	       _theResult___snd_snd_val__h7104,
	       18'd65536 } ;
  assign master_xactor_shim_awff_rv$port1__read =
	     master_xactor_shim_awff_rv$EN_port0__write ?
	       master_xactor_shim_awff_rv$port0__write_1 :
	       master_xactor_shim_awff_rv ;
  assign master_xactor_shim_awff_rv$port2__read =
	     CAN_FIRE_RL_master_xactor_ug_master_u_aw_doDrop ?
	       98'h0AAAAAAAAAAAAAAAAAAAAAAAA :
	       master_xactor_shim_awff_rv$port1__read ;
  assign master_xactor_shim_awff_rv$port3__read =
	     master_xactor_clearing ?
	       98'h0AAAAAAAAAAAAAAAAAAAAAAAA :
	       master_xactor_shim_awff_rv$port2__read ;
  assign master_xactor_shim_wff_rv$EN_port0__write =
	     EN_write &&
	     write_dm_addr_EQ_0x3C_15_AND_rg_sb_state_7_EQ__ETC___d377 ;
  assign master_xactor_shim_wff_rv$port0__write_1 =
	     { 1'd1, wrd_wdata__h7218, wrd_wstrb__h7219, 3'd6 } ;
  assign master_xactor_shim_wff_rv$port1__read =
	     master_xactor_shim_wff_rv$EN_port0__write ?
	       master_xactor_shim_wff_rv$port0__write_1 :
	       master_xactor_shim_wff_rv ;
  assign master_xactor_shim_wff_rv$port2__read =
	     CAN_FIRE_RL_master_xactor_ug_master_u_w_doDrop ?
	       76'h2AAAAAAAAAAAAAAAAAA :
	       master_xactor_shim_wff_rv$port1__read ;
  assign master_xactor_shim_wff_rv$port3__read =
	     master_xactor_clearing ?
	       76'h2AAAAAAAAAAAAAAAAAA :
	       master_xactor_shim_wff_rv$port2__read ;
  assign master_xactor_shim_bff_rv$port0__write_1 =
	     { 1'd1, master_xactor_ug_master_u_b_putWire$wget } ;
  assign master_xactor_shim_bff_rv$port1__read =
	     CAN_FIRE_RL_master_xactor_ug_master_u_b_doPut ?
	       master_xactor_shim_bff_rv$port0__write_1 :
	       master_xactor_shim_bff_rv ;
  assign master_xactor_shim_bff_rv$EN_port1__write =
	     !master_xactor_clearing &&
	     master_xactor_shim_bff_rv$port1__read[6] ;
  assign master_xactor_shim_bff_rv$port2__read =
	     master_xactor_shim_bff_rv$EN_port1__write ?
	       7'd42 :
	       master_xactor_shim_bff_rv$port1__read ;
  assign master_xactor_shim_bff_rv$port3__read =
	     master_xactor_clearing ?
	       7'd42 :
	       master_xactor_shim_bff_rv$port2__read ;
  assign master_xactor_shim_arff_rv$EN_port0__write =
	     EN_av_read && av_read_dm_addr == 7'h3C &&
	     rg_sb_state_7_EQ_0_39_AND_NOT_rg_sbcs_sbbusyer_ETC___d161 ||
	     EN_write && write_dm_addr == 7'h39 &&
	     rg_sb_state_7_EQ_0_39_AND_NOT_rg_sbcs_sbbusyer_ETC___d367 ;
  assign master_xactor_shim_arff_rv$port0__write_1 =
	     MUX_master_xactor_shim_arff_rv$port0__write_1__SEL_1 ?
	       MUX_master_xactor_shim_arff_rv$port0__write_1__VAL_1 :
	       MUX_master_xactor_shim_arff_rv$port0__write_1__VAL_2 ;
  assign master_xactor_shim_arff_rv$port1__read =
	     master_xactor_shim_arff_rv$EN_port0__write ?
	       master_xactor_shim_arff_rv$port0__write_1 :
	       master_xactor_shim_arff_rv ;
  assign master_xactor_shim_arff_rv$port2__read =
	     CAN_FIRE_RL_master_xactor_ug_master_u_ar_doDrop ?
	       98'h0AAAAAAAAAAAAAAAAAAAAAAAA :
	       master_xactor_shim_arff_rv$port1__read ;
  assign master_xactor_shim_arff_rv$port3__read =
	     master_xactor_clearing ?
	       98'h0AAAAAAAAAAAAAAAAAAAAAAAA :
	       master_xactor_shim_arff_rv$port2__read ;
  assign master_xactor_shim_rff_rv$port0__write_1 =
	     { 1'd1, master_xactor_ug_master_u_r_putWire$wget } ;
  assign master_xactor_shim_rff_rv$port1__read =
	     CAN_FIRE_RL_master_xactor_ug_master_u_r_doPut ?
	       master_xactor_shim_rff_rv$port0__write_1 :
	       master_xactor_shim_rff_rv ;
  assign master_xactor_shim_rff_rv$EN_port1__write =
	     !master_xactor_clearing &&
	     master_xactor_shim_rff_rv$port1__read[73] &&
	     rg_sb_state == 2'd1 &&
	     rg_sbcs_sberror == 3'd0 ;
  assign master_xactor_shim_rff_rv$port2__read =
	     master_xactor_shim_rff_rv$EN_port1__write ?
	       74'h0AAAAAAAAAAAAAAAAAA :
	       master_xactor_shim_rff_rv$port1__read ;
  assign master_xactor_shim_rff_rv$port3__read =
	     master_xactor_clearing ?
	       74'h0AAAAAAAAAAAAAAAAAA :
	       master_xactor_shim_rff_rv$port2__read ;

  // register master_xactor_clearing
  assign master_xactor_clearing$D_IN = 1'd0 ;
  assign master_xactor_clearing$EN = master_xactor_clearing ;

  // register master_xactor_shim_arff_rv
  assign master_xactor_shim_arff_rv$D_IN =
	     master_xactor_shim_arff_rv$port3__read ;
  assign master_xactor_shim_arff_rv$EN = 1'b1 ;

  // register master_xactor_shim_awff_rv
  assign master_xactor_shim_awff_rv$D_IN =
	     master_xactor_shim_awff_rv$port3__read ;
  assign master_xactor_shim_awff_rv$EN = 1'b1 ;

  // register master_xactor_shim_bff_rv
  assign master_xactor_shim_bff_rv$D_IN =
	     master_xactor_shim_bff_rv$port3__read ;
  assign master_xactor_shim_bff_rv$EN = 1'b1 ;

  // register master_xactor_shim_rff_rv
  assign master_xactor_shim_rff_rv$D_IN =
	     master_xactor_shim_rff_rv$port3__read ;
  assign master_xactor_shim_rff_rv$EN = 1'b1 ;

  // register master_xactor_shim_wff_rv
  assign master_xactor_shim_wff_rv$D_IN =
	     master_xactor_shim_wff_rv$port3__read ;
  assign master_xactor_shim_wff_rv$EN = 1'b1 ;

  // register rg_sb_state
  assign rg_sb_state$D_IN =
	     (EN_reset || WILL_FIRE_RL_rl_sb_read_finish) ? 2'd0 : 2'd1 ;
  assign rg_sb_state$EN =
	     EN_av_read && av_read_dm_addr == 7'h3C &&
	     rg_sb_state_7_EQ_0_39_AND_NOT_rg_sbcs_sbbusyer_ETC___d161 ||
	     EN_write && write_dm_addr == 7'h39 &&
	     rg_sb_state_7_EQ_0_39_AND_NOT_rg_sbcs_sbbusyer_ETC___d367 ||
	     WILL_FIRE_RL_rl_sb_read_finish ||
	     EN_reset ;

  // register rg_sbaddress0
  always@(EN_reset or
	  MUX_rg_sbaddress0$write_1__SEL_2 or
	  MUX_rg_sbaddress0$write_1__VAL_2 or
	  MUX_rg_sbaddress0$write_1__SEL_3 or
	  sbaddress101_PLUS_IF_rg_sbcs_sbaccess_9_EQ_0_0_ETC__q6)
  case (1'b1)
    EN_reset: rg_sbaddress0$D_IN = 32'd0;
    MUX_rg_sbaddress0$write_1__SEL_2:
	rg_sbaddress0$D_IN = MUX_rg_sbaddress0$write_1__VAL_2;
    MUX_rg_sbaddress0$write_1__SEL_3:
	rg_sbaddress0$D_IN =
	    sbaddress101_PLUS_IF_rg_sbcs_sbaccess_9_EQ_0_0_ETC__q6[31:0];
    default: rg_sbaddress0$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
  endcase
  assign rg_sbaddress0$EN =
	     EN_av_read && av_read_dm_addr == 7'h3C &&
	     rg_sb_state_7_EQ_0_39_AND_NOT_rg_sbcs_sbbusyer_ETC___d147 ||
	     MUX_rg_sbaddress0$write_1__SEL_2 ||
	     EN_reset ;

  // register rg_sbaddress1
  assign rg_sbaddress1$D_IN = 32'd0 ;
  assign rg_sbaddress1$EN =
	     EN_av_read && av_read_dm_addr == 7'h3C &&
	     rg_sb_state_7_EQ_0_39_AND_NOT_rg_sbcs_sbbusyer_ETC___d147 ||
	     MUX_rg_sbaddress1$write_1__SEL_2 ||
	     EN_reset ;

  // register rg_sbaddress_reading
  assign rg_sbaddress_reading$D_IN =
	     MUX_master_xactor_shim_arff_rv$port0__write_1__SEL_1 ?
	       sbaddress__h3101 :
	       addr64__h6395 ;
  assign rg_sbaddress_reading$EN =
	     EN_av_read && av_read_dm_addr == 7'h3C &&
	     rg_sb_state_7_EQ_0_39_AND_NOT_rg_sbcs_sbbusyer_ETC___d161 ||
	     EN_write && write_dm_addr == 7'h39 &&
	     rg_sb_state_7_EQ_0_39_AND_NOT_rg_sbcs_sbbusyer_ETC___d367 ;

  // register rg_sbcs_sbaccess
  assign rg_sbcs_sbaccess$D_IN = EN_reset ? 3'd2 : write_dm_word[19:17] ;
  assign rg_sbcs_sbaccess$EN =
	     EN_write &&
	     write_dm_addr_EQ_0x38_95_AND_rg_sbcs_sberror_9_ETC___d310 ||
	     EN_reset ;

  // register rg_sbcs_sbautoincrement
  assign rg_sbcs_sbautoincrement$D_IN = !EN_reset && write_dm_word[16] ;
  assign rg_sbcs_sbautoincrement$EN =
	     EN_write &&
	     write_dm_addr_EQ_0x38_95_AND_rg_sbcs_sberror_9_ETC___d310 ||
	     EN_reset ;

  // register rg_sbcs_sbbusyerror
  always@(EN_reset or
	  MUX_rg_sbcs_sbbusyerror$write_1__SEL_2 or
	  write_dm_addr or MUX_rg_sbcs_sbbusyerror$write_1__SEL_3)
  case (1'b1)
    EN_reset: rg_sbcs_sbbusyerror$D_IN = 1'd0;
    MUX_rg_sbcs_sbbusyerror$write_1__SEL_2:
	rg_sbcs_sbbusyerror$D_IN = write_dm_addr != 7'h38;
    MUX_rg_sbcs_sbbusyerror$write_1__SEL_3: rg_sbcs_sbbusyerror$D_IN = 1'd1;
    default: rg_sbcs_sbbusyerror$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign rg_sbcs_sbbusyerror$EN =
	     EN_av_read && av_read_dm_addr == 7'h3C && rg_sb_state != 2'd0 ||
	     EN_write &&
	     write_dm_addr_EQ_0x38_95_AND_rg_sbcs_sberror_9_ETC___d319 ||
	     EN_reset ;

  // register rg_sbcs_sberror
  always@(MUX_rg_sbcs_sberror$write_1__SEL_1 or
	  EN_reset or
	  MUX_rg_sbcs_sberror$write_1__SEL_3 or
	  MUX_rg_sbcs_sberror$write_1__SEL_4 or
	  MUX_rg_sbcs_sberror$write_1__VAL_4)
  case (1'b1)
    MUX_rg_sbcs_sberror$write_1__SEL_1: rg_sbcs_sberror$D_IN = 3'd3;
    EN_reset: rg_sbcs_sberror$D_IN = 3'd0;
    MUX_rg_sbcs_sberror$write_1__SEL_3: rg_sbcs_sberror$D_IN = 3'd3;
    MUX_rg_sbcs_sberror$write_1__SEL_4:
	rg_sbcs_sberror$D_IN = MUX_rg_sbcs_sberror$write_1__VAL_4;
    default: rg_sbcs_sberror$D_IN = 3'b010 /* unspecified value */ ;
  endcase
  assign rg_sbcs_sberror$EN =
	     WILL_FIRE_RL_rl_sb_read_finish &&
	     master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 ||
	     WILL_FIRE_RL_rl_sb_write_response &&
	     master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0 ||
	     EN_write &&
	     write_dm_addr_EQ_0x38_95_AND_rg_sbcs_sberror_9_ETC___d327 ||
	     EN_reset ;

  // register rg_sbcs_sbreadonaddr
  assign rg_sbcs_sbreadonaddr$D_IN = !EN_reset && write_dm_word[20] ;
  assign rg_sbcs_sbreadonaddr$EN =
	     EN_write &&
	     write_dm_addr_EQ_0x38_95_AND_rg_sbcs_sberror_9_ETC___d310 ||
	     EN_reset ;

  // register rg_sbcs_sbreadondata
  assign rg_sbcs_sbreadondata$D_IN = !EN_reset && write_dm_word[15] ;
  assign rg_sbcs_sbreadondata$EN =
	     EN_write &&
	     write_dm_addr_EQ_0x38_95_AND_rg_sbcs_sberror_9_ETC___d310 ||
	     EN_reset ;

  // register rg_sbdata0
  always@(EN_reset or
	  WILL_FIRE_RL_rl_sb_read_finish or
	  IF_rg_sbcs_sbaccess_9_EQ_0_0_THEN_IF_rg_sbaddr_ETC___d130 or
	  MUX_rg_sbdata0$write_1__SEL_3 or write_dm_word)
  case (1'b1)
    EN_reset: rg_sbdata0$D_IN = 32'd0;
    WILL_FIRE_RL_rl_sb_read_finish:
	rg_sbdata0$D_IN =
	    IF_rg_sbcs_sbaccess_9_EQ_0_0_THEN_IF_rg_sbaddr_ETC___d130[31:0];
    MUX_rg_sbdata0$write_1__SEL_3: rg_sbdata0$D_IN = write_dm_word;
    default: rg_sbdata0$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
  endcase
  assign rg_sbdata0$EN =
	     EN_write &&
	     write_dm_addr_EQ_0x3C_15_AND_rg_sb_state_7_EQ__ETC___d377 ||
	     WILL_FIRE_RL_rl_sb_read_finish ||
	     EN_reset ;

  // remaining internal signals
  assign IF_rg_sbcs_sbreadonaddr_75_THEN_IF_rg_sbcs_sba_ETC___d361 =
	     rg_sbcs_sbreadonaddr ?
	       (rg_sbcs_sbautoincrement ?
		  addr64395_PLUS_IF_rg_sbcs_sbaccess_9_EQ_0_0_TH_ETC__q2[31:0] :
		  write_dm_word) :
	       write_dm_word ;
  assign _theResult___fst__h7089 = word64__h7034 << shift_bits__h7037 ;
  assign addr64395_PLUS_IF_rg_sbcs_sbaccess_9_EQ_0_0_TH_ETC__q2 =
	     addr64__h6395 +
	     IF_rg_sbcs_sbaccess_9_EQ_0_0_THEN_1_ELSE_IF_rg_ETC___d155 ;
  assign addr64__h6395 = { rg_sbaddress1, write_dm_word } ;
  assign master_xactor_shim_arff_rvport1__read_BITS_96_ETC__q5 =
	     master_xactor_shim_arff_rv$port1__read[96:0] ;
  assign master_xactor_shim_awff_rvport1__read_BITS_96_ETC__q3 =
	     master_xactor_shim_awff_rv$port1__read[96:0] ;
  assign master_xactor_shim_wff_rvport1__read_BITS_74__ETC__q4 =
	     master_xactor_shim_wff_rv$port1__read[74:0] ;
  assign result__h3810 =
	     { 56'd0, master_xactor_shim_rff_rv$port1__read[12:5] } ;
  assign result__h3840 =
	     { 56'd0, master_xactor_shim_rff_rv$port1__read[20:13] } ;
  assign result__h3867 =
	     { 56'd0, master_xactor_shim_rff_rv$port1__read[28:21] } ;
  assign result__h3894 =
	     { 56'd0, master_xactor_shim_rff_rv$port1__read[36:29] } ;
  assign result__h3921 =
	     { 56'd0, master_xactor_shim_rff_rv$port1__read[44:37] } ;
  assign result__h3948 =
	     { 56'd0, master_xactor_shim_rff_rv$port1__read[52:45] } ;
  assign result__h3975 =
	     { 56'd0, master_xactor_shim_rff_rv$port1__read[60:53] } ;
  assign result__h4002 =
	     { 56'd0, master_xactor_shim_rff_rv$port1__read[68:61] } ;
  assign result__h4047 =
	     { 48'd0, master_xactor_shim_rff_rv$port1__read[20:5] } ;
  assign result__h4074 =
	     { 48'd0, master_xactor_shim_rff_rv$port1__read[36:21] } ;
  assign result__h4101 =
	     { 48'd0, master_xactor_shim_rff_rv$port1__read[52:37] } ;
  assign result__h4128 =
	     { 48'd0, master_xactor_shim_rff_rv$port1__read[68:53] } ;
  assign result__h4169 =
	     { 32'd0, master_xactor_shim_rff_rv$port1__read[36:5] } ;
  assign result__h4196 =
	     { 32'd0, master_xactor_shim_rff_rv$port1__read[68:37] } ;
  assign rg_sb_state_7_EQ_0_39_AND_NOT_rg_sbcs_sbbusyer_ETC___d147 =
	     rg_sb_state == 2'd0 && !rg_sbcs_sbbusyerror &&
	     rg_sbcs_sberror == 3'd0 &&
	     rg_sbcs_sbautoincrement ;
  assign rg_sb_state_7_EQ_0_39_AND_NOT_rg_sbcs_sbbusyer_ETC___d161 =
	     rg_sb_state == 2'd0 && !rg_sbcs_sbbusyerror &&
	     rg_sbcs_sberror == 3'd0 &&
	     rg_sbcs_sbreadondata ;
  assign rg_sb_state_7_EQ_0_39_AND_NOT_rg_sbcs_sbbusyer_ETC___d367 =
	     rg_sb_state == 2'd0 && !rg_sbcs_sbbusyerror &&
	     rg_sbcs_sberror == 3'd0 &&
	     rg_sbcs_sbreadonaddr ;
  assign rg_sbcs_sberror_9_EQ_0_0_AND_rg_sbcs_sbreadona_ETC___d345 =
	     rg_sbcs_sberror == 3'd0 &&
	     (rg_sbcs_sbreadonaddr && rg_sbcs_sbautoincrement ||
	      write_dm_addr != 7'h39) ;
  assign sbaddress101_PLUS_IF_rg_sbcs_sbaccess_9_EQ_0_0_ETC__q6 =
	     sbaddress__h3101 +
	     IF_rg_sbcs_sbaccess_9_EQ_0_0_THEN_1_ELSE_IF_rg_ETC___d155 ;
  assign sbaddress__h3101 = { rg_sbaddress1, rg_sbaddress0 } ;
  assign shift_bits__h7037 = { rg_sbaddress0[2:0], 3'b0 } ;
  assign strobe64__h7087 = 8'b00000001 << rg_sbaddress0[2:0] ;
  assign strobe64__h7091 = 8'b00000011 << rg_sbaddress0[2:0] ;
  assign strobe64__h7095 = 8'b00001111 << rg_sbaddress0[2:0] ;
  assign v__h4785 =
	     { 9'd64,
	       rg_sbcs_sbbusyerror,
	       rg_sb_state != 2'd0,
	       rg_sbcs_sbreadonaddr,
	       rg_sbcs_sbaccess,
	       rg_sbcs_sbautoincrement,
	       rg_sbcs_sbreadondata,
	       rg_sbcs_sberror,
	       12'd1031 } ;
  assign v__h4919 =
	     (rg_sb_state != 2'd0 || rg_sbcs_sbbusyerror ||
	      rg_sbcs_sberror != 3'd0) ?
	       32'd0 :
	       rg_sbdata0 ;
  assign word64__h7034 = { 32'd0, write_dm_word } ;
  assign write_dm_addr_EQ_0x38_95_AND_rg_sbcs_sberror_9_ETC___d310 =
	     write_dm_addr == 7'h38 &&
	     (rg_sbcs_sberror == 3'd0 || write_dm_word[14:12] != 3'd0) &&
	     (!rg_sbcs_sbbusyerror || write_dm_word[22]) &&
	     write_dm_word[19:17] != 3'd4 &&
	     write_dm_word[19:17] != 3'd3 ;
  assign write_dm_addr_EQ_0x38_95_AND_rg_sbcs_sberror_9_ETC___d319 =
	     write_dm_addr_EQ_0x38_95_AND_rg_sbcs_sberror_9_ETC___d310 ||
	     (write_dm_addr == 7'h39 || write_dm_addr == 7'h3A ||
	      write_dm_addr == 7'h3C) &&
	     rg_sb_state != 2'd0 ;
  assign write_dm_addr_EQ_0x38_95_AND_rg_sbcs_sberror_9_ETC___d325 =
	     write_dm_addr == 7'h38 &&
	     (rg_sbcs_sberror == 3'd0 || write_dm_word[14:12] != 3'd0) &&
	     rg_sbcs_sbbusyerror &&
	     !write_dm_word[22] ;
  assign write_dm_addr_EQ_0x38_95_AND_rg_sbcs_sberror_9_ETC___d327 =
	     write_dm_addr == 7'h38 &&
	     (rg_sbcs_sberror == 3'd0 || write_dm_word[14:12] != 3'd0) &&
	     (!rg_sbcs_sbbusyerror || write_dm_word[22]) ;
  assign write_dm_addr_EQ_0x38_95_AND_rg_sbcs_sberror_9_ETC___d332 =
	     write_dm_addr == 7'h38 &&
	     (rg_sbcs_sberror == 3'd0 || write_dm_word[14:12] != 3'd0) &&
	     (!rg_sbcs_sbbusyerror || write_dm_word[22]) &&
	     (write_dm_word[19:17] == 3'd4 || write_dm_word[19:17] == 3'd3) ;
  assign write_dm_addr_EQ_0x3C_15_AND_rg_sb_state_7_EQ__ETC___d377 =
	     write_dm_addr == 7'h3C && rg_sb_state == 2'd0 &&
	     !rg_sbcs_sbbusyerror &&
	     rg_sbcs_sberror == 3'd0 ;
  always@(rg_sbcs_sbaccess)
  begin
    case (rg_sbcs_sbaccess)
      3'd0, 3'd1, 3'd2: axi4_size_val__h5373 = rg_sbcs_sbaccess;
      default: axi4_size_val__h5373 = 3'b011;
    endcase
  end
  always@(rg_sbcs_sbaccess)
  begin
    case (rg_sbcs_sbaccess)
      3'd0, 3'd1, 3'd2, 3'd3:
	  _theResult___snd_snd_val__h7104 = rg_sbcs_sbaccess;
      default: _theResult___snd_snd_val__h7104 = 3'b111;
    endcase
  end
  always@(rg_sbcs_sbaccess or
	  strobe64__h7087 or strobe64__h7091 or strobe64__h7095)
  begin
    case (rg_sbcs_sbaccess)
      3'd0: wrd_wstrb__h7219 = strobe64__h7087;
      3'd1: wrd_wstrb__h7219 = strobe64__h7091;
      3'd2: wrd_wstrb__h7219 = strobe64__h7095;
      3'd3: wrd_wstrb__h7219 = 8'b11111111;
      default: wrd_wstrb__h7219 = 8'd0;
    endcase
  end
  always@(rg_sbcs_sbaccess or word64__h7034 or _theResult___fst__h7089)
  begin
    case (rg_sbcs_sbaccess)
      3'd0, 3'd1, 3'd2: wrd_wdata__h7218 = _theResult___fst__h7089;
      default: wrd_wdata__h7218 = word64__h7034;
    endcase
  end
  always@(rg_sbcs_sbaccess)
  begin
    case (rg_sbcs_sbaccess)
      3'd0: IF_rg_sbcs_sbaccess_9_EQ_0_0_THEN_1_ELSE_IF_rg_ETC___d155 = 64'd1;
      3'd1: IF_rg_sbcs_sbaccess_9_EQ_0_0_THEN_1_ELSE_IF_rg_ETC___d155 = 64'd2;
      3'd2: IF_rg_sbcs_sbaccess_9_EQ_0_0_THEN_1_ELSE_IF_rg_ETC___d155 = 64'd4;
      3'd3: IF_rg_sbcs_sbaccess_9_EQ_0_0_THEN_1_ELSE_IF_rg_ETC___d155 = 64'd8;
      default: IF_rg_sbcs_sbaccess_9_EQ_0_0_THEN_1_ELSE_IF_rg_ETC___d155 =
		   64'd16;
    endcase
  end
  always@(rg_sbaddress_reading or
	  result__h3810 or
	  result__h3840 or
	  result__h3867 or
	  result__h3894 or
	  result__h3921 or result__h3948 or result__h3975 or result__h4002)
  begin
    case (rg_sbaddress_reading[2:0])
      3'h0:
	  IF_rg_sbaddress_reading_1_BITS_2_TO_0_2_EQ_0x0_ETC___d104 =
	      result__h3810;
      3'h1:
	  IF_rg_sbaddress_reading_1_BITS_2_TO_0_2_EQ_0x0_ETC___d104 =
	      result__h3840;
      3'h2:
	  IF_rg_sbaddress_reading_1_BITS_2_TO_0_2_EQ_0x0_ETC___d104 =
	      result__h3867;
      3'h3:
	  IF_rg_sbaddress_reading_1_BITS_2_TO_0_2_EQ_0x0_ETC___d104 =
	      result__h3894;
      3'h4:
	  IF_rg_sbaddress_reading_1_BITS_2_TO_0_2_EQ_0x0_ETC___d104 =
	      result__h3921;
      3'h5:
	  IF_rg_sbaddress_reading_1_BITS_2_TO_0_2_EQ_0x0_ETC___d104 =
	      result__h3948;
      3'h6:
	  IF_rg_sbaddress_reading_1_BITS_2_TO_0_2_EQ_0x0_ETC___d104 =
	      result__h3975;
      3'h7:
	  IF_rg_sbaddress_reading_1_BITS_2_TO_0_2_EQ_0x0_ETC___d104 =
	      result__h4002;
    endcase
  end
  always@(rg_sbaddress_reading or
	  result__h4047 or result__h4074 or result__h4101 or result__h4128)
  begin
    case (rg_sbaddress_reading[2:0])
      3'h0:
	  IF_rg_sbaddress_reading_1_BITS_2_TO_0_2_EQ_0x0_ETC___d117 =
	      result__h4047;
      3'h2:
	  IF_rg_sbaddress_reading_1_BITS_2_TO_0_2_EQ_0x0_ETC___d117 =
	      result__h4074;
      3'h4:
	  IF_rg_sbaddress_reading_1_BITS_2_TO_0_2_EQ_0x0_ETC___d117 =
	      result__h4101;
      3'h6:
	  IF_rg_sbaddress_reading_1_BITS_2_TO_0_2_EQ_0x0_ETC___d117 =
	      result__h4128;
      default: IF_rg_sbaddress_reading_1_BITS_2_TO_0_2_EQ_0x0_ETC___d117 =
		   64'd0;
    endcase
  end
  always@(rg_sbaddress_reading or result__h4169 or result__h4196)
  begin
    case (rg_sbaddress_reading[2:0])
      3'h0:
	  CASE_rg_sbaddress_reading_BITS_2_TO_0_0x0_resu_ETC__q1 =
	      result__h4169;
      3'h4:
	  CASE_rg_sbaddress_reading_BITS_2_TO_0_0x0_resu_ETC__q1 =
	      result__h4196;
      default: CASE_rg_sbaddress_reading_BITS_2_TO_0_0x0_resu_ETC__q1 = 64'd0;
    endcase
  end
  always@(rg_sbcs_sbaccess or
	  IF_rg_sbaddress_reading_1_BITS_2_TO_0_2_EQ_0x0_ETC___d104 or
	  IF_rg_sbaddress_reading_1_BITS_2_TO_0_2_EQ_0x0_ETC___d117 or
	  CASE_rg_sbaddress_reading_BITS_2_TO_0_0x0_resu_ETC__q1 or
	  rg_sbaddress_reading or master_xactor_shim_rff_rv$port1__read)
  begin
    case (rg_sbcs_sbaccess)
      3'd0:
	  IF_rg_sbcs_sbaccess_9_EQ_0_0_THEN_IF_rg_sbaddr_ETC___d130 =
	      IF_rg_sbaddress_reading_1_BITS_2_TO_0_2_EQ_0x0_ETC___d104;
      3'd1:
	  IF_rg_sbcs_sbaccess_9_EQ_0_0_THEN_IF_rg_sbaddr_ETC___d130 =
	      IF_rg_sbaddress_reading_1_BITS_2_TO_0_2_EQ_0x0_ETC___d117;
      3'd2:
	  IF_rg_sbcs_sbaccess_9_EQ_0_0_THEN_IF_rg_sbaddr_ETC___d130 =
	      CASE_rg_sbaddress_reading_BITS_2_TO_0_0x0_resu_ETC__q1;
      3'd3:
	  IF_rg_sbcs_sbaccess_9_EQ_0_0_THEN_IF_rg_sbaddr_ETC___d130 =
	      (rg_sbaddress_reading[2:0] == 3'h0) ?
		master_xactor_shim_rff_rv$port1__read[68:5] :
		64'd0;
      default: IF_rg_sbcs_sbaccess_9_EQ_0_0_THEN_IF_rg_sbaddr_ETC___d130 =
		   64'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        master_xactor_clearing <= `BSV_ASSIGNMENT_DELAY 1'd0;
	master_xactor_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	    98'h0AAAAAAAAAAAAAAAAAAAAAAAA;
	master_xactor_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	    98'h0AAAAAAAAAAAAAAAAAAAAAAAA;
	master_xactor_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY 7'd42;
	master_xactor_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	    74'h0AAAAAAAAAAAAAAAAAA;
	master_xactor_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	    76'h2AAAAAAAAAAAAAAAAAA;
	rg_sbaddress0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_sbaddress1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (master_xactor_clearing$EN)
	  master_xactor_clearing <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_clearing$D_IN;
	if (master_xactor_shim_arff_rv$EN)
	  master_xactor_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_shim_arff_rv$D_IN;
	if (master_xactor_shim_awff_rv$EN)
	  master_xactor_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_shim_awff_rv$D_IN;
	if (master_xactor_shim_bff_rv$EN)
	  master_xactor_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_shim_bff_rv$D_IN;
	if (master_xactor_shim_rff_rv$EN)
	  master_xactor_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_shim_rff_rv$D_IN;
	if (master_xactor_shim_wff_rv$EN)
	  master_xactor_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_shim_wff_rv$D_IN;
	if (rg_sbaddress0$EN)
	  rg_sbaddress0 <= `BSV_ASSIGNMENT_DELAY rg_sbaddress0$D_IN;
	if (rg_sbaddress1$EN)
	  rg_sbaddress1 <= `BSV_ASSIGNMENT_DELAY rg_sbaddress1$D_IN;
      end
    if (rg_sb_state$EN) rg_sb_state <= `BSV_ASSIGNMENT_DELAY rg_sb_state$D_IN;
    if (rg_sbaddress_reading$EN)
      rg_sbaddress_reading <= `BSV_ASSIGNMENT_DELAY rg_sbaddress_reading$D_IN;
    if (rg_sbcs_sbaccess$EN)
      rg_sbcs_sbaccess <= `BSV_ASSIGNMENT_DELAY rg_sbcs_sbaccess$D_IN;
    if (rg_sbcs_sbautoincrement$EN)
      rg_sbcs_sbautoincrement <= `BSV_ASSIGNMENT_DELAY
	  rg_sbcs_sbautoincrement$D_IN;
    if (rg_sbcs_sbbusyerror$EN)
      rg_sbcs_sbbusyerror <= `BSV_ASSIGNMENT_DELAY rg_sbcs_sbbusyerror$D_IN;
    if (rg_sbcs_sberror$EN)
      rg_sbcs_sberror <= `BSV_ASSIGNMENT_DELAY rg_sbcs_sberror$D_IN;
    if (rg_sbcs_sbreadonaddr$EN)
      rg_sbcs_sbreadonaddr <= `BSV_ASSIGNMENT_DELAY rg_sbcs_sbreadonaddr$D_IN;
    if (rg_sbcs_sbreadondata$EN)
      rg_sbcs_sbreadondata <= `BSV_ASSIGNMENT_DELAY rg_sbcs_sbreadondata$D_IN;
    if (rg_sbdata0$EN) rg_sbdata0 <= `BSV_ASSIGNMENT_DELAY rg_sbdata0$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    master_xactor_clearing = 1'h0;
    master_xactor_shim_arff_rv = 98'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    master_xactor_shim_awff_rv = 98'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    master_xactor_shim_bff_rv = 7'h2A;
    master_xactor_shim_rff_rv = 74'h2AAAAAAAAAAAAAAAAAA;
    master_xactor_shim_wff_rv = 76'hAAAAAAAAAAAAAAAAAAA;
    rg_sb_state = 2'h2;
    rg_sbaddress0 = 32'hAAAAAAAA;
    rg_sbaddress1 = 32'hAAAAAAAA;
    rg_sbaddress_reading = 64'hAAAAAAAAAAAAAAAA;
    rg_sbcs_sbaccess = 3'h2;
    rg_sbcs_sbautoincrement = 1'h0;
    rg_sbcs_sbbusyerror = 1'h0;
    rg_sbcs_sberror = 3'h2;
    rg_sbcs_sbreadonaddr = 1'h0;
    rg_sbcs_sbreadondata = 1'h0;
    rg_sbdata0 = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h3C && rg_sb_state == 2'd0 &&
	  rg_sbcs_sbbusyerror)
	$display("DM_System_Bus.sbdata.read: ignoring due to sbbusyerror");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h3C && rg_sb_state == 2'd0 &&
	  !rg_sbcs_sbbusyerror &&
	  rg_sbcs_sberror != 3'd0)
	$display("DM_System_Bus.sbdata.read: ignoring due to sberror = 0x%0h",
		 rg_sbcs_sberror);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h3C && rg_sb_state != 2'd0)
	$display("DM_System_Bus.sbdata.read: busy, setting sbbusyerror");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr != 7'h38 &&
	  av_read_dm_addr != 7'h39 &&
	  av_read_dm_addr != 7'h3A &&
	  av_read_dm_addr != 7'h3C)
	$write("DM_System_Bus.read: [");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h10) $write("dm_addr_dmcontrol");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h11) $write("dm_addr_dmstatus");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h12) $write("dm_addr_hartinfo");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h13) $write("dm_addr_haltsum");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h14)
	$write("dm_addr_hawindowsel");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h15) $write("dm_addr_hawindow");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h19)
	$write("dm_addr_devtreeaddr0");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h30) $write("dm_addr_authdata");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h40)
	$write("dm_addr_haltregion0");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h5F)
	$write("dm_addr_haltregion31");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h60) $write("dm_addr_verbosity");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h16)
	$write("dm_addr_abstractcs");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h17) $write("dm_addr_command");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h04) $write("dm_addr_data0");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h05) $write("dm_addr_data1");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h06) $write("dm_addr_data2");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h07) $write("dm_addr_data3");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h08) $write("dm_addr_data4");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h09) $write("dm_addr_data5");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h0A) $write("dm_addr_data6");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h0B) $write("dm_addr_data7");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h0C) $write("dm_addr_data8");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h0D) $write("dm_addr_data9");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h0F) $write("dm_addr_data11");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h18)
	$write("dm_addr_abstractauto");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h20) $write("dm_addr_progbuf0");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h3B)
	$write("dm_addr_sbaddress2");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h3D) $write("dm_addr_sbdata1");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h3E) $write("dm_addr_sbdata2");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr == 7'h3F) $write("dm_addr_sbdata3");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr != 7'h38 &&
	  av_read_dm_addr != 7'h39 &&
	  av_read_dm_addr != 7'h3A &&
	  av_read_dm_addr != 7'h3C &&
	  av_read_dm_addr != 7'h10 &&
	  av_read_dm_addr != 7'h11 &&
	  av_read_dm_addr != 7'h12 &&
	  av_read_dm_addr != 7'h13 &&
	  av_read_dm_addr != 7'h14 &&
	  av_read_dm_addr != 7'h15 &&
	  av_read_dm_addr != 7'h19 &&
	  av_read_dm_addr != 7'h30 &&
	  av_read_dm_addr != 7'h40 &&
	  av_read_dm_addr != 7'h5F &&
	  av_read_dm_addr != 7'h60 &&
	  av_read_dm_addr != 7'h16 &&
	  av_read_dm_addr != 7'h17 &&
	  av_read_dm_addr != 7'h04 &&
	  av_read_dm_addr != 7'h05 &&
	  av_read_dm_addr != 7'h06 &&
	  av_read_dm_addr != 7'h07 &&
	  av_read_dm_addr != 7'h08 &&
	  av_read_dm_addr != 7'h09 &&
	  av_read_dm_addr != 7'h0A &&
	  av_read_dm_addr != 7'h0B &&
	  av_read_dm_addr != 7'h0C &&
	  av_read_dm_addr != 7'h0D &&
	  av_read_dm_addr != 7'h0F &&
	  av_read_dm_addr != 7'h18 &&
	  av_read_dm_addr != 7'h20 &&
	  av_read_dm_addr != 7'h3B &&
	  av_read_dm_addr != 7'h3D &&
	  av_read_dm_addr != 7'h3E &&
	  av_read_dm_addr != 7'h3F)
	$write("<Unknown dm_abstract_command dm_addr 0x%0h>",
	       av_read_dm_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_av_read && av_read_dm_addr != 7'h38 &&
	  av_read_dm_addr != 7'h39 &&
	  av_read_dm_addr != 7'h3A &&
	  av_read_dm_addr != 7'h3C)
	$write("] not supported", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_master_xactor_ug_master_u_b_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_master_xactor_ug_master_u_r_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h38 && rg_sbcs_sberror != 3'd0 &&
	  write_dm_word[14:12] == 3'd0)
	$display("DM_System_Bus.sbcs_write <= 0x%08h: ERROR", write_dm_word);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h38 && rg_sbcs_sberror != 3'd0 &&
	  write_dm_word[14:12] == 3'd0)
	$display("    ERROR: existing sberror (0x%0h) is not being cleared.",
		 rg_sbcs_sberror);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h38 && rg_sbcs_sberror != 3'd0 &&
	  write_dm_word[14:12] == 3'd0)
	$display("    Must be cleared to re-enable system bus access.");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write &&
	  write_dm_addr_EQ_0x38_95_AND_rg_sbcs_sberror_9_ETC___d325)
	$display("DM_System_Bus.sbcs_write <= 0x%08h: ERROR", write_dm_word);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write &&
	  write_dm_addr_EQ_0x38_95_AND_rg_sbcs_sberror_9_ETC___d325)
	$display("    ERROR: existing sbbusyerror (%0d) is not being cleared.",
		 rg_sbcs_sbbusyerror);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write &&
	  write_dm_addr_EQ_0x38_95_AND_rg_sbcs_sberror_9_ETC___d325)
	$display("    Must be cleared to re-enable system bus access.");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write &&
	  write_dm_addr_EQ_0x38_95_AND_rg_sbcs_sberror_9_ETC___d332)
	$display("DM_System_Bus.sbcs_write <= 0x%08h: ERROR", write_dm_word);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write &&
	  write_dm_addr_EQ_0x38_95_AND_rg_sbcs_sberror_9_ETC___d332)
	$write("    ERROR: sbaccess ");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h38 &&
	  (rg_sbcs_sberror == 3'd0 || write_dm_word[14:12] != 3'd0) &&
	  (!rg_sbcs_sbbusyerror || write_dm_word[22]) &&
	  write_dm_word[19:17] == 3'd3)
	$write("DM_SBACCESS_64_BIT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h38 &&
	  (rg_sbcs_sberror == 3'd0 || write_dm_word[14:12] != 3'd0) &&
	  (!rg_sbcs_sbbusyerror || write_dm_word[22]) &&
	  write_dm_word[19:17] == 3'd4)
	$write("DM_SBACCESS_128_BIT");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write &&
	  write_dm_addr_EQ_0x38_95_AND_rg_sbcs_sberror_9_ETC___d332)
	$write(" not supported", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr != 7'h38 &&
	  (write_dm_addr == 7'h39 || write_dm_addr == 7'h3A) &&
	  rg_sb_state == 2'd0 &&
	  rg_sbcs_sbbusyerror)
	$display("DM_System_Bus.sbaddress.write: ignoring due to sbbusyerror");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr != 7'h38 &&
	  (write_dm_addr == 7'h39 || write_dm_addr == 7'h3A) &&
	  rg_sb_state == 2'd0 &&
	  !rg_sbcs_sbbusyerror &&
	  rg_sbcs_sberror != 3'd0)
	$display("DM_System_Bus.sbaddress.write: ignoring due to sberror = 0x%0h",
		 rg_sbcs_sberror);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr != 7'h38 &&
	  (write_dm_addr == 7'h39 || write_dm_addr == 7'h3A) &&
	  rg_sb_state != 2'd0)
	$display("DM_System_Bus.sbaddress.write: busy, setting sbbusyerror");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h3C && rg_sb_state == 2'd0 &&
	  rg_sbcs_sbbusyerror)
	$display("DM_System_Bus.sbdata.write: ignoring due to sbbusyerror");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h3C && rg_sb_state == 2'd0 &&
	  !rg_sbcs_sbbusyerror &&
	  rg_sbcs_sberror != 3'd0)
	$display("DM_System_Bus.sbdata.write: ignoring due to sberror = 0x%0h",
		 rg_sbcs_sberror);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h3C && rg_sb_state != 2'd0)
	$display("DM_System_Bus.sbdata.write: busy, setting sbbusyerror");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr != 7'h38 && write_dm_addr != 7'h39 &&
	  write_dm_addr != 7'h3A &&
	  write_dm_addr != 7'h3C)
	$write("DM_System_Bus.write: [");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h10) $write("dm_addr_dmcontrol");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h11) $write("dm_addr_dmstatus");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h12) $write("dm_addr_hartinfo");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h13) $write("dm_addr_haltsum");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h14) $write("dm_addr_hawindowsel");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h15) $write("dm_addr_hawindow");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h19) $write("dm_addr_devtreeaddr0");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h30) $write("dm_addr_authdata");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h40) $write("dm_addr_haltregion0");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h5F) $write("dm_addr_haltregion31");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h60) $write("dm_addr_verbosity");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h16) $write("dm_addr_abstractcs");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h17) $write("dm_addr_command");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h04) $write("dm_addr_data0");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h05) $write("dm_addr_data1");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h06) $write("dm_addr_data2");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h07) $write("dm_addr_data3");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h08) $write("dm_addr_data4");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h09) $write("dm_addr_data5");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h0A) $write("dm_addr_data6");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h0B) $write("dm_addr_data7");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h0C) $write("dm_addr_data8");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h0D) $write("dm_addr_data9");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h0F) $write("dm_addr_data11");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h18) $write("dm_addr_abstractauto");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h20) $write("dm_addr_progbuf0");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h3B) $write("dm_addr_sbaddress2");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h3D) $write("dm_addr_sbdata1");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h3E) $write("dm_addr_sbdata2");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr == 7'h3F) $write("dm_addr_sbdata3");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr != 7'h38 && write_dm_addr != 7'h39 &&
	  write_dm_addr != 7'h3A &&
	  write_dm_addr != 7'h3C &&
	  write_dm_addr != 7'h10 &&
	  write_dm_addr != 7'h11 &&
	  write_dm_addr != 7'h12 &&
	  write_dm_addr != 7'h13 &&
	  write_dm_addr != 7'h14 &&
	  write_dm_addr != 7'h15 &&
	  write_dm_addr != 7'h19 &&
	  write_dm_addr != 7'h30 &&
	  write_dm_addr != 7'h40 &&
	  write_dm_addr != 7'h5F &&
	  write_dm_addr != 7'h60 &&
	  write_dm_addr != 7'h16 &&
	  write_dm_addr != 7'h17 &&
	  write_dm_addr != 7'h04 &&
	  write_dm_addr != 7'h05 &&
	  write_dm_addr != 7'h06 &&
	  write_dm_addr != 7'h07 &&
	  write_dm_addr != 7'h08 &&
	  write_dm_addr != 7'h09 &&
	  write_dm_addr != 7'h0A &&
	  write_dm_addr != 7'h0B &&
	  write_dm_addr != 7'h0C &&
	  write_dm_addr != 7'h0D &&
	  write_dm_addr != 7'h0F &&
	  write_dm_addr != 7'h18 &&
	  write_dm_addr != 7'h20 &&
	  write_dm_addr != 7'h3B &&
	  write_dm_addr != 7'h3D &&
	  write_dm_addr != 7'h3E &&
	  write_dm_addr != 7'h3F)
	$write("<Unknown dm_abstract_command dm_addr 0x%0h>", write_dm_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_write && write_dm_addr != 7'h38 && write_dm_addr != 7'h39 &&
	  write_dm_addr != 7'h3A &&
	  write_dm_addr != 7'h3C)
	$write("] <= 0x%08h; addr not supported", write_dm_word, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_sb_read_finish &&
	  master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0)
	$display("DM_System_Bus.rule_sb_read_finish: setting rg_sbcs_sberror to DM_SBERROR_OTHER\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_sb_read_finish &&
	  master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0)
	$write("    rdr = ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_sb_read_finish &&
	  master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0)
	$write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_sb_read_finish &&
	  master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0)
	$write("'h%h", master_xactor_shim_rff_rv$port1__read[72:69]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_sb_read_finish &&
	  master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_sb_read_finish &&
	  master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0)
	$write("'h%h", master_xactor_shim_rff_rv$port1__read[68:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_sb_read_finish &&
	  master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_sb_read_finish &&
	  master_xactor_shim_rff_rv$port1__read[4:3] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_sb_read_finish &&
	  master_xactor_shim_rff_rv$port1__read[4:3] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_sb_read_finish &&
	  master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 &&
	  master_xactor_shim_rff_rv$port1__read[4:3] != 2'd1 &&
	  master_xactor_shim_rff_rv$port1__read[4:3] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_sb_read_finish &&
	  master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_sb_read_finish &&
	  master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 &&
	  master_xactor_shim_rff_rv$port1__read[2])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_sb_read_finish &&
	  master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 &&
	  !master_xactor_shim_rff_rv$port1__read[2])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_sb_read_finish &&
	  master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_sb_read_finish &&
	  master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0)
	$write("'h%h", master_xactor_shim_rff_rv$port1__read[1:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_sb_read_finish &&
	  master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_master_xactor_ug_master_u_aw_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_master_xactor_ug_master_u_w_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_master_xactor_ug_master_u_ar_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
  end
  // synopsys translate_on
endmodule  // mkDM_System_Bus

