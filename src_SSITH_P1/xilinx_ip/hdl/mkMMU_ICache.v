//
// Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
//
// On Mon Jun 24 11:46:04 BST 2019
//
//
// Ports:
// Name                         I/O  size props
// RDY_set_verbosity              O     1 const
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1
// valid                          O     1
// addr                           O    32 reg
// word128_fst                    O     1
// word128_snd                    O   128
// st_amo_val_fst                 O     1
// st_amo_val_snd                 O   128
// exc                            O     1
// exc_code                       O     6 reg
// RDY_server_flush_request_put   O     1 reg
// RDY_server_flush_response_get  O     1
// RDY_tlb_flush                  O     1 const
// mem_master_awid                O     5
// mem_master_awaddr              O    64
// mem_master_awlen               O     8
// mem_master_awsize              O     3
// mem_master_awburst             O     2
// mem_master_awlock              O     1
// mem_master_awcache             O     4
// mem_master_awprot              O     3
// mem_master_awqos               O     4
// mem_master_awregion            O     4
// mem_master_awvalid             O     1
// mem_master_wdata               O   128
// mem_master_wstrb               O    16
// mem_master_wlast               O     1
// mem_master_wuser               O     2
// mem_master_wvalid              O     1
// mem_master_bready              O     1
// mem_master_arid                O     5
// mem_master_araddr              O    64
// mem_master_arlen               O     8
// mem_master_arsize              O     3
// mem_master_arburst             O     2
// mem_master_arlock              O     1
// mem_master_arcache             O     4
// mem_master_arprot              O     3
// mem_master_arqos               O     4
// mem_master_arregion            O     4
// mem_master_arvalid             O     1
// mem_master_rready              O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_verbosity_verbosity        I     4 reg
// req_op                         I     2
// req_width_code                 I     3
// req_is_unsigned                I     1 reg
// req_amo_funct7                 I     7 reg
// req_addr                       I    32
// req_st_value                   I   129
// req_priv                       I     2 unused
// req_sstatus_SUM                I     1 unused
// req_mstatus_MXR                I     1 unused
// req_satp                       I    32 unused
// mem_master_awready             I     1
// mem_master_wready              I     1
// mem_master_bid                 I     5
// mem_master_bresp               I     2
// mem_master_arready             I     1
// mem_master_rid                 I     5
// mem_master_rdata               I   128
// mem_master_rresp               I     2
// mem_master_rlast               I     1
// mem_master_ruser               I     2
// EN_set_verbosity               I     1
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_req                         I     1
// EN_commit                      I     1
// EN_server_flush_request_put    I     1
// EN_server_flush_response_get   I     1
// EN_tlb_flush                   I     1 unused
// mem_master_bvalid              I     1
// mem_master_rvalid              I     1
//
// Combinational paths from inputs to outputs:
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> valid
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> word128_fst
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> word128_snd
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awid
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awaddr
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awlen
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awsize
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awburst
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awlock
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awcache
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awprot
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awqos
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awregion
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awuser
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awvalid
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_wdata
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_wstrb
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_wlast
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_wuser
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_wvalid
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_req,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_arid
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_req,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_araddr
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_req,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_arlen
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_req,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_arsize
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_req,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_arburst
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_req,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_arlock
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_req,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_arcache
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_req,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_arprot
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_req,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_arqos
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_req,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_arregion
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_req,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_aruser
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_req,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_arvalid
//   EN_commit -> st_amo_val_fst
//   EN_commit -> st_amo_val_snd
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMMU_ICache(CLK,
		    RST_N,

		    set_verbosity_verbosity,
		    EN_set_verbosity,
		    RDY_set_verbosity,

		    EN_server_reset_request_put,
		    RDY_server_reset_request_put,

		    EN_server_reset_response_get,
		    RDY_server_reset_response_get,

		    req_op,
		    req_width_code,
		    req_is_unsigned,
		    req_amo_funct7,
		    req_addr,
		    req_st_value,
		    req_priv,
		    req_sstatus_SUM,
		    req_mstatus_MXR,
		    req_satp,
		    EN_req,

		    EN_commit,

		    valid,

		    addr,

		    word128_fst,

		    word128_snd,

		    st_amo_val_fst,

		    st_amo_val_snd,

		    exc,

		    exc_code,

		    EN_server_flush_request_put,
		    RDY_server_flush_request_put,

		    EN_server_flush_response_get,
		    RDY_server_flush_response_get,

		    EN_tlb_flush,
		    RDY_tlb_flush,

		    mem_master_awid,

		    mem_master_awaddr,

		    mem_master_awlen,

		    mem_master_awsize,

		    mem_master_awburst,

		    mem_master_awlock,

		    mem_master_awcache,

		    mem_master_awprot,

		    mem_master_awqos,

		    mem_master_awregion,

		    mem_master_awvalid,

		    mem_master_awready,

		    mem_master_wdata,

		    mem_master_wstrb,

		    mem_master_wlast,

		    mem_master_wuser,

		    mem_master_wvalid,

		    mem_master_wready,

		    mem_master_bid,
		    mem_master_bresp,
		    mem_master_bvalid,

		    mem_master_bready,

		    mem_master_arid,

		    mem_master_araddr,

		    mem_master_arlen,

		    mem_master_arsize,

		    mem_master_arburst,

		    mem_master_arlock,

		    mem_master_arcache,

		    mem_master_arprot,

		    mem_master_arqos,

		    mem_master_arregion,

		    mem_master_arvalid,

		    mem_master_arready,

		    mem_master_rid,
		    mem_master_rdata,
		    mem_master_rresp,
		    mem_master_rlast,
		    mem_master_ruser,
		    mem_master_rvalid,

		    mem_master_rready);
  input  CLK;
  input  RST_N;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // action method req
  input  [1 : 0] req_op;
  input  [2 : 0] req_width_code;
  input  req_is_unsigned;
  input  [6 : 0] req_amo_funct7;
  input  [31 : 0] req_addr;
  input  [128 : 0] req_st_value;
  input  [1 : 0] req_priv;
  input  req_sstatus_SUM;
  input  req_mstatus_MXR;
  input  [31 : 0] req_satp;
  input  EN_req;

  // action method commit
  input  EN_commit;

  // value method valid
  output valid;

  // value method addr
  output [31 : 0] addr;

  // value method word128_fst
  output word128_fst;

  // value method word128_snd
  output [127 : 0] word128_snd;

  // value method st_amo_val_fst
  output st_amo_val_fst;

  // value method st_amo_val_snd
  output [127 : 0] st_amo_val_snd;

  // value method exc
  output exc;

  // value method exc_code
  output [5 : 0] exc_code;

  // action method server_flush_request_put
  input  EN_server_flush_request_put;
  output RDY_server_flush_request_put;

  // action method server_flush_response_get
  input  EN_server_flush_response_get;
  output RDY_server_flush_response_get;

  // action method tlb_flush
  input  EN_tlb_flush;
  output RDY_tlb_flush;

  // value method mem_master_aw_awid
  output [4 : 0] mem_master_awid;

  // value method mem_master_aw_awaddr
  output [63 : 0] mem_master_awaddr;

  // value method mem_master_aw_awlen
  output [7 : 0] mem_master_awlen;

  // value method mem_master_aw_awsize
  output [2 : 0] mem_master_awsize;

  // value method mem_master_aw_awburst
  output [1 : 0] mem_master_awburst;

  // value method mem_master_aw_awlock
  output mem_master_awlock;

  // value method mem_master_aw_awcache
  output [3 : 0] mem_master_awcache;

  // value method mem_master_aw_awprot
  output [2 : 0] mem_master_awprot;

  // value method mem_master_aw_awqos
  output [3 : 0] mem_master_awqos;

  // value method mem_master_aw_awregion
  output [3 : 0] mem_master_awregion;

  // value method mem_master_aw_awuser

  // value method mem_master_aw_awvalid
  output mem_master_awvalid;

  // action method mem_master_aw_awready
  input  mem_master_awready;

  // value method mem_master_w_wdata
  output [127 : 0] mem_master_wdata;

  // value method mem_master_w_wstrb
  output [15 : 0] mem_master_wstrb;

  // value method mem_master_w_wlast
  output mem_master_wlast;

  // value method mem_master_w_wuser
  output [1 : 0] mem_master_wuser;

  // value method mem_master_w_wvalid
  output mem_master_wvalid;

  // action method mem_master_w_wready
  input  mem_master_wready;

  // action method mem_master_b_bflit
  input  [4 : 0] mem_master_bid;
  input  [1 : 0] mem_master_bresp;
  input  mem_master_bvalid;

  // value method mem_master_b_bready
  output mem_master_bready;

  // value method mem_master_ar_arid
  output [4 : 0] mem_master_arid;

  // value method mem_master_ar_araddr
  output [63 : 0] mem_master_araddr;

  // value method mem_master_ar_arlen
  output [7 : 0] mem_master_arlen;

  // value method mem_master_ar_arsize
  output [2 : 0] mem_master_arsize;

  // value method mem_master_ar_arburst
  output [1 : 0] mem_master_arburst;

  // value method mem_master_ar_arlock
  output mem_master_arlock;

  // value method mem_master_ar_arcache
  output [3 : 0] mem_master_arcache;

  // value method mem_master_ar_arprot
  output [2 : 0] mem_master_arprot;

  // value method mem_master_ar_arqos
  output [3 : 0] mem_master_arqos;

  // value method mem_master_ar_arregion
  output [3 : 0] mem_master_arregion;

  // value method mem_master_ar_aruser

  // value method mem_master_ar_arvalid
  output mem_master_arvalid;

  // action method mem_master_ar_arready
  input  mem_master_arready;

  // action method mem_master_r_rflit
  input  [4 : 0] mem_master_rid;
  input  [127 : 0] mem_master_rdata;
  input  [1 : 0] mem_master_rresp;
  input  mem_master_rlast;
  input  [1 : 0] mem_master_ruser;
  input  mem_master_rvalid;

  // value method mem_master_r_rready
  output mem_master_rready;

  // signals for module outputs
  wire [127 : 0] mem_master_wdata, st_amo_val_snd, word128_snd;
  wire [63 : 0] mem_master_araddr, mem_master_awaddr;
  wire [31 : 0] addr;
  wire [15 : 0] mem_master_wstrb;
  wire [7 : 0] mem_master_arlen, mem_master_awlen;
  wire [5 : 0] exc_code;
  wire [4 : 0] mem_master_arid, mem_master_awid;
  wire [3 : 0] mem_master_arcache,
	       mem_master_arqos,
	       mem_master_arregion,
	       mem_master_awcache,
	       mem_master_awqos,
	       mem_master_awregion;
  wire [2 : 0] mem_master_arprot,
	       mem_master_arsize,
	       mem_master_awprot,
	       mem_master_awsize;
  wire [1 : 0] mem_master_arburst, mem_master_awburst, mem_master_wuser;
  wire RDY_server_flush_request_put,
       RDY_server_flush_response_get,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_set_verbosity,
       RDY_tlb_flush,
       exc,
       mem_master_arlock,
       mem_master_arvalid,
       mem_master_awlock,
       mem_master_awvalid,
       mem_master_bready,
       mem_master_rready,
       mem_master_wlast,
       mem_master_wvalid,
       st_amo_val_fst,
       valid,
       word128_fst;

  // inlined wires
  reg [147 : 0] cache_master_xactor_shim_wff_rv$port0__write_1;
  reg [128 : 0] cache_dw_output_ld_val$wget;
  reg [98 : 0] cache_master_xactor_shim_awff_rv$port0__write_1;
  reg [3 : 0] cache_ctr_wr_rsps_pending_crg$port0__write_1;
  wire [147 : 0] cache_master_xactor_shim_wff_rv$port1__read,
		 cache_master_xactor_shim_wff_rv$port2__read,
		 cache_master_xactor_shim_wff_rv$port3__read;
  wire [138 : 0] cache_master_xactor_shim_rff_rv$port0__write_1,
		 cache_master_xactor_shim_rff_rv$port1__read,
		 cache_master_xactor_shim_rff_rv$port2__read,
		 cache_master_xactor_shim_rff_rv$port3__read;
  wire [137 : 0] cache_master_xactor_ug_master_u_r_putWire$wget;
  wire [128 : 0] cache_dw_output_st_amo_val$wget;
  wire [98 : 0] cache_master_xactor_shim_arff_rv$port0__write_1,
		cache_master_xactor_shim_arff_rv$port1__read,
		cache_master_xactor_shim_arff_rv$port2__read,
		cache_master_xactor_shim_arff_rv$port3__read,
		cache_master_xactor_shim_awff_rv$port1__read,
		cache_master_xactor_shim_awff_rv$port2__read,
		cache_master_xactor_shim_awff_rv$port3__read;
  wire [10 : 0] cache_crg_sb_to_load_delay$port0__write_1,
		cache_crg_sb_to_load_delay$port2__read;
  wire [7 : 0] cache_master_xactor_shim_bff_rv$port0__write_1,
	       cache_master_xactor_shim_bff_rv$port1__read,
	       cache_master_xactor_shim_bff_rv$port2__read,
	       cache_master_xactor_shim_bff_rv$port3__read;
  wire [6 : 0] cache_master_xactor_ug_master_u_b_putWire$wget;
  wire [3 : 0] cache_ctr_wr_rsps_pending_crg$port1__write_1,
	       cache_ctr_wr_rsps_pending_crg$port2__read,
	       cache_ctr_wr_rsps_pending_crg$port3__read;
  wire cache_crg_sb_to_load_delay$EN_port1__write,
       cache_ctr_wr_rsps_pending_crg$EN_port0__write,
       cache_dw_valid$whas,
       cache_master_xactor_shim_arff_rv$EN_port0__write,
       cache_master_xactor_shim_awff_rv$EN_port0__write,
       cache_master_xactor_shim_rff_rv$EN_port1__write,
       cache_master_xactor_shim_wff_rv$EN_port0__write,
       cache_master_xactor_ug_master_u_ar_dropWire$whas,
       cache_master_xactor_ug_master_u_aw_dropWire$whas,
       cache_master_xactor_ug_master_u_b_putWire$whas,
       cache_master_xactor_ug_master_u_r_putWire$whas,
       cache_master_xactor_ug_master_u_w_dropWire$whas;

  // register cache_cfg_verbosity
  reg [3 : 0] cache_cfg_verbosity;
  wire [3 : 0] cache_cfg_verbosity$D_IN;
  wire cache_cfg_verbosity$EN;

  // register cache_crg_sb_to_load_delay
  reg [10 : 0] cache_crg_sb_to_load_delay;
  wire [10 : 0] cache_crg_sb_to_load_delay$D_IN;
  wire cache_crg_sb_to_load_delay$EN;

  // register cache_ctr_wr_rsps_pending_crg
  reg [3 : 0] cache_ctr_wr_rsps_pending_crg;
  wire [3 : 0] cache_ctr_wr_rsps_pending_crg$D_IN;
  wire cache_ctr_wr_rsps_pending_crg$EN;

  // register cache_master_xactor_clearing
  reg cache_master_xactor_clearing;
  wire cache_master_xactor_clearing$D_IN, cache_master_xactor_clearing$EN;

  // register cache_master_xactor_shim_arff_rv
  reg [98 : 0] cache_master_xactor_shim_arff_rv;
  wire [98 : 0] cache_master_xactor_shim_arff_rv$D_IN;
  wire cache_master_xactor_shim_arff_rv$EN;

  // register cache_master_xactor_shim_awff_rv
  reg [98 : 0] cache_master_xactor_shim_awff_rv;
  wire [98 : 0] cache_master_xactor_shim_awff_rv$D_IN;
  wire cache_master_xactor_shim_awff_rv$EN;

  // register cache_master_xactor_shim_bff_rv
  reg [7 : 0] cache_master_xactor_shim_bff_rv;
  wire [7 : 0] cache_master_xactor_shim_bff_rv$D_IN;
  wire cache_master_xactor_shim_bff_rv$EN;

  // register cache_master_xactor_shim_rff_rv
  reg [138 : 0] cache_master_xactor_shim_rff_rv;
  wire [138 : 0] cache_master_xactor_shim_rff_rv$D_IN;
  wire cache_master_xactor_shim_rff_rv$EN;

  // register cache_master_xactor_shim_wff_rv
  reg [147 : 0] cache_master_xactor_shim_wff_rv;
  wire [147 : 0] cache_master_xactor_shim_wff_rv$D_IN;
  wire cache_master_xactor_shim_wff_rv$EN;

  // register cache_rg_addr
  reg [31 : 0] cache_rg_addr;
  wire [31 : 0] cache_rg_addr$D_IN;
  wire cache_rg_addr$EN;

  // register cache_rg_amo_funct7
  reg [6 : 0] cache_rg_amo_funct7;
  wire [6 : 0] cache_rg_amo_funct7$D_IN;
  wire cache_rg_amo_funct7$EN;

  // register cache_rg_cset_in_cache
  reg [5 : 0] cache_rg_cset_in_cache;
  wire [5 : 0] cache_rg_cset_in_cache$D_IN;
  wire cache_rg_cset_in_cache$EN;

  // register cache_rg_error_during_refill
  reg cache_rg_error_during_refill;
  wire cache_rg_error_during_refill$D_IN, cache_rg_error_during_refill$EN;

  // register cache_rg_exc_code
  reg [5 : 0] cache_rg_exc_code;
  reg [5 : 0] cache_rg_exc_code$D_IN;
  wire cache_rg_exc_code$EN;

  // register cache_rg_is_unsigned
  reg cache_rg_is_unsigned;
  wire cache_rg_is_unsigned$D_IN, cache_rg_is_unsigned$EN;

  // register cache_rg_ld_val
  reg [128 : 0] cache_rg_ld_val;
  reg [128 : 0] cache_rg_ld_val$D_IN;
  wire cache_rg_ld_val$EN;

  // register cache_rg_lower_word64
  reg [63 : 0] cache_rg_lower_word64;
  wire [63 : 0] cache_rg_lower_word64$D_IN;
  wire cache_rg_lower_word64$EN;

  // register cache_rg_lower_word64_full
  reg cache_rg_lower_word64_full;
  wire cache_rg_lower_word64_full$D_IN, cache_rg_lower_word64_full$EN;

  // register cache_rg_lrsc_pa
  reg [31 : 0] cache_rg_lrsc_pa;
  wire [31 : 0] cache_rg_lrsc_pa$D_IN;
  wire cache_rg_lrsc_pa$EN;

  // register cache_rg_lrsc_valid
  reg cache_rg_lrsc_valid;
  wire cache_rg_lrsc_valid$D_IN, cache_rg_lrsc_valid$EN;

  // register cache_rg_op
  reg [1 : 0] cache_rg_op;
  wire [1 : 0] cache_rg_op$D_IN;
  wire cache_rg_op$EN;

  // register cache_rg_pa
  reg [31 : 0] cache_rg_pa;
  wire [31 : 0] cache_rg_pa$D_IN;
  wire cache_rg_pa$EN;

  // register cache_rg_pte_pa
  reg [31 : 0] cache_rg_pte_pa;
  wire [31 : 0] cache_rg_pte_pa$D_IN;
  wire cache_rg_pte_pa$EN;

  // register cache_rg_st_amo_val
  reg [128 : 0] cache_rg_st_amo_val;
  wire [128 : 0] cache_rg_st_amo_val$D_IN;
  wire cache_rg_st_amo_val$EN;

  // register cache_rg_state
  reg [3 : 0] cache_rg_state;
  reg [3 : 0] cache_rg_state$D_IN;
  wire cache_rg_state$EN;

  // register cache_rg_width_code
  reg [2 : 0] cache_rg_width_code;
  wire [2 : 0] cache_rg_width_code$D_IN;
  wire cache_rg_width_code$EN;

  // register cache_rg_word128_set_in_cache
  reg [7 : 0] cache_rg_word128_set_in_cache;
  wire [7 : 0] cache_rg_word128_set_in_cache$D_IN;
  wire cache_rg_word128_set_in_cache$EN;

  // ports of submodule cache_f_reset_reqs
  wire cache_f_reset_reqs$CLR,
       cache_f_reset_reqs$DEQ,
       cache_f_reset_reqs$D_IN,
       cache_f_reset_reqs$D_OUT,
       cache_f_reset_reqs$EMPTY_N,
       cache_f_reset_reqs$ENQ,
       cache_f_reset_reqs$FULL_N;

  // ports of submodule cache_f_reset_rsps
  wire cache_f_reset_rsps$CLR,
       cache_f_reset_rsps$DEQ,
       cache_f_reset_rsps$D_IN,
       cache_f_reset_rsps$D_OUT,
       cache_f_reset_rsps$EMPTY_N,
       cache_f_reset_rsps$ENQ,
       cache_f_reset_rsps$FULL_N;

  // ports of submodule cache_ram_state_and_ctag_cset
  wire [22 : 0] cache_ram_state_and_ctag_cset$DIA,
		cache_ram_state_and_ctag_cset$DIB,
		cache_ram_state_and_ctag_cset$DOB;
  wire [5 : 0] cache_ram_state_and_ctag_cset$ADDRA,
	       cache_ram_state_and_ctag_cset$ADDRB;
  wire cache_ram_state_and_ctag_cset$ENA,
       cache_ram_state_and_ctag_cset$ENB,
       cache_ram_state_and_ctag_cset$WEA,
       cache_ram_state_and_ctag_cset$WEB;

  // ports of submodule cache_ram_word128_set
  reg [129 : 0] cache_ram_word128_set$DIB;
  reg [7 : 0] cache_ram_word128_set$ADDRB;
  wire [129 : 0] cache_ram_word128_set$DIA, cache_ram_word128_set$DOB;
  wire [7 : 0] cache_ram_word128_set$ADDRA;
  wire cache_ram_word128_set$ENA,
       cache_ram_word128_set$ENB,
       cache_ram_word128_set$WEA,
       cache_ram_word128_set$WEB;

  // ports of submodule cache_soc_map
  wire [63 : 0] cache_soc_map$m_is_IO_addr_addr,
		cache_soc_map$m_is_mem_addr_addr,
		cache_soc_map$m_is_near_mem_IO_addr_addr;

  // rule scheduling signals
  wire CAN_FIRE_RL_cache_master_xactor_do_clear,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop,
       CAN_FIRE_RL_cache_rl_ST_AMO_response,
       CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop,
       CAN_FIRE_RL_cache_rl_discard_write_rsp,
       CAN_FIRE_RL_cache_rl_drive_exception_rsp,
       CAN_FIRE_RL_cache_rl_io_AMO_SC_req,
       CAN_FIRE_RL_cache_rl_io_AMO_op_req,
       CAN_FIRE_RL_cache_rl_io_AMO_read_rsp,
       CAN_FIRE_RL_cache_rl_io_read_req,
       CAN_FIRE_RL_cache_rl_io_read_rsp,
       CAN_FIRE_RL_cache_rl_io_write_req,
       CAN_FIRE_RL_cache_rl_maintain_io_read_rsp,
       CAN_FIRE_RL_cache_rl_probe_and_immed_rsp,
       CAN_FIRE_RL_cache_rl_rereq,
       CAN_FIRE_RL_cache_rl_reset,
       CAN_FIRE_RL_cache_rl_shift_sb_to_load_delay,
       CAN_FIRE_RL_cache_rl_start_cache_refill,
       CAN_FIRE_RL_cache_rl_start_reset,
       CAN_FIRE_commit,
       CAN_FIRE_mem_master_ar_arready,
       CAN_FIRE_mem_master_aw_awready,
       CAN_FIRE_mem_master_b_bflit,
       CAN_FIRE_mem_master_r_rflit,
       CAN_FIRE_mem_master_w_wready,
       CAN_FIRE_req,
       CAN_FIRE_server_flush_request_put,
       CAN_FIRE_server_flush_response_get,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_tlb_flush,
       WILL_FIRE_RL_cache_master_xactor_do_clear,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop,
       WILL_FIRE_RL_cache_rl_ST_AMO_response,
       WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop,
       WILL_FIRE_RL_cache_rl_discard_write_rsp,
       WILL_FIRE_RL_cache_rl_drive_exception_rsp,
       WILL_FIRE_RL_cache_rl_io_AMO_SC_req,
       WILL_FIRE_RL_cache_rl_io_AMO_op_req,
       WILL_FIRE_RL_cache_rl_io_AMO_read_rsp,
       WILL_FIRE_RL_cache_rl_io_read_req,
       WILL_FIRE_RL_cache_rl_io_read_rsp,
       WILL_FIRE_RL_cache_rl_io_write_req,
       WILL_FIRE_RL_cache_rl_maintain_io_read_rsp,
       WILL_FIRE_RL_cache_rl_probe_and_immed_rsp,
       WILL_FIRE_RL_cache_rl_rereq,
       WILL_FIRE_RL_cache_rl_reset,
       WILL_FIRE_RL_cache_rl_shift_sb_to_load_delay,
       WILL_FIRE_RL_cache_rl_start_cache_refill,
       WILL_FIRE_RL_cache_rl_start_reset,
       WILL_FIRE_commit,
       WILL_FIRE_mem_master_ar_arready,
       WILL_FIRE_mem_master_aw_awready,
       WILL_FIRE_mem_master_b_bflit,
       WILL_FIRE_mem_master_r_rflit,
       WILL_FIRE_mem_master_w_wready,
       WILL_FIRE_req,
       WILL_FIRE_server_flush_request_put,
       WILL_FIRE_server_flush_response_get,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_tlb_flush;

  // inputs to muxes for submodule ports
  wire [147 : 0] MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_1,
		 MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_2,
		 MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_3;
  wire [129 : 0] MUX_cache_ram_word128_set$a_put_3__VAL_1,
		 MUX_cache_ram_word128_set$a_put_3__VAL_2;
  wire [128 : 0] MUX_cache_dw_output_ld_val$wset_1__VAL_1,
		 MUX_cache_dw_output_ld_val$wset_1__VAL_2,
		 MUX_cache_dw_output_ld_val$wset_1__VAL_3,
		 MUX_cache_dw_output_st_amo_val$wset_1__VAL_1,
		 MUX_cache_rg_ld_val$write_1__VAL_2,
		 MUX_cache_rg_st_amo_val$write_1__VAL_2;
  wire [98 : 0] MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_1,
		MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_2,
		MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_1,
		MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_2;
  wire [22 : 0] MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1;
  wire [7 : 0] MUX_cache_ram_word128_set$b_put_2__VAL_2,
	       MUX_cache_ram_word128_set$b_put_2__VAL_4;
  wire [5 : 0] MUX_cache_rg_cset_in_cache$write_1__VAL_1,
	       MUX_cache_rg_exc_code$write_1__VAL_1;
  wire [3 : 0] MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1,
	       MUX_cache_rg_state$write_1__VAL_1,
	       MUX_cache_rg_state$write_1__VAL_12,
	       MUX_cache_rg_state$write_1__VAL_5,
	       MUX_cache_rg_state$write_1__VAL_7;
  wire MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1,
       MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2,
       MUX_cache_dw_output_ld_val$wset_1__SEL_1,
       MUX_cache_dw_output_ld_val$wset_1__SEL_3,
       MUX_cache_dw_output_ld_val$wset_1__SEL_4,
       MUX_cache_master_xactor_clearing$write_1__SEL_1,
       MUX_cache_master_xactor_shim_arff_rv$port0__write_1__SEL_1,
       MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1,
       MUX_cache_ram_word128_set$a_put_1__SEL_1,
       MUX_cache_ram_word128_set$b_put_1__SEL_2,
       MUX_cache_rg_error_during_refill$write_1__SEL_1,
       MUX_cache_rg_exc_code$write_1__SEL_1,
       MUX_cache_rg_exc_code$write_1__SEL_2,
       MUX_cache_rg_exc_code$write_1__SEL_3,
       MUX_cache_rg_ld_val$write_1__SEL_2,
       MUX_cache_rg_lrsc_valid$write_1__SEL_2,
       MUX_cache_rg_state$write_1__SEL_12,
       MUX_cache_rg_state$write_1__SEL_13,
       MUX_cache_rg_state$write_1__SEL_7;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h5574;
  reg [31 : 0] v__h5677;
  reg [31 : 0] v__h6133;
  reg [31 : 0] v__h21474;
  reg [31 : 0] v__h27708;
  reg [31 : 0] v__h26947;
  reg [31 : 0] v__h32878;
  reg [31 : 0] v__h38241;
  reg [31 : 0] v__h38330;
  reg [31 : 0] v__h38860;
  reg [31 : 0] v__h39159;
  reg [31 : 0] v__h39282;
  reg [31 : 0] v__h34286;
  reg [31 : 0] v__h34540;
  reg [31 : 0] v__h36569;
  reg [31 : 0] v__h38014;
  reg [31 : 0] v__h38129;
  reg [31 : 0] v__h39596;
  reg [31 : 0] v__h39791;
  reg [31 : 0] v__h42922;
  reg [31 : 0] v__h43176;
  reg [31 : 0] v__h39890;
  reg [31 : 0] v__h33329;
  reg [31 : 0] v__h36199;
  reg [31 : 0] v__h43901;
  reg [31 : 0] v__h43862;
  reg [31 : 0] v__h5199;
  reg [31 : 0] v__h44296;
  reg [31 : 0] v__h5193;
  reg [31 : 0] v__h5568;
  reg [31 : 0] v__h5671;
  reg [31 : 0] v__h6127;
  reg [31 : 0] v__h21468;
  reg [31 : 0] v__h26941;
  reg [31 : 0] v__h27702;
  reg [31 : 0] v__h32872;
  reg [31 : 0] v__h33323;
  reg [31 : 0] v__h34280;
  reg [31 : 0] v__h34534;
  reg [31 : 0] v__h36193;
  reg [31 : 0] v__h36563;
  reg [31 : 0] v__h38008;
  reg [31 : 0] v__h38123;
  reg [31 : 0] v__h38235;
  reg [31 : 0] v__h38324;
  reg [31 : 0] v__h38854;
  reg [31 : 0] v__h39153;
  reg [31 : 0] v__h39276;
  reg [31 : 0] v__h39590;
  reg [31 : 0] v__h39785;
  reg [31 : 0] v__h39884;
  reg [31 : 0] v__h42916;
  reg [31 : 0] v__h43170;
  reg [31 : 0] v__h43856;
  reg [31 : 0] v__h43895;
  reg [31 : 0] v__h44290;
  // synopsys translate_on

  // remaining internal signals
  reg [127 : 0] CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q31,
		CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q32,
		CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q33,
		CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q36,
		CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q37,
		IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1023,
		IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1063,
		IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1083,
		IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1195,
		IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1219,
		IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1231,
		IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d367,
		IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d407,
		IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d427,
		IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d605,
		IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d622,
		IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d631,
		IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d715,
		IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d732,
		IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d741,
		_theResult___fst__h29526,
		_theResult___fst__h36807,
		_theResult___fst__h42492,
		_theResult___fst__h7426,
		mem_req_wr_data_wdata__h27390,
		mem_req_wr_data_wdata__h32593,
		mem_req_wr_data_wdata__h38573,
		mem_req_wr_data_wdata__h40110,
		x__h20331,
		x__h22733,
		x__h25904,
		x__h28230,
		x__h28520,
		x__h36881,
		x__h40321;
  reg [63 : 0] _theResult_____2__h28174, _theResult_____2__h40141;
  reg [15 : 0] mem_req_wr_data_wstrb__h32594, mem_req_wr_data_wstrb__h40111;
  reg [2 : 0] _theResult___fst_val__h40057, size_val__h39431;
  wire [146 : 0] cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q72;
  wire [129 : 0] cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262,
		 y__h7478;
  wire [127 : 0] IF_cache_rg_op_9_EQ_0_0_OR_cache_rg_op_9_EQ_2__ETC___d450,
		 IF_cache_rg_op_9_EQ_1_7_OR_cache_rg_op_9_EQ_2__ETC___d779,
		 _theResult___fst__h25828,
		 _theResult___snd_fst__h27399,
		 _theResult___snd_fst__h32602,
		 _theResult___snd_fst__h38582,
		 _theResult___snd_fst__h40119,
		 result__h20274,
		 result__h20342,
		 result__h20380,
		 result__h20413,
		 result__h20446,
		 result__h20479,
		 result__h20512,
		 result__h20545,
		 result__h20578,
		 result__h20611,
		 result__h20644,
		 result__h20677,
		 result__h20710,
		 result__h20743,
		 result__h20776,
		 result__h20809,
		 result__h20842,
		 result__h20897,
		 result__h20930,
		 result__h20963,
		 result__h20996,
		 result__h21029,
		 result__h21062,
		 result__h21095,
		 result__h21128,
		 result__h21175,
		 result__h21208,
		 result__h21241,
		 result__h21274,
		 result__h36809,
		 result__h36834,
		 result__h36892,
		 result__h36928,
		 result__h36961,
		 result__h36994,
		 result__h37027,
		 result__h37060,
		 result__h37093,
		 result__h37126,
		 result__h37159,
		 result__h37192,
		 result__h37225,
		 result__h37258,
		 result__h37291,
		 result__h37324,
		 result__h37357,
		 result__h37390,
		 result__h37445,
		 result__h37478,
		 result__h37511,
		 result__h37544,
		 result__h37577,
		 result__h37610,
		 result__h37643,
		 result__h37676,
		 result__h37723,
		 result__h37756,
		 result__h37789,
		 result__h37822,
		 result__h40403,
		 result__h41572,
		 result__h41604,
		 result__h41636,
		 result__h41668,
		 result__h41700,
		 result__h41732,
		 result__h41764,
		 result__h41796,
		 result__h41828,
		 result__h41860,
		 result__h41892,
		 result__h41924,
		 result__h41956,
		 result__h41988,
		 result__h42020,
		 result__h42074,
		 result__h42106,
		 result__h42138,
		 result__h42170,
		 result__h42202,
		 result__h42234,
		 result__h42266,
		 result__h42298,
		 result__h42344,
		 result__h42376,
		 result__h42408,
		 result__h42440,
		 result__h42494,
		 result__h42523,
		 result__h7428,
		 word128__h39977;
  wire [97 : 0] cache_master_xactor_shim_arff_rvport1__read_B_ETC__q73,
		cache_master_xactor_shim_awff_rvport1__read_B_ETC__q71;
  wire [63 : 0] IF_cache_rg_width_code_86_EQ_2_91_THEN_SEXT_IF_ETC___d1246,
		IF_cache_rg_width_code_86_EQ_2_91_THEN_SEXT_IF_ETC___d521,
		IF_cache_rg_width_code_86_EQ_2_91_THEN_SEXT_ca_ETC___d649,
		b__h28467,
		b__h29591,
		b__h40268,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q40,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q55,
		cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q17,
		cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q2,
		cline_fabric_addr__h33382,
		mem_req_wr_addr_awaddr__h32456,
		mem_req_wr_addr_awaddr__h39973,
		new_st_val__h28355,
		new_st_val__h28459,
		new_st_val__h29621,
		new_st_val__h29626,
		new_st_val__h29631,
		new_st_val__h29636,
		new_st_val__h29644,
		new_st_val__h29653,
		new_st_val__h29661,
		new_st_val__h40156,
		new_st_val__h40260,
		new_st_val__h42589,
		new_st_val__h42594,
		new_st_val__h42599,
		new_st_val__h42604,
		new_st_val__h42612,
		new_st_val__h42621,
		new_st_val__h42629,
		w1___1__h28422,
		w1___1__h40223,
		w1__h28166,
		w1__h40133,
		w2__h28168,
		x__h28350,
		x__h40151;
  wire [31 : 0] IF_cache_rg_addr_BITS_4_TO_0_EQ_0_THEN_1_ELSE_0__q39,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q43,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q50,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q58,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q65,
		cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q12,
		cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q20,
		cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q27,
		cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q5,
		cache_rg_st_amo_val_BITS_31_TO_0__q1,
		cline_addr__h33381,
		x0321_BITS_31_TO_0__q70,
		x8520_BITS_31_TO_0__q35,
		x__h28210;
  wire [21 : 0] pa_ctag__h7030;
  wire [15 : 0] cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q42,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q46,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q49,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q54,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q57,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q61,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q64,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q68,
		cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q11,
		cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q15,
		cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q19,
		cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q23,
		cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q26,
		cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q30,
		cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q4,
		cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q8,
		strobe128__h32521,
		strobe128__h32524,
		strobe128__h32527,
		strobe128__h32530,
		strobe128__h40038,
		strobe128__h40041,
		strobe128__h40044,
		strobe128__h40047;
  wire [7 : 0] cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q41,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q44,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q45,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q47,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q48,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q51,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q52,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q53,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q56,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q59,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q60,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q62,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q63,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q66,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q67,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q69,
	       cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q10,
	       cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q13,
	       cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q14,
	       cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q16,
	       cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q18,
	       cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q21,
	       cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q22,
	       cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q24,
	       cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q25,
	       cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q28,
	       cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q29,
	       cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q3,
	       cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q34,
	       cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q6,
	       cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q7,
	       cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q9;
  wire [6 : 0] shift_bits__h32463, shift_bits__h39980;
  wire [3 : 0] IF_cache_rg_op_9_EQ_0_0_OR_cache_rg_op_9_EQ_2__ETC___d160,
	       IF_cache_rg_op_9_EQ_1_7_OR_cache_rg_op_9_EQ_2__ETC___d159,
	       b__h33283;
  wire [2 : 0] IF_cache_rg_op_9_EQ_1_7_OR_cache_rg_op_9_EQ_2__ETC___d792;
  wire [1 : 0] _0__q38,
	       cache_ram_word128_set_b_read__49_BITS_129_TO_1_ETC___d540,
	       mem_req_wr_data_wuser__h27393,
	       x__h22615,
	       x__h28138,
	       y__h28191;
  wire IF_cache_rg_op_9_EQ_1_7_OR_cache_rg_op_9_EQ_2__ETC___d128,
       IF_cache_rg_width_code_86_EQ_3_95_THEN_IF_cach_ETC___d270,
       NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57,
       NOT_cache_cfg_verbosity_read__5_ULE_2_79___d880,
       NOT_cache_master_xactor_clearing_0_5_AND_cache_ETC___d1141,
       NOT_cache_ram_state_and_ctag_cset_b_read__18_B_ETC___d127,
       NOT_cache_ram_state_and_ctag_cset_b_read__18_B_ETC___d167,
       NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d155,
       NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d764,
       NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d813,
       NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d821,
       NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d826,
       NOT_cache_rg_op_9_EQ_1_7_73_AND_NOT_cache_rg_o_ETC___d176,
       NOT_cache_rg_op_9_EQ_1_7_73_AND_NOT_cache_rg_o_ETC___d526,
       NOT_cache_rg_op_9_EQ_1_7_73_AND_NOT_cache_rg_o_ETC___d758,
       NOT_cache_rg_op_9_EQ_1_7_73_AND_NOT_cache_rg_o_ETC___d836,
       NOT_cache_rg_op_9_EQ_1_7_73_AND_NOT_cache_rg_o_ETC___d839,
       NOT_cache_rg_op_9_EQ_1_7_73_AND_NOT_cache_rg_o_ETC___d844,
       NOT_cache_rg_op_9_EQ_1_7_73_AND_NOT_cache_rg_o_ETC___d850,
       NOT_cache_rg_op_9_EQ_2_1_33_OR_NOT_cache_rg_am_ETC___d524,
       NOT_cache_rg_op_9_EQ_2_1_33_OR_NOT_cache_rg_am_ETC___d756,
       NOT_cache_rg_op_9_EQ_2_1_33_OR_NOT_cache_rg_am_ETC___d811,
       NOT_cache_rg_op_9_EQ_2_1_33_OR_NOT_cache_rg_am_ETC___d815,
       NOT_cache_rg_op_9_EQ_2_1_33_OR_NOT_cache_rg_am_ETC___d819,
       NOT_cache_rg_op_9_EQ_2_1_33_OR_NOT_cache_rg_am_ETC___d824,
       NOT_req_width_code_EQ_0_336_337_AND_NOT_req_wi_ETC___d1356,
       cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d482,
       cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d529,
       cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d841,
       cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d846,
       cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d854,
       cache_ram_state_and_ctag_cset_b_read__18_BITS__ETC___d124,
       cache_ram_state_and_ctag_cset_b_read__18_BIT_2_ETC___d168,
       cache_rg_addr_04_EQ_cache_rg_lrsc_pa_03___d165,
       cache_rg_amo_funct7_2_BITS_6_TO_2_3_EQ_0b10_4__ETC___d476,
       cache_rg_lrsc_pa_03_EQ_cache_rg_addr_04___d105,
       cache_rg_op_9_EQ_0_0_OR_cache_rg_op_9_EQ_2_1_A_ETC___d150,
       cache_rg_op_9_EQ_0_0_OR_cache_rg_op_9_EQ_2_1_A_ETC___d179,
       cache_rg_op_9_EQ_0_0_OR_cache_rg_op_9_EQ_2_1_A_ETC___d181,
       cache_rg_op_9_EQ_0_0_OR_cache_rg_op_9_EQ_2_1_A_ETC___d184,
       cache_rg_op_9_EQ_0_0_OR_cache_rg_op_9_EQ_2_1_A_ETC___d272,
       cache_rg_op_9_EQ_0_0_OR_cache_rg_op_9_EQ_2_1_A_ETC___d459,
       cache_rg_op_9_EQ_0_0_OR_cache_rg_op_9_EQ_2_1_A_ETC___d472,
       cache_rg_op_9_EQ_1_7_OR_cache_rg_op_9_EQ_2_1_A_ETC___d177,
       cache_rg_op_9_EQ_1_7_OR_cache_rg_op_9_EQ_2_1_A_ETC___d527,
       cache_rg_op_9_EQ_1_7_OR_cache_rg_op_9_EQ_2_1_A_ETC___d759,
       cache_rg_op_9_EQ_1_7_OR_cache_rg_op_9_EQ_2_1_A_ETC___d762,
       cache_rg_op_9_EQ_2_1_AND_cache_rg_amo_funct7_2_ETC___d117,
       cache_rg_op_9_EQ_2_1_AND_cache_rg_amo_funct7_2_ETC___d832,
       cache_rg_state_9_EQ_12_24_AND_cache_rg_op_9_EQ_ETC___d926,
       cache_rg_state_9_EQ_3_31_AND_NOT_cache_rg_op_9_ETC___d140,
       lrsc_result__h21864,
       req_width_code_EQ_0_336_OR_req_width_code_EQ_1_ETC___d1372,
       req_width_code_EQ_0_336_OR_req_width_code_EQ_1_ETC___d1377;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = cache_f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = cache_f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get =
	     !cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get =
	     !cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // action method req
  assign CAN_FIRE_req = 1'd1 ;
  assign WILL_FIRE_req = EN_req ;

  // action method commit
  assign CAN_FIRE_commit = 1'd1 ;
  assign WILL_FIRE_commit = EN_commit ;

  // value method valid
  assign valid = cache_dw_valid$whas ;

  // value method addr
  assign addr = cache_rg_addr ;

  // value method word128_fst
  assign word128_fst = cache_dw_output_ld_val$wget[128] ;

  // value method word128_snd
  assign word128_snd = cache_dw_output_ld_val$wget[127:0] ;

  // value method st_amo_val_fst
  assign st_amo_val_fst = cache_dw_output_st_amo_val$wget[128] ;

  // value method st_amo_val_snd
  assign st_amo_val_snd = cache_dw_output_st_amo_val$wget[127:0] ;

  // value method exc
  assign exc = cache_rg_state == 4'd4 ;

  // value method exc_code
  assign exc_code = cache_rg_exc_code ;

  // action method server_flush_request_put
  assign RDY_server_flush_request_put = cache_f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_flush_request_put = cache_f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_flush_request_put = EN_server_flush_request_put ;

  // action method server_flush_response_get
  assign RDY_server_flush_response_get =
	     cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_flush_response_get =
	     cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_flush_response_get = EN_server_flush_response_get ;

  // action method tlb_flush
  assign RDY_tlb_flush = 1'd1 ;
  assign CAN_FIRE_tlb_flush = 1'd1 ;
  assign WILL_FIRE_tlb_flush = EN_tlb_flush ;

  // value method mem_master_aw_awid
  assign mem_master_awid =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q71[97:93] ;

  // value method mem_master_aw_awaddr
  assign mem_master_awaddr =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q71[92:29] ;

  // value method mem_master_aw_awlen
  assign mem_master_awlen =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q71[28:21] ;

  // value method mem_master_aw_awsize
  assign mem_master_awsize =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q71[20:18] ;

  // value method mem_master_aw_awburst
  assign mem_master_awburst =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q71[17:16] ;

  // value method mem_master_aw_awlock
  assign mem_master_awlock =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q71[15] ;

  // value method mem_master_aw_awcache
  assign mem_master_awcache =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q71[14:11] ;

  // value method mem_master_aw_awprot
  assign mem_master_awprot =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q71[10:8] ;

  // value method mem_master_aw_awqos
  assign mem_master_awqos =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q71[7:4] ;

  // value method mem_master_aw_awregion
  assign mem_master_awregion =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q71[3:0] ;

  // value method mem_master_aw_awvalid
  assign mem_master_awvalid =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek ;

  // action method mem_master_aw_awready
  assign CAN_FIRE_mem_master_aw_awready = 1'd1 ;
  assign WILL_FIRE_mem_master_aw_awready = 1'd1 ;

  // value method mem_master_w_wdata
  assign mem_master_wdata =
	     cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q72[146:19] ;

  // value method mem_master_w_wstrb
  assign mem_master_wstrb =
	     cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q72[18:3] ;

  // value method mem_master_w_wlast
  assign mem_master_wlast =
	     cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q72[2] ;

  // value method mem_master_w_wuser
  assign mem_master_wuser =
	     cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q72[1:0] ;

  // value method mem_master_w_wvalid
  assign mem_master_wvalid =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek ;

  // action method mem_master_w_wready
  assign CAN_FIRE_mem_master_w_wready = 1'd1 ;
  assign WILL_FIRE_mem_master_w_wready = 1'd1 ;

  // action method mem_master_b_bflit
  assign CAN_FIRE_mem_master_b_bflit = 1'd1 ;
  assign WILL_FIRE_mem_master_b_bflit = mem_master_bvalid ;

  // value method mem_master_b_bready
  assign mem_master_bready = !cache_master_xactor_shim_bff_rv[7] ;

  // value method mem_master_ar_arid
  assign mem_master_arid =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q73[97:93] ;

  // value method mem_master_ar_araddr
  assign mem_master_araddr =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q73[92:29] ;

  // value method mem_master_ar_arlen
  assign mem_master_arlen =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q73[28:21] ;

  // value method mem_master_ar_arsize
  assign mem_master_arsize =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q73[20:18] ;

  // value method mem_master_ar_arburst
  assign mem_master_arburst =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q73[17:16] ;

  // value method mem_master_ar_arlock
  assign mem_master_arlock =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q73[15] ;

  // value method mem_master_ar_arcache
  assign mem_master_arcache =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q73[14:11] ;

  // value method mem_master_ar_arprot
  assign mem_master_arprot =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q73[10:8] ;

  // value method mem_master_ar_arqos
  assign mem_master_arqos =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q73[7:4] ;

  // value method mem_master_ar_arregion
  assign mem_master_arregion =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q73[3:0] ;

  // value method mem_master_ar_arvalid
  assign mem_master_arvalid =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek ;

  // action method mem_master_ar_arready
  assign CAN_FIRE_mem_master_ar_arready = 1'd1 ;
  assign WILL_FIRE_mem_master_ar_arready = 1'd1 ;

  // action method mem_master_r_rflit
  assign CAN_FIRE_mem_master_r_rflit = 1'd1 ;
  assign WILL_FIRE_mem_master_r_rflit = mem_master_rvalid ;

  // value method mem_master_r_rready
  assign mem_master_rready = !cache_master_xactor_shim_rff_rv[138] ;

  // submodule cache_f_reset_reqs
  FIFO2 #(.width(32'd1), .guarded(32'd1)) cache_f_reset_reqs(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(cache_f_reset_reqs$D_IN),
							     .ENQ(cache_f_reset_reqs$ENQ),
							     .DEQ(cache_f_reset_reqs$DEQ),
							     .CLR(cache_f_reset_reqs$CLR),
							     .D_OUT(cache_f_reset_reqs$D_OUT),
							     .FULL_N(cache_f_reset_reqs$FULL_N),
							     .EMPTY_N(cache_f_reset_reqs$EMPTY_N));

  // submodule cache_f_reset_rsps
  FIFO2 #(.width(32'd1), .guarded(32'd1)) cache_f_reset_rsps(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(cache_f_reset_rsps$D_IN),
							     .ENQ(cache_f_reset_rsps$ENQ),
							     .DEQ(cache_f_reset_rsps$DEQ),
							     .CLR(cache_f_reset_rsps$CLR),
							     .D_OUT(cache_f_reset_rsps$D_OUT),
							     .FULL_N(cache_f_reset_rsps$FULL_N),
							     .EMPTY_N(cache_f_reset_rsps$EMPTY_N));

  // submodule cache_ram_state_and_ctag_cset
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd23),
	  .MEMSIZE(7'd64)) cache_ram_state_and_ctag_cset(.CLKA(CLK),
							 .CLKB(CLK),
							 .ADDRA(cache_ram_state_and_ctag_cset$ADDRA),
							 .ADDRB(cache_ram_state_and_ctag_cset$ADDRB),
							 .DIA(cache_ram_state_and_ctag_cset$DIA),
							 .DIB(cache_ram_state_and_ctag_cset$DIB),
							 .WEA(cache_ram_state_and_ctag_cset$WEA),
							 .WEB(cache_ram_state_and_ctag_cset$WEB),
							 .ENA(cache_ram_state_and_ctag_cset$ENA),
							 .ENB(cache_ram_state_and_ctag_cset$ENB),
							 .DOA(),
							 .DOB(cache_ram_state_and_ctag_cset$DOB));

  // submodule cache_ram_word128_set
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd8),
	  .DATA_WIDTH(32'd130),
	  .MEMSIZE(9'd256)) cache_ram_word128_set(.CLKA(CLK),
						  .CLKB(CLK),
						  .ADDRA(cache_ram_word128_set$ADDRA),
						  .ADDRB(cache_ram_word128_set$ADDRB),
						  .DIA(cache_ram_word128_set$DIA),
						  .DIB(cache_ram_word128_set$DIB),
						  .WEA(cache_ram_word128_set$WEA),
						  .WEB(cache_ram_word128_set$WEB),
						  .ENA(cache_ram_word128_set$ENA),
						  .ENB(cache_ram_word128_set$ENB),
						  .DOA(),
						  .DOB(cache_ram_word128_set$DOB));

  // submodule cache_soc_map
  mkSoC_Map cache_soc_map(.CLK(CLK),
			  .RST_N(RST_N),
			  .m_is_IO_addr_addr(cache_soc_map$m_is_IO_addr_addr),
			  .m_is_mem_addr_addr(cache_soc_map$m_is_mem_addr_addr),
			  .m_is_near_mem_IO_addr_addr(cache_soc_map$m_is_near_mem_IO_addr_addr),
			  .m_plic_addr_range(),
			  .m_near_mem_io_addr_range(),
			  .m_flash_mem_addr_range(),
			  .m_ethernet_0_addr_range(),
			  .m_dma_0_addr_range(),
			  .m_uart16550_0_addr_range(),
			  .m_gpio_0_addr_range(),
			  .m_boot_rom_addr_range(),
			  .m_ddr4_0_uncached_addr_range(),
			  .m_ddr4_0_cached_addr_range(),
			  .m_is_mem_addr(),
			  .m_is_IO_addr(),
			  .m_is_near_mem_IO_addr(),
			  .m_pc_reset_value(),
			  .m_pcc_reset_value(),
			  .m_mtcc_reset_value(),
			  .m_mtvec_reset_value(),
			  .m_nmivec_reset_value());

  // rule RL_cache_rl_reset
  assign CAN_FIRE_RL_cache_rl_reset =
	     (cache_rg_cset_in_cache != 6'd63 ||
	      cache_f_reset_reqs$EMPTY_N && cache_f_reset_rsps$FULL_N) &&
	     cache_rg_state == 4'd1 ;
  assign WILL_FIRE_RL_cache_rl_reset = CAN_FIRE_RL_cache_rl_reset ;

  // rule RL_cache_rl_shift_sb_to_load_delay
  assign CAN_FIRE_RL_cache_rl_shift_sb_to_load_delay = 1'd1 ;
  assign WILL_FIRE_RL_cache_rl_shift_sb_to_load_delay = 1'd1 ;

  // rule RL_cache_rl_probe_and_immed_rsp
  assign CAN_FIRE_RL_cache_rl_probe_and_immed_rsp =
	     (!EN_commit || cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010 ||
	      IF_cache_rg_op_9_EQ_1_7_OR_cache_rg_op_9_EQ_2__ETC___d128) &&
	     cache_rg_state_9_EQ_3_31_AND_NOT_cache_rg_op_9_ETC___d140 ;
  assign WILL_FIRE_RL_cache_rl_probe_and_immed_rsp =
	     CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     !WILL_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_rereq
  assign CAN_FIRE_RL_cache_rl_rereq = cache_rg_state == 4'd10 ;
  assign WILL_FIRE_RL_cache_rl_rereq =
	     CAN_FIRE_RL_cache_rl_rereq &&
	     !WILL_FIRE_RL_cache_rl_start_reset &&
	     !EN_req ;

  // rule RL_cache_rl_ST_AMO_response
  assign CAN_FIRE_RL_cache_rl_ST_AMO_response = cache_rg_state == 4'd11 ;
  assign WILL_FIRE_RL_cache_rl_ST_AMO_response =
	     CAN_FIRE_RL_cache_rl_ST_AMO_response ;

  // rule RL_cache_rl_maintain_io_read_rsp
  assign CAN_FIRE_RL_cache_rl_maintain_io_read_rsp = cache_rg_state == 4'd14 ;
  assign WILL_FIRE_RL_cache_rl_maintain_io_read_rsp =
	     CAN_FIRE_RL_cache_rl_maintain_io_read_rsp ;

  // rule RL_cache_rl_io_write_req
  assign CAN_FIRE_RL_cache_rl_io_write_req =
	     !cache_master_xactor_clearing &&
	     !cache_master_xactor_shim_awff_rv[98] &&
	     !cache_master_xactor_shim_wff_rv[147] &&
	     cache_rg_state == 4'd12 &&
	     cache_rg_op == 2'd1 ;
  assign WILL_FIRE_RL_cache_rl_io_write_req =
	     CAN_FIRE_RL_cache_rl_io_write_req &&
	     !WILL_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_io_AMO_SC_req
  assign CAN_FIRE_RL_cache_rl_io_AMO_SC_req =
	     cache_rg_state == 4'd12 && cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00011 ;
  assign WILL_FIRE_RL_cache_rl_io_AMO_SC_req =
	     CAN_FIRE_RL_cache_rl_io_AMO_SC_req &&
	     !WILL_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_io_AMO_op_req
  assign CAN_FIRE_RL_cache_rl_io_AMO_op_req =
	     !cache_master_xactor_clearing &&
	     !cache_master_xactor_shim_arff_rv[98] &&
	     cache_rg_state == 4'd12 &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] != 5'b00010 &&
	     cache_rg_amo_funct7[6:2] != 5'b00011 ;
  assign WILL_FIRE_RL_cache_rl_io_AMO_op_req =
	     CAN_FIRE_RL_cache_rl_io_AMO_op_req &&
	     !WILL_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_drive_exception_rsp
  assign CAN_FIRE_RL_cache_rl_drive_exception_rsp = cache_rg_state == 4'd4 ;
  assign WILL_FIRE_RL_cache_rl_drive_exception_rsp = cache_rg_state == 4'd4 ;

  // rule RL_cache_master_xactor_ug_master_u_b_warnDoPut
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut =
	     cache_master_xactor_ug_master_u_b_putWire$whas &&
	     cache_master_xactor_shim_bff_rv[7] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut ;

  // rule RL_cache_master_xactor_ug_master_u_b_doPut
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut =
	     !cache_master_xactor_shim_bff_rv[7] &&
	     cache_master_xactor_ug_master_u_b_putWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut ;

  // rule RL_cache_master_xactor_ug_master_u_r_warnDoPut
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut =
	     cache_master_xactor_ug_master_u_r_putWire$whas &&
	     cache_master_xactor_shim_rff_rv[138] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut ;

  // rule RL_cache_master_xactor_ug_master_u_r_doPut
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut =
	     !cache_master_xactor_shim_rff_rv[138] &&
	     cache_master_xactor_ug_master_u_r_putWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut ;

  // rule RL_cache_rl_cache_refill_rsps_loop
  assign CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop =
	     !cache_master_xactor_clearing &&
	     cache_master_xactor_shim_rff_rv$port1__read[138] &&
	     cache_rg_state == 4'd9 ;
  assign WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop =
	     CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     !WILL_FIRE_RL_cache_rl_start_reset &&
	     !EN_req ;

  // rule RL_cache_rl_io_read_rsp
  assign CAN_FIRE_RL_cache_rl_io_read_rsp =
	     !cache_master_xactor_clearing &&
	     cache_master_xactor_shim_rff_rv$port1__read[138] &&
	     cache_rg_state == 4'd13 ;
  assign WILL_FIRE_RL_cache_rl_io_read_rsp =
	     CAN_FIRE_RL_cache_rl_io_read_rsp &&
	     !WILL_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_io_AMO_read_rsp
  assign CAN_FIRE_RL_cache_rl_io_AMO_read_rsp =
	     NOT_cache_master_xactor_clearing_0_5_AND_cache_ETC___d1141 &&
	     cache_rg_state == 4'd15 ;
  assign WILL_FIRE_RL_cache_rl_io_AMO_read_rsp =
	     CAN_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     !WILL_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_start_cache_refill
  assign CAN_FIRE_RL_cache_rl_start_cache_refill =
	     !cache_master_xactor_clearing &&
	     !cache_master_xactor_shim_arff_rv[98] &&
	     cache_rg_state == 4'd8 &&
	     b__h33283 == 4'd0 ;
  assign WILL_FIRE_RL_cache_rl_start_cache_refill =
	     CAN_FIRE_RL_cache_rl_start_cache_refill &&
	     !WILL_FIRE_RL_cache_rl_start_reset &&
	     !EN_req ;

  // rule RL_cache_rl_io_read_req
  assign CAN_FIRE_RL_cache_rl_io_read_req =
	     !cache_master_xactor_clearing &&
	     !cache_master_xactor_shim_arff_rv[98] &&
	     cache_rg_state_9_EQ_12_24_AND_cache_rg_op_9_EQ_ETC___d926 ;
  assign WILL_FIRE_RL_cache_rl_io_read_req =
	     CAN_FIRE_RL_cache_rl_io_read_req &&
	     !WILL_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_discard_write_rsp
  assign CAN_FIRE_RL_cache_rl_discard_write_rsp =
	     !cache_master_xactor_clearing &&
	     cache_master_xactor_shim_bff_rv$port1__read[7] &&
	     b__h33283 != 4'd0 ;
  assign WILL_FIRE_RL_cache_rl_discard_write_rsp =
	     CAN_FIRE_RL_cache_rl_discard_write_rsp ;

  // rule RL_cache_rl_start_reset
  assign CAN_FIRE_RL_cache_rl_start_reset =
	     cache_f_reset_reqs$EMPTY_N &&
	     (cache_f_reset_reqs$D_OUT || !cache_master_xactor_clearing) &&
	     cache_rg_state != 4'd1 ;
  assign WILL_FIRE_RL_cache_rl_start_reset =
	     CAN_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_master_xactor_ug_master_u_aw_setPeek
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek =
	     cache_master_xactor_shim_awff_rv$port1__read[98] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek ;

  // rule RL_cache_master_xactor_ug_master_u_aw_warnDoDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop =
	     cache_master_xactor_ug_master_u_aw_dropWire$whas &&
	     !cache_master_xactor_shim_awff_rv$port1__read[98] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop ;

  // rule RL_cache_master_xactor_ug_master_u_aw_doDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop =
	     cache_master_xactor_shim_awff_rv$port1__read[98] &&
	     cache_master_xactor_ug_master_u_aw_dropWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop ;

  // rule RL_cache_master_xactor_ug_master_u_w_setPeek
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek =
	     cache_master_xactor_shim_wff_rv$port1__read[147] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek ;

  // rule RL_cache_master_xactor_ug_master_u_w_warnDoDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop =
	     cache_master_xactor_ug_master_u_w_dropWire$whas &&
	     !cache_master_xactor_shim_wff_rv$port1__read[147] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop ;

  // rule RL_cache_master_xactor_ug_master_u_w_doDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop =
	     cache_master_xactor_shim_wff_rv$port1__read[147] &&
	     cache_master_xactor_ug_master_u_w_dropWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop ;

  // rule RL_cache_master_xactor_ug_master_u_ar_setPeek
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek =
	     cache_master_xactor_shim_arff_rv$port1__read[98] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek ;

  // rule RL_cache_master_xactor_ug_master_u_ar_warnDoDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop =
	     cache_master_xactor_ug_master_u_ar_dropWire$whas &&
	     !cache_master_xactor_shim_arff_rv$port1__read[98] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop ;

  // rule RL_cache_master_xactor_ug_master_u_ar_doDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop =
	     cache_master_xactor_shim_arff_rv$port1__read[98] &&
	     cache_master_xactor_ug_master_u_ar_dropWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop ;

  // rule RL_cache_master_xactor_do_clear
  assign CAN_FIRE_RL_cache_master_xactor_do_clear =
	     cache_master_xactor_clearing ;
  assign WILL_FIRE_RL_cache_master_xactor_do_clear =
	     cache_master_xactor_clearing &&
	     !WILL_FIRE_RL_cache_rl_start_reset ;

  // inputs to muxes for submodule ports
  assign MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 ;
  assign MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d764 ;
  assign MUX_cache_dw_output_ld_val$wset_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 ;
  assign MUX_cache_dw_output_ld_val$wset_1__SEL_3 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_rg_op_9_EQ_0_0_OR_cache_rg_op_9_EQ_2_1_A_ETC___d184 ;
  assign MUX_cache_dw_output_ld_val$wset_1__SEL_4 =
	     WILL_FIRE_RL_cache_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_ST_AMO_response ;
  assign MUX_cache_master_xactor_clearing$write_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_start_reset && !cache_f_reset_reqs$D_OUT ;
  assign MUX_cache_master_xactor_shim_arff_rv$port0__write_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_io_AMO_op_req ||
	     WILL_FIRE_RL_cache_rl_io_read_req ;
  assign MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 =
	     EN_req &&
	     (req_width_code_EQ_0_336_OR_req_width_code_EQ_1_ETC___d1372 ||
	      req_width_code == 3'b100 && req_addr[3:0] == 4'b0) ;
  assign MUX_cache_ram_word128_set$a_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 ;
  assign MUX_cache_ram_word128_set$b_put_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_word128_set_in_cache[1:0] != 2'd3 ;
  assign MUX_cache_rg_error_during_refill$write_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 ;
  assign MUX_cache_rg_exc_code$write_1__SEL_1 =
	     EN_req &&
	     NOT_req_width_code_EQ_0_336_337_AND_NOT_req_wi_ETC___d1356 &&
	     (req_width_code != 3'b100 || req_addr[3:0] != 4'b0) ;
  assign MUX_cache_rg_exc_code$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 ;
  assign MUX_cache_rg_exc_code$write_1__SEL_3 =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 ;
  assign MUX_cache_rg_ld_val$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d482 ;
  assign MUX_cache_rg_lrsc_valid$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_rg_op_9_EQ_0_0_OR_cache_rg_op_9_EQ_2_1_A_ETC___d179 ;
  assign MUX_cache_rg_state$write_1__SEL_7 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_word128_set_in_cache[1:0] == 2'd3 ;
  assign MUX_cache_rg_state$write_1__SEL_12 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     (!EN_commit ||
	      cache_rg_op_9_EQ_0_0_OR_cache_rg_op_9_EQ_2_1_A_ETC___d150 ||
	      NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d155) ;
  assign MUX_cache_rg_state$write_1__SEL_13 =
	     WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 ;
  assign MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1 =
	     cache_ctr_wr_rsps_pending_crg + 4'd1 ;
  assign MUX_cache_dw_output_ld_val$wset_1__VAL_1 = { 1'd0, x__h36881 } ;
  assign MUX_cache_dw_output_ld_val$wset_1__VAL_2 =
	     { 65'd0,
	       IF_cache_rg_width_code_86_EQ_2_91_THEN_SEXT_IF_ETC___d1246 } ;
  assign MUX_cache_dw_output_ld_val$wset_1__VAL_3 =
	     { cache_rg_op_9_EQ_0_0_OR_cache_rg_op_9_EQ_2_1_A_ETC___d272,
	       IF_cache_rg_op_9_EQ_0_0_OR_cache_rg_op_9_EQ_2__ETC___d450 } ;
  assign MUX_cache_dw_output_st_amo_val$wset_1__VAL_1 =
	     { _0__q38[IF_cache_rg_addr_BITS_4_TO_0_EQ_0_THEN_1_ELSE_0__q39[0]],
	       128'd0 } ;
  assign MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_1 =
	     { 6'd32,
	       mem_req_wr_addr_awaddr__h39973,
	       8'd0,
	       size_val__h39431,
	       18'd65536 } ;
  assign MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_2 =
	     { 6'd32, cline_fabric_addr__h33382, 29'd7405568 } ;
  assign MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_1 =
	     { 6'd32,
	       mem_req_wr_addr_awaddr__h39973,
	       8'd0,
	       _theResult___fst_val__h40057,
	       18'd65536 } ;
  assign MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_2 =
	     { 6'd32,
	       mem_req_wr_addr_awaddr__h32456,
	       8'd0,
	       _theResult___fst_val__h40057,
	       18'd65536 } ;
  assign MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_1 =
	     { 1'd1,
	       mem_req_wr_data_wdata__h40110,
	       mem_req_wr_data_wstrb__h40111,
	       3'd4 } ;
  assign MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_2 =
	     { 1'd1,
	       IF_cache_rg_op_9_EQ_1_7_OR_cache_rg_op_9_EQ_2__ETC___d779,
	       mem_req_wr_data_wstrb__h32594,
	       IF_cache_rg_op_9_EQ_1_7_OR_cache_rg_op_9_EQ_2__ETC___d792 } ;
  assign MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_3 =
	     { 1'd1,
	       mem_req_wr_data_wdata__h38573,
	       mem_req_wr_data_wstrb__h40111,
	       1'd1,
	       mem_req_wr_data_wuser__h27393 } ;
  assign MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1 =
	     { 3'd4, cache_rg_pa[31:12] } ;
  assign MUX_cache_ram_word128_set$a_put_3__VAL_1 =
	     { cache_master_xactor_shim_rff_rv$port1__read[1:0],
	       cache_master_xactor_shim_rff_rv$port1__read[132:5] } ;
  assign MUX_cache_ram_word128_set$a_put_3__VAL_2 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       { x__h22615, x__h22733 } :
	       { cache_ram_word128_set_b_read__49_BITS_129_TO_1_ETC___d540,
		 x__h28230 } ;
  assign MUX_cache_ram_word128_set$b_put_2__VAL_2 =
	     cache_rg_word128_set_in_cache + 8'd1 ;
  assign MUX_cache_ram_word128_set$b_put_2__VAL_4 =
	     { cache_rg_addr[11:6], 2'd0 } ;
  assign MUX_cache_rg_cset_in_cache$write_1__VAL_1 =
	     cache_rg_cset_in_cache + 6'd1 ;
  assign MUX_cache_rg_exc_code$write_1__VAL_1 =
	     (req_op == 2'd0) ? 6'd4 : 6'd6 ;
  assign MUX_cache_rg_ld_val$write_1__VAL_2 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       { 128'd0, lrsc_result__h21864 } :
	       { 65'd0,
		 IF_cache_rg_width_code_86_EQ_2_91_THEN_SEXT_IF_ETC___d521 } ;
  assign MUX_cache_rg_st_amo_val$write_1__VAL_2 = { 65'd0, x__h28350 } ;
  assign MUX_cache_rg_state$write_1__VAL_1 =
	     (NOT_req_width_code_EQ_0_336_337_AND_NOT_req_wi_ETC___d1356 &&
	      (req_width_code != 3'b100 || req_addr[3:0] != 4'b0)) ?
	       4'd4 :
	       4'd3 ;
  assign MUX_cache_rg_state$write_1__VAL_5 =
	     (cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0) ?
	       4'd14 :
	       4'd4 ;
  assign MUX_cache_rg_state$write_1__VAL_7 =
	     (cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 ||
	      cache_rg_error_during_refill) ?
	       4'd4 :
	       4'd10 ;
  assign MUX_cache_rg_state$write_1__VAL_12 =
	     EN_commit ?
	       IF_cache_rg_op_9_EQ_0_0_OR_cache_rg_op_9_EQ_2__ETC___d160 :
	       4'd4 ;

  // inlined wires
  assign cache_master_xactor_ug_master_u_b_putWire$wget =
	     { mem_master_bid, mem_master_bresp } ;
  assign cache_master_xactor_ug_master_u_b_putWire$whas =
	     mem_master_bvalid && !cache_master_xactor_shim_bff_rv[7] ;
  assign cache_master_xactor_ug_master_u_r_putWire$wget =
	     { mem_master_rid,
	       mem_master_rdata,
	       mem_master_rresp,
	       mem_master_rlast,
	       mem_master_ruser } ;
  assign cache_master_xactor_ug_master_u_r_putWire$whas =
	     mem_master_rvalid && !cache_master_xactor_shim_rff_rv[138] ;
  assign cache_dw_valid$whas =
	     (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp ||
	      WILL_FIRE_RL_cache_rl_io_read_rsp) &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_rg_op_9_EQ_0_0_OR_cache_rg_op_9_EQ_2_1_A_ETC___d184 ||
	     WILL_FIRE_RL_cache_rl_drive_exception_rsp ||
	     WILL_FIRE_RL_cache_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_ST_AMO_response ;
  always@(MUX_cache_dw_output_ld_val$wset_1__SEL_1 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_1 or
	  MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_2 or
	  MUX_cache_dw_output_ld_val$wset_1__SEL_3 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_3 or
	  MUX_cache_dw_output_ld_val$wset_1__SEL_4 or cache_rg_ld_val)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_dw_output_ld_val$wset_1__SEL_1:
	  cache_dw_output_ld_val$wget =
	      MUX_cache_dw_output_ld_val$wset_1__VAL_1;
      MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  cache_dw_output_ld_val$wget =
	      MUX_cache_dw_output_ld_val$wset_1__VAL_2;
      MUX_cache_dw_output_ld_val$wset_1__SEL_3:
	  cache_dw_output_ld_val$wget =
	      MUX_cache_dw_output_ld_val$wset_1__VAL_3;
      MUX_cache_dw_output_ld_val$wset_1__SEL_4:
	  cache_dw_output_ld_val$wget = cache_rg_ld_val;
      default: cache_dw_output_ld_val$wget =
		   129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_dw_output_st_amo_val$wget =
	     MUX_cache_dw_output_ld_val$wset_1__SEL_3 ?
	       MUX_cache_dw_output_st_amo_val$wset_1__VAL_1 :
	       cache_rg_st_amo_val ;
  assign cache_master_xactor_ug_master_u_aw_dropWire$whas =
	     cache_master_xactor_shim_awff_rv$port1__read[98] &&
	     mem_master_awready ;
  assign cache_master_xactor_ug_master_u_w_dropWire$whas =
	     cache_master_xactor_shim_wff_rv$port1__read[147] &&
	     mem_master_wready ;
  assign cache_master_xactor_ug_master_u_ar_dropWire$whas =
	     cache_master_xactor_shim_arff_rv$port1__read[98] &&
	     mem_master_arready ;
  assign cache_master_xactor_shim_awff_rv$EN_port0__write =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d764 ||
	     WILL_FIRE_RL_cache_rl_io_write_req ;
  always@(MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_1 or
	  MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2 or
	  MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_2 or
	  WILL_FIRE_RL_cache_rl_io_write_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  cache_master_xactor_shim_awff_rv$port0__write_1 =
	      MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_1;
      MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2:
	  cache_master_xactor_shim_awff_rv$port0__write_1 =
	      MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_2;
      WILL_FIRE_RL_cache_rl_io_write_req:
	  cache_master_xactor_shim_awff_rv$port0__write_1 =
	      MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_1;
      default: cache_master_xactor_shim_awff_rv$port0__write_1 =
		   99'h2AAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_master_xactor_shim_awff_rv$port1__read =
	     cache_master_xactor_shim_awff_rv$EN_port0__write ?
	       cache_master_xactor_shim_awff_rv$port0__write_1 :
	       cache_master_xactor_shim_awff_rv ;
  assign cache_master_xactor_shim_awff_rv$port2__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop ?
	       99'h2AAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_awff_rv$port1__read ;
  assign cache_master_xactor_shim_awff_rv$port3__read =
	     WILL_FIRE_RL_cache_master_xactor_do_clear ?
	       99'h2AAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_awff_rv$port2__read ;
  assign cache_master_xactor_shim_wff_rv$EN_port0__write =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d764 ||
	     WILL_FIRE_RL_cache_rl_io_write_req ;
  always@(MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_1 or
	  MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2 or
	  MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_2 or
	  WILL_FIRE_RL_cache_rl_io_write_req or
	  MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  cache_master_xactor_shim_wff_rv$port0__write_1 =
	      MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_1;
      MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2:
	  cache_master_xactor_shim_wff_rv$port0__write_1 =
	      MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_2;
      WILL_FIRE_RL_cache_rl_io_write_req:
	  cache_master_xactor_shim_wff_rv$port0__write_1 =
	      MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_3;
      default: cache_master_xactor_shim_wff_rv$port0__write_1 =
		   148'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_master_xactor_shim_wff_rv$port1__read =
	     cache_master_xactor_shim_wff_rv$EN_port0__write ?
	       cache_master_xactor_shim_wff_rv$port0__write_1 :
	       cache_master_xactor_shim_wff_rv ;
  assign cache_master_xactor_shim_wff_rv$port2__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop ?
	       148'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_wff_rv$port1__read ;
  assign cache_master_xactor_shim_wff_rv$port3__read =
	     WILL_FIRE_RL_cache_master_xactor_do_clear ?
	       148'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_wff_rv$port2__read ;
  assign cache_master_xactor_shim_bff_rv$port0__write_1 =
	     { 1'd1, cache_master_xactor_ug_master_u_b_putWire$wget } ;
  assign cache_master_xactor_shim_bff_rv$port1__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut ?
	       cache_master_xactor_shim_bff_rv$port0__write_1 :
	       cache_master_xactor_shim_bff_rv ;
  assign cache_master_xactor_shim_bff_rv$port2__read =
	     CAN_FIRE_RL_cache_rl_discard_write_rsp ?
	       8'd42 :
	       cache_master_xactor_shim_bff_rv$port1__read ;
  assign cache_master_xactor_shim_bff_rv$port3__read =
	     WILL_FIRE_RL_cache_master_xactor_do_clear ?
	       8'd42 :
	       cache_master_xactor_shim_bff_rv$port2__read ;
  assign cache_master_xactor_shim_arff_rv$EN_port0__write =
	     WILL_FIRE_RL_cache_rl_io_AMO_op_req ||
	     WILL_FIRE_RL_cache_rl_io_read_req ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;
  assign cache_master_xactor_shim_arff_rv$port0__write_1 =
	     MUX_cache_master_xactor_shim_arff_rv$port0__write_1__SEL_1 ?
	       MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_1 :
	       MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_2 ;
  assign cache_master_xactor_shim_arff_rv$port1__read =
	     cache_master_xactor_shim_arff_rv$EN_port0__write ?
	       cache_master_xactor_shim_arff_rv$port0__write_1 :
	       cache_master_xactor_shim_arff_rv ;
  assign cache_master_xactor_shim_arff_rv$port2__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop ?
	       99'h2AAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_arff_rv$port1__read ;
  assign cache_master_xactor_shim_arff_rv$port3__read =
	     WILL_FIRE_RL_cache_master_xactor_do_clear ?
	       99'h2AAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_arff_rv$port2__read ;
  assign cache_master_xactor_shim_rff_rv$port0__write_1 =
	     { 1'd1, cache_master_xactor_ug_master_u_r_putWire$wget } ;
  assign cache_master_xactor_shim_rff_rv$port1__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut ?
	       cache_master_xactor_shim_rff_rv$port0__write_1 :
	       cache_master_xactor_shim_rff_rv ;
  assign cache_master_xactor_shim_rff_rv$EN_port1__write =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop ;
  assign cache_master_xactor_shim_rff_rv$port2__read =
	     cache_master_xactor_shim_rff_rv$EN_port1__write ?
	       139'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_rff_rv$port1__read ;
  assign cache_master_xactor_shim_rff_rv$port3__read =
	     WILL_FIRE_RL_cache_master_xactor_do_clear ?
	       139'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_rff_rv$port2__read ;
  assign cache_ctr_wr_rsps_pending_crg$EN_port0__write =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d764 ||
	     WILL_FIRE_RL_cache_rl_io_write_req ;
  always@(MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1 or
	  MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2 or
	  WILL_FIRE_RL_cache_rl_io_write_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  cache_ctr_wr_rsps_pending_crg$port0__write_1 =
	      MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1;
      MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2:
	  cache_ctr_wr_rsps_pending_crg$port0__write_1 =
	      MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1;
      WILL_FIRE_RL_cache_rl_io_write_req:
	  cache_ctr_wr_rsps_pending_crg$port0__write_1 =
	      MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1;
      default: cache_ctr_wr_rsps_pending_crg$port0__write_1 =
		   4'b1010 /* unspecified value */ ;
    endcase
  end
  assign cache_ctr_wr_rsps_pending_crg$port1__write_1 = b__h33283 - 4'd1 ;
  assign cache_ctr_wr_rsps_pending_crg$port2__read =
	     CAN_FIRE_RL_cache_rl_discard_write_rsp ?
	       cache_ctr_wr_rsps_pending_crg$port1__write_1 :
	       b__h33283 ;
  assign cache_ctr_wr_rsps_pending_crg$port3__read =
	     MUX_cache_master_xactor_clearing$write_1__SEL_1 ?
	       4'd0 :
	       cache_ctr_wr_rsps_pending_crg$port2__read ;
  assign cache_crg_sb_to_load_delay$port0__write_1 =
	     { 1'd0, cache_crg_sb_to_load_delay[10:1] } ;
  assign cache_crg_sb_to_load_delay$EN_port1__write =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     cache_rg_op_9_EQ_1_7_OR_cache_rg_op_9_EQ_2_1_A_ETC___d759 ;
  assign cache_crg_sb_to_load_delay$port2__read =
	     cache_crg_sb_to_load_delay$EN_port1__write ?
	       11'd2047 :
	       cache_crg_sb_to_load_delay$port0__write_1 ;

  // register cache_cfg_verbosity
  assign cache_cfg_verbosity$D_IN = set_verbosity_verbosity ;
  assign cache_cfg_verbosity$EN = EN_set_verbosity ;

  // register cache_crg_sb_to_load_delay
  assign cache_crg_sb_to_load_delay$D_IN =
	     cache_crg_sb_to_load_delay$port2__read ;
  assign cache_crg_sb_to_load_delay$EN = 1'b1 ;

  // register cache_ctr_wr_rsps_pending_crg
  assign cache_ctr_wr_rsps_pending_crg$D_IN =
	     cache_ctr_wr_rsps_pending_crg$port3__read ;
  assign cache_ctr_wr_rsps_pending_crg$EN = 1'b1 ;

  // register cache_master_xactor_clearing
  assign cache_master_xactor_clearing$D_IN =
	     MUX_cache_master_xactor_clearing$write_1__SEL_1 ;
  assign cache_master_xactor_clearing$EN =
	     WILL_FIRE_RL_cache_rl_start_reset && !cache_f_reset_reqs$D_OUT ||
	     WILL_FIRE_RL_cache_master_xactor_do_clear ;

  // register cache_master_xactor_shim_arff_rv
  assign cache_master_xactor_shim_arff_rv$D_IN =
	     cache_master_xactor_shim_arff_rv$port3__read ;
  assign cache_master_xactor_shim_arff_rv$EN = 1'b1 ;

  // register cache_master_xactor_shim_awff_rv
  assign cache_master_xactor_shim_awff_rv$D_IN =
	     cache_master_xactor_shim_awff_rv$port3__read ;
  assign cache_master_xactor_shim_awff_rv$EN = 1'b1 ;

  // register cache_master_xactor_shim_bff_rv
  assign cache_master_xactor_shim_bff_rv$D_IN =
	     cache_master_xactor_shim_bff_rv$port3__read ;
  assign cache_master_xactor_shim_bff_rv$EN = 1'b1 ;

  // register cache_master_xactor_shim_rff_rv
  assign cache_master_xactor_shim_rff_rv$D_IN =
	     cache_master_xactor_shim_rff_rv$port3__read ;
  assign cache_master_xactor_shim_rff_rv$EN = 1'b1 ;

  // register cache_master_xactor_shim_wff_rv
  assign cache_master_xactor_shim_wff_rv$D_IN =
	     cache_master_xactor_shim_wff_rv$port3__read ;
  assign cache_master_xactor_shim_wff_rv$EN = 1'b1 ;

  // register cache_rg_addr
  assign cache_rg_addr$D_IN = req_addr ;
  assign cache_rg_addr$EN = EN_req ;

  // register cache_rg_amo_funct7
  assign cache_rg_amo_funct7$D_IN = req_amo_funct7 ;
  assign cache_rg_amo_funct7$EN = EN_req ;

  // register cache_rg_cset_in_cache
  assign cache_rg_cset_in_cache$D_IN =
	     WILL_FIRE_RL_cache_rl_reset ?
	       MUX_cache_rg_cset_in_cache$write_1__VAL_1 :
	       6'd0 ;
  assign cache_rg_cset_in_cache$EN =
	     WILL_FIRE_RL_cache_rl_reset ||
	     WILL_FIRE_RL_cache_rl_start_reset ;

  // register cache_rg_error_during_refill
  assign cache_rg_error_during_refill$D_IN =
	     MUX_cache_rg_error_during_refill$write_1__SEL_1 ;
  assign cache_rg_error_during_refill$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // register cache_rg_exc_code
  always@(MUX_cache_rg_exc_code$write_1__SEL_1 or
	  MUX_cache_rg_exc_code$write_1__VAL_1 or
	  MUX_cache_rg_exc_code$write_1__SEL_2 or
	  MUX_cache_rg_exc_code$write_1__SEL_3 or
	  MUX_cache_rg_error_during_refill$write_1__SEL_1)
  case (1'b1)
    MUX_cache_rg_exc_code$write_1__SEL_1:
	cache_rg_exc_code$D_IN = MUX_cache_rg_exc_code$write_1__VAL_1;
    MUX_cache_rg_exc_code$write_1__SEL_2: cache_rg_exc_code$D_IN = 6'd7;
    MUX_cache_rg_exc_code$write_1__SEL_3: cache_rg_exc_code$D_IN = 6'd5;
    MUX_cache_rg_error_during_refill$write_1__SEL_1:
	cache_rg_exc_code$D_IN = 6'd1;
    default: cache_rg_exc_code$D_IN = 6'b101010 /* unspecified value */ ;
  endcase
  assign cache_rg_exc_code$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 ||
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 ||
	     EN_req &&
	     NOT_req_width_code_EQ_0_336_337_AND_NOT_req_wi_ETC___d1356 &&
	     (req_width_code != 3'b100 || req_addr[3:0] != 4'b0) ;

  // register cache_rg_is_unsigned
  assign cache_rg_is_unsigned$D_IN = req_is_unsigned ;
  assign cache_rg_is_unsigned$EN = EN_req ;

  // register cache_rg_ld_val
  always@(MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_2 or
	  MUX_cache_rg_ld_val$write_1__SEL_2 or
	  MUX_cache_rg_ld_val$write_1__VAL_2 or
	  WILL_FIRE_RL_cache_rl_io_read_rsp or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_1 or
	  WILL_FIRE_RL_cache_rl_io_AMO_SC_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  cache_rg_ld_val$D_IN = MUX_cache_dw_output_ld_val$wset_1__VAL_2;
      MUX_cache_rg_ld_val$write_1__SEL_2:
	  cache_rg_ld_val$D_IN = MUX_cache_rg_ld_val$write_1__VAL_2;
      WILL_FIRE_RL_cache_rl_io_read_rsp:
	  cache_rg_ld_val$D_IN = MUX_cache_dw_output_ld_val$wset_1__VAL_1;
      WILL_FIRE_RL_cache_rl_io_AMO_SC_req: cache_rg_ld_val$D_IN = 129'd1;
      default: cache_rg_ld_val$D_IN =
		   129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_rg_ld_val$EN =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d482 ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_io_AMO_SC_req ;

  // register cache_rg_lower_word64
  assign cache_rg_lower_word64$D_IN = 64'h0 ;
  assign cache_rg_lower_word64$EN = 1'b0 ;

  // register cache_rg_lower_word64_full
  assign cache_rg_lower_word64_full$D_IN = 1'd0 ;
  assign cache_rg_lower_word64_full$EN =
	     WILL_FIRE_RL_cache_rl_start_cache_refill ||
	     WILL_FIRE_RL_cache_rl_start_reset ;

  // register cache_rg_lrsc_pa
  assign cache_rg_lrsc_pa$D_IN = cache_rg_addr ;
  assign cache_rg_lrsc_pa$EN =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00010 &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__18_BITS__ETC___d124 ;

  // register cache_rg_lrsc_valid
  assign cache_rg_lrsc_valid$D_IN =
	     MUX_cache_rg_lrsc_valid$write_1__SEL_2 &&
	     cache_rg_op_9_EQ_0_0_OR_cache_rg_op_9_EQ_2_1_A_ETC___d181 ;
  assign cache_rg_lrsc_valid$EN =
	     WILL_FIRE_RL_cache_rl_io_read_req && cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00010 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_rg_op_9_EQ_0_0_OR_cache_rg_op_9_EQ_2_1_A_ETC___d179 ||
	     WILL_FIRE_RL_cache_rl_start_reset ;

  // register cache_rg_op
  assign cache_rg_op$D_IN = req_op ;
  assign cache_rg_op$EN = EN_req ;

  // register cache_rg_pa
  assign cache_rg_pa$D_IN = EN_req ? req_addr : cache_rg_addr ;
  assign cache_rg_pa$EN =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit ||
	     EN_req ;

  // register cache_rg_pte_pa
  assign cache_rg_pte_pa$D_IN = 32'h0 ;
  assign cache_rg_pte_pa$EN = 1'b0 ;

  // register cache_rg_st_amo_val
  assign cache_rg_st_amo_val$D_IN =
	     EN_req ? req_st_value : MUX_cache_rg_st_amo_val$write_1__VAL_2 ;
  assign cache_rg_st_amo_val$EN =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d854 ||
	     EN_req ;

  // register cache_rg_state
  always@(EN_req or
	  MUX_cache_rg_state$write_1__VAL_1 or
	  WILL_FIRE_RL_cache_rl_start_reset or
	  WILL_FIRE_RL_cache_rl_io_read_req or
	  WILL_FIRE_RL_cache_rl_start_cache_refill or
	  WILL_FIRE_RL_cache_rl_io_AMO_read_rsp or
	  MUX_cache_rg_state$write_1__VAL_5 or
	  WILL_FIRE_RL_cache_rl_io_read_rsp or
	  MUX_cache_rg_state$write_1__SEL_7 or
	  MUX_cache_rg_state$write_1__VAL_7 or
	  WILL_FIRE_RL_cache_rl_io_AMO_op_req or
	  WILL_FIRE_RL_cache_rl_io_AMO_SC_req or
	  WILL_FIRE_RL_cache_rl_io_write_req or
	  WILL_FIRE_RL_cache_rl_rereq or
	  MUX_cache_rg_state$write_1__SEL_12 or
	  MUX_cache_rg_state$write_1__VAL_12 or
	  MUX_cache_rg_state$write_1__SEL_13)
  case (1'b1)
    EN_req: cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_1;
    WILL_FIRE_RL_cache_rl_start_reset: cache_rg_state$D_IN = 4'd1;
    WILL_FIRE_RL_cache_rl_io_read_req: cache_rg_state$D_IN = 4'd13;
    WILL_FIRE_RL_cache_rl_start_cache_refill: cache_rg_state$D_IN = 4'd9;
    WILL_FIRE_RL_cache_rl_io_AMO_read_rsp:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_5;
    WILL_FIRE_RL_cache_rl_io_read_rsp:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_5;
    MUX_cache_rg_state$write_1__SEL_7:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_7;
    WILL_FIRE_RL_cache_rl_io_AMO_op_req: cache_rg_state$D_IN = 4'd15;
    WILL_FIRE_RL_cache_rl_io_AMO_SC_req || WILL_FIRE_RL_cache_rl_io_write_req:
	cache_rg_state$D_IN = 4'd11;
    WILL_FIRE_RL_cache_rl_rereq: cache_rg_state$D_IN = 4'd3;
    MUX_cache_rg_state$write_1__SEL_12:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_12;
    MUX_cache_rg_state$write_1__SEL_13: cache_rg_state$D_IN = 4'd2;
    default: cache_rg_state$D_IN = 4'b1010 /* unspecified value */ ;
  endcase
  assign cache_rg_state$EN =
	     WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_word128_set_in_cache[1:0] == 2'd3 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     (!EN_commit ||
	      cache_rg_op_9_EQ_0_0_OR_cache_rg_op_9_EQ_2_1_A_ETC___d150 ||
	      NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d155) ||
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp ||
	     EN_req ||
	     WILL_FIRE_RL_cache_rl_start_reset ||
	     WILL_FIRE_RL_cache_rl_rereq ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ||
	     WILL_FIRE_RL_cache_rl_io_AMO_SC_req ||
	     WILL_FIRE_RL_cache_rl_io_write_req ||
	     WILL_FIRE_RL_cache_rl_io_read_req ||
	     WILL_FIRE_RL_cache_rl_io_AMO_op_req ;

  // register cache_rg_width_code
  assign cache_rg_width_code$D_IN = req_width_code ;
  assign cache_rg_width_code$EN = EN_req ;

  // register cache_rg_word128_set_in_cache
  assign cache_rg_word128_set_in_cache$D_IN =
	     MUX_cache_ram_word128_set$b_put_1__SEL_2 ?
	       MUX_cache_ram_word128_set$b_put_2__VAL_2 :
	       MUX_cache_ram_word128_set$b_put_2__VAL_4 ;
  assign cache_rg_word128_set_in_cache$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_word128_set_in_cache[1:0] != 2'd3 ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // submodule cache_f_reset_reqs
  assign cache_f_reset_reqs$D_IN = !EN_server_reset_request_put ;
  assign cache_f_reset_reqs$ENQ =
	     EN_server_reset_request_put || EN_server_flush_request_put ;
  assign cache_f_reset_reqs$DEQ = MUX_cache_rg_state$write_1__SEL_13 ;
  assign cache_f_reset_reqs$CLR = 1'b0 ;

  // submodule cache_f_reset_rsps
  assign cache_f_reset_rsps$D_IN = cache_f_reset_reqs$D_OUT ;
  assign cache_f_reset_rsps$ENQ = MUX_cache_rg_state$write_1__SEL_13 ;
  assign cache_f_reset_rsps$DEQ =
	     EN_server_flush_response_get || EN_server_reset_response_get ;
  assign cache_f_reset_rsps$CLR = 1'b0 ;

  // submodule cache_ram_state_and_ctag_cset
  assign cache_ram_state_and_ctag_cset$ADDRA =
	     WILL_FIRE_RL_cache_rl_start_cache_refill ?
	       cache_rg_addr[11:6] :
	       cache_rg_cset_in_cache ;
  assign cache_ram_state_and_ctag_cset$ADDRB =
	     MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       req_addr[11:6] :
	       cache_rg_addr[11:6] ;
  assign cache_ram_state_and_ctag_cset$DIA =
	     WILL_FIRE_RL_cache_rl_start_cache_refill ?
	       MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1 :
	       23'd2796202 ;
  assign cache_ram_state_and_ctag_cset$DIB =
	     MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       23'b01010101010101010101010 /* unspecified value */  :
	       23'b01010101010101010101010 /* unspecified value */  ;
  assign cache_ram_state_and_ctag_cset$WEA = 1'd1 ;
  assign cache_ram_state_and_ctag_cset$WEB = 1'd0 ;
  assign cache_ram_state_and_ctag_cset$ENA =
	     WILL_FIRE_RL_cache_rl_start_cache_refill ||
	     WILL_FIRE_RL_cache_rl_reset ;
  assign cache_ram_state_and_ctag_cset$ENB =
	     MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 ||
	     WILL_FIRE_RL_cache_rl_rereq ;

  // submodule cache_ram_word128_set
  assign cache_ram_word128_set$ADDRA =
	     MUX_cache_ram_word128_set$a_put_1__SEL_1 ?
	       cache_rg_word128_set_in_cache :
	       cache_rg_addr[11:4] ;
  always@(MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  req_addr or
	  MUX_cache_ram_word128_set$b_put_1__SEL_2 or
	  MUX_cache_ram_word128_set$b_put_2__VAL_2 or
	  WILL_FIRE_RL_cache_rl_rereq or
	  cache_rg_addr or
	  WILL_FIRE_RL_cache_rl_start_cache_refill or
	  MUX_cache_ram_word128_set$b_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  cache_ram_word128_set$ADDRB = req_addr[11:4];
      MUX_cache_ram_word128_set$b_put_1__SEL_2:
	  cache_ram_word128_set$ADDRB =
	      MUX_cache_ram_word128_set$b_put_2__VAL_2;
      WILL_FIRE_RL_cache_rl_rereq:
	  cache_ram_word128_set$ADDRB = cache_rg_addr[11:4];
      WILL_FIRE_RL_cache_rl_start_cache_refill:
	  cache_ram_word128_set$ADDRB =
	      MUX_cache_ram_word128_set$b_put_2__VAL_4;
      default: cache_ram_word128_set$ADDRB =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  assign cache_ram_word128_set$DIA =
	     MUX_cache_ram_word128_set$a_put_1__SEL_1 ?
	       MUX_cache_ram_word128_set$a_put_3__VAL_1 :
	       MUX_cache_ram_word128_set$a_put_3__VAL_2 ;
  always@(MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  MUX_cache_ram_word128_set$b_put_1__SEL_2 or
	  WILL_FIRE_RL_cache_rl_rereq or
	  WILL_FIRE_RL_cache_rl_start_cache_refill)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  cache_ram_word128_set$DIB =
	      130'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      MUX_cache_ram_word128_set$b_put_1__SEL_2:
	  cache_ram_word128_set$DIB =
	      130'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_cache_rl_rereq:
	  cache_ram_word128_set$DIB =
	      130'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_cache_rl_start_cache_refill:
	  cache_ram_word128_set$DIB =
	      130'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      default: cache_ram_word128_set$DIB =
		   130'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_ram_word128_set$WEA = 1'd1 ;
  assign cache_ram_word128_set$WEB = 1'd0 ;
  assign cache_ram_word128_set$ENA =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d529 ;
  assign cache_ram_word128_set$ENB =
	     MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_word128_set_in_cache[1:0] != 2'd3 ||
	     WILL_FIRE_RL_cache_rl_rereq ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // submodule cache_soc_map
  assign cache_soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign cache_soc_map$m_is_mem_addr_addr = 64'h0 ;
  assign cache_soc_map$m_is_near_mem_IO_addr_addr = 64'h0 ;

  // remaining internal signals
  assign IF_cache_rg_addr_BITS_4_TO_0_EQ_0_THEN_1_ELSE_0__q39 =
	     (cache_rg_addr[4:0] == 5'd0) ? 32'd1 : 32'd0 ;
  assign IF_cache_rg_op_9_EQ_0_0_OR_cache_rg_op_9_EQ_2__ETC___d160 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) ?
	       4'd8 :
	       IF_cache_rg_op_9_EQ_1_7_OR_cache_rg_op_9_EQ_2__ETC___d159 ;
  assign IF_cache_rg_op_9_EQ_0_0_OR_cache_rg_op_9_EQ_2__ETC___d450 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) ?
	       x__h20331 :
	       x__h25904 ;
  assign IF_cache_rg_op_9_EQ_1_7_OR_cache_rg_op_9_EQ_2__ETC___d128 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       cache_rg_op_9_EQ_2_1_AND_cache_rg_amo_funct7_2_ETC___d117 :
	       NOT_cache_ram_state_and_ctag_cset_b_read__18_B_ETC___d127 ;
  assign IF_cache_rg_op_9_EQ_1_7_OR_cache_rg_op_9_EQ_2__ETC___d159 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       4'd11 :
	       ((!cache_ram_state_and_ctag_cset$DOB[22] ||
		 !cache_ram_state_and_ctag_cset_b_read__18_BITS__ETC___d124) ?
		  4'd8 :
		  4'd11) ;
  assign IF_cache_rg_op_9_EQ_1_7_OR_cache_rg_op_9_EQ_2__ETC___d779 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       mem_req_wr_data_wdata__h27390 :
	       mem_req_wr_data_wdata__h32593 ;
  assign IF_cache_rg_op_9_EQ_1_7_OR_cache_rg_op_9_EQ_2__ETC___d792 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       { 1'd1, mem_req_wr_data_wuser__h27393 } :
	       3'd4 ;
  assign IF_cache_rg_width_code_86_EQ_2_91_THEN_SEXT_IF_ETC___d1246 =
	     (cache_rg_width_code == 3'd2) ? b__h40268 : x__h40321[63:0] ;
  assign IF_cache_rg_width_code_86_EQ_2_91_THEN_SEXT_IF_ETC___d521 =
	     (cache_rg_width_code == 3'd2) ? b__h28467 : x__h28520[63:0] ;
  assign IF_cache_rg_width_code_86_EQ_2_91_THEN_SEXT_ca_ETC___d649 =
	     (cache_rg_width_code == 3'd2) ?
	       b__h29591 :
	       cache_rg_st_amo_val[63:0] ;
  assign IF_cache_rg_width_code_86_EQ_3_95_THEN_IF_cach_ETC___d270 =
	     (cache_rg_width_code == 3'd3) ?
	       ((cache_rg_addr[3:0] == 4'h0) ?
		  cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[128] :
		  cache_rg_addr[3:0] == 4'h8 &&
		  cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[129]) :
	       cache_rg_width_code == 3'd4 &&
	       cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[128] ;
  assign NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 =
	     cache_cfg_verbosity > 4'd1 ;
  assign NOT_cache_cfg_verbosity_read__5_ULE_2_79___d880 =
	     cache_cfg_verbosity > 4'd2 ;
  assign NOT_cache_master_xactor_clearing_0_5_AND_cache_ETC___d1141 =
	     !cache_master_xactor_clearing &&
	     cache_master_xactor_shim_rff_rv$port1__read[138] &&
	     (cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 ||
	      !cache_master_xactor_shim_awff_rv[98] &&
	      !cache_master_xactor_shim_wff_rv[147]) ;
  assign NOT_cache_ram_state_and_ctag_cset_b_read__18_B_ETC___d127 =
	     !cache_ram_state_and_ctag_cset$DOB[22] ||
	     !cache_ram_state_and_ctag_cset_b_read__18_BITS__ETC___d124 ||
	     !cache_master_xactor_clearing &&
	     !cache_master_xactor_shim_awff_rv[98] &&
	     !cache_master_xactor_shim_wff_rv[147] ;
  assign NOT_cache_ram_state_and_ctag_cset_b_read__18_B_ETC___d167 =
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__18_BITS__ETC___d124) &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00010 &&
	     cache_rg_addr_04_EQ_cache_rg_lrsc_pa_03___d165 ;
  assign NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d155 =
	     cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_03_EQ_cache_rg_addr_04___d105) ;
  assign NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d764 =
	     cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     (cache_rg_op_9_EQ_1_7_OR_cache_rg_op_9_EQ_2_1_A_ETC___d762 ||
	      NOT_cache_rg_op_9_EQ_1_7_73_AND_NOT_cache_rg_o_ETC___d526) ;
  assign NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d813 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_cache_rg_op_9_EQ_2_1_33_OR_NOT_cache_rg_am_ETC___d811 ;
  assign NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d821 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_cache_rg_op_9_EQ_2_1_33_OR_NOT_cache_rg_am_ETC___d819 ;
  assign NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d826 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_cache_rg_op_9_EQ_2_1_33_OR_NOT_cache_rg_am_ETC___d824 ;
  assign NOT_cache_rg_op_9_EQ_1_7_73_AND_NOT_cache_rg_o_ETC___d176 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__18_BITS__ETC___d124 &&
	     cache_rg_addr_04_EQ_cache_rg_lrsc_pa_03___d165 ;
  assign NOT_cache_rg_op_9_EQ_1_7_73_AND_NOT_cache_rg_o_ETC___d526 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__18_BITS__ETC___d124 ;
  assign NOT_cache_rg_op_9_EQ_1_7_73_AND_NOT_cache_rg_o_ETC___d758 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__18_BITS__ETC___d124 &&
	     (cache_rg_width_code == 3'd0 || cache_rg_width_code == 3'd1) ;
  assign NOT_cache_rg_op_9_EQ_1_7_73_AND_NOT_cache_rg_o_ETC___d836 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__18_BITS__ETC___d124) &&
	     NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 ;
  assign NOT_cache_rg_op_9_EQ_1_7_73_AND_NOT_cache_rg_o_ETC___d839 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__18_BITS__ETC___d124 &&
	     NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 ;
  assign NOT_cache_rg_op_9_EQ_1_7_73_AND_NOT_cache_rg_o_ETC___d844 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__18_BITS__ETC___d124 &&
	     cache_ctr_wr_rsps_pending_crg == 4'd15 ;
  assign NOT_cache_rg_op_9_EQ_1_7_73_AND_NOT_cache_rg_o_ETC___d850 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__18_BITS__ETC___d124 &&
	     cache_rg_addr_04_EQ_cache_rg_lrsc_pa_03___d165 &&
	     NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 ;
  assign NOT_cache_rg_op_9_EQ_2_1_33_OR_NOT_cache_rg_am_ETC___d524 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_03_EQ_cache_rg_addr_04___d105) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__18_BITS__ETC___d124 ;
  assign NOT_cache_rg_op_9_EQ_2_1_33_OR_NOT_cache_rg_am_ETC___d756 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_03_EQ_cache_rg_addr_04___d105) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__18_BITS__ETC___d124 &&
	     (cache_rg_width_code == 3'd0 || cache_rg_width_code == 3'd1) ;
  assign NOT_cache_rg_op_9_EQ_2_1_33_OR_NOT_cache_rg_am_ETC___d811 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_03_EQ_cache_rg_addr_04___d105) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__18_BITS__ETC___d124 &&
	     NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 ;
  assign NOT_cache_rg_op_9_EQ_2_1_33_OR_NOT_cache_rg_am_ETC___d815 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_03_EQ_cache_rg_addr_04___d105) &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__18_BITS__ETC___d124) &&
	     NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 ;
  assign NOT_cache_rg_op_9_EQ_2_1_33_OR_NOT_cache_rg_am_ETC___d819 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_03_EQ_cache_rg_addr_04___d105) &&
	     NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 ;
  assign NOT_cache_rg_op_9_EQ_2_1_33_OR_NOT_cache_rg_am_ETC___d824 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_03_EQ_cache_rg_addr_04___d105) &&
	     cache_ctr_wr_rsps_pending_crg == 4'd15 ;
  assign NOT_req_width_code_EQ_0_336_337_AND_NOT_req_wi_ETC___d1356 =
	     req_width_code != 3'd0 &&
	     (req_width_code != 3'd1 || req_addr[0]) &&
	     (req_width_code != 3'd2 || req_addr[1:0] != 2'b0) &&
	     (req_width_code != 3'd3 || req_addr[2:0] != 3'b0) ;
  assign _0__q38 = 2'd0 ;
  assign _theResult___fst__h25828 =
	     (cache_rg_addr[3:0] == 4'h0) ? 128'd1 : 128'd0 ;
  assign _theResult___snd_fst__h27399 =
	     cache_rg_st_amo_val[127:0] << shift_bits__h32463 ;
  assign _theResult___snd_fst__h32602 =
	     { 64'd0, x__h28350 } << shift_bits__h32463 ;
  assign _theResult___snd_fst__h38582 =
	     cache_rg_st_amo_val[127:0] << shift_bits__h39980 ;
  assign _theResult___snd_fst__h40119 =
	     word128__h39977 << shift_bits__h39980 ;
  assign b__h28467 =
	     { {32{x8520_BITS_31_TO_0__q35[31]}}, x8520_BITS_31_TO_0__q35 } ;
  assign b__h29591 =
	     { {32{cache_rg_st_amo_val_BITS_31_TO_0__q1[31]}},
	       cache_rg_st_amo_val_BITS_31_TO_0__q1 } ;
  assign b__h33283 =
	     cache_ctr_wr_rsps_pending_crg$EN_port0__write ?
	       cache_ctr_wr_rsps_pending_crg$port0__write_1 :
	       cache_ctr_wr_rsps_pending_crg ;
  assign b__h40268 =
	     { {32{x0321_BITS_31_TO_0__q70[31]}}, x0321_BITS_31_TO_0__q70 } ;
  assign cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d482 =
	     EN_commit && cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     (cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011 ||
	      cache_rg_op != 2'd1 && cache_ram_state_and_ctag_cset$DOB[22] &&
	      cache_ram_state_and_ctag_cset_b_read__18_BITS__ETC___d124) ;
  assign cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d529 =
	     EN_commit && cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     cache_rg_op_9_EQ_1_7_OR_cache_rg_op_9_EQ_2_1_A_ETC___d527 ;
  assign cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d841 =
	     EN_commit && cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_cache_rg_op_9_EQ_1_7_73_AND_NOT_cache_rg_o_ETC___d839 ;
  assign cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d846 =
	     EN_commit && cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_cache_rg_op_9_EQ_1_7_73_AND_NOT_cache_rg_o_ETC___d844 ;
  assign cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d854 =
	     EN_commit && cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_cache_rg_op_9_EQ_1_7_73_AND_NOT_cache_rg_o_ETC___d526 ;
  assign cache_master_xactor_shim_arff_rvport1__read_B_ETC__q73 =
	     cache_master_xactor_shim_arff_rv$port1__read[97:0] ;
  assign cache_master_xactor_shim_awff_rvport1__read_B_ETC__q71 =
	     cache_master_xactor_shim_awff_rv$port1__read[97:0] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q40 =
	     cache_master_xactor_shim_rff_rv$port1__read[68:5] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q41 =
	     cache_master_xactor_shim_rff_rv$port1__read[12:5] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q42 =
	     cache_master_xactor_shim_rff_rv$port1__read[20:5] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q43 =
	     cache_master_xactor_shim_rff_rv$port1__read[36:5] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q44 =
	     cache_master_xactor_shim_rff_rv$port1__read[20:13] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q45 =
	     cache_master_xactor_shim_rff_rv$port1__read[28:21] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q46 =
	     cache_master_xactor_shim_rff_rv$port1__read[36:21] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q47 =
	     cache_master_xactor_shim_rff_rv$port1__read[36:29] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q48 =
	     cache_master_xactor_shim_rff_rv$port1__read[44:37] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q49 =
	     cache_master_xactor_shim_rff_rv$port1__read[52:37] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q50 =
	     cache_master_xactor_shim_rff_rv$port1__read[68:37] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q51 =
	     cache_master_xactor_shim_rff_rv$port1__read[52:45] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q52 =
	     cache_master_xactor_shim_rff_rv$port1__read[60:53] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q53 =
	     cache_master_xactor_shim_rff_rv$port1__read[68:61] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q54 =
	     cache_master_xactor_shim_rff_rv$port1__read[68:53] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q55 =
	     cache_master_xactor_shim_rff_rv$port1__read[132:69] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q56 =
	     cache_master_xactor_shim_rff_rv$port1__read[76:69] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q57 =
	     cache_master_xactor_shim_rff_rv$port1__read[84:69] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q58 =
	     cache_master_xactor_shim_rff_rv$port1__read[100:69] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q59 =
	     cache_master_xactor_shim_rff_rv$port1__read[84:77] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q60 =
	     cache_master_xactor_shim_rff_rv$port1__read[92:85] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q61 =
	     cache_master_xactor_shim_rff_rv$port1__read[100:85] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q62 =
	     cache_master_xactor_shim_rff_rv$port1__read[108:101] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q63 =
	     cache_master_xactor_shim_rff_rv$port1__read[100:93] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q64 =
	     cache_master_xactor_shim_rff_rv$port1__read[116:101] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q65 =
	     cache_master_xactor_shim_rff_rv$port1__read[132:101] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q66 =
	     cache_master_xactor_shim_rff_rv$port1__read[116:109] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q67 =
	     cache_master_xactor_shim_rff_rv$port1__read[124:117] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q68 =
	     cache_master_xactor_shim_rff_rv$port1__read[132:117] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q69 =
	     cache_master_xactor_shim_rff_rv$port1__read[132:125] ;
  assign cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q72 =
	     cache_master_xactor_shim_wff_rv$port1__read[146:0] ;
  assign cache_ram_state_and_ctag_cset_b_read__18_BITS__ETC___d124 =
	     cache_ram_state_and_ctag_cset$DOB[21:0] == pa_ctag__h7030 ;
  assign cache_ram_state_and_ctag_cset_b_read__18_BIT_2_ETC___d168 =
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__18_BITS__ETC___d124 &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00010 ||
	     NOT_cache_ram_state_and_ctag_cset_b_read__18_B_ETC___d167 ;
  assign cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262 =
	     cache_ram_word128_set$DOB & y__h7478 ;
  assign cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q10 =
	     cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[39:32] ;
  assign cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q11 =
	     cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[47:32] ;
  assign cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q12 =
	     cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[63:32] ;
  assign cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q13 =
	     cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[47:40] ;
  assign cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q14 =
	     cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[55:48] ;
  assign cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q15 =
	     cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[63:48] ;
  assign cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q16 =
	     cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[63:56] ;
  assign cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q17 =
	     cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[127:64] ;
  assign cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q18 =
	     cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[71:64] ;
  assign cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q19 =
	     cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[79:64] ;
  assign cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q2 =
	     cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[63:0] ;
  assign cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q20 =
	     cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[95:64] ;
  assign cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q21 =
	     cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[79:72] ;
  assign cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q22 =
	     cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[87:80] ;
  assign cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q23 =
	     cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[95:80] ;
  assign cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q24 =
	     cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[95:88] ;
  assign cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q25 =
	     cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[103:96] ;
  assign cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q26 =
	     cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[111:96] ;
  assign cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q27 =
	     cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[127:96] ;
  assign cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q28 =
	     cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[111:104] ;
  assign cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q29 =
	     cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[119:112] ;
  assign cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q3 =
	     cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[7:0] ;
  assign cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q30 =
	     cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[127:112] ;
  assign cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q34 =
	     cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[127:120] ;
  assign cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q4 =
	     cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[15:0] ;
  assign cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q5 =
	     cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[31:0] ;
  assign cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q6 =
	     cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[15:8] ;
  assign cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q7 =
	     cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[23:16] ;
  assign cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q8 =
	     cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[31:16] ;
  assign cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q9 =
	     cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[31:24] ;
  assign cache_ram_word128_set_b_read__49_BITS_129_TO_1_ETC___d540 =
	     cache_ram_word128_set$DOB[129:128] & y__h28191 ;
  assign cache_rg_addr_04_EQ_cache_rg_lrsc_pa_03___d165 =
	     cache_rg_addr == cache_rg_lrsc_pa ;
  assign cache_rg_amo_funct7_2_BITS_6_TO_2_3_EQ_0b10_4__ETC___d476 =
	     cache_rg_amo_funct7[6:2] == 5'b00010 &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__18_BITS__ETC___d124) &&
	     cache_rg_addr_04_EQ_cache_rg_lrsc_pa_03___d165 &&
	     NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 ;
  assign cache_rg_lrsc_pa_03_EQ_cache_rg_addr_04___d105 =
	     cache_rg_lrsc_pa == cache_rg_addr ;
  assign cache_rg_op_9_EQ_0_0_OR_cache_rg_op_9_EQ_2_1_A_ETC___d150 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__18_BITS__ETC___d124) ;
  assign cache_rg_op_9_EQ_0_0_OR_cache_rg_op_9_EQ_2_1_A_ETC___d179 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     cache_ram_state_and_ctag_cset_b_read__18_BIT_2_ETC___d168 ||
	     cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     cache_rg_op_9_EQ_1_7_OR_cache_rg_op_9_EQ_2_1_A_ETC___d177 ;
  assign cache_rg_op_9_EQ_0_0_OR_cache_rg_op_9_EQ_2_1_A_ETC___d181 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__18_BITS__ETC___d124 ;
  assign cache_rg_op_9_EQ_0_0_OR_cache_rg_op_9_EQ_2_1_A_ETC___d184 =
	     cache_rg_op_9_EQ_0_0_OR_cache_rg_op_9_EQ_2_1_A_ETC___d181 ||
	     cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h21864 ;
  assign cache_rg_op_9_EQ_0_0_OR_cache_rg_op_9_EQ_2_1_A_ETC___d272 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     cache_rg_width_code != 3'd0 &&
	     cache_rg_width_code != 3'd1 &&
	     cache_rg_width_code != 3'd2 &&
	     IF_cache_rg_width_code_86_EQ_3_95_THEN_IF_cach_ETC___d270 ;
  assign cache_rg_op_9_EQ_0_0_OR_cache_rg_op_9_EQ_2_1_A_ETC___d459 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__18_BITS__ETC___d124 &&
	     NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 ;
  assign cache_rg_op_9_EQ_0_0_OR_cache_rg_op_9_EQ_2_1_A_ETC___d472 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__18_BITS__ETC___d124) &&
	     NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 ;
  assign cache_rg_op_9_EQ_1_7_OR_cache_rg_op_9_EQ_2_1_A_ETC___d177 =
	     cache_rg_op == 2'd1 &&
	     cache_rg_addr_04_EQ_cache_rg_lrsc_pa_03___d165 ||
	     cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011 ||
	     NOT_cache_rg_op_9_EQ_1_7_73_AND_NOT_cache_rg_o_ETC___d176 ;
  assign cache_rg_op_9_EQ_1_7_OR_cache_rg_op_9_EQ_2_1_A_ETC___d527 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_cache_rg_op_9_EQ_2_1_33_OR_NOT_cache_rg_am_ETC___d524 ||
	     NOT_cache_rg_op_9_EQ_1_7_73_AND_NOT_cache_rg_o_ETC___d526 ;
  assign cache_rg_op_9_EQ_1_7_OR_cache_rg_op_9_EQ_2_1_A_ETC___d759 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_cache_rg_op_9_EQ_2_1_33_OR_NOT_cache_rg_am_ETC___d756 ||
	     NOT_cache_rg_op_9_EQ_1_7_73_AND_NOT_cache_rg_o_ETC___d758 ;
  assign cache_rg_op_9_EQ_1_7_OR_cache_rg_op_9_EQ_2_1_A_ETC___d762 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_03_EQ_cache_rg_addr_04___d105) ;
  assign cache_rg_op_9_EQ_2_1_AND_cache_rg_amo_funct7_2_ETC___d117 =
	     cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h21864 ||
	     !cache_master_xactor_clearing &&
	     !cache_master_xactor_shim_awff_rv[98] &&
	     !cache_master_xactor_shim_wff_rv[147] ;
  assign cache_rg_op_9_EQ_2_1_AND_cache_rg_amo_funct7_2_ETC___d832 =
	     cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h21864 &&
	     NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 ;
  assign cache_rg_st_amo_val_BITS_31_TO_0__q1 = cache_rg_st_amo_val[31:0] ;
  assign cache_rg_state_9_EQ_12_24_AND_cache_rg_op_9_EQ_ETC___d926 =
	     cache_rg_state == 4'd12 &&
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     b__h33283 == 4'd0 ;
  assign cache_rg_state_9_EQ_3_31_AND_NOT_cache_rg_op_9_ETC___d140 =
	     cache_rg_state == 4'd3 &&
	     (cache_rg_op != 2'd0 &&
	      (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) ||
	      cache_crg_sb_to_load_delay$port0__write_1 == 11'd0) ;
  assign cline_addr__h33381 = { cache_rg_pa[31:6], 6'd0 } ;
  assign cline_fabric_addr__h33382 = { 32'd0, cline_addr__h33381 } ;
  assign lrsc_result__h21864 =
	     !cache_rg_lrsc_valid ||
	     !cache_rg_lrsc_pa_03_EQ_cache_rg_addr_04___d105 ;
  assign mem_req_wr_addr_awaddr__h32456 = { 32'd0, cache_rg_addr } ;
  assign mem_req_wr_addr_awaddr__h39973 = { 32'd0, cache_rg_pa } ;
  assign mem_req_wr_data_wuser__h27393 =
	     (cache_rg_width_code == 3'd3) ?
	       {2{cache_rg_st_amo_val[128]}} :
	       2'd0 ;
  assign new_st_val__h28355 = { 32'd0, _theResult_____2__h28174[31:0] } ;
  assign new_st_val__h28459 =
	     IF_cache_rg_width_code_86_EQ_2_91_THEN_SEXT_IF_ETC___d521 +
	     IF_cache_rg_width_code_86_EQ_2_91_THEN_SEXT_ca_ETC___d649 ;
  assign new_st_val__h29621 = w1__h28166 ^ w2__h28168 ;
  assign new_st_val__h29626 = w1__h28166 & w2__h28168 ;
  assign new_st_val__h29631 = w1__h28166 | w2__h28168 ;
  assign new_st_val__h29636 =
	     (w1__h28166 < w2__h28168) ? w1__h28166 : w2__h28168 ;
  assign new_st_val__h29644 =
	     (w1__h28166 <= w2__h28168) ? w2__h28168 : w1__h28166 ;
  assign new_st_val__h29653 =
	     ((IF_cache_rg_width_code_86_EQ_2_91_THEN_SEXT_IF_ETC___d521 ^
	       64'h8000000000000000) <
	      (IF_cache_rg_width_code_86_EQ_2_91_THEN_SEXT_ca_ETC___d649 ^
	       64'h8000000000000000)) ?
	       w1__h28166 :
	       w2__h28168 ;
  assign new_st_val__h29661 =
	     ((IF_cache_rg_width_code_86_EQ_2_91_THEN_SEXT_IF_ETC___d521 ^
	       64'h8000000000000000) <=
	      (IF_cache_rg_width_code_86_EQ_2_91_THEN_SEXT_ca_ETC___d649 ^
	       64'h8000000000000000)) ?
	       w2__h28168 :
	       w1__h28166 ;
  assign new_st_val__h40156 = { 32'd0, _theResult_____2__h40141[31:0] } ;
  assign new_st_val__h40260 =
	     IF_cache_rg_width_code_86_EQ_2_91_THEN_SEXT_IF_ETC___d1246 +
	     IF_cache_rg_width_code_86_EQ_2_91_THEN_SEXT_ca_ETC___d649 ;
  assign new_st_val__h42589 = w1__h40133 ^ w2__h28168 ;
  assign new_st_val__h42594 = w1__h40133 & w2__h28168 ;
  assign new_st_val__h42599 = w1__h40133 | w2__h28168 ;
  assign new_st_val__h42604 =
	     (w1__h40133 < w2__h28168) ? w1__h40133 : w2__h28168 ;
  assign new_st_val__h42612 =
	     (w1__h40133 <= w2__h28168) ? w2__h28168 : w1__h40133 ;
  assign new_st_val__h42621 =
	     ((IF_cache_rg_width_code_86_EQ_2_91_THEN_SEXT_IF_ETC___d1246 ^
	       64'h8000000000000000) <
	      (IF_cache_rg_width_code_86_EQ_2_91_THEN_SEXT_ca_ETC___d649 ^
	       64'h8000000000000000)) ?
	       w1__h40133 :
	       w2__h28168 ;
  assign new_st_val__h42629 =
	     ((IF_cache_rg_width_code_86_EQ_2_91_THEN_SEXT_IF_ETC___d1246 ^
	       64'h8000000000000000) <=
	      (IF_cache_rg_width_code_86_EQ_2_91_THEN_SEXT_ca_ETC___d649 ^
	       64'h8000000000000000)) ?
	       w2__h28168 :
	       w1__h40133 ;
  assign pa_ctag__h7030 = { 2'd0, cache_rg_addr[31:12] } ;
  assign req_width_code_EQ_0_336_OR_req_width_code_EQ_1_ETC___d1372 =
	     req_width_code == 3'd0 ||
	     req_width_code == 3'd1 && !req_addr[0] ||
	     req_width_code == 3'd2 && req_addr[1:0] == 2'b0 ||
	     req_width_code == 3'd3 && req_addr[2:0] == 3'b0 ;
  assign req_width_code_EQ_0_336_OR_req_width_code_EQ_1_ETC___d1377 =
	     (req_width_code_EQ_0_336_OR_req_width_code_EQ_1_ETC___d1372 ||
	      req_width_code == 3'b100 && req_addr[3:0] == 4'b0) &&
	     NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 ;
  assign result__h20274 =
	     cache_rg_is_unsigned ?
	       { 64'd0,
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[127:64] } :
	       { {64{cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q17[63]}},
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q17 } ;
  assign result__h20342 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[7:0] } :
	       { {120{cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q3[7]}},
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q3 } ;
  assign result__h20380 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[15:8] } :
	       { {120{cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q6[7]}},
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q6 } ;
  assign result__h20413 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[23:16] } :
	       { {120{cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q7[7]}},
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q7 } ;
  assign result__h20446 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[31:24] } :
	       { {120{cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q9[7]}},
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q9 } ;
  assign result__h20479 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[39:32] } :
	       { {120{cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q10[7]}},
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q10 } ;
  assign result__h20512 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[47:40] } :
	       { {120{cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q13[7]}},
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q13 } ;
  assign result__h20545 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[55:48] } :
	       { {120{cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q14[7]}},
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q14 } ;
  assign result__h20578 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[63:56] } :
	       { {120{cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q16[7]}},
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q16 } ;
  assign result__h20611 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[71:64] } :
	       { {120{cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q18[7]}},
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q18 } ;
  assign result__h20644 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[79:72] } :
	       { {120{cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q21[7]}},
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q21 } ;
  assign result__h20677 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[87:80] } :
	       { {120{cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q22[7]}},
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q22 } ;
  assign result__h20710 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[95:88] } :
	       { {120{cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q24[7]}},
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q24 } ;
  assign result__h20743 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[103:96] } :
	       { {120{cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q25[7]}},
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q25 } ;
  assign result__h20776 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[111:104] } :
	       { {120{cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q28[7]}},
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q28 } ;
  assign result__h20809 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[119:112] } :
	       { {120{cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q29[7]}},
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q29 } ;
  assign result__h20842 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[127:120] } :
	       { {120{cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q34[7]}},
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q34 } ;
  assign result__h20897 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[15:0] } :
	       { {112{cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q4[15]}},
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q4 } ;
  assign result__h20930 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[31:16] } :
	       { {112{cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q8[15]}},
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q8 } ;
  assign result__h20963 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[47:32] } :
	       { {112{cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q11[15]}},
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q11 } ;
  assign result__h20996 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[63:48] } :
	       { {112{cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q15[15]}},
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q15 } ;
  assign result__h21029 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[79:64] } :
	       { {112{cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q19[15]}},
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q19 } ;
  assign result__h21062 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[95:80] } :
	       { {112{cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q23[15]}},
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q23 } ;
  assign result__h21095 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[111:96] } :
	       { {112{cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q26[15]}},
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q26 } ;
  assign result__h21128 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[127:112] } :
	       { {112{cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q30[15]}},
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q30 } ;
  assign result__h21175 =
	     cache_rg_is_unsigned ?
	       { 96'd0,
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[31:0] } :
	       { {96{cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q5[31]}},
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q5 } ;
  assign result__h21208 =
	     cache_rg_is_unsigned ?
	       { 96'd0,
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[63:32] } :
	       { {96{cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q12[31]}},
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q12 } ;
  assign result__h21241 =
	     cache_rg_is_unsigned ?
	       { 96'd0,
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[95:64] } :
	       { {96{cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q20[31]}},
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q20 } ;
  assign result__h21274 =
	     cache_rg_is_unsigned ?
	       { 96'd0,
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[127:96] } :
	       { {96{cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q27[31]}},
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q27 } ;
  assign result__h36809 =
	     cache_rg_is_unsigned ?
	       { 64'd0, cache_master_xactor_shim_rff_rv$port1__read[68:5] } :
	       { {64{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q40[63]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q40 } ;
  assign result__h36834 =
	     cache_rg_is_unsigned ?
	       { 64'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[132:69] } :
	       { {64{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q55[63]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q55 } ;
  assign result__h36892 =
	     cache_rg_is_unsigned ?
	       { 120'd0, cache_master_xactor_shim_rff_rv$port1__read[12:5] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q41[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q41 } ;
  assign result__h36928 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[20:13] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q44[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q44 } ;
  assign result__h36961 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[28:21] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q45[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q45 } ;
  assign result__h36994 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[36:29] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q47[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q47 } ;
  assign result__h37027 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[44:37] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q48[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q48 } ;
  assign result__h37060 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[52:45] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q51[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q51 } ;
  assign result__h37093 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[60:53] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q52[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q52 } ;
  assign result__h37126 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[68:61] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q53[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q53 } ;
  assign result__h37159 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[76:69] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q56[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q56 } ;
  assign result__h37192 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[84:77] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q59[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q59 } ;
  assign result__h37225 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[92:85] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q60[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q60 } ;
  assign result__h37258 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[100:93] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q63[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q63 } ;
  assign result__h37291 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[108:101] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q62[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q62 } ;
  assign result__h37324 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[116:109] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q66[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q66 } ;
  assign result__h37357 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[124:117] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q67[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q67 } ;
  assign result__h37390 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[132:125] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q69[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q69 } ;
  assign result__h37445 =
	     cache_rg_is_unsigned ?
	       { 112'd0, cache_master_xactor_shim_rff_rv$port1__read[20:5] } :
	       { {112{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q42[15]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q42 } ;
  assign result__h37478 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[36:21] } :
	       { {112{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q46[15]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q46 } ;
  assign result__h37511 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[52:37] } :
	       { {112{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q49[15]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q49 } ;
  assign result__h37544 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[68:53] } :
	       { {112{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q54[15]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q54 } ;
  assign result__h37577 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[84:69] } :
	       { {112{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q57[15]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q57 } ;
  assign result__h37610 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[100:85] } :
	       { {112{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q61[15]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q61 } ;
  assign result__h37643 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[116:101] } :
	       { {112{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q64[15]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q64 } ;
  assign result__h37676 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[132:117] } :
	       { {112{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q68[15]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q68 } ;
  assign result__h37723 =
	     cache_rg_is_unsigned ?
	       { 96'd0, cache_master_xactor_shim_rff_rv$port1__read[36:5] } :
	       { {96{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q43[31]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q43 } ;
  assign result__h37756 =
	     cache_rg_is_unsigned ?
	       { 96'd0, cache_master_xactor_shim_rff_rv$port1__read[68:37] } :
	       { {96{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q50[31]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q50 } ;
  assign result__h37789 =
	     cache_rg_is_unsigned ?
	       { 96'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[100:69] } :
	       { {96{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q58[31]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q58 } ;
  assign result__h37822 =
	     cache_rg_is_unsigned ?
	       { 96'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[132:101] } :
	       { {96{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q65[31]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q65 } ;
  assign result__h40403 = { 120'd0, x__h36881[7:0] } ;
  assign result__h41572 = { 120'd0, x__h36881[15:8] } ;
  assign result__h41604 = { 120'd0, x__h36881[23:16] } ;
  assign result__h41636 = { 120'd0, x__h36881[31:24] } ;
  assign result__h41668 = { 120'd0, x__h36881[39:32] } ;
  assign result__h41700 = { 120'd0, x__h36881[47:40] } ;
  assign result__h41732 = { 120'd0, x__h36881[55:48] } ;
  assign result__h41764 = { 120'd0, x__h36881[63:56] } ;
  assign result__h41796 = { 120'd0, x__h36881[71:64] } ;
  assign result__h41828 = { 120'd0, x__h36881[79:72] } ;
  assign result__h41860 = { 120'd0, x__h36881[87:80] } ;
  assign result__h41892 = { 120'd0, x__h36881[95:88] } ;
  assign result__h41924 = { 120'd0, x__h36881[103:96] } ;
  assign result__h41956 = { 120'd0, x__h36881[111:104] } ;
  assign result__h41988 = { 120'd0, x__h36881[119:112] } ;
  assign result__h42020 = { 120'd0, x__h36881[127:120] } ;
  assign result__h42074 = { 112'd0, x__h36881[15:0] } ;
  assign result__h42106 = { 112'd0, x__h36881[31:16] } ;
  assign result__h42138 = { 112'd0, x__h36881[47:32] } ;
  assign result__h42170 = { 112'd0, x__h36881[63:48] } ;
  assign result__h42202 = { 112'd0, x__h36881[79:64] } ;
  assign result__h42234 = { 112'd0, x__h36881[95:80] } ;
  assign result__h42266 = { 112'd0, x__h36881[111:96] } ;
  assign result__h42298 = { 112'd0, x__h36881[127:112] } ;
  assign result__h42344 = { 96'd0, x__h36881[31:0] } ;
  assign result__h42376 = { 96'd0, x__h36881[63:32] } ;
  assign result__h42408 = { 96'd0, x__h36881[95:64] } ;
  assign result__h42440 = { 96'd0, x__h36881[127:96] } ;
  assign result__h42494 = { 64'd0, x__h36881[63:0] } ;
  assign result__h42523 = { 64'd0, x__h36881[127:64] } ;
  assign result__h7428 =
	     cache_rg_is_unsigned ?
	       { 64'd0,
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[63:0] } :
	       { {64{cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q2[63]}},
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC__q2 } ;
  assign shift_bits__h32463 = { cache_rg_addr[3:0], 3'b0 } ;
  assign shift_bits__h39980 = { cache_rg_pa[3:0], 3'b0 } ;
  assign strobe128__h32521 = 16'b0000000000000001 << cache_rg_addr[3:0] ;
  assign strobe128__h32524 = 16'b0000000000000011 << cache_rg_addr[3:0] ;
  assign strobe128__h32527 = 16'b0000000000001111 << cache_rg_addr[3:0] ;
  assign strobe128__h32530 = 16'b0000000011111111 << cache_rg_addr[3:0] ;
  assign strobe128__h40038 = 16'b0000000000000001 << cache_rg_pa[3:0] ;
  assign strobe128__h40041 = 16'b0000000000000011 << cache_rg_pa[3:0] ;
  assign strobe128__h40044 = 16'b0000000000001111 << cache_rg_pa[3:0] ;
  assign strobe128__h40047 = 16'b0000000011111111 << cache_rg_pa[3:0] ;
  assign w1___1__h28422 = { 32'd0, x__h28520[31:0] } ;
  assign w1___1__h40223 = { 32'd0, x__h40321[31:0] } ;
  assign w1__h28166 =
	     (cache_rg_width_code == 3'd2) ?
	       w1___1__h28422 :
	       x__h28520[63:0] ;
  assign w1__h40133 =
	     (cache_rg_width_code == 3'd2) ?
	       w1___1__h40223 :
	       x__h40321[63:0] ;
  assign w2__h28168 =
	     (cache_rg_width_code == 3'd2) ?
	       { 32'd0, cache_rg_st_amo_val[31:0] } :
	       cache_rg_st_amo_val[63:0] ;
  assign word128__h39977 = { 64'd0, x__h40151 } ;
  assign x0321_BITS_31_TO_0__q70 = x__h40321[31:0] ;
  assign x8520_BITS_31_TO_0__q35 = x__h28520[31:0] ;
  assign x__h22615 =
	     (cache_rg_width_code == 3'd3 && cache_rg_st_amo_val[128]) ?
	       cache_ram_word128_set$DOB[129:128] | x__h28138 :
	       cache_ram_word128_set_b_read__49_BITS_129_TO_1_ETC___d540 ;
  assign x__h28138 = 2'd1 << x__h28210 ;
  assign x__h28210 = { 8'd0, cache_rg_addr[31:8] } ;
  assign x__h28350 =
	     (cache_rg_width_code == 3'd2) ?
	       new_st_val__h28355 :
	       _theResult_____2__h28174 ;
  assign x__h40151 =
	     (cache_rg_width_code == 3'd2) ?
	       new_st_val__h40156 :
	       _theResult_____2__h40141 ;
  assign y__h28191 = ~x__h28138 ;
  assign y__h7478 =
	     {130{cache_ram_state_and_ctag_cset$DOB[22] &&
		  cache_ram_state_and_ctag_cset_b_read__18_BITS__ETC___d124}} ;
  always@(cache_rg_width_code)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'd2, 3'd3: size_val__h39431 = cache_rg_width_code;
      default: size_val__h39431 = 3'b100;
    endcase
  end
  always@(cache_rg_width_code)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4:
	  _theResult___fst_val__h40057 = cache_rg_width_code;
      default: _theResult___fst_val__h40057 = 3'b111;
    endcase
  end
  always@(cache_rg_width_code or _theResult___fst__h25828)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'd2, 3'd3: x__h25904 = _theResult___fst__h25828;
      3'd4: x__h25904 = 128'd1;
      default: x__h25904 = 128'd0;
    endcase
  end
  always@(cache_rg_width_code or
	  strobe128__h32521 or
	  strobe128__h32524 or strobe128__h32527 or strobe128__h32530)
  begin
    case (cache_rg_width_code)
      3'd0: mem_req_wr_data_wstrb__h32594 = strobe128__h32521;
      3'd1: mem_req_wr_data_wstrb__h32594 = strobe128__h32524;
      3'd2: mem_req_wr_data_wstrb__h32594 = strobe128__h32527;
      3'd3: mem_req_wr_data_wstrb__h32594 = strobe128__h32530;
      3'd4: mem_req_wr_data_wstrb__h32594 = 16'b1111111111111111;
      default: mem_req_wr_data_wstrb__h32594 = 16'd0;
    endcase
  end
  always@(cache_rg_width_code or
	  strobe128__h40038 or
	  strobe128__h40041 or strobe128__h40044 or strobe128__h40047)
  begin
    case (cache_rg_width_code)
      3'd0: mem_req_wr_data_wstrb__h40111 = strobe128__h40038;
      3'd1: mem_req_wr_data_wstrb__h40111 = strobe128__h40041;
      3'd2: mem_req_wr_data_wstrb__h40111 = strobe128__h40044;
      3'd3: mem_req_wr_data_wstrb__h40111 = strobe128__h40047;
      3'd4: mem_req_wr_data_wstrb__h40111 = 16'b1111111111111111;
      default: mem_req_wr_data_wstrb__h40111 = 16'd0;
    endcase
  end
  always@(cache_rg_width_code or
	  cache_rg_st_amo_val or _theResult___snd_fst__h38582)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'd2, 3'd3:
	  mem_req_wr_data_wdata__h38573 = _theResult___snd_fst__h38582;
      default: mem_req_wr_data_wdata__h38573 = cache_rg_st_amo_val[127:0];
    endcase
  end
  always@(cache_rg_width_code or
	  cache_rg_st_amo_val or _theResult___snd_fst__h27399)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'd2, 3'd3:
	  mem_req_wr_data_wdata__h27390 = _theResult___snd_fst__h27399;
      default: mem_req_wr_data_wdata__h27390 = cache_rg_st_amo_val[127:0];
    endcase
  end
  always@(cache_rg_addr or
	  cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  _theResult___fst__h29526 =
	      { 64'd0,
		cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[63:0] };
      4'h8:
	  _theResult___fst__h29526 =
	      { 64'd0,
		cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[127:64] };
      default: _theResult___fst__h29526 = 128'd0;
    endcase
  end
  always@(cache_rg_addr or result__h7428 or result__h20274)
  begin
    case (cache_rg_addr[3:0])
      4'h0: _theResult___fst__h7426 = result__h7428;
      4'h8: _theResult___fst__h7426 = result__h20274;
      default: _theResult___fst__h7426 = 128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q31 =
	      { 120'd0,
		cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[7:0] };
      4'h1:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q31 =
	      { 120'd0,
		cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[15:8] };
      4'h2:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q31 =
	      { 120'd0,
		cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[23:16] };
      4'h3:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q31 =
	      { 120'd0,
		cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[31:24] };
      4'h4:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q31 =
	      { 120'd0,
		cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[39:32] };
      4'h5:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q31 =
	      { 120'd0,
		cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[47:40] };
      4'h6:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q31 =
	      { 120'd0,
		cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[55:48] };
      4'h7:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q31 =
	      { 120'd0,
		cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[63:56] };
      4'h8:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q31 =
	      { 120'd0,
		cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[71:64] };
      4'h9:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q31 =
	      { 120'd0,
		cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[79:72] };
      4'hA:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q31 =
	      { 120'd0,
		cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[87:80] };
      4'hB:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q31 =
	      { 120'd0,
		cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[95:88] };
      4'hC:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q31 =
	      { 120'd0,
		cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[103:96] };
      4'hD:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q31 =
	      { 120'd0,
		cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[111:104] };
      4'hE:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q31 =
	      { 120'd0,
		cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[119:112] };
      4'hF:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q31 =
	      { 120'd0,
		cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[127:120] };
    endcase
  end
  always@(cache_rg_addr or
	  cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q32 =
	      { 112'd0,
		cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[15:0] };
      4'h2:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q32 =
	      { 112'd0,
		cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[31:16] };
      4'h4:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q32 =
	      { 112'd0,
		cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[47:32] };
      4'h6:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q32 =
	      { 112'd0,
		cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[63:48] };
      4'h8:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q32 =
	      { 112'd0,
		cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[79:64] };
      4'hA:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q32 =
	      { 112'd0,
		cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[95:80] };
      4'hC:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q32 =
	      { 112'd0,
		cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[111:96] };
      4'hE:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q32 =
	      { 112'd0,
		cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[127:112] };
      default: CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q32 =
		   128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q33 =
	      { 96'd0,
		cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[31:0] };
      4'h4:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q33 =
	      { 96'd0,
		cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[63:32] };
      4'h8:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q33 =
	      { 96'd0,
		cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[95:64] };
      4'hC:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q33 =
	      { 96'd0,
		cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[127:96] };
      default: CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q33 =
		   128'd0;
    endcase
  end
  always@(cache_rg_width_code or
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q31 or
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q32 or
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q33 or
	  _theResult___fst__h29526 or
	  cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262)
  begin
    case (cache_rg_width_code)
      3'd0:
	  x__h28520 = CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q31;
      3'd1:
	  x__h28520 = CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q32;
      3'd2:
	  x__h28520 = CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q33;
      3'd3: x__h28520 = _theResult___fst__h29526;
      3'd4:
	  x__h28520 =
	      cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[127:0];
      default: x__h28520 = 128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h20897 or
	  result__h20930 or
	  result__h20963 or
	  result__h20996 or
	  result__h21029 or
	  result__h21062 or result__h21095 or result__h21128)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d407 =
	      result__h20897;
      4'h2:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d407 =
	      result__h20930;
      4'h4:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d407 =
	      result__h20963;
      4'h6:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d407 =
	      result__h20996;
      4'h8:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d407 =
	      result__h21029;
      4'hA:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d407 =
	      result__h21062;
      4'hC:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d407 =
	      result__h21095;
      4'hE:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d407 =
	      result__h21128;
      default: IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d407 =
		   128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h21175 or
	  result__h21208 or result__h21241 or result__h21274)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d427 =
	      result__h21175;
      4'h4:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d427 =
	      result__h21208;
      4'h8:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d427 =
	      result__h21241;
      4'hC:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d427 =
	      result__h21274;
      default: IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d427 =
		   128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h20342 or
	  result__h20380 or
	  result__h20413 or
	  result__h20446 or
	  result__h20479 or
	  result__h20512 or
	  result__h20545 or
	  result__h20578 or
	  result__h20611 or
	  result__h20644 or
	  result__h20677 or
	  result__h20710 or
	  result__h20743 or
	  result__h20776 or result__h20809 or result__h20842)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d367 =
	      result__h20342;
      4'h1:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d367 =
	      result__h20380;
      4'h2:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d367 =
	      result__h20413;
      4'h3:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d367 =
	      result__h20446;
      4'h4:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d367 =
	      result__h20479;
      4'h5:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d367 =
	      result__h20512;
      4'h6:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d367 =
	      result__h20545;
      4'h7:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d367 =
	      result__h20578;
      4'h8:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d367 =
	      result__h20611;
      4'h9:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d367 =
	      result__h20644;
      4'hA:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d367 =
	      result__h20677;
      4'hB:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d367 =
	      result__h20710;
      4'hC:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d367 =
	      result__h20743;
      4'hD:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d367 =
	      result__h20776;
      4'hE:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d367 =
	      result__h20809;
      4'hF:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d367 =
	      result__h20842;
    endcase
  end
  always@(cache_rg_width_code or
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d367 or
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d407 or
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d427 or
	  _theResult___fst__h7426 or
	  cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262)
  begin
    case (cache_rg_width_code)
      3'd0:
	  x__h20331 =
	      IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d367;
      3'd1:
	  x__h20331 =
	      IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d407;
      3'd2:
	  x__h20331 =
	      IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d427;
      3'd3: x__h20331 = _theResult___fst__h7426;
      3'd4:
	  x__h20331 =
	      cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262[127:0];
      default: x__h20331 = 128'd0;
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or cache_rg_st_amo_val)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d631 =
	      { cache_ram_word128_set$DOB[127:32],
		cache_rg_st_amo_val[31:0] };
      4'h4:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d631 =
	      { cache_ram_word128_set$DOB[127:64],
		cache_rg_st_amo_val[31:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h8:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d631 =
	      { cache_ram_word128_set$DOB[127:96],
		cache_rg_st_amo_val[31:0],
		cache_ram_word128_set$DOB[63:0] };
      4'hC:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d631 =
	      { cache_rg_st_amo_val[31:0], cache_ram_word128_set$DOB[95:0] };
      default: IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d631 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or cache_rg_st_amo_val)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d605 =
	      { cache_ram_word128_set$DOB[127:8], cache_rg_st_amo_val[7:0] };
      4'h1:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d605 =
	      { cache_ram_word128_set$DOB[127:16],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[7:0] };
      4'h2:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d605 =
	      { cache_ram_word128_set$DOB[127:24],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[15:0] };
      4'h3:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d605 =
	      { cache_ram_word128_set$DOB[127:32],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[23:0] };
      4'h4:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d605 =
	      { cache_ram_word128_set$DOB[127:40],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h5:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d605 =
	      { cache_ram_word128_set$DOB[127:48],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[39:0] };
      4'h6:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d605 =
	      { cache_ram_word128_set$DOB[127:56],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[47:0] };
      4'h7:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d605 =
	      { cache_ram_word128_set$DOB[127:64],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[55:0] };
      4'h8:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d605 =
	      { cache_ram_word128_set$DOB[127:72],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[63:0] };
      4'h9:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d605 =
	      { cache_ram_word128_set$DOB[127:80],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[71:0] };
      4'hA:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d605 =
	      { cache_ram_word128_set$DOB[127:88],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[79:0] };
      4'hB:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d605 =
	      { cache_ram_word128_set$DOB[127:96],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[87:0] };
      4'hC:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d605 =
	      { cache_ram_word128_set$DOB[127:104],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[95:0] };
      4'hD:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d605 =
	      { cache_ram_word128_set$DOB[127:112],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[103:0] };
      4'hE:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d605 =
	      { cache_ram_word128_set$DOB[127:120],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[111:0] };
      4'hF:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d605 =
	      { cache_rg_st_amo_val[7:0], cache_ram_word128_set$DOB[119:0] };
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or cache_rg_st_amo_val)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d622 =
	      { cache_ram_word128_set$DOB[127:16],
		cache_rg_st_amo_val[15:0] };
      4'h2:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d622 =
	      { cache_ram_word128_set$DOB[127:32],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[15:0] };
      4'h4:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d622 =
	      { cache_ram_word128_set$DOB[127:48],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h6:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d622 =
	      { cache_ram_word128_set$DOB[127:64],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[47:0] };
      4'h8:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d622 =
	      { cache_ram_word128_set$DOB[127:80],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[63:0] };
      4'hA:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d622 =
	      { cache_ram_word128_set$DOB[127:96],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[79:0] };
      4'hC:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d622 =
	      { cache_ram_word128_set$DOB[127:112],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[95:0] };
      4'hE:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d622 =
	      { cache_rg_st_amo_val[15:0], cache_ram_word128_set$DOB[111:0] };
      default: IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d622 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or cache_rg_st_amo_val)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q36 =
	      { cache_ram_word128_set$DOB[127:64],
		cache_rg_st_amo_val[63:0] };
      4'h8:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q36 =
	      { cache_rg_st_amo_val[63:0], cache_ram_word128_set$DOB[63:0] };
      default: CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q36 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_width_code or
	  cache_ram_word128_set$DOB or
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d605 or
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d622 or
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d631 or
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q36 or
	  cache_rg_st_amo_val)
  begin
    case (cache_rg_width_code)
      3'd0:
	  x__h22733 =
	      IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d605;
      3'd1:
	  x__h22733 =
	      IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d622;
      3'd2:
	  x__h22733 =
	      IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d631;
      3'd3:
	  x__h22733 = CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q36;
      3'd4: x__h22733 = cache_rg_st_amo_val[127:0];
      default: x__h22733 = cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_amo_funct7 or
	  new_st_val__h29661 or
	  new_st_val__h28459 or
	  w2__h28168 or
	  new_st_val__h29621 or
	  new_st_val__h29631 or
	  new_st_val__h29626 or
	  new_st_val__h29653 or new_st_val__h29636 or new_st_val__h29644)
  begin
    case (cache_rg_amo_funct7[6:2])
      5'b0: _theResult_____2__h28174 = new_st_val__h28459;
      5'b00001: _theResult_____2__h28174 = w2__h28168;
      5'b00100: _theResult_____2__h28174 = new_st_val__h29621;
      5'b01000: _theResult_____2__h28174 = new_st_val__h29631;
      5'b01100: _theResult_____2__h28174 = new_st_val__h29626;
      5'b10000: _theResult_____2__h28174 = new_st_val__h29653;
      5'b11000: _theResult_____2__h28174 = new_st_val__h29636;
      5'b11100: _theResult_____2__h28174 = new_st_val__h29644;
      default: _theResult_____2__h28174 = new_st_val__h29661;
    endcase
  end
  always@(cache_rg_width_code or x__h28350 or _theResult___snd_fst__h32602)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'd2, 3'd3:
	  mem_req_wr_data_wdata__h32593 = _theResult___snd_fst__h32602;
      default: mem_req_wr_data_wdata__h32593 = { 64'd0, x__h28350 };
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or x__h28350)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d741 =
	      { cache_ram_word128_set$DOB[127:32], x__h28350[31:0] };
      4'h4:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d741 =
	      { cache_ram_word128_set$DOB[127:64],
		x__h28350[31:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h8:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d741 =
	      { cache_ram_word128_set$DOB[127:96],
		x__h28350[31:0],
		cache_ram_word128_set$DOB[63:0] };
      4'hC:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d741 =
	      { x__h28350[31:0], cache_ram_word128_set$DOB[95:0] };
      default: IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d741 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or x__h28350)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d732 =
	      { cache_ram_word128_set$DOB[127:16], x__h28350[15:0] };
      4'h2:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d732 =
	      { cache_ram_word128_set$DOB[127:32],
		x__h28350[15:0],
		cache_ram_word128_set$DOB[15:0] };
      4'h4:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d732 =
	      { cache_ram_word128_set$DOB[127:48],
		x__h28350[15:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h6:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d732 =
	      { cache_ram_word128_set$DOB[127:64],
		x__h28350[15:0],
		cache_ram_word128_set$DOB[47:0] };
      4'h8:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d732 =
	      { cache_ram_word128_set$DOB[127:80],
		x__h28350[15:0],
		cache_ram_word128_set$DOB[63:0] };
      4'hA:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d732 =
	      { cache_ram_word128_set$DOB[127:96],
		x__h28350[15:0],
		cache_ram_word128_set$DOB[79:0] };
      4'hC:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d732 =
	      { cache_ram_word128_set$DOB[127:112],
		x__h28350[15:0],
		cache_ram_word128_set$DOB[95:0] };
      4'hE:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d732 =
	      { x__h28350[15:0], cache_ram_word128_set$DOB[111:0] };
      default: IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d732 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or x__h28350)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d715 =
	      { cache_ram_word128_set$DOB[127:8], x__h28350[7:0] };
      4'h1:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d715 =
	      { cache_ram_word128_set$DOB[127:16],
		x__h28350[7:0],
		cache_ram_word128_set$DOB[7:0] };
      4'h2:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d715 =
	      { cache_ram_word128_set$DOB[127:24],
		x__h28350[7:0],
		cache_ram_word128_set$DOB[15:0] };
      4'h3:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d715 =
	      { cache_ram_word128_set$DOB[127:32],
		x__h28350[7:0],
		cache_ram_word128_set$DOB[23:0] };
      4'h4:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d715 =
	      { cache_ram_word128_set$DOB[127:40],
		x__h28350[7:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h5:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d715 =
	      { cache_ram_word128_set$DOB[127:48],
		x__h28350[7:0],
		cache_ram_word128_set$DOB[39:0] };
      4'h6:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d715 =
	      { cache_ram_word128_set$DOB[127:56],
		x__h28350[7:0],
		cache_ram_word128_set$DOB[47:0] };
      4'h7:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d715 =
	      { cache_ram_word128_set$DOB[127:64],
		x__h28350[7:0],
		cache_ram_word128_set$DOB[55:0] };
      4'h8:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d715 =
	      { cache_ram_word128_set$DOB[127:72],
		x__h28350[7:0],
		cache_ram_word128_set$DOB[63:0] };
      4'h9:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d715 =
	      { cache_ram_word128_set$DOB[127:80],
		x__h28350[7:0],
		cache_ram_word128_set$DOB[71:0] };
      4'hA:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d715 =
	      { cache_ram_word128_set$DOB[127:88],
		x__h28350[7:0],
		cache_ram_word128_set$DOB[79:0] };
      4'hB:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d715 =
	      { cache_ram_word128_set$DOB[127:96],
		x__h28350[7:0],
		cache_ram_word128_set$DOB[87:0] };
      4'hC:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d715 =
	      { cache_ram_word128_set$DOB[127:104],
		x__h28350[7:0],
		cache_ram_word128_set$DOB[95:0] };
      4'hD:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d715 =
	      { cache_ram_word128_set$DOB[127:112],
		x__h28350[7:0],
		cache_ram_word128_set$DOB[103:0] };
      4'hE:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d715 =
	      { cache_ram_word128_set$DOB[127:120],
		x__h28350[7:0],
		cache_ram_word128_set$DOB[111:0] };
      4'hF:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d715 =
	      { x__h28350[7:0], cache_ram_word128_set$DOB[119:0] };
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or x__h28350)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q37 =
	      { cache_ram_word128_set$DOB[127:64], x__h28350 };
      4'h8:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q37 =
	      { x__h28350, cache_ram_word128_set$DOB[63:0] };
      default: CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q37 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_width_code or
	  cache_ram_word128_set$DOB or
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d715 or
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d732 or
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d741 or
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q37 or
	  x__h28350)
  begin
    case (cache_rg_width_code)
      3'd0:
	  x__h28230 =
	      IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d715;
      3'd1:
	  x__h28230 =
	      IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d732;
      3'd2:
	  x__h28230 =
	      IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d741;
      3'd3:
	  x__h28230 = CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q37;
      3'd4: x__h28230 = { 64'd0, x__h28350 };
      default: x__h28230 = cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_addr or result__h36809 or result__h36834)
  begin
    case (cache_rg_addr[3:0])
      4'h0: _theResult___fst__h36807 = result__h36809;
      4'h8: _theResult___fst__h36807 = result__h36834;
      default: _theResult___fst__h36807 = 128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h37723 or
	  result__h37756 or result__h37789 or result__h37822)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1083 =
	      result__h37723;
      4'h4:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1083 =
	      result__h37756;
      4'h8:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1083 =
	      result__h37789;
      4'hC:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1083 =
	      result__h37822;
      default: IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1083 =
		   128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h37445 or
	  result__h37478 or
	  result__h37511 or
	  result__h37544 or
	  result__h37577 or
	  result__h37610 or result__h37643 or result__h37676)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1063 =
	      result__h37445;
      4'h2:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1063 =
	      result__h37478;
      4'h4:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1063 =
	      result__h37511;
      4'h6:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1063 =
	      result__h37544;
      4'h8:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1063 =
	      result__h37577;
      4'hA:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1063 =
	      result__h37610;
      4'hC:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1063 =
	      result__h37643;
      4'hE:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1063 =
	      result__h37676;
      default: IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1063 =
		   128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h36892 or
	  result__h36928 or
	  result__h36961 or
	  result__h36994 or
	  result__h37027 or
	  result__h37060 or
	  result__h37093 or
	  result__h37126 or
	  result__h37159 or
	  result__h37192 or
	  result__h37225 or
	  result__h37258 or
	  result__h37291 or
	  result__h37324 or result__h37357 or result__h37390)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1023 =
	      result__h36892;
      4'h1:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1023 =
	      result__h36928;
      4'h2:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1023 =
	      result__h36961;
      4'h3:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1023 =
	      result__h36994;
      4'h4:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1023 =
	      result__h37027;
      4'h5:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1023 =
	      result__h37060;
      4'h6:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1023 =
	      result__h37093;
      4'h7:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1023 =
	      result__h37126;
      4'h8:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1023 =
	      result__h37159;
      4'h9:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1023 =
	      result__h37192;
      4'hA:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1023 =
	      result__h37225;
      4'hB:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1023 =
	      result__h37258;
      4'hC:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1023 =
	      result__h37291;
      4'hD:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1023 =
	      result__h37324;
      4'hE:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1023 =
	      result__h37357;
      4'hF:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1023 =
	      result__h37390;
    endcase
  end
  always@(cache_rg_width_code or
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1023 or
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1063 or
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1083 or
	  _theResult___fst__h36807 or
	  cache_master_xactor_shim_rff_rv$port1__read)
  begin
    case (cache_rg_width_code)
      3'd0:
	  x__h36881 =
	      IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1023;
      3'd1:
	  x__h36881 =
	      IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1063;
      3'd2:
	  x__h36881 =
	      IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1083;
      3'd3: x__h36881 = _theResult___fst__h36807;
      3'd4: x__h36881 = cache_master_xactor_shim_rff_rv$port1__read[132:5];
      default: x__h36881 = 128'd0;
    endcase
  end
  always@(cache_rg_addr or result__h42494 or result__h42523)
  begin
    case (cache_rg_addr[3:0])
      4'h0: _theResult___fst__h42492 = result__h42494;
      4'h8: _theResult___fst__h42492 = result__h42523;
      default: _theResult___fst__h42492 = 128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h42344 or
	  result__h42376 or result__h42408 or result__h42440)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1231 =
	      result__h42344;
      4'h4:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1231 =
	      result__h42376;
      4'h8:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1231 =
	      result__h42408;
      4'hC:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1231 =
	      result__h42440;
      default: IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1231 =
		   128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h40403 or
	  result__h41572 or
	  result__h41604 or
	  result__h41636 or
	  result__h41668 or
	  result__h41700 or
	  result__h41732 or
	  result__h41764 or
	  result__h41796 or
	  result__h41828 or
	  result__h41860 or
	  result__h41892 or
	  result__h41924 or
	  result__h41956 or result__h41988 or result__h42020)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1195 =
	      result__h40403;
      4'h1:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1195 =
	      result__h41572;
      4'h2:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1195 =
	      result__h41604;
      4'h3:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1195 =
	      result__h41636;
      4'h4:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1195 =
	      result__h41668;
      4'h5:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1195 =
	      result__h41700;
      4'h6:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1195 =
	      result__h41732;
      4'h7:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1195 =
	      result__h41764;
      4'h8:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1195 =
	      result__h41796;
      4'h9:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1195 =
	      result__h41828;
      4'hA:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1195 =
	      result__h41860;
      4'hB:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1195 =
	      result__h41892;
      4'hC:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1195 =
	      result__h41924;
      4'hD:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1195 =
	      result__h41956;
      4'hE:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1195 =
	      result__h41988;
      4'hF:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1195 =
	      result__h42020;
    endcase
  end
  always@(cache_rg_addr or
	  result__h42074 or
	  result__h42106 or
	  result__h42138 or
	  result__h42170 or
	  result__h42202 or
	  result__h42234 or result__h42266 or result__h42298)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1219 =
	      result__h42074;
      4'h2:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1219 =
	      result__h42106;
      4'h4:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1219 =
	      result__h42138;
      4'h6:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1219 =
	      result__h42170;
      4'h8:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1219 =
	      result__h42202;
      4'hA:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1219 =
	      result__h42234;
      4'hC:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1219 =
	      result__h42266;
      4'hE:
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1219 =
	      result__h42298;
      default: IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1219 =
		   128'd0;
    endcase
  end
  always@(cache_rg_width_code or
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1195 or
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1219 or
	  IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1231 or
	  _theResult___fst__h42492 or x__h36881)
  begin
    case (cache_rg_width_code)
      3'd0:
	  x__h40321 =
	      IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1195;
      3'd1:
	  x__h40321 =
	      IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1219;
      3'd2:
	  x__h40321 =
	      IF_cache_rg_addr_04_BITS_3_TO_0_46_EQ_0x0_96_T_ETC___d1231;
      3'd3: x__h40321 = _theResult___fst__h42492;
      3'd4: x__h40321 = x__h36881;
      default: x__h40321 = 128'd0;
    endcase
  end
  always@(cache_rg_amo_funct7 or
	  new_st_val__h42629 or
	  new_st_val__h40260 or
	  w2__h28168 or
	  new_st_val__h42589 or
	  new_st_val__h42599 or
	  new_st_val__h42594 or
	  new_st_val__h42621 or new_st_val__h42604 or new_st_val__h42612)
  begin
    case (cache_rg_amo_funct7[6:2])
      5'b0: _theResult_____2__h40141 = new_st_val__h40260;
      5'b00001: _theResult_____2__h40141 = w2__h28168;
      5'b00100: _theResult_____2__h40141 = new_st_val__h42589;
      5'b01000: _theResult_____2__h40141 = new_st_val__h42599;
      5'b01100: _theResult_____2__h40141 = new_st_val__h42594;
      5'b10000: _theResult_____2__h40141 = new_st_val__h42621;
      5'b11000: _theResult_____2__h40141 = new_st_val__h42604;
      5'b11100: _theResult_____2__h40141 = new_st_val__h42612;
      default: _theResult_____2__h40141 = new_st_val__h42629;
    endcase
  end
  always@(cache_rg_width_code or
	  word128__h39977 or _theResult___snd_fst__h40119)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'd2, 3'd3:
	  mem_req_wr_data_wdata__h40110 = _theResult___snd_fst__h40119;
      default: mem_req_wr_data_wdata__h40110 = word128__h39977;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cache_cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	cache_crg_sb_to_load_delay <= `BSV_ASSIGNMENT_DELAY 11'd0;
	cache_ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY 4'd0;
	cache_master_xactor_clearing <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_master_xactor_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	    99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
	cache_master_xactor_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	    99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
	cache_master_xactor_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY 8'd42;
	cache_master_xactor_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	    139'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	cache_master_xactor_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	    148'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	cache_rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY 6'd0;
	cache_rg_lower_word64_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_state <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (cache_cfg_verbosity$EN)
	  cache_cfg_verbosity <= `BSV_ASSIGNMENT_DELAY
	      cache_cfg_verbosity$D_IN;
	if (cache_crg_sb_to_load_delay$EN)
	  cache_crg_sb_to_load_delay <= `BSV_ASSIGNMENT_DELAY
	      cache_crg_sb_to_load_delay$D_IN;
	if (cache_ctr_wr_rsps_pending_crg$EN)
	  cache_ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY
	      cache_ctr_wr_rsps_pending_crg$D_IN;
	if (cache_master_xactor_clearing$EN)
	  cache_master_xactor_clearing <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_clearing$D_IN;
	if (cache_master_xactor_shim_arff_rv$EN)
	  cache_master_xactor_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_arff_rv$D_IN;
	if (cache_master_xactor_shim_awff_rv$EN)
	  cache_master_xactor_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_awff_rv$D_IN;
	if (cache_master_xactor_shim_bff_rv$EN)
	  cache_master_xactor_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_bff_rv$D_IN;
	if (cache_master_xactor_shim_rff_rv$EN)
	  cache_master_xactor_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_rff_rv$D_IN;
	if (cache_master_xactor_shim_wff_rv$EN)
	  cache_master_xactor_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_wff_rv$D_IN;
	if (cache_rg_cset_in_cache$EN)
	  cache_rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_cset_in_cache$D_IN;
	if (cache_rg_lower_word64_full$EN)
	  cache_rg_lower_word64_full <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_lower_word64_full$D_IN;
	if (cache_rg_lrsc_valid$EN)
	  cache_rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_lrsc_valid$D_IN;
	if (cache_rg_state$EN)
	  cache_rg_state <= `BSV_ASSIGNMENT_DELAY cache_rg_state$D_IN;
      end
    if (cache_rg_addr$EN)
      cache_rg_addr <= `BSV_ASSIGNMENT_DELAY cache_rg_addr$D_IN;
    if (cache_rg_amo_funct7$EN)
      cache_rg_amo_funct7 <= `BSV_ASSIGNMENT_DELAY cache_rg_amo_funct7$D_IN;
    if (cache_rg_error_during_refill$EN)
      cache_rg_error_during_refill <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_error_during_refill$D_IN;
    if (cache_rg_exc_code$EN)
      cache_rg_exc_code <= `BSV_ASSIGNMENT_DELAY cache_rg_exc_code$D_IN;
    if (cache_rg_is_unsigned$EN)
      cache_rg_is_unsigned <= `BSV_ASSIGNMENT_DELAY cache_rg_is_unsigned$D_IN;
    if (cache_rg_ld_val$EN)
      cache_rg_ld_val <= `BSV_ASSIGNMENT_DELAY cache_rg_ld_val$D_IN;
    if (cache_rg_lower_word64$EN)
      cache_rg_lower_word64 <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_lower_word64$D_IN;
    if (cache_rg_lrsc_pa$EN)
      cache_rg_lrsc_pa <= `BSV_ASSIGNMENT_DELAY cache_rg_lrsc_pa$D_IN;
    if (cache_rg_op$EN) cache_rg_op <= `BSV_ASSIGNMENT_DELAY cache_rg_op$D_IN;
    if (cache_rg_pa$EN) cache_rg_pa <= `BSV_ASSIGNMENT_DELAY cache_rg_pa$D_IN;
    if (cache_rg_pte_pa$EN)
      cache_rg_pte_pa <= `BSV_ASSIGNMENT_DELAY cache_rg_pte_pa$D_IN;
    if (cache_rg_st_amo_val$EN)
      cache_rg_st_amo_val <= `BSV_ASSIGNMENT_DELAY cache_rg_st_amo_val$D_IN;
    if (cache_rg_width_code$EN)
      cache_rg_width_code <= `BSV_ASSIGNMENT_DELAY cache_rg_width_code$D_IN;
    if (cache_rg_word128_set_in_cache$EN)
      cache_rg_word128_set_in_cache <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_word128_set_in_cache$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cache_cfg_verbosity = 4'hA;
    cache_crg_sb_to_load_delay = 11'h2AA;
    cache_ctr_wr_rsps_pending_crg = 4'hA;
    cache_master_xactor_clearing = 1'h0;
    cache_master_xactor_shim_arff_rv = 99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    cache_master_xactor_shim_awff_rv = 99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    cache_master_xactor_shim_bff_rv = 8'hAA;
    cache_master_xactor_shim_rff_rv =
	139'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    cache_master_xactor_shim_wff_rv =
	148'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    cache_rg_addr = 32'hAAAAAAAA;
    cache_rg_amo_funct7 = 7'h2A;
    cache_rg_cset_in_cache = 6'h2A;
    cache_rg_error_during_refill = 1'h0;
    cache_rg_exc_code = 6'h2A;
    cache_rg_is_unsigned = 1'h0;
    cache_rg_ld_val = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    cache_rg_lower_word64 = 64'hAAAAAAAAAAAAAAAA;
    cache_rg_lower_word64_full = 1'h0;
    cache_rg_lrsc_pa = 32'hAAAAAAAA;
    cache_rg_lrsc_valid = 1'h0;
    cache_rg_op = 2'h2;
    cache_rg_pa = 32'hAAAAAAAA;
    cache_rg_pte_pa = 32'hAAAAAAAA;
    cache_rg_st_amo_val = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    cache_rg_state = 4'hA;
    cache_rg_width_code = 3'h2;
    cache_rg_word128_set_in_cache = 8'hAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 &&
	  cache_cfg_verbosity != 4'd0 &&
	  !cache_f_reset_reqs$D_OUT)
	begin
	  v__h5574 = $stime;
	  #0;
	end
    v__h5568 = v__h5574 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 &&
	  cache_cfg_verbosity != 4'd0 &&
	  !cache_f_reset_reqs$D_OUT)
	$display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		 v__h5568,
		 "I_MMU_Cache",
		 $signed(32'd64),
		 $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_f_reset_reqs$D_OUT)
	begin
	  v__h5677 = $stime;
	  #0;
	end
    v__h5671 = v__h5677 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_f_reset_reqs$D_OUT)
	$display("%0d: %s.rl_reset: Flushed", v__h5671, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h6133 = $stime;
	  #0;
	end
    v__h6127 = v__h6133 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h",
		 v__h6127,
		 "I_MMU_Cache",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("        eaddr = {CTag 0x%0h  CSet 0x%0h  Word128 0x%0h  Byte 0x%0h}",
		 pa_ctag__h7030,
		 cache_rg_addr[11:6],
		 cache_rg_addr[5:4],
		 cache_rg_addr[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("        CSet 0x%0x: (state, tag):", cache_rg_addr[11:6]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(" (");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_ram_state_and_ctag_cset$DOB[22])
	$write("CTAG_CLEAN");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  !cache_ram_state_and_ctag_cset$DOB[22])
	$write("CTAG_EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_ram_state_and_ctag_cset$DOB[22])
	$write(", 0x%0x", cache_ram_state_and_ctag_cset$DOB[21:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  !cache_ram_state_and_ctag_cset$DOB[22])
	$write(", --");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(")");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("        CSet 0x%0x, Word128 0x%0x: ",
	       cache_rg_addr[11:6],
	       cache_rg_addr[5:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(" 0x%0x", cache_ram_word128_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("    TLB result: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("VM_Xlate_Result { ", "outcome: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("VM_XLATE_OK");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "pa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 6'h2A, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_rg_op_9_EQ_0_0_OR_cache_rg_op_9_EQ_2_1_A_ETC___d459)
	begin
	  v__h21474 = $stime;
	  #0;
	end
    v__h21468 = v__h21474 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_rg_op_9_EQ_0_0_OR_cache_rg_op_9_EQ_2_1_A_ETC___d459)
	$display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		 v__h21468,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262,
		 130'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct7[6:2] == 5'b00010 &&
	  cache_ram_state_and_ctag_cset$DOB[22] &&
	  cache_ram_state_and_ctag_cset_b_read__18_BITS__ETC___d124 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("        AMO LR: reserving PA 0x%0h", cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_rg_op_9_EQ_0_0_OR_cache_rg_op_9_EQ_2_1_A_ETC___d459)
	$display("        Read-hit: addr 0x%0h word128 0x%0h",
		 cache_rg_addr,
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_rg_op_9_EQ_0_0_OR_cache_rg_op_9_EQ_2_1_A_ETC___d472)
	$display("        Read Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct7_2_BITS_6_TO_2_3_EQ_0b10_4__ETC___d476)
	$display("        AMO LR: cache refill: cancelling LR/SC reservation for PA 0x%0h",
		 cache_rg_lrsc_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_rg_op == 2'd1 &&
	  cache_rg_addr_04_EQ_cache_rg_lrsc_pa_03___d165 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("        ST: cancelling LR/SC reservation for PA",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct7[6:2] == 5'b00011 &&
	  cache_rg_lrsc_valid &&
	  !cache_rg_lrsc_pa_03_EQ_cache_rg_addr_04___d105 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("        AMO SC: fail: reserved addr 0x%0h, this address 0x%0h",
		 cache_rg_lrsc_pa,
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct7[6:2] == 5'b00011 &&
	  !cache_rg_lrsc_valid &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("        AMO SC: fail due to invalid LR/SC reservation");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct7[6:2] == 5'b00011 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("        AMO SC result = %0d", lrsc_result__h21864);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d813)
	$display("        Write-Cache-Hit: pa 0x%0h word128 0x%0h",
		 cache_rg_addr,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d813)
	$write("        New Word128_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d813)
	$write("        CSet 0x%0x, Word128 0x%0x: ",
	       cache_rg_addr[11:6],
	       cache_rg_addr[5:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d813)
	$write(" 0x%0x", { x__h22615, x__h22733 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d813)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  (cache_rg_op == 2'd1 ||
	   cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	  NOT_cache_rg_op_9_EQ_2_1_33_OR_NOT_cache_rg_am_ETC___d815)
	$display("        Write-Cache-Miss: pa 0x%0h word128 0x%0h",
		 cache_rg_addr,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d821)
	$display("        Write-Cache-Hit/Miss: eaddr 0x%0h word128 0x%0h",
		 cache_rg_addr,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d826)
	begin
	  v__h27708 = $stime;
	  #0;
	end
    v__h27702 = v__h27708 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d826)
	$display("%0d: ERROR: CreditCounter: overflow", v__h27702);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d826)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d821)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d821)
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d821)
	$write("'h%h", 5'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d821)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d821)
	$write("'h%h", mem_req_wr_addr_awaddr__h32456);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d821)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d821)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d821)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d821)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d821)
	$write("'h%h", _theResult___fst_val__h40057, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d821)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d821)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d821)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d821)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d821)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d821)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d821)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d821)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d821)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d821)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d821)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d821)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d821)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d821)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d821)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d821)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d821)
	$write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d821)
	$write("'h%h", mem_req_wr_data_wdata__h27390);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d821)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d821)
	$write("'h%h", mem_req_wr_data_wstrb__h32594);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d821)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d821)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d821)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d821)
	$write("'h%h", mem_req_wr_data_wuser__h27393, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d821)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_9_EQ_0_0_32_AND_NOT_cache_rg_o_ETC___d821)
	$display("        => rl_write_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_rg_op_9_EQ_2_1_AND_cache_rg_amo_funct7_2_ETC___d832)
	begin
	  v__h26947 = $stime;
	  #0;
	end
    v__h26941 = v__h26947 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_rg_op_9_EQ_2_1_AND_cache_rg_amo_funct7_2_ETC___d832)
	$display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		 v__h26941,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 130'd1,
		 130'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_rg_op_9_EQ_2_1_AND_cache_rg_amo_funct7_2_ETC___d832)
	$display("        AMO SC: Fail response for addr 0x%0h",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_9_EQ_1_7_73_AND_NOT_cache_rg_o_ETC___d836)
	$display("        AMO Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d841)
	$display("        AMO: addr 0x%0h amo_f7 0x%0h width_code %0d is_unsigned %0d rs2_val 0x%0h",
		 cache_rg_addr,
		 cache_rg_amo_funct7,
		 cache_rg_width_code,
		 cache_rg_is_unsigned,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d841)
	$display("          PA 0x%0h ", cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d841)
	$display("          Cache word128 0x%0h, load-result 0x%0h",
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262,
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d841)
	$display("          0x%0h  op  0x%0h -> 0x%0h",
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262,
		 cache_ram_word128_set_b_read__49_AND_cache_ram_ETC___d262,
		 { 65'd0, x__h28350 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d841)
	$write("          New Word128_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d841)
	$write("        CSet 0x%0x, Word128 0x%0x: ",
	       cache_rg_addr[11:6],
	       cache_rg_addr[5:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d841)
	$write(" 0x%0x",
	       { cache_ram_word128_set_b_read__49_BITS_129_TO_1_ETC___d540,
		 x__h28230 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d841)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d846)
	begin
	  v__h32878 = $stime;
	  #0;
	end
    v__h32872 = v__h32878 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d846)
	$display("%0d: ERROR: CreditCounter: overflow", v__h32872);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d846)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d841)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d841)
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d841)
	$write("'h%h", 5'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d841)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d841)
	$write("'h%h", mem_req_wr_addr_awaddr__h32456);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d841)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d841)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d841)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d841)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d841)
	$write("'h%h", _theResult___fst_val__h40057, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d841)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d841)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d841)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d841)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d841)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d841)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d841)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d841)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d841)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d841)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d841)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d841)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d841)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d841)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d841)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d841)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d841)
	$write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d841)
	$write("'h%h", mem_req_wr_data_wdata__h32593);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d841)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d841)
	$write("'h%h", mem_req_wr_data_wstrb__h32594);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d841)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d841)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d841)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d841)
	$write("'h%h", 2'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__4_AND_cache_dw_commit_wg_ETC___d841)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_9_EQ_1_7_73_AND_NOT_cache_rg_o_ETC___d850)
	$display("        AMO_op: cancelling LR/SC reservation for PA",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_rereq &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("    fa_req_ram_B tagCSet [0x%0x] word128_set [0x%0d]",
		 cache_rg_addr[11:6],
		 cache_rg_addr[11:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_maintain_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h38241 = $stime;
	  #0;
	end
    v__h38235 = v__h38241 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_maintain_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		 v__h38235,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 cache_rg_ld_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h38330 = $stime;
	  #0;
	end
    v__h38324 = v__h38330 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s: rl_io_write_req; width_code 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		 v__h38324,
		 "I_MMU_Cache",
		 cache_rg_width_code,
		 cache_rg_addr,
		 cache_rg_pa,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  cache_ctr_wr_rsps_pending_crg == 4'd15)
	begin
	  v__h38860 = $stime;
	  #0;
	end
    v__h38854 = v__h38860 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  cache_ctr_wr_rsps_pending_crg == 4'd15)
	$display("%0d: ERROR: CreditCounter: overflow", v__h38854);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  cache_ctr_wr_rsps_pending_crg == 4'd15)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 5'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", mem_req_wr_addr_awaddr__h39973);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", _theResult___fst_val__h40057, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", mem_req_wr_data_wdata__h38573);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", mem_req_wr_data_wstrb__h40111);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", mem_req_wr_data_wuser__h27393, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_SC_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h39159 = $stime;
	  #0;
	end
    v__h39153 = v__h39159 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_SC_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s: rl_io_AMO_SC_req; width_code 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		 v__h39153,
		 "I_MMU_Cache",
		 cache_rg_width_code,
		 cache_rg_addr,
		 cache_rg_pa,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_SC_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("    FAIL due to I/O address.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_SC_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h39282 = $stime;
	  #0;
	end
    v__h39276 = v__h39282 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s.rl_io_AMO_op_req; width_code 0x%0h vaddr %0h  paddr %0h",
		 v__h39276,
		 "I_MMU_Cache",
		 cache_rg_width_code,
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 5'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", mem_req_wr_addr_awaddr__h39973);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", size_val__h39431, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_79___d880)
	begin
	  v__h34286 = $stime;
	  #0;
	end
    v__h34280 = v__h34286 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_79___d880)
	$display("%0d: %s.rl_cache_refill_rsps_loop:",
		 v__h34280,
		 "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_79___d880)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_79___d880)
	$write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_79___d880)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[137:133]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_79___d880)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_79___d880)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[132:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_79___d880)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_79___d880 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_79___d880 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_79___d880 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_79___d880 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd1 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_79___d880)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_79___d880 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_79___d880 &&
	  !cache_master_xactor_shim_rff_rv$port1__read[2])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_79___d880)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_79___d880)
	$write("'h%h",
	       cache_master_xactor_shim_rff_rv$port1__read[1:0],
	       " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_79___d880)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h34540 = $stime;
	  #0;
	end
    v__h34534 = v__h34540 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d",
		 v__h34534,
		 "I_MMU_Cache",
		 6'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_word128_set_in_cache[1:0] == 2'd3 &&
	  (cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 ||
	   cache_rg_error_during_refill) &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("    => MODULE_EXCEPTION_RSP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_word128_set_in_cache[1:0] == 2'd3 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  !cache_rg_error_during_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("    => CACHE_REREQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_79___d880)
	$display("        Updating Cache word128_set 0x%0h, word128_in_cline %0d) old => new",
		 cache_rg_word128_set_in_cache,
		 cache_rg_word128_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_79___d880)
	$write("        CSet 0x%0x, Word128 0x%0x: ",
	       cache_rg_addr[11:6],
	       cache_rg_word128_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_79___d880)
	$write(" 0x%0x", cache_ram_word128_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_79___d880)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_79___d880)
	$write("        CSet 0x%0x, Word128 0x%0x: ",
	       cache_rg_addr[11:6],
	       cache_rg_word128_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_79___d880)
	$write(" 0x%0x",
	       { cache_master_xactor_shim_rff_rv$port1__read[1:0],
		 cache_master_xactor_shim_rff_rv$port1__read[132:5] });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_79___d880)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h36569 = $stime;
	  #0;
	end
    v__h36563 = v__h36569 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s.rl_io_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		 v__h36563,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[137:133]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[132:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd1 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  !cache_master_xactor_shim_rff_rv$port1__read[2])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h",
	       cache_master_xactor_shim_rff_rv$port1__read[1:0],
	       " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h38014 = $stime;
	  #0;
	end
    v__h38008 = v__h38014 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		 v__h38008,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 { 1'd0, x__h36881 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h38129 = $stime;
	  #0;
	end
    v__h38123 = v__h38129 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		 v__h38123,
		 "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h39596 = $stime;
	  #0;
	end
    v__h39590 = v__h39596 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s.rl_io_AMO_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		 v__h39590,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[137:133]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[132:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd1 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  !cache_master_xactor_shim_rff_rv$port1__read[2])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h",
	       cache_master_xactor_shim_rff_rv$port1__read[1:0],
	       " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h39791 = $stime;
	  #0;
	end
    v__h39785 = v__h39791 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s: rl_io_AMO_read_rsp; f3 0x%0h  vaddr %0h  paddr %0h  word128 0x%0h",
		 v__h39785,
		 "I_MMU_Cache",
		 cache_rg_width_code,
		 cache_rg_addr,
		 cache_rg_pa,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  cache_ctr_wr_rsps_pending_crg == 4'd15)
	begin
	  v__h42922 = $stime;
	  #0;
	end
    v__h42916 = v__h42922 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  cache_ctr_wr_rsps_pending_crg == 4'd15)
	$display("%0d: ERROR: CreditCounter: overflow", v__h42916);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  cache_ctr_wr_rsps_pending_crg == 4'd15)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 5'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", mem_req_wr_addr_awaddr__h39973);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", _theResult___fst_val__h40057, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", mem_req_wr_data_wdata__h40110);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", mem_req_wr_data_wstrb__h40111);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 2'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h43176 = $stime;
	  #0;
	end
    v__h43170 = v__h43176 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		 v__h43170,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 { 65'd0,
		   IF_cache_rg_width_code_86_EQ_2_91_THEN_SEXT_IF_ETC___d1246 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h39890 = $stime;
	  #0;
	end
    v__h39884 = v__h39890 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s.rl_io_AMO_read_rsp: FABRIC_RSP_ERR: raising trap STORE_AMO_ACCESS_FAULT",
		 v__h39884,
		 "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h33329 = $stime;
	  #0;
	end
    v__h33323 = v__h33329 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s.rl_start_cache_refill: ", v__h33323, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("    To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 5'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", cline_fabric_addr__h33382);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 8'd3);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 3'b100, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("    Victim way %0d; => CACHE_REFILL", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h36199 = $stime;
	  #0;
	end
    v__h36193 = v__h36199 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s.rl_io_read_req; width_code 0x%0h vaddr %0h  paddr %0h",
		 v__h36193,
		 "I_MMU_Cache",
		 cache_rg_width_code,
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 5'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", mem_req_wr_addr_awaddr__h39973);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", size_val__h39431, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h43901 = $stime;
	  #0;
	end
    v__h43895 = v__h43901 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("%0d: %s.rl_discard_write_rsp: pending %0d ",
	       v__h43895,
	       "I_MMU_Cache",
	       $unsigned(b__h33283));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_BFlit { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", cache_master_xactor_shim_bff_rv$port1__read[6:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	begin
	  v__h43862 = $stime;
	  #0;
	end
    v__h43856 = v__h43862 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$display("%0d: %s.rl_discard_write_rsp: fabric response error: exit",
		 v__h43856,
		 "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("AXI4_BFlit { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("'h%h", cache_master_xactor_shim_bff_rv$port1__read[6:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd1 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_reset &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h5199 = $stime;
	  #0;
	end
    v__h5193 = v__h5199 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_reset &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s.rl_start_reset", v__h5193, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h44296 = $stime;
	  #0;
	end
    v__h44290 = v__h44296 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("%0d: %s.req: op:", v__h44290, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  req_op == 2'd0)
	$write("CACHE_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  req_op == 2'd1)
	$write("CACHE_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  req_op != 2'd0 &&
	  req_op != 2'd1)
	$write("CACHE_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(" width_code:%0d addr:0x%0h st_value:0x%0h priv:",
	       req_width_code,
	       req_addr,
	       req_st_value);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  req_priv == 2'b0)
	$write("U");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  req_priv == 2'b01)
	$write("S");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  req_priv == 2'b11)
	$write("M");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  req_priv != 2'b0 &&
	  req_priv != 2'b01 &&
	  req_priv != 2'b11)
	$write("RESERVED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(" sstatus_SUM:%0d mstatus_MXR:%0d satp:0x%0h",
	       req_sstatus_SUM,
	       req_mstatus_MXR,
	       req_satp,
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("    amo_funct7 = 0x%0h", req_amo_funct7);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req &&
	  req_width_code_EQ_0_336_OR_req_width_code_EQ_1_ETC___d1377)
	$display("    fa_req_ram_B tagCSet [0x%0x] word128_set [0x%0d]",
		 req_addr[11:6],
		 req_addr[11:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
  end
  // synopsys translate_on
endmodule  // mkMMU_ICache

