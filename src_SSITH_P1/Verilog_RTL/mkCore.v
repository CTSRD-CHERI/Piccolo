//
// Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
//
// On Tue Jul  2 15:59:34 BST 2019
//
//
// Ports:
// Name                         I/O  size props
// RDY_set_verbosity              O     1 const
// RDY_cpu_reset_server_request_put  O     1 reg
// cpu_reset_server_response_get  O     1 reg
// RDY_cpu_reset_server_response_get  O     1 reg
// cpu_imem_master_awid           O     6
// cpu_imem_master_awaddr         O    64
// cpu_imem_master_awlen          O     8
// cpu_imem_master_awsize         O     3
// cpu_imem_master_awburst        O     2
// cpu_imem_master_awlock         O     1
// cpu_imem_master_awcache        O     4
// cpu_imem_master_awprot         O     3
// cpu_imem_master_awqos          O     4
// cpu_imem_master_awregion       O     4
// cpu_imem_master_awvalid        O     1
// cpu_imem_master_wdata          O   128
// cpu_imem_master_wstrb          O    16
// cpu_imem_master_wlast          O     1
// cpu_imem_master_wvalid         O     1
// cpu_imem_master_bready         O     1 reg
// cpu_imem_master_arid           O     6
// cpu_imem_master_araddr         O    64
// cpu_imem_master_arlen          O     8
// cpu_imem_master_arsize         O     3
// cpu_imem_master_arburst        O     2
// cpu_imem_master_arlock         O     1
// cpu_imem_master_arcache        O     4
// cpu_imem_master_arprot         O     3
// cpu_imem_master_arqos          O     4
// cpu_imem_master_arregion       O     4
// cpu_imem_master_arvalid        O     1
// cpu_imem_master_rready         O     1 reg
// cpu_dmem_master_awid           O     6 reg
// cpu_dmem_master_awaddr         O    64 reg
// cpu_dmem_master_awlen          O     8 reg
// cpu_dmem_master_awsize         O     3 reg
// cpu_dmem_master_awburst        O     2 reg
// cpu_dmem_master_awlock         O     1 reg
// cpu_dmem_master_awcache        O     4 reg
// cpu_dmem_master_awprot         O     3 reg
// cpu_dmem_master_awqos          O     4 reg
// cpu_dmem_master_awregion       O     4 reg
// cpu_dmem_master_awvalid        O     1 reg
// cpu_dmem_master_wdata          O   128 reg
// cpu_dmem_master_wstrb          O    16 reg
// cpu_dmem_master_wlast          O     1 reg
// cpu_dmem_master_wvalid         O     1 reg
// cpu_dmem_master_bready         O     1 reg
// cpu_dmem_master_arid           O     6 reg
// cpu_dmem_master_araddr         O    64 reg
// cpu_dmem_master_arlen          O     8 reg
// cpu_dmem_master_arsize         O     3 reg
// cpu_dmem_master_arburst        O     2 reg
// cpu_dmem_master_arlock         O     1 reg
// cpu_dmem_master_arcache        O     4 reg
// cpu_dmem_master_arprot         O     3 reg
// cpu_dmem_master_arqos          O     4 reg
// cpu_dmem_master_arregion       O     4 reg
// cpu_dmem_master_arvalid        O     1 reg
// cpu_dmem_master_rready         O     1 reg
// tv_verifier_info_get_get       O   608 reg
// RDY_tv_verifier_info_get_get   O     1 reg
// RDY_dm_dmi_read_addr           O     1
// dm_dmi_read_data               O    32
// RDY_dm_dmi_read_data           O     1
// RDY_dm_dmi_write               O     1
// ndm_reset_client_request_get   O     1 reg
// RDY_ndm_reset_client_request_get  O     1 reg
// RDY_ndm_reset_client_response_put  O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_verbosity_verbosity        I     4
// set_verbosity_logdelay         I    64 reg
// cpu_reset_server_request_put   I     1 reg
// cpu_imem_master_awready        I     1
// cpu_imem_master_wready         I     1
// cpu_imem_master_bid            I     6
// cpu_imem_master_bresp          I     2
// cpu_imem_master_arready        I     1
// cpu_imem_master_rid            I     6
// cpu_imem_master_rdata          I   128
// cpu_imem_master_rresp          I     2
// cpu_imem_master_rlast          I     1
// cpu_dmem_master_awready        I     1
// cpu_dmem_master_wready         I     1
// cpu_dmem_master_bid            I     6 reg
// cpu_dmem_master_bresp          I     2 reg
// cpu_dmem_master_arready        I     1
// cpu_dmem_master_rid            I     6 reg
// cpu_dmem_master_rdata          I   128 reg
// cpu_dmem_master_rresp          I     2 reg
// cpu_dmem_master_rlast          I     1 reg
// core_external_interrupt_sources_0_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_1_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_2_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_3_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_4_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_5_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_6_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_7_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_8_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_9_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_10_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_11_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_12_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_13_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_14_m_interrupt_req_set_not_clear  I     1
// core_external_interrupt_sources_15_m_interrupt_req_set_not_clear  I     1
// nmi_req_set_not_clear          I     1
// dm_dmi_read_addr_dm_addr       I     7
// dm_dmi_write_dm_addr           I     7
// dm_dmi_write_dm_word           I    32
// ndm_reset_client_response_put  I     1 reg
// EN_set_verbosity               I     1
// EN_cpu_reset_server_request_put  I     1
// cpu_imem_master_bvalid         I     1
// cpu_imem_master_rvalid         I     1
// cpu_dmem_master_bvalid         I     1
// cpu_dmem_master_rvalid         I     1
// EN_dm_dmi_read_addr            I     1
// EN_dm_dmi_write                I     1
// EN_ndm_reset_client_response_put  I     1
// EN_cpu_reset_server_response_get  I     1
// EN_tv_verifier_info_get_get    I     1
// EN_dm_dmi_read_data            I     1
// EN_ndm_reset_client_request_get  I     1
//
// Combinational paths from inputs to outputs:
//   (cpu_imem_master_rid,
//    cpu_imem_master_rdata,
//    cpu_imem_master_rresp,
//    cpu_imem_master_rlast,
//    cpu_imem_master_rvalid) -> cpu_imem_master_awid
//   (cpu_imem_master_rid,
//    cpu_imem_master_rdata,
//    cpu_imem_master_rresp,
//    cpu_imem_master_rlast,
//    cpu_imem_master_rvalid) -> cpu_imem_master_awaddr
//   (cpu_imem_master_rid,
//    cpu_imem_master_rdata,
//    cpu_imem_master_rresp,
//    cpu_imem_master_rlast,
//    cpu_imem_master_rvalid) -> cpu_imem_master_awlen
//   (cpu_imem_master_rid,
//    cpu_imem_master_rdata,
//    cpu_imem_master_rresp,
//    cpu_imem_master_rlast,
//    cpu_imem_master_rvalid) -> cpu_imem_master_awsize
//   (cpu_imem_master_rid,
//    cpu_imem_master_rdata,
//    cpu_imem_master_rresp,
//    cpu_imem_master_rlast,
//    cpu_imem_master_rvalid) -> cpu_imem_master_awburst
//   (cpu_imem_master_rid,
//    cpu_imem_master_rdata,
//    cpu_imem_master_rresp,
//    cpu_imem_master_rlast,
//    cpu_imem_master_rvalid) -> cpu_imem_master_awlock
//   (cpu_imem_master_rid,
//    cpu_imem_master_rdata,
//    cpu_imem_master_rresp,
//    cpu_imem_master_rlast,
//    cpu_imem_master_rvalid) -> cpu_imem_master_awcache
//   (cpu_imem_master_rid,
//    cpu_imem_master_rdata,
//    cpu_imem_master_rresp,
//    cpu_imem_master_rlast,
//    cpu_imem_master_rvalid) -> cpu_imem_master_awprot
//   (cpu_imem_master_rid,
//    cpu_imem_master_rdata,
//    cpu_imem_master_rresp,
//    cpu_imem_master_rlast,
//    cpu_imem_master_rvalid) -> cpu_imem_master_awqos
//   (cpu_imem_master_rid,
//    cpu_imem_master_rdata,
//    cpu_imem_master_rresp,
//    cpu_imem_master_rlast,
//    cpu_imem_master_rvalid) -> cpu_imem_master_awregion
//   (cpu_imem_master_rid,
//    cpu_imem_master_rdata,
//    cpu_imem_master_rresp,
//    cpu_imem_master_rlast,
//    cpu_imem_master_rvalid) -> cpu_imem_master_awvalid
//   (cpu_imem_master_rid,
//    cpu_imem_master_rdata,
//    cpu_imem_master_rresp,
//    cpu_imem_master_rlast,
//    cpu_imem_master_rvalid) -> cpu_imem_master_wdata
//   (cpu_imem_master_rid,
//    cpu_imem_master_rdata,
//    cpu_imem_master_rresp,
//    cpu_imem_master_rlast,
//    cpu_imem_master_rvalid) -> cpu_imem_master_wstrb
//   (cpu_imem_master_rid,
//    cpu_imem_master_rdata,
//    cpu_imem_master_rresp,
//    cpu_imem_master_rlast,
//    cpu_imem_master_rvalid) -> cpu_imem_master_wlast
//   (cpu_imem_master_rid,
//    cpu_imem_master_rdata,
//    cpu_imem_master_rresp,
//    cpu_imem_master_rlast,
//    cpu_imem_master_rvalid) -> cpu_imem_master_wvalid
//   (cpu_imem_master_rid,
//    cpu_imem_master_rdata,
//    cpu_imem_master_rresp,
//    cpu_imem_master_rlast,
//    cpu_imem_master_rvalid) -> cpu_imem_master_arid
//   (cpu_imem_master_rid,
//    cpu_imem_master_rdata,
//    cpu_imem_master_rresp,
//    cpu_imem_master_rlast,
//    cpu_imem_master_rvalid) -> cpu_imem_master_araddr
//   (cpu_imem_master_rid,
//    cpu_imem_master_rdata,
//    cpu_imem_master_rresp,
//    cpu_imem_master_rlast,
//    cpu_imem_master_rvalid) -> cpu_imem_master_arlen
//   (cpu_imem_master_rid,
//    cpu_imem_master_rdata,
//    cpu_imem_master_rresp,
//    cpu_imem_master_rlast,
//    cpu_imem_master_rvalid) -> cpu_imem_master_arsize
//   (cpu_imem_master_rid,
//    cpu_imem_master_rdata,
//    cpu_imem_master_rresp,
//    cpu_imem_master_rlast,
//    cpu_imem_master_rvalid) -> cpu_imem_master_arburst
//   (cpu_imem_master_rid,
//    cpu_imem_master_rdata,
//    cpu_imem_master_rresp,
//    cpu_imem_master_rlast,
//    cpu_imem_master_rvalid) -> cpu_imem_master_arlock
//   (cpu_imem_master_rid,
//    cpu_imem_master_rdata,
//    cpu_imem_master_rresp,
//    cpu_imem_master_rlast,
//    cpu_imem_master_rvalid) -> cpu_imem_master_arcache
//   (cpu_imem_master_rid,
//    cpu_imem_master_rdata,
//    cpu_imem_master_rresp,
//    cpu_imem_master_rlast,
//    cpu_imem_master_rvalid) -> cpu_imem_master_arprot
//   (cpu_imem_master_rid,
//    cpu_imem_master_rdata,
//    cpu_imem_master_rresp,
//    cpu_imem_master_rlast,
//    cpu_imem_master_rvalid) -> cpu_imem_master_arqos
//   (cpu_imem_master_rid,
//    cpu_imem_master_rdata,
//    cpu_imem_master_rresp,
//    cpu_imem_master_rlast,
//    cpu_imem_master_rvalid) -> cpu_imem_master_arregion
//   (cpu_imem_master_rid,
//    cpu_imem_master_rdata,
//    cpu_imem_master_rresp,
//    cpu_imem_master_rlast,
//    cpu_imem_master_rvalid) -> cpu_imem_master_arvalid
//   (dm_dmi_read_addr_dm_addr, EN_dm_dmi_read_addr) -> RDY_dm_dmi_read_data
//   (dm_dmi_read_addr_dm_addr,
//    EN_dm_dmi_read_addr,
//    EN_dm_dmi_read_data) -> dm_dmi_read_data
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCore(CLK,
	      RST_N,

	      set_verbosity_verbosity,
	      set_verbosity_logdelay,
	      EN_set_verbosity,
	      RDY_set_verbosity,

	      cpu_reset_server_request_put,
	      EN_cpu_reset_server_request_put,
	      RDY_cpu_reset_server_request_put,

	      EN_cpu_reset_server_response_get,
	      cpu_reset_server_response_get,
	      RDY_cpu_reset_server_response_get,

	      cpu_imem_master_awid,

	      cpu_imem_master_awaddr,

	      cpu_imem_master_awlen,

	      cpu_imem_master_awsize,

	      cpu_imem_master_awburst,

	      cpu_imem_master_awlock,

	      cpu_imem_master_awcache,

	      cpu_imem_master_awprot,

	      cpu_imem_master_awqos,

	      cpu_imem_master_awregion,

	      cpu_imem_master_awvalid,

	      cpu_imem_master_awready,

	      cpu_imem_master_wdata,

	      cpu_imem_master_wstrb,

	      cpu_imem_master_wlast,

	      cpu_imem_master_wvalid,

	      cpu_imem_master_wready,

	      cpu_imem_master_bid,
	      cpu_imem_master_bresp,
	      cpu_imem_master_bvalid,

	      cpu_imem_master_bready,

	      cpu_imem_master_arid,

	      cpu_imem_master_araddr,

	      cpu_imem_master_arlen,

	      cpu_imem_master_arsize,

	      cpu_imem_master_arburst,

	      cpu_imem_master_arlock,

	      cpu_imem_master_arcache,

	      cpu_imem_master_arprot,

	      cpu_imem_master_arqos,

	      cpu_imem_master_arregion,

	      cpu_imem_master_arvalid,

	      cpu_imem_master_arready,

	      cpu_imem_master_rid,
	      cpu_imem_master_rdata,
	      cpu_imem_master_rresp,
	      cpu_imem_master_rlast,
	      cpu_imem_master_rvalid,

	      cpu_imem_master_rready,

	      cpu_dmem_master_awid,

	      cpu_dmem_master_awaddr,

	      cpu_dmem_master_awlen,

	      cpu_dmem_master_awsize,

	      cpu_dmem_master_awburst,

	      cpu_dmem_master_awlock,

	      cpu_dmem_master_awcache,

	      cpu_dmem_master_awprot,

	      cpu_dmem_master_awqos,

	      cpu_dmem_master_awregion,

	      cpu_dmem_master_awvalid,

	      cpu_dmem_master_awready,

	      cpu_dmem_master_wdata,

	      cpu_dmem_master_wstrb,

	      cpu_dmem_master_wlast,

	      cpu_dmem_master_wvalid,

	      cpu_dmem_master_wready,

	      cpu_dmem_master_bid,
	      cpu_dmem_master_bresp,
	      cpu_dmem_master_bvalid,

	      cpu_dmem_master_bready,

	      cpu_dmem_master_arid,

	      cpu_dmem_master_araddr,

	      cpu_dmem_master_arlen,

	      cpu_dmem_master_arsize,

	      cpu_dmem_master_arburst,

	      cpu_dmem_master_arlock,

	      cpu_dmem_master_arcache,

	      cpu_dmem_master_arprot,

	      cpu_dmem_master_arqos,

	      cpu_dmem_master_arregion,

	      cpu_dmem_master_arvalid,

	      cpu_dmem_master_arready,

	      cpu_dmem_master_rid,
	      cpu_dmem_master_rdata,
	      cpu_dmem_master_rresp,
	      cpu_dmem_master_rlast,
	      cpu_dmem_master_rvalid,

	      cpu_dmem_master_rready,

	      core_external_interrupt_sources_0_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_1_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_2_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_3_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_4_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_5_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_6_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_7_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_8_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_9_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_10_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_11_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_12_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_13_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_14_m_interrupt_req_set_not_clear,

	      core_external_interrupt_sources_15_m_interrupt_req_set_not_clear,

	      nmi_req_set_not_clear,

	      EN_tv_verifier_info_get_get,
	      tv_verifier_info_get_get,
	      RDY_tv_verifier_info_get_get,

	      dm_dmi_read_addr_dm_addr,
	      EN_dm_dmi_read_addr,
	      RDY_dm_dmi_read_addr,

	      EN_dm_dmi_read_data,
	      dm_dmi_read_data,
	      RDY_dm_dmi_read_data,

	      dm_dmi_write_dm_addr,
	      dm_dmi_write_dm_word,
	      EN_dm_dmi_write,
	      RDY_dm_dmi_write,

	      EN_ndm_reset_client_request_get,
	      ndm_reset_client_request_get,
	      RDY_ndm_reset_client_request_get,

	      ndm_reset_client_response_put,
	      EN_ndm_reset_client_response_put,
	      RDY_ndm_reset_client_response_put);
  input  CLK;
  input  RST_N;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  [63 : 0] set_verbosity_logdelay;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // action method cpu_reset_server_request_put
  input  cpu_reset_server_request_put;
  input  EN_cpu_reset_server_request_put;
  output RDY_cpu_reset_server_request_put;

  // actionvalue method cpu_reset_server_response_get
  input  EN_cpu_reset_server_response_get;
  output cpu_reset_server_response_get;
  output RDY_cpu_reset_server_response_get;

  // value method cpu_imem_master_aw_awid
  output [5 : 0] cpu_imem_master_awid;

  // value method cpu_imem_master_aw_awaddr
  output [63 : 0] cpu_imem_master_awaddr;

  // value method cpu_imem_master_aw_awlen
  output [7 : 0] cpu_imem_master_awlen;

  // value method cpu_imem_master_aw_awsize
  output [2 : 0] cpu_imem_master_awsize;

  // value method cpu_imem_master_aw_awburst
  output [1 : 0] cpu_imem_master_awburst;

  // value method cpu_imem_master_aw_awlock
  output cpu_imem_master_awlock;

  // value method cpu_imem_master_aw_awcache
  output [3 : 0] cpu_imem_master_awcache;

  // value method cpu_imem_master_aw_awprot
  output [2 : 0] cpu_imem_master_awprot;

  // value method cpu_imem_master_aw_awqos
  output [3 : 0] cpu_imem_master_awqos;

  // value method cpu_imem_master_aw_awregion
  output [3 : 0] cpu_imem_master_awregion;

  // value method cpu_imem_master_aw_awuser

  // value method cpu_imem_master_aw_awvalid
  output cpu_imem_master_awvalid;

  // action method cpu_imem_master_aw_awready
  input  cpu_imem_master_awready;

  // value method cpu_imem_master_w_wdata
  output [127 : 0] cpu_imem_master_wdata;

  // value method cpu_imem_master_w_wstrb
  output [15 : 0] cpu_imem_master_wstrb;

  // value method cpu_imem_master_w_wlast
  output cpu_imem_master_wlast;

  // value method cpu_imem_master_w_wuser

  // value method cpu_imem_master_w_wvalid
  output cpu_imem_master_wvalid;

  // action method cpu_imem_master_w_wready
  input  cpu_imem_master_wready;

  // action method cpu_imem_master_b_bflit
  input  [5 : 0] cpu_imem_master_bid;
  input  [1 : 0] cpu_imem_master_bresp;
  input  cpu_imem_master_bvalid;

  // value method cpu_imem_master_b_bready
  output cpu_imem_master_bready;

  // value method cpu_imem_master_ar_arid
  output [5 : 0] cpu_imem_master_arid;

  // value method cpu_imem_master_ar_araddr
  output [63 : 0] cpu_imem_master_araddr;

  // value method cpu_imem_master_ar_arlen
  output [7 : 0] cpu_imem_master_arlen;

  // value method cpu_imem_master_ar_arsize
  output [2 : 0] cpu_imem_master_arsize;

  // value method cpu_imem_master_ar_arburst
  output [1 : 0] cpu_imem_master_arburst;

  // value method cpu_imem_master_ar_arlock
  output cpu_imem_master_arlock;

  // value method cpu_imem_master_ar_arcache
  output [3 : 0] cpu_imem_master_arcache;

  // value method cpu_imem_master_ar_arprot
  output [2 : 0] cpu_imem_master_arprot;

  // value method cpu_imem_master_ar_arqos
  output [3 : 0] cpu_imem_master_arqos;

  // value method cpu_imem_master_ar_arregion
  output [3 : 0] cpu_imem_master_arregion;

  // value method cpu_imem_master_ar_aruser

  // value method cpu_imem_master_ar_arvalid
  output cpu_imem_master_arvalid;

  // action method cpu_imem_master_ar_arready
  input  cpu_imem_master_arready;

  // action method cpu_imem_master_r_rflit
  input  [5 : 0] cpu_imem_master_rid;
  input  [127 : 0] cpu_imem_master_rdata;
  input  [1 : 0] cpu_imem_master_rresp;
  input  cpu_imem_master_rlast;
  input  cpu_imem_master_rvalid;

  // value method cpu_imem_master_r_rready
  output cpu_imem_master_rready;

  // value method cpu_dmem_master_aw_awid
  output [5 : 0] cpu_dmem_master_awid;

  // value method cpu_dmem_master_aw_awaddr
  output [63 : 0] cpu_dmem_master_awaddr;

  // value method cpu_dmem_master_aw_awlen
  output [7 : 0] cpu_dmem_master_awlen;

  // value method cpu_dmem_master_aw_awsize
  output [2 : 0] cpu_dmem_master_awsize;

  // value method cpu_dmem_master_aw_awburst
  output [1 : 0] cpu_dmem_master_awburst;

  // value method cpu_dmem_master_aw_awlock
  output cpu_dmem_master_awlock;

  // value method cpu_dmem_master_aw_awcache
  output [3 : 0] cpu_dmem_master_awcache;

  // value method cpu_dmem_master_aw_awprot
  output [2 : 0] cpu_dmem_master_awprot;

  // value method cpu_dmem_master_aw_awqos
  output [3 : 0] cpu_dmem_master_awqos;

  // value method cpu_dmem_master_aw_awregion
  output [3 : 0] cpu_dmem_master_awregion;

  // value method cpu_dmem_master_aw_awuser

  // value method cpu_dmem_master_aw_awvalid
  output cpu_dmem_master_awvalid;

  // action method cpu_dmem_master_aw_awready
  input  cpu_dmem_master_awready;

  // value method cpu_dmem_master_w_wdata
  output [127 : 0] cpu_dmem_master_wdata;

  // value method cpu_dmem_master_w_wstrb
  output [15 : 0] cpu_dmem_master_wstrb;

  // value method cpu_dmem_master_w_wlast
  output cpu_dmem_master_wlast;

  // value method cpu_dmem_master_w_wuser

  // value method cpu_dmem_master_w_wvalid
  output cpu_dmem_master_wvalid;

  // action method cpu_dmem_master_w_wready
  input  cpu_dmem_master_wready;

  // action method cpu_dmem_master_b_bflit
  input  [5 : 0] cpu_dmem_master_bid;
  input  [1 : 0] cpu_dmem_master_bresp;
  input  cpu_dmem_master_bvalid;

  // value method cpu_dmem_master_b_bready
  output cpu_dmem_master_bready;

  // value method cpu_dmem_master_ar_arid
  output [5 : 0] cpu_dmem_master_arid;

  // value method cpu_dmem_master_ar_araddr
  output [63 : 0] cpu_dmem_master_araddr;

  // value method cpu_dmem_master_ar_arlen
  output [7 : 0] cpu_dmem_master_arlen;

  // value method cpu_dmem_master_ar_arsize
  output [2 : 0] cpu_dmem_master_arsize;

  // value method cpu_dmem_master_ar_arburst
  output [1 : 0] cpu_dmem_master_arburst;

  // value method cpu_dmem_master_ar_arlock
  output cpu_dmem_master_arlock;

  // value method cpu_dmem_master_ar_arcache
  output [3 : 0] cpu_dmem_master_arcache;

  // value method cpu_dmem_master_ar_arprot
  output [2 : 0] cpu_dmem_master_arprot;

  // value method cpu_dmem_master_ar_arqos
  output [3 : 0] cpu_dmem_master_arqos;

  // value method cpu_dmem_master_ar_arregion
  output [3 : 0] cpu_dmem_master_arregion;

  // value method cpu_dmem_master_ar_aruser

  // value method cpu_dmem_master_ar_arvalid
  output cpu_dmem_master_arvalid;

  // action method cpu_dmem_master_ar_arready
  input  cpu_dmem_master_arready;

  // action method cpu_dmem_master_r_rflit
  input  [5 : 0] cpu_dmem_master_rid;
  input  [127 : 0] cpu_dmem_master_rdata;
  input  [1 : 0] cpu_dmem_master_rresp;
  input  cpu_dmem_master_rlast;
  input  cpu_dmem_master_rvalid;

  // value method cpu_dmem_master_r_rready
  output cpu_dmem_master_rready;

  // action method core_external_interrupt_sources_0_m_interrupt_req
  input  core_external_interrupt_sources_0_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_1_m_interrupt_req
  input  core_external_interrupt_sources_1_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_2_m_interrupt_req
  input  core_external_interrupt_sources_2_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_3_m_interrupt_req
  input  core_external_interrupt_sources_3_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_4_m_interrupt_req
  input  core_external_interrupt_sources_4_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_5_m_interrupt_req
  input  core_external_interrupt_sources_5_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_6_m_interrupt_req
  input  core_external_interrupt_sources_6_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_7_m_interrupt_req
  input  core_external_interrupt_sources_7_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_8_m_interrupt_req
  input  core_external_interrupt_sources_8_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_9_m_interrupt_req
  input  core_external_interrupt_sources_9_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_10_m_interrupt_req
  input  core_external_interrupt_sources_10_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_11_m_interrupt_req
  input  core_external_interrupt_sources_11_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_12_m_interrupt_req
  input  core_external_interrupt_sources_12_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_13_m_interrupt_req
  input  core_external_interrupt_sources_13_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_14_m_interrupt_req
  input  core_external_interrupt_sources_14_m_interrupt_req_set_not_clear;

  // action method core_external_interrupt_sources_15_m_interrupt_req
  input  core_external_interrupt_sources_15_m_interrupt_req_set_not_clear;

  // action method nmi_req
  input  nmi_req_set_not_clear;

  // actionvalue method tv_verifier_info_get_get
  input  EN_tv_verifier_info_get_get;
  output [607 : 0] tv_verifier_info_get_get;
  output RDY_tv_verifier_info_get_get;

  // action method dm_dmi_read_addr
  input  [6 : 0] dm_dmi_read_addr_dm_addr;
  input  EN_dm_dmi_read_addr;
  output RDY_dm_dmi_read_addr;

  // actionvalue method dm_dmi_read_data
  input  EN_dm_dmi_read_data;
  output [31 : 0] dm_dmi_read_data;
  output RDY_dm_dmi_read_data;

  // action method dm_dmi_write
  input  [6 : 0] dm_dmi_write_dm_addr;
  input  [31 : 0] dm_dmi_write_dm_word;
  input  EN_dm_dmi_write;
  output RDY_dm_dmi_write;

  // actionvalue method ndm_reset_client_request_get
  input  EN_ndm_reset_client_request_get;
  output ndm_reset_client_request_get;
  output RDY_ndm_reset_client_request_get;

  // action method ndm_reset_client_response_put
  input  ndm_reset_client_response_put;
  input  EN_ndm_reset_client_response_put;
  output RDY_ndm_reset_client_response_put;

  // signals for module outputs
  wire [607 : 0] tv_verifier_info_get_get;
  wire [127 : 0] cpu_dmem_master_wdata, cpu_imem_master_wdata;
  wire [63 : 0] cpu_dmem_master_araddr,
		cpu_dmem_master_awaddr,
		cpu_imem_master_araddr,
		cpu_imem_master_awaddr;
  wire [31 : 0] dm_dmi_read_data;
  wire [15 : 0] cpu_dmem_master_wstrb, cpu_imem_master_wstrb;
  wire [7 : 0] cpu_dmem_master_arlen,
	       cpu_dmem_master_awlen,
	       cpu_imem_master_arlen,
	       cpu_imem_master_awlen;
  wire [5 : 0] cpu_dmem_master_arid,
	       cpu_dmem_master_awid,
	       cpu_imem_master_arid,
	       cpu_imem_master_awid;
  wire [3 : 0] cpu_dmem_master_arcache,
	       cpu_dmem_master_arqos,
	       cpu_dmem_master_arregion,
	       cpu_dmem_master_awcache,
	       cpu_dmem_master_awqos,
	       cpu_dmem_master_awregion,
	       cpu_imem_master_arcache,
	       cpu_imem_master_arqos,
	       cpu_imem_master_arregion,
	       cpu_imem_master_awcache,
	       cpu_imem_master_awqos,
	       cpu_imem_master_awregion;
  wire [2 : 0] cpu_dmem_master_arprot,
	       cpu_dmem_master_arsize,
	       cpu_dmem_master_awprot,
	       cpu_dmem_master_awsize,
	       cpu_imem_master_arprot,
	       cpu_imem_master_arsize,
	       cpu_imem_master_awprot,
	       cpu_imem_master_awsize;
  wire [1 : 0] cpu_dmem_master_arburst,
	       cpu_dmem_master_awburst,
	       cpu_imem_master_arburst,
	       cpu_imem_master_awburst;
  wire RDY_cpu_reset_server_request_put,
       RDY_cpu_reset_server_response_get,
       RDY_dm_dmi_read_addr,
       RDY_dm_dmi_read_data,
       RDY_dm_dmi_write,
       RDY_ndm_reset_client_request_get,
       RDY_ndm_reset_client_response_put,
       RDY_set_verbosity,
       RDY_tv_verifier_info_get_get,
       cpu_dmem_master_arlock,
       cpu_dmem_master_arvalid,
       cpu_dmem_master_awlock,
       cpu_dmem_master_awvalid,
       cpu_dmem_master_bready,
       cpu_dmem_master_rready,
       cpu_dmem_master_wlast,
       cpu_dmem_master_wvalid,
       cpu_imem_master_arlock,
       cpu_imem_master_arvalid,
       cpu_imem_master_awlock,
       cpu_imem_master_awvalid,
       cpu_imem_master_bready,
       cpu_imem_master_rready,
       cpu_imem_master_wlast,
       cpu_imem_master_wvalid,
       cpu_reset_server_response_get,
       ndm_reset_client_request_get;

  // inlined wires
  wire [245 : 0] split_0_doPut$wget, split_1_doPut$wget, split_2_doPut$wget;
  wire [146 : 0] cpu_imem_ug_u_w_peekWire$wget,
		 ssNoSynth_1_w_buffer_enqw$wget,
		 ssNoSynth_2_w_buffer_enqw$wget;
  wire [137 : 0] cpu_imem_r_buffer_enqw$wget;
  wire [136 : 0] msNoSynth_0_r_buffer_enqw$wget,
		 msNoSynth_1_r_buffer_enqw$wget;
  wire [97 : 0] cpu_imem_ug_u_ar_peekWire$wget,
		cpu_imem_ug_u_aw_peekWire$wget,
		deburst_debug_inSerial_shim_arff_rv$port0__write_1,
		deburst_debug_inSerial_shim_arff_rv$port1__read,
		deburst_debug_inSerial_shim_arff_rv$port2__read,
		deburst_debug_inSerial_shim_awff_rv$port0__write_1,
		deburst_debug_inSerial_shim_awff_rv$port1__read,
		deburst_debug_inSerial_shim_awff_rv$port2__read,
		deburst_dm_inSerial_shim_arff_rv$port0__write_1,
		deburst_dm_inSerial_shim_arff_rv$port1__read,
		deburst_dm_inSerial_shim_arff_rv$port2__read,
		deburst_dm_inSerial_shim_awff_rv$port0__write_1,
		deburst_dm_inSerial_shim_awff_rv$port1__read,
		deburst_dm_inSerial_shim_awff_rv$port2__read,
		dm_master_nonsynth_awFF_rv$port0__write_1,
		dm_master_nonsynth_awFF_rv$port1__read,
		dm_master_nonsynth_awFF_rv$port2__read,
		ssNoSynth_0_ar_buffer_enqw$wget,
		ssNoSynth_1_ar_buffer_enqw$wget,
		ssNoSynth_1_aw_buffer_enqw$wget,
		ssNoSynth_2_ar_buffer_enqw$wget,
		ssNoSynth_2_aw_buffer_enqw$wget;
  wire [96 : 0] ifcs_0_1_noRoute_currentReq$port0__write_1,
		ifcs_0_1_noRoute_currentReq$port1__read,
		ifcs_0_noRoute_inner_currentReq$port0__write_1,
		ifcs_0_noRoute_inner_currentReq$port1__read,
		ifcs_1_1_noRoute_currentReq$port1__read,
		ifcs_1_noRoute_inner_currentReq$port1__read;
  wire [75 : 0] deburst_debug_inSerial_shim_wff_rv$port0__write_1,
		deburst_debug_inSerial_shim_wff_rv$port1__read,
		deburst_debug_inSerial_shim_wff_rv$port2__read,
		deburst_dm_inSerial_shim_wff_rv$port0__write_1,
		deburst_dm_inSerial_shim_wff_rv$port1__read,
		deburst_dm_inSerial_shim_wff_rv$port2__read;
  wire [73 : 0] deburst_debug_inSerial_shim_rff_rv$port0__write_1,
		deburst_debug_inSerial_shim_rff_rv$port1__read,
		deburst_debug_inSerial_shim_rff_rv$port2__read,
		deburst_dm_inSerial_shim_rff_rv$port0__write_1,
		deburst_dm_inSerial_shim_rff_rv$port1__read,
		deburst_dm_inSerial_shim_rff_rv$port2__read;
  wire [8 : 0] ifcs_0_1_noRoute_flitCount$port0__write_1,
	       ifcs_0_1_noRoute_flitCount$port1__write_1,
	       ifcs_0_1_noRoute_flitCount$port2__read,
	       ifcs_1_1_noRoute_flitCount$port0__write_1,
	       ifcs_1_1_noRoute_flitCount$port1__write_1,
	       ifcs_1_1_noRoute_flitCount$port2__read;
  wire [6 : 0] cpu_imem_b_buffer_enqw$wget,
	       deburst_debug_inSerial_shim_bff_rv$port0__write_1,
	       deburst_debug_inSerial_shim_bff_rv$port1__read,
	       deburst_debug_inSerial_shim_bff_rv$port2__read,
	       deburst_dm_inSerial_shim_bff_rv$port0__write_1,
	       deburst_dm_inSerial_shim_bff_rv$port1__read,
	       deburst_dm_inSerial_shim_bff_rv$port2__read;
  wire [5 : 0] msNoSynth_0_b_buffer_enqw$wget, msNoSynth_1_b_buffer_enqw$wget;
  wire [1 : 0] deburst_debug_inSerial_state$port0__write_1,
	       deburst_debug_inSerial_state$port1__read,
	       deburst_debug_inSerial_state$port1__write_1,
	       deburst_debug_inSerial_state$port2__read,
	       deburst_dm_inSerial_state$port0__write_1,
	       deburst_dm_inSerial_state$port1__read,
	       deburst_dm_inSerial_state$port1__write_1,
	       deburst_dm_inSerial_state$port2__read;
  wire cpu_imem_ug_u_ar_dropWire$whas,
       cpu_imem_ug_u_aw_dropWire$whas,
       cpu_imem_ug_u_b_putWire$whas,
       cpu_imem_ug_u_r_putWire$whas,
       cpu_imem_ug_u_w_dropWire$whas,
       deburst_debug_inSerial_shim_arff_rv$EN_port1__write,
       deburst_debug_inSerial_shim_awff_rv$EN_port1__write,
       deburst_debug_inSerial_shim_bff_rv$EN_port0__write,
       deburst_debug_inSerial_state$EN_port0__write,
       deburst_debug_inSerial_state$EN_port1__write,
       deburst_dm_inSerial_shim_arff_rv$EN_port1__write,
       deburst_dm_inSerial_shim_awff_rv$EN_port1__write,
       deburst_dm_inSerial_shim_bff_rv$EN_port0__write,
       deburst_dm_inSerial_state$EN_port0__write,
       deburst_dm_inSerial_state$EN_port1__write,
       dm_master_nonsynth_arCanPeek$wget,
       dm_master_nonsynth_awCanPeek$wget,
       dm_master_nonsynth_awFF_rv$EN_port1__write,
       dm_master_nonsynth_rCanPut$wget,
       dm_master_nonsynth_wCanPeek$wget,
       flitToSink_0$whas,
       flitToSink_1$whas,
       flitToSink_1_0$whas,
       flitToSink_1_0_1$whas,
       flitToSink_1_1$whas,
       flitToSink_1_1_0$whas,
       flitToSink_1_1_1$whas,
       flitToSink_1_1_1_1$whas,
       flitToSink_1_2$whas,
       flitToSink_2$whas,
       ifcs_0_noRoute_inner_currentReq$EN_port0__write,
       ifcs_0_noRoute_inner_pendingReq$EN_port0__write,
       ifcs_0_noRoute_inner_pendingReq$port1__read,
       ifcs_0_noRoute_inner_pendingReq$port2__read,
       ifcs_1_noRoute_inner_currentReq$EN_port0__write,
       ifcs_1_noRoute_inner_pendingReq$EN_port0__write,
       ifcs_1_noRoute_inner_pendingReq$port1__read,
       ifcs_1_noRoute_inner_pendingReq$port2__read,
       merged_0_doDrop$whas,
       merged_1_doDrop$whas,
       msNoSynth_0_ar_dwReady$whas,
       msNoSynth_0_b_buffer_enqw$whas,
       msNoSynth_0_r_buffer_enqw$whas,
       msNoSynth_0_w_dwReady$whas,
       msNoSynth_1_ar_dwReady$whas,
       msNoSynth_1_b_buffer_enqw$whas,
       msNoSynth_1_r_buffer_enqw$whas,
       msNoSynth_1_w_dwReady$whas,
       reqWires_0$wget,
       reqWires_1$wget,
       reqWires_1_0$wget,
       reqWires_1_0_1$wget,
       reqWires_1_1$wget,
       reqWires_1_1_0$wget,
       reqWires_1_1_1$wget,
       reqWires_1_1_1_1$wget,
       reqWires_1_1_2$wget,
       reqWires_1_2$wget,
       sourceSelect_1_0$whas,
       sourceSelect_1_0_1$whas,
       sourceSelect_1_1$whas,
       sourceSelect_1_1_1$whas,
       sourceSelect_1_2$whas,
       ssNoSynth_0_b_dwReady$whas,
       ssNoSynth_0_r_dwReady$whas,
       ssNoSynth_0_w_buffer_enqw$whas,
       ssNoSynth_1_b_dwReady$whas,
       ssNoSynth_1_r_dwReady$whas,
       ssNoSynth_1_w_buffer_enqw$whas,
       ssNoSynth_2_b_dwReady$whas,
       ssNoSynth_2_r_dwReady$whas,
       ssNoSynth_2_w_buffer_enqw$whas;

  // register activeSource_0
  reg activeSource_0;
  wire activeSource_0$D_IN, activeSource_0$EN;

  // register activeSource_1
  reg activeSource_1;
  wire activeSource_1$D_IN, activeSource_1$EN;

  // register activeSource_1_0
  reg activeSource_1_0;
  wire activeSource_1_0$D_IN, activeSource_1_0$EN;

  // register activeSource_1_0_1
  reg activeSource_1_0_1;
  wire activeSource_1_0_1$D_IN, activeSource_1_0_1$EN;

  // register activeSource_1_1
  reg activeSource_1_1;
  wire activeSource_1_1$D_IN, activeSource_1_1$EN;

  // register activeSource_1_1_0
  reg activeSource_1_1_0;
  reg activeSource_1_1_0$D_IN;
  wire activeSource_1_1_0$EN;

  // register activeSource_1_1_1
  reg activeSource_1_1_1;
  wire activeSource_1_1_1$D_IN, activeSource_1_1_1$EN;

  // register activeSource_1_1_1_1
  reg activeSource_1_1_1_1;
  reg activeSource_1_1_1_1$D_IN;
  wire activeSource_1_1_1_1$EN;

  // register activeSource_1_1_2
  reg activeSource_1_1_2;
  reg activeSource_1_1_2$D_IN;
  wire activeSource_1_1_2$EN;

  // register activeSource_1_2
  reg activeSource_1_2;
  wire activeSource_1_2$D_IN, activeSource_1_2$EN;

  // register arbiter_1_1_firstHot
  reg arbiter_1_1_firstHot;
  wire arbiter_1_1_firstHot$D_IN, arbiter_1_1_firstHot$EN;

  // register arbiter_1_1_lastSelect
  reg arbiter_1_1_lastSelect;
  wire arbiter_1_1_lastSelect$D_IN, arbiter_1_1_lastSelect$EN;

  // register arbiter_1_1_lastSelect_1
  reg arbiter_1_1_lastSelect_1;
  wire arbiter_1_1_lastSelect_1$D_IN, arbiter_1_1_lastSelect_1$EN;

  // register arbiter_1_firstHot
  reg arbiter_1_firstHot;
  wire arbiter_1_firstHot$D_IN, arbiter_1_firstHot$EN;

  // register arbiter_1_firstHot_1
  reg arbiter_1_firstHot_1;
  wire arbiter_1_firstHot_1$D_IN, arbiter_1_firstHot_1$EN;

  // register arbiter_1_lastSelect
  reg arbiter_1_lastSelect;
  wire arbiter_1_lastSelect$D_IN, arbiter_1_lastSelect$EN;

  // register arbiter_1_lastSelect_1
  reg arbiter_1_lastSelect_1;
  wire arbiter_1_lastSelect_1$D_IN, arbiter_1_lastSelect_1$EN;

  // register arbiter_1_lastSelect_2
  reg arbiter_1_lastSelect_2;
  wire arbiter_1_lastSelect_2$D_IN, arbiter_1_lastSelect_2$EN;

  // register arbiter_firstHot
  reg arbiter_firstHot;
  wire arbiter_firstHot$D_IN, arbiter_firstHot$EN;

  // register arbiter_lastSelect
  reg arbiter_lastSelect;
  wire arbiter_lastSelect$D_IN, arbiter_lastSelect$EN;

  // register deburst_debug_flitReceived
  reg [7 : 0] deburst_debug_flitReceived;
  wire [7 : 0] deburst_debug_flitReceived$D_IN;
  wire deburst_debug_flitReceived$EN;

  // register deburst_debug_inSerial_lastWasRead
  reg deburst_debug_inSerial_lastWasRead;
  wire deburst_debug_inSerial_lastWasRead$D_IN,
       deburst_debug_inSerial_lastWasRead$EN;

  // register deburst_debug_inSerial_shim_arff_rv
  reg [97 : 0] deburst_debug_inSerial_shim_arff_rv;
  wire [97 : 0] deburst_debug_inSerial_shim_arff_rv$D_IN;
  wire deburst_debug_inSerial_shim_arff_rv$EN;

  // register deburst_debug_inSerial_shim_awff_rv
  reg [97 : 0] deburst_debug_inSerial_shim_awff_rv;
  wire [97 : 0] deburst_debug_inSerial_shim_awff_rv$D_IN;
  wire deburst_debug_inSerial_shim_awff_rv$EN;

  // register deburst_debug_inSerial_shim_bff_rv
  reg [6 : 0] deburst_debug_inSerial_shim_bff_rv;
  wire [6 : 0] deburst_debug_inSerial_shim_bff_rv$D_IN;
  wire deburst_debug_inSerial_shim_bff_rv$EN;

  // register deburst_debug_inSerial_shim_rff_rv
  reg [73 : 0] deburst_debug_inSerial_shim_rff_rv;
  wire [73 : 0] deburst_debug_inSerial_shim_rff_rv$D_IN;
  wire deburst_debug_inSerial_shim_rff_rv$EN;

  // register deburst_debug_inSerial_shim_wff_rv
  reg [75 : 0] deburst_debug_inSerial_shim_wff_rv;
  wire [75 : 0] deburst_debug_inSerial_shim_wff_rv$D_IN;
  wire deburst_debug_inSerial_shim_wff_rv$EN;

  // register deburst_debug_inSerial_state
  reg [1 : 0] deburst_debug_inSerial_state;
  wire [1 : 0] deburst_debug_inSerial_state$D_IN;
  wire deburst_debug_inSerial_state$EN;

  // register deburst_debug_readsSent
  reg [7 : 0] deburst_debug_readsSent;
  wire [7 : 0] deburst_debug_readsSent$D_IN;
  wire deburst_debug_readsSent$EN;

  // register deburst_debug_writesSent
  reg [7 : 0] deburst_debug_writesSent;
  wire [7 : 0] deburst_debug_writesSent$D_IN;
  wire deburst_debug_writesSent$EN;

  // register deburst_dm_flitReceived
  reg [7 : 0] deburst_dm_flitReceived;
  wire [7 : 0] deburst_dm_flitReceived$D_IN;
  wire deburst_dm_flitReceived$EN;

  // register deburst_dm_inSerial_lastWasRead
  reg deburst_dm_inSerial_lastWasRead;
  wire deburst_dm_inSerial_lastWasRead$D_IN,
       deburst_dm_inSerial_lastWasRead$EN;

  // register deburst_dm_inSerial_shim_arff_rv
  reg [97 : 0] deburst_dm_inSerial_shim_arff_rv;
  wire [97 : 0] deburst_dm_inSerial_shim_arff_rv$D_IN;
  wire deburst_dm_inSerial_shim_arff_rv$EN;

  // register deburst_dm_inSerial_shim_awff_rv
  reg [97 : 0] deburst_dm_inSerial_shim_awff_rv;
  wire [97 : 0] deburst_dm_inSerial_shim_awff_rv$D_IN;
  wire deburst_dm_inSerial_shim_awff_rv$EN;

  // register deburst_dm_inSerial_shim_bff_rv
  reg [6 : 0] deburst_dm_inSerial_shim_bff_rv;
  wire [6 : 0] deburst_dm_inSerial_shim_bff_rv$D_IN;
  wire deburst_dm_inSerial_shim_bff_rv$EN;

  // register deburst_dm_inSerial_shim_rff_rv
  reg [73 : 0] deburst_dm_inSerial_shim_rff_rv;
  wire [73 : 0] deburst_dm_inSerial_shim_rff_rv$D_IN;
  wire deburst_dm_inSerial_shim_rff_rv$EN;

  // register deburst_dm_inSerial_shim_wff_rv
  reg [75 : 0] deburst_dm_inSerial_shim_wff_rv;
  wire [75 : 0] deburst_dm_inSerial_shim_wff_rv$D_IN;
  wire deburst_dm_inSerial_shim_wff_rv$EN;

  // register deburst_dm_inSerial_state
  reg [1 : 0] deburst_dm_inSerial_state;
  wire [1 : 0] deburst_dm_inSerial_state$D_IN;
  wire deburst_dm_inSerial_state$EN;

  // register deburst_dm_readsSent
  reg [7 : 0] deburst_dm_readsSent;
  wire [7 : 0] deburst_dm_readsSent$D_IN;
  wire deburst_dm_readsSent$EN;

  // register deburst_dm_writesSent
  reg [7 : 0] deburst_dm_writesSent;
  wire [7 : 0] deburst_dm_writesSent$D_IN;
  wire deburst_dm_writesSent$EN;

  // register dm_master_nonsynth_awFF_rv
  reg [97 : 0] dm_master_nonsynth_awFF_rv;
  wire [97 : 0] dm_master_nonsynth_awFF_rv$D_IN;
  wire dm_master_nonsynth_awFF_rv$EN;

  // register dm_master_nonsynth_currentRID
  reg [3 : 0] dm_master_nonsynth_currentRID;
  wire [3 : 0] dm_master_nonsynth_currentRID$D_IN;
  wire dm_master_nonsynth_currentRID$EN;

  // register dm_master_nonsynth_currentWID
  reg [3 : 0] dm_master_nonsynth_currentWID;
  wire [3 : 0] dm_master_nonsynth_currentWID$D_IN;
  wire dm_master_nonsynth_currentWID$EN;

  // register ifcs_0_1_noRoute_currentReq
  reg [96 : 0] ifcs_0_1_noRoute_currentReq;
  wire [96 : 0] ifcs_0_1_noRoute_currentReq$D_IN;
  wire ifcs_0_1_noRoute_currentReq$EN;

  // register ifcs_0_1_noRoute_flitCount
  reg [8 : 0] ifcs_0_1_noRoute_flitCount;
  wire [8 : 0] ifcs_0_1_noRoute_flitCount$D_IN;
  wire ifcs_0_1_noRoute_flitCount$EN;

  // register ifcs_0_1_state
  reg [1 : 0] ifcs_0_1_state;
  wire [1 : 0] ifcs_0_1_state$D_IN;
  wire ifcs_0_1_state$EN;

  // register ifcs_0_1_state_1
  reg ifcs_0_1_state_1;
  wire ifcs_0_1_state_1$D_IN, ifcs_0_1_state_1$EN;

  // register ifcs_0_noRoute_inner_currentReq
  reg [96 : 0] ifcs_0_noRoute_inner_currentReq;
  wire [96 : 0] ifcs_0_noRoute_inner_currentReq$D_IN;
  wire ifcs_0_noRoute_inner_currentReq$EN;

  // register ifcs_0_noRoute_inner_pendingReq
  reg ifcs_0_noRoute_inner_pendingReq;
  wire ifcs_0_noRoute_inner_pendingReq$D_IN,
       ifcs_0_noRoute_inner_pendingReq$EN;

  // register ifcs_0_state
  reg [1 : 0] ifcs_0_state;
  reg [1 : 0] ifcs_0_state$D_IN;
  wire ifcs_0_state$EN;

  // register ifcs_0_state_1
  reg ifcs_0_state_1;
  wire ifcs_0_state_1$D_IN, ifcs_0_state_1$EN;

  // register ifcs_1_1_noRoute_currentReq
  reg [96 : 0] ifcs_1_1_noRoute_currentReq;
  wire [96 : 0] ifcs_1_1_noRoute_currentReq$D_IN;
  wire ifcs_1_1_noRoute_currentReq$EN;

  // register ifcs_1_1_noRoute_flitCount
  reg [8 : 0] ifcs_1_1_noRoute_flitCount;
  wire [8 : 0] ifcs_1_1_noRoute_flitCount$D_IN;
  wire ifcs_1_1_noRoute_flitCount$EN;

  // register ifcs_1_1_state
  reg [1 : 0] ifcs_1_1_state;
  wire [1 : 0] ifcs_1_1_state$D_IN;
  wire ifcs_1_1_state$EN;

  // register ifcs_1_1_state_1
  reg ifcs_1_1_state_1;
  wire ifcs_1_1_state_1$D_IN, ifcs_1_1_state_1$EN;

  // register ifcs_1_noRoute_inner_currentReq
  reg [96 : 0] ifcs_1_noRoute_inner_currentReq;
  wire [96 : 0] ifcs_1_noRoute_inner_currentReq$D_IN;
  wire ifcs_1_noRoute_inner_currentReq$EN;

  // register ifcs_1_noRoute_inner_pendingReq
  reg ifcs_1_noRoute_inner_pendingReq;
  wire ifcs_1_noRoute_inner_pendingReq$D_IN,
       ifcs_1_noRoute_inner_pendingReq$EN;

  // register ifcs_1_state
  reg [1 : 0] ifcs_1_state;
  reg [1 : 0] ifcs_1_state$D_IN;
  wire ifcs_1_state$EN;

  // register ifcs_1_state_1
  reg ifcs_1_state_1;
  wire ifcs_1_state_1$D_IN, ifcs_1_state_1$EN;

  // register ifcs_2_1_state
  reg ifcs_2_1_state;
  wire ifcs_2_1_state$D_IN, ifcs_2_1_state$EN;

  // register ifcs_2_state
  reg ifcs_2_state;
  wire ifcs_2_state$D_IN, ifcs_2_state$EN;

  // register merged_0_flitLeft
  reg [7 : 0] merged_0_flitLeft;
  wire [7 : 0] merged_0_flitLeft$D_IN;
  wire merged_0_flitLeft$EN;

  // register merged_1_flitLeft
  reg [7 : 0] merged_1_flitLeft;
  wire [7 : 0] merged_1_flitLeft$D_IN;
  wire merged_1_flitLeft$EN;

  // register split_0_flitLeft
  reg [7 : 0] split_0_flitLeft;
  wire [7 : 0] split_0_flitLeft$D_IN;
  wire split_0_flitLeft$EN;

  // register split_1_flitLeft
  reg [7 : 0] split_1_flitLeft;
  wire [7 : 0] split_1_flitLeft$D_IN;
  wire split_1_flitLeft$EN;

  // register split_2_flitLeft
  reg [7 : 0] split_2_flitLeft;
  wire [7 : 0] split_2_flitLeft$D_IN;
  wire split_2_flitLeft$EN;

  // register state
  reg state;
  wire state$D_IN, state$EN;

  // register state_1
  reg state_1;
  wire state_1$D_IN, state_1$EN;

  // register state_1_1
  reg state_1_1;
  wire state_1_1$D_IN, state_1_1$EN;

  // register state_1_1_1
  reg state_1_1_1;
  wire state_1_1_1$D_IN, state_1_1_1$EN;

  // ports of submodule cpu
  wire [233 : 0] cpu$trace_data_out_get;
  wire [127 : 0] cpu$dmem_master_rdata,
		 cpu$dmem_master_wdata,
		 cpu$imem_master_rdata,
		 cpu$imem_master_wdata;
  wire [63 : 0] cpu$dmem_master_araddr,
		cpu$dmem_master_awaddr,
		cpu$imem_master_araddr,
		cpu$imem_master_awaddr,
		cpu$set_verbosity_logdelay;
  wire [44 : 0] cpu$hart0_csr_mem_server_request_put;
  wire [37 : 0] cpu$hart0_gpr_mem_server_request_put;
  wire [32 : 0] cpu$hart0_csr_mem_server_response_get,
		cpu$hart0_gpr_mem_server_response_get;
  wire [15 : 0] cpu$dmem_master_wstrb, cpu$imem_master_wstrb;
  wire [7 : 0] cpu$dmem_master_arlen,
	       cpu$dmem_master_awlen,
	       cpu$imem_master_arlen,
	       cpu$imem_master_awlen;
  wire [4 : 0] cpu$imem_master_arid,
	       cpu$imem_master_awid,
	       cpu$imem_master_bid,
	       cpu$imem_master_rid;
  wire [3 : 0] cpu$dmem_master_arcache,
	       cpu$dmem_master_arid,
	       cpu$dmem_master_arqos,
	       cpu$dmem_master_arregion,
	       cpu$dmem_master_awcache,
	       cpu$dmem_master_awid,
	       cpu$dmem_master_awqos,
	       cpu$dmem_master_awregion,
	       cpu$dmem_master_bid,
	       cpu$dmem_master_rid,
	       cpu$hart0_put_other_req_put,
	       cpu$imem_master_arcache,
	       cpu$imem_master_arqos,
	       cpu$imem_master_arregion,
	       cpu$imem_master_awcache,
	       cpu$imem_master_awqos,
	       cpu$imem_master_awregion,
	       cpu$set_verbosity_verbosity;
  wire [2 : 0] cpu$dmem_master_arprot,
	       cpu$dmem_master_arsize,
	       cpu$dmem_master_awprot,
	       cpu$dmem_master_awsize,
	       cpu$imem_master_arprot,
	       cpu$imem_master_arsize,
	       cpu$imem_master_awprot,
	       cpu$imem_master_awsize;
  wire [1 : 0] cpu$dmem_master_arburst,
	       cpu$dmem_master_awburst,
	       cpu$dmem_master_bresp,
	       cpu$dmem_master_rresp,
	       cpu$dmem_master_ruser,
	       cpu$dmem_master_wuser,
	       cpu$imem_master_arburst,
	       cpu$imem_master_awburst,
	       cpu$imem_master_bresp,
	       cpu$imem_master_rresp,
	       cpu$imem_master_ruser,
	       cpu$imem_master_wuser;
  wire cpu$EN_hart0_csr_mem_server_request_put,
       cpu$EN_hart0_csr_mem_server_response_get,
       cpu$EN_hart0_gpr_mem_server_request_put,
       cpu$EN_hart0_gpr_mem_server_response_get,
       cpu$EN_hart0_put_other_req_put,
       cpu$EN_hart0_server_reset_request_put,
       cpu$EN_hart0_server_reset_response_get,
       cpu$EN_hart0_server_run_halt_request_put,
       cpu$EN_hart0_server_run_halt_response_get,
       cpu$EN_set_verbosity,
       cpu$EN_trace_data_out_get,
       cpu$RDY_hart0_csr_mem_server_request_put,
       cpu$RDY_hart0_csr_mem_server_response_get,
       cpu$RDY_hart0_gpr_mem_server_request_put,
       cpu$RDY_hart0_gpr_mem_server_response_get,
       cpu$RDY_hart0_server_reset_request_put,
       cpu$RDY_hart0_server_reset_response_get,
       cpu$RDY_hart0_server_run_halt_request_put,
       cpu$RDY_hart0_server_run_halt_response_get,
       cpu$RDY_trace_data_out_get,
       cpu$dmem_master_arlock,
       cpu$dmem_master_arready,
       cpu$dmem_master_arvalid,
       cpu$dmem_master_awlock,
       cpu$dmem_master_awready,
       cpu$dmem_master_awvalid,
       cpu$dmem_master_bready,
       cpu$dmem_master_bvalid,
       cpu$dmem_master_rlast,
       cpu$dmem_master_rready,
       cpu$dmem_master_rvalid,
       cpu$dmem_master_wlast,
       cpu$dmem_master_wready,
       cpu$dmem_master_wvalid,
       cpu$hart0_server_reset_request_put,
       cpu$hart0_server_reset_response_get,
       cpu$hart0_server_run_halt_request_put,
       cpu$hart0_server_run_halt_response_get,
       cpu$imem_master_arlock,
       cpu$imem_master_arready,
       cpu$imem_master_arvalid,
       cpu$imem_master_awlock,
       cpu$imem_master_awready,
       cpu$imem_master_awvalid,
       cpu$imem_master_bready,
       cpu$imem_master_bvalid,
       cpu$imem_master_rlast,
       cpu$imem_master_rready,
       cpu$imem_master_rvalid,
       cpu$imem_master_wlast,
       cpu$imem_master_wready,
       cpu$imem_master_wvalid,
       cpu$m_external_interrupt_req_set_not_clear,
       cpu$nmi_req_set_not_clear,
       cpu$s_external_interrupt_req_set_not_clear,
       cpu$software_interrupt_req_set_not_clear,
       cpu$timer_interrupt_req_set_not_clear;

  // ports of submodule cpu_imem_b_buffer_ff
  wire [6 : 0] cpu_imem_b_buffer_ff$D_IN, cpu_imem_b_buffer_ff$D_OUT;
  wire cpu_imem_b_buffer_ff$CLR,
       cpu_imem_b_buffer_ff$DEQ,
       cpu_imem_b_buffer_ff$EMPTY_N,
       cpu_imem_b_buffer_ff$ENQ,
       cpu_imem_b_buffer_ff$FULL_N;

  // ports of submodule cpu_imem_b_buffer_firstValid
  wire cpu_imem_b_buffer_firstValid$D_IN,
       cpu_imem_b_buffer_firstValid$EN,
       cpu_imem_b_buffer_firstValid$Q_OUT;

  // ports of submodule cpu_imem_r_buffer_ff
  wire [137 : 0] cpu_imem_r_buffer_ff$D_IN, cpu_imem_r_buffer_ff$D_OUT;
  wire cpu_imem_r_buffer_ff$CLR,
       cpu_imem_r_buffer_ff$DEQ,
       cpu_imem_r_buffer_ff$EMPTY_N,
       cpu_imem_r_buffer_ff$ENQ,
       cpu_imem_r_buffer_ff$FULL_N;

  // ports of submodule cpu_imem_r_buffer_firstValid
  wire cpu_imem_r_buffer_firstValid$D_IN,
       cpu_imem_r_buffer_firstValid$EN,
       cpu_imem_r_buffer_firstValid$Q_OUT;

  // ports of submodule debug_module
  wire [63 : 0] debug_module$master_araddr,
		debug_module$master_awaddr,
		debug_module$master_rdata,
		debug_module$master_wdata;
  wire [44 : 0] debug_module$hart0_csr_mem_client_request_get;
  wire [37 : 0] debug_module$hart0_gpr_mem_client_request_get;
  wire [32 : 0] debug_module$hart0_csr_mem_client_response_put,
		debug_module$hart0_gpr_mem_client_response_put;
  wire [31 : 0] debug_module$dmi_read_data, debug_module$dmi_write_dm_word;
  wire [7 : 0] debug_module$master_arlen,
	       debug_module$master_awlen,
	       debug_module$master_wstrb;
  wire [6 : 0] debug_module$dmi_read_addr_dm_addr,
	       debug_module$dmi_write_dm_addr;
  wire [3 : 0] debug_module$hart0_get_other_req_get,
	       debug_module$master_arcache,
	       debug_module$master_arid,
	       debug_module$master_arqos,
	       debug_module$master_arregion,
	       debug_module$master_awcache,
	       debug_module$master_awid,
	       debug_module$master_awqos,
	       debug_module$master_awregion,
	       debug_module$master_bid,
	       debug_module$master_rid;
  wire [2 : 0] debug_module$master_arprot,
	       debug_module$master_arsize,
	       debug_module$master_awprot,
	       debug_module$master_awsize;
  wire [1 : 0] debug_module$master_arburst,
	       debug_module$master_awburst,
	       debug_module$master_bresp,
	       debug_module$master_rresp,
	       debug_module$master_ruser,
	       debug_module$master_wuser;
  wire debug_module$EN_dmi_read_addr,
       debug_module$EN_dmi_read_data,
       debug_module$EN_dmi_write,
       debug_module$EN_hart0_client_run_halt_request_get,
       debug_module$EN_hart0_client_run_halt_response_put,
       debug_module$EN_hart0_csr_mem_client_request_get,
       debug_module$EN_hart0_csr_mem_client_response_put,
       debug_module$EN_hart0_get_other_req_get,
       debug_module$EN_hart0_gpr_mem_client_request_get,
       debug_module$EN_hart0_gpr_mem_client_response_put,
       debug_module$EN_hart0_reset_client_request_get,
       debug_module$EN_hart0_reset_client_response_put,
       debug_module$EN_ndm_reset_client_request_get,
       debug_module$EN_ndm_reset_client_response_put,
       debug_module$RDY_dmi_read_addr,
       debug_module$RDY_dmi_read_data,
       debug_module$RDY_dmi_write,
       debug_module$RDY_hart0_client_run_halt_request_get,
       debug_module$RDY_hart0_client_run_halt_response_put,
       debug_module$RDY_hart0_csr_mem_client_request_get,
       debug_module$RDY_hart0_csr_mem_client_response_put,
       debug_module$RDY_hart0_get_other_req_get,
       debug_module$RDY_hart0_gpr_mem_client_request_get,
       debug_module$RDY_hart0_gpr_mem_client_response_put,
       debug_module$RDY_hart0_reset_client_request_get,
       debug_module$RDY_hart0_reset_client_response_put,
       debug_module$RDY_ndm_reset_client_request_get,
       debug_module$RDY_ndm_reset_client_response_put,
       debug_module$hart0_client_run_halt_request_get,
       debug_module$hart0_client_run_halt_response_put,
       debug_module$hart0_reset_client_request_get,
       debug_module$hart0_reset_client_response_put,
       debug_module$master_arlock,
       debug_module$master_arready,
       debug_module$master_arvalid,
       debug_module$master_awlock,
       debug_module$master_awready,
       debug_module$master_awvalid,
       debug_module$master_bready,
       debug_module$master_bvalid,
       debug_module$master_rlast,
       debug_module$master_rready,
       debug_module$master_rvalid,
       debug_module$master_wlast,
       debug_module$master_wready,
       debug_module$master_wvalid,
       debug_module$ndm_reset_client_request_get,
       debug_module$ndm_reset_client_response_put;

  // ports of submodule deburst_debug_countWriteRspFF
  wire [7 : 0] deburst_debug_countWriteRspFF$D_IN,
	       deburst_debug_countWriteRspFF$D_OUT;
  wire deburst_debug_countWriteRspFF$CLR,
       deburst_debug_countWriteRspFF$DEQ,
       deburst_debug_countWriteRspFF$EMPTY_N,
       deburst_debug_countWriteRspFF$ENQ,
       deburst_debug_countWriteRspFF$FULL_N;

  // ports of submodule deburst_debug_inShim_arff
  wire [96 : 0] deburst_debug_inShim_arff$D_IN,
		deburst_debug_inShim_arff$D_OUT;
  wire deburst_debug_inShim_arff$CLR,
       deburst_debug_inShim_arff$DEQ,
       deburst_debug_inShim_arff$EMPTY_N,
       deburst_debug_inShim_arff$ENQ;

  // ports of submodule deburst_debug_inShim_awff
  wire [96 : 0] deburst_debug_inShim_awff$D_IN,
		deburst_debug_inShim_awff$D_OUT;
  wire deburst_debug_inShim_awff$CLR,
       deburst_debug_inShim_awff$DEQ,
       deburst_debug_inShim_awff$EMPTY_N,
       deburst_debug_inShim_awff$ENQ;

  // ports of submodule deburst_debug_inShim_bff
  wire [5 : 0] deburst_debug_inShim_bff$D_IN;
  wire deburst_debug_inShim_bff$CLR,
       deburst_debug_inShim_bff$DEQ,
       deburst_debug_inShim_bff$ENQ,
       deburst_debug_inShim_bff$FULL_N;

  // ports of submodule deburst_debug_inShim_rff
  wire [72 : 0] deburst_debug_inShim_rff$D_IN;
  wire deburst_debug_inShim_rff$CLR,
       deburst_debug_inShim_rff$DEQ,
       deburst_debug_inShim_rff$ENQ,
       deburst_debug_inShim_rff$FULL_N;

  // ports of submodule deburst_debug_inShim_wff
  wire [74 : 0] deburst_debug_inShim_wff$D_IN, deburst_debug_inShim_wff$D_OUT;
  wire deburst_debug_inShim_wff$CLR,
       deburst_debug_inShim_wff$DEQ,
       deburst_debug_inShim_wff$EMPTY_N,
       deburst_debug_inShim_wff$ENQ;

  // ports of submodule deburst_debug_lastReadRspFF
  wire deburst_debug_lastReadRspFF$CLR,
       deburst_debug_lastReadRspFF$DEQ,
       deburst_debug_lastReadRspFF$D_IN,
       deburst_debug_lastReadRspFF$D_OUT,
       deburst_debug_lastReadRspFF$EMPTY_N,
       deburst_debug_lastReadRspFF$ENQ,
       deburst_debug_lastReadRspFF$FULL_N;

  // ports of submodule deburst_debug_outShim_arff
  wire [96 : 0] deburst_debug_outShim_arff$D_IN;
  wire deburst_debug_outShim_arff$CLR,
       deburst_debug_outShim_arff$DEQ,
       deburst_debug_outShim_arff$ENQ,
       deburst_debug_outShim_arff$FULL_N;

  // ports of submodule deburst_debug_outShim_awff
  wire [96 : 0] deburst_debug_outShim_awff$D_IN;
  wire deburst_debug_outShim_awff$CLR,
       deburst_debug_outShim_awff$DEQ,
       deburst_debug_outShim_awff$ENQ,
       deburst_debug_outShim_awff$FULL_N;

  // ports of submodule deburst_debug_outShim_bff
  wire [5 : 0] deburst_debug_outShim_bff$D_IN,
	       deburst_debug_outShim_bff$D_OUT;
  wire deburst_debug_outShim_bff$CLR,
       deburst_debug_outShim_bff$DEQ,
       deburst_debug_outShim_bff$EMPTY_N,
       deburst_debug_outShim_bff$ENQ;

  // ports of submodule deburst_debug_outShim_rff
  wire [72 : 0] deburst_debug_outShim_rff$D_IN,
		deburst_debug_outShim_rff$D_OUT;
  wire deburst_debug_outShim_rff$CLR,
       deburst_debug_outShim_rff$DEQ,
       deburst_debug_outShim_rff$EMPTY_N,
       deburst_debug_outShim_rff$ENQ;

  // ports of submodule deburst_debug_outShim_wff
  wire [74 : 0] deburst_debug_outShim_wff$D_IN;
  wire deburst_debug_outShim_wff$CLR,
       deburst_debug_outShim_wff$DEQ,
       deburst_debug_outShim_wff$ENQ,
       deburst_debug_outShim_wff$FULL_N;

  // ports of submodule deburst_dm_countWriteRspFF
  wire [7 : 0] deburst_dm_countWriteRspFF$D_IN,
	       deburst_dm_countWriteRspFF$D_OUT;
  wire deburst_dm_countWriteRspFF$CLR,
       deburst_dm_countWriteRspFF$DEQ,
       deburst_dm_countWriteRspFF$EMPTY_N,
       deburst_dm_countWriteRspFF$ENQ,
       deburst_dm_countWriteRspFF$FULL_N;

  // ports of submodule deburst_dm_inShim_arff
  wire [96 : 0] deburst_dm_inShim_arff$D_IN, deburst_dm_inShim_arff$D_OUT;
  wire deburst_dm_inShim_arff$CLR,
       deburst_dm_inShim_arff$DEQ,
       deburst_dm_inShim_arff$EMPTY_N,
       deburst_dm_inShim_arff$ENQ,
       deburst_dm_inShim_arff$FULL_N;

  // ports of submodule deburst_dm_inShim_awff
  wire [96 : 0] deburst_dm_inShim_awff$D_IN, deburst_dm_inShim_awff$D_OUT;
  wire deburst_dm_inShim_awff$CLR,
       deburst_dm_inShim_awff$DEQ,
       deburst_dm_inShim_awff$EMPTY_N,
       deburst_dm_inShim_awff$ENQ,
       deburst_dm_inShim_awff$FULL_N;

  // ports of submodule deburst_dm_inShim_bff
  wire [5 : 0] deburst_dm_inShim_bff$D_IN, deburst_dm_inShim_bff$D_OUT;
  wire deburst_dm_inShim_bff$CLR,
       deburst_dm_inShim_bff$DEQ,
       deburst_dm_inShim_bff$EMPTY_N,
       deburst_dm_inShim_bff$ENQ,
       deburst_dm_inShim_bff$FULL_N;

  // ports of submodule deburst_dm_inShim_rff
  wire [72 : 0] deburst_dm_inShim_rff$D_IN, deburst_dm_inShim_rff$D_OUT;
  wire deburst_dm_inShim_rff$CLR,
       deburst_dm_inShim_rff$DEQ,
       deburst_dm_inShim_rff$EMPTY_N,
       deburst_dm_inShim_rff$ENQ,
       deburst_dm_inShim_rff$FULL_N;

  // ports of submodule deburst_dm_inShim_wff
  wire [74 : 0] deburst_dm_inShim_wff$D_IN, deburst_dm_inShim_wff$D_OUT;
  wire deburst_dm_inShim_wff$CLR,
       deburst_dm_inShim_wff$DEQ,
       deburst_dm_inShim_wff$EMPTY_N,
       deburst_dm_inShim_wff$ENQ,
       deburst_dm_inShim_wff$FULL_N;

  // ports of submodule deburst_dm_lastReadRspFF
  wire deburst_dm_lastReadRspFF$CLR,
       deburst_dm_lastReadRspFF$DEQ,
       deburst_dm_lastReadRspFF$D_IN,
       deburst_dm_lastReadRspFF$D_OUT,
       deburst_dm_lastReadRspFF$EMPTY_N,
       deburst_dm_lastReadRspFF$ENQ,
       deburst_dm_lastReadRspFF$FULL_N;

  // ports of submodule deburst_dm_outShim_arff
  wire [96 : 0] deburst_dm_outShim_arff$D_IN, deburst_dm_outShim_arff$D_OUT;
  wire deburst_dm_outShim_arff$CLR,
       deburst_dm_outShim_arff$DEQ,
       deburst_dm_outShim_arff$EMPTY_N,
       deburst_dm_outShim_arff$ENQ,
       deburst_dm_outShim_arff$FULL_N;

  // ports of submodule deburst_dm_outShim_awff
  wire [96 : 0] deburst_dm_outShim_awff$D_IN, deburst_dm_outShim_awff$D_OUT;
  wire deburst_dm_outShim_awff$CLR,
       deburst_dm_outShim_awff$DEQ,
       deburst_dm_outShim_awff$EMPTY_N,
       deburst_dm_outShim_awff$ENQ,
       deburst_dm_outShim_awff$FULL_N;

  // ports of submodule deburst_dm_outShim_bff
  wire [5 : 0] deburst_dm_outShim_bff$D_IN, deburst_dm_outShim_bff$D_OUT;
  wire deburst_dm_outShim_bff$CLR,
       deburst_dm_outShim_bff$DEQ,
       deburst_dm_outShim_bff$EMPTY_N,
       deburst_dm_outShim_bff$ENQ,
       deburst_dm_outShim_bff$FULL_N;

  // ports of submodule deburst_dm_outShim_rff
  wire [72 : 0] deburst_dm_outShim_rff$D_IN, deburst_dm_outShim_rff$D_OUT;
  wire deburst_dm_outShim_rff$CLR,
       deburst_dm_outShim_rff$DEQ,
       deburst_dm_outShim_rff$EMPTY_N,
       deburst_dm_outShim_rff$ENQ,
       deburst_dm_outShim_rff$FULL_N;

  // ports of submodule deburst_dm_outShim_wff
  wire [74 : 0] deburst_dm_outShim_wff$D_IN, deburst_dm_outShim_wff$D_OUT;
  wire deburst_dm_outShim_wff$CLR,
       deburst_dm_outShim_wff$DEQ,
       deburst_dm_outShim_wff$EMPTY_N,
       deburst_dm_outShim_wff$ENQ,
       deburst_dm_outShim_wff$FULL_N;

  // ports of submodule dm_csr_tap
  wire [233 : 0] dm_csr_tap$trace_data_out_get;
  wire [44 : 0] dm_csr_tap$client_request_get, dm_csr_tap$server_request_put;
  wire [32 : 0] dm_csr_tap$client_response_put,
		dm_csr_tap$server_response_get;
  wire dm_csr_tap$EN_client_request_get,
       dm_csr_tap$EN_client_response_put,
       dm_csr_tap$EN_server_request_put,
       dm_csr_tap$EN_server_response_get,
       dm_csr_tap$EN_trace_data_out_get,
       dm_csr_tap$RDY_client_request_get,
       dm_csr_tap$RDY_client_response_put,
       dm_csr_tap$RDY_server_request_put,
       dm_csr_tap$RDY_server_response_get,
       dm_csr_tap$RDY_trace_data_out_get;

  // ports of submodule dm_gpr_tap_ifc
  wire [233 : 0] dm_gpr_tap_ifc$trace_data_out_get;
  wire [37 : 0] dm_gpr_tap_ifc$client_request_get,
		dm_gpr_tap_ifc$server_request_put;
  wire [32 : 0] dm_gpr_tap_ifc$client_response_put,
		dm_gpr_tap_ifc$server_response_get;
  wire dm_gpr_tap_ifc$EN_client_request_get,
       dm_gpr_tap_ifc$EN_client_response_put,
       dm_gpr_tap_ifc$EN_server_request_put,
       dm_gpr_tap_ifc$EN_server_response_get,
       dm_gpr_tap_ifc$EN_trace_data_out_get,
       dm_gpr_tap_ifc$RDY_client_request_get,
       dm_gpr_tap_ifc$RDY_client_response_put,
       dm_gpr_tap_ifc$RDY_server_request_put,
       dm_gpr_tap_ifc$RDY_server_response_get,
       dm_gpr_tap_ifc$RDY_trace_data_out_get;

  // ports of submodule dm_master_nonsynth_takeUpperR
  wire dm_master_nonsynth_takeUpperR$CLR,
       dm_master_nonsynth_takeUpperR$DEQ,
       dm_master_nonsynth_takeUpperR$D_IN,
       dm_master_nonsynth_takeUpperR$D_OUT,
       dm_master_nonsynth_takeUpperR$EMPTY_N,
       dm_master_nonsynth_takeUpperR$ENQ,
       dm_master_nonsynth_takeUpperR$FULL_N;

  // ports of submodule dm_master_nonsynth_takeUpperW
  wire dm_master_nonsynth_takeUpperW$CLR,
       dm_master_nonsynth_takeUpperW$DEQ,
       dm_master_nonsynth_takeUpperW$D_IN,
       dm_master_nonsynth_takeUpperW$D_OUT,
       dm_master_nonsynth_takeUpperW$EMPTY_N,
       dm_master_nonsynth_takeUpperW$ENQ,
       dm_master_nonsynth_takeUpperW$FULL_N;

  // ports of submodule dm_mem_tap
  wire [233 : 0] dm_mem_tap$trace_data_out_get;
  wire [63 : 0] dm_mem_tap$master_araddr,
		dm_mem_tap$master_awaddr,
		dm_mem_tap$master_rdata,
		dm_mem_tap$master_wdata,
		dm_mem_tap$slave_araddr,
		dm_mem_tap$slave_awaddr,
		dm_mem_tap$slave_rdata,
		dm_mem_tap$slave_wdata;
  wire [7 : 0] dm_mem_tap$master_arlen,
	       dm_mem_tap$master_awlen,
	       dm_mem_tap$master_wstrb,
	       dm_mem_tap$slave_arlen,
	       dm_mem_tap$slave_awlen,
	       dm_mem_tap$slave_wstrb;
  wire [3 : 0] dm_mem_tap$master_arcache,
	       dm_mem_tap$master_arid,
	       dm_mem_tap$master_arqos,
	       dm_mem_tap$master_arregion,
	       dm_mem_tap$master_awcache,
	       dm_mem_tap$master_awid,
	       dm_mem_tap$master_awqos,
	       dm_mem_tap$master_awregion,
	       dm_mem_tap$master_bid,
	       dm_mem_tap$master_rid,
	       dm_mem_tap$slave_arcache,
	       dm_mem_tap$slave_arid,
	       dm_mem_tap$slave_arqos,
	       dm_mem_tap$slave_arregion,
	       dm_mem_tap$slave_awcache,
	       dm_mem_tap$slave_awid,
	       dm_mem_tap$slave_awqos,
	       dm_mem_tap$slave_awregion,
	       dm_mem_tap$slave_bid,
	       dm_mem_tap$slave_rid;
  wire [2 : 0] dm_mem_tap$master_arprot,
	       dm_mem_tap$master_arsize,
	       dm_mem_tap$master_awprot,
	       dm_mem_tap$master_awsize,
	       dm_mem_tap$slave_arprot,
	       dm_mem_tap$slave_arsize,
	       dm_mem_tap$slave_awprot,
	       dm_mem_tap$slave_awsize;
  wire [1 : 0] dm_mem_tap$master_arburst,
	       dm_mem_tap$master_awburst,
	       dm_mem_tap$master_bresp,
	       dm_mem_tap$master_rresp,
	       dm_mem_tap$master_ruser,
	       dm_mem_tap$master_wuser,
	       dm_mem_tap$slave_arburst,
	       dm_mem_tap$slave_awburst,
	       dm_mem_tap$slave_bresp,
	       dm_mem_tap$slave_rresp,
	       dm_mem_tap$slave_ruser,
	       dm_mem_tap$slave_wuser;
  wire dm_mem_tap$EN_trace_data_out_get,
       dm_mem_tap$RDY_trace_data_out_get,
       dm_mem_tap$master_arlock,
       dm_mem_tap$master_arready,
       dm_mem_tap$master_arvalid,
       dm_mem_tap$master_awlock,
       dm_mem_tap$master_awready,
       dm_mem_tap$master_awvalid,
       dm_mem_tap$master_bready,
       dm_mem_tap$master_bvalid,
       dm_mem_tap$master_rlast,
       dm_mem_tap$master_rready,
       dm_mem_tap$master_rvalid,
       dm_mem_tap$master_wlast,
       dm_mem_tap$master_wready,
       dm_mem_tap$master_wvalid,
       dm_mem_tap$slave_arlock,
       dm_mem_tap$slave_arready,
       dm_mem_tap$slave_arvalid,
       dm_mem_tap$slave_awlock,
       dm_mem_tap$slave_awready,
       dm_mem_tap$slave_awvalid,
       dm_mem_tap$slave_bready,
       dm_mem_tap$slave_bvalid,
       dm_mem_tap$slave_rlast,
       dm_mem_tap$slave_rready,
       dm_mem_tap$slave_rvalid,
       dm_mem_tap$slave_wlast,
       dm_mem_tap$slave_wready,
       dm_mem_tap$slave_wvalid;

  // ports of submodule f_reset_reqs
  wire f_reset_reqs$CLR,
       f_reset_reqs$DEQ,
       f_reset_reqs$D_IN,
       f_reset_reqs$D_OUT,
       f_reset_reqs$EMPTY_N,
       f_reset_reqs$ENQ,
       f_reset_reqs$FULL_N;

  // ports of submodule f_reset_requestor
  wire f_reset_requestor$CLR,
       f_reset_requestor$DEQ,
       f_reset_requestor$D_IN,
       f_reset_requestor$D_OUT,
       f_reset_requestor$EMPTY_N,
       f_reset_requestor$ENQ,
       f_reset_requestor$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$D_IN,
       f_reset_rsps$D_OUT,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule f_trace_data_merged
  reg [233 : 0] f_trace_data_merged$D_IN;
  wire [233 : 0] f_trace_data_merged$D_OUT;
  wire f_trace_data_merged$CLR,
       f_trace_data_merged$DEQ,
       f_trace_data_merged$EMPTY_N,
       f_trace_data_merged$ENQ,
       f_trace_data_merged$FULL_N;

  // ports of submodule ifcs_0_1_innerReq
  wire [97 : 0] ifcs_0_1_innerReq$D_IN, ifcs_0_1_innerReq$D_OUT;
  wire ifcs_0_1_innerReq$CLR,
       ifcs_0_1_innerReq$DEQ,
       ifcs_0_1_innerReq$EMPTY_N,
       ifcs_0_1_innerReq$ENQ,
       ifcs_0_1_innerReq$FULL_N;

  // ports of submodule ifcs_0_1_innerRoute
  wire [2 : 0] ifcs_0_1_innerRoute$D_IN, ifcs_0_1_innerRoute$D_OUT;
  wire ifcs_0_1_innerRoute$CLR,
       ifcs_0_1_innerRoute$DEQ,
       ifcs_0_1_innerRoute$EMPTY_N,
       ifcs_0_1_innerRoute$ENQ,
       ifcs_0_1_innerRoute$FULL_N;

  // ports of submodule ifcs_0_1_noRouteRsp
  wire [136 : 0] ifcs_0_1_noRouteRsp$D_IN, ifcs_0_1_noRouteRsp$D_OUT;
  wire ifcs_0_1_noRouteRsp$CLR,
       ifcs_0_1_noRouteRsp$DEQ,
       ifcs_0_1_noRouteRsp$EMPTY_N,
       ifcs_0_1_noRouteRsp$ENQ,
       ifcs_0_1_noRouteRsp$FULL_N;

  // ports of submodule ifcs_0_1_routeBack
  wire [1 : 0] ifcs_0_1_routeBack$D_IN, ifcs_0_1_routeBack$D_OUT;
  wire ifcs_0_1_routeBack$CLR,
       ifcs_0_1_routeBack$DEQ,
       ifcs_0_1_routeBack$EMPTY_N,
       ifcs_0_1_routeBack$ENQ,
       ifcs_0_1_routeBack$FULL_N;

  // ports of submodule ifcs_0_1_rspBack
  wire [136 : 0] ifcs_0_1_rspBack$D_IN, ifcs_0_1_rspBack$D_OUT;
  wire ifcs_0_1_rspBack$CLR,
       ifcs_0_1_rspBack$DEQ,
       ifcs_0_1_rspBack$EMPTY_N,
       ifcs_0_1_rspBack$ENQ,
       ifcs_0_1_rspBack$FULL_N;

  // ports of submodule ifcs_0_innerReq
  wire [245 : 0] ifcs_0_innerReq$D_IN, ifcs_0_innerReq$D_OUT;
  wire ifcs_0_innerReq$CLR,
       ifcs_0_innerReq$DEQ,
       ifcs_0_innerReq$EMPTY_N,
       ifcs_0_innerReq$ENQ,
       ifcs_0_innerReq$FULL_N;

  // ports of submodule ifcs_0_innerRoute
  wire [2 : 0] ifcs_0_innerRoute$D_IN, ifcs_0_innerRoute$D_OUT;
  wire ifcs_0_innerRoute$CLR,
       ifcs_0_innerRoute$DEQ,
       ifcs_0_innerRoute$EMPTY_N,
       ifcs_0_innerRoute$ENQ,
       ifcs_0_innerRoute$FULL_N;

  // ports of submodule ifcs_0_noRouteRsp
  wire [5 : 0] ifcs_0_noRouteRsp$D_IN, ifcs_0_noRouteRsp$D_OUT;
  wire ifcs_0_noRouteRsp$CLR,
       ifcs_0_noRouteRsp$DEQ,
       ifcs_0_noRouteRsp$EMPTY_N,
       ifcs_0_noRouteRsp$ENQ,
       ifcs_0_noRouteRsp$FULL_N;

  // ports of submodule ifcs_0_routeBack
  wire [1 : 0] ifcs_0_routeBack$D_IN, ifcs_0_routeBack$D_OUT;
  wire ifcs_0_routeBack$CLR,
       ifcs_0_routeBack$DEQ,
       ifcs_0_routeBack$EMPTY_N,
       ifcs_0_routeBack$ENQ,
       ifcs_0_routeBack$FULL_N;

  // ports of submodule ifcs_0_rspBack
  wire [5 : 0] ifcs_0_rspBack$D_IN, ifcs_0_rspBack$D_OUT;
  wire ifcs_0_rspBack$CLR,
       ifcs_0_rspBack$DEQ,
       ifcs_0_rspBack$EMPTY_N,
       ifcs_0_rspBack$ENQ,
       ifcs_0_rspBack$FULL_N;

  // ports of submodule ifcs_1_1_innerReq
  wire [97 : 0] ifcs_1_1_innerReq$D_IN, ifcs_1_1_innerReq$D_OUT;
  wire ifcs_1_1_innerReq$CLR,
       ifcs_1_1_innerReq$DEQ,
       ifcs_1_1_innerReq$EMPTY_N,
       ifcs_1_1_innerReq$ENQ,
       ifcs_1_1_innerReq$FULL_N;

  // ports of submodule ifcs_1_1_innerRoute
  wire [2 : 0] ifcs_1_1_innerRoute$D_IN, ifcs_1_1_innerRoute$D_OUT;
  wire ifcs_1_1_innerRoute$CLR,
       ifcs_1_1_innerRoute$DEQ,
       ifcs_1_1_innerRoute$EMPTY_N,
       ifcs_1_1_innerRoute$ENQ,
       ifcs_1_1_innerRoute$FULL_N;

  // ports of submodule ifcs_1_1_noRouteRsp
  wire [136 : 0] ifcs_1_1_noRouteRsp$D_IN, ifcs_1_1_noRouteRsp$D_OUT;
  wire ifcs_1_1_noRouteRsp$CLR,
       ifcs_1_1_noRouteRsp$DEQ,
       ifcs_1_1_noRouteRsp$EMPTY_N,
       ifcs_1_1_noRouteRsp$ENQ,
       ifcs_1_1_noRouteRsp$FULL_N;

  // ports of submodule ifcs_1_1_routeBack
  wire [1 : 0] ifcs_1_1_routeBack$D_IN, ifcs_1_1_routeBack$D_OUT;
  wire ifcs_1_1_routeBack$CLR,
       ifcs_1_1_routeBack$DEQ,
       ifcs_1_1_routeBack$EMPTY_N,
       ifcs_1_1_routeBack$ENQ,
       ifcs_1_1_routeBack$FULL_N;

  // ports of submodule ifcs_1_1_rspBack
  wire [136 : 0] ifcs_1_1_rspBack$D_IN, ifcs_1_1_rspBack$D_OUT;
  wire ifcs_1_1_rspBack$CLR,
       ifcs_1_1_rspBack$DEQ,
       ifcs_1_1_rspBack$EMPTY_N,
       ifcs_1_1_rspBack$ENQ,
       ifcs_1_1_rspBack$FULL_N;

  // ports of submodule ifcs_1_innerReq
  wire [245 : 0] ifcs_1_innerReq$D_IN, ifcs_1_innerReq$D_OUT;
  wire ifcs_1_innerReq$CLR,
       ifcs_1_innerReq$DEQ,
       ifcs_1_innerReq$EMPTY_N,
       ifcs_1_innerReq$ENQ,
       ifcs_1_innerReq$FULL_N;

  // ports of submodule ifcs_1_innerRoute
  wire [2 : 0] ifcs_1_innerRoute$D_IN, ifcs_1_innerRoute$D_OUT;
  wire ifcs_1_innerRoute$CLR,
       ifcs_1_innerRoute$DEQ,
       ifcs_1_innerRoute$EMPTY_N,
       ifcs_1_innerRoute$ENQ,
       ifcs_1_innerRoute$FULL_N;

  // ports of submodule ifcs_1_noRouteRsp
  wire [5 : 0] ifcs_1_noRouteRsp$D_IN, ifcs_1_noRouteRsp$D_OUT;
  wire ifcs_1_noRouteRsp$CLR,
       ifcs_1_noRouteRsp$DEQ,
       ifcs_1_noRouteRsp$EMPTY_N,
       ifcs_1_noRouteRsp$ENQ,
       ifcs_1_noRouteRsp$FULL_N;

  // ports of submodule ifcs_1_routeBack
  wire [1 : 0] ifcs_1_routeBack$D_IN, ifcs_1_routeBack$D_OUT;
  wire ifcs_1_routeBack$CLR,
       ifcs_1_routeBack$DEQ,
       ifcs_1_routeBack$EMPTY_N,
       ifcs_1_routeBack$ENQ,
       ifcs_1_routeBack$FULL_N;

  // ports of submodule ifcs_1_rspBack
  wire [5 : 0] ifcs_1_rspBack$D_IN, ifcs_1_rspBack$D_OUT;
  wire ifcs_1_rspBack$CLR,
       ifcs_1_rspBack$DEQ,
       ifcs_1_rspBack$EMPTY_N,
       ifcs_1_rspBack$ENQ,
       ifcs_1_rspBack$FULL_N;

  // ports of submodule ifcs_2_1_routeBack
  wire [1 : 0] ifcs_2_1_routeBack$D_IN, ifcs_2_1_routeBack$D_OUT;
  wire ifcs_2_1_routeBack$CLR,
       ifcs_2_1_routeBack$DEQ,
       ifcs_2_1_routeBack$EMPTY_N,
       ifcs_2_1_routeBack$ENQ,
       ifcs_2_1_routeBack$FULL_N;

  // ports of submodule ifcs_2_1_rspBack
  wire [136 : 0] ifcs_2_1_rspBack$D_IN, ifcs_2_1_rspBack$D_OUT;
  wire ifcs_2_1_rspBack$CLR,
       ifcs_2_1_rspBack$DEQ,
       ifcs_2_1_rspBack$EMPTY_N,
       ifcs_2_1_rspBack$ENQ,
       ifcs_2_1_rspBack$FULL_N;

  // ports of submodule ifcs_2_routeBack
  wire [1 : 0] ifcs_2_routeBack$D_IN, ifcs_2_routeBack$D_OUT;
  wire ifcs_2_routeBack$CLR,
       ifcs_2_routeBack$DEQ,
       ifcs_2_routeBack$EMPTY_N,
       ifcs_2_routeBack$ENQ,
       ifcs_2_routeBack$FULL_N;

  // ports of submodule ifcs_2_rspBack
  wire [5 : 0] ifcs_2_rspBack$D_IN, ifcs_2_rspBack$D_OUT;
  wire ifcs_2_rspBack$CLR,
       ifcs_2_rspBack$DEQ,
       ifcs_2_rspBack$EMPTY_N,
       ifcs_2_rspBack$ENQ,
       ifcs_2_rspBack$FULL_N;

  // ports of submodule msNoSynth_0_b_buffer_ff
  wire [5 : 0] msNoSynth_0_b_buffer_ff$D_IN, msNoSynth_0_b_buffer_ff$D_OUT;
  wire msNoSynth_0_b_buffer_ff$CLR,
       msNoSynth_0_b_buffer_ff$DEQ,
       msNoSynth_0_b_buffer_ff$EMPTY_N,
       msNoSynth_0_b_buffer_ff$ENQ,
       msNoSynth_0_b_buffer_ff$FULL_N;

  // ports of submodule msNoSynth_0_b_buffer_firstValid
  wire msNoSynth_0_b_buffer_firstValid$D_IN,
       msNoSynth_0_b_buffer_firstValid$EN,
       msNoSynth_0_b_buffer_firstValid$Q_OUT;

  // ports of submodule msNoSynth_0_r_buffer_ff
  wire [136 : 0] msNoSynth_0_r_buffer_ff$D_IN, msNoSynth_0_r_buffer_ff$D_OUT;
  wire msNoSynth_0_r_buffer_ff$CLR,
       msNoSynth_0_r_buffer_ff$DEQ,
       msNoSynth_0_r_buffer_ff$EMPTY_N,
       msNoSynth_0_r_buffer_ff$ENQ,
       msNoSynth_0_r_buffer_ff$FULL_N;

  // ports of submodule msNoSynth_0_r_buffer_firstValid
  wire msNoSynth_0_r_buffer_firstValid$D_IN,
       msNoSynth_0_r_buffer_firstValid$EN,
       msNoSynth_0_r_buffer_firstValid$Q_OUT;

  // ports of submodule msNoSynth_1_b_buffer_ff
  wire [5 : 0] msNoSynth_1_b_buffer_ff$D_IN, msNoSynth_1_b_buffer_ff$D_OUT;
  wire msNoSynth_1_b_buffer_ff$CLR,
       msNoSynth_1_b_buffer_ff$DEQ,
       msNoSynth_1_b_buffer_ff$EMPTY_N,
       msNoSynth_1_b_buffer_ff$ENQ,
       msNoSynth_1_b_buffer_ff$FULL_N;

  // ports of submodule msNoSynth_1_b_buffer_firstValid
  wire msNoSynth_1_b_buffer_firstValid$D_IN,
       msNoSynth_1_b_buffer_firstValid$EN,
       msNoSynth_1_b_buffer_firstValid$Q_OUT;

  // ports of submodule msNoSynth_1_r_buffer_ff
  wire [136 : 0] msNoSynth_1_r_buffer_ff$D_IN, msNoSynth_1_r_buffer_ff$D_OUT;
  wire msNoSynth_1_r_buffer_ff$CLR,
       msNoSynth_1_r_buffer_ff$DEQ,
       msNoSynth_1_r_buffer_ff$EMPTY_N,
       msNoSynth_1_r_buffer_ff$ENQ,
       msNoSynth_1_r_buffer_ff$FULL_N;

  // ports of submodule msNoSynth_1_r_buffer_firstValid
  wire msNoSynth_1_r_buffer_firstValid$D_IN,
       msNoSynth_1_r_buffer_firstValid$EN,
       msNoSynth_1_r_buffer_firstValid$Q_OUT;

  // ports of submodule near_mem_io
  wire [127 : 0] near_mem_io$axi4_slave_rdata, near_mem_io$axi4_slave_wdata;
  wire [63 : 0] near_mem_io$axi4_slave_araddr,
		near_mem_io$axi4_slave_awaddr,
		near_mem_io$set_addr_map_addr_base,
		near_mem_io$set_addr_map_addr_lim;
  wire [15 : 0] near_mem_io$axi4_slave_wstrb;
  wire [7 : 0] near_mem_io$axi4_slave_arlen, near_mem_io$axi4_slave_awlen;
  wire [4 : 0] near_mem_io$axi4_slave_arid,
	       near_mem_io$axi4_slave_awid,
	       near_mem_io$axi4_slave_bid,
	       near_mem_io$axi4_slave_rid;
  wire [3 : 0] near_mem_io$axi4_slave_arcache,
	       near_mem_io$axi4_slave_arqos,
	       near_mem_io$axi4_slave_arregion,
	       near_mem_io$axi4_slave_awcache,
	       near_mem_io$axi4_slave_awqos,
	       near_mem_io$axi4_slave_awregion;
  wire [2 : 0] near_mem_io$axi4_slave_arprot,
	       near_mem_io$axi4_slave_arsize,
	       near_mem_io$axi4_slave_awprot,
	       near_mem_io$axi4_slave_awsize;
  wire [1 : 0] near_mem_io$axi4_slave_arburst,
	       near_mem_io$axi4_slave_awburst,
	       near_mem_io$axi4_slave_bresp,
	       near_mem_io$axi4_slave_rresp,
	       near_mem_io$axi4_slave_ruser,
	       near_mem_io$axi4_slave_wuser;
  wire near_mem_io$EN_get_sw_interrupt_req_get,
       near_mem_io$EN_get_timer_interrupt_req_get,
       near_mem_io$EN_server_reset_request_put,
       near_mem_io$EN_server_reset_response_get,
       near_mem_io$EN_set_addr_map,
       near_mem_io$RDY_get_sw_interrupt_req_get,
       near_mem_io$RDY_get_timer_interrupt_req_get,
       near_mem_io$RDY_server_reset_request_put,
       near_mem_io$RDY_server_reset_response_get,
       near_mem_io$axi4_slave_arlock,
       near_mem_io$axi4_slave_arready,
       near_mem_io$axi4_slave_arvalid,
       near_mem_io$axi4_slave_awlock,
       near_mem_io$axi4_slave_awready,
       near_mem_io$axi4_slave_awvalid,
       near_mem_io$axi4_slave_bready,
       near_mem_io$axi4_slave_bvalid,
       near_mem_io$axi4_slave_rlast,
       near_mem_io$axi4_slave_rready,
       near_mem_io$axi4_slave_rvalid,
       near_mem_io$axi4_slave_wlast,
       near_mem_io$axi4_slave_wready,
       near_mem_io$axi4_slave_wvalid,
       near_mem_io$get_sw_interrupt_req_get,
       near_mem_io$get_timer_interrupt_req_get;

  // ports of submodule plic
  wire [127 : 0] plic$axi4_slave_rdata, plic$axi4_slave_wdata;
  wire [63 : 0] plic$axi4_slave_araddr,
		plic$axi4_slave_awaddr,
		plic$set_addr_map_addr_base,
		plic$set_addr_map_addr_lim;
  wire [15 : 0] plic$axi4_slave_wstrb;
  wire [7 : 0] plic$axi4_slave_arlen, plic$axi4_slave_awlen;
  wire [4 : 0] plic$axi4_slave_arid,
	       plic$axi4_slave_awid,
	       plic$axi4_slave_bid,
	       plic$axi4_slave_rid;
  wire [3 : 0] plic$axi4_slave_arcache,
	       plic$axi4_slave_arqos,
	       plic$axi4_slave_arregion,
	       plic$axi4_slave_awcache,
	       plic$axi4_slave_awqos,
	       plic$axi4_slave_awregion,
	       plic$set_verbosity_verbosity;
  wire [2 : 0] plic$axi4_slave_arprot,
	       plic$axi4_slave_arsize,
	       plic$axi4_slave_awprot,
	       plic$axi4_slave_awsize;
  wire [1 : 0] plic$axi4_slave_arburst,
	       plic$axi4_slave_awburst,
	       plic$axi4_slave_bresp,
	       plic$axi4_slave_rresp,
	       plic$axi4_slave_ruser,
	       plic$axi4_slave_wuser;
  wire plic$EN_server_reset_request_put,
       plic$EN_server_reset_response_get,
       plic$EN_set_addr_map,
       plic$EN_set_verbosity,
       plic$EN_show_PLIC_state,
       plic$RDY_server_reset_request_put,
       plic$RDY_server_reset_response_get,
       plic$axi4_slave_arlock,
       plic$axi4_slave_arready,
       plic$axi4_slave_arvalid,
       plic$axi4_slave_awlock,
       plic$axi4_slave_awready,
       plic$axi4_slave_awvalid,
       plic$axi4_slave_bready,
       plic$axi4_slave_bvalid,
       plic$axi4_slave_rlast,
       plic$axi4_slave_rready,
       plic$axi4_slave_rvalid,
       plic$axi4_slave_wlast,
       plic$axi4_slave_wready,
       plic$axi4_slave_wvalid,
       plic$v_sources_0_m_interrupt_req_set_not_clear,
       plic$v_sources_10_m_interrupt_req_set_not_clear,
       plic$v_sources_11_m_interrupt_req_set_not_clear,
       plic$v_sources_12_m_interrupt_req_set_not_clear,
       plic$v_sources_13_m_interrupt_req_set_not_clear,
       plic$v_sources_14_m_interrupt_req_set_not_clear,
       plic$v_sources_15_m_interrupt_req_set_not_clear,
       plic$v_sources_1_m_interrupt_req_set_not_clear,
       plic$v_sources_2_m_interrupt_req_set_not_clear,
       plic$v_sources_3_m_interrupt_req_set_not_clear,
       plic$v_sources_4_m_interrupt_req_set_not_clear,
       plic$v_sources_5_m_interrupt_req_set_not_clear,
       plic$v_sources_6_m_interrupt_req_set_not_clear,
       plic$v_sources_7_m_interrupt_req_set_not_clear,
       plic$v_sources_8_m_interrupt_req_set_not_clear,
       plic$v_sources_9_m_interrupt_req_set_not_clear,
       plic$v_targets_0_m_eip,
       plic$v_targets_1_m_eip;

  // ports of submodule soc_map
  wire [127 : 0] soc_map$m_near_mem_io_addr_range, soc_map$m_plic_addr_range;
  wire [63 : 0] soc_map$m_is_IO_addr_addr,
		soc_map$m_is_mem_addr_addr,
		soc_map$m_is_near_mem_IO_addr_addr;

  // ports of submodule ssNoSynth_0_ar_buffer_ff
  wire [97 : 0] ssNoSynth_0_ar_buffer_ff$D_IN, ssNoSynth_0_ar_buffer_ff$D_OUT;
  wire ssNoSynth_0_ar_buffer_ff$CLR,
       ssNoSynth_0_ar_buffer_ff$DEQ,
       ssNoSynth_0_ar_buffer_ff$EMPTY_N,
       ssNoSynth_0_ar_buffer_ff$ENQ,
       ssNoSynth_0_ar_buffer_ff$FULL_N;

  // ports of submodule ssNoSynth_0_ar_buffer_firstValid
  wire ssNoSynth_0_ar_buffer_firstValid$D_IN,
       ssNoSynth_0_ar_buffer_firstValid$EN,
       ssNoSynth_0_ar_buffer_firstValid$Q_OUT;

  // ports of submodule ssNoSynth_0_aw_buffer_ff
  wire [97 : 0] ssNoSynth_0_aw_buffer_ff$D_IN, ssNoSynth_0_aw_buffer_ff$D_OUT;
  wire ssNoSynth_0_aw_buffer_ff$CLR,
       ssNoSynth_0_aw_buffer_ff$DEQ,
       ssNoSynth_0_aw_buffer_ff$EMPTY_N,
       ssNoSynth_0_aw_buffer_ff$ENQ,
       ssNoSynth_0_aw_buffer_ff$FULL_N;

  // ports of submodule ssNoSynth_0_aw_buffer_firstValid
  wire ssNoSynth_0_aw_buffer_firstValid$D_IN,
       ssNoSynth_0_aw_buffer_firstValid$EN,
       ssNoSynth_0_aw_buffer_firstValid$Q_OUT;

  // ports of submodule ssNoSynth_0_w_buffer_ff
  wire [146 : 0] ssNoSynth_0_w_buffer_ff$D_IN, ssNoSynth_0_w_buffer_ff$D_OUT;
  wire ssNoSynth_0_w_buffer_ff$CLR,
       ssNoSynth_0_w_buffer_ff$DEQ,
       ssNoSynth_0_w_buffer_ff$EMPTY_N,
       ssNoSynth_0_w_buffer_ff$ENQ,
       ssNoSynth_0_w_buffer_ff$FULL_N;

  // ports of submodule ssNoSynth_0_w_buffer_firstValid
  wire ssNoSynth_0_w_buffer_firstValid$D_IN,
       ssNoSynth_0_w_buffer_firstValid$EN,
       ssNoSynth_0_w_buffer_firstValid$Q_OUT;

  // ports of submodule ssNoSynth_1_ar_buffer_ff
  wire [97 : 0] ssNoSynth_1_ar_buffer_ff$D_IN, ssNoSynth_1_ar_buffer_ff$D_OUT;
  wire ssNoSynth_1_ar_buffer_ff$CLR,
       ssNoSynth_1_ar_buffer_ff$DEQ,
       ssNoSynth_1_ar_buffer_ff$EMPTY_N,
       ssNoSynth_1_ar_buffer_ff$ENQ,
       ssNoSynth_1_ar_buffer_ff$FULL_N;

  // ports of submodule ssNoSynth_1_ar_buffer_firstValid
  wire ssNoSynth_1_ar_buffer_firstValid$D_IN,
       ssNoSynth_1_ar_buffer_firstValid$EN,
       ssNoSynth_1_ar_buffer_firstValid$Q_OUT;

  // ports of submodule ssNoSynth_1_aw_buffer_ff
  wire [97 : 0] ssNoSynth_1_aw_buffer_ff$D_IN, ssNoSynth_1_aw_buffer_ff$D_OUT;
  wire ssNoSynth_1_aw_buffer_ff$CLR,
       ssNoSynth_1_aw_buffer_ff$DEQ,
       ssNoSynth_1_aw_buffer_ff$EMPTY_N,
       ssNoSynth_1_aw_buffer_ff$ENQ,
       ssNoSynth_1_aw_buffer_ff$FULL_N;

  // ports of submodule ssNoSynth_1_aw_buffer_firstValid
  wire ssNoSynth_1_aw_buffer_firstValid$D_IN,
       ssNoSynth_1_aw_buffer_firstValid$EN,
       ssNoSynth_1_aw_buffer_firstValid$Q_OUT;

  // ports of submodule ssNoSynth_1_w_buffer_ff
  wire [146 : 0] ssNoSynth_1_w_buffer_ff$D_IN, ssNoSynth_1_w_buffer_ff$D_OUT;
  wire ssNoSynth_1_w_buffer_ff$CLR,
       ssNoSynth_1_w_buffer_ff$DEQ,
       ssNoSynth_1_w_buffer_ff$EMPTY_N,
       ssNoSynth_1_w_buffer_ff$ENQ,
       ssNoSynth_1_w_buffer_ff$FULL_N;

  // ports of submodule ssNoSynth_1_w_buffer_firstValid
  wire ssNoSynth_1_w_buffer_firstValid$D_IN,
       ssNoSynth_1_w_buffer_firstValid$EN,
       ssNoSynth_1_w_buffer_firstValid$Q_OUT;

  // ports of submodule ssNoSynth_2_ar_buffer_ff
  wire [97 : 0] ssNoSynth_2_ar_buffer_ff$D_IN, ssNoSynth_2_ar_buffer_ff$D_OUT;
  wire ssNoSynth_2_ar_buffer_ff$CLR,
       ssNoSynth_2_ar_buffer_ff$DEQ,
       ssNoSynth_2_ar_buffer_ff$EMPTY_N,
       ssNoSynth_2_ar_buffer_ff$ENQ,
       ssNoSynth_2_ar_buffer_ff$FULL_N;

  // ports of submodule ssNoSynth_2_ar_buffer_firstValid
  wire ssNoSynth_2_ar_buffer_firstValid$D_IN,
       ssNoSynth_2_ar_buffer_firstValid$EN,
       ssNoSynth_2_ar_buffer_firstValid$Q_OUT;

  // ports of submodule ssNoSynth_2_aw_buffer_ff
  wire [97 : 0] ssNoSynth_2_aw_buffer_ff$D_IN, ssNoSynth_2_aw_buffer_ff$D_OUT;
  wire ssNoSynth_2_aw_buffer_ff$CLR,
       ssNoSynth_2_aw_buffer_ff$DEQ,
       ssNoSynth_2_aw_buffer_ff$EMPTY_N,
       ssNoSynth_2_aw_buffer_ff$ENQ,
       ssNoSynth_2_aw_buffer_ff$FULL_N;

  // ports of submodule ssNoSynth_2_aw_buffer_firstValid
  wire ssNoSynth_2_aw_buffer_firstValid$D_IN,
       ssNoSynth_2_aw_buffer_firstValid$EN,
       ssNoSynth_2_aw_buffer_firstValid$Q_OUT;

  // ports of submodule ssNoSynth_2_w_buffer_ff
  wire [146 : 0] ssNoSynth_2_w_buffer_ff$D_IN, ssNoSynth_2_w_buffer_ff$D_OUT;
  wire ssNoSynth_2_w_buffer_ff$CLR,
       ssNoSynth_2_w_buffer_ff$DEQ,
       ssNoSynth_2_w_buffer_ff$EMPTY_N,
       ssNoSynth_2_w_buffer_ff$ENQ,
       ssNoSynth_2_w_buffer_ff$FULL_N;

  // ports of submodule ssNoSynth_2_w_buffer_firstValid
  wire ssNoSynth_2_w_buffer_firstValid$D_IN,
       ssNoSynth_2_w_buffer_firstValid$EN,
       ssNoSynth_2_w_buffer_firstValid$Q_OUT;

  // ports of submodule tagController_limiter
  wire tagController_limiter$CLR,
       tagController_limiter$DEQ,
       tagController_limiter$EMPTY_N,
       tagController_limiter$ENQ,
       tagController_limiter$FULL_N;

  // ports of submodule tagController_newRst
  wire tagController_newRst$ASSERT_IN, tagController_newRst$OUT_RST;

  // ports of submodule tagController_shimMaster_arff
  wire [98 : 0] tagController_shimMaster_arff$D_IN,
		tagController_shimMaster_arff$D_OUT;
  wire tagController_shimMaster_arff$CLR,
       tagController_shimMaster_arff$DEQ,
       tagController_shimMaster_arff$EMPTY_N,
       tagController_shimMaster_arff$ENQ;

  // ports of submodule tagController_shimMaster_awff
  wire [98 : 0] tagController_shimMaster_awff$D_IN,
		tagController_shimMaster_awff$D_OUT;
  wire tagController_shimMaster_awff$CLR,
       tagController_shimMaster_awff$DEQ,
       tagController_shimMaster_awff$EMPTY_N,
       tagController_shimMaster_awff$ENQ;

  // ports of submodule tagController_shimMaster_bff
  wire [7 : 0] tagController_shimMaster_bff$D_IN,
	       tagController_shimMaster_bff$D_OUT;
  wire tagController_shimMaster_bff$CLR,
       tagController_shimMaster_bff$DEQ,
       tagController_shimMaster_bff$EMPTY_N,
       tagController_shimMaster_bff$ENQ,
       tagController_shimMaster_bff$FULL_N;

  // ports of submodule tagController_shimMaster_rff
  wire [136 : 0] tagController_shimMaster_rff$D_IN,
		 tagController_shimMaster_rff$D_OUT;
  wire tagController_shimMaster_rff$CLR,
       tagController_shimMaster_rff$DEQ,
       tagController_shimMaster_rff$EMPTY_N,
       tagController_shimMaster_rff$ENQ,
       tagController_shimMaster_rff$FULL_N;

  // ports of submodule tagController_shimMaster_wff
  wire [144 : 0] tagController_shimMaster_wff$D_IN,
		 tagController_shimMaster_wff$D_OUT;
  wire tagController_shimMaster_wff$CLR,
       tagController_shimMaster_wff$DEQ,
       tagController_shimMaster_wff$EMPTY_N,
       tagController_shimMaster_wff$ENQ;

  // ports of submodule tagController_shimSlave_arff
  wire [97 : 0] tagController_shimSlave_arff$D_IN,
		tagController_shimSlave_arff$D_OUT;
  wire tagController_shimSlave_arff$CLR,
       tagController_shimSlave_arff$DEQ,
       tagController_shimSlave_arff$EMPTY_N,
       tagController_shimSlave_arff$ENQ,
       tagController_shimSlave_arff$FULL_N;

  // ports of submodule tagController_shimSlave_awff
  wire [97 : 0] tagController_shimSlave_awff$D_IN,
		tagController_shimSlave_awff$D_OUT;
  wire tagController_shimSlave_awff$CLR,
       tagController_shimSlave_awff$DEQ,
       tagController_shimSlave_awff$EMPTY_N,
       tagController_shimSlave_awff$ENQ,
       tagController_shimSlave_awff$FULL_N;

  // ports of submodule tagController_shimSlave_bff
  wire [6 : 0] tagController_shimSlave_bff$D_IN,
	       tagController_shimSlave_bff$D_OUT;
  wire tagController_shimSlave_bff$CLR,
       tagController_shimSlave_bff$DEQ,
       tagController_shimSlave_bff$EMPTY_N,
       tagController_shimSlave_bff$ENQ;

  // ports of submodule tagController_shimSlave_rff
  wire [137 : 0] tagController_shimSlave_rff$D_IN,
		 tagController_shimSlave_rff$D_OUT;
  wire tagController_shimSlave_rff$CLR,
       tagController_shimSlave_rff$DEQ,
       tagController_shimSlave_rff$EMPTY_N,
       tagController_shimSlave_rff$ENQ;

  // ports of submodule tagController_shimSlave_wff
  wire [146 : 0] tagController_shimSlave_wff$D_IN,
		 tagController_shimSlave_wff$D_OUT;
  wire tagController_shimSlave_wff$CLR,
       tagController_shimSlave_wff$DEQ,
       tagController_shimSlave_wff$EMPTY_N,
       tagController_shimSlave_wff$ENQ,
       tagController_shimSlave_wff$FULL_N;

  // ports of submodule tagController_tagCon
  wire [205 : 0] tagController_tagCon$cache_request_put_val,
		 tagController_tagCon$memory_request_get;
  wire [141 : 0] tagController_tagCon$cache_response_get,
		 tagController_tagCon$memory_response_put_val;
  wire tagController_tagCon$EN_cache_request_put,
       tagController_tagCon$EN_cache_response_get,
       tagController_tagCon$EN_memory_request_get,
       tagController_tagCon$EN_memory_response_put,
       tagController_tagCon$RDY_cache_request_put,
       tagController_tagCon$RDY_cache_response_get,
       tagController_tagCon$RDY_memory_request_get,
       tagController_tagCon$RDY_memory_response_put;

  // ports of submodule tv_encode
  wire [607 : 0] tv_encode$tv_vb_out_get;
  wire [233 : 0] tv_encode$trace_data_in_put;
  wire tv_encode$EN_reset,
       tv_encode$EN_trace_data_in_put,
       tv_encode$EN_tv_vb_out_get,
       tv_encode$RDY_trace_data_in_put,
       tv_encode$RDY_tv_vb_out_get;

  // rule scheduling signals
  wire CAN_FIRE_RL_ClientServerRequest,
       CAN_FIRE_RL_ClientServerRequest_1,
       CAN_FIRE_RL_ClientServerRequest_2,
       CAN_FIRE_RL_ClientServerRequest_3,
       CAN_FIRE_RL_ClientServerRequest_4,
       CAN_FIRE_RL_ClientServerResponse,
       CAN_FIRE_RL_ClientServerResponse_1,
       CAN_FIRE_RL_ClientServerResponse_2,
       CAN_FIRE_RL_ClientServerResponse_3,
       CAN_FIRE_RL_ClientServerResponse_4,
       CAN_FIRE_RL_arbitrate,
       CAN_FIRE_RL_arbitrate_1,
       CAN_FIRE_RL_arbitrate_2,
       CAN_FIRE_RL_arbitrate_3,
       CAN_FIRE_RL_burst,
       CAN_FIRE_RL_burst_1,
       CAN_FIRE_RL_burst_2,
       CAN_FIRE_RL_burst_3,
       CAN_FIRE_RL_burst_4,
       CAN_FIRE_RL_burst_5,
       CAN_FIRE_RL_burst_6,
       CAN_FIRE_RL_burst_7,
       CAN_FIRE_RL_burst_8,
       CAN_FIRE_RL_burst_9,
       CAN_FIRE_RL_checkSinkReady,
       CAN_FIRE_RL_checkSinkReady_1,
       CAN_FIRE_RL_checkSinkReady_2,
       CAN_FIRE_RL_checkSinkReady_3,
       CAN_FIRE_RL_checkSinkReady_4,
       CAN_FIRE_RL_checkSinkReady_5,
       CAN_FIRE_RL_checkSinkReady_6,
       CAN_FIRE_RL_checkSinkReady_7,
       CAN_FIRE_RL_checkSinkReady_8,
       CAN_FIRE_RL_checkSinkReady_9,
       CAN_FIRE_RL_connect_arflit,
       CAN_FIRE_RL_connect_arflit_1,
       CAN_FIRE_RL_connect_arready,
       CAN_FIRE_RL_connect_arready_1,
       CAN_FIRE_RL_connect_awflit,
       CAN_FIRE_RL_connect_awflit_1,
       CAN_FIRE_RL_connect_awready,
       CAN_FIRE_RL_connect_awready_1,
       CAN_FIRE_RL_connect_bflit,
       CAN_FIRE_RL_connect_bflit_1,
       CAN_FIRE_RL_connect_bready,
       CAN_FIRE_RL_connect_bready_1,
       CAN_FIRE_RL_connect_rflit,
       CAN_FIRE_RL_connect_rflit_1,
       CAN_FIRE_RL_connect_rready,
       CAN_FIRE_RL_connect_rready_1,
       CAN_FIRE_RL_connect_wflit,
       CAN_FIRE_RL_connect_wflit_1,
       CAN_FIRE_RL_connect_wready,
       CAN_FIRE_RL_connect_wready_1,
       CAN_FIRE_RL_cpu_imem_ar_forwardReady,
       CAN_FIRE_RL_cpu_imem_aw_forwardReady,
       CAN_FIRE_RL_cpu_imem_b_buffer_dequeue,
       CAN_FIRE_RL_cpu_imem_b_buffer_enqueue,
       CAN_FIRE_RL_cpu_imem_b_dropFlit,
       CAN_FIRE_RL_cpu_imem_b_forwardFlit,
       CAN_FIRE_RL_cpu_imem_r_buffer_dequeue,
       CAN_FIRE_RL_cpu_imem_r_buffer_enqueue,
       CAN_FIRE_RL_cpu_imem_r_dropFlit,
       CAN_FIRE_RL_cpu_imem_r_forwardFlit,
       CAN_FIRE_RL_cpu_imem_ug_u_ar_doDrop,
       CAN_FIRE_RL_cpu_imem_ug_u_ar_setPeek,
       CAN_FIRE_RL_cpu_imem_ug_u_ar_warnDoDrop,
       CAN_FIRE_RL_cpu_imem_ug_u_aw_doDrop,
       CAN_FIRE_RL_cpu_imem_ug_u_aw_setPeek,
       CAN_FIRE_RL_cpu_imem_ug_u_aw_warnDoDrop,
       CAN_FIRE_RL_cpu_imem_ug_u_b_doPut,
       CAN_FIRE_RL_cpu_imem_ug_u_b_warnDoPut,
       CAN_FIRE_RL_cpu_imem_ug_u_r_doPut,
       CAN_FIRE_RL_cpu_imem_ug_u_r_warnDoPut,
       CAN_FIRE_RL_cpu_imem_ug_u_w_doDrop,
       CAN_FIRE_RL_cpu_imem_ug_u_w_setPeek,
       CAN_FIRE_RL_cpu_imem_ug_u_w_warnDoDrop,
       CAN_FIRE_RL_cpu_imem_w_forwardReady,
       CAN_FIRE_RL_craftReq,
       CAN_FIRE_RL_craftReq_1,
       CAN_FIRE_RL_craftReq_2,
       CAN_FIRE_RL_craftReq_3,
       CAN_FIRE_RL_craftReq_4,
       CAN_FIRE_RL_craftReq_5,
       CAN_FIRE_RL_craftReq_6,
       CAN_FIRE_RL_craftReq_7,
       CAN_FIRE_RL_craftReq_8,
       CAN_FIRE_RL_craftReq_9,
       CAN_FIRE_RL_deburst_debug_forward_read_req,
       CAN_FIRE_RL_deburst_debug_forward_read_rsp,
       CAN_FIRE_RL_deburst_debug_forward_write_req,
       CAN_FIRE_RL_deburst_debug_handle_write_rsp,
       CAN_FIRE_RL_deburst_debug_inSerial_takeAR,
       CAN_FIRE_RL_deburst_debug_inSerial_takeAW,
       CAN_FIRE_RL_deburst_debug_inSerial_takeB,
       CAN_FIRE_RL_deburst_debug_inSerial_takeR,
       CAN_FIRE_RL_deburst_debug_inSerial_takeW,
       CAN_FIRE_RL_deburst_dm_forward_read_req,
       CAN_FIRE_RL_deburst_dm_forward_read_rsp,
       CAN_FIRE_RL_deburst_dm_forward_write_req,
       CAN_FIRE_RL_deburst_dm_handle_write_rsp,
       CAN_FIRE_RL_deburst_dm_inSerial_takeAR,
       CAN_FIRE_RL_deburst_dm_inSerial_takeAW,
       CAN_FIRE_RL_deburst_dm_inSerial_takeB,
       CAN_FIRE_RL_deburst_dm_inSerial_takeR,
       CAN_FIRE_RL_deburst_dm_inSerial_takeW,
       CAN_FIRE_RL_dm_master_nonsynth_canAR,
       CAN_FIRE_RL_dm_master_nonsynth_canAW,
       CAN_FIRE_RL_dm_master_nonsynth_canB,
       CAN_FIRE_RL_dm_master_nonsynth_canR,
       CAN_FIRE_RL_dm_master_nonsynth_canW,
       CAN_FIRE_RL_dm_master_nonsynth_consumeAW,
       CAN_FIRE_RL_ifcs_0_1_drainFlits,
       CAN_FIRE_RL_ifcs_0_1_drainNoRouteResponse,
       CAN_FIRE_RL_ifcs_0_1_firstFlit,
       CAN_FIRE_RL_ifcs_0_1_firstFlit_1,
       CAN_FIRE_RL_ifcs_0_1_followFlits,
       CAN_FIRE_RL_ifcs_0_1_followFlits_1,
       CAN_FIRE_RL_ifcs_0_1_forwardRsp,
       CAN_FIRE_RL_ifcs_0_1_nonRoutableFlit,
       CAN_FIRE_RL_ifcs_0_1_nonRoutableGenRsp,
       CAN_FIRE_RL_ifcs_0_drainFlits,
       CAN_FIRE_RL_ifcs_0_drainNoRouteResponse,
       CAN_FIRE_RL_ifcs_0_firstFlit,
       CAN_FIRE_RL_ifcs_0_firstFlit_1,
       CAN_FIRE_RL_ifcs_0_followFlits,
       CAN_FIRE_RL_ifcs_0_followFlits_1,
       CAN_FIRE_RL_ifcs_0_forwardRsp,
       CAN_FIRE_RL_ifcs_0_nonRoutableFlit,
       CAN_FIRE_RL_ifcs_0_nonRoutableGenRsp,
       CAN_FIRE_RL_ifcs_1_1_drainFlits,
       CAN_FIRE_RL_ifcs_1_1_drainNoRouteResponse,
       CAN_FIRE_RL_ifcs_1_1_firstFlit,
       CAN_FIRE_RL_ifcs_1_1_firstFlit_1,
       CAN_FIRE_RL_ifcs_1_1_followFlits,
       CAN_FIRE_RL_ifcs_1_1_followFlits_1,
       CAN_FIRE_RL_ifcs_1_1_forwardRsp,
       CAN_FIRE_RL_ifcs_1_1_nonRoutableFlit,
       CAN_FIRE_RL_ifcs_1_1_nonRoutableGenRsp,
       CAN_FIRE_RL_ifcs_1_drainFlits,
       CAN_FIRE_RL_ifcs_1_drainNoRouteResponse,
       CAN_FIRE_RL_ifcs_1_firstFlit,
       CAN_FIRE_RL_ifcs_1_firstFlit_1,
       CAN_FIRE_RL_ifcs_1_followFlits,
       CAN_FIRE_RL_ifcs_1_followFlits_1,
       CAN_FIRE_RL_ifcs_1_forwardRsp,
       CAN_FIRE_RL_ifcs_1_nonRoutableFlit,
       CAN_FIRE_RL_ifcs_1_nonRoutableGenRsp,
       CAN_FIRE_RL_ifcs_2_1_firstFlit,
       CAN_FIRE_RL_ifcs_2_1_followFlits,
       CAN_FIRE_RL_ifcs_2_firstFlit,
       CAN_FIRE_RL_ifcs_2_followFlits,
       CAN_FIRE_RL_merge_cpu_trace_data,
       CAN_FIRE_RL_merge_dm_csr_trace_data,
       CAN_FIRE_RL_merge_dm_gpr_trace_data,
       CAN_FIRE_RL_merge_dm_mem_trace_data,
       CAN_FIRE_RL_merged_0_genFirst,
       CAN_FIRE_RL_merged_0_genOther,
       CAN_FIRE_RL_merged_1_genFirst,
       CAN_FIRE_RL_merged_1_genOther,
       CAN_FIRE_RL_mkConnectionGetPut,
       CAN_FIRE_RL_mkConnectionGetPut_1,
       CAN_FIRE_RL_msNoSynth_0_ar_forwardReady,
       CAN_FIRE_RL_msNoSynth_0_aw_forwardReady,
       CAN_FIRE_RL_msNoSynth_0_b_buffer_dequeue,
       CAN_FIRE_RL_msNoSynth_0_b_buffer_enqueue,
       CAN_FIRE_RL_msNoSynth_0_b_dropFlit,
       CAN_FIRE_RL_msNoSynth_0_b_forwardFlit,
       CAN_FIRE_RL_msNoSynth_0_r_buffer_dequeue,
       CAN_FIRE_RL_msNoSynth_0_r_buffer_enqueue,
       CAN_FIRE_RL_msNoSynth_0_r_dropFlit,
       CAN_FIRE_RL_msNoSynth_0_r_forwardFlit,
       CAN_FIRE_RL_msNoSynth_0_w_forwardReady,
       CAN_FIRE_RL_msNoSynth_1_ar_forwardReady,
       CAN_FIRE_RL_msNoSynth_1_aw_forwardReady,
       CAN_FIRE_RL_msNoSynth_1_b_buffer_dequeue,
       CAN_FIRE_RL_msNoSynth_1_b_buffer_enqueue,
       CAN_FIRE_RL_msNoSynth_1_b_dropFlit,
       CAN_FIRE_RL_msNoSynth_1_b_forwardFlit,
       CAN_FIRE_RL_msNoSynth_1_r_buffer_dequeue,
       CAN_FIRE_RL_msNoSynth_1_r_buffer_enqueue,
       CAN_FIRE_RL_msNoSynth_1_r_dropFlit,
       CAN_FIRE_RL_msNoSynth_1_r_forwardFlit,
       CAN_FIRE_RL_msNoSynth_1_w_forwardReady,
       CAN_FIRE_RL_rl_cpu_hart0_reset_complete,
       CAN_FIRE_RL_rl_cpu_hart0_reset_from_dm_start,
       CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start,
       CAN_FIRE_RL_rl_relay_external_interrupts,
       CAN_FIRE_RL_rl_relay_sw_interrupts,
       CAN_FIRE_RL_rl_relay_timer_interrupts,
       CAN_FIRE_RL_sink_selected,
       CAN_FIRE_RL_sink_selected_1,
       CAN_FIRE_RL_sink_selected_2,
       CAN_FIRE_RL_sink_selected_3,
       CAN_FIRE_RL_sink_selected_4,
       CAN_FIRE_RL_sink_selected_5,
       CAN_FIRE_RL_sink_selected_6,
       CAN_FIRE_RL_sink_selected_7,
       CAN_FIRE_RL_sink_selected_8,
       CAN_FIRE_RL_sink_selected_9,
       CAN_FIRE_RL_source_selected,
       CAN_FIRE_RL_source_selected_1,
       CAN_FIRE_RL_source_selected_2,
       CAN_FIRE_RL_source_selected_3,
       CAN_FIRE_RL_source_selected_4,
       CAN_FIRE_RL_source_selected_5,
       CAN_FIRE_RL_source_selected_6,
       CAN_FIRE_RL_source_selected_7,
       CAN_FIRE_RL_source_selected_8,
       CAN_FIRE_RL_source_selected_9,
       CAN_FIRE_RL_split_0_putFirst,
       CAN_FIRE_RL_split_0_putOther,
       CAN_FIRE_RL_split_1_putFirst,
       CAN_FIRE_RL_split_1_putOther,
       CAN_FIRE_RL_split_2_putFirst,
       CAN_FIRE_RL_split_2_putOther,
       CAN_FIRE_RL_ssNoSynth_0_ar_buffer_dequeue,
       CAN_FIRE_RL_ssNoSynth_0_ar_buffer_enqueue,
       CAN_FIRE_RL_ssNoSynth_0_ar_dropFlit,
       CAN_FIRE_RL_ssNoSynth_0_ar_forwardFlit,
       CAN_FIRE_RL_ssNoSynth_0_aw_buffer_dequeue,
       CAN_FIRE_RL_ssNoSynth_0_aw_buffer_enqueue,
       CAN_FIRE_RL_ssNoSynth_0_aw_dropFlit,
       CAN_FIRE_RL_ssNoSynth_0_aw_forwardFlit,
       CAN_FIRE_RL_ssNoSynth_0_b_forwardReady,
       CAN_FIRE_RL_ssNoSynth_0_r_forwardReady,
       CAN_FIRE_RL_ssNoSynth_0_w_buffer_dequeue,
       CAN_FIRE_RL_ssNoSynth_0_w_buffer_enqueue,
       CAN_FIRE_RL_ssNoSynth_0_w_dropFlit,
       CAN_FIRE_RL_ssNoSynth_0_w_forwardFlit,
       CAN_FIRE_RL_ssNoSynth_1_ar_buffer_dequeue,
       CAN_FIRE_RL_ssNoSynth_1_ar_buffer_enqueue,
       CAN_FIRE_RL_ssNoSynth_1_ar_dropFlit,
       CAN_FIRE_RL_ssNoSynth_1_ar_forwardFlit,
       CAN_FIRE_RL_ssNoSynth_1_aw_buffer_dequeue,
       CAN_FIRE_RL_ssNoSynth_1_aw_buffer_enqueue,
       CAN_FIRE_RL_ssNoSynth_1_aw_dropFlit,
       CAN_FIRE_RL_ssNoSynth_1_aw_forwardFlit,
       CAN_FIRE_RL_ssNoSynth_1_b_forwardReady,
       CAN_FIRE_RL_ssNoSynth_1_r_forwardReady,
       CAN_FIRE_RL_ssNoSynth_1_w_buffer_dequeue,
       CAN_FIRE_RL_ssNoSynth_1_w_buffer_enqueue,
       CAN_FIRE_RL_ssNoSynth_1_w_dropFlit,
       CAN_FIRE_RL_ssNoSynth_1_w_forwardFlit,
       CAN_FIRE_RL_ssNoSynth_2_ar_buffer_dequeue,
       CAN_FIRE_RL_ssNoSynth_2_ar_buffer_enqueue,
       CAN_FIRE_RL_ssNoSynth_2_ar_dropFlit,
       CAN_FIRE_RL_ssNoSynth_2_ar_forwardFlit,
       CAN_FIRE_RL_ssNoSynth_2_aw_buffer_dequeue,
       CAN_FIRE_RL_ssNoSynth_2_aw_buffer_enqueue,
       CAN_FIRE_RL_ssNoSynth_2_aw_dropFlit,
       CAN_FIRE_RL_ssNoSynth_2_aw_forwardFlit,
       CAN_FIRE_RL_ssNoSynth_2_b_forwardReady,
       CAN_FIRE_RL_ssNoSynth_2_r_forwardReady,
       CAN_FIRE_RL_ssNoSynth_2_w_buffer_dequeue,
       CAN_FIRE_RL_ssNoSynth_2_w_buffer_enqueue,
       CAN_FIRE_RL_ssNoSynth_2_w_dropFlit,
       CAN_FIRE_RL_ssNoSynth_2_w_forwardFlit,
       CAN_FIRE_RL_tagController_passCacheRead,
       CAN_FIRE_RL_tagController_passCacheResponse,
       CAN_FIRE_RL_tagController_passCacheWrite,
       CAN_FIRE_RL_tagController_passMemoryRequest,
       CAN_FIRE_RL_tagController_passMemoryResponseRead,
       CAN_FIRE_RL_tagController_passMemoryResponseWrite,
       CAN_FIRE___me_check_167,
       CAN_FIRE___me_check_168,
       CAN_FIRE___me_check_169,
       CAN_FIRE___me_check_171,
       CAN_FIRE___me_check_174,
       CAN_FIRE___me_check_175,
       CAN_FIRE___me_check_176,
       CAN_FIRE___me_check_178,
       CAN_FIRE___me_check_181,
       CAN_FIRE___me_check_183,
       CAN_FIRE___me_check_185,
       CAN_FIRE___me_check_193,
       CAN_FIRE___me_check_195,
       CAN_FIRE___me_check_197,
       CAN_FIRE___me_check_206,
       CAN_FIRE___me_check_208,
       CAN_FIRE___me_check_210,
       CAN_FIRE___me_check_212,
       CAN_FIRE___me_check_214,
       CAN_FIRE___me_check_215,
       CAN_FIRE___me_check_216,
       CAN_FIRE___me_check_218,
       CAN_FIRE___me_check_221,
       CAN_FIRE___me_check_222,
       CAN_FIRE___me_check_223,
       CAN_FIRE___me_check_225,
       CAN_FIRE___me_check_228,
       CAN_FIRE___me_check_230,
       CAN_FIRE___me_check_232,
       CAN_FIRE___me_check_240,
       CAN_FIRE___me_check_242,
       CAN_FIRE___me_check_244,
       CAN_FIRE___me_check_253,
       CAN_FIRE___me_check_255,
       CAN_FIRE___me_check_257,
       CAN_FIRE___me_check_259,
       CAN_FIRE___me_check_42,
       CAN_FIRE___me_check_61,
       CAN_FIRE_core_external_interrupt_sources_0_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_10_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_11_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_12_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_13_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_14_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_15_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_1_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_2_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_3_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_4_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_5_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_6_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_7_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_8_m_interrupt_req,
       CAN_FIRE_core_external_interrupt_sources_9_m_interrupt_req,
       CAN_FIRE_cpu_dmem_master_ar_arready,
       CAN_FIRE_cpu_dmem_master_aw_awready,
       CAN_FIRE_cpu_dmem_master_b_bflit,
       CAN_FIRE_cpu_dmem_master_r_rflit,
       CAN_FIRE_cpu_dmem_master_w_wready,
       CAN_FIRE_cpu_imem_master_ar_arready,
       CAN_FIRE_cpu_imem_master_aw_awready,
       CAN_FIRE_cpu_imem_master_b_bflit,
       CAN_FIRE_cpu_imem_master_r_rflit,
       CAN_FIRE_cpu_imem_master_w_wready,
       CAN_FIRE_cpu_reset_server_request_put,
       CAN_FIRE_cpu_reset_server_response_get,
       CAN_FIRE_dm_dmi_read_addr,
       CAN_FIRE_dm_dmi_read_data,
       CAN_FIRE_dm_dmi_write,
       CAN_FIRE_ndm_reset_client_request_get,
       CAN_FIRE_ndm_reset_client_response_put,
       CAN_FIRE_nmi_req,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_tv_verifier_info_get_get,
       WILL_FIRE_RL_ClientServerRequest,
       WILL_FIRE_RL_ClientServerRequest_1,
       WILL_FIRE_RL_ClientServerRequest_2,
       WILL_FIRE_RL_ClientServerRequest_3,
       WILL_FIRE_RL_ClientServerRequest_4,
       WILL_FIRE_RL_ClientServerResponse,
       WILL_FIRE_RL_ClientServerResponse_1,
       WILL_FIRE_RL_ClientServerResponse_2,
       WILL_FIRE_RL_ClientServerResponse_3,
       WILL_FIRE_RL_ClientServerResponse_4,
       WILL_FIRE_RL_arbitrate,
       WILL_FIRE_RL_arbitrate_1,
       WILL_FIRE_RL_arbitrate_2,
       WILL_FIRE_RL_arbitrate_3,
       WILL_FIRE_RL_burst,
       WILL_FIRE_RL_burst_1,
       WILL_FIRE_RL_burst_2,
       WILL_FIRE_RL_burst_3,
       WILL_FIRE_RL_burst_4,
       WILL_FIRE_RL_burst_5,
       WILL_FIRE_RL_burst_6,
       WILL_FIRE_RL_burst_7,
       WILL_FIRE_RL_burst_8,
       WILL_FIRE_RL_burst_9,
       WILL_FIRE_RL_checkSinkReady,
       WILL_FIRE_RL_checkSinkReady_1,
       WILL_FIRE_RL_checkSinkReady_2,
       WILL_FIRE_RL_checkSinkReady_3,
       WILL_FIRE_RL_checkSinkReady_4,
       WILL_FIRE_RL_checkSinkReady_5,
       WILL_FIRE_RL_checkSinkReady_6,
       WILL_FIRE_RL_checkSinkReady_7,
       WILL_FIRE_RL_checkSinkReady_8,
       WILL_FIRE_RL_checkSinkReady_9,
       WILL_FIRE_RL_connect_arflit,
       WILL_FIRE_RL_connect_arflit_1,
       WILL_FIRE_RL_connect_arready,
       WILL_FIRE_RL_connect_arready_1,
       WILL_FIRE_RL_connect_awflit,
       WILL_FIRE_RL_connect_awflit_1,
       WILL_FIRE_RL_connect_awready,
       WILL_FIRE_RL_connect_awready_1,
       WILL_FIRE_RL_connect_bflit,
       WILL_FIRE_RL_connect_bflit_1,
       WILL_FIRE_RL_connect_bready,
       WILL_FIRE_RL_connect_bready_1,
       WILL_FIRE_RL_connect_rflit,
       WILL_FIRE_RL_connect_rflit_1,
       WILL_FIRE_RL_connect_rready,
       WILL_FIRE_RL_connect_rready_1,
       WILL_FIRE_RL_connect_wflit,
       WILL_FIRE_RL_connect_wflit_1,
       WILL_FIRE_RL_connect_wready,
       WILL_FIRE_RL_connect_wready_1,
       WILL_FIRE_RL_cpu_imem_ar_forwardReady,
       WILL_FIRE_RL_cpu_imem_aw_forwardReady,
       WILL_FIRE_RL_cpu_imem_b_buffer_dequeue,
       WILL_FIRE_RL_cpu_imem_b_buffer_enqueue,
       WILL_FIRE_RL_cpu_imem_b_dropFlit,
       WILL_FIRE_RL_cpu_imem_b_forwardFlit,
       WILL_FIRE_RL_cpu_imem_r_buffer_dequeue,
       WILL_FIRE_RL_cpu_imem_r_buffer_enqueue,
       WILL_FIRE_RL_cpu_imem_r_dropFlit,
       WILL_FIRE_RL_cpu_imem_r_forwardFlit,
       WILL_FIRE_RL_cpu_imem_ug_u_ar_doDrop,
       WILL_FIRE_RL_cpu_imem_ug_u_ar_setPeek,
       WILL_FIRE_RL_cpu_imem_ug_u_ar_warnDoDrop,
       WILL_FIRE_RL_cpu_imem_ug_u_aw_doDrop,
       WILL_FIRE_RL_cpu_imem_ug_u_aw_setPeek,
       WILL_FIRE_RL_cpu_imem_ug_u_aw_warnDoDrop,
       WILL_FIRE_RL_cpu_imem_ug_u_b_doPut,
       WILL_FIRE_RL_cpu_imem_ug_u_b_warnDoPut,
       WILL_FIRE_RL_cpu_imem_ug_u_r_doPut,
       WILL_FIRE_RL_cpu_imem_ug_u_r_warnDoPut,
       WILL_FIRE_RL_cpu_imem_ug_u_w_doDrop,
       WILL_FIRE_RL_cpu_imem_ug_u_w_setPeek,
       WILL_FIRE_RL_cpu_imem_ug_u_w_warnDoDrop,
       WILL_FIRE_RL_cpu_imem_w_forwardReady,
       WILL_FIRE_RL_craftReq,
       WILL_FIRE_RL_craftReq_1,
       WILL_FIRE_RL_craftReq_2,
       WILL_FIRE_RL_craftReq_3,
       WILL_FIRE_RL_craftReq_4,
       WILL_FIRE_RL_craftReq_5,
       WILL_FIRE_RL_craftReq_6,
       WILL_FIRE_RL_craftReq_7,
       WILL_FIRE_RL_craftReq_8,
       WILL_FIRE_RL_craftReq_9,
       WILL_FIRE_RL_deburst_debug_forward_read_req,
       WILL_FIRE_RL_deburst_debug_forward_read_rsp,
       WILL_FIRE_RL_deburst_debug_forward_write_req,
       WILL_FIRE_RL_deburst_debug_handle_write_rsp,
       WILL_FIRE_RL_deburst_debug_inSerial_takeAR,
       WILL_FIRE_RL_deburst_debug_inSerial_takeAW,
       WILL_FIRE_RL_deburst_debug_inSerial_takeB,
       WILL_FIRE_RL_deburst_debug_inSerial_takeR,
       WILL_FIRE_RL_deburst_debug_inSerial_takeW,
       WILL_FIRE_RL_deburst_dm_forward_read_req,
       WILL_FIRE_RL_deburst_dm_forward_read_rsp,
       WILL_FIRE_RL_deburst_dm_forward_write_req,
       WILL_FIRE_RL_deburst_dm_handle_write_rsp,
       WILL_FIRE_RL_deburst_dm_inSerial_takeAR,
       WILL_FIRE_RL_deburst_dm_inSerial_takeAW,
       WILL_FIRE_RL_deburst_dm_inSerial_takeB,
       WILL_FIRE_RL_deburst_dm_inSerial_takeR,
       WILL_FIRE_RL_deburst_dm_inSerial_takeW,
       WILL_FIRE_RL_dm_master_nonsynth_canAR,
       WILL_FIRE_RL_dm_master_nonsynth_canAW,
       WILL_FIRE_RL_dm_master_nonsynth_canB,
       WILL_FIRE_RL_dm_master_nonsynth_canR,
       WILL_FIRE_RL_dm_master_nonsynth_canW,
       WILL_FIRE_RL_dm_master_nonsynth_consumeAW,
       WILL_FIRE_RL_ifcs_0_1_drainFlits,
       WILL_FIRE_RL_ifcs_0_1_drainNoRouteResponse,
       WILL_FIRE_RL_ifcs_0_1_firstFlit,
       WILL_FIRE_RL_ifcs_0_1_firstFlit_1,
       WILL_FIRE_RL_ifcs_0_1_followFlits,
       WILL_FIRE_RL_ifcs_0_1_followFlits_1,
       WILL_FIRE_RL_ifcs_0_1_forwardRsp,
       WILL_FIRE_RL_ifcs_0_1_nonRoutableFlit,
       WILL_FIRE_RL_ifcs_0_1_nonRoutableGenRsp,
       WILL_FIRE_RL_ifcs_0_drainFlits,
       WILL_FIRE_RL_ifcs_0_drainNoRouteResponse,
       WILL_FIRE_RL_ifcs_0_firstFlit,
       WILL_FIRE_RL_ifcs_0_firstFlit_1,
       WILL_FIRE_RL_ifcs_0_followFlits,
       WILL_FIRE_RL_ifcs_0_followFlits_1,
       WILL_FIRE_RL_ifcs_0_forwardRsp,
       WILL_FIRE_RL_ifcs_0_nonRoutableFlit,
       WILL_FIRE_RL_ifcs_0_nonRoutableGenRsp,
       WILL_FIRE_RL_ifcs_1_1_drainFlits,
       WILL_FIRE_RL_ifcs_1_1_drainNoRouteResponse,
       WILL_FIRE_RL_ifcs_1_1_firstFlit,
       WILL_FIRE_RL_ifcs_1_1_firstFlit_1,
       WILL_FIRE_RL_ifcs_1_1_followFlits,
       WILL_FIRE_RL_ifcs_1_1_followFlits_1,
       WILL_FIRE_RL_ifcs_1_1_forwardRsp,
       WILL_FIRE_RL_ifcs_1_1_nonRoutableFlit,
       WILL_FIRE_RL_ifcs_1_1_nonRoutableGenRsp,
       WILL_FIRE_RL_ifcs_1_drainFlits,
       WILL_FIRE_RL_ifcs_1_drainNoRouteResponse,
       WILL_FIRE_RL_ifcs_1_firstFlit,
       WILL_FIRE_RL_ifcs_1_firstFlit_1,
       WILL_FIRE_RL_ifcs_1_followFlits,
       WILL_FIRE_RL_ifcs_1_followFlits_1,
       WILL_FIRE_RL_ifcs_1_forwardRsp,
       WILL_FIRE_RL_ifcs_1_nonRoutableFlit,
       WILL_FIRE_RL_ifcs_1_nonRoutableGenRsp,
       WILL_FIRE_RL_ifcs_2_1_firstFlit,
       WILL_FIRE_RL_ifcs_2_1_followFlits,
       WILL_FIRE_RL_ifcs_2_firstFlit,
       WILL_FIRE_RL_ifcs_2_followFlits,
       WILL_FIRE_RL_merge_cpu_trace_data,
       WILL_FIRE_RL_merge_dm_csr_trace_data,
       WILL_FIRE_RL_merge_dm_gpr_trace_data,
       WILL_FIRE_RL_merge_dm_mem_trace_data,
       WILL_FIRE_RL_merged_0_genFirst,
       WILL_FIRE_RL_merged_0_genOther,
       WILL_FIRE_RL_merged_1_genFirst,
       WILL_FIRE_RL_merged_1_genOther,
       WILL_FIRE_RL_mkConnectionGetPut,
       WILL_FIRE_RL_mkConnectionGetPut_1,
       WILL_FIRE_RL_msNoSynth_0_ar_forwardReady,
       WILL_FIRE_RL_msNoSynth_0_aw_forwardReady,
       WILL_FIRE_RL_msNoSynth_0_b_buffer_dequeue,
       WILL_FIRE_RL_msNoSynth_0_b_buffer_enqueue,
       WILL_FIRE_RL_msNoSynth_0_b_dropFlit,
       WILL_FIRE_RL_msNoSynth_0_b_forwardFlit,
       WILL_FIRE_RL_msNoSynth_0_r_buffer_dequeue,
       WILL_FIRE_RL_msNoSynth_0_r_buffer_enqueue,
       WILL_FIRE_RL_msNoSynth_0_r_dropFlit,
       WILL_FIRE_RL_msNoSynth_0_r_forwardFlit,
       WILL_FIRE_RL_msNoSynth_0_w_forwardReady,
       WILL_FIRE_RL_msNoSynth_1_ar_forwardReady,
       WILL_FIRE_RL_msNoSynth_1_aw_forwardReady,
       WILL_FIRE_RL_msNoSynth_1_b_buffer_dequeue,
       WILL_FIRE_RL_msNoSynth_1_b_buffer_enqueue,
       WILL_FIRE_RL_msNoSynth_1_b_dropFlit,
       WILL_FIRE_RL_msNoSynth_1_b_forwardFlit,
       WILL_FIRE_RL_msNoSynth_1_r_buffer_dequeue,
       WILL_FIRE_RL_msNoSynth_1_r_buffer_enqueue,
       WILL_FIRE_RL_msNoSynth_1_r_dropFlit,
       WILL_FIRE_RL_msNoSynth_1_r_forwardFlit,
       WILL_FIRE_RL_msNoSynth_1_w_forwardReady,
       WILL_FIRE_RL_rl_cpu_hart0_reset_complete,
       WILL_FIRE_RL_rl_cpu_hart0_reset_from_dm_start,
       WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start,
       WILL_FIRE_RL_rl_relay_external_interrupts,
       WILL_FIRE_RL_rl_relay_sw_interrupts,
       WILL_FIRE_RL_rl_relay_timer_interrupts,
       WILL_FIRE_RL_sink_selected,
       WILL_FIRE_RL_sink_selected_1,
       WILL_FIRE_RL_sink_selected_2,
       WILL_FIRE_RL_sink_selected_3,
       WILL_FIRE_RL_sink_selected_4,
       WILL_FIRE_RL_sink_selected_5,
       WILL_FIRE_RL_sink_selected_6,
       WILL_FIRE_RL_sink_selected_7,
       WILL_FIRE_RL_sink_selected_8,
       WILL_FIRE_RL_sink_selected_9,
       WILL_FIRE_RL_source_selected,
       WILL_FIRE_RL_source_selected_1,
       WILL_FIRE_RL_source_selected_2,
       WILL_FIRE_RL_source_selected_3,
       WILL_FIRE_RL_source_selected_4,
       WILL_FIRE_RL_source_selected_5,
       WILL_FIRE_RL_source_selected_6,
       WILL_FIRE_RL_source_selected_7,
       WILL_FIRE_RL_source_selected_8,
       WILL_FIRE_RL_source_selected_9,
       WILL_FIRE_RL_split_0_putFirst,
       WILL_FIRE_RL_split_0_putOther,
       WILL_FIRE_RL_split_1_putFirst,
       WILL_FIRE_RL_split_1_putOther,
       WILL_FIRE_RL_split_2_putFirst,
       WILL_FIRE_RL_split_2_putOther,
       WILL_FIRE_RL_ssNoSynth_0_ar_buffer_dequeue,
       WILL_FIRE_RL_ssNoSynth_0_ar_buffer_enqueue,
       WILL_FIRE_RL_ssNoSynth_0_ar_dropFlit,
       WILL_FIRE_RL_ssNoSynth_0_ar_forwardFlit,
       WILL_FIRE_RL_ssNoSynth_0_aw_buffer_dequeue,
       WILL_FIRE_RL_ssNoSynth_0_aw_buffer_enqueue,
       WILL_FIRE_RL_ssNoSynth_0_aw_dropFlit,
       WILL_FIRE_RL_ssNoSynth_0_aw_forwardFlit,
       WILL_FIRE_RL_ssNoSynth_0_b_forwardReady,
       WILL_FIRE_RL_ssNoSynth_0_r_forwardReady,
       WILL_FIRE_RL_ssNoSynth_0_w_buffer_dequeue,
       WILL_FIRE_RL_ssNoSynth_0_w_buffer_enqueue,
       WILL_FIRE_RL_ssNoSynth_0_w_dropFlit,
       WILL_FIRE_RL_ssNoSynth_0_w_forwardFlit,
       WILL_FIRE_RL_ssNoSynth_1_ar_buffer_dequeue,
       WILL_FIRE_RL_ssNoSynth_1_ar_buffer_enqueue,
       WILL_FIRE_RL_ssNoSynth_1_ar_dropFlit,
       WILL_FIRE_RL_ssNoSynth_1_ar_forwardFlit,
       WILL_FIRE_RL_ssNoSynth_1_aw_buffer_dequeue,
       WILL_FIRE_RL_ssNoSynth_1_aw_buffer_enqueue,
       WILL_FIRE_RL_ssNoSynth_1_aw_dropFlit,
       WILL_FIRE_RL_ssNoSynth_1_aw_forwardFlit,
       WILL_FIRE_RL_ssNoSynth_1_b_forwardReady,
       WILL_FIRE_RL_ssNoSynth_1_r_forwardReady,
       WILL_FIRE_RL_ssNoSynth_1_w_buffer_dequeue,
       WILL_FIRE_RL_ssNoSynth_1_w_buffer_enqueue,
       WILL_FIRE_RL_ssNoSynth_1_w_dropFlit,
       WILL_FIRE_RL_ssNoSynth_1_w_forwardFlit,
       WILL_FIRE_RL_ssNoSynth_2_ar_buffer_dequeue,
       WILL_FIRE_RL_ssNoSynth_2_ar_buffer_enqueue,
       WILL_FIRE_RL_ssNoSynth_2_ar_dropFlit,
       WILL_FIRE_RL_ssNoSynth_2_ar_forwardFlit,
       WILL_FIRE_RL_ssNoSynth_2_aw_buffer_dequeue,
       WILL_FIRE_RL_ssNoSynth_2_aw_buffer_enqueue,
       WILL_FIRE_RL_ssNoSynth_2_aw_dropFlit,
       WILL_FIRE_RL_ssNoSynth_2_aw_forwardFlit,
       WILL_FIRE_RL_ssNoSynth_2_b_forwardReady,
       WILL_FIRE_RL_ssNoSynth_2_r_forwardReady,
       WILL_FIRE_RL_ssNoSynth_2_w_buffer_dequeue,
       WILL_FIRE_RL_ssNoSynth_2_w_buffer_enqueue,
       WILL_FIRE_RL_ssNoSynth_2_w_dropFlit,
       WILL_FIRE_RL_ssNoSynth_2_w_forwardFlit,
       WILL_FIRE_RL_tagController_passCacheRead,
       WILL_FIRE_RL_tagController_passCacheResponse,
       WILL_FIRE_RL_tagController_passCacheWrite,
       WILL_FIRE_RL_tagController_passMemoryRequest,
       WILL_FIRE_RL_tagController_passMemoryResponseRead,
       WILL_FIRE_RL_tagController_passMemoryResponseWrite,
       WILL_FIRE___me_check_167,
       WILL_FIRE___me_check_168,
       WILL_FIRE___me_check_169,
       WILL_FIRE___me_check_171,
       WILL_FIRE___me_check_174,
       WILL_FIRE___me_check_175,
       WILL_FIRE___me_check_176,
       WILL_FIRE___me_check_178,
       WILL_FIRE___me_check_181,
       WILL_FIRE___me_check_183,
       WILL_FIRE___me_check_185,
       WILL_FIRE___me_check_193,
       WILL_FIRE___me_check_195,
       WILL_FIRE___me_check_197,
       WILL_FIRE___me_check_206,
       WILL_FIRE___me_check_208,
       WILL_FIRE___me_check_210,
       WILL_FIRE___me_check_212,
       WILL_FIRE___me_check_214,
       WILL_FIRE___me_check_215,
       WILL_FIRE___me_check_216,
       WILL_FIRE___me_check_218,
       WILL_FIRE___me_check_221,
       WILL_FIRE___me_check_222,
       WILL_FIRE___me_check_223,
       WILL_FIRE___me_check_225,
       WILL_FIRE___me_check_228,
       WILL_FIRE___me_check_230,
       WILL_FIRE___me_check_232,
       WILL_FIRE___me_check_240,
       WILL_FIRE___me_check_242,
       WILL_FIRE___me_check_244,
       WILL_FIRE___me_check_253,
       WILL_FIRE___me_check_255,
       WILL_FIRE___me_check_257,
       WILL_FIRE___me_check_259,
       WILL_FIRE___me_check_42,
       WILL_FIRE___me_check_61,
       WILL_FIRE_core_external_interrupt_sources_0_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_10_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_11_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_12_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_13_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_14_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_15_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_1_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_2_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_3_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_4_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_5_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_6_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_7_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_8_m_interrupt_req,
       WILL_FIRE_core_external_interrupt_sources_9_m_interrupt_req,
       WILL_FIRE_cpu_dmem_master_ar_arready,
       WILL_FIRE_cpu_dmem_master_aw_awready,
       WILL_FIRE_cpu_dmem_master_b_bflit,
       WILL_FIRE_cpu_dmem_master_r_rflit,
       WILL_FIRE_cpu_dmem_master_w_wready,
       WILL_FIRE_cpu_imem_master_ar_arready,
       WILL_FIRE_cpu_imem_master_aw_awready,
       WILL_FIRE_cpu_imem_master_b_bflit,
       WILL_FIRE_cpu_imem_master_r_rflit,
       WILL_FIRE_cpu_imem_master_w_wready,
       WILL_FIRE_cpu_reset_server_request_put,
       WILL_FIRE_cpu_reset_server_response_get,
       WILL_FIRE_dm_dmi_read_addr,
       WILL_FIRE_dm_dmi_read_data,
       WILL_FIRE_dm_dmi_write,
       WILL_FIRE_ndm_reset_client_request_get,
       WILL_FIRE_ndm_reset_client_response_put,
       WILL_FIRE_nmi_req,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_tv_verifier_info_get_get;

  // inputs to muxes for submodule ports
  reg [136 : 0] MUX_msNoSynth_0_r_buffer_enqw$wset_1__VAL_2,
		MUX_msNoSynth_1_r_buffer_enqw$wset_1__VAL_2;
  reg [5 : 0] MUX_msNoSynth_0_b_buffer_enqw$wset_1__VAL_2,
	      MUX_msNoSynth_1_b_buffer_enqw$wset_1__VAL_2;
  wire [205 : 0] MUX_tagController_tagCon$cache_request_put_1__VAL_1,
		 MUX_tagController_tagCon$cache_request_put_1__VAL_2;
  wire [141 : 0] MUX_tagController_tagCon$memory_response_put_1__VAL_1,
		 MUX_tagController_tagCon$memory_response_put_1__VAL_2;
  wire [7 : 0] MUX_merged_0_flitLeft$write_1__VAL_1,
	       MUX_merged_1_flitLeft$write_1__VAL_2,
	       MUX_split_0_flitLeft$write_1__VAL_1,
	       MUX_split_1_flitLeft$write_1__VAL_1,
	       MUX_split_2_flitLeft$write_1__VAL_1;
  wire MUX_activeSource_0$write_1__SEL_1,
       MUX_activeSource_0$write_1__VAL_1,
       MUX_activeSource_1$write_1__VAL_2,
       MUX_activeSource_1_1_0$write_1__SEL_1,
       MUX_activeSource_1_1_0$write_1__SEL_2,
       MUX_activeSource_1_1_0$write_1__SEL_3,
       MUX_activeSource_1_1_0$write_1__VAL_1,
       MUX_activeSource_1_1_1_1$write_1__VAL_1,
       MUX_activeSource_1_1_2$write_1__VAL_1,
       MUX_deburst_debug_inSerial_state$port1__write_1__SEL_1,
       MUX_deburst_dm_inSerial_state$port1__write_1__SEL_1,
       MUX_flitToSink_0$wset_1__SEL_1,
       MUX_flitToSink_0$wset_1__SEL_3,
       MUX_flitToSink_1$wset_1__SEL_1,
       MUX_flitToSink_1$wset_1__SEL_3,
       MUX_flitToSink_1_0$wset_1__SEL_1,
       MUX_flitToSink_1_0$wset_1__SEL_2,
       MUX_flitToSink_1_0$wset_1__SEL_3,
       MUX_flitToSink_1_0$wset_1__SEL_4,
       MUX_flitToSink_1_0$wset_1__SEL_5,
       MUX_flitToSink_1_0$wset_1__SEL_6,
       MUX_flitToSink_1_0_1$wset_1__SEL_1,
       MUX_flitToSink_1_0_1$wset_1__SEL_3,
       MUX_flitToSink_1_1$wset_1__SEL_1,
       MUX_flitToSink_1_1$wset_1__SEL_2,
       MUX_flitToSink_1_1$wset_1__SEL_3,
       MUX_flitToSink_1_1$wset_1__SEL_4,
       MUX_flitToSink_1_1$wset_1__SEL_5,
       MUX_flitToSink_1_1$wset_1__SEL_6,
       MUX_flitToSink_1_1_0$wset_1__SEL_1,
       MUX_flitToSink_1_1_0$wset_1__SEL_2,
       MUX_flitToSink_1_1_0$wset_1__SEL_3,
       MUX_flitToSink_1_1_0$wset_1__SEL_4,
       MUX_flitToSink_1_1_0$wset_1__SEL_5,
       MUX_flitToSink_1_1_0$wset_1__SEL_6,
       MUX_flitToSink_1_1_1$wset_1__SEL_1,
       MUX_flitToSink_1_1_1$wset_1__SEL_3,
       MUX_flitToSink_1_1_1_1$wset_1__SEL_1,
       MUX_flitToSink_1_1_1_1$wset_1__SEL_2,
       MUX_flitToSink_1_1_1_1$wset_1__SEL_3,
       MUX_flitToSink_1_1_1_1$wset_1__SEL_4,
       MUX_flitToSink_1_1_1_1$wset_1__SEL_5,
       MUX_flitToSink_1_1_1_1$wset_1__SEL_6,
       MUX_flitToSink_1_2$wset_1__SEL_1,
       MUX_flitToSink_1_2$wset_1__SEL_3,
       MUX_flitToSink_2$wset_1__SEL_1,
       MUX_flitToSink_2$wset_1__SEL_3,
       MUX_ifcs_0_1_state_1$write_1__SEL_1,
       MUX_ifcs_0_state$write_1__PSEL_1,
       MUX_ifcs_0_state$write_1__SEL_1,
       MUX_ifcs_0_state$write_1__SEL_2,
       MUX_ifcs_0_state$write_1__SEL_3,
       MUX_ifcs_1_1_state_1$write_1__SEL_1,
       MUX_ifcs_1_state$write_1__PSEL_1,
       MUX_ifcs_1_state$write_1__SEL_1,
       MUX_ifcs_1_state$write_1__SEL_2,
       MUX_ifcs_1_state$write_1__SEL_3,
       MUX_ifcs_2_1_state$write_1__SEL_1,
       MUX_split_0_flitLeft$write_1__SEL_1,
       MUX_split_0_flitLeft$write_1__SEL_2,
       MUX_split_1_flitLeft$write_1__SEL_1,
       MUX_split_1_flitLeft$write_1__SEL_2,
       MUX_split_2_flitLeft$write_1__SEL_1,
       MUX_split_2_flitLeft$write_1__SEL_2,
       MUX_state$write_1__SEL_1,
       MUX_state$write_1__SEL_2,
       MUX_state_1_1_1$write_1__SEL_1,
       MUX_state_1_1_1$write_1__SEL_2,
       MUX_state_1_1_1$write_1__SEL_3;

  // declarations used by system tasks
  // synopsys translate_off
  reg [63 : 0] v__h58844;
  reg [63 : 0] v__h58233;
  reg [63 : 0] v__h62853;
  reg [63 : 0] v__h62242;
  reg [63 : 0] v__h92734;
  reg [63 : 0] v__h92123;
  reg [63 : 0] v__h95627;
  reg [63 : 0] v__h95016;
  reg [63 : 0] v__h7505;
  reg [63 : 0] v__h7819;
  reg [63 : 0] v__h8534;
  reg [63 : 0] v__h11281;
  reg [63 : 0] v__h11785;
  reg [63 : 0] v__h12235;
  reg [63 : 0] v__h73548;
  reg [63 : 0] v__h73167;
  reg [63 : 0] v__h75618;
  reg [63 : 0] v__h75237;
  reg [63 : 0] v__h77517;
  reg [63 : 0] v__h77136;
  reg [63 : 0] v__h104907;
  reg [63 : 0] v__h104526;
  reg [63 : 0] v__h107398;
  reg [63 : 0] v__h107017;
  reg [63 : 0] v__h109708;
  reg [63 : 0] v__h109327;
  reg [31 : 0] v__h14705;
  reg [31 : 0] v__h15071;
  reg [31 : 0] v__h14528;
  reg [31 : 0] v__h14522;
  reg [31 : 0] v__h14699;
  reg [31 : 0] v__h15065;
  // synopsys translate_on

  // remaining internal signals
  wire [127 : 0] x__h34753;
  wire [63 : 0] araddr__h11126,
		aw_awaddr__h8770,
		dm_master_nonsynth_awFF_rvport1__read_BITS_92_ETC__q1,
		x__h21048,
		x__h21747,
		x__h27442,
		x__h28141,
		x_araddr__h11143,
		x_araddr__h21627,
		x_araddr__h28021,
		x_awaddr__h20925,
		x_awaddr__h27322,
		x_rdata__h34703,
		y__h21036,
		y__h21735,
		y__h27430,
		y__h28129,
		y__h45660,
		y__h45684;
  wire [39 : 0] x__h8797;
  wire [8 : 0] x_port1__read__h81220, x_port1__read__h83666;
  wire [7 : 0] arlen__h11127,
	       x__h21296,
	       x__h21413,
	       x__h21947,
	       x__h27690,
	       x__h27807,
	       x__h28341,
	       x_arlen__h11144;
  wire [5 : 0] x_arid__h11142;
  wire [4 : 0] IF_tagController_tagCon_cache_response_get_16__ETC___d228,
	       a_awid__h46818,
	       fatReq_arid__h80659,
	       x__h4856,
	       x__h7610;
  wire [3 : 0] arcache__h11131, x__h11207, x__h8842, x_rid__h34702;
  wire [2 : 0] x_arsize_val__h11189;
  wire [1 : 0] IF_IF_merged_0_flitLeft_413_EQ_0_414_THEN_cpu__ETC___d1576,
	       IF_IF_merged_1_flitLeft_431_EQ_0_432_THEN_dm_m_ETC___d1680,
	       IF_cpu_dmem_master_ar_araddr__201_BITS_63_TO_4_ETC___d2225,
	       IF_deburst_dm_outShim_arff_first__16_BITS_92_T_ETC___d2315,
	       SEXT_SEXT_arbiter_1_1_firstHot_666_667_BIT_0_6_ETC__q19,
	       SEXT_SEXT_arbiter_1_firstHot_040_041_BIT_0_042_ETC__q9,
	       SEXT_SEXT_arbiter_1_firstHot_1_481_482_BIT_0_4_ETC__q14,
	       SEXT_SEXT_arbiter_firstHot_845_846_BIT_0_847_A_ETC__q4,
	       SEXT_arbiter_1_1_firstHot__q16,
	       SEXT_arbiter_1_1_lastSelect_1__q18,
	       SEXT_arbiter_1_1_lastSelect__q17,
	       SEXT_arbiter_1_firstHot_1__q12,
	       SEXT_arbiter_1_firstHot__q6,
	       SEXT_arbiter_1_lastSelect_1__q8,
	       SEXT_arbiter_1_lastSelect_2__q13,
	       SEXT_arbiter_1_lastSelect__q7,
	       SEXT_arbiter_firstHot__q2,
	       SEXT_arbiter_lastSelect__q3,
	       SEXT_x03204__q20,
	       SEXT_x03238__q21,
	       SEXT_x1259__q15,
	       SEXT_x1849__q10,
	       SEXT_x1883__q11,
	       SEXT_x7363__q5;
  wire IF_NOT_ifcs_0_1_innerRoute_first__427_BIT_1_43_ETC___d2449,
       IF_NOT_ifcs_0_innerRoute_first__791_BIT_1_800__ETC___d1813,
       IF_NOT_ifcs_1_1_innerRoute_first__456_BIT_1_46_ETC___d2465,
       IF_NOT_ifcs_1_innerRoute_first__820_BIT_1_824__ETC___d1829,
       IF_SEXT_arbiter_1_1_lastSelect_657_658_BIT_0_6_ETC___d2701,
       IF_SEXT_arbiter_1_1_lastSelect_657_658_BIT_0_6_ETC___d2707,
       IF_SEXT_arbiter_1_1_lastSelect_657_658_BIT_0_6_ETC___d2713,
       IF_SEXT_arbiter_1_lastSelect_031_032_BIT_0_033_ETC___d2075,
       IF_SEXT_arbiter_1_lastSelect_031_032_BIT_0_033_ETC___d2081,
       IF_SEXT_arbiter_1_lastSelect_031_032_BIT_0_033_ETC___d2087,
       IF_SEXT_arbiter_1_lastSelect_2_477_478_BIT_0_4_ETC___d2501,
       IF_SEXT_arbiter_1_lastSelect_2_477_478_BIT_0_4_ETC___d2505,
       IF_SEXT_arbiter_lastSelect_841_842_BIT_0_843_A_ETC___d1865,
       IF_SEXT_arbiter_lastSelect_841_842_BIT_0_843_A_ETC___d1869,
       IF_merged_0_flitLeft_413_EQ_0_414_THEN_NOT_cpu_ETC___d1543,
       IF_merged_0_flitLeft_413_EQ_0_414_THEN_NOT_cpu_ETC___d1611,
       IF_merged_0_flitLeft_413_EQ_0_414_THEN_cpu_dme_ETC___d1536,
       IF_merged_0_flitLeft_413_EQ_0_414_THEN_cpu_dme_ETC___d1555,
       IF_merged_0_flitLeft_413_EQ_0_414_THEN_cpu_dme_ETC___d1556,
       IF_merged_0_flitLeft_413_EQ_0_414_THEN_cpu_dme_ETC___d1559,
       IF_merged_0_flitLeft_413_EQ_0_414_THEN_cpu_dme_ETC___d1560,
       IF_merged_0_flitLeft_413_EQ_0_414_THEN_cpu_dme_ETC___d1564,
       IF_merged_0_flitLeft_413_EQ_0_414_THEN_cpu_dme_ETC___d1574,
       IF_merged_1_flitLeft_431_EQ_0_432_THEN_NOT_dm__ETC___d1644,
       IF_merged_1_flitLeft_431_EQ_0_432_THEN_dm_mast_ETC___d1639,
       IF_merged_1_flitLeft_431_EQ_0_432_THEN_dm_mast_ETC___d1659,
       IF_merged_1_flitLeft_431_EQ_0_432_THEN_dm_mast_ETC___d1660,
       IF_merged_1_flitLeft_431_EQ_0_432_THEN_dm_mast_ETC___d1663,
       IF_merged_1_flitLeft_431_EQ_0_432_THEN_dm_mast_ETC___d1664,
       IF_merged_1_flitLeft_431_EQ_0_432_THEN_dm_mast_ETC___d1668,
       IF_merged_1_flitLeft_431_EQ_0_432_THEN_dm_mast_ETC___d1678,
       IF_split_0_flitLeft_457_EQ_0_458_THEN_ssNoSynt_ETC___d1783,
       IF_split_1_flitLeft_486_EQ_0_487_THEN_ssNoSynt_ETC___d1784,
       IF_split_2_flitLeft_515_EQ_0_516_THEN_ssNoSynt_ETC___d1785,
       SEXT_arbiter_1_1_firstHot_666_667_BIT_0_668_AN_ETC___d2682,
       SEXT_arbiter_1_1_lastSelect_1_661_662_BIT_0_66_ETC___d2676,
       SEXT_arbiter_1_1_lastSelect_657_658_BIT_0_659__ETC___d2670,
       SEXT_arbiter_1_firstHot_040_041_BIT_0_042_AND__ETC___d2056,
       SEXT_arbiter_1_firstHot_1_481_482_BIT_0_483_AN_ETC___d2489,
       SEXT_arbiter_1_lastSelect_031_032_BIT_0_033_AN_ETC___d2044,
       SEXT_arbiter_1_lastSelect_1_035_036_BIT_0_037__ETC___d2050,
       SEXT_arbiter_1_lastSelect_2_477_478_BIT_0_479__ETC___d2485,
       SEXT_arbiter_firstHot_845_846_BIT_0_847_AND_re_ETC___d1853,
       SEXT_arbiter_lastSelect_841_842_BIT_0_843_AND__ETC___d1849,
       cpu_dmem_master_ar_araddr__201_BITS_63_TO_40_2_ETC___d2213,
       cpu_dmem_master_ar_araddr__201_BITS_63_TO_40_2_ETC___d2223,
       cpu_dmem_master_ar_araddr__201_ULT_soc_map_m_n_ETC___d2204,
       cpu_dmem_master_ar_araddr__201_ULT_soc_map_m_n_ETC___d2205,
       cpu_dmem_master_ar_araddr__201_ULT_soc_map_m_p_ETC___d2208,
       cpu_dmem_master_ar_araddr__201_ULT_soc_map_m_p_ETC___d2209,
       deburst_debug_countWriteRspFF_first__69_ULE_de_ETC___d471,
       deburst_debug_readsSent_93_EQ_deburst_debug_in_ETC___d504,
       deburst_dm_countWriteRspFF_first__56_ULE_debur_ETC___d658,
       deburst_dm_outShim_arff_first__16_BITS_92_TO_2_ETC___d2294,
       deburst_dm_outShim_arff_first__16_BITS_92_TO_2_ETC___d2295,
       deburst_dm_outShim_arff_first__16_BITS_92_TO_2_ETC___d2298,
       deburst_dm_outShim_arff_first__16_BITS_92_TO_2_ETC___d2299,
       deburst_dm_outShim_arff_first__16_BITS_92_TO_6_ETC___d2303,
       deburst_dm_outShim_arff_first__16_BITS_92_TO_6_ETC___d2313,
       deburst_dm_outShim_arff_notEmpty__09_AND_NOT_d_ETC___d821,
       deburst_dm_outShim_awff_notEmpty__88_AND_NOT_d_ETC___d800,
       deburst_dm_outShim_wff_i_notEmpty__61_AND_dm_m_ETC___d1703,
       deburst_dm_readsSent_80_EQ_deburst_dm_inSerial_ETC___d691,
       dm_master_nonsynth_takeUpperW_i_notEmpty__62_A_ETC___d1650,
       msNoSynth_1_r_buffer_firstValid_read__025_AND__ETC___d1031,
       plic_RDY_server_reset_request_put__10_AND_cpu__ETC___d316,
       reqWires_1_0_whas__017_AND_reqWires_1_0_wget___ETC___d2027,
       reqWires_1_1_0_whas__643_AND_reqWires_1_1_0_wg_ETC___d2653,
       split_0_doPut_whas__449_AND_split_0_doPut_wget_ETC___d1456,
       split_1_doPut_whas__478_AND_split_1_doPut_wget_ETC___d1485,
       split_2_doPut_whas__507_AND_split_2_doPut_wget_ETC___d1514,
       state_1_028_AND_activeSource_1_0_116_117_AND_i_ETC___d2119,
       state_1_028_AND_activeSource_1_1_149_150_AND_i_ETC___d2152,
       state_1_028_AND_activeSource_1_2_183_184_AND_i_ETC___d2186,
       state_1_1_1_654_AND_activeSource_1_1_0_748_749_ETC___d2751,
       state_1_1_1_654_AND_activeSource_1_1_1_1_784_7_ETC___d2787,
       state_1_1_1_654_AND_activeSource_1_1_2_820_821_ETC___d2823,
       state_1_1_474_AND_activeSource_1_0_1_541_542_A_ETC___d2544,
       state_1_1_474_AND_activeSource_1_1_1_581_582_A_ETC___d2584,
       state_838_AND_activeSource_0_911_912_AND_ifcs__ETC___d1914,
       state_838_AND_activeSource_1_955_956_AND_ifcs__ETC___d1958,
       x__h102383,
       x__h102385,
       x__h102534,
       x__h102536,
       x__h102670,
       x__h102672,
       x__h103142,
       x__h103144,
       x__h103204,
       x__h103238,
       x__h103330,
       x__h103332,
       x__h103511,
       x__h103513,
       x__h56836,
       x__h56939,
       x__h57304,
       x__h57363,
       x__h57445,
       x__h71028,
       x__h71030,
       x__h71179,
       x__h71181,
       x__h71315,
       x__h71317,
       x__h71787,
       x__h71789,
       x__h71849,
       x__h71883,
       x__h71975,
       x__h71977,
       x__h72156,
       x__h72158,
       x__h90732,
       x__h90835,
       x__h91200,
       x__h91259,
       x__h91341,
       y__h102384,
       y__h102386,
       y__h102535,
       y__h102537,
       y__h102671,
       y__h102673,
       y__h103143,
       y__h103145,
       y__h103331,
       y__h103333,
       y__h103512,
       y__h103514,
       y__h56837,
       y__h56940,
       y__h57305,
       y__h57446,
       y__h71029,
       y__h71031,
       y__h71180,
       y__h71182,
       y__h71316,
       y__h71318,
       y__h71788,
       y__h71790,
       y__h71976,
       y__h71978,
       y__h72157,
       y__h72159,
       y__h90733,
       y__h90836,
       y__h91201,
       y__h91342;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // action method cpu_reset_server_request_put
  assign RDY_cpu_reset_server_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_cpu_reset_server_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_cpu_reset_server_request_put =
	     EN_cpu_reset_server_request_put ;

  // actionvalue method cpu_reset_server_response_get
  assign cpu_reset_server_response_get = f_reset_rsps$D_OUT ;
  assign RDY_cpu_reset_server_response_get = f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_cpu_reset_server_response_get = f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_cpu_reset_server_response_get =
	     EN_cpu_reset_server_response_get ;

  // value method cpu_imem_master_aw_awid
  assign cpu_imem_master_awid =
	     { 1'd0, cpu_imem_ug_u_aw_peekWire$wget[97:93] } ;

  // value method cpu_imem_master_aw_awaddr
  assign cpu_imem_master_awaddr = cpu_imem_ug_u_aw_peekWire$wget[92:29] ;

  // value method cpu_imem_master_aw_awlen
  assign cpu_imem_master_awlen = cpu_imem_ug_u_aw_peekWire$wget[28:21] ;

  // value method cpu_imem_master_aw_awsize
  assign cpu_imem_master_awsize = cpu_imem_ug_u_aw_peekWire$wget[20:18] ;

  // value method cpu_imem_master_aw_awburst
  assign cpu_imem_master_awburst = cpu_imem_ug_u_aw_peekWire$wget[17:16] ;

  // value method cpu_imem_master_aw_awlock
  assign cpu_imem_master_awlock = cpu_imem_ug_u_aw_peekWire$wget[15] ;

  // value method cpu_imem_master_aw_awcache
  assign cpu_imem_master_awcache = cpu_imem_ug_u_aw_peekWire$wget[14:11] ;

  // value method cpu_imem_master_aw_awprot
  assign cpu_imem_master_awprot = cpu_imem_ug_u_aw_peekWire$wget[10:8] ;

  // value method cpu_imem_master_aw_awqos
  assign cpu_imem_master_awqos = cpu_imem_ug_u_aw_peekWire$wget[7:4] ;

  // value method cpu_imem_master_aw_awregion
  assign cpu_imem_master_awregion = cpu_imem_ug_u_aw_peekWire$wget[3:0] ;

  // value method cpu_imem_master_aw_awvalid
  assign cpu_imem_master_awvalid = cpu$imem_master_awvalid ;

  // action method cpu_imem_master_aw_awready
  assign CAN_FIRE_cpu_imem_master_aw_awready = 1'd1 ;
  assign WILL_FIRE_cpu_imem_master_aw_awready = 1'd1 ;

  // value method cpu_imem_master_w_wdata
  assign cpu_imem_master_wdata = cpu_imem_ug_u_w_peekWire$wget[146:19] ;

  // value method cpu_imem_master_w_wstrb
  assign cpu_imem_master_wstrb = cpu_imem_ug_u_w_peekWire$wget[18:3] ;

  // value method cpu_imem_master_w_wlast
  assign cpu_imem_master_wlast = cpu_imem_ug_u_w_peekWire$wget[2] ;

  // value method cpu_imem_master_w_wvalid
  assign cpu_imem_master_wvalid = cpu$imem_master_wvalid ;

  // action method cpu_imem_master_w_wready
  assign CAN_FIRE_cpu_imem_master_w_wready = 1'd1 ;
  assign WILL_FIRE_cpu_imem_master_w_wready = 1'd1 ;

  // action method cpu_imem_master_b_bflit
  assign CAN_FIRE_cpu_imem_master_b_bflit = 1'd1 ;
  assign WILL_FIRE_cpu_imem_master_b_bflit = cpu_imem_master_bvalid ;

  // value method cpu_imem_master_b_bready
  assign cpu_imem_master_bready = cpu_imem_b_buffer_ff$FULL_N ;

  // value method cpu_imem_master_ar_arid
  assign cpu_imem_master_arid =
	     { 1'd0, cpu_imem_ug_u_ar_peekWire$wget[97:93] } ;

  // value method cpu_imem_master_ar_araddr
  assign cpu_imem_master_araddr = cpu_imem_ug_u_ar_peekWire$wget[92:29] ;

  // value method cpu_imem_master_ar_arlen
  assign cpu_imem_master_arlen = cpu_imem_ug_u_ar_peekWire$wget[28:21] ;

  // value method cpu_imem_master_ar_arsize
  assign cpu_imem_master_arsize = cpu_imem_ug_u_ar_peekWire$wget[20:18] ;

  // value method cpu_imem_master_ar_arburst
  assign cpu_imem_master_arburst = cpu_imem_ug_u_ar_peekWire$wget[17:16] ;

  // value method cpu_imem_master_ar_arlock
  assign cpu_imem_master_arlock = cpu_imem_ug_u_ar_peekWire$wget[15] ;

  // value method cpu_imem_master_ar_arcache
  assign cpu_imem_master_arcache = cpu_imem_ug_u_ar_peekWire$wget[14:11] ;

  // value method cpu_imem_master_ar_arprot
  assign cpu_imem_master_arprot = cpu_imem_ug_u_ar_peekWire$wget[10:8] ;

  // value method cpu_imem_master_ar_arqos
  assign cpu_imem_master_arqos = cpu_imem_ug_u_ar_peekWire$wget[7:4] ;

  // value method cpu_imem_master_ar_arregion
  assign cpu_imem_master_arregion = cpu_imem_ug_u_ar_peekWire$wget[3:0] ;

  // value method cpu_imem_master_ar_arvalid
  assign cpu_imem_master_arvalid = cpu$imem_master_arvalid ;

  // action method cpu_imem_master_ar_arready
  assign CAN_FIRE_cpu_imem_master_ar_arready = 1'd1 ;
  assign WILL_FIRE_cpu_imem_master_ar_arready = 1'd1 ;

  // action method cpu_imem_master_r_rflit
  assign CAN_FIRE_cpu_imem_master_r_rflit = 1'd1 ;
  assign WILL_FIRE_cpu_imem_master_r_rflit = cpu_imem_master_rvalid ;

  // value method cpu_imem_master_r_rready
  assign cpu_imem_master_rready = cpu_imem_r_buffer_ff$FULL_N ;

  // value method cpu_dmem_master_aw_awid
  assign cpu_dmem_master_awid = tagController_shimMaster_awff$D_OUT[98:93] ;

  // value method cpu_dmem_master_aw_awaddr
  assign cpu_dmem_master_awaddr = tagController_shimMaster_awff$D_OUT[92:29] ;

  // value method cpu_dmem_master_aw_awlen
  assign cpu_dmem_master_awlen = tagController_shimMaster_awff$D_OUT[28:21] ;

  // value method cpu_dmem_master_aw_awsize
  assign cpu_dmem_master_awsize = tagController_shimMaster_awff$D_OUT[20:18] ;

  // value method cpu_dmem_master_aw_awburst
  assign cpu_dmem_master_awburst =
	     tagController_shimMaster_awff$D_OUT[17:16] ;

  // value method cpu_dmem_master_aw_awlock
  assign cpu_dmem_master_awlock = tagController_shimMaster_awff$D_OUT[15] ;

  // value method cpu_dmem_master_aw_awcache
  assign cpu_dmem_master_awcache =
	     tagController_shimMaster_awff$D_OUT[14:11] ;

  // value method cpu_dmem_master_aw_awprot
  assign cpu_dmem_master_awprot = tagController_shimMaster_awff$D_OUT[10:8] ;

  // value method cpu_dmem_master_aw_awqos
  assign cpu_dmem_master_awqos = tagController_shimMaster_awff$D_OUT[7:4] ;

  // value method cpu_dmem_master_aw_awregion
  assign cpu_dmem_master_awregion = tagController_shimMaster_awff$D_OUT[3:0] ;

  // value method cpu_dmem_master_aw_awvalid
  assign cpu_dmem_master_awvalid = tagController_shimMaster_awff$EMPTY_N ;

  // action method cpu_dmem_master_aw_awready
  assign CAN_FIRE_cpu_dmem_master_aw_awready = 1'd1 ;
  assign WILL_FIRE_cpu_dmem_master_aw_awready = 1'd1 ;

  // value method cpu_dmem_master_w_wdata
  assign cpu_dmem_master_wdata = tagController_shimMaster_wff$D_OUT[144:17] ;

  // value method cpu_dmem_master_w_wstrb
  assign cpu_dmem_master_wstrb = tagController_shimMaster_wff$D_OUT[16:1] ;

  // value method cpu_dmem_master_w_wlast
  assign cpu_dmem_master_wlast = tagController_shimMaster_wff$D_OUT[0] ;

  // value method cpu_dmem_master_w_wvalid
  assign cpu_dmem_master_wvalid = tagController_shimMaster_wff$EMPTY_N ;

  // action method cpu_dmem_master_w_wready
  assign CAN_FIRE_cpu_dmem_master_w_wready = 1'd1 ;
  assign WILL_FIRE_cpu_dmem_master_w_wready = 1'd1 ;

  // action method cpu_dmem_master_b_bflit
  assign CAN_FIRE_cpu_dmem_master_b_bflit = 1'd1 ;
  assign WILL_FIRE_cpu_dmem_master_b_bflit = cpu_dmem_master_bvalid ;

  // value method cpu_dmem_master_b_bready
  assign cpu_dmem_master_bready = tagController_shimMaster_bff$FULL_N ;

  // value method cpu_dmem_master_ar_arid
  assign cpu_dmem_master_arid = tagController_shimMaster_arff$D_OUT[98:93] ;

  // value method cpu_dmem_master_ar_araddr
  assign cpu_dmem_master_araddr = tagController_shimMaster_arff$D_OUT[92:29] ;

  // value method cpu_dmem_master_ar_arlen
  assign cpu_dmem_master_arlen = tagController_shimMaster_arff$D_OUT[28:21] ;

  // value method cpu_dmem_master_ar_arsize
  assign cpu_dmem_master_arsize = tagController_shimMaster_arff$D_OUT[20:18] ;

  // value method cpu_dmem_master_ar_arburst
  assign cpu_dmem_master_arburst =
	     tagController_shimMaster_arff$D_OUT[17:16] ;

  // value method cpu_dmem_master_ar_arlock
  assign cpu_dmem_master_arlock = tagController_shimMaster_arff$D_OUT[15] ;

  // value method cpu_dmem_master_ar_arcache
  assign cpu_dmem_master_arcache =
	     tagController_shimMaster_arff$D_OUT[14:11] ;

  // value method cpu_dmem_master_ar_arprot
  assign cpu_dmem_master_arprot = tagController_shimMaster_arff$D_OUT[10:8] ;

  // value method cpu_dmem_master_ar_arqos
  assign cpu_dmem_master_arqos = tagController_shimMaster_arff$D_OUT[7:4] ;

  // value method cpu_dmem_master_ar_arregion
  assign cpu_dmem_master_arregion = tagController_shimMaster_arff$D_OUT[3:0] ;

  // value method cpu_dmem_master_ar_arvalid
  assign cpu_dmem_master_arvalid = tagController_shimMaster_arff$EMPTY_N ;

  // action method cpu_dmem_master_ar_arready
  assign CAN_FIRE_cpu_dmem_master_ar_arready = 1'd1 ;
  assign WILL_FIRE_cpu_dmem_master_ar_arready = 1'd1 ;

  // action method cpu_dmem_master_r_rflit
  assign CAN_FIRE_cpu_dmem_master_r_rflit = 1'd1 ;
  assign WILL_FIRE_cpu_dmem_master_r_rflit = cpu_dmem_master_rvalid ;

  // value method cpu_dmem_master_r_rready
  assign cpu_dmem_master_rready = tagController_shimMaster_rff$FULL_N ;

  // action method core_external_interrupt_sources_0_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_0_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_0_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_1_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_1_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_1_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_2_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_2_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_2_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_3_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_3_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_3_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_4_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_4_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_4_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_5_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_5_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_5_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_6_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_6_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_6_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_7_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_7_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_7_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_8_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_8_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_8_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_9_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_9_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_9_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_10_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_10_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_10_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_11_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_11_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_11_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_12_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_12_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_12_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_13_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_13_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_13_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_14_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_14_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_14_m_interrupt_req = 1'd1 ;

  // action method core_external_interrupt_sources_15_m_interrupt_req
  assign CAN_FIRE_core_external_interrupt_sources_15_m_interrupt_req = 1'd1 ;
  assign WILL_FIRE_core_external_interrupt_sources_15_m_interrupt_req = 1'd1 ;

  // action method nmi_req
  assign CAN_FIRE_nmi_req = 1'd1 ;
  assign WILL_FIRE_nmi_req = 1'd1 ;

  // actionvalue method tv_verifier_info_get_get
  assign tv_verifier_info_get_get = tv_encode$tv_vb_out_get ;
  assign RDY_tv_verifier_info_get_get = tv_encode$RDY_tv_vb_out_get ;
  assign CAN_FIRE_tv_verifier_info_get_get = tv_encode$RDY_tv_vb_out_get ;
  assign WILL_FIRE_tv_verifier_info_get_get = EN_tv_verifier_info_get_get ;

  // action method dm_dmi_read_addr
  assign RDY_dm_dmi_read_addr = debug_module$RDY_dmi_read_addr ;
  assign CAN_FIRE_dm_dmi_read_addr = debug_module$RDY_dmi_read_addr ;
  assign WILL_FIRE_dm_dmi_read_addr = EN_dm_dmi_read_addr ;

  // actionvalue method dm_dmi_read_data
  assign dm_dmi_read_data = debug_module$dmi_read_data ;
  assign RDY_dm_dmi_read_data = debug_module$RDY_dmi_read_data ;
  assign CAN_FIRE_dm_dmi_read_data = debug_module$RDY_dmi_read_data ;
  assign WILL_FIRE_dm_dmi_read_data = EN_dm_dmi_read_data ;

  // action method dm_dmi_write
  assign RDY_dm_dmi_write = debug_module$RDY_dmi_write ;
  assign CAN_FIRE_dm_dmi_write = debug_module$RDY_dmi_write ;
  assign WILL_FIRE_dm_dmi_write = EN_dm_dmi_write ;

  // actionvalue method ndm_reset_client_request_get
  assign ndm_reset_client_request_get =
	     debug_module$ndm_reset_client_request_get ;
  assign RDY_ndm_reset_client_request_get =
	     debug_module$RDY_ndm_reset_client_request_get ;
  assign CAN_FIRE_ndm_reset_client_request_get =
	     debug_module$RDY_ndm_reset_client_request_get ;
  assign WILL_FIRE_ndm_reset_client_request_get =
	     EN_ndm_reset_client_request_get ;

  // action method ndm_reset_client_response_put
  assign RDY_ndm_reset_client_response_put =
	     debug_module$RDY_ndm_reset_client_response_put ;
  assign CAN_FIRE_ndm_reset_client_response_put =
	     debug_module$RDY_ndm_reset_client_response_put ;
  assign WILL_FIRE_ndm_reset_client_response_put =
	     EN_ndm_reset_client_response_put ;

  // submodule cpu
  mkCPU cpu(.CLK(CLK),
	    .RST_N(RST_N),
	    .dmem_master_arready(cpu$dmem_master_arready),
	    .dmem_master_awready(cpu$dmem_master_awready),
	    .dmem_master_bid(cpu$dmem_master_bid),
	    .dmem_master_bresp(cpu$dmem_master_bresp),
	    .dmem_master_rdata(cpu$dmem_master_rdata),
	    .dmem_master_rid(cpu$dmem_master_rid),
	    .dmem_master_rlast(cpu$dmem_master_rlast),
	    .dmem_master_rresp(cpu$dmem_master_rresp),
	    .dmem_master_ruser(cpu$dmem_master_ruser),
	    .dmem_master_wready(cpu$dmem_master_wready),
	    .hart0_csr_mem_server_request_put(cpu$hart0_csr_mem_server_request_put),
	    .hart0_gpr_mem_server_request_put(cpu$hart0_gpr_mem_server_request_put),
	    .hart0_put_other_req_put(cpu$hart0_put_other_req_put),
	    .hart0_server_reset_request_put(cpu$hart0_server_reset_request_put),
	    .hart0_server_run_halt_request_put(cpu$hart0_server_run_halt_request_put),
	    .imem_master_arready(cpu$imem_master_arready),
	    .imem_master_awready(cpu$imem_master_awready),
	    .imem_master_bid(cpu$imem_master_bid),
	    .imem_master_bresp(cpu$imem_master_bresp),
	    .imem_master_rdata(cpu$imem_master_rdata),
	    .imem_master_rid(cpu$imem_master_rid),
	    .imem_master_rlast(cpu$imem_master_rlast),
	    .imem_master_rresp(cpu$imem_master_rresp),
	    .imem_master_ruser(cpu$imem_master_ruser),
	    .imem_master_wready(cpu$imem_master_wready),
	    .m_external_interrupt_req_set_not_clear(cpu$m_external_interrupt_req_set_not_clear),
	    .nmi_req_set_not_clear(cpu$nmi_req_set_not_clear),
	    .s_external_interrupt_req_set_not_clear(cpu$s_external_interrupt_req_set_not_clear),
	    .set_verbosity_logdelay(cpu$set_verbosity_logdelay),
	    .set_verbosity_verbosity(cpu$set_verbosity_verbosity),
	    .software_interrupt_req_set_not_clear(cpu$software_interrupt_req_set_not_clear),
	    .timer_interrupt_req_set_not_clear(cpu$timer_interrupt_req_set_not_clear),
	    .EN_hart0_server_reset_request_put(cpu$EN_hart0_server_reset_request_put),
	    .EN_hart0_server_reset_response_get(cpu$EN_hart0_server_reset_response_get),
	    .imem_master_bvalid(cpu$imem_master_bvalid),
	    .imem_master_rvalid(cpu$imem_master_rvalid),
	    .dmem_master_bvalid(cpu$dmem_master_bvalid),
	    .dmem_master_rvalid(cpu$dmem_master_rvalid),
	    .EN_set_verbosity(cpu$EN_set_verbosity),
	    .EN_trace_data_out_get(cpu$EN_trace_data_out_get),
	    .EN_hart0_server_run_halt_request_put(cpu$EN_hart0_server_run_halt_request_put),
	    .EN_hart0_server_run_halt_response_get(cpu$EN_hart0_server_run_halt_response_get),
	    .EN_hart0_put_other_req_put(cpu$EN_hart0_put_other_req_put),
	    .EN_hart0_gpr_mem_server_request_put(cpu$EN_hart0_gpr_mem_server_request_put),
	    .EN_hart0_gpr_mem_server_response_get(cpu$EN_hart0_gpr_mem_server_response_get),
	    .EN_hart0_csr_mem_server_request_put(cpu$EN_hart0_csr_mem_server_request_put),
	    .EN_hart0_csr_mem_server_response_get(cpu$EN_hart0_csr_mem_server_response_get),
	    .RDY_hart0_server_reset_request_put(cpu$RDY_hart0_server_reset_request_put),
	    .hart0_server_reset_response_get(cpu$hart0_server_reset_response_get),
	    .RDY_hart0_server_reset_response_get(cpu$RDY_hart0_server_reset_response_get),
	    .imem_master_awid(cpu$imem_master_awid),
	    .imem_master_awaddr(cpu$imem_master_awaddr),
	    .imem_master_awlen(cpu$imem_master_awlen),
	    .imem_master_awsize(cpu$imem_master_awsize),
	    .imem_master_awburst(cpu$imem_master_awburst),
	    .imem_master_awlock(cpu$imem_master_awlock),
	    .imem_master_awcache(cpu$imem_master_awcache),
	    .imem_master_awprot(cpu$imem_master_awprot),
	    .imem_master_awqos(cpu$imem_master_awqos),
	    .imem_master_awregion(cpu$imem_master_awregion),
	    .imem_master_awvalid(cpu$imem_master_awvalid),
	    .imem_master_wdata(cpu$imem_master_wdata),
	    .imem_master_wstrb(cpu$imem_master_wstrb),
	    .imem_master_wlast(cpu$imem_master_wlast),
	    .imem_master_wuser(cpu$imem_master_wuser),
	    .imem_master_wvalid(cpu$imem_master_wvalid),
	    .imem_master_bready(cpu$imem_master_bready),
	    .imem_master_arid(cpu$imem_master_arid),
	    .imem_master_araddr(cpu$imem_master_araddr),
	    .imem_master_arlen(cpu$imem_master_arlen),
	    .imem_master_arsize(cpu$imem_master_arsize),
	    .imem_master_arburst(cpu$imem_master_arburst),
	    .imem_master_arlock(cpu$imem_master_arlock),
	    .imem_master_arcache(cpu$imem_master_arcache),
	    .imem_master_arprot(cpu$imem_master_arprot),
	    .imem_master_arqos(cpu$imem_master_arqos),
	    .imem_master_arregion(cpu$imem_master_arregion),
	    .imem_master_arvalid(cpu$imem_master_arvalid),
	    .imem_master_rready(cpu$imem_master_rready),
	    .dmem_master_awid(cpu$dmem_master_awid),
	    .dmem_master_awaddr(cpu$dmem_master_awaddr),
	    .dmem_master_awlen(cpu$dmem_master_awlen),
	    .dmem_master_awsize(cpu$dmem_master_awsize),
	    .dmem_master_awburst(cpu$dmem_master_awburst),
	    .dmem_master_awlock(cpu$dmem_master_awlock),
	    .dmem_master_awcache(cpu$dmem_master_awcache),
	    .dmem_master_awprot(cpu$dmem_master_awprot),
	    .dmem_master_awqos(cpu$dmem_master_awqos),
	    .dmem_master_awregion(cpu$dmem_master_awregion),
	    .dmem_master_awvalid(cpu$dmem_master_awvalid),
	    .dmem_master_wdata(cpu$dmem_master_wdata),
	    .dmem_master_wstrb(cpu$dmem_master_wstrb),
	    .dmem_master_wlast(cpu$dmem_master_wlast),
	    .dmem_master_wuser(cpu$dmem_master_wuser),
	    .dmem_master_wvalid(cpu$dmem_master_wvalid),
	    .dmem_master_bready(cpu$dmem_master_bready),
	    .dmem_master_arid(cpu$dmem_master_arid),
	    .dmem_master_araddr(cpu$dmem_master_araddr),
	    .dmem_master_arlen(cpu$dmem_master_arlen),
	    .dmem_master_arsize(cpu$dmem_master_arsize),
	    .dmem_master_arburst(cpu$dmem_master_arburst),
	    .dmem_master_arlock(cpu$dmem_master_arlock),
	    .dmem_master_arcache(cpu$dmem_master_arcache),
	    .dmem_master_arprot(cpu$dmem_master_arprot),
	    .dmem_master_arqos(cpu$dmem_master_arqos),
	    .dmem_master_arregion(cpu$dmem_master_arregion),
	    .dmem_master_arvalid(cpu$dmem_master_arvalid),
	    .dmem_master_rready(cpu$dmem_master_rready),
	    .RDY_set_verbosity(),
	    .trace_data_out_get(cpu$trace_data_out_get),
	    .RDY_trace_data_out_get(cpu$RDY_trace_data_out_get),
	    .RDY_hart0_server_run_halt_request_put(cpu$RDY_hart0_server_run_halt_request_put),
	    .hart0_server_run_halt_response_get(cpu$hart0_server_run_halt_response_get),
	    .RDY_hart0_server_run_halt_response_get(cpu$RDY_hart0_server_run_halt_response_get),
	    .RDY_hart0_put_other_req_put(),
	    .RDY_hart0_gpr_mem_server_request_put(cpu$RDY_hart0_gpr_mem_server_request_put),
	    .hart0_gpr_mem_server_response_get(cpu$hart0_gpr_mem_server_response_get),
	    .RDY_hart0_gpr_mem_server_response_get(cpu$RDY_hart0_gpr_mem_server_response_get),
	    .RDY_hart0_csr_mem_server_request_put(cpu$RDY_hart0_csr_mem_server_request_put),
	    .hart0_csr_mem_server_response_get(cpu$hart0_csr_mem_server_response_get),
	    .RDY_hart0_csr_mem_server_response_get(cpu$RDY_hart0_csr_mem_server_response_get));

  // submodule cpu_imem_b_buffer_ff
  FIFO1 #(.width(32'd7), .guarded(32'd0)) cpu_imem_b_buffer_ff(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(cpu_imem_b_buffer_ff$D_IN),
							       .ENQ(cpu_imem_b_buffer_ff$ENQ),
							       .DEQ(cpu_imem_b_buffer_ff$DEQ),
							       .CLR(cpu_imem_b_buffer_ff$CLR),
							       .D_OUT(cpu_imem_b_buffer_ff$D_OUT),
							       .FULL_N(cpu_imem_b_buffer_ff$FULL_N),
							       .EMPTY_N(cpu_imem_b_buffer_ff$EMPTY_N));

  // submodule cpu_imem_b_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) cpu_imem_b_buffer_firstValid(.CLK(CLK),
							.D_IN(cpu_imem_b_buffer_firstValid$D_IN),
							.EN(cpu_imem_b_buffer_firstValid$EN),
							.Q_OUT(cpu_imem_b_buffer_firstValid$Q_OUT));

  // submodule cpu_imem_r_buffer_ff
  FIFO1 #(.width(32'd138), .guarded(32'd0)) cpu_imem_r_buffer_ff(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(cpu_imem_r_buffer_ff$D_IN),
								 .ENQ(cpu_imem_r_buffer_ff$ENQ),
								 .DEQ(cpu_imem_r_buffer_ff$DEQ),
								 .CLR(cpu_imem_r_buffer_ff$CLR),
								 .D_OUT(cpu_imem_r_buffer_ff$D_OUT),
								 .FULL_N(cpu_imem_r_buffer_ff$FULL_N),
								 .EMPTY_N(cpu_imem_r_buffer_ff$EMPTY_N));

  // submodule cpu_imem_r_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) cpu_imem_r_buffer_firstValid(.CLK(CLK),
							.D_IN(cpu_imem_r_buffer_firstValid$D_IN),
							.EN(cpu_imem_r_buffer_firstValid$EN),
							.Q_OUT(cpu_imem_r_buffer_firstValid$Q_OUT));

  // submodule debug_module
  mkDebug_Module debug_module(.CLK(CLK),
			      .RST_N(RST_N),
			      .dmi_read_addr_dm_addr(debug_module$dmi_read_addr_dm_addr),
			      .dmi_write_dm_addr(debug_module$dmi_write_dm_addr),
			      .dmi_write_dm_word(debug_module$dmi_write_dm_word),
			      .hart0_client_run_halt_response_put(debug_module$hart0_client_run_halt_response_put),
			      .hart0_csr_mem_client_response_put(debug_module$hart0_csr_mem_client_response_put),
			      .hart0_gpr_mem_client_response_put(debug_module$hart0_gpr_mem_client_response_put),
			      .hart0_reset_client_response_put(debug_module$hart0_reset_client_response_put),
			      .master_arready(debug_module$master_arready),
			      .master_awready(debug_module$master_awready),
			      .master_bid(debug_module$master_bid),
			      .master_bresp(debug_module$master_bresp),
			      .master_rdata(debug_module$master_rdata),
			      .master_rid(debug_module$master_rid),
			      .master_rlast(debug_module$master_rlast),
			      .master_rresp(debug_module$master_rresp),
			      .master_ruser(debug_module$master_ruser),
			      .master_wready(debug_module$master_wready),
			      .ndm_reset_client_response_put(debug_module$ndm_reset_client_response_put),
			      .EN_dmi_read_addr(debug_module$EN_dmi_read_addr),
			      .EN_dmi_read_data(debug_module$EN_dmi_read_data),
			      .EN_dmi_write(debug_module$EN_dmi_write),
			      .EN_hart0_reset_client_request_get(debug_module$EN_hart0_reset_client_request_get),
			      .EN_hart0_reset_client_response_put(debug_module$EN_hart0_reset_client_response_put),
			      .EN_hart0_client_run_halt_request_get(debug_module$EN_hart0_client_run_halt_request_get),
			      .EN_hart0_client_run_halt_response_put(debug_module$EN_hart0_client_run_halt_response_put),
			      .EN_hart0_get_other_req_get(debug_module$EN_hart0_get_other_req_get),
			      .EN_hart0_gpr_mem_client_request_get(debug_module$EN_hart0_gpr_mem_client_request_get),
			      .EN_hart0_gpr_mem_client_response_put(debug_module$EN_hart0_gpr_mem_client_response_put),
			      .EN_hart0_csr_mem_client_request_get(debug_module$EN_hart0_csr_mem_client_request_get),
			      .EN_hart0_csr_mem_client_response_put(debug_module$EN_hart0_csr_mem_client_response_put),
			      .EN_ndm_reset_client_request_get(debug_module$EN_ndm_reset_client_request_get),
			      .EN_ndm_reset_client_response_put(debug_module$EN_ndm_reset_client_response_put),
			      .master_bvalid(debug_module$master_bvalid),
			      .master_rvalid(debug_module$master_rvalid),
			      .RDY_dmi_read_addr(debug_module$RDY_dmi_read_addr),
			      .dmi_read_data(debug_module$dmi_read_data),
			      .RDY_dmi_read_data(debug_module$RDY_dmi_read_data),
			      .RDY_dmi_write(debug_module$RDY_dmi_write),
			      .hart0_reset_client_request_get(debug_module$hart0_reset_client_request_get),
			      .RDY_hart0_reset_client_request_get(debug_module$RDY_hart0_reset_client_request_get),
			      .RDY_hart0_reset_client_response_put(debug_module$RDY_hart0_reset_client_response_put),
			      .hart0_client_run_halt_request_get(debug_module$hart0_client_run_halt_request_get),
			      .RDY_hart0_client_run_halt_request_get(debug_module$RDY_hart0_client_run_halt_request_get),
			      .RDY_hart0_client_run_halt_response_put(debug_module$RDY_hart0_client_run_halt_response_put),
			      .hart0_get_other_req_get(debug_module$hart0_get_other_req_get),
			      .RDY_hart0_get_other_req_get(debug_module$RDY_hart0_get_other_req_get),
			      .hart0_gpr_mem_client_request_get(debug_module$hart0_gpr_mem_client_request_get),
			      .RDY_hart0_gpr_mem_client_request_get(debug_module$RDY_hart0_gpr_mem_client_request_get),
			      .RDY_hart0_gpr_mem_client_response_put(debug_module$RDY_hart0_gpr_mem_client_response_put),
			      .hart0_csr_mem_client_request_get(debug_module$hart0_csr_mem_client_request_get),
			      .RDY_hart0_csr_mem_client_request_get(debug_module$RDY_hart0_csr_mem_client_request_get),
			      .RDY_hart0_csr_mem_client_response_put(debug_module$RDY_hart0_csr_mem_client_response_put),
			      .ndm_reset_client_request_get(debug_module$ndm_reset_client_request_get),
			      .RDY_ndm_reset_client_request_get(debug_module$RDY_ndm_reset_client_request_get),
			      .RDY_ndm_reset_client_response_put(debug_module$RDY_ndm_reset_client_response_put),
			      .master_awid(debug_module$master_awid),
			      .master_awaddr(debug_module$master_awaddr),
			      .master_awlen(debug_module$master_awlen),
			      .master_awsize(debug_module$master_awsize),
			      .master_awburst(debug_module$master_awburst),
			      .master_awlock(debug_module$master_awlock),
			      .master_awcache(debug_module$master_awcache),
			      .master_awprot(debug_module$master_awprot),
			      .master_awqos(debug_module$master_awqos),
			      .master_awregion(debug_module$master_awregion),
			      .master_awvalid(debug_module$master_awvalid),
			      .master_wdata(debug_module$master_wdata),
			      .master_wstrb(debug_module$master_wstrb),
			      .master_wlast(debug_module$master_wlast),
			      .master_wuser(debug_module$master_wuser),
			      .master_wvalid(debug_module$master_wvalid),
			      .master_bready(debug_module$master_bready),
			      .master_arid(debug_module$master_arid),
			      .master_araddr(debug_module$master_araddr),
			      .master_arlen(debug_module$master_arlen),
			      .master_arsize(debug_module$master_arsize),
			      .master_arburst(debug_module$master_arburst),
			      .master_arlock(debug_module$master_arlock),
			      .master_arcache(debug_module$master_arcache),
			      .master_arprot(debug_module$master_arprot),
			      .master_arqos(debug_module$master_arqos),
			      .master_arregion(debug_module$master_arregion),
			      .master_arvalid(debug_module$master_arvalid),
			      .master_rready(debug_module$master_rready));

  // submodule deburst_debug_countWriteRspFF
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) deburst_debug_countWriteRspFF(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(deburst_debug_countWriteRspFF$D_IN),
							     .ENQ(deburst_debug_countWriteRspFF$ENQ),
							     .DEQ(deburst_debug_countWriteRspFF$DEQ),
							     .CLR(deburst_debug_countWriteRspFF$CLR),
							     .D_OUT(deburst_debug_countWriteRspFF$D_OUT),
							     .FULL_N(deburst_debug_countWriteRspFF$FULL_N),
							     .EMPTY_N(deburst_debug_countWriteRspFF$EMPTY_N));

  // submodule deburst_debug_inShim_arff
  FIFO2 #(.width(32'd97),
	  .guarded(32'd1)) deburst_debug_inShim_arff(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(deburst_debug_inShim_arff$D_IN),
						     .ENQ(deburst_debug_inShim_arff$ENQ),
						     .DEQ(deburst_debug_inShim_arff$DEQ),
						     .CLR(deburst_debug_inShim_arff$CLR),
						     .D_OUT(deburst_debug_inShim_arff$D_OUT),
						     .FULL_N(),
						     .EMPTY_N(deburst_debug_inShim_arff$EMPTY_N));

  // submodule deburst_debug_inShim_awff
  FIFO2 #(.width(32'd97),
	  .guarded(32'd1)) deburst_debug_inShim_awff(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(deburst_debug_inShim_awff$D_IN),
						     .ENQ(deburst_debug_inShim_awff$ENQ),
						     .DEQ(deburst_debug_inShim_awff$DEQ),
						     .CLR(deburst_debug_inShim_awff$CLR),
						     .D_OUT(deburst_debug_inShim_awff$D_OUT),
						     .FULL_N(),
						     .EMPTY_N(deburst_debug_inShim_awff$EMPTY_N));

  // submodule deburst_debug_inShim_bff
  FIFO2 #(.width(32'd6),
	  .guarded(32'd1)) deburst_debug_inShim_bff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(deburst_debug_inShim_bff$D_IN),
						    .ENQ(deburst_debug_inShim_bff$ENQ),
						    .DEQ(deburst_debug_inShim_bff$DEQ),
						    .CLR(deburst_debug_inShim_bff$CLR),
						    .D_OUT(),
						    .FULL_N(deburst_debug_inShim_bff$FULL_N),
						    .EMPTY_N());

  // submodule deburst_debug_inShim_rff
  FIFO2 #(.width(32'd73),
	  .guarded(32'd1)) deburst_debug_inShim_rff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(deburst_debug_inShim_rff$D_IN),
						    .ENQ(deburst_debug_inShim_rff$ENQ),
						    .DEQ(deburst_debug_inShim_rff$DEQ),
						    .CLR(deburst_debug_inShim_rff$CLR),
						    .D_OUT(),
						    .FULL_N(deburst_debug_inShim_rff$FULL_N),
						    .EMPTY_N());

  // submodule deburst_debug_inShim_wff
  FIFO2 #(.width(32'd75),
	  .guarded(32'd1)) deburst_debug_inShim_wff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(deburst_debug_inShim_wff$D_IN),
						    .ENQ(deburst_debug_inShim_wff$ENQ),
						    .DEQ(deburst_debug_inShim_wff$DEQ),
						    .CLR(deburst_debug_inShim_wff$CLR),
						    .D_OUT(deburst_debug_inShim_wff$D_OUT),
						    .FULL_N(),
						    .EMPTY_N(deburst_debug_inShim_wff$EMPTY_N));

  // submodule deburst_debug_lastReadRspFF
  SizedFIFO #(.p1width(32'd1),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) deburst_debug_lastReadRspFF(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(deburst_debug_lastReadRspFF$D_IN),
							   .ENQ(deburst_debug_lastReadRspFF$ENQ),
							   .DEQ(deburst_debug_lastReadRspFF$DEQ),
							   .CLR(deburst_debug_lastReadRspFF$CLR),
							   .D_OUT(deburst_debug_lastReadRspFF$D_OUT),
							   .FULL_N(deburst_debug_lastReadRspFF$FULL_N),
							   .EMPTY_N(deburst_debug_lastReadRspFF$EMPTY_N));

  // submodule deburst_debug_outShim_arff
  FIFO2 #(.width(32'd97),
	  .guarded(32'd1)) deburst_debug_outShim_arff(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(deburst_debug_outShim_arff$D_IN),
						      .ENQ(deburst_debug_outShim_arff$ENQ),
						      .DEQ(deburst_debug_outShim_arff$DEQ),
						      .CLR(deburst_debug_outShim_arff$CLR),
						      .D_OUT(),
						      .FULL_N(deburst_debug_outShim_arff$FULL_N),
						      .EMPTY_N());

  // submodule deburst_debug_outShim_awff
  FIFO2 #(.width(32'd97),
	  .guarded(32'd1)) deburst_debug_outShim_awff(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(deburst_debug_outShim_awff$D_IN),
						      .ENQ(deburst_debug_outShim_awff$ENQ),
						      .DEQ(deburst_debug_outShim_awff$DEQ),
						      .CLR(deburst_debug_outShim_awff$CLR),
						      .D_OUT(),
						      .FULL_N(deburst_debug_outShim_awff$FULL_N),
						      .EMPTY_N());

  // submodule deburst_debug_outShim_bff
  FIFO2 #(.width(32'd6),
	  .guarded(32'd1)) deburst_debug_outShim_bff(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(deburst_debug_outShim_bff$D_IN),
						     .ENQ(deburst_debug_outShim_bff$ENQ),
						     .DEQ(deburst_debug_outShim_bff$DEQ),
						     .CLR(deburst_debug_outShim_bff$CLR),
						     .D_OUT(deburst_debug_outShim_bff$D_OUT),
						     .FULL_N(),
						     .EMPTY_N(deburst_debug_outShim_bff$EMPTY_N));

  // submodule deburst_debug_outShim_rff
  FIFO2 #(.width(32'd73),
	  .guarded(32'd1)) deburst_debug_outShim_rff(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(deburst_debug_outShim_rff$D_IN),
						     .ENQ(deburst_debug_outShim_rff$ENQ),
						     .DEQ(deburst_debug_outShim_rff$DEQ),
						     .CLR(deburst_debug_outShim_rff$CLR),
						     .D_OUT(deburst_debug_outShim_rff$D_OUT),
						     .FULL_N(),
						     .EMPTY_N(deburst_debug_outShim_rff$EMPTY_N));

  // submodule deburst_debug_outShim_wff
  FIFO2 #(.width(32'd75),
	  .guarded(32'd1)) deburst_debug_outShim_wff(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(deburst_debug_outShim_wff$D_IN),
						     .ENQ(deburst_debug_outShim_wff$ENQ),
						     .DEQ(deburst_debug_outShim_wff$DEQ),
						     .CLR(deburst_debug_outShim_wff$CLR),
						     .D_OUT(),
						     .FULL_N(deburst_debug_outShim_wff$FULL_N),
						     .EMPTY_N());

  // submodule deburst_dm_countWriteRspFF
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) deburst_dm_countWriteRspFF(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(deburst_dm_countWriteRspFF$D_IN),
							  .ENQ(deburst_dm_countWriteRspFF$ENQ),
							  .DEQ(deburst_dm_countWriteRspFF$DEQ),
							  .CLR(deburst_dm_countWriteRspFF$CLR),
							  .D_OUT(deburst_dm_countWriteRspFF$D_OUT),
							  .FULL_N(deburst_dm_countWriteRspFF$FULL_N),
							  .EMPTY_N(deburst_dm_countWriteRspFF$EMPTY_N));

  // submodule deburst_dm_inShim_arff
  FIFO2 #(.width(32'd97), .guarded(32'd1)) deburst_dm_inShim_arff(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(deburst_dm_inShim_arff$D_IN),
								  .ENQ(deburst_dm_inShim_arff$ENQ),
								  .DEQ(deburst_dm_inShim_arff$DEQ),
								  .CLR(deburst_dm_inShim_arff$CLR),
								  .D_OUT(deburst_dm_inShim_arff$D_OUT),
								  .FULL_N(deburst_dm_inShim_arff$FULL_N),
								  .EMPTY_N(deburst_dm_inShim_arff$EMPTY_N));

  // submodule deburst_dm_inShim_awff
  FIFO2 #(.width(32'd97), .guarded(32'd1)) deburst_dm_inShim_awff(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(deburst_dm_inShim_awff$D_IN),
								  .ENQ(deburst_dm_inShim_awff$ENQ),
								  .DEQ(deburst_dm_inShim_awff$DEQ),
								  .CLR(deburst_dm_inShim_awff$CLR),
								  .D_OUT(deburst_dm_inShim_awff$D_OUT),
								  .FULL_N(deburst_dm_inShim_awff$FULL_N),
								  .EMPTY_N(deburst_dm_inShim_awff$EMPTY_N));

  // submodule deburst_dm_inShim_bff
  FIFO2 #(.width(32'd6), .guarded(32'd1)) deburst_dm_inShim_bff(.RST(RST_N),
								.CLK(CLK),
								.D_IN(deburst_dm_inShim_bff$D_IN),
								.ENQ(deburst_dm_inShim_bff$ENQ),
								.DEQ(deburst_dm_inShim_bff$DEQ),
								.CLR(deburst_dm_inShim_bff$CLR),
								.D_OUT(deburst_dm_inShim_bff$D_OUT),
								.FULL_N(deburst_dm_inShim_bff$FULL_N),
								.EMPTY_N(deburst_dm_inShim_bff$EMPTY_N));

  // submodule deburst_dm_inShim_rff
  FIFO2 #(.width(32'd73), .guarded(32'd1)) deburst_dm_inShim_rff(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(deburst_dm_inShim_rff$D_IN),
								 .ENQ(deburst_dm_inShim_rff$ENQ),
								 .DEQ(deburst_dm_inShim_rff$DEQ),
								 .CLR(deburst_dm_inShim_rff$CLR),
								 .D_OUT(deburst_dm_inShim_rff$D_OUT),
								 .FULL_N(deburst_dm_inShim_rff$FULL_N),
								 .EMPTY_N(deburst_dm_inShim_rff$EMPTY_N));

  // submodule deburst_dm_inShim_wff
  FIFO2 #(.width(32'd75), .guarded(32'd1)) deburst_dm_inShim_wff(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(deburst_dm_inShim_wff$D_IN),
								 .ENQ(deburst_dm_inShim_wff$ENQ),
								 .DEQ(deburst_dm_inShim_wff$DEQ),
								 .CLR(deburst_dm_inShim_wff$CLR),
								 .D_OUT(deburst_dm_inShim_wff$D_OUT),
								 .FULL_N(deburst_dm_inShim_wff$FULL_N),
								 .EMPTY_N(deburst_dm_inShim_wff$EMPTY_N));

  // submodule deburst_dm_lastReadRspFF
  SizedFIFO #(.p1width(32'd1),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) deburst_dm_lastReadRspFF(.RST(RST_N),
							.CLK(CLK),
							.D_IN(deburst_dm_lastReadRspFF$D_IN),
							.ENQ(deburst_dm_lastReadRspFF$ENQ),
							.DEQ(deburst_dm_lastReadRspFF$DEQ),
							.CLR(deburst_dm_lastReadRspFF$CLR),
							.D_OUT(deburst_dm_lastReadRspFF$D_OUT),
							.FULL_N(deburst_dm_lastReadRspFF$FULL_N),
							.EMPTY_N(deburst_dm_lastReadRspFF$EMPTY_N));

  // submodule deburst_dm_outShim_arff
  FIFO2 #(.width(32'd97),
	  .guarded(32'd1)) deburst_dm_outShim_arff(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(deburst_dm_outShim_arff$D_IN),
						   .ENQ(deburst_dm_outShim_arff$ENQ),
						   .DEQ(deburst_dm_outShim_arff$DEQ),
						   .CLR(deburst_dm_outShim_arff$CLR),
						   .D_OUT(deburst_dm_outShim_arff$D_OUT),
						   .FULL_N(deburst_dm_outShim_arff$FULL_N),
						   .EMPTY_N(deburst_dm_outShim_arff$EMPTY_N));

  // submodule deburst_dm_outShim_awff
  FIFO2 #(.width(32'd97),
	  .guarded(32'd1)) deburst_dm_outShim_awff(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(deburst_dm_outShim_awff$D_IN),
						   .ENQ(deburst_dm_outShim_awff$ENQ),
						   .DEQ(deburst_dm_outShim_awff$DEQ),
						   .CLR(deburst_dm_outShim_awff$CLR),
						   .D_OUT(deburst_dm_outShim_awff$D_OUT),
						   .FULL_N(deburst_dm_outShim_awff$FULL_N),
						   .EMPTY_N(deburst_dm_outShim_awff$EMPTY_N));

  // submodule deburst_dm_outShim_bff
  FIFO2 #(.width(32'd6), .guarded(32'd1)) deburst_dm_outShim_bff(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(deburst_dm_outShim_bff$D_IN),
								 .ENQ(deburst_dm_outShim_bff$ENQ),
								 .DEQ(deburst_dm_outShim_bff$DEQ),
								 .CLR(deburst_dm_outShim_bff$CLR),
								 .D_OUT(deburst_dm_outShim_bff$D_OUT),
								 .FULL_N(deburst_dm_outShim_bff$FULL_N),
								 .EMPTY_N(deburst_dm_outShim_bff$EMPTY_N));

  // submodule deburst_dm_outShim_rff
  FIFO2 #(.width(32'd73), .guarded(32'd1)) deburst_dm_outShim_rff(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(deburst_dm_outShim_rff$D_IN),
								  .ENQ(deburst_dm_outShim_rff$ENQ),
								  .DEQ(deburst_dm_outShim_rff$DEQ),
								  .CLR(deburst_dm_outShim_rff$CLR),
								  .D_OUT(deburst_dm_outShim_rff$D_OUT),
								  .FULL_N(deburst_dm_outShim_rff$FULL_N),
								  .EMPTY_N(deburst_dm_outShim_rff$EMPTY_N));

  // submodule deburst_dm_outShim_wff
  FIFO2 #(.width(32'd75), .guarded(32'd1)) deburst_dm_outShim_wff(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(deburst_dm_outShim_wff$D_IN),
								  .ENQ(deburst_dm_outShim_wff$ENQ),
								  .DEQ(deburst_dm_outShim_wff$DEQ),
								  .CLR(deburst_dm_outShim_wff$CLR),
								  .D_OUT(deburst_dm_outShim_wff$D_OUT),
								  .FULL_N(deburst_dm_outShim_wff$FULL_N),
								  .EMPTY_N(deburst_dm_outShim_wff$EMPTY_N));

  // submodule dm_csr_tap
  mkDM_CSR_Tap dm_csr_tap(.CLK(CLK),
			  .RST_N(RST_N),
			  .client_response_put(dm_csr_tap$client_response_put),
			  .server_request_put(dm_csr_tap$server_request_put),
			  .EN_client_request_get(dm_csr_tap$EN_client_request_get),
			  .EN_client_response_put(dm_csr_tap$EN_client_response_put),
			  .EN_server_request_put(dm_csr_tap$EN_server_request_put),
			  .EN_server_response_get(dm_csr_tap$EN_server_response_get),
			  .EN_trace_data_out_get(dm_csr_tap$EN_trace_data_out_get),
			  .client_request_get(dm_csr_tap$client_request_get),
			  .RDY_client_request_get(dm_csr_tap$RDY_client_request_get),
			  .RDY_client_response_put(dm_csr_tap$RDY_client_response_put),
			  .RDY_server_request_put(dm_csr_tap$RDY_server_request_put),
			  .server_response_get(dm_csr_tap$server_response_get),
			  .RDY_server_response_get(dm_csr_tap$RDY_server_response_get),
			  .trace_data_out_get(dm_csr_tap$trace_data_out_get),
			  .RDY_trace_data_out_get(dm_csr_tap$RDY_trace_data_out_get));

  // submodule dm_gpr_tap_ifc
  mkDM_GPR_Tap dm_gpr_tap_ifc(.CLK(CLK),
			      .RST_N(RST_N),
			      .client_response_put(dm_gpr_tap_ifc$client_response_put),
			      .server_request_put(dm_gpr_tap_ifc$server_request_put),
			      .EN_client_request_get(dm_gpr_tap_ifc$EN_client_request_get),
			      .EN_client_response_put(dm_gpr_tap_ifc$EN_client_response_put),
			      .EN_server_request_put(dm_gpr_tap_ifc$EN_server_request_put),
			      .EN_server_response_get(dm_gpr_tap_ifc$EN_server_response_get),
			      .EN_trace_data_out_get(dm_gpr_tap_ifc$EN_trace_data_out_get),
			      .client_request_get(dm_gpr_tap_ifc$client_request_get),
			      .RDY_client_request_get(dm_gpr_tap_ifc$RDY_client_request_get),
			      .RDY_client_response_put(dm_gpr_tap_ifc$RDY_client_response_put),
			      .RDY_server_request_put(dm_gpr_tap_ifc$RDY_server_request_put),
			      .server_response_get(dm_gpr_tap_ifc$server_response_get),
			      .RDY_server_response_get(dm_gpr_tap_ifc$RDY_server_response_get),
			      .trace_data_out_get(dm_gpr_tap_ifc$trace_data_out_get),
			      .RDY_trace_data_out_get(dm_gpr_tap_ifc$RDY_trace_data_out_get));

  // submodule dm_master_nonsynth_takeUpperR
  SizedFIFO #(.p1width(32'd1),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(32'd1)) dm_master_nonsynth_takeUpperR(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(dm_master_nonsynth_takeUpperR$D_IN),
							     .ENQ(dm_master_nonsynth_takeUpperR$ENQ),
							     .DEQ(dm_master_nonsynth_takeUpperR$DEQ),
							     .CLR(dm_master_nonsynth_takeUpperR$CLR),
							     .D_OUT(dm_master_nonsynth_takeUpperR$D_OUT),
							     .FULL_N(dm_master_nonsynth_takeUpperR$FULL_N),
							     .EMPTY_N(dm_master_nonsynth_takeUpperR$EMPTY_N));

  // submodule dm_master_nonsynth_takeUpperW
  SizedFIFO #(.p1width(32'd1),
	      .p2depth(32'd8),
	      .p3cntr_width(32'd3),
	      .guarded(32'd1)) dm_master_nonsynth_takeUpperW(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(dm_master_nonsynth_takeUpperW$D_IN),
							     .ENQ(dm_master_nonsynth_takeUpperW$ENQ),
							     .DEQ(dm_master_nonsynth_takeUpperW$DEQ),
							     .CLR(dm_master_nonsynth_takeUpperW$CLR),
							     .D_OUT(dm_master_nonsynth_takeUpperW$D_OUT),
							     .FULL_N(dm_master_nonsynth_takeUpperW$FULL_N),
							     .EMPTY_N(dm_master_nonsynth_takeUpperW$EMPTY_N));

  // submodule dm_mem_tap
  mkDM_Mem_Tap dm_mem_tap(.CLK(CLK),
			  .RST_N(RST_N),
			  .master_arready(dm_mem_tap$master_arready),
			  .master_awready(dm_mem_tap$master_awready),
			  .master_bid(dm_mem_tap$master_bid),
			  .master_bresp(dm_mem_tap$master_bresp),
			  .master_rdata(dm_mem_tap$master_rdata),
			  .master_rid(dm_mem_tap$master_rid),
			  .master_rlast(dm_mem_tap$master_rlast),
			  .master_rresp(dm_mem_tap$master_rresp),
			  .master_ruser(dm_mem_tap$master_ruser),
			  .master_wready(dm_mem_tap$master_wready),
			  .slave_araddr(dm_mem_tap$slave_araddr),
			  .slave_arburst(dm_mem_tap$slave_arburst),
			  .slave_arcache(dm_mem_tap$slave_arcache),
			  .slave_arid(dm_mem_tap$slave_arid),
			  .slave_arlen(dm_mem_tap$slave_arlen),
			  .slave_arlock(dm_mem_tap$slave_arlock),
			  .slave_arprot(dm_mem_tap$slave_arprot),
			  .slave_arqos(dm_mem_tap$slave_arqos),
			  .slave_arregion(dm_mem_tap$slave_arregion),
			  .slave_arsize(dm_mem_tap$slave_arsize),
			  .slave_awaddr(dm_mem_tap$slave_awaddr),
			  .slave_awburst(dm_mem_tap$slave_awburst),
			  .slave_awcache(dm_mem_tap$slave_awcache),
			  .slave_awid(dm_mem_tap$slave_awid),
			  .slave_awlen(dm_mem_tap$slave_awlen),
			  .slave_awlock(dm_mem_tap$slave_awlock),
			  .slave_awprot(dm_mem_tap$slave_awprot),
			  .slave_awqos(dm_mem_tap$slave_awqos),
			  .slave_awregion(dm_mem_tap$slave_awregion),
			  .slave_awsize(dm_mem_tap$slave_awsize),
			  .slave_bready(dm_mem_tap$slave_bready),
			  .slave_rready(dm_mem_tap$slave_rready),
			  .slave_wdata(dm_mem_tap$slave_wdata),
			  .slave_wlast(dm_mem_tap$slave_wlast),
			  .slave_wstrb(dm_mem_tap$slave_wstrb),
			  .slave_wuser(dm_mem_tap$slave_wuser),
			  .slave_awvalid(dm_mem_tap$slave_awvalid),
			  .slave_wvalid(dm_mem_tap$slave_wvalid),
			  .slave_arvalid(dm_mem_tap$slave_arvalid),
			  .master_bvalid(dm_mem_tap$master_bvalid),
			  .master_rvalid(dm_mem_tap$master_rvalid),
			  .EN_trace_data_out_get(dm_mem_tap$EN_trace_data_out_get),
			  .slave_awready(dm_mem_tap$slave_awready),
			  .slave_wready(dm_mem_tap$slave_wready),
			  .slave_bid(dm_mem_tap$slave_bid),
			  .slave_bresp(dm_mem_tap$slave_bresp),
			  .slave_bvalid(dm_mem_tap$slave_bvalid),
			  .slave_arready(dm_mem_tap$slave_arready),
			  .slave_rid(dm_mem_tap$slave_rid),
			  .slave_rdata(dm_mem_tap$slave_rdata),
			  .slave_rresp(dm_mem_tap$slave_rresp),
			  .slave_rlast(dm_mem_tap$slave_rlast),
			  .slave_ruser(dm_mem_tap$slave_ruser),
			  .slave_rvalid(dm_mem_tap$slave_rvalid),
			  .master_awid(dm_mem_tap$master_awid),
			  .master_awaddr(dm_mem_tap$master_awaddr),
			  .master_awlen(dm_mem_tap$master_awlen),
			  .master_awsize(dm_mem_tap$master_awsize),
			  .master_awburst(dm_mem_tap$master_awburst),
			  .master_awlock(dm_mem_tap$master_awlock),
			  .master_awcache(dm_mem_tap$master_awcache),
			  .master_awprot(dm_mem_tap$master_awprot),
			  .master_awqos(dm_mem_tap$master_awqos),
			  .master_awregion(dm_mem_tap$master_awregion),
			  .master_awvalid(dm_mem_tap$master_awvalid),
			  .master_wdata(dm_mem_tap$master_wdata),
			  .master_wstrb(dm_mem_tap$master_wstrb),
			  .master_wlast(dm_mem_tap$master_wlast),
			  .master_wuser(dm_mem_tap$master_wuser),
			  .master_wvalid(dm_mem_tap$master_wvalid),
			  .master_bready(dm_mem_tap$master_bready),
			  .master_arid(dm_mem_tap$master_arid),
			  .master_araddr(dm_mem_tap$master_araddr),
			  .master_arlen(dm_mem_tap$master_arlen),
			  .master_arsize(dm_mem_tap$master_arsize),
			  .master_arburst(dm_mem_tap$master_arburst),
			  .master_arlock(dm_mem_tap$master_arlock),
			  .master_arcache(dm_mem_tap$master_arcache),
			  .master_arprot(dm_mem_tap$master_arprot),
			  .master_arqos(dm_mem_tap$master_arqos),
			  .master_arregion(dm_mem_tap$master_arregion),
			  .master_arvalid(dm_mem_tap$master_arvalid),
			  .master_rready(dm_mem_tap$master_rready),
			  .trace_data_out_get(dm_mem_tap$trace_data_out_get),
			  .RDY_trace_data_out_get(dm_mem_tap$RDY_trace_data_out_get));

  // submodule f_reset_reqs
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_reqs(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_reset_reqs$D_IN),
						       .ENQ(f_reset_reqs$ENQ),
						       .DEQ(f_reset_reqs$DEQ),
						       .CLR(f_reset_reqs$CLR),
						       .D_OUT(f_reset_reqs$D_OUT),
						       .FULL_N(f_reset_reqs$FULL_N),
						       .EMPTY_N(f_reset_reqs$EMPTY_N));

  // submodule f_reset_requestor
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_requestor(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(f_reset_requestor$D_IN),
							    .ENQ(f_reset_requestor$ENQ),
							    .DEQ(f_reset_requestor$DEQ),
							    .CLR(f_reset_requestor$CLR),
							    .D_OUT(f_reset_requestor$D_OUT),
							    .FULL_N(f_reset_requestor$FULL_N),
							    .EMPTY_N(f_reset_requestor$EMPTY_N));

  // submodule f_reset_rsps
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_rsps(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_reset_rsps$D_IN),
						       .ENQ(f_reset_rsps$ENQ),
						       .DEQ(f_reset_rsps$DEQ),
						       .CLR(f_reset_rsps$CLR),
						       .D_OUT(f_reset_rsps$D_OUT),
						       .FULL_N(f_reset_rsps$FULL_N),
						       .EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule f_trace_data_merged
  FIFO2 #(.width(32'd234), .guarded(32'd1)) f_trace_data_merged(.RST(RST_N),
								.CLK(CLK),
								.D_IN(f_trace_data_merged$D_IN),
								.ENQ(f_trace_data_merged$ENQ),
								.DEQ(f_trace_data_merged$DEQ),
								.CLR(f_trace_data_merged$CLR),
								.D_OUT(f_trace_data_merged$D_OUT),
								.FULL_N(f_trace_data_merged$FULL_N),
								.EMPTY_N(f_trace_data_merged$EMPTY_N));

  // submodule ifcs_0_1_innerReq
  FIFO2 #(.width(32'd98), .guarded(32'd1)) ifcs_0_1_innerReq(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ifcs_0_1_innerReq$D_IN),
							     .ENQ(ifcs_0_1_innerReq$ENQ),
							     .DEQ(ifcs_0_1_innerReq$DEQ),
							     .CLR(ifcs_0_1_innerReq$CLR),
							     .D_OUT(ifcs_0_1_innerReq$D_OUT),
							     .FULL_N(ifcs_0_1_innerReq$FULL_N),
							     .EMPTY_N(ifcs_0_1_innerReq$EMPTY_N));

  // submodule ifcs_0_1_innerRoute
  FIFO2 #(.width(32'd3), .guarded(32'd1)) ifcs_0_1_innerRoute(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(ifcs_0_1_innerRoute$D_IN),
							      .ENQ(ifcs_0_1_innerRoute$ENQ),
							      .DEQ(ifcs_0_1_innerRoute$DEQ),
							      .CLR(ifcs_0_1_innerRoute$CLR),
							      .D_OUT(ifcs_0_1_innerRoute$D_OUT),
							      .FULL_N(ifcs_0_1_innerRoute$FULL_N),
							      .EMPTY_N(ifcs_0_1_innerRoute$EMPTY_N));

  // submodule ifcs_0_1_noRouteRsp
  FIFO2 #(.width(32'd137), .guarded(32'd1)) ifcs_0_1_noRouteRsp(.RST(RST_N),
								.CLK(CLK),
								.D_IN(ifcs_0_1_noRouteRsp$D_IN),
								.ENQ(ifcs_0_1_noRouteRsp$ENQ),
								.DEQ(ifcs_0_1_noRouteRsp$DEQ),
								.CLR(ifcs_0_1_noRouteRsp$CLR),
								.D_OUT(ifcs_0_1_noRouteRsp$D_OUT),
								.FULL_N(ifcs_0_1_noRouteRsp$FULL_N),
								.EMPTY_N(ifcs_0_1_noRouteRsp$EMPTY_N));

  // submodule ifcs_0_1_routeBack
  FIFO2 #(.width(32'd2), .guarded(32'd1)) ifcs_0_1_routeBack(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ifcs_0_1_routeBack$D_IN),
							     .ENQ(ifcs_0_1_routeBack$ENQ),
							     .DEQ(ifcs_0_1_routeBack$DEQ),
							     .CLR(ifcs_0_1_routeBack$CLR),
							     .D_OUT(ifcs_0_1_routeBack$D_OUT),
							     .FULL_N(ifcs_0_1_routeBack$FULL_N),
							     .EMPTY_N(ifcs_0_1_routeBack$EMPTY_N));

  // submodule ifcs_0_1_rspBack
  FIFO2 #(.width(32'd137), .guarded(32'd1)) ifcs_0_1_rspBack(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ifcs_0_1_rspBack$D_IN),
							     .ENQ(ifcs_0_1_rspBack$ENQ),
							     .DEQ(ifcs_0_1_rspBack$DEQ),
							     .CLR(ifcs_0_1_rspBack$CLR),
							     .D_OUT(ifcs_0_1_rspBack$D_OUT),
							     .FULL_N(ifcs_0_1_rspBack$FULL_N),
							     .EMPTY_N(ifcs_0_1_rspBack$EMPTY_N));

  // submodule ifcs_0_innerReq
  FIFO2 #(.width(32'd246), .guarded(32'd1)) ifcs_0_innerReq(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(ifcs_0_innerReq$D_IN),
							    .ENQ(ifcs_0_innerReq$ENQ),
							    .DEQ(ifcs_0_innerReq$DEQ),
							    .CLR(ifcs_0_innerReq$CLR),
							    .D_OUT(ifcs_0_innerReq$D_OUT),
							    .FULL_N(ifcs_0_innerReq$FULL_N),
							    .EMPTY_N(ifcs_0_innerReq$EMPTY_N));

  // submodule ifcs_0_innerRoute
  FIFO2 #(.width(32'd3), .guarded(32'd1)) ifcs_0_innerRoute(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(ifcs_0_innerRoute$D_IN),
							    .ENQ(ifcs_0_innerRoute$ENQ),
							    .DEQ(ifcs_0_innerRoute$DEQ),
							    .CLR(ifcs_0_innerRoute$CLR),
							    .D_OUT(ifcs_0_innerRoute$D_OUT),
							    .FULL_N(ifcs_0_innerRoute$FULL_N),
							    .EMPTY_N(ifcs_0_innerRoute$EMPTY_N));

  // submodule ifcs_0_noRouteRsp
  FIFO2 #(.width(32'd6), .guarded(32'd1)) ifcs_0_noRouteRsp(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(ifcs_0_noRouteRsp$D_IN),
							    .ENQ(ifcs_0_noRouteRsp$ENQ),
							    .DEQ(ifcs_0_noRouteRsp$DEQ),
							    .CLR(ifcs_0_noRouteRsp$CLR),
							    .D_OUT(ifcs_0_noRouteRsp$D_OUT),
							    .FULL_N(ifcs_0_noRouteRsp$FULL_N),
							    .EMPTY_N(ifcs_0_noRouteRsp$EMPTY_N));

  // submodule ifcs_0_routeBack
  FIFO2 #(.width(32'd2), .guarded(32'd1)) ifcs_0_routeBack(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(ifcs_0_routeBack$D_IN),
							   .ENQ(ifcs_0_routeBack$ENQ),
							   .DEQ(ifcs_0_routeBack$DEQ),
							   .CLR(ifcs_0_routeBack$CLR),
							   .D_OUT(ifcs_0_routeBack$D_OUT),
							   .FULL_N(ifcs_0_routeBack$FULL_N),
							   .EMPTY_N(ifcs_0_routeBack$EMPTY_N));

  // submodule ifcs_0_rspBack
  FIFO2 #(.width(32'd6), .guarded(32'd1)) ifcs_0_rspBack(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(ifcs_0_rspBack$D_IN),
							 .ENQ(ifcs_0_rspBack$ENQ),
							 .DEQ(ifcs_0_rspBack$DEQ),
							 .CLR(ifcs_0_rspBack$CLR),
							 .D_OUT(ifcs_0_rspBack$D_OUT),
							 .FULL_N(ifcs_0_rspBack$FULL_N),
							 .EMPTY_N(ifcs_0_rspBack$EMPTY_N));

  // submodule ifcs_1_1_innerReq
  FIFO2 #(.width(32'd98), .guarded(32'd1)) ifcs_1_1_innerReq(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ifcs_1_1_innerReq$D_IN),
							     .ENQ(ifcs_1_1_innerReq$ENQ),
							     .DEQ(ifcs_1_1_innerReq$DEQ),
							     .CLR(ifcs_1_1_innerReq$CLR),
							     .D_OUT(ifcs_1_1_innerReq$D_OUT),
							     .FULL_N(ifcs_1_1_innerReq$FULL_N),
							     .EMPTY_N(ifcs_1_1_innerReq$EMPTY_N));

  // submodule ifcs_1_1_innerRoute
  FIFO2 #(.width(32'd3), .guarded(32'd1)) ifcs_1_1_innerRoute(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(ifcs_1_1_innerRoute$D_IN),
							      .ENQ(ifcs_1_1_innerRoute$ENQ),
							      .DEQ(ifcs_1_1_innerRoute$DEQ),
							      .CLR(ifcs_1_1_innerRoute$CLR),
							      .D_OUT(ifcs_1_1_innerRoute$D_OUT),
							      .FULL_N(ifcs_1_1_innerRoute$FULL_N),
							      .EMPTY_N(ifcs_1_1_innerRoute$EMPTY_N));

  // submodule ifcs_1_1_noRouteRsp
  FIFO2 #(.width(32'd137), .guarded(32'd1)) ifcs_1_1_noRouteRsp(.RST(RST_N),
								.CLK(CLK),
								.D_IN(ifcs_1_1_noRouteRsp$D_IN),
								.ENQ(ifcs_1_1_noRouteRsp$ENQ),
								.DEQ(ifcs_1_1_noRouteRsp$DEQ),
								.CLR(ifcs_1_1_noRouteRsp$CLR),
								.D_OUT(ifcs_1_1_noRouteRsp$D_OUT),
								.FULL_N(ifcs_1_1_noRouteRsp$FULL_N),
								.EMPTY_N(ifcs_1_1_noRouteRsp$EMPTY_N));

  // submodule ifcs_1_1_routeBack
  FIFO2 #(.width(32'd2), .guarded(32'd1)) ifcs_1_1_routeBack(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ifcs_1_1_routeBack$D_IN),
							     .ENQ(ifcs_1_1_routeBack$ENQ),
							     .DEQ(ifcs_1_1_routeBack$DEQ),
							     .CLR(ifcs_1_1_routeBack$CLR),
							     .D_OUT(ifcs_1_1_routeBack$D_OUT),
							     .FULL_N(ifcs_1_1_routeBack$FULL_N),
							     .EMPTY_N(ifcs_1_1_routeBack$EMPTY_N));

  // submodule ifcs_1_1_rspBack
  FIFO2 #(.width(32'd137), .guarded(32'd1)) ifcs_1_1_rspBack(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ifcs_1_1_rspBack$D_IN),
							     .ENQ(ifcs_1_1_rspBack$ENQ),
							     .DEQ(ifcs_1_1_rspBack$DEQ),
							     .CLR(ifcs_1_1_rspBack$CLR),
							     .D_OUT(ifcs_1_1_rspBack$D_OUT),
							     .FULL_N(ifcs_1_1_rspBack$FULL_N),
							     .EMPTY_N(ifcs_1_1_rspBack$EMPTY_N));

  // submodule ifcs_1_innerReq
  FIFO2 #(.width(32'd246), .guarded(32'd1)) ifcs_1_innerReq(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(ifcs_1_innerReq$D_IN),
							    .ENQ(ifcs_1_innerReq$ENQ),
							    .DEQ(ifcs_1_innerReq$DEQ),
							    .CLR(ifcs_1_innerReq$CLR),
							    .D_OUT(ifcs_1_innerReq$D_OUT),
							    .FULL_N(ifcs_1_innerReq$FULL_N),
							    .EMPTY_N(ifcs_1_innerReq$EMPTY_N));

  // submodule ifcs_1_innerRoute
  FIFO2 #(.width(32'd3), .guarded(32'd1)) ifcs_1_innerRoute(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(ifcs_1_innerRoute$D_IN),
							    .ENQ(ifcs_1_innerRoute$ENQ),
							    .DEQ(ifcs_1_innerRoute$DEQ),
							    .CLR(ifcs_1_innerRoute$CLR),
							    .D_OUT(ifcs_1_innerRoute$D_OUT),
							    .FULL_N(ifcs_1_innerRoute$FULL_N),
							    .EMPTY_N(ifcs_1_innerRoute$EMPTY_N));

  // submodule ifcs_1_noRouteRsp
  FIFO2 #(.width(32'd6), .guarded(32'd1)) ifcs_1_noRouteRsp(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(ifcs_1_noRouteRsp$D_IN),
							    .ENQ(ifcs_1_noRouteRsp$ENQ),
							    .DEQ(ifcs_1_noRouteRsp$DEQ),
							    .CLR(ifcs_1_noRouteRsp$CLR),
							    .D_OUT(ifcs_1_noRouteRsp$D_OUT),
							    .FULL_N(ifcs_1_noRouteRsp$FULL_N),
							    .EMPTY_N(ifcs_1_noRouteRsp$EMPTY_N));

  // submodule ifcs_1_routeBack
  FIFO2 #(.width(32'd2), .guarded(32'd1)) ifcs_1_routeBack(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(ifcs_1_routeBack$D_IN),
							   .ENQ(ifcs_1_routeBack$ENQ),
							   .DEQ(ifcs_1_routeBack$DEQ),
							   .CLR(ifcs_1_routeBack$CLR),
							   .D_OUT(ifcs_1_routeBack$D_OUT),
							   .FULL_N(ifcs_1_routeBack$FULL_N),
							   .EMPTY_N(ifcs_1_routeBack$EMPTY_N));

  // submodule ifcs_1_rspBack
  FIFO2 #(.width(32'd6), .guarded(32'd1)) ifcs_1_rspBack(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(ifcs_1_rspBack$D_IN),
							 .ENQ(ifcs_1_rspBack$ENQ),
							 .DEQ(ifcs_1_rspBack$DEQ),
							 .CLR(ifcs_1_rspBack$CLR),
							 .D_OUT(ifcs_1_rspBack$D_OUT),
							 .FULL_N(ifcs_1_rspBack$FULL_N),
							 .EMPTY_N(ifcs_1_rspBack$EMPTY_N));

  // submodule ifcs_2_1_routeBack
  FIFO2 #(.width(32'd2), .guarded(32'd1)) ifcs_2_1_routeBack(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ifcs_2_1_routeBack$D_IN),
							     .ENQ(ifcs_2_1_routeBack$ENQ),
							     .DEQ(ifcs_2_1_routeBack$DEQ),
							     .CLR(ifcs_2_1_routeBack$CLR),
							     .D_OUT(ifcs_2_1_routeBack$D_OUT),
							     .FULL_N(ifcs_2_1_routeBack$FULL_N),
							     .EMPTY_N(ifcs_2_1_routeBack$EMPTY_N));

  // submodule ifcs_2_1_rspBack
  FIFO2 #(.width(32'd137), .guarded(32'd1)) ifcs_2_1_rspBack(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(ifcs_2_1_rspBack$D_IN),
							     .ENQ(ifcs_2_1_rspBack$ENQ),
							     .DEQ(ifcs_2_1_rspBack$DEQ),
							     .CLR(ifcs_2_1_rspBack$CLR),
							     .D_OUT(ifcs_2_1_rspBack$D_OUT),
							     .FULL_N(ifcs_2_1_rspBack$FULL_N),
							     .EMPTY_N(ifcs_2_1_rspBack$EMPTY_N));

  // submodule ifcs_2_routeBack
  FIFO2 #(.width(32'd2), .guarded(32'd1)) ifcs_2_routeBack(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(ifcs_2_routeBack$D_IN),
							   .ENQ(ifcs_2_routeBack$ENQ),
							   .DEQ(ifcs_2_routeBack$DEQ),
							   .CLR(ifcs_2_routeBack$CLR),
							   .D_OUT(ifcs_2_routeBack$D_OUT),
							   .FULL_N(ifcs_2_routeBack$FULL_N),
							   .EMPTY_N(ifcs_2_routeBack$EMPTY_N));

  // submodule ifcs_2_rspBack
  FIFO2 #(.width(32'd6), .guarded(32'd1)) ifcs_2_rspBack(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(ifcs_2_rspBack$D_IN),
							 .ENQ(ifcs_2_rspBack$ENQ),
							 .DEQ(ifcs_2_rspBack$DEQ),
							 .CLR(ifcs_2_rspBack$CLR),
							 .D_OUT(ifcs_2_rspBack$D_OUT),
							 .FULL_N(ifcs_2_rspBack$FULL_N),
							 .EMPTY_N(ifcs_2_rspBack$EMPTY_N));

  // submodule msNoSynth_0_b_buffer_ff
  FIFO1 #(.width(32'd6), .guarded(32'd0)) msNoSynth_0_b_buffer_ff(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(msNoSynth_0_b_buffer_ff$D_IN),
								  .ENQ(msNoSynth_0_b_buffer_ff$ENQ),
								  .DEQ(msNoSynth_0_b_buffer_ff$DEQ),
								  .CLR(msNoSynth_0_b_buffer_ff$CLR),
								  .D_OUT(msNoSynth_0_b_buffer_ff$D_OUT),
								  .FULL_N(msNoSynth_0_b_buffer_ff$FULL_N),
								  .EMPTY_N(msNoSynth_0_b_buffer_ff$EMPTY_N));

  // submodule msNoSynth_0_b_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) msNoSynth_0_b_buffer_firstValid(.CLK(CLK),
							   .D_IN(msNoSynth_0_b_buffer_firstValid$D_IN),
							   .EN(msNoSynth_0_b_buffer_firstValid$EN),
							   .Q_OUT(msNoSynth_0_b_buffer_firstValid$Q_OUT));

  // submodule msNoSynth_0_r_buffer_ff
  FIFO1 #(.width(32'd137),
	  .guarded(32'd0)) msNoSynth_0_r_buffer_ff(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(msNoSynth_0_r_buffer_ff$D_IN),
						   .ENQ(msNoSynth_0_r_buffer_ff$ENQ),
						   .DEQ(msNoSynth_0_r_buffer_ff$DEQ),
						   .CLR(msNoSynth_0_r_buffer_ff$CLR),
						   .D_OUT(msNoSynth_0_r_buffer_ff$D_OUT),
						   .FULL_N(msNoSynth_0_r_buffer_ff$FULL_N),
						   .EMPTY_N(msNoSynth_0_r_buffer_ff$EMPTY_N));

  // submodule msNoSynth_0_r_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) msNoSynth_0_r_buffer_firstValid(.CLK(CLK),
							   .D_IN(msNoSynth_0_r_buffer_firstValid$D_IN),
							   .EN(msNoSynth_0_r_buffer_firstValid$EN),
							   .Q_OUT(msNoSynth_0_r_buffer_firstValid$Q_OUT));

  // submodule msNoSynth_1_b_buffer_ff
  FIFO1 #(.width(32'd6), .guarded(32'd0)) msNoSynth_1_b_buffer_ff(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(msNoSynth_1_b_buffer_ff$D_IN),
								  .ENQ(msNoSynth_1_b_buffer_ff$ENQ),
								  .DEQ(msNoSynth_1_b_buffer_ff$DEQ),
								  .CLR(msNoSynth_1_b_buffer_ff$CLR),
								  .D_OUT(msNoSynth_1_b_buffer_ff$D_OUT),
								  .FULL_N(msNoSynth_1_b_buffer_ff$FULL_N),
								  .EMPTY_N(msNoSynth_1_b_buffer_ff$EMPTY_N));

  // submodule msNoSynth_1_b_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) msNoSynth_1_b_buffer_firstValid(.CLK(CLK),
							   .D_IN(msNoSynth_1_b_buffer_firstValid$D_IN),
							   .EN(msNoSynth_1_b_buffer_firstValid$EN),
							   .Q_OUT(msNoSynth_1_b_buffer_firstValid$Q_OUT));

  // submodule msNoSynth_1_r_buffer_ff
  FIFO1 #(.width(32'd137),
	  .guarded(32'd0)) msNoSynth_1_r_buffer_ff(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(msNoSynth_1_r_buffer_ff$D_IN),
						   .ENQ(msNoSynth_1_r_buffer_ff$ENQ),
						   .DEQ(msNoSynth_1_r_buffer_ff$DEQ),
						   .CLR(msNoSynth_1_r_buffer_ff$CLR),
						   .D_OUT(msNoSynth_1_r_buffer_ff$D_OUT),
						   .FULL_N(msNoSynth_1_r_buffer_ff$FULL_N),
						   .EMPTY_N(msNoSynth_1_r_buffer_ff$EMPTY_N));

  // submodule msNoSynth_1_r_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) msNoSynth_1_r_buffer_firstValid(.CLK(CLK),
							   .D_IN(msNoSynth_1_r_buffer_firstValid$D_IN),
							   .EN(msNoSynth_1_r_buffer_firstValid$EN),
							   .Q_OUT(msNoSynth_1_r_buffer_firstValid$Q_OUT));

  // submodule near_mem_io
  mkNear_Mem_IO_AXI4 near_mem_io(.CLK(CLK),
				 .RST_N(RST_N),
				 .axi4_slave_araddr(near_mem_io$axi4_slave_araddr),
				 .axi4_slave_arburst(near_mem_io$axi4_slave_arburst),
				 .axi4_slave_arcache(near_mem_io$axi4_slave_arcache),
				 .axi4_slave_arid(near_mem_io$axi4_slave_arid),
				 .axi4_slave_arlen(near_mem_io$axi4_slave_arlen),
				 .axi4_slave_arlock(near_mem_io$axi4_slave_arlock),
				 .axi4_slave_arprot(near_mem_io$axi4_slave_arprot),
				 .axi4_slave_arqos(near_mem_io$axi4_slave_arqos),
				 .axi4_slave_arregion(near_mem_io$axi4_slave_arregion),
				 .axi4_slave_arsize(near_mem_io$axi4_slave_arsize),
				 .axi4_slave_awaddr(near_mem_io$axi4_slave_awaddr),
				 .axi4_slave_awburst(near_mem_io$axi4_slave_awburst),
				 .axi4_slave_awcache(near_mem_io$axi4_slave_awcache),
				 .axi4_slave_awid(near_mem_io$axi4_slave_awid),
				 .axi4_slave_awlen(near_mem_io$axi4_slave_awlen),
				 .axi4_slave_awlock(near_mem_io$axi4_slave_awlock),
				 .axi4_slave_awprot(near_mem_io$axi4_slave_awprot),
				 .axi4_slave_awqos(near_mem_io$axi4_slave_awqos),
				 .axi4_slave_awregion(near_mem_io$axi4_slave_awregion),
				 .axi4_slave_awsize(near_mem_io$axi4_slave_awsize),
				 .axi4_slave_bready(near_mem_io$axi4_slave_bready),
				 .axi4_slave_rready(near_mem_io$axi4_slave_rready),
				 .axi4_slave_wdata(near_mem_io$axi4_slave_wdata),
				 .axi4_slave_wlast(near_mem_io$axi4_slave_wlast),
				 .axi4_slave_wstrb(near_mem_io$axi4_slave_wstrb),
				 .axi4_slave_wuser(near_mem_io$axi4_slave_wuser),
				 .set_addr_map_addr_base(near_mem_io$set_addr_map_addr_base),
				 .set_addr_map_addr_lim(near_mem_io$set_addr_map_addr_lim),
				 .EN_server_reset_request_put(near_mem_io$EN_server_reset_request_put),
				 .EN_server_reset_response_get(near_mem_io$EN_server_reset_response_get),
				 .EN_set_addr_map(near_mem_io$EN_set_addr_map),
				 .axi4_slave_awvalid(near_mem_io$axi4_slave_awvalid),
				 .axi4_slave_wvalid(near_mem_io$axi4_slave_wvalid),
				 .axi4_slave_arvalid(near_mem_io$axi4_slave_arvalid),
				 .EN_get_timer_interrupt_req_get(near_mem_io$EN_get_timer_interrupt_req_get),
				 .EN_get_sw_interrupt_req_get(near_mem_io$EN_get_sw_interrupt_req_get),
				 .RDY_server_reset_request_put(near_mem_io$RDY_server_reset_request_put),
				 .RDY_server_reset_response_get(near_mem_io$RDY_server_reset_response_get),
				 .RDY_set_addr_map(),
				 .axi4_slave_awready(near_mem_io$axi4_slave_awready),
				 .axi4_slave_wready(near_mem_io$axi4_slave_wready),
				 .axi4_slave_bid(near_mem_io$axi4_slave_bid),
				 .axi4_slave_bresp(near_mem_io$axi4_slave_bresp),
				 .axi4_slave_bvalid(near_mem_io$axi4_slave_bvalid),
				 .axi4_slave_arready(near_mem_io$axi4_slave_arready),
				 .axi4_slave_rid(near_mem_io$axi4_slave_rid),
				 .axi4_slave_rdata(near_mem_io$axi4_slave_rdata),
				 .axi4_slave_rresp(near_mem_io$axi4_slave_rresp),
				 .axi4_slave_rlast(near_mem_io$axi4_slave_rlast),
				 .axi4_slave_ruser(near_mem_io$axi4_slave_ruser),
				 .axi4_slave_rvalid(near_mem_io$axi4_slave_rvalid),
				 .get_timer_interrupt_req_get(near_mem_io$get_timer_interrupt_req_get),
				 .RDY_get_timer_interrupt_req_get(near_mem_io$RDY_get_timer_interrupt_req_get),
				 .get_sw_interrupt_req_get(near_mem_io$get_sw_interrupt_req_get),
				 .RDY_get_sw_interrupt_req_get(near_mem_io$RDY_get_sw_interrupt_req_get));

  // submodule plic
  mkPLIC_16_2_7 plic(.CLK(CLK),
		     .RST_N(RST_N),
		     .axi4_slave_araddr(plic$axi4_slave_araddr),
		     .axi4_slave_arburst(plic$axi4_slave_arburst),
		     .axi4_slave_arcache(plic$axi4_slave_arcache),
		     .axi4_slave_arid(plic$axi4_slave_arid),
		     .axi4_slave_arlen(plic$axi4_slave_arlen),
		     .axi4_slave_arlock(plic$axi4_slave_arlock),
		     .axi4_slave_arprot(plic$axi4_slave_arprot),
		     .axi4_slave_arqos(plic$axi4_slave_arqos),
		     .axi4_slave_arregion(plic$axi4_slave_arregion),
		     .axi4_slave_arsize(plic$axi4_slave_arsize),
		     .axi4_slave_awaddr(plic$axi4_slave_awaddr),
		     .axi4_slave_awburst(plic$axi4_slave_awburst),
		     .axi4_slave_awcache(plic$axi4_slave_awcache),
		     .axi4_slave_awid(plic$axi4_slave_awid),
		     .axi4_slave_awlen(plic$axi4_slave_awlen),
		     .axi4_slave_awlock(plic$axi4_slave_awlock),
		     .axi4_slave_awprot(plic$axi4_slave_awprot),
		     .axi4_slave_awqos(plic$axi4_slave_awqos),
		     .axi4_slave_awregion(plic$axi4_slave_awregion),
		     .axi4_slave_awsize(plic$axi4_slave_awsize),
		     .axi4_slave_bready(plic$axi4_slave_bready),
		     .axi4_slave_rready(plic$axi4_slave_rready),
		     .axi4_slave_wdata(plic$axi4_slave_wdata),
		     .axi4_slave_wlast(plic$axi4_slave_wlast),
		     .axi4_slave_wstrb(plic$axi4_slave_wstrb),
		     .axi4_slave_wuser(plic$axi4_slave_wuser),
		     .set_addr_map_addr_base(plic$set_addr_map_addr_base),
		     .set_addr_map_addr_lim(plic$set_addr_map_addr_lim),
		     .set_verbosity_verbosity(plic$set_verbosity_verbosity),
		     .v_sources_0_m_interrupt_req_set_not_clear(plic$v_sources_0_m_interrupt_req_set_not_clear),
		     .v_sources_10_m_interrupt_req_set_not_clear(plic$v_sources_10_m_interrupt_req_set_not_clear),
		     .v_sources_11_m_interrupt_req_set_not_clear(plic$v_sources_11_m_interrupt_req_set_not_clear),
		     .v_sources_12_m_interrupt_req_set_not_clear(plic$v_sources_12_m_interrupt_req_set_not_clear),
		     .v_sources_13_m_interrupt_req_set_not_clear(plic$v_sources_13_m_interrupt_req_set_not_clear),
		     .v_sources_14_m_interrupt_req_set_not_clear(plic$v_sources_14_m_interrupt_req_set_not_clear),
		     .v_sources_15_m_interrupt_req_set_not_clear(plic$v_sources_15_m_interrupt_req_set_not_clear),
		     .v_sources_1_m_interrupt_req_set_not_clear(plic$v_sources_1_m_interrupt_req_set_not_clear),
		     .v_sources_2_m_interrupt_req_set_not_clear(plic$v_sources_2_m_interrupt_req_set_not_clear),
		     .v_sources_3_m_interrupt_req_set_not_clear(plic$v_sources_3_m_interrupt_req_set_not_clear),
		     .v_sources_4_m_interrupt_req_set_not_clear(plic$v_sources_4_m_interrupt_req_set_not_clear),
		     .v_sources_5_m_interrupt_req_set_not_clear(plic$v_sources_5_m_interrupt_req_set_not_clear),
		     .v_sources_6_m_interrupt_req_set_not_clear(plic$v_sources_6_m_interrupt_req_set_not_clear),
		     .v_sources_7_m_interrupt_req_set_not_clear(plic$v_sources_7_m_interrupt_req_set_not_clear),
		     .v_sources_8_m_interrupt_req_set_not_clear(plic$v_sources_8_m_interrupt_req_set_not_clear),
		     .v_sources_9_m_interrupt_req_set_not_clear(plic$v_sources_9_m_interrupt_req_set_not_clear),
		     .EN_set_verbosity(plic$EN_set_verbosity),
		     .EN_show_PLIC_state(plic$EN_show_PLIC_state),
		     .EN_server_reset_request_put(plic$EN_server_reset_request_put),
		     .EN_server_reset_response_get(plic$EN_server_reset_response_get),
		     .EN_set_addr_map(plic$EN_set_addr_map),
		     .axi4_slave_awvalid(plic$axi4_slave_awvalid),
		     .axi4_slave_wvalid(plic$axi4_slave_wvalid),
		     .axi4_slave_arvalid(plic$axi4_slave_arvalid),
		     .RDY_set_verbosity(),
		     .RDY_show_PLIC_state(),
		     .RDY_server_reset_request_put(plic$RDY_server_reset_request_put),
		     .RDY_server_reset_response_get(plic$RDY_server_reset_response_get),
		     .RDY_set_addr_map(),
		     .axi4_slave_awready(plic$axi4_slave_awready),
		     .axi4_slave_wready(plic$axi4_slave_wready),
		     .axi4_slave_bid(plic$axi4_slave_bid),
		     .axi4_slave_bresp(plic$axi4_slave_bresp),
		     .axi4_slave_bvalid(plic$axi4_slave_bvalid),
		     .axi4_slave_arready(plic$axi4_slave_arready),
		     .axi4_slave_rid(plic$axi4_slave_rid),
		     .axi4_slave_rdata(plic$axi4_slave_rdata),
		     .axi4_slave_rresp(plic$axi4_slave_rresp),
		     .axi4_slave_rlast(plic$axi4_slave_rlast),
		     .axi4_slave_ruser(plic$axi4_slave_ruser),
		     .axi4_slave_rvalid(plic$axi4_slave_rvalid),
		     .v_targets_0_m_eip(plic$v_targets_0_m_eip),
		     .v_targets_1_m_eip(plic$v_targets_1_m_eip));

  // submodule soc_map
  mkSoC_Map soc_map(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_is_IO_addr_addr(soc_map$m_is_IO_addr_addr),
		    .m_is_mem_addr_addr(soc_map$m_is_mem_addr_addr),
		    .m_is_near_mem_IO_addr_addr(soc_map$m_is_near_mem_IO_addr_addr),
		    .m_plic_addr_range(soc_map$m_plic_addr_range),
		    .m_near_mem_io_addr_range(soc_map$m_near_mem_io_addr_range),
		    .m_flash_mem_addr_range(),
		    .m_ethernet_0_addr_range(),
		    .m_dma_0_addr_range(),
		    .m_uart16550_0_addr_range(),
		    .m_gpio_0_addr_range(),
		    .m_boot_rom_addr_range(),
		    .m_ddr4_0_uncached_addr_range(),
		    .m_ddr4_0_cached_addr_range(),
		    .m_is_mem_addr(),
		    .m_is_IO_addr(),
		    .m_is_near_mem_IO_addr(),
		    .m_pc_reset_value(),
		    .m_pcc_reset_value(),
		    .m_mtcc_reset_value(),
		    .m_mtvec_reset_value(),
		    .m_nmivec_reset_value());

  // submodule ssNoSynth_0_ar_buffer_ff
  FIFO1 #(.width(32'd98),
	  .guarded(32'd0)) ssNoSynth_0_ar_buffer_ff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ssNoSynth_0_ar_buffer_ff$D_IN),
						    .ENQ(ssNoSynth_0_ar_buffer_ff$ENQ),
						    .DEQ(ssNoSynth_0_ar_buffer_ff$DEQ),
						    .CLR(ssNoSynth_0_ar_buffer_ff$CLR),
						    .D_OUT(ssNoSynth_0_ar_buffer_ff$D_OUT),
						    .FULL_N(ssNoSynth_0_ar_buffer_ff$FULL_N),
						    .EMPTY_N(ssNoSynth_0_ar_buffer_ff$EMPTY_N));

  // submodule ssNoSynth_0_ar_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) ssNoSynth_0_ar_buffer_firstValid(.CLK(CLK),
							    .D_IN(ssNoSynth_0_ar_buffer_firstValid$D_IN),
							    .EN(ssNoSynth_0_ar_buffer_firstValid$EN),
							    .Q_OUT(ssNoSynth_0_ar_buffer_firstValid$Q_OUT));

  // submodule ssNoSynth_0_aw_buffer_ff
  FIFO1 #(.width(32'd98),
	  .guarded(32'd0)) ssNoSynth_0_aw_buffer_ff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ssNoSynth_0_aw_buffer_ff$D_IN),
						    .ENQ(ssNoSynth_0_aw_buffer_ff$ENQ),
						    .DEQ(ssNoSynth_0_aw_buffer_ff$DEQ),
						    .CLR(ssNoSynth_0_aw_buffer_ff$CLR),
						    .D_OUT(ssNoSynth_0_aw_buffer_ff$D_OUT),
						    .FULL_N(ssNoSynth_0_aw_buffer_ff$FULL_N),
						    .EMPTY_N(ssNoSynth_0_aw_buffer_ff$EMPTY_N));

  // submodule ssNoSynth_0_aw_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) ssNoSynth_0_aw_buffer_firstValid(.CLK(CLK),
							    .D_IN(ssNoSynth_0_aw_buffer_firstValid$D_IN),
							    .EN(ssNoSynth_0_aw_buffer_firstValid$EN),
							    .Q_OUT(ssNoSynth_0_aw_buffer_firstValid$Q_OUT));

  // submodule ssNoSynth_0_w_buffer_ff
  FIFO1 #(.width(32'd147),
	  .guarded(32'd0)) ssNoSynth_0_w_buffer_ff(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(ssNoSynth_0_w_buffer_ff$D_IN),
						   .ENQ(ssNoSynth_0_w_buffer_ff$ENQ),
						   .DEQ(ssNoSynth_0_w_buffer_ff$DEQ),
						   .CLR(ssNoSynth_0_w_buffer_ff$CLR),
						   .D_OUT(ssNoSynth_0_w_buffer_ff$D_OUT),
						   .FULL_N(ssNoSynth_0_w_buffer_ff$FULL_N),
						   .EMPTY_N(ssNoSynth_0_w_buffer_ff$EMPTY_N));

  // submodule ssNoSynth_0_w_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) ssNoSynth_0_w_buffer_firstValid(.CLK(CLK),
							   .D_IN(ssNoSynth_0_w_buffer_firstValid$D_IN),
							   .EN(ssNoSynth_0_w_buffer_firstValid$EN),
							   .Q_OUT(ssNoSynth_0_w_buffer_firstValid$Q_OUT));

  // submodule ssNoSynth_1_ar_buffer_ff
  FIFO1 #(.width(32'd98),
	  .guarded(32'd0)) ssNoSynth_1_ar_buffer_ff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ssNoSynth_1_ar_buffer_ff$D_IN),
						    .ENQ(ssNoSynth_1_ar_buffer_ff$ENQ),
						    .DEQ(ssNoSynth_1_ar_buffer_ff$DEQ),
						    .CLR(ssNoSynth_1_ar_buffer_ff$CLR),
						    .D_OUT(ssNoSynth_1_ar_buffer_ff$D_OUT),
						    .FULL_N(ssNoSynth_1_ar_buffer_ff$FULL_N),
						    .EMPTY_N(ssNoSynth_1_ar_buffer_ff$EMPTY_N));

  // submodule ssNoSynth_1_ar_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) ssNoSynth_1_ar_buffer_firstValid(.CLK(CLK),
							    .D_IN(ssNoSynth_1_ar_buffer_firstValid$D_IN),
							    .EN(ssNoSynth_1_ar_buffer_firstValid$EN),
							    .Q_OUT(ssNoSynth_1_ar_buffer_firstValid$Q_OUT));

  // submodule ssNoSynth_1_aw_buffer_ff
  FIFO1 #(.width(32'd98),
	  .guarded(32'd0)) ssNoSynth_1_aw_buffer_ff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ssNoSynth_1_aw_buffer_ff$D_IN),
						    .ENQ(ssNoSynth_1_aw_buffer_ff$ENQ),
						    .DEQ(ssNoSynth_1_aw_buffer_ff$DEQ),
						    .CLR(ssNoSynth_1_aw_buffer_ff$CLR),
						    .D_OUT(ssNoSynth_1_aw_buffer_ff$D_OUT),
						    .FULL_N(ssNoSynth_1_aw_buffer_ff$FULL_N),
						    .EMPTY_N(ssNoSynth_1_aw_buffer_ff$EMPTY_N));

  // submodule ssNoSynth_1_aw_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) ssNoSynth_1_aw_buffer_firstValid(.CLK(CLK),
							    .D_IN(ssNoSynth_1_aw_buffer_firstValid$D_IN),
							    .EN(ssNoSynth_1_aw_buffer_firstValid$EN),
							    .Q_OUT(ssNoSynth_1_aw_buffer_firstValid$Q_OUT));

  // submodule ssNoSynth_1_w_buffer_ff
  FIFO1 #(.width(32'd147),
	  .guarded(32'd0)) ssNoSynth_1_w_buffer_ff(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(ssNoSynth_1_w_buffer_ff$D_IN),
						   .ENQ(ssNoSynth_1_w_buffer_ff$ENQ),
						   .DEQ(ssNoSynth_1_w_buffer_ff$DEQ),
						   .CLR(ssNoSynth_1_w_buffer_ff$CLR),
						   .D_OUT(ssNoSynth_1_w_buffer_ff$D_OUT),
						   .FULL_N(ssNoSynth_1_w_buffer_ff$FULL_N),
						   .EMPTY_N(ssNoSynth_1_w_buffer_ff$EMPTY_N));

  // submodule ssNoSynth_1_w_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) ssNoSynth_1_w_buffer_firstValid(.CLK(CLK),
							   .D_IN(ssNoSynth_1_w_buffer_firstValid$D_IN),
							   .EN(ssNoSynth_1_w_buffer_firstValid$EN),
							   .Q_OUT(ssNoSynth_1_w_buffer_firstValid$Q_OUT));

  // submodule ssNoSynth_2_ar_buffer_ff
  FIFO1 #(.width(32'd98),
	  .guarded(32'd0)) ssNoSynth_2_ar_buffer_ff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ssNoSynth_2_ar_buffer_ff$D_IN),
						    .ENQ(ssNoSynth_2_ar_buffer_ff$ENQ),
						    .DEQ(ssNoSynth_2_ar_buffer_ff$DEQ),
						    .CLR(ssNoSynth_2_ar_buffer_ff$CLR),
						    .D_OUT(ssNoSynth_2_ar_buffer_ff$D_OUT),
						    .FULL_N(ssNoSynth_2_ar_buffer_ff$FULL_N),
						    .EMPTY_N(ssNoSynth_2_ar_buffer_ff$EMPTY_N));

  // submodule ssNoSynth_2_ar_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) ssNoSynth_2_ar_buffer_firstValid(.CLK(CLK),
							    .D_IN(ssNoSynth_2_ar_buffer_firstValid$D_IN),
							    .EN(ssNoSynth_2_ar_buffer_firstValid$EN),
							    .Q_OUT(ssNoSynth_2_ar_buffer_firstValid$Q_OUT));

  // submodule ssNoSynth_2_aw_buffer_ff
  FIFO1 #(.width(32'd98),
	  .guarded(32'd0)) ssNoSynth_2_aw_buffer_ff(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ssNoSynth_2_aw_buffer_ff$D_IN),
						    .ENQ(ssNoSynth_2_aw_buffer_ff$ENQ),
						    .DEQ(ssNoSynth_2_aw_buffer_ff$DEQ),
						    .CLR(ssNoSynth_2_aw_buffer_ff$CLR),
						    .D_OUT(ssNoSynth_2_aw_buffer_ff$D_OUT),
						    .FULL_N(ssNoSynth_2_aw_buffer_ff$FULL_N),
						    .EMPTY_N(ssNoSynth_2_aw_buffer_ff$EMPTY_N));

  // submodule ssNoSynth_2_aw_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) ssNoSynth_2_aw_buffer_firstValid(.CLK(CLK),
							    .D_IN(ssNoSynth_2_aw_buffer_firstValid$D_IN),
							    .EN(ssNoSynth_2_aw_buffer_firstValid$EN),
							    .Q_OUT(ssNoSynth_2_aw_buffer_firstValid$Q_OUT));

  // submodule ssNoSynth_2_w_buffer_ff
  FIFO1 #(.width(32'd147),
	  .guarded(32'd0)) ssNoSynth_2_w_buffer_ff(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(ssNoSynth_2_w_buffer_ff$D_IN),
						   .ENQ(ssNoSynth_2_w_buffer_ff$ENQ),
						   .DEQ(ssNoSynth_2_w_buffer_ff$DEQ),
						   .CLR(ssNoSynth_2_w_buffer_ff$CLR),
						   .D_OUT(ssNoSynth_2_w_buffer_ff$D_OUT),
						   .FULL_N(ssNoSynth_2_w_buffer_ff$FULL_N),
						   .EMPTY_N(ssNoSynth_2_w_buffer_ff$EMPTY_N));

  // submodule ssNoSynth_2_w_buffer_firstValid
  RevertReg #(.width(32'd1),
	      .init(1'd1)) ssNoSynth_2_w_buffer_firstValid(.CLK(CLK),
							   .D_IN(ssNoSynth_2_w_buffer_firstValid$D_IN),
							   .EN(ssNoSynth_2_w_buffer_firstValid$EN),
							   .Q_OUT(ssNoSynth_2_w_buffer_firstValid$Q_OUT));

  // submodule tagController_limiter
  FIFO10 #(.guarded(32'd1)) tagController_limiter(.RST(RST_N),
						  .CLK(CLK),
						  .ENQ(tagController_limiter$ENQ),
						  .DEQ(tagController_limiter$DEQ),
						  .CLR(tagController_limiter$CLR),
						  .FULL_N(tagController_limiter$FULL_N),
						  .EMPTY_N(tagController_limiter$EMPTY_N));

  // submodule tagController_newRst
  MakeReset0 #(.init(1'd0)) tagController_newRst(.CLK(CLK),
						 .RST(RST_N),
						 .ASSERT_IN(tagController_newRst$ASSERT_IN),
						 .ASSERT_OUT(),
						 .OUT_RST(tagController_newRst$OUT_RST));

  // submodule tagController_shimMaster_arff
  SizedFIFO #(.p1width(32'd99),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd0)) tagController_shimMaster_arff(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(tagController_shimMaster_arff$D_IN),
							     .ENQ(tagController_shimMaster_arff$ENQ),
							     .DEQ(tagController_shimMaster_arff$DEQ),
							     .CLR(tagController_shimMaster_arff$CLR),
							     .D_OUT(tagController_shimMaster_arff$D_OUT),
							     .FULL_N(),
							     .EMPTY_N(tagController_shimMaster_arff$EMPTY_N));

  // submodule tagController_shimMaster_awff
  SizedFIFO #(.p1width(32'd99),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd0)) tagController_shimMaster_awff(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(tagController_shimMaster_awff$D_IN),
							     .ENQ(tagController_shimMaster_awff$ENQ),
							     .DEQ(tagController_shimMaster_awff$DEQ),
							     .CLR(tagController_shimMaster_awff$CLR),
							     .D_OUT(tagController_shimMaster_awff$D_OUT),
							     .FULL_N(),
							     .EMPTY_N(tagController_shimMaster_awff$EMPTY_N));

  // submodule tagController_shimMaster_bff
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd0)) tagController_shimMaster_bff(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(tagController_shimMaster_bff$D_IN),
							    .ENQ(tagController_shimMaster_bff$ENQ),
							    .DEQ(tagController_shimMaster_bff$DEQ),
							    .CLR(tagController_shimMaster_bff$CLR),
							    .D_OUT(tagController_shimMaster_bff$D_OUT),
							    .FULL_N(tagController_shimMaster_bff$FULL_N),
							    .EMPTY_N(tagController_shimMaster_bff$EMPTY_N));

  // submodule tagController_shimMaster_rff
  SizedFIFO #(.p1width(32'd137),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd0)) tagController_shimMaster_rff(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(tagController_shimMaster_rff$D_IN),
							    .ENQ(tagController_shimMaster_rff$ENQ),
							    .DEQ(tagController_shimMaster_rff$DEQ),
							    .CLR(tagController_shimMaster_rff$CLR),
							    .D_OUT(tagController_shimMaster_rff$D_OUT),
							    .FULL_N(tagController_shimMaster_rff$FULL_N),
							    .EMPTY_N(tagController_shimMaster_rff$EMPTY_N));

  // submodule tagController_shimMaster_wff
  SizedFIFO #(.p1width(32'd145),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd0)) tagController_shimMaster_wff(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(tagController_shimMaster_wff$D_IN),
							    .ENQ(tagController_shimMaster_wff$ENQ),
							    .DEQ(tagController_shimMaster_wff$DEQ),
							    .CLR(tagController_shimMaster_wff$CLR),
							    .D_OUT(tagController_shimMaster_wff$D_OUT),
							    .FULL_N(),
							    .EMPTY_N(tagController_shimMaster_wff$EMPTY_N));

  // submodule tagController_shimSlave_arff
  SizedFIFO #(.p1width(32'd98),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd0)) tagController_shimSlave_arff(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(tagController_shimSlave_arff$D_IN),
							    .ENQ(tagController_shimSlave_arff$ENQ),
							    .DEQ(tagController_shimSlave_arff$DEQ),
							    .CLR(tagController_shimSlave_arff$CLR),
							    .D_OUT(tagController_shimSlave_arff$D_OUT),
							    .FULL_N(tagController_shimSlave_arff$FULL_N),
							    .EMPTY_N(tagController_shimSlave_arff$EMPTY_N));

  // submodule tagController_shimSlave_awff
  SizedFIFO #(.p1width(32'd98),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd0)) tagController_shimSlave_awff(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(tagController_shimSlave_awff$D_IN),
							    .ENQ(tagController_shimSlave_awff$ENQ),
							    .DEQ(tagController_shimSlave_awff$DEQ),
							    .CLR(tagController_shimSlave_awff$CLR),
							    .D_OUT(tagController_shimSlave_awff$D_OUT),
							    .FULL_N(tagController_shimSlave_awff$FULL_N),
							    .EMPTY_N(tagController_shimSlave_awff$EMPTY_N));

  // submodule tagController_shimSlave_bff
  SizedFIFO #(.p1width(32'd7),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd0)) tagController_shimSlave_bff(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(tagController_shimSlave_bff$D_IN),
							   .ENQ(tagController_shimSlave_bff$ENQ),
							   .DEQ(tagController_shimSlave_bff$DEQ),
							   .CLR(tagController_shimSlave_bff$CLR),
							   .D_OUT(tagController_shimSlave_bff$D_OUT),
							   .FULL_N(),
							   .EMPTY_N(tagController_shimSlave_bff$EMPTY_N));

  // submodule tagController_shimSlave_rff
  SizedFIFO #(.p1width(32'd138),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd0)) tagController_shimSlave_rff(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(tagController_shimSlave_rff$D_IN),
							   .ENQ(tagController_shimSlave_rff$ENQ),
							   .DEQ(tagController_shimSlave_rff$DEQ),
							   .CLR(tagController_shimSlave_rff$CLR),
							   .D_OUT(tagController_shimSlave_rff$D_OUT),
							   .FULL_N(),
							   .EMPTY_N(tagController_shimSlave_rff$EMPTY_N));

  // submodule tagController_shimSlave_wff
  SizedFIFO #(.p1width(32'd147),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd0)) tagController_shimSlave_wff(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(tagController_shimSlave_wff$D_IN),
							   .ENQ(tagController_shimSlave_wff$ENQ),
							   .DEQ(tagController_shimSlave_wff$DEQ),
							   .CLR(tagController_shimSlave_wff$CLR),
							   .D_OUT(tagController_shimSlave_wff$D_OUT),
							   .FULL_N(tagController_shimSlave_wff$FULL_N),
							   .EMPTY_N(tagController_shimSlave_wff$EMPTY_N));

  // submodule tagController_tagCon
  mkTagController tagController_tagCon(.CLK(CLK),
				       .RST_N(tagController_newRst$OUT_RST),
				       .cache_request_put_val(tagController_tagCon$cache_request_put_val),
				       .memory_response_put_val(tagController_tagCon$memory_response_put_val),
				       .EN_cache_request_put(tagController_tagCon$EN_cache_request_put),
				       .EN_cache_response_get(tagController_tagCon$EN_cache_response_get),
				       .EN_memory_request_get(tagController_tagCon$EN_memory_request_get),
				       .EN_memory_response_put(tagController_tagCon$EN_memory_response_put),
				       .cache_request_canPut(),
				       .RDY_cache_request_put(tagController_tagCon$RDY_cache_request_put),
				       .cache_response_canGet(),
				       .cache_response_peek(),
				       .RDY_cache_response_peek(),
				       .cache_response_get(tagController_tagCon$cache_response_get),
				       .RDY_cache_response_get(tagController_tagCon$RDY_cache_response_get),
				       .memory_request_canGet(),
				       .memory_request_peek(),
				       .RDY_memory_request_peek(),
				       .memory_request_get(tagController_tagCon$memory_request_get),
				       .RDY_memory_request_get(tagController_tagCon$RDY_memory_request_get),
				       .memory_response_canPut(),
				       .RDY_memory_response_put(tagController_tagCon$RDY_memory_response_put));

  // submodule tv_encode
  mkTV_Encode tv_encode(.CLK(CLK),
			.RST_N(RST_N),
			.trace_data_in_put(tv_encode$trace_data_in_put),
			.EN_reset(tv_encode$EN_reset),
			.EN_trace_data_in_put(tv_encode$EN_trace_data_in_put),
			.EN_tv_vb_out_get(tv_encode$EN_tv_vb_out_get),
			.RDY_reset(),
			.RDY_trace_data_in_put(tv_encode$RDY_trace_data_in_put),
			.tv_vb_out_get(tv_encode$tv_vb_out_get),
			.RDY_tv_vb_out_get(tv_encode$RDY_tv_vb_out_get));

  // rule RL_ClientServerRequest
  assign CAN_FIRE_RL_ClientServerRequest =
	     debug_module$RDY_hart0_client_run_halt_request_get &&
	     cpu$RDY_hart0_server_run_halt_request_put ;
  assign WILL_FIRE_RL_ClientServerRequest = CAN_FIRE_RL_ClientServerRequest ;

  // rule RL_ClientServerResponse
  assign CAN_FIRE_RL_ClientServerResponse =
	     debug_module$RDY_hart0_client_run_halt_response_put &&
	     cpu$RDY_hart0_server_run_halt_response_get ;
  assign WILL_FIRE_RL_ClientServerResponse =
	     CAN_FIRE_RL_ClientServerResponse ;

  // rule RL_mkConnectionGetPut
  assign CAN_FIRE_RL_mkConnectionGetPut =
	     debug_module$RDY_hart0_get_other_req_get ;
  assign WILL_FIRE_RL_mkConnectionGetPut =
	     debug_module$RDY_hart0_get_other_req_get ;

  // rule RL_mkConnectionGetPut_1
  assign CAN_FIRE_RL_mkConnectionGetPut_1 =
	     tv_encode$RDY_trace_data_in_put && f_trace_data_merged$EMPTY_N ;
  assign WILL_FIRE_RL_mkConnectionGetPut_1 =
	     CAN_FIRE_RL_mkConnectionGetPut_1 ;

  // rule RL_connect_bflit_1
  assign CAN_FIRE_RL_connect_bflit_1 = deburst_dm_inShim_bff$EMPTY_N ;
  assign WILL_FIRE_RL_connect_bflit_1 = deburst_dm_inShim_bff$EMPTY_N ;

  // rule RL_connect_bready_1
  assign CAN_FIRE_RL_connect_bready_1 = 1'b1 ;
  assign WILL_FIRE_RL_connect_bready_1 = 1'b1 ;

  // rule RL_connect_bflit
  assign CAN_FIRE_RL_connect_bflit = dm_mem_tap$slave_bvalid ;
  assign WILL_FIRE_RL_connect_bflit = dm_mem_tap$slave_bvalid ;

  // rule RL_connect_bready
  assign CAN_FIRE_RL_connect_bready = 1'd1 ;
  assign WILL_FIRE_RL_connect_bready = 1'd1 ;

  // rule RL_connect_rflit_1
  assign CAN_FIRE_RL_connect_rflit_1 = deburst_dm_inShim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_connect_rflit_1 = deburst_dm_inShim_rff$EMPTY_N ;

  // rule RL_connect_rready_1
  assign CAN_FIRE_RL_connect_rready_1 = 1'b1 ;
  assign WILL_FIRE_RL_connect_rready_1 = 1'b1 ;

  // rule RL_connect_rflit
  assign CAN_FIRE_RL_connect_rflit = dm_mem_tap$slave_rvalid ;
  assign WILL_FIRE_RL_connect_rflit = dm_mem_tap$slave_rvalid ;

  // rule RL_connect_rready
  assign CAN_FIRE_RL_connect_rready = 1'd1 ;
  assign WILL_FIRE_RL_connect_rready = 1'd1 ;

  // rule RL_connect_awflit
  assign CAN_FIRE_RL_connect_awflit = debug_module$master_awvalid ;
  assign WILL_FIRE_RL_connect_awflit = debug_module$master_awvalid ;

  // rule RL_connect_awready
  assign CAN_FIRE_RL_connect_awready = 1'd1 ;
  assign WILL_FIRE_RL_connect_awready = 1'd1 ;

  // rule RL_connect_wflit
  assign CAN_FIRE_RL_connect_wflit = debug_module$master_wvalid ;
  assign WILL_FIRE_RL_connect_wflit = debug_module$master_wvalid ;

  // rule RL_connect_wready
  assign CAN_FIRE_RL_connect_wready = 1'd1 ;
  assign WILL_FIRE_RL_connect_wready = 1'd1 ;

  // rule RL_connect_arflit
  assign CAN_FIRE_RL_connect_arflit = debug_module$master_arvalid ;
  assign WILL_FIRE_RL_connect_arflit = debug_module$master_arvalid ;

  // rule RL_connect_arready
  assign CAN_FIRE_RL_connect_arready = 1'd1 ;
  assign WILL_FIRE_RL_connect_arready = 1'd1 ;

  // rule RL_connect_awready_1
  assign CAN_FIRE_RL_connect_awready_1 = 1'd1 ;
  assign WILL_FIRE_RL_connect_awready_1 = 1'd1 ;

  // rule RL_connect_wready_1
  assign CAN_FIRE_RL_connect_wready_1 = 1'd1 ;
  assign WILL_FIRE_RL_connect_wready_1 = 1'd1 ;

  // rule RL_connect_arready_1
  assign CAN_FIRE_RL_connect_arready_1 = 1'd1 ;
  assign WILL_FIRE_RL_connect_arready_1 = 1'd1 ;

  // rule RL_ClientServerRequest_1
  assign CAN_FIRE_RL_ClientServerRequest_1 =
	     debug_module$RDY_hart0_gpr_mem_client_request_get &&
	     dm_gpr_tap_ifc$RDY_server_request_put ;
  assign WILL_FIRE_RL_ClientServerRequest_1 =
	     CAN_FIRE_RL_ClientServerRequest_1 ;

  // rule RL_ClientServerResponse_1
  assign CAN_FIRE_RL_ClientServerResponse_1 =
	     debug_module$RDY_hart0_gpr_mem_client_response_put &&
	     dm_gpr_tap_ifc$RDY_server_response_get ;
  assign WILL_FIRE_RL_ClientServerResponse_1 =
	     CAN_FIRE_RL_ClientServerResponse_1 ;

  // rule RL_ClientServerRequest_2
  assign CAN_FIRE_RL_ClientServerRequest_2 =
	     cpu$RDY_hart0_gpr_mem_server_request_put &&
	     dm_gpr_tap_ifc$RDY_client_request_get ;
  assign WILL_FIRE_RL_ClientServerRequest_2 =
	     CAN_FIRE_RL_ClientServerRequest_2 ;

  // rule RL_ClientServerResponse_2
  assign CAN_FIRE_RL_ClientServerResponse_2 =
	     cpu$RDY_hart0_gpr_mem_server_response_get &&
	     dm_gpr_tap_ifc$RDY_client_response_put ;
  assign WILL_FIRE_RL_ClientServerResponse_2 =
	     CAN_FIRE_RL_ClientServerResponse_2 ;

  // rule RL_merge_dm_gpr_trace_data
  assign CAN_FIRE_RL_merge_dm_gpr_trace_data =
	     dm_gpr_tap_ifc$RDY_trace_data_out_get &&
	     f_trace_data_merged$FULL_N ;
  assign WILL_FIRE_RL_merge_dm_gpr_trace_data =
	     CAN_FIRE_RL_merge_dm_gpr_trace_data ;

  // rule RL_ClientServerRequest_3
  assign CAN_FIRE_RL_ClientServerRequest_3 =
	     debug_module$RDY_hart0_csr_mem_client_request_get &&
	     dm_csr_tap$RDY_server_request_put ;
  assign WILL_FIRE_RL_ClientServerRequest_3 =
	     CAN_FIRE_RL_ClientServerRequest_3 ;

  // rule RL_ClientServerResponse_3
  assign CAN_FIRE_RL_ClientServerResponse_3 =
	     debug_module$RDY_hart0_csr_mem_client_response_put &&
	     dm_csr_tap$RDY_server_response_get ;
  assign WILL_FIRE_RL_ClientServerResponse_3 =
	     CAN_FIRE_RL_ClientServerResponse_3 ;

  // rule RL_ClientServerRequest_4
  assign CAN_FIRE_RL_ClientServerRequest_4 =
	     cpu$RDY_hart0_csr_mem_server_request_put &&
	     dm_csr_tap$RDY_client_request_get ;
  assign WILL_FIRE_RL_ClientServerRequest_4 =
	     CAN_FIRE_RL_ClientServerRequest_4 ;

  // rule RL_merge_cpu_trace_data
  assign CAN_FIRE_RL_merge_cpu_trace_data =
	     cpu$RDY_trace_data_out_get && f_trace_data_merged$FULL_N ;
  assign WILL_FIRE_RL_merge_cpu_trace_data =
	     CAN_FIRE_RL_merge_cpu_trace_data &&
	     !WILL_FIRE_RL_merge_dm_mem_trace_data &&
	     !WILL_FIRE_RL_merge_dm_csr_trace_data &&
	     !WILL_FIRE_RL_merge_dm_gpr_trace_data ;

  // rule RL_merge_dm_mem_trace_data
  assign CAN_FIRE_RL_merge_dm_mem_trace_data =
	     dm_mem_tap$RDY_trace_data_out_get && f_trace_data_merged$FULL_N ;
  assign WILL_FIRE_RL_merge_dm_mem_trace_data =
	     CAN_FIRE_RL_merge_dm_mem_trace_data &&
	     !WILL_FIRE_RL_merge_dm_csr_trace_data &&
	     !WILL_FIRE_RL_merge_dm_gpr_trace_data ;

  // rule RL_ClientServerResponse_4
  assign CAN_FIRE_RL_ClientServerResponse_4 =
	     cpu$RDY_hart0_csr_mem_server_response_get &&
	     dm_csr_tap$RDY_client_response_put ;
  assign WILL_FIRE_RL_ClientServerResponse_4 =
	     CAN_FIRE_RL_ClientServerResponse_4 ;

  // rule RL_merge_dm_csr_trace_data
  assign CAN_FIRE_RL_merge_dm_csr_trace_data =
	     dm_csr_tap$RDY_trace_data_out_get && f_trace_data_merged$FULL_N ;
  assign WILL_FIRE_RL_merge_dm_csr_trace_data =
	     CAN_FIRE_RL_merge_dm_csr_trace_data &&
	     !WILL_FIRE_RL_merge_dm_gpr_trace_data ;

  // rule RL_checkSinkReady
  assign CAN_FIRE_RL_checkSinkReady = 1'd1 ;
  assign WILL_FIRE_RL_checkSinkReady = 1'd1 ;

  // rule RL_checkSinkReady_1
  assign CAN_FIRE_RL_checkSinkReady_1 = 1'd1 ;
  assign WILL_FIRE_RL_checkSinkReady_1 = 1'd1 ;

  // rule RL_checkSinkReady_2
  assign CAN_FIRE_RL_checkSinkReady_2 = 1'd1 ;
  assign WILL_FIRE_RL_checkSinkReady_2 = 1'd1 ;

  // rule RL_craftReq
  assign CAN_FIRE_RL_craftReq =
	     ifcs_0_innerRoute$EMPTY_N && ifcs_0_innerReq$EMPTY_N ;
  assign WILL_FIRE_RL_craftReq = CAN_FIRE_RL_craftReq ;

  // rule RL_craftReq_1
  assign CAN_FIRE_RL_craftReq_1 =
	     ifcs_1_innerRoute$EMPTY_N && ifcs_1_innerReq$EMPTY_N ;
  assign WILL_FIRE_RL_craftReq_1 = CAN_FIRE_RL_craftReq_1 ;

  // rule RL_arbitrate
  assign CAN_FIRE_RL_arbitrate =
	     (CAN_FIRE_RL_craftReq && reqWires_0$wget ||
	      CAN_FIRE_RL_craftReq_1 && reqWires_1$wget) &&
	     !state ;
  assign WILL_FIRE_RL_arbitrate = CAN_FIRE_RL_arbitrate ;

  // rule RL_source_selected
  assign CAN_FIRE_RL_source_selected =
	     (!ifcs_0_innerRoute$EMPTY_N || ifcs_0_innerReq$EMPTY_N) &&
	     !state &&
	     MUX_activeSource_0$write_1__VAL_1 ;
  assign WILL_FIRE_RL_source_selected = CAN_FIRE_RL_source_selected ;

  // rule RL_burst
  assign CAN_FIRE_RL_burst =
	     ifcs_0_innerReq$EMPTY_N && ifcs_0_innerRoute$EMPTY_N &&
	     state_838_AND_activeSource_0_911_912_AND_ifcs__ETC___d1914 ;
  assign WILL_FIRE_RL_burst = CAN_FIRE_RL_burst ;

  // rule RL_source_selected_1
  assign CAN_FIRE_RL_source_selected_1 =
	     (!ifcs_1_innerRoute$EMPTY_N || ifcs_1_innerReq$EMPTY_N) &&
	     !state &&
	     MUX_activeSource_1$write_1__VAL_2 ;
  assign WILL_FIRE_RL_source_selected_1 = CAN_FIRE_RL_source_selected_1 ;

  // rule RL_burst_1
  assign CAN_FIRE_RL_burst_1 =
	     ifcs_1_innerReq$EMPTY_N && ifcs_1_innerRoute$EMPTY_N &&
	     state_838_AND_activeSource_1_955_956_AND_ifcs__ETC___d1958 ;
  assign WILL_FIRE_RL_burst_1 = CAN_FIRE_RL_burst_1 ;

  // rule __me_check_193
  assign CAN_FIRE___me_check_193 = 1'b1 ;
  assign WILL_FIRE___me_check_193 = 1'b1 ;

  // rule __me_check_195
  assign CAN_FIRE___me_check_195 = 1'b1 ;
  assign WILL_FIRE___me_check_195 = 1'b1 ;

  // rule RL_sink_selected
  assign CAN_FIRE_RL_sink_selected =
	     IF_split_0_flitLeft_457_EQ_0_458_THEN_ssNoSynt_ETC___d1783 &&
	     flitToSink_0$whas ;
  assign WILL_FIRE_RL_sink_selected = CAN_FIRE_RL_sink_selected ;

  // rule RL_sink_selected_1
  assign CAN_FIRE_RL_sink_selected_1 =
	     IF_split_1_flitLeft_486_EQ_0_487_THEN_ssNoSynt_ETC___d1784 &&
	     flitToSink_1$whas ;
  assign WILL_FIRE_RL_sink_selected_1 = CAN_FIRE_RL_sink_selected_1 ;

  // rule RL_sink_selected_2
  assign CAN_FIRE_RL_sink_selected_2 =
	     IF_split_2_flitLeft_515_EQ_0_516_THEN_ssNoSynt_ETC___d1785 &&
	     flitToSink_2$whas ;
  assign WILL_FIRE_RL_sink_selected_2 = CAN_FIRE_RL_sink_selected_2 ;

  // rule __me_check_197
  assign CAN_FIRE___me_check_197 = 1'b1 ;
  assign WILL_FIRE___me_check_197 = 1'b1 ;

  // rule RL_checkSinkReady_5
  assign CAN_FIRE_RL_checkSinkReady_5 = 1'd1 ;
  assign WILL_FIRE_RL_checkSinkReady_5 = 1'd1 ;

  // rule RL_checkSinkReady_6
  assign CAN_FIRE_RL_checkSinkReady_6 = 1'd1 ;
  assign WILL_FIRE_RL_checkSinkReady_6 = 1'd1 ;

  // rule RL_checkSinkReady_7
  assign CAN_FIRE_RL_checkSinkReady_7 = 1'd1 ;
  assign WILL_FIRE_RL_checkSinkReady_7 = 1'd1 ;

  // rule RL_craftReq_5
  assign CAN_FIRE_RL_craftReq_5 =
	     ifcs_0_1_innerRoute$EMPTY_N && ifcs_0_1_innerReq$EMPTY_N ;
  assign WILL_FIRE_RL_craftReq_5 = CAN_FIRE_RL_craftReq_5 ;

  // rule RL_craftReq_6
  assign CAN_FIRE_RL_craftReq_6 =
	     ifcs_1_1_innerRoute$EMPTY_N && ifcs_1_1_innerReq$EMPTY_N ;
  assign WILL_FIRE_RL_craftReq_6 = CAN_FIRE_RL_craftReq_6 ;

  // rule RL_arbitrate_2
  assign CAN_FIRE_RL_arbitrate_2 =
	     (CAN_FIRE_RL_craftReq_5 && reqWires_1_0_1$wget ||
	      CAN_FIRE_RL_craftReq_6 && reqWires_1_1_1$wget) &&
	     !state_1_1 ;
  assign WILL_FIRE_RL_arbitrate_2 = CAN_FIRE_RL_arbitrate_2 ;

  // rule RL_source_selected_5
  assign CAN_FIRE_RL_source_selected_5 =
	     (!ifcs_0_1_innerRoute$EMPTY_N || ifcs_0_1_innerReq$EMPTY_N) &&
	     !state_1_1 &&
	     sourceSelect_1_0_1$whas ;
  assign WILL_FIRE_RL_source_selected_5 = CAN_FIRE_RL_source_selected_5 ;

  // rule RL_burst_5
  assign CAN_FIRE_RL_burst_5 =
	     ifcs_0_1_innerReq$EMPTY_N && ifcs_0_1_innerRoute$EMPTY_N &&
	     state_1_1_474_AND_activeSource_1_0_1_541_542_A_ETC___d2544 ;
  assign WILL_FIRE_RL_burst_5 = CAN_FIRE_RL_burst_5 ;

  // rule RL_source_selected_6
  assign CAN_FIRE_RL_source_selected_6 =
	     (!ifcs_1_1_innerRoute$EMPTY_N || ifcs_1_1_innerReq$EMPTY_N) &&
	     !state_1_1 &&
	     sourceSelect_1_1_1$whas ;
  assign WILL_FIRE_RL_source_selected_6 = CAN_FIRE_RL_source_selected_6 ;

  // rule RL_burst_6
  assign CAN_FIRE_RL_burst_6 =
	     ifcs_1_1_innerReq$EMPTY_N && ifcs_1_1_innerRoute$EMPTY_N &&
	     state_1_1_474_AND_activeSource_1_1_1_581_582_A_ETC___d2584 ;
  assign WILL_FIRE_RL_burst_6 = CAN_FIRE_RL_burst_6 ;

  // rule __me_check_240
  assign CAN_FIRE___me_check_240 = 1'b1 ;
  assign WILL_FIRE___me_check_240 = 1'b1 ;

  // rule __me_check_242
  assign CAN_FIRE___me_check_242 = 1'b1 ;
  assign WILL_FIRE___me_check_242 = 1'b1 ;

  // rule RL_sink_selected_5
  assign CAN_FIRE_RL_sink_selected_5 =
	     ssNoSynth_0_ar_buffer_ff$FULL_N && flitToSink_1_0_1$whas ;
  assign WILL_FIRE_RL_sink_selected_5 = CAN_FIRE_RL_sink_selected_5 ;

  // rule RL_sink_selected_6
  assign CAN_FIRE_RL_sink_selected_6 =
	     ssNoSynth_1_ar_buffer_ff$FULL_N && flitToSink_1_1_1$whas ;
  assign WILL_FIRE_RL_sink_selected_6 = CAN_FIRE_RL_sink_selected_6 ;

  // rule RL_sink_selected_7
  assign CAN_FIRE_RL_sink_selected_7 =
	     ssNoSynth_2_ar_buffer_ff$FULL_N && flitToSink_1_2$whas ;
  assign WILL_FIRE_RL_sink_selected_7 = CAN_FIRE_RL_sink_selected_7 ;

  // rule __me_check_244
  assign CAN_FIRE___me_check_244 = 1'b1 ;
  assign WILL_FIRE___me_check_244 = 1'b1 ;

  // rule RL_cpu_imem_ug_u_b_warnDoPut
  assign CAN_FIRE_RL_cpu_imem_ug_u_b_warnDoPut =
	     cpu_imem_ug_u_b_putWire$whas && !cpu_imem_b_buffer_ff$FULL_N ;
  assign WILL_FIRE_RL_cpu_imem_ug_u_b_warnDoPut =
	     CAN_FIRE_RL_cpu_imem_ug_u_b_warnDoPut ;

  // rule RL_cpu_imem_ug_u_b_doPut
  assign CAN_FIRE_RL_cpu_imem_ug_u_b_doPut =
	     cpu_imem_b_buffer_ff$FULL_N && cpu_imem_ug_u_b_putWire$whas ;
  assign WILL_FIRE_RL_cpu_imem_ug_u_b_doPut =
	     CAN_FIRE_RL_cpu_imem_ug_u_b_doPut ;

  // rule RL_cpu_imem_b_forwardFlit
  assign CAN_FIRE_RL_cpu_imem_b_forwardFlit =
	     cpu_imem_b_buffer_firstValid$Q_OUT &&
	     (cpu_imem_b_buffer_ff$EMPTY_N ||
	      CAN_FIRE_RL_cpu_imem_ug_u_b_doPut) ;
  assign WILL_FIRE_RL_cpu_imem_b_forwardFlit =
	     CAN_FIRE_RL_cpu_imem_b_forwardFlit ;

  // rule RL_cpu_imem_b_dropFlit
  assign CAN_FIRE_RL_cpu_imem_b_dropFlit =
	     (cpu_imem_b_buffer_ff$EMPTY_N ||
	      CAN_FIRE_RL_cpu_imem_ug_u_b_doPut) &&
	     cpu$imem_master_bready ;
  assign WILL_FIRE_RL_cpu_imem_b_dropFlit = CAN_FIRE_RL_cpu_imem_b_dropFlit ;

  // rule RL_cpu_imem_b_buffer_enqueue
  assign CAN_FIRE_RL_cpu_imem_b_buffer_enqueue =
	     CAN_FIRE_RL_cpu_imem_ug_u_b_doPut &&
	     (!CAN_FIRE_RL_cpu_imem_b_dropFlit ||
	      cpu_imem_b_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_cpu_imem_b_buffer_enqueue =
	     CAN_FIRE_RL_cpu_imem_b_buffer_enqueue ;

  // rule RL_cpu_imem_b_buffer_dequeue
  assign CAN_FIRE_RL_cpu_imem_b_buffer_dequeue =
	     CAN_FIRE_RL_cpu_imem_b_dropFlit && cpu_imem_b_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_cpu_imem_b_buffer_dequeue =
	     CAN_FIRE_RL_cpu_imem_b_buffer_dequeue ;

  // rule RL_cpu_imem_ug_u_r_warnDoPut
  assign CAN_FIRE_RL_cpu_imem_ug_u_r_warnDoPut =
	     cpu_imem_ug_u_r_putWire$whas && !cpu_imem_r_buffer_ff$FULL_N ;
  assign WILL_FIRE_RL_cpu_imem_ug_u_r_warnDoPut =
	     CAN_FIRE_RL_cpu_imem_ug_u_r_warnDoPut ;

  // rule RL_cpu_imem_ug_u_r_doPut
  assign CAN_FIRE_RL_cpu_imem_ug_u_r_doPut =
	     cpu_imem_r_buffer_ff$FULL_N && cpu_imem_ug_u_r_putWire$whas ;
  assign WILL_FIRE_RL_cpu_imem_ug_u_r_doPut =
	     CAN_FIRE_RL_cpu_imem_ug_u_r_doPut ;

  // rule RL_cpu_imem_r_forwardFlit
  assign CAN_FIRE_RL_cpu_imem_r_forwardFlit =
	     cpu_imem_r_buffer_firstValid$Q_OUT &&
	     (cpu_imem_r_buffer_ff$EMPTY_N ||
	      CAN_FIRE_RL_cpu_imem_ug_u_r_doPut) ;
  assign WILL_FIRE_RL_cpu_imem_r_forwardFlit =
	     CAN_FIRE_RL_cpu_imem_r_forwardFlit ;

  // rule RL_cpu_imem_r_dropFlit
  assign CAN_FIRE_RL_cpu_imem_r_dropFlit =
	     (cpu_imem_r_buffer_ff$EMPTY_N ||
	      CAN_FIRE_RL_cpu_imem_ug_u_r_doPut) &&
	     cpu$imem_master_rready ;
  assign WILL_FIRE_RL_cpu_imem_r_dropFlit = CAN_FIRE_RL_cpu_imem_r_dropFlit ;

  // rule RL_cpu_imem_r_buffer_enqueue
  assign CAN_FIRE_RL_cpu_imem_r_buffer_enqueue =
	     CAN_FIRE_RL_cpu_imem_ug_u_r_doPut &&
	     (!CAN_FIRE_RL_cpu_imem_r_dropFlit ||
	      cpu_imem_r_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_cpu_imem_r_buffer_enqueue =
	     CAN_FIRE_RL_cpu_imem_r_buffer_enqueue ;

  // rule RL_cpu_imem_r_buffer_dequeue
  assign CAN_FIRE_RL_cpu_imem_r_buffer_dequeue =
	     CAN_FIRE_RL_cpu_imem_r_dropFlit && cpu_imem_r_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_cpu_imem_r_buffer_dequeue =
	     CAN_FIRE_RL_cpu_imem_r_buffer_dequeue ;

  // rule RL_cpu_imem_ug_u_aw_setPeek
  assign CAN_FIRE_RL_cpu_imem_ug_u_aw_setPeek = cpu$imem_master_awvalid ;
  assign WILL_FIRE_RL_cpu_imem_ug_u_aw_setPeek = cpu$imem_master_awvalid ;

  // rule RL_cpu_imem_ug_u_aw_warnDoDrop
  assign CAN_FIRE_RL_cpu_imem_ug_u_aw_warnDoDrop =
	     cpu_imem_ug_u_aw_dropWire$whas && !cpu$imem_master_awvalid ;
  assign WILL_FIRE_RL_cpu_imem_ug_u_aw_warnDoDrop =
	     CAN_FIRE_RL_cpu_imem_ug_u_aw_warnDoDrop ;

  // rule RL_cpu_imem_ug_u_aw_doDrop
  assign CAN_FIRE_RL_cpu_imem_ug_u_aw_doDrop =
	     cpu$imem_master_awvalid && cpu_imem_ug_u_aw_dropWire$whas ;
  assign WILL_FIRE_RL_cpu_imem_ug_u_aw_doDrop =
	     CAN_FIRE_RL_cpu_imem_ug_u_aw_doDrop ;

  // rule RL_cpu_imem_aw_forwardReady
  assign CAN_FIRE_RL_cpu_imem_aw_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_cpu_imem_aw_forwardReady = 1'd1 ;

  // rule RL_cpu_imem_ug_u_w_setPeek
  assign CAN_FIRE_RL_cpu_imem_ug_u_w_setPeek = cpu$imem_master_wvalid ;
  assign WILL_FIRE_RL_cpu_imem_ug_u_w_setPeek = cpu$imem_master_wvalid ;

  // rule RL_cpu_imem_ug_u_w_warnDoDrop
  assign CAN_FIRE_RL_cpu_imem_ug_u_w_warnDoDrop =
	     cpu_imem_ug_u_w_dropWire$whas && !cpu$imem_master_wvalid ;
  assign WILL_FIRE_RL_cpu_imem_ug_u_w_warnDoDrop =
	     CAN_FIRE_RL_cpu_imem_ug_u_w_warnDoDrop ;

  // rule RL_cpu_imem_ug_u_w_doDrop
  assign CAN_FIRE_RL_cpu_imem_ug_u_w_doDrop =
	     cpu$imem_master_wvalid && cpu_imem_ug_u_w_dropWire$whas ;
  assign WILL_FIRE_RL_cpu_imem_ug_u_w_doDrop =
	     CAN_FIRE_RL_cpu_imem_ug_u_w_doDrop ;

  // rule RL_cpu_imem_w_forwardReady
  assign CAN_FIRE_RL_cpu_imem_w_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_cpu_imem_w_forwardReady = 1'd1 ;

  // rule RL_tagController_passCacheWrite
  assign CAN_FIRE_RL_tagController_passCacheWrite =
	     tagController_tagCon$RDY_cache_request_put &&
	     tagController_shimSlave_awff$EMPTY_N &&
	     tagController_shimSlave_wff$EMPTY_N &&
	     tagController_limiter$FULL_N &&
	     (!tagController_shimSlave_arff$EMPTY_N || x__h4856 < 5'd4) ;
  assign WILL_FIRE_RL_tagController_passCacheWrite =
	     CAN_FIRE_RL_tagController_passCacheWrite &&
	     !WILL_FIRE_RL_tagController_passCacheRead ;

  // rule RL_tagController_passCacheRead
  assign CAN_FIRE_RL_tagController_passCacheRead =
	     tagController_tagCon$RDY_cache_request_put &&
	     tagController_shimSlave_arff$EMPTY_N &&
	     tagController_limiter$FULL_N &&
	     (!tagController_shimSlave_awff$EMPTY_N || x__h7610 < 5'd4) ;
  assign WILL_FIRE_RL_tagController_passCacheRead =
	     CAN_FIRE_RL_tagController_passCacheRead ;

  // rule RL_tagController_passCacheResponse
  assign CAN_FIRE_RL_tagController_passCacheResponse =
	     tagController_tagCon$RDY_cache_response_get &&
	     tagController_limiter$EMPTY_N ;
  assign WILL_FIRE_RL_tagController_passCacheResponse =
	     CAN_FIRE_RL_tagController_passCacheResponse ;

  // rule RL_tagController_passMemoryRequest
  assign CAN_FIRE_RL_tagController_passMemoryRequest =
	     tagController_tagCon$RDY_memory_request_get ;
  assign WILL_FIRE_RL_tagController_passMemoryRequest =
	     tagController_tagCon$RDY_memory_request_get ;

  // rule RL_tagController_passMemoryResponseWrite
  assign CAN_FIRE_RL_tagController_passMemoryResponseWrite =
	     tagController_tagCon$RDY_memory_response_put &&
	     tagController_shimMaster_bff$EMPTY_N ;
  assign WILL_FIRE_RL_tagController_passMemoryResponseWrite =
	     CAN_FIRE_RL_tagController_passMemoryResponseWrite &&
	     !WILL_FIRE_RL_tagController_passMemoryResponseRead ;

  // rule RL_tagController_passMemoryResponseRead
  assign CAN_FIRE_RL_tagController_passMemoryResponseRead =
	     tagController_tagCon$RDY_memory_response_put &&
	     tagController_shimMaster_rff$EMPTY_N ;
  assign WILL_FIRE_RL_tagController_passMemoryResponseRead =
	     CAN_FIRE_RL_tagController_passMemoryResponseRead ;

  // rule RL_deburst_debug_handle_write_rsp
  assign CAN_FIRE_RL_deburst_debug_handle_write_rsp =
	     deburst_debug_countWriteRspFF$EMPTY_N &&
	     deburst_debug_outShim_bff$EMPTY_N &&
	     (!deburst_debug_countWriteRspFF_first__69_ULE_de_ETC___d471 ||
	      !deburst_debug_inSerial_shim_bff_rv[6]) ;
  assign WILL_FIRE_RL_deburst_debug_handle_write_rsp =
	     CAN_FIRE_RL_deburst_debug_handle_write_rsp ;

  // rule RL_deburst_debug_forward_read_rsp
  assign CAN_FIRE_RL_deburst_debug_forward_read_rsp =
	     !deburst_debug_inSerial_shim_rff_rv[73] &&
	     deburst_debug_lastReadRspFF$EMPTY_N &&
	     deburst_debug_outShim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_deburst_debug_forward_read_rsp =
	     CAN_FIRE_RL_deburst_debug_forward_read_rsp ;

  // rule RL_deburst_debug_inSerial_takeAW
  assign CAN_FIRE_RL_deburst_debug_inSerial_takeAW =
	     deburst_debug_inShim_awff$EMPTY_N &&
	     !deburst_debug_inSerial_shim_awff_rv[97] &&
	     deburst_debug_inSerial_state == 2'd0 &&
	     (deburst_debug_inSerial_lastWasRead ||
	      !deburst_debug_inShim_arff$EMPTY_N) ;
  assign WILL_FIRE_RL_deburst_debug_inSerial_takeAW =
	     CAN_FIRE_RL_deburst_debug_inSerial_takeAW ;

  // rule RL_deburst_debug_inSerial_takeAR
  assign CAN_FIRE_RL_deburst_debug_inSerial_takeAR =
	     deburst_debug_inShim_arff$EMPTY_N &&
	     !deburst_debug_inSerial_shim_arff_rv[97] &&
	     deburst_debug_inSerial_state == 2'd0 &&
	     (!deburst_debug_inSerial_lastWasRead ||
	      !deburst_debug_inShim_awff$EMPTY_N ||
	      !deburst_debug_inShim_wff$EMPTY_N) ;
  assign WILL_FIRE_RL_deburst_debug_inSerial_takeAR =
	     CAN_FIRE_RL_deburst_debug_inSerial_takeAR &&
	     !WILL_FIRE_RL_deburst_debug_inSerial_takeAW ;

  // rule RL_deburst_debug_forward_read_req
  assign CAN_FIRE_RL_deburst_debug_forward_read_req =
	     deburst_debug_inSerial_shim_arff_rv$port1__read[97] &&
	     deburst_debug_outShim_arff$FULL_N &&
	     deburst_debug_lastReadRspFF$FULL_N ;
  assign WILL_FIRE_RL_deburst_debug_forward_read_req =
	     CAN_FIRE_RL_deburst_debug_forward_read_req ;

  // rule RL_deburst_debug_inSerial_takeW
  assign CAN_FIRE_RL_deburst_debug_inSerial_takeW =
	     deburst_debug_inShim_wff$EMPTY_N &&
	     !deburst_debug_inSerial_shim_wff_rv[75] &&
	     deburst_debug_inSerial_state$port1__read == 2'd1 ;
  assign WILL_FIRE_RL_deburst_debug_inSerial_takeW =
	     CAN_FIRE_RL_deburst_debug_inSerial_takeW ;

  // rule RL_deburst_debug_forward_write_req
  assign CAN_FIRE_RL_deburst_debug_forward_write_req =
	     deburst_debug_inSerial_shim_awff_rv$port1__read[97] &&
	     deburst_debug_inSerial_shim_wff_rv$port1__read[75] &&
	     deburst_debug_outShim_awff$FULL_N &&
	     deburst_debug_outShim_wff$FULL_N &&
	     (!deburst_debug_inSerial_shim_wff_rv$port1__read[2] ||
	      deburst_debug_countWriteRspFF$FULL_N) ;
  assign WILL_FIRE_RL_deburst_debug_forward_write_req =
	     CAN_FIRE_RL_deburst_debug_forward_write_req ;

  // rule RL_deburst_debug_inSerial_takeB
  assign CAN_FIRE_RL_deburst_debug_inSerial_takeB =
	     deburst_debug_inSerial_shim_bff_rv$port1__read[6] &&
	     deburst_debug_inShim_bff$FULL_N ;
  assign WILL_FIRE_RL_deburst_debug_inSerial_takeB =
	     CAN_FIRE_RL_deburst_debug_inSerial_takeB ;

  // rule RL_deburst_debug_inSerial_takeR
  assign CAN_FIRE_RL_deburst_debug_inSerial_takeR =
	     deburst_debug_inSerial_shim_rff_rv$port1__read[73] &&
	     deburst_debug_inShim_rff$FULL_N ;
  assign WILL_FIRE_RL_deburst_debug_inSerial_takeR =
	     CAN_FIRE_RL_deburst_debug_inSerial_takeR ;

  // rule __me_check_42
  assign CAN_FIRE___me_check_42 = 1'b1 ;
  assign WILL_FIRE___me_check_42 = 1'b1 ;

  // rule RL_deburst_dm_inSerial_takeAW
  assign CAN_FIRE_RL_deburst_dm_inSerial_takeAW =
	     deburst_dm_inShim_awff$EMPTY_N &&
	     !deburst_dm_inSerial_shim_awff_rv[97] &&
	     deburst_dm_inSerial_state == 2'd0 &&
	     (deburst_dm_inSerial_lastWasRead ||
	      !deburst_dm_inShim_arff$EMPTY_N) ;
  assign WILL_FIRE_RL_deburst_dm_inSerial_takeAW =
	     CAN_FIRE_RL_deburst_dm_inSerial_takeAW &&
	     !dm_mem_tap$master_awvalid ;

  // rule RL_connect_arflit_1
  assign CAN_FIRE_RL_connect_arflit_1 = dm_mem_tap$master_arvalid ;
  assign WILL_FIRE_RL_connect_arflit_1 = dm_mem_tap$master_arvalid ;

  // rule RL_deburst_dm_inSerial_takeAR
  assign CAN_FIRE_RL_deburst_dm_inSerial_takeAR =
	     deburst_dm_inShim_arff$EMPTY_N &&
	     !deburst_dm_inSerial_shim_arff_rv[97] &&
	     deburst_dm_inSerial_state == 2'd0 &&
	     (!deburst_dm_inSerial_lastWasRead ||
	      !deburst_dm_inShim_awff$EMPTY_N ||
	      !deburst_dm_inShim_wff$EMPTY_N) ;
  assign WILL_FIRE_RL_deburst_dm_inSerial_takeAR =
	     CAN_FIRE_RL_deburst_dm_inSerial_takeAR &&
	     !WILL_FIRE_RL_deburst_dm_inSerial_takeAW &&
	     !dm_mem_tap$master_arvalid ;

  // rule RL_connect_awflit_1
  assign CAN_FIRE_RL_connect_awflit_1 = dm_mem_tap$master_awvalid ;
  assign WILL_FIRE_RL_connect_awflit_1 = dm_mem_tap$master_awvalid ;

  // rule RL_connect_wflit_1
  assign CAN_FIRE_RL_connect_wflit_1 = dm_mem_tap$master_wvalid ;
  assign WILL_FIRE_RL_connect_wflit_1 = dm_mem_tap$master_wvalid ;

  // rule RL_deburst_dm_inSerial_takeW
  assign CAN_FIRE_RL_deburst_dm_inSerial_takeW =
	     deburst_dm_inShim_wff$EMPTY_N &&
	     !deburst_dm_inSerial_shim_wff_rv[75] &&
	     deburst_dm_inSerial_state$port1__read == 2'd1 ;
  assign WILL_FIRE_RL_deburst_dm_inSerial_takeW =
	     CAN_FIRE_RL_deburst_dm_inSerial_takeW &&
	     !dm_mem_tap$master_wvalid ;

  // rule RL_dm_master_nonsynth_canAW
  assign CAN_FIRE_RL_dm_master_nonsynth_canAW = 1'b1 ;
  assign WILL_FIRE_RL_dm_master_nonsynth_canAW = 1'b1 ;

  // rule RL_dm_master_nonsynth_canW
  assign CAN_FIRE_RL_dm_master_nonsynth_canW = 1'd1 ;
  assign WILL_FIRE_RL_dm_master_nonsynth_canW = 1'd1 ;

  // rule RL_dm_master_nonsynth_canAR
  assign CAN_FIRE_RL_dm_master_nonsynth_canAR = 1'b1 ;
  assign WILL_FIRE_RL_dm_master_nonsynth_canAR = 1'b1 ;

  // rule RL_dm_master_nonsynth_canB
  assign CAN_FIRE_RL_dm_master_nonsynth_canB = 1'd1 ;
  assign WILL_FIRE_RL_dm_master_nonsynth_canB = 1'd1 ;

  // rule RL_deburst_dm_handle_write_rsp
  assign CAN_FIRE_RL_deburst_dm_handle_write_rsp =
	     deburst_dm_countWriteRspFF$EMPTY_N &&
	     deburst_dm_outShim_bff$EMPTY_N &&
	     (!deburst_dm_countWriteRspFF_first__56_ULE_debur_ETC___d658 ||
	      !deburst_dm_inSerial_shim_bff_rv[6]) ;
  assign WILL_FIRE_RL_deburst_dm_handle_write_rsp =
	     CAN_FIRE_RL_deburst_dm_handle_write_rsp ;

  // rule RL_deburst_dm_inSerial_takeB
  assign CAN_FIRE_RL_deburst_dm_inSerial_takeB =
	     deburst_dm_inSerial_shim_bff_rv$port1__read[6] &&
	     deburst_dm_inShim_bff$FULL_N ;
  assign WILL_FIRE_RL_deburst_dm_inSerial_takeB =
	     CAN_FIRE_RL_deburst_dm_inSerial_takeB ;

  // rule RL_dm_master_nonsynth_canR
  assign CAN_FIRE_RL_dm_master_nonsynth_canR = 1'd1 ;
  assign WILL_FIRE_RL_dm_master_nonsynth_canR = 1'd1 ;

  // rule RL_deburst_dm_forward_read_rsp
  assign CAN_FIRE_RL_deburst_dm_forward_read_rsp =
	     !deburst_dm_inSerial_shim_rff_rv[73] &&
	     deburst_dm_lastReadRspFF$EMPTY_N &&
	     deburst_dm_outShim_rff$EMPTY_N ;
  assign WILL_FIRE_RL_deburst_dm_forward_read_rsp =
	     CAN_FIRE_RL_deburst_dm_forward_read_rsp ;

  // rule RL_deburst_dm_inSerial_takeR
  assign CAN_FIRE_RL_deburst_dm_inSerial_takeR =
	     deburst_dm_inSerial_shim_rff_rv$port1__read[73] &&
	     deburst_dm_inShim_rff$FULL_N ;
  assign WILL_FIRE_RL_deburst_dm_inSerial_takeR =
	     CAN_FIRE_RL_deburst_dm_inSerial_takeR ;

  // rule __me_check_61
  assign CAN_FIRE___me_check_61 = 1'b1 ;
  assign WILL_FIRE___me_check_61 = 1'b1 ;

  // rule RL_dm_master_nonsynth_consumeAW
  assign CAN_FIRE_RL_dm_master_nonsynth_consumeAW =
	     deburst_dm_outShim_awff$EMPTY_N &&
	     !dm_master_nonsynth_awFF_rv[97] &&
	     dm_master_nonsynth_takeUpperW$FULL_N &&
	     dm_master_nonsynth_awCanPeek$wget ;
  assign WILL_FIRE_RL_dm_master_nonsynth_consumeAW =
	     CAN_FIRE_RL_dm_master_nonsynth_consumeAW ;

  // rule RL_ssNoSynth_0_ar_forwardFlit
  assign CAN_FIRE_RL_ssNoSynth_0_ar_forwardFlit =
	     !tagController_shimSlave_arff$FULL_N ||
	     ssNoSynth_0_ar_buffer_firstValid$Q_OUT &&
	     (ssNoSynth_0_ar_buffer_ff$EMPTY_N ||
	      CAN_FIRE_RL_sink_selected_5) ;
  assign WILL_FIRE_RL_ssNoSynth_0_ar_forwardFlit =
	     CAN_FIRE_RL_ssNoSynth_0_ar_forwardFlit ;

  // rule RL_ssNoSynth_0_ar_dropFlit
  assign CAN_FIRE_RL_ssNoSynth_0_ar_dropFlit =
	     (ssNoSynth_0_ar_buffer_ff$EMPTY_N ||
	      CAN_FIRE_RL_sink_selected_5) &&
	     tagController_shimSlave_arff$FULL_N ;
  assign WILL_FIRE_RL_ssNoSynth_0_ar_dropFlit =
	     CAN_FIRE_RL_ssNoSynth_0_ar_dropFlit ;

  // rule RL_ssNoSynth_0_ar_buffer_enqueue
  assign CAN_FIRE_RL_ssNoSynth_0_ar_buffer_enqueue =
	     CAN_FIRE_RL_sink_selected_5 &&
	     (!CAN_FIRE_RL_ssNoSynth_0_ar_dropFlit ||
	      ssNoSynth_0_ar_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_ssNoSynth_0_ar_buffer_enqueue =
	     CAN_FIRE_RL_ssNoSynth_0_ar_buffer_enqueue ;

  // rule RL_ssNoSynth_0_ar_buffer_dequeue
  assign CAN_FIRE_RL_ssNoSynth_0_ar_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_0_ar_dropFlit &&
	     ssNoSynth_0_ar_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_ssNoSynth_0_ar_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_0_ar_buffer_dequeue ;

  // rule RL_ssNoSynth_1_ar_forwardFlit
  assign CAN_FIRE_RL_ssNoSynth_1_ar_forwardFlit =
	     ssNoSynth_1_ar_buffer_firstValid$Q_OUT &&
	     (ssNoSynth_1_ar_buffer_ff$EMPTY_N ||
	      CAN_FIRE_RL_sink_selected_6) ;
  assign WILL_FIRE_RL_ssNoSynth_1_ar_forwardFlit =
	     CAN_FIRE_RL_ssNoSynth_1_ar_forwardFlit ;

  // rule RL_ssNoSynth_1_ar_dropFlit
  assign CAN_FIRE_RL_ssNoSynth_1_ar_dropFlit =
	     (ssNoSynth_1_ar_buffer_ff$EMPTY_N ||
	      CAN_FIRE_RL_sink_selected_6) &&
	     near_mem_io$axi4_slave_arready ;
  assign WILL_FIRE_RL_ssNoSynth_1_ar_dropFlit =
	     CAN_FIRE_RL_ssNoSynth_1_ar_dropFlit ;

  // rule RL_ssNoSynth_1_ar_buffer_enqueue
  assign CAN_FIRE_RL_ssNoSynth_1_ar_buffer_enqueue =
	     CAN_FIRE_RL_sink_selected_6 &&
	     (!CAN_FIRE_RL_ssNoSynth_1_ar_dropFlit ||
	      ssNoSynth_1_ar_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_ssNoSynth_1_ar_buffer_enqueue =
	     CAN_FIRE_RL_ssNoSynth_1_ar_buffer_enqueue ;

  // rule RL_ssNoSynth_1_ar_buffer_dequeue
  assign CAN_FIRE_RL_ssNoSynth_1_ar_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_1_ar_dropFlit &&
	     ssNoSynth_1_ar_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_ssNoSynth_1_ar_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_1_ar_buffer_dequeue ;

  // rule RL_ssNoSynth_2_ar_forwardFlit
  assign CAN_FIRE_RL_ssNoSynth_2_ar_forwardFlit =
	     ssNoSynth_2_ar_buffer_firstValid$Q_OUT &&
	     (ssNoSynth_2_ar_buffer_ff$EMPTY_N ||
	      CAN_FIRE_RL_sink_selected_7) ;
  assign WILL_FIRE_RL_ssNoSynth_2_ar_forwardFlit =
	     CAN_FIRE_RL_ssNoSynth_2_ar_forwardFlit ;

  // rule RL_ssNoSynth_2_ar_dropFlit
  assign CAN_FIRE_RL_ssNoSynth_2_ar_dropFlit =
	     (ssNoSynth_2_ar_buffer_ff$EMPTY_N ||
	      CAN_FIRE_RL_sink_selected_7) &&
	     plic$axi4_slave_arready ;
  assign WILL_FIRE_RL_ssNoSynth_2_ar_dropFlit =
	     CAN_FIRE_RL_ssNoSynth_2_ar_dropFlit ;

  // rule RL_ssNoSynth_2_ar_buffer_enqueue
  assign CAN_FIRE_RL_ssNoSynth_2_ar_buffer_enqueue =
	     CAN_FIRE_RL_sink_selected_7 &&
	     (!CAN_FIRE_RL_ssNoSynth_2_ar_dropFlit ||
	      ssNoSynth_2_ar_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_ssNoSynth_2_ar_buffer_enqueue =
	     CAN_FIRE_RL_ssNoSynth_2_ar_buffer_enqueue ;

  // rule RL_ssNoSynth_2_ar_buffer_dequeue
  assign CAN_FIRE_RL_ssNoSynth_2_ar_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_2_ar_dropFlit &&
	     ssNoSynth_2_ar_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_ssNoSynth_2_ar_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_2_ar_buffer_dequeue ;

  // rule RL_split_0_putFirst
  assign CAN_FIRE_RL_split_0_putFirst =
	     split_0_doPut_whas__449_AND_split_0_doPut_wget_ETC___d1456 &&
	     split_0_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_split_0_putFirst = CAN_FIRE_RL_split_0_putFirst ;

  // rule RL_ssNoSynth_0_aw_forwardFlit
  assign CAN_FIRE_RL_ssNoSynth_0_aw_forwardFlit =
	     !tagController_shimSlave_awff$FULL_N ||
	     ssNoSynth_0_aw_buffer_firstValid$Q_OUT &&
	     (ssNoSynth_0_aw_buffer_ff$EMPTY_N ||
	      MUX_split_0_flitLeft$write_1__SEL_2) ;
  assign WILL_FIRE_RL_ssNoSynth_0_aw_forwardFlit =
	     CAN_FIRE_RL_ssNoSynth_0_aw_forwardFlit ;

  // rule RL_ssNoSynth_0_aw_dropFlit
  assign CAN_FIRE_RL_ssNoSynth_0_aw_dropFlit =
	     (ssNoSynth_0_aw_buffer_ff$EMPTY_N ||
	      MUX_split_0_flitLeft$write_1__SEL_2) &&
	     tagController_shimSlave_awff$FULL_N ;
  assign WILL_FIRE_RL_ssNoSynth_0_aw_dropFlit =
	     CAN_FIRE_RL_ssNoSynth_0_aw_dropFlit ;

  // rule RL_ssNoSynth_0_aw_buffer_enqueue
  assign CAN_FIRE_RL_ssNoSynth_0_aw_buffer_enqueue =
	     MUX_split_0_flitLeft$write_1__SEL_2 &&
	     (!CAN_FIRE_RL_ssNoSynth_0_aw_dropFlit ||
	      ssNoSynth_0_aw_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_ssNoSynth_0_aw_buffer_enqueue =
	     CAN_FIRE_RL_ssNoSynth_0_aw_buffer_enqueue ;

  // rule RL_ssNoSynth_0_aw_buffer_dequeue
  assign CAN_FIRE_RL_ssNoSynth_0_aw_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_0_aw_dropFlit &&
	     ssNoSynth_0_aw_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_ssNoSynth_0_aw_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_0_aw_buffer_dequeue ;

  // rule RL_split_0_putOther
  assign CAN_FIRE_RL_split_0_putOther =
	     CAN_FIRE_RL_sink_selected &&
	     (!split_0_doPut$wget[245] || ssNoSynth_0_w_buffer_ff$FULL_N) &&
	     split_0_flitLeft != 8'd0 ;
  assign WILL_FIRE_RL_split_0_putOther = CAN_FIRE_RL_split_0_putOther ;

  // rule RL_ssNoSynth_0_w_forwardFlit
  assign CAN_FIRE_RL_ssNoSynth_0_w_forwardFlit =
	     !tagController_shimSlave_wff$FULL_N ||
	     ssNoSynth_0_w_buffer_firstValid$Q_OUT &&
	     (ssNoSynth_0_w_buffer_ff$EMPTY_N ||
	      ssNoSynth_0_w_buffer_enqw$whas) ;
  assign WILL_FIRE_RL_ssNoSynth_0_w_forwardFlit =
	     CAN_FIRE_RL_ssNoSynth_0_w_forwardFlit ;

  // rule RL_ssNoSynth_0_w_dropFlit
  assign CAN_FIRE_RL_ssNoSynth_0_w_dropFlit =
	     (ssNoSynth_0_w_buffer_ff$EMPTY_N ||
	      ssNoSynth_0_w_buffer_enqw$whas) &&
	     tagController_shimSlave_wff$FULL_N ;
  assign WILL_FIRE_RL_ssNoSynth_0_w_dropFlit =
	     CAN_FIRE_RL_ssNoSynth_0_w_dropFlit ;

  // rule RL_ssNoSynth_0_w_buffer_enqueue
  assign CAN_FIRE_RL_ssNoSynth_0_w_buffer_enqueue =
	     ssNoSynth_0_w_buffer_enqw$whas &&
	     (!CAN_FIRE_RL_ssNoSynth_0_w_dropFlit ||
	      ssNoSynth_0_w_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_ssNoSynth_0_w_buffer_enqueue =
	     CAN_FIRE_RL_ssNoSynth_0_w_buffer_enqueue ;

  // rule RL_ssNoSynth_0_w_buffer_dequeue
  assign CAN_FIRE_RL_ssNoSynth_0_w_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_0_w_dropFlit &&
	     ssNoSynth_0_w_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_ssNoSynth_0_w_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_0_w_buffer_dequeue ;

  // rule RL_split_1_putFirst
  assign CAN_FIRE_RL_split_1_putFirst =
	     split_1_doPut_whas__478_AND_split_1_doPut_wget_ETC___d1485 &&
	     split_1_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_split_1_putFirst = CAN_FIRE_RL_split_1_putFirst ;

  // rule RL_ssNoSynth_1_aw_forwardFlit
  assign CAN_FIRE_RL_ssNoSynth_1_aw_forwardFlit =
	     ssNoSynth_1_aw_buffer_firstValid$Q_OUT &&
	     (ssNoSynth_1_aw_buffer_ff$EMPTY_N ||
	      MUX_split_1_flitLeft$write_1__SEL_2) ;
  assign WILL_FIRE_RL_ssNoSynth_1_aw_forwardFlit =
	     CAN_FIRE_RL_ssNoSynth_1_aw_forwardFlit ;

  // rule RL_ssNoSynth_1_aw_dropFlit
  assign CAN_FIRE_RL_ssNoSynth_1_aw_dropFlit =
	     (ssNoSynth_1_aw_buffer_ff$EMPTY_N ||
	      MUX_split_1_flitLeft$write_1__SEL_2) &&
	     near_mem_io$axi4_slave_awready ;
  assign WILL_FIRE_RL_ssNoSynth_1_aw_dropFlit =
	     CAN_FIRE_RL_ssNoSynth_1_aw_dropFlit ;

  // rule RL_ssNoSynth_1_aw_buffer_enqueue
  assign CAN_FIRE_RL_ssNoSynth_1_aw_buffer_enqueue =
	     MUX_split_1_flitLeft$write_1__SEL_2 &&
	     (!CAN_FIRE_RL_ssNoSynth_1_aw_dropFlit ||
	      ssNoSynth_1_aw_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_ssNoSynth_1_aw_buffer_enqueue =
	     CAN_FIRE_RL_ssNoSynth_1_aw_buffer_enqueue ;

  // rule RL_ssNoSynth_1_aw_buffer_dequeue
  assign CAN_FIRE_RL_ssNoSynth_1_aw_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_1_aw_dropFlit &&
	     ssNoSynth_1_aw_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_ssNoSynth_1_aw_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_1_aw_buffer_dequeue ;

  // rule RL_split_1_putOther
  assign CAN_FIRE_RL_split_1_putOther =
	     CAN_FIRE_RL_sink_selected_1 &&
	     (!split_1_doPut$wget[245] || ssNoSynth_1_w_buffer_ff$FULL_N) &&
	     split_1_flitLeft != 8'd0 ;
  assign WILL_FIRE_RL_split_1_putOther = CAN_FIRE_RL_split_1_putOther ;

  // rule RL_ssNoSynth_1_w_forwardFlit
  assign CAN_FIRE_RL_ssNoSynth_1_w_forwardFlit =
	     ssNoSynth_1_w_buffer_firstValid$Q_OUT &&
	     (ssNoSynth_1_w_buffer_ff$EMPTY_N ||
	      ssNoSynth_1_w_buffer_enqw$whas) ;
  assign WILL_FIRE_RL_ssNoSynth_1_w_forwardFlit =
	     CAN_FIRE_RL_ssNoSynth_1_w_forwardFlit ;

  // rule RL_ssNoSynth_1_w_dropFlit
  assign CAN_FIRE_RL_ssNoSynth_1_w_dropFlit =
	     (ssNoSynth_1_w_buffer_ff$EMPTY_N ||
	      ssNoSynth_1_w_buffer_enqw$whas) &&
	     near_mem_io$axi4_slave_wready ;
  assign WILL_FIRE_RL_ssNoSynth_1_w_dropFlit =
	     CAN_FIRE_RL_ssNoSynth_1_w_dropFlit ;

  // rule RL_ssNoSynth_1_w_buffer_enqueue
  assign CAN_FIRE_RL_ssNoSynth_1_w_buffer_enqueue =
	     ssNoSynth_1_w_buffer_enqw$whas &&
	     (!CAN_FIRE_RL_ssNoSynth_1_w_dropFlit ||
	      ssNoSynth_1_w_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_ssNoSynth_1_w_buffer_enqueue =
	     CAN_FIRE_RL_ssNoSynth_1_w_buffer_enqueue ;

  // rule RL_ssNoSynth_1_w_buffer_dequeue
  assign CAN_FIRE_RL_ssNoSynth_1_w_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_1_w_dropFlit &&
	     ssNoSynth_1_w_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_ssNoSynth_1_w_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_1_w_buffer_dequeue ;

  // rule RL_split_2_putFirst
  assign CAN_FIRE_RL_split_2_putFirst =
	     split_2_doPut_whas__507_AND_split_2_doPut_wget_ETC___d1514 &&
	     split_2_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_split_2_putFirst = CAN_FIRE_RL_split_2_putFirst ;

  // rule RL_ssNoSynth_2_aw_forwardFlit
  assign CAN_FIRE_RL_ssNoSynth_2_aw_forwardFlit =
	     ssNoSynth_2_aw_buffer_firstValid$Q_OUT &&
	     (ssNoSynth_2_aw_buffer_ff$EMPTY_N ||
	      MUX_split_2_flitLeft$write_1__SEL_2) ;
  assign WILL_FIRE_RL_ssNoSynth_2_aw_forwardFlit =
	     CAN_FIRE_RL_ssNoSynth_2_aw_forwardFlit ;

  // rule RL_ssNoSynth_2_aw_dropFlit
  assign CAN_FIRE_RL_ssNoSynth_2_aw_dropFlit =
	     (ssNoSynth_2_aw_buffer_ff$EMPTY_N ||
	      MUX_split_2_flitLeft$write_1__SEL_2) &&
	     plic$axi4_slave_awready ;
  assign WILL_FIRE_RL_ssNoSynth_2_aw_dropFlit =
	     CAN_FIRE_RL_ssNoSynth_2_aw_dropFlit ;

  // rule RL_ssNoSynth_2_aw_buffer_enqueue
  assign CAN_FIRE_RL_ssNoSynth_2_aw_buffer_enqueue =
	     MUX_split_2_flitLeft$write_1__SEL_2 &&
	     (!CAN_FIRE_RL_ssNoSynth_2_aw_dropFlit ||
	      ssNoSynth_2_aw_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_ssNoSynth_2_aw_buffer_enqueue =
	     CAN_FIRE_RL_ssNoSynth_2_aw_buffer_enqueue ;

  // rule RL_ssNoSynth_2_aw_buffer_dequeue
  assign CAN_FIRE_RL_ssNoSynth_2_aw_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_2_aw_dropFlit &&
	     ssNoSynth_2_aw_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_ssNoSynth_2_aw_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_2_aw_buffer_dequeue ;

  // rule RL_split_2_putOther
  assign CAN_FIRE_RL_split_2_putOther =
	     CAN_FIRE_RL_sink_selected_2 &&
	     (!split_2_doPut$wget[245] || ssNoSynth_2_w_buffer_ff$FULL_N) &&
	     split_2_flitLeft != 8'd0 ;
  assign WILL_FIRE_RL_split_2_putOther = CAN_FIRE_RL_split_2_putOther ;

  // rule RL_ssNoSynth_2_w_forwardFlit
  assign CAN_FIRE_RL_ssNoSynth_2_w_forwardFlit =
	     ssNoSynth_2_w_buffer_firstValid$Q_OUT &&
	     (ssNoSynth_2_w_buffer_ff$EMPTY_N ||
	      ssNoSynth_2_w_buffer_enqw$whas) ;
  assign WILL_FIRE_RL_ssNoSynth_2_w_forwardFlit =
	     CAN_FIRE_RL_ssNoSynth_2_w_forwardFlit ;

  // rule RL_ssNoSynth_2_w_dropFlit
  assign CAN_FIRE_RL_ssNoSynth_2_w_dropFlit =
	     (ssNoSynth_2_w_buffer_ff$EMPTY_N ||
	      ssNoSynth_2_w_buffer_enqw$whas) &&
	     plic$axi4_slave_wready ;
  assign WILL_FIRE_RL_ssNoSynth_2_w_dropFlit =
	     CAN_FIRE_RL_ssNoSynth_2_w_dropFlit ;

  // rule RL_ssNoSynth_2_w_buffer_enqueue
  assign CAN_FIRE_RL_ssNoSynth_2_w_buffer_enqueue =
	     ssNoSynth_2_w_buffer_enqw$whas &&
	     (!CAN_FIRE_RL_ssNoSynth_2_w_dropFlit ||
	      ssNoSynth_2_w_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_ssNoSynth_2_w_buffer_enqueue =
	     CAN_FIRE_RL_ssNoSynth_2_w_buffer_enqueue ;

  // rule RL_ssNoSynth_2_w_buffer_dequeue
  assign CAN_FIRE_RL_ssNoSynth_2_w_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_2_w_dropFlit &&
	     ssNoSynth_2_w_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_ssNoSynth_2_w_buffer_dequeue =
	     CAN_FIRE_RL_ssNoSynth_2_w_buffer_dequeue ;

  // rule RL_ifcs_0_drainNoRouteResponse
  assign CAN_FIRE_RL_ifcs_0_drainNoRouteResponse =
	     msNoSynth_0_b_buffer_ff$FULL_N && ifcs_0_noRouteRsp$EMPTY_N ;
  assign WILL_FIRE_RL_ifcs_0_drainNoRouteResponse =
	     CAN_FIRE_RL_ifcs_0_drainNoRouteResponse ;

  // rule RL_checkSinkReady_3
  assign CAN_FIRE_RL_checkSinkReady_3 = 1'd1 ;
  assign WILL_FIRE_RL_checkSinkReady_3 = 1'd1 ;

  // rule RL_ifcs_1_firstFlit
  assign CAN_FIRE_RL_ifcs_1_firstFlit =
	     dm_master_nonsynth_wCanPeek$wget &&
	     deburst_dm_outShim_wff$EMPTY_N &&
	     dm_master_nonsynth_takeUpperW_i_notEmpty__62_A_ETC___d1650 &&
	     ifcs_1_state == 2'd0 &&
	     IF_IF_merged_1_flitLeft_431_EQ_0_432_THEN_dm_m_ETC___d1680 ==
	     2'd1 ;
  assign WILL_FIRE_RL_ifcs_1_firstFlit = CAN_FIRE_RL_ifcs_1_firstFlit ;

  // rule RL_ifcs_1_followFlits
  assign CAN_FIRE_RL_ifcs_1_followFlits =
	     dm_master_nonsynth_wCanPeek$wget &&
	     deburst_dm_outShim_wff_i_notEmpty__61_AND_dm_m_ETC___d1703 &&
	     ifcs_1_state == 2'd1 ;
  assign WILL_FIRE_RL_ifcs_1_followFlits = CAN_FIRE_RL_ifcs_1_followFlits ;

  // rule RL_ifcs_1_nonRoutableFlit
  assign CAN_FIRE_RL_ifcs_1_nonRoutableFlit =
	     IF_merged_1_flitLeft_431_EQ_0_432_THEN_dm_mast_ETC___d1639 &&
	     (merged_1_flitLeft != 8'd0 ||
	      dm_master_nonsynth_awFF_rv$port1__read[97] &&
	      !ifcs_1_noRoute_inner_pendingReq) &&
	     ifcs_1_state == 2'd0 &&
	     IF_IF_merged_1_flitLeft_431_EQ_0_432_THEN_dm_m_ETC___d1680 !=
	     2'd1 ;
  assign WILL_FIRE_RL_ifcs_1_nonRoutableFlit =
	     CAN_FIRE_RL_ifcs_1_nonRoutableFlit ;

  // rule RL_ifcs_1_drainFlits
  assign CAN_FIRE_RL_ifcs_1_drainFlits =
	     IF_merged_1_flitLeft_431_EQ_0_432_THEN_dm_mast_ETC___d1639 &&
	     dm_master_nonsynth_wCanPeek$wget &&
	     deburst_dm_outShim_wff$EMPTY_N &&
	     ifcs_1_state == 2'd2 ;
  assign WILL_FIRE_RL_ifcs_1_drainFlits = CAN_FIRE_RL_ifcs_1_drainFlits ;

  // rule __me_check_176
  assign CAN_FIRE___me_check_176 = 1'b1 ;
  assign WILL_FIRE___me_check_176 = 1'b1 ;

  // rule RL_ifcs_1_drainNoRouteResponse
  assign CAN_FIRE_RL_ifcs_1_drainNoRouteResponse =
	     msNoSynth_1_b_buffer_ff$FULL_N && ifcs_1_noRouteRsp$EMPTY_N ;
  assign WILL_FIRE_RL_ifcs_1_drainNoRouteResponse =
	     CAN_FIRE_RL_ifcs_1_drainNoRouteResponse ;

  // rule RL_checkSinkReady_4
  assign CAN_FIRE_RL_checkSinkReady_4 = 1'd1 ;
  assign WILL_FIRE_RL_checkSinkReady_4 = 1'd1 ;

  // rule RL_craftReq_2
  assign CAN_FIRE_RL_craftReq_2 =
	     ifcs_0_routeBack$EMPTY_N && ifcs_0_rspBack$EMPTY_N ;
  assign WILL_FIRE_RL_craftReq_2 = CAN_FIRE_RL_craftReq_2 ;

  // rule RL_craftReq_3
  assign CAN_FIRE_RL_craftReq_3 =
	     ifcs_1_routeBack$EMPTY_N && ifcs_1_rspBack$EMPTY_N ;
  assign WILL_FIRE_RL_craftReq_3 = CAN_FIRE_RL_craftReq_3 ;

  // rule RL_craftReq_4
  assign CAN_FIRE_RL_craftReq_4 =
	     ifcs_2_routeBack$EMPTY_N && ifcs_2_rspBack$EMPTY_N ;
  assign WILL_FIRE_RL_craftReq_4 = CAN_FIRE_RL_craftReq_4 ;

  // rule RL_arbitrate_1
  assign CAN_FIRE_RL_arbitrate_1 =
	     reqWires_1_0_whas__017_AND_reqWires_1_0_wget___ETC___d2027 &&
	     !state_1 ;
  assign WILL_FIRE_RL_arbitrate_1 = CAN_FIRE_RL_arbitrate_1 ;

  // rule RL_source_selected_2
  assign CAN_FIRE_RL_source_selected_2 =
	     (!ifcs_0_routeBack$EMPTY_N || ifcs_0_rspBack$EMPTY_N) &&
	     !state_1 &&
	     sourceSelect_1_0$whas ;
  assign WILL_FIRE_RL_source_selected_2 = CAN_FIRE_RL_source_selected_2 ;

  // rule RL_burst_2
  assign CAN_FIRE_RL_burst_2 =
	     ifcs_0_rspBack$EMPTY_N && ifcs_0_routeBack$EMPTY_N &&
	     state_1_028_AND_activeSource_1_0_116_117_AND_i_ETC___d2119 ;
  assign WILL_FIRE_RL_burst_2 = CAN_FIRE_RL_burst_2 ;

  // rule RL_source_selected_3
  assign CAN_FIRE_RL_source_selected_3 =
	     (!ifcs_1_routeBack$EMPTY_N || ifcs_1_rspBack$EMPTY_N) &&
	     !state_1 &&
	     sourceSelect_1_1$whas ;
  assign WILL_FIRE_RL_source_selected_3 = CAN_FIRE_RL_source_selected_3 ;

  // rule RL_burst_3
  assign CAN_FIRE_RL_burst_3 =
	     ifcs_1_rspBack$EMPTY_N && ifcs_1_routeBack$EMPTY_N &&
	     state_1_028_AND_activeSource_1_1_149_150_AND_i_ETC___d2152 ;
  assign WILL_FIRE_RL_burst_3 = CAN_FIRE_RL_burst_3 ;

  // rule __me_check_208
  assign CAN_FIRE___me_check_208 = 1'b1 ;
  assign WILL_FIRE___me_check_208 = 1'b1 ;

  // rule RL_source_selected_4
  assign CAN_FIRE_RL_source_selected_4 =
	     (!ifcs_2_routeBack$EMPTY_N || ifcs_2_rspBack$EMPTY_N) &&
	     !state_1 &&
	     sourceSelect_1_2$whas ;
  assign WILL_FIRE_RL_source_selected_4 = CAN_FIRE_RL_source_selected_4 ;

  // rule RL_burst_4
  assign CAN_FIRE_RL_burst_4 =
	     ifcs_2_rspBack$EMPTY_N && ifcs_2_routeBack$EMPTY_N &&
	     state_1_028_AND_activeSource_1_2_183_184_AND_i_ETC___d2186 ;
  assign WILL_FIRE_RL_burst_4 = CAN_FIRE_RL_burst_4 ;

  // rule __me_check_206
  assign CAN_FIRE___me_check_206 = 1'b1 ;
  assign WILL_FIRE___me_check_206 = 1'b1 ;

  // rule __me_check_210
  assign CAN_FIRE___me_check_210 = 1'b1 ;
  assign WILL_FIRE___me_check_210 = 1'b1 ;

  // rule RL_sink_selected_3
  assign CAN_FIRE_RL_sink_selected_3 =
	     !CAN_FIRE_RL_ifcs_0_drainNoRouteResponse && flitToSink_1_0$whas ;
  assign WILL_FIRE_RL_sink_selected_3 = CAN_FIRE_RL_sink_selected_3 ;

  // rule RL_sink_selected_4
  assign CAN_FIRE_RL_sink_selected_4 =
	     !CAN_FIRE_RL_ifcs_1_drainNoRouteResponse && flitToSink_1_1$whas ;
  assign WILL_FIRE_RL_sink_selected_4 = CAN_FIRE_RL_sink_selected_4 ;

  // rule __me_check_212
  assign CAN_FIRE___me_check_212 = 1'b1 ;
  assign WILL_FIRE___me_check_212 = 1'b1 ;

  // rule RL_ifcs_0_forwardRsp
  assign CAN_FIRE_RL_ifcs_0_forwardRsp =
	     msNoSynth_0_b_buffer_ff$FULL_N && CAN_FIRE_RL_sink_selected_3 &&
	     !ifcs_0_noRouteRsp$EMPTY_N ;
  assign WILL_FIRE_RL_ifcs_0_forwardRsp = CAN_FIRE_RL_ifcs_0_forwardRsp ;

  // rule RL_msNoSynth_0_b_forwardFlit
  assign CAN_FIRE_RL_msNoSynth_0_b_forwardFlit =
	     msNoSynth_0_b_buffer_firstValid$Q_OUT &&
	     (msNoSynth_0_b_buffer_ff$EMPTY_N ||
	      msNoSynth_0_b_buffer_enqw$whas) ;
  assign WILL_FIRE_RL_msNoSynth_0_b_forwardFlit =
	     CAN_FIRE_RL_msNoSynth_0_b_forwardFlit ;

  // rule RL_msNoSynth_0_b_dropFlit
  assign CAN_FIRE_RL_msNoSynth_0_b_dropFlit =
	     (msNoSynth_0_b_buffer_ff$EMPTY_N ||
	      msNoSynth_0_b_buffer_enqw$whas) &&
	     cpu$dmem_master_bready ;
  assign WILL_FIRE_RL_msNoSynth_0_b_dropFlit =
	     CAN_FIRE_RL_msNoSynth_0_b_dropFlit ;

  // rule RL_msNoSynth_0_b_buffer_enqueue
  assign CAN_FIRE_RL_msNoSynth_0_b_buffer_enqueue =
	     msNoSynth_0_b_buffer_enqw$whas &&
	     (!CAN_FIRE_RL_msNoSynth_0_b_dropFlit ||
	      msNoSynth_0_b_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_msNoSynth_0_b_buffer_enqueue =
	     CAN_FIRE_RL_msNoSynth_0_b_buffer_enqueue ;

  // rule RL_msNoSynth_0_b_buffer_dequeue
  assign CAN_FIRE_RL_msNoSynth_0_b_buffer_dequeue =
	     CAN_FIRE_RL_msNoSynth_0_b_dropFlit &&
	     msNoSynth_0_b_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_msNoSynth_0_b_buffer_dequeue =
	     CAN_FIRE_RL_msNoSynth_0_b_buffer_dequeue ;

  // rule RL_ifcs_1_forwardRsp
  assign CAN_FIRE_RL_ifcs_1_forwardRsp =
	     msNoSynth_1_b_buffer_ff$FULL_N && CAN_FIRE_RL_sink_selected_4 &&
	     !ifcs_1_noRouteRsp$EMPTY_N ;
  assign WILL_FIRE_RL_ifcs_1_forwardRsp = CAN_FIRE_RL_ifcs_1_forwardRsp ;

  // rule RL_msNoSynth_1_b_forwardFlit
  assign CAN_FIRE_RL_msNoSynth_1_b_forwardFlit =
	     !deburst_dm_outShim_bff$FULL_N ||
	     msNoSynth_1_b_buffer_firstValid$Q_OUT &&
	     (msNoSynth_1_b_buffer_ff$EMPTY_N ||
	      msNoSynth_1_b_buffer_enqw$whas) &&
	     deburst_dm_outShim_bff$FULL_N ;
  assign WILL_FIRE_RL_msNoSynth_1_b_forwardFlit =
	     CAN_FIRE_RL_msNoSynth_1_b_forwardFlit ;

  // rule RL_msNoSynth_1_b_dropFlit
  assign CAN_FIRE_RL_msNoSynth_1_b_dropFlit =
	     (msNoSynth_1_b_buffer_ff$EMPTY_N ||
	      msNoSynth_1_b_buffer_enqw$whas) &&
	     deburst_dm_outShim_bff$FULL_N ;
  assign WILL_FIRE_RL_msNoSynth_1_b_dropFlit =
	     CAN_FIRE_RL_msNoSynth_1_b_dropFlit ;

  // rule RL_msNoSynth_1_b_buffer_enqueue
  assign CAN_FIRE_RL_msNoSynth_1_b_buffer_enqueue =
	     msNoSynth_1_b_buffer_enqw$whas &&
	     (!CAN_FIRE_RL_msNoSynth_1_b_dropFlit ||
	      msNoSynth_1_b_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_msNoSynth_1_b_buffer_enqueue =
	     CAN_FIRE_RL_msNoSynth_1_b_buffer_enqueue ;

  // rule RL_msNoSynth_1_b_buffer_dequeue
  assign CAN_FIRE_RL_msNoSynth_1_b_buffer_dequeue =
	     CAN_FIRE_RL_msNoSynth_1_b_dropFlit &&
	     msNoSynth_1_b_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_msNoSynth_1_b_buffer_dequeue =
	     CAN_FIRE_RL_msNoSynth_1_b_buffer_dequeue ;

  // rule RL_ifcs_1_nonRoutableGenRsp
  assign CAN_FIRE_RL_ifcs_1_nonRoutableGenRsp =
	     IF_merged_1_flitLeft_431_EQ_0_432_THEN_dm_mast_ETC___d1639 &&
	     ifcs_1_noRoute_inner_pendingReq$port1__read &&
	     ifcs_1_noRouteRsp$FULL_N &&
	     dm_master_nonsynth_wCanPeek$wget &&
	     deburst_dm_outShim_wff$EMPTY_N ;
  assign WILL_FIRE_RL_ifcs_1_nonRoutableGenRsp =
	     CAN_FIRE_RL_ifcs_1_nonRoutableGenRsp ;

  // rule __me_check_174
  assign CAN_FIRE___me_check_174 = 1'b1 ;
  assign WILL_FIRE___me_check_174 = 1'b1 ;

  // rule __me_check_175
  assign CAN_FIRE___me_check_175 = 1'b1 ;
  assign WILL_FIRE___me_check_175 = 1'b1 ;

  // rule __me_check_178
  assign CAN_FIRE___me_check_178 = 1'b1 ;
  assign WILL_FIRE___me_check_178 = 1'b1 ;

  // rule RL_merged_1_genFirst
  assign CAN_FIRE_RL_merged_1_genFirst =
	     dm_master_nonsynth_awFF_rv$port1__read[97] &&
	     dm_master_nonsynth_wCanPeek$wget &&
	     merged_1_doDrop$whas &&
	     merged_1_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_merged_1_genFirst = CAN_FIRE_RL_merged_1_genFirst ;

  // rule RL_msNoSynth_1_aw_forwardReady
  assign CAN_FIRE_RL_msNoSynth_1_aw_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_msNoSynth_1_aw_forwardReady = 1'd1 ;

  // rule RL_merged_1_genOther
  assign CAN_FIRE_RL_merged_1_genOther =
	     dm_master_nonsynth_wCanPeek$wget &&
	     deburst_dm_outShim_wff$EMPTY_N &&
	     merged_1_doDrop$whas &&
	     merged_1_flitLeft != 8'd0 ;
  assign WILL_FIRE_RL_merged_1_genOther = CAN_FIRE_RL_merged_1_genOther ;

  // rule RL_msNoSynth_1_w_forwardReady
  assign CAN_FIRE_RL_msNoSynth_1_w_forwardReady =
	     !dm_master_nonsynth_wCanPeek$wget ||
	     !msNoSynth_1_w_dwReady$whas ||
	     deburst_dm_outShim_wff$EMPTY_N &&
	     dm_master_nonsynth_takeUpperW$EMPTY_N ;
  assign WILL_FIRE_RL_msNoSynth_1_w_forwardReady =
	     CAN_FIRE_RL_msNoSynth_1_w_forwardReady ;

  // rule RL_deburst_dm_forward_write_req
  assign CAN_FIRE_RL_deburst_dm_forward_write_req =
	     deburst_dm_inSerial_shim_awff_rv$port1__read[97] &&
	     deburst_dm_inSerial_shim_wff_rv$port1__read[75] &&
	     deburst_dm_outShim_awff$FULL_N &&
	     deburst_dm_outShim_wff$FULL_N &&
	     (!deburst_dm_inSerial_shim_wff_rv$port1__read[2] ||
	      deburst_dm_countWriteRspFF$FULL_N) ;
  assign WILL_FIRE_RL_deburst_dm_forward_write_req =
	     CAN_FIRE_RL_deburst_dm_forward_write_req ;

  // rule RL_ifcs_0_firstFlit_1
  assign CAN_FIRE_RL_ifcs_0_firstFlit_1 =
	     tagController_shimSlave_bff$EMPTY_N && ifcs_0_rspBack$FULL_N &&
	     ifcs_0_routeBack$FULL_N &&
	     !ifcs_0_state_1 ;
  assign WILL_FIRE_RL_ifcs_0_firstFlit_1 = CAN_FIRE_RL_ifcs_0_firstFlit_1 ;

  // rule RL_ifcs_0_followFlits_1
  assign CAN_FIRE_RL_ifcs_0_followFlits_1 =
	     tagController_shimSlave_bff$EMPTY_N && ifcs_0_rspBack$FULL_N &&
	     ifcs_0_state_1 ;
  assign WILL_FIRE_RL_ifcs_0_followFlits_1 =
	     CAN_FIRE_RL_ifcs_0_followFlits_1 ;

  // rule __me_check_181
  assign CAN_FIRE___me_check_181 = 1'b1 ;
  assign WILL_FIRE___me_check_181 = 1'b1 ;

  // rule RL_ssNoSynth_0_b_forwardReady
  assign CAN_FIRE_RL_ssNoSynth_0_b_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_ssNoSynth_0_b_forwardReady = 1'd1 ;

  // rule RL_ifcs_1_firstFlit_1
  assign CAN_FIRE_RL_ifcs_1_firstFlit_1 =
	     near_mem_io$axi4_slave_bvalid && ifcs_1_rspBack$FULL_N &&
	     ifcs_1_routeBack$FULL_N &&
	     !ifcs_1_state_1 ;
  assign WILL_FIRE_RL_ifcs_1_firstFlit_1 = CAN_FIRE_RL_ifcs_1_firstFlit_1 ;

  // rule RL_ifcs_1_followFlits_1
  assign CAN_FIRE_RL_ifcs_1_followFlits_1 =
	     near_mem_io$axi4_slave_bvalid && ifcs_1_rspBack$FULL_N &&
	     ifcs_1_state_1 ;
  assign WILL_FIRE_RL_ifcs_1_followFlits_1 =
	     CAN_FIRE_RL_ifcs_1_followFlits_1 ;

  // rule __me_check_183
  assign CAN_FIRE___me_check_183 = 1'b1 ;
  assign WILL_FIRE___me_check_183 = 1'b1 ;

  // rule RL_ssNoSynth_1_b_forwardReady
  assign CAN_FIRE_RL_ssNoSynth_1_b_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_ssNoSynth_1_b_forwardReady = 1'd1 ;

  // rule RL_ifcs_0_1_drainNoRouteResponse
  assign CAN_FIRE_RL_ifcs_0_1_drainNoRouteResponse =
	     msNoSynth_0_r_buffer_ff$FULL_N && ifcs_0_1_noRouteRsp$EMPTY_N ;
  assign WILL_FIRE_RL_ifcs_0_1_drainNoRouteResponse =
	     CAN_FIRE_RL_ifcs_0_1_drainNoRouteResponse ;

  // rule RL_checkSinkReady_8
  assign CAN_FIRE_RL_checkSinkReady_8 = 1'd1 ;
  assign WILL_FIRE_RL_checkSinkReady_8 = 1'd1 ;

  // rule RL_ifcs_1_1_firstFlit
  assign CAN_FIRE_RL_ifcs_1_1_firstFlit =
	     deburst_dm_outShim_arff$EMPTY_N &&
	     dm_master_nonsynth_arCanPeek$wget &&
	     ifcs_1_1_innerReq$FULL_N &&
	     ifcs_1_1_innerRoute$FULL_N &&
	     ifcs_1_1_state == 2'd0 &&
	     IF_deburst_dm_outShim_arff_first__16_BITS_92_T_ETC___d2315 ==
	     2'd1 ;
  assign WILL_FIRE_RL_ifcs_1_1_firstFlit = CAN_FIRE_RL_ifcs_1_1_firstFlit ;

  // rule RL_ifcs_1_1_followFlits
  assign CAN_FIRE_RL_ifcs_1_1_followFlits =
	     deburst_dm_outShim_arff$EMPTY_N &&
	     dm_master_nonsynth_arCanPeek$wget &&
	     ifcs_1_1_innerReq$FULL_N &&
	     ifcs_1_1_state == 2'd1 ;
  assign WILL_FIRE_RL_ifcs_1_1_followFlits =
	     CAN_FIRE_RL_ifcs_1_1_followFlits ;

  // rule RL_ifcs_1_1_nonRoutableFlit
  assign CAN_FIRE_RL_ifcs_1_1_nonRoutableFlit =
	     ifcs_1_1_noRoute_flitCount == 9'd0 &&
	     deburst_dm_outShim_arff$EMPTY_N &&
	     dm_master_nonsynth_arCanPeek$wget &&
	     ifcs_1_1_state == 2'd0 &&
	     IF_deburst_dm_outShim_arff_first__16_BITS_92_T_ETC___d2315 !=
	     2'd1 ;
  assign WILL_FIRE_RL_ifcs_1_1_nonRoutableFlit =
	     CAN_FIRE_RL_ifcs_1_1_nonRoutableFlit ;

  // rule RL_ifcs_1_1_drainFlits
  assign CAN_FIRE_RL_ifcs_1_1_drainFlits =
	     dm_master_nonsynth_arCanPeek$wget && ifcs_1_1_state == 2'd2 ;
  assign WILL_FIRE_RL_ifcs_1_1_drainFlits = CAN_FIRE_RL_ifcs_1_1_drainFlits ;

  // rule __me_check_223
  assign CAN_FIRE___me_check_223 = 1'b1 ;
  assign WILL_FIRE___me_check_223 = 1'b1 ;

  // rule RL_ifcs_1_1_drainNoRouteResponse
  assign CAN_FIRE_RL_ifcs_1_1_drainNoRouteResponse =
	     msNoSynth_1_r_buffer_ff$FULL_N && ifcs_1_1_noRouteRsp$EMPTY_N ;
  assign WILL_FIRE_RL_ifcs_1_1_drainNoRouteResponse =
	     CAN_FIRE_RL_ifcs_1_1_drainNoRouteResponse ;

  // rule RL_checkSinkReady_9
  assign CAN_FIRE_RL_checkSinkReady_9 = 1'd1 ;
  assign WILL_FIRE_RL_checkSinkReady_9 = 1'd1 ;

  // rule RL_craftReq_7
  assign CAN_FIRE_RL_craftReq_7 =
	     ifcs_0_1_routeBack$EMPTY_N && ifcs_0_1_rspBack$EMPTY_N ;
  assign WILL_FIRE_RL_craftReq_7 = CAN_FIRE_RL_craftReq_7 ;

  // rule RL_craftReq_8
  assign CAN_FIRE_RL_craftReq_8 =
	     ifcs_1_1_routeBack$EMPTY_N && ifcs_1_1_rspBack$EMPTY_N ;
  assign WILL_FIRE_RL_craftReq_8 = CAN_FIRE_RL_craftReq_8 ;

  // rule RL_craftReq_9
  assign CAN_FIRE_RL_craftReq_9 =
	     ifcs_2_1_routeBack$EMPTY_N && ifcs_2_1_rspBack$EMPTY_N ;
  assign WILL_FIRE_RL_craftReq_9 = CAN_FIRE_RL_craftReq_9 ;

  // rule RL_arbitrate_3
  assign CAN_FIRE_RL_arbitrate_3 =
	     reqWires_1_1_0_whas__643_AND_reqWires_1_1_0_wg_ETC___d2653 &&
	     !state_1_1_1 ;
  assign WILL_FIRE_RL_arbitrate_3 = CAN_FIRE_RL_arbitrate_3 ;

  // rule RL_source_selected_7
  assign CAN_FIRE_RL_source_selected_7 =
	     (!ifcs_0_1_routeBack$EMPTY_N || ifcs_0_1_rspBack$EMPTY_N) &&
	     !state_1_1_1 &&
	     MUX_activeSource_1_1_0$write_1__VAL_1 ;
  assign WILL_FIRE_RL_source_selected_7 = CAN_FIRE_RL_source_selected_7 ;

  // rule RL_burst_7
  assign CAN_FIRE_RL_burst_7 =
	     ifcs_0_1_rspBack$EMPTY_N && ifcs_0_1_routeBack$EMPTY_N &&
	     state_1_1_1_654_AND_activeSource_1_1_0_748_749_ETC___d2751 ;
  assign WILL_FIRE_RL_burst_7 = CAN_FIRE_RL_burst_7 ;

  // rule RL_source_selected_8
  assign CAN_FIRE_RL_source_selected_8 =
	     (!ifcs_1_1_routeBack$EMPTY_N || ifcs_1_1_rspBack$EMPTY_N) &&
	     !state_1_1_1 &&
	     MUX_activeSource_1_1_1_1$write_1__VAL_1 ;
  assign WILL_FIRE_RL_source_selected_8 = CAN_FIRE_RL_source_selected_8 ;

  // rule RL_burst_8
  assign CAN_FIRE_RL_burst_8 =
	     ifcs_1_1_rspBack$EMPTY_N && ifcs_1_1_routeBack$EMPTY_N &&
	     state_1_1_1_654_AND_activeSource_1_1_1_1_784_7_ETC___d2787 ;
  assign WILL_FIRE_RL_burst_8 = CAN_FIRE_RL_burst_8 ;

  // rule __me_check_255
  assign CAN_FIRE___me_check_255 = 1'b1 ;
  assign WILL_FIRE___me_check_255 = 1'b1 ;

  // rule RL_source_selected_9
  assign CAN_FIRE_RL_source_selected_9 =
	     (!ifcs_2_1_routeBack$EMPTY_N || ifcs_2_1_rspBack$EMPTY_N) &&
	     !state_1_1_1 &&
	     MUX_activeSource_1_1_2$write_1__VAL_1 ;
  assign WILL_FIRE_RL_source_selected_9 = CAN_FIRE_RL_source_selected_9 ;

  // rule RL_burst_9
  assign CAN_FIRE_RL_burst_9 =
	     ifcs_2_1_rspBack$EMPTY_N && ifcs_2_1_routeBack$EMPTY_N &&
	     state_1_1_1_654_AND_activeSource_1_1_2_820_821_ETC___d2823 ;
  assign WILL_FIRE_RL_burst_9 = CAN_FIRE_RL_burst_9 ;

  // rule __me_check_253
  assign CAN_FIRE___me_check_253 = 1'b1 ;
  assign WILL_FIRE___me_check_253 = 1'b1 ;

  // rule __me_check_257
  assign CAN_FIRE___me_check_257 = 1'b1 ;
  assign WILL_FIRE___me_check_257 = 1'b1 ;

  // rule RL_sink_selected_8
  assign CAN_FIRE_RL_sink_selected_8 =
	     !CAN_FIRE_RL_ifcs_0_1_drainNoRouteResponse &&
	     flitToSink_1_1_0$whas ;
  assign WILL_FIRE_RL_sink_selected_8 = CAN_FIRE_RL_sink_selected_8 ;

  // rule RL_sink_selected_9
  assign CAN_FIRE_RL_sink_selected_9 =
	     !CAN_FIRE_RL_ifcs_1_1_drainNoRouteResponse &&
	     flitToSink_1_1_1_1$whas ;
  assign WILL_FIRE_RL_sink_selected_9 = CAN_FIRE_RL_sink_selected_9 ;

  // rule __me_check_259
  assign CAN_FIRE___me_check_259 = 1'b1 ;
  assign WILL_FIRE___me_check_259 = 1'b1 ;

  // rule RL_ifcs_0_1_forwardRsp
  assign CAN_FIRE_RL_ifcs_0_1_forwardRsp =
	     msNoSynth_0_r_buffer_ff$FULL_N && CAN_FIRE_RL_sink_selected_8 &&
	     !ifcs_0_1_noRouteRsp$EMPTY_N ;
  assign WILL_FIRE_RL_ifcs_0_1_forwardRsp = CAN_FIRE_RL_ifcs_0_1_forwardRsp ;

  // rule RL_msNoSynth_0_r_forwardFlit
  assign CAN_FIRE_RL_msNoSynth_0_r_forwardFlit =
	     msNoSynth_0_r_buffer_firstValid$Q_OUT &&
	     (msNoSynth_0_r_buffer_ff$EMPTY_N ||
	      msNoSynth_0_r_buffer_enqw$whas) ;
  assign WILL_FIRE_RL_msNoSynth_0_r_forwardFlit =
	     CAN_FIRE_RL_msNoSynth_0_r_forwardFlit ;

  // rule RL_msNoSynth_0_r_dropFlit
  assign CAN_FIRE_RL_msNoSynth_0_r_dropFlit =
	     (msNoSynth_0_r_buffer_ff$EMPTY_N ||
	      msNoSynth_0_r_buffer_enqw$whas) &&
	     cpu$dmem_master_rready ;
  assign WILL_FIRE_RL_msNoSynth_0_r_dropFlit =
	     CAN_FIRE_RL_msNoSynth_0_r_dropFlit ;

  // rule RL_rl_relay_sw_interrupts
  assign CAN_FIRE_RL_rl_relay_sw_interrupts =
	     near_mem_io$RDY_get_sw_interrupt_req_get ;
  assign WILL_FIRE_RL_rl_relay_sw_interrupts =
	     near_mem_io$RDY_get_sw_interrupt_req_get ;

  // rule RL_rl_relay_timer_interrupts
  assign CAN_FIRE_RL_rl_relay_timer_interrupts =
	     near_mem_io$RDY_get_timer_interrupt_req_get ;
  assign WILL_FIRE_RL_rl_relay_timer_interrupts =
	     near_mem_io$RDY_get_timer_interrupt_req_get ;

  // rule RL_rl_relay_external_interrupts
  assign CAN_FIRE_RL_rl_relay_external_interrupts = 1'd1 ;
  assign WILL_FIRE_RL_rl_relay_external_interrupts = 1'd1 ;

  // rule RL_rl_cpu_hart0_reset_from_dm_start
  assign CAN_FIRE_RL_rl_cpu_hart0_reset_from_dm_start =
	     near_mem_io$RDY_server_reset_request_put &&
	     plic$RDY_server_reset_request_put &&
	     debug_module$RDY_hart0_reset_client_request_get &&
	     cpu$RDY_hart0_server_reset_request_put &&
	     f_reset_requestor$FULL_N ;
  assign WILL_FIRE_RL_rl_cpu_hart0_reset_from_dm_start =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_from_dm_start &&
	     !WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;

  // rule RL_rl_cpu_hart0_reset_complete
  assign CAN_FIRE_RL_rl_cpu_hart0_reset_complete =
	     near_mem_io$RDY_server_reset_response_get &&
	     plic$RDY_server_reset_response_get &&
	     cpu$RDY_hart0_server_reset_response_get &&
	     f_reset_requestor$EMPTY_N &&
	     (f_reset_requestor$D_OUT ||
	      debug_module$RDY_hart0_reset_client_response_put) &&
	     (!f_reset_requestor$D_OUT || f_reset_rsps$FULL_N) ;
  assign WILL_FIRE_RL_rl_cpu_hart0_reset_complete =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_complete ;

  // rule RL_cpu_imem_ug_u_ar_setPeek
  assign CAN_FIRE_RL_cpu_imem_ug_u_ar_setPeek = cpu$imem_master_arvalid ;
  assign WILL_FIRE_RL_cpu_imem_ug_u_ar_setPeek = cpu$imem_master_arvalid ;

  // rule RL_cpu_imem_ug_u_ar_warnDoDrop
  assign CAN_FIRE_RL_cpu_imem_ug_u_ar_warnDoDrop =
	     cpu_imem_ug_u_ar_dropWire$whas && !cpu$imem_master_arvalid ;
  assign WILL_FIRE_RL_cpu_imem_ug_u_ar_warnDoDrop =
	     CAN_FIRE_RL_cpu_imem_ug_u_ar_warnDoDrop ;

  // rule RL_cpu_imem_ug_u_ar_doDrop
  assign CAN_FIRE_RL_cpu_imem_ug_u_ar_doDrop =
	     cpu$imem_master_arvalid && cpu_imem_ug_u_ar_dropWire$whas ;
  assign WILL_FIRE_RL_cpu_imem_ug_u_ar_doDrop =
	     CAN_FIRE_RL_cpu_imem_ug_u_ar_doDrop ;

  // rule RL_cpu_imem_ar_forwardReady
  assign CAN_FIRE_RL_cpu_imem_ar_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_cpu_imem_ar_forwardReady = 1'd1 ;

  // rule RL_msNoSynth_0_r_buffer_enqueue
  assign CAN_FIRE_RL_msNoSynth_0_r_buffer_enqueue =
	     msNoSynth_0_r_buffer_enqw$whas &&
	     (!CAN_FIRE_RL_msNoSynth_0_r_dropFlit ||
	      msNoSynth_0_r_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_msNoSynth_0_r_buffer_enqueue =
	     CAN_FIRE_RL_msNoSynth_0_r_buffer_enqueue ;

  // rule RL_msNoSynth_0_r_buffer_dequeue
  assign CAN_FIRE_RL_msNoSynth_0_r_buffer_dequeue =
	     CAN_FIRE_RL_msNoSynth_0_r_dropFlit &&
	     msNoSynth_0_r_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_msNoSynth_0_r_buffer_dequeue =
	     CAN_FIRE_RL_msNoSynth_0_r_buffer_dequeue ;

  // rule RL_ifcs_0_firstFlit
  assign CAN_FIRE_RL_ifcs_0_firstFlit =
	     cpu$dmem_master_wvalid &&
	     IF_merged_0_flitLeft_413_EQ_0_414_THEN_cpu_dme_ETC___d1536 &&
	     ifcs_0_innerReq$FULL_N &&
	     ifcs_0_innerRoute$FULL_N &&
	     (IF_merged_0_flitLeft_413_EQ_0_414_THEN_NOT_cpu_ETC___d1543 ||
	      cpu$dmem_master_awvalid) &&
	     ifcs_0_state == 2'd0 &&
	     IF_IF_merged_0_flitLeft_413_EQ_0_414_THEN_cpu__ETC___d1576 ==
	     2'd1 ;
  assign WILL_FIRE_RL_ifcs_0_firstFlit = CAN_FIRE_RL_ifcs_0_firstFlit ;

  // rule RL_ifcs_0_followFlits
  assign CAN_FIRE_RL_ifcs_0_followFlits =
	     cpu$dmem_master_wvalid &&
	     IF_merged_0_flitLeft_413_EQ_0_414_THEN_cpu_dme_ETC___d1536 &&
	     ifcs_0_innerReq$FULL_N &&
	     (IF_merged_0_flitLeft_413_EQ_0_414_THEN_NOT_cpu_ETC___d1543 ||
	      cpu$dmem_master_awvalid) &&
	     ifcs_0_state == 2'd1 ;
  assign WILL_FIRE_RL_ifcs_0_followFlits = CAN_FIRE_RL_ifcs_0_followFlits ;

  // rule RL_ifcs_0_nonRoutableFlit
  assign CAN_FIRE_RL_ifcs_0_nonRoutableFlit =
	     IF_merged_0_flitLeft_413_EQ_0_414_THEN_cpu_dme_ETC___d1536 &&
	     IF_merged_0_flitLeft_413_EQ_0_414_THEN_NOT_cpu_ETC___d1611 &&
	     ifcs_0_state == 2'd0 &&
	     IF_IF_merged_0_flitLeft_413_EQ_0_414_THEN_cpu__ETC___d1576 !=
	     2'd1 ;
  assign WILL_FIRE_RL_ifcs_0_nonRoutableFlit =
	     CAN_FIRE_RL_ifcs_0_nonRoutableFlit ;

  // rule RL_ifcs_0_nonRoutableGenRsp
  assign CAN_FIRE_RL_ifcs_0_nonRoutableGenRsp =
	     IF_merged_0_flitLeft_413_EQ_0_414_THEN_cpu_dme_ETC___d1536 &&
	     ifcs_0_noRoute_inner_pendingReq$port1__read &&
	     ifcs_0_noRouteRsp$FULL_N &&
	     cpu$dmem_master_wvalid ;
  assign WILL_FIRE_RL_ifcs_0_nonRoutableGenRsp =
	     CAN_FIRE_RL_ifcs_0_nonRoutableGenRsp ;

  // rule RL_ifcs_0_drainFlits
  assign CAN_FIRE_RL_ifcs_0_drainFlits =
	     IF_merged_0_flitLeft_413_EQ_0_414_THEN_cpu_dme_ETC___d1536 &&
	     cpu$dmem_master_wvalid &&
	     ifcs_0_state == 2'd2 ;
  assign WILL_FIRE_RL_ifcs_0_drainFlits = CAN_FIRE_RL_ifcs_0_drainFlits ;

  // rule __me_check_167
  assign CAN_FIRE___me_check_167 = 1'b1 ;
  assign WILL_FIRE___me_check_167 = 1'b1 ;

  // rule __me_check_168
  assign CAN_FIRE___me_check_168 = 1'b1 ;
  assign WILL_FIRE___me_check_168 = 1'b1 ;

  // rule __me_check_169
  assign CAN_FIRE___me_check_169 = 1'b1 ;
  assign WILL_FIRE___me_check_169 = 1'b1 ;

  // rule __me_check_171
  assign CAN_FIRE___me_check_171 = 1'b1 ;
  assign WILL_FIRE___me_check_171 = 1'b1 ;

  // rule RL_merged_0_genFirst
  assign CAN_FIRE_RL_merged_0_genFirst =
	     cpu$dmem_master_awvalid && cpu$dmem_master_wvalid &&
	     merged_0_doDrop$whas &&
	     merged_0_flitLeft == 8'd0 ;
  assign WILL_FIRE_RL_merged_0_genFirst = CAN_FIRE_RL_merged_0_genFirst ;

  // rule RL_msNoSynth_0_aw_forwardReady
  assign CAN_FIRE_RL_msNoSynth_0_aw_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_msNoSynth_0_aw_forwardReady = 1'd1 ;

  // rule RL_merged_0_genOther
  assign CAN_FIRE_RL_merged_0_genOther =
	     cpu$dmem_master_wvalid && merged_0_doDrop$whas &&
	     merged_0_flitLeft != 8'd0 ;
  assign WILL_FIRE_RL_merged_0_genOther = CAN_FIRE_RL_merged_0_genOther ;

  // rule RL_msNoSynth_0_w_forwardReady
  assign CAN_FIRE_RL_msNoSynth_0_w_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_msNoSynth_0_w_forwardReady = 1'd1 ;

  // rule RL_ifcs_2_firstFlit
  assign CAN_FIRE_RL_ifcs_2_firstFlit =
	     plic$axi4_slave_bvalid && ifcs_2_rspBack$FULL_N &&
	     ifcs_2_routeBack$FULL_N &&
	     !ifcs_2_state ;
  assign WILL_FIRE_RL_ifcs_2_firstFlit = CAN_FIRE_RL_ifcs_2_firstFlit ;

  // rule RL_ifcs_2_followFlits
  assign CAN_FIRE_RL_ifcs_2_followFlits =
	     plic$axi4_slave_bvalid && ifcs_2_rspBack$FULL_N && ifcs_2_state ;
  assign WILL_FIRE_RL_ifcs_2_followFlits = CAN_FIRE_RL_ifcs_2_followFlits ;

  // rule __me_check_185
  assign CAN_FIRE___me_check_185 = 1'b1 ;
  assign WILL_FIRE___me_check_185 = 1'b1 ;

  // rule RL_ssNoSynth_2_b_forwardReady
  assign CAN_FIRE_RL_ssNoSynth_2_b_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_ssNoSynth_2_b_forwardReady = 1'd1 ;

  // rule RL_ifcs_0_1_firstFlit
  assign CAN_FIRE_RL_ifcs_0_1_firstFlit =
	     cpu$dmem_master_arvalid && ifcs_0_1_innerReq$FULL_N &&
	     ifcs_0_1_innerRoute$FULL_N &&
	     ifcs_0_1_state == 2'd0 &&
	     IF_cpu_dmem_master_ar_araddr__201_BITS_63_TO_4_ETC___d2225 ==
	     2'd1 ;
  assign WILL_FIRE_RL_ifcs_0_1_firstFlit = CAN_FIRE_RL_ifcs_0_1_firstFlit ;

  // rule RL_ifcs_0_1_followFlits
  assign CAN_FIRE_RL_ifcs_0_1_followFlits =
	     cpu$dmem_master_arvalid && ifcs_0_1_innerReq$FULL_N &&
	     ifcs_0_1_state == 2'd1 ;
  assign WILL_FIRE_RL_ifcs_0_1_followFlits =
	     CAN_FIRE_RL_ifcs_0_1_followFlits ;

  // rule RL_ifcs_0_1_nonRoutableFlit
  assign CAN_FIRE_RL_ifcs_0_1_nonRoutableFlit =
	     ifcs_0_1_noRoute_flitCount == 9'd0 && cpu$dmem_master_arvalid &&
	     ifcs_0_1_state == 2'd0 &&
	     IF_cpu_dmem_master_ar_araddr__201_BITS_63_TO_4_ETC___d2225 !=
	     2'd1 ;
  assign WILL_FIRE_RL_ifcs_0_1_nonRoutableFlit =
	     CAN_FIRE_RL_ifcs_0_1_nonRoutableFlit ;

  // rule RL_ifcs_0_1_nonRoutableGenRsp
  assign CAN_FIRE_RL_ifcs_0_1_nonRoutableGenRsp =
	     x_port1__read__h81220 != 9'd0 && ifcs_0_1_noRouteRsp$FULL_N &&
	     (x_port1__read__h81220 != 9'd1 || cpu$dmem_master_arvalid) ;
  assign WILL_FIRE_RL_ifcs_0_1_nonRoutableGenRsp =
	     CAN_FIRE_RL_ifcs_0_1_nonRoutableGenRsp ;

  // rule RL_ifcs_0_1_drainFlits
  assign CAN_FIRE_RL_ifcs_0_1_drainFlits =
	     cpu$dmem_master_arvalid && ifcs_0_1_state == 2'd2 ;
  assign WILL_FIRE_RL_ifcs_0_1_drainFlits = CAN_FIRE_RL_ifcs_0_1_drainFlits ;

  // rule __me_check_214
  assign CAN_FIRE___me_check_214 = 1'b1 ;
  assign WILL_FIRE___me_check_214 = 1'b1 ;

  // rule __me_check_215
  assign CAN_FIRE___me_check_215 = 1'b1 ;
  assign WILL_FIRE___me_check_215 = 1'b1 ;

  // rule __me_check_216
  assign CAN_FIRE___me_check_216 = 1'b1 ;
  assign WILL_FIRE___me_check_216 = 1'b1 ;

  // rule __me_check_218
  assign CAN_FIRE___me_check_218 = 1'b1 ;
  assign WILL_FIRE___me_check_218 = 1'b1 ;

  // rule RL_msNoSynth_0_ar_forwardReady
  assign CAN_FIRE_RL_msNoSynth_0_ar_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_msNoSynth_0_ar_forwardReady = 1'd1 ;

  // rule RL_ifcs_1_1_forwardRsp
  assign CAN_FIRE_RL_ifcs_1_1_forwardRsp =
	     msNoSynth_1_r_buffer_ff$FULL_N && CAN_FIRE_RL_sink_selected_9 &&
	     !ifcs_1_1_noRouteRsp$EMPTY_N ;
  assign WILL_FIRE_RL_ifcs_1_1_forwardRsp = CAN_FIRE_RL_ifcs_1_1_forwardRsp ;

  // rule RL_msNoSynth_1_r_forwardFlit
  assign CAN_FIRE_RL_msNoSynth_1_r_forwardFlit =
	     !dm_master_nonsynth_rCanPut$wget ||
	     msNoSynth_1_r_buffer_firstValid_read__025_AND__ETC___d1031 ;
  assign WILL_FIRE_RL_msNoSynth_1_r_forwardFlit =
	     CAN_FIRE_RL_msNoSynth_1_r_forwardFlit ;

  // rule RL_msNoSynth_1_r_dropFlit
  assign CAN_FIRE_RL_msNoSynth_1_r_dropFlit =
	     (msNoSynth_1_r_buffer_ff$EMPTY_N ||
	      msNoSynth_1_r_buffer_enqw$whas) &&
	     dm_master_nonsynth_rCanPut$wget ;
  assign WILL_FIRE_RL_msNoSynth_1_r_dropFlit =
	     CAN_FIRE_RL_msNoSynth_1_r_dropFlit ;

  // rule RL_msNoSynth_1_r_buffer_enqueue
  assign CAN_FIRE_RL_msNoSynth_1_r_buffer_enqueue =
	     msNoSynth_1_r_buffer_enqw$whas &&
	     (!CAN_FIRE_RL_msNoSynth_1_r_dropFlit ||
	      msNoSynth_1_r_buffer_ff$EMPTY_N) ;
  assign WILL_FIRE_RL_msNoSynth_1_r_buffer_enqueue =
	     CAN_FIRE_RL_msNoSynth_1_r_buffer_enqueue ;

  // rule RL_msNoSynth_1_r_buffer_dequeue
  assign CAN_FIRE_RL_msNoSynth_1_r_buffer_dequeue =
	     CAN_FIRE_RL_msNoSynth_1_r_dropFlit &&
	     msNoSynth_1_r_buffer_ff$EMPTY_N ;
  assign WILL_FIRE_RL_msNoSynth_1_r_buffer_dequeue =
	     CAN_FIRE_RL_msNoSynth_1_r_buffer_dequeue ;

  // rule RL_ifcs_1_1_nonRoutableGenRsp
  assign CAN_FIRE_RL_ifcs_1_1_nonRoutableGenRsp =
	     x_port1__read__h83666 != 9'd0 && ifcs_1_1_noRouteRsp$FULL_N &&
	     (x_port1__read__h83666 != 9'd1 ||
	      dm_master_nonsynth_arCanPeek$wget) ;
  assign WILL_FIRE_RL_ifcs_1_1_nonRoutableGenRsp =
	     CAN_FIRE_RL_ifcs_1_1_nonRoutableGenRsp ;

  // rule __me_check_221
  assign CAN_FIRE___me_check_221 = 1'b1 ;
  assign WILL_FIRE___me_check_221 = 1'b1 ;

  // rule __me_check_222
  assign CAN_FIRE___me_check_222 = 1'b1 ;
  assign WILL_FIRE___me_check_222 = 1'b1 ;

  // rule __me_check_225
  assign CAN_FIRE___me_check_225 = 1'b1 ;
  assign WILL_FIRE___me_check_225 = 1'b1 ;

  // rule RL_msNoSynth_1_ar_forwardReady
  assign CAN_FIRE_RL_msNoSynth_1_ar_forwardReady =
	     !dm_master_nonsynth_arCanPeek$wget ||
	     !msNoSynth_1_ar_dwReady$whas ||
	     deburst_dm_outShim_arff$EMPTY_N &&
	     dm_master_nonsynth_takeUpperR$FULL_N ;
  assign WILL_FIRE_RL_msNoSynth_1_ar_forwardReady =
	     CAN_FIRE_RL_msNoSynth_1_ar_forwardReady ;

  // rule RL_deburst_dm_forward_read_req
  assign CAN_FIRE_RL_deburst_dm_forward_read_req =
	     deburst_dm_inSerial_shim_arff_rv$port1__read[97] &&
	     deburst_dm_outShim_arff$FULL_N &&
	     deburst_dm_lastReadRspFF$FULL_N ;
  assign WILL_FIRE_RL_deburst_dm_forward_read_req =
	     CAN_FIRE_RL_deburst_dm_forward_read_req ;

  // rule RL_ifcs_0_1_firstFlit_1
  assign CAN_FIRE_RL_ifcs_0_1_firstFlit_1 =
	     tagController_shimSlave_rff$EMPTY_N && ifcs_0_1_rspBack$FULL_N &&
	     ifcs_0_1_routeBack$FULL_N &&
	     !ifcs_0_1_state_1 ;
  assign WILL_FIRE_RL_ifcs_0_1_firstFlit_1 =
	     CAN_FIRE_RL_ifcs_0_1_firstFlit_1 ;

  // rule RL_ifcs_0_1_followFlits_1
  assign CAN_FIRE_RL_ifcs_0_1_followFlits_1 =
	     tagController_shimSlave_rff$EMPTY_N && ifcs_0_1_rspBack$FULL_N &&
	     ifcs_0_1_state_1 ;
  assign WILL_FIRE_RL_ifcs_0_1_followFlits_1 =
	     CAN_FIRE_RL_ifcs_0_1_followFlits_1 ;

  // rule __me_check_228
  assign CAN_FIRE___me_check_228 = 1'b1 ;
  assign WILL_FIRE___me_check_228 = 1'b1 ;

  // rule RL_ssNoSynth_0_r_forwardReady
  assign CAN_FIRE_RL_ssNoSynth_0_r_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_ssNoSynth_0_r_forwardReady = 1'd1 ;

  // rule RL_rl_cpu_hart0_reset_from_soc_start
  assign CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start =
	     near_mem_io$RDY_server_reset_request_put &&
	     plic_RDY_server_reset_request_put__10_AND_cpu__ETC___d316 ;
  assign WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;

  // rule RL_ifcs_1_1_firstFlit_1
  assign CAN_FIRE_RL_ifcs_1_1_firstFlit_1 =
	     near_mem_io$axi4_slave_rvalid && ifcs_1_1_rspBack$FULL_N &&
	     ifcs_1_1_routeBack$FULL_N &&
	     !ifcs_1_1_state_1 ;
  assign WILL_FIRE_RL_ifcs_1_1_firstFlit_1 =
	     CAN_FIRE_RL_ifcs_1_1_firstFlit_1 ;

  // rule RL_ifcs_1_1_followFlits_1
  assign CAN_FIRE_RL_ifcs_1_1_followFlits_1 =
	     near_mem_io$axi4_slave_rvalid && ifcs_1_1_rspBack$FULL_N &&
	     ifcs_1_1_state_1 ;
  assign WILL_FIRE_RL_ifcs_1_1_followFlits_1 =
	     CAN_FIRE_RL_ifcs_1_1_followFlits_1 ;

  // rule __me_check_230
  assign CAN_FIRE___me_check_230 = 1'b1 ;
  assign WILL_FIRE___me_check_230 = 1'b1 ;

  // rule RL_ssNoSynth_1_r_forwardReady
  assign CAN_FIRE_RL_ssNoSynth_1_r_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_ssNoSynth_1_r_forwardReady = 1'd1 ;

  // rule RL_ifcs_2_1_firstFlit
  assign CAN_FIRE_RL_ifcs_2_1_firstFlit =
	     plic$axi4_slave_rvalid && ifcs_2_1_rspBack$FULL_N &&
	     ifcs_2_1_routeBack$FULL_N &&
	     !ifcs_2_1_state ;
  assign WILL_FIRE_RL_ifcs_2_1_firstFlit = CAN_FIRE_RL_ifcs_2_1_firstFlit ;

  // rule RL_ifcs_2_1_followFlits
  assign CAN_FIRE_RL_ifcs_2_1_followFlits =
	     plic$axi4_slave_rvalid && ifcs_2_1_rspBack$FULL_N &&
	     ifcs_2_1_state ;
  assign WILL_FIRE_RL_ifcs_2_1_followFlits =
	     CAN_FIRE_RL_ifcs_2_1_followFlits ;

  // rule __me_check_232
  assign CAN_FIRE___me_check_232 = 1'b1 ;
  assign WILL_FIRE___me_check_232 = 1'b1 ;

  // rule RL_ssNoSynth_2_r_forwardReady
  assign CAN_FIRE_RL_ssNoSynth_2_r_forwardReady = 1'd1 ;
  assign WILL_FIRE_RL_ssNoSynth_2_r_forwardReady = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_activeSource_0$write_1__SEL_1 =
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     !ifcs_0_innerReq$D_OUT[2] ;
  assign MUX_activeSource_1_1_0$write_1__SEL_1 =
	     WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	     !ifcs_0_1_rspBack$D_OUT[2] ;
  assign MUX_activeSource_1_1_0$write_1__SEL_2 =
	     WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	     !ifcs_1_1_rspBack$D_OUT[2] ;
  assign MUX_activeSource_1_1_0$write_1__SEL_3 =
	     WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	     !ifcs_2_1_rspBack$D_OUT[2] ;
  assign MUX_deburst_debug_inSerial_state$port1__write_1__SEL_1 =
	     WILL_FIRE_RL_deburst_debug_inSerial_takeR &&
	     deburst_debug_inSerial_shim_rff_rv$port1__read[2] ;
  assign MUX_deburst_dm_inSerial_state$port1__write_1__SEL_1 =
	     WILL_FIRE_RL_deburst_dm_inSerial_takeR &&
	     deburst_dm_inSerial_shim_rff_rv$port1__read[2] ;
  assign MUX_flitToSink_0$wset_1__SEL_1 =
	     WILL_FIRE_RL_burst && ifcs_0_innerRoute$D_OUT[0] ;
  assign MUX_flitToSink_0$wset_1__SEL_3 =
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     ifcs_0_innerRoute$D_OUT[0] ;
  assign MUX_flitToSink_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_burst && ifcs_0_innerRoute$D_OUT[1] ;
  assign MUX_flitToSink_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     ifcs_0_innerRoute$D_OUT[1] ;
  assign MUX_flitToSink_1_0$wset_1__SEL_1 =
	     WILL_FIRE_RL_burst_2 && ifcs_0_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_0$wset_1__SEL_2 =
	     WILL_FIRE_RL_burst_3 && ifcs_1_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_0$wset_1__SEL_3 =
	     WILL_FIRE_RL_burst_4 && ifcs_2_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_0$wset_1__SEL_4 =
	     WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	     ifcs_0_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_0$wset_1__SEL_5 =
	     WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	     ifcs_1_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_0$wset_1__SEL_6 =
	     WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	     ifcs_2_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_0_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_burst_5 && ifcs_0_1_innerRoute$D_OUT[0] ;
  assign MUX_flitToSink_1_0_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	     ifcs_0_1_innerRoute$D_OUT[0] ;
  assign MUX_flitToSink_1_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_burst_2 && ifcs_0_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1$wset_1__SEL_2 =
	     WILL_FIRE_RL_burst_3 && ifcs_1_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_burst_4 && ifcs_2_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1$wset_1__SEL_4 =
	     WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	     ifcs_0_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1$wset_1__SEL_5 =
	     WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	     ifcs_1_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1$wset_1__SEL_6 =
	     WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	     ifcs_2_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1_0$wset_1__SEL_1 =
	     WILL_FIRE_RL_burst_7 && ifcs_0_1_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_1_0$wset_1__SEL_2 =
	     WILL_FIRE_RL_burst_8 && ifcs_1_1_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_1_0$wset_1__SEL_3 =
	     WILL_FIRE_RL_burst_9 && ifcs_2_1_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_1_0$wset_1__SEL_4 =
	     WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	     ifcs_0_1_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_1_0$wset_1__SEL_5 =
	     WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	     ifcs_1_1_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_1_0$wset_1__SEL_6 =
	     WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	     ifcs_2_1_routeBack$D_OUT[0] ;
  assign MUX_flitToSink_1_1_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_burst_5 && ifcs_0_1_innerRoute$D_OUT[1] ;
  assign MUX_flitToSink_1_1_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	     ifcs_0_1_innerRoute$D_OUT[1] ;
  assign MUX_flitToSink_1_1_1_1$wset_1__SEL_1 =
	     WILL_FIRE_RL_burst_7 && ifcs_0_1_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1_1_1$wset_1__SEL_2 =
	     WILL_FIRE_RL_burst_8 && ifcs_1_1_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1_1_1$wset_1__SEL_3 =
	     WILL_FIRE_RL_burst_9 && ifcs_2_1_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1_1_1$wset_1__SEL_4 =
	     WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	     ifcs_0_1_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1_1_1$wset_1__SEL_5 =
	     WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	     ifcs_1_1_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_1_1_1$wset_1__SEL_6 =
	     WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	     ifcs_2_1_routeBack$D_OUT[1] ;
  assign MUX_flitToSink_1_2$wset_1__SEL_1 =
	     WILL_FIRE_RL_burst_5 && ifcs_0_1_innerRoute$D_OUT[2] ;
  assign MUX_flitToSink_1_2$wset_1__SEL_3 =
	     WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	     ifcs_0_1_innerRoute$D_OUT[2] ;
  assign MUX_flitToSink_2$wset_1__SEL_1 =
	     WILL_FIRE_RL_burst && ifcs_0_innerRoute$D_OUT[2] ;
  assign MUX_flitToSink_2$wset_1__SEL_3 =
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     ifcs_0_innerRoute$D_OUT[2] ;
  assign MUX_ifcs_0_1_state_1$write_1__SEL_1 =
	     WILL_FIRE_RL_ifcs_0_1_followFlits_1 &&
	     tagController_shimSlave_rff$D_OUT[2] ;
  assign MUX_ifcs_0_state$write_1__PSEL_1 =
	     WILL_FIRE_RL_ifcs_0_drainFlits ||
	     WILL_FIRE_RL_ifcs_0_followFlits ;
  assign MUX_ifcs_0_state$write_1__SEL_1 =
	     MUX_ifcs_0_state$write_1__PSEL_1 && cpu$dmem_master_wlast ;
  assign MUX_ifcs_0_state$write_1__SEL_2 =
	     WILL_FIRE_RL_ifcs_0_firstFlit && !cpu$dmem_master_wlast ;
  assign MUX_ifcs_0_state$write_1__SEL_3 =
	     WILL_FIRE_RL_ifcs_0_nonRoutableGenRsp && !cpu$dmem_master_wlast ;
  assign MUX_ifcs_1_1_state_1$write_1__SEL_1 =
	     WILL_FIRE_RL_ifcs_1_1_followFlits_1 &&
	     near_mem_io$axi4_slave_rlast ;
  assign MUX_ifcs_1_state$write_1__PSEL_1 =
	     WILL_FIRE_RL_ifcs_1_drainFlits ||
	     WILL_FIRE_RL_ifcs_1_followFlits ;
  assign MUX_ifcs_1_state$write_1__SEL_1 =
	     MUX_ifcs_1_state$write_1__PSEL_1 &&
	     deburst_dm_outShim_wff$D_OUT[2] ;
  assign MUX_ifcs_1_state$write_1__SEL_2 =
	     WILL_FIRE_RL_ifcs_1_firstFlit &&
	     !deburst_dm_outShim_wff$D_OUT[2] ;
  assign MUX_ifcs_1_state$write_1__SEL_3 =
	     WILL_FIRE_RL_ifcs_1_nonRoutableGenRsp &&
	     !deburst_dm_outShim_wff$D_OUT[2] ;
  assign MUX_ifcs_2_1_state$write_1__SEL_1 =
	     WILL_FIRE_RL_ifcs_2_1_followFlits && plic$axi4_slave_rlast ;
  assign MUX_split_0_flitLeft$write_1__SEL_1 =
	     WILL_FIRE_RL_split_0_putOther && split_0_doPut$wget[245] ;
  assign MUX_split_0_flitLeft$write_1__SEL_2 =
	     WILL_FIRE_RL_split_0_putFirst && !split_0_doPut$wget[245] ;
  assign MUX_split_1_flitLeft$write_1__SEL_1 =
	     WILL_FIRE_RL_split_1_putOther && split_1_doPut$wget[245] ;
  assign MUX_split_1_flitLeft$write_1__SEL_2 =
	     WILL_FIRE_RL_split_1_putFirst && !split_1_doPut$wget[245] ;
  assign MUX_split_2_flitLeft$write_1__SEL_1 =
	     WILL_FIRE_RL_split_2_putOther && split_2_doPut$wget[245] ;
  assign MUX_split_2_flitLeft$write_1__SEL_2 =
	     WILL_FIRE_RL_split_2_putFirst && !split_2_doPut$wget[245] ;
  assign MUX_state$write_1__SEL_1 =
	     WILL_FIRE_RL_burst && ifcs_0_innerReq$D_OUT[2] ;
  assign MUX_state$write_1__SEL_2 =
	     WILL_FIRE_RL_burst_1 && ifcs_1_innerReq$D_OUT[2] ;
  assign MUX_state_1_1_1$write_1__SEL_1 =
	     WILL_FIRE_RL_burst_7 && ifcs_0_1_rspBack$D_OUT[2] ;
  assign MUX_state_1_1_1$write_1__SEL_2 =
	     WILL_FIRE_RL_burst_8 && ifcs_1_1_rspBack$D_OUT[2] ;
  assign MUX_state_1_1_1$write_1__SEL_3 =
	     WILL_FIRE_RL_burst_9 && ifcs_2_1_rspBack$D_OUT[2] ;
  assign MUX_activeSource_0$write_1__VAL_1 =
	     WILL_FIRE_RL_arbitrate &&
	     IF_SEXT_arbiter_lastSelect_841_842_BIT_0_843_A_ETC___d1865 ;
  assign MUX_activeSource_1$write_1__VAL_2 =
	     WILL_FIRE_RL_arbitrate &&
	     IF_SEXT_arbiter_lastSelect_841_842_BIT_0_843_A_ETC___d1869 ;
  assign MUX_activeSource_1_1_0$write_1__VAL_1 =
	     WILL_FIRE_RL_arbitrate_3 &&
	     IF_SEXT_arbiter_1_1_lastSelect_657_658_BIT_0_6_ETC___d2701 ;
  assign MUX_activeSource_1_1_1_1$write_1__VAL_1 =
	     WILL_FIRE_RL_arbitrate_3 &&
	     IF_SEXT_arbiter_1_1_lastSelect_657_658_BIT_0_6_ETC___d2707 ;
  assign MUX_activeSource_1_1_2$write_1__VAL_1 =
	     WILL_FIRE_RL_arbitrate_3 &&
	     IF_SEXT_arbiter_1_1_lastSelect_657_658_BIT_0_6_ETC___d2713 ;
  assign MUX_merged_0_flitLeft$write_1__VAL_1 = merged_0_flitLeft - 8'd1 ;
  assign MUX_merged_1_flitLeft$write_1__VAL_2 = merged_1_flitLeft - 8'd1 ;
  always@(MUX_flitToSink_1_0$wset_1__SEL_1 or
	  MUX_flitToSink_1_0$wset_1__SEL_4 or
	  ifcs_0_rspBack$D_OUT or
	  MUX_flitToSink_1_0$wset_1__SEL_2 or
	  MUX_flitToSink_1_0$wset_1__SEL_5 or
	  ifcs_1_rspBack$D_OUT or
	  MUX_flitToSink_1_0$wset_1__SEL_3 or
	  MUX_flitToSink_1_0$wset_1__SEL_6 or ifcs_2_rspBack$D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_flitToSink_1_0$wset_1__SEL_1 || MUX_flitToSink_1_0$wset_1__SEL_4:
	  MUX_msNoSynth_0_b_buffer_enqw$wset_1__VAL_2 = ifcs_0_rspBack$D_OUT;
      MUX_flitToSink_1_0$wset_1__SEL_2 || MUX_flitToSink_1_0$wset_1__SEL_5:
	  MUX_msNoSynth_0_b_buffer_enqw$wset_1__VAL_2 = ifcs_1_rspBack$D_OUT;
      MUX_flitToSink_1_0$wset_1__SEL_3 || MUX_flitToSink_1_0$wset_1__SEL_6:
	  MUX_msNoSynth_0_b_buffer_enqw$wset_1__VAL_2 = ifcs_2_rspBack$D_OUT;
      default: MUX_msNoSynth_0_b_buffer_enqw$wset_1__VAL_2 =
		   6'b101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_flitToSink_1_1_0$wset_1__SEL_1 or
	  MUX_flitToSink_1_1_0$wset_1__SEL_4 or
	  ifcs_0_1_rspBack$D_OUT or
	  MUX_flitToSink_1_1_0$wset_1__SEL_2 or
	  MUX_flitToSink_1_1_0$wset_1__SEL_5 or
	  ifcs_1_1_rspBack$D_OUT or
	  MUX_flitToSink_1_1_0$wset_1__SEL_3 or
	  MUX_flitToSink_1_1_0$wset_1__SEL_6 or ifcs_2_1_rspBack$D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_flitToSink_1_1_0$wset_1__SEL_1 ||
      MUX_flitToSink_1_1_0$wset_1__SEL_4:
	  MUX_msNoSynth_0_r_buffer_enqw$wset_1__VAL_2 =
	      ifcs_0_1_rspBack$D_OUT;
      MUX_flitToSink_1_1_0$wset_1__SEL_2 ||
      MUX_flitToSink_1_1_0$wset_1__SEL_5:
	  MUX_msNoSynth_0_r_buffer_enqw$wset_1__VAL_2 =
	      ifcs_1_1_rspBack$D_OUT;
      MUX_flitToSink_1_1_0$wset_1__SEL_3 ||
      MUX_flitToSink_1_1_0$wset_1__SEL_6:
	  MUX_msNoSynth_0_r_buffer_enqw$wset_1__VAL_2 =
	      ifcs_2_1_rspBack$D_OUT;
      default: MUX_msNoSynth_0_r_buffer_enqw$wset_1__VAL_2 =
		   137'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(MUX_flitToSink_1_1$wset_1__SEL_1 or
	  MUX_flitToSink_1_1$wset_1__SEL_4 or
	  ifcs_0_rspBack$D_OUT or
	  MUX_flitToSink_1_1$wset_1__SEL_2 or
	  MUX_flitToSink_1_1$wset_1__SEL_5 or
	  ifcs_1_rspBack$D_OUT or
	  MUX_flitToSink_1_1$wset_1__SEL_3 or
	  MUX_flitToSink_1_1$wset_1__SEL_6 or ifcs_2_rspBack$D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_flitToSink_1_1$wset_1__SEL_1 || MUX_flitToSink_1_1$wset_1__SEL_4:
	  MUX_msNoSynth_1_b_buffer_enqw$wset_1__VAL_2 = ifcs_0_rspBack$D_OUT;
      MUX_flitToSink_1_1$wset_1__SEL_2 || MUX_flitToSink_1_1$wset_1__SEL_5:
	  MUX_msNoSynth_1_b_buffer_enqw$wset_1__VAL_2 = ifcs_1_rspBack$D_OUT;
      MUX_flitToSink_1_1$wset_1__SEL_3 || MUX_flitToSink_1_1$wset_1__SEL_6:
	  MUX_msNoSynth_1_b_buffer_enqw$wset_1__VAL_2 = ifcs_2_rspBack$D_OUT;
      default: MUX_msNoSynth_1_b_buffer_enqw$wset_1__VAL_2 =
		   6'b101010 /* unspecified value */ ;
    endcase
  end
  always@(MUX_flitToSink_1_1_1_1$wset_1__SEL_1 or
	  MUX_flitToSink_1_1_1_1$wset_1__SEL_4 or
	  ifcs_0_1_rspBack$D_OUT or
	  MUX_flitToSink_1_1_1_1$wset_1__SEL_2 or
	  MUX_flitToSink_1_1_1_1$wset_1__SEL_5 or
	  ifcs_1_1_rspBack$D_OUT or
	  MUX_flitToSink_1_1_1_1$wset_1__SEL_3 or
	  MUX_flitToSink_1_1_1_1$wset_1__SEL_6 or ifcs_2_1_rspBack$D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_flitToSink_1_1_1_1$wset_1__SEL_1 ||
      MUX_flitToSink_1_1_1_1$wset_1__SEL_4:
	  MUX_msNoSynth_1_r_buffer_enqw$wset_1__VAL_2 =
	      ifcs_0_1_rspBack$D_OUT;
      MUX_flitToSink_1_1_1_1$wset_1__SEL_2 ||
      MUX_flitToSink_1_1_1_1$wset_1__SEL_5:
	  MUX_msNoSynth_1_r_buffer_enqw$wset_1__VAL_2 =
	      ifcs_1_1_rspBack$D_OUT;
      MUX_flitToSink_1_1_1_1$wset_1__SEL_3 ||
      MUX_flitToSink_1_1_1_1$wset_1__SEL_6:
	  MUX_msNoSynth_1_r_buffer_enqw$wset_1__VAL_2 =
	      ifcs_2_1_rspBack$D_OUT;
      default: MUX_msNoSynth_1_r_buffer_enqw$wset_1__VAL_2 =
		   137'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_split_0_flitLeft$write_1__VAL_1 = split_0_flitLeft - 8'd1 ;
  assign MUX_split_1_flitLeft$write_1__VAL_1 = split_1_flitLeft - 8'd1 ;
  assign MUX_split_2_flitLeft$write_1__VAL_1 = split_2_flitLeft - 8'd1 ;
  assign MUX_tagController_tagCon$cache_request_put_1__VAL_1 =
	     { tagController_shimSlave_awff$D_OUT[68:29],
	       1'b0,
	       tagController_shimSlave_awff$D_OUT[97:93],
	       3'h1,
	       tagController_shimSlave_wff$D_OUT[2],
	       tagController_shimSlave_awff$D_OUT[14:11] < 4'd4,
	       1'd0,
	       tagController_shimSlave_wff$D_OUT[18:3],
	       8'd255,
	       tagController_shimSlave_wff$D_OUT[1:0],
	       tagController_shimSlave_wff$D_OUT[146:19] } ;
  assign MUX_tagController_tagCon$cache_request_put_1__VAL_2 =
	     { tagController_shimSlave_arff$D_OUT[68:29],
	       1'b0,
	       tagController_shimSlave_arff$D_OUT[97:93],
	       152'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA,
	       tagController_shimSlave_arff$D_OUT[14:11] < 4'd4,
	       1'd0,
	       tagController_shimSlave_arff$D_OUT[23:18] } ;
  assign MUX_tagController_tagCon$memory_response_put_1__VAL_1 =
	     { tagController_shimMaster_bff$D_OUT[7:2],
	       136'h1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA } ;
  assign MUX_tagController_tagCon$memory_response_put_1__VAL_2 =
	     { tagController_shimMaster_rff$D_OUT[136:131],
	       4'd0,
	       tagController_shimMaster_rff$D_OUT[0],
	       1'h0,
	       tagController_shimMaster_rff$D_OUT[132:3] } ;

  // inlined wires
  assign cpu_imem_b_buffer_enqw$wget =
	     { cpu_imem_master_bid[4:0], cpu_imem_master_bresp } ;
  assign cpu_imem_r_buffer_enqw$wget =
	     { cpu_imem_master_rid[4:0],
	       cpu_imem_master_rdata,
	       cpu_imem_master_rresp,
	       cpu_imem_master_rlast,
	       2'd0 } ;
  assign cpu_imem_ug_u_aw_peekWire$wget =
	     { cpu$imem_master_awid,
	       cpu$imem_master_awaddr,
	       cpu$imem_master_awlen,
	       cpu$imem_master_awsize,
	       cpu$imem_master_awburst,
	       cpu$imem_master_awlock,
	       cpu$imem_master_awcache,
	       cpu$imem_master_awprot,
	       cpu$imem_master_awqos,
	       cpu$imem_master_awregion } ;
  assign cpu_imem_ug_u_w_peekWire$wget =
	     { cpu$imem_master_wdata,
	       cpu$imem_master_wstrb,
	       cpu$imem_master_wlast,
	       cpu$imem_master_wuser } ;
  assign cpu_imem_ug_u_b_putWire$whas =
	     cpu_imem_master_bvalid && cpu_imem_b_buffer_ff$FULL_N ;
  assign cpu_imem_ug_u_ar_peekWire$wget =
	     { cpu$imem_master_arid,
	       cpu$imem_master_araddr,
	       cpu$imem_master_arlen,
	       cpu$imem_master_arsize,
	       cpu$imem_master_arburst,
	       cpu$imem_master_arlock,
	       cpu$imem_master_arcache,
	       cpu$imem_master_arprot,
	       cpu$imem_master_arqos,
	       cpu$imem_master_arregion } ;
  assign cpu_imem_ug_u_r_putWire$whas =
	     cpu_imem_master_rvalid && cpu_imem_r_buffer_ff$FULL_N ;
  assign dm_master_nonsynth_awCanPeek$wget =
	     deburst_dm_outShim_awff_notEmpty__88_AND_NOT_d_ETC___d800 &&
	     dm_master_nonsynth_takeUpperW$FULL_N &&
	     !dm_master_nonsynth_awFF_rv[97] ;
  assign dm_master_nonsynth_wCanPeek$wget =
	     deburst_dm_outShim_wff$EMPTY_N &&
	     dm_master_nonsynth_takeUpperW$EMPTY_N ;
  assign dm_master_nonsynth_arCanPeek$wget =
	     deburst_dm_outShim_arff_notEmpty__09_AND_NOT_d_ETC___d821 &&
	     dm_master_nonsynth_takeUpperR$FULL_N ;
  assign dm_master_nonsynth_rCanPut$wget =
	     deburst_dm_outShim_rff$FULL_N &&
	     dm_master_nonsynth_takeUpperR$EMPTY_N ;
  assign msNoSynth_0_w_dwReady$whas =
	     WILL_FIRE_RL_merged_0_genOther ||
	     WILL_FIRE_RL_merged_0_genFirst ;
  assign msNoSynth_0_b_buffer_enqw$wget =
	     WILL_FIRE_RL_ifcs_0_drainNoRouteResponse ?
	       ifcs_0_noRouteRsp$D_OUT :
	       MUX_msNoSynth_0_b_buffer_enqw$wset_1__VAL_2 ;
  assign msNoSynth_0_b_buffer_enqw$whas =
	     WILL_FIRE_RL_ifcs_0_drainNoRouteResponse ||
	     WILL_FIRE_RL_ifcs_0_forwardRsp ;
  assign msNoSynth_0_ar_dwReady$whas =
	     WILL_FIRE_RL_ifcs_0_1_nonRoutableGenRsp &&
	     x_port1__read__h81220 == 9'd1 ||
	     WILL_FIRE_RL_ifcs_0_1_drainFlits ||
	     WILL_FIRE_RL_ifcs_0_1_followFlits ||
	     WILL_FIRE_RL_ifcs_0_1_firstFlit ;
  assign msNoSynth_0_r_buffer_enqw$wget =
	     WILL_FIRE_RL_ifcs_0_1_drainNoRouteResponse ?
	       ifcs_0_1_noRouteRsp$D_OUT :
	       MUX_msNoSynth_0_r_buffer_enqw$wset_1__VAL_2 ;
  assign msNoSynth_0_r_buffer_enqw$whas =
	     WILL_FIRE_RL_ifcs_0_1_drainNoRouteResponse ||
	     WILL_FIRE_RL_ifcs_0_1_forwardRsp ;
  assign msNoSynth_1_w_dwReady$whas =
	     WILL_FIRE_RL_merged_1_genOther ||
	     WILL_FIRE_RL_merged_1_genFirst ;
  assign msNoSynth_1_b_buffer_enqw$wget =
	     WILL_FIRE_RL_ifcs_1_drainNoRouteResponse ?
	       ifcs_1_noRouteRsp$D_OUT :
	       MUX_msNoSynth_1_b_buffer_enqw$wset_1__VAL_2 ;
  assign msNoSynth_1_b_buffer_enqw$whas =
	     WILL_FIRE_RL_ifcs_1_drainNoRouteResponse ||
	     WILL_FIRE_RL_ifcs_1_forwardRsp ;
  assign msNoSynth_1_ar_dwReady$whas =
	     WILL_FIRE_RL_ifcs_1_1_nonRoutableGenRsp &&
	     x_port1__read__h83666 == 9'd1 ||
	     WILL_FIRE_RL_ifcs_1_1_drainFlits ||
	     WILL_FIRE_RL_ifcs_1_1_followFlits ||
	     WILL_FIRE_RL_ifcs_1_1_firstFlit ;
  assign msNoSynth_1_r_buffer_enqw$wget =
	     WILL_FIRE_RL_ifcs_1_1_drainNoRouteResponse ?
	       ifcs_1_1_noRouteRsp$D_OUT :
	       MUX_msNoSynth_1_r_buffer_enqw$wset_1__VAL_2 ;
  assign msNoSynth_1_r_buffer_enqw$whas =
	     WILL_FIRE_RL_ifcs_1_1_drainNoRouteResponse ||
	     WILL_FIRE_RL_ifcs_1_1_forwardRsp ;
  assign ssNoSynth_0_w_buffer_enqw$whas =
	     WILL_FIRE_RL_split_0_putOther && split_0_doPut$wget[245] ||
	     WILL_FIRE_RL_split_0_putFirst && !split_0_doPut$wget[245] ;
  assign ssNoSynth_0_b_dwReady$whas =
	     WILL_FIRE_RL_ifcs_0_followFlits_1 ||
	     WILL_FIRE_RL_ifcs_0_firstFlit_1 ;
  assign ssNoSynth_0_ar_buffer_enqw$wget =
	     (MUX_flitToSink_1_0_1$wset_1__SEL_1 ||
	      MUX_flitToSink_1_0_1$wset_1__SEL_3) ?
	       ifcs_0_1_innerReq$D_OUT :
	       ifcs_1_1_innerReq$D_OUT ;
  assign ssNoSynth_0_r_dwReady$whas =
	     WILL_FIRE_RL_ifcs_0_1_followFlits_1 ||
	     WILL_FIRE_RL_ifcs_0_1_firstFlit_1 ;
  assign ssNoSynth_1_aw_buffer_enqw$wget = split_1_doPut$wget[244:147] ;
  assign ssNoSynth_1_w_buffer_enqw$wget = split_1_doPut$wget[146:0] ;
  assign ssNoSynth_1_w_buffer_enqw$whas =
	     WILL_FIRE_RL_split_1_putOther && split_1_doPut$wget[245] ||
	     WILL_FIRE_RL_split_1_putFirst && !split_1_doPut$wget[245] ;
  assign ssNoSynth_1_b_dwReady$whas =
	     WILL_FIRE_RL_ifcs_1_followFlits_1 ||
	     WILL_FIRE_RL_ifcs_1_firstFlit_1 ;
  assign ssNoSynth_1_ar_buffer_enqw$wget =
	     (MUX_flitToSink_1_1_1$wset_1__SEL_1 ||
	      MUX_flitToSink_1_1_1$wset_1__SEL_3) ?
	       ifcs_0_1_innerReq$D_OUT :
	       ifcs_1_1_innerReq$D_OUT ;
  assign ssNoSynth_1_r_dwReady$whas =
	     WILL_FIRE_RL_ifcs_1_1_followFlits_1 ||
	     WILL_FIRE_RL_ifcs_1_1_firstFlit_1 ;
  assign ssNoSynth_2_aw_buffer_enqw$wget = split_2_doPut$wget[244:147] ;
  assign ssNoSynth_2_w_buffer_enqw$wget = split_2_doPut$wget[146:0] ;
  assign ssNoSynth_2_w_buffer_enqw$whas =
	     WILL_FIRE_RL_split_2_putOther && split_2_doPut$wget[245] ||
	     WILL_FIRE_RL_split_2_putFirst && !split_2_doPut$wget[245] ;
  assign ssNoSynth_2_b_dwReady$whas =
	     WILL_FIRE_RL_ifcs_2_followFlits ||
	     WILL_FIRE_RL_ifcs_2_firstFlit ;
  assign ssNoSynth_2_ar_buffer_enqw$wget =
	     (MUX_flitToSink_1_2$wset_1__SEL_1 ||
	      MUX_flitToSink_1_2$wset_1__SEL_3) ?
	       ifcs_0_1_innerReq$D_OUT :
	       ifcs_1_1_innerReq$D_OUT ;
  assign ssNoSynth_2_r_dwReady$whas =
	     WILL_FIRE_RL_ifcs_2_1_followFlits ||
	     WILL_FIRE_RL_ifcs_2_1_firstFlit ;
  assign split_0_doPut$wget =
	     (MUX_flitToSink_0$wset_1__SEL_1 ||
	      MUX_flitToSink_0$wset_1__SEL_3) ?
	       ifcs_0_innerReq$D_OUT :
	       ifcs_1_innerReq$D_OUT ;
  assign split_1_doPut$wget =
	     (MUX_flitToSink_1$wset_1__SEL_1 ||
	      MUX_flitToSink_1$wset_1__SEL_3) ?
	       ifcs_0_innerReq$D_OUT :
	       ifcs_1_innerReq$D_OUT ;
  assign split_2_doPut$wget =
	     (MUX_flitToSink_2$wset_1__SEL_1 ||
	      MUX_flitToSink_2$wset_1__SEL_3) ?
	       ifcs_0_innerReq$D_OUT :
	       ifcs_1_innerReq$D_OUT ;
  assign reqWires_0$wget =
	     (!ifcs_0_innerRoute$D_OUT[0] ||
	      !IF_split_0_flitLeft_457_EQ_0_458_THEN_ssNoSynt_ETC___d1783) ?
	       IF_NOT_ifcs_0_innerRoute_first__791_BIT_1_800__ETC___d1813 :
	       ifcs_0_innerRoute$D_OUT[0] ;
  assign reqWires_1$wget =
	     (!ifcs_1_innerRoute$D_OUT[0] ||
	      !IF_split_0_flitLeft_457_EQ_0_458_THEN_ssNoSynt_ETC___d1783) ?
	       IF_NOT_ifcs_1_innerRoute_first__820_BIT_1_824__ETC___d1829 :
	       ifcs_1_innerRoute$D_OUT[0] ;
  assign flitToSink_0$whas =
	     WILL_FIRE_RL_burst && ifcs_0_innerRoute$D_OUT[0] ||
	     WILL_FIRE_RL_burst_1 && ifcs_1_innerRoute$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     ifcs_0_innerRoute$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	     ifcs_1_innerRoute$D_OUT[0] ;
  assign flitToSink_1$whas =
	     WILL_FIRE_RL_burst && ifcs_0_innerRoute$D_OUT[1] ||
	     WILL_FIRE_RL_burst_1 && ifcs_1_innerRoute$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     ifcs_0_innerRoute$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	     ifcs_1_innerRoute$D_OUT[1] ;
  assign flitToSink_2$whas =
	     WILL_FIRE_RL_burst && ifcs_0_innerRoute$D_OUT[2] ||
	     WILL_FIRE_RL_burst_1 && ifcs_1_innerRoute$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     ifcs_0_innerRoute$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	     ifcs_1_innerRoute$D_OUT[2] ;
  assign reqWires_1_0$wget =
	     (!ifcs_0_routeBack$D_OUT[0] ||
	      !(!CAN_FIRE_RL_ifcs_0_drainNoRouteResponse)) ?
	       ifcs_0_routeBack$D_OUT[1] &&
	       !CAN_FIRE_RL_ifcs_1_drainNoRouteResponse :
	       ifcs_0_routeBack$D_OUT[0] ;
  assign reqWires_1_1$wget =
	     (!ifcs_1_routeBack$D_OUT[0] ||
	      !(!CAN_FIRE_RL_ifcs_0_drainNoRouteResponse)) ?
	       ifcs_1_routeBack$D_OUT[1] &&
	       !CAN_FIRE_RL_ifcs_1_drainNoRouteResponse :
	       ifcs_1_routeBack$D_OUT[0] ;
  assign reqWires_1_2$wget =
	     (!ifcs_2_routeBack$D_OUT[0] ||
	      !(!CAN_FIRE_RL_ifcs_0_drainNoRouteResponse)) ?
	       ifcs_2_routeBack$D_OUT[1] &&
	       !CAN_FIRE_RL_ifcs_1_drainNoRouteResponse :
	       ifcs_2_routeBack$D_OUT[0] ;
  assign flitToSink_1_0$whas =
	     WILL_FIRE_RL_burst_2 && ifcs_0_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_burst_3 && ifcs_1_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_burst_4 && ifcs_2_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	     ifcs_0_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	     ifcs_1_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	     ifcs_2_routeBack$D_OUT[0] ;
  assign flitToSink_1_1$whas =
	     WILL_FIRE_RL_burst_2 && ifcs_0_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_burst_3 && ifcs_1_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_burst_4 && ifcs_2_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	     ifcs_0_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	     ifcs_1_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	     ifcs_2_routeBack$D_OUT[1] ;
  assign reqWires_1_0_1$wget =
	     (!ifcs_0_1_innerRoute$D_OUT[0] ||
	      !ssNoSynth_0_ar_buffer_ff$FULL_N) ?
	       IF_NOT_ifcs_0_1_innerRoute_first__427_BIT_1_43_ETC___d2449 :
	       ifcs_0_1_innerRoute$D_OUT[0] ;
  assign reqWires_1_1_1$wget =
	     (!ifcs_1_1_innerRoute$D_OUT[0] ||
	      !ssNoSynth_0_ar_buffer_ff$FULL_N) ?
	       IF_NOT_ifcs_1_1_innerRoute_first__456_BIT_1_46_ETC___d2465 :
	       ifcs_1_1_innerRoute$D_OUT[0] ;
  assign flitToSink_1_0_1$whas =
	     WILL_FIRE_RL_burst_5 && ifcs_0_1_innerRoute$D_OUT[0] ||
	     WILL_FIRE_RL_burst_6 && ifcs_1_1_innerRoute$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	     ifcs_0_1_innerRoute$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	     ifcs_1_1_innerRoute$D_OUT[0] ;
  assign flitToSink_1_1_1$whas =
	     WILL_FIRE_RL_burst_5 && ifcs_0_1_innerRoute$D_OUT[1] ||
	     WILL_FIRE_RL_burst_6 && ifcs_1_1_innerRoute$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	     ifcs_0_1_innerRoute$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	     ifcs_1_1_innerRoute$D_OUT[1] ;
  assign flitToSink_1_2$whas =
	     WILL_FIRE_RL_burst_5 && ifcs_0_1_innerRoute$D_OUT[2] ||
	     WILL_FIRE_RL_burst_6 && ifcs_1_1_innerRoute$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	     ifcs_0_1_innerRoute$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	     ifcs_1_1_innerRoute$D_OUT[2] ;
  assign reqWires_1_1_0$wget =
	     (!ifcs_0_1_routeBack$D_OUT[0] ||
	      !(!CAN_FIRE_RL_ifcs_0_1_drainNoRouteResponse)) ?
	       ifcs_0_1_routeBack$D_OUT[1] &&
	       !CAN_FIRE_RL_ifcs_1_1_drainNoRouteResponse :
	       ifcs_0_1_routeBack$D_OUT[0] ;
  assign reqWires_1_1_1_1$wget =
	     (!ifcs_1_1_routeBack$D_OUT[0] ||
	      !(!CAN_FIRE_RL_ifcs_0_1_drainNoRouteResponse)) ?
	       ifcs_1_1_routeBack$D_OUT[1] &&
	       !CAN_FIRE_RL_ifcs_1_1_drainNoRouteResponse :
	       ifcs_1_1_routeBack$D_OUT[0] ;
  assign reqWires_1_1_2$wget =
	     (!ifcs_2_1_routeBack$D_OUT[0] ||
	      !(!CAN_FIRE_RL_ifcs_0_1_drainNoRouteResponse)) ?
	       ifcs_2_1_routeBack$D_OUT[1] &&
	       !CAN_FIRE_RL_ifcs_1_1_drainNoRouteResponse :
	       ifcs_2_1_routeBack$D_OUT[0] ;
  assign flitToSink_1_1_0$whas =
	     WILL_FIRE_RL_burst_7 && ifcs_0_1_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_burst_8 && ifcs_1_1_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_burst_9 && ifcs_2_1_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	     ifcs_0_1_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	     ifcs_1_1_routeBack$D_OUT[0] ||
	     WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	     ifcs_2_1_routeBack$D_OUT[0] ;
  assign flitToSink_1_1_1_1$whas =
	     WILL_FIRE_RL_burst_7 && ifcs_0_1_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_burst_8 && ifcs_1_1_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_burst_9 && ifcs_2_1_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	     ifcs_0_1_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	     ifcs_1_1_routeBack$D_OUT[1] ||
	     WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	     ifcs_2_1_routeBack$D_OUT[1] ;
  assign cpu_imem_ug_u_aw_dropWire$whas =
	     cpu$imem_master_awvalid && cpu_imem_master_awready ;
  assign cpu_imem_ug_u_w_dropWire$whas =
	     cpu$imem_master_wvalid && cpu_imem_master_wready ;
  assign cpu_imem_ug_u_ar_dropWire$whas =
	     cpu$imem_master_arvalid && cpu_imem_master_arready ;
  assign merged_0_doDrop$whas =
	     WILL_FIRE_RL_ifcs_0_nonRoutableGenRsp ||
	     WILL_FIRE_RL_ifcs_0_drainFlits ||
	     WILL_FIRE_RL_ifcs_0_followFlits ||
	     WILL_FIRE_RL_ifcs_0_firstFlit ;
  assign merged_1_doDrop$whas =
	     WILL_FIRE_RL_ifcs_1_nonRoutableGenRsp ||
	     WILL_FIRE_RL_ifcs_1_drainFlits ||
	     WILL_FIRE_RL_ifcs_1_followFlits ||
	     WILL_FIRE_RL_ifcs_1_firstFlit ;
  assign sourceSelect_1_0$whas =
	     WILL_FIRE_RL_arbitrate_1 &&
	     IF_SEXT_arbiter_1_lastSelect_031_032_BIT_0_033_ETC___d2075 ;
  assign sourceSelect_1_1$whas =
	     WILL_FIRE_RL_arbitrate_1 &&
	     IF_SEXT_arbiter_1_lastSelect_031_032_BIT_0_033_ETC___d2081 ;
  assign sourceSelect_1_2$whas =
	     WILL_FIRE_RL_arbitrate_1 &&
	     IF_SEXT_arbiter_1_lastSelect_031_032_BIT_0_033_ETC___d2087 ;
  assign sourceSelect_1_0_1$whas =
	     WILL_FIRE_RL_arbitrate_2 &&
	     IF_SEXT_arbiter_1_lastSelect_2_477_478_BIT_0_4_ETC___d2501 ;
  assign sourceSelect_1_1_1$whas =
	     WILL_FIRE_RL_arbitrate_2 &&
	     IF_SEXT_arbiter_1_lastSelect_2_477_478_BIT_0_4_ETC___d2505 ;
  assign deburst_debug_inSerial_shim_awff_rv$port0__write_1 =
	     { 1'd1, deburst_debug_inShim_awff$D_OUT } ;
  assign deburst_debug_inSerial_shim_awff_rv$port1__read =
	     CAN_FIRE_RL_deburst_debug_inSerial_takeAW ?
	       deburst_debug_inSerial_shim_awff_rv$port0__write_1 :
	       deburst_debug_inSerial_shim_awff_rv ;
  assign deburst_debug_inSerial_shim_awff_rv$EN_port1__write =
	     WILL_FIRE_RL_deburst_debug_forward_write_req &&
	     deburst_debug_inSerial_shim_wff_rv$port1__read[2] ;
  assign deburst_debug_inSerial_shim_awff_rv$port2__read =
	     deburst_debug_inSerial_shim_awff_rv$EN_port1__write ?
	       98'h0AAAAAAAAAAAAAAAAAAAAAAAA :
	       deburst_debug_inSerial_shim_awff_rv$port1__read ;
  assign deburst_debug_inSerial_shim_wff_rv$port0__write_1 =
	     { 1'd1, deburst_debug_inShim_wff$D_OUT } ;
  assign deburst_debug_inSerial_shim_wff_rv$port1__read =
	     CAN_FIRE_RL_deburst_debug_inSerial_takeW ?
	       deburst_debug_inSerial_shim_wff_rv$port0__write_1 :
	       deburst_debug_inSerial_shim_wff_rv ;
  assign deburst_debug_inSerial_shim_wff_rv$port2__read =
	     CAN_FIRE_RL_deburst_debug_forward_write_req ?
	       76'h2AAAAAAAAAAAAAAAAAA :
	       deburst_debug_inSerial_shim_wff_rv$port1__read ;
  assign deburst_debug_inSerial_shim_bff_rv$EN_port0__write =
	     WILL_FIRE_RL_deburst_debug_handle_write_rsp &&
	     deburst_debug_countWriteRspFF_first__69_ULE_de_ETC___d471 ;
  assign deburst_debug_inSerial_shim_bff_rv$port0__write_1 =
	     { 1'd1, deburst_debug_outShim_bff$D_OUT } ;
  assign deburst_debug_inSerial_shim_bff_rv$port1__read =
	     deburst_debug_inSerial_shim_bff_rv$EN_port0__write ?
	       deburst_debug_inSerial_shim_bff_rv$port0__write_1 :
	       deburst_debug_inSerial_shim_bff_rv ;
  assign deburst_debug_inSerial_shim_bff_rv$port2__read =
	     CAN_FIRE_RL_deburst_debug_inSerial_takeB ?
	       7'd42 :
	       deburst_debug_inSerial_shim_bff_rv$port1__read ;
  assign deburst_debug_inSerial_shim_arff_rv$port0__write_1 =
	     { 1'd1, deburst_debug_inShim_arff$D_OUT } ;
  assign deburst_debug_inSerial_shim_arff_rv$port1__read =
	     WILL_FIRE_RL_deburst_debug_inSerial_takeAR ?
	       deburst_debug_inSerial_shim_arff_rv$port0__write_1 :
	       deburst_debug_inSerial_shim_arff_rv ;
  assign deburst_debug_inSerial_shim_arff_rv$EN_port1__write =
	     WILL_FIRE_RL_deburst_debug_forward_read_req &&
	     deburst_debug_readsSent_93_EQ_deburst_debug_in_ETC___d504 ;
  assign deburst_debug_inSerial_shim_arff_rv$port2__read =
	     deburst_debug_inSerial_shim_arff_rv$EN_port1__write ?
	       98'h0AAAAAAAAAAAAAAAAAAAAAAAA :
	       deburst_debug_inSerial_shim_arff_rv$port1__read ;
  assign deburst_debug_inSerial_shim_rff_rv$port0__write_1 =
	     { 1'd1,
	       deburst_debug_outShim_rff$D_OUT[72:3],
	       deburst_debug_lastReadRspFF$D_OUT,
	       deburst_debug_outShim_rff$D_OUT[1:0] } ;
  assign deburst_debug_inSerial_shim_rff_rv$port1__read =
	     CAN_FIRE_RL_deburst_debug_forward_read_rsp ?
	       deburst_debug_inSerial_shim_rff_rv$port0__write_1 :
	       deburst_debug_inSerial_shim_rff_rv ;
  assign deburst_debug_inSerial_shim_rff_rv$port2__read =
	     CAN_FIRE_RL_deburst_debug_inSerial_takeR ?
	       74'h0AAAAAAAAAAAAAAAAAA :
	       deburst_debug_inSerial_shim_rff_rv$port1__read ;
  assign deburst_debug_inSerial_state$EN_port0__write =
	     WILL_FIRE_RL_deburst_debug_inSerial_takeAW ||
	     WILL_FIRE_RL_deburst_debug_inSerial_takeAR ;
  assign deburst_debug_inSerial_state$port0__write_1 =
	     WILL_FIRE_RL_deburst_debug_inSerial_takeAW ? 2'd1 : 2'd2 ;
  assign deburst_debug_inSerial_state$port1__read =
	     deburst_debug_inSerial_state$EN_port0__write ?
	       deburst_debug_inSerial_state$port0__write_1 :
	       deburst_debug_inSerial_state ;
  assign deburst_debug_inSerial_state$EN_port1__write =
	     WILL_FIRE_RL_deburst_debug_inSerial_takeW &&
	     deburst_debug_inShim_wff$D_OUT[2] ||
	     WILL_FIRE_RL_deburst_debug_inSerial_takeR &&
	     deburst_debug_inSerial_shim_rff_rv$port1__read[2] ||
	     WILL_FIRE_RL_deburst_debug_inSerial_takeB ;
  assign deburst_debug_inSerial_state$port1__write_1 =
	     (MUX_deburst_debug_inSerial_state$port1__write_1__SEL_1 ||
	      WILL_FIRE_RL_deburst_debug_inSerial_takeB) ?
	       2'd0 :
	       2'd2 ;
  assign deburst_debug_inSerial_state$port2__read =
	     deburst_debug_inSerial_state$EN_port1__write ?
	       deburst_debug_inSerial_state$port1__write_1 :
	       deburst_debug_inSerial_state$port1__read ;
  assign deburst_dm_inSerial_shim_awff_rv$port0__write_1 =
	     { 1'd1, deburst_dm_inShim_awff$D_OUT } ;
  assign deburst_dm_inSerial_shim_awff_rv$port1__read =
	     WILL_FIRE_RL_deburst_dm_inSerial_takeAW ?
	       deburst_dm_inSerial_shim_awff_rv$port0__write_1 :
	       deburst_dm_inSerial_shim_awff_rv ;
  assign deburst_dm_inSerial_shim_awff_rv$EN_port1__write =
	     WILL_FIRE_RL_deburst_dm_forward_write_req &&
	     deburst_dm_inSerial_shim_wff_rv$port1__read[2] ;
  assign deburst_dm_inSerial_shim_awff_rv$port2__read =
	     deburst_dm_inSerial_shim_awff_rv$EN_port1__write ?
	       98'h0AAAAAAAAAAAAAAAAAAAAAAAA :
	       deburst_dm_inSerial_shim_awff_rv$port1__read ;
  assign deburst_dm_inSerial_shim_wff_rv$port0__write_1 =
	     { 1'd1, deburst_dm_inShim_wff$D_OUT } ;
  assign deburst_dm_inSerial_shim_wff_rv$port1__read =
	     WILL_FIRE_RL_deburst_dm_inSerial_takeW ?
	       deburst_dm_inSerial_shim_wff_rv$port0__write_1 :
	       deburst_dm_inSerial_shim_wff_rv ;
  assign deburst_dm_inSerial_shim_wff_rv$port2__read =
	     CAN_FIRE_RL_deburst_dm_forward_write_req ?
	       76'h2AAAAAAAAAAAAAAAAAA :
	       deburst_dm_inSerial_shim_wff_rv$port1__read ;
  assign deburst_dm_inSerial_shim_bff_rv$EN_port0__write =
	     WILL_FIRE_RL_deburst_dm_handle_write_rsp &&
	     deburst_dm_countWriteRspFF_first__56_ULE_debur_ETC___d658 ;
  assign deburst_dm_inSerial_shim_bff_rv$port0__write_1 =
	     { 1'd1, deburst_dm_outShim_bff$D_OUT } ;
  assign deburst_dm_inSerial_shim_bff_rv$port1__read =
	     deburst_dm_inSerial_shim_bff_rv$EN_port0__write ?
	       deburst_dm_inSerial_shim_bff_rv$port0__write_1 :
	       deburst_dm_inSerial_shim_bff_rv ;
  assign deburst_dm_inSerial_shim_bff_rv$port2__read =
	     CAN_FIRE_RL_deburst_dm_inSerial_takeB ?
	       7'd42 :
	       deburst_dm_inSerial_shim_bff_rv$port1__read ;
  assign deburst_dm_inSerial_shim_arff_rv$port0__write_1 =
	     { 1'd1, deburst_dm_inShim_arff$D_OUT } ;
  assign deburst_dm_inSerial_shim_arff_rv$port1__read =
	     WILL_FIRE_RL_deburst_dm_inSerial_takeAR ?
	       deburst_dm_inSerial_shim_arff_rv$port0__write_1 :
	       deburst_dm_inSerial_shim_arff_rv ;
  assign deburst_dm_inSerial_shim_arff_rv$EN_port1__write =
	     WILL_FIRE_RL_deburst_dm_forward_read_req &&
	     deburst_dm_readsSent_80_EQ_deburst_dm_inSerial_ETC___d691 ;
  assign deburst_dm_inSerial_shim_arff_rv$port2__read =
	     deburst_dm_inSerial_shim_arff_rv$EN_port1__write ?
	       98'h0AAAAAAAAAAAAAAAAAAAAAAAA :
	       deburst_dm_inSerial_shim_arff_rv$port1__read ;
  assign deburst_dm_inSerial_shim_rff_rv$port0__write_1 =
	     { 1'd1,
	       deburst_dm_outShim_rff$D_OUT[72:3],
	       deburst_dm_lastReadRspFF$D_OUT,
	       deburst_dm_outShim_rff$D_OUT[1:0] } ;
  assign deburst_dm_inSerial_shim_rff_rv$port1__read =
	     CAN_FIRE_RL_deburst_dm_forward_read_rsp ?
	       deburst_dm_inSerial_shim_rff_rv$port0__write_1 :
	       deburst_dm_inSerial_shim_rff_rv ;
  assign deburst_dm_inSerial_shim_rff_rv$port2__read =
	     CAN_FIRE_RL_deburst_dm_inSerial_takeR ?
	       74'h0AAAAAAAAAAAAAAAAAA :
	       deburst_dm_inSerial_shim_rff_rv$port1__read ;
  assign deburst_dm_inSerial_state$EN_port0__write =
	     WILL_FIRE_RL_deburst_dm_inSerial_takeAW ||
	     WILL_FIRE_RL_deburst_dm_inSerial_takeAR ;
  assign deburst_dm_inSerial_state$port0__write_1 =
	     WILL_FIRE_RL_deburst_dm_inSerial_takeAW ? 2'd1 : 2'd2 ;
  assign deburst_dm_inSerial_state$port1__read =
	     deburst_dm_inSerial_state$EN_port0__write ?
	       deburst_dm_inSerial_state$port0__write_1 :
	       deburst_dm_inSerial_state ;
  assign deburst_dm_inSerial_state$EN_port1__write =
	     WILL_FIRE_RL_deburst_dm_inSerial_takeW &&
	     deburst_dm_inShim_wff$D_OUT[2] ||
	     WILL_FIRE_RL_deburst_dm_inSerial_takeR &&
	     deburst_dm_inSerial_shim_rff_rv$port1__read[2] ||
	     WILL_FIRE_RL_deburst_dm_inSerial_takeB ;
  assign deburst_dm_inSerial_state$port1__write_1 =
	     (MUX_deburst_dm_inSerial_state$port1__write_1__SEL_1 ||
	      WILL_FIRE_RL_deburst_dm_inSerial_takeB) ?
	       2'd0 :
	       2'd2 ;
  assign deburst_dm_inSerial_state$port2__read =
	     deburst_dm_inSerial_state$EN_port1__write ?
	       deburst_dm_inSerial_state$port1__write_1 :
	       deburst_dm_inSerial_state$port1__read ;
  assign dm_master_nonsynth_awFF_rv$port0__write_1 =
	     { 1'd1, deburst_dm_outShim_awff$D_OUT } ;
  assign dm_master_nonsynth_awFF_rv$port1__read =
	     CAN_FIRE_RL_dm_master_nonsynth_consumeAW ?
	       dm_master_nonsynth_awFF_rv$port0__write_1 :
	       dm_master_nonsynth_awFF_rv ;
  assign dm_master_nonsynth_awFF_rv$EN_port1__write =
	     dm_master_nonsynth_awFF_rv$port1__read[97] &&
	     CAN_FIRE_RL_merged_1_genFirst ;
  assign dm_master_nonsynth_awFF_rv$port2__read =
	     dm_master_nonsynth_awFF_rv$EN_port1__write ?
	       98'h0AAAAAAAAAAAAAAAAAAAAAAAA :
	       dm_master_nonsynth_awFF_rv$port1__read ;
  assign ifcs_0_noRoute_inner_currentReq$EN_port0__write =
	     WILL_FIRE_RL_ifcs_0_nonRoutableFlit &&
	     merged_0_flitLeft == 8'd0 ;
  assign ifcs_0_noRoute_inner_currentReq$port0__write_1 =
	     { cpu$dmem_master_awid,
	       cpu$dmem_master_awaddr,
	       cpu$dmem_master_awlen,
	       cpu$dmem_master_awsize,
	       cpu$dmem_master_awburst,
	       cpu$dmem_master_awlock,
	       cpu$dmem_master_awcache,
	       cpu$dmem_master_awprot,
	       cpu$dmem_master_awqos,
	       cpu$dmem_master_awregion } ;
  assign ifcs_0_noRoute_inner_currentReq$port1__read =
	     ifcs_0_noRoute_inner_currentReq$EN_port0__write ?
	       ifcs_0_noRoute_inner_currentReq$port0__write_1 :
	       ifcs_0_noRoute_inner_currentReq ;
  assign ifcs_0_noRoute_inner_pendingReq$EN_port0__write =
	     WILL_FIRE_RL_ifcs_0_nonRoutableFlit &&
	     merged_0_flitLeft == 8'd0 ;
  assign ifcs_0_noRoute_inner_pendingReq$port1__read =
	     ifcs_0_noRoute_inner_pendingReq$EN_port0__write ||
	     ifcs_0_noRoute_inner_pendingReq ;
  assign ifcs_0_noRoute_inner_pendingReq$port2__read =
	     !CAN_FIRE_RL_ifcs_0_nonRoutableGenRsp &&
	     ifcs_0_noRoute_inner_pendingReq$port1__read ;
  assign ifcs_1_noRoute_inner_currentReq$EN_port0__write =
	     WILL_FIRE_RL_ifcs_1_nonRoutableFlit &&
	     merged_1_flitLeft == 8'd0 ;
  assign ifcs_1_noRoute_inner_currentReq$port1__read =
	     ifcs_1_noRoute_inner_currentReq$EN_port0__write ?
	       dm_master_nonsynth_awFF_rv$port1__read[96:0] :
	       ifcs_1_noRoute_inner_currentReq ;
  assign ifcs_1_noRoute_inner_pendingReq$EN_port0__write =
	     WILL_FIRE_RL_ifcs_1_nonRoutableFlit &&
	     merged_1_flitLeft == 8'd0 ;
  assign ifcs_1_noRoute_inner_pendingReq$port1__read =
	     ifcs_1_noRoute_inner_pendingReq$EN_port0__write ||
	     ifcs_1_noRoute_inner_pendingReq ;
  assign ifcs_1_noRoute_inner_pendingReq$port2__read =
	     !CAN_FIRE_RL_ifcs_1_nonRoutableGenRsp &&
	     ifcs_1_noRoute_inner_pendingReq$port1__read ;
  assign ifcs_0_1_noRoute_currentReq$port0__write_1 =
	     { cpu$dmem_master_arid,
	       cpu$dmem_master_araddr,
	       cpu$dmem_master_arlen,
	       cpu$dmem_master_arsize,
	       cpu$dmem_master_arburst,
	       cpu$dmem_master_arlock,
	       cpu$dmem_master_arcache,
	       cpu$dmem_master_arprot,
	       cpu$dmem_master_arqos,
	       cpu$dmem_master_arregion } ;
  assign ifcs_0_1_noRoute_currentReq$port1__read =
	     CAN_FIRE_RL_ifcs_0_1_nonRoutableFlit ?
	       ifcs_0_1_noRoute_currentReq$port0__write_1 :
	       ifcs_0_1_noRoute_currentReq ;
  assign ifcs_0_1_noRoute_flitCount$port0__write_1 =
	     { 1'd0, cpu$dmem_master_arlen } + 9'd1 ;
  assign ifcs_0_1_noRoute_flitCount$port1__write_1 =
	     x_port1__read__h81220 - 9'd1 ;
  assign ifcs_0_1_noRoute_flitCount$port2__read =
	     CAN_FIRE_RL_ifcs_0_1_nonRoutableGenRsp ?
	       ifcs_0_1_noRoute_flitCount$port1__write_1 :
	       x_port1__read__h81220 ;
  assign ifcs_1_1_noRoute_currentReq$port1__read =
	     CAN_FIRE_RL_ifcs_1_1_nonRoutableFlit ?
	       deburst_dm_outShim_arff$D_OUT :
	       ifcs_1_1_noRoute_currentReq ;
  assign ifcs_1_1_noRoute_flitCount$port0__write_1 =
	     { 1'd0, deburst_dm_outShim_arff$D_OUT[28:21] } + 9'd1 ;
  assign ifcs_1_1_noRoute_flitCount$port1__write_1 =
	     x_port1__read__h83666 - 9'd1 ;
  assign ifcs_1_1_noRoute_flitCount$port2__read =
	     CAN_FIRE_RL_ifcs_1_1_nonRoutableGenRsp ?
	       ifcs_1_1_noRoute_flitCount$port1__write_1 :
	       x_port1__read__h83666 ;

  // register activeSource_0
  assign activeSource_0$D_IN =
	     MUX_activeSource_0$write_1__SEL_1 ?
	       MUX_activeSource_0$write_1__VAL_1 :
	       MUX_activeSource_0$write_1__VAL_1 ;
  assign activeSource_0$EN =
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     !ifcs_0_innerReq$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	     !ifcs_1_innerReq$D_OUT[2] ;

  // register activeSource_1
  assign activeSource_1$D_IN =
	     MUX_activeSource_0$write_1__SEL_1 ?
	       MUX_activeSource_1$write_1__VAL_2 :
	       MUX_activeSource_1$write_1__VAL_2 ;
  assign activeSource_1$EN =
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     !ifcs_0_innerReq$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	     !ifcs_1_innerReq$D_OUT[2] ;

  // register activeSource_1_0
  assign activeSource_1_0$D_IN = 1'b0 ;
  assign activeSource_1_0$EN = 1'b0 ;

  // register activeSource_1_0_1
  assign activeSource_1_0_1$D_IN = 1'b0 ;
  assign activeSource_1_0_1$EN = 1'b0 ;

  // register activeSource_1_1
  assign activeSource_1_1$D_IN = 1'b0 ;
  assign activeSource_1_1$EN = 1'b0 ;

  // register activeSource_1_1_0
  always@(MUX_activeSource_1_1_0$write_1__SEL_1 or
	  MUX_activeSource_1_1_0$write_1__VAL_1 or
	  MUX_activeSource_1_1_0$write_1__SEL_2 or
	  MUX_activeSource_1_1_0$write_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_activeSource_1_1_0$write_1__SEL_1:
	  activeSource_1_1_0$D_IN = MUX_activeSource_1_1_0$write_1__VAL_1;
      MUX_activeSource_1_1_0$write_1__SEL_2:
	  activeSource_1_1_0$D_IN = MUX_activeSource_1_1_0$write_1__VAL_1;
      MUX_activeSource_1_1_0$write_1__SEL_3:
	  activeSource_1_1_0$D_IN = MUX_activeSource_1_1_0$write_1__VAL_1;
      default: activeSource_1_1_0$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign activeSource_1_1_0$EN =
	     WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	     !ifcs_0_1_rspBack$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	     !ifcs_1_1_rspBack$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	     !ifcs_2_1_rspBack$D_OUT[2] ;

  // register activeSource_1_1_1
  assign activeSource_1_1_1$D_IN = 1'b0 ;
  assign activeSource_1_1_1$EN = 1'b0 ;

  // register activeSource_1_1_1_1
  always@(MUX_activeSource_1_1_0$write_1__SEL_1 or
	  MUX_activeSource_1_1_1_1$write_1__VAL_1 or
	  MUX_activeSource_1_1_0$write_1__SEL_2 or
	  MUX_activeSource_1_1_0$write_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_activeSource_1_1_0$write_1__SEL_1:
	  activeSource_1_1_1_1$D_IN = MUX_activeSource_1_1_1_1$write_1__VAL_1;
      MUX_activeSource_1_1_0$write_1__SEL_2:
	  activeSource_1_1_1_1$D_IN = MUX_activeSource_1_1_1_1$write_1__VAL_1;
      MUX_activeSource_1_1_0$write_1__SEL_3:
	  activeSource_1_1_1_1$D_IN = MUX_activeSource_1_1_1_1$write_1__VAL_1;
      default: activeSource_1_1_1_1$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign activeSource_1_1_1_1$EN =
	     WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	     !ifcs_0_1_rspBack$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	     !ifcs_1_1_rspBack$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	     !ifcs_2_1_rspBack$D_OUT[2] ;

  // register activeSource_1_1_2
  always@(MUX_activeSource_1_1_0$write_1__SEL_1 or
	  MUX_activeSource_1_1_2$write_1__VAL_1 or
	  MUX_activeSource_1_1_0$write_1__SEL_2 or
	  MUX_activeSource_1_1_0$write_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_activeSource_1_1_0$write_1__SEL_1:
	  activeSource_1_1_2$D_IN = MUX_activeSource_1_1_2$write_1__VAL_1;
      MUX_activeSource_1_1_0$write_1__SEL_2:
	  activeSource_1_1_2$D_IN = MUX_activeSource_1_1_2$write_1__VAL_1;
      MUX_activeSource_1_1_0$write_1__SEL_3:
	  activeSource_1_1_2$D_IN = MUX_activeSource_1_1_2$write_1__VAL_1;
      default: activeSource_1_1_2$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign activeSource_1_1_2$EN =
	     WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	     !ifcs_0_1_rspBack$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	     !ifcs_1_1_rspBack$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	     !ifcs_2_1_rspBack$D_OUT[2] ;

  // register activeSource_1_2
  assign activeSource_1_2$D_IN = 1'b0 ;
  assign activeSource_1_2$EN = 1'b0 ;

  // register arbiter_1_1_firstHot
  assign arbiter_1_1_firstHot$D_IN =
	     IF_SEXT_arbiter_1_1_lastSelect_657_658_BIT_0_6_ETC___d2713 ;
  assign arbiter_1_1_firstHot$EN = CAN_FIRE_RL_arbitrate_3 ;

  // register arbiter_1_1_lastSelect
  assign arbiter_1_1_lastSelect$D_IN =
	     IF_SEXT_arbiter_1_1_lastSelect_657_658_BIT_0_6_ETC___d2701 ;
  assign arbiter_1_1_lastSelect$EN = CAN_FIRE_RL_arbitrate_3 ;

  // register arbiter_1_1_lastSelect_1
  assign arbiter_1_1_lastSelect_1$D_IN =
	     IF_SEXT_arbiter_1_1_lastSelect_657_658_BIT_0_6_ETC___d2707 ;
  assign arbiter_1_1_lastSelect_1$EN = CAN_FIRE_RL_arbitrate_3 ;

  // register arbiter_1_firstHot
  assign arbiter_1_firstHot$D_IN =
	     IF_SEXT_arbiter_1_lastSelect_031_032_BIT_0_033_ETC___d2087 ;
  assign arbiter_1_firstHot$EN = CAN_FIRE_RL_arbitrate_1 ;

  // register arbiter_1_firstHot_1
  assign arbiter_1_firstHot_1$D_IN =
	     IF_SEXT_arbiter_1_lastSelect_2_477_478_BIT_0_4_ETC___d2505 ;
  assign arbiter_1_firstHot_1$EN = CAN_FIRE_RL_arbitrate_2 ;

  // register arbiter_1_lastSelect
  assign arbiter_1_lastSelect$D_IN =
	     IF_SEXT_arbiter_1_lastSelect_031_032_BIT_0_033_ETC___d2075 ;
  assign arbiter_1_lastSelect$EN = CAN_FIRE_RL_arbitrate_1 ;

  // register arbiter_1_lastSelect_1
  assign arbiter_1_lastSelect_1$D_IN =
	     IF_SEXT_arbiter_1_lastSelect_031_032_BIT_0_033_ETC___d2081 ;
  assign arbiter_1_lastSelect_1$EN = CAN_FIRE_RL_arbitrate_1 ;

  // register arbiter_1_lastSelect_2
  assign arbiter_1_lastSelect_2$D_IN =
	     IF_SEXT_arbiter_1_lastSelect_2_477_478_BIT_0_4_ETC___d2501 ;
  assign arbiter_1_lastSelect_2$EN = CAN_FIRE_RL_arbitrate_2 ;

  // register arbiter_firstHot
  assign arbiter_firstHot$D_IN =
	     IF_SEXT_arbiter_lastSelect_841_842_BIT_0_843_A_ETC___d1869 ;
  assign arbiter_firstHot$EN = CAN_FIRE_RL_arbitrate ;

  // register arbiter_lastSelect
  assign arbiter_lastSelect$D_IN =
	     IF_SEXT_arbiter_lastSelect_841_842_BIT_0_843_A_ETC___d1865 ;
  assign arbiter_lastSelect$EN = CAN_FIRE_RL_arbitrate ;

  // register deburst_debug_flitReceived
  assign deburst_debug_flitReceived$D_IN =
	     deburst_debug_countWriteRspFF_first__69_ULE_de_ETC___d471 ?
	       8'd0 :
	       x__h21413 ;
  assign deburst_debug_flitReceived$EN =
	     CAN_FIRE_RL_deburst_debug_handle_write_rsp ;

  // register deburst_debug_inSerial_lastWasRead
  assign deburst_debug_inSerial_lastWasRead$D_IN =
	     !WILL_FIRE_RL_deburst_debug_inSerial_takeAW ;
  assign deburst_debug_inSerial_lastWasRead$EN =
	     WILL_FIRE_RL_deburst_debug_inSerial_takeAW ||
	     WILL_FIRE_RL_deburst_debug_inSerial_takeAR ;

  // register deburst_debug_inSerial_shim_arff_rv
  assign deburst_debug_inSerial_shim_arff_rv$D_IN =
	     deburst_debug_inSerial_shim_arff_rv$port2__read ;
  assign deburst_debug_inSerial_shim_arff_rv$EN = 1'b1 ;

  // register deburst_debug_inSerial_shim_awff_rv
  assign deburst_debug_inSerial_shim_awff_rv$D_IN =
	     deburst_debug_inSerial_shim_awff_rv$port2__read ;
  assign deburst_debug_inSerial_shim_awff_rv$EN = 1'b1 ;

  // register deburst_debug_inSerial_shim_bff_rv
  assign deburst_debug_inSerial_shim_bff_rv$D_IN =
	     deburst_debug_inSerial_shim_bff_rv$port2__read ;
  assign deburst_debug_inSerial_shim_bff_rv$EN = 1'b1 ;

  // register deburst_debug_inSerial_shim_rff_rv
  assign deburst_debug_inSerial_shim_rff_rv$D_IN =
	     deburst_debug_inSerial_shim_rff_rv$port2__read ;
  assign deburst_debug_inSerial_shim_rff_rv$EN = 1'b1 ;

  // register deburst_debug_inSerial_shim_wff_rv
  assign deburst_debug_inSerial_shim_wff_rv$D_IN =
	     deburst_debug_inSerial_shim_wff_rv$port2__read ;
  assign deburst_debug_inSerial_shim_wff_rv$EN = 1'b1 ;

  // register deburst_debug_inSerial_state
  assign deburst_debug_inSerial_state$D_IN =
	     deburst_debug_inSerial_state$port2__read ;
  assign deburst_debug_inSerial_state$EN = 1'b1 ;

  // register deburst_debug_readsSent
  assign deburst_debug_readsSent$D_IN =
	     deburst_debug_readsSent_93_EQ_deburst_debug_in_ETC___d504 ?
	       8'd0 :
	       x__h21947 ;
  assign deburst_debug_readsSent$EN =
	     CAN_FIRE_RL_deburst_debug_forward_read_req ;

  // register deburst_debug_writesSent
  assign deburst_debug_writesSent$D_IN =
	     deburst_debug_inSerial_shim_wff_rv$port1__read[2] ?
	       8'd0 :
	       x__h21296 ;
  assign deburst_debug_writesSent$EN =
	     CAN_FIRE_RL_deburst_debug_forward_write_req ;

  // register deburst_dm_flitReceived
  assign deburst_dm_flitReceived$D_IN =
	     deburst_dm_countWriteRspFF_first__56_ULE_debur_ETC___d658 ?
	       8'd0 :
	       x__h27807 ;
  assign deburst_dm_flitReceived$EN =
	     CAN_FIRE_RL_deburst_dm_handle_write_rsp ;

  // register deburst_dm_inSerial_lastWasRead
  assign deburst_dm_inSerial_lastWasRead$D_IN =
	     !WILL_FIRE_RL_deburst_dm_inSerial_takeAW ;
  assign deburst_dm_inSerial_lastWasRead$EN =
	     WILL_FIRE_RL_deburst_dm_inSerial_takeAW ||
	     WILL_FIRE_RL_deburst_dm_inSerial_takeAR ;

  // register deburst_dm_inSerial_shim_arff_rv
  assign deburst_dm_inSerial_shim_arff_rv$D_IN =
	     deburst_dm_inSerial_shim_arff_rv$port2__read ;
  assign deburst_dm_inSerial_shim_arff_rv$EN = 1'b1 ;

  // register deburst_dm_inSerial_shim_awff_rv
  assign deburst_dm_inSerial_shim_awff_rv$D_IN =
	     deburst_dm_inSerial_shim_awff_rv$port2__read ;
  assign deburst_dm_inSerial_shim_awff_rv$EN = 1'b1 ;

  // register deburst_dm_inSerial_shim_bff_rv
  assign deburst_dm_inSerial_shim_bff_rv$D_IN =
	     deburst_dm_inSerial_shim_bff_rv$port2__read ;
  assign deburst_dm_inSerial_shim_bff_rv$EN = 1'b1 ;

  // register deburst_dm_inSerial_shim_rff_rv
  assign deburst_dm_inSerial_shim_rff_rv$D_IN =
	     deburst_dm_inSerial_shim_rff_rv$port2__read ;
  assign deburst_dm_inSerial_shim_rff_rv$EN = 1'b1 ;

  // register deburst_dm_inSerial_shim_wff_rv
  assign deburst_dm_inSerial_shim_wff_rv$D_IN =
	     deburst_dm_inSerial_shim_wff_rv$port2__read ;
  assign deburst_dm_inSerial_shim_wff_rv$EN = 1'b1 ;

  // register deburst_dm_inSerial_state
  assign deburst_dm_inSerial_state$D_IN =
	     deburst_dm_inSerial_state$port2__read ;
  assign deburst_dm_inSerial_state$EN = 1'b1 ;

  // register deburst_dm_readsSent
  assign deburst_dm_readsSent$D_IN =
	     deburst_dm_readsSent_80_EQ_deburst_dm_inSerial_ETC___d691 ?
	       8'd0 :
	       x__h28341 ;
  assign deburst_dm_readsSent$EN = CAN_FIRE_RL_deburst_dm_forward_read_req ;

  // register deburst_dm_writesSent
  assign deburst_dm_writesSent$D_IN =
	     deburst_dm_inSerial_shim_wff_rv$port1__read[2] ?
	       8'd0 :
	       x__h27690 ;
  assign deburst_dm_writesSent$EN = CAN_FIRE_RL_deburst_dm_forward_write_req ;

  // register dm_master_nonsynth_awFF_rv
  assign dm_master_nonsynth_awFF_rv$D_IN =
	     dm_master_nonsynth_awFF_rv$port2__read ;
  assign dm_master_nonsynth_awFF_rv$EN = 1'b1 ;

  // register dm_master_nonsynth_currentRID
  assign dm_master_nonsynth_currentRID$D_IN =
	     deburst_dm_outShim_arff$D_OUT[96:93] ;
  assign dm_master_nonsynth_currentRID$EN =
	     WILL_FIRE_RL_msNoSynth_1_ar_forwardReady &&
	     dm_master_nonsynth_arCanPeek$wget &&
	     msNoSynth_1_ar_dwReady$whas ;

  // register dm_master_nonsynth_currentWID
  assign dm_master_nonsynth_currentWID$D_IN =
	     deburst_dm_outShim_awff$D_OUT[96:93] ;
  assign dm_master_nonsynth_currentWID$EN =
	     CAN_FIRE_RL_dm_master_nonsynth_consumeAW ;

  // register ifcs_0_1_noRoute_currentReq
  assign ifcs_0_1_noRoute_currentReq$D_IN =
	     ifcs_0_1_noRoute_currentReq$port1__read ;
  assign ifcs_0_1_noRoute_currentReq$EN = 1'b1 ;

  // register ifcs_0_1_noRoute_flitCount
  assign ifcs_0_1_noRoute_flitCount$D_IN =
	     ifcs_0_1_noRoute_flitCount$port2__read ;
  assign ifcs_0_1_noRoute_flitCount$EN = 1'b1 ;

  // register ifcs_0_1_state
  assign ifcs_0_1_state$D_IN = 2'd0 ;
  assign ifcs_0_1_state$EN =
	     WILL_FIRE_RL_ifcs_0_1_drainFlits ||
	     WILL_FIRE_RL_ifcs_0_1_followFlits ;

  // register ifcs_0_1_state_1
  assign ifcs_0_1_state_1$D_IN = !MUX_ifcs_0_1_state_1$write_1__SEL_1 ;
  assign ifcs_0_1_state_1$EN =
	     WILL_FIRE_RL_ifcs_0_1_followFlits_1 &&
	     tagController_shimSlave_rff$D_OUT[2] ||
	     WILL_FIRE_RL_ifcs_0_1_firstFlit_1 &&
	     !tagController_shimSlave_rff$D_OUT[2] ;

  // register ifcs_0_noRoute_inner_currentReq
  assign ifcs_0_noRoute_inner_currentReq$D_IN =
	     ifcs_0_noRoute_inner_currentReq$port1__read ;
  assign ifcs_0_noRoute_inner_currentReq$EN = 1'b1 ;

  // register ifcs_0_noRoute_inner_pendingReq
  assign ifcs_0_noRoute_inner_pendingReq$D_IN =
	     ifcs_0_noRoute_inner_pendingReq$port2__read ;
  assign ifcs_0_noRoute_inner_pendingReq$EN = 1'b1 ;

  // register ifcs_0_state
  always@(MUX_ifcs_0_state$write_1__SEL_1 or
	  MUX_ifcs_0_state$write_1__SEL_2 or MUX_ifcs_0_state$write_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ifcs_0_state$write_1__SEL_1: ifcs_0_state$D_IN = 2'd0;
      MUX_ifcs_0_state$write_1__SEL_2: ifcs_0_state$D_IN = 2'd1;
      MUX_ifcs_0_state$write_1__SEL_3: ifcs_0_state$D_IN = 2'd2;
      default: ifcs_0_state$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign ifcs_0_state$EN =
	     (WILL_FIRE_RL_ifcs_0_drainFlits ||
	      WILL_FIRE_RL_ifcs_0_followFlits) &&
	     cpu$dmem_master_wlast ||
	     WILL_FIRE_RL_ifcs_0_firstFlit && !cpu$dmem_master_wlast ||
	     WILL_FIRE_RL_ifcs_0_nonRoutableGenRsp && !cpu$dmem_master_wlast ;

  // register ifcs_0_state_1
  assign ifcs_0_state_1$D_IN = 1'd0 ;
  assign ifcs_0_state_1$EN = CAN_FIRE_RL_ifcs_0_followFlits_1 ;

  // register ifcs_1_1_noRoute_currentReq
  assign ifcs_1_1_noRoute_currentReq$D_IN =
	     ifcs_1_1_noRoute_currentReq$port1__read ;
  assign ifcs_1_1_noRoute_currentReq$EN = 1'b1 ;

  // register ifcs_1_1_noRoute_flitCount
  assign ifcs_1_1_noRoute_flitCount$D_IN =
	     ifcs_1_1_noRoute_flitCount$port2__read ;
  assign ifcs_1_1_noRoute_flitCount$EN = 1'b1 ;

  // register ifcs_1_1_state
  assign ifcs_1_1_state$D_IN = 2'd0 ;
  assign ifcs_1_1_state$EN =
	     WILL_FIRE_RL_ifcs_1_1_drainFlits ||
	     WILL_FIRE_RL_ifcs_1_1_followFlits ;

  // register ifcs_1_1_state_1
  assign ifcs_1_1_state_1$D_IN = !MUX_ifcs_1_1_state_1$write_1__SEL_1 ;
  assign ifcs_1_1_state_1$EN =
	     WILL_FIRE_RL_ifcs_1_1_followFlits_1 &&
	     near_mem_io$axi4_slave_rlast ||
	     WILL_FIRE_RL_ifcs_1_1_firstFlit_1 &&
	     !near_mem_io$axi4_slave_rlast ;

  // register ifcs_1_noRoute_inner_currentReq
  assign ifcs_1_noRoute_inner_currentReq$D_IN =
	     ifcs_1_noRoute_inner_currentReq$port1__read ;
  assign ifcs_1_noRoute_inner_currentReq$EN = 1'b1 ;

  // register ifcs_1_noRoute_inner_pendingReq
  assign ifcs_1_noRoute_inner_pendingReq$D_IN =
	     ifcs_1_noRoute_inner_pendingReq$port2__read ;
  assign ifcs_1_noRoute_inner_pendingReq$EN = 1'b1 ;

  // register ifcs_1_state
  always@(MUX_ifcs_1_state$write_1__SEL_1 or
	  MUX_ifcs_1_state$write_1__SEL_2 or MUX_ifcs_1_state$write_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ifcs_1_state$write_1__SEL_1: ifcs_1_state$D_IN = 2'd0;
      MUX_ifcs_1_state$write_1__SEL_2: ifcs_1_state$D_IN = 2'd1;
      MUX_ifcs_1_state$write_1__SEL_3: ifcs_1_state$D_IN = 2'd2;
      default: ifcs_1_state$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign ifcs_1_state$EN =
	     (WILL_FIRE_RL_ifcs_1_drainFlits ||
	      WILL_FIRE_RL_ifcs_1_followFlits) &&
	     deburst_dm_outShim_wff$D_OUT[2] ||
	     WILL_FIRE_RL_ifcs_1_firstFlit &&
	     !deburst_dm_outShim_wff$D_OUT[2] ||
	     WILL_FIRE_RL_ifcs_1_nonRoutableGenRsp &&
	     !deburst_dm_outShim_wff$D_OUT[2] ;

  // register ifcs_1_state_1
  assign ifcs_1_state_1$D_IN = 1'd0 ;
  assign ifcs_1_state_1$EN = CAN_FIRE_RL_ifcs_1_followFlits_1 ;

  // register ifcs_2_1_state
  assign ifcs_2_1_state$D_IN = !MUX_ifcs_2_1_state$write_1__SEL_1 ;
  assign ifcs_2_1_state$EN =
	     WILL_FIRE_RL_ifcs_2_1_followFlits && plic$axi4_slave_rlast ||
	     WILL_FIRE_RL_ifcs_2_1_firstFlit && !plic$axi4_slave_rlast ;

  // register ifcs_2_state
  assign ifcs_2_state$D_IN = 1'd0 ;
  assign ifcs_2_state$EN = CAN_FIRE_RL_ifcs_2_followFlits ;

  // register merged_0_flitLeft
  assign merged_0_flitLeft$D_IN =
	     WILL_FIRE_RL_merged_0_genOther ?
	       MUX_merged_0_flitLeft$write_1__VAL_1 :
	       cpu$dmem_master_awlen ;
  assign merged_0_flitLeft$EN = msNoSynth_0_w_dwReady$whas ;

  // register merged_1_flitLeft
  assign merged_1_flitLeft$D_IN =
	     WILL_FIRE_RL_merged_1_genFirst ?
	       dm_master_nonsynth_awFF_rv$port1__read[28:21] :
	       MUX_merged_1_flitLeft$write_1__VAL_2 ;
  assign merged_1_flitLeft$EN =
	     WILL_FIRE_RL_merged_1_genFirst ||
	     WILL_FIRE_RL_merged_1_genOther ;

  // register split_0_flitLeft
  assign split_0_flitLeft$D_IN =
	     MUX_split_0_flitLeft$write_1__SEL_1 ?
	       MUX_split_0_flitLeft$write_1__VAL_1 :
	       split_0_doPut$wget[175:168] ;
  assign split_0_flitLeft$EN = ssNoSynth_0_w_buffer_enqw$whas ;

  // register split_1_flitLeft
  assign split_1_flitLeft$D_IN =
	     MUX_split_1_flitLeft$write_1__SEL_1 ?
	       MUX_split_1_flitLeft$write_1__VAL_1 :
	       split_1_doPut$wget[175:168] ;
  assign split_1_flitLeft$EN = ssNoSynth_1_w_buffer_enqw$whas ;

  // register split_2_flitLeft
  assign split_2_flitLeft$D_IN =
	     MUX_split_2_flitLeft$write_1__SEL_1 ?
	       MUX_split_2_flitLeft$write_1__VAL_1 :
	       split_2_doPut$wget[175:168] ;
  assign split_2_flitLeft$EN = ssNoSynth_2_w_buffer_enqw$whas ;

  // register state
  assign state$D_IN = !MUX_state$write_1__SEL_1 && !MUX_state$write_1__SEL_2 ;
  assign state$EN =
	     WILL_FIRE_RL_burst && ifcs_0_innerReq$D_OUT[2] ||
	     WILL_FIRE_RL_burst_1 && ifcs_1_innerReq$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     !ifcs_0_innerReq$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	     !ifcs_1_innerReq$D_OUT[2] ;

  // register state_1
  assign state_1$D_IN = 1'd0 ;
  assign state_1$EN =
	     WILL_FIRE_RL_burst_4 || WILL_FIRE_RL_burst_3 ||
	     WILL_FIRE_RL_burst_2 ;

  // register state_1_1
  assign state_1_1$D_IN = 1'd0 ;
  assign state_1_1$EN = WILL_FIRE_RL_burst_6 || WILL_FIRE_RL_burst_5 ;

  // register state_1_1_1
  assign state_1_1_1$D_IN =
	     !MUX_state_1_1_1$write_1__SEL_1 &&
	     !MUX_state_1_1_1$write_1__SEL_2 &&
	     !MUX_state_1_1_1$write_1__SEL_3 ;
  assign state_1_1_1$EN =
	     WILL_FIRE_RL_burst_7 && ifcs_0_1_rspBack$D_OUT[2] ||
	     WILL_FIRE_RL_burst_8 && ifcs_1_1_rspBack$D_OUT[2] ||
	     WILL_FIRE_RL_burst_9 && ifcs_2_1_rspBack$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	     !ifcs_0_1_rspBack$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	     !ifcs_1_1_rspBack$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	     !ifcs_2_1_rspBack$D_OUT[2] ;

  // submodule cpu
  assign cpu$dmem_master_arready = msNoSynth_0_ar_dwReady$whas ;
  assign cpu$dmem_master_awready = CAN_FIRE_RL_merged_0_genFirst ;
  assign cpu$dmem_master_bid =
	     msNoSynth_0_b_buffer_ff$EMPTY_N ?
	       msNoSynth_0_b_buffer_ff$D_OUT[5:2] :
	       msNoSynth_0_b_buffer_enqw$wget[5:2] ;
  assign cpu$dmem_master_bresp =
	     msNoSynth_0_b_buffer_ff$EMPTY_N ?
	       msNoSynth_0_b_buffer_ff$D_OUT[1:0] :
	       msNoSynth_0_b_buffer_enqw$wget[1:0] ;
  assign cpu$dmem_master_rdata =
	     msNoSynth_0_r_buffer_ff$EMPTY_N ?
	       msNoSynth_0_r_buffer_ff$D_OUT[132:5] :
	       msNoSynth_0_r_buffer_enqw$wget[132:5] ;
  assign cpu$dmem_master_rid =
	     msNoSynth_0_r_buffer_ff$EMPTY_N ?
	       msNoSynth_0_r_buffer_ff$D_OUT[136:133] :
	       msNoSynth_0_r_buffer_enqw$wget[136:133] ;
  assign cpu$dmem_master_rlast =
	     msNoSynth_0_r_buffer_ff$EMPTY_N ?
	       msNoSynth_0_r_buffer_ff$D_OUT[2] :
	       msNoSynth_0_r_buffer_enqw$wget[2] ;
  assign cpu$dmem_master_rresp =
	     msNoSynth_0_r_buffer_ff$EMPTY_N ?
	       msNoSynth_0_r_buffer_ff$D_OUT[4:3] :
	       msNoSynth_0_r_buffer_enqw$wget[4:3] ;
  assign cpu$dmem_master_ruser =
	     msNoSynth_0_r_buffer_ff$EMPTY_N ?
	       msNoSynth_0_r_buffer_ff$D_OUT[1:0] :
	       msNoSynth_0_r_buffer_enqw$wget[1:0] ;
  assign cpu$dmem_master_wready = msNoSynth_0_w_dwReady$whas ;
  assign cpu$hart0_csr_mem_server_request_put =
	     dm_csr_tap$client_request_get ;
  assign cpu$hart0_gpr_mem_server_request_put =
	     dm_gpr_tap_ifc$client_request_get ;
  assign cpu$hart0_put_other_req_put = debug_module$hart0_get_other_req_get ;
  assign cpu$hart0_server_reset_request_put =
	     WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ?
	       f_reset_reqs$D_OUT :
	       debug_module$hart0_reset_client_request_get ;
  assign cpu$hart0_server_run_halt_request_put =
	     debug_module$hart0_client_run_halt_request_get ;
  assign cpu$imem_master_arready = CAN_FIRE_RL_cpu_imem_ug_u_ar_doDrop ;
  assign cpu$imem_master_awready = CAN_FIRE_RL_cpu_imem_ug_u_aw_doDrop ;
  assign cpu$imem_master_bid =
	     cpu_imem_b_buffer_ff$EMPTY_N ?
	       cpu_imem_b_buffer_ff$D_OUT[6:2] :
	       cpu_imem_b_buffer_enqw$wget[6:2] ;
  assign cpu$imem_master_bresp =
	     cpu_imem_b_buffer_ff$EMPTY_N ?
	       cpu_imem_b_buffer_ff$D_OUT[1:0] :
	       cpu_imem_b_buffer_enqw$wget[1:0] ;
  assign cpu$imem_master_rdata =
	     cpu_imem_r_buffer_ff$EMPTY_N ?
	       cpu_imem_r_buffer_ff$D_OUT[132:5] :
	       cpu_imem_r_buffer_enqw$wget[132:5] ;
  assign cpu$imem_master_rid =
	     cpu_imem_r_buffer_ff$EMPTY_N ?
	       cpu_imem_r_buffer_ff$D_OUT[137:133] :
	       cpu_imem_r_buffer_enqw$wget[137:133] ;
  assign cpu$imem_master_rlast =
	     cpu_imem_r_buffer_ff$EMPTY_N ?
	       cpu_imem_r_buffer_ff$D_OUT[2] :
	       cpu_imem_r_buffer_enqw$wget[2] ;
  assign cpu$imem_master_rresp =
	     cpu_imem_r_buffer_ff$EMPTY_N ?
	       cpu_imem_r_buffer_ff$D_OUT[4:3] :
	       cpu_imem_r_buffer_enqw$wget[4:3] ;
  assign cpu$imem_master_ruser =
	     cpu_imem_r_buffer_ff$EMPTY_N ?
	       cpu_imem_r_buffer_ff$D_OUT[1:0] :
	       cpu_imem_r_buffer_enqw$wget[1:0] ;
  assign cpu$imem_master_wready = CAN_FIRE_RL_cpu_imem_ug_u_w_doDrop ;
  assign cpu$m_external_interrupt_req_set_not_clear = plic$v_targets_0_m_eip ;
  assign cpu$nmi_req_set_not_clear = nmi_req_set_not_clear ;
  assign cpu$s_external_interrupt_req_set_not_clear = plic$v_targets_1_m_eip ;
  assign cpu$set_verbosity_logdelay = set_verbosity_logdelay ;
  assign cpu$set_verbosity_verbosity = set_verbosity_verbosity ;
  assign cpu$software_interrupt_req_set_not_clear =
	     near_mem_io$get_sw_interrupt_req_get ;
  assign cpu$timer_interrupt_req_set_not_clear =
	     near_mem_io$get_timer_interrupt_req_get ;
  assign cpu$EN_hart0_server_reset_request_put =
	     WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ||
	     WILL_FIRE_RL_rl_cpu_hart0_reset_from_dm_start ;
  assign cpu$EN_hart0_server_reset_response_get =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_complete ;
  assign cpu$imem_master_bvalid = CAN_FIRE_RL_cpu_imem_b_forwardFlit ;
  assign cpu$imem_master_rvalid = CAN_FIRE_RL_cpu_imem_r_forwardFlit ;
  assign cpu$dmem_master_bvalid = CAN_FIRE_RL_msNoSynth_0_b_forwardFlit ;
  assign cpu$dmem_master_rvalid = CAN_FIRE_RL_msNoSynth_0_r_forwardFlit ;
  assign cpu$EN_set_verbosity = EN_set_verbosity ;
  assign cpu$EN_trace_data_out_get = WILL_FIRE_RL_merge_cpu_trace_data ;
  assign cpu$EN_hart0_server_run_halt_request_put =
	     CAN_FIRE_RL_ClientServerRequest ;
  assign cpu$EN_hart0_server_run_halt_response_get =
	     CAN_FIRE_RL_ClientServerResponse ;
  assign cpu$EN_hart0_put_other_req_put =
	     debug_module$RDY_hart0_get_other_req_get ;
  assign cpu$EN_hart0_gpr_mem_server_request_put =
	     CAN_FIRE_RL_ClientServerRequest_2 ;
  assign cpu$EN_hart0_gpr_mem_server_response_get =
	     CAN_FIRE_RL_ClientServerResponse_2 ;
  assign cpu$EN_hart0_csr_mem_server_request_put =
	     CAN_FIRE_RL_ClientServerRequest_4 ;
  assign cpu$EN_hart0_csr_mem_server_response_get =
	     CAN_FIRE_RL_ClientServerResponse_4 ;

  // submodule cpu_imem_b_buffer_ff
  assign cpu_imem_b_buffer_ff$D_IN = cpu_imem_b_buffer_enqw$wget ;
  assign cpu_imem_b_buffer_ff$ENQ = CAN_FIRE_RL_cpu_imem_b_buffer_enqueue ;
  assign cpu_imem_b_buffer_ff$DEQ = CAN_FIRE_RL_cpu_imem_b_buffer_dequeue ;
  assign cpu_imem_b_buffer_ff$CLR = 1'b0 ;

  // submodule cpu_imem_b_buffer_firstValid
  assign cpu_imem_b_buffer_firstValid$D_IN = 1'd1 ;
  assign cpu_imem_b_buffer_firstValid$EN = CAN_FIRE_RL_cpu_imem_b_dropFlit ;

  // submodule cpu_imem_r_buffer_ff
  assign cpu_imem_r_buffer_ff$D_IN = cpu_imem_r_buffer_enqw$wget ;
  assign cpu_imem_r_buffer_ff$ENQ = CAN_FIRE_RL_cpu_imem_r_buffer_enqueue ;
  assign cpu_imem_r_buffer_ff$DEQ = CAN_FIRE_RL_cpu_imem_r_buffer_dequeue ;
  assign cpu_imem_r_buffer_ff$CLR = 1'b0 ;

  // submodule cpu_imem_r_buffer_firstValid
  assign cpu_imem_r_buffer_firstValid$D_IN = 1'd1 ;
  assign cpu_imem_r_buffer_firstValid$EN = CAN_FIRE_RL_cpu_imem_r_dropFlit ;

  // submodule debug_module
  assign debug_module$dmi_read_addr_dm_addr = dm_dmi_read_addr_dm_addr ;
  assign debug_module$dmi_write_dm_addr = dm_dmi_write_dm_addr ;
  assign debug_module$dmi_write_dm_word = dm_dmi_write_dm_word ;
  assign debug_module$hart0_client_run_halt_response_put =
	     cpu$hart0_server_run_halt_response_get ;
  assign debug_module$hart0_csr_mem_client_response_put =
	     dm_csr_tap$server_response_get ;
  assign debug_module$hart0_gpr_mem_client_response_put =
	     dm_gpr_tap_ifc$server_response_get ;
  assign debug_module$hart0_reset_client_response_put =
	     cpu$hart0_server_reset_response_get ;
  assign debug_module$master_arready = dm_mem_tap$slave_arready ;
  assign debug_module$master_awready = dm_mem_tap$slave_awready ;
  assign debug_module$master_bid = dm_mem_tap$slave_bid ;
  assign debug_module$master_bresp = dm_mem_tap$slave_bresp ;
  assign debug_module$master_rdata = dm_mem_tap$slave_rdata ;
  assign debug_module$master_rid = dm_mem_tap$slave_rid ;
  assign debug_module$master_rlast = dm_mem_tap$slave_rlast ;
  assign debug_module$master_rresp = dm_mem_tap$slave_rresp ;
  assign debug_module$master_ruser = dm_mem_tap$slave_ruser ;
  assign debug_module$master_wready = dm_mem_tap$slave_wready ;
  assign debug_module$ndm_reset_client_response_put =
	     ndm_reset_client_response_put ;
  assign debug_module$EN_dmi_read_addr = EN_dm_dmi_read_addr ;
  assign debug_module$EN_dmi_read_data = EN_dm_dmi_read_data ;
  assign debug_module$EN_dmi_write = EN_dm_dmi_write ;
  assign debug_module$EN_hart0_reset_client_request_get =
	     WILL_FIRE_RL_rl_cpu_hart0_reset_from_dm_start ;
  assign debug_module$EN_hart0_reset_client_response_put =
	     WILL_FIRE_RL_rl_cpu_hart0_reset_complete &&
	     !f_reset_requestor$D_OUT ;
  assign debug_module$EN_hart0_client_run_halt_request_get =
	     CAN_FIRE_RL_ClientServerRequest ;
  assign debug_module$EN_hart0_client_run_halt_response_put =
	     CAN_FIRE_RL_ClientServerResponse ;
  assign debug_module$EN_hart0_get_other_req_get =
	     debug_module$RDY_hart0_get_other_req_get ;
  assign debug_module$EN_hart0_gpr_mem_client_request_get =
	     CAN_FIRE_RL_ClientServerRequest_1 ;
  assign debug_module$EN_hart0_gpr_mem_client_response_put =
	     CAN_FIRE_RL_ClientServerResponse_1 ;
  assign debug_module$EN_hart0_csr_mem_client_request_get =
	     CAN_FIRE_RL_ClientServerRequest_3 ;
  assign debug_module$EN_hart0_csr_mem_client_response_put =
	     CAN_FIRE_RL_ClientServerResponse_3 ;
  assign debug_module$EN_ndm_reset_client_request_get =
	     EN_ndm_reset_client_request_get ;
  assign debug_module$EN_ndm_reset_client_response_put =
	     EN_ndm_reset_client_response_put ;
  assign debug_module$master_bvalid = dm_mem_tap$slave_bvalid ;
  assign debug_module$master_rvalid = dm_mem_tap$slave_rvalid ;

  // submodule deburst_debug_countWriteRspFF
  assign deburst_debug_countWriteRspFF$D_IN =
	     deburst_debug_inSerial_shim_awff_rv$port1__read[28:21] ;
  assign deburst_debug_countWriteRspFF$ENQ =
	     WILL_FIRE_RL_deburst_debug_forward_write_req &&
	     deburst_debug_inSerial_shim_wff_rv$port1__read[2] ;
  assign deburst_debug_countWriteRspFF$DEQ =
	     WILL_FIRE_RL_deburst_debug_handle_write_rsp &&
	     deburst_debug_countWriteRspFF_first__69_ULE_de_ETC___d471 ;
  assign deburst_debug_countWriteRspFF$CLR = 1'b0 ;

  // submodule deburst_debug_inShim_arff
  assign deburst_debug_inShim_arff$D_IN = 97'h0 ;
  assign deburst_debug_inShim_arff$ENQ = 1'b0 ;
  assign deburst_debug_inShim_arff$DEQ =
	     WILL_FIRE_RL_deburst_debug_inSerial_takeAR ;
  assign deburst_debug_inShim_arff$CLR = 1'b0 ;

  // submodule deburst_debug_inShim_awff
  assign deburst_debug_inShim_awff$D_IN = 97'h0 ;
  assign deburst_debug_inShim_awff$ENQ = 1'b0 ;
  assign deburst_debug_inShim_awff$DEQ =
	     CAN_FIRE_RL_deburst_debug_inSerial_takeAW ;
  assign deburst_debug_inShim_awff$CLR = 1'b0 ;

  // submodule deburst_debug_inShim_bff
  assign deburst_debug_inShim_bff$D_IN =
	     deburst_debug_inSerial_shim_bff_rv$port1__read[5:0] ;
  assign deburst_debug_inShim_bff$ENQ =
	     CAN_FIRE_RL_deburst_debug_inSerial_takeB ;
  assign deburst_debug_inShim_bff$DEQ = 1'b0 ;
  assign deburst_debug_inShim_bff$CLR = 1'b0 ;

  // submodule deburst_debug_inShim_rff
  assign deburst_debug_inShim_rff$D_IN =
	     deburst_debug_inSerial_shim_rff_rv$port1__read[72:0] ;
  assign deburst_debug_inShim_rff$ENQ =
	     CAN_FIRE_RL_deburst_debug_inSerial_takeR ;
  assign deburst_debug_inShim_rff$DEQ = 1'b0 ;
  assign deburst_debug_inShim_rff$CLR = 1'b0 ;

  // submodule deburst_debug_inShim_wff
  assign deburst_debug_inShim_wff$D_IN = 75'h0 ;
  assign deburst_debug_inShim_wff$ENQ = 1'b0 ;
  assign deburst_debug_inShim_wff$DEQ =
	     CAN_FIRE_RL_deburst_debug_inSerial_takeW ;
  assign deburst_debug_inShim_wff$CLR = 1'b0 ;

  // submodule deburst_debug_lastReadRspFF
  assign deburst_debug_lastReadRspFF$D_IN =
	     deburst_debug_readsSent_93_EQ_deburst_debug_in_ETC___d504 ;
  assign deburst_debug_lastReadRspFF$ENQ =
	     CAN_FIRE_RL_deburst_debug_forward_read_req ;
  assign deburst_debug_lastReadRspFF$DEQ =
	     CAN_FIRE_RL_deburst_debug_forward_read_rsp ;
  assign deburst_debug_lastReadRspFF$CLR = 1'b0 ;

  // submodule deburst_debug_outShim_arff
  assign deburst_debug_outShim_arff$D_IN =
	     { deburst_debug_inSerial_shim_arff_rv$port1__read[96:93],
	       x_araddr__h21627,
	       8'd0,
	       deburst_debug_inSerial_shim_arff_rv$port1__read[20:18],
	       2'd0,
	       deburst_debug_inSerial_shim_arff_rv$port1__read[15:0] } ;
  assign deburst_debug_outShim_arff$ENQ =
	     CAN_FIRE_RL_deburst_debug_forward_read_req ;
  assign deburst_debug_outShim_arff$DEQ = 1'b0 ;
  assign deburst_debug_outShim_arff$CLR = 1'b0 ;

  // submodule deburst_debug_outShim_awff
  assign deburst_debug_outShim_awff$D_IN =
	     { deburst_debug_inSerial_shim_awff_rv$port1__read[96:93],
	       x_awaddr__h20925,
	       8'd0,
	       deburst_debug_inSerial_shim_awff_rv$port1__read[20:18],
	       2'd0,
	       deburst_debug_inSerial_shim_awff_rv$port1__read[15:0] } ;
  assign deburst_debug_outShim_awff$ENQ =
	     CAN_FIRE_RL_deburst_debug_forward_write_req ;
  assign deburst_debug_outShim_awff$DEQ = 1'b0 ;
  assign deburst_debug_outShim_awff$CLR = 1'b0 ;

  // submodule deburst_debug_outShim_bff
  assign deburst_debug_outShim_bff$D_IN = 6'h0 ;
  assign deburst_debug_outShim_bff$ENQ = 1'b0 ;
  assign deburst_debug_outShim_bff$DEQ =
	     CAN_FIRE_RL_deburst_debug_handle_write_rsp ;
  assign deburst_debug_outShim_bff$CLR = 1'b0 ;

  // submodule deburst_debug_outShim_rff
  assign deburst_debug_outShim_rff$D_IN = 73'h0 ;
  assign deburst_debug_outShim_rff$ENQ = 1'b0 ;
  assign deburst_debug_outShim_rff$DEQ =
	     CAN_FIRE_RL_deburst_debug_forward_read_rsp ;
  assign deburst_debug_outShim_rff$CLR = 1'b0 ;

  // submodule deburst_debug_outShim_wff
  assign deburst_debug_outShim_wff$D_IN =
	     { deburst_debug_inSerial_shim_wff_rv$port1__read[74:3],
	       1'd1,
	       deburst_debug_inSerial_shim_wff_rv$port1__read[1:0] } ;
  assign deburst_debug_outShim_wff$ENQ =
	     CAN_FIRE_RL_deburst_debug_forward_write_req ;
  assign deburst_debug_outShim_wff$DEQ = 1'b0 ;
  assign deburst_debug_outShim_wff$CLR = 1'b0 ;

  // submodule deburst_dm_countWriteRspFF
  assign deburst_dm_countWriteRspFF$D_IN =
	     deburst_dm_inSerial_shim_awff_rv$port1__read[28:21] ;
  assign deburst_dm_countWriteRspFF$ENQ =
	     WILL_FIRE_RL_deburst_dm_forward_write_req &&
	     deburst_dm_inSerial_shim_wff_rv$port1__read[2] ;
  assign deburst_dm_countWriteRspFF$DEQ =
	     WILL_FIRE_RL_deburst_dm_handle_write_rsp &&
	     deburst_dm_countWriteRspFF_first__56_ULE_debur_ETC___d658 ;
  assign deburst_dm_countWriteRspFF$CLR = 1'b0 ;

  // submodule deburst_dm_inShim_arff
  assign deburst_dm_inShim_arff$D_IN =
	     { dm_mem_tap$master_arid,
	       dm_mem_tap$master_araddr,
	       dm_mem_tap$master_arlen,
	       dm_mem_tap$master_arsize,
	       dm_mem_tap$master_arburst,
	       dm_mem_tap$master_arlock,
	       dm_mem_tap$master_arcache,
	       dm_mem_tap$master_arprot,
	       dm_mem_tap$master_arqos,
	       dm_mem_tap$master_arregion } ;
  assign deburst_dm_inShim_arff$ENQ =
	     dm_mem_tap$master_arvalid && deburst_dm_inShim_arff$FULL_N ;
  assign deburst_dm_inShim_arff$DEQ =
	     WILL_FIRE_RL_deburst_dm_inSerial_takeAR ;
  assign deburst_dm_inShim_arff$CLR = 1'b0 ;

  // submodule deburst_dm_inShim_awff
  assign deburst_dm_inShim_awff$D_IN =
	     { dm_mem_tap$master_awid,
	       dm_mem_tap$master_awaddr,
	       dm_mem_tap$master_awlen,
	       dm_mem_tap$master_awsize,
	       dm_mem_tap$master_awburst,
	       dm_mem_tap$master_awlock,
	       dm_mem_tap$master_awcache,
	       dm_mem_tap$master_awprot,
	       dm_mem_tap$master_awqos,
	       dm_mem_tap$master_awregion } ;
  assign deburst_dm_inShim_awff$ENQ =
	     dm_mem_tap$master_awvalid && deburst_dm_inShim_awff$FULL_N ;
  assign deburst_dm_inShim_awff$DEQ =
	     WILL_FIRE_RL_deburst_dm_inSerial_takeAW ;
  assign deburst_dm_inShim_awff$CLR = 1'b0 ;

  // submodule deburst_dm_inShim_bff
  assign deburst_dm_inShim_bff$D_IN =
	     deburst_dm_inSerial_shim_bff_rv$port1__read[5:0] ;
  assign deburst_dm_inShim_bff$ENQ = CAN_FIRE_RL_deburst_dm_inSerial_takeB ;
  assign deburst_dm_inShim_bff$DEQ =
	     deburst_dm_inShim_bff$EMPTY_N && dm_mem_tap$master_bready ;
  assign deburst_dm_inShim_bff$CLR = 1'b0 ;

  // submodule deburst_dm_inShim_rff
  assign deburst_dm_inShim_rff$D_IN =
	     deburst_dm_inSerial_shim_rff_rv$port1__read[72:0] ;
  assign deburst_dm_inShim_rff$ENQ = CAN_FIRE_RL_deburst_dm_inSerial_takeR ;
  assign deburst_dm_inShim_rff$DEQ =
	     deburst_dm_inShim_rff$EMPTY_N && dm_mem_tap$master_rready ;
  assign deburst_dm_inShim_rff$CLR = 1'b0 ;

  // submodule deburst_dm_inShim_wff
  assign deburst_dm_inShim_wff$D_IN =
	     { dm_mem_tap$master_wdata,
	       dm_mem_tap$master_wstrb,
	       dm_mem_tap$master_wlast,
	       dm_mem_tap$master_wuser } ;
  assign deburst_dm_inShim_wff$ENQ =
	     dm_mem_tap$master_wvalid && deburst_dm_inShim_wff$FULL_N ;
  assign deburst_dm_inShim_wff$DEQ = WILL_FIRE_RL_deburst_dm_inSerial_takeW ;
  assign deburst_dm_inShim_wff$CLR = 1'b0 ;

  // submodule deburst_dm_lastReadRspFF
  assign deburst_dm_lastReadRspFF$D_IN =
	     deburst_dm_readsSent_80_EQ_deburst_dm_inSerial_ETC___d691 ;
  assign deburst_dm_lastReadRspFF$ENQ =
	     CAN_FIRE_RL_deburst_dm_forward_read_req ;
  assign deburst_dm_lastReadRspFF$DEQ =
	     CAN_FIRE_RL_deburst_dm_forward_read_rsp ;
  assign deburst_dm_lastReadRspFF$CLR = 1'b0 ;

  // submodule deburst_dm_outShim_arff
  assign deburst_dm_outShim_arff$D_IN =
	     { deburst_dm_inSerial_shim_arff_rv$port1__read[96:93],
	       x_araddr__h28021,
	       8'd0,
	       deburst_dm_inSerial_shim_arff_rv$port1__read[20:18],
	       2'd0,
	       deburst_dm_inSerial_shim_arff_rv$port1__read[15:0] } ;
  assign deburst_dm_outShim_arff$ENQ =
	     CAN_FIRE_RL_deburst_dm_forward_read_req ;
  assign deburst_dm_outShim_arff$DEQ =
	     WILL_FIRE_RL_msNoSynth_1_ar_forwardReady &&
	     dm_master_nonsynth_arCanPeek$wget &&
	     msNoSynth_1_ar_dwReady$whas ;
  assign deburst_dm_outShim_arff$CLR = 1'b0 ;

  // submodule deburst_dm_outShim_awff
  assign deburst_dm_outShim_awff$D_IN =
	     { deburst_dm_inSerial_shim_awff_rv$port1__read[96:93],
	       x_awaddr__h27322,
	       8'd0,
	       deburst_dm_inSerial_shim_awff_rv$port1__read[20:18],
	       2'd0,
	       deburst_dm_inSerial_shim_awff_rv$port1__read[15:0] } ;
  assign deburst_dm_outShim_awff$ENQ =
	     CAN_FIRE_RL_deburst_dm_forward_write_req ;
  assign deburst_dm_outShim_awff$DEQ =
	     CAN_FIRE_RL_dm_master_nonsynth_consumeAW ;
  assign deburst_dm_outShim_awff$CLR = 1'b0 ;

  // submodule deburst_dm_outShim_bff
  assign deburst_dm_outShim_bff$D_IN =
	     msNoSynth_1_b_buffer_ff$EMPTY_N ?
	       msNoSynth_1_b_buffer_ff$D_OUT :
	       msNoSynth_1_b_buffer_enqw$wget ;
  assign deburst_dm_outShim_bff$ENQ =
	     WILL_FIRE_RL_msNoSynth_1_b_forwardFlit &&
	     deburst_dm_outShim_bff$FULL_N ;
  assign deburst_dm_outShim_bff$DEQ =
	     CAN_FIRE_RL_deburst_dm_handle_write_rsp ;
  assign deburst_dm_outShim_bff$CLR = 1'b0 ;

  // submodule deburst_dm_outShim_rff
  assign deburst_dm_outShim_rff$D_IN =
	     { x_rid__h34702,
	       x_rdata__h34703,
	       msNoSynth_1_r_buffer_ff$EMPTY_N ?
		 msNoSynth_1_r_buffer_ff$D_OUT[4:0] :
		 msNoSynth_1_r_buffer_enqw$wget[4:0] } ;
  assign deburst_dm_outShim_rff$ENQ =
	     WILL_FIRE_RL_msNoSynth_1_r_forwardFlit &&
	     dm_master_nonsynth_rCanPut$wget ;
  assign deburst_dm_outShim_rff$DEQ =
	     CAN_FIRE_RL_deburst_dm_forward_read_rsp ;
  assign deburst_dm_outShim_rff$CLR = 1'b0 ;

  // submodule deburst_dm_outShim_wff
  assign deburst_dm_outShim_wff$D_IN =
	     { deburst_dm_inSerial_shim_wff_rv$port1__read[74:3],
	       1'd1,
	       deburst_dm_inSerial_shim_wff_rv$port1__read[1:0] } ;
  assign deburst_dm_outShim_wff$ENQ =
	     CAN_FIRE_RL_deburst_dm_forward_write_req ;
  assign deburst_dm_outShim_wff$DEQ =
	     WILL_FIRE_RL_msNoSynth_1_w_forwardReady &&
	     dm_master_nonsynth_wCanPeek$wget &&
	     msNoSynth_1_w_dwReady$whas ;
  assign deburst_dm_outShim_wff$CLR = 1'b0 ;

  // submodule dm_csr_tap
  assign dm_csr_tap$client_response_put =
	     cpu$hart0_csr_mem_server_response_get ;
  assign dm_csr_tap$server_request_put =
	     debug_module$hart0_csr_mem_client_request_get ;
  assign dm_csr_tap$EN_client_request_get =
	     CAN_FIRE_RL_ClientServerRequest_4 ;
  assign dm_csr_tap$EN_client_response_put =
	     CAN_FIRE_RL_ClientServerResponse_4 ;
  assign dm_csr_tap$EN_server_request_put =
	     CAN_FIRE_RL_ClientServerRequest_3 ;
  assign dm_csr_tap$EN_server_response_get =
	     CAN_FIRE_RL_ClientServerResponse_3 ;
  assign dm_csr_tap$EN_trace_data_out_get =
	     WILL_FIRE_RL_merge_dm_csr_trace_data ;

  // submodule dm_gpr_tap_ifc
  assign dm_gpr_tap_ifc$client_response_put =
	     cpu$hart0_gpr_mem_server_response_get ;
  assign dm_gpr_tap_ifc$server_request_put =
	     debug_module$hart0_gpr_mem_client_request_get ;
  assign dm_gpr_tap_ifc$EN_client_request_get =
	     CAN_FIRE_RL_ClientServerRequest_2 ;
  assign dm_gpr_tap_ifc$EN_client_response_put =
	     CAN_FIRE_RL_ClientServerResponse_2 ;
  assign dm_gpr_tap_ifc$EN_server_request_put =
	     CAN_FIRE_RL_ClientServerRequest_1 ;
  assign dm_gpr_tap_ifc$EN_server_response_get =
	     CAN_FIRE_RL_ClientServerResponse_1 ;
  assign dm_gpr_tap_ifc$EN_trace_data_out_get =
	     CAN_FIRE_RL_merge_dm_gpr_trace_data ;

  // submodule dm_master_nonsynth_takeUpperR
  assign dm_master_nonsynth_takeUpperR$D_IN =
	     deburst_dm_outShim_arff$D_OUT[32] ;
  assign dm_master_nonsynth_takeUpperR$ENQ =
	     WILL_FIRE_RL_msNoSynth_1_ar_forwardReady &&
	     dm_master_nonsynth_arCanPeek$wget &&
	     msNoSynth_1_ar_dwReady$whas ;
  assign dm_master_nonsynth_takeUpperR$DEQ =
	     WILL_FIRE_RL_msNoSynth_1_r_forwardFlit &&
	     dm_master_nonsynth_rCanPut$wget ;
  assign dm_master_nonsynth_takeUpperR$CLR = 1'b0 ;

  // submodule dm_master_nonsynth_takeUpperW
  assign dm_master_nonsynth_takeUpperW$D_IN =
	     deburst_dm_outShim_awff$D_OUT[32] ;
  assign dm_master_nonsynth_takeUpperW$ENQ =
	     CAN_FIRE_RL_dm_master_nonsynth_consumeAW ;
  assign dm_master_nonsynth_takeUpperW$DEQ =
	     WILL_FIRE_RL_msNoSynth_1_w_forwardReady &&
	     dm_master_nonsynth_wCanPeek$wget &&
	     msNoSynth_1_w_dwReady$whas ;
  assign dm_master_nonsynth_takeUpperW$CLR = 1'b0 ;

  // submodule dm_mem_tap
  assign dm_mem_tap$master_arready = deburst_dm_inShim_arff$FULL_N ;
  assign dm_mem_tap$master_awready = deburst_dm_inShim_awff$FULL_N ;
  assign dm_mem_tap$master_bid = deburst_dm_inShim_bff$D_OUT[5:2] ;
  assign dm_mem_tap$master_bresp = deburst_dm_inShim_bff$D_OUT[1:0] ;
  assign dm_mem_tap$master_rdata = deburst_dm_inShim_rff$D_OUT[68:5] ;
  assign dm_mem_tap$master_rid = deburst_dm_inShim_rff$D_OUT[72:69] ;
  assign dm_mem_tap$master_rlast = deburst_dm_inShim_rff$D_OUT[2] ;
  assign dm_mem_tap$master_rresp = deburst_dm_inShim_rff$D_OUT[4:3] ;
  assign dm_mem_tap$master_ruser = deburst_dm_inShim_rff$D_OUT[1:0] ;
  assign dm_mem_tap$master_wready = deburst_dm_inShim_wff$FULL_N ;
  assign dm_mem_tap$slave_araddr = debug_module$master_araddr ;
  assign dm_mem_tap$slave_arburst = debug_module$master_arburst ;
  assign dm_mem_tap$slave_arcache = debug_module$master_arcache ;
  assign dm_mem_tap$slave_arid = debug_module$master_arid ;
  assign dm_mem_tap$slave_arlen = debug_module$master_arlen ;
  assign dm_mem_tap$slave_arlock = debug_module$master_arlock ;
  assign dm_mem_tap$slave_arprot = debug_module$master_arprot ;
  assign dm_mem_tap$slave_arqos = debug_module$master_arqos ;
  assign dm_mem_tap$slave_arregion = debug_module$master_arregion ;
  assign dm_mem_tap$slave_arsize = debug_module$master_arsize ;
  assign dm_mem_tap$slave_awaddr = debug_module$master_awaddr ;
  assign dm_mem_tap$slave_awburst = debug_module$master_awburst ;
  assign dm_mem_tap$slave_awcache = debug_module$master_awcache ;
  assign dm_mem_tap$slave_awid = debug_module$master_awid ;
  assign dm_mem_tap$slave_awlen = debug_module$master_awlen ;
  assign dm_mem_tap$slave_awlock = debug_module$master_awlock ;
  assign dm_mem_tap$slave_awprot = debug_module$master_awprot ;
  assign dm_mem_tap$slave_awqos = debug_module$master_awqos ;
  assign dm_mem_tap$slave_awregion = debug_module$master_awregion ;
  assign dm_mem_tap$slave_awsize = debug_module$master_awsize ;
  assign dm_mem_tap$slave_bready = debug_module$master_bready ;
  assign dm_mem_tap$slave_rready = debug_module$master_rready ;
  assign dm_mem_tap$slave_wdata = debug_module$master_wdata ;
  assign dm_mem_tap$slave_wlast = debug_module$master_wlast ;
  assign dm_mem_tap$slave_wstrb = debug_module$master_wstrb ;
  assign dm_mem_tap$slave_wuser = debug_module$master_wuser ;
  assign dm_mem_tap$slave_awvalid = debug_module$master_awvalid ;
  assign dm_mem_tap$slave_wvalid = debug_module$master_wvalid ;
  assign dm_mem_tap$slave_arvalid = debug_module$master_arvalid ;
  assign dm_mem_tap$master_bvalid = deburst_dm_inShim_bff$EMPTY_N ;
  assign dm_mem_tap$master_rvalid = deburst_dm_inShim_rff$EMPTY_N ;
  assign dm_mem_tap$EN_trace_data_out_get =
	     WILL_FIRE_RL_merge_dm_mem_trace_data ;

  // submodule f_reset_reqs
  assign f_reset_reqs$D_IN = cpu_reset_server_request_put ;
  assign f_reset_reqs$ENQ = EN_cpu_reset_server_request_put ;
  assign f_reset_reqs$DEQ =
	     near_mem_io$RDY_server_reset_request_put &&
	     plic_RDY_server_reset_request_put__10_AND_cpu__ETC___d316 ;
  assign f_reset_reqs$CLR = 1'b0 ;

  // submodule f_reset_requestor
  assign f_reset_requestor$D_IN =
	     !WILL_FIRE_RL_rl_cpu_hart0_reset_from_dm_start ;
  assign f_reset_requestor$ENQ =
	     WILL_FIRE_RL_rl_cpu_hart0_reset_from_dm_start ||
	     WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;
  assign f_reset_requestor$DEQ = CAN_FIRE_RL_rl_cpu_hart0_reset_complete ;
  assign f_reset_requestor$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$D_IN = cpu$hart0_server_reset_response_get ;
  assign f_reset_rsps$ENQ =
	     WILL_FIRE_RL_rl_cpu_hart0_reset_complete &&
	     f_reset_requestor$D_OUT ;
  assign f_reset_rsps$DEQ = EN_cpu_reset_server_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule f_trace_data_merged
  always@(WILL_FIRE_RL_merge_cpu_trace_data or
	  cpu$trace_data_out_get or
	  WILL_FIRE_RL_merge_dm_mem_trace_data or
	  dm_mem_tap$trace_data_out_get or
	  WILL_FIRE_RL_merge_dm_gpr_trace_data or
	  dm_gpr_tap_ifc$trace_data_out_get or
	  WILL_FIRE_RL_merge_dm_csr_trace_data or
	  dm_csr_tap$trace_data_out_get)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_merge_cpu_trace_data:
	  f_trace_data_merged$D_IN = cpu$trace_data_out_get;
      WILL_FIRE_RL_merge_dm_mem_trace_data:
	  f_trace_data_merged$D_IN = dm_mem_tap$trace_data_out_get;
      WILL_FIRE_RL_merge_dm_gpr_trace_data:
	  f_trace_data_merged$D_IN = dm_gpr_tap_ifc$trace_data_out_get;
      WILL_FIRE_RL_merge_dm_csr_trace_data:
	  f_trace_data_merged$D_IN = dm_csr_tap$trace_data_out_get;
      default: f_trace_data_merged$D_IN =
		   234'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign f_trace_data_merged$ENQ =
	     WILL_FIRE_RL_merge_cpu_trace_data ||
	     WILL_FIRE_RL_merge_dm_mem_trace_data ||
	     WILL_FIRE_RL_merge_dm_gpr_trace_data ||
	     WILL_FIRE_RL_merge_dm_csr_trace_data ;
  assign f_trace_data_merged$DEQ = CAN_FIRE_RL_mkConnectionGetPut_1 ;
  assign f_trace_data_merged$CLR = 1'b0 ;

  // submodule ifcs_0_1_innerReq
  assign ifcs_0_1_innerReq$D_IN =
	     { fatReq_arid__h80659,
	       cpu$dmem_master_araddr,
	       cpu$dmem_master_arlen,
	       cpu$dmem_master_arsize,
	       cpu$dmem_master_arburst,
	       cpu$dmem_master_arlock,
	       cpu$dmem_master_arcache,
	       cpu$dmem_master_arprot,
	       cpu$dmem_master_arqos,
	       cpu$dmem_master_arregion } ;
  assign ifcs_0_1_innerReq$ENQ =
	     WILL_FIRE_RL_ifcs_0_1_followFlits ||
	     WILL_FIRE_RL_ifcs_0_1_firstFlit ;
  assign ifcs_0_1_innerReq$DEQ =
	     WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N ||
	     WILL_FIRE_RL_burst_5 ;
  assign ifcs_0_1_innerReq$CLR = 1'b0 ;

  // submodule ifcs_0_1_innerRoute
  assign ifcs_0_1_innerRoute$D_IN =
	     { cpu_dmem_master_ar_araddr__201_BITS_63_TO_40_2_ETC___d2223,
	       cpu$dmem_master_araddr[63:40] == 24'd0 &&
	       !cpu_dmem_master_ar_araddr__201_ULT_soc_map_m_n_ETC___d2204 &&
	       cpu_dmem_master_ar_araddr__201_ULT_soc_map_m_n_ETC___d2205,
	       cpu_dmem_master_ar_araddr__201_BITS_63_TO_40_2_ETC___d2213 } ;
  assign ifcs_0_1_innerRoute$ENQ = CAN_FIRE_RL_ifcs_0_1_firstFlit ;
  assign ifcs_0_1_innerRoute$DEQ =
	     WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N ||
	     WILL_FIRE_RL_burst_5 ;
  assign ifcs_0_1_innerRoute$CLR = 1'b0 ;

  // submodule ifcs_0_1_noRouteRsp
  assign ifcs_0_1_noRouteRsp$D_IN =
	     { ifcs_0_1_noRoute_currentReq$port1__read[96:93],
	       130'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB,
	       x_port1__read__h81220 == 9'd1,
	       2'h2 } ;
  assign ifcs_0_1_noRouteRsp$ENQ = CAN_FIRE_RL_ifcs_0_1_nonRoutableGenRsp ;
  assign ifcs_0_1_noRouteRsp$DEQ = CAN_FIRE_RL_ifcs_0_1_drainNoRouteResponse ;
  assign ifcs_0_1_noRouteRsp$CLR = 1'b0 ;

  // submodule ifcs_0_1_routeBack
  assign ifcs_0_1_routeBack$D_IN =
	     2'd1 << tagController_shimSlave_rff$D_OUT[137] ;
  assign ifcs_0_1_routeBack$ENQ = CAN_FIRE_RL_ifcs_0_1_firstFlit_1 ;
  assign ifcs_0_1_routeBack$DEQ =
	     WILL_FIRE_RL_burst_7 && ifcs_0_1_rspBack$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	     ifcs_0_1_rspBack$D_OUT[2] ;
  assign ifcs_0_1_routeBack$CLR = 1'b0 ;

  // submodule ifcs_0_1_rspBack
  assign ifcs_0_1_rspBack$D_IN = tagController_shimSlave_rff$D_OUT[136:0] ;
  assign ifcs_0_1_rspBack$ENQ = ssNoSynth_0_r_dwReady$whas ;
  assign ifcs_0_1_rspBack$DEQ =
	     WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_burst_7 ;
  assign ifcs_0_1_rspBack$CLR = 1'b0 ;

  // submodule ifcs_0_innerReq
  assign ifcs_0_innerReq$D_IN =
	     { merged_0_flitLeft != 8'd0,
	       a_awid__h46818,
	       cpu$dmem_master_awaddr,
	       cpu$dmem_master_awlen,
	       cpu$dmem_master_awsize,
	       cpu$dmem_master_awburst,
	       cpu$dmem_master_awlock,
	       cpu$dmem_master_awcache,
	       cpu$dmem_master_awprot,
	       cpu$dmem_master_awqos,
	       cpu$dmem_master_awregion,
	       cpu$dmem_master_wdata,
	       cpu$dmem_master_wstrb,
	       cpu$dmem_master_wlast,
	       cpu$dmem_master_wuser } ;
  assign ifcs_0_innerReq$ENQ =
	     WILL_FIRE_RL_ifcs_0_followFlits ||
	     WILL_FIRE_RL_ifcs_0_firstFlit ;
  assign ifcs_0_innerReq$DEQ =
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N ||
	     WILL_FIRE_RL_burst ;
  assign ifcs_0_innerReq$CLR = 1'b0 ;

  // submodule ifcs_0_innerRoute
  assign ifcs_0_innerRoute$D_IN =
	     { IF_merged_0_flitLeft_413_EQ_0_414_THEN_cpu_dme_ETC___d1574,
	       cpu$dmem_master_awaddr[63:40] == 24'd0 &&
	       !IF_merged_0_flitLeft_413_EQ_0_414_THEN_cpu_dme_ETC___d1555 &&
	       IF_merged_0_flitLeft_413_EQ_0_414_THEN_cpu_dme_ETC___d1556,
	       IF_merged_0_flitLeft_413_EQ_0_414_THEN_cpu_dme_ETC___d1564 } ;
  assign ifcs_0_innerRoute$ENQ = CAN_FIRE_RL_ifcs_0_firstFlit ;
  assign ifcs_0_innerRoute$DEQ =
	     WILL_FIRE_RL_burst && ifcs_0_innerReq$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	     ifcs_0_innerReq$D_OUT[2] ;
  assign ifcs_0_innerRoute$CLR = 1'b0 ;

  // submodule ifcs_0_noRouteRsp
  assign ifcs_0_noRouteRsp$D_IN =
	     { ifcs_0_noRoute_inner_currentReq$port1__read[96:93], 2'd3 } ;
  assign ifcs_0_noRouteRsp$ENQ = CAN_FIRE_RL_ifcs_0_nonRoutableGenRsp ;
  assign ifcs_0_noRouteRsp$DEQ = CAN_FIRE_RL_ifcs_0_drainNoRouteResponse ;
  assign ifcs_0_noRouteRsp$CLR = 1'b0 ;

  // submodule ifcs_0_routeBack
  assign ifcs_0_routeBack$D_IN =
	     2'd1 << tagController_shimSlave_bff$D_OUT[6] ;
  assign ifcs_0_routeBack$ENQ = CAN_FIRE_RL_ifcs_0_firstFlit_1 ;
  assign ifcs_0_routeBack$DEQ =
	     WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_burst_2 ;
  assign ifcs_0_routeBack$CLR = 1'b0 ;

  // submodule ifcs_0_rspBack
  assign ifcs_0_rspBack$D_IN = tagController_shimSlave_bff$D_OUT[5:0] ;
  assign ifcs_0_rspBack$ENQ = ssNoSynth_0_b_dwReady$whas ;
  assign ifcs_0_rspBack$DEQ =
	     WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_burst_2 ;
  assign ifcs_0_rspBack$CLR = 1'b0 ;

  // submodule ifcs_1_1_innerReq
  assign ifcs_1_1_innerReq$D_IN = { 1'd1, deburst_dm_outShim_arff$D_OUT } ;
  assign ifcs_1_1_innerReq$ENQ =
	     WILL_FIRE_RL_ifcs_1_1_followFlits ||
	     WILL_FIRE_RL_ifcs_1_1_firstFlit ;
  assign ifcs_1_1_innerReq$DEQ =
	     WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N ||
	     WILL_FIRE_RL_burst_6 ;
  assign ifcs_1_1_innerReq$CLR = 1'b0 ;

  // submodule ifcs_1_1_innerRoute
  assign ifcs_1_1_innerRoute$D_IN =
	     { deburst_dm_outShim_arff_first__16_BITS_92_TO_6_ETC___d2313,
	       deburst_dm_outShim_arff$D_OUT[92:69] == 24'd0 &&
	       !deburst_dm_outShim_arff_first__16_BITS_92_TO_2_ETC___d2294 &&
	       deburst_dm_outShim_arff_first__16_BITS_92_TO_2_ETC___d2295,
	       deburst_dm_outShim_arff_first__16_BITS_92_TO_6_ETC___d2303 } ;
  assign ifcs_1_1_innerRoute$ENQ = CAN_FIRE_RL_ifcs_1_1_firstFlit ;
  assign ifcs_1_1_innerRoute$DEQ =
	     WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N ||
	     WILL_FIRE_RL_burst_6 ;
  assign ifcs_1_1_innerRoute$CLR = 1'b0 ;

  // submodule ifcs_1_1_noRouteRsp
  assign ifcs_1_1_noRouteRsp$D_IN =
	     { ifcs_1_1_noRoute_currentReq$port1__read[96:93],
	       130'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB,
	       x_port1__read__h83666 == 9'd1,
	       2'h2 } ;
  assign ifcs_1_1_noRouteRsp$ENQ = CAN_FIRE_RL_ifcs_1_1_nonRoutableGenRsp ;
  assign ifcs_1_1_noRouteRsp$DEQ = CAN_FIRE_RL_ifcs_1_1_drainNoRouteResponse ;
  assign ifcs_1_1_noRouteRsp$CLR = 1'b0 ;

  // submodule ifcs_1_1_routeBack
  assign ifcs_1_1_routeBack$D_IN = 2'd1 << near_mem_io$axi4_slave_rid[4] ;
  assign ifcs_1_1_routeBack$ENQ = CAN_FIRE_RL_ifcs_1_1_firstFlit_1 ;
  assign ifcs_1_1_routeBack$DEQ =
	     WILL_FIRE_RL_burst_8 && ifcs_1_1_rspBack$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	     ifcs_1_1_rspBack$D_OUT[2] ;
  assign ifcs_1_1_routeBack$CLR = 1'b0 ;

  // submodule ifcs_1_1_rspBack
  assign ifcs_1_1_rspBack$D_IN =
	     { near_mem_io$axi4_slave_rid[3:0],
	       near_mem_io$axi4_slave_rdata,
	       near_mem_io$axi4_slave_rresp,
	       near_mem_io$axi4_slave_rlast,
	       near_mem_io$axi4_slave_ruser } ;
  assign ifcs_1_1_rspBack$ENQ = ssNoSynth_1_r_dwReady$whas ;
  assign ifcs_1_1_rspBack$DEQ =
	     WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_burst_8 ;
  assign ifcs_1_1_rspBack$CLR = 1'b0 ;

  // submodule ifcs_1_innerReq
  assign ifcs_1_innerReq$D_IN =
	     { merged_1_flitLeft != 8'd0,
	       1'd1,
	       dm_master_nonsynth_awFF_rv$port1__read[96:0],
	       dm_master_nonsynth_takeUpperW$D_OUT ?
		 { deburst_dm_outShim_wff$D_OUT[74:11], 64'd0 } :
		 { 64'd0, deburst_dm_outShim_wff$D_OUT[74:11] },
	       dm_master_nonsynth_takeUpperW$D_OUT ?
		 { deburst_dm_outShim_wff$D_OUT[10:3], 8'd0 } :
		 { 8'd0, deburst_dm_outShim_wff$D_OUT[10:3] },
	       deburst_dm_outShim_wff$D_OUT[2:0] } ;
  assign ifcs_1_innerReq$ENQ =
	     WILL_FIRE_RL_ifcs_1_followFlits ||
	     WILL_FIRE_RL_ifcs_1_firstFlit ;
  assign ifcs_1_innerReq$DEQ =
	     WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N ||
	     WILL_FIRE_RL_burst_1 ;
  assign ifcs_1_innerReq$CLR = 1'b0 ;

  // submodule ifcs_1_innerRoute
  assign ifcs_1_innerRoute$D_IN =
	     { IF_merged_1_flitLeft_431_EQ_0_432_THEN_dm_mast_ETC___d1678,
	       dm_master_nonsynth_awFF_rvport1__read_BITS_92_ETC__q1[63:40] ==
	       24'd0 &&
	       !IF_merged_1_flitLeft_431_EQ_0_432_THEN_dm_mast_ETC___d1659 &&
	       IF_merged_1_flitLeft_431_EQ_0_432_THEN_dm_mast_ETC___d1660,
	       IF_merged_1_flitLeft_431_EQ_0_432_THEN_dm_mast_ETC___d1668 } ;
  assign ifcs_1_innerRoute$ENQ = CAN_FIRE_RL_ifcs_1_firstFlit ;
  assign ifcs_1_innerRoute$DEQ =
	     WILL_FIRE_RL_burst_1 && ifcs_1_innerReq$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	     ifcs_1_innerReq$D_OUT[2] ;
  assign ifcs_1_innerRoute$CLR = 1'b0 ;

  // submodule ifcs_1_noRouteRsp
  assign ifcs_1_noRouteRsp$D_IN =
	     { ifcs_1_noRoute_inner_currentReq$port1__read[96:93], 2'd3 } ;
  assign ifcs_1_noRouteRsp$ENQ = CAN_FIRE_RL_ifcs_1_nonRoutableGenRsp ;
  assign ifcs_1_noRouteRsp$DEQ = CAN_FIRE_RL_ifcs_1_drainNoRouteResponse ;
  assign ifcs_1_noRouteRsp$CLR = 1'b0 ;

  // submodule ifcs_1_routeBack
  assign ifcs_1_routeBack$D_IN = 2'd1 << near_mem_io$axi4_slave_bid[4] ;
  assign ifcs_1_routeBack$ENQ = CAN_FIRE_RL_ifcs_1_firstFlit_1 ;
  assign ifcs_1_routeBack$DEQ =
	     WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_burst_3 ;
  assign ifcs_1_routeBack$CLR = 1'b0 ;

  // submodule ifcs_1_rspBack
  assign ifcs_1_rspBack$D_IN =
	     { near_mem_io$axi4_slave_bid[3:0],
	       near_mem_io$axi4_slave_bresp } ;
  assign ifcs_1_rspBack$ENQ = ssNoSynth_1_b_dwReady$whas ;
  assign ifcs_1_rspBack$DEQ =
	     WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_burst_3 ;
  assign ifcs_1_rspBack$CLR = 1'b0 ;

  // submodule ifcs_2_1_routeBack
  assign ifcs_2_1_routeBack$D_IN = 2'd1 << plic$axi4_slave_rid[4] ;
  assign ifcs_2_1_routeBack$ENQ = CAN_FIRE_RL_ifcs_2_1_firstFlit ;
  assign ifcs_2_1_routeBack$DEQ =
	     WILL_FIRE_RL_burst_9 && ifcs_2_1_rspBack$D_OUT[2] ||
	     WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	     ifcs_2_1_rspBack$D_OUT[2] ;
  assign ifcs_2_1_routeBack$CLR = 1'b0 ;

  // submodule ifcs_2_1_rspBack
  assign ifcs_2_1_rspBack$D_IN =
	     { plic$axi4_slave_rid[3:0],
	       plic$axi4_slave_rdata,
	       plic$axi4_slave_rresp,
	       plic$axi4_slave_rlast,
	       plic$axi4_slave_ruser } ;
  assign ifcs_2_1_rspBack$ENQ = ssNoSynth_2_r_dwReady$whas ;
  assign ifcs_2_1_rspBack$DEQ =
	     WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_burst_9 ;
  assign ifcs_2_1_rspBack$CLR = 1'b0 ;

  // submodule ifcs_2_routeBack
  assign ifcs_2_routeBack$D_IN = 2'd1 << plic$axi4_slave_bid[4] ;
  assign ifcs_2_routeBack$ENQ = CAN_FIRE_RL_ifcs_2_firstFlit ;
  assign ifcs_2_routeBack$DEQ =
	     WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_burst_4 ;
  assign ifcs_2_routeBack$CLR = 1'b0 ;

  // submodule ifcs_2_rspBack
  assign ifcs_2_rspBack$D_IN =
	     { plic$axi4_slave_bid[3:0], plic$axi4_slave_bresp } ;
  assign ifcs_2_rspBack$ENQ = ssNoSynth_2_b_dwReady$whas ;
  assign ifcs_2_rspBack$DEQ =
	     WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N ||
	     WILL_FIRE_RL_burst_4 ;
  assign ifcs_2_rspBack$CLR = 1'b0 ;

  // submodule msNoSynth_0_b_buffer_ff
  assign msNoSynth_0_b_buffer_ff$D_IN = msNoSynth_0_b_buffer_enqw$wget ;
  assign msNoSynth_0_b_buffer_ff$ENQ =
	     CAN_FIRE_RL_msNoSynth_0_b_buffer_enqueue ;
  assign msNoSynth_0_b_buffer_ff$DEQ =
	     CAN_FIRE_RL_msNoSynth_0_b_buffer_dequeue ;
  assign msNoSynth_0_b_buffer_ff$CLR = 1'b0 ;

  // submodule msNoSynth_0_b_buffer_firstValid
  assign msNoSynth_0_b_buffer_firstValid$D_IN = 1'd1 ;
  assign msNoSynth_0_b_buffer_firstValid$EN =
	     CAN_FIRE_RL_msNoSynth_0_b_dropFlit ;

  // submodule msNoSynth_0_r_buffer_ff
  assign msNoSynth_0_r_buffer_ff$D_IN = msNoSynth_0_r_buffer_enqw$wget ;
  assign msNoSynth_0_r_buffer_ff$ENQ =
	     CAN_FIRE_RL_msNoSynth_0_r_buffer_enqueue ;
  assign msNoSynth_0_r_buffer_ff$DEQ =
	     CAN_FIRE_RL_msNoSynth_0_r_buffer_dequeue ;
  assign msNoSynth_0_r_buffer_ff$CLR = 1'b0 ;

  // submodule msNoSynth_0_r_buffer_firstValid
  assign msNoSynth_0_r_buffer_firstValid$D_IN = 1'd1 ;
  assign msNoSynth_0_r_buffer_firstValid$EN =
	     CAN_FIRE_RL_msNoSynth_0_r_dropFlit ;

  // submodule msNoSynth_1_b_buffer_ff
  assign msNoSynth_1_b_buffer_ff$D_IN = msNoSynth_1_b_buffer_enqw$wget ;
  assign msNoSynth_1_b_buffer_ff$ENQ =
	     CAN_FIRE_RL_msNoSynth_1_b_buffer_enqueue ;
  assign msNoSynth_1_b_buffer_ff$DEQ =
	     CAN_FIRE_RL_msNoSynth_1_b_buffer_dequeue ;
  assign msNoSynth_1_b_buffer_ff$CLR = 1'b0 ;

  // submodule msNoSynth_1_b_buffer_firstValid
  assign msNoSynth_1_b_buffer_firstValid$D_IN = 1'd1 ;
  assign msNoSynth_1_b_buffer_firstValid$EN =
	     CAN_FIRE_RL_msNoSynth_1_b_dropFlit ;

  // submodule msNoSynth_1_r_buffer_ff
  assign msNoSynth_1_r_buffer_ff$D_IN = msNoSynth_1_r_buffer_enqw$wget ;
  assign msNoSynth_1_r_buffer_ff$ENQ =
	     CAN_FIRE_RL_msNoSynth_1_r_buffer_enqueue ;
  assign msNoSynth_1_r_buffer_ff$DEQ =
	     CAN_FIRE_RL_msNoSynth_1_r_buffer_dequeue ;
  assign msNoSynth_1_r_buffer_ff$CLR = 1'b0 ;

  // submodule msNoSynth_1_r_buffer_firstValid
  assign msNoSynth_1_r_buffer_firstValid$D_IN = 1'd1 ;
  assign msNoSynth_1_r_buffer_firstValid$EN =
	     CAN_FIRE_RL_msNoSynth_1_r_dropFlit ;

  // submodule near_mem_io
  assign near_mem_io$axi4_slave_araddr =
	     ssNoSynth_1_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_ar_buffer_ff$D_OUT[92:29] :
	       ssNoSynth_1_ar_buffer_enqw$wget[92:29] ;
  assign near_mem_io$axi4_slave_arburst =
	     ssNoSynth_1_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_ar_buffer_ff$D_OUT[17:16] :
	       ssNoSynth_1_ar_buffer_enqw$wget[17:16] ;
  assign near_mem_io$axi4_slave_arcache =
	     ssNoSynth_1_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_ar_buffer_ff$D_OUT[14:11] :
	       ssNoSynth_1_ar_buffer_enqw$wget[14:11] ;
  assign near_mem_io$axi4_slave_arid =
	     ssNoSynth_1_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_ar_buffer_ff$D_OUT[97:93] :
	       ssNoSynth_1_ar_buffer_enqw$wget[97:93] ;
  assign near_mem_io$axi4_slave_arlen =
	     ssNoSynth_1_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_ar_buffer_ff$D_OUT[28:21] :
	       ssNoSynth_1_ar_buffer_enqw$wget[28:21] ;
  assign near_mem_io$axi4_slave_arlock =
	     ssNoSynth_1_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_ar_buffer_ff$D_OUT[15] :
	       ssNoSynth_1_ar_buffer_enqw$wget[15] ;
  assign near_mem_io$axi4_slave_arprot =
	     ssNoSynth_1_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_ar_buffer_ff$D_OUT[10:8] :
	       ssNoSynth_1_ar_buffer_enqw$wget[10:8] ;
  assign near_mem_io$axi4_slave_arqos =
	     ssNoSynth_1_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_ar_buffer_ff$D_OUT[7:4] :
	       ssNoSynth_1_ar_buffer_enqw$wget[7:4] ;
  assign near_mem_io$axi4_slave_arregion =
	     ssNoSynth_1_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_ar_buffer_ff$D_OUT[3:0] :
	       ssNoSynth_1_ar_buffer_enqw$wget[3:0] ;
  assign near_mem_io$axi4_slave_arsize =
	     ssNoSynth_1_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_ar_buffer_ff$D_OUT[20:18] :
	       ssNoSynth_1_ar_buffer_enqw$wget[20:18] ;
  assign near_mem_io$axi4_slave_awaddr =
	     ssNoSynth_1_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_aw_buffer_ff$D_OUT[92:29] :
	       ssNoSynth_1_aw_buffer_enqw$wget[92:29] ;
  assign near_mem_io$axi4_slave_awburst =
	     ssNoSynth_1_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_aw_buffer_ff$D_OUT[17:16] :
	       ssNoSynth_1_aw_buffer_enqw$wget[17:16] ;
  assign near_mem_io$axi4_slave_awcache =
	     ssNoSynth_1_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_aw_buffer_ff$D_OUT[14:11] :
	       ssNoSynth_1_aw_buffer_enqw$wget[14:11] ;
  assign near_mem_io$axi4_slave_awid =
	     ssNoSynth_1_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_aw_buffer_ff$D_OUT[97:93] :
	       ssNoSynth_1_aw_buffer_enqw$wget[97:93] ;
  assign near_mem_io$axi4_slave_awlen =
	     ssNoSynth_1_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_aw_buffer_ff$D_OUT[28:21] :
	       ssNoSynth_1_aw_buffer_enqw$wget[28:21] ;
  assign near_mem_io$axi4_slave_awlock =
	     ssNoSynth_1_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_aw_buffer_ff$D_OUT[15] :
	       ssNoSynth_1_aw_buffer_enqw$wget[15] ;
  assign near_mem_io$axi4_slave_awprot =
	     ssNoSynth_1_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_aw_buffer_ff$D_OUT[10:8] :
	       ssNoSynth_1_aw_buffer_enqw$wget[10:8] ;
  assign near_mem_io$axi4_slave_awqos =
	     ssNoSynth_1_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_aw_buffer_ff$D_OUT[7:4] :
	       ssNoSynth_1_aw_buffer_enqw$wget[7:4] ;
  assign near_mem_io$axi4_slave_awregion =
	     ssNoSynth_1_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_aw_buffer_ff$D_OUT[3:0] :
	       ssNoSynth_1_aw_buffer_enqw$wget[3:0] ;
  assign near_mem_io$axi4_slave_awsize =
	     ssNoSynth_1_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_aw_buffer_ff$D_OUT[20:18] :
	       ssNoSynth_1_aw_buffer_enqw$wget[20:18] ;
  assign near_mem_io$axi4_slave_bready = ssNoSynth_1_b_dwReady$whas ;
  assign near_mem_io$axi4_slave_rready = ssNoSynth_1_r_dwReady$whas ;
  assign near_mem_io$axi4_slave_wdata =
	     ssNoSynth_1_w_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_w_buffer_ff$D_OUT[146:19] :
	       ssNoSynth_1_w_buffer_enqw$wget[146:19] ;
  assign near_mem_io$axi4_slave_wlast =
	     ssNoSynth_1_w_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_w_buffer_ff$D_OUT[2] :
	       ssNoSynth_1_w_buffer_enqw$wget[2] ;
  assign near_mem_io$axi4_slave_wstrb =
	     ssNoSynth_1_w_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_w_buffer_ff$D_OUT[18:3] :
	       ssNoSynth_1_w_buffer_enqw$wget[18:3] ;
  assign near_mem_io$axi4_slave_wuser =
	     ssNoSynth_1_w_buffer_ff$EMPTY_N ?
	       ssNoSynth_1_w_buffer_ff$D_OUT[1:0] :
	       ssNoSynth_1_w_buffer_enqw$wget[1:0] ;
  assign near_mem_io$set_addr_map_addr_base =
	     soc_map$m_near_mem_io_addr_range[127:64] ;
  assign near_mem_io$set_addr_map_addr_lim = y__h45660 ;
  assign near_mem_io$EN_server_reset_request_put =
	     WILL_FIRE_RL_rl_cpu_hart0_reset_from_dm_start ||
	     WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;
  assign near_mem_io$EN_server_reset_response_get =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_complete ;
  assign near_mem_io$EN_set_addr_map =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_complete ;
  assign near_mem_io$axi4_slave_awvalid =
	     CAN_FIRE_RL_ssNoSynth_1_aw_forwardFlit ;
  assign near_mem_io$axi4_slave_wvalid =
	     CAN_FIRE_RL_ssNoSynth_1_w_forwardFlit ;
  assign near_mem_io$axi4_slave_arvalid =
	     CAN_FIRE_RL_ssNoSynth_1_ar_forwardFlit ;
  assign near_mem_io$EN_get_timer_interrupt_req_get =
	     near_mem_io$RDY_get_timer_interrupt_req_get ;
  assign near_mem_io$EN_get_sw_interrupt_req_get =
	     near_mem_io$RDY_get_sw_interrupt_req_get ;

  // submodule plic
  assign plic$axi4_slave_araddr =
	     ssNoSynth_2_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_ar_buffer_ff$D_OUT[92:29] :
	       ssNoSynth_2_ar_buffer_enqw$wget[92:29] ;
  assign plic$axi4_slave_arburst =
	     ssNoSynth_2_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_ar_buffer_ff$D_OUT[17:16] :
	       ssNoSynth_2_ar_buffer_enqw$wget[17:16] ;
  assign plic$axi4_slave_arcache =
	     ssNoSynth_2_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_ar_buffer_ff$D_OUT[14:11] :
	       ssNoSynth_2_ar_buffer_enqw$wget[14:11] ;
  assign plic$axi4_slave_arid =
	     ssNoSynth_2_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_ar_buffer_ff$D_OUT[97:93] :
	       ssNoSynth_2_ar_buffer_enqw$wget[97:93] ;
  assign plic$axi4_slave_arlen =
	     ssNoSynth_2_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_ar_buffer_ff$D_OUT[28:21] :
	       ssNoSynth_2_ar_buffer_enqw$wget[28:21] ;
  assign plic$axi4_slave_arlock =
	     ssNoSynth_2_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_ar_buffer_ff$D_OUT[15] :
	       ssNoSynth_2_ar_buffer_enqw$wget[15] ;
  assign plic$axi4_slave_arprot =
	     ssNoSynth_2_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_ar_buffer_ff$D_OUT[10:8] :
	       ssNoSynth_2_ar_buffer_enqw$wget[10:8] ;
  assign plic$axi4_slave_arqos =
	     ssNoSynth_2_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_ar_buffer_ff$D_OUT[7:4] :
	       ssNoSynth_2_ar_buffer_enqw$wget[7:4] ;
  assign plic$axi4_slave_arregion =
	     ssNoSynth_2_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_ar_buffer_ff$D_OUT[3:0] :
	       ssNoSynth_2_ar_buffer_enqw$wget[3:0] ;
  assign plic$axi4_slave_arsize =
	     ssNoSynth_2_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_ar_buffer_ff$D_OUT[20:18] :
	       ssNoSynth_2_ar_buffer_enqw$wget[20:18] ;
  assign plic$axi4_slave_awaddr =
	     ssNoSynth_2_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_aw_buffer_ff$D_OUT[92:29] :
	       ssNoSynth_2_aw_buffer_enqw$wget[92:29] ;
  assign plic$axi4_slave_awburst =
	     ssNoSynth_2_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_aw_buffer_ff$D_OUT[17:16] :
	       ssNoSynth_2_aw_buffer_enqw$wget[17:16] ;
  assign plic$axi4_slave_awcache =
	     ssNoSynth_2_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_aw_buffer_ff$D_OUT[14:11] :
	       ssNoSynth_2_aw_buffer_enqw$wget[14:11] ;
  assign plic$axi4_slave_awid =
	     ssNoSynth_2_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_aw_buffer_ff$D_OUT[97:93] :
	       ssNoSynth_2_aw_buffer_enqw$wget[97:93] ;
  assign plic$axi4_slave_awlen =
	     ssNoSynth_2_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_aw_buffer_ff$D_OUT[28:21] :
	       ssNoSynth_2_aw_buffer_enqw$wget[28:21] ;
  assign plic$axi4_slave_awlock =
	     ssNoSynth_2_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_aw_buffer_ff$D_OUT[15] :
	       ssNoSynth_2_aw_buffer_enqw$wget[15] ;
  assign plic$axi4_slave_awprot =
	     ssNoSynth_2_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_aw_buffer_ff$D_OUT[10:8] :
	       ssNoSynth_2_aw_buffer_enqw$wget[10:8] ;
  assign plic$axi4_slave_awqos =
	     ssNoSynth_2_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_aw_buffer_ff$D_OUT[7:4] :
	       ssNoSynth_2_aw_buffer_enqw$wget[7:4] ;
  assign plic$axi4_slave_awregion =
	     ssNoSynth_2_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_aw_buffer_ff$D_OUT[3:0] :
	       ssNoSynth_2_aw_buffer_enqw$wget[3:0] ;
  assign plic$axi4_slave_awsize =
	     ssNoSynth_2_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_aw_buffer_ff$D_OUT[20:18] :
	       ssNoSynth_2_aw_buffer_enqw$wget[20:18] ;
  assign plic$axi4_slave_bready = ssNoSynth_2_b_dwReady$whas ;
  assign plic$axi4_slave_rready = ssNoSynth_2_r_dwReady$whas ;
  assign plic$axi4_slave_wdata =
	     ssNoSynth_2_w_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_w_buffer_ff$D_OUT[146:19] :
	       ssNoSynth_2_w_buffer_enqw$wget[146:19] ;
  assign plic$axi4_slave_wlast =
	     ssNoSynth_2_w_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_w_buffer_ff$D_OUT[2] :
	       ssNoSynth_2_w_buffer_enqw$wget[2] ;
  assign plic$axi4_slave_wstrb =
	     ssNoSynth_2_w_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_w_buffer_ff$D_OUT[18:3] :
	       ssNoSynth_2_w_buffer_enqw$wget[18:3] ;
  assign plic$axi4_slave_wuser =
	     ssNoSynth_2_w_buffer_ff$EMPTY_N ?
	       ssNoSynth_2_w_buffer_ff$D_OUT[1:0] :
	       ssNoSynth_2_w_buffer_enqw$wget[1:0] ;
  assign plic$set_addr_map_addr_base = soc_map$m_plic_addr_range[127:64] ;
  assign plic$set_addr_map_addr_lim = y__h45684 ;
  assign plic$set_verbosity_verbosity = 4'h0 ;
  assign plic$v_sources_0_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_0_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_10_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_10_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_11_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_11_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_12_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_12_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_13_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_13_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_14_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_14_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_15_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_15_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_1_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_1_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_2_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_2_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_3_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_3_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_4_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_4_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_5_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_5_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_6_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_6_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_7_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_7_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_8_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_8_m_interrupt_req_set_not_clear ;
  assign plic$v_sources_9_m_interrupt_req_set_not_clear =
	     core_external_interrupt_sources_9_m_interrupt_req_set_not_clear ;
  assign plic$EN_set_verbosity = 1'b0 ;
  assign plic$EN_show_PLIC_state = 1'b0 ;
  assign plic$EN_server_reset_request_put =
	     WILL_FIRE_RL_rl_cpu_hart0_reset_from_dm_start ||
	     WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;
  assign plic$EN_server_reset_response_get =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_complete ;
  assign plic$EN_set_addr_map = CAN_FIRE_RL_rl_cpu_hart0_reset_complete ;
  assign plic$axi4_slave_awvalid = CAN_FIRE_RL_ssNoSynth_2_aw_forwardFlit ;
  assign plic$axi4_slave_wvalid = CAN_FIRE_RL_ssNoSynth_2_w_forwardFlit ;
  assign plic$axi4_slave_arvalid = CAN_FIRE_RL_ssNoSynth_2_ar_forwardFlit ;

  // submodule soc_map
  assign soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign soc_map$m_is_mem_addr_addr = 64'h0 ;
  assign soc_map$m_is_near_mem_IO_addr_addr = 64'h0 ;

  // submodule ssNoSynth_0_ar_buffer_ff
  assign ssNoSynth_0_ar_buffer_ff$D_IN = ssNoSynth_0_ar_buffer_enqw$wget ;
  assign ssNoSynth_0_ar_buffer_ff$ENQ =
	     CAN_FIRE_RL_ssNoSynth_0_ar_buffer_enqueue ;
  assign ssNoSynth_0_ar_buffer_ff$DEQ =
	     CAN_FIRE_RL_ssNoSynth_0_ar_buffer_dequeue ;
  assign ssNoSynth_0_ar_buffer_ff$CLR = 1'b0 ;

  // submodule ssNoSynth_0_ar_buffer_firstValid
  assign ssNoSynth_0_ar_buffer_firstValid$D_IN = 1'd1 ;
  assign ssNoSynth_0_ar_buffer_firstValid$EN =
	     CAN_FIRE_RL_ssNoSynth_0_ar_dropFlit ;

  // submodule ssNoSynth_0_aw_buffer_ff
  assign ssNoSynth_0_aw_buffer_ff$D_IN = split_0_doPut$wget[244:147] ;
  assign ssNoSynth_0_aw_buffer_ff$ENQ =
	     CAN_FIRE_RL_ssNoSynth_0_aw_buffer_enqueue ;
  assign ssNoSynth_0_aw_buffer_ff$DEQ =
	     CAN_FIRE_RL_ssNoSynth_0_aw_buffer_dequeue ;
  assign ssNoSynth_0_aw_buffer_ff$CLR = 1'b0 ;

  // submodule ssNoSynth_0_aw_buffer_firstValid
  assign ssNoSynth_0_aw_buffer_firstValid$D_IN = 1'd1 ;
  assign ssNoSynth_0_aw_buffer_firstValid$EN =
	     CAN_FIRE_RL_ssNoSynth_0_aw_dropFlit ;

  // submodule ssNoSynth_0_w_buffer_ff
  assign ssNoSynth_0_w_buffer_ff$D_IN = split_0_doPut$wget[146:0] ;
  assign ssNoSynth_0_w_buffer_ff$ENQ =
	     CAN_FIRE_RL_ssNoSynth_0_w_buffer_enqueue ;
  assign ssNoSynth_0_w_buffer_ff$DEQ =
	     CAN_FIRE_RL_ssNoSynth_0_w_buffer_dequeue ;
  assign ssNoSynth_0_w_buffer_ff$CLR = 1'b0 ;

  // submodule ssNoSynth_0_w_buffer_firstValid
  assign ssNoSynth_0_w_buffer_firstValid$D_IN = 1'd1 ;
  assign ssNoSynth_0_w_buffer_firstValid$EN =
	     CAN_FIRE_RL_ssNoSynth_0_w_dropFlit ;

  // submodule ssNoSynth_1_ar_buffer_ff
  assign ssNoSynth_1_ar_buffer_ff$D_IN = ssNoSynth_1_ar_buffer_enqw$wget ;
  assign ssNoSynth_1_ar_buffer_ff$ENQ =
	     CAN_FIRE_RL_ssNoSynth_1_ar_buffer_enqueue ;
  assign ssNoSynth_1_ar_buffer_ff$DEQ =
	     CAN_FIRE_RL_ssNoSynth_1_ar_buffer_dequeue ;
  assign ssNoSynth_1_ar_buffer_ff$CLR = 1'b0 ;

  // submodule ssNoSynth_1_ar_buffer_firstValid
  assign ssNoSynth_1_ar_buffer_firstValid$D_IN = 1'd1 ;
  assign ssNoSynth_1_ar_buffer_firstValid$EN =
	     CAN_FIRE_RL_ssNoSynth_1_ar_dropFlit ;

  // submodule ssNoSynth_1_aw_buffer_ff
  assign ssNoSynth_1_aw_buffer_ff$D_IN = split_1_doPut$wget[244:147] ;
  assign ssNoSynth_1_aw_buffer_ff$ENQ =
	     CAN_FIRE_RL_ssNoSynth_1_aw_buffer_enqueue ;
  assign ssNoSynth_1_aw_buffer_ff$DEQ =
	     CAN_FIRE_RL_ssNoSynth_1_aw_buffer_dequeue ;
  assign ssNoSynth_1_aw_buffer_ff$CLR = 1'b0 ;

  // submodule ssNoSynth_1_aw_buffer_firstValid
  assign ssNoSynth_1_aw_buffer_firstValid$D_IN = 1'd1 ;
  assign ssNoSynth_1_aw_buffer_firstValid$EN =
	     CAN_FIRE_RL_ssNoSynth_1_aw_dropFlit ;

  // submodule ssNoSynth_1_w_buffer_ff
  assign ssNoSynth_1_w_buffer_ff$D_IN = split_1_doPut$wget[146:0] ;
  assign ssNoSynth_1_w_buffer_ff$ENQ =
	     CAN_FIRE_RL_ssNoSynth_1_w_buffer_enqueue ;
  assign ssNoSynth_1_w_buffer_ff$DEQ =
	     CAN_FIRE_RL_ssNoSynth_1_w_buffer_dequeue ;
  assign ssNoSynth_1_w_buffer_ff$CLR = 1'b0 ;

  // submodule ssNoSynth_1_w_buffer_firstValid
  assign ssNoSynth_1_w_buffer_firstValid$D_IN = 1'd1 ;
  assign ssNoSynth_1_w_buffer_firstValid$EN =
	     CAN_FIRE_RL_ssNoSynth_1_w_dropFlit ;

  // submodule ssNoSynth_2_ar_buffer_ff
  assign ssNoSynth_2_ar_buffer_ff$D_IN = ssNoSynth_2_ar_buffer_enqw$wget ;
  assign ssNoSynth_2_ar_buffer_ff$ENQ =
	     CAN_FIRE_RL_ssNoSynth_2_ar_buffer_enqueue ;
  assign ssNoSynth_2_ar_buffer_ff$DEQ =
	     CAN_FIRE_RL_ssNoSynth_2_ar_buffer_dequeue ;
  assign ssNoSynth_2_ar_buffer_ff$CLR = 1'b0 ;

  // submodule ssNoSynth_2_ar_buffer_firstValid
  assign ssNoSynth_2_ar_buffer_firstValid$D_IN = 1'd1 ;
  assign ssNoSynth_2_ar_buffer_firstValid$EN =
	     CAN_FIRE_RL_ssNoSynth_2_ar_dropFlit ;

  // submodule ssNoSynth_2_aw_buffer_ff
  assign ssNoSynth_2_aw_buffer_ff$D_IN = split_2_doPut$wget[244:147] ;
  assign ssNoSynth_2_aw_buffer_ff$ENQ =
	     CAN_FIRE_RL_ssNoSynth_2_aw_buffer_enqueue ;
  assign ssNoSynth_2_aw_buffer_ff$DEQ =
	     CAN_FIRE_RL_ssNoSynth_2_aw_buffer_dequeue ;
  assign ssNoSynth_2_aw_buffer_ff$CLR = 1'b0 ;

  // submodule ssNoSynth_2_aw_buffer_firstValid
  assign ssNoSynth_2_aw_buffer_firstValid$D_IN = 1'd1 ;
  assign ssNoSynth_2_aw_buffer_firstValid$EN =
	     CAN_FIRE_RL_ssNoSynth_2_aw_dropFlit ;

  // submodule ssNoSynth_2_w_buffer_ff
  assign ssNoSynth_2_w_buffer_ff$D_IN = split_2_doPut$wget[146:0] ;
  assign ssNoSynth_2_w_buffer_ff$ENQ =
	     CAN_FIRE_RL_ssNoSynth_2_w_buffer_enqueue ;
  assign ssNoSynth_2_w_buffer_ff$DEQ =
	     CAN_FIRE_RL_ssNoSynth_2_w_buffer_dequeue ;
  assign ssNoSynth_2_w_buffer_ff$CLR = 1'b0 ;

  // submodule ssNoSynth_2_w_buffer_firstValid
  assign ssNoSynth_2_w_buffer_firstValid$D_IN = 1'd1 ;
  assign ssNoSynth_2_w_buffer_firstValid$EN =
	     CAN_FIRE_RL_ssNoSynth_2_w_dropFlit ;

  // submodule tagController_limiter
  assign tagController_limiter$ENQ =
	     WILL_FIRE_RL_tagController_passCacheWrite ||
	     WILL_FIRE_RL_tagController_passCacheRead ;
  assign tagController_limiter$DEQ =
	     WILL_FIRE_RL_tagController_passCacheResponse &&
	     (tagController_tagCon$cache_response_get[133:132] != 2'd0 ||
	      tagController_tagCon$cache_response_get[131]) ;
  assign tagController_limiter$CLR =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;

  // submodule tagController_newRst
  assign tagController_newRst$ASSERT_IN =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;

  // submodule tagController_shimMaster_arff
  assign tagController_shimMaster_arff$D_IN =
	     { x_arid__h11142,
	       x_araddr__h11143,
	       x_arlen__h11144,
	       x_arsize_val__h11189,
	       3'd2,
	       x__h11207,
	       11'd0 } ;
  assign tagController_shimMaster_arff$ENQ =
	     tagController_tagCon$RDY_memory_request_get &&
	     tagController_tagCon$memory_request_get[158:157] != 2'd1 ;
  assign tagController_shimMaster_arff$DEQ =
	     tagController_shimMaster_arff$EMPTY_N &&
	     cpu_dmem_master_arready ;
  assign tagController_shimMaster_arff$CLR =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;

  // submodule tagController_shimMaster_awff
  assign tagController_shimMaster_awff$D_IN =
	     { tagController_tagCon$memory_request_get[165:160],
	       aw_awaddr__h8770,
	       14'd34,
	       x__h8842,
	       11'd0 } ;
  assign tagController_shimMaster_awff$ENQ =
	     tagController_tagCon$RDY_memory_request_get &&
	     tagController_tagCon$memory_request_get[158:157] == 2'd1 ;
  assign tagController_shimMaster_awff$DEQ =
	     tagController_shimMaster_awff$EMPTY_N &&
	     cpu_dmem_master_awready ;
  assign tagController_shimMaster_awff$CLR =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;

  // submodule tagController_shimMaster_bff
  assign tagController_shimMaster_bff$D_IN =
	     { cpu_dmem_master_bid, cpu_dmem_master_bresp } ;
  assign tagController_shimMaster_bff$ENQ =
	     cpu_dmem_master_bvalid && tagController_shimMaster_bff$FULL_N ;
  assign tagController_shimMaster_bff$DEQ =
	     WILL_FIRE_RL_tagController_passMemoryResponseWrite ;
  assign tagController_shimMaster_bff$CLR =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;

  // submodule tagController_shimMaster_rff
  assign tagController_shimMaster_rff$D_IN =
	     { cpu_dmem_master_rid,
	       cpu_dmem_master_rdata,
	       cpu_dmem_master_rresp,
	       cpu_dmem_master_rlast } ;
  assign tagController_shimMaster_rff$ENQ =
	     cpu_dmem_master_rvalid && tagController_shimMaster_rff$FULL_N ;
  assign tagController_shimMaster_rff$DEQ =
	     CAN_FIRE_RL_tagController_passMemoryResponseRead ;
  assign tagController_shimMaster_rff$CLR =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;

  // submodule tagController_shimMaster_wff
  assign tagController_shimMaster_wff$D_IN =
	     { tagController_tagCon$memory_request_get[127:0],
	       tagController_tagCon$memory_request_get[153:138],
	       tagController_tagCon$memory_request_get[156] } ;
  assign tagController_shimMaster_wff$ENQ =
	     tagController_tagCon$RDY_memory_request_get &&
	     tagController_tagCon$memory_request_get[158:157] == 2'd1 ;
  assign tagController_shimMaster_wff$DEQ =
	     tagController_shimMaster_wff$EMPTY_N && cpu_dmem_master_wready ;
  assign tagController_shimMaster_wff$CLR =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;

  // submodule tagController_shimSlave_arff
  assign tagController_shimSlave_arff$D_IN =
	     ssNoSynth_0_ar_buffer_ff$EMPTY_N ?
	       ssNoSynth_0_ar_buffer_ff$D_OUT :
	       ssNoSynth_0_ar_buffer_enqw$wget ;
  assign tagController_shimSlave_arff$ENQ =
	     WILL_FIRE_RL_ssNoSynth_0_ar_forwardFlit &&
	     tagController_shimSlave_arff$FULL_N ;
  assign tagController_shimSlave_arff$DEQ =
	     CAN_FIRE_RL_tagController_passCacheRead ;
  assign tagController_shimSlave_arff$CLR =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;

  // submodule tagController_shimSlave_awff
  assign tagController_shimSlave_awff$D_IN =
	     ssNoSynth_0_aw_buffer_ff$EMPTY_N ?
	       ssNoSynth_0_aw_buffer_ff$D_OUT :
	       split_0_doPut$wget[244:147] ;
  assign tagController_shimSlave_awff$ENQ =
	     WILL_FIRE_RL_ssNoSynth_0_aw_forwardFlit &&
	     tagController_shimSlave_awff$FULL_N ;
  assign tagController_shimSlave_awff$DEQ =
	     WILL_FIRE_RL_tagController_passCacheWrite ;
  assign tagController_shimSlave_awff$CLR =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;

  // submodule tagController_shimSlave_bff
  assign tagController_shimSlave_bff$D_IN =
	     { IF_tagController_tagCon_cache_response_get_16__ETC___d228,
	       2'd0 } ;
  assign tagController_shimSlave_bff$ENQ =
	     WILL_FIRE_RL_tagController_passCacheResponse &&
	     tagController_tagCon$cache_response_get[133:132] != 2'd0 ;
  assign tagController_shimSlave_bff$DEQ =
	     tagController_shimSlave_bff$EMPTY_N &&
	     ssNoSynth_0_b_dwReady$whas ;
  assign tagController_shimSlave_bff$CLR =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;

  // submodule tagController_shimSlave_rff
  assign tagController_shimSlave_rff$D_IN =
	     { tagController_tagCon$cache_response_get[140:136],
	       tagController_tagCon$cache_response_get[127:0],
	       2'd0,
	       tagController_tagCon$cache_response_get[131],
	       tagController_tagCon$cache_response_get[129:128] } ;
  assign tagController_shimSlave_rff$ENQ =
	     WILL_FIRE_RL_tagController_passCacheResponse &&
	     tagController_tagCon$cache_response_get[133:132] == 2'd0 ;
  assign tagController_shimSlave_rff$DEQ =
	     tagController_shimSlave_rff$EMPTY_N &&
	     ssNoSynth_0_r_dwReady$whas ;
  assign tagController_shimSlave_rff$CLR =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;

  // submodule tagController_shimSlave_wff
  assign tagController_shimSlave_wff$D_IN =
	     ssNoSynth_0_w_buffer_ff$EMPTY_N ?
	       ssNoSynth_0_w_buffer_ff$D_OUT :
	       split_0_doPut$wget[146:0] ;
  assign tagController_shimSlave_wff$ENQ =
	     WILL_FIRE_RL_ssNoSynth_0_w_forwardFlit &&
	     tagController_shimSlave_wff$FULL_N ;
  assign tagController_shimSlave_wff$DEQ =
	     WILL_FIRE_RL_tagController_passCacheWrite ;
  assign tagController_shimSlave_wff$CLR =
	     CAN_FIRE_RL_rl_cpu_hart0_reset_from_soc_start ;

  // submodule tagController_tagCon
  assign tagController_tagCon$cache_request_put_val =
	     WILL_FIRE_RL_tagController_passCacheWrite ?
	       MUX_tagController_tagCon$cache_request_put_1__VAL_1 :
	       MUX_tagController_tagCon$cache_request_put_1__VAL_2 ;
  assign tagController_tagCon$memory_response_put_val =
	     WILL_FIRE_RL_tagController_passMemoryResponseWrite ?
	       MUX_tagController_tagCon$memory_response_put_1__VAL_1 :
	       MUX_tagController_tagCon$memory_response_put_1__VAL_2 ;
  assign tagController_tagCon$EN_cache_request_put =
	     WILL_FIRE_RL_tagController_passCacheWrite ||
	     WILL_FIRE_RL_tagController_passCacheRead ;
  assign tagController_tagCon$EN_cache_response_get =
	     CAN_FIRE_RL_tagController_passCacheResponse ;
  assign tagController_tagCon$EN_memory_request_get =
	     tagController_tagCon$RDY_memory_request_get ;
  assign tagController_tagCon$EN_memory_response_put =
	     WILL_FIRE_RL_tagController_passMemoryResponseWrite ||
	     WILL_FIRE_RL_tagController_passMemoryResponseRead ;

  // submodule tv_encode
  assign tv_encode$trace_data_in_put = f_trace_data_merged$D_OUT ;
  assign tv_encode$EN_reset = 1'b0 ;
  assign tv_encode$EN_trace_data_in_put = CAN_FIRE_RL_mkConnectionGetPut_1 ;
  assign tv_encode$EN_tv_vb_out_get = EN_tv_verifier_info_get_get ;

  // remaining internal signals
  assign IF_IF_merged_0_flitLeft_413_EQ_0_414_THEN_cpu__ETC___d1576 =
	     (IF_merged_0_flitLeft_413_EQ_0_414_THEN_cpu_dme_ETC___d1564 ?
		2'd1 :
		2'd0) +
	     ((cpu$dmem_master_awaddr[63:40] == 24'd0 &&
	       !IF_merged_0_flitLeft_413_EQ_0_414_THEN_cpu_dme_ETC___d1555 &&
	       IF_merged_0_flitLeft_413_EQ_0_414_THEN_cpu_dme_ETC___d1556) ?
		2'd1 :
		2'd0) +
	     (IF_merged_0_flitLeft_413_EQ_0_414_THEN_cpu_dme_ETC___d1574 ?
		2'd1 :
		2'd0) ;
  assign IF_IF_merged_1_flitLeft_431_EQ_0_432_THEN_dm_m_ETC___d1680 =
	     (IF_merged_1_flitLeft_431_EQ_0_432_THEN_dm_mast_ETC___d1668 ?
		2'd1 :
		2'd0) +
	     ((dm_master_nonsynth_awFF_rvport1__read_BITS_92_ETC__q1[63:40] ==
	       24'd0 &&
	       !IF_merged_1_flitLeft_431_EQ_0_432_THEN_dm_mast_ETC___d1659 &&
	       IF_merged_1_flitLeft_431_EQ_0_432_THEN_dm_mast_ETC___d1660) ?
		2'd1 :
		2'd0) +
	     (IF_merged_1_flitLeft_431_EQ_0_432_THEN_dm_mast_ETC___d1678 ?
		2'd1 :
		2'd0) ;
  assign IF_NOT_ifcs_0_1_innerRoute_first__427_BIT_1_43_ETC___d2449 =
	     (!ifcs_0_1_innerRoute$D_OUT[1] ||
	      !ssNoSynth_1_ar_buffer_ff$FULL_N) ?
	       ifcs_0_1_innerRoute$D_OUT[2] &&
	       ssNoSynth_2_ar_buffer_ff$FULL_N :
	       ifcs_0_1_innerRoute$D_OUT[1] ;
  assign IF_NOT_ifcs_0_innerRoute_first__791_BIT_1_800__ETC___d1813 =
	     (!ifcs_0_innerRoute$D_OUT[1] ||
	      !IF_split_1_flitLeft_486_EQ_0_487_THEN_ssNoSynt_ETC___d1784) ?
	       ifcs_0_innerRoute$D_OUT[2] &&
	       IF_split_2_flitLeft_515_EQ_0_516_THEN_ssNoSynt_ETC___d1785 :
	       ifcs_0_innerRoute$D_OUT[1] ;
  assign IF_NOT_ifcs_1_1_innerRoute_first__456_BIT_1_46_ETC___d2465 =
	     (!ifcs_1_1_innerRoute$D_OUT[1] ||
	      !ssNoSynth_1_ar_buffer_ff$FULL_N) ?
	       ifcs_1_1_innerRoute$D_OUT[2] &&
	       ssNoSynth_2_ar_buffer_ff$FULL_N :
	       ifcs_1_1_innerRoute$D_OUT[1] ;
  assign IF_NOT_ifcs_1_innerRoute_first__820_BIT_1_824__ETC___d1829 =
	     (!ifcs_1_innerRoute$D_OUT[1] ||
	      !IF_split_1_flitLeft_486_EQ_0_487_THEN_ssNoSynt_ETC___d1784) ?
	       ifcs_1_innerRoute$D_OUT[2] &&
	       IF_split_2_flitLeft_515_EQ_0_516_THEN_ssNoSynt_ETC___d1785 :
	       ifcs_1_innerRoute$D_OUT[1] ;
  assign IF_SEXT_arbiter_1_1_lastSelect_657_658_BIT_0_6_ETC___d2701 =
	     (SEXT_arbiter_1_1_lastSelect_657_658_BIT_0_659__ETC___d2670 ||
	      SEXT_arbiter_1_1_lastSelect_1_661_662_BIT_0_66_ETC___d2676 ||
	      SEXT_arbiter_1_1_firstHot_666_667_BIT_0_668_AN_ETC___d2682) ?
	       x__h103142 | y__h103143 :
	       arbiter_1_1_lastSelect ;
  assign IF_SEXT_arbiter_1_1_lastSelect_657_658_BIT_0_6_ETC___d2707 =
	     (SEXT_arbiter_1_1_lastSelect_657_658_BIT_0_659__ETC___d2670 ||
	      SEXT_arbiter_1_1_lastSelect_1_661_662_BIT_0_66_ETC___d2676 ||
	      SEXT_arbiter_1_1_firstHot_666_667_BIT_0_668_AN_ETC___d2682) ?
	       x__h103330 | y__h103331 :
	       arbiter_1_1_lastSelect_1 ;
  assign IF_SEXT_arbiter_1_1_lastSelect_657_658_BIT_0_6_ETC___d2713 =
	     (SEXT_arbiter_1_1_lastSelect_657_658_BIT_0_659__ETC___d2670 ||
	      SEXT_arbiter_1_1_lastSelect_1_661_662_BIT_0_66_ETC___d2676 ||
	      SEXT_arbiter_1_1_firstHot_666_667_BIT_0_668_AN_ETC___d2682) ?
	       x__h103511 | y__h103512 :
	       arbiter_1_1_firstHot ;
  assign IF_SEXT_arbiter_1_lastSelect_031_032_BIT_0_033_ETC___d2075 =
	     (SEXT_arbiter_1_lastSelect_031_032_BIT_0_033_AN_ETC___d2044 ||
	      SEXT_arbiter_1_lastSelect_1_035_036_BIT_0_037__ETC___d2050 ||
	      SEXT_arbiter_1_firstHot_040_041_BIT_0_042_AND__ETC___d2056) ?
	       x__h71787 | y__h71788 :
	       arbiter_1_lastSelect ;
  assign IF_SEXT_arbiter_1_lastSelect_031_032_BIT_0_033_ETC___d2081 =
	     (SEXT_arbiter_1_lastSelect_031_032_BIT_0_033_AN_ETC___d2044 ||
	      SEXT_arbiter_1_lastSelect_1_035_036_BIT_0_037__ETC___d2050 ||
	      SEXT_arbiter_1_firstHot_040_041_BIT_0_042_AND__ETC___d2056) ?
	       x__h71975 | y__h71976 :
	       arbiter_1_lastSelect_1 ;
  assign IF_SEXT_arbiter_1_lastSelect_031_032_BIT_0_033_ETC___d2087 =
	     (SEXT_arbiter_1_lastSelect_031_032_BIT_0_033_AN_ETC___d2044 ||
	      SEXT_arbiter_1_lastSelect_1_035_036_BIT_0_037__ETC___d2050 ||
	      SEXT_arbiter_1_firstHot_040_041_BIT_0_042_AND__ETC___d2056) ?
	       x__h72156 | y__h72157 :
	       arbiter_1_firstHot ;
  assign IF_SEXT_arbiter_1_lastSelect_2_477_478_BIT_0_4_ETC___d2501 =
	     (SEXT_arbiter_1_lastSelect_2_477_478_BIT_0_479__ETC___d2485 ||
	      SEXT_arbiter_1_firstHot_1_481_482_BIT_0_483_AN_ETC___d2489) ?
	       x__h91200 | y__h91201 :
	       arbiter_1_lastSelect_2 ;
  assign IF_SEXT_arbiter_1_lastSelect_2_477_478_BIT_0_4_ETC___d2505 =
	     (SEXT_arbiter_1_lastSelect_2_477_478_BIT_0_479__ETC___d2485 ||
	      SEXT_arbiter_1_firstHot_1_481_482_BIT_0_483_AN_ETC___d2489) ?
	       x__h91341 | y__h91342 :
	       arbiter_1_firstHot_1 ;
  assign IF_SEXT_arbiter_lastSelect_841_842_BIT_0_843_A_ETC___d1865 =
	     (SEXT_arbiter_lastSelect_841_842_BIT_0_843_AND__ETC___d1849 ||
	      SEXT_arbiter_firstHot_845_846_BIT_0_847_AND_re_ETC___d1853) ?
	       x__h57304 | y__h57305 :
	       arbiter_lastSelect ;
  assign IF_SEXT_arbiter_lastSelect_841_842_BIT_0_843_A_ETC___d1869 =
	     (SEXT_arbiter_lastSelect_841_842_BIT_0_843_AND__ETC___d1849 ||
	      SEXT_arbiter_firstHot_845_846_BIT_0_847_AND_re_ETC___d1853) ?
	       x__h57445 | y__h57446 :
	       arbiter_firstHot ;
  assign IF_cpu_dmem_master_ar_araddr__201_BITS_63_TO_4_ETC___d2225 =
	     (cpu_dmem_master_ar_araddr__201_BITS_63_TO_40_2_ETC___d2213 ?
		2'd1 :
		2'd0) +
	     ((cpu$dmem_master_araddr[63:40] == 24'd0 &&
	       !cpu_dmem_master_ar_araddr__201_ULT_soc_map_m_n_ETC___d2204 &&
	       cpu_dmem_master_ar_araddr__201_ULT_soc_map_m_n_ETC___d2205) ?
		2'd1 :
		2'd0) +
	     (cpu_dmem_master_ar_araddr__201_BITS_63_TO_40_2_ETC___d2223 ?
		2'd1 :
		2'd0) ;
  assign IF_deburst_dm_outShim_arff_first__16_BITS_92_T_ETC___d2315 =
	     (deburst_dm_outShim_arff_first__16_BITS_92_TO_6_ETC___d2303 ?
		2'd1 :
		2'd0) +
	     ((deburst_dm_outShim_arff$D_OUT[92:69] == 24'd0 &&
	       !deburst_dm_outShim_arff_first__16_BITS_92_TO_2_ETC___d2294 &&
	       deburst_dm_outShim_arff_first__16_BITS_92_TO_2_ETC___d2295) ?
		2'd1 :
		2'd0) +
	     (deburst_dm_outShim_arff_first__16_BITS_92_TO_6_ETC___d2313 ?
		2'd1 :
		2'd0) ;
  assign IF_merged_0_flitLeft_413_EQ_0_414_THEN_NOT_cpu_ETC___d1543 =
	     ((merged_0_flitLeft == 8'd0) ?
		!cpu$dmem_master_awvalid || !cpu$dmem_master_wvalid :
		!cpu$dmem_master_wvalid) ||
	     merged_0_flitLeft != 8'd0 ;
  assign IF_merged_0_flitLeft_413_EQ_0_414_THEN_NOT_cpu_ETC___d1611 =
	     (IF_merged_0_flitLeft_413_EQ_0_414_THEN_NOT_cpu_ETC___d1543 ||
	      cpu$dmem_master_awvalid) &&
	     (merged_0_flitLeft != 8'd0 ||
	      !ifcs_0_noRoute_inner_pendingReq && cpu$dmem_master_awvalid) ;
  assign IF_merged_0_flitLeft_413_EQ_0_414_THEN_cpu_dme_ETC___d1536 =
	     (merged_0_flitLeft == 8'd0) ?
	       cpu$dmem_master_awvalid && cpu$dmem_master_wvalid :
	       cpu$dmem_master_wvalid ;
  assign IF_merged_0_flitLeft_413_EQ_0_414_THEN_cpu_dme_ETC___d1555 =
	     cpu$dmem_master_awaddr <
	     soc_map$m_near_mem_io_addr_range[127:64] ;
  assign IF_merged_0_flitLeft_413_EQ_0_414_THEN_cpu_dme_ETC___d1556 =
	     cpu$dmem_master_awaddr < y__h45660 ;
  assign IF_merged_0_flitLeft_413_EQ_0_414_THEN_cpu_dme_ETC___d1559 =
	     cpu$dmem_master_awaddr < soc_map$m_plic_addr_range[127:64] ;
  assign IF_merged_0_flitLeft_413_EQ_0_414_THEN_cpu_dme_ETC___d1560 =
	     cpu$dmem_master_awaddr < y__h45684 ;
  assign IF_merged_0_flitLeft_413_EQ_0_414_THEN_cpu_dme_ETC___d1564 =
	     cpu$dmem_master_awaddr[63:40] == 24'd0 &&
	     (IF_merged_0_flitLeft_413_EQ_0_414_THEN_cpu_dme_ETC___d1555 ||
	      !IF_merged_0_flitLeft_413_EQ_0_414_THEN_cpu_dme_ETC___d1556) &&
	     (IF_merged_0_flitLeft_413_EQ_0_414_THEN_cpu_dme_ETC___d1559 ||
	      !IF_merged_0_flitLeft_413_EQ_0_414_THEN_cpu_dme_ETC___d1560) ;
  assign IF_merged_0_flitLeft_413_EQ_0_414_THEN_cpu_dme_ETC___d1574 =
	     cpu$dmem_master_awaddr[63:40] == 24'd0 &&
	     (IF_merged_0_flitLeft_413_EQ_0_414_THEN_cpu_dme_ETC___d1555 ||
	      !IF_merged_0_flitLeft_413_EQ_0_414_THEN_cpu_dme_ETC___d1556) &&
	     !IF_merged_0_flitLeft_413_EQ_0_414_THEN_cpu_dme_ETC___d1559 &&
	     IF_merged_0_flitLeft_413_EQ_0_414_THEN_cpu_dme_ETC___d1560 ;
  assign IF_merged_1_flitLeft_431_EQ_0_432_THEN_NOT_dm__ETC___d1644 =
	     (merged_1_flitLeft == 8'd0) ?
	       !dm_master_nonsynth_awFF_rv$port1__read[97] ||
	       !dm_master_nonsynth_wCanPeek$wget :
	       !dm_master_nonsynth_wCanPeek$wget ;
  assign IF_merged_1_flitLeft_431_EQ_0_432_THEN_dm_mast_ETC___d1639 =
	     (merged_1_flitLeft == 8'd0) ?
	       dm_master_nonsynth_awFF_rv$port1__read[97] &&
	       dm_master_nonsynth_wCanPeek$wget :
	       dm_master_nonsynth_wCanPeek$wget ;
  assign IF_merged_1_flitLeft_431_EQ_0_432_THEN_dm_mast_ETC___d1659 =
	     dm_master_nonsynth_awFF_rv$port1__read[92:29] <
	     soc_map$m_near_mem_io_addr_range[127:64] ;
  assign IF_merged_1_flitLeft_431_EQ_0_432_THEN_dm_mast_ETC___d1660 =
	     dm_master_nonsynth_awFF_rv$port1__read[92:29] < y__h45660 ;
  assign IF_merged_1_flitLeft_431_EQ_0_432_THEN_dm_mast_ETC___d1663 =
	     dm_master_nonsynth_awFF_rv$port1__read[92:29] <
	     soc_map$m_plic_addr_range[127:64] ;
  assign IF_merged_1_flitLeft_431_EQ_0_432_THEN_dm_mast_ETC___d1664 =
	     dm_master_nonsynth_awFF_rv$port1__read[92:29] < y__h45684 ;
  assign IF_merged_1_flitLeft_431_EQ_0_432_THEN_dm_mast_ETC___d1668 =
	     dm_master_nonsynth_awFF_rvport1__read_BITS_92_ETC__q1[63:40] ==
	     24'd0 &&
	     (IF_merged_1_flitLeft_431_EQ_0_432_THEN_dm_mast_ETC___d1659 ||
	      !IF_merged_1_flitLeft_431_EQ_0_432_THEN_dm_mast_ETC___d1660) &&
	     (IF_merged_1_flitLeft_431_EQ_0_432_THEN_dm_mast_ETC___d1663 ||
	      !IF_merged_1_flitLeft_431_EQ_0_432_THEN_dm_mast_ETC___d1664) ;
  assign IF_merged_1_flitLeft_431_EQ_0_432_THEN_dm_mast_ETC___d1678 =
	     dm_master_nonsynth_awFF_rvport1__read_BITS_92_ETC__q1[63:40] ==
	     24'd0 &&
	     (IF_merged_1_flitLeft_431_EQ_0_432_THEN_dm_mast_ETC___d1659 ||
	      !IF_merged_1_flitLeft_431_EQ_0_432_THEN_dm_mast_ETC___d1660) &&
	     !IF_merged_1_flitLeft_431_EQ_0_432_THEN_dm_mast_ETC___d1663 &&
	     IF_merged_1_flitLeft_431_EQ_0_432_THEN_dm_mast_ETC___d1664 ;
  assign IF_split_0_flitLeft_457_EQ_0_458_THEN_ssNoSynt_ETC___d1783 =
	     (split_0_flitLeft == 8'd0) ?
	       ssNoSynth_0_aw_buffer_ff$FULL_N &&
	       ssNoSynth_0_w_buffer_ff$FULL_N :
	       ssNoSynth_0_w_buffer_ff$FULL_N ;
  assign IF_split_1_flitLeft_486_EQ_0_487_THEN_ssNoSynt_ETC___d1784 =
	     (split_1_flitLeft == 8'd0) ?
	       ssNoSynth_1_aw_buffer_ff$FULL_N &&
	       ssNoSynth_1_w_buffer_ff$FULL_N :
	       ssNoSynth_1_w_buffer_ff$FULL_N ;
  assign IF_split_2_flitLeft_515_EQ_0_516_THEN_ssNoSynt_ETC___d1785 =
	     (split_2_flitLeft == 8'd0) ?
	       ssNoSynth_2_aw_buffer_ff$FULL_N &&
	       ssNoSynth_2_w_buffer_ff$FULL_N :
	       ssNoSynth_2_w_buffer_ff$FULL_N ;
  assign IF_tagController_tagCon_cache_response_get_16__ETC___d228 =
	     (tagController_tagCon$cache_response_get[133:132] == 2'd1) ?
	       tagController_tagCon$cache_response_get[140:136] :
	       5'd0 ;
  assign SEXT_SEXT_arbiter_1_1_firstHot_666_667_BIT_0_6_ETC__q19 =
	     {2{SEXT_arbiter_1_1_firstHot_666_667_BIT_0_668_AN_ETC___d2682}} ;
  assign SEXT_SEXT_arbiter_1_firstHot_040_041_BIT_0_042_ETC__q9 =
	     {2{SEXT_arbiter_1_firstHot_040_041_BIT_0_042_AND__ETC___d2056}} ;
  assign SEXT_SEXT_arbiter_1_firstHot_1_481_482_BIT_0_4_ETC__q14 =
	     {2{SEXT_arbiter_1_firstHot_1_481_482_BIT_0_483_AN_ETC___d2489}} ;
  assign SEXT_SEXT_arbiter_firstHot_845_846_BIT_0_847_A_ETC__q4 =
	     {2{SEXT_arbiter_firstHot_845_846_BIT_0_847_AND_re_ETC___d1853}} ;
  assign SEXT_arbiter_1_1_firstHot_666_667_BIT_0_668_AN_ETC___d2682 =
	     x__h102670 | y__h102671 ;
  assign SEXT_arbiter_1_1_firstHot__q16 = {2{arbiter_1_1_firstHot}} ;
  assign SEXT_arbiter_1_1_lastSelect_1_661_662_BIT_0_66_ETC___d2676 =
	     x__h102534 | y__h102535 ;
  assign SEXT_arbiter_1_1_lastSelect_1__q18 = {2{arbiter_1_1_lastSelect_1}} ;
  assign SEXT_arbiter_1_1_lastSelect_657_658_BIT_0_659__ETC___d2670 =
	     x__h102383 | y__h102384 ;
  assign SEXT_arbiter_1_1_lastSelect__q17 = {2{arbiter_1_1_lastSelect}} ;
  assign SEXT_arbiter_1_firstHot_040_041_BIT_0_042_AND__ETC___d2056 =
	     x__h71315 | y__h71316 ;
  assign SEXT_arbiter_1_firstHot_1_481_482_BIT_0_483_AN_ETC___d2489 =
	     x__h90835 | y__h90836 ;
  assign SEXT_arbiter_1_firstHot_1__q12 = {2{arbiter_1_firstHot_1}} ;
  assign SEXT_arbiter_1_firstHot__q6 = {2{arbiter_1_firstHot}} ;
  assign SEXT_arbiter_1_lastSelect_031_032_BIT_0_033_AN_ETC___d2044 =
	     x__h71028 | y__h71029 ;
  assign SEXT_arbiter_1_lastSelect_1_035_036_BIT_0_037__ETC___d2050 =
	     x__h71179 | y__h71180 ;
  assign SEXT_arbiter_1_lastSelect_1__q8 = {2{arbiter_1_lastSelect_1}} ;
  assign SEXT_arbiter_1_lastSelect_2_477_478_BIT_0_479__ETC___d2485 =
	     x__h90732 | y__h90733 ;
  assign SEXT_arbiter_1_lastSelect_2__q13 = {2{arbiter_1_lastSelect_2}} ;
  assign SEXT_arbiter_1_lastSelect__q7 = {2{arbiter_1_lastSelect}} ;
  assign SEXT_arbiter_firstHot_845_846_BIT_0_847_AND_re_ETC___d1853 =
	     x__h56939 | y__h56940 ;
  assign SEXT_arbiter_firstHot__q2 = {2{arbiter_firstHot}} ;
  assign SEXT_arbiter_lastSelect_841_842_BIT_0_843_AND__ETC___d1849 =
	     x__h56836 | y__h56837 ;
  assign SEXT_arbiter_lastSelect__q3 = {2{arbiter_lastSelect}} ;
  assign SEXT_x03204__q20 = {2{x__h103204}} ;
  assign SEXT_x03238__q21 = {2{x__h103238}} ;
  assign SEXT_x1259__q15 = {2{x__h91259}} ;
  assign SEXT_x1849__q10 = {2{x__h71849}} ;
  assign SEXT_x1883__q11 = {2{x__h71883}} ;
  assign SEXT_x7363__q5 = {2{x__h57363}} ;
  assign a_awid__h46818 = { 1'd0, cpu$dmem_master_awid } ;
  assign araddr__h11126 =
	     { 24'd0, tagController_tagCon$memory_request_get[205:166] } ;
  assign arcache__h11131 =
	     tagController_tagCon$memory_request_get[7] ? 4'd0 : 4'd15 ;
  assign arlen__h11127 =
	     { 6'd0, tagController_tagCon$memory_request_get[4:3] } ;
  assign aw_awaddr__h8770 = { 24'd0, x__h8797 } ;
  assign cpu_dmem_master_ar_araddr__201_BITS_63_TO_40_2_ETC___d2213 =
	     cpu$dmem_master_araddr[63:40] == 24'd0 &&
	     (cpu_dmem_master_ar_araddr__201_ULT_soc_map_m_n_ETC___d2204 ||
	      !cpu_dmem_master_ar_araddr__201_ULT_soc_map_m_n_ETC___d2205) &&
	     (cpu_dmem_master_ar_araddr__201_ULT_soc_map_m_p_ETC___d2208 ||
	      !cpu_dmem_master_ar_araddr__201_ULT_soc_map_m_p_ETC___d2209) ;
  assign cpu_dmem_master_ar_araddr__201_BITS_63_TO_40_2_ETC___d2223 =
	     cpu$dmem_master_araddr[63:40] == 24'd0 &&
	     (cpu_dmem_master_ar_araddr__201_ULT_soc_map_m_n_ETC___d2204 ||
	      !cpu_dmem_master_ar_araddr__201_ULT_soc_map_m_n_ETC___d2205) &&
	     !cpu_dmem_master_ar_araddr__201_ULT_soc_map_m_p_ETC___d2208 &&
	     cpu_dmem_master_ar_araddr__201_ULT_soc_map_m_p_ETC___d2209 ;
  assign cpu_dmem_master_ar_araddr__201_ULT_soc_map_m_n_ETC___d2204 =
	     cpu$dmem_master_araddr <
	     soc_map$m_near_mem_io_addr_range[127:64] ;
  assign cpu_dmem_master_ar_araddr__201_ULT_soc_map_m_n_ETC___d2205 =
	     cpu$dmem_master_araddr < y__h45660 ;
  assign cpu_dmem_master_ar_araddr__201_ULT_soc_map_m_p_ETC___d2208 =
	     cpu$dmem_master_araddr < soc_map$m_plic_addr_range[127:64] ;
  assign cpu_dmem_master_ar_araddr__201_ULT_soc_map_m_p_ETC___d2209 =
	     cpu$dmem_master_araddr < y__h45684 ;
  assign deburst_debug_countWriteRspFF_first__69_ULE_de_ETC___d471 =
	     deburst_debug_countWriteRspFF$D_OUT <=
	     deburst_debug_flitReceived ;
  assign deburst_debug_readsSent_93_EQ_deburst_debug_in_ETC___d504 =
	     deburst_debug_readsSent ==
	     deburst_debug_inSerial_shim_arff_rv$port1__read[28:21] ;
  assign deburst_dm_countWriteRspFF_first__56_ULE_debur_ETC___d658 =
	     deburst_dm_countWriteRspFF$D_OUT <= deburst_dm_flitReceived ;
  assign deburst_dm_outShim_arff_first__16_BITS_92_TO_2_ETC___d2294 =
	     deburst_dm_outShim_arff$D_OUT[92:29] <
	     soc_map$m_near_mem_io_addr_range[127:64] ;
  assign deburst_dm_outShim_arff_first__16_BITS_92_TO_2_ETC___d2295 =
	     deburst_dm_outShim_arff$D_OUT[92:29] < y__h45660 ;
  assign deburst_dm_outShim_arff_first__16_BITS_92_TO_2_ETC___d2298 =
	     deburst_dm_outShim_arff$D_OUT[92:29] <
	     soc_map$m_plic_addr_range[127:64] ;
  assign deburst_dm_outShim_arff_first__16_BITS_92_TO_2_ETC___d2299 =
	     deburst_dm_outShim_arff$D_OUT[92:29] < y__h45684 ;
  assign deburst_dm_outShim_arff_first__16_BITS_92_TO_6_ETC___d2303 =
	     deburst_dm_outShim_arff$D_OUT[92:69] == 24'd0 &&
	     (deburst_dm_outShim_arff_first__16_BITS_92_TO_2_ETC___d2294 ||
	      !deburst_dm_outShim_arff_first__16_BITS_92_TO_2_ETC___d2295) &&
	     (deburst_dm_outShim_arff_first__16_BITS_92_TO_2_ETC___d2298 ||
	      !deburst_dm_outShim_arff_first__16_BITS_92_TO_2_ETC___d2299) ;
  assign deburst_dm_outShim_arff_first__16_BITS_92_TO_6_ETC___d2313 =
	     deburst_dm_outShim_arff$D_OUT[92:69] == 24'd0 &&
	     (deburst_dm_outShim_arff_first__16_BITS_92_TO_2_ETC___d2294 ||
	      !deburst_dm_outShim_arff_first__16_BITS_92_TO_2_ETC___d2295) &&
	     !deburst_dm_outShim_arff_first__16_BITS_92_TO_2_ETC___d2298 &&
	     deburst_dm_outShim_arff_first__16_BITS_92_TO_2_ETC___d2299 ;
  assign deburst_dm_outShim_arff_notEmpty__09_AND_NOT_d_ETC___d821 =
	     deburst_dm_outShim_arff$EMPTY_N &&
	     (!dm_master_nonsynth_takeUpperR$EMPTY_N ||
	      deburst_dm_outShim_arff$D_OUT[96:93] ==
	      dm_master_nonsynth_currentRID) ;
  assign deburst_dm_outShim_awff_notEmpty__88_AND_NOT_d_ETC___d800 =
	     deburst_dm_outShim_awff$EMPTY_N &&
	     (!dm_master_nonsynth_takeUpperW$EMPTY_N ||
	      deburst_dm_outShim_awff$D_OUT[96:93] ==
	      dm_master_nonsynth_currentWID) ;
  assign deburst_dm_outShim_wff_i_notEmpty__61_AND_dm_m_ETC___d1703 =
	     deburst_dm_outShim_wff$EMPTY_N &&
	     dm_master_nonsynth_takeUpperW$EMPTY_N &&
	     IF_merged_1_flitLeft_431_EQ_0_432_THEN_dm_mast_ETC___d1639 &&
	     ifcs_1_innerReq$FULL_N &&
	     (IF_merged_1_flitLeft_431_EQ_0_432_THEN_NOT_dm__ETC___d1644 ||
	      merged_1_flitLeft != 8'd0 ||
	      dm_master_nonsynth_awFF_rv$port1__read[97]) ;
  assign deburst_dm_readsSent_80_EQ_deburst_dm_inSerial_ETC___d691 =
	     deburst_dm_readsSent ==
	     deburst_dm_inSerial_shim_arff_rv$port1__read[28:21] ;
  assign dm_master_nonsynth_awFF_rvport1__read_BITS_92_ETC__q1 =
	     dm_master_nonsynth_awFF_rv$port1__read[92:29] ;
  assign dm_master_nonsynth_takeUpperW_i_notEmpty__62_A_ETC___d1650 =
	     dm_master_nonsynth_takeUpperW$EMPTY_N &&
	     IF_merged_1_flitLeft_431_EQ_0_432_THEN_dm_mast_ETC___d1639 &&
	     ifcs_1_innerReq$FULL_N &&
	     ifcs_1_innerRoute$FULL_N &&
	     (IF_merged_1_flitLeft_431_EQ_0_432_THEN_NOT_dm__ETC___d1644 ||
	      merged_1_flitLeft != 8'd0 ||
	      dm_master_nonsynth_awFF_rv$port1__read[97]) ;
  assign fatReq_arid__h80659 = { 1'd0, cpu$dmem_master_arid } ;
  assign msNoSynth_1_r_buffer_firstValid_read__025_AND__ETC___d1031 =
	     msNoSynth_1_r_buffer_firstValid$Q_OUT &&
	     (msNoSynth_1_r_buffer_ff$EMPTY_N ||
	      msNoSynth_1_r_buffer_enqw$whas) &&
	     deburst_dm_outShim_rff$FULL_N &&
	     dm_master_nonsynth_takeUpperR$EMPTY_N ;
  assign plic_RDY_server_reset_request_put__10_AND_cpu__ETC___d316 =
	     plic$RDY_server_reset_request_put &&
	     cpu$RDY_hart0_server_reset_request_put &&
	     f_reset_reqs$EMPTY_N &&
	     f_reset_requestor$FULL_N ;
  assign reqWires_1_0_whas__017_AND_reqWires_1_0_wget___ETC___d2027 =
	     CAN_FIRE_RL_craftReq_2 && reqWires_1_0$wget ||
	     CAN_FIRE_RL_craftReq_3 && reqWires_1_1$wget ||
	     CAN_FIRE_RL_craftReq_4 && reqWires_1_2$wget ;
  assign reqWires_1_1_0_whas__643_AND_reqWires_1_1_0_wg_ETC___d2653 =
	     CAN_FIRE_RL_craftReq_7 && reqWires_1_1_0$wget ||
	     CAN_FIRE_RL_craftReq_8 && reqWires_1_1_1_1$wget ||
	     CAN_FIRE_RL_craftReq_9 && reqWires_1_1_2$wget ;
  assign split_0_doPut_whas__449_AND_split_0_doPut_wget_ETC___d1456 =
	     CAN_FIRE_RL_sink_selected &&
	     (split_0_doPut$wget[245] ||
	      ssNoSynth_0_aw_buffer_ff$FULL_N &&
	      ssNoSynth_0_w_buffer_ff$FULL_N) ;
  assign split_1_doPut_whas__478_AND_split_1_doPut_wget_ETC___d1485 =
	     CAN_FIRE_RL_sink_selected_1 &&
	     (split_1_doPut$wget[245] ||
	      ssNoSynth_1_aw_buffer_ff$FULL_N &&
	      ssNoSynth_1_w_buffer_ff$FULL_N) ;
  assign split_2_doPut_whas__507_AND_split_2_doPut_wget_ETC___d1514 =
	     CAN_FIRE_RL_sink_selected_2 &&
	     (split_2_doPut$wget[245] ||
	      ssNoSynth_2_aw_buffer_ff$FULL_N &&
	      ssNoSynth_2_w_buffer_ff$FULL_N) ;
  assign state_1_028_AND_activeSource_1_0_116_117_AND_i_ETC___d2119 =
	     state_1 && activeSource_1_0 && ifcs_0_routeBack$EMPTY_N &&
	     ((!ifcs_0_routeBack$D_OUT[0] ||
	       !(!CAN_FIRE_RL_ifcs_0_drainNoRouteResponse)) ?
		ifcs_0_routeBack$D_OUT[1] &&
		!CAN_FIRE_RL_ifcs_1_drainNoRouteResponse :
		ifcs_0_routeBack$D_OUT[0]) ;
  assign state_1_028_AND_activeSource_1_1_149_150_AND_i_ETC___d2152 =
	     state_1 && activeSource_1_1 && ifcs_1_routeBack$EMPTY_N &&
	     ((!ifcs_1_routeBack$D_OUT[0] ||
	       !(!CAN_FIRE_RL_ifcs_0_drainNoRouteResponse)) ?
		ifcs_1_routeBack$D_OUT[1] &&
		!CAN_FIRE_RL_ifcs_1_drainNoRouteResponse :
		ifcs_1_routeBack$D_OUT[0]) ;
  assign state_1_028_AND_activeSource_1_2_183_184_AND_i_ETC___d2186 =
	     state_1 && activeSource_1_2 && ifcs_2_routeBack$EMPTY_N &&
	     ((!ifcs_2_routeBack$D_OUT[0] ||
	       !(!CAN_FIRE_RL_ifcs_0_drainNoRouteResponse)) ?
		ifcs_2_routeBack$D_OUT[1] &&
		!CAN_FIRE_RL_ifcs_1_drainNoRouteResponse :
		ifcs_2_routeBack$D_OUT[0]) ;
  assign state_1_1_1_654_AND_activeSource_1_1_0_748_749_ETC___d2751 =
	     state_1_1_1 && activeSource_1_1_0 &&
	     ifcs_0_1_routeBack$EMPTY_N &&
	     ((!ifcs_0_1_routeBack$D_OUT[0] ||
	       !(!CAN_FIRE_RL_ifcs_0_1_drainNoRouteResponse)) ?
		ifcs_0_1_routeBack$D_OUT[1] &&
		!CAN_FIRE_RL_ifcs_1_1_drainNoRouteResponse :
		ifcs_0_1_routeBack$D_OUT[0]) ;
  assign state_1_1_1_654_AND_activeSource_1_1_1_1_784_7_ETC___d2787 =
	     state_1_1_1 && activeSource_1_1_1_1 &&
	     ifcs_1_1_routeBack$EMPTY_N &&
	     ((!ifcs_1_1_routeBack$D_OUT[0] ||
	       !(!CAN_FIRE_RL_ifcs_0_1_drainNoRouteResponse)) ?
		ifcs_1_1_routeBack$D_OUT[1] &&
		!CAN_FIRE_RL_ifcs_1_1_drainNoRouteResponse :
		ifcs_1_1_routeBack$D_OUT[0]) ;
  assign state_1_1_1_654_AND_activeSource_1_1_2_820_821_ETC___d2823 =
	     state_1_1_1 && activeSource_1_1_2 &&
	     ifcs_2_1_routeBack$EMPTY_N &&
	     ((!ifcs_2_1_routeBack$D_OUT[0] ||
	       !(!CAN_FIRE_RL_ifcs_0_1_drainNoRouteResponse)) ?
		ifcs_2_1_routeBack$D_OUT[1] &&
		!CAN_FIRE_RL_ifcs_1_1_drainNoRouteResponse :
		ifcs_2_1_routeBack$D_OUT[0]) ;
  assign state_1_1_474_AND_activeSource_1_0_1_541_542_A_ETC___d2544 =
	     state_1_1 && activeSource_1_0_1 && ifcs_0_1_innerRoute$EMPTY_N &&
	     ((!ifcs_0_1_innerRoute$D_OUT[0] ||
	       !ssNoSynth_0_ar_buffer_ff$FULL_N) ?
		IF_NOT_ifcs_0_1_innerRoute_first__427_BIT_1_43_ETC___d2449 :
		ifcs_0_1_innerRoute$D_OUT[0]) ;
  assign state_1_1_474_AND_activeSource_1_1_1_581_582_A_ETC___d2584 =
	     state_1_1 && activeSource_1_1_1 && ifcs_1_1_innerRoute$EMPTY_N &&
	     ((!ifcs_1_1_innerRoute$D_OUT[0] ||
	       !ssNoSynth_0_ar_buffer_ff$FULL_N) ?
		IF_NOT_ifcs_1_1_innerRoute_first__456_BIT_1_46_ETC___d2465 :
		ifcs_1_1_innerRoute$D_OUT[0]) ;
  assign state_838_AND_activeSource_0_911_912_AND_ifcs__ETC___d1914 =
	     state && activeSource_0 && ifcs_0_innerRoute$EMPTY_N &&
	     ((!ifcs_0_innerRoute$D_OUT[0] ||
	       !IF_split_0_flitLeft_457_EQ_0_458_THEN_ssNoSynt_ETC___d1783) ?
		IF_NOT_ifcs_0_innerRoute_first__791_BIT_1_800__ETC___d1813 :
		ifcs_0_innerRoute$D_OUT[0]) ;
  assign state_838_AND_activeSource_1_955_956_AND_ifcs__ETC___d1958 =
	     state && activeSource_1 && ifcs_1_innerRoute$EMPTY_N &&
	     ((!ifcs_1_innerRoute$D_OUT[0] ||
	       !IF_split_0_flitLeft_457_EQ_0_458_THEN_ssNoSynt_ETC___d1783) ?
		IF_NOT_ifcs_1_innerRoute_first__820_BIT_1_824__ETC___d1829 :
		ifcs_1_innerRoute$D_OUT[0]) ;
  assign x__h102383 = x__h102385 | y__h102386 ;
  assign x__h102385 =
	     SEXT_arbiter_1_1_lastSelect__q17[0] &
	     (CAN_FIRE_RL_craftReq_7 && reqWires_1_1_0$wget) ;
  assign x__h102534 = x__h102536 | y__h102537 ;
  assign x__h102536 =
	     SEXT_arbiter_1_1_lastSelect_1__q18[0] &
	     (CAN_FIRE_RL_craftReq_7 && reqWires_1_1_0$wget) ;
  assign x__h102670 = x__h102672 | y__h102673 ;
  assign x__h102672 =
	     SEXT_arbiter_1_1_firstHot__q16[0] &
	     (CAN_FIRE_RL_craftReq_7 && reqWires_1_1_0$wget) ;
  assign x__h103142 = x__h103144 | y__h103145 ;
  assign x__h103144 =
	     SEXT_SEXT_arbiter_1_1_firstHot_666_667_BIT_0_6_ETC__q19[0] &
	     arbiter_1_1_firstHot ;
  assign x__h103204 =
	     !SEXT_arbiter_1_1_firstHot_666_667_BIT_0_668_AN_ETC___d2682 &&
	     SEXT_arbiter_1_1_lastSelect_1_661_662_BIT_0_66_ETC___d2676 ;
  assign x__h103238 =
	     !SEXT_arbiter_1_1_lastSelect_1_661_662_BIT_0_66_ETC___d2676 &&
	     !SEXT_arbiter_1_1_firstHot_666_667_BIT_0_668_AN_ETC___d2682 &&
	     SEXT_arbiter_1_1_lastSelect_657_658_BIT_0_659__ETC___d2670 ;
  assign x__h103330 = x__h103332 | y__h103333 ;
  assign x__h103332 = SEXT_x03204__q20[0] & arbiter_1_1_firstHot ;
  assign x__h103511 = x__h103513 | y__h103514 ;
  assign x__h103513 = SEXT_x03238__q21[0] & arbiter_1_1_firstHot ;
  assign x__h11207 =
	     (tagController_tagCon$memory_request_get[158:157] == 2'd0) ?
	       arcache__h11131 :
	       4'd0 ;
  assign x__h21048 = { 56'd0, deburst_debug_writesSent } ;
  assign x__h21296 = deburst_debug_writesSent + 8'd1 ;
  assign x__h21413 = deburst_debug_flitReceived + 8'd1 ;
  assign x__h21747 = { 56'd0, deburst_debug_readsSent } ;
  assign x__h21947 = deburst_debug_readsSent + 8'd1 ;
  assign x__h27442 = { 56'd0, deburst_dm_writesSent } ;
  assign x__h27690 = deburst_dm_writesSent + 8'd1 ;
  assign x__h27807 = deburst_dm_flitReceived + 8'd1 ;
  assign x__h28141 = { 56'd0, deburst_dm_readsSent } ;
  assign x__h28341 = deburst_dm_readsSent + 8'd1 ;
  assign x__h34753 =
	     msNoSynth_1_r_buffer_ff$EMPTY_N ?
	       msNoSynth_1_r_buffer_ff$D_OUT[132:5] :
	       msNoSynth_1_r_buffer_enqw$wget[132:5] ;
  assign x__h4856 =
	     tagController_shimSlave_arff$D_OUT[97:93] -
	     tagController_shimSlave_awff$D_OUT[97:93] ;
  assign x__h56836 =
	     SEXT_arbiter_lastSelect__q3[0] &
	     (CAN_FIRE_RL_craftReq && reqWires_0$wget) ;
  assign x__h56939 =
	     SEXT_arbiter_firstHot__q2[0] &
	     (CAN_FIRE_RL_craftReq && reqWires_0$wget) ;
  assign x__h57304 =
	     SEXT_SEXT_arbiter_firstHot_845_846_BIT_0_847_A_ETC__q4[0] &
	     arbiter_firstHot ;
  assign x__h57363 =
	     !SEXT_arbiter_firstHot_845_846_BIT_0_847_AND_re_ETC___d1853 &&
	     SEXT_arbiter_lastSelect_841_842_BIT_0_843_AND__ETC___d1849 ;
  assign x__h57445 = SEXT_x7363__q5[0] & arbiter_firstHot ;
  assign x__h71028 = x__h71030 | y__h71031 ;
  assign x__h71030 =
	     SEXT_arbiter_1_lastSelect__q7[0] &
	     (CAN_FIRE_RL_craftReq_2 && reqWires_1_0$wget) ;
  assign x__h71179 = x__h71181 | y__h71182 ;
  assign x__h71181 =
	     SEXT_arbiter_1_lastSelect_1__q8[0] &
	     (CAN_FIRE_RL_craftReq_2 && reqWires_1_0$wget) ;
  assign x__h71315 = x__h71317 | y__h71318 ;
  assign x__h71317 =
	     SEXT_arbiter_1_firstHot__q6[0] &
	     (CAN_FIRE_RL_craftReq_2 && reqWires_1_0$wget) ;
  assign x__h71787 = x__h71789 | y__h71790 ;
  assign x__h71789 =
	     SEXT_SEXT_arbiter_1_firstHot_040_041_BIT_0_042_ETC__q9[0] &
	     arbiter_1_firstHot ;
  assign x__h71849 =
	     !SEXT_arbiter_1_firstHot_040_041_BIT_0_042_AND__ETC___d2056 &&
	     SEXT_arbiter_1_lastSelect_1_035_036_BIT_0_037__ETC___d2050 ;
  assign x__h71883 =
	     !SEXT_arbiter_1_lastSelect_1_035_036_BIT_0_037__ETC___d2050 &&
	     !SEXT_arbiter_1_firstHot_040_041_BIT_0_042_AND__ETC___d2056 &&
	     SEXT_arbiter_1_lastSelect_031_032_BIT_0_033_AN_ETC___d2044 ;
  assign x__h71975 = x__h71977 | y__h71978 ;
  assign x__h71977 = SEXT_x1849__q10[0] & arbiter_1_firstHot ;
  assign x__h72156 = x__h72158 | y__h72159 ;
  assign x__h72158 = SEXT_x1883__q11[0] & arbiter_1_firstHot ;
  assign x__h7610 =
	     tagController_shimSlave_awff$D_OUT[97:93] -
	     tagController_shimSlave_arff$D_OUT[97:93] ;
  assign x__h8797 =
	     { tagController_tagCon$memory_request_get[205:170], 4'd0 } ;
  assign x__h8842 =
	     tagController_tagCon$memory_request_get[155] ? 4'd0 : 4'd15 ;
  assign x__h90732 =
	     SEXT_arbiter_1_lastSelect_2__q13[0] &
	     (CAN_FIRE_RL_craftReq_5 && reqWires_1_0_1$wget) ;
  assign x__h90835 =
	     SEXT_arbiter_1_firstHot_1__q12[0] &
	     (CAN_FIRE_RL_craftReq_5 && reqWires_1_0_1$wget) ;
  assign x__h91200 =
	     SEXT_SEXT_arbiter_1_firstHot_1_481_482_BIT_0_4_ETC__q14[0] &
	     arbiter_1_firstHot_1 ;
  assign x__h91259 =
	     !SEXT_arbiter_1_firstHot_1_481_482_BIT_0_483_AN_ETC___d2489 &&
	     SEXT_arbiter_1_lastSelect_2_477_478_BIT_0_479__ETC___d2485 ;
  assign x__h91341 = SEXT_x1259__q15[0] & arbiter_1_firstHot_1 ;
  assign x_araddr__h11143 =
	     (tagController_tagCon$memory_request_get[158:157] == 2'd0) ?
	       araddr__h11126 :
	       64'hAAAAAAAAAAAAAAAA ;
  assign x_araddr__h21627 =
	     (deburst_debug_inSerial_shim_arff_rv$port1__read[17:16] ==
	      2'd1) ?
	       deburst_debug_inSerial_shim_arff_rv$port1__read[92:29] +
	       y__h21735 :
	       deburst_debug_inSerial_shim_arff_rv$port1__read[92:29] ;
  assign x_araddr__h28021 =
	     (deburst_dm_inSerial_shim_arff_rv$port1__read[17:16] == 2'd1) ?
	       deburst_dm_inSerial_shim_arff_rv$port1__read[92:29] +
	       y__h28129 :
	       deburst_dm_inSerial_shim_arff_rv$port1__read[92:29] ;
  assign x_arid__h11142 =
	     (tagController_tagCon$memory_request_get[158:157] == 2'd0) ?
	       tagController_tagCon$memory_request_get[165:160] :
	       6'd0 ;
  assign x_arlen__h11144 =
	     (tagController_tagCon$memory_request_get[158:157] == 2'd0) ?
	       arlen__h11127 :
	       8'd0 ;
  assign x_arsize_val__h11189 =
	     (tagController_tagCon$memory_request_get[158:157] == 2'd0) ?
	       tagController_tagCon$memory_request_get[2:0] :
	       3'b0 ;
  assign x_awaddr__h20925 =
	     (deburst_debug_inSerial_shim_awff_rv$port1__read[17:16] ==
	      2'd1) ?
	       deburst_debug_inSerial_shim_awff_rv$port1__read[92:29] +
	       y__h21036 :
	       deburst_debug_inSerial_shim_awff_rv$port1__read[92:29] ;
  assign x_awaddr__h27322 =
	     (deburst_dm_inSerial_shim_awff_rv$port1__read[17:16] == 2'd1) ?
	       deburst_dm_inSerial_shim_awff_rv$port1__read[92:29] +
	       y__h27430 :
	       deburst_dm_inSerial_shim_awff_rv$port1__read[92:29] ;
  assign x_port1__read__h81220 =
	     CAN_FIRE_RL_ifcs_0_1_nonRoutableFlit ?
	       ifcs_0_1_noRoute_flitCount$port0__write_1 :
	       ifcs_0_1_noRoute_flitCount ;
  assign x_port1__read__h83666 =
	     CAN_FIRE_RL_ifcs_1_1_nonRoutableFlit ?
	       ifcs_1_1_noRoute_flitCount$port0__write_1 :
	       ifcs_1_1_noRoute_flitCount ;
  assign x_rdata__h34703 =
	     dm_master_nonsynth_takeUpperR$D_OUT ?
	       x__h34753[127:64] :
	       x__h34753[63:0] ;
  assign x_rid__h34702 =
	     msNoSynth_1_r_buffer_ff$EMPTY_N ?
	       msNoSynth_1_r_buffer_ff$D_OUT[136:133] :
	       msNoSynth_1_r_buffer_enqw$wget[136:133] ;
  assign y__h102384 =
	     SEXT_arbiter_1_1_firstHot__q16[0] &
	     (CAN_FIRE_RL_craftReq_9 && reqWires_1_1_2$wget) ;
  assign y__h102386 =
	     SEXT_arbiter_1_1_lastSelect_1__q18[0] &
	     (CAN_FIRE_RL_craftReq_8 && reqWires_1_1_1_1$wget) ;
  assign y__h102535 =
	     SEXT_arbiter_1_1_lastSelect__q17[0] &
	     (CAN_FIRE_RL_craftReq_9 && reqWires_1_1_2$wget) ;
  assign y__h102537 =
	     SEXT_arbiter_1_1_firstHot__q16[0] &
	     (CAN_FIRE_RL_craftReq_8 && reqWires_1_1_1_1$wget) ;
  assign y__h102671 =
	     SEXT_arbiter_1_1_lastSelect_1__q18[0] &
	     (CAN_FIRE_RL_craftReq_9 && reqWires_1_1_2$wget) ;
  assign y__h102673 =
	     SEXT_arbiter_1_1_lastSelect__q17[0] &
	     (CAN_FIRE_RL_craftReq_8 && reqWires_1_1_1_1$wget) ;
  assign y__h103143 = SEXT_x03238__q21[0] & arbiter_1_1_lastSelect ;
  assign y__h103145 = SEXT_x03204__q20[0] & arbiter_1_1_lastSelect_1 ;
  assign y__h103331 =
	     SEXT_SEXT_arbiter_1_1_firstHot_666_667_BIT_0_6_ETC__q19[0] &
	     arbiter_1_1_lastSelect ;
  assign y__h103333 = SEXT_x03238__q21[0] & arbiter_1_1_lastSelect_1 ;
  assign y__h103512 = SEXT_x03204__q20[0] & arbiter_1_1_lastSelect ;
  assign y__h103514 =
	     SEXT_SEXT_arbiter_1_1_firstHot_666_667_BIT_0_6_ETC__q19[0] &
	     arbiter_1_1_lastSelect_1 ;
  assign y__h21036 =
	     x__h21048 <<
	     deburst_debug_inSerial_shim_awff_rv$port1__read[20:18] ;
  assign y__h21735 =
	     x__h21747 <<
	     deburst_debug_inSerial_shim_arff_rv$port1__read[20:18] ;
  assign y__h27430 =
	     x__h27442 <<
	     deburst_dm_inSerial_shim_awff_rv$port1__read[20:18] ;
  assign y__h28129 =
	     x__h28141 <<
	     deburst_dm_inSerial_shim_arff_rv$port1__read[20:18] ;
  assign y__h45660 =
	     soc_map$m_near_mem_io_addr_range[127:64] +
	     soc_map$m_near_mem_io_addr_range[63:0] ;
  assign y__h45684 =
	     soc_map$m_plic_addr_range[127:64] +
	     soc_map$m_plic_addr_range[63:0] ;
  assign y__h56837 =
	     SEXT_arbiter_firstHot__q2[0] &
	     (CAN_FIRE_RL_craftReq_1 && reqWires_1$wget) ;
  assign y__h56940 =
	     SEXT_arbiter_lastSelect__q3[0] &
	     (CAN_FIRE_RL_craftReq_1 && reqWires_1$wget) ;
  assign y__h57305 = SEXT_x7363__q5[0] & arbiter_lastSelect ;
  assign y__h57446 =
	     SEXT_SEXT_arbiter_firstHot_845_846_BIT_0_847_A_ETC__q4[0] &
	     arbiter_lastSelect ;
  assign y__h71029 =
	     SEXT_arbiter_1_firstHot__q6[0] &
	     (CAN_FIRE_RL_craftReq_4 && reqWires_1_2$wget) ;
  assign y__h71031 =
	     SEXT_arbiter_1_lastSelect_1__q8[0] &
	     (CAN_FIRE_RL_craftReq_3 && reqWires_1_1$wget) ;
  assign y__h71180 =
	     SEXT_arbiter_1_lastSelect__q7[0] &
	     (CAN_FIRE_RL_craftReq_4 && reqWires_1_2$wget) ;
  assign y__h71182 =
	     SEXT_arbiter_1_firstHot__q6[0] &
	     (CAN_FIRE_RL_craftReq_3 && reqWires_1_1$wget) ;
  assign y__h71316 =
	     SEXT_arbiter_1_lastSelect_1__q8[0] &
	     (CAN_FIRE_RL_craftReq_4 && reqWires_1_2$wget) ;
  assign y__h71318 =
	     SEXT_arbiter_1_lastSelect__q7[0] &
	     (CAN_FIRE_RL_craftReq_3 && reqWires_1_1$wget) ;
  assign y__h71788 = SEXT_x1883__q11[0] & arbiter_1_lastSelect ;
  assign y__h71790 = SEXT_x1849__q10[0] & arbiter_1_lastSelect_1 ;
  assign y__h71976 =
	     SEXT_SEXT_arbiter_1_firstHot_040_041_BIT_0_042_ETC__q9[0] &
	     arbiter_1_lastSelect ;
  assign y__h71978 = SEXT_x1883__q11[0] & arbiter_1_lastSelect_1 ;
  assign y__h72157 = SEXT_x1849__q10[0] & arbiter_1_lastSelect ;
  assign y__h72159 =
	     SEXT_SEXT_arbiter_1_firstHot_040_041_BIT_0_042_ETC__q9[0] &
	     arbiter_1_lastSelect_1 ;
  assign y__h90733 =
	     SEXT_arbiter_1_firstHot_1__q12[0] &
	     (CAN_FIRE_RL_craftReq_6 && reqWires_1_1_1$wget) ;
  assign y__h90836 =
	     SEXT_arbiter_1_lastSelect_2__q13[0] &
	     (CAN_FIRE_RL_craftReq_6 && reqWires_1_1_1$wget) ;
  assign y__h91201 = SEXT_x1259__q15[0] & arbiter_1_lastSelect_2 ;
  assign y__h91342 =
	     SEXT_SEXT_arbiter_1_firstHot_1_481_482_BIT_0_4_ETC__q14[0] &
	     arbiter_1_lastSelect_2 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        activeSource_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	activeSource_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	activeSource_1_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	activeSource_1_0_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	activeSource_1_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	activeSource_1_1_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	activeSource_1_1_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	activeSource_1_1_1_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	activeSource_1_1_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	activeSource_1_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	arbiter_1_1_firstHot <= `BSV_ASSIGNMENT_DELAY 1'd1;
	arbiter_1_1_lastSelect <= `BSV_ASSIGNMENT_DELAY 1'd0;
	arbiter_1_1_lastSelect_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	arbiter_1_firstHot <= `BSV_ASSIGNMENT_DELAY 1'd1;
	arbiter_1_firstHot_1 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	arbiter_1_lastSelect <= `BSV_ASSIGNMENT_DELAY 1'd0;
	arbiter_1_lastSelect_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	arbiter_1_lastSelect_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	arbiter_firstHot <= `BSV_ASSIGNMENT_DELAY 1'd1;
	arbiter_lastSelect <= `BSV_ASSIGNMENT_DELAY 1'd0;
	deburst_debug_flitReceived <= `BSV_ASSIGNMENT_DELAY 8'd0;
	deburst_debug_inSerial_lastWasRead <= `BSV_ASSIGNMENT_DELAY 1'd0;
	deburst_debug_inSerial_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	    98'h0AAAAAAAAAAAAAAAAAAAAAAAA;
	deburst_debug_inSerial_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	    98'h0AAAAAAAAAAAAAAAAAAAAAAAA;
	deburst_debug_inSerial_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY 7'd42;
	deburst_debug_inSerial_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	    74'h0AAAAAAAAAAAAAAAAAA;
	deburst_debug_inSerial_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	    76'h2AAAAAAAAAAAAAAAAAA;
	deburst_debug_inSerial_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	deburst_debug_readsSent <= `BSV_ASSIGNMENT_DELAY 8'd0;
	deburst_debug_writesSent <= `BSV_ASSIGNMENT_DELAY 8'd0;
	deburst_dm_flitReceived <= `BSV_ASSIGNMENT_DELAY 8'd0;
	deburst_dm_inSerial_lastWasRead <= `BSV_ASSIGNMENT_DELAY 1'd0;
	deburst_dm_inSerial_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	    98'h0AAAAAAAAAAAAAAAAAAAAAAAA;
	deburst_dm_inSerial_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	    98'h0AAAAAAAAAAAAAAAAAAAAAAAA;
	deburst_dm_inSerial_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY 7'd42;
	deburst_dm_inSerial_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	    74'h0AAAAAAAAAAAAAAAAAA;
	deburst_dm_inSerial_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	    76'h2AAAAAAAAAAAAAAAAAA;
	deburst_dm_inSerial_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	deburst_dm_readsSent <= `BSV_ASSIGNMENT_DELAY 8'd0;
	deburst_dm_writesSent <= `BSV_ASSIGNMENT_DELAY 8'd0;
	dm_master_nonsynth_awFF_rv <= `BSV_ASSIGNMENT_DELAY
	    98'h0AAAAAAAAAAAAAAAAAAAAAAAA;
	ifcs_0_1_noRoute_currentReq <= `BSV_ASSIGNMENT_DELAY
	    97'h0AAAAAAAAAAAAAAAAAAAAAAAA;
	ifcs_0_1_noRoute_flitCount <= `BSV_ASSIGNMENT_DELAY 9'd0;
	ifcs_0_1_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ifcs_0_1_state_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ifcs_0_noRoute_inner_currentReq <= `BSV_ASSIGNMENT_DELAY
	    97'h0AAAAAAAAAAAAAAAAAAAAAAAA;
	ifcs_0_noRoute_inner_pendingReq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ifcs_0_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ifcs_0_state_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ifcs_1_1_noRoute_currentReq <= `BSV_ASSIGNMENT_DELAY
	    97'h0AAAAAAAAAAAAAAAAAAAAAAAA;
	ifcs_1_1_noRoute_flitCount <= `BSV_ASSIGNMENT_DELAY 9'd0;
	ifcs_1_1_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ifcs_1_1_state_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ifcs_1_noRoute_inner_currentReq <= `BSV_ASSIGNMENT_DELAY
	    97'h0AAAAAAAAAAAAAAAAAAAAAAAA;
	ifcs_1_noRoute_inner_pendingReq <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ifcs_1_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ifcs_1_state_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ifcs_2_1_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ifcs_2_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
	merged_0_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	merged_1_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	split_0_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	split_1_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	split_2_flitLeft <= `BSV_ASSIGNMENT_DELAY 8'd0;
	state <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_1_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_1_1_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (activeSource_0$EN)
	  activeSource_0 <= `BSV_ASSIGNMENT_DELAY activeSource_0$D_IN;
	if (activeSource_1$EN)
	  activeSource_1 <= `BSV_ASSIGNMENT_DELAY activeSource_1$D_IN;
	if (activeSource_1_0$EN)
	  activeSource_1_0 <= `BSV_ASSIGNMENT_DELAY activeSource_1_0$D_IN;
	if (activeSource_1_0_1$EN)
	  activeSource_1_0_1 <= `BSV_ASSIGNMENT_DELAY activeSource_1_0_1$D_IN;
	if (activeSource_1_1$EN)
	  activeSource_1_1 <= `BSV_ASSIGNMENT_DELAY activeSource_1_1$D_IN;
	if (activeSource_1_1_0$EN)
	  activeSource_1_1_0 <= `BSV_ASSIGNMENT_DELAY activeSource_1_1_0$D_IN;
	if (activeSource_1_1_1$EN)
	  activeSource_1_1_1 <= `BSV_ASSIGNMENT_DELAY activeSource_1_1_1$D_IN;
	if (activeSource_1_1_1_1$EN)
	  activeSource_1_1_1_1 <= `BSV_ASSIGNMENT_DELAY
	      activeSource_1_1_1_1$D_IN;
	if (activeSource_1_1_2$EN)
	  activeSource_1_1_2 <= `BSV_ASSIGNMENT_DELAY activeSource_1_1_2$D_IN;
	if (activeSource_1_2$EN)
	  activeSource_1_2 <= `BSV_ASSIGNMENT_DELAY activeSource_1_2$D_IN;
	if (arbiter_1_1_firstHot$EN)
	  arbiter_1_1_firstHot <= `BSV_ASSIGNMENT_DELAY
	      arbiter_1_1_firstHot$D_IN;
	if (arbiter_1_1_lastSelect$EN)
	  arbiter_1_1_lastSelect <= `BSV_ASSIGNMENT_DELAY
	      arbiter_1_1_lastSelect$D_IN;
	if (arbiter_1_1_lastSelect_1$EN)
	  arbiter_1_1_lastSelect_1 <= `BSV_ASSIGNMENT_DELAY
	      arbiter_1_1_lastSelect_1$D_IN;
	if (arbiter_1_firstHot$EN)
	  arbiter_1_firstHot <= `BSV_ASSIGNMENT_DELAY arbiter_1_firstHot$D_IN;
	if (arbiter_1_firstHot_1$EN)
	  arbiter_1_firstHot_1 <= `BSV_ASSIGNMENT_DELAY
	      arbiter_1_firstHot_1$D_IN;
	if (arbiter_1_lastSelect$EN)
	  arbiter_1_lastSelect <= `BSV_ASSIGNMENT_DELAY
	      arbiter_1_lastSelect$D_IN;
	if (arbiter_1_lastSelect_1$EN)
	  arbiter_1_lastSelect_1 <= `BSV_ASSIGNMENT_DELAY
	      arbiter_1_lastSelect_1$D_IN;
	if (arbiter_1_lastSelect_2$EN)
	  arbiter_1_lastSelect_2 <= `BSV_ASSIGNMENT_DELAY
	      arbiter_1_lastSelect_2$D_IN;
	if (arbiter_firstHot$EN)
	  arbiter_firstHot <= `BSV_ASSIGNMENT_DELAY arbiter_firstHot$D_IN;
	if (arbiter_lastSelect$EN)
	  arbiter_lastSelect <= `BSV_ASSIGNMENT_DELAY arbiter_lastSelect$D_IN;
	if (deburst_debug_flitReceived$EN)
	  deburst_debug_flitReceived <= `BSV_ASSIGNMENT_DELAY
	      deburst_debug_flitReceived$D_IN;
	if (deburst_debug_inSerial_lastWasRead$EN)
	  deburst_debug_inSerial_lastWasRead <= `BSV_ASSIGNMENT_DELAY
	      deburst_debug_inSerial_lastWasRead$D_IN;
	if (deburst_debug_inSerial_shim_arff_rv$EN)
	  deburst_debug_inSerial_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	      deburst_debug_inSerial_shim_arff_rv$D_IN;
	if (deburst_debug_inSerial_shim_awff_rv$EN)
	  deburst_debug_inSerial_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	      deburst_debug_inSerial_shim_awff_rv$D_IN;
	if (deburst_debug_inSerial_shim_bff_rv$EN)
	  deburst_debug_inSerial_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY
	      deburst_debug_inSerial_shim_bff_rv$D_IN;
	if (deburst_debug_inSerial_shim_rff_rv$EN)
	  deburst_debug_inSerial_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	      deburst_debug_inSerial_shim_rff_rv$D_IN;
	if (deburst_debug_inSerial_shim_wff_rv$EN)
	  deburst_debug_inSerial_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	      deburst_debug_inSerial_shim_wff_rv$D_IN;
	if (deburst_debug_inSerial_state$EN)
	  deburst_debug_inSerial_state <= `BSV_ASSIGNMENT_DELAY
	      deburst_debug_inSerial_state$D_IN;
	if (deburst_debug_readsSent$EN)
	  deburst_debug_readsSent <= `BSV_ASSIGNMENT_DELAY
	      deburst_debug_readsSent$D_IN;
	if (deburst_debug_writesSent$EN)
	  deburst_debug_writesSent <= `BSV_ASSIGNMENT_DELAY
	      deburst_debug_writesSent$D_IN;
	if (deburst_dm_flitReceived$EN)
	  deburst_dm_flitReceived <= `BSV_ASSIGNMENT_DELAY
	      deburst_dm_flitReceived$D_IN;
	if (deburst_dm_inSerial_lastWasRead$EN)
	  deburst_dm_inSerial_lastWasRead <= `BSV_ASSIGNMENT_DELAY
	      deburst_dm_inSerial_lastWasRead$D_IN;
	if (deburst_dm_inSerial_shim_arff_rv$EN)
	  deburst_dm_inSerial_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	      deburst_dm_inSerial_shim_arff_rv$D_IN;
	if (deburst_dm_inSerial_shim_awff_rv$EN)
	  deburst_dm_inSerial_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	      deburst_dm_inSerial_shim_awff_rv$D_IN;
	if (deburst_dm_inSerial_shim_bff_rv$EN)
	  deburst_dm_inSerial_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY
	      deburst_dm_inSerial_shim_bff_rv$D_IN;
	if (deburst_dm_inSerial_shim_rff_rv$EN)
	  deburst_dm_inSerial_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	      deburst_dm_inSerial_shim_rff_rv$D_IN;
	if (deburst_dm_inSerial_shim_wff_rv$EN)
	  deburst_dm_inSerial_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	      deburst_dm_inSerial_shim_wff_rv$D_IN;
	if (deburst_dm_inSerial_state$EN)
	  deburst_dm_inSerial_state <= `BSV_ASSIGNMENT_DELAY
	      deburst_dm_inSerial_state$D_IN;
	if (deburst_dm_readsSent$EN)
	  deburst_dm_readsSent <= `BSV_ASSIGNMENT_DELAY
	      deburst_dm_readsSent$D_IN;
	if (deburst_dm_writesSent$EN)
	  deburst_dm_writesSent <= `BSV_ASSIGNMENT_DELAY
	      deburst_dm_writesSent$D_IN;
	if (dm_master_nonsynth_awFF_rv$EN)
	  dm_master_nonsynth_awFF_rv <= `BSV_ASSIGNMENT_DELAY
	      dm_master_nonsynth_awFF_rv$D_IN;
	if (ifcs_0_1_noRoute_currentReq$EN)
	  ifcs_0_1_noRoute_currentReq <= `BSV_ASSIGNMENT_DELAY
	      ifcs_0_1_noRoute_currentReq$D_IN;
	if (ifcs_0_1_noRoute_flitCount$EN)
	  ifcs_0_1_noRoute_flitCount <= `BSV_ASSIGNMENT_DELAY
	      ifcs_0_1_noRoute_flitCount$D_IN;
	if (ifcs_0_1_state$EN)
	  ifcs_0_1_state <= `BSV_ASSIGNMENT_DELAY ifcs_0_1_state$D_IN;
	if (ifcs_0_1_state_1$EN)
	  ifcs_0_1_state_1 <= `BSV_ASSIGNMENT_DELAY ifcs_0_1_state_1$D_IN;
	if (ifcs_0_noRoute_inner_currentReq$EN)
	  ifcs_0_noRoute_inner_currentReq <= `BSV_ASSIGNMENT_DELAY
	      ifcs_0_noRoute_inner_currentReq$D_IN;
	if (ifcs_0_noRoute_inner_pendingReq$EN)
	  ifcs_0_noRoute_inner_pendingReq <= `BSV_ASSIGNMENT_DELAY
	      ifcs_0_noRoute_inner_pendingReq$D_IN;
	if (ifcs_0_state$EN)
	  ifcs_0_state <= `BSV_ASSIGNMENT_DELAY ifcs_0_state$D_IN;
	if (ifcs_0_state_1$EN)
	  ifcs_0_state_1 <= `BSV_ASSIGNMENT_DELAY ifcs_0_state_1$D_IN;
	if (ifcs_1_1_noRoute_currentReq$EN)
	  ifcs_1_1_noRoute_currentReq <= `BSV_ASSIGNMENT_DELAY
	      ifcs_1_1_noRoute_currentReq$D_IN;
	if (ifcs_1_1_noRoute_flitCount$EN)
	  ifcs_1_1_noRoute_flitCount <= `BSV_ASSIGNMENT_DELAY
	      ifcs_1_1_noRoute_flitCount$D_IN;
	if (ifcs_1_1_state$EN)
	  ifcs_1_1_state <= `BSV_ASSIGNMENT_DELAY ifcs_1_1_state$D_IN;
	if (ifcs_1_1_state_1$EN)
	  ifcs_1_1_state_1 <= `BSV_ASSIGNMENT_DELAY ifcs_1_1_state_1$D_IN;
	if (ifcs_1_noRoute_inner_currentReq$EN)
	  ifcs_1_noRoute_inner_currentReq <= `BSV_ASSIGNMENT_DELAY
	      ifcs_1_noRoute_inner_currentReq$D_IN;
	if (ifcs_1_noRoute_inner_pendingReq$EN)
	  ifcs_1_noRoute_inner_pendingReq <= `BSV_ASSIGNMENT_DELAY
	      ifcs_1_noRoute_inner_pendingReq$D_IN;
	if (ifcs_1_state$EN)
	  ifcs_1_state <= `BSV_ASSIGNMENT_DELAY ifcs_1_state$D_IN;
	if (ifcs_1_state_1$EN)
	  ifcs_1_state_1 <= `BSV_ASSIGNMENT_DELAY ifcs_1_state_1$D_IN;
	if (ifcs_2_1_state$EN)
	  ifcs_2_1_state <= `BSV_ASSIGNMENT_DELAY ifcs_2_1_state$D_IN;
	if (ifcs_2_state$EN)
	  ifcs_2_state <= `BSV_ASSIGNMENT_DELAY ifcs_2_state$D_IN;
	if (merged_0_flitLeft$EN)
	  merged_0_flitLeft <= `BSV_ASSIGNMENT_DELAY merged_0_flitLeft$D_IN;
	if (merged_1_flitLeft$EN)
	  merged_1_flitLeft <= `BSV_ASSIGNMENT_DELAY merged_1_flitLeft$D_IN;
	if (split_0_flitLeft$EN)
	  split_0_flitLeft <= `BSV_ASSIGNMENT_DELAY split_0_flitLeft$D_IN;
	if (split_1_flitLeft$EN)
	  split_1_flitLeft <= `BSV_ASSIGNMENT_DELAY split_1_flitLeft$D_IN;
	if (split_2_flitLeft$EN)
	  split_2_flitLeft <= `BSV_ASSIGNMENT_DELAY split_2_flitLeft$D_IN;
	if (state$EN) state <= `BSV_ASSIGNMENT_DELAY state$D_IN;
	if (state_1$EN) state_1 <= `BSV_ASSIGNMENT_DELAY state_1$D_IN;
	if (state_1_1$EN) state_1_1 <= `BSV_ASSIGNMENT_DELAY state_1_1$D_IN;
	if (state_1_1_1$EN)
	  state_1_1_1 <= `BSV_ASSIGNMENT_DELAY state_1_1_1$D_IN;
      end
    if (dm_master_nonsynth_currentRID$EN)
      dm_master_nonsynth_currentRID <= `BSV_ASSIGNMENT_DELAY
	  dm_master_nonsynth_currentRID$D_IN;
    if (dm_master_nonsynth_currentWID$EN)
      dm_master_nonsynth_currentWID <= `BSV_ASSIGNMENT_DELAY
	  dm_master_nonsynth_currentWID$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    activeSource_0 = 1'h0;
    activeSource_1 = 1'h0;
    activeSource_1_0 = 1'h0;
    activeSource_1_0_1 = 1'h0;
    activeSource_1_1 = 1'h0;
    activeSource_1_1_0 = 1'h0;
    activeSource_1_1_1 = 1'h0;
    activeSource_1_1_1_1 = 1'h0;
    activeSource_1_1_2 = 1'h0;
    activeSource_1_2 = 1'h0;
    arbiter_1_1_firstHot = 1'h0;
    arbiter_1_1_lastSelect = 1'h0;
    arbiter_1_1_lastSelect_1 = 1'h0;
    arbiter_1_firstHot = 1'h0;
    arbiter_1_firstHot_1 = 1'h0;
    arbiter_1_lastSelect = 1'h0;
    arbiter_1_lastSelect_1 = 1'h0;
    arbiter_1_lastSelect_2 = 1'h0;
    arbiter_firstHot = 1'h0;
    arbiter_lastSelect = 1'h0;
    deburst_debug_flitReceived = 8'hAA;
    deburst_debug_inSerial_lastWasRead = 1'h0;
    deburst_debug_inSerial_shim_arff_rv = 98'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    deburst_debug_inSerial_shim_awff_rv = 98'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    deburst_debug_inSerial_shim_bff_rv = 7'h2A;
    deburst_debug_inSerial_shim_rff_rv = 74'h2AAAAAAAAAAAAAAAAAA;
    deburst_debug_inSerial_shim_wff_rv = 76'hAAAAAAAAAAAAAAAAAAA;
    deburst_debug_inSerial_state = 2'h2;
    deburst_debug_readsSent = 8'hAA;
    deburst_debug_writesSent = 8'hAA;
    deburst_dm_flitReceived = 8'hAA;
    deburst_dm_inSerial_lastWasRead = 1'h0;
    deburst_dm_inSerial_shim_arff_rv = 98'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    deburst_dm_inSerial_shim_awff_rv = 98'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    deburst_dm_inSerial_shim_bff_rv = 7'h2A;
    deburst_dm_inSerial_shim_rff_rv = 74'h2AAAAAAAAAAAAAAAAAA;
    deburst_dm_inSerial_shim_wff_rv = 76'hAAAAAAAAAAAAAAAAAAA;
    deburst_dm_inSerial_state = 2'h2;
    deburst_dm_readsSent = 8'hAA;
    deburst_dm_writesSent = 8'hAA;
    dm_master_nonsynth_awFF_rv = 98'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    dm_master_nonsynth_currentRID = 4'hA;
    dm_master_nonsynth_currentWID = 4'hA;
    ifcs_0_1_noRoute_currentReq = 97'h0AAAAAAAAAAAAAAAAAAAAAAAA;
    ifcs_0_1_noRoute_flitCount = 9'h0AA;
    ifcs_0_1_state = 2'h2;
    ifcs_0_1_state_1 = 1'h0;
    ifcs_0_noRoute_inner_currentReq = 97'h0AAAAAAAAAAAAAAAAAAAAAAAA;
    ifcs_0_noRoute_inner_pendingReq = 1'h0;
    ifcs_0_state = 2'h2;
    ifcs_0_state_1 = 1'h0;
    ifcs_1_1_noRoute_currentReq = 97'h0AAAAAAAAAAAAAAAAAAAAAAAA;
    ifcs_1_1_noRoute_flitCount = 9'h0AA;
    ifcs_1_1_state = 2'h2;
    ifcs_1_1_state_1 = 1'h0;
    ifcs_1_noRoute_inner_currentReq = 97'h0AAAAAAAAAAAAAAAAAAAAAAAA;
    ifcs_1_noRoute_inner_pendingReq = 1'h0;
    ifcs_1_state = 2'h2;
    ifcs_1_state_1 = 1'h0;
    ifcs_2_1_state = 1'h0;
    ifcs_2_state = 1'h0;
    merged_0_flitLeft = 8'hAA;
    merged_1_flitLeft = 8'hAA;
    split_0_flitLeft = 8'hAA;
    split_1_flitLeft = 8'hAA;
    split_2_flitLeft = 8'hAA;
    state = 1'h0;
    state_1 = 1'h0;
    state_1_1 = 1'h0;
    state_1_1_1 = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate &&
	  !SEXT_arbiter_lastSelect_841_842_BIT_0_843_AND__ETC___d1849 &&
	  !SEXT_arbiter_firstHot_845_846_BIT_0_847_AND_re_ETC___d1853)
	$display("mkOneHotArbiter: next method should not be run with no pending request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate &&
	  !SEXT_arbiter_lastSelect_841_842_BIT_0_843_AND__ETC___d1849 &&
	  !SEXT_arbiter_firstHot_845_846_BIT_0_847_AND_re_ETC___d1853)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h58844 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the",
	       " requested path ",
	       v__h58844,
	       $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_0_innerRoute$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_0_innerRoute$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_0_innerRoute$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_0_innerRoute$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_0_innerRoute$D_OUT[2])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_0_innerRoute$D_OUT[2])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && ifcs_0_innerRoute$EMPTY_N &&
	  (ifcs_0_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && !ifcs_0_innerRoute$EMPTY_N)
	begin
	  v__h58233 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && !ifcs_0_innerRoute$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there",
		 " was no requested path.",
		 v__h58233,
		 $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && !ifcs_0_innerRoute$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h62853 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the",
	       " requested path ",
	       v__h62853,
	       $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_1_innerRoute$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_1_innerRoute$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_1_innerRoute$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_1_innerRoute$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_1_innerRoute$D_OUT[2])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_1_innerRoute$D_OUT[2])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && ifcs_1_innerRoute$EMPTY_N &&
	  (ifcs_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && !ifcs_1_innerRoute$EMPTY_N)
	begin
	  v__h62242 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && !ifcs_1_innerRoute$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there",
		 " was no requested path.",
		 v__h62242,
		 $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && !ifcs_1_innerRoute$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected && WILL_FIRE_RL_burst)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 113, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected] and\n  [RL_burst] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_source_selected || WILL_FIRE_RL_burst) &&
	  (WILL_FIRE_RL_source_selected_1 || WILL_FIRE_RL_burst_1))
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected, RL_burst]\n  and [RL_source_selected_1, RL_burst_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_1 && WILL_FIRE_RL_burst_1)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_1] and\n  [RL_burst_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_sink_selected && WILL_FIRE_RL_sink_selected_1)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 155, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_sink_selected] and\n  [RL_sink_selected_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_sink_selected || WILL_FIRE_RL_sink_selected_1) &&
	  WILL_FIRE_RL_sink_selected_2)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 155, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_sink_selected,\n  RL_sink_selected_1] and [RL_sink_selected_2] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate_2 &&
	  !SEXT_arbiter_1_lastSelect_2_477_478_BIT_0_479__ETC___d2485 &&
	  !SEXT_arbiter_1_firstHot_1_481_482_BIT_0_483_AN_ETC___d2489)
	$display("mkOneHotArbiter: next method should not be run with no pending request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate_2 &&
	  !SEXT_arbiter_1_lastSelect_2_477_478_BIT_0_479__ETC___d2485 &&
	  !SEXT_arbiter_1_firstHot_1_481_482_BIT_0_483_AN_ETC___d2489)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h92734 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the",
	       " requested path ",
	       v__h92734,
	       $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_0_1_innerRoute$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_0_1_innerRoute$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_0_1_innerRoute$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_0_1_innerRoute$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_0_1_innerRoute$D_OUT[2])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_0_1_innerRoute$D_OUT[2])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && ifcs_0_1_innerRoute$EMPTY_N &&
	  (ifcs_0_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && !ifcs_0_1_innerRoute$EMPTY_N)
	begin
	  v__h92123 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && !ifcs_0_1_innerRoute$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there",
		 " was no requested path.",
		 v__h92123,
		 $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && !ifcs_0_1_innerRoute$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h95627 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the",
	       " requested path ",
	       v__h95627,
	       $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_1_1_innerRoute$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_1_1_innerRoute$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_1_1_innerRoute$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_1_1_innerRoute$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_1_1_innerRoute$D_OUT[2])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_1_1_innerRoute$D_OUT[2])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && ifcs_1_1_innerRoute$EMPTY_N &&
	  (ifcs_1_1_innerRoute$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[1] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_innerRoute$D_OUT[2] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && !ifcs_1_1_innerRoute$EMPTY_N)
	begin
	  v__h95016 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && !ifcs_1_1_innerRoute$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there",
		 " was no requested path.",
		 v__h95016,
		 $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && !ifcs_1_1_innerRoute$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_5 && WILL_FIRE_RL_burst_5)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_5] and\n  [RL_burst_5] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_source_selected_5 || WILL_FIRE_RL_burst_5) &&
	  (WILL_FIRE_RL_source_selected_6 || WILL_FIRE_RL_burst_6))
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_5,\n  RL_burst_5] and [RL_source_selected_6, RL_burst_6] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_6 && WILL_FIRE_RL_burst_6)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_6] and\n  [RL_burst_6] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_sink_selected_5 && WILL_FIRE_RL_sink_selected_6)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 155, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_sink_selected_5] and\n  [RL_sink_selected_6] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_sink_selected_5 || WILL_FIRE_RL_sink_selected_6) &&
	  WILL_FIRE_RL_sink_selected_7)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 155, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_sink_selected_5,\n  RL_sink_selected_6] and [RL_sink_selected_7] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cpu_imem_ug_u_b_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cpu_imem_ug_u_r_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cpu_imem_ug_u_aw_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cpu_imem_ug_u_w_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheWrite)
	  begin
	    v__h7505 = $time;
	    #0;
	  end
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheWrite)
	  $write("<%0t, %0s> -- ", v__h7505, "tagcontroller");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheWrite)
	  $write("TagController write request ");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheWrite)
	  $write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheWrite)
	  $write("'h%h", tagController_shimSlave_awff$D_OUT[97:93]);
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheWrite)
	  $write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheWrite)
	  $write("'h%h", tagController_shimSlave_awff$D_OUT[92:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheWrite)
	  $write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheWrite)
	  $write("'h%h", tagController_shimSlave_awff$D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheWrite)
	  $write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheWrite)
	  $write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheWrite)
	  $write("'h%h", tagController_shimSlave_awff$D_OUT[20:18], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheWrite)
	  $write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheWrite &&
	    tagController_shimSlave_awff$D_OUT[17:16] == 2'd0)
	  $write("FIXED");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheWrite &&
	    tagController_shimSlave_awff$D_OUT[17:16] == 2'd1)
	  $write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheWrite &&
	    tagController_shimSlave_awff$D_OUT[17:16] == 2'd2)
	  $write("WRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheWrite &&
	    tagController_shimSlave_awff$D_OUT[17:16] != 2'd0 &&
	    tagController_shimSlave_awff$D_OUT[17:16] != 2'd1 &&
	    tagController_shimSlave_awff$D_OUT[17:16] != 2'd2)
	  $write("Res");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheWrite)
	  $write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheWrite &&
	    tagController_shimSlave_awff$D_OUT[15])
	  $write("EXCLUSIVE");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheWrite &&
	    !tagController_shimSlave_awff$D_OUT[15])
	  $write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheWrite)
	  $write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheWrite)
	  $write("'h%h", tagController_shimSlave_awff$D_OUT[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheWrite)
	  $write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheWrite)
	  $write("'h%h", tagController_shimSlave_awff$D_OUT[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheWrite)
	  $write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheWrite)
	  $write("'h%h", tagController_shimSlave_awff$D_OUT[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheWrite)
	  $write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheWrite)
	  $write("'h%h", tagController_shimSlave_awff$D_OUT[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheWrite)
	  $write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheWrite)
	  $write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheWrite) $write(" - ");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheWrite)
	  $write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheWrite)
	  $write("'h%h", tagController_shimSlave_wff$D_OUT[146:19]);
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheWrite)
	  $write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheWrite)
	  $write("'h%h", tagController_shimSlave_wff$D_OUT[18:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheWrite)
	  $write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheWrite &&
	    tagController_shimSlave_wff$D_OUT[2])
	  $write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheWrite &&
	    !tagController_shimSlave_wff$D_OUT[2])
	  $write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheWrite)
	  $write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheWrite)
	  $write("'h%h", tagController_shimSlave_wff$D_OUT[1:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheWrite) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheRead)
	  begin
	    v__h7819 = $time;
	    #0;
	  end
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheRead)
	  $write("<%0t, %0s> -- ", v__h7819, "tagcontroller");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheRead)
	  $write("TagController read request ");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheRead)
	  $write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheRead)
	  $write("'h%h", tagController_shimSlave_arff$D_OUT[97:93]);
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheRead)
	  $write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheRead)
	  $write("'h%h", tagController_shimSlave_arff$D_OUT[92:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheRead) $write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheRead)
	  $write("'h%h", tagController_shimSlave_arff$D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheRead)
	  $write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheRead)
	  $write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheRead)
	  $write("'h%h", tagController_shimSlave_arff$D_OUT[20:18], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheRead)
	  $write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheRead &&
	    tagController_shimSlave_arff$D_OUT[17:16] == 2'd0)
	  $write("FIXED");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheRead &&
	    tagController_shimSlave_arff$D_OUT[17:16] == 2'd1)
	  $write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheRead &&
	    tagController_shimSlave_arff$D_OUT[17:16] == 2'd2)
	  $write("WRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheRead &&
	    tagController_shimSlave_arff$D_OUT[17:16] != 2'd0 &&
	    tagController_shimSlave_arff$D_OUT[17:16] != 2'd1 &&
	    tagController_shimSlave_arff$D_OUT[17:16] != 2'd2)
	  $write("Res");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheRead)
	  $write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheRead &&
	    tagController_shimSlave_arff$D_OUT[15])
	  $write("EXCLUSIVE");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheRead &&
	    !tagController_shimSlave_arff$D_OUT[15])
	  $write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheRead)
	  $write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheRead)
	  $write("'h%h", tagController_shimSlave_arff$D_OUT[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheRead)
	  $write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheRead)
	  $write("'h%h", tagController_shimSlave_arff$D_OUT[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheRead) $write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheRead)
	  $write("'h%h", tagController_shimSlave_arff$D_OUT[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheRead)
	  $write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheRead)
	  $write("'h%h", tagController_shimSlave_arff$D_OUT[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheRead)
	  $write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheRead)
	  $write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheRead) $write("\n");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheResponse)
	  begin
	    v__h8534 = $time;
	    #0;
	  end
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheResponse)
	  $write("<%0t, %0s> -- ", v__h8534, "tagcontroller");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheResponse)
	  $write("TagController response ");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheResponse &&
	    tagController_tagCon$cache_response_get[133:132] == 2'd0)
	  $write("tagged Read ");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheResponse &&
	    tagController_tagCon$cache_response_get[133:132] != 2'd0)
	  $write("tagged Write ");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheResponse &&
	    tagController_tagCon$cache_response_get[133:132] == 2'd0)
	  $write("AXI4_RFlit { ", "rid: ");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheResponse &&
	    tagController_tagCon$cache_response_get[133:132] != 2'd0)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheResponse &&
	    tagController_tagCon$cache_response_get[133:132] == 2'd0)
	  $write("'h%h", tagController_tagCon$cache_response_get[140:136]);
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheResponse &&
	    tagController_tagCon$cache_response_get[133:132] != 2'd0)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheResponse &&
	    tagController_tagCon$cache_response_get[133:132] == 2'd0)
	  $write(", ", "rdata: ");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheResponse &&
	    tagController_tagCon$cache_response_get[133:132] != 2'd0)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheResponse &&
	    tagController_tagCon$cache_response_get[133:132] == 2'd0)
	  $write("'h%h", tagController_tagCon$cache_response_get[127:0]);
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheResponse &&
	    tagController_tagCon$cache_response_get[133:132] != 2'd0)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheResponse &&
	    tagController_tagCon$cache_response_get[133:132] == 2'd0)
	  $write(", ", "rresp: ");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheResponse &&
	    tagController_tagCon$cache_response_get[133:132] != 2'd0)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheResponse &&
	    tagController_tagCon$cache_response_get[133:132] == 2'd0)
	  $write("OKAY");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheResponse &&
	    tagController_tagCon$cache_response_get[133:132] != 2'd0)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheResponse &&
	    tagController_tagCon$cache_response_get[133:132] == 2'd0)
	  $write(", ", "rlast: ");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheResponse &&
	    tagController_tagCon$cache_response_get[133:132] != 2'd0)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheResponse &&
	    tagController_tagCon$cache_response_get[133:132] == 2'd0 &&
	    tagController_tagCon$cache_response_get[131])
	  $write("True");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheResponse &&
	    tagController_tagCon$cache_response_get[133:132] == 2'd0 &&
	    !tagController_tagCon$cache_response_get[131])
	  $write("False");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheResponse &&
	    tagController_tagCon$cache_response_get[133:132] != 2'd0)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheResponse &&
	    tagController_tagCon$cache_response_get[133:132] == 2'd0)
	  $write(", ", "ruser: ");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheResponse &&
	    tagController_tagCon$cache_response_get[133:132] != 2'd0)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheResponse &&
	    tagController_tagCon$cache_response_get[133:132] == 2'd0)
	  $write("'h%h",
		 tagController_tagCon$cache_response_get[129:128],
		 " }");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheResponse &&
	    tagController_tagCon$cache_response_get[133:132] != 2'd0)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheResponse &&
	    tagController_tagCon$cache_response_get[133:132] == 2'd0)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheResponse &&
	    tagController_tagCon$cache_response_get[133:132] != 2'd0)
	  $write("AXI4_BFlit { ", "bid: ");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheResponse &&
	    tagController_tagCon$cache_response_get[133:132] == 2'd0)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheResponse &&
	    tagController_tagCon$cache_response_get[133:132] != 2'd0)
	  $write("'h%h",
		 IF_tagController_tagCon_cache_response_get_16__ETC___d228);
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheResponse &&
	    tagController_tagCon$cache_response_get[133:132] == 2'd0)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheResponse &&
	    tagController_tagCon$cache_response_get[133:132] != 2'd0)
	  $write(", ", "bresp: ");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheResponse &&
	    tagController_tagCon$cache_response_get[133:132] == 2'd0)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheResponse &&
	    tagController_tagCon$cache_response_get[133:132] != 2'd0)
	  $write("OKAY");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheResponse &&
	    tagController_tagCon$cache_response_get[133:132] == 2'd0)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheResponse &&
	    tagController_tagCon$cache_response_get[133:132] != 2'd0)
	  $write(", ", "buser: ");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheResponse &&
	    tagController_tagCon$cache_response_get[133:132] == 2'd0)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheResponse &&
	    tagController_tagCon$cache_response_get[133:132] != 2'd0)
	  $write("'h%h", 1'h0, " }");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passCacheResponse) $write("\n");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get)
	  begin
	    v__h11281 = $time;
	    #0;
	  end
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get)
	  $write("<%0t, %0s> -- ", v__h11281, "tagcontroller");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get)
	  $write("Memory request ");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write("tagged Write ");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write("tagged Read ");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write("AXI4_ARFlit { ", "arid: ");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write("'h%h", x_arid__h11142);
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write(", ", "araddr: ");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write("'h%h", x_araddr__h11143);
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write(", ", "arlen: ");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write("'h%h", x_arlen__h11144);
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write(", ", "arsize: ");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write("AXI4_Size { ", "val: ");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write("'h%h", x_arsize_val__h11189, " }");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write(", ", "arburst: ");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write("INCR");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write(", ", "arlock: ");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write("NORMAL");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write(", ", "arcache: ");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write("'h%h", x__h11207);
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write(", ", "arprot: ");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write("'h%h", 3'd0);
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write(", ", "arqos: ");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write("'h%h", 4'd0);
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write(", ", "arregion: ");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write("'h%h", 4'd0);
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write(", ", "aruser: ");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write("'h%h", 1'h0, " }");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write("WriteReqFlit { ", "aw: ");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write("AXI4_AWFlit { ", "awid: ");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write("'h%h", tagController_tagCon$memory_request_get[165:160]);
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write(", ", "awaddr: ");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write("'h%h", aw_awaddr__h8770);
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write(", ", "awlen: ");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write("'h%h", 8'd0);
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write(", ", "awsize: ");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write("AXI4_Size { ", "val: ");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write("'h%h", 3'd4, " }");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write(", ", "awburst: ");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write("INCR");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write(", ", "awlock: ");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write("NORMAL");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write(", ", "awcache: ");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write("'h%h", x__h8842);
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write(", ", "awprot: ");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write("'h%h", 3'd0);
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write(", ", "awqos: ");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write("'h%h", 4'd0);
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write(", ", "awregion: ");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write("'h%h", 4'd0);
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write(", ", "awuser: ");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write("'h%h", 1'h0, " }");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write(", ", "w: ");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write("AXI4_WFlit { ", "wdata: ");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write("'h%h", tagController_tagCon$memory_request_get[127:0]);
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write(", ", "wstrb: ");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write("'h%h", tagController_tagCon$memory_request_get[153:138]);
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write(", ", "wlast: ");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1 &&
	    tagController_tagCon$memory_request_get[156])
	  $write("True");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1 &&
	    !tagController_tagCon$memory_request_get[156])
	  $write("False");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write(", ", "wuser: ");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write("'h%h", 1'h0, " }");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] == 2'd1)
	  $write(" }");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get &&
	    tagController_tagCon$memory_request_get[158:157] != 2'd1)
	  $write("");
    if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
      if (RST_N != `BSV_RESET_VALUE)
	if (tagController_tagCon$RDY_memory_request_get) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passMemoryResponseWrite)
	  begin
	    v__h11785 = $time;
	    #0;
	  end
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passMemoryResponseWrite)
	  $write("<%0t, %0s> -- ", v__h11785, "tagcontroller");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passMemoryResponseWrite)
	  $write("Memory write response ");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passMemoryResponseWrite)
	  $write("AXI4_BFlit { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passMemoryResponseWrite)
	  $write("'h%h", tagController_shimMaster_bff$D_OUT[7:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passMemoryResponseWrite)
	  $write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passMemoryResponseWrite &&
	    tagController_shimMaster_bff$D_OUT[1:0] == 2'd0)
	  $write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passMemoryResponseWrite &&
	    tagController_shimMaster_bff$D_OUT[1:0] == 2'd1)
	  $write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passMemoryResponseWrite &&
	    tagController_shimMaster_bff$D_OUT[1:0] == 2'd2)
	  $write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passMemoryResponseWrite &&
	    tagController_shimMaster_bff$D_OUT[1:0] != 2'd0 &&
	    tagController_shimMaster_bff$D_OUT[1:0] != 2'd1 &&
	    tagController_shimMaster_bff$D_OUT[1:0] != 2'd2)
	  $write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passMemoryResponseWrite)
	  $write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passMemoryResponseWrite)
	  $write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passMemoryResponseWrite) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passMemoryResponseRead)
	  begin
	    v__h12235 = $time;
	    #0;
	  end
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passMemoryResponseRead)
	  $write("<%0t, %0s> -- ", v__h12235, "tagcontroller");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passMemoryResponseRead)
	  $write("Memory read response ");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passMemoryResponseRead)
	  $write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passMemoryResponseRead)
	  $write("'h%h", tagController_shimMaster_rff$D_OUT[136:131]);
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passMemoryResponseRead)
	  $write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passMemoryResponseRead)
	  $write("'h%h", tagController_shimMaster_rff$D_OUT[130:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passMemoryResponseRead)
	  $write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passMemoryResponseRead &&
	    tagController_shimMaster_rff$D_OUT[2:1] == 2'd0)
	  $write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passMemoryResponseRead &&
	    tagController_shimMaster_rff$D_OUT[2:1] == 2'd1)
	  $write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passMemoryResponseRead &&
	    tagController_shimMaster_rff$D_OUT[2:1] == 2'd2)
	  $write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passMemoryResponseRead &&
	    tagController_shimMaster_rff$D_OUT[2:1] != 2'd0 &&
	    tagController_shimMaster_rff$D_OUT[2:1] != 2'd1 &&
	    tagController_shimMaster_rff$D_OUT[2:1] != 2'd2)
	  $write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passMemoryResponseRead)
	  $write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passMemoryResponseRead &&
	    tagController_shimMaster_rff$D_OUT[0])
	  $write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passMemoryResponseRead &&
	    !tagController_shimMaster_rff$D_OUT[0])
	  $write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passMemoryResponseRead)
	  $write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passMemoryResponseRead)
	  $write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (tagController_newRst$OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_tagController_passMemoryResponseRead) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_deburst_debug_inSerial_takeR &&
	  WILL_FIRE_RL_deburst_debug_inSerial_takeB)
	$display("Error: \"../libs/BlueStuff/AXI/AXI4_Utils.bsv\", line 302, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_deburst_debug_inSerial_takeR]\n  and [RL_deburst_debug_inSerial_takeB] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_deburst_dm_inSerial_takeR &&
	  WILL_FIRE_RL_deburst_dm_inSerial_takeB)
	$display("Error: \"../libs/BlueStuff/AXI/AXI4_Utils.bsv\", line 302, column 28: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_deburst_dm_inSerial_takeR]\n  and [RL_deburst_dm_inSerial_takeB] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putFirst && split_0_doPut$wget[245])
	$display("Expecting FirstFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putFirst && split_0_doPut$wget[245])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putOther && split_0_doPut$wget[245] &&
	  split_0_doPut$wget[2] &&
	  split_0_flitLeft > 8'd1)
	$display("Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putOther && split_0_doPut$wget[245] &&
	  split_0_doPut$wget[2] &&
	  split_0_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putOther && split_0_doPut$wget[245] &&
	  !split_0_doPut$wget[2] &&
	  split_0_flitLeft == 8'd1)
	$display("Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putOther && split_0_doPut$wget[245] &&
	  !split_0_doPut$wget[2] &&
	  split_0_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putOther && !split_0_doPut$wget[245])
	$display("Expecting OtherFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_0_putOther && !split_0_doPut$wget[245])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putFirst && split_1_doPut$wget[245])
	$display("Expecting FirstFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putFirst && split_1_doPut$wget[245])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putOther && split_1_doPut$wget[245] &&
	  split_1_doPut$wget[2] &&
	  split_1_flitLeft > 8'd1)
	$display("Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putOther && split_1_doPut$wget[245] &&
	  split_1_doPut$wget[2] &&
	  split_1_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putOther && split_1_doPut$wget[245] &&
	  !split_1_doPut$wget[2] &&
	  split_1_flitLeft == 8'd1)
	$display("Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putOther && split_1_doPut$wget[245] &&
	  !split_1_doPut$wget[2] &&
	  split_1_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putOther && !split_1_doPut$wget[245])
	$display("Expecting OtherFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_1_putOther && !split_1_doPut$wget[245])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putFirst && split_2_doPut$wget[245])
	$display("Expecting FirstFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putFirst && split_2_doPut$wget[245])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putOther && split_2_doPut$wget[245] &&
	  split_2_doPut$wget[2] &&
	  split_2_flitLeft > 8'd1)
	$display("Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putOther && split_2_doPut$wget[245] &&
	  split_2_doPut$wget[2] &&
	  split_2_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putOther && split_2_doPut$wget[245] &&
	  !split_2_doPut$wget[2] &&
	  split_2_flitLeft == 8'd1)
	$display("Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putOther && split_2_doPut$wget[245] &&
	  !split_2_doPut$wget[2] &&
	  split_2_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putOther && !split_2_doPut$wget[245])
	$display("Expecting OtherFlit of merged write");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_split_2_putOther && !split_2_doPut$wget[245])
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_nonRoutableFlit &&
	  WILL_FIRE_RL_ifcs_1_drainFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 216, column 54: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_nonRoutableFlit] and\n  [RL_ifcs_1_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate_1 &&
	  !SEXT_arbiter_1_lastSelect_031_032_BIT_0_033_AN_ETC___d2044 &&
	  !SEXT_arbiter_1_lastSelect_1_035_036_BIT_0_037__ETC___d2050 &&
	  !SEXT_arbiter_1_firstHot_040_041_BIT_0_042_AND__ETC___d2056)
	$display("mkOneHotArbiter: next method should not be run with no pending request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate_1 &&
	  !SEXT_arbiter_1_lastSelect_031_032_BIT_0_033_AN_ETC___d2044 &&
	  !SEXT_arbiter_1_lastSelect_1_035_036_BIT_0_037__ETC___d2050 &&
	  !SEXT_arbiter_1_firstHot_040_041_BIT_0_042_AND__ETC___d2056)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h73548 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the",
	       " requested path ",
	       v__h73548,
	       $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_0_routeBack$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_0_routeBack$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_0_routeBack$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_0_routeBack$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && ifcs_0_routeBack$EMPTY_N &&
	  (ifcs_0_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && !ifcs_0_routeBack$EMPTY_N)
	begin
	  v__h73167 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && !ifcs_0_routeBack$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there",
		 " was no requested path.",
		 v__h73167,
		 $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && !ifcs_0_routeBack$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h75618 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the",
	       " requested path ",
	       v__h75618,
	       $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_1_routeBack$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_1_routeBack$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_1_routeBack$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_1_routeBack$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && ifcs_1_routeBack$EMPTY_N &&
	  (ifcs_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && !ifcs_1_routeBack$EMPTY_N)
	begin
	  v__h75237 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && !ifcs_1_routeBack$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there",
		 " was no requested path.",
		 v__h75237,
		 $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && !ifcs_1_routeBack$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_3 && WILL_FIRE_RL_burst_3)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_3] and\n  [RL_burst_3] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h77517 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the",
	       " requested path ",
	       v__h77517,
	       $signed(32'd2));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_2_routeBack$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_2_routeBack$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_2_routeBack$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_2_routeBack$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && ifcs_2_routeBack$EMPTY_N &&
	  (ifcs_2_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && !ifcs_2_routeBack$EMPTY_N)
	begin
	  v__h77136 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && !ifcs_2_routeBack$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there",
		 " was no requested path.",
		 v__h77136,
		 $signed(32'd2));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && !ifcs_2_routeBack$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_2 && WILL_FIRE_RL_burst_2)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_2] and\n  [RL_burst_2] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_source_selected_2 || WILL_FIRE_RL_burst_2) &&
	  (WILL_FIRE_RL_source_selected_3 || WILL_FIRE_RL_burst_3))
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_2,\n  RL_burst_2] and [RL_source_selected_3, RL_burst_3] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_source_selected_2 || WILL_FIRE_RL_burst_2 ||
	   WILL_FIRE_RL_source_selected_3 ||
	   WILL_FIRE_RL_burst_3) &&
	  (WILL_FIRE_RL_source_selected_4 || WILL_FIRE_RL_burst_4))
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_2,\n  RL_burst_2, RL_source_selected_3, RL_burst_3] and [RL_source_selected_4,\n  RL_burst_4] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_4 && WILL_FIRE_RL_burst_4)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_4] and\n  [RL_burst_4] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_sink_selected_3 && WILL_FIRE_RL_sink_selected_4)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 155, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_sink_selected_3] and\n  [RL_sink_selected_4] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_firstFlit &&
	  WILL_FIRE_RL_ifcs_1_nonRoutableGenRsp)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 217, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_firstFlit] and\n  [RL_ifcs_1_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_firstFlit && WILL_FIRE_RL_ifcs_1_drainFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 216, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_firstFlit] and\n  [RL_ifcs_1_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_firstFlit &&
	  WILL_FIRE_RL_ifcs_1_nonRoutableFlit)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 216, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_firstFlit] and\n  [RL_ifcs_1_nonRoutableFlit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_firstFlit && WILL_FIRE_RL_ifcs_1_followFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 216, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_firstFlit] and\n  [RL_ifcs_1_followFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_followFlits &&
	  WILL_FIRE_RL_ifcs_1_nonRoutableGenRsp)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 217, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_followFlits] and\n  [RL_ifcs_1_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_followFlits && WILL_FIRE_RL_ifcs_1_drainFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 216, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_followFlits] and\n  [RL_ifcs_1_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_followFlits &&
	  WILL_FIRE_RL_ifcs_1_nonRoutableFlit)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 216, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_followFlits] and\n  [RL_ifcs_1_nonRoutableFlit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_drainFlits &&
	  WILL_FIRE_RL_ifcs_1_nonRoutableGenRsp)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 217, column 73: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_drainFlits] and\n  [RL_ifcs_1_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_1_genOther && deburst_dm_outShim_wff$D_OUT[2] &&
	  merged_1_flitLeft > 8'd1)
	$display("Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_1_genOther && deburst_dm_outShim_wff$D_OUT[2] &&
	  merged_1_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_1_genOther &&
	  !deburst_dm_outShim_wff$D_OUT[2] &&
	  merged_1_flitLeft == 8'd1)
	$display("Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_1_genOther &&
	  !deburst_dm_outShim_wff$D_OUT[2] &&
	  merged_1_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_firstFlit_1 &&
	  WILL_FIRE_RL_ifcs_0_followFlits_1)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 284, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_firstFlit_1] and\n  [RL_ifcs_0_followFlits_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_firstFlit_1 &&
	  WILL_FIRE_RL_ifcs_1_followFlits_1)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 284, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_firstFlit_1] and\n  [RL_ifcs_1_followFlits_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_1_nonRoutableFlit &&
	  WILL_FIRE_RL_ifcs_1_1_drainFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 216, column 54: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_1_nonRoutableFlit] and\n  [RL_ifcs_1_1_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate_3 &&
	  !SEXT_arbiter_1_1_lastSelect_657_658_BIT_0_659__ETC___d2670 &&
	  !SEXT_arbiter_1_1_lastSelect_1_661_662_BIT_0_66_ETC___d2676 &&
	  !SEXT_arbiter_1_1_firstHot_666_667_BIT_0_668_AN_ETC___d2682)
	$display("mkOneHotArbiter: next method should not be run with no pending request");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_arbitrate_3 &&
	  !SEXT_arbiter_1_1_lastSelect_657_658_BIT_0_659__ETC___d2670 &&
	  !SEXT_arbiter_1_1_lastSelect_1_661_662_BIT_0_66_ETC___d2676 &&
	  !SEXT_arbiter_1_1_firstHot_666_667_BIT_0_668_AN_ETC___d2682)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h104907 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the",
	       " requested path ",
	       v__h104907,
	       $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_0_1_routeBack$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_0_1_routeBack$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_0_1_routeBack$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_0_1_routeBack$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && ifcs_0_1_routeBack$EMPTY_N &&
	  (ifcs_0_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_0_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && !ifcs_0_1_routeBack$EMPTY_N)
	begin
	  v__h104526 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && !ifcs_0_1_routeBack$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there",
		 " was no requested path.",
		 v__h104526,
		 $signed(32'd0));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && !ifcs_0_1_routeBack$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h107398 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the",
	       " requested path ",
	       v__h107398,
	       $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_1_1_routeBack$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_1_1_routeBack$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_1_1_routeBack$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_1_1_routeBack$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && ifcs_1_1_routeBack$EMPTY_N &&
	  (ifcs_1_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_1_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && !ifcs_1_1_routeBack$EMPTY_N)
	begin
	  v__h107017 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && !ifcs_1_1_routeBack$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there",
		 " was no requested path.",
		 v__h107017,
		 $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && !ifcs_1_1_routeBack$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_8 && WILL_FIRE_RL_burst_8)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_8] and\n  [RL_burst_8] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	begin
	  v__h109708 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("%0t -- mkOneWayBus error: input %0d was selected but the",
	       " requested path ",
	       v__h109708,
	       $signed(32'd2));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("<V ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_2_1_routeBack$D_OUT[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_2_1_routeBack$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  ifcs_2_1_routeBack$D_OUT[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1 &&
	  !ifcs_2_1_routeBack$D_OUT[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" >");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$write(" is not a valid one-hot path.", "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && ifcs_2_1_routeBack$EMPTY_N &&
	  (ifcs_2_1_routeBack$D_OUT[0] ? 2'd1 : 2'd0) +
	  (ifcs_2_1_routeBack$D_OUT[1] ? 2'd1 : 2'd0) !=
	  2'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && !ifcs_2_1_routeBack$EMPTY_N)
	begin
	  v__h109327 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && !ifcs_2_1_routeBack$EMPTY_N)
	$display("%0t -- mkOneWayBus error: input %0d was selected but there",
		 " was no requested path.",
		 v__h109327,
		 $signed(32'd2));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && !ifcs_2_1_routeBack$EMPTY_N)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_7 && WILL_FIRE_RL_burst_7)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_7] and\n  [RL_burst_7] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_source_selected_7 || WILL_FIRE_RL_burst_7) &&
	  (WILL_FIRE_RL_source_selected_8 || WILL_FIRE_RL_burst_8))
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_7,\n  RL_burst_7] and [RL_source_selected_8, RL_burst_8] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((WILL_FIRE_RL_source_selected_7 || WILL_FIRE_RL_burst_7 ||
	   WILL_FIRE_RL_source_selected_8 ||
	   WILL_FIRE_RL_burst_8) &&
	  (WILL_FIRE_RL_source_selected_9 || WILL_FIRE_RL_burst_9))
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_7,\n  RL_burst_7, RL_source_selected_8, RL_burst_8] and [RL_source_selected_9,\n  RL_burst_9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_source_selected_9 && WILL_FIRE_RL_burst_9)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 114, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_source_selected_9] and\n  [RL_burst_9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_sink_selected_8 && WILL_FIRE_RL_sink_selected_9)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 155, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_sink_selected_8] and\n  [RL_sink_selected_9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cpu_hart0_reset_from_dm_start)
	begin
	  v__h14705 = $stime;
	  #0;
	end
    v__h14699 = v__h14705 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cpu_hart0_reset_from_dm_start)
	$display("%0d: Core.rl_cpu_hart0_reset_from_dm_start", v__h14699);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cpu_hart0_reset_complete)
	begin
	  v__h15071 = $stime;
	  #0;
	end
    v__h15065 = v__h15071 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cpu_hart0_reset_complete)
	$display("%0d: Core.rl_cpu_hart0_reset_complete", v__h15065);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cpu_imem_ug_u_ar_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_firstFlit &&
	  WILL_FIRE_RL_ifcs_0_nonRoutableGenRsp)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 217, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_firstFlit] and\n  [RL_ifcs_0_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_firstFlit && WILL_FIRE_RL_ifcs_0_drainFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 216, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_firstFlit] and\n  [RL_ifcs_0_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_firstFlit &&
	  WILL_FIRE_RL_ifcs_0_nonRoutableFlit)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 216, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_firstFlit] and\n  [RL_ifcs_0_nonRoutableFlit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_firstFlit && WILL_FIRE_RL_ifcs_0_followFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 216, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_firstFlit] and\n  [RL_ifcs_0_followFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_followFlits &&
	  WILL_FIRE_RL_ifcs_0_nonRoutableGenRsp)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 217, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_followFlits] and\n  [RL_ifcs_0_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_followFlits && WILL_FIRE_RL_ifcs_0_drainFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 216, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_followFlits] and\n  [RL_ifcs_0_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_followFlits &&
	  WILL_FIRE_RL_ifcs_0_nonRoutableFlit)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 216, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_followFlits] and\n  [RL_ifcs_0_nonRoutableFlit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_nonRoutableFlit &&
	  WILL_FIRE_RL_ifcs_0_drainFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 216, column 54: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_nonRoutableFlit] and\n  [RL_ifcs_0_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_drainFlits &&
	  WILL_FIRE_RL_ifcs_0_nonRoutableGenRsp)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 217, column 73: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_drainFlits] and\n  [RL_ifcs_0_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_0_genOther && cpu$dmem_master_wlast &&
	  merged_0_flitLeft > 8'd1)
	$display("Expecting more write data flits");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_0_genOther && cpu$dmem_master_wlast &&
	  merged_0_flitLeft > 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_0_genOther && !cpu$dmem_master_wlast &&
	  merged_0_flitLeft == 8'd1)
	$display("Expecting last write data flit");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_merged_0_genOther && !cpu$dmem_master_wlast &&
	  merged_0_flitLeft == 8'd1)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_2_firstFlit && WILL_FIRE_RL_ifcs_2_followFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 283, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_2_firstFlit] and\n  [RL_ifcs_2_followFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_1_firstFlit &&
	  WILL_FIRE_RL_ifcs_0_1_nonRoutableGenRsp)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 217, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_1_firstFlit] and\n  [RL_ifcs_0_1_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_1_firstFlit && WILL_FIRE_RL_ifcs_0_1_drainFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 216, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_1_firstFlit] and\n  [RL_ifcs_0_1_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_1_firstFlit &&
	  WILL_FIRE_RL_ifcs_0_1_nonRoutableFlit)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 216, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_1_firstFlit] and\n  [RL_ifcs_0_1_nonRoutableFlit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_1_firstFlit &&
	  WILL_FIRE_RL_ifcs_0_1_followFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 216, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_1_firstFlit] and\n  [RL_ifcs_0_1_followFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_1_followFlits &&
	  WILL_FIRE_RL_ifcs_0_1_nonRoutableGenRsp)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 217, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_1_followFlits] and\n  [RL_ifcs_0_1_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_1_followFlits &&
	  WILL_FIRE_RL_ifcs_0_1_drainFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 216, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_1_followFlits] and\n  [RL_ifcs_0_1_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_1_followFlits &&
	  WILL_FIRE_RL_ifcs_0_1_nonRoutableFlit)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 216, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_1_followFlits] and\n  [RL_ifcs_0_1_nonRoutableFlit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_1_nonRoutableFlit &&
	  WILL_FIRE_RL_ifcs_0_1_drainFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 216, column 54: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_1_nonRoutableFlit] and\n  [RL_ifcs_0_1_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_1_drainFlits &&
	  WILL_FIRE_RL_ifcs_0_1_nonRoutableGenRsp)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 217, column 73: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_1_drainFlits] and\n  [RL_ifcs_0_1_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_1_firstFlit &&
	  WILL_FIRE_RL_ifcs_1_1_nonRoutableGenRsp)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 217, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_1_firstFlit] and\n  [RL_ifcs_1_1_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_1_firstFlit && WILL_FIRE_RL_ifcs_1_1_drainFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 216, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_1_firstFlit] and\n  [RL_ifcs_1_1_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_1_firstFlit &&
	  WILL_FIRE_RL_ifcs_1_1_nonRoutableFlit)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 216, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_1_firstFlit] and\n  [RL_ifcs_1_1_nonRoutableFlit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_1_firstFlit &&
	  WILL_FIRE_RL_ifcs_1_1_followFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 216, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_1_firstFlit] and\n  [RL_ifcs_1_1_followFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_1_followFlits &&
	  WILL_FIRE_RL_ifcs_1_1_nonRoutableGenRsp)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 217, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_1_followFlits] and\n  [RL_ifcs_1_1_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_1_followFlits &&
	  WILL_FIRE_RL_ifcs_1_1_drainFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 216, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_1_followFlits] and\n  [RL_ifcs_1_1_drainFlits] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_1_followFlits &&
	  WILL_FIRE_RL_ifcs_1_1_nonRoutableFlit)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 216, column 41: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_1_followFlits] and\n  [RL_ifcs_1_1_nonRoutableFlit] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_1_drainFlits &&
	  WILL_FIRE_RL_ifcs_1_1_nonRoutableGenRsp)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 217, column 73: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_1_drainFlits] and\n  [RL_ifcs_1_1_nonRoutableGenRsp] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_0_1_firstFlit_1 &&
	  WILL_FIRE_RL_ifcs_0_1_followFlits_1)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 284, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_0_1_firstFlit_1] and\n  [RL_ifcs_0_1_followFlits_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start)
	begin
	  v__h14528 = $stime;
	  #0;
	end
    v__h14522 = v__h14528 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cpu_hart0_reset_from_soc_start)
	$display("%0d: Core.rl_cpu_hart0_reset_from_soc_start", v__h14522);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_1_1_firstFlit_1 &&
	  WILL_FIRE_RL_ifcs_1_1_followFlits_1)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 284, column 10: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_1_1_firstFlit_1] and\n  [RL_ifcs_1_1_followFlits_1] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifcs_2_1_firstFlit &&
	  WILL_FIRE_RL_ifcs_2_1_followFlits)
	$display("Error: \"../libs/BlueStuff/Interconnect.bsv\", line 283, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_ifcs_2_1_firstFlit] and\n  [RL_ifcs_2_1_followFlits] ) fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkCore

