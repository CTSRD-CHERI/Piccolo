//
// Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
//
// On Tue Jun 18 14:47:01 BST 2019
//
//
// Ports:
// Name                         I/O  size props
// RDY_set_verbosity              O     1 const
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1
// valid                          O     1
// addr                           O    32 reg
// word64                         O    64
// st_amo_val                     O    64
// exc                            O     1
// exc_code                       O     4 reg
// RDY_server_flush_request_put   O     1 reg
// RDY_server_flush_response_get  O     1
// RDY_tlb_flush                  O     1 const
// mem_master_awid                O     5
// mem_master_awaddr              O    64
// mem_master_awlen               O     8
// mem_master_awsize              O     3
// mem_master_awburst             O     2
// mem_master_awlock              O     1
// mem_master_awcache             O     4
// mem_master_awprot              O     3
// mem_master_awqos               O     4
// mem_master_awregion            O     4
// mem_master_awvalid             O     1
// mem_master_wdata               O    64
// mem_master_wstrb               O     8
// mem_master_wlast               O     1
// mem_master_wvalid              O     1
// mem_master_bready              O     1
// mem_master_arid                O     5
// mem_master_araddr              O    64
// mem_master_arlen               O     8
// mem_master_arsize              O     3
// mem_master_arburst             O     2
// mem_master_arlock              O     1
// mem_master_arcache             O     4
// mem_master_arprot              O     3
// mem_master_arqos               O     4
// mem_master_arregion            O     4
// mem_master_arvalid             O     1
// mem_master_rready              O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_verbosity_verbosity        I     4 reg
// req_op                         I     2
// req_f3                         I     3
// req_amo_funct7                 I     7 reg
// req_addr                       I    32
// req_st_value                   I    64
// req_priv                       I     2 unused
// req_sstatus_SUM                I     1 unused
// req_mstatus_MXR                I     1 unused
// req_satp                       I    32 unused
// mem_master_awready             I     1
// mem_master_wready              I     1
// mem_master_bid                 I     5
// mem_master_bresp               I     2
// mem_master_arready             I     1
// mem_master_rid                 I     5
// mem_master_rdata               I    64
// mem_master_rresp               I     2
// mem_master_rlast               I     1
// EN_set_verbosity               I     1
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_req                         I     1
// EN_server_flush_request_put    I     1
// EN_server_flush_response_get   I     1
// EN_tlb_flush                   I     1 unused
// mem_master_bvalid              I     1
// mem_master_rvalid              I     1
//
// Combinational paths from inputs to outputs:
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_rvalid) -> valid
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_rvalid) -> word64
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_rvalid) -> mem_master_awid
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_rvalid) -> mem_master_awaddr
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_rvalid) -> mem_master_awlen
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_rvalid) -> mem_master_awsize
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_rvalid) -> mem_master_awburst
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_rvalid) -> mem_master_awlock
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_rvalid) -> mem_master_awcache
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_rvalid) -> mem_master_awprot
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_rvalid) -> mem_master_awqos
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_rvalid) -> mem_master_awregion
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_rvalid) -> mem_master_awuser
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_rvalid) -> mem_master_awvalid
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_rvalid) -> mem_master_wdata
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_rvalid) -> mem_master_wstrb
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_rvalid) -> mem_master_wlast
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_rvalid) -> mem_master_wuser
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_rvalid) -> mem_master_wvalid
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    EN_req,
//    mem_master_rvalid) -> mem_master_arid
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    EN_req,
//    mem_master_rvalid) -> mem_master_araddr
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    EN_req,
//    mem_master_rvalid) -> mem_master_arlen
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    EN_req,
//    mem_master_rvalid) -> mem_master_arsize
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    EN_req,
//    mem_master_rvalid) -> mem_master_arburst
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    EN_req,
//    mem_master_rvalid) -> mem_master_arlock
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    EN_req,
//    mem_master_rvalid) -> mem_master_arcache
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    EN_req,
//    mem_master_rvalid) -> mem_master_arprot
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    EN_req,
//    mem_master_rvalid) -> mem_master_arqos
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    EN_req,
//    mem_master_rvalid) -> mem_master_arregion
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    EN_req,
//    mem_master_rvalid) -> mem_master_aruser
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    EN_req,
//    mem_master_rvalid) -> mem_master_arvalid
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMMU_ICache(CLK,
		    RST_N,

		    set_verbosity_verbosity,
		    EN_set_verbosity,
		    RDY_set_verbosity,

		    EN_server_reset_request_put,
		    RDY_server_reset_request_put,

		    EN_server_reset_response_get,
		    RDY_server_reset_response_get,

		    req_op,
		    req_f3,
		    req_amo_funct7,
		    req_addr,
		    req_st_value,
		    req_priv,
		    req_sstatus_SUM,
		    req_mstatus_MXR,
		    req_satp,
		    EN_req,

		    valid,

		    addr,

		    word64,

		    st_amo_val,

		    exc,

		    exc_code,

		    EN_server_flush_request_put,
		    RDY_server_flush_request_put,

		    EN_server_flush_response_get,
		    RDY_server_flush_response_get,

		    EN_tlb_flush,
		    RDY_tlb_flush,

		    mem_master_awid,

		    mem_master_awaddr,

		    mem_master_awlen,

		    mem_master_awsize,

		    mem_master_awburst,

		    mem_master_awlock,

		    mem_master_awcache,

		    mem_master_awprot,

		    mem_master_awqos,

		    mem_master_awregion,

		    mem_master_awvalid,

		    mem_master_awready,

		    mem_master_wdata,

		    mem_master_wstrb,

		    mem_master_wlast,

		    mem_master_wvalid,

		    mem_master_wready,

		    mem_master_bid,
		    mem_master_bresp,
		    mem_master_bvalid,

		    mem_master_bready,

		    mem_master_arid,

		    mem_master_araddr,

		    mem_master_arlen,

		    mem_master_arsize,

		    mem_master_arburst,

		    mem_master_arlock,

		    mem_master_arcache,

		    mem_master_arprot,

		    mem_master_arqos,

		    mem_master_arregion,

		    mem_master_arvalid,

		    mem_master_arready,

		    mem_master_rid,
		    mem_master_rdata,
		    mem_master_rresp,
		    mem_master_rlast,
		    mem_master_rvalid,

		    mem_master_rready);
  input  CLK;
  input  RST_N;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // action method req
  input  [1 : 0] req_op;
  input  [2 : 0] req_f3;
  input  [6 : 0] req_amo_funct7;
  input  [31 : 0] req_addr;
  input  [63 : 0] req_st_value;
  input  [1 : 0] req_priv;
  input  req_sstatus_SUM;
  input  req_mstatus_MXR;
  input  [31 : 0] req_satp;
  input  EN_req;

  // value method valid
  output valid;

  // value method addr
  output [31 : 0] addr;

  // value method word64
  output [63 : 0] word64;

  // value method st_amo_val
  output [63 : 0] st_amo_val;

  // value method exc
  output exc;

  // value method exc_code
  output [3 : 0] exc_code;

  // action method server_flush_request_put
  input  EN_server_flush_request_put;
  output RDY_server_flush_request_put;

  // action method server_flush_response_get
  input  EN_server_flush_response_get;
  output RDY_server_flush_response_get;

  // action method tlb_flush
  input  EN_tlb_flush;
  output RDY_tlb_flush;

  // value method mem_master_aw_awid
  output [4 : 0] mem_master_awid;

  // value method mem_master_aw_awaddr
  output [63 : 0] mem_master_awaddr;

  // value method mem_master_aw_awlen
  output [7 : 0] mem_master_awlen;

  // value method mem_master_aw_awsize
  output [2 : 0] mem_master_awsize;

  // value method mem_master_aw_awburst
  output [1 : 0] mem_master_awburst;

  // value method mem_master_aw_awlock
  output mem_master_awlock;

  // value method mem_master_aw_awcache
  output [3 : 0] mem_master_awcache;

  // value method mem_master_aw_awprot
  output [2 : 0] mem_master_awprot;

  // value method mem_master_aw_awqos
  output [3 : 0] mem_master_awqos;

  // value method mem_master_aw_awregion
  output [3 : 0] mem_master_awregion;

  // value method mem_master_aw_awuser

  // value method mem_master_aw_awvalid
  output mem_master_awvalid;

  // action method mem_master_aw_awready
  input  mem_master_awready;

  // value method mem_master_w_wdata
  output [63 : 0] mem_master_wdata;

  // value method mem_master_w_wstrb
  output [7 : 0] mem_master_wstrb;

  // value method mem_master_w_wlast
  output mem_master_wlast;

  // value method mem_master_w_wuser

  // value method mem_master_w_wvalid
  output mem_master_wvalid;

  // action method mem_master_w_wready
  input  mem_master_wready;

  // action method mem_master_b_bflit
  input  [4 : 0] mem_master_bid;
  input  [1 : 0] mem_master_bresp;
  input  mem_master_bvalid;

  // value method mem_master_b_bready
  output mem_master_bready;

  // value method mem_master_ar_arid
  output [4 : 0] mem_master_arid;

  // value method mem_master_ar_araddr
  output [63 : 0] mem_master_araddr;

  // value method mem_master_ar_arlen
  output [7 : 0] mem_master_arlen;

  // value method mem_master_ar_arsize
  output [2 : 0] mem_master_arsize;

  // value method mem_master_ar_arburst
  output [1 : 0] mem_master_arburst;

  // value method mem_master_ar_arlock
  output mem_master_arlock;

  // value method mem_master_ar_arcache
  output [3 : 0] mem_master_arcache;

  // value method mem_master_ar_arprot
  output [2 : 0] mem_master_arprot;

  // value method mem_master_ar_arqos
  output [3 : 0] mem_master_arqos;

  // value method mem_master_ar_arregion
  output [3 : 0] mem_master_arregion;

  // value method mem_master_ar_aruser

  // value method mem_master_ar_arvalid
  output mem_master_arvalid;

  // action method mem_master_ar_arready
  input  mem_master_arready;

  // action method mem_master_r_rflit
  input  [4 : 0] mem_master_rid;
  input  [63 : 0] mem_master_rdata;
  input  [1 : 0] mem_master_rresp;
  input  mem_master_rlast;
  input  mem_master_rvalid;

  // value method mem_master_r_rready
  output mem_master_rready;

  // signals for module outputs
  reg [63 : 0] word64;
  wire [63 : 0] mem_master_araddr,
		mem_master_awaddr,
		mem_master_wdata,
		st_amo_val;
  wire [31 : 0] addr;
  wire [7 : 0] mem_master_arlen, mem_master_awlen, mem_master_wstrb;
  wire [4 : 0] mem_master_arid, mem_master_awid;
  wire [3 : 0] exc_code,
	       mem_master_arcache,
	       mem_master_arqos,
	       mem_master_arregion,
	       mem_master_awcache,
	       mem_master_awqos,
	       mem_master_awregion;
  wire [2 : 0] mem_master_arprot,
	       mem_master_arsize,
	       mem_master_awprot,
	       mem_master_awsize;
  wire [1 : 0] mem_master_arburst, mem_master_awburst;
  wire RDY_server_flush_request_put,
       RDY_server_flush_response_get,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_set_verbosity,
       RDY_tlb_flush,
       exc,
       mem_master_arlock,
       mem_master_arvalid,
       mem_master_awlock,
       mem_master_awvalid,
       mem_master_bready,
       mem_master_rready,
       mem_master_wlast,
       mem_master_wvalid,
       valid;

  // inlined wires
  reg [98 : 0] cache_master_xactor_shim_awff_rv$port0__write_1;
  reg [73 : 0] cache_master_xactor_shim_wff_rv$port0__write_1;
  reg [3 : 0] cache_ctr_wr_rsps_pending_crg$port0__write_1;
  wire [98 : 0] cache_master_xactor_shim_arff_rv$port0__write_1,
		cache_master_xactor_shim_arff_rv$port1__read,
		cache_master_xactor_shim_arff_rv$port2__read,
		cache_master_xactor_shim_arff_rv$port3__read,
		cache_master_xactor_shim_awff_rv$port1__read,
		cache_master_xactor_shim_awff_rv$port2__read,
		cache_master_xactor_shim_awff_rv$port3__read;
  wire [73 : 0] cache_master_xactor_shim_wff_rv$port1__read,
		cache_master_xactor_shim_wff_rv$port2__read,
		cache_master_xactor_shim_wff_rv$port3__read;
  wire [72 : 0] cache_master_xactor_shim_rff_rv$port0__write_1,
		cache_master_xactor_shim_rff_rv$port1__read,
		cache_master_xactor_shim_rff_rv$port2__read,
		cache_master_xactor_shim_rff_rv$port3__read;
  wire [71 : 0] cache_master_xactor_ug_master_u_r_putWire$wget;
  wire [10 : 0] cache_crg_sb_to_load_delay$port0__write_1,
		cache_crg_sb_to_load_delay$port2__read;
  wire [7 : 0] cache_master_xactor_shim_bff_rv$port0__write_1,
	       cache_master_xactor_shim_bff_rv$port1__read,
	       cache_master_xactor_shim_bff_rv$port2__read,
	       cache_master_xactor_shim_bff_rv$port3__read;
  wire [6 : 0] cache_master_xactor_ug_master_u_b_putWire$wget;
  wire [3 : 0] cache_ctr_wr_rsps_pending_crg$port1__write_1,
	       cache_ctr_wr_rsps_pending_crg$port2__read,
	       cache_ctr_wr_rsps_pending_crg$port3__read;
  wire cache_crg_sb_to_load_delay$EN_port1__write,
       cache_ctr_wr_rsps_pending_crg$EN_port0__write,
       cache_dw_valid$whas,
       cache_master_xactor_shim_arff_rv$EN_port0__write,
       cache_master_xactor_shim_awff_rv$EN_port0__write,
       cache_master_xactor_shim_rff_rv$EN_port1__write,
       cache_master_xactor_shim_wff_rv$EN_port0__write,
       cache_master_xactor_ug_master_u_ar_dropWire$whas,
       cache_master_xactor_ug_master_u_aw_dropWire$whas,
       cache_master_xactor_ug_master_u_b_putWire$whas,
       cache_master_xactor_ug_master_u_r_putWire$whas,
       cache_master_xactor_ug_master_u_w_dropWire$whas;

  // register cache_cfg_verbosity
  reg [3 : 0] cache_cfg_verbosity;
  wire [3 : 0] cache_cfg_verbosity$D_IN;
  wire cache_cfg_verbosity$EN;

  // register cache_crg_sb_to_load_delay
  reg [10 : 0] cache_crg_sb_to_load_delay;
  wire [10 : 0] cache_crg_sb_to_load_delay$D_IN;
  wire cache_crg_sb_to_load_delay$EN;

  // register cache_ctr_wr_rsps_pending_crg
  reg [3 : 0] cache_ctr_wr_rsps_pending_crg;
  wire [3 : 0] cache_ctr_wr_rsps_pending_crg$D_IN;
  wire cache_ctr_wr_rsps_pending_crg$EN;

  // register cache_master_xactor_clearing
  reg cache_master_xactor_clearing;
  wire cache_master_xactor_clearing$D_IN, cache_master_xactor_clearing$EN;

  // register cache_master_xactor_shim_arff_rv
  reg [98 : 0] cache_master_xactor_shim_arff_rv;
  wire [98 : 0] cache_master_xactor_shim_arff_rv$D_IN;
  wire cache_master_xactor_shim_arff_rv$EN;

  // register cache_master_xactor_shim_awff_rv
  reg [98 : 0] cache_master_xactor_shim_awff_rv;
  wire [98 : 0] cache_master_xactor_shim_awff_rv$D_IN;
  wire cache_master_xactor_shim_awff_rv$EN;

  // register cache_master_xactor_shim_bff_rv
  reg [7 : 0] cache_master_xactor_shim_bff_rv;
  wire [7 : 0] cache_master_xactor_shim_bff_rv$D_IN;
  wire cache_master_xactor_shim_bff_rv$EN;

  // register cache_master_xactor_shim_rff_rv
  reg [72 : 0] cache_master_xactor_shim_rff_rv;
  wire [72 : 0] cache_master_xactor_shim_rff_rv$D_IN;
  wire cache_master_xactor_shim_rff_rv$EN;

  // register cache_master_xactor_shim_wff_rv
  reg [73 : 0] cache_master_xactor_shim_wff_rv;
  wire [73 : 0] cache_master_xactor_shim_wff_rv$D_IN;
  wire cache_master_xactor_shim_wff_rv$EN;

  // register cache_rg_addr
  reg [31 : 0] cache_rg_addr;
  wire [31 : 0] cache_rg_addr$D_IN;
  wire cache_rg_addr$EN;

  // register cache_rg_amo_funct7
  reg [6 : 0] cache_rg_amo_funct7;
  wire [6 : 0] cache_rg_amo_funct7$D_IN;
  wire cache_rg_amo_funct7$EN;

  // register cache_rg_cset_in_cache
  reg [6 : 0] cache_rg_cset_in_cache;
  wire [6 : 0] cache_rg_cset_in_cache$D_IN;
  wire cache_rg_cset_in_cache$EN;

  // register cache_rg_error_during_refill
  reg cache_rg_error_during_refill;
  wire cache_rg_error_during_refill$D_IN, cache_rg_error_during_refill$EN;

  // register cache_rg_exc_code
  reg [3 : 0] cache_rg_exc_code;
  reg [3 : 0] cache_rg_exc_code$D_IN;
  wire cache_rg_exc_code$EN;

  // register cache_rg_f3
  reg [2 : 0] cache_rg_f3;
  wire [2 : 0] cache_rg_f3$D_IN;
  wire cache_rg_f3$EN;

  // register cache_rg_ld_val
  reg [63 : 0] cache_rg_ld_val;
  reg [63 : 0] cache_rg_ld_val$D_IN;
  wire cache_rg_ld_val$EN;

  // register cache_rg_lower_word32
  reg [31 : 0] cache_rg_lower_word32;
  wire [31 : 0] cache_rg_lower_word32$D_IN;
  wire cache_rg_lower_word32$EN;

  // register cache_rg_lower_word32_full
  reg cache_rg_lower_word32_full;
  wire cache_rg_lower_word32_full$D_IN, cache_rg_lower_word32_full$EN;

  // register cache_rg_lrsc_pa
  reg [31 : 0] cache_rg_lrsc_pa;
  wire [31 : 0] cache_rg_lrsc_pa$D_IN;
  wire cache_rg_lrsc_pa$EN;

  // register cache_rg_lrsc_valid
  reg cache_rg_lrsc_valid;
  wire cache_rg_lrsc_valid$D_IN, cache_rg_lrsc_valid$EN;

  // register cache_rg_op
  reg [1 : 0] cache_rg_op;
  wire [1 : 0] cache_rg_op$D_IN;
  wire cache_rg_op$EN;

  // register cache_rg_pa
  reg [31 : 0] cache_rg_pa;
  wire [31 : 0] cache_rg_pa$D_IN;
  wire cache_rg_pa$EN;

  // register cache_rg_pte_pa
  reg [31 : 0] cache_rg_pte_pa;
  wire [31 : 0] cache_rg_pte_pa$D_IN;
  wire cache_rg_pte_pa$EN;

  // register cache_rg_st_amo_val
  reg [63 : 0] cache_rg_st_amo_val;
  wire [63 : 0] cache_rg_st_amo_val$D_IN;
  wire cache_rg_st_amo_val$EN;

  // register cache_rg_state
  reg [3 : 0] cache_rg_state;
  reg [3 : 0] cache_rg_state$D_IN;
  wire cache_rg_state$EN;

  // register cache_rg_word64_set_in_cache
  reg [8 : 0] cache_rg_word64_set_in_cache;
  wire [8 : 0] cache_rg_word64_set_in_cache$D_IN;
  wire cache_rg_word64_set_in_cache$EN;

  // ports of submodule cache_f_reset_reqs
  wire cache_f_reset_reqs$CLR,
       cache_f_reset_reqs$DEQ,
       cache_f_reset_reqs$D_IN,
       cache_f_reset_reqs$D_OUT,
       cache_f_reset_reqs$EMPTY_N,
       cache_f_reset_reqs$ENQ,
       cache_f_reset_reqs$FULL_N;

  // ports of submodule cache_f_reset_rsps
  wire cache_f_reset_rsps$CLR,
       cache_f_reset_rsps$DEQ,
       cache_f_reset_rsps$D_IN,
       cache_f_reset_rsps$D_OUT,
       cache_f_reset_rsps$EMPTY_N,
       cache_f_reset_rsps$ENQ,
       cache_f_reset_rsps$FULL_N;

  // ports of submodule cache_ram_state_and_ctag_cset
  wire [22 : 0] cache_ram_state_and_ctag_cset$DIA,
		cache_ram_state_and_ctag_cset$DIB,
		cache_ram_state_and_ctag_cset$DOB;
  wire [6 : 0] cache_ram_state_and_ctag_cset$ADDRA,
	       cache_ram_state_and_ctag_cset$ADDRB;
  wire cache_ram_state_and_ctag_cset$ENA,
       cache_ram_state_and_ctag_cset$ENB,
       cache_ram_state_and_ctag_cset$WEA,
       cache_ram_state_and_ctag_cset$WEB;

  // ports of submodule cache_ram_word64_set
  reg [63 : 0] cache_ram_word64_set$DIB;
  reg [8 : 0] cache_ram_word64_set$ADDRB;
  wire [63 : 0] cache_ram_word64_set$DIA, cache_ram_word64_set$DOB;
  wire [8 : 0] cache_ram_word64_set$ADDRA;
  wire cache_ram_word64_set$ENA,
       cache_ram_word64_set$ENB,
       cache_ram_word64_set$WEA,
       cache_ram_word64_set$WEB;

  // ports of submodule cache_soc_map
  wire [63 : 0] cache_soc_map$m_is_IO_addr_addr,
		cache_soc_map$m_is_mem_addr_addr,
		cache_soc_map$m_is_near_mem_IO_addr_addr;

  // rule scheduling signals
  wire CAN_FIRE_RL_cache_master_xactor_do_clear,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop,
       CAN_FIRE_RL_cache_rl_ST_AMO_response,
       CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop,
       CAN_FIRE_RL_cache_rl_discard_write_rsp,
       CAN_FIRE_RL_cache_rl_drive_exception_rsp,
       CAN_FIRE_RL_cache_rl_io_AMO_SC_req,
       CAN_FIRE_RL_cache_rl_io_AMO_op_req,
       CAN_FIRE_RL_cache_rl_io_AMO_read_rsp,
       CAN_FIRE_RL_cache_rl_io_read_req,
       CAN_FIRE_RL_cache_rl_io_read_rsp,
       CAN_FIRE_RL_cache_rl_io_write_req,
       CAN_FIRE_RL_cache_rl_maintain_io_read_rsp,
       CAN_FIRE_RL_cache_rl_probe_and_immed_rsp,
       CAN_FIRE_RL_cache_rl_rereq,
       CAN_FIRE_RL_cache_rl_reset,
       CAN_FIRE_RL_cache_rl_shift_sb_to_load_delay,
       CAN_FIRE_RL_cache_rl_start_cache_refill,
       CAN_FIRE_RL_cache_rl_start_reset,
       CAN_FIRE_mem_master_ar_arready,
       CAN_FIRE_mem_master_aw_awready,
       CAN_FIRE_mem_master_b_bflit,
       CAN_FIRE_mem_master_r_rflit,
       CAN_FIRE_mem_master_w_wready,
       CAN_FIRE_req,
       CAN_FIRE_server_flush_request_put,
       CAN_FIRE_server_flush_response_get,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_tlb_flush,
       WILL_FIRE_RL_cache_master_xactor_do_clear,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop,
       WILL_FIRE_RL_cache_rl_ST_AMO_response,
       WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop,
       WILL_FIRE_RL_cache_rl_discard_write_rsp,
       WILL_FIRE_RL_cache_rl_drive_exception_rsp,
       WILL_FIRE_RL_cache_rl_io_AMO_SC_req,
       WILL_FIRE_RL_cache_rl_io_AMO_op_req,
       WILL_FIRE_RL_cache_rl_io_AMO_read_rsp,
       WILL_FIRE_RL_cache_rl_io_read_req,
       WILL_FIRE_RL_cache_rl_io_read_rsp,
       WILL_FIRE_RL_cache_rl_io_write_req,
       WILL_FIRE_RL_cache_rl_maintain_io_read_rsp,
       WILL_FIRE_RL_cache_rl_probe_and_immed_rsp,
       WILL_FIRE_RL_cache_rl_rereq,
       WILL_FIRE_RL_cache_rl_reset,
       WILL_FIRE_RL_cache_rl_shift_sb_to_load_delay,
       WILL_FIRE_RL_cache_rl_start_cache_refill,
       WILL_FIRE_RL_cache_rl_start_reset,
       WILL_FIRE_mem_master_ar_arready,
       WILL_FIRE_mem_master_aw_awready,
       WILL_FIRE_mem_master_b_bflit,
       WILL_FIRE_mem_master_r_rflit,
       WILL_FIRE_mem_master_w_wready,
       WILL_FIRE_req,
       WILL_FIRE_server_flush_request_put,
       WILL_FIRE_server_flush_response_get,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_tlb_flush;

  // inputs to muxes for submodule ports
  wire [98 : 0] MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_1,
		MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_2,
		MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_1,
		MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_2;
  wire [73 : 0] MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_1,
		MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_2,
		MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_3;
  wire [63 : 0] MUX_cache_dw_output_ld_val$wset_1__VAL_3,
		MUX_cache_ram_word64_set$a_put_3__VAL_2,
		MUX_cache_rg_ld_val$write_1__VAL_2;
  wire [22 : 0] MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1;
  wire [8 : 0] MUX_cache_ram_word64_set$b_put_2__VAL_2,
	       MUX_cache_ram_word64_set$b_put_2__VAL_4;
  wire [6 : 0] MUX_cache_rg_cset_in_cache$write_1__VAL_1;
  wire [3 : 0] MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1,
	       MUX_cache_rg_exc_code$write_1__VAL_1,
	       MUX_cache_rg_state$write_1__VAL_1,
	       MUX_cache_rg_state$write_1__VAL_12,
	       MUX_cache_rg_state$write_1__VAL_5,
	       MUX_cache_rg_state$write_1__VAL_7;
  wire MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1,
       MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2,
       MUX_cache_dw_output_ld_val$wset_1__SEL_1,
       MUX_cache_dw_output_ld_val$wset_1__SEL_3,
       MUX_cache_dw_output_ld_val$wset_1__SEL_4,
       MUX_cache_master_xactor_clearing$write_1__SEL_1,
       MUX_cache_master_xactor_shim_arff_rv$port0__write_1__SEL_1,
       MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1,
       MUX_cache_ram_word64_set$a_put_1__SEL_1,
       MUX_cache_ram_word64_set$b_put_1__SEL_2,
       MUX_cache_rg_error_during_refill$write_1__SEL_1,
       MUX_cache_rg_exc_code$write_1__SEL_1,
       MUX_cache_rg_exc_code$write_1__SEL_2,
       MUX_cache_rg_exc_code$write_1__SEL_3,
       MUX_cache_rg_ld_val$write_1__SEL_2,
       MUX_cache_rg_lrsc_valid$write_1__SEL_2,
       MUX_cache_rg_state$write_1__SEL_12,
       MUX_cache_rg_state$write_1__SEL_13,
       MUX_cache_rg_state$write_1__SEL_7;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h5445;
  reg [31 : 0] v__h5548;
  reg [31 : 0] v__h6002;
  reg [31 : 0] v__h14437;
  reg [31 : 0] v__h18926;
  reg [31 : 0] v__h18150;
  reg [31 : 0] v__h22522;
  reg [31 : 0] v__h27522;
  reg [31 : 0] v__h27605;
  reg [31 : 0] v__h28149;
  reg [31 : 0] v__h28445;
  reg [31 : 0] v__h28566;
  reg [31 : 0] v__h23916;
  reg [31 : 0] v__h24170;
  reg [31 : 0] v__h26186;
  reg [31 : 0] v__h27304;
  reg [31 : 0] v__h27412;
  reg [31 : 0] v__h28896;
  reg [31 : 0] v__h29091;
  reg [31 : 0] v__h31768;
  reg [31 : 0] v__h32019;
  reg [31 : 0] v__h29188;
  reg [31 : 0] v__h22967;
  reg [31 : 0] v__h25800;
  reg [31 : 0] v__h32735;
  reg [31 : 0] v__h32696;
  reg [31 : 0] v__h5070;
  reg [31 : 0] v__h33123;
  reg [31 : 0] v__h5064;
  reg [31 : 0] v__h5439;
  reg [31 : 0] v__h5542;
  reg [31 : 0] v__h5996;
  reg [31 : 0] v__h14431;
  reg [31 : 0] v__h18144;
  reg [31 : 0] v__h18920;
  reg [31 : 0] v__h22516;
  reg [31 : 0] v__h22961;
  reg [31 : 0] v__h23910;
  reg [31 : 0] v__h24164;
  reg [31 : 0] v__h25794;
  reg [31 : 0] v__h26180;
  reg [31 : 0] v__h27298;
  reg [31 : 0] v__h27406;
  reg [31 : 0] v__h27516;
  reg [31 : 0] v__h27599;
  reg [31 : 0] v__h28143;
  reg [31 : 0] v__h28439;
  reg [31 : 0] v__h28560;
  reg [31 : 0] v__h28890;
  reg [31 : 0] v__h29085;
  reg [31 : 0] v__h29182;
  reg [31 : 0] v__h31762;
  reg [31 : 0] v__h32013;
  reg [31 : 0] v__h32690;
  reg [31 : 0] v__h32729;
  reg [31 : 0] v__h33117;
  // synopsys translate_on

  // remaining internal signals
  reg [63 : 0] CASE_cache_rg_addr_BITS_2_TO_0_0x0_cache_ram_w_ETC__q18,
	       CASE_cache_rg_addr_BITS_2_TO_0_0x0_cache_ram_w_ETC__q19,
	       CASE_cache_rg_addr_BITS_2_TO_0_0x0_result1334__ETC__q50,
	       CASE_cache_rg_addr_BITS_2_TO_0_0x0_result4258__ETC__q16,
	       CASE_cache_rg_addr_BITS_2_TO_0_0x0_result7082__ETC__q34,
	       CASE_cache_rg_addr_BITS_2_TO_0_0x0_result7147__ETC__q35,
	       IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d233,
	       IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d250,
	       IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d263,
	       IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d272,
	       IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d284,
	       IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d372,
	       IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d381,
	       IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d446,
	       IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d455,
	       IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d662,
	       IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d678,
	       IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d690,
	       IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d698,
	       IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d786,
	       IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d802,
	       IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d814,
	       IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d822,
	       IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d832,
	       IF_cache_rg_f3_67_EQ_0b0_68_THEN_IF_cache_rg_a_ETC___d390,
	       IF_cache_rg_f3_67_EQ_0b0_68_THEN_IF_cache_rg_a_ETC___d464,
	       IF_cache_rg_f3_67_EQ_0b10_73_THEN_SEXT_IF_cach_ETC___d333,
	       _theResult_____2__h19493,
	       _theResult_____2__h29517,
	       ld_val__h26311,
	       mem_req_wr_data_wdata__h18665,
	       mem_req_wr_data_wdata__h22300,
	       mem_req_wr_data_wdata__h27927,
	       mem_req_wr_data_wdata__h29489,
	       new_ld_val__h29218,
	       new_value__h17241,
	       new_value__h7143,
	       w1__h19485,
	       w1__h29505,
	       w1__h29509;
  reg [7 : 0] mem_req_wr_data_wstrb__h22301, mem_req_wr_data_wstrb__h29490;
  reg [2 : 0] _theResult___snd_snd_val__h29437, size_val__h28732;
  wire [97 : 0] cache_master_xactor_shim_arff_rvport1__read_B_ETC__q54,
		cache_master_xactor_shim_awff_rvport1__read_B_ETC__q52;
  wire [72 : 0] cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q53;
  wire [63 : 0] IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d286,
		IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d300,
		IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d833,
		IF_cache_rg_f3_67_EQ_0b10_73_THEN_SEXT_cache_r_ETC___d396,
		IF_cache_rg_op_4_EQ_1_2_OR_cache_rg_op_4_EQ_2__ETC___d495,
		_theResult___fst__h18531,
		_theResult___fst__h22233,
		_theResult___fst__h27860,
		_theResult___fst__h29422,
		b__h19609,
		b__h29633,
		b__h31468,
		cline_fabric_addr__h23020,
		mem_req_wr_addr_awaddr__h22081,
		mem_req_wr_addr_awaddr__h29270,
		new_st_val__h19205,
		new_st_val__h19500,
		new_st_val__h19601,
		new_st_val__h20594,
		new_st_val__h20599,
		new_st_val__h20604,
		new_st_val__h20609,
		new_st_val__h20617,
		new_st_val__h20626,
		new_st_val__h20634,
		new_st_val__h29524,
		new_st_val__h29625,
		new_st_val__h31498,
		new_st_val__h31503,
		new_st_val__h31508,
		new_st_val__h31513,
		new_st_val__h31521,
		new_st_val__h31530,
		new_st_val__h31538,
		result__h13554,
		result__h13582,
		result__h13610,
		result__h13638,
		result__h13666,
		result__h13694,
		result__h13722,
		result__h13767,
		result__h13795,
		result__h13823,
		result__h13851,
		result__h13879,
		result__h13907,
		result__h13935,
		result__h13963,
		result__h14008,
		result__h14036,
		result__h14064,
		result__h14092,
		result__h14133,
		result__h14161,
		result__h14189,
		result__h14217,
		result__h14258,
		result__h14286,
		result__h14325,
		result__h14353,
		result__h26371,
		result__h26401,
		result__h26428,
		result__h26455,
		result__h26482,
		result__h26509,
		result__h26536,
		result__h26563,
		result__h26607,
		result__h26634,
		result__h26661,
		result__h26688,
		result__h26715,
		result__h26742,
		result__h26769,
		result__h26796,
		result__h26840,
		result__h26867,
		result__h26894,
		result__h26921,
		result__h26961,
		result__h26988,
		result__h27015,
		result__h27042,
		result__h27082,
		result__h27109,
		result__h27147,
		result__h27174,
		result__h29722,
		result__h30630,
		result__h30658,
		result__h30686,
		result__h30714,
		result__h30742,
		result__h30770,
		result__h30798,
		result__h30843,
		result__h30871,
		result__h30899,
		result__h30927,
		result__h30955,
		result__h30983,
		result__h31011,
		result__h31039,
		result__h31084,
		result__h31112,
		result__h31140,
		result__h31168,
		result__h31209,
		result__h31237,
		result__h31265,
		result__h31293,
		result__h31334,
		result__h31362,
		result__h31401,
		result__h31429,
		result__h7198,
		st_val__h29230,
		w1___1__h19567,
		w1___1__h29591,
		w2___1__h29592,
		w2__h29511,
		word64__h6962,
		x__h14824,
		y__h7234;
  wire [31 : 0] cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q22,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q29,
		cache_rg_st_amo_val_BITS_31_TO_0__q1,
		cline_addr__h23019,
		ld_val6311_BITS_31_TO_0__q38,
		ld_val6311_BITS_63_TO_32__q45,
		new_value143_BITS_31_TO_0__q17,
		w19505_BITS_31_TO_0__q51,
		word64962_BITS_31_TO_0__q4,
		word64962_BITS_63_TO_32__q11;
  wire [21 : 0] pa_ctag__h6858;
  wire [15 : 0] cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q21,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q25,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q28,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q32,
		ld_val6311_BITS_15_TO_0__q37,
		ld_val6311_BITS_31_TO_16__q41,
		ld_val6311_BITS_47_TO_32__q44,
		ld_val6311_BITS_63_TO_48__q48,
		word64962_BITS_15_TO_0__q3,
		word64962_BITS_31_TO_16__q7,
		word64962_BITS_47_TO_32__q10,
		word64962_BITS_63_TO_48__q14;
  wire [7 : 0] cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q20,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q23,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q24,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q26,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q27,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q30,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q31,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q33,
	       ld_val6311_BITS_15_TO_8__q39,
	       ld_val6311_BITS_23_TO_16__q40,
	       ld_val6311_BITS_31_TO_24__q42,
	       ld_val6311_BITS_39_TO_32__q43,
	       ld_val6311_BITS_47_TO_40__q46,
	       ld_val6311_BITS_55_TO_48__q47,
	       ld_val6311_BITS_63_TO_56__q49,
	       ld_val6311_BITS_7_TO_0__q36,
	       strobe64__h22231,
	       strobe64__h22235,
	       strobe64__h22239,
	       strobe64__h29420,
	       strobe64__h29424,
	       strobe64__h29428,
	       word64962_BITS_15_TO_8__q5,
	       word64962_BITS_23_TO_16__q6,
	       word64962_BITS_31_TO_24__q8,
	       word64962_BITS_39_TO_32__q9,
	       word64962_BITS_47_TO_40__q12,
	       word64962_BITS_55_TO_48__q13,
	       word64962_BITS_63_TO_56__q15,
	       word64962_BITS_7_TO_0__q2;
  wire [5 : 0] shift_bits__h22087, shift_bits__h29276;
  wire [3 : 0] IF_cache_rg_op_4_EQ_1_2_OR_cache_rg_op_4_EQ_2__ETC___d309,
	       b__h22921;
  wire IF_cache_rg_op_4_EQ_1_2_OR_cache_rg_op_4_EQ_2__ETC___d123,
       NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57,
       NOT_cache_cfg_verbosity_read__5_ULE_2_74___d575,
       NOT_cache_master_xactor_clearing_0_5_AND_cache_ETC___d756,
       NOT_cache_ram_state_and_ctag_cset_b_read__13_B_ETC___d122,
       NOT_cache_ram_state_and_ctag_cset_b_read__13_B_ETC___d148,
       NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d306,
       NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d475,
       NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d519,
       NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d525,
       NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d529,
       NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d159,
       NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d337,
       NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d470,
       NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d537,
       NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d539,
       NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d542,
       NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d547,
       NOT_cache_rg_op_4_EQ_2_6_27_OR_NOT_cache_rg_am_ETC___d335,
       NOT_cache_rg_op_4_EQ_2_6_27_OR_NOT_cache_rg_am_ETC___d468,
       NOT_cache_rg_op_4_EQ_2_6_27_OR_NOT_cache_rg_am_ETC___d517,
       NOT_cache_rg_op_4_EQ_2_6_27_OR_NOT_cache_rg_am_ETC___d520,
       NOT_cache_rg_op_4_EQ_2_6_27_OR_NOT_cache_rg_am_ETC___d523,
       NOT_cache_rg_op_4_EQ_2_6_27_OR_NOT_cache_rg_am_ETC___d527,
       NOT_req_f3_BITS_1_TO_0_30_EQ_0b0_31_32_AND_NOT_ETC___d951,
       cache_ram_state_and_ctag_cset_b_read__13_BITS__ETC___d119,
       cache_ram_state_and_ctag_cset_b_read__13_BIT_2_ETC___d149,
       cache_rg_addr_9_EQ_cache_rg_lrsc_pa_8___d146,
       cache_rg_amo_funct7_7_BITS_6_TO_2_8_EQ_0b10_9__ETC___d325,
       cache_rg_lrsc_pa_8_EQ_cache_rg_addr_9___d100,
       cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d162,
       cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d163,
       cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d166,
       cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d303,
       cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d312,
       cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d322,
       cache_rg_op_4_EQ_1_2_OR_cache_rg_op_4_EQ_2_6_A_ETC___d160,
       cache_rg_op_4_EQ_1_2_OR_cache_rg_op_4_EQ_2_6_A_ETC___d338,
       cache_rg_op_4_EQ_1_2_OR_cache_rg_op_4_EQ_2_6_A_ETC___d471,
       cache_rg_op_4_EQ_1_2_OR_cache_rg_op_4_EQ_2_6_A_ETC___d473,
       cache_rg_op_4_EQ_2_6_AND_cache_rg_amo_funct7_7_ETC___d112,
       cache_rg_op_4_EQ_2_6_AND_cache_rg_amo_funct7_7_ETC___d328,
       cache_rg_op_4_EQ_2_6_AND_cache_rg_amo_funct7_7_ETC___d534,
       cache_rg_state_9_EQ_12_17_AND_cache_rg_op_4_EQ_ETC___d619,
       cache_rg_state_9_EQ_3_25_AND_NOT_cache_rg_op_4_ETC___d134,
       lrsc_result__h14814,
       req_f3_BITS_1_TO_0_30_EQ_0b0_31_OR_req_f3_BITS_ETC___d960;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = cache_f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = cache_f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get =
	     !cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get =
	     !cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // action method req
  assign CAN_FIRE_req = 1'd1 ;
  assign WILL_FIRE_req = EN_req ;

  // value method valid
  assign valid = cache_dw_valid$whas ;

  // value method addr
  assign addr = cache_rg_addr ;

  // value method word64
  always@(MUX_cache_dw_output_ld_val$wset_1__SEL_1 or
	  ld_val__h26311 or
	  MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  new_ld_val__h29218 or
	  MUX_cache_dw_output_ld_val$wset_1__SEL_3 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_3 or
	  MUX_cache_dw_output_ld_val$wset_1__SEL_4 or cache_rg_ld_val)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_dw_output_ld_val$wset_1__SEL_1: word64 = ld_val__h26311;
      MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  word64 = new_ld_val__h29218;
      MUX_cache_dw_output_ld_val$wset_1__SEL_3:
	  word64 = MUX_cache_dw_output_ld_val$wset_1__VAL_3;
      MUX_cache_dw_output_ld_val$wset_1__SEL_4: word64 = cache_rg_ld_val;
      default: word64 = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end

  // value method st_amo_val
  assign st_amo_val =
	     MUX_cache_dw_output_ld_val$wset_1__SEL_3 ?
	       64'd0 :
	       cache_rg_st_amo_val ;

  // value method exc
  assign exc = cache_rg_state == 4'd4 ;

  // value method exc_code
  assign exc_code = cache_rg_exc_code ;

  // action method server_flush_request_put
  assign RDY_server_flush_request_put = cache_f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_flush_request_put = cache_f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_flush_request_put = EN_server_flush_request_put ;

  // action method server_flush_response_get
  assign RDY_server_flush_response_get =
	     cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_flush_response_get =
	     cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_flush_response_get = EN_server_flush_response_get ;

  // action method tlb_flush
  assign RDY_tlb_flush = 1'd1 ;
  assign CAN_FIRE_tlb_flush = 1'd1 ;
  assign WILL_FIRE_tlb_flush = EN_tlb_flush ;

  // value method mem_master_aw_awid
  assign mem_master_awid =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q52[97:93] ;

  // value method mem_master_aw_awaddr
  assign mem_master_awaddr =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q52[92:29] ;

  // value method mem_master_aw_awlen
  assign mem_master_awlen =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q52[28:21] ;

  // value method mem_master_aw_awsize
  assign mem_master_awsize =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q52[20:18] ;

  // value method mem_master_aw_awburst
  assign mem_master_awburst =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q52[17:16] ;

  // value method mem_master_aw_awlock
  assign mem_master_awlock =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q52[15] ;

  // value method mem_master_aw_awcache
  assign mem_master_awcache =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q52[14:11] ;

  // value method mem_master_aw_awprot
  assign mem_master_awprot =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q52[10:8] ;

  // value method mem_master_aw_awqos
  assign mem_master_awqos =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q52[7:4] ;

  // value method mem_master_aw_awregion
  assign mem_master_awregion =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q52[3:0] ;

  // value method mem_master_aw_awvalid
  assign mem_master_awvalid =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek ;

  // action method mem_master_aw_awready
  assign CAN_FIRE_mem_master_aw_awready = 1'd1 ;
  assign WILL_FIRE_mem_master_aw_awready = 1'd1 ;

  // value method mem_master_w_wdata
  assign mem_master_wdata =
	     cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q53[72:9] ;

  // value method mem_master_w_wstrb
  assign mem_master_wstrb =
	     cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q53[8:1] ;

  // value method mem_master_w_wlast
  assign mem_master_wlast =
	     cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q53[0] ;

  // value method mem_master_w_wvalid
  assign mem_master_wvalid =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek ;

  // action method mem_master_w_wready
  assign CAN_FIRE_mem_master_w_wready = 1'd1 ;
  assign WILL_FIRE_mem_master_w_wready = 1'd1 ;

  // action method mem_master_b_bflit
  assign CAN_FIRE_mem_master_b_bflit = 1'd1 ;
  assign WILL_FIRE_mem_master_b_bflit = mem_master_bvalid ;

  // value method mem_master_b_bready
  assign mem_master_bready = !cache_master_xactor_shim_bff_rv[7] ;

  // value method mem_master_ar_arid
  assign mem_master_arid =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q54[97:93] ;

  // value method mem_master_ar_araddr
  assign mem_master_araddr =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q54[92:29] ;

  // value method mem_master_ar_arlen
  assign mem_master_arlen =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q54[28:21] ;

  // value method mem_master_ar_arsize
  assign mem_master_arsize =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q54[20:18] ;

  // value method mem_master_ar_arburst
  assign mem_master_arburst =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q54[17:16] ;

  // value method mem_master_ar_arlock
  assign mem_master_arlock =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q54[15] ;

  // value method mem_master_ar_arcache
  assign mem_master_arcache =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q54[14:11] ;

  // value method mem_master_ar_arprot
  assign mem_master_arprot =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q54[10:8] ;

  // value method mem_master_ar_arqos
  assign mem_master_arqos =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q54[7:4] ;

  // value method mem_master_ar_arregion
  assign mem_master_arregion =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q54[3:0] ;

  // value method mem_master_ar_arvalid
  assign mem_master_arvalid =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek ;

  // action method mem_master_ar_arready
  assign CAN_FIRE_mem_master_ar_arready = 1'd1 ;
  assign WILL_FIRE_mem_master_ar_arready = 1'd1 ;

  // action method mem_master_r_rflit
  assign CAN_FIRE_mem_master_r_rflit = 1'd1 ;
  assign WILL_FIRE_mem_master_r_rflit = mem_master_rvalid ;

  // value method mem_master_r_rready
  assign mem_master_rready = !cache_master_xactor_shim_rff_rv[72] ;

  // submodule cache_f_reset_reqs
  FIFO2 #(.width(32'd1), .guarded(32'd1)) cache_f_reset_reqs(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(cache_f_reset_reqs$D_IN),
							     .ENQ(cache_f_reset_reqs$ENQ),
							     .DEQ(cache_f_reset_reqs$DEQ),
							     .CLR(cache_f_reset_reqs$CLR),
							     .D_OUT(cache_f_reset_reqs$D_OUT),
							     .FULL_N(cache_f_reset_reqs$FULL_N),
							     .EMPTY_N(cache_f_reset_reqs$EMPTY_N));

  // submodule cache_f_reset_rsps
  FIFO2 #(.width(32'd1), .guarded(32'd1)) cache_f_reset_rsps(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(cache_f_reset_rsps$D_IN),
							     .ENQ(cache_f_reset_rsps$ENQ),
							     .DEQ(cache_f_reset_rsps$DEQ),
							     .CLR(cache_f_reset_rsps$CLR),
							     .D_OUT(cache_f_reset_rsps$D_OUT),
							     .FULL_N(cache_f_reset_rsps$FULL_N),
							     .EMPTY_N(cache_f_reset_rsps$EMPTY_N));

  // submodule cache_ram_state_and_ctag_cset
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd23),
	  .MEMSIZE(8'd128)) cache_ram_state_and_ctag_cset(.CLKA(CLK),
							  .CLKB(CLK),
							  .ADDRA(cache_ram_state_and_ctag_cset$ADDRA),
							  .ADDRB(cache_ram_state_and_ctag_cset$ADDRB),
							  .DIA(cache_ram_state_and_ctag_cset$DIA),
							  .DIB(cache_ram_state_and_ctag_cset$DIB),
							  .WEA(cache_ram_state_and_ctag_cset$WEA),
							  .WEB(cache_ram_state_and_ctag_cset$WEB),
							  .ENA(cache_ram_state_and_ctag_cset$ENA),
							  .ENB(cache_ram_state_and_ctag_cset$ENB),
							  .DOA(),
							  .DOB(cache_ram_state_and_ctag_cset$DOB));

  // submodule cache_ram_word64_set
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd9),
	  .DATA_WIDTH(32'd64),
	  .MEMSIZE(10'd512)) cache_ram_word64_set(.CLKA(CLK),
						  .CLKB(CLK),
						  .ADDRA(cache_ram_word64_set$ADDRA),
						  .ADDRB(cache_ram_word64_set$ADDRB),
						  .DIA(cache_ram_word64_set$DIA),
						  .DIB(cache_ram_word64_set$DIB),
						  .WEA(cache_ram_word64_set$WEA),
						  .WEB(cache_ram_word64_set$WEB),
						  .ENA(cache_ram_word64_set$ENA),
						  .ENB(cache_ram_word64_set$ENB),
						  .DOA(),
						  .DOB(cache_ram_word64_set$DOB));

  // submodule cache_soc_map
  mkSoC_Map cache_soc_map(.CLK(CLK),
			  .RST_N(RST_N),
			  .m_is_IO_addr_addr(cache_soc_map$m_is_IO_addr_addr),
			  .m_is_mem_addr_addr(cache_soc_map$m_is_mem_addr_addr),
			  .m_is_near_mem_IO_addr_addr(cache_soc_map$m_is_near_mem_IO_addr_addr),
			  .m_plic_addr_range(),
			  .m_near_mem_io_addr_range(),
			  .m_flash_mem_addr_range(),
			  .m_ethernet_0_addr_range(),
			  .m_dma_0_addr_range(),
			  .m_uart16550_0_addr_range(),
			  .m_gpio_0_addr_range(),
			  .m_boot_rom_addr_range(),
			  .m_ddr4_0_uncached_addr_range(),
			  .m_ddr4_0_cached_addr_range(),
			  .m_is_mem_addr(),
			  .m_is_IO_addr(),
			  .m_is_near_mem_IO_addr(),
			  .m_pc_reset_value(),
			  .m_mtvec_reset_value(),
			  .m_nmivec_reset_value());

  // rule RL_cache_rl_reset
  assign CAN_FIRE_RL_cache_rl_reset =
	     (cache_rg_cset_in_cache != 7'd127 ||
	      cache_f_reset_reqs$EMPTY_N && cache_f_reset_rsps$FULL_N) &&
	     cache_rg_state == 4'd1 ;
  assign WILL_FIRE_RL_cache_rl_reset = CAN_FIRE_RL_cache_rl_reset ;

  // rule RL_cache_rl_shift_sb_to_load_delay
  assign CAN_FIRE_RL_cache_rl_shift_sb_to_load_delay = 1'd1 ;
  assign WILL_FIRE_RL_cache_rl_shift_sb_to_load_delay = 1'd1 ;

  // rule RL_cache_rl_probe_and_immed_rsp
  assign CAN_FIRE_RL_cache_rl_probe_and_immed_rsp =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010 ||
	      IF_cache_rg_op_4_EQ_1_2_OR_cache_rg_op_4_EQ_2__ETC___d123) &&
	     cache_rg_state_9_EQ_3_25_AND_NOT_cache_rg_op_4_ETC___d134 ;
  assign WILL_FIRE_RL_cache_rl_probe_and_immed_rsp =
	     CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     !WILL_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_rereq
  assign CAN_FIRE_RL_cache_rl_rereq = cache_rg_state == 4'd10 ;
  assign WILL_FIRE_RL_cache_rl_rereq =
	     CAN_FIRE_RL_cache_rl_rereq &&
	     !WILL_FIRE_RL_cache_rl_start_reset &&
	     !EN_req ;

  // rule RL_cache_rl_ST_AMO_response
  assign CAN_FIRE_RL_cache_rl_ST_AMO_response = cache_rg_state == 4'd11 ;
  assign WILL_FIRE_RL_cache_rl_ST_AMO_response =
	     CAN_FIRE_RL_cache_rl_ST_AMO_response ;

  // rule RL_cache_rl_maintain_io_read_rsp
  assign CAN_FIRE_RL_cache_rl_maintain_io_read_rsp = cache_rg_state == 4'd14 ;
  assign WILL_FIRE_RL_cache_rl_maintain_io_read_rsp =
	     CAN_FIRE_RL_cache_rl_maintain_io_read_rsp ;

  // rule RL_cache_rl_io_write_req
  assign CAN_FIRE_RL_cache_rl_io_write_req =
	     !cache_master_xactor_clearing &&
	     !cache_master_xactor_shim_awff_rv[98] &&
	     !cache_master_xactor_shim_wff_rv[73] &&
	     cache_rg_state == 4'd12 &&
	     cache_rg_op == 2'd1 ;
  assign WILL_FIRE_RL_cache_rl_io_write_req =
	     CAN_FIRE_RL_cache_rl_io_write_req &&
	     !WILL_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_io_AMO_SC_req
  assign CAN_FIRE_RL_cache_rl_io_AMO_SC_req =
	     cache_rg_state == 4'd12 && cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00011 ;
  assign WILL_FIRE_RL_cache_rl_io_AMO_SC_req =
	     CAN_FIRE_RL_cache_rl_io_AMO_SC_req &&
	     !WILL_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_io_AMO_op_req
  assign CAN_FIRE_RL_cache_rl_io_AMO_op_req =
	     !cache_master_xactor_clearing &&
	     !cache_master_xactor_shim_arff_rv[98] &&
	     cache_rg_state == 4'd12 &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] != 5'b00010 &&
	     cache_rg_amo_funct7[6:2] != 5'b00011 ;
  assign WILL_FIRE_RL_cache_rl_io_AMO_op_req =
	     CAN_FIRE_RL_cache_rl_io_AMO_op_req &&
	     !WILL_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_drive_exception_rsp
  assign CAN_FIRE_RL_cache_rl_drive_exception_rsp = cache_rg_state == 4'd4 ;
  assign WILL_FIRE_RL_cache_rl_drive_exception_rsp = cache_rg_state == 4'd4 ;

  // rule RL_cache_master_xactor_ug_master_u_b_warnDoPut
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut =
	     cache_master_xactor_ug_master_u_b_putWire$whas &&
	     cache_master_xactor_shim_bff_rv[7] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut ;

  // rule RL_cache_master_xactor_ug_master_u_b_doPut
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut =
	     !cache_master_xactor_shim_bff_rv[7] &&
	     cache_master_xactor_ug_master_u_b_putWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut ;

  // rule RL_cache_master_xactor_ug_master_u_r_warnDoPut
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut =
	     cache_master_xactor_ug_master_u_r_putWire$whas &&
	     cache_master_xactor_shim_rff_rv[72] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut ;

  // rule RL_cache_master_xactor_ug_master_u_r_doPut
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut =
	     !cache_master_xactor_shim_rff_rv[72] &&
	     cache_master_xactor_ug_master_u_r_putWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut ;

  // rule RL_cache_rl_cache_refill_rsps_loop
  assign CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop =
	     !cache_master_xactor_clearing &&
	     cache_master_xactor_shim_rff_rv$port1__read[72] &&
	     cache_rg_state == 4'd9 ;
  assign WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop =
	     CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     !WILL_FIRE_RL_cache_rl_start_reset &&
	     !EN_req ;

  // rule RL_cache_rl_io_read_rsp
  assign CAN_FIRE_RL_cache_rl_io_read_rsp =
	     !cache_master_xactor_clearing &&
	     cache_master_xactor_shim_rff_rv$port1__read[72] &&
	     cache_rg_state == 4'd13 ;
  assign WILL_FIRE_RL_cache_rl_io_read_rsp =
	     CAN_FIRE_RL_cache_rl_io_read_rsp &&
	     !WILL_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_io_AMO_read_rsp
  assign CAN_FIRE_RL_cache_rl_io_AMO_read_rsp =
	     NOT_cache_master_xactor_clearing_0_5_AND_cache_ETC___d756 &&
	     cache_rg_state == 4'd15 ;
  assign WILL_FIRE_RL_cache_rl_io_AMO_read_rsp =
	     CAN_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     !WILL_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_start_cache_refill
  assign CAN_FIRE_RL_cache_rl_start_cache_refill =
	     !cache_master_xactor_clearing &&
	     !cache_master_xactor_shim_arff_rv[98] &&
	     cache_rg_state == 4'd8 &&
	     b__h22921 == 4'd0 ;
  assign WILL_FIRE_RL_cache_rl_start_cache_refill =
	     CAN_FIRE_RL_cache_rl_start_cache_refill &&
	     !WILL_FIRE_RL_cache_rl_start_reset &&
	     !EN_req ;

  // rule RL_cache_rl_io_read_req
  assign CAN_FIRE_RL_cache_rl_io_read_req =
	     !cache_master_xactor_clearing &&
	     !cache_master_xactor_shim_arff_rv[98] &&
	     cache_rg_state_9_EQ_12_17_AND_cache_rg_op_4_EQ_ETC___d619 ;
  assign WILL_FIRE_RL_cache_rl_io_read_req =
	     CAN_FIRE_RL_cache_rl_io_read_req &&
	     !WILL_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_discard_write_rsp
  assign CAN_FIRE_RL_cache_rl_discard_write_rsp =
	     !cache_master_xactor_clearing &&
	     cache_master_xactor_shim_bff_rv$port1__read[7] &&
	     b__h22921 != 4'd0 ;
  assign WILL_FIRE_RL_cache_rl_discard_write_rsp =
	     CAN_FIRE_RL_cache_rl_discard_write_rsp ;

  // rule RL_cache_rl_start_reset
  assign CAN_FIRE_RL_cache_rl_start_reset =
	     cache_f_reset_reqs$EMPTY_N &&
	     (cache_f_reset_reqs$D_OUT || !cache_master_xactor_clearing) &&
	     cache_rg_state != 4'd1 ;
  assign WILL_FIRE_RL_cache_rl_start_reset =
	     CAN_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_master_xactor_ug_master_u_aw_setPeek
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek =
	     cache_master_xactor_shim_awff_rv$port1__read[98] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek ;

  // rule RL_cache_master_xactor_ug_master_u_aw_warnDoDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop =
	     cache_master_xactor_ug_master_u_aw_dropWire$whas &&
	     !cache_master_xactor_shim_awff_rv$port1__read[98] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop ;

  // rule RL_cache_master_xactor_ug_master_u_aw_doDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop =
	     cache_master_xactor_shim_awff_rv$port1__read[98] &&
	     cache_master_xactor_ug_master_u_aw_dropWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop ;

  // rule RL_cache_master_xactor_ug_master_u_w_setPeek
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek =
	     cache_master_xactor_shim_wff_rv$port1__read[73] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek ;

  // rule RL_cache_master_xactor_ug_master_u_w_warnDoDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop =
	     cache_master_xactor_ug_master_u_w_dropWire$whas &&
	     !cache_master_xactor_shim_wff_rv$port1__read[73] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop ;

  // rule RL_cache_master_xactor_ug_master_u_w_doDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop =
	     cache_master_xactor_shim_wff_rv$port1__read[73] &&
	     cache_master_xactor_ug_master_u_w_dropWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop ;

  // rule RL_cache_master_xactor_ug_master_u_ar_setPeek
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek =
	     cache_master_xactor_shim_arff_rv$port1__read[98] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek ;

  // rule RL_cache_master_xactor_ug_master_u_ar_warnDoDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop =
	     cache_master_xactor_ug_master_u_ar_dropWire$whas &&
	     !cache_master_xactor_shim_arff_rv$port1__read[98] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop ;

  // rule RL_cache_master_xactor_ug_master_u_ar_doDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop =
	     cache_master_xactor_shim_arff_rv$port1__read[98] &&
	     cache_master_xactor_ug_master_u_ar_dropWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop ;

  // rule RL_cache_master_xactor_do_clear
  assign CAN_FIRE_RL_cache_master_xactor_do_clear =
	     cache_master_xactor_clearing ;
  assign WILL_FIRE_RL_cache_master_xactor_do_clear =
	     cache_master_xactor_clearing &&
	     !WILL_FIRE_RL_cache_rl_start_reset ;

  // inputs to muxes for submodule ports
  assign MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 ;
  assign MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d475 ;
  assign MUX_cache_dw_output_ld_val$wset_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 ;
  assign MUX_cache_dw_output_ld_val$wset_1__SEL_3 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d166 ;
  assign MUX_cache_dw_output_ld_val$wset_1__SEL_4 =
	     WILL_FIRE_RL_cache_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_ST_AMO_response ;
  assign MUX_cache_master_xactor_clearing$write_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_start_reset && !cache_f_reset_reqs$D_OUT ;
  assign MUX_cache_master_xactor_shim_arff_rv$port0__write_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_io_AMO_op_req ||
	     WILL_FIRE_RL_cache_rl_io_read_req ;
  assign MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 =
	     EN_req &&
	     req_f3_BITS_1_TO_0_30_EQ_0b0_31_OR_req_f3_BITS_ETC___d960 ;
  assign MUX_cache_ram_word64_set$a_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 ;
  assign MUX_cache_ram_word64_set$b_put_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_word64_set_in_cache[1:0] != 2'd3 ;
  assign MUX_cache_rg_error_during_refill$write_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 ;
  assign MUX_cache_rg_exc_code$write_1__SEL_1 =
	     EN_req &&
	     NOT_req_f3_BITS_1_TO_0_30_EQ_0b0_31_32_AND_NOT_ETC___d951 ;
  assign MUX_cache_rg_exc_code$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 ;
  assign MUX_cache_rg_exc_code$write_1__SEL_3 =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 ;
  assign MUX_cache_rg_ld_val$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     cache_rg_op_4_EQ_2_6_AND_cache_rg_amo_funct7_7_ETC___d328 ;
  assign MUX_cache_rg_lrsc_valid$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d162 ;
  assign MUX_cache_rg_state$write_1__SEL_7 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_word64_set_in_cache[1:0] == 2'd3 ;
  assign MUX_cache_rg_state$write_1__SEL_12 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     (cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d303 ||
	      NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d306) ;
  assign MUX_cache_rg_state$write_1__SEL_13 =
	     WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 7'd127 ;
  assign MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1 =
	     cache_ctr_wr_rsps_pending_crg + 4'd1 ;
  assign MUX_cache_dw_output_ld_val$wset_1__VAL_3 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) ?
	       new_value__h7143 :
	       new_value__h17241 ;
  assign MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_1 =
	     { 6'd32,
	       mem_req_wr_addr_awaddr__h29270,
	       8'd0,
	       size_val__h28732,
	       18'd65536 } ;
  assign MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_2 =
	     { 6'd32, cline_fabric_addr__h23020, 29'd7143424 } ;
  assign MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_1 =
	     { 6'd32,
	       mem_req_wr_addr_awaddr__h29270,
	       8'd0,
	       _theResult___snd_snd_val__h29437,
	       18'd65536 } ;
  assign MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_2 =
	     { 6'd32,
	       mem_req_wr_addr_awaddr__h22081,
	       8'd0,
	       _theResult___snd_snd_val__h29437,
	       18'd65536 } ;
  assign MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_1 =
	     { 1'd1,
	       mem_req_wr_data_wdata__h29489,
	       mem_req_wr_data_wstrb__h29490,
	       1'd1 } ;
  assign MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_2 =
	     { 1'd1,
	       IF_cache_rg_op_4_EQ_1_2_OR_cache_rg_op_4_EQ_2__ETC___d495,
	       mem_req_wr_data_wstrb__h22301,
	       1'd1 } ;
  assign MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_3 =
	     { 1'd1,
	       mem_req_wr_data_wdata__h27927,
	       mem_req_wr_data_wstrb__h29490,
	       1'd1 } ;
  assign MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1 =
	     { 3'd4, cache_rg_pa[31:12] } ;
  assign MUX_cache_ram_word64_set$a_put_3__VAL_2 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       IF_cache_rg_f3_67_EQ_0b0_68_THEN_IF_cache_rg_a_ETC___d390 :
	       IF_cache_rg_f3_67_EQ_0b0_68_THEN_IF_cache_rg_a_ETC___d464 ;
  assign MUX_cache_ram_word64_set$b_put_2__VAL_2 =
	     cache_rg_word64_set_in_cache + 9'd1 ;
  assign MUX_cache_ram_word64_set$b_put_2__VAL_4 =
	     { cache_rg_addr[11:5], 2'd0 } ;
  assign MUX_cache_rg_cset_in_cache$write_1__VAL_1 =
	     cache_rg_cset_in_cache + 7'd1 ;
  assign MUX_cache_rg_exc_code$write_1__VAL_1 =
	     (req_op == 2'd0) ? 4'd4 : 4'd6 ;
  assign MUX_cache_rg_ld_val$write_1__VAL_2 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       x__h14824 :
	       IF_cache_rg_f3_67_EQ_0b10_73_THEN_SEXT_IF_cach_ETC___d333 ;
  assign MUX_cache_rg_state$write_1__VAL_1 =
	     NOT_req_f3_BITS_1_TO_0_30_EQ_0b0_31_32_AND_NOT_ETC___d951 ?
	       4'd4 :
	       4'd3 ;
  assign MUX_cache_rg_state$write_1__VAL_5 =
	     (cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0) ?
	       4'd14 :
	       4'd4 ;
  assign MUX_cache_rg_state$write_1__VAL_7 =
	     (cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 ||
	      cache_rg_error_during_refill) ?
	       4'd4 :
	       4'd10 ;
  assign MUX_cache_rg_state$write_1__VAL_12 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) ?
	       4'd8 :
	       IF_cache_rg_op_4_EQ_1_2_OR_cache_rg_op_4_EQ_2__ETC___d309 ;

  // inlined wires
  assign cache_master_xactor_ug_master_u_b_putWire$wget =
	     { mem_master_bid, mem_master_bresp } ;
  assign cache_master_xactor_ug_master_u_b_putWire$whas =
	     mem_master_bvalid && !cache_master_xactor_shim_bff_rv[7] ;
  assign cache_master_xactor_ug_master_u_r_putWire$wget =
	     { mem_master_rid,
	       mem_master_rdata,
	       mem_master_rresp,
	       mem_master_rlast } ;
  assign cache_master_xactor_ug_master_u_r_putWire$whas =
	     mem_master_rvalid && !cache_master_xactor_shim_rff_rv[72] ;
  assign cache_dw_valid$whas =
	     (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp ||
	      WILL_FIRE_RL_cache_rl_io_read_rsp) &&
	     cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d166 ||
	     WILL_FIRE_RL_cache_rl_drive_exception_rsp ||
	     WILL_FIRE_RL_cache_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_ST_AMO_response ;
  assign cache_master_xactor_ug_master_u_aw_dropWire$whas =
	     cache_master_xactor_shim_awff_rv$port1__read[98] &&
	     mem_master_awready ;
  assign cache_master_xactor_ug_master_u_w_dropWire$whas =
	     cache_master_xactor_shim_wff_rv$port1__read[73] &&
	     mem_master_wready ;
  assign cache_master_xactor_ug_master_u_ar_dropWire$whas =
	     cache_master_xactor_shim_arff_rv$port1__read[98] &&
	     mem_master_arready ;
  assign cache_master_xactor_shim_awff_rv$EN_port0__write =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d475 ||
	     WILL_FIRE_RL_cache_rl_io_write_req ;
  always@(MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_1 or
	  MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2 or
	  MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_2 or
	  WILL_FIRE_RL_cache_rl_io_write_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  cache_master_xactor_shim_awff_rv$port0__write_1 =
	      MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_1;
      MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2:
	  cache_master_xactor_shim_awff_rv$port0__write_1 =
	      MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_2;
      WILL_FIRE_RL_cache_rl_io_write_req:
	  cache_master_xactor_shim_awff_rv$port0__write_1 =
	      MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_1;
      default: cache_master_xactor_shim_awff_rv$port0__write_1 =
		   99'h2AAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_master_xactor_shim_awff_rv$port1__read =
	     cache_master_xactor_shim_awff_rv$EN_port0__write ?
	       cache_master_xactor_shim_awff_rv$port0__write_1 :
	       cache_master_xactor_shim_awff_rv ;
  assign cache_master_xactor_shim_awff_rv$port2__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop ?
	       99'h2AAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_awff_rv$port1__read ;
  assign cache_master_xactor_shim_awff_rv$port3__read =
	     WILL_FIRE_RL_cache_master_xactor_do_clear ?
	       99'h2AAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_awff_rv$port2__read ;
  assign cache_master_xactor_shim_wff_rv$EN_port0__write =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d475 ||
	     WILL_FIRE_RL_cache_rl_io_write_req ;
  always@(MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_1 or
	  MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2 or
	  MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_2 or
	  WILL_FIRE_RL_cache_rl_io_write_req or
	  MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  cache_master_xactor_shim_wff_rv$port0__write_1 =
	      MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_1;
      MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2:
	  cache_master_xactor_shim_wff_rv$port0__write_1 =
	      MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_2;
      WILL_FIRE_RL_cache_rl_io_write_req:
	  cache_master_xactor_shim_wff_rv$port0__write_1 =
	      MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_3;
      default: cache_master_xactor_shim_wff_rv$port0__write_1 =
		   74'h2AAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_master_xactor_shim_wff_rv$port1__read =
	     cache_master_xactor_shim_wff_rv$EN_port0__write ?
	       cache_master_xactor_shim_wff_rv$port0__write_1 :
	       cache_master_xactor_shim_wff_rv ;
  assign cache_master_xactor_shim_wff_rv$port2__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop ?
	       74'h0AAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_wff_rv$port1__read ;
  assign cache_master_xactor_shim_wff_rv$port3__read =
	     WILL_FIRE_RL_cache_master_xactor_do_clear ?
	       74'h0AAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_wff_rv$port2__read ;
  assign cache_master_xactor_shim_bff_rv$port0__write_1 =
	     { 1'd1, cache_master_xactor_ug_master_u_b_putWire$wget } ;
  assign cache_master_xactor_shim_bff_rv$port1__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut ?
	       cache_master_xactor_shim_bff_rv$port0__write_1 :
	       cache_master_xactor_shim_bff_rv ;
  assign cache_master_xactor_shim_bff_rv$port2__read =
	     CAN_FIRE_RL_cache_rl_discard_write_rsp ?
	       8'd42 :
	       cache_master_xactor_shim_bff_rv$port1__read ;
  assign cache_master_xactor_shim_bff_rv$port3__read =
	     WILL_FIRE_RL_cache_master_xactor_do_clear ?
	       8'd42 :
	       cache_master_xactor_shim_bff_rv$port2__read ;
  assign cache_master_xactor_shim_arff_rv$EN_port0__write =
	     WILL_FIRE_RL_cache_rl_io_AMO_op_req ||
	     WILL_FIRE_RL_cache_rl_io_read_req ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;
  assign cache_master_xactor_shim_arff_rv$port0__write_1 =
	     MUX_cache_master_xactor_shim_arff_rv$port0__write_1__SEL_1 ?
	       MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_1 :
	       MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_2 ;
  assign cache_master_xactor_shim_arff_rv$port1__read =
	     cache_master_xactor_shim_arff_rv$EN_port0__write ?
	       cache_master_xactor_shim_arff_rv$port0__write_1 :
	       cache_master_xactor_shim_arff_rv ;
  assign cache_master_xactor_shim_arff_rv$port2__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop ?
	       99'h2AAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_arff_rv$port1__read ;
  assign cache_master_xactor_shim_arff_rv$port3__read =
	     WILL_FIRE_RL_cache_master_xactor_do_clear ?
	       99'h2AAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_arff_rv$port2__read ;
  assign cache_master_xactor_shim_rff_rv$port0__write_1 =
	     { 1'd1, cache_master_xactor_ug_master_u_r_putWire$wget } ;
  assign cache_master_xactor_shim_rff_rv$port1__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut ?
	       cache_master_xactor_shim_rff_rv$port0__write_1 :
	       cache_master_xactor_shim_rff_rv ;
  assign cache_master_xactor_shim_rff_rv$EN_port1__write =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop ;
  assign cache_master_xactor_shim_rff_rv$port2__read =
	     cache_master_xactor_shim_rff_rv$EN_port1__write ?
	       73'h0AAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_rff_rv$port1__read ;
  assign cache_master_xactor_shim_rff_rv$port3__read =
	     WILL_FIRE_RL_cache_master_xactor_do_clear ?
	       73'h0AAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_rff_rv$port2__read ;
  assign cache_ctr_wr_rsps_pending_crg$EN_port0__write =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d475 ||
	     WILL_FIRE_RL_cache_rl_io_write_req ;
  always@(MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1 or
	  MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2 or
	  WILL_FIRE_RL_cache_rl_io_write_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  cache_ctr_wr_rsps_pending_crg$port0__write_1 =
	      MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1;
      MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2:
	  cache_ctr_wr_rsps_pending_crg$port0__write_1 =
	      MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1;
      WILL_FIRE_RL_cache_rl_io_write_req:
	  cache_ctr_wr_rsps_pending_crg$port0__write_1 =
	      MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1;
      default: cache_ctr_wr_rsps_pending_crg$port0__write_1 =
		   4'b1010 /* unspecified value */ ;
    endcase
  end
  assign cache_ctr_wr_rsps_pending_crg$port1__write_1 = b__h22921 - 4'd1 ;
  assign cache_ctr_wr_rsps_pending_crg$port2__read =
	     CAN_FIRE_RL_cache_rl_discard_write_rsp ?
	       cache_ctr_wr_rsps_pending_crg$port1__write_1 :
	       b__h22921 ;
  assign cache_ctr_wr_rsps_pending_crg$port3__read =
	     MUX_cache_master_xactor_clearing$write_1__SEL_1 ?
	       4'd0 :
	       cache_ctr_wr_rsps_pending_crg$port2__read ;
  assign cache_crg_sb_to_load_delay$port0__write_1 =
	     { 1'd0, cache_crg_sb_to_load_delay[10:1] } ;
  assign cache_crg_sb_to_load_delay$EN_port1__write =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     cache_rg_op_4_EQ_1_2_OR_cache_rg_op_4_EQ_2_6_A_ETC___d471 ;
  assign cache_crg_sb_to_load_delay$port2__read =
	     cache_crg_sb_to_load_delay$EN_port1__write ?
	       11'd2047 :
	       cache_crg_sb_to_load_delay$port0__write_1 ;

  // register cache_cfg_verbosity
  assign cache_cfg_verbosity$D_IN = set_verbosity_verbosity ;
  assign cache_cfg_verbosity$EN = EN_set_verbosity ;

  // register cache_crg_sb_to_load_delay
  assign cache_crg_sb_to_load_delay$D_IN =
	     cache_crg_sb_to_load_delay$port2__read ;
  assign cache_crg_sb_to_load_delay$EN = 1'b1 ;

  // register cache_ctr_wr_rsps_pending_crg
  assign cache_ctr_wr_rsps_pending_crg$D_IN =
	     cache_ctr_wr_rsps_pending_crg$port3__read ;
  assign cache_ctr_wr_rsps_pending_crg$EN = 1'b1 ;

  // register cache_master_xactor_clearing
  assign cache_master_xactor_clearing$D_IN =
	     MUX_cache_master_xactor_clearing$write_1__SEL_1 ;
  assign cache_master_xactor_clearing$EN =
	     WILL_FIRE_RL_cache_rl_start_reset && !cache_f_reset_reqs$D_OUT ||
	     WILL_FIRE_RL_cache_master_xactor_do_clear ;

  // register cache_master_xactor_shim_arff_rv
  assign cache_master_xactor_shim_arff_rv$D_IN =
	     cache_master_xactor_shim_arff_rv$port3__read ;
  assign cache_master_xactor_shim_arff_rv$EN = 1'b1 ;

  // register cache_master_xactor_shim_awff_rv
  assign cache_master_xactor_shim_awff_rv$D_IN =
	     cache_master_xactor_shim_awff_rv$port3__read ;
  assign cache_master_xactor_shim_awff_rv$EN = 1'b1 ;

  // register cache_master_xactor_shim_bff_rv
  assign cache_master_xactor_shim_bff_rv$D_IN =
	     cache_master_xactor_shim_bff_rv$port3__read ;
  assign cache_master_xactor_shim_bff_rv$EN = 1'b1 ;

  // register cache_master_xactor_shim_rff_rv
  assign cache_master_xactor_shim_rff_rv$D_IN =
	     cache_master_xactor_shim_rff_rv$port3__read ;
  assign cache_master_xactor_shim_rff_rv$EN = 1'b1 ;

  // register cache_master_xactor_shim_wff_rv
  assign cache_master_xactor_shim_wff_rv$D_IN =
	     cache_master_xactor_shim_wff_rv$port3__read ;
  assign cache_master_xactor_shim_wff_rv$EN = 1'b1 ;

  // register cache_rg_addr
  assign cache_rg_addr$D_IN = req_addr ;
  assign cache_rg_addr$EN = EN_req ;

  // register cache_rg_amo_funct7
  assign cache_rg_amo_funct7$D_IN = req_amo_funct7 ;
  assign cache_rg_amo_funct7$EN = EN_req ;

  // register cache_rg_cset_in_cache
  assign cache_rg_cset_in_cache$D_IN =
	     WILL_FIRE_RL_cache_rl_reset ?
	       MUX_cache_rg_cset_in_cache$write_1__VAL_1 :
	       7'd0 ;
  assign cache_rg_cset_in_cache$EN =
	     WILL_FIRE_RL_cache_rl_reset ||
	     WILL_FIRE_RL_cache_rl_start_reset ;

  // register cache_rg_error_during_refill
  assign cache_rg_error_during_refill$D_IN =
	     MUX_cache_rg_error_during_refill$write_1__SEL_1 ;
  assign cache_rg_error_during_refill$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // register cache_rg_exc_code
  always@(MUX_cache_rg_exc_code$write_1__SEL_1 or
	  MUX_cache_rg_exc_code$write_1__VAL_1 or
	  MUX_cache_rg_exc_code$write_1__SEL_2 or
	  MUX_cache_rg_exc_code$write_1__SEL_3 or
	  MUX_cache_rg_error_during_refill$write_1__SEL_1)
  case (1'b1)
    MUX_cache_rg_exc_code$write_1__SEL_1:
	cache_rg_exc_code$D_IN = MUX_cache_rg_exc_code$write_1__VAL_1;
    MUX_cache_rg_exc_code$write_1__SEL_2: cache_rg_exc_code$D_IN = 4'd7;
    MUX_cache_rg_exc_code$write_1__SEL_3: cache_rg_exc_code$D_IN = 4'd5;
    MUX_cache_rg_error_during_refill$write_1__SEL_1:
	cache_rg_exc_code$D_IN = 4'd1;
    default: cache_rg_exc_code$D_IN = 4'b1010 /* unspecified value */ ;
  endcase
  assign cache_rg_exc_code$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 ||
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 ||
	     EN_req &&
	     NOT_req_f3_BITS_1_TO_0_30_EQ_0b0_31_32_AND_NOT_ETC___d951 ;

  // register cache_rg_f3
  assign cache_rg_f3$D_IN = req_f3 ;
  assign cache_rg_f3$EN = EN_req ;

  // register cache_rg_ld_val
  always@(MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  new_ld_val__h29218 or
	  MUX_cache_rg_ld_val$write_1__SEL_2 or
	  MUX_cache_rg_ld_val$write_1__VAL_2 or
	  WILL_FIRE_RL_cache_rl_io_read_rsp or
	  ld_val__h26311 or WILL_FIRE_RL_cache_rl_io_AMO_SC_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  cache_rg_ld_val$D_IN = new_ld_val__h29218;
      MUX_cache_rg_ld_val$write_1__SEL_2:
	  cache_rg_ld_val$D_IN = MUX_cache_rg_ld_val$write_1__VAL_2;
      WILL_FIRE_RL_cache_rl_io_read_rsp:
	  cache_rg_ld_val$D_IN = ld_val__h26311;
      WILL_FIRE_RL_cache_rl_io_AMO_SC_req: cache_rg_ld_val$D_IN = 64'd1;
      default: cache_rg_ld_val$D_IN =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_rg_ld_val$EN =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     cache_rg_op_4_EQ_2_6_AND_cache_rg_amo_funct7_7_ETC___d328 ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_io_AMO_SC_req ;

  // register cache_rg_lower_word32
  assign cache_rg_lower_word32$D_IN = 32'h0 ;
  assign cache_rg_lower_word32$EN = 1'b0 ;

  // register cache_rg_lower_word32_full
  assign cache_rg_lower_word32_full$D_IN = 1'd0 ;
  assign cache_rg_lower_word32_full$EN =
	     WILL_FIRE_RL_cache_rl_start_cache_refill ||
	     WILL_FIRE_RL_cache_rl_start_reset ;

  // register cache_rg_lrsc_pa
  assign cache_rg_lrsc_pa$D_IN = cache_rg_addr ;
  assign cache_rg_lrsc_pa$EN =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00010 &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__13_BITS__ETC___d119 ;

  // register cache_rg_lrsc_valid
  assign cache_rg_lrsc_valid$D_IN =
	     MUX_cache_rg_lrsc_valid$write_1__SEL_2 &&
	     cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d163 ;
  assign cache_rg_lrsc_valid$EN =
	     WILL_FIRE_RL_cache_rl_io_read_req && cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00010 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d162 ||
	     WILL_FIRE_RL_cache_rl_start_reset ;

  // register cache_rg_op
  assign cache_rg_op$D_IN = req_op ;
  assign cache_rg_op$EN = EN_req ;

  // register cache_rg_pa
  assign cache_rg_pa$D_IN = EN_req ? req_addr : cache_rg_addr ;
  assign cache_rg_pa$EN =
	     EN_req || WILL_FIRE_RL_cache_rl_probe_and_immed_rsp ;

  // register cache_rg_pte_pa
  assign cache_rg_pte_pa$D_IN = 32'h0 ;
  assign cache_rg_pte_pa$EN = 1'b0 ;

  // register cache_rg_st_amo_val
  assign cache_rg_st_amo_val$D_IN =
	     EN_req ? req_st_value : new_st_val__h19205 ;
  assign cache_rg_st_amo_val$EN =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d337 ||
	     EN_req ;

  // register cache_rg_state
  always@(EN_req or
	  MUX_cache_rg_state$write_1__VAL_1 or
	  WILL_FIRE_RL_cache_rl_start_reset or
	  WILL_FIRE_RL_cache_rl_io_read_req or
	  WILL_FIRE_RL_cache_rl_start_cache_refill or
	  WILL_FIRE_RL_cache_rl_io_AMO_read_rsp or
	  MUX_cache_rg_state$write_1__VAL_5 or
	  WILL_FIRE_RL_cache_rl_io_read_rsp or
	  MUX_cache_rg_state$write_1__SEL_7 or
	  MUX_cache_rg_state$write_1__VAL_7 or
	  WILL_FIRE_RL_cache_rl_io_AMO_op_req or
	  WILL_FIRE_RL_cache_rl_io_AMO_SC_req or
	  WILL_FIRE_RL_cache_rl_io_write_req or
	  WILL_FIRE_RL_cache_rl_rereq or
	  MUX_cache_rg_state$write_1__SEL_12 or
	  MUX_cache_rg_state$write_1__VAL_12 or
	  MUX_cache_rg_state$write_1__SEL_13)
  case (1'b1)
    EN_req: cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_1;
    WILL_FIRE_RL_cache_rl_start_reset: cache_rg_state$D_IN = 4'd1;
    WILL_FIRE_RL_cache_rl_io_read_req: cache_rg_state$D_IN = 4'd13;
    WILL_FIRE_RL_cache_rl_start_cache_refill: cache_rg_state$D_IN = 4'd9;
    WILL_FIRE_RL_cache_rl_io_AMO_read_rsp:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_5;
    WILL_FIRE_RL_cache_rl_io_read_rsp:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_5;
    MUX_cache_rg_state$write_1__SEL_7:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_7;
    WILL_FIRE_RL_cache_rl_io_AMO_op_req: cache_rg_state$D_IN = 4'd15;
    WILL_FIRE_RL_cache_rl_io_AMO_SC_req || WILL_FIRE_RL_cache_rl_io_write_req:
	cache_rg_state$D_IN = 4'd11;
    WILL_FIRE_RL_cache_rl_rereq: cache_rg_state$D_IN = 4'd3;
    MUX_cache_rg_state$write_1__SEL_12:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_12;
    MUX_cache_rg_state$write_1__SEL_13: cache_rg_state$D_IN = 4'd2;
    default: cache_rg_state$D_IN = 4'b1010 /* unspecified value */ ;
  endcase
  assign cache_rg_state$EN =
	     WILL_FIRE_RL_cache_rl_reset &&
	     cache_rg_cset_in_cache == 7'd127 ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_word64_set_in_cache[1:0] == 2'd3 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     (cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d303 ||
	      NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d306) ||
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp ||
	     EN_req ||
	     WILL_FIRE_RL_cache_rl_start_reset ||
	     WILL_FIRE_RL_cache_rl_rereq ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ||
	     WILL_FIRE_RL_cache_rl_io_AMO_SC_req ||
	     WILL_FIRE_RL_cache_rl_io_write_req ||
	     WILL_FIRE_RL_cache_rl_io_read_req ||
	     WILL_FIRE_RL_cache_rl_io_AMO_op_req ;

  // register cache_rg_word64_set_in_cache
  assign cache_rg_word64_set_in_cache$D_IN =
	     MUX_cache_ram_word64_set$b_put_1__SEL_2 ?
	       MUX_cache_ram_word64_set$b_put_2__VAL_2 :
	       MUX_cache_ram_word64_set$b_put_2__VAL_4 ;
  assign cache_rg_word64_set_in_cache$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_word64_set_in_cache[1:0] != 2'd3 ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // submodule cache_f_reset_reqs
  assign cache_f_reset_reqs$D_IN = !EN_server_reset_request_put ;
  assign cache_f_reset_reqs$ENQ =
	     EN_server_reset_request_put || EN_server_flush_request_put ;
  assign cache_f_reset_reqs$DEQ = MUX_cache_rg_state$write_1__SEL_13 ;
  assign cache_f_reset_reqs$CLR = 1'b0 ;

  // submodule cache_f_reset_rsps
  assign cache_f_reset_rsps$D_IN = cache_f_reset_reqs$D_OUT ;
  assign cache_f_reset_rsps$ENQ = MUX_cache_rg_state$write_1__SEL_13 ;
  assign cache_f_reset_rsps$DEQ =
	     EN_server_flush_response_get || EN_server_reset_response_get ;
  assign cache_f_reset_rsps$CLR = 1'b0 ;

  // submodule cache_ram_state_and_ctag_cset
  assign cache_ram_state_and_ctag_cset$ADDRA =
	     WILL_FIRE_RL_cache_rl_start_cache_refill ?
	       cache_rg_addr[11:5] :
	       cache_rg_cset_in_cache ;
  assign cache_ram_state_and_ctag_cset$ADDRB =
	     MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       req_addr[11:5] :
	       cache_rg_addr[11:5] ;
  assign cache_ram_state_and_ctag_cset$DIA =
	     WILL_FIRE_RL_cache_rl_start_cache_refill ?
	       MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1 :
	       23'd2796202 ;
  assign cache_ram_state_and_ctag_cset$DIB =
	     MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       23'b01010101010101010101010 /* unspecified value */  :
	       23'b01010101010101010101010 /* unspecified value */  ;
  assign cache_ram_state_and_ctag_cset$WEA = 1'd1 ;
  assign cache_ram_state_and_ctag_cset$WEB = 1'd0 ;
  assign cache_ram_state_and_ctag_cset$ENA =
	     WILL_FIRE_RL_cache_rl_start_cache_refill ||
	     WILL_FIRE_RL_cache_rl_reset ;
  assign cache_ram_state_and_ctag_cset$ENB =
	     EN_req &&
	     req_f3_BITS_1_TO_0_30_EQ_0b0_31_OR_req_f3_BITS_ETC___d960 ||
	     WILL_FIRE_RL_cache_rl_rereq ;

  // submodule cache_ram_word64_set
  assign cache_ram_word64_set$ADDRA =
	     MUX_cache_ram_word64_set$a_put_1__SEL_1 ?
	       cache_rg_word64_set_in_cache :
	       cache_rg_addr[11:3] ;
  always@(MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  req_addr or
	  MUX_cache_ram_word64_set$b_put_1__SEL_2 or
	  MUX_cache_ram_word64_set$b_put_2__VAL_2 or
	  WILL_FIRE_RL_cache_rl_rereq or
	  cache_rg_addr or
	  WILL_FIRE_RL_cache_rl_start_cache_refill or
	  MUX_cache_ram_word64_set$b_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  cache_ram_word64_set$ADDRB = req_addr[11:3];
      MUX_cache_ram_word64_set$b_put_1__SEL_2:
	  cache_ram_word64_set$ADDRB =
	      MUX_cache_ram_word64_set$b_put_2__VAL_2;
      WILL_FIRE_RL_cache_rl_rereq:
	  cache_ram_word64_set$ADDRB = cache_rg_addr[11:3];
      WILL_FIRE_RL_cache_rl_start_cache_refill:
	  cache_ram_word64_set$ADDRB =
	      MUX_cache_ram_word64_set$b_put_2__VAL_4;
      default: cache_ram_word64_set$ADDRB =
		   9'b010101010 /* unspecified value */ ;
    endcase
  end
  assign cache_ram_word64_set$DIA =
	     MUX_cache_ram_word64_set$a_put_1__SEL_1 ?
	       cache_master_xactor_shim_rff_rv$port1__read[66:3] :
	       MUX_cache_ram_word64_set$a_put_3__VAL_2 ;
  always@(MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  MUX_cache_ram_word64_set$b_put_1__SEL_2 or
	  WILL_FIRE_RL_cache_rl_rereq or
	  WILL_FIRE_RL_cache_rl_start_cache_refill)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  cache_ram_word64_set$DIB =
	      64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      MUX_cache_ram_word64_set$b_put_1__SEL_2:
	  cache_ram_word64_set$DIB =
	      64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_cache_rl_rereq:
	  cache_ram_word64_set$DIB =
	      64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_cache_rl_start_cache_refill:
	  cache_ram_word64_set$DIB =
	      64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      default: cache_ram_word64_set$DIB =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_ram_word64_set$WEA = 1'd1 ;
  assign cache_ram_word64_set$WEB = 1'd0 ;
  assign cache_ram_word64_set$ENA =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     cache_rg_op_4_EQ_1_2_OR_cache_rg_op_4_EQ_2_6_A_ETC___d338 ;
  assign cache_ram_word64_set$ENB =
	     EN_req &&
	     req_f3_BITS_1_TO_0_30_EQ_0b0_31_OR_req_f3_BITS_ETC___d960 ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_word64_set_in_cache[1:0] != 2'd3 ||
	     WILL_FIRE_RL_cache_rl_rereq ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // submodule cache_soc_map
  assign cache_soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign cache_soc_map$m_is_mem_addr_addr = 64'h0 ;
  assign cache_soc_map$m_is_near_mem_IO_addr_addr = 64'h0 ;

  // remaining internal signals
  assign IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d286 =
	     (cache_rg_addr[2:0] == 3'h0) ? word64__h6962 : 64'd0 ;
  assign IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d300 =
	     (cache_rg_addr[2:0] == 3'h0) ? 64'd1 : 64'd0 ;
  assign IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d833 =
	     (cache_rg_addr[2:0] == 3'h0) ? ld_val__h26311 : 64'd0 ;
  assign IF_cache_rg_f3_67_EQ_0b10_73_THEN_SEXT_cache_r_ETC___d396 =
	     (cache_rg_f3 == 3'b010) ? b__h31468 : cache_rg_st_amo_val ;
  assign IF_cache_rg_op_4_EQ_1_2_OR_cache_rg_op_4_EQ_2__ETC___d123 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       cache_rg_op_4_EQ_2_6_AND_cache_rg_amo_funct7_7_ETC___d112 :
	       NOT_cache_ram_state_and_ctag_cset_b_read__13_B_ETC___d122 ;
  assign IF_cache_rg_op_4_EQ_1_2_OR_cache_rg_op_4_EQ_2__ETC___d309 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       4'd11 :
	       ((!cache_ram_state_and_ctag_cset$DOB[22] ||
		 !cache_ram_state_and_ctag_cset_b_read__13_BITS__ETC___d119) ?
		  4'd8 :
		  4'd11) ;
  assign IF_cache_rg_op_4_EQ_1_2_OR_cache_rg_op_4_EQ_2__ETC___d495 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       mem_req_wr_data_wdata__h18665 :
	       mem_req_wr_data_wdata__h22300 ;
  assign NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 =
	     cache_cfg_verbosity > 4'd1 ;
  assign NOT_cache_cfg_verbosity_read__5_ULE_2_74___d575 =
	     cache_cfg_verbosity > 4'd2 ;
  assign NOT_cache_master_xactor_clearing_0_5_AND_cache_ETC___d756 =
	     !cache_master_xactor_clearing &&
	     cache_master_xactor_shim_rff_rv$port1__read[72] &&
	     (cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 ||
	      !cache_master_xactor_shim_awff_rv[98] &&
	      !cache_master_xactor_shim_wff_rv[73]) ;
  assign NOT_cache_ram_state_and_ctag_cset_b_read__13_B_ETC___d122 =
	     !cache_ram_state_and_ctag_cset$DOB[22] ||
	     !cache_ram_state_and_ctag_cset_b_read__13_BITS__ETC___d119 ||
	     !cache_master_xactor_clearing &&
	     !cache_master_xactor_shim_awff_rv[98] &&
	     !cache_master_xactor_shim_wff_rv[73] ;
  assign NOT_cache_ram_state_and_ctag_cset_b_read__13_B_ETC___d148 =
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__13_BITS__ETC___d119) &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00010 &&
	     cache_rg_addr_9_EQ_cache_rg_lrsc_pa_8___d146 ;
  assign NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d306 =
	     cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_8_EQ_cache_rg_addr_9___d100) ;
  assign NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d475 =
	     cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     (cache_rg_op_4_EQ_1_2_OR_cache_rg_op_4_EQ_2_6_A_ETC___d473 ||
	      NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d337) ;
  assign NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d519 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_cache_rg_op_4_EQ_2_6_27_OR_NOT_cache_rg_am_ETC___d517 ;
  assign NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d525 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_cache_rg_op_4_EQ_2_6_27_OR_NOT_cache_rg_am_ETC___d523 ;
  assign NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d529 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_cache_rg_op_4_EQ_2_6_27_OR_NOT_cache_rg_am_ETC___d527 ;
  assign NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d159 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__13_BITS__ETC___d119 &&
	     cache_rg_addr_9_EQ_cache_rg_lrsc_pa_8___d146 ;
  assign NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d337 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__13_BITS__ETC___d119 ;
  assign NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d470 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__13_BITS__ETC___d119 &&
	     (cache_rg_f3 == 3'b0 || cache_rg_f3 == 3'b001) ;
  assign NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d537 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__13_BITS__ETC___d119) &&
	     NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 ;
  assign NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d539 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__13_BITS__ETC___d119 &&
	     NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 ;
  assign NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d542 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__13_BITS__ETC___d119 &&
	     cache_ctr_wr_rsps_pending_crg == 4'd15 ;
  assign NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d547 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__13_BITS__ETC___d119 &&
	     cache_rg_addr_9_EQ_cache_rg_lrsc_pa_8___d146 &&
	     NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 ;
  assign NOT_cache_rg_op_4_EQ_2_6_27_OR_NOT_cache_rg_am_ETC___d335 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_8_EQ_cache_rg_addr_9___d100) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__13_BITS__ETC___d119 ;
  assign NOT_cache_rg_op_4_EQ_2_6_27_OR_NOT_cache_rg_am_ETC___d468 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_8_EQ_cache_rg_addr_9___d100) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__13_BITS__ETC___d119 &&
	     (cache_rg_f3 == 3'b0 || cache_rg_f3 == 3'b001) ;
  assign NOT_cache_rg_op_4_EQ_2_6_27_OR_NOT_cache_rg_am_ETC___d517 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_8_EQ_cache_rg_addr_9___d100) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__13_BITS__ETC___d119 &&
	     NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 ;
  assign NOT_cache_rg_op_4_EQ_2_6_27_OR_NOT_cache_rg_am_ETC___d520 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_8_EQ_cache_rg_addr_9___d100) &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__13_BITS__ETC___d119) &&
	     NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 ;
  assign NOT_cache_rg_op_4_EQ_2_6_27_OR_NOT_cache_rg_am_ETC___d523 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_8_EQ_cache_rg_addr_9___d100) &&
	     NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 ;
  assign NOT_cache_rg_op_4_EQ_2_6_27_OR_NOT_cache_rg_am_ETC___d527 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_8_EQ_cache_rg_addr_9___d100) &&
	     cache_ctr_wr_rsps_pending_crg == 4'd15 ;
  assign NOT_req_f3_BITS_1_TO_0_30_EQ_0b0_31_32_AND_NOT_ETC___d951 =
	     req_f3[1:0] != 2'b0 && (req_f3[1:0] != 2'b01 || req_addr[0]) &&
	     (req_f3[1:0] != 2'b10 || req_addr[1:0] != 2'b0) &&
	     (req_f3[1:0] != 2'b11 || req_addr[2:0] != 3'b0) ;
  assign _theResult___fst__h18531 =
	     cache_rg_st_amo_val << shift_bits__h22087 ;
  assign _theResult___fst__h22233 = new_st_val__h19205 << shift_bits__h22087 ;
  assign _theResult___fst__h27860 =
	     cache_rg_st_amo_val << shift_bits__h29276 ;
  assign _theResult___fst__h29422 = st_val__h29230 << shift_bits__h29276 ;
  assign b__h19609 =
	     { {32{new_value143_BITS_31_TO_0__q17[31]}},
	       new_value143_BITS_31_TO_0__q17 } ;
  assign b__h22921 =
	     cache_ctr_wr_rsps_pending_crg$EN_port0__write ?
	       cache_ctr_wr_rsps_pending_crg$port0__write_1 :
	       cache_ctr_wr_rsps_pending_crg ;
  assign b__h29633 =
	     { {32{w19505_BITS_31_TO_0__q51[31]}},
	       w19505_BITS_31_TO_0__q51 } ;
  assign b__h31468 =
	     { {32{cache_rg_st_amo_val_BITS_31_TO_0__q1[31]}},
	       cache_rg_st_amo_val_BITS_31_TO_0__q1 } ;
  assign cache_master_xactor_shim_arff_rvport1__read_B_ETC__q54 =
	     cache_master_xactor_shim_arff_rv$port1__read[97:0] ;
  assign cache_master_xactor_shim_awff_rvport1__read_B_ETC__q52 =
	     cache_master_xactor_shim_awff_rv$port1__read[97:0] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q20 =
	     cache_master_xactor_shim_rff_rv$port1__read[10:3] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q21 =
	     cache_master_xactor_shim_rff_rv$port1__read[18:3] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q22 =
	     cache_master_xactor_shim_rff_rv$port1__read[34:3] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q23 =
	     cache_master_xactor_shim_rff_rv$port1__read[18:11] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q24 =
	     cache_master_xactor_shim_rff_rv$port1__read[26:19] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q25 =
	     cache_master_xactor_shim_rff_rv$port1__read[34:19] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q26 =
	     cache_master_xactor_shim_rff_rv$port1__read[34:27] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q27 =
	     cache_master_xactor_shim_rff_rv$port1__read[42:35] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q28 =
	     cache_master_xactor_shim_rff_rv$port1__read[50:35] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q29 =
	     cache_master_xactor_shim_rff_rv$port1__read[66:35] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q30 =
	     cache_master_xactor_shim_rff_rv$port1__read[50:43] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q31 =
	     cache_master_xactor_shim_rff_rv$port1__read[58:51] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q32 =
	     cache_master_xactor_shim_rff_rv$port1__read[66:51] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q33 =
	     cache_master_xactor_shim_rff_rv$port1__read[66:59] ;
  assign cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q53 =
	     cache_master_xactor_shim_wff_rv$port1__read[72:0] ;
  assign cache_ram_state_and_ctag_cset_b_read__13_BITS__ETC___d119 =
	     cache_ram_state_and_ctag_cset$DOB[21:0] == pa_ctag__h6858 ;
  assign cache_ram_state_and_ctag_cset_b_read__13_BIT_2_ETC___d149 =
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__13_BITS__ETC___d119 &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00010 ||
	     NOT_cache_ram_state_and_ctag_cset_b_read__13_B_ETC___d148 ;
  assign cache_rg_addr_9_EQ_cache_rg_lrsc_pa_8___d146 =
	     cache_rg_addr == cache_rg_lrsc_pa ;
  assign cache_rg_amo_funct7_7_BITS_6_TO_2_8_EQ_0b10_9__ETC___d325 =
	     cache_rg_amo_funct7[6:2] == 5'b00010 &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__13_BITS__ETC___d119) &&
	     cache_rg_addr_9_EQ_cache_rg_lrsc_pa_8___d146 &&
	     NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 ;
  assign cache_rg_lrsc_pa_8_EQ_cache_rg_addr_9___d100 =
	     cache_rg_lrsc_pa == cache_rg_addr ;
  assign cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d162 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     cache_ram_state_and_ctag_cset_b_read__13_BIT_2_ETC___d149 ||
	     cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     cache_rg_op_4_EQ_1_2_OR_cache_rg_op_4_EQ_2_6_A_ETC___d160 ;
  assign cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d163 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__13_BITS__ETC___d119 ;
  assign cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d166 =
	     cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d163 ||
	     cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h14814 ;
  assign cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d303 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__13_BITS__ETC___d119) ;
  assign cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d312 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__13_BITS__ETC___d119 &&
	     NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 ;
  assign cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d322 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__13_BITS__ETC___d119) &&
	     NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 ;
  assign cache_rg_op_4_EQ_1_2_OR_cache_rg_op_4_EQ_2_6_A_ETC___d160 =
	     cache_rg_op == 2'd1 &&
	     cache_rg_addr_9_EQ_cache_rg_lrsc_pa_8___d146 ||
	     cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011 ||
	     NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d159 ;
  assign cache_rg_op_4_EQ_1_2_OR_cache_rg_op_4_EQ_2_6_A_ETC___d338 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_cache_rg_op_4_EQ_2_6_27_OR_NOT_cache_rg_am_ETC___d335 ||
	     NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d337 ;
  assign cache_rg_op_4_EQ_1_2_OR_cache_rg_op_4_EQ_2_6_A_ETC___d471 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_cache_rg_op_4_EQ_2_6_27_OR_NOT_cache_rg_am_ETC___d468 ||
	     NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d470 ;
  assign cache_rg_op_4_EQ_1_2_OR_cache_rg_op_4_EQ_2_6_A_ETC___d473 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_8_EQ_cache_rg_addr_9___d100) ;
  assign cache_rg_op_4_EQ_2_6_AND_cache_rg_amo_funct7_7_ETC___d112 =
	     cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h14814 ||
	     !cache_master_xactor_clearing &&
	     !cache_master_xactor_shim_awff_rv[98] &&
	     !cache_master_xactor_shim_wff_rv[73] ;
  assign cache_rg_op_4_EQ_2_6_AND_cache_rg_amo_funct7_7_ETC___d328 =
	     cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011 ||
	     cache_rg_op != 2'd1 && cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__13_BITS__ETC___d119 ;
  assign cache_rg_op_4_EQ_2_6_AND_cache_rg_amo_funct7_7_ETC___d534 =
	     cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h14814 &&
	     NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 ;
  assign cache_rg_st_amo_val_BITS_31_TO_0__q1 = cache_rg_st_amo_val[31:0] ;
  assign cache_rg_state_9_EQ_12_17_AND_cache_rg_op_4_EQ_ETC___d619 =
	     cache_rg_state == 4'd12 &&
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     b__h22921 == 4'd0 ;
  assign cache_rg_state_9_EQ_3_25_AND_NOT_cache_rg_op_4_ETC___d134 =
	     cache_rg_state == 4'd3 &&
	     (cache_rg_op != 2'd0 &&
	      (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) ||
	      cache_crg_sb_to_load_delay$port0__write_1 == 11'd0) ;
  assign cline_addr__h23019 = { cache_rg_pa[31:5], 5'd0 } ;
  assign cline_fabric_addr__h23020 = { 32'd0, cline_addr__h23019 } ;
  assign ld_val6311_BITS_15_TO_0__q37 = ld_val__h26311[15:0] ;
  assign ld_val6311_BITS_15_TO_8__q39 = ld_val__h26311[15:8] ;
  assign ld_val6311_BITS_23_TO_16__q40 = ld_val__h26311[23:16] ;
  assign ld_val6311_BITS_31_TO_0__q38 = ld_val__h26311[31:0] ;
  assign ld_val6311_BITS_31_TO_16__q41 = ld_val__h26311[31:16] ;
  assign ld_val6311_BITS_31_TO_24__q42 = ld_val__h26311[31:24] ;
  assign ld_val6311_BITS_39_TO_32__q43 = ld_val__h26311[39:32] ;
  assign ld_val6311_BITS_47_TO_32__q44 = ld_val__h26311[47:32] ;
  assign ld_val6311_BITS_47_TO_40__q46 = ld_val__h26311[47:40] ;
  assign ld_val6311_BITS_55_TO_48__q47 = ld_val__h26311[55:48] ;
  assign ld_val6311_BITS_63_TO_32__q45 = ld_val__h26311[63:32] ;
  assign ld_val6311_BITS_63_TO_48__q48 = ld_val__h26311[63:48] ;
  assign ld_val6311_BITS_63_TO_56__q49 = ld_val__h26311[63:56] ;
  assign ld_val6311_BITS_7_TO_0__q36 = ld_val__h26311[7:0] ;
  assign lrsc_result__h14814 =
	     !cache_rg_lrsc_valid ||
	     !cache_rg_lrsc_pa_8_EQ_cache_rg_addr_9___d100 ;
  assign mem_req_wr_addr_awaddr__h22081 = { 32'd0, cache_rg_addr } ;
  assign mem_req_wr_addr_awaddr__h29270 = { 32'd0, cache_rg_pa } ;
  assign new_st_val__h19205 =
	     (cache_rg_f3 == 3'b010) ?
	       new_st_val__h19500 :
	       _theResult_____2__h19493 ;
  assign new_st_val__h19500 = { 32'd0, _theResult_____2__h19493[31:0] } ;
  assign new_st_val__h19601 =
	     IF_cache_rg_f3_67_EQ_0b10_73_THEN_SEXT_IF_cach_ETC___d333 +
	     IF_cache_rg_f3_67_EQ_0b10_73_THEN_SEXT_cache_r_ETC___d396 ;
  assign new_st_val__h20594 = w1__h19485 ^ w2__h29511 ;
  assign new_st_val__h20599 = w1__h19485 & w2__h29511 ;
  assign new_st_val__h20604 = w1__h19485 | w2__h29511 ;
  assign new_st_val__h20609 =
	     (w1__h19485 < w2__h29511) ? w1__h19485 : w2__h29511 ;
  assign new_st_val__h20617 =
	     (w1__h19485 <= w2__h29511) ? w2__h29511 : w1__h19485 ;
  assign new_st_val__h20626 =
	     ((IF_cache_rg_f3_67_EQ_0b10_73_THEN_SEXT_IF_cach_ETC___d333 ^
	       64'h8000000000000000) <
	      (IF_cache_rg_f3_67_EQ_0b10_73_THEN_SEXT_cache_r_ETC___d396 ^
	       64'h8000000000000000)) ?
	       w1__h19485 :
	       w2__h29511 ;
  assign new_st_val__h20634 =
	     ((IF_cache_rg_f3_67_EQ_0b10_73_THEN_SEXT_IF_cach_ETC___d333 ^
	       64'h8000000000000000) <=
	      (IF_cache_rg_f3_67_EQ_0b10_73_THEN_SEXT_cache_r_ETC___d396 ^
	       64'h8000000000000000)) ?
	       w2__h29511 :
	       w1__h19485 ;
  assign new_st_val__h29524 = { 32'd0, _theResult_____2__h29517[31:0] } ;
  assign new_st_val__h29625 =
	     new_ld_val__h29218 +
	     IF_cache_rg_f3_67_EQ_0b10_73_THEN_SEXT_cache_r_ETC___d396 ;
  assign new_st_val__h31498 = w1__h29509 ^ w2__h29511 ;
  assign new_st_val__h31503 = w1__h29509 & w2__h29511 ;
  assign new_st_val__h31508 = w1__h29509 | w2__h29511 ;
  assign new_st_val__h31513 =
	     (w1__h29509 < w2__h29511) ? w1__h29509 : w2__h29511 ;
  assign new_st_val__h31521 =
	     (w1__h29509 <= w2__h29511) ? w2__h29511 : w1__h29509 ;
  assign new_st_val__h31530 =
	     ((new_ld_val__h29218 ^ 64'h8000000000000000) <
	      (IF_cache_rg_f3_67_EQ_0b10_73_THEN_SEXT_cache_r_ETC___d396 ^
	       64'h8000000000000000)) ?
	       w1__h29509 :
	       w2__h29511 ;
  assign new_st_val__h31538 =
	     ((new_ld_val__h29218 ^ 64'h8000000000000000) <=
	      (IF_cache_rg_f3_67_EQ_0b10_73_THEN_SEXT_cache_r_ETC___d396 ^
	       64'h8000000000000000)) ?
	       w2__h29511 :
	       w1__h29509 ;
  assign new_value143_BITS_31_TO_0__q17 = new_value__h7143[31:0] ;
  assign pa_ctag__h6858 = { 2'd0, cache_rg_addr[31:12] } ;
  assign req_f3_BITS_1_TO_0_30_EQ_0b0_31_OR_req_f3_BITS_ETC___d960 =
	     req_f3[1:0] == 2'b0 || req_f3[1:0] == 2'b01 && !req_addr[0] ||
	     req_f3[1:0] == 2'b10 && req_addr[1:0] == 2'b0 ||
	     req_f3[1:0] == 2'b11 && req_addr[2:0] == 3'b0 ;
  assign result__h13554 =
	     { {56{word64962_BITS_15_TO_8__q5[7]}},
	       word64962_BITS_15_TO_8__q5 } ;
  assign result__h13582 =
	     { {56{word64962_BITS_23_TO_16__q6[7]}},
	       word64962_BITS_23_TO_16__q6 } ;
  assign result__h13610 =
	     { {56{word64962_BITS_31_TO_24__q8[7]}},
	       word64962_BITS_31_TO_24__q8 } ;
  assign result__h13638 =
	     { {56{word64962_BITS_39_TO_32__q9[7]}},
	       word64962_BITS_39_TO_32__q9 } ;
  assign result__h13666 =
	     { {56{word64962_BITS_47_TO_40__q12[7]}},
	       word64962_BITS_47_TO_40__q12 } ;
  assign result__h13694 =
	     { {56{word64962_BITS_55_TO_48__q13[7]}},
	       word64962_BITS_55_TO_48__q13 } ;
  assign result__h13722 =
	     { {56{word64962_BITS_63_TO_56__q15[7]}},
	       word64962_BITS_63_TO_56__q15 } ;
  assign result__h13767 = { 56'd0, word64__h6962[7:0] } ;
  assign result__h13795 = { 56'd0, word64__h6962[15:8] } ;
  assign result__h13823 = { 56'd0, word64__h6962[23:16] } ;
  assign result__h13851 = { 56'd0, word64__h6962[31:24] } ;
  assign result__h13879 = { 56'd0, word64__h6962[39:32] } ;
  assign result__h13907 = { 56'd0, word64__h6962[47:40] } ;
  assign result__h13935 = { 56'd0, word64__h6962[55:48] } ;
  assign result__h13963 = { 56'd0, word64__h6962[63:56] } ;
  assign result__h14008 =
	     { {48{word64962_BITS_15_TO_0__q3[15]}},
	       word64962_BITS_15_TO_0__q3 } ;
  assign result__h14036 =
	     { {48{word64962_BITS_31_TO_16__q7[15]}},
	       word64962_BITS_31_TO_16__q7 } ;
  assign result__h14064 =
	     { {48{word64962_BITS_47_TO_32__q10[15]}},
	       word64962_BITS_47_TO_32__q10 } ;
  assign result__h14092 =
	     { {48{word64962_BITS_63_TO_48__q14[15]}},
	       word64962_BITS_63_TO_48__q14 } ;
  assign result__h14133 = { 48'd0, word64__h6962[15:0] } ;
  assign result__h14161 = { 48'd0, word64__h6962[31:16] } ;
  assign result__h14189 = { 48'd0, word64__h6962[47:32] } ;
  assign result__h14217 = { 48'd0, word64__h6962[63:48] } ;
  assign result__h14258 =
	     { {32{word64962_BITS_31_TO_0__q4[31]}},
	       word64962_BITS_31_TO_0__q4 } ;
  assign result__h14286 =
	     { {32{word64962_BITS_63_TO_32__q11[31]}},
	       word64962_BITS_63_TO_32__q11 } ;
  assign result__h14325 = { 32'd0, word64__h6962[31:0] } ;
  assign result__h14353 = { 32'd0, word64__h6962[63:32] } ;
  assign result__h26371 =
	     { {56{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q20[7]}},
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q20 } ;
  assign result__h26401 =
	     { {56{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q23[7]}},
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q23 } ;
  assign result__h26428 =
	     { {56{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q24[7]}},
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q24 } ;
  assign result__h26455 =
	     { {56{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q26[7]}},
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q26 } ;
  assign result__h26482 =
	     { {56{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q27[7]}},
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q27 } ;
  assign result__h26509 =
	     { {56{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q30[7]}},
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q30 } ;
  assign result__h26536 =
	     { {56{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q31[7]}},
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q31 } ;
  assign result__h26563 =
	     { {56{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q33[7]}},
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q33 } ;
  assign result__h26607 =
	     { 56'd0, cache_master_xactor_shim_rff_rv$port1__read[10:3] } ;
  assign result__h26634 =
	     { 56'd0, cache_master_xactor_shim_rff_rv$port1__read[18:11] } ;
  assign result__h26661 =
	     { 56'd0, cache_master_xactor_shim_rff_rv$port1__read[26:19] } ;
  assign result__h26688 =
	     { 56'd0, cache_master_xactor_shim_rff_rv$port1__read[34:27] } ;
  assign result__h26715 =
	     { 56'd0, cache_master_xactor_shim_rff_rv$port1__read[42:35] } ;
  assign result__h26742 =
	     { 56'd0, cache_master_xactor_shim_rff_rv$port1__read[50:43] } ;
  assign result__h26769 =
	     { 56'd0, cache_master_xactor_shim_rff_rv$port1__read[58:51] } ;
  assign result__h26796 =
	     { 56'd0, cache_master_xactor_shim_rff_rv$port1__read[66:59] } ;
  assign result__h26840 =
	     { {48{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q21[15]}},
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q21 } ;
  assign result__h26867 =
	     { {48{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q25[15]}},
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q25 } ;
  assign result__h26894 =
	     { {48{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q28[15]}},
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q28 } ;
  assign result__h26921 =
	     { {48{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q32[15]}},
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q32 } ;
  assign result__h26961 =
	     { 48'd0, cache_master_xactor_shim_rff_rv$port1__read[18:3] } ;
  assign result__h26988 =
	     { 48'd0, cache_master_xactor_shim_rff_rv$port1__read[34:19] } ;
  assign result__h27015 =
	     { 48'd0, cache_master_xactor_shim_rff_rv$port1__read[50:35] } ;
  assign result__h27042 =
	     { 48'd0, cache_master_xactor_shim_rff_rv$port1__read[66:51] } ;
  assign result__h27082 =
	     { {32{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q22[31]}},
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q22 } ;
  assign result__h27109 =
	     { {32{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q29[31]}},
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q29 } ;
  assign result__h27147 =
	     { 32'd0, cache_master_xactor_shim_rff_rv$port1__read[34:3] } ;
  assign result__h27174 =
	     { 32'd0, cache_master_xactor_shim_rff_rv$port1__read[66:35] } ;
  assign result__h29722 =
	     { {56{ld_val6311_BITS_7_TO_0__q36[7]}},
	       ld_val6311_BITS_7_TO_0__q36 } ;
  assign result__h30630 =
	     { {56{ld_val6311_BITS_15_TO_8__q39[7]}},
	       ld_val6311_BITS_15_TO_8__q39 } ;
  assign result__h30658 =
	     { {56{ld_val6311_BITS_23_TO_16__q40[7]}},
	       ld_val6311_BITS_23_TO_16__q40 } ;
  assign result__h30686 =
	     { {56{ld_val6311_BITS_31_TO_24__q42[7]}},
	       ld_val6311_BITS_31_TO_24__q42 } ;
  assign result__h30714 =
	     { {56{ld_val6311_BITS_39_TO_32__q43[7]}},
	       ld_val6311_BITS_39_TO_32__q43 } ;
  assign result__h30742 =
	     { {56{ld_val6311_BITS_47_TO_40__q46[7]}},
	       ld_val6311_BITS_47_TO_40__q46 } ;
  assign result__h30770 =
	     { {56{ld_val6311_BITS_55_TO_48__q47[7]}},
	       ld_val6311_BITS_55_TO_48__q47 } ;
  assign result__h30798 =
	     { {56{ld_val6311_BITS_63_TO_56__q49[7]}},
	       ld_val6311_BITS_63_TO_56__q49 } ;
  assign result__h30843 = { 56'd0, ld_val__h26311[7:0] } ;
  assign result__h30871 = { 56'd0, ld_val__h26311[15:8] } ;
  assign result__h30899 = { 56'd0, ld_val__h26311[23:16] } ;
  assign result__h30927 = { 56'd0, ld_val__h26311[31:24] } ;
  assign result__h30955 = { 56'd0, ld_val__h26311[39:32] } ;
  assign result__h30983 = { 56'd0, ld_val__h26311[47:40] } ;
  assign result__h31011 = { 56'd0, ld_val__h26311[55:48] } ;
  assign result__h31039 = { 56'd0, ld_val__h26311[63:56] } ;
  assign result__h31084 =
	     { {48{ld_val6311_BITS_15_TO_0__q37[15]}},
	       ld_val6311_BITS_15_TO_0__q37 } ;
  assign result__h31112 =
	     { {48{ld_val6311_BITS_31_TO_16__q41[15]}},
	       ld_val6311_BITS_31_TO_16__q41 } ;
  assign result__h31140 =
	     { {48{ld_val6311_BITS_47_TO_32__q44[15]}},
	       ld_val6311_BITS_47_TO_32__q44 } ;
  assign result__h31168 =
	     { {48{ld_val6311_BITS_63_TO_48__q48[15]}},
	       ld_val6311_BITS_63_TO_48__q48 } ;
  assign result__h31209 = { 48'd0, ld_val__h26311[15:0] } ;
  assign result__h31237 = { 48'd0, ld_val__h26311[31:16] } ;
  assign result__h31265 = { 48'd0, ld_val__h26311[47:32] } ;
  assign result__h31293 = { 48'd0, ld_val__h26311[63:48] } ;
  assign result__h31334 =
	     { {32{ld_val6311_BITS_31_TO_0__q38[31]}},
	       ld_val6311_BITS_31_TO_0__q38 } ;
  assign result__h31362 =
	     { {32{ld_val6311_BITS_63_TO_32__q45[31]}},
	       ld_val6311_BITS_63_TO_32__q45 } ;
  assign result__h31401 = { 32'd0, ld_val__h26311[31:0] } ;
  assign result__h31429 = { 32'd0, ld_val__h26311[63:32] } ;
  assign result__h7198 =
	     { {56{word64962_BITS_7_TO_0__q2[7]}},
	       word64962_BITS_7_TO_0__q2 } ;
  assign shift_bits__h22087 = { cache_rg_addr[2:0], 3'b0 } ;
  assign shift_bits__h29276 = { cache_rg_pa[2:0], 3'b0 } ;
  assign st_val__h29230 =
	     (cache_rg_f3 == 3'b010) ?
	       new_st_val__h29524 :
	       _theResult_____2__h29517 ;
  assign strobe64__h22231 = 8'b00000001 << cache_rg_addr[2:0] ;
  assign strobe64__h22235 = 8'b00000011 << cache_rg_addr[2:0] ;
  assign strobe64__h22239 = 8'b00001111 << cache_rg_addr[2:0] ;
  assign strobe64__h29420 = 8'b00000001 << cache_rg_pa[2:0] ;
  assign strobe64__h29424 = 8'b00000011 << cache_rg_pa[2:0] ;
  assign strobe64__h29428 = 8'b00001111 << cache_rg_pa[2:0] ;
  assign w19505_BITS_31_TO_0__q51 = w1__h29505[31:0] ;
  assign w1___1__h19567 = { 32'd0, new_value__h7143[31:0] } ;
  assign w1___1__h29591 = { 32'd0, w1__h29505[31:0] } ;
  assign w2___1__h29592 = { 32'd0, cache_rg_st_amo_val[31:0] } ;
  assign w2__h29511 =
	     (cache_rg_f3 == 3'b010) ? w2___1__h29592 : cache_rg_st_amo_val ;
  assign word64962_BITS_15_TO_0__q3 = word64__h6962[15:0] ;
  assign word64962_BITS_15_TO_8__q5 = word64__h6962[15:8] ;
  assign word64962_BITS_23_TO_16__q6 = word64__h6962[23:16] ;
  assign word64962_BITS_31_TO_0__q4 = word64__h6962[31:0] ;
  assign word64962_BITS_31_TO_16__q7 = word64__h6962[31:16] ;
  assign word64962_BITS_31_TO_24__q8 = word64__h6962[31:24] ;
  assign word64962_BITS_39_TO_32__q9 = word64__h6962[39:32] ;
  assign word64962_BITS_47_TO_32__q10 = word64__h6962[47:32] ;
  assign word64962_BITS_47_TO_40__q12 = word64__h6962[47:40] ;
  assign word64962_BITS_55_TO_48__q13 = word64__h6962[55:48] ;
  assign word64962_BITS_63_TO_32__q11 = word64__h6962[63:32] ;
  assign word64962_BITS_63_TO_48__q14 = word64__h6962[63:48] ;
  assign word64962_BITS_63_TO_56__q15 = word64__h6962[63:56] ;
  assign word64962_BITS_7_TO_0__q2 = word64__h6962[7:0] ;
  assign word64__h6962 = cache_ram_word64_set$DOB & y__h7234 ;
  assign x__h14824 = { 63'd0, lrsc_result__h14814 } ;
  assign y__h7234 =
	     {64{cache_ram_state_and_ctag_cset$DOB[22] &&
		 cache_ram_state_and_ctag_cset_b_read__13_BITS__ETC___d119}} ;
  always@(cache_rg_f3)
  begin
    case (cache_rg_f3[1:0])
      2'b0: size_val__h28732 = 3'b0;
      2'b01: size_val__h28732 = 3'b001;
      2'b10: size_val__h28732 = 3'b010;
      2'd3: size_val__h28732 = 3'b011;
    endcase
  end
  always@(cache_rg_f3)
  begin
    case (cache_rg_f3[1:0])
      2'b0: _theResult___snd_snd_val__h29437 = 3'b0;
      2'b01: _theResult___snd_snd_val__h29437 = 3'b001;
      2'b10: _theResult___snd_snd_val__h29437 = 3'b010;
      2'b11: _theResult___snd_snd_val__h29437 = 3'b011;
    endcase
  end
  always@(cache_rg_f3 or
	  strobe64__h22231 or strobe64__h22235 or strobe64__h22239)
  begin
    case (cache_rg_f3[1:0])
      2'b0: mem_req_wr_data_wstrb__h22301 = strobe64__h22231;
      2'b01: mem_req_wr_data_wstrb__h22301 = strobe64__h22235;
      2'b10: mem_req_wr_data_wstrb__h22301 = strobe64__h22239;
      2'b11: mem_req_wr_data_wstrb__h22301 = 8'b11111111;
    endcase
  end
  always@(cache_rg_f3 or
	  strobe64__h29420 or strobe64__h29424 or strobe64__h29428)
  begin
    case (cache_rg_f3[1:0])
      2'b0: mem_req_wr_data_wstrb__h29490 = strobe64__h29420;
      2'b01: mem_req_wr_data_wstrb__h29490 = strobe64__h29424;
      2'b10: mem_req_wr_data_wstrb__h29490 = strobe64__h29428;
      2'b11: mem_req_wr_data_wstrb__h29490 = 8'b11111111;
    endcase
  end
  always@(cache_rg_f3 or cache_rg_st_amo_val or _theResult___fst__h27860)
  begin
    case (cache_rg_f3[1:0])
      2'b0, 2'b01, 2'b10:
	  mem_req_wr_data_wdata__h27927 = _theResult___fst__h27860;
      2'd3: mem_req_wr_data_wdata__h27927 = cache_rg_st_amo_val;
    endcase
  end
  always@(cache_rg_f3 or cache_rg_st_amo_val or _theResult___fst__h18531)
  begin
    case (cache_rg_f3[1:0])
      2'b0, 2'b01, 2'b10:
	  mem_req_wr_data_wdata__h18665 = _theResult___fst__h18531;
      2'd3: mem_req_wr_data_wdata__h18665 = cache_rg_st_amo_val;
    endcase
  end
  always@(cache_rg_addr or
	  result__h7198 or
	  result__h13554 or
	  result__h13582 or
	  result__h13610 or
	  result__h13638 or
	  result__h13666 or result__h13694 or result__h13722)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d233 =
	      result__h7198;
      3'h1:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d233 =
	      result__h13554;
      3'h2:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d233 =
	      result__h13582;
      3'h3:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d233 =
	      result__h13610;
      3'h4:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d233 =
	      result__h13638;
      3'h5:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d233 =
	      result__h13666;
      3'h6:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d233 =
	      result__h13694;
      3'h7:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d233 =
	      result__h13722;
    endcase
  end
  always@(cache_rg_addr or
	  result__h13767 or
	  result__h13795 or
	  result__h13823 or
	  result__h13851 or
	  result__h13879 or
	  result__h13907 or result__h13935 or result__h13963)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d250 =
	      result__h13767;
      3'h1:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d250 =
	      result__h13795;
      3'h2:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d250 =
	      result__h13823;
      3'h3:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d250 =
	      result__h13851;
      3'h4:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d250 =
	      result__h13879;
      3'h5:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d250 =
	      result__h13907;
      3'h6:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d250 =
	      result__h13935;
      3'h7:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d250 =
	      result__h13963;
    endcase
  end
  always@(cache_rg_addr or
	  result__h14008 or
	  result__h14036 or result__h14064 or result__h14092)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d263 =
	      result__h14008;
      3'h2:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d263 =
	      result__h14036;
      3'h4:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d263 =
	      result__h14064;
      3'h6:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d263 =
	      result__h14092;
      default: IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d263 =
		   64'd0;
    endcase
  end
  always@(cache_rg_addr or result__h14325 or result__h14353)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d284 =
	      result__h14325;
      3'h4:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d284 =
	      result__h14353;
      default: IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d284 =
		   64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h14133 or
	  result__h14161 or result__h14189 or result__h14217)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d272 =
	      result__h14133;
      3'h2:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d272 =
	      result__h14161;
      3'h4:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d272 =
	      result__h14189;
      3'h6:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d272 =
	      result__h14217;
      default: IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d272 =
		   64'd0;
    endcase
  end
  always@(cache_rg_addr or result__h14258 or result__h14286)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_result4258__ETC__q16 =
	      result__h14258;
      3'h4:
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_result4258__ETC__q16 =
	      result__h14286;
      default: CASE_cache_rg_addr_BITS_2_TO_0_0x0_result4258__ETC__q16 =
		   64'd0;
    endcase
  end
  always@(cache_rg_f3 or
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d233 or
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d263 or
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_result4258__ETC__q16 or
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d286 or
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d250 or
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d272 or
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d284)
  begin
    case (cache_rg_f3)
      3'b0:
	  new_value__h7143 =
	      IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d233;
      3'b001:
	  new_value__h7143 =
	      IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d263;
      3'b010:
	  new_value__h7143 =
	      CASE_cache_rg_addr_BITS_2_TO_0_0x0_result4258__ETC__q16;
      3'b011:
	  new_value__h7143 =
	      IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d286;
      3'b100:
	  new_value__h7143 =
	      IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d250;
      3'b101:
	  new_value__h7143 =
	      IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d272;
      3'b110:
	  new_value__h7143 =
	      IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d284;
      3'd7: new_value__h7143 = 64'd0;
    endcase
  end
  always@(cache_rg_f3 or
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d233 or
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d263 or
	  w1___1__h19567 or
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d286 or
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d250 or
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d272 or
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d284)
  begin
    case (cache_rg_f3)
      3'b0:
	  w1__h19485 =
	      IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d233;
      3'b001:
	  w1__h19485 =
	      IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d263;
      3'b010: w1__h19485 = w1___1__h19567;
      3'b011:
	  w1__h19485 =
	      IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d286;
      3'b100:
	  w1__h19485 =
	      IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d250;
      3'b101:
	  w1__h19485 =
	      IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d272;
      3'b110:
	  w1__h19485 =
	      IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d284;
      3'd7: w1__h19485 = 64'd0;
    endcase
  end
  always@(cache_rg_addr or cache_ram_word64_set$DOB or cache_rg_st_amo_val)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d381 =
	      { cache_ram_word64_set$DOB[63:16], cache_rg_st_amo_val[15:0] };
      3'h2:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d381 =
	      { cache_ram_word64_set$DOB[63:32],
		cache_rg_st_amo_val[15:0],
		cache_ram_word64_set$DOB[15:0] };
      3'h4:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d381 =
	      { cache_ram_word64_set$DOB[63:48],
		cache_rg_st_amo_val[15:0],
		cache_ram_word64_set$DOB[31:0] };
      3'h6:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d381 =
	      { cache_rg_st_amo_val[15:0], cache_ram_word64_set$DOB[47:0] };
      default: IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d381 =
		   cache_ram_word64_set$DOB;
    endcase
  end
  always@(cache_rg_addr or cache_ram_word64_set$DOB or cache_rg_st_amo_val)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d372 =
	      { cache_ram_word64_set$DOB[63:8], cache_rg_st_amo_val[7:0] };
      3'h1:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d372 =
	      { cache_ram_word64_set$DOB[63:16],
		cache_rg_st_amo_val[7:0],
		cache_ram_word64_set$DOB[7:0] };
      3'h2:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d372 =
	      { cache_ram_word64_set$DOB[63:24],
		cache_rg_st_amo_val[7:0],
		cache_ram_word64_set$DOB[15:0] };
      3'h3:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d372 =
	      { cache_ram_word64_set$DOB[63:32],
		cache_rg_st_amo_val[7:0],
		cache_ram_word64_set$DOB[23:0] };
      3'h4:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d372 =
	      { cache_ram_word64_set$DOB[63:40],
		cache_rg_st_amo_val[7:0],
		cache_ram_word64_set$DOB[31:0] };
      3'h5:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d372 =
	      { cache_ram_word64_set$DOB[63:48],
		cache_rg_st_amo_val[7:0],
		cache_ram_word64_set$DOB[39:0] };
      3'h6:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d372 =
	      { cache_ram_word64_set$DOB[63:56],
		cache_rg_st_amo_val[7:0],
		cache_ram_word64_set$DOB[47:0] };
      3'h7:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d372 =
	      { cache_rg_st_amo_val[7:0], cache_ram_word64_set$DOB[55:0] };
    endcase
  end
  always@(cache_rg_f3 or
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d233 or
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d263 or
	  b__h19609 or
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d286 or
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d250 or
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d272 or
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d284)
  begin
    case (cache_rg_f3)
      3'b0:
	  IF_cache_rg_f3_67_EQ_0b10_73_THEN_SEXT_IF_cach_ETC___d333 =
	      IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d233;
      3'b001:
	  IF_cache_rg_f3_67_EQ_0b10_73_THEN_SEXT_IF_cach_ETC___d333 =
	      IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d263;
      3'b010:
	  IF_cache_rg_f3_67_EQ_0b10_73_THEN_SEXT_IF_cach_ETC___d333 =
	      b__h19609;
      3'b011:
	  IF_cache_rg_f3_67_EQ_0b10_73_THEN_SEXT_IF_cach_ETC___d333 =
	      IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d286;
      3'b100:
	  IF_cache_rg_f3_67_EQ_0b10_73_THEN_SEXT_IF_cach_ETC___d333 =
	      IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d250;
      3'b101:
	  IF_cache_rg_f3_67_EQ_0b10_73_THEN_SEXT_IF_cach_ETC___d333 =
	      IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d272;
      3'b110:
	  IF_cache_rg_f3_67_EQ_0b10_73_THEN_SEXT_IF_cach_ETC___d333 =
	      IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d284;
      3'd7: IF_cache_rg_f3_67_EQ_0b10_73_THEN_SEXT_IF_cach_ETC___d333 = 64'd0;
    endcase
  end
  always@(cache_rg_amo_funct7 or
	  new_st_val__h20634 or
	  new_st_val__h19601 or
	  w2__h29511 or
	  new_st_val__h20594 or
	  new_st_val__h20604 or
	  new_st_val__h20599 or
	  new_st_val__h20626 or new_st_val__h20609 or new_st_val__h20617)
  begin
    case (cache_rg_amo_funct7[6:2])
      5'b0: _theResult_____2__h19493 = new_st_val__h19601;
      5'b00001: _theResult_____2__h19493 = w2__h29511;
      5'b00100: _theResult_____2__h19493 = new_st_val__h20594;
      5'b01000: _theResult_____2__h19493 = new_st_val__h20604;
      5'b01100: _theResult_____2__h19493 = new_st_val__h20599;
      5'b10000: _theResult_____2__h19493 = new_st_val__h20626;
      5'b11000: _theResult_____2__h19493 = new_st_val__h20609;
      5'b11100: _theResult_____2__h19493 = new_st_val__h20617;
      default: _theResult_____2__h19493 = new_st_val__h20634;
    endcase
  end
  always@(cache_rg_f3 or new_st_val__h19205 or _theResult___fst__h22233)
  begin
    case (cache_rg_f3[1:0])
      2'b0, 2'b01, 2'b10:
	  mem_req_wr_data_wdata__h22300 = _theResult___fst__h22233;
      2'd3: mem_req_wr_data_wdata__h22300 = new_st_val__h19205;
    endcase
  end
  always@(cache_rg_addr or cache_ram_word64_set$DOB or new_st_val__h19205)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d455 =
	      { cache_ram_word64_set$DOB[63:16], new_st_val__h19205[15:0] };
      3'h2:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d455 =
	      { cache_ram_word64_set$DOB[63:32],
		new_st_val__h19205[15:0],
		cache_ram_word64_set$DOB[15:0] };
      3'h4:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d455 =
	      { cache_ram_word64_set$DOB[63:48],
		new_st_val__h19205[15:0],
		cache_ram_word64_set$DOB[31:0] };
      3'h6:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d455 =
	      { new_st_val__h19205[15:0], cache_ram_word64_set$DOB[47:0] };
      default: IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d455 =
		   cache_ram_word64_set$DOB;
    endcase
  end
  always@(cache_rg_addr or cache_ram_word64_set$DOB or new_st_val__h19205)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d446 =
	      { cache_ram_word64_set$DOB[63:8], new_st_val__h19205[7:0] };
      3'h1:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d446 =
	      { cache_ram_word64_set$DOB[63:16],
		new_st_val__h19205[7:0],
		cache_ram_word64_set$DOB[7:0] };
      3'h2:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d446 =
	      { cache_ram_word64_set$DOB[63:24],
		new_st_val__h19205[7:0],
		cache_ram_word64_set$DOB[15:0] };
      3'h3:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d446 =
	      { cache_ram_word64_set$DOB[63:32],
		new_st_val__h19205[7:0],
		cache_ram_word64_set$DOB[23:0] };
      3'h4:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d446 =
	      { cache_ram_word64_set$DOB[63:40],
		new_st_val__h19205[7:0],
		cache_ram_word64_set$DOB[31:0] };
      3'h5:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d446 =
	      { cache_ram_word64_set$DOB[63:48],
		new_st_val__h19205[7:0],
		cache_ram_word64_set$DOB[39:0] };
      3'h6:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d446 =
	      { cache_ram_word64_set$DOB[63:56],
		new_st_val__h19205[7:0],
		cache_ram_word64_set$DOB[47:0] };
      3'h7:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d446 =
	      { new_st_val__h19205[7:0], cache_ram_word64_set$DOB[55:0] };
    endcase
  end
  always@(cache_rg_addr or cache_ram_word64_set$DOB or cache_rg_st_amo_val)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_cache_ram_w_ETC__q18 =
	      { cache_ram_word64_set$DOB[63:32], cache_rg_st_amo_val[31:0] };
      3'h4:
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_cache_ram_w_ETC__q18 =
	      { cache_rg_st_amo_val[31:0], cache_ram_word64_set$DOB[31:0] };
      default: CASE_cache_rg_addr_BITS_2_TO_0_0x0_cache_ram_w_ETC__q18 =
		   cache_ram_word64_set$DOB;
    endcase
  end
  always@(cache_rg_f3 or
	  cache_ram_word64_set$DOB or
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d372 or
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d381 or
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_cache_ram_w_ETC__q18 or
	  cache_rg_st_amo_val)
  begin
    case (cache_rg_f3)
      3'b0:
	  IF_cache_rg_f3_67_EQ_0b0_68_THEN_IF_cache_rg_a_ETC___d390 =
	      IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d372;
      3'b001:
	  IF_cache_rg_f3_67_EQ_0b0_68_THEN_IF_cache_rg_a_ETC___d390 =
	      IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d381;
      3'b010:
	  IF_cache_rg_f3_67_EQ_0b0_68_THEN_IF_cache_rg_a_ETC___d390 =
	      CASE_cache_rg_addr_BITS_2_TO_0_0x0_cache_ram_w_ETC__q18;
      3'b011:
	  IF_cache_rg_f3_67_EQ_0b0_68_THEN_IF_cache_rg_a_ETC___d390 =
	      cache_rg_st_amo_val;
      default: IF_cache_rg_f3_67_EQ_0b0_68_THEN_IF_cache_rg_a_ETC___d390 =
		   cache_ram_word64_set$DOB;
    endcase
  end
  always@(cache_rg_addr or cache_ram_word64_set$DOB or new_st_val__h19205)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_cache_ram_w_ETC__q19 =
	      { cache_ram_word64_set$DOB[63:32], new_st_val__h19205[31:0] };
      3'h4:
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_cache_ram_w_ETC__q19 =
	      { new_st_val__h19205[31:0], cache_ram_word64_set$DOB[31:0] };
      default: CASE_cache_rg_addr_BITS_2_TO_0_0x0_cache_ram_w_ETC__q19 =
		   cache_ram_word64_set$DOB;
    endcase
  end
  always@(cache_rg_f3 or
	  cache_ram_word64_set$DOB or
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d446 or
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d455 or
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_cache_ram_w_ETC__q19 or
	  new_st_val__h19205)
  begin
    case (cache_rg_f3)
      3'b0:
	  IF_cache_rg_f3_67_EQ_0b0_68_THEN_IF_cache_rg_a_ETC___d464 =
	      IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d446;
      3'b001:
	  IF_cache_rg_f3_67_EQ_0b0_68_THEN_IF_cache_rg_a_ETC___d464 =
	      IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d455;
      3'b010:
	  IF_cache_rg_f3_67_EQ_0b0_68_THEN_IF_cache_rg_a_ETC___d464 =
	      CASE_cache_rg_addr_BITS_2_TO_0_0x0_cache_ram_w_ETC__q19;
      3'b011:
	  IF_cache_rg_f3_67_EQ_0b0_68_THEN_IF_cache_rg_a_ETC___d464 =
	      new_st_val__h19205;
      default: IF_cache_rg_f3_67_EQ_0b0_68_THEN_IF_cache_rg_a_ETC___d464 =
		   cache_ram_word64_set$DOB;
    endcase
  end
  always@(cache_rg_f3 or
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d300)
  begin
    case (cache_rg_f3)
      3'b0, 3'b001, 3'b010, 3'b011, 3'b100, 3'b101, 3'b110:
	  new_value__h17241 =
	      IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d300;
      3'd7: new_value__h17241 = 64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h26840 or
	  result__h26867 or result__h26894 or result__h26921)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d690 =
	      result__h26840;
      3'h2:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d690 =
	      result__h26867;
      3'h4:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d690 =
	      result__h26894;
      3'h6:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d690 =
	      result__h26921;
      default: IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d690 =
		   64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h26961 or
	  result__h26988 or result__h27015 or result__h27042)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d698 =
	      result__h26961;
      3'h2:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d698 =
	      result__h26988;
      3'h4:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d698 =
	      result__h27015;
      3'h6:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d698 =
	      result__h27042;
      default: IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d698 =
		   64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h26607 or
	  result__h26634 or
	  result__h26661 or
	  result__h26688 or
	  result__h26715 or
	  result__h26742 or result__h26769 or result__h26796)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d678 =
	      result__h26607;
      3'h1:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d678 =
	      result__h26634;
      3'h2:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d678 =
	      result__h26661;
      3'h3:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d678 =
	      result__h26688;
      3'h4:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d678 =
	      result__h26715;
      3'h5:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d678 =
	      result__h26742;
      3'h6:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d678 =
	      result__h26769;
      3'h7:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d678 =
	      result__h26796;
    endcase
  end
  always@(cache_rg_addr or
	  result__h26371 or
	  result__h26401 or
	  result__h26428 or
	  result__h26455 or
	  result__h26482 or
	  result__h26509 or result__h26536 or result__h26563)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d662 =
	      result__h26371;
      3'h1:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d662 =
	      result__h26401;
      3'h2:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d662 =
	      result__h26428;
      3'h3:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d662 =
	      result__h26455;
      3'h4:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d662 =
	      result__h26482;
      3'h5:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d662 =
	      result__h26509;
      3'h6:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d662 =
	      result__h26536;
      3'h7:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d662 =
	      result__h26563;
    endcase
  end
  always@(cache_rg_addr or result__h27082 or result__h27109)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_result7082__ETC__q34 =
	      result__h27082;
      3'h4:
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_result7082__ETC__q34 =
	      result__h27109;
      default: CASE_cache_rg_addr_BITS_2_TO_0_0x0_result7082__ETC__q34 =
		   64'd0;
    endcase
  end
  always@(cache_rg_addr or result__h27147 or result__h27174)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_result7147__ETC__q35 =
	      result__h27147;
      3'h4:
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_result7147__ETC__q35 =
	      result__h27174;
      default: CASE_cache_rg_addr_BITS_2_TO_0_0x0_result7147__ETC__q35 =
		   64'd0;
    endcase
  end
  always@(cache_rg_f3 or
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d662 or
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d690 or
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_result7082__ETC__q34 or
	  cache_rg_addr or
	  cache_master_xactor_shim_rff_rv$port1__read or
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d678 or
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d698 or
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_result7147__ETC__q35)
  begin
    case (cache_rg_f3)
      3'b0:
	  ld_val__h26311 =
	      IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d662;
      3'b001:
	  ld_val__h26311 =
	      IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d690;
      3'b010:
	  ld_val__h26311 =
	      CASE_cache_rg_addr_BITS_2_TO_0_0x0_result7082__ETC__q34;
      3'b011:
	  ld_val__h26311 =
	      (cache_rg_addr[2:0] == 3'h0) ?
		cache_master_xactor_shim_rff_rv$port1__read[66:3] :
		64'd0;
      3'b100:
	  ld_val__h26311 =
	      IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d678;
      3'b101:
	  ld_val__h26311 =
	      IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d698;
      3'b110:
	  ld_val__h26311 =
	      CASE_cache_rg_addr_BITS_2_TO_0_0x0_result7147__ETC__q35;
      3'd7: ld_val__h26311 = 64'd0;
    endcase
  end
  always@(cache_rg_addr or result__h31401 or result__h31429)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d832 =
	      result__h31401;
      3'h4:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d832 =
	      result__h31429;
      default: IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d832 =
		   64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h31209 or
	  result__h31237 or result__h31265 or result__h31293)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d822 =
	      result__h31209;
      3'h2:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d822 =
	      result__h31237;
      3'h4:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d822 =
	      result__h31265;
      3'h6:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d822 =
	      result__h31293;
      default: IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d822 =
		   64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h30843 or
	  result__h30871 or
	  result__h30899 or
	  result__h30927 or
	  result__h30955 or
	  result__h30983 or result__h31011 or result__h31039)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d802 =
	      result__h30843;
      3'h1:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d802 =
	      result__h30871;
      3'h2:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d802 =
	      result__h30899;
      3'h3:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d802 =
	      result__h30927;
      3'h4:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d802 =
	      result__h30955;
      3'h5:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d802 =
	      result__h30983;
      3'h6:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d802 =
	      result__h31011;
      3'h7:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d802 =
	      result__h31039;
    endcase
  end
  always@(cache_rg_addr or
	  result__h31084 or
	  result__h31112 or result__h31140 or result__h31168)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d814 =
	      result__h31084;
      3'h2:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d814 =
	      result__h31112;
      3'h4:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d814 =
	      result__h31140;
      3'h6:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d814 =
	      result__h31168;
      default: IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d814 =
		   64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h29722 or
	  result__h30630 or
	  result__h30658 or
	  result__h30686 or
	  result__h30714 or
	  result__h30742 or result__h30770 or result__h30798)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d786 =
	      result__h29722;
      3'h1:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d786 =
	      result__h30630;
      3'h2:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d786 =
	      result__h30658;
      3'h3:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d786 =
	      result__h30686;
      3'h4:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d786 =
	      result__h30714;
      3'h5:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d786 =
	      result__h30742;
      3'h6:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d786 =
	      result__h30770;
      3'h7:
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d786 =
	      result__h30798;
    endcase
  end
  always@(cache_rg_addr or result__h31334 or result__h31362)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_result1334__ETC__q50 =
	      result__h31334;
      3'h4:
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_result1334__ETC__q50 =
	      result__h31362;
      default: CASE_cache_rg_addr_BITS_2_TO_0_0x0_result1334__ETC__q50 =
		   64'd0;
    endcase
  end
  always@(cache_rg_f3 or
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d786 or
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d814 or
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_result1334__ETC__q50 or
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d833 or
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d802 or
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d822 or
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d832)
  begin
    case (cache_rg_f3)
      3'b0:
	  w1__h29505 =
	      IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d786;
      3'b001:
	  w1__h29505 =
	      IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d814;
      3'b010:
	  w1__h29505 =
	      CASE_cache_rg_addr_BITS_2_TO_0_0x0_result1334__ETC__q50;
      3'b011:
	  w1__h29505 =
	      IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d833;
      3'b100:
	  w1__h29505 =
	      IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d802;
      3'b101:
	  w1__h29505 =
	      IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d822;
      3'b110:
	  w1__h29505 =
	      IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d832;
      3'd7: w1__h29505 = 64'd0;
    endcase
  end
  always@(cache_rg_f3 or
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d786 or
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d814 or
	  w1___1__h29591 or
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d833 or
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d802 or
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d822 or
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d832)
  begin
    case (cache_rg_f3)
      3'b0:
	  w1__h29509 =
	      IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d786;
      3'b001:
	  w1__h29509 =
	      IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d814;
      3'b010: w1__h29509 = w1___1__h29591;
      3'b011:
	  w1__h29509 =
	      IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d833;
      3'b100:
	  w1__h29509 =
	      IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d802;
      3'b101:
	  w1__h29509 =
	      IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d822;
      3'b110:
	  w1__h29509 =
	      IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d832;
      3'd7: w1__h29509 = 64'd0;
    endcase
  end
  always@(cache_rg_f3 or
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d786 or
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d814 or
	  b__h29633 or
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d833 or
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d802 or
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d822 or
	  IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d832)
  begin
    case (cache_rg_f3)
      3'b0:
	  new_ld_val__h29218 =
	      IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d786;
      3'b001:
	  new_ld_val__h29218 =
	      IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d814;
      3'b010: new_ld_val__h29218 = b__h29633;
      3'b011:
	  new_ld_val__h29218 =
	      IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d833;
      3'b100:
	  new_ld_val__h29218 =
	      IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d802;
      3'b101:
	  new_ld_val__h29218 =
	      IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d822;
      3'b110:
	  new_ld_val__h29218 =
	      IF_cache_rg_addr_9_BITS_2_TO_0_40_EQ_0x0_69_TH_ETC___d832;
      3'd7: new_ld_val__h29218 = 64'd0;
    endcase
  end
  always@(cache_rg_amo_funct7 or
	  new_st_val__h31538 or
	  new_st_val__h29625 or
	  w2__h29511 or
	  new_st_val__h31498 or
	  new_st_val__h31508 or
	  new_st_val__h31503 or
	  new_st_val__h31530 or new_st_val__h31513 or new_st_val__h31521)
  begin
    case (cache_rg_amo_funct7[6:2])
      5'b0: _theResult_____2__h29517 = new_st_val__h29625;
      5'b00001: _theResult_____2__h29517 = w2__h29511;
      5'b00100: _theResult_____2__h29517 = new_st_val__h31498;
      5'b01000: _theResult_____2__h29517 = new_st_val__h31508;
      5'b01100: _theResult_____2__h29517 = new_st_val__h31503;
      5'b10000: _theResult_____2__h29517 = new_st_val__h31530;
      5'b11000: _theResult_____2__h29517 = new_st_val__h31513;
      5'b11100: _theResult_____2__h29517 = new_st_val__h31521;
      default: _theResult_____2__h29517 = new_st_val__h31538;
    endcase
  end
  always@(cache_rg_f3 or st_val__h29230 or _theResult___fst__h29422)
  begin
    case (cache_rg_f3[1:0])
      2'b0, 2'b01, 2'b10:
	  mem_req_wr_data_wdata__h29489 = _theResult___fst__h29422;
      2'd3: mem_req_wr_data_wdata__h29489 = st_val__h29230;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cache_cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	cache_crg_sb_to_load_delay <= `BSV_ASSIGNMENT_DELAY 11'd0;
	cache_ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY 4'd0;
	cache_master_xactor_clearing <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_master_xactor_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	    99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
	cache_master_xactor_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	    99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
	cache_master_xactor_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY 8'd42;
	cache_master_xactor_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	    73'h0AAAAAAAAAAAAAAAAAA;
	cache_master_xactor_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	    74'h0AAAAAAAAAAAAAAAAAA;
	cache_rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY 7'd0;
	cache_rg_lower_word32_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_state <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (cache_cfg_verbosity$EN)
	  cache_cfg_verbosity <= `BSV_ASSIGNMENT_DELAY
	      cache_cfg_verbosity$D_IN;
	if (cache_crg_sb_to_load_delay$EN)
	  cache_crg_sb_to_load_delay <= `BSV_ASSIGNMENT_DELAY
	      cache_crg_sb_to_load_delay$D_IN;
	if (cache_ctr_wr_rsps_pending_crg$EN)
	  cache_ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY
	      cache_ctr_wr_rsps_pending_crg$D_IN;
	if (cache_master_xactor_clearing$EN)
	  cache_master_xactor_clearing <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_clearing$D_IN;
	if (cache_master_xactor_shim_arff_rv$EN)
	  cache_master_xactor_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_arff_rv$D_IN;
	if (cache_master_xactor_shim_awff_rv$EN)
	  cache_master_xactor_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_awff_rv$D_IN;
	if (cache_master_xactor_shim_bff_rv$EN)
	  cache_master_xactor_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_bff_rv$D_IN;
	if (cache_master_xactor_shim_rff_rv$EN)
	  cache_master_xactor_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_rff_rv$D_IN;
	if (cache_master_xactor_shim_wff_rv$EN)
	  cache_master_xactor_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_wff_rv$D_IN;
	if (cache_rg_cset_in_cache$EN)
	  cache_rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_cset_in_cache$D_IN;
	if (cache_rg_lower_word32_full$EN)
	  cache_rg_lower_word32_full <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_lower_word32_full$D_IN;
	if (cache_rg_lrsc_valid$EN)
	  cache_rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_lrsc_valid$D_IN;
	if (cache_rg_state$EN)
	  cache_rg_state <= `BSV_ASSIGNMENT_DELAY cache_rg_state$D_IN;
      end
    if (cache_rg_addr$EN)
      cache_rg_addr <= `BSV_ASSIGNMENT_DELAY cache_rg_addr$D_IN;
    if (cache_rg_amo_funct7$EN)
      cache_rg_amo_funct7 <= `BSV_ASSIGNMENT_DELAY cache_rg_amo_funct7$D_IN;
    if (cache_rg_error_during_refill$EN)
      cache_rg_error_during_refill <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_error_during_refill$D_IN;
    if (cache_rg_exc_code$EN)
      cache_rg_exc_code <= `BSV_ASSIGNMENT_DELAY cache_rg_exc_code$D_IN;
    if (cache_rg_f3$EN) cache_rg_f3 <= `BSV_ASSIGNMENT_DELAY cache_rg_f3$D_IN;
    if (cache_rg_ld_val$EN)
      cache_rg_ld_val <= `BSV_ASSIGNMENT_DELAY cache_rg_ld_val$D_IN;
    if (cache_rg_lower_word32$EN)
      cache_rg_lower_word32 <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_lower_word32$D_IN;
    if (cache_rg_lrsc_pa$EN)
      cache_rg_lrsc_pa <= `BSV_ASSIGNMENT_DELAY cache_rg_lrsc_pa$D_IN;
    if (cache_rg_op$EN) cache_rg_op <= `BSV_ASSIGNMENT_DELAY cache_rg_op$D_IN;
    if (cache_rg_pa$EN) cache_rg_pa <= `BSV_ASSIGNMENT_DELAY cache_rg_pa$D_IN;
    if (cache_rg_pte_pa$EN)
      cache_rg_pte_pa <= `BSV_ASSIGNMENT_DELAY cache_rg_pte_pa$D_IN;
    if (cache_rg_st_amo_val$EN)
      cache_rg_st_amo_val <= `BSV_ASSIGNMENT_DELAY cache_rg_st_amo_val$D_IN;
    if (cache_rg_word64_set_in_cache$EN)
      cache_rg_word64_set_in_cache <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_word64_set_in_cache$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cache_cfg_verbosity = 4'hA;
    cache_crg_sb_to_load_delay = 11'h2AA;
    cache_ctr_wr_rsps_pending_crg = 4'hA;
    cache_master_xactor_clearing = 1'h0;
    cache_master_xactor_shim_arff_rv = 99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    cache_master_xactor_shim_awff_rv = 99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    cache_master_xactor_shim_bff_rv = 8'hAA;
    cache_master_xactor_shim_rff_rv = 73'h0AAAAAAAAAAAAAAAAAA;
    cache_master_xactor_shim_wff_rv = 74'h2AAAAAAAAAAAAAAAAAA;
    cache_rg_addr = 32'hAAAAAAAA;
    cache_rg_amo_funct7 = 7'h2A;
    cache_rg_cset_in_cache = 7'h2A;
    cache_rg_error_during_refill = 1'h0;
    cache_rg_exc_code = 4'hA;
    cache_rg_f3 = 3'h2;
    cache_rg_ld_val = 64'hAAAAAAAAAAAAAAAA;
    cache_rg_lower_word32 = 32'hAAAAAAAA;
    cache_rg_lower_word32_full = 1'h0;
    cache_rg_lrsc_pa = 32'hAAAAAAAA;
    cache_rg_lrsc_valid = 1'h0;
    cache_rg_op = 2'h2;
    cache_rg_pa = 32'hAAAAAAAA;
    cache_rg_pte_pa = 32'hAAAAAAAA;
    cache_rg_st_amo_val = 64'hAAAAAAAAAAAAAAAA;
    cache_rg_state = 4'hA;
    cache_rg_word64_set_in_cache = 9'h0AA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 7'd127 &&
	  cache_cfg_verbosity != 4'd0 &&
	  !cache_f_reset_reqs$D_OUT)
	begin
	  v__h5445 = $stime;
	  #0;
	end
    v__h5439 = v__h5445 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 7'd127 &&
	  cache_cfg_verbosity != 4'd0 &&
	  !cache_f_reset_reqs$D_OUT)
	$display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		 v__h5439,
		 "I_MMU_Cache",
		 $signed(32'd128),
		 $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 7'd127 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_f_reset_reqs$D_OUT)
	begin
	  v__h5548 = $stime;
	  #0;
	end
    v__h5542 = v__h5548 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 7'd127 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_f_reset_reqs$D_OUT)
	$display("%0d: %s.rl_reset: Flushed", v__h5542, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h6002 = $stime;
	  #0;
	end
    v__h5996 = v__h6002 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h",
		 v__h5996,
		 "I_MMU_Cache",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("        eaddr = {CTag 0x%0h  CSet 0x%0h  Word64 0x%0h  Byte 0x%0h}",
		 pa_ctag__h6858,
		 cache_rg_addr[11:5],
		 cache_rg_addr[4:3],
		 cache_rg_addr[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("        CSet 0x%0x: (state, tag):", cache_rg_addr[11:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(" (");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_ram_state_and_ctag_cset$DOB[22])
	$write("CTAG_CLEAN");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  !cache_ram_state_and_ctag_cset$DOB[22])
	$write("CTAG_EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_ram_state_and_ctag_cset$DOB[22])
	$write(", 0x%0x", cache_ram_state_and_ctag_cset$DOB[21:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  !cache_ram_state_and_ctag_cset$DOB[22])
	$write(", --");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(")");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       cache_rg_addr[11:5],
	       cache_rg_addr[4:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(" 0x%0x", cache_ram_word64_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("    TLB result: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("VM_Xlate_Result { ", "outcome: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("VM_XLATE_OK");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "pa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'hA, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d312)
	begin
	  v__h14437 = $stime;
	  #0;
	end
    v__h14431 = v__h14437 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d312)
	$display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		 v__h14431,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 word64__h6962,
		 64'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct7[6:2] == 5'b00010 &&
	  cache_ram_state_and_ctag_cset$DOB[22] &&
	  cache_ram_state_and_ctag_cset_b_read__13_BITS__ETC___d119 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("        AMO LR: reserving PA 0x%0h", cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d312)
	$display("        Read-hit: addr 0x%0h word64 0x%0h",
		 cache_rg_addr,
		 word64__h6962);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d322)
	$display("        Read Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct7_7_BITS_6_TO_2_8_EQ_0b10_9__ETC___d325)
	$display("        AMO LR: cache refill: cancelling LR/SC reservation for PA 0x%0h",
		 cache_rg_lrsc_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op == 2'd1 &&
	  cache_rg_addr_9_EQ_cache_rg_lrsc_pa_8___d146 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("        ST: cancelling LR/SC reservation for PA",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct7[6:2] == 5'b00011 &&
	  cache_rg_lrsc_valid &&
	  !cache_rg_lrsc_pa_8_EQ_cache_rg_addr_9___d100 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("        AMO SC: fail: reserved addr 0x%0h, this address 0x%0h",
		 cache_rg_lrsc_pa,
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct7[6:2] == 5'b00011 &&
	  !cache_rg_lrsc_valid &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("        AMO SC: fail due to invalid LR/SC reservation");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct7[6:2] == 5'b00011 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("        AMO SC result = %0d", lrsc_result__h14814);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d519)
	$display("        Write-Cache-Hit: pa 0x%0h word64 0x%0h",
		 cache_rg_addr,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d519)
	$write("        New Word64_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d519)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       cache_rg_addr[11:5],
	       cache_rg_addr[4:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d519)
	$write(" 0x%0x",
	       IF_cache_rg_f3_67_EQ_0b0_68_THEN_IF_cache_rg_a_ETC___d390);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d519)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  (cache_rg_op == 2'd1 ||
	   cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	  NOT_cache_rg_op_4_EQ_2_6_27_OR_NOT_cache_rg_am_ETC___d520)
	$display("        Write-Cache-Miss: pa 0x%0h word64 0x%0h",
		 cache_rg_addr,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d525)
	$display("        Write-Cache-Hit/Miss: eaddr 0x%0h word64 0x%0h",
		 cache_rg_addr,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d529)
	begin
	  v__h18926 = $stime;
	  #0;
	end
    v__h18920 = v__h18926 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d529)
	$display("%0d: ERROR: CreditCounter: overflow", v__h18920);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d529)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d525)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d525)
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d525)
	$write("'h%h", 5'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d525)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d525)
	$write("'h%h", mem_req_wr_addr_awaddr__h22081);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d525)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d525)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d525)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d525)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d525)
	$write("'h%h", _theResult___snd_snd_val__h29437, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d525)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d525)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d525)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d525)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d525)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d525)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d525)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d525)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d525)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d525)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d525)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d525)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d525)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d525)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d525)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d525)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d525)
	$write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d525)
	$write("'h%h", mem_req_wr_data_wdata__h18665);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d525)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d525)
	$write("'h%h", mem_req_wr_data_wstrb__h22301);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d525)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d525)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d525)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d525)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d525)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_rg_op_4_EQ_0_5_26_AND_NOT_cache_rg_o_ETC___d525)
	$display("        => rl_write_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_rg_op_4_EQ_2_6_AND_cache_rg_amo_funct7_7_ETC___d534)
	begin
	  v__h18150 = $stime;
	  #0;
	end
    v__h18144 = v__h18150 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_rg_op_4_EQ_2_6_AND_cache_rg_amo_funct7_7_ETC___d534)
	$display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		 v__h18144,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 64'd1,
		 64'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_rg_op_4_EQ_2_6_AND_cache_rg_amo_funct7_7_ETC___d534)
	$display("        AMO SC: Fail response for addr 0x%0h",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d537)
	$display("        AMO Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d539)
	$display("        AMO: addr 0x%0h amo_f7 0x%0h f3 %0d rs2_val 0x%0h",
		 cache_rg_addr,
		 cache_rg_amo_funct7,
		 cache_rg_f3,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d539)
	$display("          PA 0x%0h ", cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d539)
	$display("          Cache word64 0x%0h, load-result 0x%0h",
		 word64__h6962,
		 word64__h6962);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d539)
	$display("          0x%0h  op  0x%0h -> 0x%0h",
		 word64__h6962,
		 word64__h6962,
		 new_st_val__h19205);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d539)
	$write("          New Word64_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d539)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       cache_rg_addr[11:5],
	       cache_rg_addr[4:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d539)
	$write(" 0x%0x",
	       IF_cache_rg_f3_67_EQ_0b0_68_THEN_IF_cache_rg_a_ETC___d464);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d539)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d542)
	begin
	  v__h22522 = $stime;
	  #0;
	end
    v__h22516 = v__h22522 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d542)
	$display("%0d: ERROR: CreditCounter: overflow", v__h22516);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d542)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d539)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d539)
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d539)
	$write("'h%h", 5'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d539)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d539)
	$write("'h%h", mem_req_wr_addr_awaddr__h22081);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d539)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d539)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d539)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d539)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d539)
	$write("'h%h", _theResult___snd_snd_val__h29437, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d539)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d539)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d539)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d539)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d539)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d539)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d539)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d539)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d539)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d539)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d539)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d539)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d539)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d539)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d539)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d539)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d539)
	$write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d539)
	$write("'h%h", mem_req_wr_data_wdata__h22300);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d539)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d539)
	$write("'h%h", mem_req_wr_data_wstrb__h22301);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d539)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d539)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d539)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d539)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d539)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_4_EQ_1_2_54_AND_NOT_cache_rg_o_ETC___d547)
	$display("        AMO_op: cancelling LR/SC reservation for PA",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_rereq &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("    fa_req_ram_B tagCSet [0x%0x] word64_set [0x%0d]",
		 cache_rg_addr[11:5],
		 cache_rg_addr[11:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_maintain_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h27522 = $stime;
	  #0;
	end
    v__h27516 = v__h27522 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_maintain_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		 v__h27516,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 cache_rg_ld_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h27605 = $stime;
	  #0;
	end
    v__h27599 = v__h27605 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s: rl_io_write_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		 v__h27599,
		 "I_MMU_Cache",
		 cache_rg_f3,
		 cache_rg_addr,
		 cache_rg_pa,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  cache_ctr_wr_rsps_pending_crg == 4'd15)
	begin
	  v__h28149 = $stime;
	  #0;
	end
    v__h28143 = v__h28149 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  cache_ctr_wr_rsps_pending_crg == 4'd15)
	$display("%0d: ERROR: CreditCounter: overflow", v__h28143);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  cache_ctr_wr_rsps_pending_crg == 4'd15)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 5'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", mem_req_wr_addr_awaddr__h29270);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", _theResult___snd_snd_val__h29437, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", mem_req_wr_data_wdata__h27927);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", mem_req_wr_data_wstrb__h29490);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_SC_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h28445 = $stime;
	  #0;
	end
    v__h28439 = v__h28445 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_SC_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s: rl_io_AMO_SC_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		 v__h28439,
		 "I_MMU_Cache",
		 cache_rg_f3,
		 cache_rg_addr,
		 cache_rg_pa,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_SC_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("    FAIL due to I/O address.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_SC_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h28566 = $stime;
	  #0;
	end
    v__h28560 = v__h28566 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s.rl_io_AMO_op_req; f3 0x%0h vaddr %0h  paddr %0h",
		 v__h28560,
		 "I_MMU_Cache",
		 cache_rg_f3,
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 5'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", mem_req_wr_addr_awaddr__h29270);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", size_val__h28732, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_74___d575)
	begin
	  v__h23916 = $stime;
	  #0;
	end
    v__h23910 = v__h23916 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_74___d575)
	$display("%0d: %s.rl_cache_refill_rsps_loop:",
		 v__h23910,
		 "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_74___d575)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_74___d575)
	$write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_74___d575)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[71:67]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_74___d575)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_74___d575)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_74___d575)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_74___d575 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_74___d575 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_74___d575 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_74___d575 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd1 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_74___d575)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_74___d575 &&
	  cache_master_xactor_shim_rff_rv$port1__read[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_74___d575 &&
	  !cache_master_xactor_shim_rff_rv$port1__read[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_74___d575)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_74___d575)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_74___d575)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h24170 = $stime;
	  #0;
	end
    v__h24164 = v__h24170 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d",
		 v__h24164,
		 "I_MMU_Cache",
		 4'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_word64_set_in_cache[1:0] == 2'd3 &&
	  (cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 ||
	   cache_rg_error_during_refill) &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("    => MODULE_EXCEPTION_RSP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_word64_set_in_cache[1:0] == 2'd3 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  !cache_rg_error_during_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("    => CACHE_REREQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_74___d575)
	$display("        Updating Cache word64_set 0x%0h, word64_in_cline %0d) old => new",
		 cache_rg_word64_set_in_cache,
		 cache_rg_word64_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_74___d575)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       cache_rg_addr[11:5],
	       cache_rg_word64_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_74___d575)
	$write(" 0x%0x", cache_ram_word64_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_74___d575)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_74___d575)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       cache_rg_addr[11:5],
	       cache_rg_word64_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_74___d575)
	$write(" 0x%0x", cache_master_xactor_shim_rff_rv$port1__read[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_74___d575)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h26186 = $stime;
	  #0;
	end
    v__h26180 = v__h26186 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s.rl_io_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		 v__h26180,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[71:67]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd1 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_master_xactor_shim_rff_rv$port1__read[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  !cache_master_xactor_shim_rff_rv$port1__read[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h27304 = $stime;
	  #0;
	end
    v__h27298 = v__h27304 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		 v__h27298,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 ld_val__h26311);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h27412 = $stime;
	  #0;
	end
    v__h27406 = v__h27412 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		 v__h27406,
		 "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h28896 = $stime;
	  #0;
	end
    v__h28890 = v__h28896 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s.rl_io_AMO_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		 v__h28890,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[71:67]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd1 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_master_xactor_shim_rff_rv$port1__read[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  !cache_master_xactor_shim_rff_rv$port1__read[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h29091 = $stime;
	  #0;
	end
    v__h29085 = v__h29091 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s: rl_io_AMO_read_rsp; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		 v__h29085,
		 "I_MMU_Cache",
		 cache_rg_f3,
		 cache_rg_addr,
		 cache_rg_pa,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  cache_ctr_wr_rsps_pending_crg == 4'd15)
	begin
	  v__h31768 = $stime;
	  #0;
	end
    v__h31762 = v__h31768 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  cache_ctr_wr_rsps_pending_crg == 4'd15)
	$display("%0d: ERROR: CreditCounter: overflow", v__h31762);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  cache_ctr_wr_rsps_pending_crg == 4'd15)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 5'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", mem_req_wr_addr_awaddr__h29270);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", _theResult___snd_snd_val__h29437, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", mem_req_wr_data_wdata__h29489);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", mem_req_wr_data_wstrb__h29490);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h32019 = $stime;
	  #0;
	end
    v__h32013 = v__h32019 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		 v__h32013,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 new_ld_val__h29218);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h29188 = $stime;
	  #0;
	end
    v__h29182 = v__h29188 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s.rl_io_AMO_read_rsp: FABRIC_RSP_ERR: raising trap STORE_AMO_ACCESS_FAULT",
		 v__h29182,
		 "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h22967 = $stime;
	  #0;
	end
    v__h22961 = v__h22967 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s.rl_start_cache_refill: ", v__h22961, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("    To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 5'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", cline_fabric_addr__h23020);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 8'd3);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 3'b011, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("    Victim way %0d; => CACHE_REFILL", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h25800 = $stime;
	  #0;
	end
    v__h25794 = v__h25800 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s.rl_io_read_req; f3 0x%0h vaddr %0h  paddr %0h",
		 v__h25794,
		 "I_MMU_Cache",
		 cache_rg_f3,
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 5'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", mem_req_wr_addr_awaddr__h29270);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", size_val__h28732, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h32735 = $stime;
	  #0;
	end
    v__h32729 = v__h32735 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("%0d: %s.rl_discard_write_rsp: pending %0d ",
	       v__h32729,
	       "I_MMU_Cache",
	       $unsigned(b__h22921));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_BFlit { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", cache_master_xactor_shim_bff_rv$port1__read[6:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	begin
	  v__h32696 = $stime;
	  #0;
	end
    v__h32690 = v__h32696 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$display("%0d: %s.rl_discard_write_rsp: fabric response error: exit",
		 v__h32690,
		 "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("AXI4_BFlit { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("'h%h", cache_master_xactor_shim_bff_rv$port1__read[6:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd1 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_reset &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h5070 = $stime;
	  #0;
	end
    v__h5064 = v__h5070 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_reset &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s.rl_start_reset", v__h5064, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h33123 = $stime;
	  #0;
	end
    v__h33117 = v__h33123 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("%0d: %s.req: op:", v__h33117, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  req_op == 2'd0)
	$write("CACHE_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  req_op == 2'd1)
	$write("CACHE_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  req_op != 2'd0 &&
	  req_op != 2'd1)
	$write("CACHE_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(" f3:%0d addr:0x%0h st_value:0x%0h priv:",
	       req_f3,
	       req_addr,
	       req_st_value);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  req_priv == 2'b0)
	$write("U");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  req_priv == 2'b01)
	$write("S");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  req_priv == 2'b11)
	$write("M");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  req_priv != 2'b0 &&
	  req_priv != 2'b01 &&
	  req_priv != 2'b11)
	$write("RESERVED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(" sstatus_SUM:%0d mstatus_MXR:%0d satp:0x%0h",
	       req_sstatus_SUM,
	       req_mstatus_MXR,
	       req_satp,
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("    amo_funct7 = 0x%0h", req_amo_funct7);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req &&
	  req_f3_BITS_1_TO_0_30_EQ_0b0_31_OR_req_f3_BITS_ETC___d960 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("    fa_req_ram_B tagCSet [0x%0x] word64_set [0x%0d]",
		 req_addr[11:5],
		 req_addr[11:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
  end
  // synopsys translate_on
endmodule  // mkMMU_ICache

