//
// Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
//
// On Fri Jul 19 15:07:34 BST 2019
//
//
// Ports:
// Name                         I/O  size props
// RDY_set_verbosity              O     1 const
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1
// valid                          O     1
// addr                           O    32 reg
// word128_fst                    O     1
// word128_snd                    O   128
// st_amo_val_fst                 O     1
// st_amo_val_snd                 O   128
// exc                            O     1
// exc_code                       O     6 reg
// RDY_server_flush_request_put   O     1
// RDY_server_flush_response_get  O     1
// RDY_tlb_flush                  O     1
// mem_master_awid                O     5
// mem_master_awaddr              O    64
// mem_master_awlen               O     8
// mem_master_awsize              O     3
// mem_master_awburst             O     2
// mem_master_awlock              O     1
// mem_master_awcache             O     4
// mem_master_awprot              O     3
// mem_master_awqos               O     4
// mem_master_awregion            O     4
// mem_master_awvalid             O     1
// mem_master_wdata               O   128
// mem_master_wstrb               O    16
// mem_master_wlast               O     1
// mem_master_wuser               O     2
// mem_master_wvalid              O     1
// mem_master_bready              O     1
// mem_master_arid                O     5
// mem_master_araddr              O    64
// mem_master_arlen               O     8
// mem_master_arsize              O     3
// mem_master_arburst             O     2
// mem_master_arlock              O     1
// mem_master_arcache             O     4
// mem_master_arprot              O     3
// mem_master_arqos               O     4
// mem_master_arregion            O     4
// mem_master_arvalid             O     1
// mem_master_rready              O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_verbosity_verbosity        I     4 reg
// req_op                         I     2
// req_width_code                 I     3
// req_is_unsigned                I     1 reg
// req_amo_funct7                 I     7 reg
// req_addr                       I    32
// req_st_value                   I   129
// req_priv                       I     2 unused
// req_sstatus_SUM                I     1 unused
// req_mstatus_MXR                I     1 unused
// req_satp                       I    32 unused
// mem_master_awready             I     1
// mem_master_wready              I     1
// mem_master_bid                 I     5
// mem_master_bresp               I     2
// mem_master_arready             I     1
// mem_master_rid                 I     5
// mem_master_rdata               I   128
// mem_master_rresp               I     2
// mem_master_rlast               I     1
// mem_master_ruser               I     2
// EN_set_verbosity               I     1
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_req                         I     1
// EN_commit                      I     1
// EN_server_flush_request_put    I     1
// EN_server_flush_response_get   I     1
// EN_tlb_flush                   I     1 unused
// mem_master_bvalid              I     1
// mem_master_rvalid              I     1
//
// Combinational paths from inputs to outputs:
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> valid
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> word128_fst
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> word128_snd
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awid
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awaddr
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awlen
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awsize
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awburst
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awlock
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awcache
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awprot
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awqos
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awregion
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awuser
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awvalid
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_wdata
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_wstrb
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_wlast
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_wuser
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_wvalid
//   EN_req -> RDY_server_flush_request_put
//   EN_req -> RDY_tlb_flush
//   EN_req -> mem_master_arid
//   EN_req -> mem_master_araddr
//   EN_req -> mem_master_arlen
//   EN_req -> mem_master_arsize
//   EN_req -> mem_master_arburst
//   EN_req -> mem_master_arlock
//   EN_req -> mem_master_arcache
//   EN_req -> mem_master_arprot
//   EN_req -> mem_master_arqos
//   EN_req -> mem_master_arregion
//   EN_req -> mem_master_aruser
//   EN_req -> mem_master_arvalid
//   EN_commit -> st_amo_val_fst
//   EN_commit -> st_amo_val_snd
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMMU_ICache(CLK,
		    RST_N,

		    set_verbosity_verbosity,
		    EN_set_verbosity,
		    RDY_set_verbosity,

		    EN_server_reset_request_put,
		    RDY_server_reset_request_put,

		    EN_server_reset_response_get,
		    RDY_server_reset_response_get,

		    req_op,
		    req_width_code,
		    req_is_unsigned,
		    req_amo_funct7,
		    req_addr,
		    req_st_value,
		    req_priv,
		    req_sstatus_SUM,
		    req_mstatus_MXR,
		    req_satp,
		    EN_req,

		    EN_commit,

		    valid,

		    addr,

		    word128_fst,

		    word128_snd,

		    st_amo_val_fst,

		    st_amo_val_snd,

		    exc,

		    exc_code,

		    EN_server_flush_request_put,
		    RDY_server_flush_request_put,

		    EN_server_flush_response_get,
		    RDY_server_flush_response_get,

		    EN_tlb_flush,
		    RDY_tlb_flush,

		    mem_master_awid,

		    mem_master_awaddr,

		    mem_master_awlen,

		    mem_master_awsize,

		    mem_master_awburst,

		    mem_master_awlock,

		    mem_master_awcache,

		    mem_master_awprot,

		    mem_master_awqos,

		    mem_master_awregion,

		    mem_master_awvalid,

		    mem_master_awready,

		    mem_master_wdata,

		    mem_master_wstrb,

		    mem_master_wlast,

		    mem_master_wuser,

		    mem_master_wvalid,

		    mem_master_wready,

		    mem_master_bid,
		    mem_master_bresp,
		    mem_master_bvalid,

		    mem_master_bready,

		    mem_master_arid,

		    mem_master_araddr,

		    mem_master_arlen,

		    mem_master_arsize,

		    mem_master_arburst,

		    mem_master_arlock,

		    mem_master_arcache,

		    mem_master_arprot,

		    mem_master_arqos,

		    mem_master_arregion,

		    mem_master_arvalid,

		    mem_master_arready,

		    mem_master_rid,
		    mem_master_rdata,
		    mem_master_rresp,
		    mem_master_rlast,
		    mem_master_ruser,
		    mem_master_rvalid,

		    mem_master_rready);
  input  CLK;
  input  RST_N;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // action method req
  input  [1 : 0] req_op;
  input  [2 : 0] req_width_code;
  input  req_is_unsigned;
  input  [6 : 0] req_amo_funct7;
  input  [31 : 0] req_addr;
  input  [128 : 0] req_st_value;
  input  [1 : 0] req_priv;
  input  req_sstatus_SUM;
  input  req_mstatus_MXR;
  input  [31 : 0] req_satp;
  input  EN_req;

  // action method commit
  input  EN_commit;

  // value method valid
  output valid;

  // value method addr
  output [31 : 0] addr;

  // value method word128_fst
  output word128_fst;

  // value method word128_snd
  output [127 : 0] word128_snd;

  // value method st_amo_val_fst
  output st_amo_val_fst;

  // value method st_amo_val_snd
  output [127 : 0] st_amo_val_snd;

  // value method exc
  output exc;

  // value method exc_code
  output [5 : 0] exc_code;

  // action method server_flush_request_put
  input  EN_server_flush_request_put;
  output RDY_server_flush_request_put;

  // action method server_flush_response_get
  input  EN_server_flush_response_get;
  output RDY_server_flush_response_get;

  // action method tlb_flush
  input  EN_tlb_flush;
  output RDY_tlb_flush;

  // value method mem_master_aw_awid
  output [4 : 0] mem_master_awid;

  // value method mem_master_aw_awaddr
  output [63 : 0] mem_master_awaddr;

  // value method mem_master_aw_awlen
  output [7 : 0] mem_master_awlen;

  // value method mem_master_aw_awsize
  output [2 : 0] mem_master_awsize;

  // value method mem_master_aw_awburst
  output [1 : 0] mem_master_awburst;

  // value method mem_master_aw_awlock
  output mem_master_awlock;

  // value method mem_master_aw_awcache
  output [3 : 0] mem_master_awcache;

  // value method mem_master_aw_awprot
  output [2 : 0] mem_master_awprot;

  // value method mem_master_aw_awqos
  output [3 : 0] mem_master_awqos;

  // value method mem_master_aw_awregion
  output [3 : 0] mem_master_awregion;

  // value method mem_master_aw_awuser

  // value method mem_master_aw_awvalid
  output mem_master_awvalid;

  // action method mem_master_aw_awready
  input  mem_master_awready;

  // value method mem_master_w_wdata
  output [127 : 0] mem_master_wdata;

  // value method mem_master_w_wstrb
  output [15 : 0] mem_master_wstrb;

  // value method mem_master_w_wlast
  output mem_master_wlast;

  // value method mem_master_w_wuser
  output [1 : 0] mem_master_wuser;

  // value method mem_master_w_wvalid
  output mem_master_wvalid;

  // action method mem_master_w_wready
  input  mem_master_wready;

  // action method mem_master_b_bflit
  input  [4 : 0] mem_master_bid;
  input  [1 : 0] mem_master_bresp;
  input  mem_master_bvalid;

  // value method mem_master_b_bready
  output mem_master_bready;

  // value method mem_master_ar_arid
  output [4 : 0] mem_master_arid;

  // value method mem_master_ar_araddr
  output [63 : 0] mem_master_araddr;

  // value method mem_master_ar_arlen
  output [7 : 0] mem_master_arlen;

  // value method mem_master_ar_arsize
  output [2 : 0] mem_master_arsize;

  // value method mem_master_ar_arburst
  output [1 : 0] mem_master_arburst;

  // value method mem_master_ar_arlock
  output mem_master_arlock;

  // value method mem_master_ar_arcache
  output [3 : 0] mem_master_arcache;

  // value method mem_master_ar_arprot
  output [2 : 0] mem_master_arprot;

  // value method mem_master_ar_arqos
  output [3 : 0] mem_master_arqos;

  // value method mem_master_ar_arregion
  output [3 : 0] mem_master_arregion;

  // value method mem_master_ar_aruser

  // value method mem_master_ar_arvalid
  output mem_master_arvalid;

  // action method mem_master_ar_arready
  input  mem_master_arready;

  // action method mem_master_r_rflit
  input  [4 : 0] mem_master_rid;
  input  [127 : 0] mem_master_rdata;
  input  [1 : 0] mem_master_rresp;
  input  mem_master_rlast;
  input  [1 : 0] mem_master_ruser;
  input  mem_master_rvalid;

  // value method mem_master_r_rready
  output mem_master_rready;

  // signals for module outputs
  wire [127 : 0] mem_master_wdata, st_amo_val_snd, word128_snd;
  wire [63 : 0] mem_master_araddr, mem_master_awaddr;
  wire [31 : 0] addr;
  wire [15 : 0] mem_master_wstrb;
  wire [7 : 0] mem_master_arlen, mem_master_awlen;
  wire [5 : 0] exc_code;
  wire [4 : 0] mem_master_arid, mem_master_awid;
  wire [3 : 0] mem_master_arcache,
	       mem_master_arqos,
	       mem_master_arregion,
	       mem_master_awcache,
	       mem_master_awqos,
	       mem_master_awregion;
  wire [2 : 0] mem_master_arprot,
	       mem_master_arsize,
	       mem_master_awprot,
	       mem_master_awsize;
  wire [1 : 0] mem_master_arburst, mem_master_awburst, mem_master_wuser;
  wire RDY_server_flush_request_put,
       RDY_server_flush_response_get,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_set_verbosity,
       RDY_tlb_flush,
       exc,
       mem_master_arlock,
       mem_master_arvalid,
       mem_master_awlock,
       mem_master_awvalid,
       mem_master_bready,
       mem_master_rready,
       mem_master_wlast,
       mem_master_wvalid,
       st_amo_val_fst,
       valid,
       word128_fst;

  // inlined wires
  reg [147 : 0] cache_master_xactor_shim_wff_rv$port0__write_1;
  reg [128 : 0] cache_dw_output_ld_val$wget;
  reg [98 : 0] cache_master_xactor_shim_awff_rv$port0__write_1;
  wire [147 : 0] cache_master_xactor_shim_wff_rv$port1__read,
		 cache_master_xactor_shim_wff_rv$port2__read,
		 cache_master_xactor_shim_wff_rv$port3__read;
  wire [138 : 0] cache_master_xactor_shim_rff_rv$port0__write_1,
		 cache_master_xactor_shim_rff_rv$port1__read,
		 cache_master_xactor_shim_rff_rv$port2__read,
		 cache_master_xactor_shim_rff_rv$port3__read;
  wire [137 : 0] cache_master_xactor_ug_master_u_r_putWire$wget;
  wire [128 : 0] cache_dw_output_st_amo_val$wget;
  wire [98 : 0] cache_master_xactor_shim_arff_rv$port0__write_1,
		cache_master_xactor_shim_arff_rv$port1__read,
		cache_master_xactor_shim_arff_rv$port2__read,
		cache_master_xactor_shim_arff_rv$port3__read,
		cache_master_xactor_shim_awff_rv$port1__read,
		cache_master_xactor_shim_awff_rv$port2__read,
		cache_master_xactor_shim_awff_rv$port3__read;
  wire [10 : 0] cache_crg_sb_to_load_delay$port0__write_1,
		cache_crg_sb_to_load_delay$port2__read;
  wire [7 : 0] cache_master_xactor_shim_bff_rv$port0__write_1,
	       cache_master_xactor_shim_bff_rv$port1__read,
	       cache_master_xactor_shim_bff_rv$port2__read,
	       cache_master_xactor_shim_bff_rv$port3__read;
  wire [6 : 0] cache_master_xactor_ug_master_u_b_putWire$wget;
  wire cache_crg_sb_to_load_delay$EN_port1__write,
       cache_dw_valid$whas,
       cache_master_xactor_shim_arff_rv$EN_port0__write,
       cache_master_xactor_shim_awff_rv$EN_port0__write,
       cache_master_xactor_shim_rff_rv$EN_port1__write,
       cache_master_xactor_shim_wff_rv$EN_port0__write,
       cache_master_xactor_ug_master_u_ar_dropWire$whas,
       cache_master_xactor_ug_master_u_aw_dropWire$whas,
       cache_master_xactor_ug_master_u_b_putWire$whas,
       cache_master_xactor_ug_master_u_r_putWire$whas,
       cache_master_xactor_ug_master_u_w_dropWire$whas;

  // register cache_cfg_verbosity
  reg [3 : 0] cache_cfg_verbosity;
  wire [3 : 0] cache_cfg_verbosity$D_IN;
  wire cache_cfg_verbosity$EN;

  // register cache_crg_sb_to_load_delay
  reg [10 : 0] cache_crg_sb_to_load_delay;
  wire [10 : 0] cache_crg_sb_to_load_delay$D_IN;
  wire cache_crg_sb_to_load_delay$EN;

  // register cache_ctr_wr_rsps_pending_inrg
  reg [3 : 0] cache_ctr_wr_rsps_pending_inrg;
  reg [3 : 0] cache_ctr_wr_rsps_pending_inrg$D_IN;
  wire cache_ctr_wr_rsps_pending_inrg$EN;

  // register cache_ctr_wr_rsps_pending_outrg
  reg [3 : 0] cache_ctr_wr_rsps_pending_outrg;
  wire [3 : 0] cache_ctr_wr_rsps_pending_outrg$D_IN;
  wire cache_ctr_wr_rsps_pending_outrg$EN;

  // register cache_master_xactor_clearing
  reg cache_master_xactor_clearing;
  wire cache_master_xactor_clearing$D_IN, cache_master_xactor_clearing$EN;

  // register cache_master_xactor_shim_arff_rv
  reg [98 : 0] cache_master_xactor_shim_arff_rv;
  wire [98 : 0] cache_master_xactor_shim_arff_rv$D_IN;
  wire cache_master_xactor_shim_arff_rv$EN;

  // register cache_master_xactor_shim_awff_rv
  reg [98 : 0] cache_master_xactor_shim_awff_rv;
  wire [98 : 0] cache_master_xactor_shim_awff_rv$D_IN;
  wire cache_master_xactor_shim_awff_rv$EN;

  // register cache_master_xactor_shim_bff_rv
  reg [7 : 0] cache_master_xactor_shim_bff_rv;
  wire [7 : 0] cache_master_xactor_shim_bff_rv$D_IN;
  wire cache_master_xactor_shim_bff_rv$EN;

  // register cache_master_xactor_shim_rff_rv
  reg [138 : 0] cache_master_xactor_shim_rff_rv;
  wire [138 : 0] cache_master_xactor_shim_rff_rv$D_IN;
  wire cache_master_xactor_shim_rff_rv$EN;

  // register cache_master_xactor_shim_wff_rv
  reg [147 : 0] cache_master_xactor_shim_wff_rv;
  wire [147 : 0] cache_master_xactor_shim_wff_rv$D_IN;
  wire cache_master_xactor_shim_wff_rv$EN;

  // register cache_rg_addr
  reg [31 : 0] cache_rg_addr;
  wire [31 : 0] cache_rg_addr$D_IN;
  wire cache_rg_addr$EN;

  // register cache_rg_amo_funct7
  reg [6 : 0] cache_rg_amo_funct7;
  wire [6 : 0] cache_rg_amo_funct7$D_IN;
  wire cache_rg_amo_funct7$EN;

  // register cache_rg_cset_in_cache
  reg [5 : 0] cache_rg_cset_in_cache;
  wire [5 : 0] cache_rg_cset_in_cache$D_IN;
  wire cache_rg_cset_in_cache$EN;

  // register cache_rg_error_during_refill
  reg cache_rg_error_during_refill;
  wire cache_rg_error_during_refill$D_IN, cache_rg_error_during_refill$EN;

  // register cache_rg_exc_code
  reg [5 : 0] cache_rg_exc_code;
  reg [5 : 0] cache_rg_exc_code$D_IN;
  wire cache_rg_exc_code$EN;

  // register cache_rg_is_unsigned
  reg cache_rg_is_unsigned;
  wire cache_rg_is_unsigned$D_IN, cache_rg_is_unsigned$EN;

  // register cache_rg_ld_val
  reg [128 : 0] cache_rg_ld_val;
  reg [128 : 0] cache_rg_ld_val$D_IN;
  wire cache_rg_ld_val$EN;

  // register cache_rg_lower_word64
  reg [63 : 0] cache_rg_lower_word64;
  wire [63 : 0] cache_rg_lower_word64$D_IN;
  wire cache_rg_lower_word64$EN;

  // register cache_rg_lower_word64_full
  reg cache_rg_lower_word64_full;
  wire cache_rg_lower_word64_full$D_IN, cache_rg_lower_word64_full$EN;

  // register cache_rg_lrsc_pa
  reg [31 : 0] cache_rg_lrsc_pa;
  wire [31 : 0] cache_rg_lrsc_pa$D_IN;
  wire cache_rg_lrsc_pa$EN;

  // register cache_rg_lrsc_valid
  reg cache_rg_lrsc_valid;
  wire cache_rg_lrsc_valid$D_IN, cache_rg_lrsc_valid$EN;

  // register cache_rg_op
  reg [1 : 0] cache_rg_op;
  wire [1 : 0] cache_rg_op$D_IN;
  wire cache_rg_op$EN;

  // register cache_rg_pa
  reg [31 : 0] cache_rg_pa;
  wire [31 : 0] cache_rg_pa$D_IN;
  wire cache_rg_pa$EN;

  // register cache_rg_pte_pa
  reg [31 : 0] cache_rg_pte_pa;
  wire [31 : 0] cache_rg_pte_pa$D_IN;
  wire cache_rg_pte_pa$EN;

  // register cache_rg_st_amo_val
  reg [128 : 0] cache_rg_st_amo_val;
  wire [128 : 0] cache_rg_st_amo_val$D_IN;
  wire cache_rg_st_amo_val$EN;

  // register cache_rg_state
  reg [3 : 0] cache_rg_state;
  reg [3 : 0] cache_rg_state$D_IN;
  wire cache_rg_state$EN;

  // register cache_rg_width_code
  reg [2 : 0] cache_rg_width_code;
  wire [2 : 0] cache_rg_width_code$D_IN;
  wire cache_rg_width_code$EN;

  // register cache_rg_word128_set_in_cache
  reg [7 : 0] cache_rg_word128_set_in_cache;
  wire [7 : 0] cache_rg_word128_set_in_cache$D_IN;
  wire cache_rg_word128_set_in_cache$EN;

  // ports of submodule cache_f_reset_reqs
  wire cache_f_reset_reqs$CLR,
       cache_f_reset_reqs$DEQ,
       cache_f_reset_reqs$D_IN,
       cache_f_reset_reqs$D_OUT,
       cache_f_reset_reqs$EMPTY_N,
       cache_f_reset_reqs$ENQ,
       cache_f_reset_reqs$FULL_N;

  // ports of submodule cache_f_reset_rsps
  wire cache_f_reset_rsps$CLR,
       cache_f_reset_rsps$DEQ,
       cache_f_reset_rsps$D_IN,
       cache_f_reset_rsps$D_OUT,
       cache_f_reset_rsps$EMPTY_N,
       cache_f_reset_rsps$ENQ,
       cache_f_reset_rsps$FULL_N;

  // ports of submodule cache_ram_state_and_ctag_cset
  wire [22 : 0] cache_ram_state_and_ctag_cset$DIA,
		cache_ram_state_and_ctag_cset$DIB,
		cache_ram_state_and_ctag_cset$DOB;
  wire [5 : 0] cache_ram_state_and_ctag_cset$ADDRA,
	       cache_ram_state_and_ctag_cset$ADDRB;
  wire cache_ram_state_and_ctag_cset$ENA,
       cache_ram_state_and_ctag_cset$ENB,
       cache_ram_state_and_ctag_cset$WEA,
       cache_ram_state_and_ctag_cset$WEB;

  // ports of submodule cache_ram_word128_set
  reg [129 : 0] cache_ram_word128_set$DIB;
  reg [7 : 0] cache_ram_word128_set$ADDRB;
  wire [129 : 0] cache_ram_word128_set$DIA, cache_ram_word128_set$DOB;
  wire [7 : 0] cache_ram_word128_set$ADDRA;
  wire cache_ram_word128_set$ENA,
       cache_ram_word128_set$ENB,
       cache_ram_word128_set$WEA,
       cache_ram_word128_set$WEB;

  // ports of submodule cache_soc_map
  wire [63 : 0] cache_soc_map$m_is_IO_addr_addr,
		cache_soc_map$m_is_mem_addr_addr,
		cache_soc_map$m_is_near_mem_IO_addr_addr;

  // rule scheduling signals
  wire CAN_FIRE_RL_cache_master_xactor_do_clear,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop,
       CAN_FIRE_RL_cache_rl_ST_AMO_response,
       CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop,
       CAN_FIRE_RL_cache_rl_discard_write_rsp,
       CAN_FIRE_RL_cache_rl_drive_exception_rsp,
       CAN_FIRE_RL_cache_rl_io_AMO_SC_req,
       CAN_FIRE_RL_cache_rl_io_AMO_op_req,
       CAN_FIRE_RL_cache_rl_io_AMO_read_rsp,
       CAN_FIRE_RL_cache_rl_io_read_req,
       CAN_FIRE_RL_cache_rl_io_read_rsp,
       CAN_FIRE_RL_cache_rl_io_write_req,
       CAN_FIRE_RL_cache_rl_maintain_io_read_rsp,
       CAN_FIRE_RL_cache_rl_probe_and_immed_rsp,
       CAN_FIRE_RL_cache_rl_rereq,
       CAN_FIRE_RL_cache_rl_reset,
       CAN_FIRE_RL_cache_rl_shift_sb_to_load_delay,
       CAN_FIRE_RL_cache_rl_start_cache_refill,
       CAN_FIRE_RL_cache_rl_start_reset,
       CAN_FIRE_commit,
       CAN_FIRE_mem_master_ar_arready,
       CAN_FIRE_mem_master_aw_awready,
       CAN_FIRE_mem_master_b_bflit,
       CAN_FIRE_mem_master_r_rflit,
       CAN_FIRE_mem_master_w_wready,
       CAN_FIRE_req,
       CAN_FIRE_server_flush_request_put,
       CAN_FIRE_server_flush_response_get,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_tlb_flush,
       WILL_FIRE_RL_cache_master_xactor_do_clear,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop,
       WILL_FIRE_RL_cache_rl_ST_AMO_response,
       WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop,
       WILL_FIRE_RL_cache_rl_discard_write_rsp,
       WILL_FIRE_RL_cache_rl_drive_exception_rsp,
       WILL_FIRE_RL_cache_rl_io_AMO_SC_req,
       WILL_FIRE_RL_cache_rl_io_AMO_op_req,
       WILL_FIRE_RL_cache_rl_io_AMO_read_rsp,
       WILL_FIRE_RL_cache_rl_io_read_req,
       WILL_FIRE_RL_cache_rl_io_read_rsp,
       WILL_FIRE_RL_cache_rl_io_write_req,
       WILL_FIRE_RL_cache_rl_maintain_io_read_rsp,
       WILL_FIRE_RL_cache_rl_probe_and_immed_rsp,
       WILL_FIRE_RL_cache_rl_rereq,
       WILL_FIRE_RL_cache_rl_reset,
       WILL_FIRE_RL_cache_rl_shift_sb_to_load_delay,
       WILL_FIRE_RL_cache_rl_start_cache_refill,
       WILL_FIRE_RL_cache_rl_start_reset,
       WILL_FIRE_commit,
       WILL_FIRE_mem_master_ar_arready,
       WILL_FIRE_mem_master_aw_awready,
       WILL_FIRE_mem_master_b_bflit,
       WILL_FIRE_mem_master_r_rflit,
       WILL_FIRE_mem_master_w_wready,
       WILL_FIRE_req,
       WILL_FIRE_server_flush_request_put,
       WILL_FIRE_server_flush_response_get,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_tlb_flush;

  // inputs to muxes for submodule ports
  wire [147 : 0] MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_1,
		 MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_2,
		 MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_3;
  wire [129 : 0] MUX_cache_ram_word128_set$a_put_3__VAL_1,
		 MUX_cache_ram_word128_set$a_put_3__VAL_2;
  wire [128 : 0] MUX_cache_dw_output_ld_val$wset_1__VAL_1,
		 MUX_cache_dw_output_ld_val$wset_1__VAL_2,
		 MUX_cache_dw_output_ld_val$wset_1__VAL_3,
		 MUX_cache_dw_output_st_amo_val$wset_1__VAL_1,
		 MUX_cache_rg_ld_val$write_1__VAL_2,
		 MUX_cache_rg_st_amo_val$write_1__VAL_2;
  wire [98 : 0] MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_1,
		MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_2,
		MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_1,
		MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_2;
  wire [22 : 0] MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1;
  wire [7 : 0] MUX_cache_ram_word128_set$b_put_2__VAL_2,
	       MUX_cache_ram_word128_set$b_put_2__VAL_4;
  wire [5 : 0] MUX_cache_rg_cset_in_cache$write_1__VAL_1,
	       MUX_cache_rg_exc_code$write_1__VAL_2;
  wire [3 : 0] MUX_cache_ctr_wr_rsps_pending_inrg$write_1__VAL_2,
	       MUX_cache_ctr_wr_rsps_pending_outrg$write_1__VAL_1,
	       MUX_cache_rg_state$write_1__VAL_12,
	       MUX_cache_rg_state$write_1__VAL_2,
	       MUX_cache_rg_state$write_1__VAL_4,
	       MUX_cache_rg_state$write_1__VAL_5;
  wire MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_1,
       MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_2,
       MUX_cache_dw_output_ld_val$wset_1__SEL_1,
       MUX_cache_dw_output_ld_val$wset_1__SEL_3,
       MUX_cache_dw_output_ld_val$wset_1__SEL_4,
       MUX_cache_master_xactor_shim_arff_rv$port0__write_1__SEL_1,
       MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1,
       MUX_cache_ram_word128_set$a_put_1__SEL_1,
       MUX_cache_ram_word128_set$b_put_1__SEL_2,
       MUX_cache_rg_error_during_refill$write_1__SEL_1,
       MUX_cache_rg_exc_code$write_1__SEL_2,
       MUX_cache_rg_exc_code$write_1__SEL_3,
       MUX_cache_rg_exc_code$write_1__SEL_4,
       MUX_cache_rg_exc_code$write_1__SEL_5,
       MUX_cache_rg_ld_val$write_1__SEL_2,
       MUX_cache_rg_lrsc_valid$write_1__SEL_2,
       MUX_cache_rg_state$write_1__SEL_12,
       MUX_cache_rg_state$write_1__SEL_13,
       MUX_cache_rg_state$write_1__SEL_2;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h5541;
  reg [31 : 0] v__h5644;
  reg [31 : 0] v__h6102;
  reg [31 : 0] v__h21465;
  reg [31 : 0] v__h26937;
  reg [31 : 0] v__h5103;
  reg [31 : 0] v__h35926;
  reg [31 : 0] v__h37972;
  reg [31 : 0] v__h38063;
  reg [31 : 0] v__h38788;
  reg [31 : 0] v__h38913;
  reg [31 : 0] v__h43010;
  reg [31 : 0] v__h43257;
  reg [31 : 0] v__h43218;
  reg [31 : 0] v__h36298;
  reg [31 : 0] v__h37743;
  reg [31 : 0] v__h37858;
  reg [31 : 0] v__h39229;
  reg [31 : 0] v__h39424;
  reg [31 : 0] v__h42703;
  reg [31 : 0] v__h39523;
  reg [31 : 0] v__h43653;
  reg [31 : 0] v__h33046;
  reg [31 : 0] v__h34007;
  reg [31 : 0] v__h34261;
  reg [31 : 0] v__h5097;
  reg [31 : 0] v__h5535;
  reg [31 : 0] v__h5638;
  reg [31 : 0] v__h6096;
  reg [31 : 0] v__h21459;
  reg [31 : 0] v__h26931;
  reg [31 : 0] v__h33040;
  reg [31 : 0] v__h34001;
  reg [31 : 0] v__h34255;
  reg [31 : 0] v__h35920;
  reg [31 : 0] v__h36292;
  reg [31 : 0] v__h37737;
  reg [31 : 0] v__h37852;
  reg [31 : 0] v__h37966;
  reg [31 : 0] v__h38057;
  reg [31 : 0] v__h38782;
  reg [31 : 0] v__h38907;
  reg [31 : 0] v__h39223;
  reg [31 : 0] v__h39418;
  reg [31 : 0] v__h39517;
  reg [31 : 0] v__h42697;
  reg [31 : 0] v__h43004;
  reg [31 : 0] v__h43212;
  reg [31 : 0] v__h43251;
  reg [31 : 0] v__h43647;
  // synopsys translate_on

  // remaining internal signals
  reg [127 : 0] CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q31,
		CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q32,
		CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q33,
		CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q36,
		CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q37,
		IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1021,
		IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1061,
		IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1081,
		IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1193,
		IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1217,
		IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1229,
		IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d370,
		IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d410,
		IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d430,
		IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d608,
		IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d625,
		IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d634,
		IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d718,
		IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d735,
		IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d744,
		_theResult___fst__h29351,
		_theResult___fst__h36536,
		_theResult___fst__h42125,
		_theResult___fst__h7417,
		mem_req_wr_data_wdata__h27377,
		mem_req_wr_data_wdata__h32418,
		mem_req_wr_data_wdata__h38306,
		mem_req_wr_data_wdata__h39743,
		x__h20322,
		x__h22745,
		x__h25894,
		x__h28077,
		x__h28345,
		x__h36610,
		x__h39954;
  reg [63 : 0] _theResult_____2__h28021, _theResult_____2__h39774;
  reg [15 : 0] mem_req_wr_data_wstrb__h32419, mem_req_wr_data_wstrb__h39744;
  reg [2 : 0] _theResult___fst_val__h39690, size_val__h39062;
  wire [146 : 0] cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q73;
  wire [129 : 0] cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265,
		 y__h7469;
  wire [127 : 0] IF_cache_rg_op_0_EQ_0_1_OR_cache_rg_op_0_EQ_2__ETC___d453,
		 IF_cache_rg_op_0_EQ_1_8_OR_cache_rg_op_0_EQ_2__ETC___d782,
		 _theResult___fst__h25818,
		 _theResult___snd_fst__h27386,
		 _theResult___snd_fst__h32427,
		 _theResult___snd_fst__h38315,
		 _theResult___snd_fst__h39752,
		 result__h20265,
		 result__h20333,
		 result__h20371,
		 result__h20404,
		 result__h20437,
		 result__h20470,
		 result__h20503,
		 result__h20536,
		 result__h20569,
		 result__h20602,
		 result__h20635,
		 result__h20668,
		 result__h20701,
		 result__h20734,
		 result__h20767,
		 result__h20800,
		 result__h20833,
		 result__h20888,
		 result__h20921,
		 result__h20954,
		 result__h20987,
		 result__h21020,
		 result__h21053,
		 result__h21086,
		 result__h21119,
		 result__h21166,
		 result__h21199,
		 result__h21232,
		 result__h21265,
		 result__h36538,
		 result__h36563,
		 result__h36621,
		 result__h36657,
		 result__h36690,
		 result__h36723,
		 result__h36756,
		 result__h36789,
		 result__h36822,
		 result__h36855,
		 result__h36888,
		 result__h36921,
		 result__h36954,
		 result__h36987,
		 result__h37020,
		 result__h37053,
		 result__h37086,
		 result__h37119,
		 result__h37174,
		 result__h37207,
		 result__h37240,
		 result__h37273,
		 result__h37306,
		 result__h37339,
		 result__h37372,
		 result__h37405,
		 result__h37452,
		 result__h37485,
		 result__h37518,
		 result__h37551,
		 result__h40036,
		 result__h41205,
		 result__h41237,
		 result__h41269,
		 result__h41301,
		 result__h41333,
		 result__h41365,
		 result__h41397,
		 result__h41429,
		 result__h41461,
		 result__h41493,
		 result__h41525,
		 result__h41557,
		 result__h41589,
		 result__h41621,
		 result__h41653,
		 result__h41707,
		 result__h41739,
		 result__h41771,
		 result__h41803,
		 result__h41835,
		 result__h41867,
		 result__h41899,
		 result__h41931,
		 result__h41977,
		 result__h42009,
		 result__h42041,
		 result__h42073,
		 result__h42127,
		 result__h42156,
		 result__h7419,
		 word128__h39610;
  wire [97 : 0] cache_master_xactor_shim_arff_rvport1__read_B_ETC__q40,
		cache_master_xactor_shim_awff_rvport1__read_B_ETC__q72;
  wire [63 : 0] IF_cache_rg_width_code_89_EQ_2_94_THEN_SEXT_IF_ETC___d1244,
		IF_cache_rg_width_code_89_EQ_2_94_THEN_SEXT_IF_ETC___d524,
		IF_cache_rg_width_code_89_EQ_2_94_THEN_SEXT_ca_ETC___d652,
		b__h28292,
		b__h29416,
		b__h39901,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q41,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q56,
		cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q17,
		cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q2,
		cline_fabric_addr__h33099,
		mem_req_wr_addr_awaddr__h32281,
		mem_req_wr_addr_awaddr__h39606,
		new_st_val__h28180,
		new_st_val__h28284,
		new_st_val__h29446,
		new_st_val__h29451,
		new_st_val__h29456,
		new_st_val__h29461,
		new_st_val__h29469,
		new_st_val__h29478,
		new_st_val__h29486,
		new_st_val__h39789,
		new_st_val__h39893,
		new_st_val__h42222,
		new_st_val__h42227,
		new_st_val__h42232,
		new_st_val__h42237,
		new_st_val__h42245,
		new_st_val__h42254,
		new_st_val__h42262,
		w1___1__h28247,
		w1___1__h39856,
		w1__h28013,
		w1__h39766,
		w2__h28015,
		x__h28175,
		x__h39784;
  wire [31 : 0] IF_cache_rg_addr_BITS_4_TO_0_EQ_0_THEN_1_ELSE_0__q39,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q44,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q51,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q59,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q66,
		cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q12,
		cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q20,
		cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q27,
		cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q5,
		cache_rg_st_amo_val_BITS_31_TO_0__q1,
		cline_addr__h33098,
		x8345_BITS_31_TO_0__q35,
		x9954_BITS_31_TO_0__q71;
  wire [21 : 0] pa_ctag__h7021;
  wire [15 : 0] cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q43,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q47,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q50,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q54,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q58,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q62,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q65,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q69,
		cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q11,
		cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q15,
		cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q19,
		cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q23,
		cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q26,
		cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q30,
		cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q4,
		cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q8,
		strobe128__h32346,
		strobe128__h32349,
		strobe128__h32352,
		strobe128__h32355,
		strobe128__h39671,
		strobe128__h39674,
		strobe128__h39677,
		strobe128__h39680;
  wire [7 : 0] cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q42,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q45,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q46,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q48,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q49,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q52,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q53,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q55,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q57,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q60,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q61,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q63,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q64,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q67,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q68,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q70,
	       cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q10,
	       cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q13,
	       cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q14,
	       cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q16,
	       cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q18,
	       cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q21,
	       cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q22,
	       cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q24,
	       cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q25,
	       cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q28,
	       cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q29,
	       cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q3,
	       cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q34,
	       cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q6,
	       cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q7,
	       cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q9;
  wire [6 : 0] shift_bits__h32288, shift_bits__h39613;
  wire [3 : 0] IF_cache_rg_op_0_EQ_0_1_OR_cache_rg_op_0_EQ_2__ETC___d163,
	       IF_cache_rg_op_0_EQ_1_8_OR_cache_rg_op_0_EQ_2__ETC___d162,
	       cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d854,
	       x__h28057;
  wire [2 : 0] IF_cache_rg_op_0_EQ_1_8_OR_cache_rg_op_0_EQ_2__ETC___d795;
  wire [1 : 0] _0__q38,
	       cache_ram_word128_set_b_read__52_BITS_129_TO_1_ETC___d543,
	       mem_req_wr_data_wuser__h27380,
	       x__h22606,
	       x__h27963,
	       y__h28038;
  wire IF_cache_rg_op_0_EQ_1_8_OR_cache_rg_op_0_EQ_2__ETC___d129,
       IF_cache_rg_width_code_89_EQ_3_98_THEN_IF_cach_ETC___d273,
       NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55,
       NOT_cache_cfg_verbosity_read__3_ULE_2_74___d875,
       NOT_cache_f_reset_reqs_notEmpty__4_32_AND_cach_ETC___d143,
       NOT_cache_f_reset_reqs_notEmpty__4_32_AND_cach_ETC___d922,
       NOT_cache_master_xactor_clearing_read__0_8_AND_ETC___d1138,
       NOT_cache_ram_state_and_ctag_cset_b_read__19_B_ETC___d128,
       NOT_cache_ram_state_and_ctag_cset_b_read__19_B_ETC___d170,
       NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d158,
       NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d767,
       NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d815,
       NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d823,
       NOT_cache_rg_op_0_EQ_1_8_76_AND_NOT_cache_rg_o_ETC___d179,
       NOT_cache_rg_op_0_EQ_1_8_76_AND_NOT_cache_rg_o_ETC___d529,
       NOT_cache_rg_op_0_EQ_1_8_76_AND_NOT_cache_rg_o_ETC___d761,
       NOT_cache_rg_op_0_EQ_1_8_76_AND_NOT_cache_rg_o_ETC___d831,
       NOT_cache_rg_op_0_EQ_1_8_76_AND_NOT_cache_rg_o_ETC___d834,
       NOT_cache_rg_op_0_EQ_1_8_76_AND_NOT_cache_rg_o_ETC___d839,
       NOT_cache_rg_op_0_EQ_2_2_36_OR_NOT_cache_rg_am_ETC___d527,
       NOT_cache_rg_op_0_EQ_2_2_36_OR_NOT_cache_rg_am_ETC___d759,
       NOT_cache_rg_op_0_EQ_2_2_36_OR_NOT_cache_rg_am_ETC___d813,
       NOT_cache_rg_op_0_EQ_2_2_36_OR_NOT_cache_rg_am_ETC___d817,
       NOT_cache_rg_op_0_EQ_2_2_36_OR_NOT_cache_rg_am_ETC___d821,
       NOT_req_width_code_EQ_0b0_336_337_AND_NOT_req__ETC___d1356,
       cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d485,
       cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d532,
       cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d836,
       cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d843,
       cache_f_reset_reqs_i_notEmpty__3_AND_cache_f_r_ETC___d66,
       cache_ram_state_and_ctag_cset_b_read__19_BITS__ETC___d125,
       cache_ram_state_and_ctag_cset_b_read__19_BIT_2_ETC___d171,
       cache_rg_addr_05_EQ_cache_rg_lrsc_pa_04___d168,
       cache_rg_amo_funct7_3_BITS_6_TO_2_4_EQ_0b10_5__ETC___d479,
       cache_rg_lrsc_pa_04_EQ_cache_rg_addr_05___d106,
       cache_rg_op_0_EQ_0_1_OR_cache_rg_op_0_EQ_2_2_A_ETC___d153,
       cache_rg_op_0_EQ_0_1_OR_cache_rg_op_0_EQ_2_2_A_ETC___d182,
       cache_rg_op_0_EQ_0_1_OR_cache_rg_op_0_EQ_2_2_A_ETC___d184,
       cache_rg_op_0_EQ_0_1_OR_cache_rg_op_0_EQ_2_2_A_ETC___d187,
       cache_rg_op_0_EQ_0_1_OR_cache_rg_op_0_EQ_2_2_A_ETC___d275,
       cache_rg_op_0_EQ_0_1_OR_cache_rg_op_0_EQ_2_2_A_ETC___d462,
       cache_rg_op_0_EQ_0_1_OR_cache_rg_op_0_EQ_2_2_A_ETC___d475,
       cache_rg_op_0_EQ_1_8_OR_cache_rg_op_0_EQ_2_2_A_ETC___d180,
       cache_rg_op_0_EQ_1_8_OR_cache_rg_op_0_EQ_2_2_A_ETC___d530,
       cache_rg_op_0_EQ_1_8_OR_cache_rg_op_0_EQ_2_2_A_ETC___d762,
       cache_rg_op_0_EQ_1_8_OR_cache_rg_op_0_EQ_2_2_A_ETC___d765,
       cache_rg_op_0_EQ_2_2_AND_cache_rg_amo_funct7_3_ETC___d118,
       cache_rg_op_0_EQ_2_2_AND_cache_rg_amo_funct7_3_ETC___d827,
       lrsc_result__h21855,
       req_width_code_EQ_0b0_336_OR_req_width_code_EQ_ETC___d1372,
       req_width_code_EQ_0b0_336_OR_req_width_code_EQ_ETC___d1377;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = cache_f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = cache_f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get =
	     !cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get =
	     !cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // action method req
  assign CAN_FIRE_req = 1'd1 ;
  assign WILL_FIRE_req = EN_req ;

  // action method commit
  assign CAN_FIRE_commit = 1'd1 ;
  assign WILL_FIRE_commit = EN_commit ;

  // value method valid
  assign valid = cache_dw_valid$whas ;

  // value method addr
  assign addr = cache_rg_addr ;

  // value method word128_fst
  assign word128_fst = cache_dw_output_ld_val$wget[128] ;

  // value method word128_snd
  assign word128_snd = cache_dw_output_ld_val$wget[127:0] ;

  // value method st_amo_val_fst
  assign st_amo_val_fst = cache_dw_output_st_amo_val$wget[128] ;

  // value method st_amo_val_snd
  assign st_amo_val_snd = cache_dw_output_st_amo_val$wget[127:0] ;

  // value method exc
  assign exc = CAN_FIRE_RL_cache_rl_drive_exception_rsp ;

  // value method exc_code
  assign exc_code = cache_rg_exc_code ;

  // action method server_flush_request_put
  assign RDY_server_flush_request_put = !EN_req && cache_f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_flush_request_put =
	     !EN_req && cache_f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_flush_request_put = EN_server_flush_request_put ;

  // action method server_flush_response_get
  assign RDY_server_flush_response_get =
	     cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_flush_response_get =
	     cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_flush_response_get = EN_server_flush_response_get ;

  // action method tlb_flush
  assign RDY_tlb_flush = !EN_req ;
  assign CAN_FIRE_tlb_flush = !EN_req ;
  assign WILL_FIRE_tlb_flush = EN_tlb_flush ;

  // value method mem_master_aw_awid
  assign mem_master_awid =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q72[97:93] ;

  // value method mem_master_aw_awaddr
  assign mem_master_awaddr =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q72[92:29] ;

  // value method mem_master_aw_awlen
  assign mem_master_awlen =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q72[28:21] ;

  // value method mem_master_aw_awsize
  assign mem_master_awsize =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q72[20:18] ;

  // value method mem_master_aw_awburst
  assign mem_master_awburst =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q72[17:16] ;

  // value method mem_master_aw_awlock
  assign mem_master_awlock =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q72[15] ;

  // value method mem_master_aw_awcache
  assign mem_master_awcache =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q72[14:11] ;

  // value method mem_master_aw_awprot
  assign mem_master_awprot =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q72[10:8] ;

  // value method mem_master_aw_awqos
  assign mem_master_awqos =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q72[7:4] ;

  // value method mem_master_aw_awregion
  assign mem_master_awregion =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q72[3:0] ;

  // value method mem_master_aw_awvalid
  assign mem_master_awvalid =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek ;

  // action method mem_master_aw_awready
  assign CAN_FIRE_mem_master_aw_awready = 1'd1 ;
  assign WILL_FIRE_mem_master_aw_awready = 1'd1 ;

  // value method mem_master_w_wdata
  assign mem_master_wdata =
	     cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q73[146:19] ;

  // value method mem_master_w_wstrb
  assign mem_master_wstrb =
	     cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q73[18:3] ;

  // value method mem_master_w_wlast
  assign mem_master_wlast =
	     cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q73[2] ;

  // value method mem_master_w_wuser
  assign mem_master_wuser =
	     cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q73[1:0] ;

  // value method mem_master_w_wvalid
  assign mem_master_wvalid =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek ;

  // action method mem_master_w_wready
  assign CAN_FIRE_mem_master_w_wready = 1'd1 ;
  assign WILL_FIRE_mem_master_w_wready = 1'd1 ;

  // action method mem_master_b_bflit
  assign CAN_FIRE_mem_master_b_bflit = 1'd1 ;
  assign WILL_FIRE_mem_master_b_bflit = mem_master_bvalid ;

  // value method mem_master_b_bready
  assign mem_master_bready = !cache_master_xactor_shim_bff_rv[7] ;

  // value method mem_master_ar_arid
  assign mem_master_arid =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q40[97:93] ;

  // value method mem_master_ar_araddr
  assign mem_master_araddr =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q40[92:29] ;

  // value method mem_master_ar_arlen
  assign mem_master_arlen =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q40[28:21] ;

  // value method mem_master_ar_arsize
  assign mem_master_arsize =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q40[20:18] ;

  // value method mem_master_ar_arburst
  assign mem_master_arburst =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q40[17:16] ;

  // value method mem_master_ar_arlock
  assign mem_master_arlock =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q40[15] ;

  // value method mem_master_ar_arcache
  assign mem_master_arcache =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q40[14:11] ;

  // value method mem_master_ar_arprot
  assign mem_master_arprot =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q40[10:8] ;

  // value method mem_master_ar_arqos
  assign mem_master_arqos =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q40[7:4] ;

  // value method mem_master_ar_arregion
  assign mem_master_arregion =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q40[3:0] ;

  // value method mem_master_ar_arvalid
  assign mem_master_arvalid =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek ;

  // action method mem_master_ar_arready
  assign CAN_FIRE_mem_master_ar_arready = 1'd1 ;
  assign WILL_FIRE_mem_master_ar_arready = 1'd1 ;

  // action method mem_master_r_rflit
  assign CAN_FIRE_mem_master_r_rflit = 1'd1 ;
  assign WILL_FIRE_mem_master_r_rflit = mem_master_rvalid ;

  // value method mem_master_r_rready
  assign mem_master_rready = !cache_master_xactor_shim_rff_rv[138] ;

  // submodule cache_f_reset_reqs
  FIFO2 #(.width(32'd1), .guarded(32'd1)) cache_f_reset_reqs(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(cache_f_reset_reqs$D_IN),
							     .ENQ(cache_f_reset_reqs$ENQ),
							     .DEQ(cache_f_reset_reqs$DEQ),
							     .CLR(cache_f_reset_reqs$CLR),
							     .D_OUT(cache_f_reset_reqs$D_OUT),
							     .FULL_N(cache_f_reset_reqs$FULL_N),
							     .EMPTY_N(cache_f_reset_reqs$EMPTY_N));

  // submodule cache_f_reset_rsps
  FIFO2 #(.width(32'd1), .guarded(32'd1)) cache_f_reset_rsps(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(cache_f_reset_rsps$D_IN),
							     .ENQ(cache_f_reset_rsps$ENQ),
							     .DEQ(cache_f_reset_rsps$DEQ),
							     .CLR(cache_f_reset_rsps$CLR),
							     .D_OUT(cache_f_reset_rsps$D_OUT),
							     .FULL_N(cache_f_reset_rsps$FULL_N),
							     .EMPTY_N(cache_f_reset_rsps$EMPTY_N));

  // submodule cache_ram_state_and_ctag_cset
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd23),
	  .MEMSIZE(7'd64)) cache_ram_state_and_ctag_cset(.CLKA(CLK),
							 .CLKB(CLK),
							 .ADDRA(cache_ram_state_and_ctag_cset$ADDRA),
							 .ADDRB(cache_ram_state_and_ctag_cset$ADDRB),
							 .DIA(cache_ram_state_and_ctag_cset$DIA),
							 .DIB(cache_ram_state_and_ctag_cset$DIB),
							 .WEA(cache_ram_state_and_ctag_cset$WEA),
							 .WEB(cache_ram_state_and_ctag_cset$WEB),
							 .ENA(cache_ram_state_and_ctag_cset$ENA),
							 .ENB(cache_ram_state_and_ctag_cset$ENB),
							 .DOA(),
							 .DOB(cache_ram_state_and_ctag_cset$DOB));

  // submodule cache_ram_word128_set
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd8),
	  .DATA_WIDTH(32'd130),
	  .MEMSIZE(9'd256)) cache_ram_word128_set(.CLKA(CLK),
						  .CLKB(CLK),
						  .ADDRA(cache_ram_word128_set$ADDRA),
						  .ADDRB(cache_ram_word128_set$ADDRB),
						  .DIA(cache_ram_word128_set$DIA),
						  .DIB(cache_ram_word128_set$DIB),
						  .WEA(cache_ram_word128_set$WEA),
						  .WEB(cache_ram_word128_set$WEB),
						  .ENA(cache_ram_word128_set$ENA),
						  .ENB(cache_ram_word128_set$ENB),
						  .DOA(),
						  .DOB(cache_ram_word128_set$DOB));

  // submodule cache_soc_map
  mkSoC_Map cache_soc_map(.CLK(CLK),
			  .RST_N(RST_N),
			  .m_is_IO_addr_addr(cache_soc_map$m_is_IO_addr_addr),
			  .m_is_mem_addr_addr(cache_soc_map$m_is_mem_addr_addr),
			  .m_is_near_mem_IO_addr_addr(cache_soc_map$m_is_near_mem_IO_addr_addr),
			  .m_plic_addr_range(),
			  .m_near_mem_io_addr_range(),
			  .m_flash_mem_addr_range(),
			  .m_ethernet_0_addr_range(),
			  .m_dma_0_addr_range(),
			  .m_uart16550_0_addr_range(),
			  .m_gpio_0_addr_range(),
			  .m_boot_rom_addr_range(),
			  .m_ddr4_0_uncached_addr_range(),
			  .m_ddr4_0_cached_addr_range(),
			  .m_is_mem_addr(),
			  .m_is_IO_addr(),
			  .m_is_near_mem_IO_addr(),
			  .m_pc_reset_value(),
			  .m_pcc_reset_value(),
			  .m_ddc_reset_value(),
			  .m_mtcc_reset_value(),
			  .m_mepcc_reset_value(),
			  .m_mtvec_reset_value(),
			  .m_nmivec_reset_value());

  // rule RL_cache_rl_reset
  assign CAN_FIRE_RL_cache_rl_reset =
	     cache_f_reset_reqs_i_notEmpty__3_AND_cache_f_r_ETC___d66 &&
	     cache_rg_state == 4'd1 ;
  assign WILL_FIRE_RL_cache_rl_reset = CAN_FIRE_RL_cache_rl_reset ;

  // rule RL_cache_rl_shift_sb_to_load_delay
  assign CAN_FIRE_RL_cache_rl_shift_sb_to_load_delay = 1'd1 ;
  assign WILL_FIRE_RL_cache_rl_shift_sb_to_load_delay = 1'd1 ;

  // rule RL_cache_rl_probe_and_immed_rsp
  assign CAN_FIRE_RL_cache_rl_probe_and_immed_rsp =
	     (!EN_commit || cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010 ||
	      IF_cache_rg_op_0_EQ_1_8_OR_cache_rg_op_0_EQ_2__ETC___d129) &&
	     NOT_cache_f_reset_reqs_notEmpty__4_32_AND_cach_ETC___d143 ;
  assign WILL_FIRE_RL_cache_rl_probe_and_immed_rsp =
	     CAN_FIRE_RL_cache_rl_probe_and_immed_rsp ;

  // rule RL_cache_rl_ST_AMO_response
  assign CAN_FIRE_RL_cache_rl_ST_AMO_response = cache_rg_state == 4'd11 ;
  assign WILL_FIRE_RL_cache_rl_ST_AMO_response =
	     CAN_FIRE_RL_cache_rl_ST_AMO_response ;

  // rule RL_cache_rl_start_reset
  assign CAN_FIRE_RL_cache_rl_start_reset =
	     cache_f_reset_reqs$EMPTY_N && cache_rg_state != 4'd1 ;
  assign WILL_FIRE_RL_cache_rl_start_reset =
	     CAN_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_io_read_req
  assign CAN_FIRE_RL_cache_rl_io_read_req =
	     !cache_master_xactor_clearing &&
	     !cache_master_xactor_shim_arff_rv[98] &&
	     NOT_cache_f_reset_reqs_notEmpty__4_32_AND_cach_ETC___d922 &&
	     cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d854 ==
	     4'd0 ;
  assign WILL_FIRE_RL_cache_rl_io_read_req =
	     CAN_FIRE_RL_cache_rl_io_read_req ;

  // rule RL_cache_rl_maintain_io_read_rsp
  assign CAN_FIRE_RL_cache_rl_maintain_io_read_rsp =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_state == 4'd14 ;
  assign WILL_FIRE_RL_cache_rl_maintain_io_read_rsp =
	     CAN_FIRE_RL_cache_rl_maintain_io_read_rsp ;

  // rule RL_cache_rl_io_write_req
  assign CAN_FIRE_RL_cache_rl_io_write_req =
	     !cache_master_xactor_clearing &&
	     !cache_master_xactor_shim_awff_rv[98] &&
	     !cache_master_xactor_shim_wff_rv[147] &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 4'd12 &&
	     cache_rg_op == 2'd1 ;
  assign WILL_FIRE_RL_cache_rl_io_write_req =
	     CAN_FIRE_RL_cache_rl_io_write_req ;

  // rule RL_cache_rl_io_AMO_SC_req
  assign CAN_FIRE_RL_cache_rl_io_AMO_SC_req =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_state == 4'd12 &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00011 ;
  assign WILL_FIRE_RL_cache_rl_io_AMO_SC_req =
	     CAN_FIRE_RL_cache_rl_io_AMO_SC_req ;

  // rule RL_cache_rl_io_AMO_op_req
  assign CAN_FIRE_RL_cache_rl_io_AMO_op_req =
	     !cache_master_xactor_clearing &&
	     !cache_master_xactor_shim_arff_rv[98] &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 4'd12 &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] != 5'b00010 &&
	     cache_rg_amo_funct7[6:2] != 5'b00011 ;
  assign WILL_FIRE_RL_cache_rl_io_AMO_op_req =
	     CAN_FIRE_RL_cache_rl_io_AMO_op_req ;

  // rule RL_cache_rl_drive_exception_rsp
  assign CAN_FIRE_RL_cache_rl_drive_exception_rsp =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_state == 4'd4 ;
  assign WILL_FIRE_RL_cache_rl_drive_exception_rsp =
	     CAN_FIRE_RL_cache_rl_drive_exception_rsp ;

  // rule RL_cache_master_xactor_ug_master_u_b_warnDoPut
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut =
	     cache_master_xactor_ug_master_u_b_putWire$whas &&
	     cache_master_xactor_shim_bff_rv[7] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut ;

  // rule RL_cache_master_xactor_ug_master_u_b_doPut
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut =
	     !cache_master_xactor_shim_bff_rv[7] &&
	     cache_master_xactor_ug_master_u_b_putWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut ;

  // rule RL_cache_rl_discard_write_rsp
  assign CAN_FIRE_RL_cache_rl_discard_write_rsp =
	     !cache_master_xactor_clearing &&
	     cache_master_xactor_shim_bff_rv$port1__read[7] ;
  assign WILL_FIRE_RL_cache_rl_discard_write_rsp =
	     CAN_FIRE_RL_cache_rl_discard_write_rsp ;

  // rule RL_cache_master_xactor_ug_master_u_r_warnDoPut
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut =
	     cache_master_xactor_ug_master_u_r_putWire$whas &&
	     cache_master_xactor_shim_rff_rv[138] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut ;

  // rule RL_cache_master_xactor_ug_master_u_r_doPut
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut =
	     !cache_master_xactor_shim_rff_rv[138] &&
	     cache_master_xactor_ug_master_u_r_putWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut ;

  // rule RL_cache_rl_io_read_rsp
  assign CAN_FIRE_RL_cache_rl_io_read_rsp =
	     !cache_master_xactor_clearing &&
	     cache_master_xactor_shim_rff_rv$port1__read[138] &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 4'd13 ;
  assign WILL_FIRE_RL_cache_rl_io_read_rsp =
	     CAN_FIRE_RL_cache_rl_io_read_rsp ;

  // rule RL_cache_rl_io_AMO_read_rsp
  assign CAN_FIRE_RL_cache_rl_io_AMO_read_rsp =
	     NOT_cache_master_xactor_clearing_read__0_8_AND_ETC___d1138 &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 4'd15 ;
  assign WILL_FIRE_RL_cache_rl_io_AMO_read_rsp =
	     CAN_FIRE_RL_cache_rl_io_AMO_read_rsp ;

  // rule RL_cache_rl_start_cache_refill
  assign CAN_FIRE_RL_cache_rl_start_cache_refill =
	     !cache_master_xactor_clearing &&
	     !cache_master_xactor_shim_arff_rv[98] &&
	     !EN_req &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 4'd8 &&
	     cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d854 ==
	     4'd0 ;
  assign WILL_FIRE_RL_cache_rl_start_cache_refill =
	     CAN_FIRE_RL_cache_rl_start_cache_refill && !EN_req ;

  // rule RL_cache_rl_cache_refill_rsps_loop
  assign CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop =
	     !cache_master_xactor_clearing &&
	     cache_master_xactor_shim_rff_rv$port1__read[138] &&
	     !EN_req &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 4'd9 ;
  assign WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop =
	     CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop && !EN_req ;

  // rule RL_cache_rl_rereq
  assign CAN_FIRE_RL_cache_rl_rereq =
	     !EN_req && !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 4'd10 ;
  assign WILL_FIRE_RL_cache_rl_rereq = CAN_FIRE_RL_cache_rl_rereq && !EN_req ;

  // rule RL_cache_master_xactor_ug_master_u_aw_setPeek
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek =
	     cache_master_xactor_shim_awff_rv$port1__read[98] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek ;

  // rule RL_cache_master_xactor_ug_master_u_aw_warnDoDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop =
	     cache_master_xactor_ug_master_u_aw_dropWire$whas &&
	     !cache_master_xactor_shim_awff_rv$port1__read[98] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop ;

  // rule RL_cache_master_xactor_ug_master_u_aw_doDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop =
	     cache_master_xactor_shim_awff_rv$port1__read[98] &&
	     cache_master_xactor_ug_master_u_aw_dropWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop ;

  // rule RL_cache_master_xactor_ug_master_u_w_setPeek
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek =
	     cache_master_xactor_shim_wff_rv$port1__read[147] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek ;

  // rule RL_cache_master_xactor_ug_master_u_w_warnDoDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop =
	     cache_master_xactor_ug_master_u_w_dropWire$whas &&
	     !cache_master_xactor_shim_wff_rv$port1__read[147] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop ;

  // rule RL_cache_master_xactor_ug_master_u_w_doDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop =
	     cache_master_xactor_shim_wff_rv$port1__read[147] &&
	     cache_master_xactor_ug_master_u_w_dropWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop ;

  // rule RL_cache_master_xactor_ug_master_u_ar_setPeek
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek =
	     cache_master_xactor_shim_arff_rv$port1__read[98] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek ;

  // rule RL_cache_master_xactor_ug_master_u_ar_warnDoDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop =
	     cache_master_xactor_ug_master_u_ar_dropWire$whas &&
	     !cache_master_xactor_shim_arff_rv$port1__read[98] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop ;

  // rule RL_cache_master_xactor_ug_master_u_ar_doDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop =
	     cache_master_xactor_shim_arff_rv$port1__read[98] &&
	     cache_master_xactor_ug_master_u_ar_dropWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop ;

  // rule RL_cache_master_xactor_do_clear
  assign CAN_FIRE_RL_cache_master_xactor_do_clear =
	     cache_master_xactor_clearing ;
  assign WILL_FIRE_RL_cache_master_xactor_do_clear =
	     cache_master_xactor_clearing ;

  // inputs to muxes for submodule ports
  assign MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 ;
  assign MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d767 ;
  assign MUX_cache_dw_output_ld_val$wset_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 ;
  assign MUX_cache_dw_output_ld_val$wset_1__SEL_3 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_rg_op_0_EQ_0_1_OR_cache_rg_op_0_EQ_2_2_A_ETC___d187 ;
  assign MUX_cache_dw_output_ld_val$wset_1__SEL_4 =
	     WILL_FIRE_RL_cache_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_ST_AMO_response ;
  assign MUX_cache_master_xactor_shim_arff_rv$port0__write_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_io_AMO_op_req ||
	     WILL_FIRE_RL_cache_rl_io_read_req ;
  assign MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 =
	     EN_req &&
	     (req_width_code_EQ_0b0_336_OR_req_width_code_EQ_ETC___d1372 ||
	      req_width_code == 3'b100 && req_addr[3:0] == 4'b0) ;
  assign MUX_cache_ram_word128_set$a_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 ;
  assign MUX_cache_ram_word128_set$b_put_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_word128_set_in_cache[1:0] != 2'd3 ;
  assign MUX_cache_rg_error_during_refill$write_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 ;
  assign MUX_cache_rg_exc_code$write_1__SEL_2 =
	     EN_req &&
	     NOT_req_width_code_EQ_0b0_336_337_AND_NOT_req__ETC___d1356 &&
	     (req_width_code != 3'b100 || req_addr[3:0] != 4'b0) ;
  assign MUX_cache_rg_exc_code$write_1__SEL_3 =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 ;
  assign MUX_cache_rg_exc_code$write_1__SEL_4 =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 ;
  assign MUX_cache_rg_exc_code$write_1__SEL_5 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && !EN_commit ;
  assign MUX_cache_rg_ld_val$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d485 ;
  assign MUX_cache_rg_lrsc_valid$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_rg_op_0_EQ_0_1_OR_cache_rg_op_0_EQ_2_2_A_ETC___d182 ;
  assign MUX_cache_rg_state$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_word128_set_in_cache[1:0] == 2'd3 ;
  assign MUX_cache_rg_state$write_1__SEL_12 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     (!EN_commit ||
	      cache_rg_op_0_EQ_0_1_OR_cache_rg_op_0_EQ_2_2_A_ETC___d153 ||
	      NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d158) ;
  assign MUX_cache_rg_state$write_1__SEL_13 =
	     WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 ;
  assign MUX_cache_ctr_wr_rsps_pending_inrg$write_1__VAL_2 =
	     cache_ctr_wr_rsps_pending_inrg + 4'd1 ;
  assign MUX_cache_ctr_wr_rsps_pending_outrg$write_1__VAL_1 =
	     cache_ctr_wr_rsps_pending_outrg + 4'd1 ;
  assign MUX_cache_dw_output_ld_val$wset_1__VAL_1 = { 1'd0, x__h36610 } ;
  assign MUX_cache_dw_output_ld_val$wset_1__VAL_2 =
	     { 65'd0,
	       IF_cache_rg_width_code_89_EQ_2_94_THEN_SEXT_IF_ETC___d1244 } ;
  assign MUX_cache_dw_output_ld_val$wset_1__VAL_3 =
	     { cache_rg_op_0_EQ_0_1_OR_cache_rg_op_0_EQ_2_2_A_ETC___d275,
	       IF_cache_rg_op_0_EQ_0_1_OR_cache_rg_op_0_EQ_2__ETC___d453 } ;
  assign MUX_cache_dw_output_st_amo_val$wset_1__VAL_1 =
	     { _0__q38[IF_cache_rg_addr_BITS_4_TO_0_EQ_0_THEN_1_ELSE_0__q39[0]],
	       128'd0 } ;
  assign MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_1 =
	     { 6'd32,
	       mem_req_wr_addr_awaddr__h39606,
	       8'd0,
	       size_val__h39062,
	       18'd65536 } ;
  assign MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_2 =
	     { 6'd32, cline_fabric_addr__h33099, 29'd7405568 } ;
  assign MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_1 =
	     { 6'd32,
	       mem_req_wr_addr_awaddr__h39606,
	       8'd0,
	       _theResult___fst_val__h39690,
	       18'd65536 } ;
  assign MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_2 =
	     { 6'd32,
	       mem_req_wr_addr_awaddr__h32281,
	       8'd0,
	       _theResult___fst_val__h39690,
	       18'd65536 } ;
  assign MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_1 =
	     { 1'd1,
	       mem_req_wr_data_wdata__h39743,
	       mem_req_wr_data_wstrb__h39744,
	       3'd4 } ;
  assign MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_2 =
	     { 1'd1,
	       IF_cache_rg_op_0_EQ_1_8_OR_cache_rg_op_0_EQ_2__ETC___d782,
	       mem_req_wr_data_wstrb__h32419,
	       IF_cache_rg_op_0_EQ_1_8_OR_cache_rg_op_0_EQ_2__ETC___d795 } ;
  assign MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_3 =
	     { 1'd1,
	       mem_req_wr_data_wdata__h38306,
	       mem_req_wr_data_wstrb__h39744,
	       1'd1,
	       mem_req_wr_data_wuser__h27380 } ;
  assign MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1 =
	     { 3'd4, cache_rg_pa[31:12] } ;
  assign MUX_cache_ram_word128_set$a_put_3__VAL_1 =
	     { cache_master_xactor_shim_rff_rv$port1__read[1:0],
	       cache_master_xactor_shim_rff_rv$port1__read[132:5] } ;
  assign MUX_cache_ram_word128_set$a_put_3__VAL_2 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       { x__h22606, x__h22745 } :
	       { cache_ram_word128_set_b_read__52_BITS_129_TO_1_ETC___d543,
		 x__h28077 } ;
  assign MUX_cache_ram_word128_set$b_put_2__VAL_2 =
	     cache_rg_word128_set_in_cache + 8'd1 ;
  assign MUX_cache_ram_word128_set$b_put_2__VAL_4 =
	     { cache_rg_addr[11:6], 2'd0 } ;
  assign MUX_cache_rg_cset_in_cache$write_1__VAL_1 =
	     cache_rg_cset_in_cache + 6'd1 ;
  assign MUX_cache_rg_exc_code$write_1__VAL_2 =
	     (req_op == 2'd0) ? 6'd4 : 6'd6 ;
  assign MUX_cache_rg_ld_val$write_1__VAL_2 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       { 128'd0, lrsc_result__h21855 } :
	       { 65'd0,
		 IF_cache_rg_width_code_89_EQ_2_94_THEN_SEXT_IF_ETC___d524 } ;
  assign MUX_cache_rg_st_amo_val$write_1__VAL_2 = { 65'd0, x__h28175 } ;
  assign MUX_cache_rg_state$write_1__VAL_2 =
	     (cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 ||
	      cache_rg_error_during_refill) ?
	       4'd4 :
	       4'd10 ;
  assign MUX_cache_rg_state$write_1__VAL_4 =
	     (NOT_req_width_code_EQ_0b0_336_337_AND_NOT_req__ETC___d1356 &&
	      (req_width_code != 3'b100 || req_addr[3:0] != 4'b0)) ?
	       4'd4 :
	       4'd3 ;
  assign MUX_cache_rg_state$write_1__VAL_5 =
	     (cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0) ?
	       4'd14 :
	       4'd4 ;
  assign MUX_cache_rg_state$write_1__VAL_12 =
	     EN_commit ?
	       IF_cache_rg_op_0_EQ_0_1_OR_cache_rg_op_0_EQ_2__ETC___d163 :
	       4'd4 ;

  // inlined wires
  assign cache_master_xactor_ug_master_u_b_putWire$wget =
	     { mem_master_bid, mem_master_bresp } ;
  assign cache_master_xactor_ug_master_u_b_putWire$whas =
	     mem_master_bvalid && !cache_master_xactor_shim_bff_rv[7] ;
  assign cache_master_xactor_ug_master_u_r_putWire$wget =
	     { mem_master_rid,
	       mem_master_rdata,
	       mem_master_rresp,
	       mem_master_rlast,
	       mem_master_ruser } ;
  assign cache_master_xactor_ug_master_u_r_putWire$whas =
	     mem_master_rvalid && !cache_master_xactor_shim_rff_rv[138] ;
  assign cache_dw_valid$whas =
	     (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp ||
	      WILL_FIRE_RL_cache_rl_io_read_rsp) &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_rg_op_0_EQ_0_1_OR_cache_rg_op_0_EQ_2_2_A_ETC___d187 ||
	     WILL_FIRE_RL_cache_rl_drive_exception_rsp ||
	     WILL_FIRE_RL_cache_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_ST_AMO_response ;
  always@(MUX_cache_dw_output_ld_val$wset_1__SEL_1 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_1 or
	  MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_1 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_2 or
	  MUX_cache_dw_output_ld_val$wset_1__SEL_3 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_3 or
	  MUX_cache_dw_output_ld_val$wset_1__SEL_4 or cache_rg_ld_val)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_dw_output_ld_val$wset_1__SEL_1:
	  cache_dw_output_ld_val$wget =
	      MUX_cache_dw_output_ld_val$wset_1__VAL_1;
      MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_1:
	  cache_dw_output_ld_val$wget =
	      MUX_cache_dw_output_ld_val$wset_1__VAL_2;
      MUX_cache_dw_output_ld_val$wset_1__SEL_3:
	  cache_dw_output_ld_val$wget =
	      MUX_cache_dw_output_ld_val$wset_1__VAL_3;
      MUX_cache_dw_output_ld_val$wset_1__SEL_4:
	  cache_dw_output_ld_val$wget = cache_rg_ld_val;
      default: cache_dw_output_ld_val$wget =
		   129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_dw_output_st_amo_val$wget =
	     MUX_cache_dw_output_ld_val$wset_1__SEL_3 ?
	       MUX_cache_dw_output_st_amo_val$wset_1__VAL_1 :
	       cache_rg_st_amo_val ;
  assign cache_master_xactor_ug_master_u_aw_dropWire$whas =
	     cache_master_xactor_shim_awff_rv$port1__read[98] &&
	     mem_master_awready ;
  assign cache_master_xactor_ug_master_u_w_dropWire$whas =
	     cache_master_xactor_shim_wff_rv$port1__read[147] &&
	     mem_master_wready ;
  assign cache_master_xactor_ug_master_u_ar_dropWire$whas =
	     cache_master_xactor_shim_arff_rv$port1__read[98] &&
	     mem_master_arready ;
  assign cache_master_xactor_shim_awff_rv$EN_port0__write =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d767 ||
	     WILL_FIRE_RL_cache_rl_io_write_req ;
  always@(MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_1 or
	  MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_1 or
	  MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_2 or
	  MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_2 or
	  WILL_FIRE_RL_cache_rl_io_write_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_1:
	  cache_master_xactor_shim_awff_rv$port0__write_1 =
	      MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_1;
      MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_2:
	  cache_master_xactor_shim_awff_rv$port0__write_1 =
	      MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_2;
      WILL_FIRE_RL_cache_rl_io_write_req:
	  cache_master_xactor_shim_awff_rv$port0__write_1 =
	      MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_1;
      default: cache_master_xactor_shim_awff_rv$port0__write_1 =
		   99'h2AAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_master_xactor_shim_awff_rv$port1__read =
	     cache_master_xactor_shim_awff_rv$EN_port0__write ?
	       cache_master_xactor_shim_awff_rv$port0__write_1 :
	       cache_master_xactor_shim_awff_rv ;
  assign cache_master_xactor_shim_awff_rv$port2__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop ?
	       99'h2AAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_awff_rv$port1__read ;
  assign cache_master_xactor_shim_awff_rv$port3__read =
	     cache_master_xactor_clearing ?
	       99'h2AAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_awff_rv$port2__read ;
  assign cache_master_xactor_shim_wff_rv$EN_port0__write =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d767 ||
	     WILL_FIRE_RL_cache_rl_io_write_req ;
  always@(MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_1 or
	  MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_1 or
	  MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_2 or
	  MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_2 or
	  WILL_FIRE_RL_cache_rl_io_write_req or
	  MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_1:
	  cache_master_xactor_shim_wff_rv$port0__write_1 =
	      MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_1;
      MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_2:
	  cache_master_xactor_shim_wff_rv$port0__write_1 =
	      MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_2;
      WILL_FIRE_RL_cache_rl_io_write_req:
	  cache_master_xactor_shim_wff_rv$port0__write_1 =
	      MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_3;
      default: cache_master_xactor_shim_wff_rv$port0__write_1 =
		   148'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_master_xactor_shim_wff_rv$port1__read =
	     cache_master_xactor_shim_wff_rv$EN_port0__write ?
	       cache_master_xactor_shim_wff_rv$port0__write_1 :
	       cache_master_xactor_shim_wff_rv ;
  assign cache_master_xactor_shim_wff_rv$port2__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop ?
	       148'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_wff_rv$port1__read ;
  assign cache_master_xactor_shim_wff_rv$port3__read =
	     cache_master_xactor_clearing ?
	       148'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_wff_rv$port2__read ;
  assign cache_master_xactor_shim_bff_rv$port0__write_1 =
	     { 1'd1, cache_master_xactor_ug_master_u_b_putWire$wget } ;
  assign cache_master_xactor_shim_bff_rv$port1__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut ?
	       cache_master_xactor_shim_bff_rv$port0__write_1 :
	       cache_master_xactor_shim_bff_rv ;
  assign cache_master_xactor_shim_bff_rv$port2__read =
	     CAN_FIRE_RL_cache_rl_discard_write_rsp ?
	       8'd42 :
	       cache_master_xactor_shim_bff_rv$port1__read ;
  assign cache_master_xactor_shim_bff_rv$port3__read =
	     cache_master_xactor_clearing ?
	       8'd42 :
	       cache_master_xactor_shim_bff_rv$port2__read ;
  assign cache_master_xactor_shim_arff_rv$EN_port0__write =
	     WILL_FIRE_RL_cache_rl_io_AMO_op_req ||
	     WILL_FIRE_RL_cache_rl_io_read_req ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;
  assign cache_master_xactor_shim_arff_rv$port0__write_1 =
	     MUX_cache_master_xactor_shim_arff_rv$port0__write_1__SEL_1 ?
	       MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_1 :
	       MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_2 ;
  assign cache_master_xactor_shim_arff_rv$port1__read =
	     cache_master_xactor_shim_arff_rv$EN_port0__write ?
	       cache_master_xactor_shim_arff_rv$port0__write_1 :
	       cache_master_xactor_shim_arff_rv ;
  assign cache_master_xactor_shim_arff_rv$port2__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop ?
	       99'h2AAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_arff_rv$port1__read ;
  assign cache_master_xactor_shim_arff_rv$port3__read =
	     cache_master_xactor_clearing ?
	       99'h2AAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_arff_rv$port2__read ;
  assign cache_master_xactor_shim_rff_rv$port0__write_1 =
	     { 1'd1, cache_master_xactor_ug_master_u_r_putWire$wget } ;
  assign cache_master_xactor_shim_rff_rv$port1__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut ?
	       cache_master_xactor_shim_rff_rv$port0__write_1 :
	       cache_master_xactor_shim_rff_rv ;
  assign cache_master_xactor_shim_rff_rv$EN_port1__write =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop ;
  assign cache_master_xactor_shim_rff_rv$port2__read =
	     cache_master_xactor_shim_rff_rv$EN_port1__write ?
	       139'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_rff_rv$port1__read ;
  assign cache_master_xactor_shim_rff_rv$port3__read =
	     cache_master_xactor_clearing ?
	       139'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_rff_rv$port2__read ;
  assign cache_crg_sb_to_load_delay$port0__write_1 =
	     { 1'd0, cache_crg_sb_to_load_delay[10:1] } ;
  assign cache_crg_sb_to_load_delay$EN_port1__write =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     cache_rg_op_0_EQ_1_8_OR_cache_rg_op_0_EQ_2_2_A_ETC___d762 ;
  assign cache_crg_sb_to_load_delay$port2__read =
	     cache_crg_sb_to_load_delay$EN_port1__write ?
	       11'd2047 :
	       cache_crg_sb_to_load_delay$port0__write_1 ;

  // register cache_cfg_verbosity
  assign cache_cfg_verbosity$D_IN = set_verbosity_verbosity ;
  assign cache_cfg_verbosity$EN = EN_set_verbosity ;

  // register cache_crg_sb_to_load_delay
  assign cache_crg_sb_to_load_delay$D_IN =
	     cache_crg_sb_to_load_delay$port2__read ;
  assign cache_crg_sb_to_load_delay$EN = 1'b1 ;

  // register cache_ctr_wr_rsps_pending_inrg
  always@(MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_1 or
	  MUX_cache_ctr_wr_rsps_pending_inrg$write_1__VAL_2 or
	  MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_2 or
	  WILL_FIRE_RL_cache_rl_io_write_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_1:
	  cache_ctr_wr_rsps_pending_inrg$D_IN =
	      MUX_cache_ctr_wr_rsps_pending_inrg$write_1__VAL_2;
      MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_2:
	  cache_ctr_wr_rsps_pending_inrg$D_IN =
	      MUX_cache_ctr_wr_rsps_pending_inrg$write_1__VAL_2;
      WILL_FIRE_RL_cache_rl_io_write_req:
	  cache_ctr_wr_rsps_pending_inrg$D_IN =
	      MUX_cache_ctr_wr_rsps_pending_inrg$write_1__VAL_2;
      default: cache_ctr_wr_rsps_pending_inrg$D_IN =
		   4'b1010 /* unspecified value */ ;
    endcase
  end
  assign cache_ctr_wr_rsps_pending_inrg$EN =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d767 ||
	     WILL_FIRE_RL_cache_rl_io_write_req ;

  // register cache_ctr_wr_rsps_pending_outrg
  assign cache_ctr_wr_rsps_pending_outrg$D_IN =
	     WILL_FIRE_RL_cache_rl_discard_write_rsp ?
	       MUX_cache_ctr_wr_rsps_pending_outrg$write_1__VAL_1 :
	       cache_ctr_wr_rsps_pending_inrg ;
  assign cache_ctr_wr_rsps_pending_outrg$EN =
	     WILL_FIRE_RL_cache_rl_start_reset && !cache_f_reset_reqs$D_OUT ||
	     WILL_FIRE_RL_cache_rl_discard_write_rsp ;

  // register cache_master_xactor_clearing
  assign cache_master_xactor_clearing$D_IN = !cache_master_xactor_clearing ;
  assign cache_master_xactor_clearing$EN =
	     WILL_FIRE_RL_cache_rl_reset && !cache_f_reset_reqs$D_OUT ||
	     cache_master_xactor_clearing ;

  // register cache_master_xactor_shim_arff_rv
  assign cache_master_xactor_shim_arff_rv$D_IN =
	     cache_master_xactor_shim_arff_rv$port3__read ;
  assign cache_master_xactor_shim_arff_rv$EN = 1'b1 ;

  // register cache_master_xactor_shim_awff_rv
  assign cache_master_xactor_shim_awff_rv$D_IN =
	     cache_master_xactor_shim_awff_rv$port3__read ;
  assign cache_master_xactor_shim_awff_rv$EN = 1'b1 ;

  // register cache_master_xactor_shim_bff_rv
  assign cache_master_xactor_shim_bff_rv$D_IN =
	     cache_master_xactor_shim_bff_rv$port3__read ;
  assign cache_master_xactor_shim_bff_rv$EN = 1'b1 ;

  // register cache_master_xactor_shim_rff_rv
  assign cache_master_xactor_shim_rff_rv$D_IN =
	     cache_master_xactor_shim_rff_rv$port3__read ;
  assign cache_master_xactor_shim_rff_rv$EN = 1'b1 ;

  // register cache_master_xactor_shim_wff_rv
  assign cache_master_xactor_shim_wff_rv$D_IN =
	     cache_master_xactor_shim_wff_rv$port3__read ;
  assign cache_master_xactor_shim_wff_rv$EN = 1'b1 ;

  // register cache_rg_addr
  assign cache_rg_addr$D_IN = req_addr ;
  assign cache_rg_addr$EN = EN_req ;

  // register cache_rg_amo_funct7
  assign cache_rg_amo_funct7$D_IN = req_amo_funct7 ;
  assign cache_rg_amo_funct7$EN = EN_req ;

  // register cache_rg_cset_in_cache
  assign cache_rg_cset_in_cache$D_IN =
	     WILL_FIRE_RL_cache_rl_reset ?
	       MUX_cache_rg_cset_in_cache$write_1__VAL_1 :
	       6'd0 ;
  assign cache_rg_cset_in_cache$EN =
	     WILL_FIRE_RL_cache_rl_reset ||
	     WILL_FIRE_RL_cache_rl_start_reset ;

  // register cache_rg_error_during_refill
  assign cache_rg_error_during_refill$D_IN =
	     MUX_cache_rg_error_during_refill$write_1__SEL_1 ;
  assign cache_rg_error_during_refill$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // register cache_rg_exc_code
  always@(MUX_cache_rg_error_during_refill$write_1__SEL_1 or
	  MUX_cache_rg_exc_code$write_1__SEL_2 or
	  MUX_cache_rg_exc_code$write_1__VAL_2 or
	  MUX_cache_rg_exc_code$write_1__SEL_3 or
	  MUX_cache_rg_exc_code$write_1__SEL_4 or
	  MUX_cache_rg_exc_code$write_1__SEL_5)
  case (1'b1)
    MUX_cache_rg_error_during_refill$write_1__SEL_1:
	cache_rg_exc_code$D_IN = 6'd1;
    MUX_cache_rg_exc_code$write_1__SEL_2:
	cache_rg_exc_code$D_IN = MUX_cache_rg_exc_code$write_1__VAL_2;
    MUX_cache_rg_exc_code$write_1__SEL_3: cache_rg_exc_code$D_IN = 6'd7;
    MUX_cache_rg_exc_code$write_1__SEL_4: cache_rg_exc_code$D_IN = 6'd5;
    MUX_cache_rg_exc_code$write_1__SEL_5: cache_rg_exc_code$D_IN = 6'd32;
    default: cache_rg_exc_code$D_IN = 6'b101010 /* unspecified value */ ;
  endcase
  assign cache_rg_exc_code$EN =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && !EN_commit ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 ||
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 ||
	     EN_req &&
	     NOT_req_width_code_EQ_0b0_336_337_AND_NOT_req__ETC___d1356 &&
	     (req_width_code != 3'b100 || req_addr[3:0] != 4'b0) ;

  // register cache_rg_is_unsigned
  assign cache_rg_is_unsigned$D_IN = req_is_unsigned ;
  assign cache_rg_is_unsigned$EN = EN_req ;

  // register cache_rg_ld_val
  always@(MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_1 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_2 or
	  MUX_cache_rg_ld_val$write_1__SEL_2 or
	  MUX_cache_rg_ld_val$write_1__VAL_2 or
	  WILL_FIRE_RL_cache_rl_io_read_rsp or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_1 or
	  WILL_FIRE_RL_cache_rl_io_AMO_SC_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_1:
	  cache_rg_ld_val$D_IN = MUX_cache_dw_output_ld_val$wset_1__VAL_2;
      MUX_cache_rg_ld_val$write_1__SEL_2:
	  cache_rg_ld_val$D_IN = MUX_cache_rg_ld_val$write_1__VAL_2;
      WILL_FIRE_RL_cache_rl_io_read_rsp:
	  cache_rg_ld_val$D_IN = MUX_cache_dw_output_ld_val$wset_1__VAL_1;
      WILL_FIRE_RL_cache_rl_io_AMO_SC_req: cache_rg_ld_val$D_IN = 129'd1;
      default: cache_rg_ld_val$D_IN =
		   129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_rg_ld_val$EN =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d485 ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_io_AMO_SC_req ;

  // register cache_rg_lower_word64
  assign cache_rg_lower_word64$D_IN = 64'h0 ;
  assign cache_rg_lower_word64$EN = 1'b0 ;

  // register cache_rg_lower_word64_full
  assign cache_rg_lower_word64_full$D_IN = 1'd0 ;
  assign cache_rg_lower_word64_full$EN =
	     WILL_FIRE_RL_cache_rl_start_cache_refill ||
	     WILL_FIRE_RL_cache_rl_start_reset ;

  // register cache_rg_lrsc_pa
  assign cache_rg_lrsc_pa$D_IN = cache_rg_addr ;
  assign cache_rg_lrsc_pa$EN =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00010 &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__19_BITS__ETC___d125 ;

  // register cache_rg_lrsc_valid
  assign cache_rg_lrsc_valid$D_IN =
	     MUX_cache_rg_lrsc_valid$write_1__SEL_2 &&
	     cache_rg_op_0_EQ_0_1_OR_cache_rg_op_0_EQ_2_2_A_ETC___d184 ;
  assign cache_rg_lrsc_valid$EN =
	     WILL_FIRE_RL_cache_rl_io_read_req && cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00010 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_rg_op_0_EQ_0_1_OR_cache_rg_op_0_EQ_2_2_A_ETC___d182 ||
	     WILL_FIRE_RL_cache_rl_start_reset ;

  // register cache_rg_op
  assign cache_rg_op$D_IN = req_op ;
  assign cache_rg_op$EN = EN_req ;

  // register cache_rg_pa
  assign cache_rg_pa$D_IN = EN_req ? req_addr : cache_rg_addr ;
  assign cache_rg_pa$EN =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit ||
	     EN_req ;

  // register cache_rg_pte_pa
  assign cache_rg_pte_pa$D_IN = 32'h0 ;
  assign cache_rg_pte_pa$EN = 1'b0 ;

  // register cache_rg_st_amo_val
  assign cache_rg_st_amo_val$D_IN =
	     EN_req ? req_st_value : MUX_cache_rg_st_amo_val$write_1__VAL_2 ;
  assign cache_rg_st_amo_val$EN =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d843 ||
	     EN_req ;

  // register cache_rg_state
  always@(WILL_FIRE_RL_cache_rl_rereq or
	  MUX_cache_rg_state$write_1__SEL_2 or
	  MUX_cache_rg_state$write_1__VAL_2 or
	  WILL_FIRE_RL_cache_rl_start_cache_refill or
	  EN_req or
	  MUX_cache_rg_state$write_1__VAL_4 or
	  WILL_FIRE_RL_cache_rl_io_AMO_read_rsp or
	  MUX_cache_rg_state$write_1__VAL_5 or
	  WILL_FIRE_RL_cache_rl_io_read_rsp or
	  WILL_FIRE_RL_cache_rl_io_AMO_op_req or
	  WILL_FIRE_RL_cache_rl_io_AMO_SC_req or
	  WILL_FIRE_RL_cache_rl_io_write_req or
	  WILL_FIRE_RL_cache_rl_io_read_req or
	  WILL_FIRE_RL_cache_rl_start_reset or
	  MUX_cache_rg_state$write_1__SEL_12 or
	  MUX_cache_rg_state$write_1__VAL_12 or
	  MUX_cache_rg_state$write_1__SEL_13)
  case (1'b1)
    WILL_FIRE_RL_cache_rl_rereq: cache_rg_state$D_IN = 4'd3;
    MUX_cache_rg_state$write_1__SEL_2:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_2;
    WILL_FIRE_RL_cache_rl_start_cache_refill: cache_rg_state$D_IN = 4'd9;
    EN_req: cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_4;
    WILL_FIRE_RL_cache_rl_io_AMO_read_rsp:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_5;
    WILL_FIRE_RL_cache_rl_io_read_rsp:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_5;
    WILL_FIRE_RL_cache_rl_io_AMO_op_req: cache_rg_state$D_IN = 4'd15;
    WILL_FIRE_RL_cache_rl_io_AMO_SC_req || WILL_FIRE_RL_cache_rl_io_write_req:
	cache_rg_state$D_IN = 4'd11;
    WILL_FIRE_RL_cache_rl_io_read_req: cache_rg_state$D_IN = 4'd13;
    WILL_FIRE_RL_cache_rl_start_reset: cache_rg_state$D_IN = 4'd1;
    MUX_cache_rg_state$write_1__SEL_12:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_12;
    MUX_cache_rg_state$write_1__SEL_13: cache_rg_state$D_IN = 4'd2;
    default: cache_rg_state$D_IN = 4'b1010 /* unspecified value */ ;
  endcase
  assign cache_rg_state$EN =
	     WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_word128_set_in_cache[1:0] == 2'd3 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     (!EN_commit ||
	      cache_rg_op_0_EQ_0_1_OR_cache_rg_op_0_EQ_2_2_A_ETC___d153 ||
	      NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d158) ||
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp ||
	     EN_req ||
	     WILL_FIRE_RL_cache_rl_start_reset ||
	     WILL_FIRE_RL_cache_rl_rereq ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ||
	     WILL_FIRE_RL_cache_rl_io_AMO_SC_req ||
	     WILL_FIRE_RL_cache_rl_io_write_req ||
	     WILL_FIRE_RL_cache_rl_io_read_req ||
	     WILL_FIRE_RL_cache_rl_io_AMO_op_req ;

  // register cache_rg_width_code
  assign cache_rg_width_code$D_IN = req_width_code ;
  assign cache_rg_width_code$EN = EN_req ;

  // register cache_rg_word128_set_in_cache
  assign cache_rg_word128_set_in_cache$D_IN =
	     MUX_cache_ram_word128_set$b_put_1__SEL_2 ?
	       MUX_cache_ram_word128_set$b_put_2__VAL_2 :
	       MUX_cache_ram_word128_set$b_put_2__VAL_4 ;
  assign cache_rg_word128_set_in_cache$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_word128_set_in_cache[1:0] != 2'd3 ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // submodule cache_f_reset_reqs
  assign cache_f_reset_reqs$D_IN = !EN_server_reset_request_put ;
  assign cache_f_reset_reqs$ENQ =
	     EN_server_reset_request_put || EN_server_flush_request_put ;
  assign cache_f_reset_reqs$DEQ = MUX_cache_rg_state$write_1__SEL_13 ;
  assign cache_f_reset_reqs$CLR = 1'b0 ;

  // submodule cache_f_reset_rsps
  assign cache_f_reset_rsps$D_IN = cache_f_reset_reqs$D_OUT ;
  assign cache_f_reset_rsps$ENQ = MUX_cache_rg_state$write_1__SEL_13 ;
  assign cache_f_reset_rsps$DEQ =
	     EN_server_flush_response_get || EN_server_reset_response_get ;
  assign cache_f_reset_rsps$CLR = 1'b0 ;

  // submodule cache_ram_state_and_ctag_cset
  assign cache_ram_state_and_ctag_cset$ADDRA =
	     WILL_FIRE_RL_cache_rl_start_cache_refill ?
	       cache_rg_addr[11:6] :
	       cache_rg_cset_in_cache ;
  assign cache_ram_state_and_ctag_cset$ADDRB =
	     MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       req_addr[11:6] :
	       cache_rg_addr[11:6] ;
  assign cache_ram_state_and_ctag_cset$DIA =
	     WILL_FIRE_RL_cache_rl_start_cache_refill ?
	       MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1 :
	       23'd2796202 ;
  assign cache_ram_state_and_ctag_cset$DIB =
	     MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       23'b01010101010101010101010 /* unspecified value */  :
	       23'b01010101010101010101010 /* unspecified value */  ;
  assign cache_ram_state_and_ctag_cset$WEA = 1'd1 ;
  assign cache_ram_state_and_ctag_cset$WEB = 1'd0 ;
  assign cache_ram_state_and_ctag_cset$ENA =
	     WILL_FIRE_RL_cache_rl_start_cache_refill ||
	     WILL_FIRE_RL_cache_rl_reset ;
  assign cache_ram_state_and_ctag_cset$ENB =
	     MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 ||
	     WILL_FIRE_RL_cache_rl_rereq ;

  // submodule cache_ram_word128_set
  assign cache_ram_word128_set$ADDRA =
	     MUX_cache_ram_word128_set$a_put_1__SEL_1 ?
	       cache_rg_word128_set_in_cache :
	       cache_rg_addr[11:4] ;
  always@(MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  req_addr or
	  MUX_cache_ram_word128_set$b_put_1__SEL_2 or
	  MUX_cache_ram_word128_set$b_put_2__VAL_2 or
	  WILL_FIRE_RL_cache_rl_rereq or
	  cache_rg_addr or
	  WILL_FIRE_RL_cache_rl_start_cache_refill or
	  MUX_cache_ram_word128_set$b_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  cache_ram_word128_set$ADDRB = req_addr[11:4];
      MUX_cache_ram_word128_set$b_put_1__SEL_2:
	  cache_ram_word128_set$ADDRB =
	      MUX_cache_ram_word128_set$b_put_2__VAL_2;
      WILL_FIRE_RL_cache_rl_rereq:
	  cache_ram_word128_set$ADDRB = cache_rg_addr[11:4];
      WILL_FIRE_RL_cache_rl_start_cache_refill:
	  cache_ram_word128_set$ADDRB =
	      MUX_cache_ram_word128_set$b_put_2__VAL_4;
      default: cache_ram_word128_set$ADDRB =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  assign cache_ram_word128_set$DIA =
	     MUX_cache_ram_word128_set$a_put_1__SEL_1 ?
	       MUX_cache_ram_word128_set$a_put_3__VAL_1 :
	       MUX_cache_ram_word128_set$a_put_3__VAL_2 ;
  always@(MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  MUX_cache_ram_word128_set$b_put_1__SEL_2 or
	  WILL_FIRE_RL_cache_rl_rereq or
	  WILL_FIRE_RL_cache_rl_start_cache_refill)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  cache_ram_word128_set$DIB =
	      130'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      MUX_cache_ram_word128_set$b_put_1__SEL_2:
	  cache_ram_word128_set$DIB =
	      130'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_cache_rl_rereq:
	  cache_ram_word128_set$DIB =
	      130'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_cache_rl_start_cache_refill:
	  cache_ram_word128_set$DIB =
	      130'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      default: cache_ram_word128_set$DIB =
		   130'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_ram_word128_set$WEA = 1'd1 ;
  assign cache_ram_word128_set$WEB = 1'd0 ;
  assign cache_ram_word128_set$ENA =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d532 ;
  assign cache_ram_word128_set$ENB =
	     MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_word128_set_in_cache[1:0] != 2'd3 ||
	     WILL_FIRE_RL_cache_rl_rereq ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // submodule cache_soc_map
  assign cache_soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign cache_soc_map$m_is_mem_addr_addr = 64'h0 ;
  assign cache_soc_map$m_is_near_mem_IO_addr_addr = 64'h0 ;

  // remaining internal signals
  assign IF_cache_rg_addr_BITS_4_TO_0_EQ_0_THEN_1_ELSE_0__q39 =
	     (cache_rg_addr[4:0] == 5'd0) ? 32'd1 : 32'd0 ;
  assign IF_cache_rg_op_0_EQ_0_1_OR_cache_rg_op_0_EQ_2__ETC___d163 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) ?
	       4'd8 :
	       IF_cache_rg_op_0_EQ_1_8_OR_cache_rg_op_0_EQ_2__ETC___d162 ;
  assign IF_cache_rg_op_0_EQ_0_1_OR_cache_rg_op_0_EQ_2__ETC___d453 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) ?
	       x__h20322 :
	       x__h25894 ;
  assign IF_cache_rg_op_0_EQ_1_8_OR_cache_rg_op_0_EQ_2__ETC___d129 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       cache_rg_op_0_EQ_2_2_AND_cache_rg_amo_funct7_3_ETC___d118 :
	       NOT_cache_ram_state_and_ctag_cset_b_read__19_B_ETC___d128 ;
  assign IF_cache_rg_op_0_EQ_1_8_OR_cache_rg_op_0_EQ_2__ETC___d162 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       4'd11 :
	       ((!cache_ram_state_and_ctag_cset$DOB[22] ||
		 !cache_ram_state_and_ctag_cset_b_read__19_BITS__ETC___d125) ?
		  4'd8 :
		  4'd11) ;
  assign IF_cache_rg_op_0_EQ_1_8_OR_cache_rg_op_0_EQ_2__ETC___d782 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       mem_req_wr_data_wdata__h27377 :
	       mem_req_wr_data_wdata__h32418 ;
  assign IF_cache_rg_op_0_EQ_1_8_OR_cache_rg_op_0_EQ_2__ETC___d795 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       { 1'd1, mem_req_wr_data_wuser__h27380 } :
	       3'd4 ;
  assign IF_cache_rg_width_code_89_EQ_2_94_THEN_SEXT_IF_ETC___d1244 =
	     (cache_rg_width_code == 3'd2) ? b__h39901 : x__h39954[63:0] ;
  assign IF_cache_rg_width_code_89_EQ_2_94_THEN_SEXT_IF_ETC___d524 =
	     (cache_rg_width_code == 3'd2) ? b__h28292 : x__h28345[63:0] ;
  assign IF_cache_rg_width_code_89_EQ_2_94_THEN_SEXT_ca_ETC___d652 =
	     (cache_rg_width_code == 3'd2) ?
	       b__h29416 :
	       cache_rg_st_amo_val[63:0] ;
  assign IF_cache_rg_width_code_89_EQ_3_98_THEN_IF_cach_ETC___d273 =
	     (cache_rg_width_code == 3'd3) ?
	       ((cache_rg_addr[3:0] == 4'h0) ?
		  cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[128] :
		  cache_rg_addr[3:0] == 4'h8 &&
		  cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[129]) :
	       cache_rg_width_code == 3'd4 &&
	       cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[128] ;
  assign NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 =
	     cache_cfg_verbosity > 4'd1 ;
  assign NOT_cache_cfg_verbosity_read__3_ULE_2_74___d875 =
	     cache_cfg_verbosity > 4'd2 ;
  assign NOT_cache_f_reset_reqs_notEmpty__4_32_AND_cach_ETC___d143 =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_state == 4'd3 &&
	     (cache_rg_op != 2'd0 &&
	      (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) ||
	      cache_crg_sb_to_load_delay$port0__write_1 == 11'd0) ;
  assign NOT_cache_f_reset_reqs_notEmpty__4_32_AND_cach_ETC___d922 =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_state == 4'd12 &&
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) ;
  assign NOT_cache_master_xactor_clearing_read__0_8_AND_ETC___d1138 =
	     !cache_master_xactor_clearing &&
	     cache_master_xactor_shim_rff_rv$port1__read[138] &&
	     (cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 ||
	      !cache_master_xactor_shim_awff_rv[98] &&
	      !cache_master_xactor_shim_wff_rv[147]) ;
  assign NOT_cache_ram_state_and_ctag_cset_b_read__19_B_ETC___d128 =
	     !cache_ram_state_and_ctag_cset$DOB[22] ||
	     !cache_ram_state_and_ctag_cset_b_read__19_BITS__ETC___d125 ||
	     !cache_master_xactor_clearing &&
	     !cache_master_xactor_shim_awff_rv[98] &&
	     !cache_master_xactor_shim_wff_rv[147] ;
  assign NOT_cache_ram_state_and_ctag_cset_b_read__19_B_ETC___d170 =
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__19_BITS__ETC___d125) &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00010 &&
	     cache_rg_addr_05_EQ_cache_rg_lrsc_pa_04___d168 ;
  assign NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d158 =
	     cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_04_EQ_cache_rg_addr_05___d106) ;
  assign NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d767 =
	     cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     (cache_rg_op_0_EQ_1_8_OR_cache_rg_op_0_EQ_2_2_A_ETC___d765 ||
	      NOT_cache_rg_op_0_EQ_1_8_76_AND_NOT_cache_rg_o_ETC___d529) ;
  assign NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d815 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_cache_rg_op_0_EQ_2_2_36_OR_NOT_cache_rg_am_ETC___d813 ;
  assign NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d823 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_cache_rg_op_0_EQ_2_2_36_OR_NOT_cache_rg_am_ETC___d821 ;
  assign NOT_cache_rg_op_0_EQ_1_8_76_AND_NOT_cache_rg_o_ETC___d179 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__19_BITS__ETC___d125 &&
	     cache_rg_addr_05_EQ_cache_rg_lrsc_pa_04___d168 ;
  assign NOT_cache_rg_op_0_EQ_1_8_76_AND_NOT_cache_rg_o_ETC___d529 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__19_BITS__ETC___d125 ;
  assign NOT_cache_rg_op_0_EQ_1_8_76_AND_NOT_cache_rg_o_ETC___d761 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__19_BITS__ETC___d125 &&
	     (cache_rg_width_code == 3'd0 || cache_rg_width_code == 3'd1) ;
  assign NOT_cache_rg_op_0_EQ_1_8_76_AND_NOT_cache_rg_o_ETC___d831 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__19_BITS__ETC___d125) &&
	     NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 ;
  assign NOT_cache_rg_op_0_EQ_1_8_76_AND_NOT_cache_rg_o_ETC___d834 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__19_BITS__ETC___d125 &&
	     NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 ;
  assign NOT_cache_rg_op_0_EQ_1_8_76_AND_NOT_cache_rg_o_ETC___d839 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__19_BITS__ETC___d125 &&
	     cache_rg_addr_05_EQ_cache_rg_lrsc_pa_04___d168 &&
	     NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 ;
  assign NOT_cache_rg_op_0_EQ_2_2_36_OR_NOT_cache_rg_am_ETC___d527 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_04_EQ_cache_rg_addr_05___d106) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__19_BITS__ETC___d125 ;
  assign NOT_cache_rg_op_0_EQ_2_2_36_OR_NOT_cache_rg_am_ETC___d759 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_04_EQ_cache_rg_addr_05___d106) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__19_BITS__ETC___d125 &&
	     (cache_rg_width_code == 3'd0 || cache_rg_width_code == 3'd1) ;
  assign NOT_cache_rg_op_0_EQ_2_2_36_OR_NOT_cache_rg_am_ETC___d813 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_04_EQ_cache_rg_addr_05___d106) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__19_BITS__ETC___d125 &&
	     NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 ;
  assign NOT_cache_rg_op_0_EQ_2_2_36_OR_NOT_cache_rg_am_ETC___d817 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_04_EQ_cache_rg_addr_05___d106) &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__19_BITS__ETC___d125) &&
	     NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 ;
  assign NOT_cache_rg_op_0_EQ_2_2_36_OR_NOT_cache_rg_am_ETC___d821 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_04_EQ_cache_rg_addr_05___d106) &&
	     NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 ;
  assign NOT_req_width_code_EQ_0b0_336_337_AND_NOT_req__ETC___d1356 =
	     req_width_code != 3'b0 &&
	     (req_width_code != 3'b001 || req_addr[0]) &&
	     (req_width_code != 3'b010 || req_addr[1:0] != 2'b0) &&
	     (req_width_code != 3'b011 || req_addr[2:0] != 3'b0) ;
  assign _0__q38 = 2'd0 ;
  assign _theResult___fst__h25818 =
	     (cache_rg_addr[3:0] == 4'h0) ? 128'd1 : 128'd0 ;
  assign _theResult___snd_fst__h27386 =
	     cache_rg_st_amo_val[127:0] << shift_bits__h32288 ;
  assign _theResult___snd_fst__h32427 =
	     { 64'd0, x__h28175 } << shift_bits__h32288 ;
  assign _theResult___snd_fst__h38315 =
	     cache_rg_st_amo_val[127:0] << shift_bits__h39613 ;
  assign _theResult___snd_fst__h39752 =
	     word128__h39610 << shift_bits__h39613 ;
  assign b__h28292 =
	     { {32{x8345_BITS_31_TO_0__q35[31]}}, x8345_BITS_31_TO_0__q35 } ;
  assign b__h29416 =
	     { {32{cache_rg_st_amo_val_BITS_31_TO_0__q1[31]}},
	       cache_rg_st_amo_val_BITS_31_TO_0__q1 } ;
  assign b__h39901 =
	     { {32{x9954_BITS_31_TO_0__q71[31]}}, x9954_BITS_31_TO_0__q71 } ;
  assign cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d854 =
	     cache_ctr_wr_rsps_pending_inrg -
	     cache_ctr_wr_rsps_pending_outrg ;
  assign cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d485 =
	     EN_commit && cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     (cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011 ||
	      cache_rg_op != 2'd1 && cache_ram_state_and_ctag_cset$DOB[22] &&
	      cache_ram_state_and_ctag_cset_b_read__19_BITS__ETC___d125) ;
  assign cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d532 =
	     EN_commit && cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     cache_rg_op_0_EQ_1_8_OR_cache_rg_op_0_EQ_2_2_A_ETC___d530 ;
  assign cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d836 =
	     EN_commit && cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_cache_rg_op_0_EQ_1_8_76_AND_NOT_cache_rg_o_ETC___d834 ;
  assign cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d843 =
	     EN_commit && cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_cache_rg_op_0_EQ_1_8_76_AND_NOT_cache_rg_o_ETC___d529 ;
  assign cache_f_reset_reqs_i_notEmpty__3_AND_cache_f_r_ETC___d66 =
	     cache_f_reset_reqs$EMPTY_N &&
	     (cache_f_reset_reqs$D_OUT || !cache_master_xactor_clearing) &&
	     (cache_rg_cset_in_cache != 6'd63 || cache_f_reset_rsps$FULL_N) ;
  assign cache_master_xactor_shim_arff_rvport1__read_B_ETC__q40 =
	     cache_master_xactor_shim_arff_rv$port1__read[97:0] ;
  assign cache_master_xactor_shim_awff_rvport1__read_B_ETC__q72 =
	     cache_master_xactor_shim_awff_rv$port1__read[97:0] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q41 =
	     cache_master_xactor_shim_rff_rv$port1__read[68:5] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q42 =
	     cache_master_xactor_shim_rff_rv$port1__read[12:5] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q43 =
	     cache_master_xactor_shim_rff_rv$port1__read[20:5] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q44 =
	     cache_master_xactor_shim_rff_rv$port1__read[36:5] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q45 =
	     cache_master_xactor_shim_rff_rv$port1__read[20:13] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q46 =
	     cache_master_xactor_shim_rff_rv$port1__read[28:21] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q47 =
	     cache_master_xactor_shim_rff_rv$port1__read[36:21] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q48 =
	     cache_master_xactor_shim_rff_rv$port1__read[36:29] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q49 =
	     cache_master_xactor_shim_rff_rv$port1__read[44:37] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q50 =
	     cache_master_xactor_shim_rff_rv$port1__read[52:37] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q51 =
	     cache_master_xactor_shim_rff_rv$port1__read[68:37] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q52 =
	     cache_master_xactor_shim_rff_rv$port1__read[52:45] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q53 =
	     cache_master_xactor_shim_rff_rv$port1__read[60:53] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q54 =
	     cache_master_xactor_shim_rff_rv$port1__read[68:53] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q55 =
	     cache_master_xactor_shim_rff_rv$port1__read[68:61] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q56 =
	     cache_master_xactor_shim_rff_rv$port1__read[132:69] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q57 =
	     cache_master_xactor_shim_rff_rv$port1__read[76:69] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q58 =
	     cache_master_xactor_shim_rff_rv$port1__read[84:69] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q59 =
	     cache_master_xactor_shim_rff_rv$port1__read[100:69] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q60 =
	     cache_master_xactor_shim_rff_rv$port1__read[84:77] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q61 =
	     cache_master_xactor_shim_rff_rv$port1__read[92:85] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q62 =
	     cache_master_xactor_shim_rff_rv$port1__read[100:85] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q63 =
	     cache_master_xactor_shim_rff_rv$port1__read[108:101] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q64 =
	     cache_master_xactor_shim_rff_rv$port1__read[100:93] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q65 =
	     cache_master_xactor_shim_rff_rv$port1__read[116:101] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q66 =
	     cache_master_xactor_shim_rff_rv$port1__read[132:101] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q67 =
	     cache_master_xactor_shim_rff_rv$port1__read[116:109] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q68 =
	     cache_master_xactor_shim_rff_rv$port1__read[124:117] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q69 =
	     cache_master_xactor_shim_rff_rv$port1__read[132:117] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q70 =
	     cache_master_xactor_shim_rff_rv$port1__read[132:125] ;
  assign cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q73 =
	     cache_master_xactor_shim_wff_rv$port1__read[146:0] ;
  assign cache_ram_state_and_ctag_cset_b_read__19_BITS__ETC___d125 =
	     cache_ram_state_and_ctag_cset$DOB[21:0] == pa_ctag__h7021 ;
  assign cache_ram_state_and_ctag_cset_b_read__19_BIT_2_ETC___d171 =
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__19_BITS__ETC___d125 &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00010 ||
	     NOT_cache_ram_state_and_ctag_cset_b_read__19_B_ETC___d170 ;
  assign cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265 =
	     cache_ram_word128_set$DOB & y__h7469 ;
  assign cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q10 =
	     cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[39:32] ;
  assign cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q11 =
	     cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[47:32] ;
  assign cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q12 =
	     cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[63:32] ;
  assign cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q13 =
	     cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[47:40] ;
  assign cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q14 =
	     cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[55:48] ;
  assign cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q15 =
	     cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[63:48] ;
  assign cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q16 =
	     cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[63:56] ;
  assign cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q17 =
	     cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[127:64] ;
  assign cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q18 =
	     cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[71:64] ;
  assign cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q19 =
	     cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[79:64] ;
  assign cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q2 =
	     cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[63:0] ;
  assign cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q20 =
	     cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[95:64] ;
  assign cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q21 =
	     cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[79:72] ;
  assign cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q22 =
	     cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[87:80] ;
  assign cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q23 =
	     cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[95:80] ;
  assign cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q24 =
	     cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[95:88] ;
  assign cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q25 =
	     cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[103:96] ;
  assign cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q26 =
	     cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[111:96] ;
  assign cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q27 =
	     cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[127:96] ;
  assign cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q28 =
	     cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[111:104] ;
  assign cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q29 =
	     cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[119:112] ;
  assign cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q3 =
	     cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[7:0] ;
  assign cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q30 =
	     cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[127:112] ;
  assign cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q34 =
	     cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[127:120] ;
  assign cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q4 =
	     cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[15:0] ;
  assign cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q5 =
	     cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[31:0] ;
  assign cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q6 =
	     cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[15:8] ;
  assign cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q7 =
	     cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[23:16] ;
  assign cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q8 =
	     cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[31:16] ;
  assign cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q9 =
	     cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[31:24] ;
  assign cache_ram_word128_set_b_read__52_BITS_129_TO_1_ETC___d543 =
	     cache_ram_word128_set$DOB[129:128] & y__h28038 ;
  assign cache_rg_addr_05_EQ_cache_rg_lrsc_pa_04___d168 =
	     cache_rg_addr == cache_rg_lrsc_pa ;
  assign cache_rg_amo_funct7_3_BITS_6_TO_2_4_EQ_0b10_5__ETC___d479 =
	     cache_rg_amo_funct7[6:2] == 5'b00010 &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__19_BITS__ETC___d125) &&
	     cache_rg_addr_05_EQ_cache_rg_lrsc_pa_04___d168 &&
	     NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 ;
  assign cache_rg_lrsc_pa_04_EQ_cache_rg_addr_05___d106 =
	     cache_rg_lrsc_pa == cache_rg_addr ;
  assign cache_rg_op_0_EQ_0_1_OR_cache_rg_op_0_EQ_2_2_A_ETC___d153 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__19_BITS__ETC___d125) ;
  assign cache_rg_op_0_EQ_0_1_OR_cache_rg_op_0_EQ_2_2_A_ETC___d182 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     cache_ram_state_and_ctag_cset_b_read__19_BIT_2_ETC___d171 ||
	     cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     cache_rg_op_0_EQ_1_8_OR_cache_rg_op_0_EQ_2_2_A_ETC___d180 ;
  assign cache_rg_op_0_EQ_0_1_OR_cache_rg_op_0_EQ_2_2_A_ETC___d184 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__19_BITS__ETC___d125 ;
  assign cache_rg_op_0_EQ_0_1_OR_cache_rg_op_0_EQ_2_2_A_ETC___d187 =
	     cache_rg_op_0_EQ_0_1_OR_cache_rg_op_0_EQ_2_2_A_ETC___d184 ||
	     cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h21855 ;
  assign cache_rg_op_0_EQ_0_1_OR_cache_rg_op_0_EQ_2_2_A_ETC___d275 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     cache_rg_width_code != 3'd0 &&
	     cache_rg_width_code != 3'd1 &&
	     cache_rg_width_code != 3'd2 &&
	     IF_cache_rg_width_code_89_EQ_3_98_THEN_IF_cach_ETC___d273 ;
  assign cache_rg_op_0_EQ_0_1_OR_cache_rg_op_0_EQ_2_2_A_ETC___d462 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__19_BITS__ETC___d125 &&
	     NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 ;
  assign cache_rg_op_0_EQ_0_1_OR_cache_rg_op_0_EQ_2_2_A_ETC___d475 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__19_BITS__ETC___d125) &&
	     NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 ;
  assign cache_rg_op_0_EQ_1_8_OR_cache_rg_op_0_EQ_2_2_A_ETC___d180 =
	     cache_rg_op == 2'd1 &&
	     cache_rg_addr_05_EQ_cache_rg_lrsc_pa_04___d168 ||
	     cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011 ||
	     NOT_cache_rg_op_0_EQ_1_8_76_AND_NOT_cache_rg_o_ETC___d179 ;
  assign cache_rg_op_0_EQ_1_8_OR_cache_rg_op_0_EQ_2_2_A_ETC___d530 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_cache_rg_op_0_EQ_2_2_36_OR_NOT_cache_rg_am_ETC___d527 ||
	     NOT_cache_rg_op_0_EQ_1_8_76_AND_NOT_cache_rg_o_ETC___d529 ;
  assign cache_rg_op_0_EQ_1_8_OR_cache_rg_op_0_EQ_2_2_A_ETC___d762 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_cache_rg_op_0_EQ_2_2_36_OR_NOT_cache_rg_am_ETC___d759 ||
	     NOT_cache_rg_op_0_EQ_1_8_76_AND_NOT_cache_rg_o_ETC___d761 ;
  assign cache_rg_op_0_EQ_1_8_OR_cache_rg_op_0_EQ_2_2_A_ETC___d765 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_04_EQ_cache_rg_addr_05___d106) ;
  assign cache_rg_op_0_EQ_2_2_AND_cache_rg_amo_funct7_3_ETC___d118 =
	     cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h21855 ||
	     !cache_master_xactor_clearing &&
	     !cache_master_xactor_shim_awff_rv[98] &&
	     !cache_master_xactor_shim_wff_rv[147] ;
  assign cache_rg_op_0_EQ_2_2_AND_cache_rg_amo_funct7_3_ETC___d827 =
	     cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h21855 &&
	     NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 ;
  assign cache_rg_st_amo_val_BITS_31_TO_0__q1 = cache_rg_st_amo_val[31:0] ;
  assign cline_addr__h33098 = { cache_rg_pa[31:6], 6'd0 } ;
  assign cline_fabric_addr__h33099 = { 32'd0, cline_addr__h33098 } ;
  assign lrsc_result__h21855 =
	     !cache_rg_lrsc_valid ||
	     !cache_rg_lrsc_pa_04_EQ_cache_rg_addr_05___d106 ;
  assign mem_req_wr_addr_awaddr__h32281 = { 32'd0, cache_rg_addr } ;
  assign mem_req_wr_addr_awaddr__h39606 = { 32'd0, cache_rg_pa } ;
  assign mem_req_wr_data_wuser__h27380 =
	     (cache_rg_width_code == 3'd3) ?
	       {2{cache_rg_st_amo_val[128]}} :
	       2'd0 ;
  assign new_st_val__h28180 = { 32'd0, _theResult_____2__h28021[31:0] } ;
  assign new_st_val__h28284 =
	     IF_cache_rg_width_code_89_EQ_2_94_THEN_SEXT_IF_ETC___d524 +
	     IF_cache_rg_width_code_89_EQ_2_94_THEN_SEXT_ca_ETC___d652 ;
  assign new_st_val__h29446 = w1__h28013 ^ w2__h28015 ;
  assign new_st_val__h29451 = w1__h28013 & w2__h28015 ;
  assign new_st_val__h29456 = w1__h28013 | w2__h28015 ;
  assign new_st_val__h29461 =
	     (w1__h28013 < w2__h28015) ? w1__h28013 : w2__h28015 ;
  assign new_st_val__h29469 =
	     (w1__h28013 <= w2__h28015) ? w2__h28015 : w1__h28013 ;
  assign new_st_val__h29478 =
	     ((IF_cache_rg_width_code_89_EQ_2_94_THEN_SEXT_IF_ETC___d524 ^
	       64'h8000000000000000) <
	      (IF_cache_rg_width_code_89_EQ_2_94_THEN_SEXT_ca_ETC___d652 ^
	       64'h8000000000000000)) ?
	       w1__h28013 :
	       w2__h28015 ;
  assign new_st_val__h29486 =
	     ((IF_cache_rg_width_code_89_EQ_2_94_THEN_SEXT_IF_ETC___d524 ^
	       64'h8000000000000000) <=
	      (IF_cache_rg_width_code_89_EQ_2_94_THEN_SEXT_ca_ETC___d652 ^
	       64'h8000000000000000)) ?
	       w2__h28015 :
	       w1__h28013 ;
  assign new_st_val__h39789 = { 32'd0, _theResult_____2__h39774[31:0] } ;
  assign new_st_val__h39893 =
	     IF_cache_rg_width_code_89_EQ_2_94_THEN_SEXT_IF_ETC___d1244 +
	     IF_cache_rg_width_code_89_EQ_2_94_THEN_SEXT_ca_ETC___d652 ;
  assign new_st_val__h42222 = w1__h39766 ^ w2__h28015 ;
  assign new_st_val__h42227 = w1__h39766 & w2__h28015 ;
  assign new_st_val__h42232 = w1__h39766 | w2__h28015 ;
  assign new_st_val__h42237 =
	     (w1__h39766 < w2__h28015) ? w1__h39766 : w2__h28015 ;
  assign new_st_val__h42245 =
	     (w1__h39766 <= w2__h28015) ? w2__h28015 : w1__h39766 ;
  assign new_st_val__h42254 =
	     ((IF_cache_rg_width_code_89_EQ_2_94_THEN_SEXT_IF_ETC___d1244 ^
	       64'h8000000000000000) <
	      (IF_cache_rg_width_code_89_EQ_2_94_THEN_SEXT_ca_ETC___d652 ^
	       64'h8000000000000000)) ?
	       w1__h39766 :
	       w2__h28015 ;
  assign new_st_val__h42262 =
	     ((IF_cache_rg_width_code_89_EQ_2_94_THEN_SEXT_IF_ETC___d1244 ^
	       64'h8000000000000000) <=
	      (IF_cache_rg_width_code_89_EQ_2_94_THEN_SEXT_ca_ETC___d652 ^
	       64'h8000000000000000)) ?
	       w2__h28015 :
	       w1__h39766 ;
  assign pa_ctag__h7021 = { 2'd0, cache_rg_addr[31:12] } ;
  assign req_width_code_EQ_0b0_336_OR_req_width_code_EQ_ETC___d1372 =
	     req_width_code == 3'b0 ||
	     req_width_code == 3'b001 && !req_addr[0] ||
	     req_width_code == 3'b010 && req_addr[1:0] == 2'b0 ||
	     req_width_code == 3'b011 && req_addr[2:0] == 3'b0 ;
  assign req_width_code_EQ_0b0_336_OR_req_width_code_EQ_ETC___d1377 =
	     (req_width_code_EQ_0b0_336_OR_req_width_code_EQ_ETC___d1372 ||
	      req_width_code == 3'b100 && req_addr[3:0] == 4'b0) &&
	     NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 ;
  assign result__h20265 =
	     cache_rg_is_unsigned ?
	       { 64'd0,
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[127:64] } :
	       { {64{cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q17[63]}},
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q17 } ;
  assign result__h20333 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[7:0] } :
	       { {120{cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q3[7]}},
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q3 } ;
  assign result__h20371 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[15:8] } :
	       { {120{cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q6[7]}},
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q6 } ;
  assign result__h20404 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[23:16] } :
	       { {120{cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q7[7]}},
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q7 } ;
  assign result__h20437 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[31:24] } :
	       { {120{cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q9[7]}},
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q9 } ;
  assign result__h20470 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[39:32] } :
	       { {120{cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q10[7]}},
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q10 } ;
  assign result__h20503 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[47:40] } :
	       { {120{cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q13[7]}},
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q13 } ;
  assign result__h20536 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[55:48] } :
	       { {120{cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q14[7]}},
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q14 } ;
  assign result__h20569 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[63:56] } :
	       { {120{cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q16[7]}},
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q16 } ;
  assign result__h20602 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[71:64] } :
	       { {120{cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q18[7]}},
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q18 } ;
  assign result__h20635 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[79:72] } :
	       { {120{cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q21[7]}},
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q21 } ;
  assign result__h20668 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[87:80] } :
	       { {120{cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q22[7]}},
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q22 } ;
  assign result__h20701 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[95:88] } :
	       { {120{cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q24[7]}},
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q24 } ;
  assign result__h20734 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[103:96] } :
	       { {120{cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q25[7]}},
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q25 } ;
  assign result__h20767 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[111:104] } :
	       { {120{cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q28[7]}},
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q28 } ;
  assign result__h20800 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[119:112] } :
	       { {120{cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q29[7]}},
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q29 } ;
  assign result__h20833 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[127:120] } :
	       { {120{cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q34[7]}},
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q34 } ;
  assign result__h20888 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[15:0] } :
	       { {112{cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q4[15]}},
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q4 } ;
  assign result__h20921 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[31:16] } :
	       { {112{cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q8[15]}},
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q8 } ;
  assign result__h20954 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[47:32] } :
	       { {112{cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q11[15]}},
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q11 } ;
  assign result__h20987 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[63:48] } :
	       { {112{cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q15[15]}},
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q15 } ;
  assign result__h21020 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[79:64] } :
	       { {112{cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q19[15]}},
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q19 } ;
  assign result__h21053 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[95:80] } :
	       { {112{cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q23[15]}},
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q23 } ;
  assign result__h21086 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[111:96] } :
	       { {112{cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q26[15]}},
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q26 } ;
  assign result__h21119 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[127:112] } :
	       { {112{cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q30[15]}},
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q30 } ;
  assign result__h21166 =
	     cache_rg_is_unsigned ?
	       { 96'd0,
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[31:0] } :
	       { {96{cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q5[31]}},
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q5 } ;
  assign result__h21199 =
	     cache_rg_is_unsigned ?
	       { 96'd0,
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[63:32] } :
	       { {96{cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q12[31]}},
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q12 } ;
  assign result__h21232 =
	     cache_rg_is_unsigned ?
	       { 96'd0,
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[95:64] } :
	       { {96{cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q20[31]}},
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q20 } ;
  assign result__h21265 =
	     cache_rg_is_unsigned ?
	       { 96'd0,
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[127:96] } :
	       { {96{cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q27[31]}},
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q27 } ;
  assign result__h36538 =
	     cache_rg_is_unsigned ?
	       { 64'd0, cache_master_xactor_shim_rff_rv$port1__read[68:5] } :
	       { {64{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q41[63]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q41 } ;
  assign result__h36563 =
	     cache_rg_is_unsigned ?
	       { 64'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[132:69] } :
	       { {64{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q56[63]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q56 } ;
  assign result__h36621 =
	     cache_rg_is_unsigned ?
	       { 120'd0, cache_master_xactor_shim_rff_rv$port1__read[12:5] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q42[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q42 } ;
  assign result__h36657 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[20:13] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q45[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q45 } ;
  assign result__h36690 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[28:21] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q46[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q46 } ;
  assign result__h36723 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[36:29] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q48[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q48 } ;
  assign result__h36756 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[44:37] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q49[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q49 } ;
  assign result__h36789 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[52:45] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q52[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q52 } ;
  assign result__h36822 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[60:53] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q53[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q53 } ;
  assign result__h36855 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[68:61] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q55[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q55 } ;
  assign result__h36888 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[76:69] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q57[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q57 } ;
  assign result__h36921 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[84:77] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q60[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q60 } ;
  assign result__h36954 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[92:85] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q61[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q61 } ;
  assign result__h36987 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[100:93] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q64[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q64 } ;
  assign result__h37020 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[108:101] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q63[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q63 } ;
  assign result__h37053 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[116:109] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q67[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q67 } ;
  assign result__h37086 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[124:117] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q68[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q68 } ;
  assign result__h37119 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[132:125] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q70[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q70 } ;
  assign result__h37174 =
	     cache_rg_is_unsigned ?
	       { 112'd0, cache_master_xactor_shim_rff_rv$port1__read[20:5] } :
	       { {112{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q43[15]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q43 } ;
  assign result__h37207 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[36:21] } :
	       { {112{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q47[15]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q47 } ;
  assign result__h37240 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[52:37] } :
	       { {112{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q50[15]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q50 } ;
  assign result__h37273 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[68:53] } :
	       { {112{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q54[15]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q54 } ;
  assign result__h37306 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[84:69] } :
	       { {112{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q58[15]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q58 } ;
  assign result__h37339 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[100:85] } :
	       { {112{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q62[15]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q62 } ;
  assign result__h37372 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[116:101] } :
	       { {112{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q65[15]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q65 } ;
  assign result__h37405 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[132:117] } :
	       { {112{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q69[15]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q69 } ;
  assign result__h37452 =
	     cache_rg_is_unsigned ?
	       { 96'd0, cache_master_xactor_shim_rff_rv$port1__read[36:5] } :
	       { {96{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q44[31]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q44 } ;
  assign result__h37485 =
	     cache_rg_is_unsigned ?
	       { 96'd0, cache_master_xactor_shim_rff_rv$port1__read[68:37] } :
	       { {96{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q51[31]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q51 } ;
  assign result__h37518 =
	     cache_rg_is_unsigned ?
	       { 96'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[100:69] } :
	       { {96{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q59[31]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q59 } ;
  assign result__h37551 =
	     cache_rg_is_unsigned ?
	       { 96'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[132:101] } :
	       { {96{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q66[31]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q66 } ;
  assign result__h40036 = { 120'd0, x__h36610[7:0] } ;
  assign result__h41205 = { 120'd0, x__h36610[15:8] } ;
  assign result__h41237 = { 120'd0, x__h36610[23:16] } ;
  assign result__h41269 = { 120'd0, x__h36610[31:24] } ;
  assign result__h41301 = { 120'd0, x__h36610[39:32] } ;
  assign result__h41333 = { 120'd0, x__h36610[47:40] } ;
  assign result__h41365 = { 120'd0, x__h36610[55:48] } ;
  assign result__h41397 = { 120'd0, x__h36610[63:56] } ;
  assign result__h41429 = { 120'd0, x__h36610[71:64] } ;
  assign result__h41461 = { 120'd0, x__h36610[79:72] } ;
  assign result__h41493 = { 120'd0, x__h36610[87:80] } ;
  assign result__h41525 = { 120'd0, x__h36610[95:88] } ;
  assign result__h41557 = { 120'd0, x__h36610[103:96] } ;
  assign result__h41589 = { 120'd0, x__h36610[111:104] } ;
  assign result__h41621 = { 120'd0, x__h36610[119:112] } ;
  assign result__h41653 = { 120'd0, x__h36610[127:120] } ;
  assign result__h41707 = { 112'd0, x__h36610[15:0] } ;
  assign result__h41739 = { 112'd0, x__h36610[31:16] } ;
  assign result__h41771 = { 112'd0, x__h36610[47:32] } ;
  assign result__h41803 = { 112'd0, x__h36610[63:48] } ;
  assign result__h41835 = { 112'd0, x__h36610[79:64] } ;
  assign result__h41867 = { 112'd0, x__h36610[95:80] } ;
  assign result__h41899 = { 112'd0, x__h36610[111:96] } ;
  assign result__h41931 = { 112'd0, x__h36610[127:112] } ;
  assign result__h41977 = { 96'd0, x__h36610[31:0] } ;
  assign result__h42009 = { 96'd0, x__h36610[63:32] } ;
  assign result__h42041 = { 96'd0, x__h36610[95:64] } ;
  assign result__h42073 = { 96'd0, x__h36610[127:96] } ;
  assign result__h42127 = { 64'd0, x__h36610[63:0] } ;
  assign result__h42156 = { 64'd0, x__h36610[127:64] } ;
  assign result__h7419 =
	     cache_rg_is_unsigned ?
	       { 64'd0,
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[63:0] } :
	       { {64{cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q2[63]}},
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC__q2 } ;
  assign shift_bits__h32288 = { cache_rg_addr[3:0], 3'b0 } ;
  assign shift_bits__h39613 = { cache_rg_pa[3:0], 3'b0 } ;
  assign strobe128__h32346 = 16'b0000000000000001 << cache_rg_addr[3:0] ;
  assign strobe128__h32349 = 16'b0000000000000011 << cache_rg_addr[3:0] ;
  assign strobe128__h32352 = 16'b0000000000001111 << cache_rg_addr[3:0] ;
  assign strobe128__h32355 = 16'b0000000011111111 << cache_rg_addr[3:0] ;
  assign strobe128__h39671 = 16'b0000000000000001 << cache_rg_pa[3:0] ;
  assign strobe128__h39674 = 16'b0000000000000011 << cache_rg_pa[3:0] ;
  assign strobe128__h39677 = 16'b0000000000001111 << cache_rg_pa[3:0] ;
  assign strobe128__h39680 = 16'b0000000011111111 << cache_rg_pa[3:0] ;
  assign w1___1__h28247 = { 32'd0, x__h28345[31:0] } ;
  assign w1___1__h39856 = { 32'd0, x__h39954[31:0] } ;
  assign w1__h28013 =
	     (cache_rg_width_code == 3'd2) ?
	       w1___1__h28247 :
	       x__h28345[63:0] ;
  assign w1__h39766 =
	     (cache_rg_width_code == 3'd2) ?
	       w1___1__h39856 :
	       x__h39954[63:0] ;
  assign w2__h28015 =
	     (cache_rg_width_code == 3'd2) ?
	       { 32'd0, cache_rg_st_amo_val[31:0] } :
	       cache_rg_st_amo_val[63:0] ;
  assign word128__h39610 = { 64'd0, x__h39784 } ;
  assign x8345_BITS_31_TO_0__q35 = x__h28345[31:0] ;
  assign x9954_BITS_31_TO_0__q71 = x__h39954[31:0] ;
  assign x__h22606 =
	     (cache_rg_width_code == 3'd3 && cache_rg_st_amo_val[128]) ?
	       cache_ram_word128_set$DOB[129:128] | x__h27963 :
	       cache_ram_word128_set_b_read__52_BITS_129_TO_1_ETC___d543 ;
  assign x__h27963 = 2'd1 << x__h28057 ;
  assign x__h28057 = { 3'd0, cache_rg_addr[3] } ;
  assign x__h28175 =
	     (cache_rg_width_code == 3'd2) ?
	       new_st_val__h28180 :
	       _theResult_____2__h28021 ;
  assign x__h39784 =
	     (cache_rg_width_code == 3'd2) ?
	       new_st_val__h39789 :
	       _theResult_____2__h39774 ;
  assign y__h28038 = ~x__h27963 ;
  assign y__h7469 =
	     {130{cache_ram_state_and_ctag_cset$DOB[22] &&
		  cache_ram_state_and_ctag_cset_b_read__19_BITS__ETC___d125}} ;
  always@(cache_rg_width_code)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'd2, 3'd3: size_val__h39062 = cache_rg_width_code;
      default: size_val__h39062 = 3'b100;
    endcase
  end
  always@(cache_rg_width_code)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4:
	  _theResult___fst_val__h39690 = cache_rg_width_code;
      default: _theResult___fst_val__h39690 = 3'b111;
    endcase
  end
  always@(cache_rg_width_code or _theResult___fst__h25818)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'd2, 3'd3: x__h25894 = _theResult___fst__h25818;
      3'd4: x__h25894 = 128'd1;
      default: x__h25894 = 128'd0;
    endcase
  end
  always@(cache_rg_width_code or
	  strobe128__h32346 or
	  strobe128__h32349 or strobe128__h32352 or strobe128__h32355)
  begin
    case (cache_rg_width_code)
      3'd0: mem_req_wr_data_wstrb__h32419 = strobe128__h32346;
      3'd1: mem_req_wr_data_wstrb__h32419 = strobe128__h32349;
      3'd2: mem_req_wr_data_wstrb__h32419 = strobe128__h32352;
      3'd3: mem_req_wr_data_wstrb__h32419 = strobe128__h32355;
      3'd4: mem_req_wr_data_wstrb__h32419 = 16'b1111111111111111;
      default: mem_req_wr_data_wstrb__h32419 = 16'd0;
    endcase
  end
  always@(cache_rg_width_code or
	  strobe128__h39671 or
	  strobe128__h39674 or strobe128__h39677 or strobe128__h39680)
  begin
    case (cache_rg_width_code)
      3'd0: mem_req_wr_data_wstrb__h39744 = strobe128__h39671;
      3'd1: mem_req_wr_data_wstrb__h39744 = strobe128__h39674;
      3'd2: mem_req_wr_data_wstrb__h39744 = strobe128__h39677;
      3'd3: mem_req_wr_data_wstrb__h39744 = strobe128__h39680;
      3'd4: mem_req_wr_data_wstrb__h39744 = 16'b1111111111111111;
      default: mem_req_wr_data_wstrb__h39744 = 16'd0;
    endcase
  end
  always@(cache_rg_width_code or
	  cache_rg_st_amo_val or _theResult___snd_fst__h38315)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'd2, 3'd3:
	  mem_req_wr_data_wdata__h38306 = _theResult___snd_fst__h38315;
      default: mem_req_wr_data_wdata__h38306 = cache_rg_st_amo_val[127:0];
    endcase
  end
  always@(cache_rg_width_code or
	  cache_rg_st_amo_val or _theResult___snd_fst__h27386)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'd2, 3'd3:
	  mem_req_wr_data_wdata__h27377 = _theResult___snd_fst__h27386;
      default: mem_req_wr_data_wdata__h27377 = cache_rg_st_amo_val[127:0];
    endcase
  end
  always@(cache_rg_addr or
	  cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  _theResult___fst__h29351 =
	      { 64'd0,
		cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[63:0] };
      4'h8:
	  _theResult___fst__h29351 =
	      { 64'd0,
		cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[127:64] };
      default: _theResult___fst__h29351 = 128'd0;
    endcase
  end
  always@(cache_rg_addr or result__h7419 or result__h20265)
  begin
    case (cache_rg_addr[3:0])
      4'h0: _theResult___fst__h7417 = result__h7419;
      4'h8: _theResult___fst__h7417 = result__h20265;
      default: _theResult___fst__h7417 = 128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q31 =
	      { 120'd0,
		cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[7:0] };
      4'h1:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q31 =
	      { 120'd0,
		cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[15:8] };
      4'h2:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q31 =
	      { 120'd0,
		cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[23:16] };
      4'h3:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q31 =
	      { 120'd0,
		cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[31:24] };
      4'h4:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q31 =
	      { 120'd0,
		cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[39:32] };
      4'h5:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q31 =
	      { 120'd0,
		cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[47:40] };
      4'h6:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q31 =
	      { 120'd0,
		cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[55:48] };
      4'h7:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q31 =
	      { 120'd0,
		cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[63:56] };
      4'h8:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q31 =
	      { 120'd0,
		cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[71:64] };
      4'h9:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q31 =
	      { 120'd0,
		cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[79:72] };
      4'hA:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q31 =
	      { 120'd0,
		cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[87:80] };
      4'hB:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q31 =
	      { 120'd0,
		cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[95:88] };
      4'hC:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q31 =
	      { 120'd0,
		cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[103:96] };
      4'hD:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q31 =
	      { 120'd0,
		cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[111:104] };
      4'hE:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q31 =
	      { 120'd0,
		cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[119:112] };
      4'hF:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q31 =
	      { 120'd0,
		cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[127:120] };
    endcase
  end
  always@(cache_rg_addr or
	  cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q32 =
	      { 112'd0,
		cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[15:0] };
      4'h2:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q32 =
	      { 112'd0,
		cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[31:16] };
      4'h4:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q32 =
	      { 112'd0,
		cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[47:32] };
      4'h6:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q32 =
	      { 112'd0,
		cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[63:48] };
      4'h8:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q32 =
	      { 112'd0,
		cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[79:64] };
      4'hA:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q32 =
	      { 112'd0,
		cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[95:80] };
      4'hC:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q32 =
	      { 112'd0,
		cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[111:96] };
      4'hE:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q32 =
	      { 112'd0,
		cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[127:112] };
      default: CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q32 =
		   128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q33 =
	      { 96'd0,
		cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[31:0] };
      4'h4:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q33 =
	      { 96'd0,
		cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[63:32] };
      4'h8:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q33 =
	      { 96'd0,
		cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[95:64] };
      4'hC:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q33 =
	      { 96'd0,
		cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[127:96] };
      default: CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q33 =
		   128'd0;
    endcase
  end
  always@(cache_rg_width_code or
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q31 or
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q32 or
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q33 or
	  _theResult___fst__h29351 or
	  cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265)
  begin
    case (cache_rg_width_code)
      3'd0:
	  x__h28345 = CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q31;
      3'd1:
	  x__h28345 = CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q32;
      3'd2:
	  x__h28345 = CASE_cache_rg_addr_BITS_3_TO_0_0x0_0_CONCAT_ca_ETC__q33;
      3'd3: x__h28345 = _theResult___fst__h29351;
      3'd4:
	  x__h28345 =
	      cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[127:0];
      default: x__h28345 = 128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h20888 or
	  result__h20921 or
	  result__h20954 or
	  result__h20987 or
	  result__h21020 or
	  result__h21053 or result__h21086 or result__h21119)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d410 =
	      result__h20888;
      4'h2:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d410 =
	      result__h20921;
      4'h4:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d410 =
	      result__h20954;
      4'h6:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d410 =
	      result__h20987;
      4'h8:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d410 =
	      result__h21020;
      4'hA:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d410 =
	      result__h21053;
      4'hC:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d410 =
	      result__h21086;
      4'hE:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d410 =
	      result__h21119;
      default: IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d410 =
		   128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h21166 or
	  result__h21199 or result__h21232 or result__h21265)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d430 =
	      result__h21166;
      4'h4:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d430 =
	      result__h21199;
      4'h8:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d430 =
	      result__h21232;
      4'hC:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d430 =
	      result__h21265;
      default: IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d430 =
		   128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h20333 or
	  result__h20371 or
	  result__h20404 or
	  result__h20437 or
	  result__h20470 or
	  result__h20503 or
	  result__h20536 or
	  result__h20569 or
	  result__h20602 or
	  result__h20635 or
	  result__h20668 or
	  result__h20701 or
	  result__h20734 or
	  result__h20767 or result__h20800 or result__h20833)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d370 =
	      result__h20333;
      4'h1:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d370 =
	      result__h20371;
      4'h2:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d370 =
	      result__h20404;
      4'h3:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d370 =
	      result__h20437;
      4'h4:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d370 =
	      result__h20470;
      4'h5:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d370 =
	      result__h20503;
      4'h6:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d370 =
	      result__h20536;
      4'h7:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d370 =
	      result__h20569;
      4'h8:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d370 =
	      result__h20602;
      4'h9:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d370 =
	      result__h20635;
      4'hA:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d370 =
	      result__h20668;
      4'hB:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d370 =
	      result__h20701;
      4'hC:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d370 =
	      result__h20734;
      4'hD:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d370 =
	      result__h20767;
      4'hE:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d370 =
	      result__h20800;
      4'hF:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d370 =
	      result__h20833;
    endcase
  end
  always@(cache_rg_width_code or
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d370 or
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d410 or
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d430 or
	  _theResult___fst__h7417 or
	  cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265)
  begin
    case (cache_rg_width_code)
      3'd0:
	  x__h20322 =
	      IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d370;
      3'd1:
	  x__h20322 =
	      IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d410;
      3'd2:
	  x__h20322 =
	      IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d430;
      3'd3: x__h20322 = _theResult___fst__h7417;
      3'd4:
	  x__h20322 =
	      cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265[127:0];
      default: x__h20322 = 128'd0;
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or cache_rg_st_amo_val)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d634 =
	      { cache_ram_word128_set$DOB[127:32],
		cache_rg_st_amo_val[31:0] };
      4'h4:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d634 =
	      { cache_ram_word128_set$DOB[127:64],
		cache_rg_st_amo_val[31:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h8:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d634 =
	      { cache_ram_word128_set$DOB[127:96],
		cache_rg_st_amo_val[31:0],
		cache_ram_word128_set$DOB[63:0] };
      4'hC:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d634 =
	      { cache_rg_st_amo_val[31:0], cache_ram_word128_set$DOB[95:0] };
      default: IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d634 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or cache_rg_st_amo_val)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d608 =
	      { cache_ram_word128_set$DOB[127:8], cache_rg_st_amo_val[7:0] };
      4'h1:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d608 =
	      { cache_ram_word128_set$DOB[127:16],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[7:0] };
      4'h2:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d608 =
	      { cache_ram_word128_set$DOB[127:24],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[15:0] };
      4'h3:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d608 =
	      { cache_ram_word128_set$DOB[127:32],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[23:0] };
      4'h4:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d608 =
	      { cache_ram_word128_set$DOB[127:40],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h5:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d608 =
	      { cache_ram_word128_set$DOB[127:48],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[39:0] };
      4'h6:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d608 =
	      { cache_ram_word128_set$DOB[127:56],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[47:0] };
      4'h7:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d608 =
	      { cache_ram_word128_set$DOB[127:64],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[55:0] };
      4'h8:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d608 =
	      { cache_ram_word128_set$DOB[127:72],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[63:0] };
      4'h9:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d608 =
	      { cache_ram_word128_set$DOB[127:80],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[71:0] };
      4'hA:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d608 =
	      { cache_ram_word128_set$DOB[127:88],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[79:0] };
      4'hB:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d608 =
	      { cache_ram_word128_set$DOB[127:96],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[87:0] };
      4'hC:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d608 =
	      { cache_ram_word128_set$DOB[127:104],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[95:0] };
      4'hD:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d608 =
	      { cache_ram_word128_set$DOB[127:112],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[103:0] };
      4'hE:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d608 =
	      { cache_ram_word128_set$DOB[127:120],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[111:0] };
      4'hF:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d608 =
	      { cache_rg_st_amo_val[7:0], cache_ram_word128_set$DOB[119:0] };
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or cache_rg_st_amo_val)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d625 =
	      { cache_ram_word128_set$DOB[127:16],
		cache_rg_st_amo_val[15:0] };
      4'h2:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d625 =
	      { cache_ram_word128_set$DOB[127:32],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[15:0] };
      4'h4:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d625 =
	      { cache_ram_word128_set$DOB[127:48],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h6:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d625 =
	      { cache_ram_word128_set$DOB[127:64],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[47:0] };
      4'h8:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d625 =
	      { cache_ram_word128_set$DOB[127:80],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[63:0] };
      4'hA:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d625 =
	      { cache_ram_word128_set$DOB[127:96],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[79:0] };
      4'hC:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d625 =
	      { cache_ram_word128_set$DOB[127:112],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[95:0] };
      4'hE:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d625 =
	      { cache_rg_st_amo_val[15:0], cache_ram_word128_set$DOB[111:0] };
      default: IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d625 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or cache_rg_st_amo_val)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q36 =
	      { cache_ram_word128_set$DOB[127:64],
		cache_rg_st_amo_val[63:0] };
      4'h8:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q36 =
	      { cache_rg_st_amo_val[63:0], cache_ram_word128_set$DOB[63:0] };
      default: CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q36 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_width_code or
	  cache_ram_word128_set$DOB or
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d608 or
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d625 or
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d634 or
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q36 or
	  cache_rg_st_amo_val)
  begin
    case (cache_rg_width_code)
      3'd0:
	  x__h22745 =
	      IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d608;
      3'd1:
	  x__h22745 =
	      IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d625;
      3'd2:
	  x__h22745 =
	      IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d634;
      3'd3:
	  x__h22745 = CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q36;
      3'd4: x__h22745 = cache_rg_st_amo_val[127:0];
      default: x__h22745 = cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_amo_funct7 or
	  new_st_val__h29486 or
	  new_st_val__h28284 or
	  w2__h28015 or
	  new_st_val__h29446 or
	  new_st_val__h29456 or
	  new_st_val__h29451 or
	  new_st_val__h29478 or new_st_val__h29461 or new_st_val__h29469)
  begin
    case (cache_rg_amo_funct7[6:2])
      5'b0: _theResult_____2__h28021 = new_st_val__h28284;
      5'b00001: _theResult_____2__h28021 = w2__h28015;
      5'b00100: _theResult_____2__h28021 = new_st_val__h29446;
      5'b01000: _theResult_____2__h28021 = new_st_val__h29456;
      5'b01100: _theResult_____2__h28021 = new_st_val__h29451;
      5'b10000: _theResult_____2__h28021 = new_st_val__h29478;
      5'b11000: _theResult_____2__h28021 = new_st_val__h29461;
      5'b11100: _theResult_____2__h28021 = new_st_val__h29469;
      default: _theResult_____2__h28021 = new_st_val__h29486;
    endcase
  end
  always@(cache_rg_width_code or x__h28175 or _theResult___snd_fst__h32427)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'd2, 3'd3:
	  mem_req_wr_data_wdata__h32418 = _theResult___snd_fst__h32427;
      default: mem_req_wr_data_wdata__h32418 = { 64'd0, x__h28175 };
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or x__h28175)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d744 =
	      { cache_ram_word128_set$DOB[127:32], x__h28175[31:0] };
      4'h4:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d744 =
	      { cache_ram_word128_set$DOB[127:64],
		x__h28175[31:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h8:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d744 =
	      { cache_ram_word128_set$DOB[127:96],
		x__h28175[31:0],
		cache_ram_word128_set$DOB[63:0] };
      4'hC:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d744 =
	      { x__h28175[31:0], cache_ram_word128_set$DOB[95:0] };
      default: IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d744 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or x__h28175)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d735 =
	      { cache_ram_word128_set$DOB[127:16], x__h28175[15:0] };
      4'h2:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d735 =
	      { cache_ram_word128_set$DOB[127:32],
		x__h28175[15:0],
		cache_ram_word128_set$DOB[15:0] };
      4'h4:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d735 =
	      { cache_ram_word128_set$DOB[127:48],
		x__h28175[15:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h6:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d735 =
	      { cache_ram_word128_set$DOB[127:64],
		x__h28175[15:0],
		cache_ram_word128_set$DOB[47:0] };
      4'h8:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d735 =
	      { cache_ram_word128_set$DOB[127:80],
		x__h28175[15:0],
		cache_ram_word128_set$DOB[63:0] };
      4'hA:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d735 =
	      { cache_ram_word128_set$DOB[127:96],
		x__h28175[15:0],
		cache_ram_word128_set$DOB[79:0] };
      4'hC:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d735 =
	      { cache_ram_word128_set$DOB[127:112],
		x__h28175[15:0],
		cache_ram_word128_set$DOB[95:0] };
      4'hE:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d735 =
	      { x__h28175[15:0], cache_ram_word128_set$DOB[111:0] };
      default: IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d735 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or x__h28175)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d718 =
	      { cache_ram_word128_set$DOB[127:8], x__h28175[7:0] };
      4'h1:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d718 =
	      { cache_ram_word128_set$DOB[127:16],
		x__h28175[7:0],
		cache_ram_word128_set$DOB[7:0] };
      4'h2:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d718 =
	      { cache_ram_word128_set$DOB[127:24],
		x__h28175[7:0],
		cache_ram_word128_set$DOB[15:0] };
      4'h3:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d718 =
	      { cache_ram_word128_set$DOB[127:32],
		x__h28175[7:0],
		cache_ram_word128_set$DOB[23:0] };
      4'h4:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d718 =
	      { cache_ram_word128_set$DOB[127:40],
		x__h28175[7:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h5:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d718 =
	      { cache_ram_word128_set$DOB[127:48],
		x__h28175[7:0],
		cache_ram_word128_set$DOB[39:0] };
      4'h6:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d718 =
	      { cache_ram_word128_set$DOB[127:56],
		x__h28175[7:0],
		cache_ram_word128_set$DOB[47:0] };
      4'h7:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d718 =
	      { cache_ram_word128_set$DOB[127:64],
		x__h28175[7:0],
		cache_ram_word128_set$DOB[55:0] };
      4'h8:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d718 =
	      { cache_ram_word128_set$DOB[127:72],
		x__h28175[7:0],
		cache_ram_word128_set$DOB[63:0] };
      4'h9:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d718 =
	      { cache_ram_word128_set$DOB[127:80],
		x__h28175[7:0],
		cache_ram_word128_set$DOB[71:0] };
      4'hA:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d718 =
	      { cache_ram_word128_set$DOB[127:88],
		x__h28175[7:0],
		cache_ram_word128_set$DOB[79:0] };
      4'hB:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d718 =
	      { cache_ram_word128_set$DOB[127:96],
		x__h28175[7:0],
		cache_ram_word128_set$DOB[87:0] };
      4'hC:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d718 =
	      { cache_ram_word128_set$DOB[127:104],
		x__h28175[7:0],
		cache_ram_word128_set$DOB[95:0] };
      4'hD:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d718 =
	      { cache_ram_word128_set$DOB[127:112],
		x__h28175[7:0],
		cache_ram_word128_set$DOB[103:0] };
      4'hE:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d718 =
	      { cache_ram_word128_set$DOB[127:120],
		x__h28175[7:0],
		cache_ram_word128_set$DOB[111:0] };
      4'hF:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d718 =
	      { x__h28175[7:0], cache_ram_word128_set$DOB[119:0] };
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or x__h28175)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q37 =
	      { cache_ram_word128_set$DOB[127:64], x__h28175 };
      4'h8:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q37 =
	      { x__h28175, cache_ram_word128_set$DOB[63:0] };
      default: CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q37 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_width_code or
	  cache_ram_word128_set$DOB or
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d718 or
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d735 or
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d744 or
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q37 or
	  x__h28175)
  begin
    case (cache_rg_width_code)
      3'd0:
	  x__h28077 =
	      IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d718;
      3'd1:
	  x__h28077 =
	      IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d735;
      3'd2:
	  x__h28077 =
	      IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d744;
      3'd3:
	  x__h28077 = CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q37;
      3'd4: x__h28077 = { 64'd0, x__h28175 };
      default: x__h28077 = cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_addr or result__h36538 or result__h36563)
  begin
    case (cache_rg_addr[3:0])
      4'h0: _theResult___fst__h36536 = result__h36538;
      4'h8: _theResult___fst__h36536 = result__h36563;
      default: _theResult___fst__h36536 = 128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h37452 or
	  result__h37485 or result__h37518 or result__h37551)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1081 =
	      result__h37452;
      4'h4:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1081 =
	      result__h37485;
      4'h8:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1081 =
	      result__h37518;
      4'hC:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1081 =
	      result__h37551;
      default: IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1081 =
		   128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h37174 or
	  result__h37207 or
	  result__h37240 or
	  result__h37273 or
	  result__h37306 or
	  result__h37339 or result__h37372 or result__h37405)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1061 =
	      result__h37174;
      4'h2:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1061 =
	      result__h37207;
      4'h4:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1061 =
	      result__h37240;
      4'h6:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1061 =
	      result__h37273;
      4'h8:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1061 =
	      result__h37306;
      4'hA:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1061 =
	      result__h37339;
      4'hC:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1061 =
	      result__h37372;
      4'hE:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1061 =
	      result__h37405;
      default: IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1061 =
		   128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h36621 or
	  result__h36657 or
	  result__h36690 or
	  result__h36723 or
	  result__h36756 or
	  result__h36789 or
	  result__h36822 or
	  result__h36855 or
	  result__h36888 or
	  result__h36921 or
	  result__h36954 or
	  result__h36987 or
	  result__h37020 or
	  result__h37053 or result__h37086 or result__h37119)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1021 =
	      result__h36621;
      4'h1:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1021 =
	      result__h36657;
      4'h2:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1021 =
	      result__h36690;
      4'h3:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1021 =
	      result__h36723;
      4'h4:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1021 =
	      result__h36756;
      4'h5:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1021 =
	      result__h36789;
      4'h6:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1021 =
	      result__h36822;
      4'h7:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1021 =
	      result__h36855;
      4'h8:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1021 =
	      result__h36888;
      4'h9:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1021 =
	      result__h36921;
      4'hA:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1021 =
	      result__h36954;
      4'hB:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1021 =
	      result__h36987;
      4'hC:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1021 =
	      result__h37020;
      4'hD:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1021 =
	      result__h37053;
      4'hE:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1021 =
	      result__h37086;
      4'hF:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1021 =
	      result__h37119;
    endcase
  end
  always@(cache_rg_width_code or
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1021 or
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1061 or
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1081 or
	  _theResult___fst__h36536 or
	  cache_master_xactor_shim_rff_rv$port1__read)
  begin
    case (cache_rg_width_code)
      3'd0:
	  x__h36610 =
	      IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1021;
      3'd1:
	  x__h36610 =
	      IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1061;
      3'd2:
	  x__h36610 =
	      IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1081;
      3'd3: x__h36610 = _theResult___fst__h36536;
      3'd4: x__h36610 = cache_master_xactor_shim_rff_rv$port1__read[132:5];
      default: x__h36610 = 128'd0;
    endcase
  end
  always@(cache_rg_addr or result__h42127 or result__h42156)
  begin
    case (cache_rg_addr[3:0])
      4'h0: _theResult___fst__h42125 = result__h42127;
      4'h8: _theResult___fst__h42125 = result__h42156;
      default: _theResult___fst__h42125 = 128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h41977 or
	  result__h42009 or result__h42041 or result__h42073)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1229 =
	      result__h41977;
      4'h4:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1229 =
	      result__h42009;
      4'h8:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1229 =
	      result__h42041;
      4'hC:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1229 =
	      result__h42073;
      default: IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1229 =
		   128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h41707 or
	  result__h41739 or
	  result__h41771 or
	  result__h41803 or
	  result__h41835 or
	  result__h41867 or result__h41899 or result__h41931)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1217 =
	      result__h41707;
      4'h2:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1217 =
	      result__h41739;
      4'h4:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1217 =
	      result__h41771;
      4'h6:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1217 =
	      result__h41803;
      4'h8:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1217 =
	      result__h41835;
      4'hA:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1217 =
	      result__h41867;
      4'hC:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1217 =
	      result__h41899;
      4'hE:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1217 =
	      result__h41931;
      default: IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1217 =
		   128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h40036 or
	  result__h41205 or
	  result__h41237 or
	  result__h41269 or
	  result__h41301 or
	  result__h41333 or
	  result__h41365 or
	  result__h41397 or
	  result__h41429 or
	  result__h41461 or
	  result__h41493 or
	  result__h41525 or
	  result__h41557 or
	  result__h41589 or result__h41621 or result__h41653)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1193 =
	      result__h40036;
      4'h1:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1193 =
	      result__h41205;
      4'h2:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1193 =
	      result__h41237;
      4'h3:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1193 =
	      result__h41269;
      4'h4:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1193 =
	      result__h41301;
      4'h5:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1193 =
	      result__h41333;
      4'h6:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1193 =
	      result__h41365;
      4'h7:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1193 =
	      result__h41397;
      4'h8:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1193 =
	      result__h41429;
      4'h9:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1193 =
	      result__h41461;
      4'hA:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1193 =
	      result__h41493;
      4'hB:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1193 =
	      result__h41525;
      4'hC:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1193 =
	      result__h41557;
      4'hD:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1193 =
	      result__h41589;
      4'hE:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1193 =
	      result__h41621;
      4'hF:
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1193 =
	      result__h41653;
    endcase
  end
  always@(cache_rg_width_code or
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1193 or
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1217 or
	  IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1229 or
	  _theResult___fst__h42125 or x__h36610)
  begin
    case (cache_rg_width_code)
      3'd0:
	  x__h39954 =
	      IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1193;
      3'd1:
	  x__h39954 =
	      IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1217;
      3'd2:
	  x__h39954 =
	      IF_cache_rg_addr_05_BITS_3_TO_0_49_EQ_0x0_99_T_ETC___d1229;
      3'd3: x__h39954 = _theResult___fst__h42125;
      3'd4: x__h39954 = x__h36610;
      default: x__h39954 = 128'd0;
    endcase
  end
  always@(cache_rg_amo_funct7 or
	  new_st_val__h42262 or
	  new_st_val__h39893 or
	  w2__h28015 or
	  new_st_val__h42222 or
	  new_st_val__h42232 or
	  new_st_val__h42227 or
	  new_st_val__h42254 or new_st_val__h42237 or new_st_val__h42245)
  begin
    case (cache_rg_amo_funct7[6:2])
      5'b0: _theResult_____2__h39774 = new_st_val__h39893;
      5'b00001: _theResult_____2__h39774 = w2__h28015;
      5'b00100: _theResult_____2__h39774 = new_st_val__h42222;
      5'b01000: _theResult_____2__h39774 = new_st_val__h42232;
      5'b01100: _theResult_____2__h39774 = new_st_val__h42227;
      5'b10000: _theResult_____2__h39774 = new_st_val__h42254;
      5'b11000: _theResult_____2__h39774 = new_st_val__h42237;
      5'b11100: _theResult_____2__h39774 = new_st_val__h42245;
      default: _theResult_____2__h39774 = new_st_val__h42262;
    endcase
  end
  always@(cache_rg_width_code or
	  word128__h39610 or _theResult___snd_fst__h39752)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'd2, 3'd3:
	  mem_req_wr_data_wdata__h39743 = _theResult___snd_fst__h39752;
      default: mem_req_wr_data_wdata__h39743 = word128__h39610;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cache_cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	cache_crg_sb_to_load_delay <= `BSV_ASSIGNMENT_DELAY 11'd0;
	cache_ctr_wr_rsps_pending_inrg <= `BSV_ASSIGNMENT_DELAY 4'd0;
	cache_ctr_wr_rsps_pending_outrg <= `BSV_ASSIGNMENT_DELAY 4'd0;
	cache_master_xactor_clearing <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_master_xactor_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	    99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
	cache_master_xactor_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	    99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
	cache_master_xactor_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY 8'd42;
	cache_master_xactor_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	    139'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	cache_master_xactor_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	    148'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	cache_rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY 6'd0;
	cache_rg_lower_word64_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_state <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (cache_cfg_verbosity$EN)
	  cache_cfg_verbosity <= `BSV_ASSIGNMENT_DELAY
	      cache_cfg_verbosity$D_IN;
	if (cache_crg_sb_to_load_delay$EN)
	  cache_crg_sb_to_load_delay <= `BSV_ASSIGNMENT_DELAY
	      cache_crg_sb_to_load_delay$D_IN;
	if (cache_ctr_wr_rsps_pending_inrg$EN)
	  cache_ctr_wr_rsps_pending_inrg <= `BSV_ASSIGNMENT_DELAY
	      cache_ctr_wr_rsps_pending_inrg$D_IN;
	if (cache_ctr_wr_rsps_pending_outrg$EN)
	  cache_ctr_wr_rsps_pending_outrg <= `BSV_ASSIGNMENT_DELAY
	      cache_ctr_wr_rsps_pending_outrg$D_IN;
	if (cache_master_xactor_clearing$EN)
	  cache_master_xactor_clearing <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_clearing$D_IN;
	if (cache_master_xactor_shim_arff_rv$EN)
	  cache_master_xactor_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_arff_rv$D_IN;
	if (cache_master_xactor_shim_awff_rv$EN)
	  cache_master_xactor_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_awff_rv$D_IN;
	if (cache_master_xactor_shim_bff_rv$EN)
	  cache_master_xactor_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_bff_rv$D_IN;
	if (cache_master_xactor_shim_rff_rv$EN)
	  cache_master_xactor_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_rff_rv$D_IN;
	if (cache_master_xactor_shim_wff_rv$EN)
	  cache_master_xactor_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_wff_rv$D_IN;
	if (cache_rg_cset_in_cache$EN)
	  cache_rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_cset_in_cache$D_IN;
	if (cache_rg_lower_word64_full$EN)
	  cache_rg_lower_word64_full <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_lower_word64_full$D_IN;
	if (cache_rg_lrsc_valid$EN)
	  cache_rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_lrsc_valid$D_IN;
	if (cache_rg_state$EN)
	  cache_rg_state <= `BSV_ASSIGNMENT_DELAY cache_rg_state$D_IN;
      end
    if (cache_rg_addr$EN)
      cache_rg_addr <= `BSV_ASSIGNMENT_DELAY cache_rg_addr$D_IN;
    if (cache_rg_amo_funct7$EN)
      cache_rg_amo_funct7 <= `BSV_ASSIGNMENT_DELAY cache_rg_amo_funct7$D_IN;
    if (cache_rg_error_during_refill$EN)
      cache_rg_error_during_refill <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_error_during_refill$D_IN;
    if (cache_rg_exc_code$EN)
      cache_rg_exc_code <= `BSV_ASSIGNMENT_DELAY cache_rg_exc_code$D_IN;
    if (cache_rg_is_unsigned$EN)
      cache_rg_is_unsigned <= `BSV_ASSIGNMENT_DELAY cache_rg_is_unsigned$D_IN;
    if (cache_rg_ld_val$EN)
      cache_rg_ld_val <= `BSV_ASSIGNMENT_DELAY cache_rg_ld_val$D_IN;
    if (cache_rg_lower_word64$EN)
      cache_rg_lower_word64 <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_lower_word64$D_IN;
    if (cache_rg_lrsc_pa$EN)
      cache_rg_lrsc_pa <= `BSV_ASSIGNMENT_DELAY cache_rg_lrsc_pa$D_IN;
    if (cache_rg_op$EN) cache_rg_op <= `BSV_ASSIGNMENT_DELAY cache_rg_op$D_IN;
    if (cache_rg_pa$EN) cache_rg_pa <= `BSV_ASSIGNMENT_DELAY cache_rg_pa$D_IN;
    if (cache_rg_pte_pa$EN)
      cache_rg_pte_pa <= `BSV_ASSIGNMENT_DELAY cache_rg_pte_pa$D_IN;
    if (cache_rg_st_amo_val$EN)
      cache_rg_st_amo_val <= `BSV_ASSIGNMENT_DELAY cache_rg_st_amo_val$D_IN;
    if (cache_rg_width_code$EN)
      cache_rg_width_code <= `BSV_ASSIGNMENT_DELAY cache_rg_width_code$D_IN;
    if (cache_rg_word128_set_in_cache$EN)
      cache_rg_word128_set_in_cache <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_word128_set_in_cache$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cache_cfg_verbosity = 4'hA;
    cache_crg_sb_to_load_delay = 11'h2AA;
    cache_ctr_wr_rsps_pending_inrg = 4'hA;
    cache_ctr_wr_rsps_pending_outrg = 4'hA;
    cache_master_xactor_clearing = 1'h0;
    cache_master_xactor_shim_arff_rv = 99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    cache_master_xactor_shim_awff_rv = 99'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    cache_master_xactor_shim_bff_rv = 8'hAA;
    cache_master_xactor_shim_rff_rv =
	139'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    cache_master_xactor_shim_wff_rv =
	148'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    cache_rg_addr = 32'hAAAAAAAA;
    cache_rg_amo_funct7 = 7'h2A;
    cache_rg_cset_in_cache = 6'h2A;
    cache_rg_error_during_refill = 1'h0;
    cache_rg_exc_code = 6'h2A;
    cache_rg_is_unsigned = 1'h0;
    cache_rg_ld_val = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    cache_rg_lower_word64 = 64'hAAAAAAAAAAAAAAAA;
    cache_rg_lower_word64_full = 1'h0;
    cache_rg_lrsc_pa = 32'hAAAAAAAA;
    cache_rg_lrsc_valid = 1'h0;
    cache_rg_op = 2'h2;
    cache_rg_pa = 32'hAAAAAAAA;
    cache_rg_pte_pa = 32'hAAAAAAAA;
    cache_rg_st_amo_val = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    cache_rg_state = 4'hA;
    cache_rg_width_code = 3'h2;
    cache_rg_word128_set_in_cache = 8'hAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 &&
	  cache_cfg_verbosity != 4'd0 &&
	  !cache_f_reset_reqs$D_OUT)
	begin
	  v__h5541 = $stime;
	  #0;
	end
    v__h5535 = v__h5541 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 &&
	  cache_cfg_verbosity != 4'd0 &&
	  !cache_f_reset_reqs$D_OUT)
	$display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		 v__h5535,
		 "I_MMU_Cache",
		 $signed(32'd64),
		 $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_f_reset_reqs$D_OUT)
	begin
	  v__h5644 = $stime;
	  #0;
	end
    v__h5638 = v__h5644 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_f_reset_reqs$D_OUT)
	$display("%0d: %s.rl_reset: Flushed", v__h5638, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h6102 = $stime;
	  #0;
	end
    v__h6096 = v__h6102 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h",
		 v__h6096,
		 "I_MMU_Cache",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("        eaddr = {CTag 0x%0h  CSet 0x%0h  Word128 0x%0h  Byte 0x%0h}",
		 pa_ctag__h7021,
		 cache_rg_addr[11:6],
		 cache_rg_addr[5:4],
		 cache_rg_addr[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("        CSet 0x%0x: (state, tag):", cache_rg_addr[11:6]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(" (");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_ram_state_and_ctag_cset$DOB[22])
	$write("CTAG_CLEAN");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  !cache_ram_state_and_ctag_cset$DOB[22])
	$write("CTAG_EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_ram_state_and_ctag_cset$DOB[22])
	$write(", 0x%0x", cache_ram_state_and_ctag_cset$DOB[21:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  !cache_ram_state_and_ctag_cset$DOB[22])
	$write(", --");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(")");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("        CSet 0x%0x, Word128 0x%0x: ",
	       cache_rg_addr[11:6],
	       cache_rg_addr[5:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(" 0x%0x", cache_ram_word128_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("    TLB result: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("VM_Xlate_Result { ", "outcome: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("VM_XLATE_OK");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "pa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 6'h2A, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_rg_op_0_EQ_0_1_OR_cache_rg_op_0_EQ_2_2_A_ETC___d462)
	begin
	  v__h21465 = $stime;
	  #0;
	end
    v__h21459 = v__h21465 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_rg_op_0_EQ_0_1_OR_cache_rg_op_0_EQ_2_2_A_ETC___d462)
	$display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		 v__h21459,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265,
		 130'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct7[6:2] == 5'b00010 &&
	  cache_ram_state_and_ctag_cset$DOB[22] &&
	  cache_ram_state_and_ctag_cset_b_read__19_BITS__ETC___d125 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("        AMO LR: reserving PA 0x%0h", cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_rg_op_0_EQ_0_1_OR_cache_rg_op_0_EQ_2_2_A_ETC___d462)
	$display("        Read-hit: addr 0x%0h word128 0x%0h",
		 cache_rg_addr,
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_rg_op_0_EQ_0_1_OR_cache_rg_op_0_EQ_2_2_A_ETC___d475)
	$display("        Read Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct7_3_BITS_6_TO_2_4_EQ_0b10_5__ETC___d479)
	$display("        AMO LR: cache refill: cancelling LR/SC reservation for PA 0x%0h",
		 cache_rg_lrsc_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_rg_op == 2'd1 &&
	  cache_rg_addr_05_EQ_cache_rg_lrsc_pa_04___d168 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("        ST: cancelling LR/SC reservation for PA",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct7[6:2] == 5'b00011 &&
	  cache_rg_lrsc_valid &&
	  !cache_rg_lrsc_pa_04_EQ_cache_rg_addr_05___d106 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("        AMO SC: fail: reserved addr 0x%0h, this address 0x%0h",
		 cache_rg_lrsc_pa,
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct7[6:2] == 5'b00011 &&
	  !cache_rg_lrsc_valid &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("        AMO SC: fail due to invalid LR/SC reservation");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct7[6:2] == 5'b00011 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("        AMO SC result = %0d", lrsc_result__h21855);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d815)
	$display("        Write-Cache-Hit: pa 0x%0h word128 0x%0h",
		 cache_rg_addr,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d815)
	$write("        New Word128_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d815)
	$write("        CSet 0x%0x, Word128 0x%0x: ",
	       cache_rg_addr[11:6],
	       cache_rg_addr[5:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d815)
	$write(" 0x%0x", { x__h22606, x__h22745 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d815)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  (cache_rg_op == 2'd1 ||
	   cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	  NOT_cache_rg_op_0_EQ_2_2_36_OR_NOT_cache_rg_am_ETC___d817)
	$display("        Write-Cache-Miss: pa 0x%0h word128 0x%0h",
		 cache_rg_addr,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d823)
	$display("        Write-Cache-Hit/Miss: eaddr 0x%0h word128 0x%0h",
		 cache_rg_addr,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d823)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d823)
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d823)
	$write("'h%h", 5'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d823)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d823)
	$write("'h%h", mem_req_wr_addr_awaddr__h32281);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d823)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d823)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d823)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d823)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d823)
	$write("'h%h", _theResult___fst_val__h39690, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d823)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d823)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d823)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d823)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d823)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d823)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d823)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d823)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d823)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d823)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d823)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d823)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d823)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d823)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d823)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d823)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d823)
	$write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d823)
	$write("'h%h", mem_req_wr_data_wdata__h27377);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d823)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d823)
	$write("'h%h", mem_req_wr_data_wstrb__h32419);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d823)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d823)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d823)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d823)
	$write("'h%h", mem_req_wr_data_wuser__h27380, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d823)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  NOT_cache_rg_op_0_EQ_0_1_35_AND_NOT_cache_rg_o_ETC___d823)
	$display("        => rl_write_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_rg_op_0_EQ_2_2_AND_cache_rg_amo_funct7_3_ETC___d827)
	begin
	  v__h26937 = $stime;
	  #0;
	end
    v__h26931 = v__h26937 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_rg_op_0_EQ_2_2_AND_cache_rg_amo_funct7_3_ETC___d827)
	$display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		 v__h26931,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 130'd1,
		 130'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_rg_op_0_EQ_2_2_AND_cache_rg_amo_funct7_3_ETC___d827)
	$display("        AMO SC: Fail response for addr 0x%0h",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_0_EQ_1_8_76_AND_NOT_cache_rg_o_ETC___d831)
	$display("        AMO Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d836)
	$display("        AMO: addr 0x%0h amo_f7 0x%0h width_code %0d is_unsigned %0d rs2_val 0x%0h",
		 cache_rg_addr,
		 cache_rg_amo_funct7,
		 cache_rg_width_code,
		 cache_rg_is_unsigned,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d836)
	$display("          PA 0x%0h ", cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d836)
	$display("          Cache word128 0x%0h, load-result 0x%0h",
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265,
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d836)
	$display("          0x%0h  op  0x%0h -> 0x%0h",
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265,
		 cache_ram_word128_set_b_read__52_AND_cache_ram_ETC___d265,
		 { 65'd0, x__h28175 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d836)
	$write("          New Word128_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d836)
	$write("        CSet 0x%0x, Word128 0x%0x: ",
	       cache_rg_addr[11:6],
	       cache_rg_addr[5:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d836)
	$write(" 0x%0x",
	       { cache_ram_word128_set_b_read__52_BITS_129_TO_1_ETC___d543,
		 x__h28077 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d836)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d836)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d836)
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d836)
	$write("'h%h", 5'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d836)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d836)
	$write("'h%h", mem_req_wr_addr_awaddr__h32281);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d836)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d836)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d836)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d836)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d836)
	$write("'h%h", _theResult___fst_val__h39690, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d836)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d836)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d836)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d836)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d836)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d836)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d836)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d836)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d836)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d836)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d836)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d836)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d836)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d836)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d836)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d836)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d836)
	$write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d836)
	$write("'h%h", mem_req_wr_data_wdata__h32418);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d836)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d836)
	$write("'h%h", mem_req_wr_data_wstrb__h32419);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d836)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d836)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d836)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d836)
	$write("'h%h", 2'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d836)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_0_EQ_1_8_76_AND_NOT_cache_rg_o_ETC___d839)
	$display("        AMO_op: cancelling LR/SC reservation for PA",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_reset &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h5103 = $stime;
	  #0;
	end
    v__h5097 = v__h5103 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_reset &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s.rl_start_reset", v__h5097, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h35926 = $stime;
	  #0;
	end
    v__h35920 = v__h35926 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s.rl_io_read_req; width_code 0x%0h vaddr %0h  paddr %0h",
		 v__h35920,
		 "I_MMU_Cache",
		 cache_rg_width_code,
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 5'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", mem_req_wr_addr_awaddr__h39606);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", size_val__h39062, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_maintain_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h37972 = $stime;
	  #0;
	end
    v__h37966 = v__h37972 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_maintain_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		 v__h37966,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 cache_rg_ld_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h38063 = $stime;
	  #0;
	end
    v__h38057 = v__h38063 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s: rl_io_write_req; width_code 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		 v__h38057,
		 "I_MMU_Cache",
		 cache_rg_width_code,
		 cache_rg_addr,
		 cache_rg_pa,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 5'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", mem_req_wr_addr_awaddr__h39606);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", _theResult___fst_val__h39690, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", mem_req_wr_data_wdata__h38306);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", mem_req_wr_data_wstrb__h39744);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", mem_req_wr_data_wuser__h27380, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_SC_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h38788 = $stime;
	  #0;
	end
    v__h38782 = v__h38788 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_SC_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s: rl_io_AMO_SC_req; width_code 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		 v__h38782,
		 "I_MMU_Cache",
		 cache_rg_width_code,
		 cache_rg_addr,
		 cache_rg_pa,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_SC_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("    FAIL due to I/O address.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_SC_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h38913 = $stime;
	  #0;
	end
    v__h38907 = v__h38913 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s.rl_io_AMO_op_req; width_code 0x%0h vaddr %0h  paddr %0h",
		 v__h38907,
		 "I_MMU_Cache",
		 cache_rg_width_code,
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 5'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", mem_req_wr_addr_awaddr__h39606);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", size_val__h39062, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d854 == 4'd0)
	begin
	  v__h43010 = $stime;
	  #0;
	end
    v__h43004 = v__h43010 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d854 == 4'd0)
	$display("%0d: ERROR: %s.rl_discard_write_rsp: unexpected W response (ctr_wr_rsps_pending.value == 0)",
		 v__h43004,
		 "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d854 == 4'd0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d854 == 4'd0)
	$write("AXI4_BFlit { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d854 == 4'd0)
	$write("'h%h", cache_master_xactor_shim_bff_rv$port1__read[6:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d854 == 4'd0)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d854 == 4'd0 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d854 == 4'd0 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d854 == 4'd0 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d854 == 4'd0 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd1 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d854 == 4'd0)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d854 == 4'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d854 == 4'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d854 == 4'd0)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h43257 = $stime;
	  #0;
	end
    v__h43251 = v__h43257 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("%0d: %s.rl_discard_write_rsp: pending %0d ",
	       v__h43251,
	       "I_MMU_Cache",
	       $unsigned(cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d854));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_BFlit { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", cache_master_xactor_shim_bff_rv$port1__read[6:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	begin
	  v__h43218 = $stime;
	  #0;
	end
    v__h43212 = v__h43218 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$display("%0d: %s.rl_discard_write_rsp: fabric response error: exit",
		 v__h43212,
		 "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("AXI4_BFlit { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("'h%h", cache_master_xactor_shim_bff_rv$port1__read[6:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd1 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h36298 = $stime;
	  #0;
	end
    v__h36292 = v__h36298 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s.rl_io_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		 v__h36292,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[137:133]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[132:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd1 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  !cache_master_xactor_shim_rff_rv$port1__read[2])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h",
	       cache_master_xactor_shim_rff_rv$port1__read[1:0],
	       " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h37743 = $stime;
	  #0;
	end
    v__h37737 = v__h37743 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		 v__h37737,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 { 1'd0, x__h36610 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h37858 = $stime;
	  #0;
	end
    v__h37852 = v__h37858 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		 v__h37852,
		 "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h39229 = $stime;
	  #0;
	end
    v__h39223 = v__h39229 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s.rl_io_AMO_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		 v__h39223,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[137:133]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[132:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd1 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  !cache_master_xactor_shim_rff_rv$port1__read[2])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h",
	       cache_master_xactor_shim_rff_rv$port1__read[1:0],
	       " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h39424 = $stime;
	  #0;
	end
    v__h39418 = v__h39424 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s: rl_io_AMO_read_rsp; f3 0x%0h  vaddr %0h  paddr %0h  word128 0x%0h",
		 v__h39418,
		 "I_MMU_Cache",
		 cache_rg_width_code,
		 cache_rg_addr,
		 cache_rg_pa,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 5'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", mem_req_wr_addr_awaddr__h39606);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", _theResult___fst_val__h39690, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", mem_req_wr_data_wdata__h39743);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", mem_req_wr_data_wstrb__h39744);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 2'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h42703 = $stime;
	  #0;
	end
    v__h42697 = v__h42703 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		 v__h42697,
		 "I_MMU_Cache",
		 cache_rg_addr,
		 { 65'd0,
		   IF_cache_rg_width_code_89_EQ_2_94_THEN_SEXT_IF_ETC___d1244 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h39523 = $stime;
	  #0;
	end
    v__h39517 = v__h39523 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s.rl_io_AMO_read_rsp: FABRIC_RSP_ERR: raising trap STORE_AMO_ACCESS_FAULT",
		 v__h39517,
		 "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h43653 = $stime;
	  #0;
	end
    v__h43647 = v__h43653 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("%0d: %s.req: op:", v__h43647, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  req_op == 2'd0)
	$write("CACHE_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  req_op == 2'd1)
	$write("CACHE_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  req_op != 2'd0 &&
	  req_op != 2'd1)
	$write("CACHE_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(" width_code:%0d addr:0x%0h st_value:0x%0h priv:",
	       req_width_code,
	       req_addr,
	       req_st_value);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  req_priv == 2'b0)
	$write("U");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  req_priv == 2'b01)
	$write("S");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  req_priv == 2'b11)
	$write("M");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  req_priv != 2'b0 &&
	  req_priv != 2'b01 &&
	  req_priv != 2'b11)
	$write("RESERVED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(" sstatus_SUM:%0d mstatus_MXR:%0d satp:0x%0h",
	       req_sstatus_SUM,
	       req_mstatus_MXR,
	       req_satp,
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("    amo_funct7 = 0x%0h", req_amo_funct7);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req &&
	  req_width_code_EQ_0b0_336_OR_req_width_code_EQ_ETC___d1377)
	$display("    fa_req_ram_B tagCSet [0x%0x] word128_set [0x%0d]",
		 req_addr[11:6],
		 req_addr[11:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h33046 = $stime;
	  #0;
	end
    v__h33040 = v__h33046 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s.rl_start_cache_refill: ", v__h33040, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("    To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 5'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", cline_fabric_addr__h33099);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 8'd3);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 3'b100, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("    Victim way %0d; => CACHE_REFILL", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_74___d875)
	begin
	  v__h34007 = $stime;
	  #0;
	end
    v__h34001 = v__h34007 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_74___d875)
	$display("%0d: %s.rl_cache_refill_rsps_loop:",
		 v__h34001,
		 "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_74___d875)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_74___d875)
	$write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_74___d875)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[137:133]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_74___d875)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_74___d875)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[132:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_74___d875)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_74___d875 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_74___d875 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_74___d875 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_74___d875 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd1 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_74___d875)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_74___d875 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_74___d875 &&
	  !cache_master_xactor_shim_rff_rv$port1__read[2])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_74___d875)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_74___d875)
	$write("'h%h",
	       cache_master_xactor_shim_rff_rv$port1__read[1:0],
	       " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_74___d875)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h34261 = $stime;
	  #0;
	end
    v__h34255 = v__h34261 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d",
		 v__h34255,
		 "I_MMU_Cache",
		 6'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_word128_set_in_cache[1:0] == 2'd3 &&
	  (cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 ||
	   cache_rg_error_during_refill) &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("    => MODULE_EXCEPTION_RSP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_word128_set_in_cache[1:0] == 2'd3 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  !cache_rg_error_during_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("    => CACHE_REREQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_74___d875)
	$display("        Updating Cache word128_set 0x%0h, word128_in_cline %0d) old => new",
		 cache_rg_word128_set_in_cache,
		 cache_rg_word128_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_74___d875)
	$write("        CSet 0x%0x, Word128 0x%0x: ",
	       cache_rg_addr[11:6],
	       cache_rg_word128_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_74___d875)
	$write(" 0x%0x", cache_ram_word128_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_74___d875)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_74___d875)
	$write("        CSet 0x%0x, Word128 0x%0x: ",
	       cache_rg_addr[11:6],
	       cache_rg_word128_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_74___d875)
	$write(" 0x%0x",
	       { cache_master_xactor_shim_rff_rv$port1__read[1:0],
		 cache_master_xactor_shim_rff_rv$port1__read[132:5] });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_74___d875)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_rereq &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("    fa_req_ram_B tagCSet [0x%0x] word128_set [0x%0d]",
		 cache_rg_addr[11:6],
		 cache_rg_addr[11:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
  end
  // synopsys translate_on
endmodule  // mkMMU_ICache

