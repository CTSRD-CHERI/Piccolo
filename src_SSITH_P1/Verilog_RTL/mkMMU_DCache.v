//
// Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
//
// On Tue Jun 18 14:47:03 BST 2019
//
//
// Ports:
// Name                         I/O  size props
// RDY_set_verbosity              O     1 const
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1
// valid                          O     1
// addr                           O    32 reg
// word64                         O    64
// st_amo_val                     O    64
// exc                            O     1
// exc_code                       O     4 reg
// RDY_server_flush_request_put   O     1 reg
// RDY_server_flush_response_get  O     1
// RDY_tlb_flush                  O     1 const
// mem_master_awid                O     4
// mem_master_awaddr              O    64
// mem_master_awlen               O     8
// mem_master_awsize              O     3
// mem_master_awburst             O     2
// mem_master_awlock              O     1
// mem_master_awcache             O     4
// mem_master_awprot              O     3
// mem_master_awqos               O     4
// mem_master_awregion            O     4
// mem_master_awvalid             O     1
// mem_master_wdata               O    64
// mem_master_wstrb               O     8
// mem_master_wlast               O     1
// mem_master_wvalid              O     1
// mem_master_bready              O     1
// mem_master_arid                O     4
// mem_master_araddr              O    64
// mem_master_arlen               O     8
// mem_master_arsize              O     3
// mem_master_arburst             O     2
// mem_master_arlock              O     1
// mem_master_arcache             O     4
// mem_master_arprot              O     3
// mem_master_arqos               O     4
// mem_master_arregion            O     4
// mem_master_arvalid             O     1
// mem_master_rready              O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_verbosity_verbosity        I     4 reg
// req_op                         I     2
// req_f3                         I     3
// req_amo_funct7                 I     7 reg
// req_addr                       I    32
// req_st_value                   I    64
// req_priv                       I     2 unused
// req_sstatus_SUM                I     1 unused
// req_mstatus_MXR                I     1 unused
// req_satp                       I    32 unused
// mem_master_awready             I     1
// mem_master_wready              I     1
// mem_master_bid                 I     4
// mem_master_bresp               I     2
// mem_master_arready             I     1
// mem_master_rid                 I     4
// mem_master_rdata               I    64
// mem_master_rresp               I     2
// mem_master_rlast               I     1
// EN_set_verbosity               I     1
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_req                         I     1
// EN_server_flush_request_put    I     1
// EN_server_flush_response_get   I     1
// EN_tlb_flush                   I     1 unused
// mem_master_bvalid              I     1
// mem_master_rvalid              I     1
//
// Combinational paths from inputs to outputs:
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_rvalid) -> valid
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_rvalid) -> word64
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_rvalid) -> mem_master_awid
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_rvalid) -> mem_master_awaddr
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_rvalid) -> mem_master_awlen
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_rvalid) -> mem_master_awsize
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_rvalid) -> mem_master_awburst
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_rvalid) -> mem_master_awlock
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_rvalid) -> mem_master_awcache
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_rvalid) -> mem_master_awprot
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_rvalid) -> mem_master_awqos
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_rvalid) -> mem_master_awregion
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_rvalid) -> mem_master_awuser
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_rvalid) -> mem_master_awvalid
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_rvalid) -> mem_master_wdata
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_rvalid) -> mem_master_wstrb
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_rvalid) -> mem_master_wlast
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_rvalid) -> mem_master_wuser
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_rvalid) -> mem_master_wvalid
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    EN_req,
//    mem_master_rvalid) -> mem_master_arid
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    EN_req,
//    mem_master_rvalid) -> mem_master_araddr
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    EN_req,
//    mem_master_rvalid) -> mem_master_arlen
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    EN_req,
//    mem_master_rvalid) -> mem_master_arsize
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    EN_req,
//    mem_master_rvalid) -> mem_master_arburst
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    EN_req,
//    mem_master_rvalid) -> mem_master_arlock
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    EN_req,
//    mem_master_rvalid) -> mem_master_arcache
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    EN_req,
//    mem_master_rvalid) -> mem_master_arprot
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    EN_req,
//    mem_master_rvalid) -> mem_master_arqos
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    EN_req,
//    mem_master_rvalid) -> mem_master_arregion
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    EN_req,
//    mem_master_rvalid) -> mem_master_aruser
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    EN_req,
//    mem_master_rvalid) -> mem_master_arvalid
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMMU_DCache(CLK,
		    RST_N,

		    set_verbosity_verbosity,
		    EN_set_verbosity,
		    RDY_set_verbosity,

		    EN_server_reset_request_put,
		    RDY_server_reset_request_put,

		    EN_server_reset_response_get,
		    RDY_server_reset_response_get,

		    req_op,
		    req_f3,
		    req_amo_funct7,
		    req_addr,
		    req_st_value,
		    req_priv,
		    req_sstatus_SUM,
		    req_mstatus_MXR,
		    req_satp,
		    EN_req,

		    valid,

		    addr,

		    word64,

		    st_amo_val,

		    exc,

		    exc_code,

		    EN_server_flush_request_put,
		    RDY_server_flush_request_put,

		    EN_server_flush_response_get,
		    RDY_server_flush_response_get,

		    EN_tlb_flush,
		    RDY_tlb_flush,

		    mem_master_awid,

		    mem_master_awaddr,

		    mem_master_awlen,

		    mem_master_awsize,

		    mem_master_awburst,

		    mem_master_awlock,

		    mem_master_awcache,

		    mem_master_awprot,

		    mem_master_awqos,

		    mem_master_awregion,

		    mem_master_awvalid,

		    mem_master_awready,

		    mem_master_wdata,

		    mem_master_wstrb,

		    mem_master_wlast,

		    mem_master_wvalid,

		    mem_master_wready,

		    mem_master_bid,
		    mem_master_bresp,
		    mem_master_bvalid,

		    mem_master_bready,

		    mem_master_arid,

		    mem_master_araddr,

		    mem_master_arlen,

		    mem_master_arsize,

		    mem_master_arburst,

		    mem_master_arlock,

		    mem_master_arcache,

		    mem_master_arprot,

		    mem_master_arqos,

		    mem_master_arregion,

		    mem_master_arvalid,

		    mem_master_arready,

		    mem_master_rid,
		    mem_master_rdata,
		    mem_master_rresp,
		    mem_master_rlast,
		    mem_master_rvalid,

		    mem_master_rready);
  input  CLK;
  input  RST_N;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // action method req
  input  [1 : 0] req_op;
  input  [2 : 0] req_f3;
  input  [6 : 0] req_amo_funct7;
  input  [31 : 0] req_addr;
  input  [63 : 0] req_st_value;
  input  [1 : 0] req_priv;
  input  req_sstatus_SUM;
  input  req_mstatus_MXR;
  input  [31 : 0] req_satp;
  input  EN_req;

  // value method valid
  output valid;

  // value method addr
  output [31 : 0] addr;

  // value method word64
  output [63 : 0] word64;

  // value method st_amo_val
  output [63 : 0] st_amo_val;

  // value method exc
  output exc;

  // value method exc_code
  output [3 : 0] exc_code;

  // action method server_flush_request_put
  input  EN_server_flush_request_put;
  output RDY_server_flush_request_put;

  // action method server_flush_response_get
  input  EN_server_flush_response_get;
  output RDY_server_flush_response_get;

  // action method tlb_flush
  input  EN_tlb_flush;
  output RDY_tlb_flush;

  // value method mem_master_aw_awid
  output [3 : 0] mem_master_awid;

  // value method mem_master_aw_awaddr
  output [63 : 0] mem_master_awaddr;

  // value method mem_master_aw_awlen
  output [7 : 0] mem_master_awlen;

  // value method mem_master_aw_awsize
  output [2 : 0] mem_master_awsize;

  // value method mem_master_aw_awburst
  output [1 : 0] mem_master_awburst;

  // value method mem_master_aw_awlock
  output mem_master_awlock;

  // value method mem_master_aw_awcache
  output [3 : 0] mem_master_awcache;

  // value method mem_master_aw_awprot
  output [2 : 0] mem_master_awprot;

  // value method mem_master_aw_awqos
  output [3 : 0] mem_master_awqos;

  // value method mem_master_aw_awregion
  output [3 : 0] mem_master_awregion;

  // value method mem_master_aw_awuser

  // value method mem_master_aw_awvalid
  output mem_master_awvalid;

  // action method mem_master_aw_awready
  input  mem_master_awready;

  // value method mem_master_w_wdata
  output [63 : 0] mem_master_wdata;

  // value method mem_master_w_wstrb
  output [7 : 0] mem_master_wstrb;

  // value method mem_master_w_wlast
  output mem_master_wlast;

  // value method mem_master_w_wuser

  // value method mem_master_w_wvalid
  output mem_master_wvalid;

  // action method mem_master_w_wready
  input  mem_master_wready;

  // action method mem_master_b_bflit
  input  [3 : 0] mem_master_bid;
  input  [1 : 0] mem_master_bresp;
  input  mem_master_bvalid;

  // value method mem_master_b_bready
  output mem_master_bready;

  // value method mem_master_ar_arid
  output [3 : 0] mem_master_arid;

  // value method mem_master_ar_araddr
  output [63 : 0] mem_master_araddr;

  // value method mem_master_ar_arlen
  output [7 : 0] mem_master_arlen;

  // value method mem_master_ar_arsize
  output [2 : 0] mem_master_arsize;

  // value method mem_master_ar_arburst
  output [1 : 0] mem_master_arburst;

  // value method mem_master_ar_arlock
  output mem_master_arlock;

  // value method mem_master_ar_arcache
  output [3 : 0] mem_master_arcache;

  // value method mem_master_ar_arprot
  output [2 : 0] mem_master_arprot;

  // value method mem_master_ar_arqos
  output [3 : 0] mem_master_arqos;

  // value method mem_master_ar_arregion
  output [3 : 0] mem_master_arregion;

  // value method mem_master_ar_aruser

  // value method mem_master_ar_arvalid
  output mem_master_arvalid;

  // action method mem_master_ar_arready
  input  mem_master_arready;

  // action method mem_master_r_rflit
  input  [3 : 0] mem_master_rid;
  input  [63 : 0] mem_master_rdata;
  input  [1 : 0] mem_master_rresp;
  input  mem_master_rlast;
  input  mem_master_rvalid;

  // value method mem_master_r_rready
  output mem_master_rready;

  // signals for module outputs
  reg [63 : 0] word64;
  wire [63 : 0] mem_master_araddr,
		mem_master_awaddr,
		mem_master_wdata,
		st_amo_val;
  wire [31 : 0] addr;
  wire [7 : 0] mem_master_arlen, mem_master_awlen, mem_master_wstrb;
  wire [3 : 0] exc_code,
	       mem_master_arcache,
	       mem_master_arid,
	       mem_master_arqos,
	       mem_master_arregion,
	       mem_master_awcache,
	       mem_master_awid,
	       mem_master_awqos,
	       mem_master_awregion;
  wire [2 : 0] mem_master_arprot,
	       mem_master_arsize,
	       mem_master_awprot,
	       mem_master_awsize;
  wire [1 : 0] mem_master_arburst, mem_master_awburst;
  wire RDY_server_flush_request_put,
       RDY_server_flush_response_get,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_set_verbosity,
       RDY_tlb_flush,
       exc,
       mem_master_arlock,
       mem_master_arvalid,
       mem_master_awlock,
       mem_master_awvalid,
       mem_master_bready,
       mem_master_rready,
       mem_master_wlast,
       mem_master_wvalid,
       valid;

  // inlined wires
  reg [97 : 0] cache_master_xactor_shim_awff_rv$port0__write_1;
  reg [73 : 0] cache_master_xactor_shim_wff_rv$port0__write_1;
  reg [3 : 0] cache_ctr_wr_rsps_pending_crg$port0__write_1;
  wire [97 : 0] cache_master_xactor_shim_arff_rv$port0__write_1,
		cache_master_xactor_shim_arff_rv$port1__read,
		cache_master_xactor_shim_arff_rv$port2__read,
		cache_master_xactor_shim_arff_rv$port3__read,
		cache_master_xactor_shim_awff_rv$port1__read,
		cache_master_xactor_shim_awff_rv$port2__read,
		cache_master_xactor_shim_awff_rv$port3__read;
  wire [73 : 0] cache_master_xactor_shim_wff_rv$port1__read,
		cache_master_xactor_shim_wff_rv$port2__read,
		cache_master_xactor_shim_wff_rv$port3__read;
  wire [71 : 0] cache_master_xactor_shim_rff_rv$port0__write_1,
		cache_master_xactor_shim_rff_rv$port1__read,
		cache_master_xactor_shim_rff_rv$port2__read,
		cache_master_xactor_shim_rff_rv$port3__read;
  wire [70 : 0] cache_master_xactor_ug_master_u_r_putWire$wget;
  wire [10 : 0] cache_crg_sb_to_load_delay$port0__write_1,
		cache_crg_sb_to_load_delay$port2__read;
  wire [6 : 0] cache_master_xactor_shim_bff_rv$port0__write_1,
	       cache_master_xactor_shim_bff_rv$port1__read,
	       cache_master_xactor_shim_bff_rv$port2__read,
	       cache_master_xactor_shim_bff_rv$port3__read;
  wire [5 : 0] cache_master_xactor_ug_master_u_b_putWire$wget;
  wire [3 : 0] cache_ctr_wr_rsps_pending_crg$port1__read,
	       cache_ctr_wr_rsps_pending_crg$port1__write_1,
	       cache_ctr_wr_rsps_pending_crg$port2__read,
	       cache_ctr_wr_rsps_pending_crg$port3__read;
  wire cache_crg_sb_to_load_delay$EN_port1__write,
       cache_ctr_wr_rsps_pending_crg$EN_port0__write,
       cache_dw_valid$whas,
       cache_master_xactor_shim_arff_rv$EN_port0__write,
       cache_master_xactor_shim_awff_rv$EN_port0__write,
       cache_master_xactor_shim_rff_rv$EN_port1__write,
       cache_master_xactor_shim_wff_rv$EN_port0__write,
       cache_master_xactor_ug_master_u_ar_dropWire$whas,
       cache_master_xactor_ug_master_u_aw_dropWire$whas,
       cache_master_xactor_ug_master_u_b_putWire$whas,
       cache_master_xactor_ug_master_u_r_putWire$whas,
       cache_master_xactor_ug_master_u_w_dropWire$whas;

  // register cache_cfg_verbosity
  reg [3 : 0] cache_cfg_verbosity;
  wire [3 : 0] cache_cfg_verbosity$D_IN;
  wire cache_cfg_verbosity$EN;

  // register cache_crg_sb_to_load_delay
  reg [10 : 0] cache_crg_sb_to_load_delay;
  wire [10 : 0] cache_crg_sb_to_load_delay$D_IN;
  wire cache_crg_sb_to_load_delay$EN;

  // register cache_ctr_wr_rsps_pending_crg
  reg [3 : 0] cache_ctr_wr_rsps_pending_crg;
  wire [3 : 0] cache_ctr_wr_rsps_pending_crg$D_IN;
  wire cache_ctr_wr_rsps_pending_crg$EN;

  // register cache_master_xactor_clearing
  reg cache_master_xactor_clearing;
  wire cache_master_xactor_clearing$D_IN, cache_master_xactor_clearing$EN;

  // register cache_master_xactor_shim_arff_rv
  reg [97 : 0] cache_master_xactor_shim_arff_rv;
  wire [97 : 0] cache_master_xactor_shim_arff_rv$D_IN;
  wire cache_master_xactor_shim_arff_rv$EN;

  // register cache_master_xactor_shim_awff_rv
  reg [97 : 0] cache_master_xactor_shim_awff_rv;
  wire [97 : 0] cache_master_xactor_shim_awff_rv$D_IN;
  wire cache_master_xactor_shim_awff_rv$EN;

  // register cache_master_xactor_shim_bff_rv
  reg [6 : 0] cache_master_xactor_shim_bff_rv;
  wire [6 : 0] cache_master_xactor_shim_bff_rv$D_IN;
  wire cache_master_xactor_shim_bff_rv$EN;

  // register cache_master_xactor_shim_rff_rv
  reg [71 : 0] cache_master_xactor_shim_rff_rv;
  wire [71 : 0] cache_master_xactor_shim_rff_rv$D_IN;
  wire cache_master_xactor_shim_rff_rv$EN;

  // register cache_master_xactor_shim_wff_rv
  reg [73 : 0] cache_master_xactor_shim_wff_rv;
  wire [73 : 0] cache_master_xactor_shim_wff_rv$D_IN;
  wire cache_master_xactor_shim_wff_rv$EN;

  // register cache_rg_addr
  reg [31 : 0] cache_rg_addr;
  wire [31 : 0] cache_rg_addr$D_IN;
  wire cache_rg_addr$EN;

  // register cache_rg_amo_funct7
  reg [6 : 0] cache_rg_amo_funct7;
  wire [6 : 0] cache_rg_amo_funct7$D_IN;
  wire cache_rg_amo_funct7$EN;

  // register cache_rg_cset_in_cache
  reg [6 : 0] cache_rg_cset_in_cache;
  wire [6 : 0] cache_rg_cset_in_cache$D_IN;
  wire cache_rg_cset_in_cache$EN;

  // register cache_rg_error_during_refill
  reg cache_rg_error_during_refill;
  wire cache_rg_error_during_refill$D_IN, cache_rg_error_during_refill$EN;

  // register cache_rg_exc_code
  reg [3 : 0] cache_rg_exc_code;
  reg [3 : 0] cache_rg_exc_code$D_IN;
  wire cache_rg_exc_code$EN;

  // register cache_rg_f3
  reg [2 : 0] cache_rg_f3;
  wire [2 : 0] cache_rg_f3$D_IN;
  wire cache_rg_f3$EN;

  // register cache_rg_ld_val
  reg [63 : 0] cache_rg_ld_val;
  reg [63 : 0] cache_rg_ld_val$D_IN;
  wire cache_rg_ld_val$EN;

  // register cache_rg_lower_word32
  reg [31 : 0] cache_rg_lower_word32;
  wire [31 : 0] cache_rg_lower_word32$D_IN;
  wire cache_rg_lower_word32$EN;

  // register cache_rg_lower_word32_full
  reg cache_rg_lower_word32_full;
  wire cache_rg_lower_word32_full$D_IN, cache_rg_lower_word32_full$EN;

  // register cache_rg_lrsc_pa
  reg [31 : 0] cache_rg_lrsc_pa;
  wire [31 : 0] cache_rg_lrsc_pa$D_IN;
  wire cache_rg_lrsc_pa$EN;

  // register cache_rg_lrsc_valid
  reg cache_rg_lrsc_valid;
  wire cache_rg_lrsc_valid$D_IN, cache_rg_lrsc_valid$EN;

  // register cache_rg_op
  reg [1 : 0] cache_rg_op;
  wire [1 : 0] cache_rg_op$D_IN;
  wire cache_rg_op$EN;

  // register cache_rg_pa
  reg [31 : 0] cache_rg_pa;
  wire [31 : 0] cache_rg_pa$D_IN;
  wire cache_rg_pa$EN;

  // register cache_rg_pte_pa
  reg [31 : 0] cache_rg_pte_pa;
  wire [31 : 0] cache_rg_pte_pa$D_IN;
  wire cache_rg_pte_pa$EN;

  // register cache_rg_st_amo_val
  reg [63 : 0] cache_rg_st_amo_val;
  wire [63 : 0] cache_rg_st_amo_val$D_IN;
  wire cache_rg_st_amo_val$EN;

  // register cache_rg_state
  reg [3 : 0] cache_rg_state;
  reg [3 : 0] cache_rg_state$D_IN;
  wire cache_rg_state$EN;

  // register cache_rg_word64_set_in_cache
  reg [8 : 0] cache_rg_word64_set_in_cache;
  wire [8 : 0] cache_rg_word64_set_in_cache$D_IN;
  wire cache_rg_word64_set_in_cache$EN;

  // ports of submodule cache_f_reset_reqs
  wire cache_f_reset_reqs$CLR,
       cache_f_reset_reqs$DEQ,
       cache_f_reset_reqs$D_IN,
       cache_f_reset_reqs$D_OUT,
       cache_f_reset_reqs$EMPTY_N,
       cache_f_reset_reqs$ENQ,
       cache_f_reset_reqs$FULL_N;

  // ports of submodule cache_f_reset_rsps
  wire cache_f_reset_rsps$CLR,
       cache_f_reset_rsps$DEQ,
       cache_f_reset_rsps$D_IN,
       cache_f_reset_rsps$D_OUT,
       cache_f_reset_rsps$EMPTY_N,
       cache_f_reset_rsps$ENQ,
       cache_f_reset_rsps$FULL_N;

  // ports of submodule cache_ram_state_and_ctag_cset
  wire [22 : 0] cache_ram_state_and_ctag_cset$DIA,
		cache_ram_state_and_ctag_cset$DIB,
		cache_ram_state_and_ctag_cset$DOB;
  wire [6 : 0] cache_ram_state_and_ctag_cset$ADDRA,
	       cache_ram_state_and_ctag_cset$ADDRB;
  wire cache_ram_state_and_ctag_cset$ENA,
       cache_ram_state_and_ctag_cset$ENB,
       cache_ram_state_and_ctag_cset$WEA,
       cache_ram_state_and_ctag_cset$WEB;

  // ports of submodule cache_ram_word64_set
  reg [63 : 0] cache_ram_word64_set$DIB;
  reg [8 : 0] cache_ram_word64_set$ADDRB;
  wire [63 : 0] cache_ram_word64_set$DIA, cache_ram_word64_set$DOB;
  wire [8 : 0] cache_ram_word64_set$ADDRA;
  wire cache_ram_word64_set$ENA,
       cache_ram_word64_set$ENB,
       cache_ram_word64_set$WEA,
       cache_ram_word64_set$WEB;

  // ports of submodule cache_soc_map
  wire [63 : 0] cache_soc_map$m_is_IO_addr_addr,
		cache_soc_map$m_is_mem_addr_addr,
		cache_soc_map$m_is_near_mem_IO_addr_addr;
  wire cache_soc_map$m_is_mem_addr;

  // rule scheduling signals
  wire CAN_FIRE_RL_cache_master_xactor_do_clear,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop,
       CAN_FIRE_RL_cache_rl_ST_AMO_response,
       CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop,
       CAN_FIRE_RL_cache_rl_discard_write_rsp,
       CAN_FIRE_RL_cache_rl_drive_exception_rsp,
       CAN_FIRE_RL_cache_rl_io_AMO_SC_req,
       CAN_FIRE_RL_cache_rl_io_AMO_op_req,
       CAN_FIRE_RL_cache_rl_io_AMO_read_rsp,
       CAN_FIRE_RL_cache_rl_io_read_req,
       CAN_FIRE_RL_cache_rl_io_read_rsp,
       CAN_FIRE_RL_cache_rl_io_write_req,
       CAN_FIRE_RL_cache_rl_maintain_io_read_rsp,
       CAN_FIRE_RL_cache_rl_probe_and_immed_rsp,
       CAN_FIRE_RL_cache_rl_rereq,
       CAN_FIRE_RL_cache_rl_reset,
       CAN_FIRE_RL_cache_rl_shift_sb_to_load_delay,
       CAN_FIRE_RL_cache_rl_start_cache_refill,
       CAN_FIRE_RL_cache_rl_start_reset,
       CAN_FIRE_mem_master_ar_arready,
       CAN_FIRE_mem_master_aw_awready,
       CAN_FIRE_mem_master_b_bflit,
       CAN_FIRE_mem_master_r_rflit,
       CAN_FIRE_mem_master_w_wready,
       CAN_FIRE_req,
       CAN_FIRE_server_flush_request_put,
       CAN_FIRE_server_flush_response_get,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_tlb_flush,
       WILL_FIRE_RL_cache_master_xactor_do_clear,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop,
       WILL_FIRE_RL_cache_rl_ST_AMO_response,
       WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop,
       WILL_FIRE_RL_cache_rl_discard_write_rsp,
       WILL_FIRE_RL_cache_rl_drive_exception_rsp,
       WILL_FIRE_RL_cache_rl_io_AMO_SC_req,
       WILL_FIRE_RL_cache_rl_io_AMO_op_req,
       WILL_FIRE_RL_cache_rl_io_AMO_read_rsp,
       WILL_FIRE_RL_cache_rl_io_read_req,
       WILL_FIRE_RL_cache_rl_io_read_rsp,
       WILL_FIRE_RL_cache_rl_io_write_req,
       WILL_FIRE_RL_cache_rl_maintain_io_read_rsp,
       WILL_FIRE_RL_cache_rl_probe_and_immed_rsp,
       WILL_FIRE_RL_cache_rl_rereq,
       WILL_FIRE_RL_cache_rl_reset,
       WILL_FIRE_RL_cache_rl_shift_sb_to_load_delay,
       WILL_FIRE_RL_cache_rl_start_cache_refill,
       WILL_FIRE_RL_cache_rl_start_reset,
       WILL_FIRE_mem_master_ar_arready,
       WILL_FIRE_mem_master_aw_awready,
       WILL_FIRE_mem_master_b_bflit,
       WILL_FIRE_mem_master_r_rflit,
       WILL_FIRE_mem_master_w_wready,
       WILL_FIRE_req,
       WILL_FIRE_server_flush_request_put,
       WILL_FIRE_server_flush_response_get,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_tlb_flush;

  // inputs to muxes for submodule ports
  reg [63 : 0] MUX_cache_dw_output_ld_val$wset_1__VAL_1,
	       MUX_cache_dw_output_ld_val$wset_1__VAL_2;
  wire [97 : 0] MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_1,
		MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_2,
		MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_1,
		MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_2;
  wire [73 : 0] MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_1,
		MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_2,
		MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_3;
  wire [63 : 0] MUX_cache_dw_output_ld_val$wset_1__VAL_3,
		MUX_cache_ram_word64_set$a_put_3__VAL_2,
		MUX_cache_rg_ld_val$write_1__VAL_2,
		MUX_cache_rg_st_amo_val$write_1__VAL_2;
  wire [22 : 0] MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1;
  wire [8 : 0] MUX_cache_ram_word64_set$b_put_2__VAL_2,
	       MUX_cache_ram_word64_set$b_put_2__VAL_4;
  wire [6 : 0] MUX_cache_rg_cset_in_cache$write_1__VAL_1;
  wire [3 : 0] MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1,
	       MUX_cache_rg_exc_code$write_1__VAL_1,
	       MUX_cache_rg_exc_code$write_1__VAL_4,
	       MUX_cache_rg_state$write_1__VAL_1,
	       MUX_cache_rg_state$write_1__VAL_12,
	       MUX_cache_rg_state$write_1__VAL_5,
	       MUX_cache_rg_state$write_1__VAL_7;
  wire MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1,
       MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2,
       MUX_cache_dw_output_ld_val$wset_1__SEL_1,
       MUX_cache_dw_output_ld_val$wset_1__SEL_3,
       MUX_cache_dw_output_ld_val$wset_1__SEL_4,
       MUX_cache_master_xactor_clearing$write_1__SEL_1,
       MUX_cache_master_xactor_shim_arff_rv$port0__write_1__SEL_1,
       MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1,
       MUX_cache_ram_word64_set$a_put_1__SEL_1,
       MUX_cache_ram_word64_set$b_put_1__SEL_2,
       MUX_cache_rg_error_during_refill$write_1__SEL_1,
       MUX_cache_rg_exc_code$write_1__SEL_1,
       MUX_cache_rg_exc_code$write_1__SEL_2,
       MUX_cache_rg_exc_code$write_1__SEL_3,
       MUX_cache_rg_ld_val$write_1__SEL_2,
       MUX_cache_rg_lrsc_valid$write_1__SEL_2,
       MUX_cache_rg_lrsc_valid$write_1__VAL_2,
       MUX_cache_rg_state$write_1__SEL_12,
       MUX_cache_rg_state$write_1__SEL_13,
       MUX_cache_rg_state$write_1__SEL_7;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h5430;
  reg [31 : 0] v__h5531;
  reg [31 : 0] v__h5982;
  reg [31 : 0] v__h14447;
  reg [31 : 0] v__h18832;
  reg [31 : 0] v__h18091;
  reg [31 : 0] v__h22288;
  reg [31 : 0] v__h27249;
  reg [31 : 0] v__h27329;
  reg [31 : 0] v__h27843;
  reg [31 : 0] v__h28136;
  reg [31 : 0] v__h28254;
  reg [31 : 0] v__h23674;
  reg [31 : 0] v__h23936;
  reg [31 : 0] v__h25917;
  reg [31 : 0] v__h27035;
  reg [31 : 0] v__h27142;
  reg [31 : 0] v__h28570;
  reg [31 : 0] v__h28765;
  reg [31 : 0] v__h31370;
  reg [31 : 0] v__h31620;
  reg [31 : 0] v__h28861;
  reg [31 : 0] v__h22730;
  reg [31 : 0] v__h25545;
  reg [31 : 0] v__h32336;
  reg [31 : 0] v__h32297;
  reg [31 : 0] v__h5065;
  reg [31 : 0] v__h32719;
  reg [31 : 0] v__h5059;
  reg [31 : 0] v__h5424;
  reg [31 : 0] v__h5525;
  reg [31 : 0] v__h5976;
  reg [31 : 0] v__h14441;
  reg [31 : 0] v__h18085;
  reg [31 : 0] v__h18826;
  reg [31 : 0] v__h22282;
  reg [31 : 0] v__h22724;
  reg [31 : 0] v__h23668;
  reg [31 : 0] v__h23930;
  reg [31 : 0] v__h25539;
  reg [31 : 0] v__h25911;
  reg [31 : 0] v__h27029;
  reg [31 : 0] v__h27136;
  reg [31 : 0] v__h27243;
  reg [31 : 0] v__h27323;
  reg [31 : 0] v__h27837;
  reg [31 : 0] v__h28130;
  reg [31 : 0] v__h28248;
  reg [31 : 0] v__h28564;
  reg [31 : 0] v__h28759;
  reg [31 : 0] v__h28855;
  reg [31 : 0] v__h31364;
  reg [31 : 0] v__h31614;
  reg [31 : 0] v__h32291;
  reg [31 : 0] v__h32330;
  reg [31 : 0] v__h32713;
  // synopsys translate_on

  // remaining internal signals
  reg [63 : 0] CASE_cache_rg_addr_BITS_2_TO_0_0x0_cache_ram_w_ETC__q32,
	       CASE_cache_rg_addr_BITS_2_TO_0_0x0_cache_ram_w_ETC__q51,
	       CASE_cache_rg_addr_BITS_2_TO_0_0x0_result0970__ETC__q49,
	       CASE_cache_rg_addr_BITS_2_TO_0_0x0_result4268__ETC__q29,
	       CASE_cache_rg_addr_BITS_2_TO_0_0x0_result6813__ETC__q33,
	       CASE_cache_rg_addr_BITS_2_TO_0_0x0_result6878__ETC__q34,
	       IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d249,
	       IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d266,
	       IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d279,
	       IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d288,
	       IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d300,
	       IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d387,
	       IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d396,
	       IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d461,
	       IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d470,
	       IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d694,
	       IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d710,
	       IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d722,
	       IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d730,
	       IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d818,
	       IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d834,
	       IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d846,
	       IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d854,
	       IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d864,
	       IF_cache_rg_f3_83_EQ_0b0_84_THEN_IF_cache_rg_a_ETC___d405,
	       IF_cache_rg_f3_83_EQ_0b0_84_THEN_IF_cache_rg_a_ETC___d479,
	       IF_cache_rg_f3_83_EQ_0b10_89_THEN_SEXT_IF_cach_ETC___d347,
	       _theResult_____2__h19389,
	       _theResult_____2__h29175,
	       mem_req_wr_data_wdata__h18594,
	       mem_req_wr_data_wdata__h22087,
	       mem_req_wr_data_wdata__h27642,
	       mem_req_wr_data_wdata__h29153,
	       new_value__h17182,
	       new_value__h7153,
	       w1__h19381,
	       w1__h29163,
	       w1__h29167;
  reg [7 : 0] mem_req_wr_data_wstrb__h22088, mem_req_wr_data_wstrb__h29154;
  reg [2 : 0] _theResult___snd_snd_val__h29101, size_val__h28409;
  wire [96 : 0] cache_master_xactor_shim_arff_rvport1__read_B_ETC__q54,
		cache_master_xactor_shim_awff_rvport1__read_B_ETC__q52;
  wire [72 : 0] cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q53;
  wire [63 : 0] IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d302,
		IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d316,
		IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d865,
		IF_cache_rg_f3_83_EQ_0b10_89_THEN_SEXT_cache_r_ETC___d411,
		IF_cache_rg_op_8_EQ_1_6_OR_cache_rg_op_8_EQ_2__ETC___d511,
		_theResult___fst__h18463,
		_theResult___fst__h22020,
		_theResult___fst__h27575,
		_theResult___fst__h29086,
		cline_fabric_addr__h22783,
		ld_val__h26042,
		mem_req_wr_addr_awaddr__h21877,
		mem_req_wr_addr_awaddr__h28943,
		new_ld_val__h28891,
		new_st_val__h19111,
		new_st_val__h19393,
		new_st_val__h19484,
		new_st_val__h20464,
		new_st_val__h20468,
		new_st_val__h20472,
		new_st_val__h20476,
		new_st_val__h20481,
		new_st_val__h20487,
		new_st_val__h20492,
		new_st_val__h29179,
		new_st_val__h29270,
		new_st_val__h31130,
		new_st_val__h31134,
		new_st_val__h31138,
		new_st_val__h31142,
		new_st_val__h31147,
		new_st_val__h31153,
		new_st_val__h31158,
		result__h13564,
		result__h13592,
		result__h13620,
		result__h13648,
		result__h13676,
		result__h13704,
		result__h13732,
		result__h13777,
		result__h13805,
		result__h13833,
		result__h13861,
		result__h13889,
		result__h13917,
		result__h13945,
		result__h13973,
		result__h14018,
		result__h14046,
		result__h14074,
		result__h14102,
		result__h14143,
		result__h14171,
		result__h14199,
		result__h14227,
		result__h14268,
		result__h14296,
		result__h14335,
		result__h14363,
		result__h26102,
		result__h26132,
		result__h26159,
		result__h26186,
		result__h26213,
		result__h26240,
		result__h26267,
		result__h26294,
		result__h26338,
		result__h26365,
		result__h26392,
		result__h26419,
		result__h26446,
		result__h26473,
		result__h26500,
		result__h26527,
		result__h26571,
		result__h26598,
		result__h26625,
		result__h26652,
		result__h26692,
		result__h26719,
		result__h26746,
		result__h26773,
		result__h26813,
		result__h26840,
		result__h26878,
		result__h26905,
		result__h29358,
		result__h30266,
		result__h30294,
		result__h30322,
		result__h30350,
		result__h30378,
		result__h30406,
		result__h30434,
		result__h30479,
		result__h30507,
		result__h30535,
		result__h30563,
		result__h30591,
		result__h30619,
		result__h30647,
		result__h30675,
		result__h30720,
		result__h30748,
		result__h30776,
		result__h30804,
		result__h30845,
		result__h30873,
		result__h30901,
		result__h30929,
		result__h30970,
		result__h30998,
		result__h31037,
		result__h31065,
		result__h7208,
		st_val__h28903,
		w1___1__h19452,
		w1___1__h29238,
		w2___1__h29239,
		w2__h29169,
		word64__h6974,
		x__h14834,
		y__h7244;
  wire [31 : 0] cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q1,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q4,
		cache_rg_st_amo_val_BITS_31_TO_0__q31,
		cline_addr__h22782,
		ld_val6042_BITS_31_TO_0__q37,
		ld_val6042_BITS_63_TO_32__q44,
		new_value153_BITS_31_TO_0__q30,
		w19163_BITS_31_TO_0__q50,
		word64974_BITS_31_TO_0__q17,
		word64974_BITS_63_TO_32__q24;
  wire [21 : 0] pa_ctag__h6832;
  wire [15 : 0] cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q10,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q13,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q3,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q7,
		ld_val6042_BITS_15_TO_0__q36,
		ld_val6042_BITS_31_TO_16__q40,
		ld_val6042_BITS_47_TO_32__q43,
		ld_val6042_BITS_63_TO_48__q47,
		word64974_BITS_15_TO_0__q16,
		word64974_BITS_31_TO_16__q20,
		word64974_BITS_47_TO_32__q23,
		word64974_BITS_63_TO_48__q27;
  wire [7 : 0] cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q11,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q12,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q14,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q2,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q5,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q6,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q8,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q9,
	       ld_val6042_BITS_15_TO_8__q38,
	       ld_val6042_BITS_23_TO_16__q39,
	       ld_val6042_BITS_31_TO_24__q41,
	       ld_val6042_BITS_39_TO_32__q42,
	       ld_val6042_BITS_47_TO_40__q45,
	       ld_val6042_BITS_55_TO_48__q46,
	       ld_val6042_BITS_63_TO_56__q48,
	       ld_val6042_BITS_7_TO_0__q35,
	       strobe64__h22018,
	       strobe64__h22022,
	       strobe64__h22026,
	       strobe64__h29084,
	       strobe64__h29088,
	       strobe64__h29092,
	       word64974_BITS_15_TO_8__q18,
	       word64974_BITS_23_TO_16__q19,
	       word64974_BITS_31_TO_24__q21,
	       word64974_BITS_39_TO_32__q22,
	       word64974_BITS_47_TO_40__q25,
	       word64974_BITS_55_TO_48__q26,
	       word64974_BITS_63_TO_56__q28,
	       word64974_BITS_7_TO_0__q15;
  wire [5 : 0] shift_bits__h21883, shift_bits__h28949;
  wire [3 : 0] IF_cache_rg_op_8_EQ_0_9_OR_cache_rg_op_8_EQ_2__ETC___d158,
	       IF_cache_rg_op_8_EQ_1_6_OR_cache_rg_op_8_EQ_2__ETC___d157,
	       access_exc_code__h4781,
	       b__h22684;
  wire IF_cache_rg_op_8_EQ_1_6_OR_cache_rg_op_8_EQ_2__ETC___d126,
       NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57,
       NOT_cache_cfg_verbosity_read__5_ULE_2_05___d606,
       NOT_cache_master_xactor_clearing_0_5_AND_cache_ETC___d788,
       NOT_cache_ram_state_and_ctag_cset_b_read__16_B_ETC___d125,
       NOT_cache_ram_state_and_ctag_cset_b_read__16_B_ETC___d164,
       NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d153,
       NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d491,
       NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d539,
       NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d547,
       NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d552,
       NOT_cache_rg_op_8_EQ_1_6_70_AND_NOT_cache_rg_o_ETC___d173,
       NOT_cache_rg_op_8_EQ_1_6_70_AND_NOT_cache_rg_o_ETC___d351,
       NOT_cache_rg_op_8_EQ_1_6_70_AND_NOT_cache_rg_o_ETC___d485,
       NOT_cache_rg_op_8_EQ_1_6_70_AND_NOT_cache_rg_o_ETC___d562,
       NOT_cache_rg_op_8_EQ_1_6_70_AND_NOT_cache_rg_o_ETC___d565,
       NOT_cache_rg_op_8_EQ_1_6_70_AND_NOT_cache_rg_o_ETC___d569,
       NOT_cache_rg_op_8_EQ_1_6_70_AND_NOT_cache_rg_o_ETC___d575,
       NOT_cache_rg_op_8_EQ_2_0_31_OR_NOT_cache_rg_am_ETC___d349,
       NOT_cache_rg_op_8_EQ_2_0_31_OR_NOT_cache_rg_am_ETC___d483,
       NOT_cache_rg_op_8_EQ_2_0_31_OR_NOT_cache_rg_am_ETC___d537,
       NOT_cache_rg_op_8_EQ_2_0_31_OR_NOT_cache_rg_am_ETC___d541,
       NOT_cache_rg_op_8_EQ_2_0_31_OR_NOT_cache_rg_am_ETC___d545,
       NOT_cache_rg_op_8_EQ_2_0_31_OR_NOT_cache_rg_am_ETC___d550,
       NOT_req_f3_BITS_1_TO_0_62_EQ_0b0_63_64_AND_NOT_ETC___d983,
       cache_ram_state_and_ctag_cset_b_read__16_BITS__ETC___d122,
       cache_ram_state_and_ctag_cset_b_read__16_BIT_2_ETC___d165,
       cache_rg_addr_4_EQ_cache_rg_lrsc_pa_02___d162,
       cache_rg_amo_funct7_1_BITS_6_TO_2_2_EQ_0b10_3__ETC___d337,
       cache_rg_lrsc_pa_02_EQ_cache_rg_addr_4___d103,
       cache_rg_op_8_EQ_0_9_OR_cache_rg_op_8_EQ_2_0_A_ETC___d148,
       cache_rg_op_8_EQ_0_9_OR_cache_rg_op_8_EQ_2_0_A_ETC___d176,
       cache_rg_op_8_EQ_0_9_OR_cache_rg_op_8_EQ_2_0_A_ETC___d181,
       cache_rg_op_8_EQ_0_9_OR_cache_rg_op_8_EQ_2_0_A_ETC___d320,
       cache_rg_op_8_EQ_0_9_OR_cache_rg_op_8_EQ_2_0_A_ETC___d333,
       cache_rg_op_8_EQ_1_6_OR_cache_rg_op_8_EQ_2_0_A_ETC___d174,
       cache_rg_op_8_EQ_1_6_OR_cache_rg_op_8_EQ_2_0_A_ETC___d352,
       cache_rg_op_8_EQ_1_6_OR_cache_rg_op_8_EQ_2_0_A_ETC___d486,
       cache_rg_op_8_EQ_1_6_OR_cache_rg_op_8_EQ_2_0_A_ETC___d489,
       cache_rg_op_8_EQ_2_0_AND_cache_rg_amo_funct7_1_ETC___d115,
       cache_rg_op_8_EQ_2_0_AND_cache_rg_amo_funct7_1_ETC___d558,
       cache_rg_state_9_EQ_12_49_AND_cache_rg_op_8_EQ_ETC___d651,
       cache_rg_state_9_EQ_3_29_AND_NOT_cache_rg_op_8_ETC___d138,
       cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d343,
       cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d354,
       cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d567,
       cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d571,
       cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d579,
       lrsc_result__h14824,
       req_f3_BITS_1_TO_0_62_EQ_0b0_63_OR_req_f3_BITS_ETC___d992;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = cache_f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = cache_f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get =
	     !cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get =
	     !cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // action method req
  assign CAN_FIRE_req = 1'd1 ;
  assign WILL_FIRE_req = EN_req ;

  // value method valid
  assign valid = cache_dw_valid$whas ;

  // value method addr
  assign addr = cache_rg_addr ;

  // value method word64
  always@(MUX_cache_dw_output_ld_val$wset_1__SEL_1 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_1 or
	  MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_2 or
	  MUX_cache_dw_output_ld_val$wset_1__SEL_3 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_3 or
	  MUX_cache_dw_output_ld_val$wset_1__SEL_4 or cache_rg_ld_val)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_dw_output_ld_val$wset_1__SEL_1:
	  word64 = MUX_cache_dw_output_ld_val$wset_1__VAL_1;
      MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  word64 = MUX_cache_dw_output_ld_val$wset_1__VAL_2;
      MUX_cache_dw_output_ld_val$wset_1__SEL_3:
	  word64 = MUX_cache_dw_output_ld_val$wset_1__VAL_3;
      MUX_cache_dw_output_ld_val$wset_1__SEL_4: word64 = cache_rg_ld_val;
      default: word64 = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end

  // value method st_amo_val
  assign st_amo_val =
	     MUX_cache_dw_output_ld_val$wset_1__SEL_3 ?
	       64'd0 :
	       cache_rg_st_amo_val ;

  // value method exc
  assign exc = cache_rg_state == 4'd4 ;

  // value method exc_code
  assign exc_code = cache_rg_exc_code ;

  // action method server_flush_request_put
  assign RDY_server_flush_request_put = cache_f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_flush_request_put = cache_f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_flush_request_put = EN_server_flush_request_put ;

  // action method server_flush_response_get
  assign RDY_server_flush_response_get =
	     cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_flush_response_get =
	     cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_flush_response_get = EN_server_flush_response_get ;

  // action method tlb_flush
  assign RDY_tlb_flush = 1'd1 ;
  assign CAN_FIRE_tlb_flush = 1'd1 ;
  assign WILL_FIRE_tlb_flush = EN_tlb_flush ;

  // value method mem_master_aw_awid
  assign mem_master_awid =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q52[96:93] ;

  // value method mem_master_aw_awaddr
  assign mem_master_awaddr =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q52[92:29] ;

  // value method mem_master_aw_awlen
  assign mem_master_awlen =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q52[28:21] ;

  // value method mem_master_aw_awsize
  assign mem_master_awsize =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q52[20:18] ;

  // value method mem_master_aw_awburst
  assign mem_master_awburst =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q52[17:16] ;

  // value method mem_master_aw_awlock
  assign mem_master_awlock =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q52[15] ;

  // value method mem_master_aw_awcache
  assign mem_master_awcache =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q52[14:11] ;

  // value method mem_master_aw_awprot
  assign mem_master_awprot =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q52[10:8] ;

  // value method mem_master_aw_awqos
  assign mem_master_awqos =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q52[7:4] ;

  // value method mem_master_aw_awregion
  assign mem_master_awregion =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q52[3:0] ;

  // value method mem_master_aw_awvalid
  assign mem_master_awvalid =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek ;

  // action method mem_master_aw_awready
  assign CAN_FIRE_mem_master_aw_awready = 1'd1 ;
  assign WILL_FIRE_mem_master_aw_awready = 1'd1 ;

  // value method mem_master_w_wdata
  assign mem_master_wdata =
	     cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q53[72:9] ;

  // value method mem_master_w_wstrb
  assign mem_master_wstrb =
	     cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q53[8:1] ;

  // value method mem_master_w_wlast
  assign mem_master_wlast =
	     cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q53[0] ;

  // value method mem_master_w_wvalid
  assign mem_master_wvalid =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek ;

  // action method mem_master_w_wready
  assign CAN_FIRE_mem_master_w_wready = 1'd1 ;
  assign WILL_FIRE_mem_master_w_wready = 1'd1 ;

  // action method mem_master_b_bflit
  assign CAN_FIRE_mem_master_b_bflit = 1'd1 ;
  assign WILL_FIRE_mem_master_b_bflit = mem_master_bvalid ;

  // value method mem_master_b_bready
  assign mem_master_bready = !cache_master_xactor_shim_bff_rv[6] ;

  // value method mem_master_ar_arid
  assign mem_master_arid =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q54[96:93] ;

  // value method mem_master_ar_araddr
  assign mem_master_araddr =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q54[92:29] ;

  // value method mem_master_ar_arlen
  assign mem_master_arlen =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q54[28:21] ;

  // value method mem_master_ar_arsize
  assign mem_master_arsize =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q54[20:18] ;

  // value method mem_master_ar_arburst
  assign mem_master_arburst =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q54[17:16] ;

  // value method mem_master_ar_arlock
  assign mem_master_arlock =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q54[15] ;

  // value method mem_master_ar_arcache
  assign mem_master_arcache =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q54[14:11] ;

  // value method mem_master_ar_arprot
  assign mem_master_arprot =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q54[10:8] ;

  // value method mem_master_ar_arqos
  assign mem_master_arqos =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q54[7:4] ;

  // value method mem_master_ar_arregion
  assign mem_master_arregion =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q54[3:0] ;

  // value method mem_master_ar_arvalid
  assign mem_master_arvalid =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek ;

  // action method mem_master_ar_arready
  assign CAN_FIRE_mem_master_ar_arready = 1'd1 ;
  assign WILL_FIRE_mem_master_ar_arready = 1'd1 ;

  // action method mem_master_r_rflit
  assign CAN_FIRE_mem_master_r_rflit = 1'd1 ;
  assign WILL_FIRE_mem_master_r_rflit = mem_master_rvalid ;

  // value method mem_master_r_rready
  assign mem_master_rready = !cache_master_xactor_shim_rff_rv[71] ;

  // submodule cache_f_reset_reqs
  FIFO2 #(.width(32'd1), .guarded(32'd1)) cache_f_reset_reqs(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(cache_f_reset_reqs$D_IN),
							     .ENQ(cache_f_reset_reqs$ENQ),
							     .DEQ(cache_f_reset_reqs$DEQ),
							     .CLR(cache_f_reset_reqs$CLR),
							     .D_OUT(cache_f_reset_reqs$D_OUT),
							     .FULL_N(cache_f_reset_reqs$FULL_N),
							     .EMPTY_N(cache_f_reset_reqs$EMPTY_N));

  // submodule cache_f_reset_rsps
  FIFO2 #(.width(32'd1), .guarded(32'd1)) cache_f_reset_rsps(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(cache_f_reset_rsps$D_IN),
							     .ENQ(cache_f_reset_rsps$ENQ),
							     .DEQ(cache_f_reset_rsps$DEQ),
							     .CLR(cache_f_reset_rsps$CLR),
							     .D_OUT(cache_f_reset_rsps$D_OUT),
							     .FULL_N(cache_f_reset_rsps$FULL_N),
							     .EMPTY_N(cache_f_reset_rsps$EMPTY_N));

  // submodule cache_ram_state_and_ctag_cset
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd23),
	  .MEMSIZE(8'd128)) cache_ram_state_and_ctag_cset(.CLKA(CLK),
							  .CLKB(CLK),
							  .ADDRA(cache_ram_state_and_ctag_cset$ADDRA),
							  .ADDRB(cache_ram_state_and_ctag_cset$ADDRB),
							  .DIA(cache_ram_state_and_ctag_cset$DIA),
							  .DIB(cache_ram_state_and_ctag_cset$DIB),
							  .WEA(cache_ram_state_and_ctag_cset$WEA),
							  .WEB(cache_ram_state_and_ctag_cset$WEB),
							  .ENA(cache_ram_state_and_ctag_cset$ENA),
							  .ENB(cache_ram_state_and_ctag_cset$ENB),
							  .DOA(),
							  .DOB(cache_ram_state_and_ctag_cset$DOB));

  // submodule cache_ram_word64_set
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd9),
	  .DATA_WIDTH(32'd64),
	  .MEMSIZE(10'd512)) cache_ram_word64_set(.CLKA(CLK),
						  .CLKB(CLK),
						  .ADDRA(cache_ram_word64_set$ADDRA),
						  .ADDRB(cache_ram_word64_set$ADDRB),
						  .DIA(cache_ram_word64_set$DIA),
						  .DIB(cache_ram_word64_set$DIB),
						  .WEA(cache_ram_word64_set$WEA),
						  .WEB(cache_ram_word64_set$WEB),
						  .ENA(cache_ram_word64_set$ENA),
						  .ENB(cache_ram_word64_set$ENB),
						  .DOA(),
						  .DOB(cache_ram_word64_set$DOB));

  // submodule cache_soc_map
  mkSoC_Map cache_soc_map(.CLK(CLK),
			  .RST_N(RST_N),
			  .m_is_IO_addr_addr(cache_soc_map$m_is_IO_addr_addr),
			  .m_is_mem_addr_addr(cache_soc_map$m_is_mem_addr_addr),
			  .m_is_near_mem_IO_addr_addr(cache_soc_map$m_is_near_mem_IO_addr_addr),
			  .m_plic_addr_range(),
			  .m_near_mem_io_addr_range(),
			  .m_flash_mem_addr_range(),
			  .m_ethernet_0_addr_range(),
			  .m_dma_0_addr_range(),
			  .m_uart16550_0_addr_range(),
			  .m_gpio_0_addr_range(),
			  .m_boot_rom_addr_range(),
			  .m_ddr4_0_uncached_addr_range(),
			  .m_ddr4_0_cached_addr_range(),
			  .m_is_mem_addr(cache_soc_map$m_is_mem_addr),
			  .m_is_IO_addr(),
			  .m_is_near_mem_IO_addr(),
			  .m_pc_reset_value(),
			  .m_mtvec_reset_value(),
			  .m_nmivec_reset_value());

  // rule RL_cache_rl_reset
  assign CAN_FIRE_RL_cache_rl_reset =
	     (cache_rg_cset_in_cache != 7'd127 ||
	      cache_f_reset_reqs$EMPTY_N && cache_f_reset_rsps$FULL_N) &&
	     cache_rg_state == 4'd1 ;
  assign WILL_FIRE_RL_cache_rl_reset = CAN_FIRE_RL_cache_rl_reset ;

  // rule RL_cache_rl_shift_sb_to_load_delay
  assign CAN_FIRE_RL_cache_rl_shift_sb_to_load_delay = 1'd1 ;
  assign WILL_FIRE_RL_cache_rl_shift_sb_to_load_delay = 1'd1 ;

  // rule RL_cache_rl_probe_and_immed_rsp
  assign CAN_FIRE_RL_cache_rl_probe_and_immed_rsp =
	     (!cache_soc_map$m_is_mem_addr || cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010 ||
	      IF_cache_rg_op_8_EQ_1_6_OR_cache_rg_op_8_EQ_2__ETC___d126) &&
	     cache_rg_state_9_EQ_3_29_AND_NOT_cache_rg_op_8_ETC___d138 ;
  assign WILL_FIRE_RL_cache_rl_probe_and_immed_rsp =
	     CAN_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     !WILL_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_rereq
  assign CAN_FIRE_RL_cache_rl_rereq = cache_rg_state == 4'd10 ;
  assign WILL_FIRE_RL_cache_rl_rereq =
	     CAN_FIRE_RL_cache_rl_rereq &&
	     !WILL_FIRE_RL_cache_rl_start_reset &&
	     !EN_req ;

  // rule RL_cache_rl_ST_AMO_response
  assign CAN_FIRE_RL_cache_rl_ST_AMO_response = cache_rg_state == 4'd11 ;
  assign WILL_FIRE_RL_cache_rl_ST_AMO_response =
	     CAN_FIRE_RL_cache_rl_ST_AMO_response ;

  // rule RL_cache_rl_maintain_io_read_rsp
  assign CAN_FIRE_RL_cache_rl_maintain_io_read_rsp = cache_rg_state == 4'd14 ;
  assign WILL_FIRE_RL_cache_rl_maintain_io_read_rsp =
	     CAN_FIRE_RL_cache_rl_maintain_io_read_rsp ;

  // rule RL_cache_rl_io_write_req
  assign CAN_FIRE_RL_cache_rl_io_write_req =
	     !cache_master_xactor_clearing &&
	     !cache_master_xactor_shim_awff_rv[97] &&
	     !cache_master_xactor_shim_wff_rv[73] &&
	     cache_rg_state == 4'd12 &&
	     cache_rg_op == 2'd1 ;
  assign WILL_FIRE_RL_cache_rl_io_write_req =
	     CAN_FIRE_RL_cache_rl_io_write_req &&
	     !WILL_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_io_AMO_SC_req
  assign CAN_FIRE_RL_cache_rl_io_AMO_SC_req =
	     cache_rg_state == 4'd12 && cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00011 ;
  assign WILL_FIRE_RL_cache_rl_io_AMO_SC_req =
	     CAN_FIRE_RL_cache_rl_io_AMO_SC_req &&
	     !WILL_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_io_AMO_op_req
  assign CAN_FIRE_RL_cache_rl_io_AMO_op_req =
	     !cache_master_xactor_clearing &&
	     !cache_master_xactor_shim_arff_rv[97] &&
	     cache_rg_state == 4'd12 &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] != 5'b00010 &&
	     cache_rg_amo_funct7[6:2] != 5'b00011 ;
  assign WILL_FIRE_RL_cache_rl_io_AMO_op_req =
	     CAN_FIRE_RL_cache_rl_io_AMO_op_req &&
	     !WILL_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_drive_exception_rsp
  assign CAN_FIRE_RL_cache_rl_drive_exception_rsp = cache_rg_state == 4'd4 ;
  assign WILL_FIRE_RL_cache_rl_drive_exception_rsp = cache_rg_state == 4'd4 ;

  // rule RL_cache_master_xactor_ug_master_u_b_warnDoPut
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut =
	     cache_master_xactor_ug_master_u_b_putWire$whas &&
	     cache_master_xactor_shim_bff_rv[6] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut ;

  // rule RL_cache_master_xactor_ug_master_u_b_doPut
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut =
	     !cache_master_xactor_shim_bff_rv[6] &&
	     cache_master_xactor_ug_master_u_b_putWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut ;

  // rule RL_cache_master_xactor_ug_master_u_r_warnDoPut
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut =
	     cache_master_xactor_ug_master_u_r_putWire$whas &&
	     cache_master_xactor_shim_rff_rv[71] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut ;

  // rule RL_cache_master_xactor_ug_master_u_r_doPut
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut =
	     !cache_master_xactor_shim_rff_rv[71] &&
	     cache_master_xactor_ug_master_u_r_putWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut ;

  // rule RL_cache_rl_cache_refill_rsps_loop
  assign CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop =
	     !cache_master_xactor_clearing &&
	     cache_master_xactor_shim_rff_rv$port1__read[71] &&
	     cache_rg_state == 4'd9 ;
  assign WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop =
	     CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     !WILL_FIRE_RL_cache_rl_start_reset &&
	     !EN_req ;

  // rule RL_cache_rl_io_read_rsp
  assign CAN_FIRE_RL_cache_rl_io_read_rsp =
	     !cache_master_xactor_clearing &&
	     cache_master_xactor_shim_rff_rv$port1__read[71] &&
	     cache_rg_state == 4'd13 ;
  assign WILL_FIRE_RL_cache_rl_io_read_rsp =
	     CAN_FIRE_RL_cache_rl_io_read_rsp &&
	     !WILL_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_io_AMO_read_rsp
  assign CAN_FIRE_RL_cache_rl_io_AMO_read_rsp =
	     NOT_cache_master_xactor_clearing_0_5_AND_cache_ETC___d788 &&
	     cache_rg_state == 4'd15 ;
  assign WILL_FIRE_RL_cache_rl_io_AMO_read_rsp =
	     CAN_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     !WILL_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_start_cache_refill
  assign CAN_FIRE_RL_cache_rl_start_cache_refill =
	     !cache_master_xactor_clearing &&
	     !cache_master_xactor_shim_arff_rv[97] &&
	     cache_rg_state == 4'd8 &&
	     b__h22684 == 4'd0 ;
  assign WILL_FIRE_RL_cache_rl_start_cache_refill =
	     CAN_FIRE_RL_cache_rl_start_cache_refill &&
	     !WILL_FIRE_RL_cache_rl_start_reset &&
	     !EN_req ;

  // rule RL_cache_rl_io_read_req
  assign CAN_FIRE_RL_cache_rl_io_read_req =
	     !cache_master_xactor_clearing &&
	     !cache_master_xactor_shim_arff_rv[97] &&
	     cache_rg_state_9_EQ_12_49_AND_cache_rg_op_8_EQ_ETC___d651 ;
  assign WILL_FIRE_RL_cache_rl_io_read_req =
	     CAN_FIRE_RL_cache_rl_io_read_req &&
	     !WILL_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_discard_write_rsp
  assign CAN_FIRE_RL_cache_rl_discard_write_rsp =
	     !cache_master_xactor_clearing &&
	     cache_master_xactor_shim_bff_rv$port1__read[6] &&
	     b__h22684 != 4'd0 ;
  assign WILL_FIRE_RL_cache_rl_discard_write_rsp =
	     CAN_FIRE_RL_cache_rl_discard_write_rsp ;

  // rule RL_cache_rl_start_reset
  assign CAN_FIRE_RL_cache_rl_start_reset =
	     cache_f_reset_reqs$EMPTY_N &&
	     (cache_f_reset_reqs$D_OUT || !cache_master_xactor_clearing) &&
	     cache_rg_state != 4'd1 ;
  assign WILL_FIRE_RL_cache_rl_start_reset =
	     CAN_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_master_xactor_ug_master_u_aw_setPeek
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek =
	     cache_master_xactor_shim_awff_rv$port1__read[97] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek ;

  // rule RL_cache_master_xactor_ug_master_u_aw_warnDoDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop =
	     cache_master_xactor_ug_master_u_aw_dropWire$whas &&
	     !cache_master_xactor_shim_awff_rv$port1__read[97] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop ;

  // rule RL_cache_master_xactor_ug_master_u_aw_doDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop =
	     cache_master_xactor_shim_awff_rv$port1__read[97] &&
	     cache_master_xactor_ug_master_u_aw_dropWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop ;

  // rule RL_cache_master_xactor_ug_master_u_w_setPeek
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek =
	     cache_master_xactor_shim_wff_rv$port1__read[73] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek ;

  // rule RL_cache_master_xactor_ug_master_u_w_warnDoDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop =
	     cache_master_xactor_ug_master_u_w_dropWire$whas &&
	     !cache_master_xactor_shim_wff_rv$port1__read[73] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop ;

  // rule RL_cache_master_xactor_ug_master_u_w_doDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop =
	     cache_master_xactor_shim_wff_rv$port1__read[73] &&
	     cache_master_xactor_ug_master_u_w_dropWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop ;

  // rule RL_cache_master_xactor_ug_master_u_ar_setPeek
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek =
	     cache_master_xactor_shim_arff_rv$port1__read[97] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek ;

  // rule RL_cache_master_xactor_ug_master_u_ar_warnDoDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop =
	     cache_master_xactor_ug_master_u_ar_dropWire$whas &&
	     !cache_master_xactor_shim_arff_rv$port1__read[97] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop ;

  // rule RL_cache_master_xactor_ug_master_u_ar_doDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop =
	     cache_master_xactor_shim_arff_rv$port1__read[97] &&
	     cache_master_xactor_ug_master_u_ar_dropWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop ;

  // rule RL_cache_master_xactor_do_clear
  assign CAN_FIRE_RL_cache_master_xactor_do_clear =
	     cache_master_xactor_clearing ;
  assign WILL_FIRE_RL_cache_master_xactor_do_clear =
	     cache_master_xactor_clearing &&
	     !WILL_FIRE_RL_cache_rl_start_reset ;

  // inputs to muxes for submodule ports
  assign MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 ;
  assign MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_soc_map$m_is_mem_addr &&
	     NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d491 ;
  assign MUX_cache_dw_output_ld_val$wset_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 ;
  assign MUX_cache_dw_output_ld_val$wset_1__SEL_3 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op_8_EQ_0_9_OR_cache_rg_op_8_EQ_2_0_A_ETC___d181 ;
  assign MUX_cache_dw_output_ld_val$wset_1__SEL_4 =
	     WILL_FIRE_RL_cache_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_ST_AMO_response ;
  assign MUX_cache_master_xactor_clearing$write_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_start_reset && !cache_f_reset_reqs$D_OUT ;
  assign MUX_cache_master_xactor_shim_arff_rv$port0__write_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_io_AMO_op_req ||
	     WILL_FIRE_RL_cache_rl_io_read_req ;
  assign MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 =
	     EN_req &&
	     req_f3_BITS_1_TO_0_62_EQ_0b0_63_OR_req_f3_BITS_ETC___d992 ;
  assign MUX_cache_ram_word64_set$a_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 ;
  assign MUX_cache_ram_word64_set$b_put_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_word64_set_in_cache[1:0] != 2'd3 ;
  assign MUX_cache_rg_error_during_refill$write_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 ;
  assign MUX_cache_rg_exc_code$write_1__SEL_1 =
	     EN_req &&
	     NOT_req_f3_BITS_1_TO_0_62_EQ_0b0_63_64_AND_NOT_ETC___d983 ;
  assign MUX_cache_rg_exc_code$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 ;
  assign MUX_cache_rg_exc_code$write_1__SEL_3 =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 ;
  assign MUX_cache_rg_ld_val$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d343 ;
  assign MUX_cache_rg_lrsc_valid$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op_8_EQ_0_9_OR_cache_rg_op_8_EQ_2_0_A_ETC___d176 ;
  assign MUX_cache_rg_state$write_1__SEL_7 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_word64_set_in_cache[1:0] == 2'd3 ;
  assign MUX_cache_rg_state$write_1__SEL_12 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     (cache_rg_op_8_EQ_0_9_OR_cache_rg_op_8_EQ_2_0_A_ETC___d148 ||
	      NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d153 ||
	      !cache_soc_map$m_is_mem_addr) ;
  assign MUX_cache_rg_state$write_1__SEL_13 =
	     WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 7'd127 ;
  assign MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1 =
	     cache_ctr_wr_rsps_pending_crg + 4'd1 ;
  always@(cache_rg_f3 or
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d694 or
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d722 or
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_result6813__ETC__q33 or
	  cache_rg_addr or
	  cache_master_xactor_shim_rff_rv$port1__read or
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d710 or
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d730 or
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_result6878__ETC__q34)
  begin
    case (cache_rg_f3)
      3'b0:
	  MUX_cache_dw_output_ld_val$wset_1__VAL_1 =
	      IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d694;
      3'b001:
	  MUX_cache_dw_output_ld_val$wset_1__VAL_1 =
	      IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d722;
      3'b010:
	  MUX_cache_dw_output_ld_val$wset_1__VAL_1 =
	      CASE_cache_rg_addr_BITS_2_TO_0_0x0_result6813__ETC__q33;
      3'b011:
	  MUX_cache_dw_output_ld_val$wset_1__VAL_1 =
	      (cache_rg_addr[2:0] == 3'h0) ?
		cache_master_xactor_shim_rff_rv$port1__read[66:3] :
		64'd0;
      3'b100:
	  MUX_cache_dw_output_ld_val$wset_1__VAL_1 =
	      IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d710;
      3'b101:
	  MUX_cache_dw_output_ld_val$wset_1__VAL_1 =
	      IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d730;
      3'b110:
	  MUX_cache_dw_output_ld_val$wset_1__VAL_1 =
	      CASE_cache_rg_addr_BITS_2_TO_0_0x0_result6878__ETC__q34;
      3'd7: MUX_cache_dw_output_ld_val$wset_1__VAL_1 = 64'd0;
    endcase
  end
  always@(cache_rg_f3 or
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d818 or
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d846 or
	  w19163_BITS_31_TO_0__q50 or
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d865 or
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d834 or
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d854 or
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d864)
  begin
    case (cache_rg_f3)
      3'b0:
	  MUX_cache_dw_output_ld_val$wset_1__VAL_2 =
	      IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d818;
      3'b001:
	  MUX_cache_dw_output_ld_val$wset_1__VAL_2 =
	      IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d846;
      3'b010:
	  MUX_cache_dw_output_ld_val$wset_1__VAL_2 =
	      { {32{w19163_BITS_31_TO_0__q50[31]}},
		w19163_BITS_31_TO_0__q50 };
      3'b011:
	  MUX_cache_dw_output_ld_val$wset_1__VAL_2 =
	      IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d865;
      3'b100:
	  MUX_cache_dw_output_ld_val$wset_1__VAL_2 =
	      IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d834;
      3'b101:
	  MUX_cache_dw_output_ld_val$wset_1__VAL_2 =
	      IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d854;
      3'b110:
	  MUX_cache_dw_output_ld_val$wset_1__VAL_2 =
	      IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d864;
      3'd7: MUX_cache_dw_output_ld_val$wset_1__VAL_2 = 64'd0;
    endcase
  end
  assign MUX_cache_dw_output_ld_val$wset_1__VAL_3 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) ?
	       new_value__h7153 :
	       new_value__h17182 ;
  assign MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_1 =
	     { 5'd16,
	       mem_req_wr_addr_awaddr__h28943,
	       8'd0,
	       size_val__h28409,
	       18'd65536 } ;
  assign MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_2 =
	     { 5'd16, cline_fabric_addr__h22783, 29'd7143424 } ;
  assign MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_1 =
	     { 5'd16,
	       mem_req_wr_addr_awaddr__h28943,
	       8'd0,
	       _theResult___snd_snd_val__h29101,
	       18'd65536 } ;
  assign MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_2 =
	     { 5'd16,
	       mem_req_wr_addr_awaddr__h21877,
	       8'd0,
	       _theResult___snd_snd_val__h29101,
	       18'd65536 } ;
  assign MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_1 =
	     { 1'd1,
	       mem_req_wr_data_wdata__h29153,
	       mem_req_wr_data_wstrb__h29154,
	       1'd1 } ;
  assign MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_2 =
	     { 1'd1,
	       IF_cache_rg_op_8_EQ_1_6_OR_cache_rg_op_8_EQ_2__ETC___d511,
	       mem_req_wr_data_wstrb__h22088,
	       1'd1 } ;
  assign MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_3 =
	     { 1'd1,
	       mem_req_wr_data_wdata__h27642,
	       mem_req_wr_data_wstrb__h29154,
	       1'd1 } ;
  assign MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1 =
	     { 3'd4, cache_rg_pa[31:12] } ;
  assign MUX_cache_ram_word64_set$a_put_3__VAL_2 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       IF_cache_rg_f3_83_EQ_0b0_84_THEN_IF_cache_rg_a_ETC___d405 :
	       IF_cache_rg_f3_83_EQ_0b0_84_THEN_IF_cache_rg_a_ETC___d479 ;
  assign MUX_cache_ram_word64_set$b_put_2__VAL_2 =
	     cache_rg_word64_set_in_cache + 9'd1 ;
  assign MUX_cache_ram_word64_set$b_put_2__VAL_4 =
	     { cache_rg_addr[11:5], 2'd0 } ;
  assign MUX_cache_rg_cset_in_cache$write_1__VAL_1 =
	     cache_rg_cset_in_cache + 7'd1 ;
  assign MUX_cache_rg_exc_code$write_1__VAL_1 =
	     (req_op == 2'd0) ? 4'd4 : 4'd6 ;
  assign MUX_cache_rg_exc_code$write_1__VAL_4 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) ?
	       4'd5 :
	       4'd7 ;
  assign MUX_cache_rg_ld_val$write_1__VAL_2 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       x__h14834 :
	       IF_cache_rg_f3_83_EQ_0b10_89_THEN_SEXT_IF_cach_ETC___d347 ;
  assign MUX_cache_rg_lrsc_valid$write_1__VAL_2 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__16_BITS__ETC___d122 ;
  assign MUX_cache_rg_st_amo_val$write_1__VAL_2 =
	     (cache_rg_f3 == 3'b010) ?
	       new_st_val__h19393 :
	       _theResult_____2__h19389 ;
  assign MUX_cache_rg_state$write_1__VAL_1 =
	     NOT_req_f3_BITS_1_TO_0_62_EQ_0b0_63_64_AND_NOT_ETC___d983 ?
	       4'd4 :
	       4'd3 ;
  assign MUX_cache_rg_state$write_1__VAL_5 =
	     (cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0) ?
	       4'd14 :
	       4'd4 ;
  assign MUX_cache_rg_state$write_1__VAL_7 =
	     (cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 ||
	      cache_rg_error_during_refill) ?
	       4'd4 :
	       4'd10 ;
  assign MUX_cache_rg_state$write_1__VAL_12 =
	     cache_soc_map$m_is_mem_addr ?
	       IF_cache_rg_op_8_EQ_0_9_OR_cache_rg_op_8_EQ_2__ETC___d158 :
	       4'd12 ;

  // inlined wires
  assign cache_master_xactor_ug_master_u_b_putWire$wget =
	     { mem_master_bid, mem_master_bresp } ;
  assign cache_master_xactor_ug_master_u_b_putWire$whas =
	     mem_master_bvalid && !cache_master_xactor_shim_bff_rv[6] ;
  assign cache_master_xactor_ug_master_u_r_putWire$wget =
	     { mem_master_rid,
	       mem_master_rdata,
	       mem_master_rresp,
	       mem_master_rlast } ;
  assign cache_master_xactor_ug_master_u_r_putWire$whas =
	     mem_master_rvalid && !cache_master_xactor_shim_rff_rv[71] ;
  assign cache_dw_valid$whas =
	     (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp ||
	      WILL_FIRE_RL_cache_rl_io_read_rsp) &&
	     cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op_8_EQ_0_9_OR_cache_rg_op_8_EQ_2_0_A_ETC___d181 ||
	     WILL_FIRE_RL_cache_rl_drive_exception_rsp ||
	     WILL_FIRE_RL_cache_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_ST_AMO_response ;
  assign cache_master_xactor_ug_master_u_aw_dropWire$whas =
	     cache_master_xactor_shim_awff_rv$port1__read[97] &&
	     mem_master_awready ;
  assign cache_master_xactor_ug_master_u_w_dropWire$whas =
	     cache_master_xactor_shim_wff_rv$port1__read[73] &&
	     mem_master_wready ;
  assign cache_master_xactor_ug_master_u_ar_dropWire$whas =
	     cache_master_xactor_shim_arff_rv$port1__read[97] &&
	     mem_master_arready ;
  assign cache_master_xactor_shim_awff_rv$EN_port0__write =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_soc_map$m_is_mem_addr &&
	     NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d491 ||
	     WILL_FIRE_RL_cache_rl_io_write_req ;
  always@(MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_1 or
	  MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2 or
	  MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_2 or
	  WILL_FIRE_RL_cache_rl_io_write_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  cache_master_xactor_shim_awff_rv$port0__write_1 =
	      MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_1;
      MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2:
	  cache_master_xactor_shim_awff_rv$port0__write_1 =
	      MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_2;
      WILL_FIRE_RL_cache_rl_io_write_req:
	  cache_master_xactor_shim_awff_rv$port0__write_1 =
	      MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_1;
      default: cache_master_xactor_shim_awff_rv$port0__write_1 =
		   98'h2AAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_master_xactor_shim_awff_rv$port1__read =
	     cache_master_xactor_shim_awff_rv$EN_port0__write ?
	       cache_master_xactor_shim_awff_rv$port0__write_1 :
	       cache_master_xactor_shim_awff_rv ;
  assign cache_master_xactor_shim_awff_rv$port2__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop ?
	       98'h0AAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_awff_rv$port1__read ;
  assign cache_master_xactor_shim_awff_rv$port3__read =
	     WILL_FIRE_RL_cache_master_xactor_do_clear ?
	       98'h0AAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_awff_rv$port2__read ;
  assign cache_master_xactor_shim_wff_rv$EN_port0__write =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_soc_map$m_is_mem_addr &&
	     NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d491 ||
	     WILL_FIRE_RL_cache_rl_io_write_req ;
  always@(MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_1 or
	  MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2 or
	  MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_2 or
	  WILL_FIRE_RL_cache_rl_io_write_req or
	  MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  cache_master_xactor_shim_wff_rv$port0__write_1 =
	      MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_1;
      MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2:
	  cache_master_xactor_shim_wff_rv$port0__write_1 =
	      MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_2;
      WILL_FIRE_RL_cache_rl_io_write_req:
	  cache_master_xactor_shim_wff_rv$port0__write_1 =
	      MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_3;
      default: cache_master_xactor_shim_wff_rv$port0__write_1 =
		   74'h2AAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_master_xactor_shim_wff_rv$port1__read =
	     cache_master_xactor_shim_wff_rv$EN_port0__write ?
	       cache_master_xactor_shim_wff_rv$port0__write_1 :
	       cache_master_xactor_shim_wff_rv ;
  assign cache_master_xactor_shim_wff_rv$port2__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop ?
	       74'h0AAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_wff_rv$port1__read ;
  assign cache_master_xactor_shim_wff_rv$port3__read =
	     WILL_FIRE_RL_cache_master_xactor_do_clear ?
	       74'h0AAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_wff_rv$port2__read ;
  assign cache_master_xactor_shim_bff_rv$port0__write_1 =
	     { 1'd1, cache_master_xactor_ug_master_u_b_putWire$wget } ;
  assign cache_master_xactor_shim_bff_rv$port1__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut ?
	       cache_master_xactor_shim_bff_rv$port0__write_1 :
	       cache_master_xactor_shim_bff_rv ;
  assign cache_master_xactor_shim_bff_rv$port2__read =
	     CAN_FIRE_RL_cache_rl_discard_write_rsp ?
	       7'd42 :
	       cache_master_xactor_shim_bff_rv$port1__read ;
  assign cache_master_xactor_shim_bff_rv$port3__read =
	     WILL_FIRE_RL_cache_master_xactor_do_clear ?
	       7'd42 :
	       cache_master_xactor_shim_bff_rv$port2__read ;
  assign cache_master_xactor_shim_arff_rv$EN_port0__write =
	     WILL_FIRE_RL_cache_rl_io_AMO_op_req ||
	     WILL_FIRE_RL_cache_rl_io_read_req ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;
  assign cache_master_xactor_shim_arff_rv$port0__write_1 =
	     MUX_cache_master_xactor_shim_arff_rv$port0__write_1__SEL_1 ?
	       MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_1 :
	       MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_2 ;
  assign cache_master_xactor_shim_arff_rv$port1__read =
	     cache_master_xactor_shim_arff_rv$EN_port0__write ?
	       cache_master_xactor_shim_arff_rv$port0__write_1 :
	       cache_master_xactor_shim_arff_rv ;
  assign cache_master_xactor_shim_arff_rv$port2__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop ?
	       98'h0AAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_arff_rv$port1__read ;
  assign cache_master_xactor_shim_arff_rv$port3__read =
	     WILL_FIRE_RL_cache_master_xactor_do_clear ?
	       98'h0AAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_arff_rv$port2__read ;
  assign cache_master_xactor_shim_rff_rv$port0__write_1 =
	     { 1'd1, cache_master_xactor_ug_master_u_r_putWire$wget } ;
  assign cache_master_xactor_shim_rff_rv$port1__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut ?
	       cache_master_xactor_shim_rff_rv$port0__write_1 :
	       cache_master_xactor_shim_rff_rv ;
  assign cache_master_xactor_shim_rff_rv$EN_port1__write =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop ;
  assign cache_master_xactor_shim_rff_rv$port2__read =
	     cache_master_xactor_shim_rff_rv$EN_port1__write ?
	       72'h2AAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_rff_rv$port1__read ;
  assign cache_master_xactor_shim_rff_rv$port3__read =
	     WILL_FIRE_RL_cache_master_xactor_do_clear ?
	       72'h2AAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_rff_rv$port2__read ;
  assign cache_ctr_wr_rsps_pending_crg$EN_port0__write =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_soc_map$m_is_mem_addr &&
	     NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d491 ||
	     WILL_FIRE_RL_cache_rl_io_write_req ;
  always@(MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1 or
	  MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2 or
	  WILL_FIRE_RL_cache_rl_io_write_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  cache_ctr_wr_rsps_pending_crg$port0__write_1 =
	      MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1;
      MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2:
	  cache_ctr_wr_rsps_pending_crg$port0__write_1 =
	      MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1;
      WILL_FIRE_RL_cache_rl_io_write_req:
	  cache_ctr_wr_rsps_pending_crg$port0__write_1 =
	      MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1;
      default: cache_ctr_wr_rsps_pending_crg$port0__write_1 =
		   4'b1010 /* unspecified value */ ;
    endcase
  end
  assign cache_ctr_wr_rsps_pending_crg$port1__read =
	     cache_ctr_wr_rsps_pending_crg$EN_port0__write ?
	       cache_ctr_wr_rsps_pending_crg$port0__write_1 :
	       cache_ctr_wr_rsps_pending_crg ;
  assign cache_ctr_wr_rsps_pending_crg$port1__write_1 = b__h22684 - 4'd1 ;
  assign cache_ctr_wr_rsps_pending_crg$port2__read =
	     CAN_FIRE_RL_cache_rl_discard_write_rsp ?
	       cache_ctr_wr_rsps_pending_crg$port1__write_1 :
	       cache_ctr_wr_rsps_pending_crg$port1__read ;
  assign cache_ctr_wr_rsps_pending_crg$port3__read =
	     MUX_cache_master_xactor_clearing$write_1__SEL_1 ?
	       4'd0 :
	       cache_ctr_wr_rsps_pending_crg$port2__read ;
  assign cache_crg_sb_to_load_delay$port0__write_1 =
	     { 1'd0, cache_crg_sb_to_load_delay[10:1] } ;
  assign cache_crg_sb_to_load_delay$EN_port1__write =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     cache_rg_op_8_EQ_1_6_OR_cache_rg_op_8_EQ_2_0_A_ETC___d486 ;
  assign cache_crg_sb_to_load_delay$port2__read =
	     cache_crg_sb_to_load_delay$EN_port1__write ?
	       11'd2047 :
	       cache_crg_sb_to_load_delay$port0__write_1 ;

  // register cache_cfg_verbosity
  assign cache_cfg_verbosity$D_IN = set_verbosity_verbosity ;
  assign cache_cfg_verbosity$EN = EN_set_verbosity ;

  // register cache_crg_sb_to_load_delay
  assign cache_crg_sb_to_load_delay$D_IN =
	     cache_crg_sb_to_load_delay$port2__read ;
  assign cache_crg_sb_to_load_delay$EN = 1'b1 ;

  // register cache_ctr_wr_rsps_pending_crg
  assign cache_ctr_wr_rsps_pending_crg$D_IN =
	     cache_ctr_wr_rsps_pending_crg$port3__read ;
  assign cache_ctr_wr_rsps_pending_crg$EN = 1'b1 ;

  // register cache_master_xactor_clearing
  assign cache_master_xactor_clearing$D_IN =
	     MUX_cache_master_xactor_clearing$write_1__SEL_1 ;
  assign cache_master_xactor_clearing$EN =
	     WILL_FIRE_RL_cache_rl_start_reset && !cache_f_reset_reqs$D_OUT ||
	     WILL_FIRE_RL_cache_master_xactor_do_clear ;

  // register cache_master_xactor_shim_arff_rv
  assign cache_master_xactor_shim_arff_rv$D_IN =
	     cache_master_xactor_shim_arff_rv$port3__read ;
  assign cache_master_xactor_shim_arff_rv$EN = 1'b1 ;

  // register cache_master_xactor_shim_awff_rv
  assign cache_master_xactor_shim_awff_rv$D_IN =
	     cache_master_xactor_shim_awff_rv$port3__read ;
  assign cache_master_xactor_shim_awff_rv$EN = 1'b1 ;

  // register cache_master_xactor_shim_bff_rv
  assign cache_master_xactor_shim_bff_rv$D_IN =
	     cache_master_xactor_shim_bff_rv$port3__read ;
  assign cache_master_xactor_shim_bff_rv$EN = 1'b1 ;

  // register cache_master_xactor_shim_rff_rv
  assign cache_master_xactor_shim_rff_rv$D_IN =
	     cache_master_xactor_shim_rff_rv$port3__read ;
  assign cache_master_xactor_shim_rff_rv$EN = 1'b1 ;

  // register cache_master_xactor_shim_wff_rv
  assign cache_master_xactor_shim_wff_rv$D_IN =
	     cache_master_xactor_shim_wff_rv$port3__read ;
  assign cache_master_xactor_shim_wff_rv$EN = 1'b1 ;

  // register cache_rg_addr
  assign cache_rg_addr$D_IN = req_addr ;
  assign cache_rg_addr$EN = EN_req ;

  // register cache_rg_amo_funct7
  assign cache_rg_amo_funct7$D_IN = req_amo_funct7 ;
  assign cache_rg_amo_funct7$EN = EN_req ;

  // register cache_rg_cset_in_cache
  assign cache_rg_cset_in_cache$D_IN =
	     WILL_FIRE_RL_cache_rl_reset ?
	       MUX_cache_rg_cset_in_cache$write_1__VAL_1 :
	       7'd0 ;
  assign cache_rg_cset_in_cache$EN =
	     WILL_FIRE_RL_cache_rl_reset ||
	     WILL_FIRE_RL_cache_rl_start_reset ;

  // register cache_rg_error_during_refill
  assign cache_rg_error_during_refill$D_IN =
	     MUX_cache_rg_error_during_refill$write_1__SEL_1 ;
  assign cache_rg_error_during_refill$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // register cache_rg_exc_code
  always@(MUX_cache_rg_exc_code$write_1__SEL_1 or
	  MUX_cache_rg_exc_code$write_1__VAL_1 or
	  MUX_cache_rg_exc_code$write_1__SEL_2 or
	  MUX_cache_rg_exc_code$write_1__SEL_3 or
	  MUX_cache_rg_error_during_refill$write_1__SEL_1 or
	  MUX_cache_rg_exc_code$write_1__VAL_4)
  case (1'b1)
    MUX_cache_rg_exc_code$write_1__SEL_1:
	cache_rg_exc_code$D_IN = MUX_cache_rg_exc_code$write_1__VAL_1;
    MUX_cache_rg_exc_code$write_1__SEL_2: cache_rg_exc_code$D_IN = 4'd7;
    MUX_cache_rg_exc_code$write_1__SEL_3: cache_rg_exc_code$D_IN = 4'd5;
    MUX_cache_rg_error_during_refill$write_1__SEL_1:
	cache_rg_exc_code$D_IN = MUX_cache_rg_exc_code$write_1__VAL_4;
    default: cache_rg_exc_code$D_IN = 4'b1010 /* unspecified value */ ;
  endcase
  assign cache_rg_exc_code$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 ||
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 ||
	     EN_req &&
	     NOT_req_f3_BITS_1_TO_0_62_EQ_0b0_63_64_AND_NOT_ETC___d983 ;

  // register cache_rg_f3
  assign cache_rg_f3$D_IN = req_f3 ;
  assign cache_rg_f3$EN = EN_req ;

  // register cache_rg_ld_val
  always@(MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_2 or
	  MUX_cache_rg_ld_val$write_1__SEL_2 or
	  MUX_cache_rg_ld_val$write_1__VAL_2 or
	  WILL_FIRE_RL_cache_rl_io_read_rsp or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_1 or
	  WILL_FIRE_RL_cache_rl_io_AMO_SC_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  cache_rg_ld_val$D_IN = MUX_cache_dw_output_ld_val$wset_1__VAL_2;
      MUX_cache_rg_ld_val$write_1__SEL_2:
	  cache_rg_ld_val$D_IN = MUX_cache_rg_ld_val$write_1__VAL_2;
      WILL_FIRE_RL_cache_rl_io_read_rsp:
	  cache_rg_ld_val$D_IN = MUX_cache_dw_output_ld_val$wset_1__VAL_1;
      WILL_FIRE_RL_cache_rl_io_AMO_SC_req: cache_rg_ld_val$D_IN = 64'd1;
      default: cache_rg_ld_val$D_IN =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_rg_ld_val$EN =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d343 ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_io_AMO_SC_req ;

  // register cache_rg_lower_word32
  assign cache_rg_lower_word32$D_IN = 32'h0 ;
  assign cache_rg_lower_word32$EN = 1'b0 ;

  // register cache_rg_lower_word32_full
  assign cache_rg_lower_word32_full$D_IN = 1'd0 ;
  assign cache_rg_lower_word32_full$EN =
	     WILL_FIRE_RL_cache_rl_start_cache_refill ||
	     WILL_FIRE_RL_cache_rl_start_reset ;

  // register cache_rg_lrsc_pa
  assign cache_rg_lrsc_pa$D_IN = cache_rg_addr ;
  assign cache_rg_lrsc_pa$EN =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00010 &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__16_BITS__ETC___d122 ;

  // register cache_rg_lrsc_valid
  assign cache_rg_lrsc_valid$D_IN =
	     MUX_cache_rg_lrsc_valid$write_1__SEL_2 &&
	     MUX_cache_rg_lrsc_valid$write_1__VAL_2 ;
  assign cache_rg_lrsc_valid$EN =
	     WILL_FIRE_RL_cache_rl_io_read_req && cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00010 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op_8_EQ_0_9_OR_cache_rg_op_8_EQ_2_0_A_ETC___d176 ||
	     WILL_FIRE_RL_cache_rl_start_reset ;

  // register cache_rg_op
  assign cache_rg_op$D_IN = req_op ;
  assign cache_rg_op$EN = EN_req ;

  // register cache_rg_pa
  assign cache_rg_pa$D_IN = EN_req ? req_addr : cache_rg_addr ;
  assign cache_rg_pa$EN =
	     EN_req || WILL_FIRE_RL_cache_rl_probe_and_immed_rsp ;

  // register cache_rg_pte_pa
  assign cache_rg_pte_pa$D_IN = 32'h0 ;
  assign cache_rg_pte_pa$EN = 1'b0 ;

  // register cache_rg_st_amo_val
  assign cache_rg_st_amo_val$D_IN =
	     EN_req ? req_st_value : MUX_cache_rg_st_amo_val$write_1__VAL_2 ;
  assign cache_rg_st_amo_val$EN =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d579 ||
	     EN_req ;

  // register cache_rg_state
  always@(EN_req or
	  MUX_cache_rg_state$write_1__VAL_1 or
	  WILL_FIRE_RL_cache_rl_start_reset or
	  WILL_FIRE_RL_cache_rl_io_read_req or
	  WILL_FIRE_RL_cache_rl_start_cache_refill or
	  WILL_FIRE_RL_cache_rl_io_AMO_read_rsp or
	  MUX_cache_rg_state$write_1__VAL_5 or
	  WILL_FIRE_RL_cache_rl_io_read_rsp or
	  MUX_cache_rg_state$write_1__SEL_7 or
	  MUX_cache_rg_state$write_1__VAL_7 or
	  WILL_FIRE_RL_cache_rl_io_AMO_op_req or
	  WILL_FIRE_RL_cache_rl_io_AMO_SC_req or
	  WILL_FIRE_RL_cache_rl_io_write_req or
	  WILL_FIRE_RL_cache_rl_rereq or
	  MUX_cache_rg_state$write_1__SEL_12 or
	  MUX_cache_rg_state$write_1__VAL_12 or
	  MUX_cache_rg_state$write_1__SEL_13)
  case (1'b1)
    EN_req: cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_1;
    WILL_FIRE_RL_cache_rl_start_reset: cache_rg_state$D_IN = 4'd1;
    WILL_FIRE_RL_cache_rl_io_read_req: cache_rg_state$D_IN = 4'd13;
    WILL_FIRE_RL_cache_rl_start_cache_refill: cache_rg_state$D_IN = 4'd9;
    WILL_FIRE_RL_cache_rl_io_AMO_read_rsp:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_5;
    WILL_FIRE_RL_cache_rl_io_read_rsp:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_5;
    MUX_cache_rg_state$write_1__SEL_7:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_7;
    WILL_FIRE_RL_cache_rl_io_AMO_op_req: cache_rg_state$D_IN = 4'd15;
    WILL_FIRE_RL_cache_rl_io_AMO_SC_req || WILL_FIRE_RL_cache_rl_io_write_req:
	cache_rg_state$D_IN = 4'd11;
    WILL_FIRE_RL_cache_rl_rereq: cache_rg_state$D_IN = 4'd3;
    MUX_cache_rg_state$write_1__SEL_12:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_12;
    MUX_cache_rg_state$write_1__SEL_13: cache_rg_state$D_IN = 4'd2;
    default: cache_rg_state$D_IN = 4'b1010 /* unspecified value */ ;
  endcase
  assign cache_rg_state$EN =
	     WILL_FIRE_RL_cache_rl_reset &&
	     cache_rg_cset_in_cache == 7'd127 ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_word64_set_in_cache[1:0] == 2'd3 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     (cache_rg_op_8_EQ_0_9_OR_cache_rg_op_8_EQ_2_0_A_ETC___d148 ||
	      NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d153 ||
	      !cache_soc_map$m_is_mem_addr) ||
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp ||
	     EN_req ||
	     WILL_FIRE_RL_cache_rl_start_reset ||
	     WILL_FIRE_RL_cache_rl_rereq ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ||
	     WILL_FIRE_RL_cache_rl_io_AMO_SC_req ||
	     WILL_FIRE_RL_cache_rl_io_write_req ||
	     WILL_FIRE_RL_cache_rl_io_read_req ||
	     WILL_FIRE_RL_cache_rl_io_AMO_op_req ;

  // register cache_rg_word64_set_in_cache
  assign cache_rg_word64_set_in_cache$D_IN =
	     MUX_cache_ram_word64_set$b_put_1__SEL_2 ?
	       MUX_cache_ram_word64_set$b_put_2__VAL_2 :
	       MUX_cache_ram_word64_set$b_put_2__VAL_4 ;
  assign cache_rg_word64_set_in_cache$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_word64_set_in_cache[1:0] != 2'd3 ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // submodule cache_f_reset_reqs
  assign cache_f_reset_reqs$D_IN = !EN_server_reset_request_put ;
  assign cache_f_reset_reqs$ENQ =
	     EN_server_reset_request_put || EN_server_flush_request_put ;
  assign cache_f_reset_reqs$DEQ = MUX_cache_rg_state$write_1__SEL_13 ;
  assign cache_f_reset_reqs$CLR = 1'b0 ;

  // submodule cache_f_reset_rsps
  assign cache_f_reset_rsps$D_IN = cache_f_reset_reqs$D_OUT ;
  assign cache_f_reset_rsps$ENQ = MUX_cache_rg_state$write_1__SEL_13 ;
  assign cache_f_reset_rsps$DEQ =
	     EN_server_flush_response_get || EN_server_reset_response_get ;
  assign cache_f_reset_rsps$CLR = 1'b0 ;

  // submodule cache_ram_state_and_ctag_cset
  assign cache_ram_state_and_ctag_cset$ADDRA =
	     WILL_FIRE_RL_cache_rl_start_cache_refill ?
	       cache_rg_addr[11:5] :
	       cache_rg_cset_in_cache ;
  assign cache_ram_state_and_ctag_cset$ADDRB =
	     MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       req_addr[11:5] :
	       cache_rg_addr[11:5] ;
  assign cache_ram_state_and_ctag_cset$DIA =
	     WILL_FIRE_RL_cache_rl_start_cache_refill ?
	       MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1 :
	       23'd2796202 ;
  assign cache_ram_state_and_ctag_cset$DIB =
	     MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       23'b01010101010101010101010 /* unspecified value */  :
	       23'b01010101010101010101010 /* unspecified value */  ;
  assign cache_ram_state_and_ctag_cset$WEA = 1'd1 ;
  assign cache_ram_state_and_ctag_cset$WEB = 1'd0 ;
  assign cache_ram_state_and_ctag_cset$ENA =
	     WILL_FIRE_RL_cache_rl_start_cache_refill ||
	     WILL_FIRE_RL_cache_rl_reset ;
  assign cache_ram_state_and_ctag_cset$ENB =
	     EN_req &&
	     req_f3_BITS_1_TO_0_62_EQ_0b0_63_OR_req_f3_BITS_ETC___d992 ||
	     WILL_FIRE_RL_cache_rl_rereq ;

  // submodule cache_ram_word64_set
  assign cache_ram_word64_set$ADDRA =
	     MUX_cache_ram_word64_set$a_put_1__SEL_1 ?
	       cache_rg_word64_set_in_cache :
	       cache_rg_addr[11:3] ;
  always@(MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  req_addr or
	  MUX_cache_ram_word64_set$b_put_1__SEL_2 or
	  MUX_cache_ram_word64_set$b_put_2__VAL_2 or
	  WILL_FIRE_RL_cache_rl_rereq or
	  cache_rg_addr or
	  WILL_FIRE_RL_cache_rl_start_cache_refill or
	  MUX_cache_ram_word64_set$b_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  cache_ram_word64_set$ADDRB = req_addr[11:3];
      MUX_cache_ram_word64_set$b_put_1__SEL_2:
	  cache_ram_word64_set$ADDRB =
	      MUX_cache_ram_word64_set$b_put_2__VAL_2;
      WILL_FIRE_RL_cache_rl_rereq:
	  cache_ram_word64_set$ADDRB = cache_rg_addr[11:3];
      WILL_FIRE_RL_cache_rl_start_cache_refill:
	  cache_ram_word64_set$ADDRB =
	      MUX_cache_ram_word64_set$b_put_2__VAL_4;
      default: cache_ram_word64_set$ADDRB =
		   9'b010101010 /* unspecified value */ ;
    endcase
  end
  assign cache_ram_word64_set$DIA =
	     MUX_cache_ram_word64_set$a_put_1__SEL_1 ?
	       cache_master_xactor_shim_rff_rv$port1__read[66:3] :
	       MUX_cache_ram_word64_set$a_put_3__VAL_2 ;
  always@(MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  MUX_cache_ram_word64_set$b_put_1__SEL_2 or
	  WILL_FIRE_RL_cache_rl_rereq or
	  WILL_FIRE_RL_cache_rl_start_cache_refill)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  cache_ram_word64_set$DIB =
	      64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      MUX_cache_ram_word64_set$b_put_1__SEL_2:
	  cache_ram_word64_set$DIB =
	      64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_cache_rl_rereq:
	  cache_ram_word64_set$DIB =
	      64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_cache_rl_start_cache_refill:
	  cache_ram_word64_set$DIB =
	      64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      default: cache_ram_word64_set$DIB =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_ram_word64_set$WEA = 1'd1 ;
  assign cache_ram_word64_set$WEB = 1'd0 ;
  assign cache_ram_word64_set$ENA =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d354 ;
  assign cache_ram_word64_set$ENB =
	     EN_req &&
	     req_f3_BITS_1_TO_0_62_EQ_0b0_63_OR_req_f3_BITS_ETC___d992 ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_word64_set_in_cache[1:0] != 2'd3 ||
	     WILL_FIRE_RL_cache_rl_rereq ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // submodule cache_soc_map
  assign cache_soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign cache_soc_map$m_is_mem_addr_addr = { 32'd0, cache_rg_addr } ;
  assign cache_soc_map$m_is_near_mem_IO_addr_addr = 64'h0 ;

  // remaining internal signals
  assign IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d302 =
	     (cache_rg_addr[2:0] == 3'h0) ? word64__h6974 : 64'd0 ;
  assign IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d316 =
	     (cache_rg_addr[2:0] == 3'h0) ? 64'd1 : 64'd0 ;
  assign IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d865 =
	     (cache_rg_addr[2:0] == 3'h0) ? ld_val__h26042 : 64'd0 ;
  assign IF_cache_rg_f3_83_EQ_0b10_89_THEN_SEXT_cache_r_ETC___d411 =
	     (cache_rg_f3 == 3'b010) ?
	       { {32{cache_rg_st_amo_val_BITS_31_TO_0__q31[31]}},
		 cache_rg_st_amo_val_BITS_31_TO_0__q31 } :
	       cache_rg_st_amo_val ;
  assign IF_cache_rg_op_8_EQ_0_9_OR_cache_rg_op_8_EQ_2__ETC___d158 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) ?
	       4'd8 :
	       IF_cache_rg_op_8_EQ_1_6_OR_cache_rg_op_8_EQ_2__ETC___d157 ;
  assign IF_cache_rg_op_8_EQ_1_6_OR_cache_rg_op_8_EQ_2__ETC___d126 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       cache_rg_op_8_EQ_2_0_AND_cache_rg_amo_funct7_1_ETC___d115 :
	       NOT_cache_ram_state_and_ctag_cset_b_read__16_B_ETC___d125 ;
  assign IF_cache_rg_op_8_EQ_1_6_OR_cache_rg_op_8_EQ_2__ETC___d157 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       4'd11 :
	       ((!cache_ram_state_and_ctag_cset$DOB[22] ||
		 !cache_ram_state_and_ctag_cset_b_read__16_BITS__ETC___d122) ?
		  4'd8 :
		  4'd11) ;
  assign IF_cache_rg_op_8_EQ_1_6_OR_cache_rg_op_8_EQ_2__ETC___d511 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       mem_req_wr_data_wdata__h18594 :
	       mem_req_wr_data_wdata__h22087 ;
  assign NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 =
	     cache_cfg_verbosity > 4'd1 ;
  assign NOT_cache_cfg_verbosity_read__5_ULE_2_05___d606 =
	     cache_cfg_verbosity > 4'd2 ;
  assign NOT_cache_master_xactor_clearing_0_5_AND_cache_ETC___d788 =
	     !cache_master_xactor_clearing &&
	     cache_master_xactor_shim_rff_rv$port1__read[71] &&
	     (cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 ||
	      !cache_master_xactor_shim_awff_rv[97] &&
	      !cache_master_xactor_shim_wff_rv[73]) ;
  assign NOT_cache_ram_state_and_ctag_cset_b_read__16_B_ETC___d125 =
	     !cache_ram_state_and_ctag_cset$DOB[22] ||
	     !cache_ram_state_and_ctag_cset_b_read__16_BITS__ETC___d122 ||
	     !cache_master_xactor_clearing &&
	     !cache_master_xactor_shim_awff_rv[97] &&
	     !cache_master_xactor_shim_wff_rv[73] ;
  assign NOT_cache_ram_state_and_ctag_cset_b_read__16_B_ETC___d164 =
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__16_BITS__ETC___d122) &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00010 &&
	     cache_rg_addr_4_EQ_cache_rg_lrsc_pa_02___d162 ;
  assign NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d153 =
	     cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_02_EQ_cache_rg_addr_4___d103) ;
  assign NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d491 =
	     cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     (cache_rg_op_8_EQ_1_6_OR_cache_rg_op_8_EQ_2_0_A_ETC___d489 ||
	      NOT_cache_rg_op_8_EQ_1_6_70_AND_NOT_cache_rg_o_ETC___d351) ;
  assign NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d539 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_cache_rg_op_8_EQ_2_0_31_OR_NOT_cache_rg_am_ETC___d537 ;
  assign NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d547 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_cache_rg_op_8_EQ_2_0_31_OR_NOT_cache_rg_am_ETC___d545 ;
  assign NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d552 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_cache_rg_op_8_EQ_2_0_31_OR_NOT_cache_rg_am_ETC___d550 ;
  assign NOT_cache_rg_op_8_EQ_1_6_70_AND_NOT_cache_rg_o_ETC___d173 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__16_BITS__ETC___d122 &&
	     cache_rg_addr_4_EQ_cache_rg_lrsc_pa_02___d162 ;
  assign NOT_cache_rg_op_8_EQ_1_6_70_AND_NOT_cache_rg_o_ETC___d351 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__16_BITS__ETC___d122 ;
  assign NOT_cache_rg_op_8_EQ_1_6_70_AND_NOT_cache_rg_o_ETC___d485 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__16_BITS__ETC___d122 &&
	     (cache_rg_f3 == 3'b0 || cache_rg_f3 == 3'b001) ;
  assign NOT_cache_rg_op_8_EQ_1_6_70_AND_NOT_cache_rg_o_ETC___d562 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__16_BITS__ETC___d122) &&
	     NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 ;
  assign NOT_cache_rg_op_8_EQ_1_6_70_AND_NOT_cache_rg_o_ETC___d565 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__16_BITS__ETC___d122 &&
	     NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 ;
  assign NOT_cache_rg_op_8_EQ_1_6_70_AND_NOT_cache_rg_o_ETC___d569 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__16_BITS__ETC___d122 &&
	     cache_ctr_wr_rsps_pending_crg == 4'd15 ;
  assign NOT_cache_rg_op_8_EQ_1_6_70_AND_NOT_cache_rg_o_ETC___d575 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__16_BITS__ETC___d122 &&
	     cache_rg_addr_4_EQ_cache_rg_lrsc_pa_02___d162 &&
	     NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 ;
  assign NOT_cache_rg_op_8_EQ_2_0_31_OR_NOT_cache_rg_am_ETC___d349 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_02_EQ_cache_rg_addr_4___d103) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__16_BITS__ETC___d122 ;
  assign NOT_cache_rg_op_8_EQ_2_0_31_OR_NOT_cache_rg_am_ETC___d483 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_02_EQ_cache_rg_addr_4___d103) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__16_BITS__ETC___d122 &&
	     (cache_rg_f3 == 3'b0 || cache_rg_f3 == 3'b001) ;
  assign NOT_cache_rg_op_8_EQ_2_0_31_OR_NOT_cache_rg_am_ETC___d537 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_02_EQ_cache_rg_addr_4___d103) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__16_BITS__ETC___d122 &&
	     NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 ;
  assign NOT_cache_rg_op_8_EQ_2_0_31_OR_NOT_cache_rg_am_ETC___d541 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_02_EQ_cache_rg_addr_4___d103) &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__16_BITS__ETC___d122) &&
	     NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 ;
  assign NOT_cache_rg_op_8_EQ_2_0_31_OR_NOT_cache_rg_am_ETC___d545 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_02_EQ_cache_rg_addr_4___d103) &&
	     NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 ;
  assign NOT_cache_rg_op_8_EQ_2_0_31_OR_NOT_cache_rg_am_ETC___d550 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_02_EQ_cache_rg_addr_4___d103) &&
	     cache_ctr_wr_rsps_pending_crg == 4'd15 ;
  assign NOT_req_f3_BITS_1_TO_0_62_EQ_0b0_63_64_AND_NOT_ETC___d983 =
	     req_f3[1:0] != 2'b0 && (req_f3[1:0] != 2'b01 || req_addr[0]) &&
	     (req_f3[1:0] != 2'b10 || req_addr[1:0] != 2'b0) &&
	     (req_f3[1:0] != 2'b11 || req_addr[2:0] != 3'b0) ;
  assign _theResult___fst__h18463 =
	     cache_rg_st_amo_val << shift_bits__h21883 ;
  assign _theResult___fst__h22020 = new_st_val__h19111 << shift_bits__h21883 ;
  assign _theResult___fst__h27575 =
	     cache_rg_st_amo_val << shift_bits__h28949 ;
  assign _theResult___fst__h29086 = st_val__h28903 << shift_bits__h28949 ;
  assign access_exc_code__h4781 = MUX_cache_rg_exc_code$write_1__VAL_4 ;
  assign b__h22684 = cache_ctr_wr_rsps_pending_crg$port1__read ;
  assign cache_master_xactor_shim_arff_rvport1__read_B_ETC__q54 =
	     cache_master_xactor_shim_arff_rv$port1__read[96:0] ;
  assign cache_master_xactor_shim_awff_rvport1__read_B_ETC__q52 =
	     cache_master_xactor_shim_awff_rv$port1__read[96:0] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q1 =
	     cache_master_xactor_shim_rff_rv$port1__read[66:35] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q10 =
	     cache_master_xactor_shim_rff_rv$port1__read[50:35] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q11 =
	     cache_master_xactor_shim_rff_rv$port1__read[50:43] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q12 =
	     cache_master_xactor_shim_rff_rv$port1__read[58:51] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q13 =
	     cache_master_xactor_shim_rff_rv$port1__read[66:51] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q14 =
	     cache_master_xactor_shim_rff_rv$port1__read[66:59] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q2 =
	     cache_master_xactor_shim_rff_rv$port1__read[10:3] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q3 =
	     cache_master_xactor_shim_rff_rv$port1__read[18:3] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q4 =
	     cache_master_xactor_shim_rff_rv$port1__read[34:3] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q5 =
	     cache_master_xactor_shim_rff_rv$port1__read[18:11] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q6 =
	     cache_master_xactor_shim_rff_rv$port1__read[26:19] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q7 =
	     cache_master_xactor_shim_rff_rv$port1__read[34:19] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q8 =
	     cache_master_xactor_shim_rff_rv$port1__read[34:27] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q9 =
	     cache_master_xactor_shim_rff_rv$port1__read[42:35] ;
  assign cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q53 =
	     cache_master_xactor_shim_wff_rv$port1__read[72:0] ;
  assign cache_ram_state_and_ctag_cset_b_read__16_BITS__ETC___d122 =
	     cache_ram_state_and_ctag_cset$DOB[21:0] == pa_ctag__h6832 ;
  assign cache_ram_state_and_ctag_cset_b_read__16_BIT_2_ETC___d165 =
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__16_BITS__ETC___d122 &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00010 ||
	     NOT_cache_ram_state_and_ctag_cset_b_read__16_B_ETC___d164 ;
  assign cache_rg_addr_4_EQ_cache_rg_lrsc_pa_02___d162 =
	     cache_rg_addr == cache_rg_lrsc_pa ;
  assign cache_rg_amo_funct7_1_BITS_6_TO_2_2_EQ_0b10_3__ETC___d337 =
	     cache_rg_amo_funct7[6:2] == 5'b00010 &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__16_BITS__ETC___d122) &&
	     cache_rg_addr_4_EQ_cache_rg_lrsc_pa_02___d162 &&
	     NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 ;
  assign cache_rg_lrsc_pa_02_EQ_cache_rg_addr_4___d103 =
	     cache_rg_lrsc_pa == cache_rg_addr ;
  assign cache_rg_op_8_EQ_0_9_OR_cache_rg_op_8_EQ_2_0_A_ETC___d148 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__16_BITS__ETC___d122) ;
  assign cache_rg_op_8_EQ_0_9_OR_cache_rg_op_8_EQ_2_0_A_ETC___d176 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     cache_ram_state_and_ctag_cset_b_read__16_BIT_2_ETC___d165 ||
	     cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     cache_rg_op_8_EQ_1_6_OR_cache_rg_op_8_EQ_2_0_A_ETC___d174 ;
  assign cache_rg_op_8_EQ_0_9_OR_cache_rg_op_8_EQ_2_0_A_ETC___d181 =
	     MUX_cache_rg_lrsc_valid$write_1__VAL_2 ||
	     cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h14824 ;
  assign cache_rg_op_8_EQ_0_9_OR_cache_rg_op_8_EQ_2_0_A_ETC___d320 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__16_BITS__ETC___d122 &&
	     NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 ;
  assign cache_rg_op_8_EQ_0_9_OR_cache_rg_op_8_EQ_2_0_A_ETC___d333 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__16_BITS__ETC___d122) &&
	     NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 ;
  assign cache_rg_op_8_EQ_1_6_OR_cache_rg_op_8_EQ_2_0_A_ETC___d174 =
	     cache_rg_op == 2'd1 &&
	     cache_rg_addr_4_EQ_cache_rg_lrsc_pa_02___d162 ||
	     cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011 ||
	     NOT_cache_rg_op_8_EQ_1_6_70_AND_NOT_cache_rg_o_ETC___d173 ;
  assign cache_rg_op_8_EQ_1_6_OR_cache_rg_op_8_EQ_2_0_A_ETC___d352 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_cache_rg_op_8_EQ_2_0_31_OR_NOT_cache_rg_am_ETC___d349 ||
	     NOT_cache_rg_op_8_EQ_1_6_70_AND_NOT_cache_rg_o_ETC___d351 ;
  assign cache_rg_op_8_EQ_1_6_OR_cache_rg_op_8_EQ_2_0_A_ETC___d486 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_cache_rg_op_8_EQ_2_0_31_OR_NOT_cache_rg_am_ETC___d483 ||
	     NOT_cache_rg_op_8_EQ_1_6_70_AND_NOT_cache_rg_o_ETC___d485 ;
  assign cache_rg_op_8_EQ_1_6_OR_cache_rg_op_8_EQ_2_0_A_ETC___d489 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_02_EQ_cache_rg_addr_4___d103) ;
  assign cache_rg_op_8_EQ_2_0_AND_cache_rg_amo_funct7_1_ETC___d115 =
	     cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h14824 ||
	     !cache_master_xactor_clearing &&
	     !cache_master_xactor_shim_awff_rv[97] &&
	     !cache_master_xactor_shim_wff_rv[73] ;
  assign cache_rg_op_8_EQ_2_0_AND_cache_rg_amo_funct7_1_ETC___d558 =
	     cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h14824 &&
	     NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 ;
  assign cache_rg_st_amo_val_BITS_31_TO_0__q31 = cache_rg_st_amo_val[31:0] ;
  assign cache_rg_state_9_EQ_12_49_AND_cache_rg_op_8_EQ_ETC___d651 =
	     cache_rg_state == 4'd12 &&
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     b__h22684 == 4'd0 ;
  assign cache_rg_state_9_EQ_3_29_AND_NOT_cache_rg_op_8_ETC___d138 =
	     cache_rg_state == 4'd3 &&
	     (cache_rg_op != 2'd0 &&
	      (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) ||
	      cache_crg_sb_to_load_delay$port0__write_1 == 11'd0) ;
  assign cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d343 =
	     cache_soc_map$m_is_mem_addr && cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     (cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011 ||
	      cache_rg_op != 2'd1 && cache_ram_state_and_ctag_cset$DOB[22] &&
	      cache_ram_state_and_ctag_cset_b_read__16_BITS__ETC___d122) ;
  assign cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d354 =
	     cache_soc_map$m_is_mem_addr && cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     cache_rg_op_8_EQ_1_6_OR_cache_rg_op_8_EQ_2_0_A_ETC___d352 ;
  assign cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d567 =
	     cache_soc_map$m_is_mem_addr && cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_cache_rg_op_8_EQ_1_6_70_AND_NOT_cache_rg_o_ETC___d565 ;
  assign cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d571 =
	     cache_soc_map$m_is_mem_addr && cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_cache_rg_op_8_EQ_1_6_70_AND_NOT_cache_rg_o_ETC___d569 ;
  assign cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d579 =
	     cache_soc_map$m_is_mem_addr && cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_cache_rg_op_8_EQ_1_6_70_AND_NOT_cache_rg_o_ETC___d351 ;
  assign cline_addr__h22782 = { cache_rg_pa[31:5], 5'd0 } ;
  assign cline_fabric_addr__h22783 = { 32'd0, cline_addr__h22782 } ;
  assign ld_val6042_BITS_15_TO_0__q36 = ld_val__h26042[15:0] ;
  assign ld_val6042_BITS_15_TO_8__q38 = ld_val__h26042[15:8] ;
  assign ld_val6042_BITS_23_TO_16__q39 = ld_val__h26042[23:16] ;
  assign ld_val6042_BITS_31_TO_0__q37 = ld_val__h26042[31:0] ;
  assign ld_val6042_BITS_31_TO_16__q40 = ld_val__h26042[31:16] ;
  assign ld_val6042_BITS_31_TO_24__q41 = ld_val__h26042[31:24] ;
  assign ld_val6042_BITS_39_TO_32__q42 = ld_val__h26042[39:32] ;
  assign ld_val6042_BITS_47_TO_32__q43 = ld_val__h26042[47:32] ;
  assign ld_val6042_BITS_47_TO_40__q45 = ld_val__h26042[47:40] ;
  assign ld_val6042_BITS_55_TO_48__q46 = ld_val__h26042[55:48] ;
  assign ld_val6042_BITS_63_TO_32__q44 = ld_val__h26042[63:32] ;
  assign ld_val6042_BITS_63_TO_48__q47 = ld_val__h26042[63:48] ;
  assign ld_val6042_BITS_63_TO_56__q48 = ld_val__h26042[63:56] ;
  assign ld_val6042_BITS_7_TO_0__q35 = ld_val__h26042[7:0] ;
  assign ld_val__h26042 = MUX_cache_dw_output_ld_val$wset_1__VAL_1 ;
  assign lrsc_result__h14824 =
	     !cache_rg_lrsc_valid ||
	     !cache_rg_lrsc_pa_02_EQ_cache_rg_addr_4___d103 ;
  assign mem_req_wr_addr_awaddr__h21877 = { 32'd0, cache_rg_addr } ;
  assign mem_req_wr_addr_awaddr__h28943 = { 32'd0, cache_rg_pa } ;
  assign new_ld_val__h28891 = MUX_cache_dw_output_ld_val$wset_1__VAL_2 ;
  assign new_st_val__h19111 = MUX_cache_rg_st_amo_val$write_1__VAL_2 ;
  assign new_st_val__h19393 = { 32'd0, _theResult_____2__h19389[31:0] } ;
  assign new_st_val__h19484 =
	     IF_cache_rg_f3_83_EQ_0b10_89_THEN_SEXT_IF_cach_ETC___d347 +
	     IF_cache_rg_f3_83_EQ_0b10_89_THEN_SEXT_cache_r_ETC___d411 ;
  assign new_st_val__h20464 = w1__h19381 ^ w2__h29169 ;
  assign new_st_val__h20468 = w1__h19381 & w2__h29169 ;
  assign new_st_val__h20472 = w1__h19381 | w2__h29169 ;
  assign new_st_val__h20476 =
	     (w1__h19381 < w2__h29169) ? w1__h19381 : w2__h29169 ;
  assign new_st_val__h20481 =
	     (w1__h19381 <= w2__h29169) ? w2__h29169 : w1__h19381 ;
  assign new_st_val__h20487 =
	     ((IF_cache_rg_f3_83_EQ_0b10_89_THEN_SEXT_IF_cach_ETC___d347 ^
	       64'h8000000000000000) <
	      (IF_cache_rg_f3_83_EQ_0b10_89_THEN_SEXT_cache_r_ETC___d411 ^
	       64'h8000000000000000)) ?
	       w1__h19381 :
	       w2__h29169 ;
  assign new_st_val__h20492 =
	     ((IF_cache_rg_f3_83_EQ_0b10_89_THEN_SEXT_IF_cach_ETC___d347 ^
	       64'h8000000000000000) <=
	      (IF_cache_rg_f3_83_EQ_0b10_89_THEN_SEXT_cache_r_ETC___d411 ^
	       64'h8000000000000000)) ?
	       w2__h29169 :
	       w1__h19381 ;
  assign new_st_val__h29179 = { 32'd0, _theResult_____2__h29175[31:0] } ;
  assign new_st_val__h29270 =
	     new_ld_val__h28891 +
	     IF_cache_rg_f3_83_EQ_0b10_89_THEN_SEXT_cache_r_ETC___d411 ;
  assign new_st_val__h31130 = w1__h29167 ^ w2__h29169 ;
  assign new_st_val__h31134 = w1__h29167 & w2__h29169 ;
  assign new_st_val__h31138 = w1__h29167 | w2__h29169 ;
  assign new_st_val__h31142 =
	     (w1__h29167 < w2__h29169) ? w1__h29167 : w2__h29169 ;
  assign new_st_val__h31147 =
	     (w1__h29167 <= w2__h29169) ? w2__h29169 : w1__h29167 ;
  assign new_st_val__h31153 =
	     ((new_ld_val__h28891 ^ 64'h8000000000000000) <
	      (IF_cache_rg_f3_83_EQ_0b10_89_THEN_SEXT_cache_r_ETC___d411 ^
	       64'h8000000000000000)) ?
	       w1__h29167 :
	       w2__h29169 ;
  assign new_st_val__h31158 =
	     ((new_ld_val__h28891 ^ 64'h8000000000000000) <=
	      (IF_cache_rg_f3_83_EQ_0b10_89_THEN_SEXT_cache_r_ETC___d411 ^
	       64'h8000000000000000)) ?
	       w2__h29169 :
	       w1__h29167 ;
  assign new_value153_BITS_31_TO_0__q30 = new_value__h7153[31:0] ;
  assign pa_ctag__h6832 = { 2'd0, cache_rg_addr[31:12] } ;
  assign req_f3_BITS_1_TO_0_62_EQ_0b0_63_OR_req_f3_BITS_ETC___d992 =
	     req_f3[1:0] == 2'b0 || req_f3[1:0] == 2'b01 && !req_addr[0] ||
	     req_f3[1:0] == 2'b10 && req_addr[1:0] == 2'b0 ||
	     req_f3[1:0] == 2'b11 && req_addr[2:0] == 3'b0 ;
  assign result__h13564 =
	     { {56{word64974_BITS_15_TO_8__q18[7]}},
	       word64974_BITS_15_TO_8__q18 } ;
  assign result__h13592 =
	     { {56{word64974_BITS_23_TO_16__q19[7]}},
	       word64974_BITS_23_TO_16__q19 } ;
  assign result__h13620 =
	     { {56{word64974_BITS_31_TO_24__q21[7]}},
	       word64974_BITS_31_TO_24__q21 } ;
  assign result__h13648 =
	     { {56{word64974_BITS_39_TO_32__q22[7]}},
	       word64974_BITS_39_TO_32__q22 } ;
  assign result__h13676 =
	     { {56{word64974_BITS_47_TO_40__q25[7]}},
	       word64974_BITS_47_TO_40__q25 } ;
  assign result__h13704 =
	     { {56{word64974_BITS_55_TO_48__q26[7]}},
	       word64974_BITS_55_TO_48__q26 } ;
  assign result__h13732 =
	     { {56{word64974_BITS_63_TO_56__q28[7]}},
	       word64974_BITS_63_TO_56__q28 } ;
  assign result__h13777 = { 56'd0, word64__h6974[7:0] } ;
  assign result__h13805 = { 56'd0, word64__h6974[15:8] } ;
  assign result__h13833 = { 56'd0, word64__h6974[23:16] } ;
  assign result__h13861 = { 56'd0, word64__h6974[31:24] } ;
  assign result__h13889 = { 56'd0, word64__h6974[39:32] } ;
  assign result__h13917 = { 56'd0, word64__h6974[47:40] } ;
  assign result__h13945 = { 56'd0, word64__h6974[55:48] } ;
  assign result__h13973 = { 56'd0, word64__h6974[63:56] } ;
  assign result__h14018 =
	     { {48{word64974_BITS_15_TO_0__q16[15]}},
	       word64974_BITS_15_TO_0__q16 } ;
  assign result__h14046 =
	     { {48{word64974_BITS_31_TO_16__q20[15]}},
	       word64974_BITS_31_TO_16__q20 } ;
  assign result__h14074 =
	     { {48{word64974_BITS_47_TO_32__q23[15]}},
	       word64974_BITS_47_TO_32__q23 } ;
  assign result__h14102 =
	     { {48{word64974_BITS_63_TO_48__q27[15]}},
	       word64974_BITS_63_TO_48__q27 } ;
  assign result__h14143 = { 48'd0, word64__h6974[15:0] } ;
  assign result__h14171 = { 48'd0, word64__h6974[31:16] } ;
  assign result__h14199 = { 48'd0, word64__h6974[47:32] } ;
  assign result__h14227 = { 48'd0, word64__h6974[63:48] } ;
  assign result__h14268 =
	     { {32{word64974_BITS_31_TO_0__q17[31]}},
	       word64974_BITS_31_TO_0__q17 } ;
  assign result__h14296 =
	     { {32{word64974_BITS_63_TO_32__q24[31]}},
	       word64974_BITS_63_TO_32__q24 } ;
  assign result__h14335 = { 32'd0, word64__h6974[31:0] } ;
  assign result__h14363 = { 32'd0, word64__h6974[63:32] } ;
  assign result__h26102 =
	     { {56{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q2[7]}},
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q2 } ;
  assign result__h26132 =
	     { {56{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q5[7]}},
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q5 } ;
  assign result__h26159 =
	     { {56{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q6[7]}},
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q6 } ;
  assign result__h26186 =
	     { {56{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q8[7]}},
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q8 } ;
  assign result__h26213 =
	     { {56{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q9[7]}},
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q9 } ;
  assign result__h26240 =
	     { {56{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q11[7]}},
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q11 } ;
  assign result__h26267 =
	     { {56{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q12[7]}},
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q12 } ;
  assign result__h26294 =
	     { {56{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q14[7]}},
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q14 } ;
  assign result__h26338 =
	     { 56'd0, cache_master_xactor_shim_rff_rv$port1__read[10:3] } ;
  assign result__h26365 =
	     { 56'd0, cache_master_xactor_shim_rff_rv$port1__read[18:11] } ;
  assign result__h26392 =
	     { 56'd0, cache_master_xactor_shim_rff_rv$port1__read[26:19] } ;
  assign result__h26419 =
	     { 56'd0, cache_master_xactor_shim_rff_rv$port1__read[34:27] } ;
  assign result__h26446 =
	     { 56'd0, cache_master_xactor_shim_rff_rv$port1__read[42:35] } ;
  assign result__h26473 =
	     { 56'd0, cache_master_xactor_shim_rff_rv$port1__read[50:43] } ;
  assign result__h26500 =
	     { 56'd0, cache_master_xactor_shim_rff_rv$port1__read[58:51] } ;
  assign result__h26527 =
	     { 56'd0, cache_master_xactor_shim_rff_rv$port1__read[66:59] } ;
  assign result__h26571 =
	     { {48{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q3[15]}},
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q3 } ;
  assign result__h26598 =
	     { {48{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q7[15]}},
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q7 } ;
  assign result__h26625 =
	     { {48{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q10[15]}},
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q10 } ;
  assign result__h26652 =
	     { {48{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q13[15]}},
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q13 } ;
  assign result__h26692 =
	     { 48'd0, cache_master_xactor_shim_rff_rv$port1__read[18:3] } ;
  assign result__h26719 =
	     { 48'd0, cache_master_xactor_shim_rff_rv$port1__read[34:19] } ;
  assign result__h26746 =
	     { 48'd0, cache_master_xactor_shim_rff_rv$port1__read[50:35] } ;
  assign result__h26773 =
	     { 48'd0, cache_master_xactor_shim_rff_rv$port1__read[66:51] } ;
  assign result__h26813 =
	     { {32{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q4[31]}},
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q4 } ;
  assign result__h26840 =
	     { {32{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q1[31]}},
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q1 } ;
  assign result__h26878 =
	     { 32'd0, cache_master_xactor_shim_rff_rv$port1__read[34:3] } ;
  assign result__h26905 =
	     { 32'd0, cache_master_xactor_shim_rff_rv$port1__read[66:35] } ;
  assign result__h29358 =
	     { {56{ld_val6042_BITS_7_TO_0__q35[7]}},
	       ld_val6042_BITS_7_TO_0__q35 } ;
  assign result__h30266 =
	     { {56{ld_val6042_BITS_15_TO_8__q38[7]}},
	       ld_val6042_BITS_15_TO_8__q38 } ;
  assign result__h30294 =
	     { {56{ld_val6042_BITS_23_TO_16__q39[7]}},
	       ld_val6042_BITS_23_TO_16__q39 } ;
  assign result__h30322 =
	     { {56{ld_val6042_BITS_31_TO_24__q41[7]}},
	       ld_val6042_BITS_31_TO_24__q41 } ;
  assign result__h30350 =
	     { {56{ld_val6042_BITS_39_TO_32__q42[7]}},
	       ld_val6042_BITS_39_TO_32__q42 } ;
  assign result__h30378 =
	     { {56{ld_val6042_BITS_47_TO_40__q45[7]}},
	       ld_val6042_BITS_47_TO_40__q45 } ;
  assign result__h30406 =
	     { {56{ld_val6042_BITS_55_TO_48__q46[7]}},
	       ld_val6042_BITS_55_TO_48__q46 } ;
  assign result__h30434 =
	     { {56{ld_val6042_BITS_63_TO_56__q48[7]}},
	       ld_val6042_BITS_63_TO_56__q48 } ;
  assign result__h30479 = { 56'd0, ld_val__h26042[7:0] } ;
  assign result__h30507 = { 56'd0, ld_val__h26042[15:8] } ;
  assign result__h30535 = { 56'd0, ld_val__h26042[23:16] } ;
  assign result__h30563 = { 56'd0, ld_val__h26042[31:24] } ;
  assign result__h30591 = { 56'd0, ld_val__h26042[39:32] } ;
  assign result__h30619 = { 56'd0, ld_val__h26042[47:40] } ;
  assign result__h30647 = { 56'd0, ld_val__h26042[55:48] } ;
  assign result__h30675 = { 56'd0, ld_val__h26042[63:56] } ;
  assign result__h30720 =
	     { {48{ld_val6042_BITS_15_TO_0__q36[15]}},
	       ld_val6042_BITS_15_TO_0__q36 } ;
  assign result__h30748 =
	     { {48{ld_val6042_BITS_31_TO_16__q40[15]}},
	       ld_val6042_BITS_31_TO_16__q40 } ;
  assign result__h30776 =
	     { {48{ld_val6042_BITS_47_TO_32__q43[15]}},
	       ld_val6042_BITS_47_TO_32__q43 } ;
  assign result__h30804 =
	     { {48{ld_val6042_BITS_63_TO_48__q47[15]}},
	       ld_val6042_BITS_63_TO_48__q47 } ;
  assign result__h30845 = { 48'd0, ld_val__h26042[15:0] } ;
  assign result__h30873 = { 48'd0, ld_val__h26042[31:16] } ;
  assign result__h30901 = { 48'd0, ld_val__h26042[47:32] } ;
  assign result__h30929 = { 48'd0, ld_val__h26042[63:48] } ;
  assign result__h30970 =
	     { {32{ld_val6042_BITS_31_TO_0__q37[31]}},
	       ld_val6042_BITS_31_TO_0__q37 } ;
  assign result__h30998 =
	     { {32{ld_val6042_BITS_63_TO_32__q44[31]}},
	       ld_val6042_BITS_63_TO_32__q44 } ;
  assign result__h31037 = { 32'd0, ld_val__h26042[31:0] } ;
  assign result__h31065 = { 32'd0, ld_val__h26042[63:32] } ;
  assign result__h7208 =
	     { {56{word64974_BITS_7_TO_0__q15[7]}},
	       word64974_BITS_7_TO_0__q15 } ;
  assign shift_bits__h21883 = { cache_rg_addr[2:0], 3'b0 } ;
  assign shift_bits__h28949 = { cache_rg_pa[2:0], 3'b0 } ;
  assign st_val__h28903 =
	     (cache_rg_f3 == 3'b010) ?
	       new_st_val__h29179 :
	       _theResult_____2__h29175 ;
  assign strobe64__h22018 = 8'b00000001 << cache_rg_addr[2:0] ;
  assign strobe64__h22022 = 8'b00000011 << cache_rg_addr[2:0] ;
  assign strobe64__h22026 = 8'b00001111 << cache_rg_addr[2:0] ;
  assign strobe64__h29084 = 8'b00000001 << cache_rg_pa[2:0] ;
  assign strobe64__h29088 = 8'b00000011 << cache_rg_pa[2:0] ;
  assign strobe64__h29092 = 8'b00001111 << cache_rg_pa[2:0] ;
  assign w19163_BITS_31_TO_0__q50 = w1__h29163[31:0] ;
  assign w1___1__h19452 = { 32'd0, new_value__h7153[31:0] } ;
  assign w1___1__h29238 = { 32'd0, w1__h29163[31:0] } ;
  assign w2___1__h29239 = { 32'd0, cache_rg_st_amo_val[31:0] } ;
  assign w2__h29169 =
	     (cache_rg_f3 == 3'b010) ? w2___1__h29239 : cache_rg_st_amo_val ;
  assign word64974_BITS_15_TO_0__q16 = word64__h6974[15:0] ;
  assign word64974_BITS_15_TO_8__q18 = word64__h6974[15:8] ;
  assign word64974_BITS_23_TO_16__q19 = word64__h6974[23:16] ;
  assign word64974_BITS_31_TO_0__q17 = word64__h6974[31:0] ;
  assign word64974_BITS_31_TO_16__q20 = word64__h6974[31:16] ;
  assign word64974_BITS_31_TO_24__q21 = word64__h6974[31:24] ;
  assign word64974_BITS_39_TO_32__q22 = word64__h6974[39:32] ;
  assign word64974_BITS_47_TO_32__q23 = word64__h6974[47:32] ;
  assign word64974_BITS_47_TO_40__q25 = word64__h6974[47:40] ;
  assign word64974_BITS_55_TO_48__q26 = word64__h6974[55:48] ;
  assign word64974_BITS_63_TO_32__q24 = word64__h6974[63:32] ;
  assign word64974_BITS_63_TO_48__q27 = word64__h6974[63:48] ;
  assign word64974_BITS_63_TO_56__q28 = word64__h6974[63:56] ;
  assign word64974_BITS_7_TO_0__q15 = word64__h6974[7:0] ;
  assign word64__h6974 = cache_ram_word64_set$DOB & y__h7244 ;
  assign x__h14834 = { 63'd0, lrsc_result__h14824 } ;
  assign y__h7244 =
	     {64{cache_ram_state_and_ctag_cset$DOB[22] &&
		 cache_ram_state_and_ctag_cset_b_read__16_BITS__ETC___d122}} ;
  always@(cache_rg_f3)
  begin
    case (cache_rg_f3[1:0])
      2'b0: size_val__h28409 = 3'b0;
      2'b01: size_val__h28409 = 3'b001;
      2'b10: size_val__h28409 = 3'b010;
      2'd3: size_val__h28409 = 3'b011;
    endcase
  end
  always@(cache_rg_f3)
  begin
    case (cache_rg_f3[1:0])
      2'b0: _theResult___snd_snd_val__h29101 = 3'b0;
      2'b01: _theResult___snd_snd_val__h29101 = 3'b001;
      2'b10: _theResult___snd_snd_val__h29101 = 3'b010;
      2'b11: _theResult___snd_snd_val__h29101 = 3'b011;
    endcase
  end
  always@(cache_rg_f3 or
	  strobe64__h29084 or strobe64__h29088 or strobe64__h29092)
  begin
    case (cache_rg_f3[1:0])
      2'b0: mem_req_wr_data_wstrb__h29154 = strobe64__h29084;
      2'b01: mem_req_wr_data_wstrb__h29154 = strobe64__h29088;
      2'b10: mem_req_wr_data_wstrb__h29154 = strobe64__h29092;
      2'b11: mem_req_wr_data_wstrb__h29154 = 8'b11111111;
    endcase
  end
  always@(cache_rg_f3 or
	  strobe64__h22018 or strobe64__h22022 or strobe64__h22026)
  begin
    case (cache_rg_f3[1:0])
      2'b0: mem_req_wr_data_wstrb__h22088 = strobe64__h22018;
      2'b01: mem_req_wr_data_wstrb__h22088 = strobe64__h22022;
      2'b10: mem_req_wr_data_wstrb__h22088 = strobe64__h22026;
      2'b11: mem_req_wr_data_wstrb__h22088 = 8'b11111111;
    endcase
  end
  always@(cache_rg_f3 or cache_rg_st_amo_val or _theResult___fst__h18463)
  begin
    case (cache_rg_f3[1:0])
      2'b0, 2'b01, 2'b10:
	  mem_req_wr_data_wdata__h18594 = _theResult___fst__h18463;
      2'd3: mem_req_wr_data_wdata__h18594 = cache_rg_st_amo_val;
    endcase
  end
  always@(cache_rg_f3 or cache_rg_st_amo_val or _theResult___fst__h27575)
  begin
    case (cache_rg_f3[1:0])
      2'b0, 2'b01, 2'b10:
	  mem_req_wr_data_wdata__h27642 = _theResult___fst__h27575;
      2'd3: mem_req_wr_data_wdata__h27642 = cache_rg_st_amo_val;
    endcase
  end
  always@(cache_rg_addr or
	  result__h13777 or
	  result__h13805 or
	  result__h13833 or
	  result__h13861 or
	  result__h13889 or
	  result__h13917 or result__h13945 or result__h13973)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d266 =
	      result__h13777;
      3'h1:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d266 =
	      result__h13805;
      3'h2:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d266 =
	      result__h13833;
      3'h3:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d266 =
	      result__h13861;
      3'h4:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d266 =
	      result__h13889;
      3'h5:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d266 =
	      result__h13917;
      3'h6:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d266 =
	      result__h13945;
      3'h7:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d266 =
	      result__h13973;
    endcase
  end
  always@(cache_rg_addr or
	  result__h7208 or
	  result__h13564 or
	  result__h13592 or
	  result__h13620 or
	  result__h13648 or
	  result__h13676 or result__h13704 or result__h13732)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d249 =
	      result__h7208;
      3'h1:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d249 =
	      result__h13564;
      3'h2:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d249 =
	      result__h13592;
      3'h3:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d249 =
	      result__h13620;
      3'h4:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d249 =
	      result__h13648;
      3'h5:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d249 =
	      result__h13676;
      3'h6:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d249 =
	      result__h13704;
      3'h7:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d249 =
	      result__h13732;
    endcase
  end
  always@(cache_rg_addr or
	  result__h14018 or
	  result__h14046 or result__h14074 or result__h14102)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d279 =
	      result__h14018;
      3'h2:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d279 =
	      result__h14046;
      3'h4:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d279 =
	      result__h14074;
      3'h6:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d279 =
	      result__h14102;
      default: IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d279 =
		   64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h14143 or
	  result__h14171 or result__h14199 or result__h14227)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d288 =
	      result__h14143;
      3'h2:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d288 =
	      result__h14171;
      3'h4:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d288 =
	      result__h14199;
      3'h6:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d288 =
	      result__h14227;
      default: IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d288 =
		   64'd0;
    endcase
  end
  always@(cache_rg_addr or result__h14335 or result__h14363)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d300 =
	      result__h14335;
      3'h4:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d300 =
	      result__h14363;
      default: IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d300 =
		   64'd0;
    endcase
  end
  always@(cache_rg_addr or result__h14268 or result__h14296)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_result4268__ETC__q29 =
	      result__h14268;
      3'h4:
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_result4268__ETC__q29 =
	      result__h14296;
      default: CASE_cache_rg_addr_BITS_2_TO_0_0x0_result4268__ETC__q29 =
		   64'd0;
    endcase
  end
  always@(cache_rg_f3 or
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d249 or
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d279 or
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_result4268__ETC__q29 or
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d302 or
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d266 or
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d288 or
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d300)
  begin
    case (cache_rg_f3)
      3'b0:
	  new_value__h7153 =
	      IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d249;
      3'b001:
	  new_value__h7153 =
	      IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d279;
      3'b010:
	  new_value__h7153 =
	      CASE_cache_rg_addr_BITS_2_TO_0_0x0_result4268__ETC__q29;
      3'b011:
	  new_value__h7153 =
	      IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d302;
      3'b100:
	  new_value__h7153 =
	      IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d266;
      3'b101:
	  new_value__h7153 =
	      IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d288;
      3'b110:
	  new_value__h7153 =
	      IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d300;
      3'd7: new_value__h7153 = 64'd0;
    endcase
  end
  always@(cache_rg_f3 or
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d249 or
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d279 or
	  w1___1__h19452 or
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d302 or
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d266 or
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d288 or
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d300)
  begin
    case (cache_rg_f3)
      3'b0:
	  w1__h19381 =
	      IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d249;
      3'b001:
	  w1__h19381 =
	      IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d279;
      3'b010: w1__h19381 = w1___1__h19452;
      3'b011:
	  w1__h19381 =
	      IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d302;
      3'b100:
	  w1__h19381 =
	      IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d266;
      3'b101:
	  w1__h19381 =
	      IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d288;
      3'b110:
	  w1__h19381 =
	      IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d300;
      3'd7: w1__h19381 = 64'd0;
    endcase
  end
  always@(cache_rg_addr or cache_ram_word64_set$DOB or cache_rg_st_amo_val)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d396 =
	      { cache_ram_word64_set$DOB[63:16], cache_rg_st_amo_val[15:0] };
      3'h2:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d396 =
	      { cache_ram_word64_set$DOB[63:32],
		cache_rg_st_amo_val[15:0],
		cache_ram_word64_set$DOB[15:0] };
      3'h4:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d396 =
	      { cache_ram_word64_set$DOB[63:48],
		cache_rg_st_amo_val[15:0],
		cache_ram_word64_set$DOB[31:0] };
      3'h6:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d396 =
	      { cache_rg_st_amo_val[15:0], cache_ram_word64_set$DOB[47:0] };
      default: IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d396 =
		   cache_ram_word64_set$DOB;
    endcase
  end
  always@(cache_rg_addr or cache_ram_word64_set$DOB or cache_rg_st_amo_val)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d387 =
	      { cache_ram_word64_set$DOB[63:8], cache_rg_st_amo_val[7:0] };
      3'h1:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d387 =
	      { cache_ram_word64_set$DOB[63:16],
		cache_rg_st_amo_val[7:0],
		cache_ram_word64_set$DOB[7:0] };
      3'h2:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d387 =
	      { cache_ram_word64_set$DOB[63:24],
		cache_rg_st_amo_val[7:0],
		cache_ram_word64_set$DOB[15:0] };
      3'h3:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d387 =
	      { cache_ram_word64_set$DOB[63:32],
		cache_rg_st_amo_val[7:0],
		cache_ram_word64_set$DOB[23:0] };
      3'h4:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d387 =
	      { cache_ram_word64_set$DOB[63:40],
		cache_rg_st_amo_val[7:0],
		cache_ram_word64_set$DOB[31:0] };
      3'h5:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d387 =
	      { cache_ram_word64_set$DOB[63:48],
		cache_rg_st_amo_val[7:0],
		cache_ram_word64_set$DOB[39:0] };
      3'h6:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d387 =
	      { cache_ram_word64_set$DOB[63:56],
		cache_rg_st_amo_val[7:0],
		cache_ram_word64_set$DOB[47:0] };
      3'h7:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d387 =
	      { cache_rg_st_amo_val[7:0], cache_ram_word64_set$DOB[55:0] };
    endcase
  end
  always@(cache_rg_f3 or
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d249 or
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d279 or
	  new_value153_BITS_31_TO_0__q30 or
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d302 or
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d266 or
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d288 or
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d300)
  begin
    case (cache_rg_f3)
      3'b0:
	  IF_cache_rg_f3_83_EQ_0b10_89_THEN_SEXT_IF_cach_ETC___d347 =
	      IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d249;
      3'b001:
	  IF_cache_rg_f3_83_EQ_0b10_89_THEN_SEXT_IF_cach_ETC___d347 =
	      IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d279;
      3'b010:
	  IF_cache_rg_f3_83_EQ_0b10_89_THEN_SEXT_IF_cach_ETC___d347 =
	      { {32{new_value153_BITS_31_TO_0__q30[31]}},
		new_value153_BITS_31_TO_0__q30 };
      3'b011:
	  IF_cache_rg_f3_83_EQ_0b10_89_THEN_SEXT_IF_cach_ETC___d347 =
	      IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d302;
      3'b100:
	  IF_cache_rg_f3_83_EQ_0b10_89_THEN_SEXT_IF_cach_ETC___d347 =
	      IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d266;
      3'b101:
	  IF_cache_rg_f3_83_EQ_0b10_89_THEN_SEXT_IF_cach_ETC___d347 =
	      IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d288;
      3'b110:
	  IF_cache_rg_f3_83_EQ_0b10_89_THEN_SEXT_IF_cach_ETC___d347 =
	      IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d300;
      3'd7: IF_cache_rg_f3_83_EQ_0b10_89_THEN_SEXT_IF_cach_ETC___d347 = 64'd0;
    endcase
  end
  always@(cache_rg_amo_funct7 or
	  new_st_val__h20492 or
	  new_st_val__h19484 or
	  w2__h29169 or
	  new_st_val__h20464 or
	  new_st_val__h20472 or
	  new_st_val__h20468 or
	  new_st_val__h20487 or new_st_val__h20476 or new_st_val__h20481)
  begin
    case (cache_rg_amo_funct7[6:2])
      5'b0: _theResult_____2__h19389 = new_st_val__h19484;
      5'b00001: _theResult_____2__h19389 = w2__h29169;
      5'b00100: _theResult_____2__h19389 = new_st_val__h20464;
      5'b01000: _theResult_____2__h19389 = new_st_val__h20472;
      5'b01100: _theResult_____2__h19389 = new_st_val__h20468;
      5'b10000: _theResult_____2__h19389 = new_st_val__h20487;
      5'b11000: _theResult_____2__h19389 = new_st_val__h20476;
      5'b11100: _theResult_____2__h19389 = new_st_val__h20481;
      default: _theResult_____2__h19389 = new_st_val__h20492;
    endcase
  end
  always@(cache_rg_f3 or new_st_val__h19111 or _theResult___fst__h22020)
  begin
    case (cache_rg_f3[1:0])
      2'b0, 2'b01, 2'b10:
	  mem_req_wr_data_wdata__h22087 = _theResult___fst__h22020;
      2'd3: mem_req_wr_data_wdata__h22087 = new_st_val__h19111;
    endcase
  end
  always@(cache_rg_addr or cache_ram_word64_set$DOB or new_st_val__h19111)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d470 =
	      { cache_ram_word64_set$DOB[63:16], new_st_val__h19111[15:0] };
      3'h2:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d470 =
	      { cache_ram_word64_set$DOB[63:32],
		new_st_val__h19111[15:0],
		cache_ram_word64_set$DOB[15:0] };
      3'h4:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d470 =
	      { cache_ram_word64_set$DOB[63:48],
		new_st_val__h19111[15:0],
		cache_ram_word64_set$DOB[31:0] };
      3'h6:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d470 =
	      { new_st_val__h19111[15:0], cache_ram_word64_set$DOB[47:0] };
      default: IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d470 =
		   cache_ram_word64_set$DOB;
    endcase
  end
  always@(cache_rg_addr or cache_ram_word64_set$DOB or new_st_val__h19111)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d461 =
	      { cache_ram_word64_set$DOB[63:8], new_st_val__h19111[7:0] };
      3'h1:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d461 =
	      { cache_ram_word64_set$DOB[63:16],
		new_st_val__h19111[7:0],
		cache_ram_word64_set$DOB[7:0] };
      3'h2:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d461 =
	      { cache_ram_word64_set$DOB[63:24],
		new_st_val__h19111[7:0],
		cache_ram_word64_set$DOB[15:0] };
      3'h3:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d461 =
	      { cache_ram_word64_set$DOB[63:32],
		new_st_val__h19111[7:0],
		cache_ram_word64_set$DOB[23:0] };
      3'h4:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d461 =
	      { cache_ram_word64_set$DOB[63:40],
		new_st_val__h19111[7:0],
		cache_ram_word64_set$DOB[31:0] };
      3'h5:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d461 =
	      { cache_ram_word64_set$DOB[63:48],
		new_st_val__h19111[7:0],
		cache_ram_word64_set$DOB[39:0] };
      3'h6:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d461 =
	      { cache_ram_word64_set$DOB[63:56],
		new_st_val__h19111[7:0],
		cache_ram_word64_set$DOB[47:0] };
      3'h7:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d461 =
	      { new_st_val__h19111[7:0], cache_ram_word64_set$DOB[55:0] };
    endcase
  end
  always@(cache_rg_addr or cache_ram_word64_set$DOB or cache_rg_st_amo_val)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_cache_ram_w_ETC__q32 =
	      { cache_ram_word64_set$DOB[63:32], cache_rg_st_amo_val[31:0] };
      3'h4:
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_cache_ram_w_ETC__q32 =
	      { cache_rg_st_amo_val[31:0], cache_ram_word64_set$DOB[31:0] };
      default: CASE_cache_rg_addr_BITS_2_TO_0_0x0_cache_ram_w_ETC__q32 =
		   cache_ram_word64_set$DOB;
    endcase
  end
  always@(cache_rg_f3 or
	  cache_ram_word64_set$DOB or
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d387 or
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d396 or
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_cache_ram_w_ETC__q32 or
	  cache_rg_st_amo_val)
  begin
    case (cache_rg_f3)
      3'b0:
	  IF_cache_rg_f3_83_EQ_0b0_84_THEN_IF_cache_rg_a_ETC___d405 =
	      IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d387;
      3'b001:
	  IF_cache_rg_f3_83_EQ_0b0_84_THEN_IF_cache_rg_a_ETC___d405 =
	      IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d396;
      3'b010:
	  IF_cache_rg_f3_83_EQ_0b0_84_THEN_IF_cache_rg_a_ETC___d405 =
	      CASE_cache_rg_addr_BITS_2_TO_0_0x0_cache_ram_w_ETC__q32;
      3'b011:
	  IF_cache_rg_f3_83_EQ_0b0_84_THEN_IF_cache_rg_a_ETC___d405 =
	      cache_rg_st_amo_val;
      default: IF_cache_rg_f3_83_EQ_0b0_84_THEN_IF_cache_rg_a_ETC___d405 =
		   cache_ram_word64_set$DOB;
    endcase
  end
  always@(cache_rg_addr or
	  result__h26571 or
	  result__h26598 or result__h26625 or result__h26652)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d722 =
	      result__h26571;
      3'h2:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d722 =
	      result__h26598;
      3'h4:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d722 =
	      result__h26625;
      3'h6:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d722 =
	      result__h26652;
      default: IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d722 =
		   64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h26338 or
	  result__h26365 or
	  result__h26392 or
	  result__h26419 or
	  result__h26446 or
	  result__h26473 or result__h26500 or result__h26527)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d710 =
	      result__h26338;
      3'h1:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d710 =
	      result__h26365;
      3'h2:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d710 =
	      result__h26392;
      3'h3:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d710 =
	      result__h26419;
      3'h4:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d710 =
	      result__h26446;
      3'h5:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d710 =
	      result__h26473;
      3'h6:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d710 =
	      result__h26500;
      3'h7:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d710 =
	      result__h26527;
    endcase
  end
  always@(cache_rg_addr or
	  result__h26692 or
	  result__h26719 or result__h26746 or result__h26773)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d730 =
	      result__h26692;
      3'h2:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d730 =
	      result__h26719;
      3'h4:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d730 =
	      result__h26746;
      3'h6:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d730 =
	      result__h26773;
      default: IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d730 =
		   64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h26102 or
	  result__h26132 or
	  result__h26159 or
	  result__h26186 or
	  result__h26213 or
	  result__h26240 or result__h26267 or result__h26294)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d694 =
	      result__h26102;
      3'h1:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d694 =
	      result__h26132;
      3'h2:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d694 =
	      result__h26159;
      3'h3:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d694 =
	      result__h26186;
      3'h4:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d694 =
	      result__h26213;
      3'h5:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d694 =
	      result__h26240;
      3'h6:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d694 =
	      result__h26267;
      3'h7:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d694 =
	      result__h26294;
    endcase
  end
  always@(cache_rg_addr or result__h26813 or result__h26840)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_result6813__ETC__q33 =
	      result__h26813;
      3'h4:
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_result6813__ETC__q33 =
	      result__h26840;
      default: CASE_cache_rg_addr_BITS_2_TO_0_0x0_result6813__ETC__q33 =
		   64'd0;
    endcase
  end
  always@(cache_rg_addr or result__h26878 or result__h26905)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_result6878__ETC__q34 =
	      result__h26878;
      3'h4:
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_result6878__ETC__q34 =
	      result__h26905;
      default: CASE_cache_rg_addr_BITS_2_TO_0_0x0_result6878__ETC__q34 =
		   64'd0;
    endcase
  end
  always@(cache_rg_addr or result__h31037 or result__h31065)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d864 =
	      result__h31037;
      3'h4:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d864 =
	      result__h31065;
      default: IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d864 =
		   64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h30845 or
	  result__h30873 or result__h30901 or result__h30929)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d854 =
	      result__h30845;
      3'h2:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d854 =
	      result__h30873;
      3'h4:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d854 =
	      result__h30901;
      3'h6:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d854 =
	      result__h30929;
      default: IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d854 =
		   64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h30720 or
	  result__h30748 or result__h30776 or result__h30804)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d846 =
	      result__h30720;
      3'h2:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d846 =
	      result__h30748;
      3'h4:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d846 =
	      result__h30776;
      3'h6:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d846 =
	      result__h30804;
      default: IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d846 =
		   64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h30479 or
	  result__h30507 or
	  result__h30535 or
	  result__h30563 or
	  result__h30591 or
	  result__h30619 or result__h30647 or result__h30675)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d834 =
	      result__h30479;
      3'h1:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d834 =
	      result__h30507;
      3'h2:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d834 =
	      result__h30535;
      3'h3:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d834 =
	      result__h30563;
      3'h4:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d834 =
	      result__h30591;
      3'h5:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d834 =
	      result__h30619;
      3'h6:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d834 =
	      result__h30647;
      3'h7:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d834 =
	      result__h30675;
    endcase
  end
  always@(cache_rg_addr or
	  result__h29358 or
	  result__h30266 or
	  result__h30294 or
	  result__h30322 or
	  result__h30350 or
	  result__h30378 or result__h30406 or result__h30434)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d818 =
	      result__h29358;
      3'h1:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d818 =
	      result__h30266;
      3'h2:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d818 =
	      result__h30294;
      3'h3:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d818 =
	      result__h30322;
      3'h4:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d818 =
	      result__h30350;
      3'h5:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d818 =
	      result__h30378;
      3'h6:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d818 =
	      result__h30406;
      3'h7:
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d818 =
	      result__h30434;
    endcase
  end
  always@(cache_rg_addr or result__h30970 or result__h30998)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_result0970__ETC__q49 =
	      result__h30970;
      3'h4:
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_result0970__ETC__q49 =
	      result__h30998;
      default: CASE_cache_rg_addr_BITS_2_TO_0_0x0_result0970__ETC__q49 =
		   64'd0;
    endcase
  end
  always@(cache_rg_f3 or
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d818 or
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d846 or
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_result0970__ETC__q49 or
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d865 or
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d834 or
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d854 or
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d864)
  begin
    case (cache_rg_f3)
      3'b0:
	  w1__h29163 =
	      IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d818;
      3'b001:
	  w1__h29163 =
	      IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d846;
      3'b010:
	  w1__h29163 =
	      CASE_cache_rg_addr_BITS_2_TO_0_0x0_result0970__ETC__q49;
      3'b011:
	  w1__h29163 =
	      IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d865;
      3'b100:
	  w1__h29163 =
	      IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d834;
      3'b101:
	  w1__h29163 =
	      IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d854;
      3'b110:
	  w1__h29163 =
	      IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d864;
      3'd7: w1__h29163 = 64'd0;
    endcase
  end
  always@(cache_rg_f3 or
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d818 or
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d846 or
	  w1___1__h29238 or
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d865 or
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d834 or
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d854 or
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d864)
  begin
    case (cache_rg_f3)
      3'b0:
	  w1__h29167 =
	      IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d818;
      3'b001:
	  w1__h29167 =
	      IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d846;
      3'b010: w1__h29167 = w1___1__h29238;
      3'b011:
	  w1__h29167 =
	      IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d865;
      3'b100:
	  w1__h29167 =
	      IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d834;
      3'b101:
	  w1__h29167 =
	      IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d854;
      3'b110:
	  w1__h29167 =
	      IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d864;
      3'd7: w1__h29167 = 64'd0;
    endcase
  end
  always@(cache_rg_amo_funct7 or
	  new_st_val__h31158 or
	  new_st_val__h29270 or
	  w2__h29169 or
	  new_st_val__h31130 or
	  new_st_val__h31138 or
	  new_st_val__h31134 or
	  new_st_val__h31153 or new_st_val__h31142 or new_st_val__h31147)
  begin
    case (cache_rg_amo_funct7[6:2])
      5'b0: _theResult_____2__h29175 = new_st_val__h29270;
      5'b00001: _theResult_____2__h29175 = w2__h29169;
      5'b00100: _theResult_____2__h29175 = new_st_val__h31130;
      5'b01000: _theResult_____2__h29175 = new_st_val__h31138;
      5'b01100: _theResult_____2__h29175 = new_st_val__h31134;
      5'b10000: _theResult_____2__h29175 = new_st_val__h31153;
      5'b11000: _theResult_____2__h29175 = new_st_val__h31142;
      5'b11100: _theResult_____2__h29175 = new_st_val__h31147;
      default: _theResult_____2__h29175 = new_st_val__h31158;
    endcase
  end
  always@(cache_rg_f3 or st_val__h28903 or _theResult___fst__h29086)
  begin
    case (cache_rg_f3[1:0])
      2'b0, 2'b01, 2'b10:
	  mem_req_wr_data_wdata__h29153 = _theResult___fst__h29086;
      2'd3: mem_req_wr_data_wdata__h29153 = st_val__h28903;
    endcase
  end
  always@(cache_rg_addr or cache_ram_word64_set$DOB or new_st_val__h19111)
  begin
    case (cache_rg_addr[2:0])
      3'h0:
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_cache_ram_w_ETC__q51 =
	      { cache_ram_word64_set$DOB[63:32], new_st_val__h19111[31:0] };
      3'h4:
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_cache_ram_w_ETC__q51 =
	      { new_st_val__h19111[31:0], cache_ram_word64_set$DOB[31:0] };
      default: CASE_cache_rg_addr_BITS_2_TO_0_0x0_cache_ram_w_ETC__q51 =
		   cache_ram_word64_set$DOB;
    endcase
  end
  always@(cache_rg_f3 or
	  cache_ram_word64_set$DOB or
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d461 or
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d470 or
	  CASE_cache_rg_addr_BITS_2_TO_0_0x0_cache_ram_w_ETC__q51 or
	  new_st_val__h19111)
  begin
    case (cache_rg_f3)
      3'b0:
	  IF_cache_rg_f3_83_EQ_0b0_84_THEN_IF_cache_rg_a_ETC___d479 =
	      IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d461;
      3'b001:
	  IF_cache_rg_f3_83_EQ_0b0_84_THEN_IF_cache_rg_a_ETC___d479 =
	      IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d470;
      3'b010:
	  IF_cache_rg_f3_83_EQ_0b0_84_THEN_IF_cache_rg_a_ETC___d479 =
	      CASE_cache_rg_addr_BITS_2_TO_0_0x0_cache_ram_w_ETC__q51;
      3'b011:
	  IF_cache_rg_f3_83_EQ_0b0_84_THEN_IF_cache_rg_a_ETC___d479 =
	      new_st_val__h19111;
      default: IF_cache_rg_f3_83_EQ_0b0_84_THEN_IF_cache_rg_a_ETC___d479 =
		   cache_ram_word64_set$DOB;
    endcase
  end
  always@(cache_rg_f3 or
	  IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d316)
  begin
    case (cache_rg_f3)
      3'b0, 3'b001, 3'b010, 3'b011, 3'b100, 3'b101, 3'b110:
	  new_value__h17182 =
	      IF_cache_rg_addr_4_BITS_2_TO_0_44_EQ_0x0_85_TH_ETC___d316;
      3'd7: new_value__h17182 = 64'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cache_cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	cache_crg_sb_to_load_delay <= `BSV_ASSIGNMENT_DELAY 11'd0;
	cache_ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY 4'd0;
	cache_master_xactor_clearing <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_master_xactor_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	    98'h0AAAAAAAAAAAAAAAAAAAAAAAA;
	cache_master_xactor_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	    98'h0AAAAAAAAAAAAAAAAAAAAAAAA;
	cache_master_xactor_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY 7'd42;
	cache_master_xactor_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	    72'h2AAAAAAAAAAAAAAAAA;
	cache_master_xactor_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	    74'h0AAAAAAAAAAAAAAAAAA;
	cache_rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY 7'd0;
	cache_rg_lower_word32_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_state <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (cache_cfg_verbosity$EN)
	  cache_cfg_verbosity <= `BSV_ASSIGNMENT_DELAY
	      cache_cfg_verbosity$D_IN;
	if (cache_crg_sb_to_load_delay$EN)
	  cache_crg_sb_to_load_delay <= `BSV_ASSIGNMENT_DELAY
	      cache_crg_sb_to_load_delay$D_IN;
	if (cache_ctr_wr_rsps_pending_crg$EN)
	  cache_ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY
	      cache_ctr_wr_rsps_pending_crg$D_IN;
	if (cache_master_xactor_clearing$EN)
	  cache_master_xactor_clearing <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_clearing$D_IN;
	if (cache_master_xactor_shim_arff_rv$EN)
	  cache_master_xactor_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_arff_rv$D_IN;
	if (cache_master_xactor_shim_awff_rv$EN)
	  cache_master_xactor_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_awff_rv$D_IN;
	if (cache_master_xactor_shim_bff_rv$EN)
	  cache_master_xactor_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_bff_rv$D_IN;
	if (cache_master_xactor_shim_rff_rv$EN)
	  cache_master_xactor_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_rff_rv$D_IN;
	if (cache_master_xactor_shim_wff_rv$EN)
	  cache_master_xactor_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_wff_rv$D_IN;
	if (cache_rg_cset_in_cache$EN)
	  cache_rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_cset_in_cache$D_IN;
	if (cache_rg_lower_word32_full$EN)
	  cache_rg_lower_word32_full <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_lower_word32_full$D_IN;
	if (cache_rg_lrsc_valid$EN)
	  cache_rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_lrsc_valid$D_IN;
	if (cache_rg_state$EN)
	  cache_rg_state <= `BSV_ASSIGNMENT_DELAY cache_rg_state$D_IN;
      end
    if (cache_rg_addr$EN)
      cache_rg_addr <= `BSV_ASSIGNMENT_DELAY cache_rg_addr$D_IN;
    if (cache_rg_amo_funct7$EN)
      cache_rg_amo_funct7 <= `BSV_ASSIGNMENT_DELAY cache_rg_amo_funct7$D_IN;
    if (cache_rg_error_during_refill$EN)
      cache_rg_error_during_refill <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_error_during_refill$D_IN;
    if (cache_rg_exc_code$EN)
      cache_rg_exc_code <= `BSV_ASSIGNMENT_DELAY cache_rg_exc_code$D_IN;
    if (cache_rg_f3$EN) cache_rg_f3 <= `BSV_ASSIGNMENT_DELAY cache_rg_f3$D_IN;
    if (cache_rg_ld_val$EN)
      cache_rg_ld_val <= `BSV_ASSIGNMENT_DELAY cache_rg_ld_val$D_IN;
    if (cache_rg_lower_word32$EN)
      cache_rg_lower_word32 <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_lower_word32$D_IN;
    if (cache_rg_lrsc_pa$EN)
      cache_rg_lrsc_pa <= `BSV_ASSIGNMENT_DELAY cache_rg_lrsc_pa$D_IN;
    if (cache_rg_op$EN) cache_rg_op <= `BSV_ASSIGNMENT_DELAY cache_rg_op$D_IN;
    if (cache_rg_pa$EN) cache_rg_pa <= `BSV_ASSIGNMENT_DELAY cache_rg_pa$D_IN;
    if (cache_rg_pte_pa$EN)
      cache_rg_pte_pa <= `BSV_ASSIGNMENT_DELAY cache_rg_pte_pa$D_IN;
    if (cache_rg_st_amo_val$EN)
      cache_rg_st_amo_val <= `BSV_ASSIGNMENT_DELAY cache_rg_st_amo_val$D_IN;
    if (cache_rg_word64_set_in_cache$EN)
      cache_rg_word64_set_in_cache <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_word64_set_in_cache$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cache_cfg_verbosity = 4'hA;
    cache_crg_sb_to_load_delay = 11'h2AA;
    cache_ctr_wr_rsps_pending_crg = 4'hA;
    cache_master_xactor_clearing = 1'h0;
    cache_master_xactor_shim_arff_rv = 98'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    cache_master_xactor_shim_awff_rv = 98'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    cache_master_xactor_shim_bff_rv = 7'h2A;
    cache_master_xactor_shim_rff_rv = 72'hAAAAAAAAAAAAAAAAAA;
    cache_master_xactor_shim_wff_rv = 74'h2AAAAAAAAAAAAAAAAAA;
    cache_rg_addr = 32'hAAAAAAAA;
    cache_rg_amo_funct7 = 7'h2A;
    cache_rg_cset_in_cache = 7'h2A;
    cache_rg_error_during_refill = 1'h0;
    cache_rg_exc_code = 4'hA;
    cache_rg_f3 = 3'h2;
    cache_rg_ld_val = 64'hAAAAAAAAAAAAAAAA;
    cache_rg_lower_word32 = 32'hAAAAAAAA;
    cache_rg_lower_word32_full = 1'h0;
    cache_rg_lrsc_pa = 32'hAAAAAAAA;
    cache_rg_lrsc_valid = 1'h0;
    cache_rg_op = 2'h2;
    cache_rg_pa = 32'hAAAAAAAA;
    cache_rg_pte_pa = 32'hAAAAAAAA;
    cache_rg_st_amo_val = 64'hAAAAAAAAAAAAAAAA;
    cache_rg_state = 4'hA;
    cache_rg_word64_set_in_cache = 9'h0AA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 7'd127 &&
	  cache_cfg_verbosity != 4'd0 &&
	  !cache_f_reset_reqs$D_OUT)
	begin
	  v__h5430 = $stime;
	  #0;
	end
    v__h5424 = v__h5430 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 7'd127 &&
	  cache_cfg_verbosity != 4'd0 &&
	  !cache_f_reset_reqs$D_OUT)
	$display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		 v__h5424,
		 "D_MMU_Cache",
		 $signed(32'd128),
		 $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 7'd127 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_f_reset_reqs$D_OUT)
	begin
	  v__h5531 = $stime;
	  #0;
	end
    v__h5525 = v__h5531 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 7'd127 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_f_reset_reqs$D_OUT)
	$display("%0d: %s.rl_reset: Flushed", v__h5525, "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h5982 = $stime;
	  #0;
	end
    v__h5976 = v__h5982 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h",
		 v__h5976,
		 "D_MMU_Cache",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("        eaddr = {CTag 0x%0h  CSet 0x%0h  Word64 0x%0h  Byte 0x%0h}",
		 pa_ctag__h6832,
		 cache_rg_addr[11:5],
		 cache_rg_addr[4:3],
		 cache_rg_addr[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("        CSet 0x%0x: (state, tag):", cache_rg_addr[11:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(" (");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_ram_state_and_ctag_cset$DOB[22])
	$write("CTAG_CLEAN");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  !cache_ram_state_and_ctag_cset$DOB[22])
	$write("CTAG_EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_ram_state_and_ctag_cset$DOB[22])
	$write(", 0x%0x", cache_ram_state_and_ctag_cset$DOB[21:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  !cache_ram_state_and_ctag_cset$DOB[22])
	$write(", --");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(")");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       cache_rg_addr[11:5],
	       cache_rg_addr[4:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(" 0x%0x", cache_ram_word64_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("    TLB result: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("VM_Xlate_Result { ", "outcome: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("VM_XLATE_OK");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "pa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'hA, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_8_EQ_0_9_OR_cache_rg_op_8_EQ_2_0_A_ETC___d320)
	begin
	  v__h14447 = $stime;
	  #0;
	end
    v__h14441 = v__h14447 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_8_EQ_0_9_OR_cache_rg_op_8_EQ_2_0_A_ETC___d320)
	$display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		 v__h14441,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 word64__h6974,
		 64'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct7[6:2] == 5'b00010 &&
	  cache_ram_state_and_ctag_cset$DOB[22] &&
	  cache_ram_state_and_ctag_cset_b_read__16_BITS__ETC___d122 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("        AMO LR: reserving PA 0x%0h", cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_8_EQ_0_9_OR_cache_rg_op_8_EQ_2_0_A_ETC___d320)
	$display("        Read-hit: addr 0x%0h word64 0x%0h",
		 cache_rg_addr,
		 word64__h6974);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_8_EQ_0_9_OR_cache_rg_op_8_EQ_2_0_A_ETC___d333)
	$display("        Read Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct7_1_BITS_6_TO_2_2_EQ_0b10_3__ETC___d337)
	$display("        AMO LR: cache refill: cancelling LR/SC reservation for PA 0x%0h",
		 cache_rg_lrsc_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op == 2'd1 &&
	  cache_rg_addr_4_EQ_cache_rg_lrsc_pa_02___d162 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("        ST: cancelling LR/SC reservation for PA",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct7[6:2] == 5'b00011 &&
	  cache_rg_lrsc_valid &&
	  !cache_rg_lrsc_pa_02_EQ_cache_rg_addr_4___d103 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("        AMO SC: fail: reserved addr 0x%0h, this address 0x%0h",
		 cache_rg_lrsc_pa,
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct7[6:2] == 5'b00011 &&
	  !cache_rg_lrsc_valid &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("        AMO SC: fail due to invalid LR/SC reservation");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct7[6:2] == 5'b00011 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("        AMO SC result = %0d", lrsc_result__h14824);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d539)
	$display("        Write-Cache-Hit: pa 0x%0h word64 0x%0h",
		 cache_rg_addr,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d539)
	$write("        New Word64_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d539)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       cache_rg_addr[11:5],
	       cache_rg_addr[4:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d539)
	$write(" 0x%0x",
	       IF_cache_rg_f3_83_EQ_0b0_84_THEN_IF_cache_rg_a_ETC___d405);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d539)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  (cache_rg_op == 2'd1 ||
	   cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	  NOT_cache_rg_op_8_EQ_2_0_31_OR_NOT_cache_rg_am_ETC___d541)
	$display("        Write-Cache-Miss: pa 0x%0h word64 0x%0h",
		 cache_rg_addr,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d547)
	$display("        Write-Cache-Hit/Miss: eaddr 0x%0h word64 0x%0h",
		 cache_rg_addr,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d552)
	begin
	  v__h18832 = $stime;
	  #0;
	end
    v__h18826 = v__h18832 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d552)
	$display("%0d: ERROR: CreditCounter: overflow", v__h18826);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d552)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d547)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d547)
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d547)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d547)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d547)
	$write("'h%h", mem_req_wr_addr_awaddr__h21877);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d547)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d547)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d547)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d547)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d547)
	$write("'h%h", _theResult___snd_snd_val__h29101, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d547)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d547)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d547)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d547)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d547)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d547)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d547)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d547)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d547)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d547)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d547)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d547)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d547)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d547)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d547)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d547)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d547)
	$write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d547)
	$write("'h%h", mem_req_wr_data_wdata__h18594);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d547)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d547)
	$write("'h%h", mem_req_wr_data_wstrb__h22088);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d547)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d547)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d547)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d547)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d547)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_8_EQ_0_9_30_AND_NOT_cache_rg_o_ETC___d547)
	$display("        => rl_write_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_8_EQ_2_0_AND_cache_rg_amo_funct7_1_ETC___d558)
	begin
	  v__h18091 = $stime;
	  #0;
	end
    v__h18085 = v__h18091 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_8_EQ_2_0_AND_cache_rg_amo_funct7_1_ETC___d558)
	$display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		 v__h18085,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 64'd1,
		 64'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_8_EQ_2_0_AND_cache_rg_amo_funct7_1_ETC___d558)
	$display("        AMO SC: Fail response for addr 0x%0h",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_8_EQ_1_6_70_AND_NOT_cache_rg_o_ETC___d562)
	$display("        AMO Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d567)
	$display("        AMO: addr 0x%0h amo_f7 0x%0h f3 %0d rs2_val 0x%0h",
		 cache_rg_addr,
		 cache_rg_amo_funct7,
		 cache_rg_f3,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d567)
	$display("          PA 0x%0h ", cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d567)
	$display("          Cache word64 0x%0h, load-result 0x%0h",
		 word64__h6974,
		 word64__h6974);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d567)
	$display("          0x%0h  op  0x%0h -> 0x%0h",
		 word64__h6974,
		 word64__h6974,
		 new_st_val__h19111);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d567)
	$write("          New Word64_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d567)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       cache_rg_addr[11:5],
	       cache_rg_addr[4:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d567)
	$write(" 0x%0x",
	       IF_cache_rg_f3_83_EQ_0b0_84_THEN_IF_cache_rg_a_ETC___d479);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d567)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d571)
	begin
	  v__h22288 = $stime;
	  #0;
	end
    v__h22282 = v__h22288 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d571)
	$display("%0d: ERROR: CreditCounter: overflow", v__h22282);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d571)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d567)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d567)
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d567)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d567)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d567)
	$write("'h%h", mem_req_wr_addr_awaddr__h21877);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d567)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d567)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d567)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d567)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d567)
	$write("'h%h", _theResult___snd_snd_val__h29101, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d567)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d567)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d567)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d567)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d567)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d567)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d567)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d567)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d567)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d567)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d567)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d567)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d567)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d567)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d567)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d567)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d567)
	$write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d567)
	$write("'h%h", mem_req_wr_data_wdata__h22087);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d567)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d567)
	$write("'h%h", mem_req_wr_data_wstrb__h22088);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d567)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d567)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d567)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d567)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d567)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_8_EQ_1_6_70_AND_NOT_cache_rg_o_ETC___d575)
	$display("        AMO_op: cancelling LR/SC reservation for PA",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_soc_map$m_is_mem_addr &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("    => IO_REQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_rereq &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("    fa_req_ram_B tagCSet [0x%0x] word64_set [0x%0d]",
		 cache_rg_addr[11:5],
		 cache_rg_addr[11:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_maintain_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h27249 = $stime;
	  #0;
	end
    v__h27243 = v__h27249 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_maintain_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		 v__h27243,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 cache_rg_ld_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h27329 = $stime;
	  #0;
	end
    v__h27323 = v__h27329 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s: rl_io_write_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		 v__h27323,
		 "D_MMU_Cache",
		 cache_rg_f3,
		 cache_rg_addr,
		 cache_rg_pa,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  cache_ctr_wr_rsps_pending_crg == 4'd15)
	begin
	  v__h27843 = $stime;
	  #0;
	end
    v__h27837 = v__h27843 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  cache_ctr_wr_rsps_pending_crg == 4'd15)
	$display("%0d: ERROR: CreditCounter: overflow", v__h27837);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  cache_ctr_wr_rsps_pending_crg == 4'd15)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", mem_req_wr_addr_awaddr__h28943);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", _theResult___snd_snd_val__h29101, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", mem_req_wr_data_wdata__h27642);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", mem_req_wr_data_wstrb__h29154);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_SC_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h28136 = $stime;
	  #0;
	end
    v__h28130 = v__h28136 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_SC_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s: rl_io_AMO_SC_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		 v__h28130,
		 "D_MMU_Cache",
		 cache_rg_f3,
		 cache_rg_addr,
		 cache_rg_pa,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_SC_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("    FAIL due to I/O address.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_SC_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h28254 = $stime;
	  #0;
	end
    v__h28248 = v__h28254 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s.rl_io_AMO_op_req; f3 0x%0h vaddr %0h  paddr %0h",
		 v__h28248,
		 "D_MMU_Cache",
		 cache_rg_f3,
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", mem_req_wr_addr_awaddr__h28943);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", size_val__h28409, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_05___d606)
	begin
	  v__h23674 = $stime;
	  #0;
	end
    v__h23668 = v__h23674 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_05___d606)
	$display("%0d: %s.rl_cache_refill_rsps_loop:",
		 v__h23668,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_05___d606)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_05___d606)
	$write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_05___d606)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[70:67]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_05___d606)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_05___d606)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_05___d606)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_05___d606 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_05___d606 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_05___d606 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_05___d606 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd1 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_05___d606)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_05___d606 &&
	  cache_master_xactor_shim_rff_rv$port1__read[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_05___d606 &&
	  !cache_master_xactor_shim_rff_rv$port1__read[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_05___d606)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_05___d606)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_05___d606)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h23936 = $stime;
	  #0;
	end
    v__h23930 = v__h23936 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d",
		 v__h23930,
		 "D_MMU_Cache",
		 access_exc_code__h4781);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_word64_set_in_cache[1:0] == 2'd3 &&
	  (cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 ||
	   cache_rg_error_during_refill) &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("    => MODULE_EXCEPTION_RSP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_word64_set_in_cache[1:0] == 2'd3 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  !cache_rg_error_during_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("    => CACHE_REREQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_05___d606)
	$display("        Updating Cache word64_set 0x%0h, word64_in_cline %0d) old => new",
		 cache_rg_word64_set_in_cache,
		 cache_rg_word64_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_05___d606)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       cache_rg_addr[11:5],
	       cache_rg_word64_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_05___d606)
	$write(" 0x%0x", cache_ram_word64_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_05___d606)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_05___d606)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       cache_rg_addr[11:5],
	       cache_rg_word64_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_05___d606)
	$write(" 0x%0x", cache_master_xactor_shim_rff_rv$port1__read[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__5_ULE_2_05___d606)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h25917 = $stime;
	  #0;
	end
    v__h25911 = v__h25917 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s.rl_io_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		 v__h25911,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[70:67]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd1 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_master_xactor_shim_rff_rv$port1__read[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  !cache_master_xactor_shim_rff_rv$port1__read[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h27035 = $stime;
	  #0;
	end
    v__h27029 = v__h27035 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		 v__h27029,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 ld_val__h26042);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h27142 = $stime;
	  #0;
	end
    v__h27136 = v__h27142 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		 v__h27136,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h28570 = $stime;
	  #0;
	end
    v__h28564 = v__h28570 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s.rl_io_AMO_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		 v__h28564,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[70:67]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd1 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  cache_master_xactor_shim_rff_rv$port1__read[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  !cache_master_xactor_shim_rff_rv$port1__read[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h28765 = $stime;
	  #0;
	end
    v__h28759 = v__h28765 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s: rl_io_AMO_read_rsp; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		 v__h28759,
		 "D_MMU_Cache",
		 cache_rg_f3,
		 cache_rg_addr,
		 cache_rg_pa,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  cache_ctr_wr_rsps_pending_crg == 4'd15)
	begin
	  v__h31370 = $stime;
	  #0;
	end
    v__h31364 = v__h31370 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  cache_ctr_wr_rsps_pending_crg == 4'd15)
	$display("%0d: ERROR: CreditCounter: overflow", v__h31364);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  cache_ctr_wr_rsps_pending_crg == 4'd15)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", mem_req_wr_addr_awaddr__h28943);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", _theResult___snd_snd_val__h29101, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", mem_req_wr_data_wdata__h29153);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", mem_req_wr_data_wstrb__h29154);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h31620 = $stime;
	  #0;
	end
    v__h31614 = v__h31620 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		 v__h31614,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 new_ld_val__h28891);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h28861 = $stime;
	  #0;
	end
    v__h28855 = v__h28861 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[2:1] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s.rl_io_AMO_read_rsp: FABRIC_RSP_ERR: raising trap STORE_AMO_ACCESS_FAULT",
		 v__h28855,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h22730 = $stime;
	  #0;
	end
    v__h22724 = v__h22730 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s.rl_start_cache_refill: ", v__h22724, "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("    To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", cline_fabric_addr__h22783);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 8'd3);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 3'b011, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("    Victim way %0d; => CACHE_REFILL", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h25545 = $stime;
	  #0;
	end
    v__h25539 = v__h25545 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s.rl_io_read_req; f3 0x%0h vaddr %0h  paddr %0h",
		 v__h25539,
		 "D_MMU_Cache",
		 cache_rg_f3,
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", mem_req_wr_addr_awaddr__h28943);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", size_val__h28409, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h32336 = $stime;
	  #0;
	end
    v__h32330 = v__h32336 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("%0d: %s.rl_discard_write_rsp: pending %0d ",
	       v__h32330,
	       "D_MMU_Cache",
	       $unsigned(b__h22684));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("AXI4_BFlit { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", cache_master_xactor_shim_bff_rv$port1__read[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	begin
	  v__h32297 = $stime;
	  #0;
	end
    v__h32291 = v__h32297 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$display("%0d: %s.rl_discard_write_rsp: fabric response error: exit",
		 v__h32291,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("AXI4_BFlit { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("'h%h", cache_master_xactor_shim_bff_rv$port1__read[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd1 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_reset &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h5065 = $stime;
	  #0;
	end
    v__h5059 = v__h5065 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_reset &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("%0d: %s.rl_start_reset", v__h5059, "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	begin
	  v__h32719 = $stime;
	  #0;
	end
    v__h32713 = v__h32719 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write("%0d: %s.req: op:", v__h32713, "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  req_op == 2'd0)
	$write("CACHE_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  req_op == 2'd1)
	$write("CACHE_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  req_op != 2'd0 &&
	  req_op != 2'd1)
	$write("CACHE_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(" f3:%0d addr:0x%0h st_value:0x%0h priv:",
	       req_f3,
	       req_addr,
	       req_st_value);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  req_priv == 2'b0)
	$write("U");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  req_priv == 2'b01)
	$write("S");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  req_priv == 2'b11)
	$write("M");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57 &&
	  req_priv != 2'b0 &&
	  req_priv != 2'b01 &&
	  req_priv != 2'b11)
	$write("RESERVED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$write(" sstatus_SUM:%0d mstatus_MXR:%0d satp:0x%0h",
	       req_sstatus_SUM,
	       req_mstatus_MXR,
	       req_satp,
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("    amo_funct7 = 0x%0h", req_amo_funct7);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req &&
	  req_f3_BITS_1_TO_0_62_EQ_0b0_63_OR_req_f3_BITS_ETC___d992 &&
	  NOT_cache_cfg_verbosity_read__5_ULE_1_6___d57)
	$display("    fa_req_ram_B tagCSet [0x%0x] word64_set [0x%0d]",
		 req_addr[11:5],
		 req_addr[11:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
  end
  // synopsys translate_on
endmodule  // mkMMU_DCache

