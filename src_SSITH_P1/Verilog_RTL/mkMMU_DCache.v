//
// Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
//
// On Thu Aug  8 16:28:37 BST 2019
//
//
// Ports:
// Name                         I/O  size props
// RDY_set_verbosity              O     1 const
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1
// valid                          O     1
// addr                           O    32 reg
// word128_fst                    O     1
// word128_snd                    O   128
// st_amo_val_fst                 O     1
// st_amo_val_snd                 O   128
// exc                            O     1
// exc_code                       O     6 reg
// RDY_server_flush_request_put   O     1
// RDY_server_flush_response_get  O     1
// RDY_tlb_flush                  O     1
// mem_master_awid                O     4
// mem_master_awaddr              O    64
// mem_master_awlen               O     8
// mem_master_awsize              O     3
// mem_master_awburst             O     2
// mem_master_awlock              O     1
// mem_master_awcache             O     4
// mem_master_awprot              O     3
// mem_master_awqos               O     4
// mem_master_awregion            O     4
// mem_master_awvalid             O     1
// mem_master_wdata               O   128
// mem_master_wstrb               O    16
// mem_master_wlast               O     1
// mem_master_wuser               O     2
// mem_master_wvalid              O     1
// mem_master_bready              O     1
// mem_master_arid                O     4
// mem_master_araddr              O    64
// mem_master_arlen               O     8
// mem_master_arsize              O     3
// mem_master_arburst             O     2
// mem_master_arlock              O     1
// mem_master_arcache             O     4
// mem_master_arprot              O     3
// mem_master_arqos               O     4
// mem_master_arregion            O     4
// mem_master_arvalid             O     1
// mem_master_rready              O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_verbosity_verbosity        I     4 reg
// req_op                         I     2
// req_width_code                 I     3
// req_is_unsigned                I     1 reg
// req_amo_funct7                 I     7 reg
// req_addr                       I    32
// req_st_value                   I   129
// req_priv                       I     2 unused
// req_sstatus_SUM                I     1 unused
// req_mstatus_MXR                I     1 unused
// req_satp                       I    32 unused
// mem_master_awready             I     1
// mem_master_wready              I     1
// mem_master_bid                 I     4
// mem_master_bresp               I     2
// mem_master_arready             I     1
// mem_master_rid                 I     4
// mem_master_rdata               I   128
// mem_master_rresp               I     2
// mem_master_rlast               I     1
// mem_master_ruser               I     2
// EN_set_verbosity               I     1
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_req                         I     1
// EN_commit                      I     1
// EN_server_flush_request_put    I     1
// EN_server_flush_response_get   I     1
// EN_tlb_flush                   I     1 unused
// mem_master_bvalid              I     1
// mem_master_rvalid              I     1
//
// Combinational paths from inputs to outputs:
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> valid
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> word128_fst
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> word128_snd
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awid
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awaddr
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awlen
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awsize
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awburst
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awlock
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awcache
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awprot
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awqos
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awregion
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awuser
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_awvalid
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_wdata
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_wstrb
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_wlast
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_wuser
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> mem_master_wvalid
//   EN_req -> RDY_server_flush_request_put
//   EN_req -> RDY_tlb_flush
//   EN_req -> mem_master_arid
//   EN_req -> mem_master_araddr
//   EN_req -> mem_master_arlen
//   EN_req -> mem_master_arsize
//   EN_req -> mem_master_arburst
//   EN_req -> mem_master_arlock
//   EN_req -> mem_master_arcache
//   EN_req -> mem_master_arprot
//   EN_req -> mem_master_arqos
//   EN_req -> mem_master_arregion
//   EN_req -> mem_master_aruser
//   EN_req -> mem_master_arvalid
//   EN_commit -> st_amo_val_fst
//   EN_commit -> st_amo_val_snd
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMMU_DCache(CLK,
		    RST_N,

		    set_verbosity_verbosity,
		    EN_set_verbosity,
		    RDY_set_verbosity,

		    EN_server_reset_request_put,
		    RDY_server_reset_request_put,

		    EN_server_reset_response_get,
		    RDY_server_reset_response_get,

		    req_op,
		    req_width_code,
		    req_is_unsigned,
		    req_amo_funct7,
		    req_addr,
		    req_st_value,
		    req_priv,
		    req_sstatus_SUM,
		    req_mstatus_MXR,
		    req_satp,
		    EN_req,

		    EN_commit,

		    valid,

		    addr,

		    word128_fst,

		    word128_snd,

		    st_amo_val_fst,

		    st_amo_val_snd,

		    exc,

		    exc_code,

		    EN_server_flush_request_put,
		    RDY_server_flush_request_put,

		    EN_server_flush_response_get,
		    RDY_server_flush_response_get,

		    EN_tlb_flush,
		    RDY_tlb_flush,

		    mem_master_awid,

		    mem_master_awaddr,

		    mem_master_awlen,

		    mem_master_awsize,

		    mem_master_awburst,

		    mem_master_awlock,

		    mem_master_awcache,

		    mem_master_awprot,

		    mem_master_awqos,

		    mem_master_awregion,

		    mem_master_awvalid,

		    mem_master_awready,

		    mem_master_wdata,

		    mem_master_wstrb,

		    mem_master_wlast,

		    mem_master_wuser,

		    mem_master_wvalid,

		    mem_master_wready,

		    mem_master_bid,
		    mem_master_bresp,
		    mem_master_bvalid,

		    mem_master_bready,

		    mem_master_arid,

		    mem_master_araddr,

		    mem_master_arlen,

		    mem_master_arsize,

		    mem_master_arburst,

		    mem_master_arlock,

		    mem_master_arcache,

		    mem_master_arprot,

		    mem_master_arqos,

		    mem_master_arregion,

		    mem_master_arvalid,

		    mem_master_arready,

		    mem_master_rid,
		    mem_master_rdata,
		    mem_master_rresp,
		    mem_master_rlast,
		    mem_master_ruser,
		    mem_master_rvalid,

		    mem_master_rready);
  input  CLK;
  input  RST_N;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // action method req
  input  [1 : 0] req_op;
  input  [2 : 0] req_width_code;
  input  req_is_unsigned;
  input  [6 : 0] req_amo_funct7;
  input  [31 : 0] req_addr;
  input  [128 : 0] req_st_value;
  input  [1 : 0] req_priv;
  input  req_sstatus_SUM;
  input  req_mstatus_MXR;
  input  [31 : 0] req_satp;
  input  EN_req;

  // action method commit
  input  EN_commit;

  // value method valid
  output valid;

  // value method addr
  output [31 : 0] addr;

  // value method word128_fst
  output word128_fst;

  // value method word128_snd
  output [127 : 0] word128_snd;

  // value method st_amo_val_fst
  output st_amo_val_fst;

  // value method st_amo_val_snd
  output [127 : 0] st_amo_val_snd;

  // value method exc
  output exc;

  // value method exc_code
  output [5 : 0] exc_code;

  // action method server_flush_request_put
  input  EN_server_flush_request_put;
  output RDY_server_flush_request_put;

  // action method server_flush_response_get
  input  EN_server_flush_response_get;
  output RDY_server_flush_response_get;

  // action method tlb_flush
  input  EN_tlb_flush;
  output RDY_tlb_flush;

  // value method mem_master_aw_awid
  output [3 : 0] mem_master_awid;

  // value method mem_master_aw_awaddr
  output [63 : 0] mem_master_awaddr;

  // value method mem_master_aw_awlen
  output [7 : 0] mem_master_awlen;

  // value method mem_master_aw_awsize
  output [2 : 0] mem_master_awsize;

  // value method mem_master_aw_awburst
  output [1 : 0] mem_master_awburst;

  // value method mem_master_aw_awlock
  output mem_master_awlock;

  // value method mem_master_aw_awcache
  output [3 : 0] mem_master_awcache;

  // value method mem_master_aw_awprot
  output [2 : 0] mem_master_awprot;

  // value method mem_master_aw_awqos
  output [3 : 0] mem_master_awqos;

  // value method mem_master_aw_awregion
  output [3 : 0] mem_master_awregion;

  // value method mem_master_aw_awuser

  // value method mem_master_aw_awvalid
  output mem_master_awvalid;

  // action method mem_master_aw_awready
  input  mem_master_awready;

  // value method mem_master_w_wdata
  output [127 : 0] mem_master_wdata;

  // value method mem_master_w_wstrb
  output [15 : 0] mem_master_wstrb;

  // value method mem_master_w_wlast
  output mem_master_wlast;

  // value method mem_master_w_wuser
  output [1 : 0] mem_master_wuser;

  // value method mem_master_w_wvalid
  output mem_master_wvalid;

  // action method mem_master_w_wready
  input  mem_master_wready;

  // action method mem_master_b_bflit
  input  [3 : 0] mem_master_bid;
  input  [1 : 0] mem_master_bresp;
  input  mem_master_bvalid;

  // value method mem_master_b_bready
  output mem_master_bready;

  // value method mem_master_ar_arid
  output [3 : 0] mem_master_arid;

  // value method mem_master_ar_araddr
  output [63 : 0] mem_master_araddr;

  // value method mem_master_ar_arlen
  output [7 : 0] mem_master_arlen;

  // value method mem_master_ar_arsize
  output [2 : 0] mem_master_arsize;

  // value method mem_master_ar_arburst
  output [1 : 0] mem_master_arburst;

  // value method mem_master_ar_arlock
  output mem_master_arlock;

  // value method mem_master_ar_arcache
  output [3 : 0] mem_master_arcache;

  // value method mem_master_ar_arprot
  output [2 : 0] mem_master_arprot;

  // value method mem_master_ar_arqos
  output [3 : 0] mem_master_arqos;

  // value method mem_master_ar_arregion
  output [3 : 0] mem_master_arregion;

  // value method mem_master_ar_aruser

  // value method mem_master_ar_arvalid
  output mem_master_arvalid;

  // action method mem_master_ar_arready
  input  mem_master_arready;

  // action method mem_master_r_rflit
  input  [3 : 0] mem_master_rid;
  input  [127 : 0] mem_master_rdata;
  input  [1 : 0] mem_master_rresp;
  input  mem_master_rlast;
  input  [1 : 0] mem_master_ruser;
  input  mem_master_rvalid;

  // value method mem_master_r_rready
  output mem_master_rready;

  // signals for module outputs
  wire [127 : 0] mem_master_wdata, st_amo_val_snd, word128_snd;
  wire [63 : 0] mem_master_araddr, mem_master_awaddr;
  wire [31 : 0] addr;
  wire [15 : 0] mem_master_wstrb;
  wire [7 : 0] mem_master_arlen, mem_master_awlen;
  wire [5 : 0] exc_code;
  wire [3 : 0] mem_master_arcache,
	       mem_master_arid,
	       mem_master_arqos,
	       mem_master_arregion,
	       mem_master_awcache,
	       mem_master_awid,
	       mem_master_awqos,
	       mem_master_awregion;
  wire [2 : 0] mem_master_arprot,
	       mem_master_arsize,
	       mem_master_awprot,
	       mem_master_awsize;
  wire [1 : 0] mem_master_arburst, mem_master_awburst, mem_master_wuser;
  wire RDY_server_flush_request_put,
       RDY_server_flush_response_get,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_set_verbosity,
       RDY_tlb_flush,
       exc,
       mem_master_arlock,
       mem_master_arvalid,
       mem_master_awlock,
       mem_master_awvalid,
       mem_master_bready,
       mem_master_rready,
       mem_master_wlast,
       mem_master_wvalid,
       st_amo_val_fst,
       valid,
       word128_fst;

  // inlined wires
  reg [147 : 0] cache_master_xactor_shim_wff_rv$port0__write_1;
  reg [128 : 0] cache_dw_output_ld_val$wget;
  reg [97 : 0] cache_master_xactor_shim_awff_rv$port0__write_1;
  wire [147 : 0] cache_master_xactor_shim_wff_rv$port1__read,
		 cache_master_xactor_shim_wff_rv$port2__read,
		 cache_master_xactor_shim_wff_rv$port3__read;
  wire [137 : 0] cache_master_xactor_shim_rff_rv$port0__write_1,
		 cache_master_xactor_shim_rff_rv$port1__read,
		 cache_master_xactor_shim_rff_rv$port2__read,
		 cache_master_xactor_shim_rff_rv$port3__read;
  wire [136 : 0] cache_master_xactor_ug_master_u_r_putWire$wget;
  wire [128 : 0] cache_dw_output_st_amo_val$wget;
  wire [97 : 0] cache_master_xactor_shim_arff_rv$port0__write_1,
		cache_master_xactor_shim_arff_rv$port1__read,
		cache_master_xactor_shim_arff_rv$port2__read,
		cache_master_xactor_shim_arff_rv$port3__read,
		cache_master_xactor_shim_awff_rv$port1__read,
		cache_master_xactor_shim_awff_rv$port2__read,
		cache_master_xactor_shim_awff_rv$port3__read;
  wire [10 : 0] cache_crg_sb_to_load_delay$port0__write_1,
		cache_crg_sb_to_load_delay$port2__read;
  wire [6 : 0] cache_master_xactor_shim_bff_rv$port0__write_1,
	       cache_master_xactor_shim_bff_rv$port1__read,
	       cache_master_xactor_shim_bff_rv$port2__read,
	       cache_master_xactor_shim_bff_rv$port3__read;
  wire [5 : 0] cache_master_xactor_ug_master_u_b_putWire$wget;
  wire cache_crg_sb_to_load_delay$EN_port1__write,
       cache_dw_valid$whas,
       cache_master_xactor_shim_arff_rv$EN_port0__write,
       cache_master_xactor_shim_awff_rv$EN_port0__write,
       cache_master_xactor_shim_rff_rv$EN_port1__write,
       cache_master_xactor_shim_wff_rv$EN_port0__write,
       cache_master_xactor_ug_master_u_ar_dropWire$whas,
       cache_master_xactor_ug_master_u_aw_dropWire$whas,
       cache_master_xactor_ug_master_u_b_putWire$whas,
       cache_master_xactor_ug_master_u_r_putWire$whas,
       cache_master_xactor_ug_master_u_w_dropWire$whas;

  // register cache_cfg_verbosity
  reg [3 : 0] cache_cfg_verbosity;
  wire [3 : 0] cache_cfg_verbosity$D_IN;
  wire cache_cfg_verbosity$EN;

  // register cache_crg_sb_to_load_delay
  reg [10 : 0] cache_crg_sb_to_load_delay;
  wire [10 : 0] cache_crg_sb_to_load_delay$D_IN;
  wire cache_crg_sb_to_load_delay$EN;

  // register cache_ctr_wr_rsps_pending_inrg
  reg [3 : 0] cache_ctr_wr_rsps_pending_inrg;
  reg [3 : 0] cache_ctr_wr_rsps_pending_inrg$D_IN;
  wire cache_ctr_wr_rsps_pending_inrg$EN;

  // register cache_ctr_wr_rsps_pending_outrg
  reg [3 : 0] cache_ctr_wr_rsps_pending_outrg;
  wire [3 : 0] cache_ctr_wr_rsps_pending_outrg$D_IN;
  wire cache_ctr_wr_rsps_pending_outrg$EN;

  // register cache_master_xactor_clearing
  reg cache_master_xactor_clearing;
  wire cache_master_xactor_clearing$D_IN, cache_master_xactor_clearing$EN;

  // register cache_master_xactor_shim_arff_rv
  reg [97 : 0] cache_master_xactor_shim_arff_rv;
  wire [97 : 0] cache_master_xactor_shim_arff_rv$D_IN;
  wire cache_master_xactor_shim_arff_rv$EN;

  // register cache_master_xactor_shim_awff_rv
  reg [97 : 0] cache_master_xactor_shim_awff_rv;
  wire [97 : 0] cache_master_xactor_shim_awff_rv$D_IN;
  wire cache_master_xactor_shim_awff_rv$EN;

  // register cache_master_xactor_shim_bff_rv
  reg [6 : 0] cache_master_xactor_shim_bff_rv;
  wire [6 : 0] cache_master_xactor_shim_bff_rv$D_IN;
  wire cache_master_xactor_shim_bff_rv$EN;

  // register cache_master_xactor_shim_rff_rv
  reg [137 : 0] cache_master_xactor_shim_rff_rv;
  wire [137 : 0] cache_master_xactor_shim_rff_rv$D_IN;
  wire cache_master_xactor_shim_rff_rv$EN;

  // register cache_master_xactor_shim_wff_rv
  reg [147 : 0] cache_master_xactor_shim_wff_rv;
  wire [147 : 0] cache_master_xactor_shim_wff_rv$D_IN;
  wire cache_master_xactor_shim_wff_rv$EN;

  // register cache_rg_addr
  reg [31 : 0] cache_rg_addr;
  wire [31 : 0] cache_rg_addr$D_IN;
  wire cache_rg_addr$EN;

  // register cache_rg_amo_funct7
  reg [6 : 0] cache_rg_amo_funct7;
  wire [6 : 0] cache_rg_amo_funct7$D_IN;
  wire cache_rg_amo_funct7$EN;

  // register cache_rg_cset_in_cache
  reg [5 : 0] cache_rg_cset_in_cache;
  wire [5 : 0] cache_rg_cset_in_cache$D_IN;
  wire cache_rg_cset_in_cache$EN;

  // register cache_rg_error_during_refill
  reg cache_rg_error_during_refill;
  wire cache_rg_error_during_refill$D_IN, cache_rg_error_during_refill$EN;

  // register cache_rg_exc_code
  reg [5 : 0] cache_rg_exc_code;
  reg [5 : 0] cache_rg_exc_code$D_IN;
  wire cache_rg_exc_code$EN;

  // register cache_rg_is_unsigned
  reg cache_rg_is_unsigned;
  wire cache_rg_is_unsigned$D_IN, cache_rg_is_unsigned$EN;

  // register cache_rg_ld_val
  reg [128 : 0] cache_rg_ld_val;
  reg [128 : 0] cache_rg_ld_val$D_IN;
  wire cache_rg_ld_val$EN;

  // register cache_rg_lower_word64
  reg [63 : 0] cache_rg_lower_word64;
  wire [63 : 0] cache_rg_lower_word64$D_IN;
  wire cache_rg_lower_word64$EN;

  // register cache_rg_lower_word64_full
  reg cache_rg_lower_word64_full;
  wire cache_rg_lower_word64_full$D_IN, cache_rg_lower_word64_full$EN;

  // register cache_rg_lrsc_pa
  reg [31 : 0] cache_rg_lrsc_pa;
  wire [31 : 0] cache_rg_lrsc_pa$D_IN;
  wire cache_rg_lrsc_pa$EN;

  // register cache_rg_lrsc_valid
  reg cache_rg_lrsc_valid;
  wire cache_rg_lrsc_valid$D_IN, cache_rg_lrsc_valid$EN;

  // register cache_rg_op
  reg [1 : 0] cache_rg_op;
  wire [1 : 0] cache_rg_op$D_IN;
  wire cache_rg_op$EN;

  // register cache_rg_pa
  reg [31 : 0] cache_rg_pa;
  wire [31 : 0] cache_rg_pa$D_IN;
  wire cache_rg_pa$EN;

  // register cache_rg_pte_pa
  reg [31 : 0] cache_rg_pte_pa;
  wire [31 : 0] cache_rg_pte_pa$D_IN;
  wire cache_rg_pte_pa$EN;

  // register cache_rg_st_amo_val
  reg [128 : 0] cache_rg_st_amo_val;
  wire [128 : 0] cache_rg_st_amo_val$D_IN;
  wire cache_rg_st_amo_val$EN;

  // register cache_rg_state
  reg [3 : 0] cache_rg_state;
  reg [3 : 0] cache_rg_state$D_IN;
  wire cache_rg_state$EN;

  // register cache_rg_width_code
  reg [2 : 0] cache_rg_width_code;
  wire [2 : 0] cache_rg_width_code$D_IN;
  wire cache_rg_width_code$EN;

  // register cache_rg_word128_set_in_cache
  reg [7 : 0] cache_rg_word128_set_in_cache;
  wire [7 : 0] cache_rg_word128_set_in_cache$D_IN;
  wire cache_rg_word128_set_in_cache$EN;

  // ports of submodule cache_f_reset_reqs
  wire cache_f_reset_reqs$CLR,
       cache_f_reset_reqs$DEQ,
       cache_f_reset_reqs$D_IN,
       cache_f_reset_reqs$D_OUT,
       cache_f_reset_reqs$EMPTY_N,
       cache_f_reset_reqs$ENQ,
       cache_f_reset_reqs$FULL_N;

  // ports of submodule cache_f_reset_rsps
  wire cache_f_reset_rsps$CLR,
       cache_f_reset_rsps$DEQ,
       cache_f_reset_rsps$D_IN,
       cache_f_reset_rsps$D_OUT,
       cache_f_reset_rsps$EMPTY_N,
       cache_f_reset_rsps$ENQ,
       cache_f_reset_rsps$FULL_N;

  // ports of submodule cache_ram_state_and_ctag_cset
  wire [22 : 0] cache_ram_state_and_ctag_cset$DIA,
		cache_ram_state_and_ctag_cset$DIB,
		cache_ram_state_and_ctag_cset$DOB;
  wire [5 : 0] cache_ram_state_and_ctag_cset$ADDRA,
	       cache_ram_state_and_ctag_cset$ADDRB;
  wire cache_ram_state_and_ctag_cset$ENA,
       cache_ram_state_and_ctag_cset$ENB,
       cache_ram_state_and_ctag_cset$WEA,
       cache_ram_state_and_ctag_cset$WEB;

  // ports of submodule cache_ram_word128_set
  reg [129 : 0] cache_ram_word128_set$DIB;
  reg [7 : 0] cache_ram_word128_set$ADDRB;
  wire [129 : 0] cache_ram_word128_set$DIA, cache_ram_word128_set$DOB;
  wire [7 : 0] cache_ram_word128_set$ADDRA;
  wire cache_ram_word128_set$ENA,
       cache_ram_word128_set$ENB,
       cache_ram_word128_set$WEA,
       cache_ram_word128_set$WEB;

  // ports of submodule cache_soc_map
  wire [63 : 0] cache_soc_map$m_is_IO_addr_addr,
		cache_soc_map$m_is_mem_addr_addr,
		cache_soc_map$m_is_near_mem_IO_addr_addr;
  wire cache_soc_map$m_is_mem_addr;

  // rule scheduling signals
  wire CAN_FIRE_RL_cache_master_xactor_do_clear,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop,
       CAN_FIRE_RL_cache_rl_ST_AMO_response,
       CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop,
       CAN_FIRE_RL_cache_rl_discard_write_rsp,
       CAN_FIRE_RL_cache_rl_drive_exception_rsp,
       CAN_FIRE_RL_cache_rl_io_AMO_SC_req,
       CAN_FIRE_RL_cache_rl_io_AMO_op_req,
       CAN_FIRE_RL_cache_rl_io_AMO_read_rsp,
       CAN_FIRE_RL_cache_rl_io_read_req,
       CAN_FIRE_RL_cache_rl_io_read_rsp,
       CAN_FIRE_RL_cache_rl_io_write_req,
       CAN_FIRE_RL_cache_rl_maintain_io_read_rsp,
       CAN_FIRE_RL_cache_rl_probe_and_immed_rsp,
       CAN_FIRE_RL_cache_rl_rereq,
       CAN_FIRE_RL_cache_rl_reset,
       CAN_FIRE_RL_cache_rl_shift_sb_to_load_delay,
       CAN_FIRE_RL_cache_rl_start_cache_refill,
       CAN_FIRE_RL_cache_rl_start_reset,
       CAN_FIRE_commit,
       CAN_FIRE_mem_master_ar_arready,
       CAN_FIRE_mem_master_aw_awready,
       CAN_FIRE_mem_master_b_bflit,
       CAN_FIRE_mem_master_r_rflit,
       CAN_FIRE_mem_master_w_wready,
       CAN_FIRE_req,
       CAN_FIRE_server_flush_request_put,
       CAN_FIRE_server_flush_response_get,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_tlb_flush,
       WILL_FIRE_RL_cache_master_xactor_do_clear,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop,
       WILL_FIRE_RL_cache_rl_ST_AMO_response,
       WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop,
       WILL_FIRE_RL_cache_rl_discard_write_rsp,
       WILL_FIRE_RL_cache_rl_drive_exception_rsp,
       WILL_FIRE_RL_cache_rl_io_AMO_SC_req,
       WILL_FIRE_RL_cache_rl_io_AMO_op_req,
       WILL_FIRE_RL_cache_rl_io_AMO_read_rsp,
       WILL_FIRE_RL_cache_rl_io_read_req,
       WILL_FIRE_RL_cache_rl_io_read_rsp,
       WILL_FIRE_RL_cache_rl_io_write_req,
       WILL_FIRE_RL_cache_rl_maintain_io_read_rsp,
       WILL_FIRE_RL_cache_rl_probe_and_immed_rsp,
       WILL_FIRE_RL_cache_rl_rereq,
       WILL_FIRE_RL_cache_rl_reset,
       WILL_FIRE_RL_cache_rl_shift_sb_to_load_delay,
       WILL_FIRE_RL_cache_rl_start_cache_refill,
       WILL_FIRE_RL_cache_rl_start_reset,
       WILL_FIRE_commit,
       WILL_FIRE_mem_master_ar_arready,
       WILL_FIRE_mem_master_aw_awready,
       WILL_FIRE_mem_master_b_bflit,
       WILL_FIRE_mem_master_r_rflit,
       WILL_FIRE_mem_master_w_wready,
       WILL_FIRE_req,
       WILL_FIRE_server_flush_request_put,
       WILL_FIRE_server_flush_response_get,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_tlb_flush;

  // inputs to muxes for submodule ports
  wire [147 : 0] MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_1,
		 MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_2,
		 MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_3;
  wire [129 : 0] MUX_cache_ram_word128_set$a_put_3__VAL_1,
		 MUX_cache_ram_word128_set$a_put_3__VAL_2;
  wire [128 : 0] MUX_cache_dw_output_ld_val$wset_1__VAL_1,
		 MUX_cache_dw_output_ld_val$wset_1__VAL_2,
		 MUX_cache_dw_output_ld_val$wset_1__VAL_3,
		 MUX_cache_dw_output_st_amo_val$wset_1__VAL_1,
		 MUX_cache_rg_ld_val$write_1__VAL_2,
		 MUX_cache_rg_st_amo_val$write_1__VAL_2;
  wire [97 : 0] MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_1,
		MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_2,
		MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_1,
		MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_2;
  wire [22 : 0] MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1;
  wire [7 : 0] MUX_cache_ram_word128_set$b_put_2__VAL_2,
	       MUX_cache_ram_word128_set$b_put_2__VAL_4;
  wire [5 : 0] MUX_cache_rg_cset_in_cache$write_1__VAL_1,
	       MUX_cache_rg_exc_code$write_1__VAL_1,
	       MUX_cache_rg_exc_code$write_1__VAL_2;
  wire [3 : 0] MUX_cache_ctr_wr_rsps_pending_inrg$write_1__VAL_1,
	       MUX_cache_ctr_wr_rsps_pending_outrg$write_1__VAL_1,
	       MUX_cache_rg_state$write_1__VAL_12,
	       MUX_cache_rg_state$write_1__VAL_2,
	       MUX_cache_rg_state$write_1__VAL_4,
	       MUX_cache_rg_state$write_1__VAL_5;
  wire MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_1,
       MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_2,
       MUX_cache_dw_output_ld_val$wset_1__SEL_2,
       MUX_cache_dw_output_ld_val$wset_1__SEL_3,
       MUX_cache_dw_output_ld_val$wset_1__SEL_4,
       MUX_cache_master_xactor_shim_arff_rv$port0__write_1__SEL_1,
       MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1,
       MUX_cache_ram_word128_set$a_put_1__SEL_1,
       MUX_cache_ram_word128_set$b_put_1__SEL_2,
       MUX_cache_rg_error_during_refill$write_1__SEL_1,
       MUX_cache_rg_exc_code$write_1__SEL_2,
       MUX_cache_rg_exc_code$write_1__SEL_3,
       MUX_cache_rg_exc_code$write_1__SEL_4,
       MUX_cache_rg_exc_code$write_1__SEL_5,
       MUX_cache_rg_ld_val$write_1__SEL_2,
       MUX_cache_rg_lrsc_valid$write_1__SEL_2,
       MUX_cache_rg_lrsc_valid$write_1__VAL_2,
       MUX_cache_rg_state$write_1__SEL_12,
       MUX_cache_rg_state$write_1__SEL_13,
       MUX_cache_rg_state$write_1__SEL_2;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h5524;
  reg [31 : 0] v__h5625;
  reg [31 : 0] v__h6080;
  reg [31 : 0] v__h21473;
  reg [31 : 0] v__h25959;
  reg [31 : 0] v__h5098;
  reg [31 : 0] v__h34687;
  reg [31 : 0] v__h36714;
  reg [31 : 0] v__h36802;
  reg [31 : 0] v__h37499;
  reg [31 : 0] v__h37621;
  reg [31 : 0] v__h41633;
  reg [31 : 0] v__h41880;
  reg [31 : 0] v__h41841;
  reg [31 : 0] v__h35044;
  reg [31 : 0] v__h36489;
  reg [31 : 0] v__h36603;
  reg [31 : 0] v__h37922;
  reg [31 : 0] v__h38117;
  reg [31 : 0] v__h41326;
  reg [31 : 0] v__h38215;
  reg [31 : 0] v__h42271;
  reg [31 : 0] v__h31825;
  reg [31 : 0] v__h32781;
  reg [31 : 0] v__h33043;
  reg [31 : 0] v__h5092;
  reg [31 : 0] v__h5518;
  reg [31 : 0] v__h5619;
  reg [31 : 0] v__h6074;
  reg [31 : 0] v__h21467;
  reg [31 : 0] v__h25953;
  reg [31 : 0] v__h31819;
  reg [31 : 0] v__h32775;
  reg [31 : 0] v__h33037;
  reg [31 : 0] v__h34681;
  reg [31 : 0] v__h35038;
  reg [31 : 0] v__h36483;
  reg [31 : 0] v__h36597;
  reg [31 : 0] v__h36708;
  reg [31 : 0] v__h36796;
  reg [31 : 0] v__h37493;
  reg [31 : 0] v__h37615;
  reg [31 : 0] v__h37916;
  reg [31 : 0] v__h38111;
  reg [31 : 0] v__h38209;
  reg [31 : 0] v__h41320;
  reg [31 : 0] v__h41627;
  reg [31 : 0] v__h41835;
  reg [31 : 0] v__h41874;
  reg [31 : 0] v__h42265;
  // synopsys translate_on

  // remaining internal signals
  reg [127 : 0] CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q63,
		CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q66,
		IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1051,
		IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1091,
		IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1111,
		IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1223,
		IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1247,
		IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1259,
		IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d378,
		IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d418,
		IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d438,
		IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d516,
		IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d524,
		IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d528,
		IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d623,
		IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d640,
		IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d649,
		IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d733,
		IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d750,
		IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d759,
		_theResult___fst__h28303,
		_theResult___fst__h35282,
		_theResult___fst__h40790,
		_theResult___fst__h7425,
		mem_req_wr_data_wdata__h26395,
		mem_req_wr_data_wdata__h31224,
		mem_req_wr_data_wdata__h37044,
		mem_req_wr_data_wdata__h38434,
		x__h20330,
		x__h22742,
		x__h25722,
		x__h27060,
		x__h27298,
		x__h35356,
		x__h38620;
  reg [63 : 0] _theResult_____2__h27007, _theResult_____2__h38463;
  reg [15 : 0] mem_req_wr_data_wstrb__h31225, mem_req_wr_data_wstrb__h38435;
  reg [2 : 0] _theResult___fst_val__h38381, size_val__h37758;
  wire [146 : 0] cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q100;
  wire [129 : 0] cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273,
		 y__h7477;
  wire [127 : 0] IF_cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2__ETC___d460,
		 IF_cache_rg_op_4_EQ_1_02_OR_cache_rg_op_4_EQ_2_ETC___d797,
		 SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d287,
		 SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d292,
		 SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d297,
		 SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d302,
		 SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d307,
		 SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d312,
		 SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d317,
		 SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d322,
		 SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d326,
		 SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d331,
		 SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d336,
		 SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d341,
		 SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d346,
		 SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d351,
		 SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d356,
		 SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d361,
		 SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d381,
		 SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d385,
		 SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d389,
		 SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d393,
		 SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d397,
		 SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d401,
		 SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d405,
		 SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d409,
		 SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d421,
		 SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d425,
		 SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d429,
		 SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d433,
		 SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d441,
		 SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d445,
		 _theResult___snd_fst__h26404,
		 _theResult___snd_fst__h31233,
		 _theResult___snd_fst__h37053,
		 _theResult___snd_fst__h38443,
		 result__h20273,
		 result__h20341,
		 result__h20379,
		 result__h20412,
		 result__h20445,
		 result__h20478,
		 result__h20511,
		 result__h20544,
		 result__h20577,
		 result__h20610,
		 result__h20643,
		 result__h20676,
		 result__h20709,
		 result__h20742,
		 result__h20775,
		 result__h20808,
		 result__h20841,
		 result__h20896,
		 result__h20929,
		 result__h20962,
		 result__h20995,
		 result__h21028,
		 result__h21061,
		 result__h21094,
		 result__h21127,
		 result__h21174,
		 result__h21207,
		 result__h21240,
		 result__h21273,
		 result__h35284,
		 result__h35309,
		 result__h35367,
		 result__h35403,
		 result__h35436,
		 result__h35469,
		 result__h35502,
		 result__h35535,
		 result__h35568,
		 result__h35601,
		 result__h35634,
		 result__h35667,
		 result__h35700,
		 result__h35733,
		 result__h35766,
		 result__h35799,
		 result__h35832,
		 result__h35865,
		 result__h35920,
		 result__h35953,
		 result__h35986,
		 result__h36019,
		 result__h36052,
		 result__h36085,
		 result__h36118,
		 result__h36151,
		 result__h36198,
		 result__h36231,
		 result__h36264,
		 result__h36297,
		 result__h38701,
		 result__h39870,
		 result__h39902,
		 result__h39934,
		 result__h39966,
		 result__h39998,
		 result__h40030,
		 result__h40062,
		 result__h40094,
		 result__h40126,
		 result__h40158,
		 result__h40190,
		 result__h40222,
		 result__h40254,
		 result__h40286,
		 result__h40318,
		 result__h40372,
		 result__h40404,
		 result__h40436,
		 result__h40468,
		 result__h40500,
		 result__h40532,
		 result__h40564,
		 result__h40596,
		 result__h40642,
		 result__h40674,
		 result__h40706,
		 result__h40738,
		 result__h40792,
		 result__h40821,
		 result__h7427,
		 word128__h38302;
  wire [96 : 0] cache_master_xactor_shim_arff_rvport1__read_B_ETC__q67,
		cache_master_xactor_shim_awff_rvport1__read_B_ETC__q99;
  wire [63 : 0] IF_cache_rg_width_code_97_EQ_2_02_THEN_SEXT_IF_ETC___d1274,
		IF_cache_rg_width_code_97_EQ_2_02_THEN_SEXT_IF_ETC___d538,
		IF_cache_rg_width_code_97_EQ_2_02_THEN_SEXT_ca_ETC___d667,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q18,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q3,
		cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q53,
		cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q54,
		cline_fabric_addr__h31878,
		mem_req_wr_addr_awaddr__h31088,
		mem_req_wr_addr_awaddr__h38298,
		new_st_val__h27153,
		new_st_val__h27246,
		new_st_val__h28394,
		new_st_val__h28398,
		new_st_val__h28402,
		new_st_val__h28406,
		new_st_val__h28411,
		new_st_val__h28417,
		new_st_val__h28422,
		new_st_val__h38475,
		new_st_val__h38568,
		new_st_val__h40883,
		new_st_val__h40887,
		new_st_val__h40891,
		new_st_val__h40895,
		new_st_val__h40900,
		new_st_val__h40906,
		new_st_val__h40911,
		w1___1__h27212,
		w1___1__h38534,
		w1__h26999,
		w1__h38455,
		w2__h27001,
		x5356_BITS_127_TO_64__q86,
		x5356_BITS_63_TO_0__q71,
		x__h27151,
		x__h38473;
  wire [31 : 0] IF_cache_rg_addr_BITS_4_TO_0_EQ_0_THEN_1_ELSE_0__q2,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q13,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q21,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q28,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q7,
		cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q49,
		cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q50,
		cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q51,
		cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q52,
		cache_rg_st_amo_val_BITS_31_TO_0__q65,
		cline_addr__h31877,
		x5356_BITS_127_TO_96__q93,
		x5356_BITS_31_TO_0__q70,
		x5356_BITS_63_TO_32__q77,
		x5356_BITS_95_TO_64__q85,
		x7298_BITS_31_TO_0__q64,
		x8620_BITS_31_TO_0__q98;
  wire [21 : 0] pa_ctag__h6993;
  wire [15 : 0] cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q10,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q12,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q16,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q20,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q24,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q27,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q31,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q6,
		cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q33,
		cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q35,
		cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q37,
		cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q40,
		cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q41,
		cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q43,
		cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q45,
		cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q47,
		strobe128__h31152,
		strobe128__h31155,
		strobe128__h31158,
		strobe128__h31161,
		strobe128__h38362,
		strobe128__h38365,
		strobe128__h38368,
		strobe128__h38371,
		x5356_BITS_111_TO_96__q92,
		x5356_BITS_127_TO_112__q96,
		x5356_BITS_15_TO_0__q69,
		x5356_BITS_31_TO_16__q74,
		x5356_BITS_47_TO_32__q78,
		x5356_BITS_63_TO_48__q81,
		x5356_BITS_79_TO_64__q84,
		x5356_BITS_95_TO_80__q89;
  wire [7 : 0] cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q11,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q14,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q15,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q17,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q19,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q22,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q23,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q25,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q26,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q29,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q30,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q32,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q4,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q5,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q8,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q9,
	       cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q34,
	       cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q36,
	       cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q38,
	       cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q39,
	       cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q42,
	       cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q44,
	       cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q46,
	       cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q48,
	       cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q55,
	       cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q56,
	       cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q57,
	       cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q58,
	       cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q59,
	       cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q60,
	       cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q61,
	       cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q62,
	       x5356_BITS_103_TO_96__q91,
	       x5356_BITS_111_TO_104__q94,
	       x5356_BITS_119_TO_112__q95,
	       x5356_BITS_127_TO_120__q97,
	       x5356_BITS_15_TO_8__q72,
	       x5356_BITS_23_TO_16__q73,
	       x5356_BITS_31_TO_24__q75,
	       x5356_BITS_39_TO_32__q76,
	       x5356_BITS_47_TO_40__q79,
	       x5356_BITS_55_TO_48__q80,
	       x5356_BITS_63_TO_56__q82,
	       x5356_BITS_71_TO_64__q83,
	       x5356_BITS_79_TO_72__q87,
	       x5356_BITS_7_TO_0__q68,
	       x5356_BITS_87_TO_80__q88,
	       x5356_BITS_95_TO_88__q90;
  wire [6 : 0] shift_bits__h31095, shift_bits__h38305;
  wire [5 : 0] access_exc_code__h4849;
  wire [3 : 0] IF_cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2__ETC___d168,
	       IF_cache_rg_op_4_EQ_1_02_OR_cache_rg_op_4_EQ_2_ETC___d167,
	       cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d883,
	       x__h27040;
  wire [2 : 0] IF_cache_rg_op_4_EQ_1_02_OR_cache_rg_op_4_EQ_2_ETC___d810;
  wire [1 : 0] _0__q1,
	       cache_ram_word128_set_b_read__56_BITS_129_TO_1_ETC___d558,
	       mem_req_wr_data_wuser__h26398,
	       x__h22614,
	       x__h26955,
	       y__h27023;
  wire IF_cache_rg_op_4_EQ_1_02_OR_cache_rg_op_4_EQ_2_ETC___d132,
       IF_cache_rg_width_code_97_EQ_3_06_THEN_IF_cach_ETC___d281,
       NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55,
       NOT_cache_cfg_verbosity_read__3_ULE_2_03___d904,
       NOT_cache_dw_commit_whas__5_6_OR_NOT_cache_dw__ETC___d165,
       NOT_cache_f_reset_reqs_notEmpty__4_36_AND_cach_ETC___d147,
       NOT_cache_f_reset_reqs_notEmpty__4_36_AND_cach_ETC___d952,
       NOT_cache_master_xactor_clearing_read__0_8_AND_ETC___d1168,
       NOT_cache_ram_state_and_ctag_cset_b_read__22_B_ETC___d131,
       NOT_cache_ram_state_and_ctag_cset_b_read__22_B_ETC___d176,
       NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d162,
       NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d783,
       NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d834,
       NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d844,
       NOT_cache_rg_op_4_EQ_1_02_82_AND_NOT_cache_rg__ETC___d185,
       NOT_cache_rg_op_4_EQ_1_02_82_AND_NOT_cache_rg__ETC___d543,
       NOT_cache_rg_op_4_EQ_1_02_82_AND_NOT_cache_rg__ETC___d776,
       NOT_cache_rg_op_4_EQ_1_02_82_AND_NOT_cache_rg__ETC___d854,
       NOT_cache_rg_op_4_EQ_1_02_82_AND_NOT_cache_rg__ETC___d858,
       NOT_cache_rg_op_4_EQ_1_02_82_AND_NOT_cache_rg__ETC___d864,
       NOT_cache_rg_op_4_EQ_2_6_40_OR_NOT_cache_rg_am_ETC___d541,
       NOT_cache_rg_op_4_EQ_2_6_40_OR_NOT_cache_rg_am_ETC___d774,
       NOT_cache_rg_op_4_EQ_2_6_40_OR_NOT_cache_rg_am_ETC___d832,
       NOT_cache_rg_op_4_EQ_2_6_40_OR_NOT_cache_rg_am_ETC___d837,
       NOT_cache_rg_op_4_EQ_2_6_40_OR_NOT_cache_rg_am_ETC___d842,
       NOT_req_width_code_EQ_0b0_366_367_AND_NOT_req__ETC___d1386,
       cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d484,
       cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d822,
       cache_f_reset_reqs_i_notEmpty__3_AND_cache_f_r_ETC___d66,
       cache_ram_state_and_ctag_cset_b_read__22_BITS__ETC___d128,
       cache_ram_state_and_ctag_cset_b_read__22_BIT_2_ETC___d177,
       cache_rg_addr_0_EQ_cache_rg_lrsc_pa_08___d174,
       cache_rg_amo_funct7_7_BITS_6_TO_2_8_EQ_0b10_9__ETC___d491,
       cache_rg_lrsc_pa_08_EQ_cache_rg_addr_0___d109,
       cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d157,
       cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d188,
       cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d194,
       cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d283,
       cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d470,
       cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d486,
       cache_rg_op_4_EQ_1_02_OR_cache_rg_op_4_EQ_2_6__ETC___d186,
       cache_rg_op_4_EQ_1_02_OR_cache_rg_op_4_EQ_2_6__ETC___d544,
       cache_rg_op_4_EQ_1_02_OR_cache_rg_op_4_EQ_2_6__ETC___d777,
       cache_rg_op_4_EQ_1_02_OR_cache_rg_op_4_EQ_2_6__ETC___d781,
       cache_rg_op_4_EQ_2_6_AND_cache_rg_amo_funct7_7_ETC___d121,
       cache_rg_op_4_EQ_2_6_AND_cache_rg_amo_funct7_7_ETC___d849,
       cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d498,
       cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d546,
       cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d860,
       cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d869,
       lrsc_result__h21863,
       req_width_code_EQ_0b0_366_OR_req_width_code_EQ_ETC___d1402,
       req_width_code_EQ_0b0_366_OR_req_width_code_EQ_ETC___d1407;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = cache_f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = cache_f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get =
	     !cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get =
	     !cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // action method req
  assign CAN_FIRE_req = 1'd1 ;
  assign WILL_FIRE_req = EN_req ;

  // action method commit
  assign CAN_FIRE_commit = 1'd1 ;
  assign WILL_FIRE_commit = EN_commit ;

  // value method valid
  assign valid = cache_dw_valid$whas ;

  // value method addr
  assign addr = cache_rg_addr ;

  // value method word128_fst
  assign word128_fst = cache_dw_output_ld_val$wget[128] ;

  // value method word128_snd
  assign word128_snd = cache_dw_output_ld_val$wget[127:0] ;

  // value method st_amo_val_fst
  assign st_amo_val_fst = cache_dw_output_st_amo_val$wget[128] ;

  // value method st_amo_val_snd
  assign st_amo_val_snd = cache_dw_output_st_amo_val$wget[127:0] ;

  // value method exc
  assign exc = CAN_FIRE_RL_cache_rl_drive_exception_rsp ;

  // value method exc_code
  assign exc_code = cache_rg_exc_code ;

  // action method server_flush_request_put
  assign RDY_server_flush_request_put = !EN_req && cache_f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_flush_request_put =
	     !EN_req && cache_f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_flush_request_put = EN_server_flush_request_put ;

  // action method server_flush_response_get
  assign RDY_server_flush_response_get =
	     cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_flush_response_get =
	     cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_flush_response_get = EN_server_flush_response_get ;

  // action method tlb_flush
  assign RDY_tlb_flush = !EN_req ;
  assign CAN_FIRE_tlb_flush = !EN_req ;
  assign WILL_FIRE_tlb_flush = EN_tlb_flush ;

  // value method mem_master_aw_awid
  assign mem_master_awid =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q99[96:93] ;

  // value method mem_master_aw_awaddr
  assign mem_master_awaddr =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q99[92:29] ;

  // value method mem_master_aw_awlen
  assign mem_master_awlen =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q99[28:21] ;

  // value method mem_master_aw_awsize
  assign mem_master_awsize =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q99[20:18] ;

  // value method mem_master_aw_awburst
  assign mem_master_awburst =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q99[17:16] ;

  // value method mem_master_aw_awlock
  assign mem_master_awlock =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q99[15] ;

  // value method mem_master_aw_awcache
  assign mem_master_awcache =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q99[14:11] ;

  // value method mem_master_aw_awprot
  assign mem_master_awprot =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q99[10:8] ;

  // value method mem_master_aw_awqos
  assign mem_master_awqos =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q99[7:4] ;

  // value method mem_master_aw_awregion
  assign mem_master_awregion =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q99[3:0] ;

  // value method mem_master_aw_awvalid
  assign mem_master_awvalid =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek ;

  // action method mem_master_aw_awready
  assign CAN_FIRE_mem_master_aw_awready = 1'd1 ;
  assign WILL_FIRE_mem_master_aw_awready = 1'd1 ;

  // value method mem_master_w_wdata
  assign mem_master_wdata =
	     cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q100[146:19] ;

  // value method mem_master_w_wstrb
  assign mem_master_wstrb =
	     cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q100[18:3] ;

  // value method mem_master_w_wlast
  assign mem_master_wlast =
	     cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q100[2] ;

  // value method mem_master_w_wuser
  assign mem_master_wuser =
	     cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q100[1:0] ;

  // value method mem_master_w_wvalid
  assign mem_master_wvalid =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek ;

  // action method mem_master_w_wready
  assign CAN_FIRE_mem_master_w_wready = 1'd1 ;
  assign WILL_FIRE_mem_master_w_wready = 1'd1 ;

  // action method mem_master_b_bflit
  assign CAN_FIRE_mem_master_b_bflit = 1'd1 ;
  assign WILL_FIRE_mem_master_b_bflit = mem_master_bvalid ;

  // value method mem_master_b_bready
  assign mem_master_bready = !cache_master_xactor_shim_bff_rv[6] ;

  // value method mem_master_ar_arid
  assign mem_master_arid =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q67[96:93] ;

  // value method mem_master_ar_araddr
  assign mem_master_araddr =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q67[92:29] ;

  // value method mem_master_ar_arlen
  assign mem_master_arlen =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q67[28:21] ;

  // value method mem_master_ar_arsize
  assign mem_master_arsize =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q67[20:18] ;

  // value method mem_master_ar_arburst
  assign mem_master_arburst =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q67[17:16] ;

  // value method mem_master_ar_arlock
  assign mem_master_arlock =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q67[15] ;

  // value method mem_master_ar_arcache
  assign mem_master_arcache =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q67[14:11] ;

  // value method mem_master_ar_arprot
  assign mem_master_arprot =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q67[10:8] ;

  // value method mem_master_ar_arqos
  assign mem_master_arqos =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q67[7:4] ;

  // value method mem_master_ar_arregion
  assign mem_master_arregion =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q67[3:0] ;

  // value method mem_master_ar_arvalid
  assign mem_master_arvalid =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek ;

  // action method mem_master_ar_arready
  assign CAN_FIRE_mem_master_ar_arready = 1'd1 ;
  assign WILL_FIRE_mem_master_ar_arready = 1'd1 ;

  // action method mem_master_r_rflit
  assign CAN_FIRE_mem_master_r_rflit = 1'd1 ;
  assign WILL_FIRE_mem_master_r_rflit = mem_master_rvalid ;

  // value method mem_master_r_rready
  assign mem_master_rready = !cache_master_xactor_shim_rff_rv[137] ;

  // submodule cache_f_reset_reqs
  FIFO2 #(.width(32'd1), .guarded(32'd1)) cache_f_reset_reqs(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(cache_f_reset_reqs$D_IN),
							     .ENQ(cache_f_reset_reqs$ENQ),
							     .DEQ(cache_f_reset_reqs$DEQ),
							     .CLR(cache_f_reset_reqs$CLR),
							     .D_OUT(cache_f_reset_reqs$D_OUT),
							     .FULL_N(cache_f_reset_reqs$FULL_N),
							     .EMPTY_N(cache_f_reset_reqs$EMPTY_N));

  // submodule cache_f_reset_rsps
  FIFO2 #(.width(32'd1), .guarded(32'd1)) cache_f_reset_rsps(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(cache_f_reset_rsps$D_IN),
							     .ENQ(cache_f_reset_rsps$ENQ),
							     .DEQ(cache_f_reset_rsps$DEQ),
							     .CLR(cache_f_reset_rsps$CLR),
							     .D_OUT(cache_f_reset_rsps$D_OUT),
							     .FULL_N(cache_f_reset_rsps$FULL_N),
							     .EMPTY_N(cache_f_reset_rsps$EMPTY_N));

  // submodule cache_ram_state_and_ctag_cset
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd23),
	  .MEMSIZE(7'd64)) cache_ram_state_and_ctag_cset(.CLKA(CLK),
							 .CLKB(CLK),
							 .ADDRA(cache_ram_state_and_ctag_cset$ADDRA),
							 .ADDRB(cache_ram_state_and_ctag_cset$ADDRB),
							 .DIA(cache_ram_state_and_ctag_cset$DIA),
							 .DIB(cache_ram_state_and_ctag_cset$DIB),
							 .WEA(cache_ram_state_and_ctag_cset$WEA),
							 .WEB(cache_ram_state_and_ctag_cset$WEB),
							 .ENA(cache_ram_state_and_ctag_cset$ENA),
							 .ENB(cache_ram_state_and_ctag_cset$ENB),
							 .DOA(),
							 .DOB(cache_ram_state_and_ctag_cset$DOB));

  // submodule cache_ram_word128_set
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd8),
	  .DATA_WIDTH(32'd130),
	  .MEMSIZE(9'd256)) cache_ram_word128_set(.CLKA(CLK),
						  .CLKB(CLK),
						  .ADDRA(cache_ram_word128_set$ADDRA),
						  .ADDRB(cache_ram_word128_set$ADDRB),
						  .DIA(cache_ram_word128_set$DIA),
						  .DIB(cache_ram_word128_set$DIB),
						  .WEA(cache_ram_word128_set$WEA),
						  .WEB(cache_ram_word128_set$WEB),
						  .ENA(cache_ram_word128_set$ENA),
						  .ENB(cache_ram_word128_set$ENB),
						  .DOA(),
						  .DOB(cache_ram_word128_set$DOB));

  // submodule cache_soc_map
  mkSoC_Map cache_soc_map(.CLK(CLK),
			  .RST_N(RST_N),
			  .m_is_IO_addr_addr(cache_soc_map$m_is_IO_addr_addr),
			  .m_is_mem_addr_addr(cache_soc_map$m_is_mem_addr_addr),
			  .m_is_near_mem_IO_addr_addr(cache_soc_map$m_is_near_mem_IO_addr_addr),
			  .m_plic_addr_range(),
			  .m_near_mem_io_addr_range(),
			  .m_flash_mem_addr_range(),
			  .m_ethernet_0_addr_range(),
			  .m_dma_0_addr_range(),
			  .m_uart16550_0_addr_range(),
			  .m_gpio_0_addr_range(),
			  .m_boot_rom_addr_range(),
			  .m_ddr4_0_uncached_addr_range(),
			  .m_ddr4_0_cached_addr_range(),
			  .m_is_mem_addr(cache_soc_map$m_is_mem_addr),
			  .m_is_IO_addr(),
			  .m_is_near_mem_IO_addr(),
			  .m_pc_reset_value(),
			  .m_pcc_reset_value(),
			  .m_ddc_reset_value(),
			  .m_mtcc_reset_value(),
			  .m_mepcc_reset_value(),
			  .m_mtvec_reset_value(),
			  .m_nmivec_reset_value());

  // rule RL_cache_rl_reset
  assign CAN_FIRE_RL_cache_rl_reset =
	     cache_f_reset_reqs_i_notEmpty__3_AND_cache_f_r_ETC___d66 &&
	     cache_rg_state == 4'd1 ;
  assign WILL_FIRE_RL_cache_rl_reset = CAN_FIRE_RL_cache_rl_reset ;

  // rule RL_cache_rl_shift_sb_to_load_delay
  assign CAN_FIRE_RL_cache_rl_shift_sb_to_load_delay = 1'd1 ;
  assign WILL_FIRE_RL_cache_rl_shift_sb_to_load_delay = 1'd1 ;

  // rule RL_cache_rl_probe_and_immed_rsp
  assign CAN_FIRE_RL_cache_rl_probe_and_immed_rsp =
	     (!EN_commit || !cache_soc_map$m_is_mem_addr ||
	      cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010 ||
	      IF_cache_rg_op_4_EQ_1_02_OR_cache_rg_op_4_EQ_2_ETC___d132) &&
	     NOT_cache_f_reset_reqs_notEmpty__4_36_AND_cach_ETC___d147 ;
  assign WILL_FIRE_RL_cache_rl_probe_and_immed_rsp =
	     CAN_FIRE_RL_cache_rl_probe_and_immed_rsp ;

  // rule RL_cache_rl_ST_AMO_response
  assign CAN_FIRE_RL_cache_rl_ST_AMO_response = cache_rg_state == 4'd11 ;
  assign WILL_FIRE_RL_cache_rl_ST_AMO_response =
	     CAN_FIRE_RL_cache_rl_ST_AMO_response ;

  // rule RL_cache_rl_start_reset
  assign CAN_FIRE_RL_cache_rl_start_reset =
	     cache_f_reset_reqs$EMPTY_N && cache_rg_state != 4'd1 ;
  assign WILL_FIRE_RL_cache_rl_start_reset =
	     CAN_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_io_read_req
  assign CAN_FIRE_RL_cache_rl_io_read_req =
	     !cache_master_xactor_clearing &&
	     !cache_master_xactor_shim_arff_rv[97] &&
	     NOT_cache_f_reset_reqs_notEmpty__4_36_AND_cach_ETC___d952 &&
	     cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d883 ==
	     4'd0 ;
  assign WILL_FIRE_RL_cache_rl_io_read_req =
	     CAN_FIRE_RL_cache_rl_io_read_req ;

  // rule RL_cache_rl_maintain_io_read_rsp
  assign CAN_FIRE_RL_cache_rl_maintain_io_read_rsp =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_state == 4'd14 ;
  assign WILL_FIRE_RL_cache_rl_maintain_io_read_rsp =
	     CAN_FIRE_RL_cache_rl_maintain_io_read_rsp ;

  // rule RL_cache_rl_io_write_req
  assign CAN_FIRE_RL_cache_rl_io_write_req =
	     !cache_master_xactor_clearing &&
	     !cache_master_xactor_shim_awff_rv[97] &&
	     !cache_master_xactor_shim_wff_rv[147] &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 4'd12 &&
	     cache_rg_op == 2'd1 ;
  assign WILL_FIRE_RL_cache_rl_io_write_req =
	     CAN_FIRE_RL_cache_rl_io_write_req ;

  // rule RL_cache_rl_io_AMO_SC_req
  assign CAN_FIRE_RL_cache_rl_io_AMO_SC_req =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_state == 4'd12 &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00011 ;
  assign WILL_FIRE_RL_cache_rl_io_AMO_SC_req =
	     CAN_FIRE_RL_cache_rl_io_AMO_SC_req ;

  // rule RL_cache_rl_io_AMO_op_req
  assign CAN_FIRE_RL_cache_rl_io_AMO_op_req =
	     !cache_master_xactor_clearing &&
	     !cache_master_xactor_shim_arff_rv[97] &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 4'd12 &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] != 5'b00010 &&
	     cache_rg_amo_funct7[6:2] != 5'b00011 ;
  assign WILL_FIRE_RL_cache_rl_io_AMO_op_req =
	     CAN_FIRE_RL_cache_rl_io_AMO_op_req ;

  // rule RL_cache_rl_drive_exception_rsp
  assign CAN_FIRE_RL_cache_rl_drive_exception_rsp =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_state == 4'd4 ;
  assign WILL_FIRE_RL_cache_rl_drive_exception_rsp =
	     CAN_FIRE_RL_cache_rl_drive_exception_rsp ;

  // rule RL_cache_master_xactor_ug_master_u_b_warnDoPut
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut =
	     cache_master_xactor_ug_master_u_b_putWire$whas &&
	     cache_master_xactor_shim_bff_rv[6] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut ;

  // rule RL_cache_master_xactor_ug_master_u_b_doPut
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut =
	     !cache_master_xactor_shim_bff_rv[6] &&
	     cache_master_xactor_ug_master_u_b_putWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut ;

  // rule RL_cache_rl_discard_write_rsp
  assign CAN_FIRE_RL_cache_rl_discard_write_rsp =
	     !cache_master_xactor_clearing &&
	     cache_master_xactor_shim_bff_rv$port1__read[6] ;
  assign WILL_FIRE_RL_cache_rl_discard_write_rsp =
	     CAN_FIRE_RL_cache_rl_discard_write_rsp ;

  // rule RL_cache_master_xactor_ug_master_u_r_warnDoPut
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut =
	     cache_master_xactor_ug_master_u_r_putWire$whas &&
	     cache_master_xactor_shim_rff_rv[137] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut ;

  // rule RL_cache_master_xactor_ug_master_u_r_doPut
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut =
	     !cache_master_xactor_shim_rff_rv[137] &&
	     cache_master_xactor_ug_master_u_r_putWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut ;

  // rule RL_cache_rl_io_read_rsp
  assign CAN_FIRE_RL_cache_rl_io_read_rsp =
	     !cache_master_xactor_clearing &&
	     cache_master_xactor_shim_rff_rv$port1__read[137] &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 4'd13 ;
  assign WILL_FIRE_RL_cache_rl_io_read_rsp =
	     CAN_FIRE_RL_cache_rl_io_read_rsp ;

  // rule RL_cache_rl_io_AMO_read_rsp
  assign CAN_FIRE_RL_cache_rl_io_AMO_read_rsp =
	     NOT_cache_master_xactor_clearing_read__0_8_AND_ETC___d1168 &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 4'd15 ;
  assign WILL_FIRE_RL_cache_rl_io_AMO_read_rsp =
	     CAN_FIRE_RL_cache_rl_io_AMO_read_rsp ;

  // rule RL_cache_rl_start_cache_refill
  assign CAN_FIRE_RL_cache_rl_start_cache_refill =
	     !cache_master_xactor_clearing &&
	     !cache_master_xactor_shim_arff_rv[97] &&
	     !EN_req &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 4'd8 &&
	     cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d883 ==
	     4'd0 ;
  assign WILL_FIRE_RL_cache_rl_start_cache_refill =
	     CAN_FIRE_RL_cache_rl_start_cache_refill && !EN_req ;

  // rule RL_cache_rl_cache_refill_rsps_loop
  assign CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop =
	     !cache_master_xactor_clearing &&
	     cache_master_xactor_shim_rff_rv$port1__read[137] &&
	     !EN_req &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 4'd9 ;
  assign WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop =
	     CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop && !EN_req ;

  // rule RL_cache_rl_rereq
  assign CAN_FIRE_RL_cache_rl_rereq =
	     !EN_req && !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 4'd10 ;
  assign WILL_FIRE_RL_cache_rl_rereq = CAN_FIRE_RL_cache_rl_rereq && !EN_req ;

  // rule RL_cache_master_xactor_ug_master_u_aw_setPeek
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek =
	     cache_master_xactor_shim_awff_rv$port1__read[97] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek ;

  // rule RL_cache_master_xactor_ug_master_u_aw_warnDoDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop =
	     cache_master_xactor_ug_master_u_aw_dropWire$whas &&
	     !cache_master_xactor_shim_awff_rv$port1__read[97] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop ;

  // rule RL_cache_master_xactor_ug_master_u_aw_doDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop =
	     cache_master_xactor_shim_awff_rv$port1__read[97] &&
	     cache_master_xactor_ug_master_u_aw_dropWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop ;

  // rule RL_cache_master_xactor_ug_master_u_w_setPeek
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek =
	     cache_master_xactor_shim_wff_rv$port1__read[147] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek ;

  // rule RL_cache_master_xactor_ug_master_u_w_warnDoDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop =
	     cache_master_xactor_ug_master_u_w_dropWire$whas &&
	     !cache_master_xactor_shim_wff_rv$port1__read[147] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop ;

  // rule RL_cache_master_xactor_ug_master_u_w_doDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop =
	     cache_master_xactor_shim_wff_rv$port1__read[147] &&
	     cache_master_xactor_ug_master_u_w_dropWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop ;

  // rule RL_cache_master_xactor_ug_master_u_ar_setPeek
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek =
	     cache_master_xactor_shim_arff_rv$port1__read[97] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek ;

  // rule RL_cache_master_xactor_ug_master_u_ar_warnDoDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop =
	     cache_master_xactor_ug_master_u_ar_dropWire$whas &&
	     !cache_master_xactor_shim_arff_rv$port1__read[97] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop ;

  // rule RL_cache_master_xactor_ug_master_u_ar_doDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop =
	     cache_master_xactor_shim_arff_rv$port1__read[97] &&
	     cache_master_xactor_ug_master_u_ar_dropWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop ;

  // rule RL_cache_master_xactor_do_clear
  assign CAN_FIRE_RL_cache_master_xactor_do_clear =
	     cache_master_xactor_clearing ;
  assign WILL_FIRE_RL_cache_master_xactor_do_clear =
	     cache_master_xactor_clearing ;

  // inputs to muxes for submodule ports
  assign MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 ;
  assign MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_soc_map$m_is_mem_addr &&
	     NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d783 ;
  assign MUX_cache_dw_output_ld_val$wset_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 ;
  assign MUX_cache_dw_output_ld_val$wset_1__SEL_3 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d194 ;
  assign MUX_cache_dw_output_ld_val$wset_1__SEL_4 =
	     WILL_FIRE_RL_cache_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_ST_AMO_response ;
  assign MUX_cache_master_xactor_shim_arff_rv$port0__write_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_io_AMO_op_req ||
	     WILL_FIRE_RL_cache_rl_io_read_req ;
  assign MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 =
	     EN_req &&
	     (req_width_code_EQ_0b0_366_OR_req_width_code_EQ_ETC___d1402 ||
	      req_width_code == 3'b100 && req_addr[3:0] == 4'b0) ;
  assign MUX_cache_ram_word128_set$a_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 ;
  assign MUX_cache_ram_word128_set$b_put_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_word128_set_in_cache[1:0] != 2'd3 ;
  assign MUX_cache_rg_error_during_refill$write_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 ;
  assign MUX_cache_rg_exc_code$write_1__SEL_2 =
	     EN_req &&
	     NOT_req_width_code_EQ_0b0_366_367_AND_NOT_req__ETC___d1386 &&
	     (req_width_code != 3'b100 || req_addr[3:0] != 4'b0) ;
  assign MUX_cache_rg_exc_code$write_1__SEL_3 =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 ;
  assign MUX_cache_rg_exc_code$write_1__SEL_4 =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 ;
  assign MUX_cache_rg_exc_code$write_1__SEL_5 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && !EN_commit ;
  assign MUX_cache_rg_ld_val$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d498 ;
  assign MUX_cache_rg_lrsc_valid$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d188 ;
  assign MUX_cache_rg_state$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_word128_set_in_cache[1:0] == 2'd3 ;
  assign MUX_cache_rg_state$write_1__SEL_12 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     NOT_cache_dw_commit_whas__5_6_OR_NOT_cache_dw__ETC___d165 ;
  assign MUX_cache_rg_state$write_1__SEL_13 =
	     WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 ;
  assign MUX_cache_ctr_wr_rsps_pending_inrg$write_1__VAL_1 =
	     cache_ctr_wr_rsps_pending_inrg + 4'd1 ;
  assign MUX_cache_ctr_wr_rsps_pending_outrg$write_1__VAL_1 =
	     cache_ctr_wr_rsps_pending_outrg + 4'd1 ;
  assign MUX_cache_dw_output_ld_val$wset_1__VAL_1 =
	     { 65'd0,
	       IF_cache_rg_width_code_97_EQ_2_02_THEN_SEXT_IF_ETC___d1274 } ;
  assign MUX_cache_dw_output_ld_val$wset_1__VAL_2 = { 1'd0, x__h35356 } ;
  assign MUX_cache_dw_output_ld_val$wset_1__VAL_3 =
	     { cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d283,
	       IF_cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2__ETC___d460 } ;
  assign MUX_cache_dw_output_st_amo_val$wset_1__VAL_1 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) ?
	       { _0__q1[IF_cache_rg_addr_BITS_4_TO_0_EQ_0_THEN_1_ELSE_0__q2[0]],
		 128'd0 } :
	       129'd0 ;
  assign MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_1 =
	     { 5'd16,
	       mem_req_wr_addr_awaddr__h38298,
	       8'd0,
	       size_val__h37758,
	       18'd65536 } ;
  assign MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_2 =
	     { 5'd16, cline_fabric_addr__h31878, 29'd7405568 } ;
  assign MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_1 =
	     { 5'd16,
	       mem_req_wr_addr_awaddr__h38298,
	       8'd0,
	       _theResult___fst_val__h38381,
	       18'd65536 } ;
  assign MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_2 =
	     { 5'd16,
	       mem_req_wr_addr_awaddr__h31088,
	       8'd0,
	       _theResult___fst_val__h38381,
	       18'd65536 } ;
  assign MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_1 =
	     { 1'd1,
	       mem_req_wr_data_wdata__h38434,
	       mem_req_wr_data_wstrb__h38435,
	       3'd4 } ;
  assign MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_2 =
	     { 1'd1,
	       IF_cache_rg_op_4_EQ_1_02_OR_cache_rg_op_4_EQ_2_ETC___d797,
	       mem_req_wr_data_wstrb__h31225,
	       IF_cache_rg_op_4_EQ_1_02_OR_cache_rg_op_4_EQ_2_ETC___d810 } ;
  assign MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_3 =
	     { 1'd1,
	       mem_req_wr_data_wdata__h37044,
	       mem_req_wr_data_wstrb__h38435,
	       1'd1,
	       mem_req_wr_data_wuser__h26398 } ;
  assign MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1 =
	     { 3'd4, cache_rg_pa[31:12] } ;
  assign MUX_cache_ram_word128_set$a_put_3__VAL_1 =
	     { cache_master_xactor_shim_rff_rv$port1__read[1:0],
	       cache_master_xactor_shim_rff_rv$port1__read[132:5] } ;
  assign MUX_cache_ram_word128_set$a_put_3__VAL_2 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       { x__h22614, x__h22742 } :
	       { cache_ram_word128_set_b_read__56_BITS_129_TO_1_ETC___d558,
		 x__h27060 } ;
  assign MUX_cache_ram_word128_set$b_put_2__VAL_2 =
	     cache_rg_word128_set_in_cache + 8'd1 ;
  assign MUX_cache_ram_word128_set$b_put_2__VAL_4 =
	     { cache_rg_addr[11:6], 2'd0 } ;
  assign MUX_cache_rg_cset_in_cache$write_1__VAL_1 =
	     cache_rg_cset_in_cache + 6'd1 ;
  assign MUX_cache_rg_exc_code$write_1__VAL_1 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) ?
	       6'd5 :
	       6'd7 ;
  assign MUX_cache_rg_exc_code$write_1__VAL_2 =
	     (req_op == 2'd0) ? 6'd4 : 6'd6 ;
  assign MUX_cache_rg_ld_val$write_1__VAL_2 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       { 128'd0, lrsc_result__h21863 } :
	       { 65'd0,
		 IF_cache_rg_width_code_97_EQ_2_02_THEN_SEXT_IF_ETC___d538 } ;
  assign MUX_cache_rg_lrsc_valid$write_1__VAL_2 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__22_BITS__ETC___d128 ;
  assign MUX_cache_rg_st_amo_val$write_1__VAL_2 = { 65'd0, x__h27151 } ;
  assign MUX_cache_rg_state$write_1__VAL_2 =
	     (cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 ||
	      cache_rg_error_during_refill) ?
	       4'd4 :
	       4'd10 ;
  assign MUX_cache_rg_state$write_1__VAL_4 =
	     (NOT_req_width_code_EQ_0b0_366_367_AND_NOT_req__ETC___d1386 &&
	      (req_width_code != 3'b100 || req_addr[3:0] != 4'b0)) ?
	       4'd4 :
	       4'd3 ;
  assign MUX_cache_rg_state$write_1__VAL_5 =
	     (cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0) ?
	       4'd14 :
	       4'd4 ;
  assign MUX_cache_rg_state$write_1__VAL_12 =
	     EN_commit ?
	       (cache_soc_map$m_is_mem_addr ?
		  IF_cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2__ETC___d168 :
		  4'd12) :
	       4'd4 ;

  // inlined wires
  assign cache_master_xactor_ug_master_u_b_putWire$wget =
	     { mem_master_bid, mem_master_bresp } ;
  assign cache_master_xactor_ug_master_u_b_putWire$whas =
	     mem_master_bvalid && !cache_master_xactor_shim_bff_rv[6] ;
  assign cache_master_xactor_ug_master_u_r_putWire$wget =
	     { mem_master_rid,
	       mem_master_rdata,
	       mem_master_rresp,
	       mem_master_rlast,
	       mem_master_ruser } ;
  assign cache_master_xactor_ug_master_u_r_putWire$whas =
	     mem_master_rvalid && !cache_master_xactor_shim_rff_rv[137] ;
  assign cache_dw_valid$whas =
	     (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp ||
	      WILL_FIRE_RL_cache_rl_io_read_rsp) &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d194 ||
	     WILL_FIRE_RL_cache_rl_drive_exception_rsp ||
	     WILL_FIRE_RL_cache_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_ST_AMO_response ;
  always@(MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_1 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_1 or
	  MUX_cache_dw_output_ld_val$wset_1__SEL_2 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_2 or
	  MUX_cache_dw_output_ld_val$wset_1__SEL_3 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_3 or
	  MUX_cache_dw_output_ld_val$wset_1__SEL_4 or cache_rg_ld_val)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_1:
	  cache_dw_output_ld_val$wget =
	      MUX_cache_dw_output_ld_val$wset_1__VAL_1;
      MUX_cache_dw_output_ld_val$wset_1__SEL_2:
	  cache_dw_output_ld_val$wget =
	      MUX_cache_dw_output_ld_val$wset_1__VAL_2;
      MUX_cache_dw_output_ld_val$wset_1__SEL_3:
	  cache_dw_output_ld_val$wget =
	      MUX_cache_dw_output_ld_val$wset_1__VAL_3;
      MUX_cache_dw_output_ld_val$wset_1__SEL_4:
	  cache_dw_output_ld_val$wget = cache_rg_ld_val;
      default: cache_dw_output_ld_val$wget =
		   129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_dw_output_st_amo_val$wget =
	     MUX_cache_dw_output_ld_val$wset_1__SEL_3 ?
	       MUX_cache_dw_output_st_amo_val$wset_1__VAL_1 :
	       cache_rg_st_amo_val ;
  assign cache_master_xactor_ug_master_u_aw_dropWire$whas =
	     cache_master_xactor_shim_awff_rv$port1__read[97] &&
	     mem_master_awready ;
  assign cache_master_xactor_ug_master_u_w_dropWire$whas =
	     cache_master_xactor_shim_wff_rv$port1__read[147] &&
	     mem_master_wready ;
  assign cache_master_xactor_ug_master_u_ar_dropWire$whas =
	     cache_master_xactor_shim_arff_rv$port1__read[97] &&
	     mem_master_arready ;
  assign cache_master_xactor_shim_awff_rv$EN_port0__write =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_soc_map$m_is_mem_addr &&
	     NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d783 ||
	     WILL_FIRE_RL_cache_rl_io_write_req ;
  always@(MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_1 or
	  MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_1 or
	  MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_2 or
	  MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_2 or
	  WILL_FIRE_RL_cache_rl_io_write_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_1:
	  cache_master_xactor_shim_awff_rv$port0__write_1 =
	      MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_1;
      MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_2:
	  cache_master_xactor_shim_awff_rv$port0__write_1 =
	      MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_2;
      WILL_FIRE_RL_cache_rl_io_write_req:
	  cache_master_xactor_shim_awff_rv$port0__write_1 =
	      MUX_cache_master_xactor_shim_awff_rv$port0__write_1__VAL_1;
      default: cache_master_xactor_shim_awff_rv$port0__write_1 =
		   98'h2AAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_master_xactor_shim_awff_rv$port1__read =
	     cache_master_xactor_shim_awff_rv$EN_port0__write ?
	       cache_master_xactor_shim_awff_rv$port0__write_1 :
	       cache_master_xactor_shim_awff_rv ;
  assign cache_master_xactor_shim_awff_rv$port2__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop ?
	       98'h0AAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_awff_rv$port1__read ;
  assign cache_master_xactor_shim_awff_rv$port3__read =
	     cache_master_xactor_clearing ?
	       98'h0AAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_awff_rv$port2__read ;
  assign cache_master_xactor_shim_wff_rv$EN_port0__write =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_soc_map$m_is_mem_addr &&
	     NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d783 ||
	     WILL_FIRE_RL_cache_rl_io_write_req ;
  always@(MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_1 or
	  MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_1 or
	  MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_2 or
	  MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_2 or
	  WILL_FIRE_RL_cache_rl_io_write_req or
	  MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_1:
	  cache_master_xactor_shim_wff_rv$port0__write_1 =
	      MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_1;
      MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_2:
	  cache_master_xactor_shim_wff_rv$port0__write_1 =
	      MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_2;
      WILL_FIRE_RL_cache_rl_io_write_req:
	  cache_master_xactor_shim_wff_rv$port0__write_1 =
	      MUX_cache_master_xactor_shim_wff_rv$port0__write_1__VAL_3;
      default: cache_master_xactor_shim_wff_rv$port0__write_1 =
		   148'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_master_xactor_shim_wff_rv$port1__read =
	     cache_master_xactor_shim_wff_rv$EN_port0__write ?
	       cache_master_xactor_shim_wff_rv$port0__write_1 :
	       cache_master_xactor_shim_wff_rv ;
  assign cache_master_xactor_shim_wff_rv$port2__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop ?
	       148'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_wff_rv$port1__read ;
  assign cache_master_xactor_shim_wff_rv$port3__read =
	     cache_master_xactor_clearing ?
	       148'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_wff_rv$port2__read ;
  assign cache_master_xactor_shim_bff_rv$port0__write_1 =
	     { 1'd1, cache_master_xactor_ug_master_u_b_putWire$wget } ;
  assign cache_master_xactor_shim_bff_rv$port1__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut ?
	       cache_master_xactor_shim_bff_rv$port0__write_1 :
	       cache_master_xactor_shim_bff_rv ;
  assign cache_master_xactor_shim_bff_rv$port2__read =
	     CAN_FIRE_RL_cache_rl_discard_write_rsp ?
	       7'd42 :
	       cache_master_xactor_shim_bff_rv$port1__read ;
  assign cache_master_xactor_shim_bff_rv$port3__read =
	     cache_master_xactor_clearing ?
	       7'd42 :
	       cache_master_xactor_shim_bff_rv$port2__read ;
  assign cache_master_xactor_shim_arff_rv$EN_port0__write =
	     WILL_FIRE_RL_cache_rl_io_AMO_op_req ||
	     WILL_FIRE_RL_cache_rl_io_read_req ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;
  assign cache_master_xactor_shim_arff_rv$port0__write_1 =
	     MUX_cache_master_xactor_shim_arff_rv$port0__write_1__SEL_1 ?
	       MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_1 :
	       MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_2 ;
  assign cache_master_xactor_shim_arff_rv$port1__read =
	     cache_master_xactor_shim_arff_rv$EN_port0__write ?
	       cache_master_xactor_shim_arff_rv$port0__write_1 :
	       cache_master_xactor_shim_arff_rv ;
  assign cache_master_xactor_shim_arff_rv$port2__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop ?
	       98'h0AAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_arff_rv$port1__read ;
  assign cache_master_xactor_shim_arff_rv$port3__read =
	     cache_master_xactor_clearing ?
	       98'h0AAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_arff_rv$port2__read ;
  assign cache_master_xactor_shim_rff_rv$port0__write_1 =
	     { 1'd1, cache_master_xactor_ug_master_u_r_putWire$wget } ;
  assign cache_master_xactor_shim_rff_rv$port1__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut ?
	       cache_master_xactor_shim_rff_rv$port0__write_1 :
	       cache_master_xactor_shim_rff_rv ;
  assign cache_master_xactor_shim_rff_rv$EN_port1__write =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop ;
  assign cache_master_xactor_shim_rff_rv$port2__read =
	     cache_master_xactor_shim_rff_rv$EN_port1__write ?
	       138'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_rff_rv$port1__read ;
  assign cache_master_xactor_shim_rff_rv$port3__read =
	     cache_master_xactor_clearing ?
	       138'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       cache_master_xactor_shim_rff_rv$port2__read ;
  assign cache_crg_sb_to_load_delay$port0__write_1 =
	     { 1'd0, cache_crg_sb_to_load_delay[10:1] } ;
  assign cache_crg_sb_to_load_delay$EN_port1__write =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     cache_rg_op_4_EQ_1_02_OR_cache_rg_op_4_EQ_2_6__ETC___d777 ;
  assign cache_crg_sb_to_load_delay$port2__read =
	     cache_crg_sb_to_load_delay$EN_port1__write ?
	       11'd2047 :
	       cache_crg_sb_to_load_delay$port0__write_1 ;

  // register cache_cfg_verbosity
  assign cache_cfg_verbosity$D_IN = set_verbosity_verbosity ;
  assign cache_cfg_verbosity$EN = EN_set_verbosity ;

  // register cache_crg_sb_to_load_delay
  assign cache_crg_sb_to_load_delay$D_IN =
	     cache_crg_sb_to_load_delay$port2__read ;
  assign cache_crg_sb_to_load_delay$EN = 1'b1 ;

  // register cache_ctr_wr_rsps_pending_inrg
  always@(MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_1 or
	  MUX_cache_ctr_wr_rsps_pending_inrg$write_1__VAL_1 or
	  MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_2 or
	  WILL_FIRE_RL_cache_rl_io_write_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_1:
	  cache_ctr_wr_rsps_pending_inrg$D_IN =
	      MUX_cache_ctr_wr_rsps_pending_inrg$write_1__VAL_1;
      MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_2:
	  cache_ctr_wr_rsps_pending_inrg$D_IN =
	      MUX_cache_ctr_wr_rsps_pending_inrg$write_1__VAL_1;
      WILL_FIRE_RL_cache_rl_io_write_req:
	  cache_ctr_wr_rsps_pending_inrg$D_IN =
	      MUX_cache_ctr_wr_rsps_pending_inrg$write_1__VAL_1;
      default: cache_ctr_wr_rsps_pending_inrg$D_IN =
		   4'b1010 /* unspecified value */ ;
    endcase
  end
  assign cache_ctr_wr_rsps_pending_inrg$EN =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_soc_map$m_is_mem_addr &&
	     NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d783 ||
	     WILL_FIRE_RL_cache_rl_io_write_req ;

  // register cache_ctr_wr_rsps_pending_outrg
  assign cache_ctr_wr_rsps_pending_outrg$D_IN =
	     WILL_FIRE_RL_cache_rl_discard_write_rsp ?
	       MUX_cache_ctr_wr_rsps_pending_outrg$write_1__VAL_1 :
	       cache_ctr_wr_rsps_pending_inrg ;
  assign cache_ctr_wr_rsps_pending_outrg$EN =
	     WILL_FIRE_RL_cache_rl_start_reset && !cache_f_reset_reqs$D_OUT ||
	     WILL_FIRE_RL_cache_rl_discard_write_rsp ;

  // register cache_master_xactor_clearing
  assign cache_master_xactor_clearing$D_IN = !cache_master_xactor_clearing ;
  assign cache_master_xactor_clearing$EN =
	     WILL_FIRE_RL_cache_rl_reset && !cache_f_reset_reqs$D_OUT ||
	     cache_master_xactor_clearing ;

  // register cache_master_xactor_shim_arff_rv
  assign cache_master_xactor_shim_arff_rv$D_IN =
	     cache_master_xactor_shim_arff_rv$port3__read ;
  assign cache_master_xactor_shim_arff_rv$EN = 1'b1 ;

  // register cache_master_xactor_shim_awff_rv
  assign cache_master_xactor_shim_awff_rv$D_IN =
	     cache_master_xactor_shim_awff_rv$port3__read ;
  assign cache_master_xactor_shim_awff_rv$EN = 1'b1 ;

  // register cache_master_xactor_shim_bff_rv
  assign cache_master_xactor_shim_bff_rv$D_IN =
	     cache_master_xactor_shim_bff_rv$port3__read ;
  assign cache_master_xactor_shim_bff_rv$EN = 1'b1 ;

  // register cache_master_xactor_shim_rff_rv
  assign cache_master_xactor_shim_rff_rv$D_IN =
	     cache_master_xactor_shim_rff_rv$port3__read ;
  assign cache_master_xactor_shim_rff_rv$EN = 1'b1 ;

  // register cache_master_xactor_shim_wff_rv
  assign cache_master_xactor_shim_wff_rv$D_IN =
	     cache_master_xactor_shim_wff_rv$port3__read ;
  assign cache_master_xactor_shim_wff_rv$EN = 1'b1 ;

  // register cache_rg_addr
  assign cache_rg_addr$D_IN = req_addr ;
  assign cache_rg_addr$EN = EN_req ;

  // register cache_rg_amo_funct7
  assign cache_rg_amo_funct7$D_IN = req_amo_funct7 ;
  assign cache_rg_amo_funct7$EN = EN_req ;

  // register cache_rg_cset_in_cache
  assign cache_rg_cset_in_cache$D_IN =
	     WILL_FIRE_RL_cache_rl_reset ?
	       MUX_cache_rg_cset_in_cache$write_1__VAL_1 :
	       6'd0 ;
  assign cache_rg_cset_in_cache$EN =
	     WILL_FIRE_RL_cache_rl_reset ||
	     WILL_FIRE_RL_cache_rl_start_reset ;

  // register cache_rg_error_during_refill
  assign cache_rg_error_during_refill$D_IN =
	     MUX_cache_rg_error_during_refill$write_1__SEL_1 ;
  assign cache_rg_error_during_refill$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // register cache_rg_exc_code
  always@(MUX_cache_rg_error_during_refill$write_1__SEL_1 or
	  MUX_cache_rg_exc_code$write_1__VAL_1 or
	  MUX_cache_rg_exc_code$write_1__SEL_2 or
	  MUX_cache_rg_exc_code$write_1__VAL_2 or
	  MUX_cache_rg_exc_code$write_1__SEL_3 or
	  MUX_cache_rg_exc_code$write_1__SEL_4 or
	  MUX_cache_rg_exc_code$write_1__SEL_5)
  case (1'b1)
    MUX_cache_rg_error_during_refill$write_1__SEL_1:
	cache_rg_exc_code$D_IN = MUX_cache_rg_exc_code$write_1__VAL_1;
    MUX_cache_rg_exc_code$write_1__SEL_2:
	cache_rg_exc_code$D_IN = MUX_cache_rg_exc_code$write_1__VAL_2;
    MUX_cache_rg_exc_code$write_1__SEL_3: cache_rg_exc_code$D_IN = 6'd7;
    MUX_cache_rg_exc_code$write_1__SEL_4: cache_rg_exc_code$D_IN = 6'd5;
    MUX_cache_rg_exc_code$write_1__SEL_5: cache_rg_exc_code$D_IN = 6'd32;
    default: cache_rg_exc_code$D_IN = 6'b101010 /* unspecified value */ ;
  endcase
  assign cache_rg_exc_code$EN =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && !EN_commit ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 ||
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 ||
	     EN_req &&
	     NOT_req_width_code_EQ_0b0_366_367_AND_NOT_req__ETC___d1386 &&
	     (req_width_code != 3'b100 || req_addr[3:0] != 4'b0) ;

  // register cache_rg_is_unsigned
  assign cache_rg_is_unsigned$D_IN = req_is_unsigned ;
  assign cache_rg_is_unsigned$EN = EN_req ;

  // register cache_rg_ld_val
  always@(MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_1 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_1 or
	  MUX_cache_rg_ld_val$write_1__SEL_2 or
	  MUX_cache_rg_ld_val$write_1__VAL_2 or
	  WILL_FIRE_RL_cache_rl_io_read_rsp or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_2 or
	  WILL_FIRE_RL_cache_rl_io_AMO_SC_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ctr_wr_rsps_pending_inrg$write_1__SEL_1:
	  cache_rg_ld_val$D_IN = MUX_cache_dw_output_ld_val$wset_1__VAL_1;
      MUX_cache_rg_ld_val$write_1__SEL_2:
	  cache_rg_ld_val$D_IN = MUX_cache_rg_ld_val$write_1__VAL_2;
      WILL_FIRE_RL_cache_rl_io_read_rsp:
	  cache_rg_ld_val$D_IN = MUX_cache_dw_output_ld_val$wset_1__VAL_2;
      WILL_FIRE_RL_cache_rl_io_AMO_SC_req: cache_rg_ld_val$D_IN = 129'd1;
      default: cache_rg_ld_val$D_IN =
		   129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_rg_ld_val$EN =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d498 ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_io_AMO_SC_req ;

  // register cache_rg_lower_word64
  assign cache_rg_lower_word64$D_IN = 64'h0 ;
  assign cache_rg_lower_word64$EN = 1'b0 ;

  // register cache_rg_lower_word64_full
  assign cache_rg_lower_word64_full$D_IN = 1'd0 ;
  assign cache_rg_lower_word64_full$EN =
	     WILL_FIRE_RL_cache_rl_start_cache_refill ||
	     WILL_FIRE_RL_cache_rl_start_reset ;

  // register cache_rg_lrsc_pa
  assign cache_rg_lrsc_pa$D_IN = cache_rg_addr ;
  assign cache_rg_lrsc_pa$EN =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00010 &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__22_BITS__ETC___d128 ;

  // register cache_rg_lrsc_valid
  assign cache_rg_lrsc_valid$D_IN =
	     MUX_cache_rg_lrsc_valid$write_1__SEL_2 &&
	     MUX_cache_rg_lrsc_valid$write_1__VAL_2 ;
  assign cache_rg_lrsc_valid$EN =
	     WILL_FIRE_RL_cache_rl_io_read_req && cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00010 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d188 ||
	     WILL_FIRE_RL_cache_rl_start_reset ;

  // register cache_rg_op
  assign cache_rg_op$D_IN = req_op ;
  assign cache_rg_op$EN = EN_req ;

  // register cache_rg_pa
  assign cache_rg_pa$D_IN = EN_req ? req_addr : cache_rg_addr ;
  assign cache_rg_pa$EN =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit ||
	     EN_req ;

  // register cache_rg_pte_pa
  assign cache_rg_pte_pa$D_IN = 32'h0 ;
  assign cache_rg_pte_pa$EN = 1'b0 ;

  // register cache_rg_st_amo_val
  assign cache_rg_st_amo_val$D_IN =
	     EN_req ? req_st_value : MUX_cache_rg_st_amo_val$write_1__VAL_2 ;
  assign cache_rg_st_amo_val$EN =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d869 ||
	     EN_req ;

  // register cache_rg_state
  always@(WILL_FIRE_RL_cache_rl_rereq or
	  MUX_cache_rg_state$write_1__SEL_2 or
	  MUX_cache_rg_state$write_1__VAL_2 or
	  WILL_FIRE_RL_cache_rl_start_cache_refill or
	  EN_req or
	  MUX_cache_rg_state$write_1__VAL_4 or
	  WILL_FIRE_RL_cache_rl_io_AMO_read_rsp or
	  MUX_cache_rg_state$write_1__VAL_5 or
	  WILL_FIRE_RL_cache_rl_io_read_rsp or
	  WILL_FIRE_RL_cache_rl_io_AMO_op_req or
	  WILL_FIRE_RL_cache_rl_io_AMO_SC_req or
	  WILL_FIRE_RL_cache_rl_io_write_req or
	  WILL_FIRE_RL_cache_rl_io_read_req or
	  WILL_FIRE_RL_cache_rl_start_reset or
	  MUX_cache_rg_state$write_1__SEL_12 or
	  MUX_cache_rg_state$write_1__VAL_12 or
	  MUX_cache_rg_state$write_1__SEL_13)
  case (1'b1)
    WILL_FIRE_RL_cache_rl_rereq: cache_rg_state$D_IN = 4'd3;
    MUX_cache_rg_state$write_1__SEL_2:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_2;
    WILL_FIRE_RL_cache_rl_start_cache_refill: cache_rg_state$D_IN = 4'd9;
    EN_req: cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_4;
    WILL_FIRE_RL_cache_rl_io_AMO_read_rsp:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_5;
    WILL_FIRE_RL_cache_rl_io_read_rsp:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_5;
    WILL_FIRE_RL_cache_rl_io_AMO_op_req: cache_rg_state$D_IN = 4'd15;
    WILL_FIRE_RL_cache_rl_io_AMO_SC_req || WILL_FIRE_RL_cache_rl_io_write_req:
	cache_rg_state$D_IN = 4'd11;
    WILL_FIRE_RL_cache_rl_io_read_req: cache_rg_state$D_IN = 4'd13;
    WILL_FIRE_RL_cache_rl_start_reset: cache_rg_state$D_IN = 4'd1;
    MUX_cache_rg_state$write_1__SEL_12:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_12;
    MUX_cache_rg_state$write_1__SEL_13: cache_rg_state$D_IN = 4'd2;
    default: cache_rg_state$D_IN = 4'b1010 /* unspecified value */ ;
  endcase
  assign cache_rg_state$EN =
	     WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_word128_set_in_cache[1:0] == 2'd3 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     NOT_cache_dw_commit_whas__5_6_OR_NOT_cache_dw__ETC___d165 ||
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp ||
	     EN_req ||
	     WILL_FIRE_RL_cache_rl_start_reset ||
	     WILL_FIRE_RL_cache_rl_rereq ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ||
	     WILL_FIRE_RL_cache_rl_io_AMO_SC_req ||
	     WILL_FIRE_RL_cache_rl_io_write_req ||
	     WILL_FIRE_RL_cache_rl_io_read_req ||
	     WILL_FIRE_RL_cache_rl_io_AMO_op_req ;

  // register cache_rg_width_code
  assign cache_rg_width_code$D_IN = req_width_code ;
  assign cache_rg_width_code$EN = EN_req ;

  // register cache_rg_word128_set_in_cache
  assign cache_rg_word128_set_in_cache$D_IN =
	     MUX_cache_ram_word128_set$b_put_1__SEL_2 ?
	       MUX_cache_ram_word128_set$b_put_2__VAL_2 :
	       MUX_cache_ram_word128_set$b_put_2__VAL_4 ;
  assign cache_rg_word128_set_in_cache$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_word128_set_in_cache[1:0] != 2'd3 ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // submodule cache_f_reset_reqs
  assign cache_f_reset_reqs$D_IN = !EN_server_reset_request_put ;
  assign cache_f_reset_reqs$ENQ =
	     EN_server_reset_request_put || EN_server_flush_request_put ;
  assign cache_f_reset_reqs$DEQ = MUX_cache_rg_state$write_1__SEL_13 ;
  assign cache_f_reset_reqs$CLR = 1'b0 ;

  // submodule cache_f_reset_rsps
  assign cache_f_reset_rsps$D_IN = cache_f_reset_reqs$D_OUT ;
  assign cache_f_reset_rsps$ENQ = MUX_cache_rg_state$write_1__SEL_13 ;
  assign cache_f_reset_rsps$DEQ =
	     EN_server_flush_response_get || EN_server_reset_response_get ;
  assign cache_f_reset_rsps$CLR = 1'b0 ;

  // submodule cache_ram_state_and_ctag_cset
  assign cache_ram_state_and_ctag_cset$ADDRA =
	     WILL_FIRE_RL_cache_rl_start_cache_refill ?
	       cache_rg_addr[11:6] :
	       cache_rg_cset_in_cache ;
  assign cache_ram_state_and_ctag_cset$ADDRB =
	     MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       req_addr[11:6] :
	       cache_rg_addr[11:6] ;
  assign cache_ram_state_and_ctag_cset$DIA =
	     WILL_FIRE_RL_cache_rl_start_cache_refill ?
	       MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1 :
	       23'd2796202 ;
  assign cache_ram_state_and_ctag_cset$DIB =
	     MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       23'b01010101010101010101010 /* unspecified value */  :
	       23'b01010101010101010101010 /* unspecified value */  ;
  assign cache_ram_state_and_ctag_cset$WEA = 1'd1 ;
  assign cache_ram_state_and_ctag_cset$WEB = 1'd0 ;
  assign cache_ram_state_and_ctag_cset$ENA =
	     WILL_FIRE_RL_cache_rl_start_cache_refill ||
	     WILL_FIRE_RL_cache_rl_reset ;
  assign cache_ram_state_and_ctag_cset$ENB =
	     MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 ||
	     WILL_FIRE_RL_cache_rl_rereq ;

  // submodule cache_ram_word128_set
  assign cache_ram_word128_set$ADDRA =
	     MUX_cache_ram_word128_set$a_put_1__SEL_1 ?
	       cache_rg_word128_set_in_cache :
	       cache_rg_addr[11:4] ;
  always@(MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  req_addr or
	  MUX_cache_ram_word128_set$b_put_1__SEL_2 or
	  MUX_cache_ram_word128_set$b_put_2__VAL_2 or
	  WILL_FIRE_RL_cache_rl_rereq or
	  cache_rg_addr or
	  WILL_FIRE_RL_cache_rl_start_cache_refill or
	  MUX_cache_ram_word128_set$b_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  cache_ram_word128_set$ADDRB = req_addr[11:4];
      MUX_cache_ram_word128_set$b_put_1__SEL_2:
	  cache_ram_word128_set$ADDRB =
	      MUX_cache_ram_word128_set$b_put_2__VAL_2;
      WILL_FIRE_RL_cache_rl_rereq:
	  cache_ram_word128_set$ADDRB = cache_rg_addr[11:4];
      WILL_FIRE_RL_cache_rl_start_cache_refill:
	  cache_ram_word128_set$ADDRB =
	      MUX_cache_ram_word128_set$b_put_2__VAL_4;
      default: cache_ram_word128_set$ADDRB =
		   8'b10101010 /* unspecified value */ ;
    endcase
  end
  assign cache_ram_word128_set$DIA =
	     MUX_cache_ram_word128_set$a_put_1__SEL_1 ?
	       MUX_cache_ram_word128_set$a_put_3__VAL_1 :
	       MUX_cache_ram_word128_set$a_put_3__VAL_2 ;
  always@(MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  MUX_cache_ram_word128_set$b_put_1__SEL_2 or
	  WILL_FIRE_RL_cache_rl_rereq or
	  WILL_FIRE_RL_cache_rl_start_cache_refill)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  cache_ram_word128_set$DIB =
	      130'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      MUX_cache_ram_word128_set$b_put_1__SEL_2:
	  cache_ram_word128_set$DIB =
	      130'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_cache_rl_rereq:
	  cache_ram_word128_set$DIB =
	      130'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_cache_rl_start_cache_refill:
	  cache_ram_word128_set$DIB =
	      130'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
      default: cache_ram_word128_set$DIB =
		   130'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign cache_ram_word128_set$WEA = 1'd1 ;
  assign cache_ram_word128_set$WEB = 1'd0 ;
  assign cache_ram_word128_set$ENA =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	     cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d546 ;
  assign cache_ram_word128_set$ENB =
	     MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_word128_set_in_cache[1:0] != 2'd3 ||
	     WILL_FIRE_RL_cache_rl_rereq ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // submodule cache_soc_map
  assign cache_soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign cache_soc_map$m_is_mem_addr_addr = { 32'd0, cache_rg_addr } ;
  assign cache_soc_map$m_is_near_mem_IO_addr_addr = 64'h0 ;

  // remaining internal signals
  assign IF_cache_rg_addr_BITS_4_TO_0_EQ_0_THEN_1_ELSE_0__q2 =
	     (cache_rg_addr[4:0] == 5'd0) ? 32'd1 : 32'd0 ;
  assign IF_cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2__ETC___d168 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) ?
	       4'd8 :
	       IF_cache_rg_op_4_EQ_1_02_OR_cache_rg_op_4_EQ_2_ETC___d167 ;
  assign IF_cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2__ETC___d460 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) ?
	       x__h20330 :
	       x__h25722 ;
  assign IF_cache_rg_op_4_EQ_1_02_OR_cache_rg_op_4_EQ_2_ETC___d132 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       cache_rg_op_4_EQ_2_6_AND_cache_rg_amo_funct7_7_ETC___d121 :
	       NOT_cache_ram_state_and_ctag_cset_b_read__22_B_ETC___d131 ;
  assign IF_cache_rg_op_4_EQ_1_02_OR_cache_rg_op_4_EQ_2_ETC___d167 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       4'd11 :
	       ((!cache_ram_state_and_ctag_cset$DOB[22] ||
		 !cache_ram_state_and_ctag_cset_b_read__22_BITS__ETC___d128) ?
		  4'd8 :
		  4'd11) ;
  assign IF_cache_rg_op_4_EQ_1_02_OR_cache_rg_op_4_EQ_2_ETC___d797 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       mem_req_wr_data_wdata__h26395 :
	       mem_req_wr_data_wdata__h31224 ;
  assign IF_cache_rg_op_4_EQ_1_02_OR_cache_rg_op_4_EQ_2_ETC___d810 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) ?
	       { 1'd1, mem_req_wr_data_wuser__h26398 } :
	       3'd4 ;
  assign IF_cache_rg_width_code_97_EQ_2_02_THEN_SEXT_IF_ETC___d1274 =
	     (cache_rg_width_code == 3'd2) ?
	       { {32{x8620_BITS_31_TO_0__q98[31]}},
		 x8620_BITS_31_TO_0__q98 } :
	       x__h38620[63:0] ;
  assign IF_cache_rg_width_code_97_EQ_2_02_THEN_SEXT_IF_ETC___d538 =
	     (cache_rg_width_code == 3'd2) ?
	       { {32{x7298_BITS_31_TO_0__q64[31]}},
		 x7298_BITS_31_TO_0__q64 } :
	       x__h27298[63:0] ;
  assign IF_cache_rg_width_code_97_EQ_2_02_THEN_SEXT_ca_ETC___d667 =
	     (cache_rg_width_code == 3'd2) ?
	       { {32{cache_rg_st_amo_val_BITS_31_TO_0__q65[31]}},
		 cache_rg_st_amo_val_BITS_31_TO_0__q65 } :
	       cache_rg_st_amo_val[63:0] ;
  assign IF_cache_rg_width_code_97_EQ_3_06_THEN_IF_cach_ETC___d281 =
	     (cache_rg_width_code == 3'd3) ?
	       ((cache_rg_addr[3:0] == 4'h0) ?
		  cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[128] :
		  cache_rg_addr[3:0] == 4'h8 &&
		  cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[129]) :
	       cache_rg_width_code == 3'd4 &&
	       cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[128] ;
  assign NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 =
	     cache_cfg_verbosity > 4'd1 ;
  assign NOT_cache_cfg_verbosity_read__3_ULE_2_03___d904 =
	     cache_cfg_verbosity > 4'd2 ;
  assign NOT_cache_dw_commit_whas__5_6_OR_NOT_cache_dw__ETC___d165 =
	     !EN_commit ||
	     cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d157 ||
	     NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d162 ||
	     !cache_soc_map$m_is_mem_addr ;
  assign NOT_cache_f_reset_reqs_notEmpty__4_36_AND_cach_ETC___d147 =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_state == 4'd3 &&
	     (cache_rg_op != 2'd0 &&
	      (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) ||
	      cache_crg_sb_to_load_delay$port0__write_1 == 11'd0) ;
  assign NOT_cache_f_reset_reqs_notEmpty__4_36_AND_cach_ETC___d952 =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_state == 4'd12 &&
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) ;
  assign NOT_cache_master_xactor_clearing_read__0_8_AND_ETC___d1168 =
	     !cache_master_xactor_clearing &&
	     cache_master_xactor_shim_rff_rv$port1__read[137] &&
	     (cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 ||
	      !cache_master_xactor_shim_awff_rv[97] &&
	      !cache_master_xactor_shim_wff_rv[147]) ;
  assign NOT_cache_ram_state_and_ctag_cset_b_read__22_B_ETC___d131 =
	     !cache_ram_state_and_ctag_cset$DOB[22] ||
	     !cache_ram_state_and_ctag_cset_b_read__22_BITS__ETC___d128 ||
	     !cache_master_xactor_clearing &&
	     !cache_master_xactor_shim_awff_rv[97] &&
	     !cache_master_xactor_shim_wff_rv[147] ;
  assign NOT_cache_ram_state_and_ctag_cset_b_read__22_B_ETC___d176 =
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__22_BITS__ETC___d128) &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00010 &&
	     cache_rg_addr_0_EQ_cache_rg_lrsc_pa_08___d174 ;
  assign NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d162 =
	     cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_08_EQ_cache_rg_addr_0___d109) ;
  assign NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d783 =
	     cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     (cache_rg_op_4_EQ_1_02_OR_cache_rg_op_4_EQ_2_6__ETC___d781 ||
	      NOT_cache_rg_op_4_EQ_1_02_82_AND_NOT_cache_rg__ETC___d543) ;
  assign NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d834 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_cache_rg_op_4_EQ_2_6_40_OR_NOT_cache_rg_am_ETC___d832 ;
  assign NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d844 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_cache_rg_op_4_EQ_2_6_40_OR_NOT_cache_rg_am_ETC___d842 ;
  assign NOT_cache_rg_op_4_EQ_1_02_82_AND_NOT_cache_rg__ETC___d185 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__22_BITS__ETC___d128 &&
	     cache_rg_addr_0_EQ_cache_rg_lrsc_pa_08___d174 ;
  assign NOT_cache_rg_op_4_EQ_1_02_82_AND_NOT_cache_rg__ETC___d543 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__22_BITS__ETC___d128 ;
  assign NOT_cache_rg_op_4_EQ_1_02_82_AND_NOT_cache_rg__ETC___d776 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__22_BITS__ETC___d128 &&
	     (cache_rg_width_code == 3'd0 || cache_rg_width_code == 3'd1) ;
  assign NOT_cache_rg_op_4_EQ_1_02_82_AND_NOT_cache_rg__ETC___d854 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__22_BITS__ETC___d128) &&
	     NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 ;
  assign NOT_cache_rg_op_4_EQ_1_02_82_AND_NOT_cache_rg__ETC___d858 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__22_BITS__ETC___d128 &&
	     NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 ;
  assign NOT_cache_rg_op_4_EQ_1_02_82_AND_NOT_cache_rg__ETC___d864 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__22_BITS__ETC___d128 &&
	     cache_rg_addr_0_EQ_cache_rg_lrsc_pa_08___d174 &&
	     NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 ;
  assign NOT_cache_rg_op_4_EQ_2_6_40_OR_NOT_cache_rg_am_ETC___d541 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_08_EQ_cache_rg_addr_0___d109) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__22_BITS__ETC___d128 ;
  assign NOT_cache_rg_op_4_EQ_2_6_40_OR_NOT_cache_rg_am_ETC___d774 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_08_EQ_cache_rg_addr_0___d109) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__22_BITS__ETC___d128 &&
	     (cache_rg_width_code == 3'd0 || cache_rg_width_code == 3'd1) ;
  assign NOT_cache_rg_op_4_EQ_2_6_40_OR_NOT_cache_rg_am_ETC___d832 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_08_EQ_cache_rg_addr_0___d109) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__22_BITS__ETC___d128 &&
	     NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 ;
  assign NOT_cache_rg_op_4_EQ_2_6_40_OR_NOT_cache_rg_am_ETC___d837 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_08_EQ_cache_rg_addr_0___d109) &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__22_BITS__ETC___d128) &&
	     NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 ;
  assign NOT_cache_rg_op_4_EQ_2_6_40_OR_NOT_cache_rg_am_ETC___d842 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_08_EQ_cache_rg_addr_0___d109) &&
	     NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 ;
  assign NOT_req_width_code_EQ_0b0_366_367_AND_NOT_req__ETC___d1386 =
	     req_width_code != 3'b0 &&
	     (req_width_code != 3'b001 || req_addr[0]) &&
	     (req_width_code != 3'b010 || req_addr[1:0] != 2'b0) &&
	     (req_width_code != 3'b011 || req_addr[2:0] != 3'b0) ;
  assign SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d287 =
	     { {120{cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q48[7]}},
	       cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q48 } ;
  assign SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d292 =
	     { {120{cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q62[7]}},
	       cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q62 } ;
  assign SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d297 =
	     { {120{cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q46[7]}},
	       cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q46 } ;
  assign SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d302 =
	     { {120{cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q61[7]}},
	       cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q61 } ;
  assign SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d307 =
	     { {120{cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q44[7]}},
	       cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q44 } ;
  assign SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d312 =
	     { {120{cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q60[7]}},
	       cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q60 } ;
  assign SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d317 =
	     { {120{cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q42[7]}},
	       cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q42 } ;
  assign SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d322 =
	     { {120{cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q59[7]}},
	       cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q59 } ;
  assign SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d326 =
	     { {120{cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q39[7]}},
	       cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q39 } ;
  assign SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d331 =
	     { {120{cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q58[7]}},
	       cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q58 } ;
  assign SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d336 =
	     { {120{cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q38[7]}},
	       cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q38 } ;
  assign SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d341 =
	     { {120{cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q56[7]}},
	       cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q56 } ;
  assign SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d346 =
	     { {120{cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q36[7]}},
	       cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q36 } ;
  assign SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d351 =
	     { {120{cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q57[7]}},
	       cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q57 } ;
  assign SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d356 =
	     { {120{cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q34[7]}},
	       cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q34 } ;
  assign SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d361 =
	     { {120{cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q55[7]}},
	       cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q55 } ;
  assign SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d381 =
	     { {112{cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q47[15]}},
	       cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q47 } ;
  assign SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d385 =
	     { {112{cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q45[15]}},
	       cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q45 } ;
  assign SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d389 =
	     { {112{cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q43[15]}},
	       cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q43 } ;
  assign SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d393 =
	     { {112{cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q41[15]}},
	       cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q41 } ;
  assign SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d397 =
	     { {112{cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q40[15]}},
	       cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q40 } ;
  assign SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d401 =
	     { {112{cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q37[15]}},
	       cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q37 } ;
  assign SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d405 =
	     { {112{cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q35[15]}},
	       cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q35 } ;
  assign SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d409 =
	     { {112{cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q33[15]}},
	       cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q33 } ;
  assign SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d421 =
	     { {96{cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q52[31]}},
	       cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q52 } ;
  assign SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d425 =
	     { {96{cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q51[31]}},
	       cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q51 } ;
  assign SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d429 =
	     { {96{cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q50[31]}},
	       cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q50 } ;
  assign SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d433 =
	     { {96{cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q49[31]}},
	       cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q49 } ;
  assign SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d441 =
	     { {64{cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q54[63]}},
	       cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q54 } ;
  assign SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d445 =
	     { {64{cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q53[63]}},
	       cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q53 } ;
  assign _0__q1 = 2'd0 ;
  assign _theResult___snd_fst__h26404 =
	     cache_rg_st_amo_val[127:0] << shift_bits__h31095 ;
  assign _theResult___snd_fst__h31233 =
	     { 64'd0, x__h27151 } << shift_bits__h31095 ;
  assign _theResult___snd_fst__h37053 =
	     cache_rg_st_amo_val[127:0] << shift_bits__h38305 ;
  assign _theResult___snd_fst__h38443 =
	     word128__h38302 << shift_bits__h38305 ;
  assign access_exc_code__h4849 = MUX_cache_rg_exc_code$write_1__VAL_1 ;
  assign cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d883 =
	     cache_ctr_wr_rsps_pending_inrg -
	     cache_ctr_wr_rsps_pending_outrg ;
  assign cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d484 =
	     EN_commit && cache_soc_map$m_is_mem_addr &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00010 &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__22_BITS__ETC___d128 &&
	     NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 ;
  assign cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d822 =
	     EN_commit && cache_soc_map$m_is_mem_addr &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00011 &&
	     cache_rg_lrsc_valid &&
	     !cache_rg_lrsc_pa_08_EQ_cache_rg_addr_0___d109 &&
	     NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 ;
  assign cache_f_reset_reqs_i_notEmpty__3_AND_cache_f_r_ETC___d66 =
	     cache_f_reset_reqs$EMPTY_N &&
	     (cache_f_reset_reqs$D_OUT || !cache_master_xactor_clearing) &&
	     (cache_rg_cset_in_cache != 6'd63 || cache_f_reset_rsps$FULL_N) ;
  assign cache_master_xactor_shim_arff_rvport1__read_B_ETC__q67 =
	     cache_master_xactor_shim_arff_rv$port1__read[96:0] ;
  assign cache_master_xactor_shim_awff_rvport1__read_B_ETC__q99 =
	     cache_master_xactor_shim_awff_rv$port1__read[96:0] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q10 =
	     cache_master_xactor_shim_rff_rv$port1__read[36:21] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q11 =
	     cache_master_xactor_shim_rff_rv$port1__read[44:37] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q12 =
	     cache_master_xactor_shim_rff_rv$port1__read[52:37] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q13 =
	     cache_master_xactor_shim_rff_rv$port1__read[68:37] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q14 =
	     cache_master_xactor_shim_rff_rv$port1__read[52:45] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q15 =
	     cache_master_xactor_shim_rff_rv$port1__read[60:53] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q16 =
	     cache_master_xactor_shim_rff_rv$port1__read[68:53] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q17 =
	     cache_master_xactor_shim_rff_rv$port1__read[68:61] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q18 =
	     cache_master_xactor_shim_rff_rv$port1__read[132:69] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q19 =
	     cache_master_xactor_shim_rff_rv$port1__read[76:69] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q20 =
	     cache_master_xactor_shim_rff_rv$port1__read[84:69] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q21 =
	     cache_master_xactor_shim_rff_rv$port1__read[100:69] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q22 =
	     cache_master_xactor_shim_rff_rv$port1__read[84:77] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q23 =
	     cache_master_xactor_shim_rff_rv$port1__read[92:85] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q24 =
	     cache_master_xactor_shim_rff_rv$port1__read[100:85] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q25 =
	     cache_master_xactor_shim_rff_rv$port1__read[100:93] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q26 =
	     cache_master_xactor_shim_rff_rv$port1__read[108:101] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q27 =
	     cache_master_xactor_shim_rff_rv$port1__read[116:101] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q28 =
	     cache_master_xactor_shim_rff_rv$port1__read[132:101] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q29 =
	     cache_master_xactor_shim_rff_rv$port1__read[116:109] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q3 =
	     cache_master_xactor_shim_rff_rv$port1__read[68:5] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q30 =
	     cache_master_xactor_shim_rff_rv$port1__read[124:117] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q31 =
	     cache_master_xactor_shim_rff_rv$port1__read[132:117] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q32 =
	     cache_master_xactor_shim_rff_rv$port1__read[132:125] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q4 =
	     cache_master_xactor_shim_rff_rv$port1__read[12:5] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q5 =
	     cache_master_xactor_shim_rff_rv$port1__read[36:29] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q6 =
	     cache_master_xactor_shim_rff_rv$port1__read[20:5] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q7 =
	     cache_master_xactor_shim_rff_rv$port1__read[36:5] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q8 =
	     cache_master_xactor_shim_rff_rv$port1__read[20:13] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q9 =
	     cache_master_xactor_shim_rff_rv$port1__read[28:21] ;
  assign cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q100 =
	     cache_master_xactor_shim_wff_rv$port1__read[146:0] ;
  assign cache_ram_state_and_ctag_cset_b_read__22_BITS__ETC___d128 =
	     cache_ram_state_and_ctag_cset$DOB[21:0] == pa_ctag__h6993 ;
  assign cache_ram_state_and_ctag_cset_b_read__22_BIT_2_ETC___d177 =
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__22_BITS__ETC___d128 &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct7[6:2] == 5'b00010 ||
	     NOT_cache_ram_state_and_ctag_cset_b_read__22_B_ETC___d176 ;
  assign cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273 =
	     cache_ram_word128_set$DOB & y__h7477 ;
  assign cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q33 =
	     cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[127:112] ;
  assign cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q34 =
	     cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[119:112] ;
  assign cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q35 =
	     cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[111:96] ;
  assign cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q36 =
	     cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[103:96] ;
  assign cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q37 =
	     cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[95:80] ;
  assign cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q38 =
	     cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[87:80] ;
  assign cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q39 =
	     cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[71:64] ;
  assign cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q40 =
	     cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[79:64] ;
  assign cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q41 =
	     cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[63:48] ;
  assign cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q42 =
	     cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[55:48] ;
  assign cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q43 =
	     cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[47:32] ;
  assign cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q44 =
	     cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[39:32] ;
  assign cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q45 =
	     cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[31:16] ;
  assign cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q46 =
	     cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[23:16] ;
  assign cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q47 =
	     cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[15:0] ;
  assign cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q48 =
	     cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[7:0] ;
  assign cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q49 =
	     cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[127:96] ;
  assign cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q50 =
	     cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[95:64] ;
  assign cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q51 =
	     cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[63:32] ;
  assign cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q52 =
	     cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[31:0] ;
  assign cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q53 =
	     cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[127:64] ;
  assign cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q54 =
	     cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[63:0] ;
  assign cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q55 =
	     cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[127:120] ;
  assign cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q56 =
	     cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[95:88] ;
  assign cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q57 =
	     cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[111:104] ;
  assign cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q58 =
	     cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[79:72] ;
  assign cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q59 =
	     cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[63:56] ;
  assign cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q60 =
	     cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[47:40] ;
  assign cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q61 =
	     cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[31:24] ;
  assign cache_ram_word128_set_b_read__56_AND_cache_ram_ETC__q62 =
	     cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[15:8] ;
  assign cache_ram_word128_set_b_read__56_BITS_129_TO_1_ETC___d558 =
	     cache_ram_word128_set$DOB[129:128] & y__h27023 ;
  assign cache_rg_addr_0_EQ_cache_rg_lrsc_pa_08___d174 =
	     cache_rg_addr == cache_rg_lrsc_pa ;
  assign cache_rg_amo_funct7_7_BITS_6_TO_2_8_EQ_0b10_9__ETC___d491 =
	     cache_rg_amo_funct7[6:2] == 5'b00010 &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__22_BITS__ETC___d128) &&
	     cache_rg_addr_0_EQ_cache_rg_lrsc_pa_08___d174 &&
	     NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 ;
  assign cache_rg_lrsc_pa_08_EQ_cache_rg_addr_0___d109 =
	     cache_rg_lrsc_pa == cache_rg_addr ;
  assign cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d157 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__22_BITS__ETC___d128) ;
  assign cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d188 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     cache_ram_state_and_ctag_cset_b_read__22_BIT_2_ETC___d177 ||
	     cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     cache_rg_op_4_EQ_1_02_OR_cache_rg_op_4_EQ_2_6__ETC___d186 ;
  assign cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d194 =
	     MUX_cache_rg_lrsc_valid$write_1__VAL_2 ||
	     cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h21863 ;
  assign cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d283 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     cache_rg_width_code != 3'd0 &&
	     cache_rg_width_code != 3'd1 &&
	     cache_rg_width_code != 3'd2 &&
	     IF_cache_rg_width_code_97_EQ_3_06_THEN_IF_cach_ETC___d281 ;
  assign cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d470 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__22_BITS__ETC___d128 &&
	     NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 ;
  assign cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d486 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00010) &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__22_BITS__ETC___d128) &&
	     NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 ;
  assign cache_rg_op_4_EQ_1_02_OR_cache_rg_op_4_EQ_2_6__ETC___d186 =
	     cache_rg_op == 2'd1 &&
	     cache_rg_addr_0_EQ_cache_rg_lrsc_pa_08___d174 ||
	     cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011 ||
	     NOT_cache_rg_op_4_EQ_1_02_82_AND_NOT_cache_rg__ETC___d185 ;
  assign cache_rg_op_4_EQ_1_02_OR_cache_rg_op_4_EQ_2_6__ETC___d544 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_cache_rg_op_4_EQ_2_6_40_OR_NOT_cache_rg_am_ETC___d541 ||
	     NOT_cache_rg_op_4_EQ_1_02_82_AND_NOT_cache_rg__ETC___d543 ;
  assign cache_rg_op_4_EQ_1_02_OR_cache_rg_op_4_EQ_2_6__ETC___d777 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_cache_rg_op_4_EQ_2_6_40_OR_NOT_cache_rg_am_ETC___d774 ||
	     NOT_cache_rg_op_4_EQ_1_02_82_AND_NOT_cache_rg__ETC___d776 ;
  assign cache_rg_op_4_EQ_1_02_OR_cache_rg_op_4_EQ_2_6__ETC___d781 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_08_EQ_cache_rg_addr_0___d109) ;
  assign cache_rg_op_4_EQ_2_6_AND_cache_rg_amo_funct7_7_ETC___d121 =
	     cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h21863 ||
	     !cache_master_xactor_clearing &&
	     !cache_master_xactor_shim_awff_rv[97] &&
	     !cache_master_xactor_shim_wff_rv[147] ;
  assign cache_rg_op_4_EQ_2_6_AND_cache_rg_amo_funct7_7_ETC___d849 =
	     cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h21863 &&
	     NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 ;
  assign cache_rg_st_amo_val_BITS_31_TO_0__q65 = cache_rg_st_amo_val[31:0] ;
  assign cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d498 =
	     cache_soc_map$m_is_mem_addr && cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     (cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011 ||
	      cache_rg_op != 2'd1 && cache_ram_state_and_ctag_cset$DOB[22] &&
	      cache_ram_state_and_ctag_cset_b_read__22_BITS__ETC___d128) ;
  assign cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d546 =
	     cache_soc_map$m_is_mem_addr && cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     cache_rg_op_4_EQ_1_02_OR_cache_rg_op_4_EQ_2_6__ETC___d544 ;
  assign cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d860 =
	     cache_soc_map$m_is_mem_addr && cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_cache_rg_op_4_EQ_1_02_82_AND_NOT_cache_rg__ETC___d858 ;
  assign cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d869 =
	     cache_soc_map$m_is_mem_addr && cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_cache_rg_op_4_EQ_1_02_82_AND_NOT_cache_rg__ETC___d543 ;
  assign cline_addr__h31877 = { cache_rg_pa[31:6], 6'd0 } ;
  assign cline_fabric_addr__h31878 = { 32'd0, cline_addr__h31877 } ;
  assign lrsc_result__h21863 =
	     !cache_rg_lrsc_valid ||
	     !cache_rg_lrsc_pa_08_EQ_cache_rg_addr_0___d109 ;
  assign mem_req_wr_addr_awaddr__h31088 = { 32'd0, cache_rg_addr } ;
  assign mem_req_wr_addr_awaddr__h38298 = { 32'd0, cache_rg_pa } ;
  assign mem_req_wr_data_wuser__h26398 =
	     (cache_rg_width_code == 3'd3) ?
	       {2{cache_rg_st_amo_val[128]}} :
	       2'd0 ;
  assign new_st_val__h27153 = { 32'd0, _theResult_____2__h27007[31:0] } ;
  assign new_st_val__h27246 =
	     IF_cache_rg_width_code_97_EQ_2_02_THEN_SEXT_IF_ETC___d538 +
	     IF_cache_rg_width_code_97_EQ_2_02_THEN_SEXT_ca_ETC___d667 ;
  assign new_st_val__h28394 = w1__h26999 ^ w2__h27001 ;
  assign new_st_val__h28398 = w1__h26999 & w2__h27001 ;
  assign new_st_val__h28402 = w1__h26999 | w2__h27001 ;
  assign new_st_val__h28406 =
	     (w1__h26999 < w2__h27001) ? w1__h26999 : w2__h27001 ;
  assign new_st_val__h28411 =
	     (w1__h26999 <= w2__h27001) ? w2__h27001 : w1__h26999 ;
  assign new_st_val__h28417 =
	     ((IF_cache_rg_width_code_97_EQ_2_02_THEN_SEXT_IF_ETC___d538 ^
	       64'h8000000000000000) <
	      (IF_cache_rg_width_code_97_EQ_2_02_THEN_SEXT_ca_ETC___d667 ^
	       64'h8000000000000000)) ?
	       w1__h26999 :
	       w2__h27001 ;
  assign new_st_val__h28422 =
	     ((IF_cache_rg_width_code_97_EQ_2_02_THEN_SEXT_IF_ETC___d538 ^
	       64'h8000000000000000) <=
	      (IF_cache_rg_width_code_97_EQ_2_02_THEN_SEXT_ca_ETC___d667 ^
	       64'h8000000000000000)) ?
	       w2__h27001 :
	       w1__h26999 ;
  assign new_st_val__h38475 = { 32'd0, _theResult_____2__h38463[31:0] } ;
  assign new_st_val__h38568 =
	     IF_cache_rg_width_code_97_EQ_2_02_THEN_SEXT_IF_ETC___d1274 +
	     IF_cache_rg_width_code_97_EQ_2_02_THEN_SEXT_ca_ETC___d667 ;
  assign new_st_val__h40883 = w1__h38455 ^ w2__h27001 ;
  assign new_st_val__h40887 = w1__h38455 & w2__h27001 ;
  assign new_st_val__h40891 = w1__h38455 | w2__h27001 ;
  assign new_st_val__h40895 =
	     (w1__h38455 < w2__h27001) ? w1__h38455 : w2__h27001 ;
  assign new_st_val__h40900 =
	     (w1__h38455 <= w2__h27001) ? w2__h27001 : w1__h38455 ;
  assign new_st_val__h40906 =
	     ((IF_cache_rg_width_code_97_EQ_2_02_THEN_SEXT_IF_ETC___d1274 ^
	       64'h8000000000000000) <
	      (IF_cache_rg_width_code_97_EQ_2_02_THEN_SEXT_ca_ETC___d667 ^
	       64'h8000000000000000)) ?
	       w1__h38455 :
	       w2__h27001 ;
  assign new_st_val__h40911 =
	     ((IF_cache_rg_width_code_97_EQ_2_02_THEN_SEXT_IF_ETC___d1274 ^
	       64'h8000000000000000) <=
	      (IF_cache_rg_width_code_97_EQ_2_02_THEN_SEXT_ca_ETC___d667 ^
	       64'h8000000000000000)) ?
	       w2__h27001 :
	       w1__h38455 ;
  assign pa_ctag__h6993 = { 2'd0, cache_rg_addr[31:12] } ;
  assign req_width_code_EQ_0b0_366_OR_req_width_code_EQ_ETC___d1402 =
	     req_width_code == 3'b0 ||
	     req_width_code == 3'b001 && !req_addr[0] ||
	     req_width_code == 3'b010 && req_addr[1:0] == 2'b0 ||
	     req_width_code == 3'b011 && req_addr[2:0] == 3'b0 ;
  assign req_width_code_EQ_0b0_366_OR_req_width_code_EQ_ETC___d1407 =
	     (req_width_code_EQ_0b0_366_OR_req_width_code_EQ_ETC___d1402 ||
	      req_width_code == 3'b100 && req_addr[3:0] == 4'b0) &&
	     NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 ;
  assign result__h20273 =
	     cache_rg_is_unsigned ?
	       { 64'd0,
		 cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[127:64] } :
	       SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d445 ;
  assign result__h20341 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[7:0] } :
	       SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d287 ;
  assign result__h20379 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[15:8] } :
	       SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d292 ;
  assign result__h20412 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[23:16] } :
	       SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d297 ;
  assign result__h20445 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[31:24] } :
	       SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d302 ;
  assign result__h20478 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[39:32] } :
	       SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d307 ;
  assign result__h20511 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[47:40] } :
	       SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d312 ;
  assign result__h20544 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[55:48] } :
	       SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d317 ;
  assign result__h20577 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[63:56] } :
	       SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d322 ;
  assign result__h20610 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[71:64] } :
	       SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d326 ;
  assign result__h20643 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[79:72] } :
	       SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d331 ;
  assign result__h20676 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[87:80] } :
	       SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d336 ;
  assign result__h20709 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[95:88] } :
	       SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d341 ;
  assign result__h20742 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[103:96] } :
	       SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d346 ;
  assign result__h20775 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[111:104] } :
	       SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d351 ;
  assign result__h20808 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[119:112] } :
	       SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d356 ;
  assign result__h20841 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[127:120] } :
	       SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d361 ;
  assign result__h20896 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[15:0] } :
	       SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d381 ;
  assign result__h20929 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[31:16] } :
	       SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d385 ;
  assign result__h20962 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[47:32] } :
	       SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d389 ;
  assign result__h20995 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[63:48] } :
	       SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d393 ;
  assign result__h21028 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[79:64] } :
	       SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d397 ;
  assign result__h21061 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[95:80] } :
	       SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d401 ;
  assign result__h21094 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[111:96] } :
	       SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d405 ;
  assign result__h21127 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[127:112] } :
	       SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d409 ;
  assign result__h21174 =
	     cache_rg_is_unsigned ?
	       { 96'd0,
		 cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[31:0] } :
	       SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d421 ;
  assign result__h21207 =
	     cache_rg_is_unsigned ?
	       { 96'd0,
		 cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[63:32] } :
	       SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d425 ;
  assign result__h21240 =
	     cache_rg_is_unsigned ?
	       { 96'd0,
		 cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[95:64] } :
	       SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d429 ;
  assign result__h21273 =
	     cache_rg_is_unsigned ?
	       { 96'd0,
		 cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[127:96] } :
	       SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d433 ;
  assign result__h35284 =
	     cache_rg_is_unsigned ?
	       { 64'd0, cache_master_xactor_shim_rff_rv$port1__read[68:5] } :
	       { {64{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q3[63]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q3 } ;
  assign result__h35309 =
	     cache_rg_is_unsigned ?
	       { 64'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[132:69] } :
	       { {64{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q18[63]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q18 } ;
  assign result__h35367 =
	     cache_rg_is_unsigned ?
	       { 120'd0, cache_master_xactor_shim_rff_rv$port1__read[12:5] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q4[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q4 } ;
  assign result__h35403 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[20:13] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q8[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q8 } ;
  assign result__h35436 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[28:21] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q9[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q9 } ;
  assign result__h35469 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[36:29] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q5[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q5 } ;
  assign result__h35502 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[44:37] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q11[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q11 } ;
  assign result__h35535 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[52:45] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q14[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q14 } ;
  assign result__h35568 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[60:53] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q15[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q15 } ;
  assign result__h35601 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[68:61] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q17[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q17 } ;
  assign result__h35634 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[76:69] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q19[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q19 } ;
  assign result__h35667 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[84:77] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q22[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q22 } ;
  assign result__h35700 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[92:85] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q23[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q23 } ;
  assign result__h35733 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[100:93] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q25[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q25 } ;
  assign result__h35766 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[108:101] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q26[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q26 } ;
  assign result__h35799 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[116:109] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q29[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q29 } ;
  assign result__h35832 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[124:117] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q30[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q30 } ;
  assign result__h35865 =
	     cache_rg_is_unsigned ?
	       { 120'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[132:125] } :
	       { {120{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q32[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q32 } ;
  assign result__h35920 =
	     cache_rg_is_unsigned ?
	       { 112'd0, cache_master_xactor_shim_rff_rv$port1__read[20:5] } :
	       { {112{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q6[15]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q6 } ;
  assign result__h35953 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[36:21] } :
	       { {112{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q10[15]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q10 } ;
  assign result__h35986 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[52:37] } :
	       { {112{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q12[15]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q12 } ;
  assign result__h36019 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[68:53] } :
	       { {112{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q16[15]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q16 } ;
  assign result__h36052 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[84:69] } :
	       { {112{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q20[15]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q20 } ;
  assign result__h36085 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[100:85] } :
	       { {112{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q24[15]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q24 } ;
  assign result__h36118 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[116:101] } :
	       { {112{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q27[15]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q27 } ;
  assign result__h36151 =
	     cache_rg_is_unsigned ?
	       { 112'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[132:117] } :
	       { {112{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q31[15]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q31 } ;
  assign result__h36198 =
	     cache_rg_is_unsigned ?
	       { 96'd0, cache_master_xactor_shim_rff_rv$port1__read[36:5] } :
	       { {96{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q7[31]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q7 } ;
  assign result__h36231 =
	     cache_rg_is_unsigned ?
	       { 96'd0, cache_master_xactor_shim_rff_rv$port1__read[68:37] } :
	       { {96{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q13[31]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q13 } ;
  assign result__h36264 =
	     cache_rg_is_unsigned ?
	       { 96'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[100:69] } :
	       { {96{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q21[31]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q21 } ;
  assign result__h36297 =
	     cache_rg_is_unsigned ?
	       { 96'd0,
		 cache_master_xactor_shim_rff_rv$port1__read[132:101] } :
	       { {96{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q28[31]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q28 } ;
  assign result__h38701 =
	     { {120{x5356_BITS_7_TO_0__q68[7]}}, x5356_BITS_7_TO_0__q68 } ;
  assign result__h39870 =
	     { {120{x5356_BITS_15_TO_8__q72[7]}}, x5356_BITS_15_TO_8__q72 } ;
  assign result__h39902 =
	     { {120{x5356_BITS_23_TO_16__q73[7]}},
	       x5356_BITS_23_TO_16__q73 } ;
  assign result__h39934 =
	     { {120{x5356_BITS_31_TO_24__q75[7]}},
	       x5356_BITS_31_TO_24__q75 } ;
  assign result__h39966 =
	     { {120{x5356_BITS_39_TO_32__q76[7]}},
	       x5356_BITS_39_TO_32__q76 } ;
  assign result__h39998 =
	     { {120{x5356_BITS_47_TO_40__q79[7]}},
	       x5356_BITS_47_TO_40__q79 } ;
  assign result__h40030 =
	     { {120{x5356_BITS_55_TO_48__q80[7]}},
	       x5356_BITS_55_TO_48__q80 } ;
  assign result__h40062 =
	     { {120{x5356_BITS_63_TO_56__q82[7]}},
	       x5356_BITS_63_TO_56__q82 } ;
  assign result__h40094 =
	     { {120{x5356_BITS_71_TO_64__q83[7]}},
	       x5356_BITS_71_TO_64__q83 } ;
  assign result__h40126 =
	     { {120{x5356_BITS_79_TO_72__q87[7]}},
	       x5356_BITS_79_TO_72__q87 } ;
  assign result__h40158 =
	     { {120{x5356_BITS_87_TO_80__q88[7]}},
	       x5356_BITS_87_TO_80__q88 } ;
  assign result__h40190 =
	     { {120{x5356_BITS_95_TO_88__q90[7]}},
	       x5356_BITS_95_TO_88__q90 } ;
  assign result__h40222 =
	     { {120{x5356_BITS_103_TO_96__q91[7]}},
	       x5356_BITS_103_TO_96__q91 } ;
  assign result__h40254 =
	     { {120{x5356_BITS_111_TO_104__q94[7]}},
	       x5356_BITS_111_TO_104__q94 } ;
  assign result__h40286 =
	     { {120{x5356_BITS_119_TO_112__q95[7]}},
	       x5356_BITS_119_TO_112__q95 } ;
  assign result__h40318 =
	     { {120{x5356_BITS_127_TO_120__q97[7]}},
	       x5356_BITS_127_TO_120__q97 } ;
  assign result__h40372 =
	     { {112{x5356_BITS_15_TO_0__q69[15]}}, x5356_BITS_15_TO_0__q69 } ;
  assign result__h40404 =
	     { {112{x5356_BITS_31_TO_16__q74[15]}},
	       x5356_BITS_31_TO_16__q74 } ;
  assign result__h40436 =
	     { {112{x5356_BITS_47_TO_32__q78[15]}},
	       x5356_BITS_47_TO_32__q78 } ;
  assign result__h40468 =
	     { {112{x5356_BITS_63_TO_48__q81[15]}},
	       x5356_BITS_63_TO_48__q81 } ;
  assign result__h40500 =
	     { {112{x5356_BITS_79_TO_64__q84[15]}},
	       x5356_BITS_79_TO_64__q84 } ;
  assign result__h40532 =
	     { {112{x5356_BITS_95_TO_80__q89[15]}},
	       x5356_BITS_95_TO_80__q89 } ;
  assign result__h40564 =
	     { {112{x5356_BITS_111_TO_96__q92[15]}},
	       x5356_BITS_111_TO_96__q92 } ;
  assign result__h40596 =
	     { {112{x5356_BITS_127_TO_112__q96[15]}},
	       x5356_BITS_127_TO_112__q96 } ;
  assign result__h40642 =
	     { {96{x5356_BITS_31_TO_0__q70[31]}}, x5356_BITS_31_TO_0__q70 } ;
  assign result__h40674 =
	     { {96{x5356_BITS_63_TO_32__q77[31]}},
	       x5356_BITS_63_TO_32__q77 } ;
  assign result__h40706 =
	     { {96{x5356_BITS_95_TO_64__q85[31]}},
	       x5356_BITS_95_TO_64__q85 } ;
  assign result__h40738 =
	     { {96{x5356_BITS_127_TO_96__q93[31]}},
	       x5356_BITS_127_TO_96__q93 } ;
  assign result__h40792 =
	     { {64{x5356_BITS_63_TO_0__q71[63]}}, x5356_BITS_63_TO_0__q71 } ;
  assign result__h40821 =
	     { {64{x5356_BITS_127_TO_64__q86[63]}},
	       x5356_BITS_127_TO_64__q86 } ;
  assign result__h7427 =
	     cache_rg_is_unsigned ?
	       { 64'd0,
		 cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[63:0] } :
	       SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d441 ;
  assign shift_bits__h31095 = { cache_rg_addr[3:0], 3'b0 } ;
  assign shift_bits__h38305 = { cache_rg_pa[3:0], 3'b0 } ;
  assign strobe128__h31152 = 16'b0000000000000001 << cache_rg_addr[3:0] ;
  assign strobe128__h31155 = 16'b0000000000000011 << cache_rg_addr[3:0] ;
  assign strobe128__h31158 = 16'b0000000000001111 << cache_rg_addr[3:0] ;
  assign strobe128__h31161 = 16'b0000000011111111 << cache_rg_addr[3:0] ;
  assign strobe128__h38362 = 16'b0000000000000001 << cache_rg_pa[3:0] ;
  assign strobe128__h38365 = 16'b0000000000000011 << cache_rg_pa[3:0] ;
  assign strobe128__h38368 = 16'b0000000000001111 << cache_rg_pa[3:0] ;
  assign strobe128__h38371 = 16'b0000000011111111 << cache_rg_pa[3:0] ;
  assign w1___1__h27212 = { 32'd0, x__h27298[31:0] } ;
  assign w1___1__h38534 = { 32'd0, x__h38620[31:0] } ;
  assign w1__h26999 =
	     (cache_rg_width_code == 3'd2) ?
	       w1___1__h27212 :
	       x__h27298[63:0] ;
  assign w1__h38455 =
	     (cache_rg_width_code == 3'd2) ?
	       w1___1__h38534 :
	       x__h38620[63:0] ;
  assign w2__h27001 =
	     (cache_rg_width_code == 3'd2) ?
	       { 32'd0, cache_rg_st_amo_val[31:0] } :
	       cache_rg_st_amo_val[63:0] ;
  assign word128__h38302 = { 64'd0, x__h38473 } ;
  assign x5356_BITS_103_TO_96__q91 = x__h35356[103:96] ;
  assign x5356_BITS_111_TO_104__q94 = x__h35356[111:104] ;
  assign x5356_BITS_111_TO_96__q92 = x__h35356[111:96] ;
  assign x5356_BITS_119_TO_112__q95 = x__h35356[119:112] ;
  assign x5356_BITS_127_TO_112__q96 = x__h35356[127:112] ;
  assign x5356_BITS_127_TO_120__q97 = x__h35356[127:120] ;
  assign x5356_BITS_127_TO_64__q86 = x__h35356[127:64] ;
  assign x5356_BITS_127_TO_96__q93 = x__h35356[127:96] ;
  assign x5356_BITS_15_TO_0__q69 = x__h35356[15:0] ;
  assign x5356_BITS_15_TO_8__q72 = x__h35356[15:8] ;
  assign x5356_BITS_23_TO_16__q73 = x__h35356[23:16] ;
  assign x5356_BITS_31_TO_0__q70 = x__h35356[31:0] ;
  assign x5356_BITS_31_TO_16__q74 = x__h35356[31:16] ;
  assign x5356_BITS_31_TO_24__q75 = x__h35356[31:24] ;
  assign x5356_BITS_39_TO_32__q76 = x__h35356[39:32] ;
  assign x5356_BITS_47_TO_32__q78 = x__h35356[47:32] ;
  assign x5356_BITS_47_TO_40__q79 = x__h35356[47:40] ;
  assign x5356_BITS_55_TO_48__q80 = x__h35356[55:48] ;
  assign x5356_BITS_63_TO_0__q71 = x__h35356[63:0] ;
  assign x5356_BITS_63_TO_32__q77 = x__h35356[63:32] ;
  assign x5356_BITS_63_TO_48__q81 = x__h35356[63:48] ;
  assign x5356_BITS_63_TO_56__q82 = x__h35356[63:56] ;
  assign x5356_BITS_71_TO_64__q83 = x__h35356[71:64] ;
  assign x5356_BITS_79_TO_64__q84 = x__h35356[79:64] ;
  assign x5356_BITS_79_TO_72__q87 = x__h35356[79:72] ;
  assign x5356_BITS_7_TO_0__q68 = x__h35356[7:0] ;
  assign x5356_BITS_87_TO_80__q88 = x__h35356[87:80] ;
  assign x5356_BITS_95_TO_64__q85 = x__h35356[95:64] ;
  assign x5356_BITS_95_TO_80__q89 = x__h35356[95:80] ;
  assign x5356_BITS_95_TO_88__q90 = x__h35356[95:88] ;
  assign x7298_BITS_31_TO_0__q64 = x__h27298[31:0] ;
  assign x8620_BITS_31_TO_0__q98 = x__h38620[31:0] ;
  assign x__h22614 =
	     (cache_rg_width_code == 3'd3 && cache_rg_st_amo_val[128]) ?
	       cache_ram_word128_set$DOB[129:128] | x__h26955 :
	       cache_ram_word128_set_b_read__56_BITS_129_TO_1_ETC___d558 ;
  assign x__h26955 = 2'd1 << x__h27040 ;
  assign x__h27040 = { 3'd0, cache_rg_addr[3] } ;
  assign x__h27151 =
	     (cache_rg_width_code == 3'd2) ?
	       new_st_val__h27153 :
	       _theResult_____2__h27007 ;
  assign x__h38473 =
	     (cache_rg_width_code == 3'd2) ?
	       new_st_val__h38475 :
	       _theResult_____2__h38463 ;
  assign y__h27023 = ~x__h26955 ;
  assign y__h7477 =
	     {130{cache_ram_state_and_ctag_cset$DOB[22] &&
		  cache_ram_state_and_ctag_cset_b_read__22_BITS__ETC___d128}} ;
  always@(cache_rg_width_code)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4: x__h25722 = 128'd1;
      default: x__h25722 = 128'd0;
    endcase
  end
  always@(cache_rg_width_code)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'd2, 3'd3: size_val__h37758 = cache_rg_width_code;
      default: size_val__h37758 = 3'b100;
    endcase
  end
  always@(cache_rg_width_code)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4:
	  _theResult___fst_val__h38381 = cache_rg_width_code;
      default: _theResult___fst_val__h38381 = 3'b111;
    endcase
  end
  always@(cache_rg_addr or result__h35284 or result__h35309)
  begin
    case (cache_rg_addr[3:0])
      4'h0: _theResult___fst__h35282 = result__h35284;
      4'h8: _theResult___fst__h35282 = result__h35309;
      default: _theResult___fst__h35282 = 128'd0;
    endcase
  end
  always@(cache_rg_width_code or
	  strobe128__h38362 or
	  strobe128__h38365 or strobe128__h38368 or strobe128__h38371)
  begin
    case (cache_rg_width_code)
      3'd0: mem_req_wr_data_wstrb__h38435 = strobe128__h38362;
      3'd1: mem_req_wr_data_wstrb__h38435 = strobe128__h38365;
      3'd2: mem_req_wr_data_wstrb__h38435 = strobe128__h38368;
      3'd3: mem_req_wr_data_wstrb__h38435 = strobe128__h38371;
      3'd4: mem_req_wr_data_wstrb__h38435 = 16'b1111111111111111;
      default: mem_req_wr_data_wstrb__h38435 = 16'd0;
    endcase
  end
  always@(cache_rg_width_code or
	  strobe128__h31152 or
	  strobe128__h31155 or strobe128__h31158 or strobe128__h31161)
  begin
    case (cache_rg_width_code)
      3'd0: mem_req_wr_data_wstrb__h31225 = strobe128__h31152;
      3'd1: mem_req_wr_data_wstrb__h31225 = strobe128__h31155;
      3'd2: mem_req_wr_data_wstrb__h31225 = strobe128__h31158;
      3'd3: mem_req_wr_data_wstrb__h31225 = strobe128__h31161;
      3'd4: mem_req_wr_data_wstrb__h31225 = 16'b1111111111111111;
      default: mem_req_wr_data_wstrb__h31225 = 16'd0;
    endcase
  end
  always@(cache_rg_width_code or
	  cache_rg_st_amo_val or _theResult___snd_fst__h26404)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'd2, 3'd3:
	  mem_req_wr_data_wdata__h26395 = _theResult___snd_fst__h26404;
      default: mem_req_wr_data_wdata__h26395 = cache_rg_st_amo_val[127:0];
    endcase
  end
  always@(cache_rg_width_code or
	  cache_rg_st_amo_val or _theResult___snd_fst__h37053)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'd2, 3'd3:
	  mem_req_wr_data_wdata__h37044 = _theResult___snd_fst__h37053;
      default: mem_req_wr_data_wdata__h37044 = cache_rg_st_amo_val[127:0];
    endcase
  end
  always@(cache_rg_addr or
	  SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d441 or
	  SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d445)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  _theResult___fst__h28303 =
	      SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d441;
      4'h8:
	  _theResult___fst__h28303 =
	      SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d445;
      default: _theResult___fst__h28303 = 128'd0;
    endcase
  end
  always@(cache_rg_addr or result__h7427 or result__h20273)
  begin
    case (cache_rg_addr[3:0])
      4'h0: _theResult___fst__h7425 = result__h7427;
      4'h8: _theResult___fst__h7425 = result__h20273;
      default: _theResult___fst__h7425 = 128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h21174 or
	  result__h21207 or result__h21240 or result__h21273)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d438 =
	      result__h21174;
      4'h4:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d438 =
	      result__h21207;
      4'h8:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d438 =
	      result__h21240;
      4'hC:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d438 =
	      result__h21273;
      default: IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d438 =
		   128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d421 or
	  SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d425 or
	  SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d429 or
	  SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d433)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d528 =
	      SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d421;
      4'h4:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d528 =
	      SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d425;
      4'h8:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d528 =
	      SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d429;
      4'hC:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d528 =
	      SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d433;
      default: IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d528 =
		   128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d381 or
	  SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d385 or
	  SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d389 or
	  SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d393 or
	  SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d397 or
	  SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d401 or
	  SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d405 or
	  SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d409)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d524 =
	      SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d381;
      4'h2:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d524 =
	      SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d385;
      4'h4:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d524 =
	      SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d389;
      4'h6:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d524 =
	      SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d393;
      4'h8:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d524 =
	      SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d397;
      4'hA:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d524 =
	      SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d401;
      4'hC:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d524 =
	      SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d405;
      4'hE:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d524 =
	      SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d409;
      default: IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d524 =
		   128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h20896 or
	  result__h20929 or
	  result__h20962 or
	  result__h20995 or
	  result__h21028 or
	  result__h21061 or result__h21094 or result__h21127)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d418 =
	      result__h20896;
      4'h2:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d418 =
	      result__h20929;
      4'h4:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d418 =
	      result__h20962;
      4'h6:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d418 =
	      result__h20995;
      4'h8:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d418 =
	      result__h21028;
      4'hA:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d418 =
	      result__h21061;
      4'hC:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d418 =
	      result__h21094;
      4'hE:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d418 =
	      result__h21127;
      default: IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d418 =
		   128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d287 or
	  SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d292 or
	  SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d297 or
	  SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d302 or
	  SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d307 or
	  SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d312 or
	  SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d317 or
	  SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d322 or
	  SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d326 or
	  SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d331 or
	  SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d336 or
	  SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d341 or
	  SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d346 or
	  SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d351 or
	  SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d356 or
	  SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d361)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d516 =
	      SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d287;
      4'h1:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d516 =
	      SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d292;
      4'h2:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d516 =
	      SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d297;
      4'h3:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d516 =
	      SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d302;
      4'h4:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d516 =
	      SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d307;
      4'h5:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d516 =
	      SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d312;
      4'h6:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d516 =
	      SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d317;
      4'h7:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d516 =
	      SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d322;
      4'h8:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d516 =
	      SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d326;
      4'h9:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d516 =
	      SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d331;
      4'hA:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d516 =
	      SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d336;
      4'hB:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d516 =
	      SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d341;
      4'hC:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d516 =
	      SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d346;
      4'hD:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d516 =
	      SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d351;
      4'hE:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d516 =
	      SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d356;
      4'hF:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d516 =
	      SEXT_cache_ram_word128_set_b_read__56_AND_cach_ETC___d361;
    endcase
  end
  always@(cache_rg_width_code or
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d516 or
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d524 or
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d528 or
	  _theResult___fst__h28303 or
	  cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273)
  begin
    case (cache_rg_width_code)
      3'd0:
	  x__h27298 =
	      IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d516;
      3'd1:
	  x__h27298 =
	      IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d524;
      3'd2:
	  x__h27298 =
	      IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d528;
      3'd3: x__h27298 = _theResult___fst__h28303;
      3'd4:
	  x__h27298 =
	      cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[127:0];
      default: x__h27298 = 128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h20341 or
	  result__h20379 or
	  result__h20412 or
	  result__h20445 or
	  result__h20478 or
	  result__h20511 or
	  result__h20544 or
	  result__h20577 or
	  result__h20610 or
	  result__h20643 or
	  result__h20676 or
	  result__h20709 or
	  result__h20742 or
	  result__h20775 or result__h20808 or result__h20841)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d378 =
	      result__h20341;
      4'h1:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d378 =
	      result__h20379;
      4'h2:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d378 =
	      result__h20412;
      4'h3:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d378 =
	      result__h20445;
      4'h4:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d378 =
	      result__h20478;
      4'h5:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d378 =
	      result__h20511;
      4'h6:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d378 =
	      result__h20544;
      4'h7:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d378 =
	      result__h20577;
      4'h8:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d378 =
	      result__h20610;
      4'h9:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d378 =
	      result__h20643;
      4'hA:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d378 =
	      result__h20676;
      4'hB:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d378 =
	      result__h20709;
      4'hC:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d378 =
	      result__h20742;
      4'hD:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d378 =
	      result__h20775;
      4'hE:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d378 =
	      result__h20808;
      4'hF:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d378 =
	      result__h20841;
    endcase
  end
  always@(cache_rg_width_code or
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d378 or
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d418 or
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d438 or
	  _theResult___fst__h7425 or
	  cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273)
  begin
    case (cache_rg_width_code)
      3'd0:
	  x__h20330 =
	      IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d378;
      3'd1:
	  x__h20330 =
	      IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d418;
      3'd2:
	  x__h20330 =
	      IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d438;
      3'd3: x__h20330 = _theResult___fst__h7425;
      3'd4:
	  x__h20330 =
	      cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273[127:0];
      default: x__h20330 = 128'd0;
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or cache_rg_st_amo_val)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d649 =
	      { cache_ram_word128_set$DOB[127:32],
		cache_rg_st_amo_val[31:0] };
      4'h4:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d649 =
	      { cache_ram_word128_set$DOB[127:64],
		cache_rg_st_amo_val[31:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h8:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d649 =
	      { cache_ram_word128_set$DOB[127:96],
		cache_rg_st_amo_val[31:0],
		cache_ram_word128_set$DOB[63:0] };
      4'hC:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d649 =
	      { cache_rg_st_amo_val[31:0], cache_ram_word128_set$DOB[95:0] };
      default: IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d649 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or cache_rg_st_amo_val)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d640 =
	      { cache_ram_word128_set$DOB[127:16],
		cache_rg_st_amo_val[15:0] };
      4'h2:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d640 =
	      { cache_ram_word128_set$DOB[127:32],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[15:0] };
      4'h4:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d640 =
	      { cache_ram_word128_set$DOB[127:48],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h6:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d640 =
	      { cache_ram_word128_set$DOB[127:64],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[47:0] };
      4'h8:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d640 =
	      { cache_ram_word128_set$DOB[127:80],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[63:0] };
      4'hA:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d640 =
	      { cache_ram_word128_set$DOB[127:96],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[79:0] };
      4'hC:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d640 =
	      { cache_ram_word128_set$DOB[127:112],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[95:0] };
      4'hE:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d640 =
	      { cache_rg_st_amo_val[15:0], cache_ram_word128_set$DOB[111:0] };
      default: IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d640 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or cache_rg_st_amo_val)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d623 =
	      { cache_ram_word128_set$DOB[127:8], cache_rg_st_amo_val[7:0] };
      4'h1:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d623 =
	      { cache_ram_word128_set$DOB[127:16],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[7:0] };
      4'h2:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d623 =
	      { cache_ram_word128_set$DOB[127:24],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[15:0] };
      4'h3:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d623 =
	      { cache_ram_word128_set$DOB[127:32],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[23:0] };
      4'h4:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d623 =
	      { cache_ram_word128_set$DOB[127:40],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h5:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d623 =
	      { cache_ram_word128_set$DOB[127:48],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[39:0] };
      4'h6:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d623 =
	      { cache_ram_word128_set$DOB[127:56],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[47:0] };
      4'h7:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d623 =
	      { cache_ram_word128_set$DOB[127:64],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[55:0] };
      4'h8:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d623 =
	      { cache_ram_word128_set$DOB[127:72],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[63:0] };
      4'h9:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d623 =
	      { cache_ram_word128_set$DOB[127:80],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[71:0] };
      4'hA:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d623 =
	      { cache_ram_word128_set$DOB[127:88],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[79:0] };
      4'hB:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d623 =
	      { cache_ram_word128_set$DOB[127:96],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[87:0] };
      4'hC:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d623 =
	      { cache_ram_word128_set$DOB[127:104],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[95:0] };
      4'hD:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d623 =
	      { cache_ram_word128_set$DOB[127:112],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[103:0] };
      4'hE:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d623 =
	      { cache_ram_word128_set$DOB[127:120],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[111:0] };
      4'hF:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d623 =
	      { cache_rg_st_amo_val[7:0], cache_ram_word128_set$DOB[119:0] };
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or cache_rg_st_amo_val)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q63 =
	      { cache_ram_word128_set$DOB[127:64],
		cache_rg_st_amo_val[63:0] };
      4'h8:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q63 =
	      { cache_rg_st_amo_val[63:0], cache_ram_word128_set$DOB[63:0] };
      default: CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q63 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_width_code or
	  cache_ram_word128_set$DOB or
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d623 or
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d640 or
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d649 or
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q63 or
	  cache_rg_st_amo_val)
  begin
    case (cache_rg_width_code)
      3'd0:
	  x__h22742 =
	      IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d623;
      3'd1:
	  x__h22742 =
	      IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d640;
      3'd2:
	  x__h22742 =
	      IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d649;
      3'd3:
	  x__h22742 = CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q63;
      3'd4: x__h22742 = cache_rg_st_amo_val[127:0];
      default: x__h22742 = cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_amo_funct7 or
	  new_st_val__h28422 or
	  new_st_val__h27246 or
	  w2__h27001 or
	  new_st_val__h28394 or
	  new_st_val__h28402 or
	  new_st_val__h28398 or
	  new_st_val__h28417 or new_st_val__h28406 or new_st_val__h28411)
  begin
    case (cache_rg_amo_funct7[6:2])
      5'b0: _theResult_____2__h27007 = new_st_val__h27246;
      5'b00001: _theResult_____2__h27007 = w2__h27001;
      5'b00100: _theResult_____2__h27007 = new_st_val__h28394;
      5'b01000: _theResult_____2__h27007 = new_st_val__h28402;
      5'b01100: _theResult_____2__h27007 = new_st_val__h28398;
      5'b10000: _theResult_____2__h27007 = new_st_val__h28417;
      5'b11000: _theResult_____2__h27007 = new_st_val__h28406;
      5'b11100: _theResult_____2__h27007 = new_st_val__h28411;
      default: _theResult_____2__h27007 = new_st_val__h28422;
    endcase
  end
  always@(cache_rg_width_code or x__h27151 or _theResult___snd_fst__h31233)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'd2, 3'd3:
	  mem_req_wr_data_wdata__h31224 = _theResult___snd_fst__h31233;
      default: mem_req_wr_data_wdata__h31224 = { 64'd0, x__h27151 };
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or x__h27151)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d759 =
	      { cache_ram_word128_set$DOB[127:32], x__h27151[31:0] };
      4'h4:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d759 =
	      { cache_ram_word128_set$DOB[127:64],
		x__h27151[31:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h8:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d759 =
	      { cache_ram_word128_set$DOB[127:96],
		x__h27151[31:0],
		cache_ram_word128_set$DOB[63:0] };
      4'hC:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d759 =
	      { x__h27151[31:0], cache_ram_word128_set$DOB[95:0] };
      default: IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d759 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or x__h27151)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d750 =
	      { cache_ram_word128_set$DOB[127:16], x__h27151[15:0] };
      4'h2:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d750 =
	      { cache_ram_word128_set$DOB[127:32],
		x__h27151[15:0],
		cache_ram_word128_set$DOB[15:0] };
      4'h4:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d750 =
	      { cache_ram_word128_set$DOB[127:48],
		x__h27151[15:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h6:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d750 =
	      { cache_ram_word128_set$DOB[127:64],
		x__h27151[15:0],
		cache_ram_word128_set$DOB[47:0] };
      4'h8:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d750 =
	      { cache_ram_word128_set$DOB[127:80],
		x__h27151[15:0],
		cache_ram_word128_set$DOB[63:0] };
      4'hA:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d750 =
	      { cache_ram_word128_set$DOB[127:96],
		x__h27151[15:0],
		cache_ram_word128_set$DOB[79:0] };
      4'hC:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d750 =
	      { cache_ram_word128_set$DOB[127:112],
		x__h27151[15:0],
		cache_ram_word128_set$DOB[95:0] };
      4'hE:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d750 =
	      { x__h27151[15:0], cache_ram_word128_set$DOB[111:0] };
      default: IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d750 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or x__h27151)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d733 =
	      { cache_ram_word128_set$DOB[127:8], x__h27151[7:0] };
      4'h1:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d733 =
	      { cache_ram_word128_set$DOB[127:16],
		x__h27151[7:0],
		cache_ram_word128_set$DOB[7:0] };
      4'h2:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d733 =
	      { cache_ram_word128_set$DOB[127:24],
		x__h27151[7:0],
		cache_ram_word128_set$DOB[15:0] };
      4'h3:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d733 =
	      { cache_ram_word128_set$DOB[127:32],
		x__h27151[7:0],
		cache_ram_word128_set$DOB[23:0] };
      4'h4:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d733 =
	      { cache_ram_word128_set$DOB[127:40],
		x__h27151[7:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h5:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d733 =
	      { cache_ram_word128_set$DOB[127:48],
		x__h27151[7:0],
		cache_ram_word128_set$DOB[39:0] };
      4'h6:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d733 =
	      { cache_ram_word128_set$DOB[127:56],
		x__h27151[7:0],
		cache_ram_word128_set$DOB[47:0] };
      4'h7:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d733 =
	      { cache_ram_word128_set$DOB[127:64],
		x__h27151[7:0],
		cache_ram_word128_set$DOB[55:0] };
      4'h8:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d733 =
	      { cache_ram_word128_set$DOB[127:72],
		x__h27151[7:0],
		cache_ram_word128_set$DOB[63:0] };
      4'h9:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d733 =
	      { cache_ram_word128_set$DOB[127:80],
		x__h27151[7:0],
		cache_ram_word128_set$DOB[71:0] };
      4'hA:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d733 =
	      { cache_ram_word128_set$DOB[127:88],
		x__h27151[7:0],
		cache_ram_word128_set$DOB[79:0] };
      4'hB:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d733 =
	      { cache_ram_word128_set$DOB[127:96],
		x__h27151[7:0],
		cache_ram_word128_set$DOB[87:0] };
      4'hC:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d733 =
	      { cache_ram_word128_set$DOB[127:104],
		x__h27151[7:0],
		cache_ram_word128_set$DOB[95:0] };
      4'hD:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d733 =
	      { cache_ram_word128_set$DOB[127:112],
		x__h27151[7:0],
		cache_ram_word128_set$DOB[103:0] };
      4'hE:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d733 =
	      { cache_ram_word128_set$DOB[127:120],
		x__h27151[7:0],
		cache_ram_word128_set$DOB[111:0] };
      4'hF:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d733 =
	      { x__h27151[7:0], cache_ram_word128_set$DOB[119:0] };
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or x__h27151)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q66 =
	      { cache_ram_word128_set$DOB[127:64], x__h27151 };
      4'h8:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q66 =
	      { x__h27151, cache_ram_word128_set$DOB[63:0] };
      default: CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q66 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_width_code or
	  cache_ram_word128_set$DOB or
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d733 or
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d750 or
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d759 or
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q66 or
	  x__h27151)
  begin
    case (cache_rg_width_code)
      3'd0:
	  x__h27060 =
	      IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d733;
      3'd1:
	  x__h27060 =
	      IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d750;
      3'd2:
	  x__h27060 =
	      IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d759;
      3'd3:
	  x__h27060 = CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q66;
      3'd4: x__h27060 = { 64'd0, x__h27151 };
      default: x__h27060 = cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_addr or
	  result__h36198 or
	  result__h36231 or result__h36264 or result__h36297)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1111 =
	      result__h36198;
      4'h4:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1111 =
	      result__h36231;
      4'h8:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1111 =
	      result__h36264;
      4'hC:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1111 =
	      result__h36297;
      default: IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1111 =
		   128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h35920 or
	  result__h35953 or
	  result__h35986 or
	  result__h36019 or
	  result__h36052 or
	  result__h36085 or result__h36118 or result__h36151)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1091 =
	      result__h35920;
      4'h2:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1091 =
	      result__h35953;
      4'h4:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1091 =
	      result__h35986;
      4'h6:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1091 =
	      result__h36019;
      4'h8:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1091 =
	      result__h36052;
      4'hA:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1091 =
	      result__h36085;
      4'hC:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1091 =
	      result__h36118;
      4'hE:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1091 =
	      result__h36151;
      default: IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1091 =
		   128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h35367 or
	  result__h35403 or
	  result__h35436 or
	  result__h35469 or
	  result__h35502 or
	  result__h35535 or
	  result__h35568 or
	  result__h35601 or
	  result__h35634 or
	  result__h35667 or
	  result__h35700 or
	  result__h35733 or
	  result__h35766 or
	  result__h35799 or result__h35832 or result__h35865)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1051 =
	      result__h35367;
      4'h1:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1051 =
	      result__h35403;
      4'h2:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1051 =
	      result__h35436;
      4'h3:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1051 =
	      result__h35469;
      4'h4:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1051 =
	      result__h35502;
      4'h5:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1051 =
	      result__h35535;
      4'h6:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1051 =
	      result__h35568;
      4'h7:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1051 =
	      result__h35601;
      4'h8:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1051 =
	      result__h35634;
      4'h9:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1051 =
	      result__h35667;
      4'hA:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1051 =
	      result__h35700;
      4'hB:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1051 =
	      result__h35733;
      4'hC:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1051 =
	      result__h35766;
      4'hD:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1051 =
	      result__h35799;
      4'hE:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1051 =
	      result__h35832;
      4'hF:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1051 =
	      result__h35865;
    endcase
  end
  always@(cache_rg_width_code or
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1051 or
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1091 or
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1111 or
	  _theResult___fst__h35282 or
	  cache_master_xactor_shim_rff_rv$port1__read)
  begin
    case (cache_rg_width_code)
      3'd0:
	  x__h35356 =
	      IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1051;
      3'd1:
	  x__h35356 =
	      IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1091;
      3'd2:
	  x__h35356 =
	      IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1111;
      3'd3: x__h35356 = _theResult___fst__h35282;
      3'd4: x__h35356 = cache_master_xactor_shim_rff_rv$port1__read[132:5];
      default: x__h35356 = 128'd0;
    endcase
  end
  always@(cache_rg_addr or result__h40792 or result__h40821)
  begin
    case (cache_rg_addr[3:0])
      4'h0: _theResult___fst__h40790 = result__h40792;
      4'h8: _theResult___fst__h40790 = result__h40821;
      default: _theResult___fst__h40790 = 128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h40642 or
	  result__h40674 or result__h40706 or result__h40738)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1259 =
	      result__h40642;
      4'h4:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1259 =
	      result__h40674;
      4'h8:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1259 =
	      result__h40706;
      4'hC:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1259 =
	      result__h40738;
      default: IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1259 =
		   128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h40372 or
	  result__h40404 or
	  result__h40436 or
	  result__h40468 or
	  result__h40500 or
	  result__h40532 or result__h40564 or result__h40596)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1247 =
	      result__h40372;
      4'h2:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1247 =
	      result__h40404;
      4'h4:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1247 =
	      result__h40436;
      4'h6:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1247 =
	      result__h40468;
      4'h8:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1247 =
	      result__h40500;
      4'hA:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1247 =
	      result__h40532;
      4'hC:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1247 =
	      result__h40564;
      4'hE:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1247 =
	      result__h40596;
      default: IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1247 =
		   128'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result__h38701 or
	  result__h39870 or
	  result__h39902 or
	  result__h39934 or
	  result__h39966 or
	  result__h39998 or
	  result__h40030 or
	  result__h40062 or
	  result__h40094 or
	  result__h40126 or
	  result__h40158 or
	  result__h40190 or
	  result__h40222 or
	  result__h40254 or result__h40286 or result__h40318)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1223 =
	      result__h38701;
      4'h1:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1223 =
	      result__h39870;
      4'h2:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1223 =
	      result__h39902;
      4'h3:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1223 =
	      result__h39934;
      4'h4:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1223 =
	      result__h39966;
      4'h5:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1223 =
	      result__h39998;
      4'h6:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1223 =
	      result__h40030;
      4'h7:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1223 =
	      result__h40062;
      4'h8:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1223 =
	      result__h40094;
      4'h9:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1223 =
	      result__h40126;
      4'hA:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1223 =
	      result__h40158;
      4'hB:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1223 =
	      result__h40190;
      4'hC:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1223 =
	      result__h40222;
      4'hD:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1223 =
	      result__h40254;
      4'hE:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1223 =
	      result__h40286;
      4'hF:
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1223 =
	      result__h40318;
    endcase
  end
  always@(cache_rg_width_code or
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1223 or
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1247 or
	  IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1259 or
	  _theResult___fst__h40790 or x__h35356)
  begin
    case (cache_rg_width_code)
      3'd0:
	  x__h38620 =
	      IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1223;
      3'd1:
	  x__h38620 =
	      IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1247;
      3'd2:
	  x__h38620 =
	      IF_cache_rg_addr_0_BITS_3_TO_0_53_EQ_0x0_07_TH_ETC___d1259;
      3'd3: x__h38620 = _theResult___fst__h40790;
      3'd4: x__h38620 = x__h35356;
      default: x__h38620 = 128'd0;
    endcase
  end
  always@(cache_rg_amo_funct7 or
	  new_st_val__h40911 or
	  new_st_val__h38568 or
	  w2__h27001 or
	  new_st_val__h40883 or
	  new_st_val__h40891 or
	  new_st_val__h40887 or
	  new_st_val__h40906 or new_st_val__h40895 or new_st_val__h40900)
  begin
    case (cache_rg_amo_funct7[6:2])
      5'b0: _theResult_____2__h38463 = new_st_val__h38568;
      5'b00001: _theResult_____2__h38463 = w2__h27001;
      5'b00100: _theResult_____2__h38463 = new_st_val__h40883;
      5'b01000: _theResult_____2__h38463 = new_st_val__h40891;
      5'b01100: _theResult_____2__h38463 = new_st_val__h40887;
      5'b10000: _theResult_____2__h38463 = new_st_val__h40906;
      5'b11000: _theResult_____2__h38463 = new_st_val__h40895;
      5'b11100: _theResult_____2__h38463 = new_st_val__h40900;
      default: _theResult_____2__h38463 = new_st_val__h40911;
    endcase
  end
  always@(cache_rg_width_code or
	  word128__h38302 or _theResult___snd_fst__h38443)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'd2, 3'd3:
	  mem_req_wr_data_wdata__h38434 = _theResult___snd_fst__h38443;
      default: mem_req_wr_data_wdata__h38434 = word128__h38302;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cache_cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	cache_crg_sb_to_load_delay <= `BSV_ASSIGNMENT_DELAY 11'd0;
	cache_ctr_wr_rsps_pending_inrg <= `BSV_ASSIGNMENT_DELAY 4'd0;
	cache_ctr_wr_rsps_pending_outrg <= `BSV_ASSIGNMENT_DELAY 4'd0;
	cache_master_xactor_clearing <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_master_xactor_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	    98'h0AAAAAAAAAAAAAAAAAAAAAAAA;
	cache_master_xactor_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	    98'h0AAAAAAAAAAAAAAAAAAAAAAAA;
	cache_master_xactor_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY 7'd42;
	cache_master_xactor_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	    138'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	cache_master_xactor_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	    148'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	cache_rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY 6'd0;
	cache_rg_lower_word64_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_state <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (cache_cfg_verbosity$EN)
	  cache_cfg_verbosity <= `BSV_ASSIGNMENT_DELAY
	      cache_cfg_verbosity$D_IN;
	if (cache_crg_sb_to_load_delay$EN)
	  cache_crg_sb_to_load_delay <= `BSV_ASSIGNMENT_DELAY
	      cache_crg_sb_to_load_delay$D_IN;
	if (cache_ctr_wr_rsps_pending_inrg$EN)
	  cache_ctr_wr_rsps_pending_inrg <= `BSV_ASSIGNMENT_DELAY
	      cache_ctr_wr_rsps_pending_inrg$D_IN;
	if (cache_ctr_wr_rsps_pending_outrg$EN)
	  cache_ctr_wr_rsps_pending_outrg <= `BSV_ASSIGNMENT_DELAY
	      cache_ctr_wr_rsps_pending_outrg$D_IN;
	if (cache_master_xactor_clearing$EN)
	  cache_master_xactor_clearing <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_clearing$D_IN;
	if (cache_master_xactor_shim_arff_rv$EN)
	  cache_master_xactor_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_arff_rv$D_IN;
	if (cache_master_xactor_shim_awff_rv$EN)
	  cache_master_xactor_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_awff_rv$D_IN;
	if (cache_master_xactor_shim_bff_rv$EN)
	  cache_master_xactor_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_bff_rv$D_IN;
	if (cache_master_xactor_shim_rff_rv$EN)
	  cache_master_xactor_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_rff_rv$D_IN;
	if (cache_master_xactor_shim_wff_rv$EN)
	  cache_master_xactor_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_wff_rv$D_IN;
	if (cache_rg_cset_in_cache$EN)
	  cache_rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_cset_in_cache$D_IN;
	if (cache_rg_lower_word64_full$EN)
	  cache_rg_lower_word64_full <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_lower_word64_full$D_IN;
	if (cache_rg_lrsc_valid$EN)
	  cache_rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_lrsc_valid$D_IN;
	if (cache_rg_state$EN)
	  cache_rg_state <= `BSV_ASSIGNMENT_DELAY cache_rg_state$D_IN;
      end
    if (cache_rg_addr$EN)
      cache_rg_addr <= `BSV_ASSIGNMENT_DELAY cache_rg_addr$D_IN;
    if (cache_rg_amo_funct7$EN)
      cache_rg_amo_funct7 <= `BSV_ASSIGNMENT_DELAY cache_rg_amo_funct7$D_IN;
    if (cache_rg_error_during_refill$EN)
      cache_rg_error_during_refill <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_error_during_refill$D_IN;
    if (cache_rg_exc_code$EN)
      cache_rg_exc_code <= `BSV_ASSIGNMENT_DELAY cache_rg_exc_code$D_IN;
    if (cache_rg_is_unsigned$EN)
      cache_rg_is_unsigned <= `BSV_ASSIGNMENT_DELAY cache_rg_is_unsigned$D_IN;
    if (cache_rg_ld_val$EN)
      cache_rg_ld_val <= `BSV_ASSIGNMENT_DELAY cache_rg_ld_val$D_IN;
    if (cache_rg_lower_word64$EN)
      cache_rg_lower_word64 <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_lower_word64$D_IN;
    if (cache_rg_lrsc_pa$EN)
      cache_rg_lrsc_pa <= `BSV_ASSIGNMENT_DELAY cache_rg_lrsc_pa$D_IN;
    if (cache_rg_op$EN) cache_rg_op <= `BSV_ASSIGNMENT_DELAY cache_rg_op$D_IN;
    if (cache_rg_pa$EN) cache_rg_pa <= `BSV_ASSIGNMENT_DELAY cache_rg_pa$D_IN;
    if (cache_rg_pte_pa$EN)
      cache_rg_pte_pa <= `BSV_ASSIGNMENT_DELAY cache_rg_pte_pa$D_IN;
    if (cache_rg_st_amo_val$EN)
      cache_rg_st_amo_val <= `BSV_ASSIGNMENT_DELAY cache_rg_st_amo_val$D_IN;
    if (cache_rg_width_code$EN)
      cache_rg_width_code <= `BSV_ASSIGNMENT_DELAY cache_rg_width_code$D_IN;
    if (cache_rg_word128_set_in_cache$EN)
      cache_rg_word128_set_in_cache <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_word128_set_in_cache$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cache_cfg_verbosity = 4'hA;
    cache_crg_sb_to_load_delay = 11'h2AA;
    cache_ctr_wr_rsps_pending_inrg = 4'hA;
    cache_ctr_wr_rsps_pending_outrg = 4'hA;
    cache_master_xactor_clearing = 1'h0;
    cache_master_xactor_shim_arff_rv = 98'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    cache_master_xactor_shim_awff_rv = 98'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    cache_master_xactor_shim_bff_rv = 7'h2A;
    cache_master_xactor_shim_rff_rv =
	138'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    cache_master_xactor_shim_wff_rv =
	148'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    cache_rg_addr = 32'hAAAAAAAA;
    cache_rg_amo_funct7 = 7'h2A;
    cache_rg_cset_in_cache = 6'h2A;
    cache_rg_error_during_refill = 1'h0;
    cache_rg_exc_code = 6'h2A;
    cache_rg_is_unsigned = 1'h0;
    cache_rg_ld_val = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    cache_rg_lower_word64 = 64'hAAAAAAAAAAAAAAAA;
    cache_rg_lower_word64_full = 1'h0;
    cache_rg_lrsc_pa = 32'hAAAAAAAA;
    cache_rg_lrsc_valid = 1'h0;
    cache_rg_op = 2'h2;
    cache_rg_pa = 32'hAAAAAAAA;
    cache_rg_pte_pa = 32'hAAAAAAAA;
    cache_rg_st_amo_val = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    cache_rg_state = 4'hA;
    cache_rg_width_code = 3'h2;
    cache_rg_word128_set_in_cache = 8'hAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 &&
	  cache_cfg_verbosity != 4'd0 &&
	  !cache_f_reset_reqs$D_OUT)
	begin
	  v__h5524 = $stime;
	  #0;
	end
    v__h5518 = v__h5524 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 &&
	  cache_cfg_verbosity != 4'd0 &&
	  !cache_f_reset_reqs$D_OUT)
	$display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		 v__h5518,
		 "D_MMU_Cache",
		 $signed(32'd64),
		 $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_f_reset_reqs$D_OUT)
	begin
	  v__h5625 = $stime;
	  #0;
	end
    v__h5619 = v__h5625 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 6'd63 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_f_reset_reqs$D_OUT)
	$display("%0d: %s.rl_reset: Flushed", v__h5619, "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h6080 = $stime;
	  #0;
	end
    v__h6074 = v__h6080 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h",
		 v__h6074,
		 "D_MMU_Cache",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("        eaddr = {CTag 0x%0h  CSet 0x%0h  Word128 0x%0h  Byte 0x%0h}",
		 pa_ctag__h6993,
		 cache_rg_addr[11:6],
		 cache_rg_addr[5:4],
		 cache_rg_addr[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("        CSet 0x%0x: (state, tag):", cache_rg_addr[11:6]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(" (");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_ram_state_and_ctag_cset$DOB[22])
	$write("CTAG_CLEAN");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  !cache_ram_state_and_ctag_cset$DOB[22])
	$write("CTAG_EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_ram_state_and_ctag_cset$DOB[22])
	$write(", 0x%0x", cache_ram_state_and_ctag_cset$DOB[21:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  !cache_ram_state_and_ctag_cset$DOB[22])
	$write(", --");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(")");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("        CSet 0x%0x, Word128 0x%0x: ",
	       cache_rg_addr[11:6],
	       cache_rg_addr[5:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(" 0x%0x", cache_ram_word128_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("    TLB result: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("VM_Xlate_Result { ", "outcome: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("VM_XLATE_OK");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "pa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 6'h2A, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d470)
	begin
	  v__h21473 = $stime;
	  #0;
	end
    v__h21467 = v__h21473 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d470)
	$display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		 v__h21467,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273,
		 130'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d484)
	$display("        AMO LR: reserving PA 0x%0h", cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d470)
	$display("        Read-hit: addr 0x%0h word128 0x%0h",
		 cache_rg_addr,
		 cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_4_EQ_0_5_OR_cache_rg_op_4_EQ_2_6_A_ETC___d486)
	$display("        Read Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct7_7_BITS_6_TO_2_8_EQ_0b10_9__ETC___d491)
	$display("        AMO LR: cache refill: cancelling LR/SC reservation for PA 0x%0h",
		 cache_rg_lrsc_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op == 2'd1 &&
	  cache_rg_addr_0_EQ_cache_rg_lrsc_pa_08___d174 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("        ST: cancelling LR/SC reservation for PA",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_dw_commit_whas__5_AND_cache_dw_commit_wg_ETC___d822)
	$display("        AMO SC: fail: reserved addr 0x%0h, this address 0x%0h",
		 cache_rg_lrsc_pa,
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct7[6:2] == 5'b00011 &&
	  !cache_rg_lrsc_valid &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("        AMO SC: fail due to invalid LR/SC reservation");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct7[6:2] == 5'b00011 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("        AMO SC result = %0d", lrsc_result__h21863);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d834)
	$display("        Write-Cache-Hit: pa 0x%0h word128 0x%0h",
		 cache_rg_addr,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d834)
	$write("        New Word128_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d834)
	$write("        CSet 0x%0x, Word128 0x%0x: ",
	       cache_rg_addr[11:6],
	       cache_rg_addr[5:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d834)
	$write(" 0x%0x", { x__h22614, x__h22742 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d834)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  (cache_rg_op == 2'd1 ||
	   cache_rg_op == 2'd2 && cache_rg_amo_funct7[6:2] == 5'b00011) &&
	  NOT_cache_rg_op_4_EQ_2_6_40_OR_NOT_cache_rg_am_ETC___d837)
	$display("        Write-Cache-Miss: pa 0x%0h word128 0x%0h",
		 cache_rg_addr,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d844)
	$display("        Write-Cache-Hit/Miss: eaddr 0x%0h word128 0x%0h",
		 cache_rg_addr,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d844)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d844)
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d844)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d844)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d844)
	$write("'h%h", mem_req_wr_addr_awaddr__h31088);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d844)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d844)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d844)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d844)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d844)
	$write("'h%h", _theResult___fst_val__h38381, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d844)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d844)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d844)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d844)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d844)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d844)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d844)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d844)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d844)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d844)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d844)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d844)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d844)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d844)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d844)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d844)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d844)
	$write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d844)
	$write("'h%h", mem_req_wr_data_wdata__h26395);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d844)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d844)
	$write("'h%h", mem_req_wr_data_wstrb__h31225);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d844)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d844)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d844)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d844)
	$write("'h%h", mem_req_wr_data_wuser__h26398, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d844)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_4_EQ_0_5_39_AND_NOT_cache_rg_o_ETC___d844)
	$display("        => rl_write_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_4_EQ_2_6_AND_cache_rg_amo_funct7_7_ETC___d849)
	begin
	  v__h25959 = $stime;
	  #0;
	end
    v__h25953 = v__h25959 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_4_EQ_2_6_AND_cache_rg_amo_funct7_7_ETC___d849)
	$display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		 v__h25953,
		 "D_MMU_Cache",
		 32'd0,
		 130'd1,
		 130'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_4_EQ_2_6_AND_cache_rg_amo_funct7_7_ETC___d849)
	$display("        AMO SC: Fail response for addr 0x%0h",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_4_EQ_1_02_82_AND_NOT_cache_rg__ETC___d854)
	$display("        AMO Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d860)
	$display("        AMO: addr 0x%0h amo_f7 0x%0h width_code %0d is_unsigned %0d rs2_val 0x%0h",
		 cache_rg_addr,
		 cache_rg_amo_funct7,
		 cache_rg_width_code,
		 cache_rg_is_unsigned,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d860)
	$display("          PA 0x%0h ", cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d860)
	$display("          Cache word128 0x%0h, load-result 0x%0h",
		 cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273,
		 cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d860)
	$display("          0x%0h  op  0x%0h -> 0x%0h",
		 cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273,
		 cache_ram_word128_set_b_read__56_AND_cache_ram_ETC___d273,
		 { 65'd0, x__h27151 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d860)
	$write("          New Word128_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d860)
	$write("        CSet 0x%0x, Word128 0x%0x: ",
	       cache_rg_addr[11:6],
	       cache_rg_addr[5:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d860)
	$write(" 0x%0x",
	       { cache_ram_word128_set_b_read__56_BITS_129_TO_1_ETC___d558,
		 x__h27060 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d860)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d860)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d860)
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d860)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d860)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d860)
	$write("'h%h", mem_req_wr_addr_awaddr__h31088);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d860)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d860)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d860)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d860)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d860)
	$write("'h%h", _theResult___fst_val__h38381, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d860)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d860)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d860)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d860)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d860)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d860)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d860)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d860)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d860)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d860)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d860)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d860)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d860)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d860)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d860)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d860)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d860)
	$write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d860)
	$write("'h%h", mem_req_wr_data_wdata__h31224);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d860)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d860)
	$write("'h%h", mem_req_wr_data_wstrb__h31225);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d860)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d860)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d860)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d860)
	$write("'h%h", 2'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d860)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_cache_rg_op_4_EQ_1_02_82_AND_NOT_cache_rg__ETC___d864)
	$display("        AMO_op: cancelling LR/SC reservation for PA",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp && EN_commit &&
	  !cache_soc_map$m_is_mem_addr &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("    => IO_REQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_reset &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h5098 = $stime;
	  #0;
	end
    v__h5092 = v__h5098 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_reset &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s.rl_start_reset", v__h5092, "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h34687 = $stime;
	  #0;
	end
    v__h34681 = v__h34687 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s.rl_io_read_req; width_code 0x%0h vaddr %0h  paddr %0h",
		 v__h34681,
		 "D_MMU_Cache",
		 cache_rg_width_code,
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", mem_req_wr_addr_awaddr__h38298);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", size_val__h37758, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_maintain_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h36714 = $stime;
	  #0;
	end
    v__h36708 = v__h36714 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_maintain_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		 v__h36708,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 cache_rg_ld_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h36802 = $stime;
	  #0;
	end
    v__h36796 = v__h36802 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s: rl_io_write_req; width_code 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		 v__h36796,
		 "D_MMU_Cache",
		 cache_rg_width_code,
		 cache_rg_addr,
		 cache_rg_pa,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", mem_req_wr_addr_awaddr__h38298);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", _theResult___fst_val__h38381, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", mem_req_wr_data_wdata__h37044);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", mem_req_wr_data_wstrb__h38435);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", mem_req_wr_data_wuser__h26398, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_SC_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h37499 = $stime;
	  #0;
	end
    v__h37493 = v__h37499 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_SC_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s: rl_io_AMO_SC_req; width_code 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		 v__h37493,
		 "D_MMU_Cache",
		 cache_rg_width_code,
		 cache_rg_addr,
		 cache_rg_pa,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_SC_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("    FAIL due to I/O address.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_SC_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h37621 = $stime;
	  #0;
	end
    v__h37615 = v__h37621 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s.rl_io_AMO_op_req; width_code 0x%0h vaddr %0h  paddr %0h",
		 v__h37615,
		 "D_MMU_Cache",
		 cache_rg_width_code,
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", mem_req_wr_addr_awaddr__h38298);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", size_val__h37758, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d883 == 4'd0)
	begin
	  v__h41633 = $stime;
	  #0;
	end
    v__h41627 = v__h41633 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d883 == 4'd0)
	$display("%0d: ERROR: %s.rl_discard_write_rsp: unexpected W response (ctr_wr_rsps_pending.value == 0)",
		 v__h41627,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d883 == 4'd0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d883 == 4'd0)
	$write("AXI4_BFlit { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d883 == 4'd0)
	$write("'h%h", cache_master_xactor_shim_bff_rv$port1__read[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d883 == 4'd0)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d883 == 4'd0 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d883 == 4'd0 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d883 == 4'd0 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d883 == 4'd0 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd1 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d883 == 4'd0)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d883 == 4'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d883 == 4'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d883 == 4'd0)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h41880 = $stime;
	  #0;
	end
    v__h41874 = v__h41880 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("%0d: %s.rl_discard_write_rsp: pending %0d ",
	       v__h41874,
	       "D_MMU_Cache",
	       $unsigned(cache_ctr_wr_rsps_pending_inrg_read__2_MINUS_c_ETC___d883));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_BFlit { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", cache_master_xactor_shim_bff_rv$port1__read[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	begin
	  v__h41841 = $stime;
	  #0;
	end
    v__h41835 = v__h41841 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$display("%0d: %s.rl_discard_write_rsp: fabric response error: exit",
		 v__h41835,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("AXI4_BFlit { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("'h%h", cache_master_xactor_shim_bff_rv$port1__read[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd1 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h35044 = $stime;
	  #0;
	end
    v__h35038 = v__h35044 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s.rl_io_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		 v__h35038,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[136:133]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[132:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd1 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  !cache_master_xactor_shim_rff_rv$port1__read[2])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h",
	       cache_master_xactor_shim_rff_rv$port1__read[1:0],
	       " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h36489 = $stime;
	  #0;
	end
    v__h36483 = v__h36489 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		 v__h36483,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 { 1'd0, x__h35356 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h36603 = $stime;
	  #0;
	end
    v__h36597 = v__h36603 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		 v__h36597,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h37922 = $stime;
	  #0;
	end
    v__h37916 = v__h37922 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s.rl_io_AMO_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		 v__h37916,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[136:133]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[132:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd1 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  !cache_master_xactor_shim_rff_rv$port1__read[2])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h",
	       cache_master_xactor_shim_rff_rv$port1__read[1:0],
	       " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h38117 = $stime;
	  #0;
	end
    v__h38111 = v__h38117 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s: rl_io_AMO_read_rsp; f3 0x%0h  vaddr %0h  paddr %0h  word128 0x%0h",
		 v__h38111,
		 "D_MMU_Cache",
		 cache_rg_width_code,
		 cache_rg_addr,
		 cache_rg_pa,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", mem_req_wr_addr_awaddr__h38298);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", _theResult___fst_val__h38381, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", mem_req_wr_data_wdata__h38434);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", mem_req_wr_data_wstrb__h38435);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 2'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h41326 = $stime;
	  #0;
	end
    v__h41320 = v__h41326 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		 v__h41320,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 { 65'd0,
		   IF_cache_rg_width_code_97_EQ_2_02_THEN_SEXT_IF_ETC___d1274 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h38215 = $stime;
	  #0;
	end
    v__h38209 = v__h38215 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s.rl_io_AMO_read_rsp: FABRIC_RSP_ERR: raising trap STORE_AMO_ACCESS_FAULT",
		 v__h38209,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h42271 = $stime;
	  #0;
	end
    v__h42265 = v__h42271 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("%0d: %s.req: op:", v__h42265, "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  req_op == 2'd0)
	$write("CACHE_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  req_op == 2'd1)
	$write("CACHE_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  req_op != 2'd0 &&
	  req_op != 2'd1)
	$write("CACHE_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(" width_code:%0d addr:0x%0h st_value:0x%0h priv:",
	       req_width_code,
	       req_addr,
	       req_st_value);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  req_priv == 2'b0)
	$write("U");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  req_priv == 2'b01)
	$write("S");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  req_priv == 2'b11)
	$write("M");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55 &&
	  req_priv != 2'b0 &&
	  req_priv != 2'b01 &&
	  req_priv != 2'b11)
	$write("RESERVED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(" sstatus_SUM:%0d mstatus_MXR:%0d satp:0x%0h",
	       req_sstatus_SUM,
	       req_mstatus_MXR,
	       req_satp,
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("    amo_funct7 = 0x%0h", req_amo_funct7);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req &&
	  req_width_code_EQ_0b0_366_OR_req_width_code_EQ_ETC___d1407)
	$display("    fa_req_ram_B tagCSet [0x%0x] word128_set [0x%0d]",
		 req_addr[11:6],
		 req_addr[11:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h31825 = $stime;
	  #0;
	end
    v__h31819 = v__h31825 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s.rl_start_cache_refill: ", v__h31819, "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("    To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", cline_fabric_addr__h31878);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 8'd3);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 3'b100, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("    Victim way %0d; => CACHE_REFILL", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_03___d904)
	begin
	  v__h32781 = $stime;
	  #0;
	end
    v__h32775 = v__h32781 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_03___d904)
	$display("%0d: %s.rl_cache_refill_rsps_loop:",
		 v__h32775,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_03___d904)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_03___d904)
	$write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_03___d904)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[136:133]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_03___d904)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_03___d904)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[132:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_03___d904)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_03___d904 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_03___d904 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_03___d904 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_03___d904 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd1 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_03___d904)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_03___d904 &&
	  cache_master_xactor_shim_rff_rv$port1__read[2])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_03___d904 &&
	  !cache_master_xactor_shim_rff_rv$port1__read[2])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_03___d904)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_03___d904)
	$write("'h%h",
	       cache_master_xactor_shim_rff_rv$port1__read[1:0],
	       " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_03___d904)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	begin
	  v__h33043 = $stime;
	  #0;
	end
    v__h33037 = v__h33043 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d",
		 v__h33037,
		 "D_MMU_Cache",
		 access_exc_code__h4849);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_word128_set_in_cache[1:0] == 2'd3 &&
	  (cache_master_xactor_shim_rff_rv$port1__read[4:3] != 2'd0 ||
	   cache_rg_error_during_refill) &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("    => MODULE_EXCEPTION_RSP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_word128_set_in_cache[1:0] == 2'd3 &&
	  cache_master_xactor_shim_rff_rv$port1__read[4:3] == 2'd0 &&
	  !cache_rg_error_during_refill &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("    => CACHE_REREQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_03___d904)
	$display("        Updating Cache word128_set 0x%0h, word128_in_cline %0d) old => new",
		 cache_rg_word128_set_in_cache,
		 cache_rg_word128_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_03___d904)
	$write("        CSet 0x%0x, Word128 0x%0x: ",
	       cache_rg_addr[11:6],
	       cache_rg_word128_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_03___d904)
	$write(" 0x%0x", cache_ram_word128_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_03___d904)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_03___d904)
	$write("        CSet 0x%0x, Word128 0x%0x: ",
	       cache_rg_addr[11:6],
	       cache_rg_word128_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_03___d904)
	$write(" 0x%0x",
	       { cache_master_xactor_shim_rff_rv$port1__read[1:0],
		 cache_master_xactor_shim_rff_rv$port1__read[132:5] });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__3_ULE_2_03___d904)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_rereq &&
	  NOT_cache_cfg_verbosity_read__3_ULE_1_4___d55)
	$display("    fa_req_ram_B tagCSet [0x%0x] word128_set [0x%0d]",
		 cache_rg_addr[11:6],
		 cache_rg_addr[11:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
  end
  // synopsys translate_on
endmodule  // mkMMU_DCache

