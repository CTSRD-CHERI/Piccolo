//
// Generated by Bluespec Compiler, version 2019.05.beta2 (build a88bf40db, 2019-05-24)
//
// On Tue Sep  8 22:39:44 BST 2020
//
//
// Ports:
// Name                         I/O  size props
// RDY_set_verbosity              O     1 const
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1
// valid                          O     1
// addr                           O    32 reg
// word128_fst                    O     1
// word128_snd                    O   128
// st_amo_val_fst                 O     1
// st_amo_val_snd                 O   128
// exc                            O     1
// exc_code                       O     6 reg
// RDY_server_flush_request_put   O     1 reg
// RDY_server_flush_response_get  O     1
// RDY_tlb_flush                  O     1 const
// mem_master_awid                O     4
// mem_master_awaddr              O    64
// mem_master_awlen               O     8
// mem_master_awsize              O     3
// mem_master_awburst             O     2
// mem_master_awlock              O     1
// mem_master_awcache             O     4
// mem_master_awprot              O     3
// mem_master_awqos               O     4
// mem_master_awregion            O     4
// mem_master_awvalid             O     1
// mem_master_wdata               O    64
// mem_master_wstrb               O     8
// mem_master_wlast               O     1
// mem_master_wuser               O     1
// mem_master_wvalid              O     1
// mem_master_bready              O     1
// mem_master_arid                O     4
// mem_master_araddr              O    64
// mem_master_arlen               O     8
// mem_master_arsize              O     3
// mem_master_arburst             O     2
// mem_master_arlock              O     1
// mem_master_arcache             O     4
// mem_master_arprot              O     3
// mem_master_arqos               O     4
// mem_master_arregion            O     4
// mem_master_arvalid             O     1
// mem_master_rready              O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_verbosity_verbosity        I     4 reg
// req_op                         I     2
// req_width_code                 I     3
// req_is_unsigned                I     1 reg
// req_amo_funct5                 I     5 reg
// req_addr                       I    32
// req_st_value                   I   129
// req_priv                       I     2 unused
// req_sstatus_SUM                I     1 unused
// req_mstatus_MXR                I     1 unused
// req_satp                       I    32 unused
// mem_master_awready             I     1
// mem_master_wready              I     1
// mem_master_bid                 I     4
// mem_master_bresp               I     2
// mem_master_arready             I     1
// mem_master_rid                 I     4
// mem_master_rdata               I    64
// mem_master_rresp               I     2
// mem_master_rlast               I     1
// mem_master_ruser               I     1
// EN_set_verbosity               I     1
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_req                         I     1
// EN_commit                      I     1
// EN_server_flush_request_put    I     1
// EN_server_flush_response_get   I     1
// EN_tlb_flush                   I     1 unused
// mem_master_bvalid              I     1
// mem_master_rvalid              I     1
//
// Combinational paths from inputs to outputs:
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> valid
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> word128_fst
//   (mem_master_rid,
//    mem_master_rdata,
//    mem_master_rresp,
//    mem_master_rlast,
//    mem_master_ruser,
//    EN_commit,
//    mem_master_rvalid) -> word128_snd
//   EN_commit -> st_amo_val_fst
//   EN_commit -> st_amo_val_snd
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMMU_DCache(CLK,
		    RST_N,

		    set_verbosity_verbosity,
		    EN_set_verbosity,
		    RDY_set_verbosity,

		    EN_server_reset_request_put,
		    RDY_server_reset_request_put,

		    EN_server_reset_response_get,
		    RDY_server_reset_response_get,

		    req_op,
		    req_width_code,
		    req_is_unsigned,
		    req_amo_funct5,
		    req_addr,
		    req_st_value,
		    req_priv,
		    req_sstatus_SUM,
		    req_mstatus_MXR,
		    req_satp,
		    EN_req,

		    EN_commit,

		    valid,

		    addr,

		    word128_fst,

		    word128_snd,

		    st_amo_val_fst,

		    st_amo_val_snd,

		    exc,

		    exc_code,

		    EN_server_flush_request_put,
		    RDY_server_flush_request_put,

		    EN_server_flush_response_get,
		    RDY_server_flush_response_get,

		    EN_tlb_flush,
		    RDY_tlb_flush,

		    mem_master_awid,

		    mem_master_awaddr,

		    mem_master_awlen,

		    mem_master_awsize,

		    mem_master_awburst,

		    mem_master_awlock,

		    mem_master_awcache,

		    mem_master_awprot,

		    mem_master_awqos,

		    mem_master_awregion,

		    mem_master_awvalid,

		    mem_master_awready,

		    mem_master_wdata,

		    mem_master_wstrb,

		    mem_master_wlast,

		    mem_master_wuser,

		    mem_master_wvalid,

		    mem_master_wready,

		    mem_master_bid,
		    mem_master_bresp,
		    mem_master_bvalid,

		    mem_master_bready,

		    mem_master_arid,

		    mem_master_araddr,

		    mem_master_arlen,

		    mem_master_arsize,

		    mem_master_arburst,

		    mem_master_arlock,

		    mem_master_arcache,

		    mem_master_arprot,

		    mem_master_arqos,

		    mem_master_arregion,

		    mem_master_arvalid,

		    mem_master_arready,

		    mem_master_rid,
		    mem_master_rdata,
		    mem_master_rresp,
		    mem_master_rlast,
		    mem_master_ruser,
		    mem_master_rvalid,

		    mem_master_rready);
  input  CLK;
  input  RST_N;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // action method req
  input  [1 : 0] req_op;
  input  [2 : 0] req_width_code;
  input  req_is_unsigned;
  input  [4 : 0] req_amo_funct5;
  input  [31 : 0] req_addr;
  input  [128 : 0] req_st_value;
  input  [1 : 0] req_priv;
  input  req_sstatus_SUM;
  input  req_mstatus_MXR;
  input  [31 : 0] req_satp;
  input  EN_req;

  // action method commit
  input  EN_commit;

  // value method valid
  output valid;

  // value method addr
  output [31 : 0] addr;

  // value method word128_fst
  output word128_fst;

  // value method word128_snd
  output [127 : 0] word128_snd;

  // value method st_amo_val_fst
  output st_amo_val_fst;

  // value method st_amo_val_snd
  output [127 : 0] st_amo_val_snd;

  // value method exc
  output exc;

  // value method exc_code
  output [5 : 0] exc_code;

  // action method server_flush_request_put
  input  EN_server_flush_request_put;
  output RDY_server_flush_request_put;

  // action method server_flush_response_get
  input  EN_server_flush_response_get;
  output RDY_server_flush_response_get;

  // action method tlb_flush
  input  EN_tlb_flush;
  output RDY_tlb_flush;

  // value method mem_master_aw_awid
  output [3 : 0] mem_master_awid;

  // value method mem_master_aw_awaddr
  output [63 : 0] mem_master_awaddr;

  // value method mem_master_aw_awlen
  output [7 : 0] mem_master_awlen;

  // value method mem_master_aw_awsize
  output [2 : 0] mem_master_awsize;

  // value method mem_master_aw_awburst
  output [1 : 0] mem_master_awburst;

  // value method mem_master_aw_awlock
  output mem_master_awlock;

  // value method mem_master_aw_awcache
  output [3 : 0] mem_master_awcache;

  // value method mem_master_aw_awprot
  output [2 : 0] mem_master_awprot;

  // value method mem_master_aw_awqos
  output [3 : 0] mem_master_awqos;

  // value method mem_master_aw_awregion
  output [3 : 0] mem_master_awregion;

  // value method mem_master_aw_awuser

  // value method mem_master_aw_awvalid
  output mem_master_awvalid;

  // action method mem_master_aw_awready
  input  mem_master_awready;

  // value method mem_master_w_wdata
  output [63 : 0] mem_master_wdata;

  // value method mem_master_w_wstrb
  output [7 : 0] mem_master_wstrb;

  // value method mem_master_w_wlast
  output mem_master_wlast;

  // value method mem_master_w_wuser
  output mem_master_wuser;

  // value method mem_master_w_wvalid
  output mem_master_wvalid;

  // action method mem_master_w_wready
  input  mem_master_wready;

  // action method mem_master_b_bflit
  input  [3 : 0] mem_master_bid;
  input  [1 : 0] mem_master_bresp;
  input  mem_master_bvalid;

  // value method mem_master_b_bready
  output mem_master_bready;

  // value method mem_master_ar_arid
  output [3 : 0] mem_master_arid;

  // value method mem_master_ar_araddr
  output [63 : 0] mem_master_araddr;

  // value method mem_master_ar_arlen
  output [7 : 0] mem_master_arlen;

  // value method mem_master_ar_arsize
  output [2 : 0] mem_master_arsize;

  // value method mem_master_ar_arburst
  output [1 : 0] mem_master_arburst;

  // value method mem_master_ar_arlock
  output mem_master_arlock;

  // value method mem_master_ar_arcache
  output [3 : 0] mem_master_arcache;

  // value method mem_master_ar_arprot
  output [2 : 0] mem_master_arprot;

  // value method mem_master_ar_arqos
  output [3 : 0] mem_master_arqos;

  // value method mem_master_ar_arregion
  output [3 : 0] mem_master_arregion;

  // value method mem_master_ar_aruser

  // value method mem_master_ar_arvalid
  output mem_master_arvalid;

  // action method mem_master_ar_arready
  input  mem_master_arready;

  // action method mem_master_r_rflit
  input  [3 : 0] mem_master_rid;
  input  [63 : 0] mem_master_rdata;
  input  [1 : 0] mem_master_rresp;
  input  mem_master_rlast;
  input  mem_master_ruser;
  input  mem_master_rvalid;

  // value method mem_master_r_rready
  output mem_master_rready;

  // signals for module outputs
  wire [127 : 0] st_amo_val_snd, word128_snd;
  wire [63 : 0] mem_master_araddr, mem_master_awaddr, mem_master_wdata;
  wire [31 : 0] addr;
  wire [7 : 0] mem_master_arlen, mem_master_awlen, mem_master_wstrb;
  wire [5 : 0] exc_code;
  wire [3 : 0] mem_master_arcache,
	       mem_master_arid,
	       mem_master_arqos,
	       mem_master_arregion,
	       mem_master_awcache,
	       mem_master_awid,
	       mem_master_awqos,
	       mem_master_awregion;
  wire [2 : 0] mem_master_arprot,
	       mem_master_arsize,
	       mem_master_awprot,
	       mem_master_awsize;
  wire [1 : 0] mem_master_arburst, mem_master_awburst;
  wire RDY_server_flush_request_put,
       RDY_server_flush_response_get,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_set_verbosity,
       RDY_tlb_flush,
       exc,
       mem_master_arlock,
       mem_master_arvalid,
       mem_master_awlock,
       mem_master_awvalid,
       mem_master_bready,
       mem_master_rready,
       mem_master_wlast,
       mem_master_wuser,
       mem_master_wvalid,
       st_amo_val_fst,
       valid,
       word128_fst;

  // inlined wires
  reg [128 : 0] cache_dw_output_ld_val$wget;
  reg [97 : 0] cache_master_xactor_shim_arff_rv$port0__write_1;
  wire [128 : 0] cache_dw_output_st_amo_val$wget;
  wire [97 : 0] cache_master_xactor_shim_arff_rv$port1__read,
		cache_master_xactor_shim_arff_rv$port1__write_1,
		cache_master_xactor_shim_arff_rv$port2__read,
		cache_master_xactor_shim_arff_rv$port3__read,
		cache_master_xactor_shim_awff_rv$port0__write_1,
		cache_master_xactor_shim_awff_rv$port1__read,
		cache_master_xactor_shim_awff_rv$port2__read,
		cache_master_xactor_shim_awff_rv$port3__read;
  wire [74 : 0] cache_master_xactor_shim_wff_rv$port0__write_1,
		cache_master_xactor_shim_wff_rv$port1__read,
		cache_master_xactor_shim_wff_rv$port1__write_1,
		cache_master_xactor_shim_wff_rv$port2__read,
		cache_master_xactor_shim_wff_rv$port3__read;
  wire [72 : 0] cache_master_xactor_shim_rff_rv$port0__write_1,
		cache_master_xactor_shim_rff_rv$port1__read,
		cache_master_xactor_shim_rff_rv$port1__write_1,
		cache_master_xactor_shim_rff_rv$port2__read,
		cache_master_xactor_shim_rff_rv$port3__read;
  wire [71 : 0] cache_master_xactor_ug_master_u_r_putWire$wget;
  wire [6 : 0] cache_master_xactor_shim_bff_rv$port0__write_1,
	       cache_master_xactor_shim_bff_rv$port1__read,
	       cache_master_xactor_shim_bff_rv$port2__read,
	       cache_master_xactor_shim_bff_rv$port2__write_1,
	       cache_master_xactor_shim_bff_rv$port3__read;
  wire [5 : 0] cache_master_xactor_ug_master_u_b_putWire$wget;
  wire cache_dw_valid$wget,
       cache_dw_valid$whas,
       cache_master_xactor_shim_arff_rv$EN_port0__write,
       cache_master_xactor_shim_awff_rv$EN_port0__write,
       cache_master_xactor_shim_bff_rv$EN_port1__write,
       cache_master_xactor_shim_rff_rv$EN_port1__write,
       cache_master_xactor_shim_wff_rv$EN_port0__write,
       cache_master_xactor_ug_master_u_ar_dropWire$whas,
       cache_master_xactor_ug_master_u_aw_dropWire$whas,
       cache_master_xactor_ug_master_u_b_putWire$whas,
       cache_master_xactor_ug_master_u_r_putWire$whas,
       cache_master_xactor_ug_master_u_w_dropWire$whas,
       cache_rw_reset_req$whas;

  // register cache_cfg_verbosity
  reg [3 : 0] cache_cfg_verbosity;
  wire [3 : 0] cache_cfg_verbosity$D_IN;
  wire cache_cfg_verbosity$EN;

  // register cache_ctr_wr_rsps_pending_inrg
  reg [3 : 0] cache_ctr_wr_rsps_pending_inrg;
  wire [3 : 0] cache_ctr_wr_rsps_pending_inrg$D_IN;
  wire cache_ctr_wr_rsps_pending_inrg$EN;

  // register cache_ctr_wr_rsps_pending_outrg
  reg [3 : 0] cache_ctr_wr_rsps_pending_outrg;
  wire [3 : 0] cache_ctr_wr_rsps_pending_outrg$D_IN;
  wire cache_ctr_wr_rsps_pending_outrg$EN;

  // register cache_master_xactor_clearing
  reg cache_master_xactor_clearing;
  wire cache_master_xactor_clearing$D_IN, cache_master_xactor_clearing$EN;

  // register cache_master_xactor_shim_arff_rv
  reg [97 : 0] cache_master_xactor_shim_arff_rv;
  wire [97 : 0] cache_master_xactor_shim_arff_rv$D_IN;
  wire cache_master_xactor_shim_arff_rv$EN;

  // register cache_master_xactor_shim_awff_rv
  reg [97 : 0] cache_master_xactor_shim_awff_rv;
  wire [97 : 0] cache_master_xactor_shim_awff_rv$D_IN;
  wire cache_master_xactor_shim_awff_rv$EN;

  // register cache_master_xactor_shim_bff_rv
  reg [6 : 0] cache_master_xactor_shim_bff_rv;
  wire [6 : 0] cache_master_xactor_shim_bff_rv$D_IN;
  wire cache_master_xactor_shim_bff_rv$EN;

  // register cache_master_xactor_shim_rff_rv
  reg [72 : 0] cache_master_xactor_shim_rff_rv;
  wire [72 : 0] cache_master_xactor_shim_rff_rv$D_IN;
  wire cache_master_xactor_shim_rff_rv$EN;

  // register cache_master_xactor_shim_wff_rv
  reg [74 : 0] cache_master_xactor_shim_wff_rv;
  wire [74 : 0] cache_master_xactor_shim_wff_rv$D_IN;
  wire cache_master_xactor_shim_wff_rv$EN;

  // register cache_rg_addr
  reg [31 : 0] cache_rg_addr;
  wire [31 : 0] cache_rg_addr$D_IN;
  wire cache_rg_addr$EN;

  // register cache_rg_amo_funct5
  reg [4 : 0] cache_rg_amo_funct5;
  wire [4 : 0] cache_rg_amo_funct5$D_IN;
  wire cache_rg_amo_funct5$EN;

  // register cache_rg_cset_in_cache
  reg [6 : 0] cache_rg_cset_in_cache;
  wire [6 : 0] cache_rg_cset_in_cache$D_IN;
  wire cache_rg_cset_in_cache$EN;

  // register cache_rg_error_during_refill
  reg cache_rg_error_during_refill;
  wire cache_rg_error_during_refill$D_IN, cache_rg_error_during_refill$EN;

  // register cache_rg_exc_code
  reg [5 : 0] cache_rg_exc_code;
  reg [5 : 0] cache_rg_exc_code$D_IN;
  wire cache_rg_exc_code$EN;

  // register cache_rg_is_unsigned
  reg cache_rg_is_unsigned;
  wire cache_rg_is_unsigned$D_IN, cache_rg_is_unsigned$EN;

  // register cache_rg_ld_val
  reg [128 : 0] cache_rg_ld_val;
  reg [128 : 0] cache_rg_ld_val$D_IN;
  wire cache_rg_ld_val$EN;

  // register cache_rg_lower_tag
  reg cache_rg_lower_tag;
  wire cache_rg_lower_tag$D_IN, cache_rg_lower_tag$EN;

  // register cache_rg_lower_word64
  reg [63 : 0] cache_rg_lower_word64;
  wire [63 : 0] cache_rg_lower_word64$D_IN;
  wire cache_rg_lower_word64$EN;

  // register cache_rg_lower_word64_full
  reg cache_rg_lower_word64_full;
  reg cache_rg_lower_word64_full$D_IN;
  wire cache_rg_lower_word64_full$EN;

  // register cache_rg_lrsc_pa
  reg [31 : 0] cache_rg_lrsc_pa;
  wire [31 : 0] cache_rg_lrsc_pa$D_IN;
  wire cache_rg_lrsc_pa$EN;

  // register cache_rg_lrsc_valid
  reg cache_rg_lrsc_valid;
  wire cache_rg_lrsc_valid$D_IN, cache_rg_lrsc_valid$EN;

  // register cache_rg_op
  reg [1 : 0] cache_rg_op;
  wire [1 : 0] cache_rg_op$D_IN;
  wire cache_rg_op$EN;

  // register cache_rg_pa
  reg [31 : 0] cache_rg_pa;
  wire [31 : 0] cache_rg_pa$D_IN;
  wire cache_rg_pa$EN;

  // register cache_rg_pte_pa
  reg [31 : 0] cache_rg_pte_pa;
  wire [31 : 0] cache_rg_pte_pa$D_IN;
  wire cache_rg_pte_pa$EN;

  // register cache_rg_st_amo_val
  reg [128 : 0] cache_rg_st_amo_val;
  wire [128 : 0] cache_rg_st_amo_val$D_IN;
  wire cache_rg_st_amo_val$EN;

  // register cache_rg_state
  reg [3 : 0] cache_rg_state;
  reg [3 : 0] cache_rg_state$D_IN;
  wire cache_rg_state$EN;

  // register cache_rg_width_code
  reg [2 : 0] cache_rg_width_code;
  wire [2 : 0] cache_rg_width_code$D_IN;
  wire cache_rg_width_code$EN;

  // register cache_rg_word128_set_in_cache
  reg [7 : 0] cache_rg_word128_set_in_cache;
  wire [7 : 0] cache_rg_word128_set_in_cache$D_IN;
  wire cache_rg_word128_set_in_cache$EN;

  // ports of submodule cache_f_fabric_write_reqs
  reg [163 : 0] cache_f_fabric_write_reqs$D_IN;
  wire [163 : 0] cache_f_fabric_write_reqs$D_OUT;
  wire cache_f_fabric_write_reqs$CLR,
       cache_f_fabric_write_reqs$DEQ,
       cache_f_fabric_write_reqs$EMPTY_N,
       cache_f_fabric_write_reqs$ENQ,
       cache_f_fabric_write_reqs$FULL_N;

  // ports of submodule cache_f_reset_reqs
  wire cache_f_reset_reqs$CLR,
       cache_f_reset_reqs$DEQ,
       cache_f_reset_reqs$D_IN,
       cache_f_reset_reqs$D_OUT,
       cache_f_reset_reqs$EMPTY_N,
       cache_f_reset_reqs$ENQ,
       cache_f_reset_reqs$FULL_N;

  // ports of submodule cache_f_reset_rsps
  wire cache_f_reset_rsps$CLR,
       cache_f_reset_rsps$DEQ,
       cache_f_reset_rsps$D_IN,
       cache_f_reset_rsps$D_OUT,
       cache_f_reset_rsps$EMPTY_N,
       cache_f_reset_rsps$ENQ,
       cache_f_reset_rsps$FULL_N;

  // ports of submodule cache_ram_state_and_ctag_cset
  wire [22 : 0] cache_ram_state_and_ctag_cset$DIA,
		cache_ram_state_and_ctag_cset$DIB,
		cache_ram_state_and_ctag_cset$DOB;
  wire [6 : 0] cache_ram_state_and_ctag_cset$ADDRA,
	       cache_ram_state_and_ctag_cset$ADDRB;
  wire cache_ram_state_and_ctag_cset$ENA,
       cache_ram_state_and_ctag_cset$ENB,
       cache_ram_state_and_ctag_cset$WEA,
       cache_ram_state_and_ctag_cset$WEB;

  // ports of submodule cache_ram_word128_set
  reg [129 : 0] cache_ram_word128_set$DIB;
  reg [7 : 0] cache_ram_word128_set$ADDRB;
  wire [129 : 0] cache_ram_word128_set$DIA, cache_ram_word128_set$DOB;
  wire [7 : 0] cache_ram_word128_set$ADDRA;
  wire cache_ram_word128_set$ENA,
       cache_ram_word128_set$ENB,
       cache_ram_word128_set$WEA,
       cache_ram_word128_set$WEB;

  // ports of submodule cache_soc_map
  wire [63 : 0] cache_soc_map$m_is_IO_addr_addr,
		cache_soc_map$m_is_mem_addr_addr,
		cache_soc_map$m_is_near_mem_IO_addr_addr;
  wire cache_soc_map$m_is_mem_addr;

  // rule scheduling signals
  wire CAN_FIRE_RL_cache_do_req,
       CAN_FIRE_RL_cache_do_reset_req,
       CAN_FIRE_RL_cache_master_xactor_do_clear,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek,
       CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop,
       CAN_FIRE_RL_cache_rl_ST_AMO_response,
       CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop,
       CAN_FIRE_RL_cache_rl_discard_write_rsp,
       CAN_FIRE_RL_cache_rl_drive_exception_rsp,
       CAN_FIRE_RL_cache_rl_fabric_send_write_req,
       CAN_FIRE_RL_cache_rl_io_AMO_SC_req,
       CAN_FIRE_RL_cache_rl_io_AMO_op_req,
       CAN_FIRE_RL_cache_rl_io_AMO_read_rsp,
       CAN_FIRE_RL_cache_rl_io_read_req,
       CAN_FIRE_RL_cache_rl_io_read_rsp,
       CAN_FIRE_RL_cache_rl_io_write_req,
       CAN_FIRE_RL_cache_rl_maintain_io_read_rsp,
       CAN_FIRE_RL_cache_rl_probe_and_immed_rsp,
       CAN_FIRE_RL_cache_rl_rereq,
       CAN_FIRE_RL_cache_rl_reset,
       CAN_FIRE_RL_cache_rl_start_cache_refill,
       CAN_FIRE_RL_cache_rl_start_reset,
       CAN_FIRE___me_check_31,
       CAN_FIRE_commit,
       CAN_FIRE_mem_master_ar_arready,
       CAN_FIRE_mem_master_aw_awready,
       CAN_FIRE_mem_master_b_bflit,
       CAN_FIRE_mem_master_r_rflit,
       CAN_FIRE_mem_master_w_wready,
       CAN_FIRE_req,
       CAN_FIRE_server_flush_request_put,
       CAN_FIRE_server_flush_response_get,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_tlb_flush,
       WILL_FIRE_RL_cache_do_req,
       WILL_FIRE_RL_cache_do_reset_req,
       WILL_FIRE_RL_cache_master_xactor_do_clear,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek,
       WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop,
       WILL_FIRE_RL_cache_rl_ST_AMO_response,
       WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop,
       WILL_FIRE_RL_cache_rl_discard_write_rsp,
       WILL_FIRE_RL_cache_rl_drive_exception_rsp,
       WILL_FIRE_RL_cache_rl_fabric_send_write_req,
       WILL_FIRE_RL_cache_rl_io_AMO_SC_req,
       WILL_FIRE_RL_cache_rl_io_AMO_op_req,
       WILL_FIRE_RL_cache_rl_io_AMO_read_rsp,
       WILL_FIRE_RL_cache_rl_io_read_req,
       WILL_FIRE_RL_cache_rl_io_read_rsp,
       WILL_FIRE_RL_cache_rl_io_write_req,
       WILL_FIRE_RL_cache_rl_maintain_io_read_rsp,
       WILL_FIRE_RL_cache_rl_probe_and_immed_rsp,
       WILL_FIRE_RL_cache_rl_rereq,
       WILL_FIRE_RL_cache_rl_reset,
       WILL_FIRE_RL_cache_rl_start_cache_refill,
       WILL_FIRE_RL_cache_rl_start_reset,
       WILL_FIRE___me_check_31,
       WILL_FIRE_commit,
       WILL_FIRE_mem_master_ar_arready,
       WILL_FIRE_mem_master_aw_awready,
       WILL_FIRE_mem_master_b_bflit,
       WILL_FIRE_mem_master_r_rflit,
       WILL_FIRE_mem_master_w_wready,
       WILL_FIRE_req,
       WILL_FIRE_server_flush_request_put,
       WILL_FIRE_server_flush_response_get,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_tlb_flush;

  // inputs to muxes for submodule ports
  wire [163 : 0] MUX_cache_f_fabric_write_reqs$enq_1__VAL_1,
		 MUX_cache_f_fabric_write_reqs$enq_1__VAL_2,
		 MUX_cache_f_fabric_write_reqs$enq_1__VAL_3;
  wire [129 : 0] MUX_cache_ram_word128_set$a_put_3__VAL_1,
		 MUX_cache_ram_word128_set$a_put_3__VAL_2;
  wire [128 : 0] MUX_cache_dw_output_ld_val$wset_1__VAL_1,
		 MUX_cache_dw_output_ld_val$wset_1__VAL_2,
		 MUX_cache_dw_output_ld_val$wset_1__VAL_3,
		 MUX_cache_dw_output_st_amo_val$wset_1__VAL_1,
		 MUX_cache_rg_ld_val$write_1__VAL_1,
		 MUX_cache_rg_st_amo_val$write_1__VAL_2;
  wire [97 : 0] MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_1,
		MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_2,
		MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_3;
  wire [22 : 0] MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1,
		MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_2;
  wire [7 : 0] MUX_cache_ram_word128_set$b_put_2__VAL_2,
	       MUX_cache_ram_word128_set$b_put_2__VAL_4;
  wire [6 : 0] MUX_cache_rg_cset_in_cache$write_1__VAL_1;
  wire [5 : 0] MUX_cache_rg_exc_code$write_1__VAL_1,
	       MUX_cache_rg_exc_code$write_1__VAL_4,
	       MUX_cache_rg_exc_code$write_1__VAL_5;
  wire [3 : 0] MUX_cache_ctr_wr_rsps_pending_outrg$write_1__VAL_1,
	       MUX_cache_rg_state$write_1__VAL_1,
	       MUX_cache_rg_state$write_1__VAL_12,
	       MUX_cache_rg_state$write_1__VAL_2,
	       MUX_cache_rg_state$write_1__VAL_3,
	       MUX_cache_rg_state$write_1__VAL_4;
  wire MUX_cache_dw_output_ld_val$wset_1__SEL_1,
       MUX_cache_dw_output_ld_val$wset_1__SEL_2,
       MUX_cache_dw_output_ld_val$wset_1__SEL_4,
       MUX_cache_dw_valid$wset_1__SEL_3,
       MUX_cache_f_fabric_write_reqs$enq_1__SEL_1,
       MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1,
       MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1,
       MUX_cache_ram_word128_set$a_put_3__SEL_1,
       MUX_cache_ram_word128_set$b_put_1__SEL_2,
       MUX_cache_rg_exc_code$write_1__PSEL_2,
       MUX_cache_rg_exc_code$write_1__SEL_1,
       MUX_cache_rg_exc_code$write_1__SEL_2,
       MUX_cache_rg_exc_code$write_1__SEL_3,
       MUX_cache_rg_exc_code$write_1__SEL_4,
       MUX_cache_rg_ld_val$write_1__SEL_1,
       MUX_cache_rg_ld_val$write_1__SEL_2,
       MUX_cache_rg_lower_word64$write_1__SEL_2,
       MUX_cache_rg_lower_word64_full$write_1__SEL_1,
       MUX_cache_rg_lower_word64_full$write_1__SEL_2,
       MUX_cache_rg_lower_word64_full$write_1__SEL_4,
       MUX_cache_rg_lower_word64_full$write_1__VAL_2,
       MUX_cache_rg_lrsc_valid$write_1__SEL_2,
       MUX_cache_rg_state$write_1__SEL_13,
       MUX_cache_rg_state$write_1__SEL_2,
       MUX_cache_rg_state$write_1__SEL_3,
       MUX_cache_rg_state$write_1__SEL_4,
       MUX_cache_rg_state$write_1__SEL_5,
       MUX_cache_rg_state$write_1__SEL_6,
       MUX_cache_rg_state$write_1__SEL_7,
       MUX_cache_rg_state$write_1__SEL_8;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h6501;
  reg [31 : 0] v__h6600;
  reg [31 : 0] v__h6753;
  reg [31 : 0] v__h22213;
  reg [31 : 0] v__h26959;
  reg [31 : 0] v__h32058;
  reg [31 : 0] v__h6068;
  reg [31 : 0] v__h35172;
  reg [31 : 0] v__h37290;
  reg [31 : 0] v__h37379;
  reg [31 : 0] v__h37598;
  reg [31 : 0] v__h37724;
  reg [31 : 0] v__h41269;
  reg [31 : 0] v__h41516;
  reg [31 : 0] v__h41477;
  reg [31 : 0] v__h32847;
  reg [31 : 0] v__h33109;
  reg [31 : 0] v__h35744;
  reg [31 : 0] v__h36951;
  reg [31 : 0] v__h37065;
  reg [31 : 0] v__h36789;
  reg [31 : 0] v__h37176;
  reg [31 : 0] v__h38237;
  reg [31 : 0] v__h38607;
  reg [31 : 0] v__h40960;
  reg [31 : 0] v__h38535;
  reg [31 : 0] v__h42446;
  reg [31 : 0] v__h6062;
  reg [31 : 0] v__h6495;
  reg [31 : 0] v__h6594;
  reg [31 : 0] v__h6747;
  reg [31 : 0] v__h22207;
  reg [31 : 0] v__h26953;
  reg [31 : 0] v__h32052;
  reg [31 : 0] v__h32841;
  reg [31 : 0] v__h33103;
  reg [31 : 0] v__h35166;
  reg [31 : 0] v__h35738;
  reg [31 : 0] v__h36783;
  reg [31 : 0] v__h36945;
  reg [31 : 0] v__h37059;
  reg [31 : 0] v__h37170;
  reg [31 : 0] v__h37284;
  reg [31 : 0] v__h37373;
  reg [31 : 0] v__h37592;
  reg [31 : 0] v__h37718;
  reg [31 : 0] v__h38231;
  reg [31 : 0] v__h38529;
  reg [31 : 0] v__h38601;
  reg [31 : 0] v__h40954;
  reg [31 : 0] v__h41263;
  reg [31 : 0] v__h41471;
  reg [31 : 0] v__h41510;
  reg [31 : 0] v__h42440;
  // synopsys translate_on

  // remaining internal signals
  reg [127 : 0] CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q45,
		CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q46,
		IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d636,
		IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d653,
		IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d662,
		IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d750,
		IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d767,
		IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d776,
		x__h23562,
		x__h27589;
  reg [63 : 0] CASE_cache_rg_addr_BITS_2_TO_0_0_result_lo6572_ETC__q49,
	       IF_cache_rg_addr_32_BITS_2_TO_0_76_EQ_0_77_THE_ETC___d1024,
	       IF_cache_rg_addr_32_BITS_2_TO_0_76_EQ_0_77_THE_ETC___d1044,
	       IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d1182,
	       IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d1206,
	       IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d1218,
	       IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d406,
	       IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d446,
	       IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d466,
	       IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d533,
	       IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d541,
	       IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d545,
	       IF_cache_rg_width_code_20_EQ_0b10_25_THEN_SEXT_ETC___d1230,
	       IF_cache_rg_width_code_20_EQ_0b10_25_THEN_SEXT_ETC___d680,
	       _theResult_____2__h27679,
	       _theResult_____2__h38740,
	       _theResult___snd__h40647,
	       _theResult___snd__h8119,
	       _theResult___snd_fst__h21027,
	       _theResult___snd_fst__h26680,
	       _theResult___snd_fst__h36091,
	       _theResult___snd_snd__h21028,
	       _theResult___snd_snd__h38923,
	       mem_req_wr_data_wdata__h5484,
	       w1__h27504,
	       w1__h27509,
	       w1__h38702,
	       w1__h38707;
  reg [7 : 0] mem_req_wr_data_wstrb__h5485;
  reg [2 : 0] _theResult___snd_fst_val__h5373, size_val__h38050;
  wire [129 : 0] cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296,
		 y__h8170;
  wire [128 : 0] IF_cache_rg_op_36_EQ_1_43_OR_cache_rg_op_36_EQ_ETC___d795;
  wire [127 : 0] IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC___d1134,
		 IF_cache_rg_op_36_EQ_1_43_OR_cache_rg_op_36_EQ_ETC___d787,
		 IF_cache_rg_width_code_20_EQ_0b11_29_THEN_cach_ETC___d717,
		 b__h38485,
		 new_st_val_128__h27680,
		 new_st_val_128__h38741,
		 x__h21026,
		 x__h31850,
		 x__h33356,
		 x__h38735,
		 x__h40938;
  wire [96 : 0] cache_master_xactor_shim_arff_rvport1__read_B_ETC__q81,
		cache_master_xactor_shim_awff_rvport1__read_B_ETC__q47;
  wire [73 : 0] cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q48;
  wire [63 : 0] IF_cache_rg_width_code_20_EQ_0b10_25_THEN_SEXT_ETC___d682,
		SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d315,
		SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d320,
		SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d325,
		SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d330,
		SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d335,
		SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d340,
		SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d345,
		SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d350,
		SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d354,
		SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d359,
		SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d364,
		SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d369,
		SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d374,
		SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d379,
		SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d384,
		SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d389,
		SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d409,
		SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d413,
		SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d417,
		SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d421,
		SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d425,
		SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d429,
		SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d433,
		SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d437,
		SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d449,
		SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d453,
		SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d457,
		SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d461,
		_theResult___snd__h36038,
		cline_fabric_addr__h32111,
		fabric_addr__h37776,
		mem_req_wr_addr_awaddr__h5267,
		new_st_val_64__h27685,
		new_st_val_64__h27757,
		new_st_val_64__h28954,
		new_st_val_64__h28958,
		new_st_val_64__h28962,
		new_st_val_64__h28966,
		new_st_val_64__h28971,
		new_st_val_64__h28977,
		new_st_val_64__h28982,
		new_st_val_64__h38746,
		new_st_val_64__h38818,
		new_st_val_64__h40759,
		new_st_val_64__h40763,
		new_st_val_64__h40767,
		new_st_val_64__h40771,
		new_st_val_64__h40776,
		new_st_val_64__h40782,
		new_st_val_64__h40787,
		result_lo__h21065,
		result_lo__h21100,
		result_lo__h21133,
		result_lo__h21166,
		result_lo__h21199,
		result_lo__h21232,
		result_lo__h21265,
		result_lo__h21298,
		result_lo__h21331,
		result_lo__h21364,
		result_lo__h21397,
		result_lo__h21430,
		result_lo__h21463,
		result_lo__h21496,
		result_lo__h21529,
		result_lo__h21562,
		result_lo__h21617,
		result_lo__h21650,
		result_lo__h21683,
		result_lo__h21716,
		result_lo__h21749,
		result_lo__h21782,
		result_lo__h21815,
		result_lo__h21848,
		result_lo__h21895,
		result_lo__h21928,
		result_lo__h21961,
		result_lo__h21994,
		result_lo__h36128,
		result_lo__h36161,
		result_lo__h36194,
		result_lo__h36227,
		result_lo__h36260,
		result_lo__h36293,
		result_lo__h36326,
		result_lo__h36359,
		result_lo__h36422,
		result_lo__h36455,
		result_lo__h36488,
		result_lo__h36521,
		result_lo__h36572,
		result_lo__h36605,
		result_lo__h39694,
		result_lo__h39726,
		result_lo__h39758,
		result_lo__h39790,
		result_lo__h39822,
		result_lo__h39854,
		result_lo__h39886,
		result_lo__h39918,
		result_lo__h39950,
		result_lo__h39982,
		result_lo__h40014,
		result_lo__h40046,
		result_lo__h40078,
		result_lo__h40110,
		result_lo__h40142,
		result_lo__h40174,
		result_lo__h40228,
		result_lo__h40260,
		result_lo__h40292,
		result_lo__h40324,
		result_lo__h40356,
		result_lo__h40388,
		result_lo__h40420,
		result_lo__h40452,
		result_lo__h40498,
		result_lo__h40530,
		result_lo__h40562,
		result_lo__h40594,
		w1___1__h27724,
		w1___1__h38785,
		w2__h27511,
		word64__h5354,
		x__h27683,
		x__h38744;
  wire [31 : 0] IF_cache_rg_addr_BITS_4_TO_0_EQ_0_THEN_1_ELSE_0__q80,
		IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q52,
		IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q59,
		IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q66,
		IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q73,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q3,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q9,
		cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q31,
		cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q32,
		cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q33,
		cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q34,
		cache_rg_st_amo_val_BITS_31_TO_0__q44,
		cline_addr__h32110,
		w17504_BITS_31_TO_0__q43,
		w18702_BITS_31_TO_0__q78;
  wire [21 : 0] pa_ctag__h7725;
  wire [15 : 0] IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q51,
		IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q55,
		IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q58,
		IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q62,
		IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q65,
		IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q69,
		IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q72,
		IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q76,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q10,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q13,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q2,
		cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q6,
		cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q15,
		cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q17,
		cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q19,
		cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q22,
		cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q23,
		cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q25,
		cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q27,
		cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q28;
  wire [7 : 0] IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q50,
	       IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q53,
	       IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q54,
	       IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q56,
	       IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q57,
	       IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q60,
	       IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q61,
	       IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q63,
	       IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q64,
	       IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q67,
	       IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q68,
	       IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q70,
	       IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q71,
	       IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q74,
	       IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q75,
	       IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q77,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q1,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q11,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q12,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q14,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q4,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q5,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q7,
	       cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q8,
	       cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q16,
	       cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q18,
	       cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q20,
	       cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q21,
	       cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q24,
	       cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q26,
	       cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q29,
	       cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q30,
	       cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q35,
	       cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q36,
	       cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q37,
	       cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q38,
	       cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q39,
	       cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q40,
	       cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q41,
	       cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q42,
	       strobe128__h5355,
	       strobe128__h5359,
	       strobe128__h5363,
	       strobe128__h5367;
  wire [5 : 0] access_exc_code__h4992, shift_bits__h5283;
  wire [3 : 0] IF_NOT_cache_rg_op_36_EQ_2_38_96_OR_NOT_cache__ETC___d850,
	       IF_cache_rg_op_36_EQ_0_37_OR_cache_rg_op_36_EQ_ETC___d853,
	       IF_cache_rg_op_36_EQ_1_43_OR_cache_rg_op_36_EQ_ETC___d852,
	       cache_ctr_wr_rsps_pending_inrg_read__4_MINUS_c_ETC___d46,
	       x__h27566;
  wire [1 : 0] _0__q79, x__h27422, x__h27463, x__h33351, y__h27587;
  wire IF_cache_rg_op_36_EQ_1_43_OR_cache_rg_op_36_EQ_ETC___d173,
       IF_cache_rg_width_code_20_EQ_0b11_29_THEN_IF_c_ETC___d304,
       NOT_cache_cfg_verbosity_read__2_ULE_2_81___d882,
       NOT_cache_ctr_wr_rsps_pending_inrg_read__4_MIN_ETC___d58,
       NOT_cache_f_reset_reqs_notEmpty__6_76_AND_cach_ETC___d946,
       NOT_cache_ram_state_and_ctag_cset_b_read__62_B_ETC___d192,
       NOT_cache_rg_op_36_EQ_0_37_95_AND_NOT_cache_rg_ETC___d814,
       NOT_cache_rg_op_36_EQ_0_37_95_AND_NOT_cache_rg_ETC___d825,
       NOT_cache_rg_op_36_EQ_0_37_95_AND_NOT_cache_rg_ETC___d835,
       NOT_cache_rg_op_36_EQ_0_37_95_AND_NOT_cache_rg_ETC___d839,
       NOT_cache_rg_op_36_EQ_1_43_03_AND_NOT_cache_rg_ETC___d557,
       NOT_cache_rg_op_36_EQ_2_38_96_OR_NOT_cache_rg__ETC___d555,
       NOT_cache_rg_op_36_EQ_2_38_96_OR_NOT_cache_rg__ETC___d789,
       NOT_cache_rg_op_36_EQ_2_38_96_OR_NOT_cache_rg__ETC___d812,
       NOT_cache_rg_op_36_EQ_2_38_96_OR_NOT_cache_rg__ETC___d818,
       NOT_cache_rg_op_36_EQ_2_38_96_OR_NOT_cache_rg__ETC___d823,
       NOT_cache_w_req_width_code_wget__329_EQ_0b0_35_ETC___d1370,
       _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954,
       cache_cfg_verbosity_read__2_ULE_1___d93,
       cache_f_reset_reqs_i_notEmpty__5_AND_cache_f_r_ETC___d117,
       cache_ram_state_and_ctag_cset_b_read__62_BITS__ETC___d168,
       cache_ram_state_and_ctag_cset_b_read__62_BIT_2_ETC___d193,
       cache_ram_state_and_ctag_cset_b_read__62_BIT_2_ETC___d842,
       cache_rg_addr_32_EQ_cache_rg_lrsc_pa_49___d190,
       cache_rg_amo_funct5_39_EQ_0b10_40_AND_NOT_cach_ETC___d509,
       cache_rg_lrsc_pa_49_EQ_cache_rg_addr_32___d150,
       cache_rg_op_36_EQ_0_37_OR_cache_rg_op_36_EQ_2__ETC___d213,
       cache_rg_op_36_EQ_0_37_OR_cache_rg_op_36_EQ_2__ETC___d215,
       cache_rg_op_36_EQ_0_37_OR_cache_rg_op_36_EQ_2__ETC___d218,
       cache_rg_op_36_EQ_0_37_OR_cache_rg_op_36_EQ_2__ETC___d492,
       cache_rg_op_36_EQ_0_37_OR_cache_rg_op_36_EQ_2__ETC___d505,
       cache_rg_op_36_EQ_1_43_OR_cache_rg_op_36_EQ_2__ETC___d211,
       cache_rg_op_36_EQ_1_43_OR_cache_rg_op_36_EQ_2__ETC___d558,
       cache_rg_op_36_EQ_1_43_OR_cache_rg_op_36_EQ_2__ETC___d791,
       cache_rg_op_36_EQ_2_38_AND_cache_rg_amo_funct5_ETC___d161,
       cache_rg_op_36_EQ_2_38_AND_cache_rg_amo_funct5_ETC___d829,
       cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d515,
       cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d560,
       cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d793,
       cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d847,
       cache_w_req_width_code_wget__329_EQ_0b0_350_OR_ETC___d1386,
       cache_w_req_width_code_wget__329_EQ_0b0_350_OR_ETC___d1391,
       lrsc_result__h23100,
       mem_req_wr_data_wuser__h5487;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = cache_f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = cache_f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get =
	     !cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get =
	     !cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // action method req
  assign CAN_FIRE_req = 1'd1 ;
  assign WILL_FIRE_req = EN_req ;

  // action method commit
  assign CAN_FIRE_commit = 1'd1 ;
  assign WILL_FIRE_commit = EN_commit ;

  // value method valid
  assign valid = cache_dw_valid$whas && cache_dw_valid$wget ;

  // value method addr
  assign addr = cache_rg_addr ;

  // value method word128_fst
  assign word128_fst = cache_dw_output_ld_val$wget[128] ;

  // value method word128_snd
  assign word128_snd = cache_dw_output_ld_val$wget[127:0] ;

  // value method st_amo_val_fst
  assign st_amo_val_fst = cache_dw_output_st_amo_val$wget[128] ;

  // value method st_amo_val_snd
  assign st_amo_val_snd = cache_dw_output_st_amo_val$wget[127:0] ;

  // value method exc
  assign exc = CAN_FIRE_RL_cache_rl_drive_exception_rsp ;

  // value method exc_code
  assign exc_code = cache_rg_exc_code ;

  // action method server_flush_request_put
  assign RDY_server_flush_request_put = cache_f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_flush_request_put = cache_f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_flush_request_put = EN_server_flush_request_put ;

  // action method server_flush_response_get
  assign RDY_server_flush_response_get =
	     cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_flush_response_get =
	     cache_f_reset_rsps$D_OUT && cache_f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_flush_response_get = EN_server_flush_response_get ;

  // action method tlb_flush
  assign RDY_tlb_flush = 1'd1 ;
  assign CAN_FIRE_tlb_flush = 1'd1 ;
  assign WILL_FIRE_tlb_flush = EN_tlb_flush ;

  // value method mem_master_aw_awid
  assign mem_master_awid =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q47[96:93] ;

  // value method mem_master_aw_awaddr
  assign mem_master_awaddr =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q47[92:29] ;

  // value method mem_master_aw_awlen
  assign mem_master_awlen =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q47[28:21] ;

  // value method mem_master_aw_awsize
  assign mem_master_awsize =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q47[20:18] ;

  // value method mem_master_aw_awburst
  assign mem_master_awburst =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q47[17:16] ;

  // value method mem_master_aw_awlock
  assign mem_master_awlock =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q47[15] ;

  // value method mem_master_aw_awcache
  assign mem_master_awcache =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q47[14:11] ;

  // value method mem_master_aw_awprot
  assign mem_master_awprot =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q47[10:8] ;

  // value method mem_master_aw_awqos
  assign mem_master_awqos =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q47[7:4] ;

  // value method mem_master_aw_awregion
  assign mem_master_awregion =
	     cache_master_xactor_shim_awff_rvport1__read_B_ETC__q47[3:0] ;

  // value method mem_master_aw_awvalid
  assign mem_master_awvalid =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek ;

  // action method mem_master_aw_awready
  assign CAN_FIRE_mem_master_aw_awready = 1'd1 ;
  assign WILL_FIRE_mem_master_aw_awready = 1'd1 ;

  // value method mem_master_w_wdata
  assign mem_master_wdata =
	     cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q48[73:10] ;

  // value method mem_master_w_wstrb
  assign mem_master_wstrb =
	     cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q48[9:2] ;

  // value method mem_master_w_wlast
  assign mem_master_wlast =
	     cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q48[1] ;

  // value method mem_master_w_wuser
  assign mem_master_wuser =
	     cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q48[0] ;

  // value method mem_master_w_wvalid
  assign mem_master_wvalid =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek ;

  // action method mem_master_w_wready
  assign CAN_FIRE_mem_master_w_wready = 1'd1 ;
  assign WILL_FIRE_mem_master_w_wready = 1'd1 ;

  // action method mem_master_b_bflit
  assign CAN_FIRE_mem_master_b_bflit = 1'd1 ;
  assign WILL_FIRE_mem_master_b_bflit = mem_master_bvalid ;

  // value method mem_master_b_bready
  assign mem_master_bready = !cache_master_xactor_shim_bff_rv[6] ;

  // value method mem_master_ar_arid
  assign mem_master_arid =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q81[96:93] ;

  // value method mem_master_ar_araddr
  assign mem_master_araddr =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q81[92:29] ;

  // value method mem_master_ar_arlen
  assign mem_master_arlen =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q81[28:21] ;

  // value method mem_master_ar_arsize
  assign mem_master_arsize =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q81[20:18] ;

  // value method mem_master_ar_arburst
  assign mem_master_arburst =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q81[17:16] ;

  // value method mem_master_ar_arlock
  assign mem_master_arlock =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q81[15] ;

  // value method mem_master_ar_arcache
  assign mem_master_arcache =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q81[14:11] ;

  // value method mem_master_ar_arprot
  assign mem_master_arprot =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q81[10:8] ;

  // value method mem_master_ar_arqos
  assign mem_master_arqos =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q81[7:4] ;

  // value method mem_master_ar_arregion
  assign mem_master_arregion =
	     cache_master_xactor_shim_arff_rvport1__read_B_ETC__q81[3:0] ;

  // value method mem_master_ar_arvalid
  assign mem_master_arvalid =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek ;

  // action method mem_master_ar_arready
  assign CAN_FIRE_mem_master_ar_arready = 1'd1 ;
  assign WILL_FIRE_mem_master_ar_arready = 1'd1 ;

  // action method mem_master_r_rflit
  assign CAN_FIRE_mem_master_r_rflit = 1'd1 ;
  assign WILL_FIRE_mem_master_r_rflit = mem_master_rvalid ;

  // value method mem_master_r_rready
  assign mem_master_rready = !cache_master_xactor_shim_rff_rv[72] ;

  // submodule cache_f_fabric_write_reqs
  FIFO2 #(.width(32'd164),
	  .guarded(32'd1)) cache_f_fabric_write_reqs(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(cache_f_fabric_write_reqs$D_IN),
						     .ENQ(cache_f_fabric_write_reqs$ENQ),
						     .DEQ(cache_f_fabric_write_reqs$DEQ),
						     .CLR(cache_f_fabric_write_reqs$CLR),
						     .D_OUT(cache_f_fabric_write_reqs$D_OUT),
						     .FULL_N(cache_f_fabric_write_reqs$FULL_N),
						     .EMPTY_N(cache_f_fabric_write_reqs$EMPTY_N));

  // submodule cache_f_reset_reqs
  FIFO2 #(.width(32'd1), .guarded(32'd1)) cache_f_reset_reqs(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(cache_f_reset_reqs$D_IN),
							     .ENQ(cache_f_reset_reqs$ENQ),
							     .DEQ(cache_f_reset_reqs$DEQ),
							     .CLR(cache_f_reset_reqs$CLR),
							     .D_OUT(cache_f_reset_reqs$D_OUT),
							     .FULL_N(cache_f_reset_reqs$FULL_N),
							     .EMPTY_N(cache_f_reset_reqs$EMPTY_N));

  // submodule cache_f_reset_rsps
  FIFO2 #(.width(32'd1), .guarded(32'd1)) cache_f_reset_rsps(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(cache_f_reset_rsps$D_IN),
							     .ENQ(cache_f_reset_rsps$ENQ),
							     .DEQ(cache_f_reset_rsps$DEQ),
							     .CLR(cache_f_reset_rsps$CLR),
							     .D_OUT(cache_f_reset_rsps$D_OUT),
							     .FULL_N(cache_f_reset_rsps$FULL_N),
							     .EMPTY_N(cache_f_reset_rsps$EMPTY_N));

  // submodule cache_ram_state_and_ctag_cset
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd23),
	  .MEMSIZE(8'd128)) cache_ram_state_and_ctag_cset(.CLKA(CLK),
							  .CLKB(CLK),
							  .ADDRA(cache_ram_state_and_ctag_cset$ADDRA),
							  .ADDRB(cache_ram_state_and_ctag_cset$ADDRB),
							  .DIA(cache_ram_state_and_ctag_cset$DIA),
							  .DIB(cache_ram_state_and_ctag_cset$DIB),
							  .WEA(cache_ram_state_and_ctag_cset$WEA),
							  .WEB(cache_ram_state_and_ctag_cset$WEB),
							  .ENA(cache_ram_state_and_ctag_cset$ENA),
							  .ENB(cache_ram_state_and_ctag_cset$ENB),
							  .DOA(),
							  .DOB(cache_ram_state_and_ctag_cset$DOB));

  // submodule cache_ram_word128_set
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd8),
	  .DATA_WIDTH(32'd130),
	  .MEMSIZE(9'd256)) cache_ram_word128_set(.CLKA(CLK),
						  .CLKB(CLK),
						  .ADDRA(cache_ram_word128_set$ADDRA),
						  .ADDRB(cache_ram_word128_set$ADDRB),
						  .DIA(cache_ram_word128_set$DIA),
						  .DIB(cache_ram_word128_set$DIB),
						  .WEA(cache_ram_word128_set$WEA),
						  .WEB(cache_ram_word128_set$WEB),
						  .ENA(cache_ram_word128_set$ENA),
						  .ENB(cache_ram_word128_set$ENB),
						  .DOA(),
						  .DOB(cache_ram_word128_set$DOB));

  // submodule cache_soc_map
  mkSoC_Map cache_soc_map(.CLK(CLK),
			  .RST_N(RST_N),
			  .m_is_IO_addr_addr(cache_soc_map$m_is_IO_addr_addr),
			  .m_is_mem_addr_addr(cache_soc_map$m_is_mem_addr_addr),
			  .m_is_near_mem_IO_addr_addr(cache_soc_map$m_is_near_mem_IO_addr_addr),
			  .m_plic_addr_range(),
			  .m_near_mem_io_addr_range(),
			  .m_ethernet_0_addr_range(),
			  .m_dma_0_addr_range(),
			  .m_uart16550_0_addr_range(),
			  .m_uart16550_1_addr_range(),
			  .m_iic_0_addr_range(),
			  .m_axi_quad_spi_0_full_addr_range(),
			  .m_axi_quad_spi_0_lite_addr_range(),
			  .m_axi_quad_spi_1_addr_range(),
			  .m_gpio_0_addr_range(),
			  .m_gpio_1_addr_range(),
			  .m_boot_rom_addr_range(),
			  .m_ddr4_0_uncached_addr_range(),
			  .m_ddr4_0_cached_addr_range(),
			  .m_is_mem_addr(cache_soc_map$m_is_mem_addr),
			  .m_is_IO_addr(),
			  .m_is_near_mem_IO_addr(),
			  .m_pc_reset_value(),
			  .m_pcc_reset_value(),
			  .m_ddc_reset_value(),
			  .m_mtcc_reset_value(),
			  .m_mepcc_reset_value(),
			  .m_mtvec_reset_value(),
			  .m_nmivec_reset_value());

  // rule RL_cache_rl_fabric_send_write_req
  assign CAN_FIRE_RL_cache_rl_fabric_send_write_req =
	     !cache_master_xactor_clearing &&
	     NOT_cache_ctr_wr_rsps_pending_inrg_read__4_MIN_ETC___d58 ;
  assign WILL_FIRE_RL_cache_rl_fabric_send_write_req =
	     CAN_FIRE_RL_cache_rl_fabric_send_write_req ;

  // rule RL_cache_rl_reset
  assign CAN_FIRE_RL_cache_rl_reset =
	     cache_f_reset_reqs_i_notEmpty__5_AND_cache_f_r_ETC___d117 &&
	     cache_rg_state == 4'd1 ;
  assign WILL_FIRE_RL_cache_rl_reset = CAN_FIRE_RL_cache_rl_reset ;

  // rule RL_cache_rl_probe_and_immed_rsp
  assign CAN_FIRE_RL_cache_rl_probe_and_immed_rsp =
	     (!cache_soc_map$m_is_mem_addr || cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00010 ||
	      IF_cache_rg_op_36_EQ_1_43_OR_cache_rg_op_36_EQ_ETC___d173) &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 4'd3 ;
  assign WILL_FIRE_RL_cache_rl_probe_and_immed_rsp =
	     CAN_FIRE_RL_cache_rl_probe_and_immed_rsp ;

  // rule RL_cache_rl_start_cache_refill
  assign CAN_FIRE_RL_cache_rl_start_cache_refill =
	     !cache_master_xactor_clearing &&
	     !cache_master_xactor_shim_arff_rv[97] &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 4'd8 &&
	     cache_ctr_wr_rsps_pending_inrg_read__4_MINUS_c_ETC___d46 ==
	     4'd0 ;
  assign WILL_FIRE_RL_cache_rl_start_cache_refill =
	     CAN_FIRE_RL_cache_rl_start_cache_refill ;

  // rule RL_cache_rl_rereq
  assign CAN_FIRE_RL_cache_rl_rereq =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_state == 4'd10 ;
  assign WILL_FIRE_RL_cache_rl_rereq = CAN_FIRE_RL_cache_rl_rereq ;

  // rule RL_cache_rl_ST_AMO_response
  assign CAN_FIRE_RL_cache_rl_ST_AMO_response = cache_rg_state == 4'd11 ;
  assign WILL_FIRE_RL_cache_rl_ST_AMO_response =
	     CAN_FIRE_RL_cache_rl_ST_AMO_response ;

  // rule RL_cache_rl_start_reset
  assign CAN_FIRE_RL_cache_rl_start_reset =
	     cache_f_reset_reqs$EMPTY_N && cache_rg_state != 4'd1 ;
  assign WILL_FIRE_RL_cache_rl_start_reset =
	     CAN_FIRE_RL_cache_rl_start_reset ;

  // rule RL_cache_rl_io_read_req
  assign CAN_FIRE_RL_cache_rl_io_read_req =
	     MUX_cache_rg_state$write_1__SEL_8 ;
  assign WILL_FIRE_RL_cache_rl_io_read_req =
	     MUX_cache_rg_state$write_1__SEL_8 ;

  // rule RL_cache_rl_maintain_io_read_rsp
  assign CAN_FIRE_RL_cache_rl_maintain_io_read_rsp =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_state == 4'd14 ;
  assign WILL_FIRE_RL_cache_rl_maintain_io_read_rsp =
	     CAN_FIRE_RL_cache_rl_maintain_io_read_rsp ;

  // rule RL_cache_rl_io_write_req
  assign CAN_FIRE_RL_cache_rl_io_write_req =
	     MUX_cache_rg_state$write_1__SEL_7 ;
  assign WILL_FIRE_RL_cache_rl_io_write_req =
	     MUX_cache_rg_state$write_1__SEL_7 ;

  // rule RL_cache_rl_io_AMO_SC_req
  assign CAN_FIRE_RL_cache_rl_io_AMO_SC_req =
	     MUX_cache_rg_state$write_1__SEL_6 ;
  assign WILL_FIRE_RL_cache_rl_io_AMO_SC_req =
	     MUX_cache_rg_state$write_1__SEL_6 ;

  // rule RL_cache_rl_io_AMO_op_req
  assign CAN_FIRE_RL_cache_rl_io_AMO_op_req =
	     MUX_cache_rg_state$write_1__SEL_5 ;
  assign WILL_FIRE_RL_cache_rl_io_AMO_op_req =
	     MUX_cache_rg_state$write_1__SEL_5 ;

  // rule RL_cache_rl_drive_exception_rsp
  assign CAN_FIRE_RL_cache_rl_drive_exception_rsp =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_state == 4'd4 ;
  assign WILL_FIRE_RL_cache_rl_drive_exception_rsp =
	     CAN_FIRE_RL_cache_rl_drive_exception_rsp ;

  // rule RL_cache_master_xactor_ug_master_u_aw_setPeek
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek =
	     cache_master_xactor_shim_awff_rv$port1__read[97] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_setPeek ;

  // rule RL_cache_master_xactor_ug_master_u_aw_warnDoDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop =
	     cache_master_xactor_ug_master_u_aw_dropWire$whas &&
	     !cache_master_xactor_shim_awff_rv$port1__read[97] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop ;

  // rule RL_cache_master_xactor_ug_master_u_aw_doDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop =
	     cache_master_xactor_shim_awff_rv$port1__read[97] &&
	     cache_master_xactor_ug_master_u_aw_dropWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop ;

  // rule RL_cache_master_xactor_ug_master_u_w_setPeek
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek =
	     cache_master_xactor_shim_wff_rv$port1__read[74] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_setPeek ;

  // rule RL_cache_master_xactor_ug_master_u_w_warnDoDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop =
	     cache_master_xactor_ug_master_u_w_dropWire$whas &&
	     !cache_master_xactor_shim_wff_rv$port1__read[74] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop ;

  // rule RL_cache_master_xactor_ug_master_u_w_doDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop =
	     cache_master_xactor_shim_wff_rv$port1__read[74] &&
	     cache_master_xactor_ug_master_u_w_dropWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop ;

  // rule RL_cache_master_xactor_ug_master_u_b_warnDoPut
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut =
	     cache_master_xactor_ug_master_u_b_putWire$whas &&
	     cache_master_xactor_shim_bff_rv[6] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut ;

  // rule RL_cache_master_xactor_ug_master_u_b_doPut
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut =
	     !cache_master_xactor_shim_bff_rv[6] &&
	     cache_master_xactor_ug_master_u_b_putWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut ;

  // rule RL_cache_rl_discard_write_rsp
  assign CAN_FIRE_RL_cache_rl_discard_write_rsp =
	     !cache_master_xactor_clearing &&
	     cache_master_xactor_shim_bff_rv$port1__read[6] ;
  assign WILL_FIRE_RL_cache_rl_discard_write_rsp =
	     CAN_FIRE_RL_cache_rl_discard_write_rsp ;

  // rule RL_cache_master_xactor_ug_master_u_ar_setPeek
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek =
	     cache_master_xactor_shim_arff_rv$port1__read[97] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_setPeek ;

  // rule RL_cache_master_xactor_ug_master_u_ar_warnDoDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop =
	     cache_master_xactor_ug_master_u_ar_dropWire$whas &&
	     !cache_master_xactor_shim_arff_rv$port1__read[97] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop ;

  // rule RL_cache_master_xactor_ug_master_u_ar_doDrop
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop =
	     cache_master_xactor_shim_arff_rv$port1__read[97] &&
	     cache_master_xactor_ug_master_u_ar_dropWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop ;

  // rule RL_cache_master_xactor_ug_master_u_r_warnDoPut
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut =
	     cache_master_xactor_ug_master_u_r_putWire$whas &&
	     cache_master_xactor_shim_rff_rv[72] ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut ;

  // rule RL_cache_master_xactor_ug_master_u_r_doPut
  assign CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut =
	     !cache_master_xactor_shim_rff_rv[72] &&
	     cache_master_xactor_ug_master_u_r_putWire$whas ;
  assign WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut ;

  // rule RL_cache_rl_cache_refill_rsps_loop
  assign CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop =
	     !cache_master_xactor_clearing &&
	     cache_master_xactor_shim_rff_rv$port1__read[72] &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 4'd9 ;
  assign WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop =
	     CAN_FIRE_RL_cache_rl_cache_refill_rsps_loop ;

  // rule RL_cache_rl_io_read_rsp
  assign CAN_FIRE_RL_cache_rl_io_read_rsp =
	     !cache_master_xactor_clearing &&
	     cache_master_xactor_shim_rff_rv$port1__read[72] &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 4'd13 ;
  assign WILL_FIRE_RL_cache_rl_io_read_rsp =
	     CAN_FIRE_RL_cache_rl_io_read_rsp ;

  // rule RL_cache_rl_io_AMO_read_rsp
  assign CAN_FIRE_RL_cache_rl_io_AMO_read_rsp =
	     MUX_cache_rg_exc_code$write_1__PSEL_2 ;
  assign WILL_FIRE_RL_cache_rl_io_AMO_read_rsp =
	     MUX_cache_rg_exc_code$write_1__PSEL_2 ;

  // rule RL_cache_do_req
  assign CAN_FIRE_RL_cache_do_req =
	     EN_req && EN_req && !cache_f_reset_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_cache_do_req = CAN_FIRE_RL_cache_do_req ;

  // rule RL_cache_do_reset_req
  assign CAN_FIRE_RL_cache_do_reset_req =
	     cache_f_reset_reqs$FULL_N && cache_rw_reset_req$whas ;
  assign WILL_FIRE_RL_cache_do_reset_req = CAN_FIRE_RL_cache_do_reset_req ;

  // rule __me_check_31
  assign CAN_FIRE___me_check_31 = 1'b1 ;
  assign WILL_FIRE___me_check_31 = 1'b1 ;

  // rule RL_cache_master_xactor_do_clear
  assign CAN_FIRE_RL_cache_master_xactor_do_clear =
	     cache_master_xactor_clearing ;
  assign WILL_FIRE_RL_cache_master_xactor_do_clear =
	     cache_master_xactor_clearing ;

  // inputs to muxes for submodule ports
  assign MUX_cache_dw_output_ld_val$wset_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op_36_EQ_0_37_OR_cache_rg_op_36_EQ_2__ETC___d218 ;
  assign MUX_cache_dw_output_ld_val$wset_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[1] &&
	     cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 ;
  assign MUX_cache_dw_output_ld_val$wset_1__SEL_4 =
	     WILL_FIRE_RL_cache_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_ST_AMO_response ;
  assign MUX_cache_dw_valid$wset_1__SEL_3 =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	     (cache_rg_lower_word64_full ||
	      cache_master_xactor_shim_rff_rv$port1__read[1]) ;
  assign MUX_cache_f_fabric_write_reqs$enq_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d793 ;
  assign MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     !cache_rg_word128_set_in_cache[0] &&
	     cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 ;
  assign MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 =
	     WILL_FIRE_RL_cache_do_req &&
	     (cache_w_req_width_code_wget__329_EQ_0b0_350_OR_ETC___d1386 ||
	      req_width_code == 3'b100 && req_addr[3:0] == 4'b0) ;
  assign MUX_cache_ram_word128_set$a_put_3__SEL_1 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d560 ;
  assign MUX_cache_ram_word128_set$b_put_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     !cache_rg_word128_set_in_cache[0] ;
  assign MUX_cache_rg_exc_code$write_1__SEL_1 =
	     WILL_FIRE_RL_cache_do_req &&
	     NOT_cache_w_req_width_code_wget__329_EQ_0b0_35_ETC___d1370 &&
	     (req_width_code != 3'b100 || req_addr[3:0] != 4'b0) ;
  assign MUX_cache_rg_exc_code$write_1__PSEL_2 =
	     !cache_master_xactor_clearing &&
	     cache_master_xactor_shim_rff_rv$port1__read[72] &&
	     (cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 ||
	      !cache_rg_lower_word64_full &&
	      !cache_master_xactor_shim_rff_rv$port1__read[1] ||
	      cache_f_fabric_write_reqs$FULL_N) &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 4'd15 ;
  assign MUX_cache_rg_exc_code$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 ;
  assign MUX_cache_rg_exc_code$write_1__SEL_3 =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[1] &&
	     cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 ;
  assign MUX_cache_rg_exc_code$write_1__SEL_4 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 ;
  assign MUX_cache_rg_ld_val$write_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d515 ;
  assign MUX_cache_rg_ld_val$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     (!cache_rg_lower_word64_full &&
	      cache_master_xactor_shim_rff_rv$port1__read[1] ||
	      cache_master_xactor_shim_rff_rv$port1__read[1] &&
	      cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0) ;
  assign MUX_cache_rg_lower_word64$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     !cache_rg_lower_word64_full ;
  assign MUX_cache_rg_lower_word64_full$write_1__SEL_1 =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     (cache_rg_lower_word64_full ||
	      !cache_master_xactor_shim_rff_rv$port1__read[1]) &&
	     (cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 ||
	      !cache_master_xactor_shim_rff_rv$port1__read[1]) ;
  assign MUX_cache_rg_lower_word64_full$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	     (!cache_master_xactor_shim_rff_rv$port1__read[1] ||
	      cache_rg_lower_word64_full) ;
  assign MUX_cache_rg_lower_word64_full$write_1__SEL_4 =
	     WILL_FIRE_RL_cache_rl_start_reset ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;
  assign MUX_cache_rg_lrsc_valid$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op_36_EQ_0_37_OR_cache_rg_op_36_EQ_2__ETC___d213 ;
  assign MUX_cache_rg_state$write_1__SEL_2 =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     (cache_rg_lower_word64_full ||
	      cache_master_xactor_shim_rff_rv$port1__read[1] ||
	      cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0) ;
  assign MUX_cache_rg_state$write_1__SEL_3 =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     (!cache_rg_lower_word64_full &&
	      cache_master_xactor_shim_rff_rv$port1__read[1] ||
	      cache_master_xactor_shim_rff_rv$port1__read[1] &&
	      cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0) ;
  assign MUX_cache_rg_state$write_1__SEL_4 =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_rg_word128_set_in_cache[0] ;
  assign MUX_cache_rg_state$write_1__SEL_5 =
	     !cache_master_xactor_clearing &&
	     !cache_master_xactor_shim_arff_rv[97] &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 4'd12 &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct5 != 5'b00010 &&
	     cache_rg_amo_funct5 != 5'b00011 ;
  assign MUX_cache_rg_state$write_1__SEL_6 =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_state == 4'd12 &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct5 == 5'b00011 ;
  assign MUX_cache_rg_state$write_1__SEL_7 =
	     cache_f_fabric_write_reqs$FULL_N &&
	     !cache_f_reset_reqs$EMPTY_N &&
	     cache_rg_state == 4'd12 &&
	     cache_rg_op == 2'd1 ;
  assign MUX_cache_rg_state$write_1__SEL_8 =
	     !cache_master_xactor_clearing &&
	     !cache_master_xactor_shim_arff_rv[97] &&
	     NOT_cache_f_reset_reqs_notEmpty__6_76_AND_cach_ETC___d946 &&
	     cache_ctr_wr_rsps_pending_inrg_read__4_MINUS_c_ETC___d46 ==
	     4'd0 ;
  assign MUX_cache_rg_state$write_1__SEL_13 =
	     WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 7'd127 ;
  assign MUX_cache_ctr_wr_rsps_pending_outrg$write_1__VAL_1 =
	     cache_ctr_wr_rsps_pending_outrg + 4'd1 ;
  assign MUX_cache_dw_output_ld_val$wset_1__VAL_1 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00010) ?
	       { cache_rg_width_code != 3'd0 && cache_rg_width_code != 3'd1 &&
		 cache_rg_width_code != 3'b010 &&
		 IF_cache_rg_width_code_20_EQ_0b11_29_THEN_IF_c_ETC___d304,
		 x__h21026 } :
	       { 65'd0, _theResult___snd_fst__h26680 } ;
  assign MUX_cache_dw_output_ld_val$wset_1__VAL_2 =
	     (!cache_rg_lower_word64_full &&
	      cache_master_xactor_shim_rff_rv$port1__read[1]) ?
	       { 65'd0, _theResult___snd_fst__h36091 } :
	       { 1'd0, x__h33356 } ;
  assign MUX_cache_dw_output_ld_val$wset_1__VAL_3 = { 1'd0, x__h40938 } ;
  assign MUX_cache_dw_output_st_amo_val$wset_1__VAL_1 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00010) ?
	       { _0__q79[IF_cache_rg_addr_BITS_4_TO_0_EQ_0_THEN_1_ELSE_0__q80[0]],
		 128'd0 } :
	       129'd0 ;
  assign MUX_cache_f_fabric_write_reqs$enq_1__VAL_1 =
	     { cache_rg_width_code,
	       cache_rg_addr,
	       IF_cache_rg_op_36_EQ_1_43_OR_cache_rg_op_36_EQ_ETC___d795 } ;
  assign MUX_cache_f_fabric_write_reqs$enq_1__VAL_2 =
	     { cache_rg_width_code,
	       cache_rg_pa,
	       cache_rg_width_code == 3'b011 && cache_rg_st_amo_val[128],
	       x__h38735 } ;
  assign MUX_cache_f_fabric_write_reqs$enq_1__VAL_3 =
	     { cache_rg_width_code, cache_rg_pa, cache_rg_st_amo_val } ;
  assign MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_1 =
	     { 5'd16, cline_fabric_addr__h32111, 29'd7143424 } ;
  assign MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_2 =
	     { 5'd16,
	       fabric_addr__h37776,
	       _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 ?
		 { 8'd0, size_val__h38050, 18'd65536 } :
		 29'd2949120 } ;
  assign MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_3 =
	     { 5'd16,
	       fabric_addr__h37776,
	       _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 ?
		 8'd0 :
		 8'd1,
	       size_val__h38050,
	       18'd65536 } ;
  assign MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1 =
	     { 3'd4, cache_rg_pa[31:12] } ;
  assign MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_2 =
	     { 1'd0, 22'bxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign MUX_cache_ram_word128_set$a_put_3__VAL_1 =
	     { x__h27422,
	       IF_cache_rg_op_36_EQ_1_43_OR_cache_rg_op_36_EQ_ETC___d787 } ;
  assign MUX_cache_ram_word128_set$a_put_3__VAL_2 = { x__h33351, x__h33356 } ;
  assign MUX_cache_ram_word128_set$b_put_2__VAL_2 =
	     cache_rg_word128_set_in_cache + 8'd1 ;
  assign MUX_cache_ram_word128_set$b_put_2__VAL_4 =
	     { cache_rg_addr[11:5], 1'd0 } ;
  assign MUX_cache_rg_cset_in_cache$write_1__VAL_1 =
	     cache_rg_cset_in_cache + 7'd1 ;
  assign MUX_cache_rg_exc_code$write_1__VAL_1 =
	     (req_op == 2'd0) ? 6'd4 : 6'd6 ;
  assign MUX_cache_rg_exc_code$write_1__VAL_4 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00010) ?
	       6'd5 :
	       6'd7 ;
  assign MUX_cache_rg_exc_code$write_1__VAL_5 =
	     EN_commit ? cache_rg_exc_code : 6'd28 ;
  assign MUX_cache_rg_ld_val$write_1__VAL_1 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00011) ?
	       { 128'd0, lrsc_result__h23100 } :
	       { cache_rg_width_code == 3'b011 &&
		 IF_cache_rg_width_code_20_EQ_0b11_29_THEN_IF_c_ETC___d304,
		 x__h31850 } ;
  assign MUX_cache_rg_lower_word64_full$write_1__VAL_2 =
	     !cache_rg_lower_word64_full &&
	     !cache_master_xactor_shim_rff_rv$port1__read[1] ;
  assign MUX_cache_rg_st_amo_val$write_1__VAL_2 =
	     { cache_rg_width_code == 3'b011 && cache_rg_st_amo_val[128],
	       IF_cache_rg_width_code_20_EQ_0b11_29_THEN_cach_ETC___d717 } ;
  assign MUX_cache_rg_state$write_1__VAL_1 =
	     (NOT_cache_w_req_width_code_wget__329_EQ_0b0_35_ETC___d1370 &&
	      (req_width_code != 3'b100 || req_addr[3:0] != 4'b0)) ?
	       4'd4 :
	       4'd3 ;
  assign MUX_cache_rg_state$write_1__VAL_2 =
	     (cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0) ?
	       4'd14 :
	       4'd4 ;
  assign MUX_cache_rg_state$write_1__VAL_3 =
	     (!cache_rg_lower_word64_full &&
	      cache_master_xactor_shim_rff_rv$port1__read[1]) ?
	       ((cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0) ?
		  4'd14 :
		  4'd4) :
	       4'd4 ;
  assign MUX_cache_rg_state$write_1__VAL_4 =
	     (cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 ||
	      cache_rg_error_during_refill) ?
	       4'd4 :
	       4'd10 ;
  assign MUX_cache_rg_state$write_1__VAL_12 =
	     EN_commit ?
	       (cache_soc_map$m_is_mem_addr ?
		  IF_cache_rg_op_36_EQ_0_37_OR_cache_rg_op_36_EQ_ETC___d853 :
		  4'd12) :
	       4'd4 ;

  // inlined wires
  assign cache_rw_reset_req$whas =
	     EN_server_reset_request_put || EN_server_flush_request_put ;
  assign cache_master_xactor_ug_master_u_b_putWire$wget =
	     { mem_master_bid, mem_master_bresp } ;
  assign cache_master_xactor_ug_master_u_b_putWire$whas =
	     mem_master_bvalid && !cache_master_xactor_shim_bff_rv[6] ;
  assign cache_master_xactor_ug_master_u_r_putWire$wget =
	     { mem_master_rid,
	       mem_master_rdata,
	       mem_master_rresp,
	       mem_master_rlast,
	       mem_master_ruser } ;
  assign cache_master_xactor_ug_master_u_r_putWire$whas =
	     mem_master_rvalid && !cache_master_xactor_shim_rff_rv[72] ;
  assign cache_dw_valid$wget =
	     !MUX_cache_dw_output_ld_val$wset_1__SEL_1 || EN_commit ;
  assign cache_dw_valid$whas =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op_36_EQ_0_37_OR_cache_rg_op_36_EQ_2__ETC___d218 ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[1] &&
	     cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	     (cache_rg_lower_word64_full ||
	      cache_master_xactor_shim_rff_rv$port1__read[1]) ||
	     WILL_FIRE_RL_cache_rl_drive_exception_rsp ||
	     WILL_FIRE_RL_cache_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_ST_AMO_response ;
  always@(MUX_cache_dw_output_ld_val$wset_1__SEL_1 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_1 or
	  MUX_cache_dw_output_ld_val$wset_1__SEL_2 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_2 or
	  MUX_cache_dw_valid$wset_1__SEL_3 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_3 or
	  MUX_cache_dw_output_ld_val$wset_1__SEL_4 or cache_rg_ld_val)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_dw_output_ld_val$wset_1__SEL_1:
	  cache_dw_output_ld_val$wget =
	      MUX_cache_dw_output_ld_val$wset_1__VAL_1;
      MUX_cache_dw_output_ld_val$wset_1__SEL_2:
	  cache_dw_output_ld_val$wget =
	      MUX_cache_dw_output_ld_val$wset_1__VAL_2;
      MUX_cache_dw_valid$wset_1__SEL_3:
	  cache_dw_output_ld_val$wget =
	      MUX_cache_dw_output_ld_val$wset_1__VAL_3;
      MUX_cache_dw_output_ld_val$wset_1__SEL_4:
	  cache_dw_output_ld_val$wget = cache_rg_ld_val;
      default: cache_dw_output_ld_val$wget =
		   129'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign cache_dw_output_st_amo_val$wget =
	     MUX_cache_dw_output_ld_val$wset_1__SEL_1 ?
	       MUX_cache_dw_output_st_amo_val$wset_1__VAL_1 :
	       cache_rg_st_amo_val ;
  assign cache_master_xactor_ug_master_u_aw_dropWire$whas =
	     cache_master_xactor_shim_awff_rv$port1__read[97] &&
	     mem_master_awready ;
  assign cache_master_xactor_ug_master_u_w_dropWire$whas =
	     cache_master_xactor_shim_wff_rv$port1__read[74] &&
	     mem_master_wready ;
  assign cache_master_xactor_ug_master_u_ar_dropWire$whas =
	     cache_master_xactor_shim_arff_rv$port1__read[97] &&
	     mem_master_arready ;
  assign cache_master_xactor_shim_awff_rv$EN_port0__write =
	     !cache_master_xactor_clearing &&
	     NOT_cache_ctr_wr_rsps_pending_inrg_read__4_MIN_ETC___d58 ;
  assign cache_master_xactor_shim_awff_rv$port0__write_1 =
	     { 5'd16,
	       mem_req_wr_addr_awaddr__h5267,
	       8'd0,
	       _theResult___snd_fst_val__h5373,
	       18'd65536 } ;
  assign cache_master_xactor_shim_awff_rv$port1__read =
	     cache_master_xactor_shim_awff_rv$EN_port0__write ?
	       cache_master_xactor_shim_awff_rv$port0__write_1 :
	       cache_master_xactor_shim_awff_rv ;
  assign cache_master_xactor_shim_awff_rv$port2__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_aw_doDrop ?
	       cache_master_xactor_shim_arff_rv$port1__write_1 :
	       cache_master_xactor_shim_awff_rv$port1__read ;
  assign cache_master_xactor_shim_awff_rv$port3__read =
	     cache_master_xactor_clearing ?
	       cache_master_xactor_shim_arff_rv$port1__write_1 :
	       cache_master_xactor_shim_awff_rv$port2__read ;
  assign cache_master_xactor_shim_wff_rv$EN_port0__write =
	     !cache_master_xactor_clearing &&
	     NOT_cache_ctr_wr_rsps_pending_inrg_read__4_MIN_ETC___d58 ;
  assign cache_master_xactor_shim_wff_rv$port0__write_1 =
	     { 1'd1,
	       mem_req_wr_data_wdata__h5484,
	       mem_req_wr_data_wstrb__h5485,
	       1'd1,
	       mem_req_wr_data_wuser__h5487 } ;
  assign cache_master_xactor_shim_wff_rv$port1__read =
	     cache_master_xactor_shim_wff_rv$EN_port0__write ?
	       cache_master_xactor_shim_wff_rv$port0__write_1 :
	       cache_master_xactor_shim_wff_rv ;
  assign cache_master_xactor_shim_wff_rv$port1__write_1 =
	     { 1'd0,
	       74'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign cache_master_xactor_shim_wff_rv$port2__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_w_doDrop ?
	       cache_master_xactor_shim_wff_rv$port1__write_1 :
	       cache_master_xactor_shim_wff_rv$port1__read ;
  assign cache_master_xactor_shim_wff_rv$port3__read =
	     cache_master_xactor_clearing ?
	       cache_master_xactor_shim_wff_rv$port1__write_1 :
	       cache_master_xactor_shim_wff_rv$port2__read ;
  assign cache_master_xactor_shim_bff_rv$port0__write_1 =
	     { 1'd1, cache_master_xactor_ug_master_u_b_putWire$wget } ;
  assign cache_master_xactor_shim_bff_rv$port1__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_b_doPut ?
	       cache_master_xactor_shim_bff_rv$port0__write_1 :
	       cache_master_xactor_shim_bff_rv ;
  assign cache_master_xactor_shim_bff_rv$EN_port1__write =
	     !cache_master_xactor_clearing &&
	     cache_master_xactor_shim_bff_rv$port1__read[6] ;
  assign cache_master_xactor_shim_bff_rv$port2__read =
	     cache_master_xactor_shim_bff_rv$EN_port1__write ?
	       cache_master_xactor_shim_bff_rv$port2__write_1 :
	       cache_master_xactor_shim_bff_rv$port1__read ;
  assign cache_master_xactor_shim_bff_rv$port2__write_1 =
	     { 1'd0, 6'bxxxxxx /* unspecified value */  } ;
  assign cache_master_xactor_shim_bff_rv$port3__read =
	     cache_master_xactor_clearing ?
	       cache_master_xactor_shim_bff_rv$port2__write_1 :
	       cache_master_xactor_shim_bff_rv$port2__read ;
  assign cache_master_xactor_shim_arff_rv$EN_port0__write =
	     WILL_FIRE_RL_cache_rl_start_cache_refill ||
	     WILL_FIRE_RL_cache_rl_io_read_req ||
	     WILL_FIRE_RL_cache_rl_io_AMO_op_req ;
  always@(WILL_FIRE_RL_cache_rl_start_cache_refill or
	  MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_1 or
	  WILL_FIRE_RL_cache_rl_io_read_req or
	  MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_2 or
	  WILL_FIRE_RL_cache_rl_io_AMO_op_req or
	  MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_cache_rl_start_cache_refill:
	  cache_master_xactor_shim_arff_rv$port0__write_1 =
	      MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_1;
      WILL_FIRE_RL_cache_rl_io_read_req:
	  cache_master_xactor_shim_arff_rv$port0__write_1 =
	      MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_2;
      WILL_FIRE_RL_cache_rl_io_AMO_op_req:
	  cache_master_xactor_shim_arff_rv$port0__write_1 =
	      MUX_cache_master_xactor_shim_arff_rv$port0__write_1__VAL_3;
      default: cache_master_xactor_shim_arff_rv$port0__write_1 =
		   98'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign cache_master_xactor_shim_arff_rv$port1__read =
	     cache_master_xactor_shim_arff_rv$EN_port0__write ?
	       cache_master_xactor_shim_arff_rv$port0__write_1 :
	       cache_master_xactor_shim_arff_rv ;
  assign cache_master_xactor_shim_arff_rv$port1__write_1 =
	     { 1'd0,
	       97'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign cache_master_xactor_shim_arff_rv$port2__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_ar_doDrop ?
	       cache_master_xactor_shim_arff_rv$port1__write_1 :
	       cache_master_xactor_shim_arff_rv$port1__read ;
  assign cache_master_xactor_shim_arff_rv$port3__read =
	     cache_master_xactor_clearing ?
	       cache_master_xactor_shim_arff_rv$port1__write_1 :
	       cache_master_xactor_shim_arff_rv$port2__read ;
  assign cache_master_xactor_shim_rff_rv$port0__write_1 =
	     { 1'd1, cache_master_xactor_ug_master_u_r_putWire$wget } ;
  assign cache_master_xactor_shim_rff_rv$port1__read =
	     CAN_FIRE_RL_cache_master_xactor_ug_master_u_r_doPut ?
	       cache_master_xactor_shim_rff_rv$port0__write_1 :
	       cache_master_xactor_shim_rff_rv ;
  assign cache_master_xactor_shim_rff_rv$EN_port1__write =
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop ;
  assign cache_master_xactor_shim_rff_rv$port1__write_1 =
	     { 1'd0,
	       72'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign cache_master_xactor_shim_rff_rv$port2__read =
	     cache_master_xactor_shim_rff_rv$EN_port1__write ?
	       cache_master_xactor_shim_rff_rv$port1__write_1 :
	       cache_master_xactor_shim_rff_rv$port1__read ;
  assign cache_master_xactor_shim_rff_rv$port3__read =
	     cache_master_xactor_clearing ?
	       cache_master_xactor_shim_rff_rv$port1__write_1 :
	       cache_master_xactor_shim_rff_rv$port2__read ;

  // register cache_cfg_verbosity
  assign cache_cfg_verbosity$D_IN = set_verbosity_verbosity ;
  assign cache_cfg_verbosity$EN = EN_set_verbosity ;

  // register cache_ctr_wr_rsps_pending_inrg
  assign cache_ctr_wr_rsps_pending_inrg$D_IN =
	     cache_ctr_wr_rsps_pending_inrg + 4'd1 ;
  assign cache_ctr_wr_rsps_pending_inrg$EN =
	     !cache_master_xactor_clearing &&
	     NOT_cache_ctr_wr_rsps_pending_inrg_read__4_MIN_ETC___d58 ;

  // register cache_ctr_wr_rsps_pending_outrg
  assign cache_ctr_wr_rsps_pending_outrg$D_IN =
	     WILL_FIRE_RL_cache_rl_discard_write_rsp ?
	       MUX_cache_ctr_wr_rsps_pending_outrg$write_1__VAL_1 :
	       cache_ctr_wr_rsps_pending_inrg ;
  assign cache_ctr_wr_rsps_pending_outrg$EN =
	     WILL_FIRE_RL_cache_rl_start_reset && !cache_f_reset_reqs$D_OUT ||
	     WILL_FIRE_RL_cache_rl_discard_write_rsp ;

  // register cache_master_xactor_clearing
  assign cache_master_xactor_clearing$D_IN = !cache_master_xactor_clearing ;
  assign cache_master_xactor_clearing$EN =
	     WILL_FIRE_RL_cache_rl_reset && !cache_f_reset_reqs$D_OUT ||
	     cache_master_xactor_clearing ;

  // register cache_master_xactor_shim_arff_rv
  assign cache_master_xactor_shim_arff_rv$D_IN =
	     cache_master_xactor_shim_arff_rv$port3__read ;
  assign cache_master_xactor_shim_arff_rv$EN = 1'b1 ;

  // register cache_master_xactor_shim_awff_rv
  assign cache_master_xactor_shim_awff_rv$D_IN =
	     cache_master_xactor_shim_awff_rv$port3__read ;
  assign cache_master_xactor_shim_awff_rv$EN = 1'b1 ;

  // register cache_master_xactor_shim_bff_rv
  assign cache_master_xactor_shim_bff_rv$D_IN =
	     cache_master_xactor_shim_bff_rv$port3__read ;
  assign cache_master_xactor_shim_bff_rv$EN = 1'b1 ;

  // register cache_master_xactor_shim_rff_rv
  assign cache_master_xactor_shim_rff_rv$D_IN =
	     cache_master_xactor_shim_rff_rv$port3__read ;
  assign cache_master_xactor_shim_rff_rv$EN = 1'b1 ;

  // register cache_master_xactor_shim_wff_rv
  assign cache_master_xactor_shim_wff_rv$D_IN =
	     cache_master_xactor_shim_wff_rv$port3__read ;
  assign cache_master_xactor_shim_wff_rv$EN = 1'b1 ;

  // register cache_rg_addr
  assign cache_rg_addr$D_IN = req_addr ;
  assign cache_rg_addr$EN = CAN_FIRE_RL_cache_do_req ;

  // register cache_rg_amo_funct5
  assign cache_rg_amo_funct5$D_IN = req_amo_funct5 ;
  assign cache_rg_amo_funct5$EN = CAN_FIRE_RL_cache_do_req ;

  // register cache_rg_cset_in_cache
  assign cache_rg_cset_in_cache$D_IN =
	     WILL_FIRE_RL_cache_rl_reset ?
	       MUX_cache_rg_cset_in_cache$write_1__VAL_1 :
	       7'd0 ;
  assign cache_rg_cset_in_cache$EN =
	     WILL_FIRE_RL_cache_rl_reset ||
	     WILL_FIRE_RL_cache_rl_start_reset ;

  // register cache_rg_error_during_refill
  assign cache_rg_error_during_refill$D_IN =
	     MUX_cache_rg_exc_code$write_1__SEL_4 ;
  assign cache_rg_error_during_refill$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // register cache_rg_exc_code
  always@(MUX_cache_rg_exc_code$write_1__SEL_1 or
	  MUX_cache_rg_exc_code$write_1__VAL_1 or
	  MUX_cache_rg_exc_code$write_1__SEL_2 or
	  MUX_cache_rg_exc_code$write_1__SEL_3 or
	  MUX_cache_rg_exc_code$write_1__SEL_4 or
	  MUX_cache_rg_exc_code$write_1__VAL_4 or
	  WILL_FIRE_RL_cache_rl_probe_and_immed_rsp or
	  MUX_cache_rg_exc_code$write_1__VAL_5)
  case (1'b1)
    MUX_cache_rg_exc_code$write_1__SEL_1:
	cache_rg_exc_code$D_IN = MUX_cache_rg_exc_code$write_1__VAL_1;
    MUX_cache_rg_exc_code$write_1__SEL_2: cache_rg_exc_code$D_IN = 6'd7;
    MUX_cache_rg_exc_code$write_1__SEL_3: cache_rg_exc_code$D_IN = 6'd5;
    MUX_cache_rg_exc_code$write_1__SEL_4:
	cache_rg_exc_code$D_IN = MUX_cache_rg_exc_code$write_1__VAL_4;
    WILL_FIRE_RL_cache_rl_probe_and_immed_rsp:
	cache_rg_exc_code$D_IN = MUX_cache_rg_exc_code$write_1__VAL_5;
    default: cache_rg_exc_code$D_IN = 6'bxxxxxx /* unspecified value */ ;
  endcase
  assign cache_rg_exc_code$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 ||
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 ||
	     WILL_FIRE_RL_cache_do_req &&
	     NOT_cache_w_req_width_code_wget__329_EQ_0b0_35_ETC___d1370 &&
	     (req_width_code != 3'b100 || req_addr[3:0] != 4'b0) ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[1] &&
	     cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp ;

  // register cache_rg_is_unsigned
  assign cache_rg_is_unsigned$D_IN = req_is_unsigned ;
  assign cache_rg_is_unsigned$EN = CAN_FIRE_RL_cache_do_req ;

  // register cache_rg_ld_val
  always@(MUX_cache_rg_ld_val$write_1__SEL_1 or
	  MUX_cache_rg_ld_val$write_1__VAL_1 or
	  MUX_cache_rg_ld_val$write_1__SEL_2 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_2 or
	  MUX_cache_dw_valid$wset_1__SEL_3 or
	  MUX_cache_dw_output_ld_val$wset_1__VAL_3 or
	  WILL_FIRE_RL_cache_rl_io_AMO_SC_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_rg_ld_val$write_1__SEL_1:
	  cache_rg_ld_val$D_IN = MUX_cache_rg_ld_val$write_1__VAL_1;
      MUX_cache_rg_ld_val$write_1__SEL_2:
	  cache_rg_ld_val$D_IN = MUX_cache_dw_output_ld_val$wset_1__VAL_2;
      MUX_cache_dw_valid$wset_1__SEL_3:
	  cache_rg_ld_val$D_IN = MUX_cache_dw_output_ld_val$wset_1__VAL_3;
      WILL_FIRE_RL_cache_rl_io_AMO_SC_req: cache_rg_ld_val$D_IN = 129'd1;
      default: cache_rg_ld_val$D_IN =
		   129'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign cache_rg_ld_val$EN =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d515 ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     (!cache_rg_lower_word64_full &&
	      cache_master_xactor_shim_rff_rv$port1__read[1] ||
	      cache_master_xactor_shim_rff_rv$port1__read[1] &&
	      cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0) ||
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	     (cache_rg_lower_word64_full ||
	      cache_master_xactor_shim_rff_rv$port1__read[1]) ||
	     WILL_FIRE_RL_cache_rl_io_AMO_SC_req ;

  // register cache_rg_lower_tag
  assign cache_rg_lower_tag$D_IN =
	     cache_master_xactor_shim_rff_rv$port1__read[0] ;
  assign cache_rg_lower_tag$EN = MUX_cache_rg_lower_word64$write_1__SEL_2 ;

  // register cache_rg_lower_word64
  assign cache_rg_lower_word64$D_IN =
	     cache_master_xactor_shim_rff_rv$port1__read[67:4] ;
  assign cache_rg_lower_word64$EN =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     !cache_master_xactor_shim_rff_rv$port1__read[1] ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     !cache_rg_lower_word64_full ||
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	     !cache_rg_lower_word64_full &&
	     !cache_master_xactor_shim_rff_rv$port1__read[1] ;

  // register cache_rg_lower_word64_full
  always@(MUX_cache_rg_lower_word64_full$write_1__SEL_1 or
	  cache_master_xactor_shim_rff_rv$port1__read or
	  MUX_cache_rg_lower_word64_full$write_1__SEL_2 or
	  MUX_cache_rg_lower_word64_full$write_1__VAL_2 or
	  WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop or
	  cache_rg_lower_word64_full or
	  MUX_cache_rg_lower_word64_full$write_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_rg_lower_word64_full$write_1__SEL_1:
	  cache_rg_lower_word64_full$D_IN =
	      !cache_master_xactor_shim_rff_rv$port1__read[1];
      MUX_cache_rg_lower_word64_full$write_1__SEL_2:
	  cache_rg_lower_word64_full$D_IN =
	      MUX_cache_rg_lower_word64_full$write_1__VAL_2;
      WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop:
	  cache_rg_lower_word64_full$D_IN = !cache_rg_lower_word64_full;
      MUX_cache_rg_lower_word64_full$write_1__SEL_4:
	  cache_rg_lower_word64_full$D_IN = 1'd0;
      default: cache_rg_lower_word64_full$D_IN =
		   1'bx /* unspecified value */ ;
    endcase
  end
  assign cache_rg_lower_word64_full$EN =
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     (cache_rg_lower_word64_full ||
	      !cache_master_xactor_shim_rff_rv$port1__read[1]) &&
	     (cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 ||
	      !cache_master_xactor_shim_rff_rv$port1__read[1]) ||
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	     (!cache_master_xactor_shim_rff_rv$port1__read[1] ||
	      cache_rg_lower_word64_full) ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop ||
	     WILL_FIRE_RL_cache_rl_start_reset ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // register cache_rg_lrsc_pa
  assign cache_rg_lrsc_pa$D_IN = cache_rg_addr ;
  assign cache_rg_lrsc_pa$EN =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct5 == 5'b00010 &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__62_BITS__ETC___d168 ;

  // register cache_rg_lrsc_valid
  assign cache_rg_lrsc_valid$D_IN =
	     MUX_cache_rg_lrsc_valid$write_1__SEL_2 &&
	     cache_rg_op_36_EQ_0_37_OR_cache_rg_op_36_EQ_2__ETC___d215 ;
  assign cache_rg_lrsc_valid$EN =
	     WILL_FIRE_RL_cache_rl_io_read_req && cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct5 == 5'b00010 ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_soc_map$m_is_mem_addr &&
	     cache_rg_op_36_EQ_0_37_OR_cache_rg_op_36_EQ_2__ETC___d213 ||
	     WILL_FIRE_RL_cache_rl_start_reset ;

  // register cache_rg_op
  assign cache_rg_op$D_IN = req_op ;
  assign cache_rg_op$EN = CAN_FIRE_RL_cache_do_req ;

  // register cache_rg_pa
  assign cache_rg_pa$D_IN =
	     WILL_FIRE_RL_cache_do_req ? req_addr : cache_rg_addr ;
  assign cache_rg_pa$EN =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp ||
	     WILL_FIRE_RL_cache_do_req ;

  // register cache_rg_pte_pa
  assign cache_rg_pte_pa$D_IN = 32'h0 ;
  assign cache_rg_pte_pa$EN = 1'b0 ;

  // register cache_rg_st_amo_val
  assign cache_rg_st_amo_val$D_IN =
	     WILL_FIRE_RL_cache_do_req ?
	       req_st_value :
	       MUX_cache_rg_st_amo_val$write_1__VAL_2 ;
  assign cache_rg_st_amo_val$EN =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d847 ||
	     WILL_FIRE_RL_cache_do_req ;

  // register cache_rg_state
  always@(WILL_FIRE_RL_cache_do_req or
	  MUX_cache_rg_state$write_1__VAL_1 or
	  MUX_cache_rg_state$write_1__SEL_2 or
	  MUX_cache_rg_state$write_1__VAL_2 or
	  MUX_cache_rg_state$write_1__SEL_3 or
	  MUX_cache_rg_state$write_1__VAL_3 or
	  MUX_cache_rg_state$write_1__SEL_4 or
	  MUX_cache_rg_state$write_1__VAL_4 or
	  WILL_FIRE_RL_cache_rl_io_AMO_op_req or
	  WILL_FIRE_RL_cache_rl_io_AMO_SC_req or
	  WILL_FIRE_RL_cache_rl_io_write_req or
	  WILL_FIRE_RL_cache_rl_io_read_req or
	  WILL_FIRE_RL_cache_rl_start_reset or
	  WILL_FIRE_RL_cache_rl_rereq or
	  WILL_FIRE_RL_cache_rl_start_cache_refill or
	  WILL_FIRE_RL_cache_rl_probe_and_immed_rsp or
	  MUX_cache_rg_state$write_1__VAL_12 or
	  MUX_cache_rg_state$write_1__SEL_13)
  case (1'b1)
    WILL_FIRE_RL_cache_do_req:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_1;
    MUX_cache_rg_state$write_1__SEL_2:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_2;
    MUX_cache_rg_state$write_1__SEL_3:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_3;
    MUX_cache_rg_state$write_1__SEL_4:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_4;
    WILL_FIRE_RL_cache_rl_io_AMO_op_req: cache_rg_state$D_IN = 4'd15;
    WILL_FIRE_RL_cache_rl_io_AMO_SC_req || WILL_FIRE_RL_cache_rl_io_write_req:
	cache_rg_state$D_IN = 4'd11;
    WILL_FIRE_RL_cache_rl_io_read_req: cache_rg_state$D_IN = 4'd13;
    WILL_FIRE_RL_cache_rl_start_reset: cache_rg_state$D_IN = 4'd1;
    WILL_FIRE_RL_cache_rl_rereq: cache_rg_state$D_IN = 4'd3;
    WILL_FIRE_RL_cache_rl_start_cache_refill: cache_rg_state$D_IN = 4'd9;
    WILL_FIRE_RL_cache_rl_probe_and_immed_rsp:
	cache_rg_state$D_IN = MUX_cache_rg_state$write_1__VAL_12;
    MUX_cache_rg_state$write_1__SEL_13: cache_rg_state$D_IN = 4'd2;
    default: cache_rg_state$D_IN = 4'bxxxx /* unspecified value */ ;
  endcase
  assign cache_rg_state$EN =
	     WILL_FIRE_RL_cache_rl_reset &&
	     cache_rg_cset_in_cache == 7'd127 ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_rg_word128_set_in_cache[0] ||
	     WILL_FIRE_RL_cache_rl_io_read_rsp &&
	     (!cache_rg_lower_word64_full &&
	      cache_master_xactor_shim_rff_rv$port1__read[1] ||
	      cache_master_xactor_shim_rff_rv$port1__read[1] &&
	      cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0) ||
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     (cache_rg_lower_word64_full ||
	      cache_master_xactor_shim_rff_rv$port1__read[1] ||
	      cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0) ||
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp ||
	     WILL_FIRE_RL_cache_do_req ||
	     WILL_FIRE_RL_cache_rl_start_reset ||
	     WILL_FIRE_RL_cache_rl_rereq ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ||
	     WILL_FIRE_RL_cache_rl_io_AMO_SC_req ||
	     WILL_FIRE_RL_cache_rl_io_write_req ||
	     WILL_FIRE_RL_cache_rl_io_read_req ||
	     WILL_FIRE_RL_cache_rl_io_AMO_op_req ;

  // register cache_rg_width_code
  assign cache_rg_width_code$D_IN = req_width_code ;
  assign cache_rg_width_code$EN = CAN_FIRE_RL_cache_do_req ;

  // register cache_rg_word128_set_in_cache
  assign cache_rg_word128_set_in_cache$D_IN =
	     MUX_cache_ram_word128_set$b_put_1__SEL_2 ?
	       MUX_cache_ram_word128_set$b_put_2__VAL_2 :
	       MUX_cache_ram_word128_set$b_put_2__VAL_4 ;
  assign cache_rg_word128_set_in_cache$EN =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     !cache_rg_word128_set_in_cache[0] ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // submodule cache_f_fabric_write_reqs
  always@(MUX_cache_f_fabric_write_reqs$enq_1__SEL_1 or
	  MUX_cache_f_fabric_write_reqs$enq_1__VAL_1 or
	  MUX_cache_dw_valid$wset_1__SEL_3 or
	  MUX_cache_f_fabric_write_reqs$enq_1__VAL_2 or
	  WILL_FIRE_RL_cache_rl_io_write_req or
	  MUX_cache_f_fabric_write_reqs$enq_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_f_fabric_write_reqs$enq_1__SEL_1:
	  cache_f_fabric_write_reqs$D_IN =
	      MUX_cache_f_fabric_write_reqs$enq_1__VAL_1;
      MUX_cache_dw_valid$wset_1__SEL_3:
	  cache_f_fabric_write_reqs$D_IN =
	      MUX_cache_f_fabric_write_reqs$enq_1__VAL_2;
      WILL_FIRE_RL_cache_rl_io_write_req:
	  cache_f_fabric_write_reqs$D_IN =
	      MUX_cache_f_fabric_write_reqs$enq_1__VAL_3;
      default: cache_f_fabric_write_reqs$D_IN =
		   164'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign cache_f_fabric_write_reqs$ENQ =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d793 ||
	     WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	     cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	     (cache_rg_lower_word64_full ||
	      cache_master_xactor_shim_rff_rv$port1__read[1]) ||
	     WILL_FIRE_RL_cache_rl_io_write_req ;
  assign cache_f_fabric_write_reqs$DEQ =
	     !cache_master_xactor_clearing &&
	     NOT_cache_ctr_wr_rsps_pending_inrg_read__4_MIN_ETC___d58 ;
  assign cache_f_fabric_write_reqs$CLR = 1'b0 ;

  // submodule cache_f_reset_reqs
  assign cache_f_reset_reqs$D_IN = !EN_server_reset_request_put ;
  assign cache_f_reset_reqs$ENQ = CAN_FIRE_RL_cache_do_reset_req ;
  assign cache_f_reset_reqs$DEQ =
	     WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 7'd127 ;
  assign cache_f_reset_reqs$CLR = 1'b0 ;

  // submodule cache_f_reset_rsps
  assign cache_f_reset_rsps$D_IN = cache_f_reset_reqs$D_OUT ;
  assign cache_f_reset_rsps$ENQ =
	     WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 7'd127 ;
  assign cache_f_reset_rsps$DEQ =
	     EN_server_flush_response_get || EN_server_reset_response_get ;
  assign cache_f_reset_rsps$CLR = 1'b0 ;

  // submodule cache_ram_state_and_ctag_cset
  assign cache_ram_state_and_ctag_cset$ADDRA =
	     MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 ?
	       cache_rg_addr[11:5] :
	       cache_rg_cset_in_cache ;
  assign cache_ram_state_and_ctag_cset$ADDRB =
	     MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       req_addr[11:5] :
	       cache_rg_addr[11:5] ;
  assign cache_ram_state_and_ctag_cset$DIA =
	     MUX_cache_ram_state_and_ctag_cset$a_put_1__SEL_1 ?
	       MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_1 :
	       MUX_cache_ram_state_and_ctag_cset$a_put_3__VAL_2 ;
  assign cache_ram_state_and_ctag_cset$DIB =
	     MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       23'bxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  :
	       23'bxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  ;
  assign cache_ram_state_and_ctag_cset$WEA = 1'd1 ;
  assign cache_ram_state_and_ctag_cset$WEB = 1'd0 ;
  assign cache_ram_state_and_ctag_cset$ENA =
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     !cache_rg_word128_set_in_cache[0] &&
	     cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 ||
	     WILL_FIRE_RL_cache_rl_reset ;
  assign cache_ram_state_and_ctag_cset$ENB =
	     MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 ||
	     WILL_FIRE_RL_cache_rl_rereq ;

  // submodule cache_ram_word128_set
  assign cache_ram_word128_set$ADDRA =
	     MUX_cache_ram_word128_set$a_put_3__SEL_1 ?
	       cache_rg_addr[11:4] :
	       cache_rg_word128_set_in_cache ;
  always@(MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  req_addr or
	  MUX_cache_ram_word128_set$b_put_1__SEL_2 or
	  MUX_cache_ram_word128_set$b_put_2__VAL_2 or
	  WILL_FIRE_RL_cache_rl_rereq or
	  cache_rg_addr or
	  WILL_FIRE_RL_cache_rl_start_cache_refill or
	  MUX_cache_ram_word128_set$b_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  cache_ram_word128_set$ADDRB = req_addr[11:4];
      MUX_cache_ram_word128_set$b_put_1__SEL_2:
	  cache_ram_word128_set$ADDRB =
	      MUX_cache_ram_word128_set$b_put_2__VAL_2;
      WILL_FIRE_RL_cache_rl_rereq:
	  cache_ram_word128_set$ADDRB = cache_rg_addr[11:4];
      WILL_FIRE_RL_cache_rl_start_cache_refill:
	  cache_ram_word128_set$ADDRB =
	      MUX_cache_ram_word128_set$b_put_2__VAL_4;
      default: cache_ram_word128_set$ADDRB =
		   8'bxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign cache_ram_word128_set$DIA =
	     MUX_cache_ram_word128_set$a_put_3__SEL_1 ?
	       MUX_cache_ram_word128_set$a_put_3__VAL_1 :
	       MUX_cache_ram_word128_set$a_put_3__VAL_2 ;
  always@(MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  MUX_cache_ram_word128_set$b_put_1__SEL_2 or
	  WILL_FIRE_RL_cache_rl_rereq or
	  WILL_FIRE_RL_cache_rl_start_cache_refill)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  cache_ram_word128_set$DIB =
	      130'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
      MUX_cache_ram_word128_set$b_put_1__SEL_2:
	  cache_ram_word128_set$DIB =
	      130'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
      WILL_FIRE_RL_cache_rl_rereq:
	  cache_ram_word128_set$DIB =
	      130'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
      WILL_FIRE_RL_cache_rl_start_cache_refill:
	  cache_ram_word128_set$DIB =
	      130'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
      default: cache_ram_word128_set$DIB =
		   130'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign cache_ram_word128_set$WEA = 1'd1 ;
  assign cache_ram_word128_set$WEB = 1'd0 ;
  assign cache_ram_word128_set$ENA =
	     WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	     cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d560 ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 ;
  assign cache_ram_word128_set$ENB =
	     MUX_cache_ram_state_and_ctag_cset$b_put_1__SEL_1 ||
	     WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	     cache_rg_lower_word64_full &&
	     !cache_rg_word128_set_in_cache[0] ||
	     WILL_FIRE_RL_cache_rl_rereq ||
	     WILL_FIRE_RL_cache_rl_start_cache_refill ;

  // submodule cache_soc_map
  assign cache_soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign cache_soc_map$m_is_mem_addr_addr = { 32'd0, cache_rg_addr } ;
  assign cache_soc_map$m_is_near_mem_IO_addr_addr = 64'h0 ;

  // remaining internal signals
  assign IF_NOT_cache_rg_op_36_EQ_2_38_96_OR_NOT_cache__ETC___d850 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_49_EQ_cache_rg_addr_32___d150) ?
	       4'd11 :
	       cache_rg_state ;
  assign IF_cache_rg_addr_BITS_4_TO_0_EQ_0_THEN_1_ELSE_0__q80 =
	     (cache_rg_addr[4:0] == 5'd0) ? 32'd1 : 32'd0 ;
  assign IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC___d1134 =
	     cache_rg_lower_word64_full ? x__h33356 : b__h38485 ;
  assign IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q50 =
	     IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC___d1134[7:0] ;
  assign IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q51 =
	     IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC___d1134[15:0] ;
  assign IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q52 =
	     IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC___d1134[31:0] ;
  assign IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q53 =
	     IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC___d1134[15:8] ;
  assign IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q54 =
	     IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC___d1134[23:16] ;
  assign IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q55 =
	     IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC___d1134[31:16] ;
  assign IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q56 =
	     IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC___d1134[31:24] ;
  assign IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q57 =
	     IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC___d1134[39:32] ;
  assign IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q58 =
	     IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC___d1134[47:32] ;
  assign IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q59 =
	     IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC___d1134[63:32] ;
  assign IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q60 =
	     IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC___d1134[47:40] ;
  assign IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q61 =
	     IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC___d1134[55:48] ;
  assign IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q62 =
	     IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC___d1134[63:48] ;
  assign IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q63 =
	     IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC___d1134[63:56] ;
  assign IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q64 =
	     IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC___d1134[71:64] ;
  assign IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q65 =
	     IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC___d1134[79:64] ;
  assign IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q66 =
	     IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC___d1134[95:64] ;
  assign IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q67 =
	     IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC___d1134[79:72] ;
  assign IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q68 =
	     IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC___d1134[87:80] ;
  assign IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q69 =
	     IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC___d1134[95:80] ;
  assign IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q70 =
	     IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC___d1134[95:88] ;
  assign IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q71 =
	     IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC___d1134[103:96] ;
  assign IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q72 =
	     IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC___d1134[111:96] ;
  assign IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q73 =
	     IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC___d1134[127:96] ;
  assign IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q74 =
	     IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC___d1134[111:104] ;
  assign IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q75 =
	     IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC___d1134[119:112] ;
  assign IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q76 =
	     IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC___d1134[127:112] ;
  assign IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q77 =
	     IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC___d1134[127:120] ;
  assign IF_cache_rg_op_36_EQ_0_37_OR_cache_rg_op_36_EQ_ETC___d853 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00010) ?
	       ((cache_ram_state_and_ctag_cset$DOB[22] &&
		 cache_ram_state_and_ctag_cset_b_read__62_BITS__ETC___d168) ?
		  cache_rg_state :
		  4'd8) :
	       IF_cache_rg_op_36_EQ_1_43_OR_cache_rg_op_36_EQ_ETC___d852 ;
  assign IF_cache_rg_op_36_EQ_1_43_OR_cache_rg_op_36_EQ_ETC___d173 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00011) ?
	       cache_rg_op_36_EQ_2_38_AND_cache_rg_amo_funct5_ETC___d161 :
	       !cache_ram_state_and_ctag_cset$DOB[22] ||
	       !cache_ram_state_and_ctag_cset_b_read__62_BITS__ETC___d168 ||
	       !EN_commit ||
	       cache_f_fabric_write_reqs$FULL_N ;
  assign IF_cache_rg_op_36_EQ_1_43_OR_cache_rg_op_36_EQ_ETC___d787 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00011) ?
	       x__h23562 :
	       x__h27589 ;
  assign IF_cache_rg_op_36_EQ_1_43_OR_cache_rg_op_36_EQ_ETC___d795 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00011) ?
	       cache_rg_st_amo_val :
	       { cache_rg_width_code == 3'b011 && cache_rg_st_amo_val[128],
		 IF_cache_rg_width_code_20_EQ_0b11_29_THEN_cach_ETC___d717 } ;
  assign IF_cache_rg_op_36_EQ_1_43_OR_cache_rg_op_36_EQ_ETC___d852 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00011) ?
	       IF_NOT_cache_rg_op_36_EQ_2_38_96_OR_NOT_cache__ETC___d850 :
	       ((!cache_ram_state_and_ctag_cset$DOB[22] ||
		 !cache_ram_state_and_ctag_cset_b_read__62_BITS__ETC___d168) ?
		  4'd8 :
		  4'd11) ;
  assign IF_cache_rg_width_code_20_EQ_0b10_25_THEN_SEXT_ETC___d682 =
	     (cache_rg_width_code == 3'b010) ?
	       { {32{cache_rg_st_amo_val_BITS_31_TO_0__q44[31]}},
		 cache_rg_st_amo_val_BITS_31_TO_0__q44 } :
	       cache_rg_st_amo_val[63:0] ;
  assign IF_cache_rg_width_code_20_EQ_0b11_29_THEN_IF_c_ETC___d304 =
	     (cache_rg_width_code == 3'b011) ?
	       ((cache_rg_addr[3:0] == 4'h0) ?
		  cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[128] :
		  cache_rg_addr[3:0] == 4'h8 &&
		  cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[129]) :
	       cache_rg_width_code == 3'd4 &&
	       cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[128] ;
  assign IF_cache_rg_width_code_20_EQ_0b11_29_THEN_cach_ETC___d717 =
	     (cache_rg_width_code == 3'b011) ?
	       cache_rg_st_amo_val[127:0] :
	       new_st_val_128__h27680 ;
  assign NOT_cache_cfg_verbosity_read__2_ULE_2_81___d882 =
	     cache_cfg_verbosity > 4'd2 ;
  assign NOT_cache_ctr_wr_rsps_pending_inrg_read__4_MIN_ETC___d58 =
	     cache_ctr_wr_rsps_pending_inrg_read__4_MINUS_c_ETC___d46 !=
	     4'd15 &&
	     cache_f_fabric_write_reqs$EMPTY_N &&
	     !cache_master_xactor_shim_awff_rv[97] &&
	     !cache_master_xactor_shim_wff_rv[74] ;
  assign NOT_cache_f_reset_reqs_notEmpty__6_76_AND_cach_ETC___d946 =
	     !cache_f_reset_reqs$EMPTY_N && cache_rg_state == 4'd12 &&
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00010) ;
  assign NOT_cache_ram_state_and_ctag_cset_b_read__62_B_ETC___d192 =
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__62_BITS__ETC___d168) &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct5 == 5'b00010 &&
	     cache_rg_addr_32_EQ_cache_rg_lrsc_pa_49___d190 ;
  assign NOT_cache_rg_op_36_EQ_0_37_95_AND_NOT_cache_rg_ETC___d814 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00011) &&
	     NOT_cache_rg_op_36_EQ_2_38_96_OR_NOT_cache_rg__ETC___d812 ;
  assign NOT_cache_rg_op_36_EQ_0_37_95_AND_NOT_cache_rg_ETC___d825 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00011) &&
	     NOT_cache_rg_op_36_EQ_2_38_96_OR_NOT_cache_rg__ETC___d823 ;
  assign NOT_cache_rg_op_36_EQ_0_37_95_AND_NOT_cache_rg_ETC___d835 =
	     cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00010) &&
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00011) &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__62_BITS__ETC___d168 ||
	      !EN_commit) &&
	     !cache_cfg_verbosity_read__2_ULE_1___d93 ;
  assign NOT_cache_rg_op_36_EQ_0_37_95_AND_NOT_cache_rg_ETC___d839 =
	     cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00010) &&
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__62_BITS__ETC___d168 &&
	     EN_commit &&
	     !cache_cfg_verbosity_read__2_ULE_1___d93 ;
  assign NOT_cache_rg_op_36_EQ_1_43_03_AND_NOT_cache_rg_ETC___d557 =
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__62_BITS__ETC___d168 &&
	     EN_commit ;
  assign NOT_cache_rg_op_36_EQ_2_38_96_OR_NOT_cache_rg__ETC___d555 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_49_EQ_cache_rg_addr_32___d150) &&
	     EN_commit &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__62_BITS__ETC___d168 ;
  assign NOT_cache_rg_op_36_EQ_2_38_96_OR_NOT_cache_rg__ETC___d789 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_49_EQ_cache_rg_addr_32___d150) &&
	     EN_commit ;
  assign NOT_cache_rg_op_36_EQ_2_38_96_OR_NOT_cache_rg__ETC___d812 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_49_EQ_cache_rg_addr_32___d150) &&
	     EN_commit &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__62_BITS__ETC___d168 &&
	     !cache_cfg_verbosity_read__2_ULE_1___d93 ;
  assign NOT_cache_rg_op_36_EQ_2_38_96_OR_NOT_cache_rg__ETC___d818 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_49_EQ_cache_rg_addr_32___d150) &&
	     EN_commit &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__62_BITS__ETC___d168) &&
	     !cache_cfg_verbosity_read__2_ULE_1___d93 ;
  assign NOT_cache_rg_op_36_EQ_2_38_96_OR_NOT_cache_rg__ETC___d823 =
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00011 ||
	      cache_rg_lrsc_valid &&
	      cache_rg_lrsc_pa_49_EQ_cache_rg_addr_32___d150) &&
	     EN_commit &&
	     !cache_cfg_verbosity_read__2_ULE_1___d93 ;
  assign NOT_cache_w_req_width_code_wget__329_EQ_0b0_35_ETC___d1370 =
	     req_width_code != 3'b0 &&
	     (req_width_code != 3'b001 || req_addr[0]) &&
	     (req_width_code != 3'b010 || req_addr[1:0] != 2'b0) &&
	     (req_width_code != 3'b011 || req_addr[2:0] != 3'b0) ;
  assign SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d315 =
	     { {56{cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q30[7]}},
	       cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q30 } ;
  assign SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d320 =
	     { {56{cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q35[7]}},
	       cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q35 } ;
  assign SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d325 =
	     { {56{cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q29[7]}},
	       cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q29 } ;
  assign SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d330 =
	     { {56{cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q36[7]}},
	       cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q36 } ;
  assign SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d335 =
	     { {56{cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q26[7]}},
	       cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q26 } ;
  assign SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d340 =
	     { {56{cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q37[7]}},
	       cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q37 } ;
  assign SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d345 =
	     { {56{cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q24[7]}},
	       cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q24 } ;
  assign SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d350 =
	     { {56{cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q38[7]}},
	       cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q38 } ;
  assign SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d354 =
	     { {56{cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q21[7]}},
	       cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q21 } ;
  assign SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d359 =
	     { {56{cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q39[7]}},
	       cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q39 } ;
  assign SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d364 =
	     { {56{cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q20[7]}},
	       cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q20 } ;
  assign SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d369 =
	     { {56{cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q40[7]}},
	       cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q40 } ;
  assign SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d374 =
	     { {56{cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q18[7]}},
	       cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q18 } ;
  assign SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d379 =
	     { {56{cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q41[7]}},
	       cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q41 } ;
  assign SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d384 =
	     { {56{cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q16[7]}},
	       cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q16 } ;
  assign SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d389 =
	     { {56{cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q42[7]}},
	       cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q42 } ;
  assign SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d409 =
	     { {48{cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q28[15]}},
	       cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q28 } ;
  assign SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d413 =
	     { {48{cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q27[15]}},
	       cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q27 } ;
  assign SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d417 =
	     { {48{cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q25[15]}},
	       cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q25 } ;
  assign SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d421 =
	     { {48{cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q23[15]}},
	       cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q23 } ;
  assign SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d425 =
	     { {48{cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q22[15]}},
	       cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q22 } ;
  assign SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d429 =
	     { {48{cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q19[15]}},
	       cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q19 } ;
  assign SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d433 =
	     { {48{cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q17[15]}},
	       cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q17 } ;
  assign SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d437 =
	     { {48{cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q15[15]}},
	       cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q15 } ;
  assign SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d449 =
	     { {32{cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q34[31]}},
	       cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q34 } ;
  assign SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d453 =
	     { {32{cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q33[31]}},
	       cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q33 } ;
  assign SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d457 =
	     { {32{cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q32[31]}},
	       cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q32 } ;
  assign SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d461 =
	     { {32{cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q31[31]}},
	       cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q31 } ;
  assign _0__q79 = 2'd0 ;
  assign _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 =
	     8'd1 << size_val__h38050 <= 8'd8 ;
  assign _theResult___snd__h36038 =
	     (cache_rg_addr[2:0] == 3'd0) ?
	       cache_master_xactor_shim_rff_rv$port1__read[67:4] :
	       64'd0 ;
  assign access_exc_code__h4992 = MUX_cache_rg_exc_code$write_1__VAL_4 ;
  assign b__h38485 = { 64'd0, _theResult___snd_fst__h36091 } ;
  assign cache_cfg_verbosity_read__2_ULE_1___d93 =
	     cache_cfg_verbosity <= 4'd1 ;
  assign cache_ctr_wr_rsps_pending_inrg_read__4_MINUS_c_ETC___d46 =
	     cache_ctr_wr_rsps_pending_inrg -
	     cache_ctr_wr_rsps_pending_outrg ;
  assign cache_f_reset_reqs_i_notEmpty__5_AND_cache_f_r_ETC___d117 =
	     cache_f_reset_reqs$EMPTY_N &&
	     (cache_f_reset_reqs$D_OUT || !cache_master_xactor_clearing) &&
	     (cache_rg_cset_in_cache != 7'd127 || cache_f_reset_rsps$FULL_N) ;
  assign cache_master_xactor_shim_arff_rvport1__read_B_ETC__q81 =
	     cache_master_xactor_shim_arff_rv$port1__read[96:0] ;
  assign cache_master_xactor_shim_awff_rvport1__read_B_ETC__q47 =
	     cache_master_xactor_shim_awff_rv$port1__read[96:0] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q1 =
	     cache_master_xactor_shim_rff_rv$port1__read[11:4] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q10 =
	     cache_master_xactor_shim_rff_rv$port1__read[51:36] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q11 =
	     cache_master_xactor_shim_rff_rv$port1__read[51:44] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q12 =
	     cache_master_xactor_shim_rff_rv$port1__read[59:52] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q13 =
	     cache_master_xactor_shim_rff_rv$port1__read[67:52] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q14 =
	     cache_master_xactor_shim_rff_rv$port1__read[67:60] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q2 =
	     cache_master_xactor_shim_rff_rv$port1__read[19:4] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q3 =
	     cache_master_xactor_shim_rff_rv$port1__read[35:4] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q4 =
	     cache_master_xactor_shim_rff_rv$port1__read[19:12] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q5 =
	     cache_master_xactor_shim_rff_rv$port1__read[27:20] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q6 =
	     cache_master_xactor_shim_rff_rv$port1__read[35:20] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q7 =
	     cache_master_xactor_shim_rff_rv$port1__read[35:28] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q8 =
	     cache_master_xactor_shim_rff_rv$port1__read[43:36] ;
  assign cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q9 =
	     cache_master_xactor_shim_rff_rv$port1__read[67:36] ;
  assign cache_master_xactor_shim_wff_rvport1__read_BI_ETC__q48 =
	     cache_master_xactor_shim_wff_rv$port1__read[73:0] ;
  assign cache_ram_state_and_ctag_cset_b_read__62_BITS__ETC___d168 =
	     cache_ram_state_and_ctag_cset$DOB[21:0] == pa_ctag__h7725 ;
  assign cache_ram_state_and_ctag_cset_b_read__62_BIT_2_ETC___d193 =
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__62_BITS__ETC___d168 &&
	     cache_rg_op == 2'd2 &&
	     cache_rg_amo_funct5 == 5'b00010 ||
	     NOT_cache_ram_state_and_ctag_cset_b_read__62_B_ETC___d192 ;
  assign cache_ram_state_and_ctag_cset_b_read__62_BIT_2_ETC___d842 =
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__62_BITS__ETC___d168 &&
	     EN_commit &&
	     cache_rg_addr_32_EQ_cache_rg_lrsc_pa_49___d190 &&
	     !cache_cfg_verbosity_read__2_ULE_1___d93 ;
  assign cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296 =
	     cache_ram_word128_set$DOB & y__h8170 ;
  assign cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q15 =
	     cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[127:112] ;
  assign cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q16 =
	     cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[119:112] ;
  assign cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q17 =
	     cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[111:96] ;
  assign cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q18 =
	     cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[103:96] ;
  assign cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q19 =
	     cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[95:80] ;
  assign cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q20 =
	     cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[87:80] ;
  assign cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q21 =
	     cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[71:64] ;
  assign cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q22 =
	     cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[79:64] ;
  assign cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q23 =
	     cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[63:48] ;
  assign cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q24 =
	     cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[55:48] ;
  assign cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q25 =
	     cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[47:32] ;
  assign cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q26 =
	     cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[39:32] ;
  assign cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q27 =
	     cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[31:16] ;
  assign cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q28 =
	     cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[15:0] ;
  assign cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q29 =
	     cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[23:16] ;
  assign cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q30 =
	     cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[7:0] ;
  assign cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q31 =
	     cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[127:96] ;
  assign cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q32 =
	     cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[95:64] ;
  assign cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q33 =
	     cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[63:32] ;
  assign cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q34 =
	     cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[31:0] ;
  assign cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q35 =
	     cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[15:8] ;
  assign cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q36 =
	     cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[31:24] ;
  assign cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q37 =
	     cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[47:40] ;
  assign cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q38 =
	     cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[63:56] ;
  assign cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q39 =
	     cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[79:72] ;
  assign cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q40 =
	     cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[95:88] ;
  assign cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q41 =
	     cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[111:104] ;
  assign cache_ram_word128_set_b_read__87_AND_cache_ram_ETC__q42 =
	     cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[127:120] ;
  assign cache_rg_addr_32_EQ_cache_rg_lrsc_pa_49___d190 =
	     cache_rg_addr == cache_rg_lrsc_pa ;
  assign cache_rg_amo_funct5_39_EQ_0b10_40_AND_NOT_cach_ETC___d509 =
	     cache_rg_amo_funct5 == 5'b00010 &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__62_BITS__ETC___d168) &&
	     cache_rg_addr_32_EQ_cache_rg_lrsc_pa_49___d190 &&
	     !cache_cfg_verbosity_read__2_ULE_1___d93 ;
  assign cache_rg_lrsc_pa_49_EQ_cache_rg_addr_32___d150 =
	     cache_rg_lrsc_pa == cache_rg_addr ;
  assign cache_rg_op_36_EQ_0_37_OR_cache_rg_op_36_EQ_2__ETC___d213 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00010) &&
	     cache_ram_state_and_ctag_cset_b_read__62_BIT_2_ETC___d193 ||
	     cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00010) &&
	     cache_rg_op_36_EQ_1_43_OR_cache_rg_op_36_EQ_2__ETC___d211 ;
  assign cache_rg_op_36_EQ_0_37_OR_cache_rg_op_36_EQ_2__ETC___d215 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00010) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__62_BITS__ETC___d168 ;
  assign cache_rg_op_36_EQ_0_37_OR_cache_rg_op_36_EQ_2__ETC___d218 =
	     cache_rg_op_36_EQ_0_37_OR_cache_rg_op_36_EQ_2__ETC___d215 ||
	     cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00011 &&
	     lrsc_result__h23100 ;
  assign cache_rg_op_36_EQ_0_37_OR_cache_rg_op_36_EQ_2__ETC___d492 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00010) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__62_BITS__ETC___d168 &&
	     !cache_cfg_verbosity_read__2_ULE_1___d93 ;
  assign cache_rg_op_36_EQ_0_37_OR_cache_rg_op_36_EQ_2__ETC___d505 =
	     (cache_rg_op == 2'd0 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00010) &&
	     (!cache_ram_state_and_ctag_cset$DOB[22] ||
	      !cache_ram_state_and_ctag_cset_b_read__62_BITS__ETC___d168) &&
	     !cache_cfg_verbosity_read__2_ULE_1___d93 ;
  assign cache_rg_op_36_EQ_1_43_OR_cache_rg_op_36_EQ_2__ETC___d211 =
	     cache_rg_op == 2'd1 &&
	     cache_rg_addr_32_EQ_cache_rg_lrsc_pa_49___d190 ||
	     cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00011 ||
	     cache_rg_op != 2'd1 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00011) &&
	     cache_ram_state_and_ctag_cset$DOB[22] &&
	     cache_ram_state_and_ctag_cset_b_read__62_BITS__ETC___d168 &&
	     EN_commit &&
	     cache_rg_addr_32_EQ_cache_rg_lrsc_pa_49___d190 ;
  assign cache_rg_op_36_EQ_1_43_OR_cache_rg_op_36_EQ_2__ETC___d558 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00011) &&
	     NOT_cache_rg_op_36_EQ_2_38_96_OR_NOT_cache_rg__ETC___d555 ||
	     NOT_cache_rg_op_36_EQ_1_43_03_AND_NOT_cache_rg_ETC___d557 ;
  assign cache_rg_op_36_EQ_1_43_OR_cache_rg_op_36_EQ_2__ETC___d791 =
	     (cache_rg_op == 2'd1 ||
	      cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00011) &&
	     NOT_cache_rg_op_36_EQ_2_38_96_OR_NOT_cache_rg__ETC___d789 ||
	     NOT_cache_rg_op_36_EQ_1_43_03_AND_NOT_cache_rg_ETC___d557 ;
  assign cache_rg_op_36_EQ_2_38_AND_cache_rg_amo_funct5_ETC___d161 =
	     cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00011 &&
	     lrsc_result__h23100 ||
	     !EN_commit ||
	     cache_f_fabric_write_reqs$FULL_N ;
  assign cache_rg_op_36_EQ_2_38_AND_cache_rg_amo_funct5_ETC___d829 =
	     cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00011 &&
	     lrsc_result__h23100 &&
	     !cache_cfg_verbosity_read__2_ULE_1___d93 ;
  assign cache_rg_st_amo_val_BITS_31_TO_0__q44 = cache_rg_st_amo_val[31:0] ;
  assign cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d515 =
	     cache_soc_map$m_is_mem_addr && cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00010) &&
	     (cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00011 ||
	      cache_rg_op != 2'd1 && cache_ram_state_and_ctag_cset$DOB[22] &&
	      cache_ram_state_and_ctag_cset_b_read__62_BITS__ETC___d168 &&
	      EN_commit) ;
  assign cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d560 =
	     cache_soc_map$m_is_mem_addr && cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00010) &&
	     cache_rg_op_36_EQ_1_43_OR_cache_rg_op_36_EQ_2__ETC___d558 ;
  assign cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d793 =
	     cache_soc_map$m_is_mem_addr && cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00010) &&
	     cache_rg_op_36_EQ_1_43_OR_cache_rg_op_36_EQ_2__ETC___d791 ;
  assign cache_soc_map_m_is_mem_addr_0_CONCAT_cache_rg__ETC___d847 =
	     cache_soc_map$m_is_mem_addr && cache_rg_op != 2'd0 &&
	     (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00010) &&
	     NOT_cache_rg_op_36_EQ_1_43_03_AND_NOT_cache_rg_ETC___d557 ;
  assign cache_w_req_width_code_wget__329_EQ_0b0_350_OR_ETC___d1386 =
	     req_width_code == 3'b0 ||
	     req_width_code == 3'b001 && !req_addr[0] ||
	     req_width_code == 3'b010 && req_addr[1:0] == 2'b0 ||
	     req_width_code == 3'b011 && req_addr[2:0] == 3'b0 ;
  assign cache_w_req_width_code_wget__329_EQ_0b0_350_OR_ETC___d1391 =
	     (cache_w_req_width_code_wget__329_EQ_0b0_350_OR_ETC___d1386 ||
	      req_width_code == 3'b100 && req_addr[3:0] == 4'b0) &&
	     !cache_cfg_verbosity_read__2_ULE_1___d93 ;
  assign cline_addr__h32110 = { cache_rg_pa[31:5], 5'd0 } ;
  assign cline_fabric_addr__h32111 = { 32'd0, cline_addr__h32110 } ;
  assign fabric_addr__h37776 = { 32'd0, cache_rg_pa } ;
  assign lrsc_result__h23100 =
	     !cache_rg_lrsc_valid ||
	     !cache_rg_lrsc_pa_49_EQ_cache_rg_addr_32___d150 ;
  assign mem_req_wr_addr_awaddr__h5267 =
	     { 32'd0, cache_f_fabric_write_reqs$D_OUT[160:129] } ;
  assign mem_req_wr_data_wuser__h5487 =
	     cache_f_fabric_write_reqs$D_OUT[163:161] == 3'b011 &&
	     cache_f_fabric_write_reqs$D_OUT[128] ;
  assign new_st_val_128__h27680 = { 64'd0, x__h27683 } ;
  assign new_st_val_128__h38741 = { 64'd0, x__h38744 } ;
  assign new_st_val_64__h27685 = { 32'd0, _theResult_____2__h27679[31:0] } ;
  assign new_st_val_64__h27757 =
	     IF_cache_rg_width_code_20_EQ_0b10_25_THEN_SEXT_ETC___d680 +
	     IF_cache_rg_width_code_20_EQ_0b10_25_THEN_SEXT_ETC___d682 ;
  assign new_st_val_64__h28954 = w1__h27509 ^ w2__h27511 ;
  assign new_st_val_64__h28958 = w1__h27509 & w2__h27511 ;
  assign new_st_val_64__h28962 = w1__h27509 | w2__h27511 ;
  assign new_st_val_64__h28966 =
	     (w1__h27509 < w2__h27511) ? w1__h27509 : w2__h27511 ;
  assign new_st_val_64__h28971 =
	     (w1__h27509 <= w2__h27511) ? w2__h27511 : w1__h27509 ;
  assign new_st_val_64__h28977 =
	     ((IF_cache_rg_width_code_20_EQ_0b10_25_THEN_SEXT_ETC___d680 ^
	       64'h8000000000000000) <
	      (IF_cache_rg_width_code_20_EQ_0b10_25_THEN_SEXT_ETC___d682 ^
	       64'h8000000000000000)) ?
	       w1__h27509 :
	       w2__h27511 ;
  assign new_st_val_64__h28982 =
	     ((IF_cache_rg_width_code_20_EQ_0b10_25_THEN_SEXT_ETC___d680 ^
	       64'h8000000000000000) <=
	      (IF_cache_rg_width_code_20_EQ_0b10_25_THEN_SEXT_ETC___d682 ^
	       64'h8000000000000000)) ?
	       w2__h27511 :
	       w1__h27509 ;
  assign new_st_val_64__h38746 = { 32'd0, _theResult_____2__h38740[31:0] } ;
  assign new_st_val_64__h38818 =
	     IF_cache_rg_width_code_20_EQ_0b10_25_THEN_SEXT_ETC___d1230 +
	     IF_cache_rg_width_code_20_EQ_0b10_25_THEN_SEXT_ETC___d682 ;
  assign new_st_val_64__h40759 = w1__h38707 ^ w2__h27511 ;
  assign new_st_val_64__h40763 = w1__h38707 & w2__h27511 ;
  assign new_st_val_64__h40767 = w1__h38707 | w2__h27511 ;
  assign new_st_val_64__h40771 =
	     (w1__h38707 < w2__h27511) ? w1__h38707 : w2__h27511 ;
  assign new_st_val_64__h40776 =
	     (w1__h38707 <= w2__h27511) ? w2__h27511 : w1__h38707 ;
  assign new_st_val_64__h40782 =
	     ((IF_cache_rg_width_code_20_EQ_0b10_25_THEN_SEXT_ETC___d1230 ^
	       64'h8000000000000000) <
	      (IF_cache_rg_width_code_20_EQ_0b10_25_THEN_SEXT_ETC___d682 ^
	       64'h8000000000000000)) ?
	       w1__h38707 :
	       w2__h27511 ;
  assign new_st_val_64__h40787 =
	     ((IF_cache_rg_width_code_20_EQ_0b10_25_THEN_SEXT_ETC___d1230 ^
	       64'h8000000000000000) <=
	      (IF_cache_rg_width_code_20_EQ_0b10_25_THEN_SEXT_ETC___d682 ^
	       64'h8000000000000000)) ?
	       w2__h27511 :
	       w1__h38707 ;
  assign pa_ctag__h7725 = { 2'd0, cache_rg_addr[31:12] } ;
  assign result_lo__h21065 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[7:0] } :
	       SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d315 ;
  assign result_lo__h21100 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[15:8] } :
	       SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d320 ;
  assign result_lo__h21133 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[23:16] } :
	       SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d325 ;
  assign result_lo__h21166 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[31:24] } :
	       SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d330 ;
  assign result_lo__h21199 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[39:32] } :
	       SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d335 ;
  assign result_lo__h21232 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[47:40] } :
	       SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d340 ;
  assign result_lo__h21265 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[55:48] } :
	       SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d345 ;
  assign result_lo__h21298 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[63:56] } :
	       SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d350 ;
  assign result_lo__h21331 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[71:64] } :
	       SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d354 ;
  assign result_lo__h21364 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[79:72] } :
	       SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d359 ;
  assign result_lo__h21397 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[87:80] } :
	       SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d364 ;
  assign result_lo__h21430 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[95:88] } :
	       SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d369 ;
  assign result_lo__h21463 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[103:96] } :
	       SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d374 ;
  assign result_lo__h21496 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[111:104] } :
	       SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d379 ;
  assign result_lo__h21529 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[119:112] } :
	       SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d384 ;
  assign result_lo__h21562 =
	     cache_rg_is_unsigned ?
	       { 56'd0,
		 cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[127:120] } :
	       SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d389 ;
  assign result_lo__h21617 =
	     cache_rg_is_unsigned ?
	       { 48'd0,
		 cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[15:0] } :
	       SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d409 ;
  assign result_lo__h21650 =
	     cache_rg_is_unsigned ?
	       { 48'd0,
		 cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[31:16] } :
	       SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d413 ;
  assign result_lo__h21683 =
	     cache_rg_is_unsigned ?
	       { 48'd0,
		 cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[47:32] } :
	       SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d417 ;
  assign result_lo__h21716 =
	     cache_rg_is_unsigned ?
	       { 48'd0,
		 cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[63:48] } :
	       SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d421 ;
  assign result_lo__h21749 =
	     cache_rg_is_unsigned ?
	       { 48'd0,
		 cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[79:64] } :
	       SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d425 ;
  assign result_lo__h21782 =
	     cache_rg_is_unsigned ?
	       { 48'd0,
		 cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[95:80] } :
	       SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d429 ;
  assign result_lo__h21815 =
	     cache_rg_is_unsigned ?
	       { 48'd0,
		 cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[111:96] } :
	       SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d433 ;
  assign result_lo__h21848 =
	     cache_rg_is_unsigned ?
	       { 48'd0,
		 cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[127:112] } :
	       SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d437 ;
  assign result_lo__h21895 =
	     cache_rg_is_unsigned ?
	       { 32'd0,
		 cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[31:0] } :
	       SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d449 ;
  assign result_lo__h21928 =
	     cache_rg_is_unsigned ?
	       { 32'd0,
		 cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[63:32] } :
	       SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d453 ;
  assign result_lo__h21961 =
	     cache_rg_is_unsigned ?
	       { 32'd0,
		 cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[95:64] } :
	       SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d457 ;
  assign result_lo__h21994 =
	     cache_rg_is_unsigned ?
	       { 32'd0,
		 cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[127:96] } :
	       SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d461 ;
  assign result_lo__h36128 =
	     cache_rg_is_unsigned ?
	       { 56'd0, cache_master_xactor_shim_rff_rv$port1__read[11:4] } :
	       { {56{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q1[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q1 } ;
  assign result_lo__h36161 =
	     cache_rg_is_unsigned ?
	       { 56'd0, cache_master_xactor_shim_rff_rv$port1__read[19:12] } :
	       { {56{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q4[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q4 } ;
  assign result_lo__h36194 =
	     cache_rg_is_unsigned ?
	       { 56'd0, cache_master_xactor_shim_rff_rv$port1__read[27:20] } :
	       { {56{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q5[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q5 } ;
  assign result_lo__h36227 =
	     cache_rg_is_unsigned ?
	       { 56'd0, cache_master_xactor_shim_rff_rv$port1__read[35:28] } :
	       { {56{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q7[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q7 } ;
  assign result_lo__h36260 =
	     cache_rg_is_unsigned ?
	       { 56'd0, cache_master_xactor_shim_rff_rv$port1__read[43:36] } :
	       { {56{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q8[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q8 } ;
  assign result_lo__h36293 =
	     cache_rg_is_unsigned ?
	       { 56'd0, cache_master_xactor_shim_rff_rv$port1__read[51:44] } :
	       { {56{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q11[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q11 } ;
  assign result_lo__h36326 =
	     cache_rg_is_unsigned ?
	       { 56'd0, cache_master_xactor_shim_rff_rv$port1__read[59:52] } :
	       { {56{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q12[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q12 } ;
  assign result_lo__h36359 =
	     cache_rg_is_unsigned ?
	       { 56'd0, cache_master_xactor_shim_rff_rv$port1__read[67:60] } :
	       { {56{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q14[7]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q14 } ;
  assign result_lo__h36422 =
	     cache_rg_is_unsigned ?
	       { 48'd0, cache_master_xactor_shim_rff_rv$port1__read[19:4] } :
	       { {48{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q2[15]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q2 } ;
  assign result_lo__h36455 =
	     cache_rg_is_unsigned ?
	       { 48'd0, cache_master_xactor_shim_rff_rv$port1__read[35:20] } :
	       { {48{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q6[15]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q6 } ;
  assign result_lo__h36488 =
	     cache_rg_is_unsigned ?
	       { 48'd0, cache_master_xactor_shim_rff_rv$port1__read[51:36] } :
	       { {48{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q10[15]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q10 } ;
  assign result_lo__h36521 =
	     cache_rg_is_unsigned ?
	       { 48'd0, cache_master_xactor_shim_rff_rv$port1__read[67:52] } :
	       { {48{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q13[15]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q13 } ;
  assign result_lo__h36572 =
	     cache_rg_is_unsigned ?
	       { 32'd0, cache_master_xactor_shim_rff_rv$port1__read[35:4] } :
	       { {32{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q3[31]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q3 } ;
  assign result_lo__h36605 =
	     cache_rg_is_unsigned ?
	       { 32'd0, cache_master_xactor_shim_rff_rv$port1__read[67:36] } :
	       { {32{cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q9[31]}},
		 cache_master_xactor_shim_rff_rvport1__read_BI_ETC__q9 } ;
  assign result_lo__h39694 =
	     { {56{IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q50[7]}},
	       IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q50 } ;
  assign result_lo__h39726 =
	     { {56{IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q53[7]}},
	       IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q53 } ;
  assign result_lo__h39758 =
	     { {56{IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q54[7]}},
	       IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q54 } ;
  assign result_lo__h39790 =
	     { {56{IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q56[7]}},
	       IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q56 } ;
  assign result_lo__h39822 =
	     { {56{IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q57[7]}},
	       IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q57 } ;
  assign result_lo__h39854 =
	     { {56{IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q60[7]}},
	       IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q60 } ;
  assign result_lo__h39886 =
	     { {56{IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q61[7]}},
	       IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q61 } ;
  assign result_lo__h39918 =
	     { {56{IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q63[7]}},
	       IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q63 } ;
  assign result_lo__h39950 =
	     { {56{IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q64[7]}},
	       IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q64 } ;
  assign result_lo__h39982 =
	     { {56{IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q67[7]}},
	       IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q67 } ;
  assign result_lo__h40014 =
	     { {56{IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q68[7]}},
	       IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q68 } ;
  assign result_lo__h40046 =
	     { {56{IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q70[7]}},
	       IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q70 } ;
  assign result_lo__h40078 =
	     { {56{IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q71[7]}},
	       IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q71 } ;
  assign result_lo__h40110 =
	     { {56{IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q74[7]}},
	       IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q74 } ;
  assign result_lo__h40142 =
	     { {56{IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q75[7]}},
	       IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q75 } ;
  assign result_lo__h40174 =
	     { {56{IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q77[7]}},
	       IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q77 } ;
  assign result_lo__h40228 =
	     { {48{IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q51[15]}},
	       IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q51 } ;
  assign result_lo__h40260 =
	     { {48{IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q55[15]}},
	       IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q55 } ;
  assign result_lo__h40292 =
	     { {48{IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q58[15]}},
	       IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q58 } ;
  assign result_lo__h40324 =
	     { {48{IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q62[15]}},
	       IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q62 } ;
  assign result_lo__h40356 =
	     { {48{IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q65[15]}},
	       IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q65 } ;
  assign result_lo__h40388 =
	     { {48{IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q69[15]}},
	       IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q69 } ;
  assign result_lo__h40420 =
	     { {48{IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q72[15]}},
	       IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q72 } ;
  assign result_lo__h40452 =
	     { {48{IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q76[15]}},
	       IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q76 } ;
  assign result_lo__h40498 =
	     { {32{IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q52[31]}},
	       IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q52 } ;
  assign result_lo__h40530 =
	     { {32{IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q59[31]}},
	       IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q59 } ;
  assign result_lo__h40562 =
	     { {32{IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q66[31]}},
	       IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q66 } ;
  assign result_lo__h40594 =
	     { {32{IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q73[31]}},
	       IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC__q73 } ;
  assign shift_bits__h5283 =
	     { cache_f_fabric_write_reqs$D_OUT[131:129], 3'b0 } ;
  assign strobe128__h5355 =
	     8'b00000001 << cache_f_fabric_write_reqs$D_OUT[131:129] ;
  assign strobe128__h5359 =
	     8'b00000011 << cache_f_fabric_write_reqs$D_OUT[131:129] ;
  assign strobe128__h5363 =
	     8'b00001111 << cache_f_fabric_write_reqs$D_OUT[131:129] ;
  assign strobe128__h5367 =
	     8'b11111111 << cache_f_fabric_write_reqs$D_OUT[131:129] ;
  assign w17504_BITS_31_TO_0__q43 = w1__h27504[31:0] ;
  assign w18702_BITS_31_TO_0__q78 = w1__h38702[31:0] ;
  assign w1___1__h27724 = { 32'd0, w1__h27504[31:0] } ;
  assign w1___1__h38785 = { 32'd0, w1__h38702[31:0] } ;
  assign w2__h27511 =
	     (cache_rg_width_code == 3'b010) ?
	       { 32'd0, cache_rg_st_amo_val[31:0] } :
	       cache_rg_st_amo_val[63:0] ;
  assign word64__h5354 =
	     cache_f_fabric_write_reqs$D_OUT[63:0] << shift_bits__h5283 ;
  assign x__h21026 =
	     { _theResult___snd_snd__h21028, _theResult___snd_fst__h21027 } ;
  assign x__h27422 =
	     (cache_rg_width_code == 3'b011 && cache_rg_st_amo_val[128]) ?
	       cache_ram_word128_set$DOB[129:128] | x__h27463 :
	       cache_ram_word128_set$DOB[129:128] & y__h27587 ;
  assign x__h27463 = 2'd1 << x__h27566 ;
  assign x__h27566 = { 3'd0, cache_rg_addr[3] } ;
  assign x__h27683 =
	     (cache_rg_width_code == 3'b010) ?
	       new_st_val_64__h27685 :
	       _theResult_____2__h27679 ;
  assign x__h31850 = { _theResult___snd_snd__h21028, w1__h27504 } ;
  assign x__h33351 =
	     { cache_master_xactor_shim_rff_rv$port1__read[0],
	       cache_rg_lower_tag } ;
  assign x__h33356 =
	     { cache_master_xactor_shim_rff_rv$port1__read[67:4],
	       cache_rg_lower_word64 } ;
  assign x__h38735 =
	     (cache_rg_width_code == 3'b011) ?
	       cache_rg_st_amo_val[127:0] :
	       new_st_val_128__h38741 ;
  assign x__h38744 =
	     (cache_rg_width_code == 3'b010) ?
	       new_st_val_64__h38746 :
	       _theResult_____2__h38740 ;
  assign x__h40938 = { _theResult___snd_snd__h38923, w1__h38702 } ;
  assign y__h27587 = ~x__h27463 ;
  assign y__h8170 =
	     {130{cache_ram_state_and_ctag_cset$DOB[22] &&
		  cache_ram_state_and_ctag_cset_b_read__62_BITS__ETC___d168}} ;
  always@(cache_rg_width_code)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'b010, 3'b011, 3'd4: _theResult___snd_fst__h26680 = 64'd1;
      default: _theResult___snd_fst__h26680 = 64'd0;
    endcase
  end
  always@(cache_f_fabric_write_reqs$D_OUT)
  begin
    case (cache_f_fabric_write_reqs$D_OUT[163:161])
      3'b0, 3'b001, 3'b010, 3'b011:
	  _theResult___snd_fst_val__h5373 =
	      cache_f_fabric_write_reqs$D_OUT[163:161];
      default: _theResult___snd_fst_val__h5373 = 3'b111;
    endcase
  end
  always@(cache_rg_width_code)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'b010, 3'b011: size_val__h38050 = cache_rg_width_code;
      default: size_val__h38050 = 3'b100;
    endcase
  end
  always@(cache_f_fabric_write_reqs$D_OUT or
	  strobe128__h5355 or
	  strobe128__h5359 or strobe128__h5363 or strobe128__h5367)
  begin
    case (cache_f_fabric_write_reqs$D_OUT[163:161])
      3'b0: mem_req_wr_data_wstrb__h5485 = strobe128__h5355;
      3'b001: mem_req_wr_data_wstrb__h5485 = strobe128__h5359;
      3'b010: mem_req_wr_data_wstrb__h5485 = strobe128__h5363;
      3'b011: mem_req_wr_data_wstrb__h5485 = strobe128__h5367;
      default: mem_req_wr_data_wstrb__h5485 = 8'd0;
    endcase
  end
  always@(cache_f_fabric_write_reqs$D_OUT or word64__h5354)
  begin
    case (cache_f_fabric_write_reqs$D_OUT[163:161])
      3'b0, 3'b001, 3'b010, 3'b011:
	  mem_req_wr_data_wdata__h5484 = word64__h5354;
      default: mem_req_wr_data_wdata__h5484 =
		   cache_f_fabric_write_reqs$D_OUT[63:0];
    endcase
  end
  always@(cache_rg_width_code or
	  cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'b010, 3'b011: _theResult___snd_snd__h21028 = 64'd0;
      3'd4:
	  _theResult___snd_snd__h21028 =
	      cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[127:64];
      default: _theResult___snd_snd__h21028 = 64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  _theResult___snd__h8119 =
	      cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[63:0];
      4'h8:
	  _theResult___snd__h8119 =
	      cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[127:64];
      default: _theResult___snd__h8119 = 64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result_lo__h21065 or
	  result_lo__h21100 or
	  result_lo__h21133 or
	  result_lo__h21166 or
	  result_lo__h21199 or
	  result_lo__h21232 or
	  result_lo__h21265 or
	  result_lo__h21298 or
	  result_lo__h21331 or
	  result_lo__h21364 or
	  result_lo__h21397 or
	  result_lo__h21430 or
	  result_lo__h21463 or
	  result_lo__h21496 or result_lo__h21529 or result_lo__h21562)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d406 =
	      result_lo__h21065;
      4'h1:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d406 =
	      result_lo__h21100;
      4'h2:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d406 =
	      result_lo__h21133;
      4'h3:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d406 =
	      result_lo__h21166;
      4'h4:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d406 =
	      result_lo__h21199;
      4'h5:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d406 =
	      result_lo__h21232;
      4'h6:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d406 =
	      result_lo__h21265;
      4'h7:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d406 =
	      result_lo__h21298;
      4'h8:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d406 =
	      result_lo__h21331;
      4'h9:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d406 =
	      result_lo__h21364;
      4'hA:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d406 =
	      result_lo__h21397;
      4'hB:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d406 =
	      result_lo__h21430;
      4'hC:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d406 =
	      result_lo__h21463;
      4'hD:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d406 =
	      result_lo__h21496;
      4'hE:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d406 =
	      result_lo__h21529;
      4'hF:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d406 =
	      result_lo__h21562;
    endcase
  end
  always@(cache_rg_addr or
	  result_lo__h21617 or
	  result_lo__h21650 or
	  result_lo__h21683 or
	  result_lo__h21716 or
	  result_lo__h21749 or
	  result_lo__h21782 or result_lo__h21815 or result_lo__h21848)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d446 =
	      result_lo__h21617;
      4'h2:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d446 =
	      result_lo__h21650;
      4'h4:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d446 =
	      result_lo__h21683;
      4'h6:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d446 =
	      result_lo__h21716;
      4'h8:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d446 =
	      result_lo__h21749;
      4'hA:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d446 =
	      result_lo__h21782;
      4'hC:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d446 =
	      result_lo__h21815;
      4'hE:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d446 =
	      result_lo__h21848;
      default: IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d446 =
		   64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result_lo__h21895 or
	  result_lo__h21928 or result_lo__h21961 or result_lo__h21994)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d466 =
	      result_lo__h21895;
      4'h4:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d466 =
	      result_lo__h21928;
      4'h8:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d466 =
	      result_lo__h21961;
      4'hC:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d466 =
	      result_lo__h21994;
      default: IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d466 =
		   64'd0;
    endcase
  end
  always@(cache_rg_width_code or
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d406 or
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d446 or
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d466 or
	  _theResult___snd__h8119 or
	  cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296)
  begin
    case (cache_rg_width_code)
      3'd0:
	  _theResult___snd_fst__h21027 =
	      IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d406;
      3'd1:
	  _theResult___snd_fst__h21027 =
	      IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d446;
      3'b010:
	  _theResult___snd_fst__h21027 =
	      IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d466;
      3'b011: _theResult___snd_fst__h21027 = _theResult___snd__h8119;
      3'd4:
	  _theResult___snd_fst__h21027 =
	      cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[63:0];
      default: _theResult___snd_fst__h21027 = 64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d409 or
	  SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d413 or
	  SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d417 or
	  SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d421 or
	  SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d425 or
	  SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d429 or
	  SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d433 or
	  SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d437)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d541 =
	      SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d409;
      4'h2:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d541 =
	      SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d413;
      4'h4:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d541 =
	      SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d417;
      4'h6:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d541 =
	      SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d421;
      4'h8:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d541 =
	      SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d425;
      4'hA:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d541 =
	      SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d429;
      4'hC:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d541 =
	      SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d433;
      4'hE:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d541 =
	      SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d437;
      default: IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d541 =
		   64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d449 or
	  SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d453 or
	  SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d457 or
	  SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d461)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d545 =
	      SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d449;
      4'h4:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d545 =
	      SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d453;
      4'h8:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d545 =
	      SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d457;
      4'hC:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d545 =
	      SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d461;
      default: IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d545 =
		   64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d315 or
	  SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d320 or
	  SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d325 or
	  SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d330 or
	  SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d335 or
	  SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d340 or
	  SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d345 or
	  SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d350 or
	  SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d354 or
	  SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d359 or
	  SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d364 or
	  SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d369 or
	  SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d374 or
	  SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d379 or
	  SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d384 or
	  SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d389)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d533 =
	      SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d315;
      4'h1:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d533 =
	      SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d320;
      4'h2:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d533 =
	      SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d325;
      4'h3:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d533 =
	      SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d330;
      4'h4:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d533 =
	      SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d335;
      4'h5:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d533 =
	      SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d340;
      4'h6:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d533 =
	      SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d345;
      4'h7:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d533 =
	      SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d350;
      4'h8:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d533 =
	      SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d354;
      4'h9:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d533 =
	      SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d359;
      4'hA:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d533 =
	      SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d364;
      4'hB:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d533 =
	      SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d369;
      4'hC:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d533 =
	      SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d374;
      4'hD:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d533 =
	      SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d379;
      4'hE:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d533 =
	      SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d384;
      4'hF:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d533 =
	      SEXT_cache_ram_word128_set_b_read__87_AND_cach_ETC___d389;
    endcase
  end
  always@(cache_rg_width_code or
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d533 or
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d541 or
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d545 or
	  _theResult___snd__h8119 or
	  cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296)
  begin
    case (cache_rg_width_code)
      3'd0:
	  w1__h27504 =
	      IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d533;
      3'd1:
	  w1__h27504 =
	      IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d541;
      3'b010:
	  w1__h27504 =
	      IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d545;
      3'b011: w1__h27504 = _theResult___snd__h8119;
      3'd4:
	  w1__h27504 =
	      cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[63:0];
      default: w1__h27504 = 64'd0;
    endcase
  end
  always@(cache_rg_width_code or
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d533 or
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d541 or
	  w1___1__h27724 or
	  _theResult___snd__h8119 or
	  cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296)
  begin
    case (cache_rg_width_code)
      3'd0:
	  w1__h27509 =
	      IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d533;
      3'd1:
	  w1__h27509 =
	      IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d541;
      3'b010: w1__h27509 = w1___1__h27724;
      3'b011: w1__h27509 = _theResult___snd__h8119;
      3'd4:
	  w1__h27509 =
	      cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[63:0];
      default: w1__h27509 = 64'd0;
    endcase
  end
  always@(cache_rg_width_code or
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d533 or
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d541 or
	  w17504_BITS_31_TO_0__q43 or
	  _theResult___snd__h8119 or
	  cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296)
  begin
    case (cache_rg_width_code)
      3'd0:
	  IF_cache_rg_width_code_20_EQ_0b10_25_THEN_SEXT_ETC___d680 =
	      IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d533;
      3'd1:
	  IF_cache_rg_width_code_20_EQ_0b10_25_THEN_SEXT_ETC___d680 =
	      IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d541;
      3'b010:
	  IF_cache_rg_width_code_20_EQ_0b10_25_THEN_SEXT_ETC___d680 =
	      { {32{w17504_BITS_31_TO_0__q43[31]}},
		w17504_BITS_31_TO_0__q43 };
      3'b011:
	  IF_cache_rg_width_code_20_EQ_0b10_25_THEN_SEXT_ETC___d680 =
	      _theResult___snd__h8119;
      3'd4:
	  IF_cache_rg_width_code_20_EQ_0b10_25_THEN_SEXT_ETC___d680 =
	      cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296[63:0];
      default: IF_cache_rg_width_code_20_EQ_0b10_25_THEN_SEXT_ETC___d680 =
		   64'd0;
    endcase
  end
  always@(cache_rg_amo_funct5 or
	  new_st_val_64__h28982 or
	  new_st_val_64__h27757 or
	  w2__h27511 or
	  new_st_val_64__h28954 or
	  new_st_val_64__h28962 or
	  new_st_val_64__h28958 or
	  new_st_val_64__h28977 or
	  new_st_val_64__h28966 or new_st_val_64__h28971)
  begin
    case (cache_rg_amo_funct5)
      5'b0: _theResult_____2__h27679 = new_st_val_64__h27757;
      5'b00001: _theResult_____2__h27679 = w2__h27511;
      5'b00100: _theResult_____2__h27679 = new_st_val_64__h28954;
      5'b01000: _theResult_____2__h27679 = new_st_val_64__h28962;
      5'b01100: _theResult_____2__h27679 = new_st_val_64__h28958;
      5'b10000: _theResult_____2__h27679 = new_st_val_64__h28977;
      5'b11000: _theResult_____2__h27679 = new_st_val_64__h28966;
      5'b11100: _theResult_____2__h27679 = new_st_val_64__h28971;
      default: _theResult_____2__h27679 = new_st_val_64__h28982;
    endcase
  end
  always@(cache_rg_addr or
	  cache_ram_word128_set$DOB or
	  IF_cache_rg_width_code_20_EQ_0b11_29_THEN_cach_ETC___d717)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d776 =
	      { cache_ram_word128_set$DOB[127:32],
		IF_cache_rg_width_code_20_EQ_0b11_29_THEN_cach_ETC___d717[31:0] };
      4'h4:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d776 =
	      { cache_ram_word128_set$DOB[127:64],
		IF_cache_rg_width_code_20_EQ_0b11_29_THEN_cach_ETC___d717[31:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h8:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d776 =
	      { cache_ram_word128_set$DOB[127:96],
		IF_cache_rg_width_code_20_EQ_0b11_29_THEN_cach_ETC___d717[31:0],
		cache_ram_word128_set$DOB[63:0] };
      4'hC:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d776 =
	      { IF_cache_rg_width_code_20_EQ_0b11_29_THEN_cach_ETC___d717[31:0],
		cache_ram_word128_set$DOB[95:0] };
      default: IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d776 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or cache_rg_st_amo_val)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d662 =
	      { cache_ram_word128_set$DOB[127:32],
		cache_rg_st_amo_val[31:0] };
      4'h4:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d662 =
	      { cache_ram_word128_set$DOB[127:64],
		cache_rg_st_amo_val[31:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h8:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d662 =
	      { cache_ram_word128_set$DOB[127:96],
		cache_rg_st_amo_val[31:0],
		cache_ram_word128_set$DOB[63:0] };
      4'hC:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d662 =
	      { cache_rg_st_amo_val[31:0], cache_ram_word128_set$DOB[95:0] };
      default: IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d662 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_addr or
	  cache_ram_word128_set$DOB or
	  IF_cache_rg_width_code_20_EQ_0b11_29_THEN_cach_ETC___d717)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d767 =
	      { cache_ram_word128_set$DOB[127:16],
		IF_cache_rg_width_code_20_EQ_0b11_29_THEN_cach_ETC___d717[15:0] };
      4'h2:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d767 =
	      { cache_ram_word128_set$DOB[127:32],
		IF_cache_rg_width_code_20_EQ_0b11_29_THEN_cach_ETC___d717[15:0],
		cache_ram_word128_set$DOB[15:0] };
      4'h4:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d767 =
	      { cache_ram_word128_set$DOB[127:48],
		IF_cache_rg_width_code_20_EQ_0b11_29_THEN_cach_ETC___d717[15:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h6:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d767 =
	      { cache_ram_word128_set$DOB[127:64],
		IF_cache_rg_width_code_20_EQ_0b11_29_THEN_cach_ETC___d717[15:0],
		cache_ram_word128_set$DOB[47:0] };
      4'h8:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d767 =
	      { cache_ram_word128_set$DOB[127:80],
		IF_cache_rg_width_code_20_EQ_0b11_29_THEN_cach_ETC___d717[15:0],
		cache_ram_word128_set$DOB[63:0] };
      4'hA:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d767 =
	      { cache_ram_word128_set$DOB[127:96],
		IF_cache_rg_width_code_20_EQ_0b11_29_THEN_cach_ETC___d717[15:0],
		cache_ram_word128_set$DOB[79:0] };
      4'hC:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d767 =
	      { cache_ram_word128_set$DOB[127:112],
		IF_cache_rg_width_code_20_EQ_0b11_29_THEN_cach_ETC___d717[15:0],
		cache_ram_word128_set$DOB[95:0] };
      4'hE:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d767 =
	      { IF_cache_rg_width_code_20_EQ_0b11_29_THEN_cach_ETC___d717[15:0],
		cache_ram_word128_set$DOB[111:0] };
      default: IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d767 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or cache_rg_st_amo_val)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d653 =
	      { cache_ram_word128_set$DOB[127:16],
		cache_rg_st_amo_val[15:0] };
      4'h2:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d653 =
	      { cache_ram_word128_set$DOB[127:32],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[15:0] };
      4'h4:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d653 =
	      { cache_ram_word128_set$DOB[127:48],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h6:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d653 =
	      { cache_ram_word128_set$DOB[127:64],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[47:0] };
      4'h8:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d653 =
	      { cache_ram_word128_set$DOB[127:80],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[63:0] };
      4'hA:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d653 =
	      { cache_ram_word128_set$DOB[127:96],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[79:0] };
      4'hC:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d653 =
	      { cache_ram_word128_set$DOB[127:112],
		cache_rg_st_amo_val[15:0],
		cache_ram_word128_set$DOB[95:0] };
      4'hE:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d653 =
	      { cache_rg_st_amo_val[15:0], cache_ram_word128_set$DOB[111:0] };
      default: IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d653 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_addr or
	  cache_ram_word128_set$DOB or
	  IF_cache_rg_width_code_20_EQ_0b11_29_THEN_cach_ETC___d717)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d750 =
	      { cache_ram_word128_set$DOB[127:8],
		IF_cache_rg_width_code_20_EQ_0b11_29_THEN_cach_ETC___d717[7:0] };
      4'h1:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d750 =
	      { cache_ram_word128_set$DOB[127:16],
		IF_cache_rg_width_code_20_EQ_0b11_29_THEN_cach_ETC___d717[7:0],
		cache_ram_word128_set$DOB[7:0] };
      4'h2:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d750 =
	      { cache_ram_word128_set$DOB[127:24],
		IF_cache_rg_width_code_20_EQ_0b11_29_THEN_cach_ETC___d717[7:0],
		cache_ram_word128_set$DOB[15:0] };
      4'h3:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d750 =
	      { cache_ram_word128_set$DOB[127:32],
		IF_cache_rg_width_code_20_EQ_0b11_29_THEN_cach_ETC___d717[7:0],
		cache_ram_word128_set$DOB[23:0] };
      4'h4:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d750 =
	      { cache_ram_word128_set$DOB[127:40],
		IF_cache_rg_width_code_20_EQ_0b11_29_THEN_cach_ETC___d717[7:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h5:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d750 =
	      { cache_ram_word128_set$DOB[127:48],
		IF_cache_rg_width_code_20_EQ_0b11_29_THEN_cach_ETC___d717[7:0],
		cache_ram_word128_set$DOB[39:0] };
      4'h6:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d750 =
	      { cache_ram_word128_set$DOB[127:56],
		IF_cache_rg_width_code_20_EQ_0b11_29_THEN_cach_ETC___d717[7:0],
		cache_ram_word128_set$DOB[47:0] };
      4'h7:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d750 =
	      { cache_ram_word128_set$DOB[127:64],
		IF_cache_rg_width_code_20_EQ_0b11_29_THEN_cach_ETC___d717[7:0],
		cache_ram_word128_set$DOB[55:0] };
      4'h8:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d750 =
	      { cache_ram_word128_set$DOB[127:72],
		IF_cache_rg_width_code_20_EQ_0b11_29_THEN_cach_ETC___d717[7:0],
		cache_ram_word128_set$DOB[63:0] };
      4'h9:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d750 =
	      { cache_ram_word128_set$DOB[127:80],
		IF_cache_rg_width_code_20_EQ_0b11_29_THEN_cach_ETC___d717[7:0],
		cache_ram_word128_set$DOB[71:0] };
      4'hA:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d750 =
	      { cache_ram_word128_set$DOB[127:88],
		IF_cache_rg_width_code_20_EQ_0b11_29_THEN_cach_ETC___d717[7:0],
		cache_ram_word128_set$DOB[79:0] };
      4'hB:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d750 =
	      { cache_ram_word128_set$DOB[127:96],
		IF_cache_rg_width_code_20_EQ_0b11_29_THEN_cach_ETC___d717[7:0],
		cache_ram_word128_set$DOB[87:0] };
      4'hC:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d750 =
	      { cache_ram_word128_set$DOB[127:104],
		IF_cache_rg_width_code_20_EQ_0b11_29_THEN_cach_ETC___d717[7:0],
		cache_ram_word128_set$DOB[95:0] };
      4'hD:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d750 =
	      { cache_ram_word128_set$DOB[127:112],
		IF_cache_rg_width_code_20_EQ_0b11_29_THEN_cach_ETC___d717[7:0],
		cache_ram_word128_set$DOB[103:0] };
      4'hE:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d750 =
	      { cache_ram_word128_set$DOB[127:120],
		IF_cache_rg_width_code_20_EQ_0b11_29_THEN_cach_ETC___d717[7:0],
		cache_ram_word128_set$DOB[111:0] };
      4'hF:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d750 =
	      { IF_cache_rg_width_code_20_EQ_0b11_29_THEN_cach_ETC___d717[7:0],
		cache_ram_word128_set$DOB[119:0] };
    endcase
  end
  always@(cache_rg_addr or
	  cache_ram_word128_set$DOB or
	  IF_cache_rg_width_code_20_EQ_0b11_29_THEN_cach_ETC___d717)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q45 =
	      { cache_ram_word128_set$DOB[127:64],
		IF_cache_rg_width_code_20_EQ_0b11_29_THEN_cach_ETC___d717[63:0] };
      4'h8:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q45 =
	      { IF_cache_rg_width_code_20_EQ_0b11_29_THEN_cach_ETC___d717[63:0],
		cache_ram_word128_set$DOB[63:0] };
      default: CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q45 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_width_code or
	  cache_ram_word128_set$DOB or
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d750 or
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d767 or
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d776 or
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q45 or
	  IF_cache_rg_width_code_20_EQ_0b11_29_THEN_cach_ETC___d717)
  begin
    case (cache_rg_width_code)
      3'd0:
	  x__h27589 =
	      IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d750;
      3'd1:
	  x__h27589 =
	      IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d767;
      3'b010:
	  x__h27589 =
	      IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d776;
      3'b011:
	  x__h27589 = CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q45;
      3'd4:
	  x__h27589 =
	      IF_cache_rg_width_code_20_EQ_0b11_29_THEN_cach_ETC___d717;
      default: x__h27589 = cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or cache_rg_st_amo_val)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d636 =
	      { cache_ram_word128_set$DOB[127:8], cache_rg_st_amo_val[7:0] };
      4'h1:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d636 =
	      { cache_ram_word128_set$DOB[127:16],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[7:0] };
      4'h2:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d636 =
	      { cache_ram_word128_set$DOB[127:24],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[15:0] };
      4'h3:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d636 =
	      { cache_ram_word128_set$DOB[127:32],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[23:0] };
      4'h4:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d636 =
	      { cache_ram_word128_set$DOB[127:40],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[31:0] };
      4'h5:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d636 =
	      { cache_ram_word128_set$DOB[127:48],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[39:0] };
      4'h6:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d636 =
	      { cache_ram_word128_set$DOB[127:56],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[47:0] };
      4'h7:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d636 =
	      { cache_ram_word128_set$DOB[127:64],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[55:0] };
      4'h8:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d636 =
	      { cache_ram_word128_set$DOB[127:72],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[63:0] };
      4'h9:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d636 =
	      { cache_ram_word128_set$DOB[127:80],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[71:0] };
      4'hA:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d636 =
	      { cache_ram_word128_set$DOB[127:88],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[79:0] };
      4'hB:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d636 =
	      { cache_ram_word128_set$DOB[127:96],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[87:0] };
      4'hC:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d636 =
	      { cache_ram_word128_set$DOB[127:104],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[95:0] };
      4'hD:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d636 =
	      { cache_ram_word128_set$DOB[127:112],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[103:0] };
      4'hE:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d636 =
	      { cache_ram_word128_set$DOB[127:120],
		cache_rg_st_amo_val[7:0],
		cache_ram_word128_set$DOB[111:0] };
      4'hF:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d636 =
	      { cache_rg_st_amo_val[7:0], cache_ram_word128_set$DOB[119:0] };
    endcase
  end
  always@(cache_rg_addr or cache_ram_word128_set$DOB or cache_rg_st_amo_val)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q46 =
	      { cache_ram_word128_set$DOB[127:64],
		cache_rg_st_amo_val[63:0] };
      4'h8:
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q46 =
	      { cache_rg_st_amo_val[63:0], cache_ram_word128_set$DOB[63:0] };
      default: CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q46 =
		   cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_width_code or
	  cache_ram_word128_set$DOB or
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d636 or
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d653 or
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d662 or
	  CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q46 or
	  cache_rg_st_amo_val)
  begin
    case (cache_rg_width_code)
      3'd0:
	  x__h23562 =
	      IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d636;
      3'd1:
	  x__h23562 =
	      IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d653;
      3'b010:
	  x__h23562 =
	      IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d662;
      3'b011:
	  x__h23562 = CASE_cache_rg_addr_BITS_3_TO_0_0x0_cache_ram_w_ETC__q46;
      3'd4: x__h23562 = cache_rg_st_amo_val[127:0];
      default: x__h23562 = cache_ram_word128_set$DOB[127:0];
    endcase
  end
  always@(cache_rg_addr or
	  result_lo__h36422 or
	  result_lo__h36455 or result_lo__h36488 or result_lo__h36521)
  begin
    case (cache_rg_addr[2:0])
      3'd0:
	  IF_cache_rg_addr_32_BITS_2_TO_0_76_EQ_0_77_THE_ETC___d1044 =
	      result_lo__h36422;
      3'd2:
	  IF_cache_rg_addr_32_BITS_2_TO_0_76_EQ_0_77_THE_ETC___d1044 =
	      result_lo__h36455;
      3'd4:
	  IF_cache_rg_addr_32_BITS_2_TO_0_76_EQ_0_77_THE_ETC___d1044 =
	      result_lo__h36488;
      3'd6:
	  IF_cache_rg_addr_32_BITS_2_TO_0_76_EQ_0_77_THE_ETC___d1044 =
	      result_lo__h36521;
      default: IF_cache_rg_addr_32_BITS_2_TO_0_76_EQ_0_77_THE_ETC___d1044 =
		   64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result_lo__h36128 or
	  result_lo__h36161 or
	  result_lo__h36194 or
	  result_lo__h36227 or
	  result_lo__h36260 or
	  result_lo__h36293 or result_lo__h36326 or result_lo__h36359)
  begin
    case (cache_rg_addr[2:0])
      3'd0:
	  IF_cache_rg_addr_32_BITS_2_TO_0_76_EQ_0_77_THE_ETC___d1024 =
	      result_lo__h36128;
      3'd1:
	  IF_cache_rg_addr_32_BITS_2_TO_0_76_EQ_0_77_THE_ETC___d1024 =
	      result_lo__h36161;
      3'd2:
	  IF_cache_rg_addr_32_BITS_2_TO_0_76_EQ_0_77_THE_ETC___d1024 =
	      result_lo__h36194;
      3'd3:
	  IF_cache_rg_addr_32_BITS_2_TO_0_76_EQ_0_77_THE_ETC___d1024 =
	      result_lo__h36227;
      3'd4:
	  IF_cache_rg_addr_32_BITS_2_TO_0_76_EQ_0_77_THE_ETC___d1024 =
	      result_lo__h36260;
      3'd5:
	  IF_cache_rg_addr_32_BITS_2_TO_0_76_EQ_0_77_THE_ETC___d1024 =
	      result_lo__h36293;
      3'd6:
	  IF_cache_rg_addr_32_BITS_2_TO_0_76_EQ_0_77_THE_ETC___d1024 =
	      result_lo__h36326;
      3'd7:
	  IF_cache_rg_addr_32_BITS_2_TO_0_76_EQ_0_77_THE_ETC___d1024 =
	      result_lo__h36359;
    endcase
  end
  always@(cache_rg_addr or result_lo__h36572 or result_lo__h36605)
  begin
    case (cache_rg_addr[2:0])
      3'd0:
	  CASE_cache_rg_addr_BITS_2_TO_0_0_result_lo6572_ETC__q49 =
	      result_lo__h36572;
      3'd4:
	  CASE_cache_rg_addr_BITS_2_TO_0_0_result_lo6572_ETC__q49 =
	      result_lo__h36605;
      default: CASE_cache_rg_addr_BITS_2_TO_0_0_result_lo6572_ETC__q49 =
		   64'd0;
    endcase
  end
  always@(cache_rg_width_code or
	  IF_cache_rg_addr_32_BITS_2_TO_0_76_EQ_0_77_THE_ETC___d1024 or
	  IF_cache_rg_addr_32_BITS_2_TO_0_76_EQ_0_77_THE_ETC___d1044 or
	  CASE_cache_rg_addr_BITS_2_TO_0_0_result_lo6572_ETC__q49 or
	  _theResult___snd__h36038 or
	  cache_master_xactor_shim_rff_rv$port1__read)
  begin
    case (cache_rg_width_code)
      3'd0:
	  _theResult___snd_fst__h36091 =
	      IF_cache_rg_addr_32_BITS_2_TO_0_76_EQ_0_77_THE_ETC___d1024;
      3'd1:
	  _theResult___snd_fst__h36091 =
	      IF_cache_rg_addr_32_BITS_2_TO_0_76_EQ_0_77_THE_ETC___d1044;
      3'b010:
	  _theResult___snd_fst__h36091 =
	      CASE_cache_rg_addr_BITS_2_TO_0_0_result_lo6572_ETC__q49;
      3'b011: _theResult___snd_fst__h36091 = _theResult___snd__h36038;
      3'd4:
	  _theResult___snd_fst__h36091 =
	      cache_master_xactor_shim_rff_rv$port1__read[67:4];
      default: _theResult___snd_fst__h36091 = 64'd0;
    endcase
  end
  always@(cache_rg_width_code or
	  IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC___d1134)
  begin
    case (cache_rg_width_code)
      3'd0, 3'd1, 3'b010, 3'b011: _theResult___snd_snd__h38923 = 64'd0;
      3'd4:
	  _theResult___snd_snd__h38923 =
	      IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC___d1134[127:64];
      default: _theResult___snd_snd__h38923 = 64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC___d1134)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  _theResult___snd__h40647 =
	      IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC___d1134[63:0];
      4'h8:
	  _theResult___snd__h40647 =
	      IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC___d1134[127:64];
      default: _theResult___snd__h40647 = 64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result_lo__h40498 or
	  result_lo__h40530 or result_lo__h40562 or result_lo__h40594)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d1218 =
	      result_lo__h40498;
      4'h4:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d1218 =
	      result_lo__h40530;
      4'h8:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d1218 =
	      result_lo__h40562;
      4'hC:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d1218 =
	      result_lo__h40594;
      default: IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d1218 =
		   64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result_lo__h40228 or
	  result_lo__h40260 or
	  result_lo__h40292 or
	  result_lo__h40324 or
	  result_lo__h40356 or
	  result_lo__h40388 or result_lo__h40420 or result_lo__h40452)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d1206 =
	      result_lo__h40228;
      4'h2:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d1206 =
	      result_lo__h40260;
      4'h4:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d1206 =
	      result_lo__h40292;
      4'h6:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d1206 =
	      result_lo__h40324;
      4'h8:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d1206 =
	      result_lo__h40356;
      4'hA:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d1206 =
	      result_lo__h40388;
      4'hC:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d1206 =
	      result_lo__h40420;
      4'hE:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d1206 =
	      result_lo__h40452;
      default: IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d1206 =
		   64'd0;
    endcase
  end
  always@(cache_rg_addr or
	  result_lo__h39694 or
	  result_lo__h39726 or
	  result_lo__h39758 or
	  result_lo__h39790 or
	  result_lo__h39822 or
	  result_lo__h39854 or
	  result_lo__h39886 or
	  result_lo__h39918 or
	  result_lo__h39950 or
	  result_lo__h39982 or
	  result_lo__h40014 or
	  result_lo__h40046 or
	  result_lo__h40078 or
	  result_lo__h40110 or result_lo__h40142 or result_lo__h40174)
  begin
    case (cache_rg_addr[3:0])
      4'h0:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d1182 =
	      result_lo__h39694;
      4'h1:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d1182 =
	      result_lo__h39726;
      4'h2:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d1182 =
	      result_lo__h39758;
      4'h3:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d1182 =
	      result_lo__h39790;
      4'h4:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d1182 =
	      result_lo__h39822;
      4'h5:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d1182 =
	      result_lo__h39854;
      4'h6:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d1182 =
	      result_lo__h39886;
      4'h7:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d1182 =
	      result_lo__h39918;
      4'h8:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d1182 =
	      result_lo__h39950;
      4'h9:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d1182 =
	      result_lo__h39982;
      4'hA:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d1182 =
	      result_lo__h40014;
      4'hB:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d1182 =
	      result_lo__h40046;
      4'hC:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d1182 =
	      result_lo__h40078;
      4'hD:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d1182 =
	      result_lo__h40110;
      4'hE:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d1182 =
	      result_lo__h40142;
      4'hF:
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d1182 =
	      result_lo__h40174;
    endcase
  end
  always@(cache_rg_width_code or
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d1182 or
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d1206 or
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d1218 or
	  _theResult___snd__h40647 or
	  IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC___d1134)
  begin
    case (cache_rg_width_code)
      3'd0:
	  w1__h38702 =
	      IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d1182;
      3'd1:
	  w1__h38702 =
	      IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d1206;
      3'b010:
	  w1__h38702 =
	      IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d1218;
      3'b011: w1__h38702 = _theResult___snd__h40647;
      3'd4:
	  w1__h38702 =
	      IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC___d1134[63:0];
      default: w1__h38702 = 64'd0;
    endcase
  end
  always@(cache_rg_width_code or
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d1182 or
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d1206 or
	  w1___1__h38785 or
	  _theResult___snd__h40647 or
	  IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC___d1134)
  begin
    case (cache_rg_width_code)
      3'd0:
	  w1__h38707 =
	      IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d1182;
      3'd1:
	  w1__h38707 =
	      IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d1206;
      3'b010: w1__h38707 = w1___1__h38785;
      3'b011: w1__h38707 = _theResult___snd__h40647;
      3'd4:
	  w1__h38707 =
	      IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC___d1134[63:0];
      default: w1__h38707 = 64'd0;
    endcase
  end
  always@(cache_rg_width_code or
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d1182 or
	  IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d1206 or
	  w18702_BITS_31_TO_0__q78 or
	  _theResult___snd__h40647 or
	  IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC___d1134)
  begin
    case (cache_rg_width_code)
      3'd0:
	  IF_cache_rg_width_code_20_EQ_0b10_25_THEN_SEXT_ETC___d1230 =
	      IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d1182;
      3'd1:
	  IF_cache_rg_width_code_20_EQ_0b10_25_THEN_SEXT_ETC___d1230 =
	      IF_cache_rg_addr_32_BITS_3_TO_0_84_EQ_0x0_30_T_ETC___d1206;
      3'b010:
	  IF_cache_rg_width_code_20_EQ_0b10_25_THEN_SEXT_ETC___d1230 =
	      { {32{w18702_BITS_31_TO_0__q78[31]}},
		w18702_BITS_31_TO_0__q78 };
      3'b011:
	  IF_cache_rg_width_code_20_EQ_0b10_25_THEN_SEXT_ETC___d1230 =
	      _theResult___snd__h40647;
      3'd4:
	  IF_cache_rg_width_code_20_EQ_0b10_25_THEN_SEXT_ETC___d1230 =
	      IF_cache_rg_lower_word64_full_09_THEN_cache_ma_ETC___d1134[63:0];
      default: IF_cache_rg_width_code_20_EQ_0b10_25_THEN_SEXT_ETC___d1230 =
		   64'd0;
    endcase
  end
  always@(cache_rg_amo_funct5 or
	  new_st_val_64__h40787 or
	  new_st_val_64__h38818 or
	  w2__h27511 or
	  new_st_val_64__h40759 or
	  new_st_val_64__h40767 or
	  new_st_val_64__h40763 or
	  new_st_val_64__h40782 or
	  new_st_val_64__h40771 or new_st_val_64__h40776)
  begin
    case (cache_rg_amo_funct5)
      5'b0: _theResult_____2__h38740 = new_st_val_64__h38818;
      5'b00001: _theResult_____2__h38740 = w2__h27511;
      5'b00100: _theResult_____2__h38740 = new_st_val_64__h40759;
      5'b01000: _theResult_____2__h38740 = new_st_val_64__h40767;
      5'b01100: _theResult_____2__h38740 = new_st_val_64__h40763;
      5'b10000: _theResult_____2__h38740 = new_st_val_64__h40782;
      5'b11000: _theResult_____2__h38740 = new_st_val_64__h40771;
      5'b11100: _theResult_____2__h38740 = new_st_val_64__h40776;
      default: _theResult_____2__h38740 = new_st_val_64__h40787;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cache_cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	cache_ctr_wr_rsps_pending_inrg <= `BSV_ASSIGNMENT_DELAY 4'd0;
	cache_ctr_wr_rsps_pending_outrg <= `BSV_ASSIGNMENT_DELAY 4'd0;
	cache_master_xactor_clearing <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_master_xactor_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      97'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	cache_master_xactor_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      97'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	cache_master_xactor_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0, 6'bxxxxxx /* unspecified value */  };
	cache_master_xactor_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      72'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	cache_master_xactor_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      74'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	cache_rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY 7'd0;
	cache_rg_lower_word64_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cache_rg_state <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (cache_cfg_verbosity$EN)
	  cache_cfg_verbosity <= `BSV_ASSIGNMENT_DELAY
	      cache_cfg_verbosity$D_IN;
	if (cache_ctr_wr_rsps_pending_inrg$EN)
	  cache_ctr_wr_rsps_pending_inrg <= `BSV_ASSIGNMENT_DELAY
	      cache_ctr_wr_rsps_pending_inrg$D_IN;
	if (cache_ctr_wr_rsps_pending_outrg$EN)
	  cache_ctr_wr_rsps_pending_outrg <= `BSV_ASSIGNMENT_DELAY
	      cache_ctr_wr_rsps_pending_outrg$D_IN;
	if (cache_master_xactor_clearing$EN)
	  cache_master_xactor_clearing <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_clearing$D_IN;
	if (cache_master_xactor_shim_arff_rv$EN)
	  cache_master_xactor_shim_arff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_arff_rv$D_IN;
	if (cache_master_xactor_shim_awff_rv$EN)
	  cache_master_xactor_shim_awff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_awff_rv$D_IN;
	if (cache_master_xactor_shim_bff_rv$EN)
	  cache_master_xactor_shim_bff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_bff_rv$D_IN;
	if (cache_master_xactor_shim_rff_rv$EN)
	  cache_master_xactor_shim_rff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_rff_rv$D_IN;
	if (cache_master_xactor_shim_wff_rv$EN)
	  cache_master_xactor_shim_wff_rv <= `BSV_ASSIGNMENT_DELAY
	      cache_master_xactor_shim_wff_rv$D_IN;
	if (cache_rg_cset_in_cache$EN)
	  cache_rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_cset_in_cache$D_IN;
	if (cache_rg_lower_word64_full$EN)
	  cache_rg_lower_word64_full <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_lower_word64_full$D_IN;
	if (cache_rg_lrsc_valid$EN)
	  cache_rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY
	      cache_rg_lrsc_valid$D_IN;
	if (cache_rg_state$EN)
	  cache_rg_state <= `BSV_ASSIGNMENT_DELAY cache_rg_state$D_IN;
      end
    if (cache_rg_addr$EN)
      cache_rg_addr <= `BSV_ASSIGNMENT_DELAY cache_rg_addr$D_IN;
    if (cache_rg_amo_funct5$EN)
      cache_rg_amo_funct5 <= `BSV_ASSIGNMENT_DELAY cache_rg_amo_funct5$D_IN;
    if (cache_rg_error_during_refill$EN)
      cache_rg_error_during_refill <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_error_during_refill$D_IN;
    if (cache_rg_exc_code$EN)
      cache_rg_exc_code <= `BSV_ASSIGNMENT_DELAY cache_rg_exc_code$D_IN;
    if (cache_rg_is_unsigned$EN)
      cache_rg_is_unsigned <= `BSV_ASSIGNMENT_DELAY cache_rg_is_unsigned$D_IN;
    if (cache_rg_ld_val$EN)
      cache_rg_ld_val <= `BSV_ASSIGNMENT_DELAY cache_rg_ld_val$D_IN;
    if (cache_rg_lower_tag$EN)
      cache_rg_lower_tag <= `BSV_ASSIGNMENT_DELAY cache_rg_lower_tag$D_IN;
    if (cache_rg_lower_word64$EN)
      cache_rg_lower_word64 <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_lower_word64$D_IN;
    if (cache_rg_lrsc_pa$EN)
      cache_rg_lrsc_pa <= `BSV_ASSIGNMENT_DELAY cache_rg_lrsc_pa$D_IN;
    if (cache_rg_op$EN) cache_rg_op <= `BSV_ASSIGNMENT_DELAY cache_rg_op$D_IN;
    if (cache_rg_pa$EN) cache_rg_pa <= `BSV_ASSIGNMENT_DELAY cache_rg_pa$D_IN;
    if (cache_rg_pte_pa$EN)
      cache_rg_pte_pa <= `BSV_ASSIGNMENT_DELAY cache_rg_pte_pa$D_IN;
    if (cache_rg_st_amo_val$EN)
      cache_rg_st_amo_val <= `BSV_ASSIGNMENT_DELAY cache_rg_st_amo_val$D_IN;
    if (cache_rg_width_code$EN)
      cache_rg_width_code <= `BSV_ASSIGNMENT_DELAY cache_rg_width_code$D_IN;
    if (cache_rg_word128_set_in_cache$EN)
      cache_rg_word128_set_in_cache <= `BSV_ASSIGNMENT_DELAY
	  cache_rg_word128_set_in_cache$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cache_cfg_verbosity = 4'hA;
    cache_ctr_wr_rsps_pending_inrg = 4'hA;
    cache_ctr_wr_rsps_pending_outrg = 4'hA;
    cache_master_xactor_clearing = 1'h0;
    cache_master_xactor_shim_arff_rv = 98'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    cache_master_xactor_shim_awff_rv = 98'h2AAAAAAAAAAAAAAAAAAAAAAAA;
    cache_master_xactor_shim_bff_rv = 7'h2A;
    cache_master_xactor_shim_rff_rv = 73'h0AAAAAAAAAAAAAAAAAA;
    cache_master_xactor_shim_wff_rv = 75'h2AAAAAAAAAAAAAAAAAA;
    cache_rg_addr = 32'hAAAAAAAA;
    cache_rg_amo_funct5 = 5'h0A;
    cache_rg_cset_in_cache = 7'h2A;
    cache_rg_error_during_refill = 1'h0;
    cache_rg_exc_code = 6'h2A;
    cache_rg_is_unsigned = 1'h0;
    cache_rg_ld_val = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    cache_rg_lower_tag = 1'h0;
    cache_rg_lower_word64 = 64'hAAAAAAAAAAAAAAAA;
    cache_rg_lower_word64_full = 1'h0;
    cache_rg_lrsc_pa = 32'hAAAAAAAA;
    cache_rg_lrsc_valid = 1'h0;
    cache_rg_op = 2'h2;
    cache_rg_pa = 32'hAAAAAAAA;
    cache_rg_pte_pa = 32'hAAAAAAAA;
    cache_rg_st_amo_val = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    cache_rg_state = 4'hA;
    cache_rg_width_code = 3'h2;
    cache_rg_word128_set_in_cache = 8'hAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("AXI4_AWFlit { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", mem_req_wr_addr_awaddr__h5267);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", _theResult___snd_fst_val__h5373, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("AXI4_WFlit { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", mem_req_wr_data_wdata__h5484);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", mem_req_wr_data_wstrb__h5485);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", mem_req_wr_data_wuser__h5487, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_fabric_send_write_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 7'd127 &&
	  cache_cfg_verbosity != 4'd0 &&
	  !cache_f_reset_reqs$D_OUT)
	begin
	  v__h6501 = $stime;
	  #0;
	end
    v__h6495 = v__h6501 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 7'd127 &&
	  cache_cfg_verbosity != 4'd0 &&
	  !cache_f_reset_reqs$D_OUT)
	$display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		 v__h6495,
		 "D_MMU_Cache",
		 $signed(32'd128),
		 $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 7'd127 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93 &&
	  cache_f_reset_reqs$D_OUT)
	begin
	  v__h6600 = $stime;
	  #0;
	end
    v__h6594 = v__h6600 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_reset && cache_rg_cset_in_cache == 7'd127 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93 &&
	  cache_f_reset_reqs$D_OUT)
	$display("%0d: %s.rl_reset: Flushed", v__h6594, "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	begin
	  v__h6753 = $stime;
	  #0;
	end
    v__h6747 = v__h6753 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h",
		 v__h6747,
		 "D_MMU_Cache",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$display("        eaddr = {CTag 0x%0h  CSet 0x%0h  Word128 0x%0h  Byte 0x%0h}",
		 pa_ctag__h7725,
		 cache_rg_addr[11:5],
		 cache_rg_addr[4],
		 cache_rg_addr[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("        CSet 0x%0x: (state, tag):", cache_rg_addr[11:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(" (");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93 &&
	  cache_ram_state_and_ctag_cset$DOB[22])
	$write("CTAG_CLEAN");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93 &&
	  !cache_ram_state_and_ctag_cset$DOB[22])
	$write("CTAG_EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93 &&
	  cache_ram_state_and_ctag_cset$DOB[22])
	$write(", 0x%0x", cache_ram_state_and_ctag_cset$DOB[21:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93 &&
	  !cache_ram_state_and_ctag_cset$DOB[22])
	$write(", --");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(")");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("        CSet 0x%0x, Word128 0x%0x: ",
	       cache_rg_addr[11:5],
	       cache_rg_addr[4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(" 0x%0x", cache_ram_word128_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("    TLB result: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("VM_Xlate_Result { ", "outcome: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("VM_XLATE_OK");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "pa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", 6'bxxxxxx /* unspecified value */ , " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_36_EQ_0_37_OR_cache_rg_op_36_EQ_2__ETC___d492)
	begin
	  v__h22213 = $stime;
	  #0;
	end
    v__h22207 = v__h22213 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_36_EQ_0_37_OR_cache_rg_op_36_EQ_2__ETC___d492)
	$display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		 v__h22207,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296,
		 130'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct5 == 5'b00010 &&
	  cache_ram_state_and_ctag_cset$DOB[22] &&
	  cache_ram_state_and_ctag_cset_b_read__62_BITS__ETC___d168 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$display("        AMO LR: reserving PA 0x%0h", cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_36_EQ_0_37_OR_cache_rg_op_36_EQ_2__ETC___d492)
	$display("        Read-hit: addr 0x%0h word128 0x%0h",
		 cache_rg_addr,
		 cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_36_EQ_0_37_OR_cache_rg_op_36_EQ_2__ETC___d505)
	$display("        Read Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct5_39_EQ_0b10_40_AND_NOT_cach_ETC___d509)
	$display("        AMO LR: cache refill: cancelling LR/SC reservation for PA 0x%0h",
		 cache_rg_lrsc_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op == 2'd1 &&
	  cache_rg_addr_32_EQ_cache_rg_lrsc_pa_49___d190 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$display("        ST: cancelling LR/SC reservation for PA",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct5 == 5'b00011 &&
	  cache_rg_lrsc_valid &&
	  !cache_rg_lrsc_pa_49_EQ_cache_rg_addr_32___d150 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$display("        AMO SC: fail: reserved addr 0x%0h, this address 0x%0h",
		 cache_rg_lrsc_pa,
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct5 == 5'b00011 &&
	  !cache_rg_lrsc_valid &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$display("        AMO SC: fail due to invalid LR/SC reservation");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op == 2'd2 &&
	  cache_rg_amo_funct5 == 5'b00011 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$display("        AMO SC result = %0d", lrsc_result__h23100);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_36_EQ_0_37_95_AND_NOT_cache_rg_ETC___d814)
	$display("        Write-Cache-Hit: pa 0x%0h word128 0x%0h",
		 cache_rg_addr,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_36_EQ_0_37_95_AND_NOT_cache_rg_ETC___d814)
	$write("        New Word128_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_36_EQ_0_37_95_AND_NOT_cache_rg_ETC___d814)
	$write("        CSet 0x%0x, Word128 0x%0x: ",
	       cache_rg_addr[11:5],
	       cache_rg_addr[4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_36_EQ_0_37_95_AND_NOT_cache_rg_ETC___d814)
	$write(" 0x%0x", { x__h27422, x__h23562 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_36_EQ_0_37_95_AND_NOT_cache_rg_ETC___d814)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00010) &&
	  (cache_rg_op == 2'd1 ||
	   cache_rg_op == 2'd2 && cache_rg_amo_funct5 == 5'b00011) &&
	  NOT_cache_rg_op_36_EQ_2_38_96_OR_NOT_cache_rg__ETC___d818)
	$display("        Write-Cache-Miss: pa 0x%0h word128 0x%0h",
		 cache_rg_addr,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_36_EQ_0_37_95_AND_NOT_cache_rg_ETC___d825)
	$display("        Write-Cache-Hit/Miss: eaddr 0x%0h word128 0x%0h",
		 cache_rg_addr,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_36_EQ_0_37_95_AND_NOT_cache_rg_ETC___d825)
	$display("        => rl_write_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_36_EQ_2_38_AND_cache_rg_amo_funct5_ETC___d829)
	begin
	  v__h26959 = $stime;
	  #0;
	end
    v__h26953 = v__h26959 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_36_EQ_2_38_AND_cache_rg_amo_funct5_ETC___d829)
	$display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		 v__h26953,
		 "D_MMU_Cache",
		 32'd0,
		 130'd1,
		 130'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op_36_EQ_2_38_AND_cache_rg_amo_funct5_ETC___d829)
	$display("        AMO SC: Fail response for addr 0x%0h",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_36_EQ_0_37_95_AND_NOT_cache_rg_ETC___d835)
	$display("        AMO Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_36_EQ_0_37_95_AND_NOT_cache_rg_ETC___d839)
	$display("        AMO: addr 0x%0h amo_f5 0x%0h width_code %0d is_unsigned %0d rs2_val 0x%0h",
		 cache_rg_addr,
		 cache_rg_amo_funct5,
		 cache_rg_width_code,
		 cache_rg_is_unsigned,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_36_EQ_0_37_95_AND_NOT_cache_rg_ETC___d839)
	$display("          PA 0x%0h ", cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_36_EQ_0_37_95_AND_NOT_cache_rg_ETC___d839)
	$display("          Cache word128 0x%0h, load-result 0x%0h",
		 cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296,
		 cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_36_EQ_0_37_95_AND_NOT_cache_rg_ETC___d839)
	$display("          0x%0h  op  0x%0h -> 0x%0h",
		 cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296,
		 cache_ram_word128_set_b_read__87_AND_cache_ram_ETC___d296,
		 { cache_rg_width_code == 3'b011 && cache_rg_st_amo_val[128],
		   IF_cache_rg_width_code_20_EQ_0b11_29_THEN_cach_ETC___d717 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_36_EQ_0_37_95_AND_NOT_cache_rg_ETC___d839)
	$write("          New Word128_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_36_EQ_0_37_95_AND_NOT_cache_rg_ETC___d839)
	$write("        CSet 0x%0x, Word128 0x%0x: ",
	       cache_rg_addr[11:5],
	       cache_rg_addr[4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_36_EQ_0_37_95_AND_NOT_cache_rg_ETC___d839)
	$write(" 0x%0x", { x__h27422, x__h27589 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  NOT_cache_rg_op_36_EQ_0_37_95_AND_NOT_cache_rg_ETC___d839)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  cache_soc_map$m_is_mem_addr &&
	  cache_rg_op != 2'd0 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00010) &&
	  cache_rg_op != 2'd1 &&
	  (cache_rg_op != 2'd2 || cache_rg_amo_funct5 != 5'b00011) &&
	  cache_ram_state_and_ctag_cset_b_read__62_BIT_2_ETC___d842)
	$display("        AMO_op: cancelling LR/SC reservation for PA",
		 cache_rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_probe_and_immed_rsp &&
	  !cache_soc_map$m_is_mem_addr &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$display("    => IO_REQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	begin
	  v__h32058 = $stime;
	  #0;
	end
    v__h32052 = v__h32058 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$display("%0d: %s.rl_start_cache_refill: ", v__h32052, "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", cline_fabric_addr__h32111);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", 8'd3);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", 3'b011, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_cache_refill &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$display("    Victim way %0d; => CACHE_REFILL", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_rereq &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$display("    fa_req_ram_B tagCSet [0x%0x] word128_set [0x%0d]",
		 cache_rg_addr[11:5],
		 cache_rg_addr[11:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_reset)
	begin
	  v__h6068 = $stime;
	  #0;
	end
    v__h6062 = v__h6068 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_start_reset)
	$display("%0d: %s: cache size %0d KB, associativity %0d, line size %0d bytes (= %0d XLEN words)",
		 v__h6062,
		 "D_MMU_Cache",
		 $signed(32'd4),
		 $signed(32'd1),
		 $signed(32'd32),
		 $signed(32'd8));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	begin
	  v__h35172 = $stime;
	  #0;
	end
    v__h35166 = v__h35172 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$display("%0d: %s.rl_io_read_req; width_code 0x%0h vaddr %0h  paddr %0h",
		 v__h35166,
		 "D_MMU_Cache",
		 cache_rg_width_code,
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", fabric_addr__h37776);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", size_val__h38050, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", fabric_addr__h37776);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", 8'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", 3'b011, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_req &&
	  !_1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_maintain_io_read_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	begin
	  v__h37290 = $stime;
	  #0;
	end
    v__h37284 = v__h37290 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_maintain_io_read_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		 v__h37284,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 cache_rg_ld_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	begin
	  v__h37379 = $stime;
	  #0;
	end
    v__h37373 = v__h37379 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$display("%0d: %s: rl_io_write_req; width_code 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		 v__h37373,
		 "D_MMU_Cache",
		 cache_rg_width_code,
		 cache_rg_addr,
		 cache_rg_pa,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_write_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_SC_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	begin
	  v__h37598 = $stime;
	  #0;
	end
    v__h37592 = v__h37598 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_SC_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$display("%0d: %s: rl_io_AMO_SC_req; width_code 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		 v__h37592,
		 "D_MMU_Cache",
		 cache_rg_width_code,
		 cache_rg_addr,
		 cache_rg_pa,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_SC_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$display("    FAIL due to I/O address.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_SC_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	begin
	  v__h37724 = $stime;
	  #0;
	end
    v__h37718 = v__h37724 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$display("%0d: %s.rl_io_AMO_op_req; width_code 0x%0h vaddr %0h  paddr %0h",
		 v__h37718,
		 "D_MMU_Cache",
		 cache_rg_width_code,
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", fabric_addr__h37776);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", size_val__h38050, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  _1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("AXI4_ARFlit { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", fabric_addr__h37776);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", 8'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("AXI4_Size { ", "val: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", size_val__h38050, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("INCR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("NORMAL");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_op_req &&
	  !_1_SL_IF_cache_rg_width_code_20_EQ_0_21_OR_cach_ETC___d954 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_aw_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_w_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_b_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__4_MINUS_c_ETC___d46 == 4'd0)
	begin
	  v__h41269 = $stime;
	  #0;
	end
    v__h41263 = v__h41269 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__4_MINUS_c_ETC___d46 == 4'd0)
	$display("%0d: ERROR: %s.rl_discard_write_rsp: unexpected W response (ctr_wr_rsps_pending.value == 0)",
		 v__h41263,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__4_MINUS_c_ETC___d46 == 4'd0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__4_MINUS_c_ETC___d46 == 4'd0)
	$write("AXI4_BFlit { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__4_MINUS_c_ETC___d46 == 4'd0)
	$write("'h%h", cache_master_xactor_shim_bff_rv$port1__read[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__4_MINUS_c_ETC___d46 == 4'd0)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__4_MINUS_c_ETC___d46 == 4'd0 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__4_MINUS_c_ETC___d46 == 4'd0 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__4_MINUS_c_ETC___d46 == 4'd0 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__4_MINUS_c_ETC___d46 == 4'd0 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd1 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__4_MINUS_c_ETC___d46 == 4'd0)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__4_MINUS_c_ETC___d46 == 4'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__4_MINUS_c_ETC___d46 == 4'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_ctr_wr_rsps_pending_inrg_read__4_MINUS_c_ETC___d46 == 4'd0)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	begin
	  v__h41516 = $stime;
	  #0;
	end
    v__h41510 = v__h41516 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("%0d: %s.rl_discard_write_rsp: pending %0d ",
	       v__h41510,
	       "D_MMU_Cache",
	       $unsigned(cache_ctr_wr_rsps_pending_inrg_read__4_MINUS_c_ETC___d46));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("AXI4_BFlit { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", cache_master_xactor_shim_bff_rv$port1__read[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd0 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	begin
	  v__h41477 = $stime;
	  #0;
	end
    v__h41471 = v__h41477 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$display("%0d: %s.rl_discard_write_rsp: fabric response error: exit",
		 v__h41471,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("AXI4_BFlit { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("'h%h", cache_master_xactor_shim_bff_rv$port1__read[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd1 &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_discard_write_rsp &&
	  cache_master_xactor_shim_bff_rv$port1__read[1:0] != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_ar_warnDoDrop)
	$display("WARNING: dropping from Source that can't be dropped from");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_master_xactor_ug_master_u_r_warnDoPut)
	$display("WARNING: putting into a Sink that can't be put into");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_81___d882)
	begin
	  v__h32847 = $stime;
	  #0;
	end
    v__h32841 = v__h32847 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_81___d882)
	$display("%0d: %s.rl_cache_refill_rsps_loop:",
		 v__h32841,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_81___d882)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_81___d882)
	$write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_81___d882)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[71:68]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_81___d882)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_81___d882)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[67:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_81___d882)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_81___d882 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_81___d882 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_81___d882 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_81___d882 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd1 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_81___d882)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_81___d882 &&
	  cache_master_xactor_shim_rff_rv$port1__read[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_81___d882 &&
	  !cache_master_xactor_shim_rff_rv$port1__read[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_81___d882)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_81___d882)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_81___d882)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	begin
	  v__h33109 = $stime;
	  #0;
	end
    v__h33103 = v__h33109 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d",
		 v__h33103,
		 "D_MMU_Cache",
		 access_exc_code__h4992);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_81___d882)
	$display("        64b fabric: concat with rg_lower_word64: new_word128 0x%0x",
		 { x__h33351, x__h33356 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  cache_rg_word128_set_in_cache[0] &&
	  (cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 ||
	   cache_rg_error_during_refill) &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$display("    => MODULE_EXCEPTION_RSP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  cache_rg_word128_set_in_cache[0] &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  !cache_rg_error_during_refill &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$display("    => CACHE_REREQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_81___d882)
	$display("        Updating Cache word128_set 0x%0h, word128_in_cline %0d) old => new",
		 cache_rg_word128_set_in_cache,
		 cache_rg_word128_set_in_cache[0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_81___d882)
	$write("        CSet 0x%0x, Word128 0x%0x: ",
	       cache_rg_addr[11:5],
	       cache_rg_word128_set_in_cache[0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_81___d882)
	$write(" 0x%0x", cache_ram_word128_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_81___d882)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_81___d882)
	$write("        CSet 0x%0x, Word128 0x%0x: ",
	       cache_rg_addr[11:5],
	       cache_rg_word128_set_in_cache[0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_81___d882)
	$write(" 0x%0x", { x__h33351, x__h33356 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_81___d882)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop &&
	  !cache_rg_lower_word64_full &&
	  NOT_cache_cfg_verbosity_read__2_ULE_2_81___d882)
	$display("        Recording rdata in rg_lower_word64");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	begin
	  v__h35744 = $stime;
	  #0;
	end
    v__h35738 = v__h35744 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$display("%0d: %s.rl_io_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		 v__h35738,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[71:68]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[67:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd1 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93 &&
	  cache_master_xactor_shim_rff_rv$port1__read[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93 &&
	  !cache_master_xactor_shim_rff_rv$port1__read[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp && !cache_rg_lower_word64_full &&
	  cache_master_xactor_shim_rff_rv$port1__read[1] &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	begin
	  v__h36951 = $stime;
	  #0;
	end
    v__h36945 = v__h36951 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp && !cache_rg_lower_word64_full &&
	  cache_master_xactor_shim_rff_rv$port1__read[1] &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		 v__h36945,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 { 65'd0, _theResult___snd_fst__h36091 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp && !cache_rg_lower_word64_full &&
	  cache_master_xactor_shim_rff_rv$port1__read[1] &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	begin
	  v__h37065 = $stime;
	  #0;
	end
    v__h37059 = v__h37065 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp && !cache_rg_lower_word64_full &&
	  cache_master_xactor_shim_rff_rv$port1__read[1] &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		 v__h37059,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp && cache_rg_lower_word64_full &&
	  cache_master_xactor_shim_rff_rv$port1__read[1] &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	begin
	  v__h36789 = $stime;
	  #0;
	end
    v__h36783 = v__h36789 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp && cache_rg_lower_word64_full &&
	  cache_master_xactor_shim_rff_rv$port1__read[1] &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		 v__h36783,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 { 1'd0, x__h33356 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp && cache_rg_lower_word64_full &&
	  cache_master_xactor_shim_rff_rv$port1__read[1] &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	begin
	  v__h37176 = $stime;
	  #0;
	end
    v__h37170 = v__h37176 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_read_rsp && cache_rg_lower_word64_full &&
	  cache_master_xactor_shim_rff_rv$port1__read[1] &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		 v__h37170,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	begin
	  v__h38237 = $stime;
	  #0;
	end
    v__h38231 = v__h38237 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$display("%0d: %s.rl_io_AMO_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		 v__h38231,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 cache_rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("AXI4_RFlit { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[71:68]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[67:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0)
	$write("OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd1)
	$write("EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd2)
	$write("SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd1 &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd2)
	$write("DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93 &&
	  cache_master_xactor_shim_rff_rv$port1__read[1])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93 &&
	  !cache_master_xactor_shim_rff_rv$port1__read[1])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("'h%h", cache_master_xactor_shim_rff_rv$port1__read[0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  (cache_rg_lower_word64_full ||
	   cache_master_xactor_shim_rff_rv$port1__read[1]) &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	begin
	  v__h38607 = $stime;
	  #0;
	end
    v__h38601 = v__h38607 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  (cache_rg_lower_word64_full ||
	   cache_master_xactor_shim_rff_rv$port1__read[1]) &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$display("%0d: %s: rl_io_AMO_read_rsp; f3 0x%0h  vaddr %0h  paddr %0h  word128 0x%0h",
		 v__h38601,
		 "D_MMU_Cache",
		 cache_rg_width_code,
		 cache_rg_addr,
		 cache_rg_pa,
		 cache_rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  (cache_rg_lower_word64_full ||
	   cache_master_xactor_shim_rff_rv$port1__read[1]) &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	begin
	  v__h40960 = $stime;
	  #0;
	end
    v__h40954 = v__h40960 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  (cache_rg_lower_word64_full ||
	   cache_master_xactor_shim_rff_rv$port1__read[1]) &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		 v__h40954,
		 "D_MMU_Cache",
		 cache_rg_addr,
		 { 1'd0, x__h40938 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] == 2'd0 &&
	  (cache_rg_lower_word64_full ||
	   cache_master_xactor_shim_rff_rv$port1__read[1]) &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	begin
	  v__h38535 = $stime;
	  #0;
	end
    v__h38529 = v__h38535 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_rl_io_AMO_read_rsp &&
	  cache_master_xactor_shim_rff_rv$port1__read[3:2] != 2'd0 &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$display("%0d: %s.rl_io_AMO_read_rsp: FABRIC_RSP_ERR: raising trap STORE_AMO_ACCESS_FAULT",
		 v__h38529,
		 "D_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	begin
	  v__h42446 = $stime;
	  #0;
	end
    v__h42440 = v__h42446 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("%0d: %m.req: op:", v__h42440);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93 &&
	  req_op == 2'd0)
	$write("CACHE_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93 &&
	  req_op == 2'd1)
	$write("CACHE_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93 &&
	  req_op != 2'd0 &&
	  req_op != 2'd1)
	$write("CACHE_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(" f3:%0d addr:0x%0h st_value:0x%0h",
	       req_width_code,
	       req_addr,
	       req_st_value,
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write("    priv:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93 &&
	  req_priv == 2'b0)
	$write("U");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93 &&
	  req_priv == 2'b01)
	$write("S");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93 &&
	  req_priv == 2'b11)
	$write("M");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93 &&
	  req_priv != 2'b0 &&
	  req_priv != 2'b01 &&
	  req_priv != 2'b11)
	$write("RESERVED");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$write(" sstatus_SUM:%0d mstatus_MXR:%0d satp:0x%0h",
	       req_sstatus_SUM,
	       req_mstatus_MXR,
	       req_satp,
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  !cache_cfg_verbosity_read__2_ULE_1___d93)
	$display("    amo_funct5 = 0x%0h", req_amo_funct5);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  cache_w_req_width_code_wget__329_EQ_0b0_350_OR_ETC___d1391)
	$display("    fa_req_ram_B tagCSet [0x%0x] word128_set [0x%0d]",
		 req_addr[11:5],
		 req_addr[11:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req && WILL_FIRE_RL_cache_do_reset_req)
	$display("Error: \"../src_Core/Near_Mem_VM/MMU_Cache.bsv\", line 1904, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cache_do_req] and\n  [RL_cache_do_reset_req] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  WILL_FIRE_RL_cache_rl_start_cache_refill)
	$display("Error: \"../src_Core/Near_Mem_VM/MMU_Cache.bsv\", line 1903, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cache_do_req] and\n  [RL_cache_rl_start_cache_refill] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req && WILL_FIRE_RL_cache_rl_rereq)
	$display("Error: \"../src_Core/Near_Mem_VM/MMU_Cache.bsv\", line 1902, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cache_do_req] and\n  [RL_cache_rl_rereq] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cache_do_req &&
	  WILL_FIRE_RL_cache_rl_cache_refill_rsps_loop)
	$display("Error: \"../src_Core/Near_Mem_VM/MMU_Cache.bsv\", line 1901, column 29: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cache_do_req] and\n  [RL_cache_rl_cache_refill_rsps_loop] ) fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkMMU_DCache

