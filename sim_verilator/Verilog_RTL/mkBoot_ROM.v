//
// Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
//
// On Tue May 29 21:58:32 EDT 2018
//
//
// Ports:
// Name                         I/O  size props
// RDY_set_addr_map               O     1 const
// slave_awready                  O     1 reg
// slave_wready                   O     1 reg
// slave_bvalid                   O     1 reg
// slave_bresp                    O     2 reg
// slave_arready                  O     1 reg
// slave_rvalid                   O     1 reg
// slave_rresp                    O     2 reg
// slave_rdata                    O    64 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_addr_map_addr_base         I    32 reg
// set_addr_map_addr_lim          I    32 reg
// slave_awvalid                  I     1
// slave_awaddr                   I    32 reg
// slave_awprot                   I     3 reg
// slave_wvalid                   I     1
// slave_wdata                    I    64 reg
// slave_wstrb                    I     8 reg
// slave_bready                   I     1
// slave_arvalid                  I     1
// slave_araddr                   I    32 reg
// slave_arprot                   I     3 reg
// slave_rready                   I     1
// EN_set_addr_map                I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkBoot_ROM(CLK,
		  RST_N,

		  set_addr_map_addr_base,
		  set_addr_map_addr_lim,
		  EN_set_addr_map,
		  RDY_set_addr_map,

		  slave_awvalid,
		  slave_awaddr,
		  slave_awprot,

		  slave_awready,

		  slave_wvalid,
		  slave_wdata,
		  slave_wstrb,

		  slave_wready,

		  slave_bvalid,

		  slave_bresp,

		  slave_bready,

		  slave_arvalid,
		  slave_araddr,
		  slave_arprot,

		  slave_arready,

		  slave_rvalid,

		  slave_rresp,

		  slave_rdata,

		  slave_rready);
  input  CLK;
  input  RST_N;

  // action method set_addr_map
  input  [31 : 0] set_addr_map_addr_base;
  input  [31 : 0] set_addr_map_addr_lim;
  input  EN_set_addr_map;
  output RDY_set_addr_map;

  // action method slave_m_awvalid
  input  slave_awvalid;
  input  [31 : 0] slave_awaddr;
  input  [2 : 0] slave_awprot;

  // value method slave_m_awready
  output slave_awready;

  // action method slave_m_wvalid
  input  slave_wvalid;
  input  [63 : 0] slave_wdata;
  input  [7 : 0] slave_wstrb;

  // value method slave_m_wready
  output slave_wready;

  // value method slave_m_bvalid
  output slave_bvalid;

  // value method slave_m_bresp
  output [1 : 0] slave_bresp;

  // value method slave_m_buser

  // action method slave_m_bready
  input  slave_bready;

  // action method slave_m_arvalid
  input  slave_arvalid;
  input  [31 : 0] slave_araddr;
  input  [2 : 0] slave_arprot;

  // value method slave_m_arready
  output slave_arready;

  // value method slave_m_rvalid
  output slave_rvalid;

  // value method slave_m_rresp
  output [1 : 0] slave_rresp;

  // value method slave_m_rdata
  output [63 : 0] slave_rdata;

  // value method slave_m_ruser

  // action method slave_m_rready
  input  slave_rready;

  // signals for module outputs
  wire [63 : 0] slave_rdata;
  wire [1 : 0] slave_bresp, slave_rresp;
  wire RDY_set_addr_map,
       slave_arready,
       slave_awready,
       slave_bvalid,
       slave_rvalid,
       slave_wready;

  // register rg_addr_base
  reg [31 : 0] rg_addr_base;
  wire [31 : 0] rg_addr_base$D_IN;
  wire rg_addr_base$EN;

  // register rg_addr_lim
  reg [31 : 0] rg_addr_lim;
  wire [31 : 0] rg_addr_lim$D_IN;
  wire rg_addr_lim$EN;

  // register rg_module_ready
  reg rg_module_ready;
  wire rg_module_ready$D_IN, rg_module_ready$EN;

  // ports of submodule slave_xactor_f_rd_addr
  wire [34 : 0] slave_xactor_f_rd_addr$D_IN, slave_xactor_f_rd_addr$D_OUT;
  wire slave_xactor_f_rd_addr$CLR,
       slave_xactor_f_rd_addr$DEQ,
       slave_xactor_f_rd_addr$EMPTY_N,
       slave_xactor_f_rd_addr$ENQ,
       slave_xactor_f_rd_addr$FULL_N;

  // ports of submodule slave_xactor_f_rd_data
  wire [65 : 0] slave_xactor_f_rd_data$D_IN, slave_xactor_f_rd_data$D_OUT;
  wire slave_xactor_f_rd_data$CLR,
       slave_xactor_f_rd_data$DEQ,
       slave_xactor_f_rd_data$EMPTY_N,
       slave_xactor_f_rd_data$ENQ,
       slave_xactor_f_rd_data$FULL_N;

  // ports of submodule slave_xactor_f_wr_addr
  wire [34 : 0] slave_xactor_f_wr_addr$D_IN, slave_xactor_f_wr_addr$D_OUT;
  wire slave_xactor_f_wr_addr$CLR,
       slave_xactor_f_wr_addr$DEQ,
       slave_xactor_f_wr_addr$EMPTY_N,
       slave_xactor_f_wr_addr$ENQ,
       slave_xactor_f_wr_addr$FULL_N;

  // ports of submodule slave_xactor_f_wr_data
  wire [71 : 0] slave_xactor_f_wr_data$D_IN;
  wire slave_xactor_f_wr_data$CLR,
       slave_xactor_f_wr_data$DEQ,
       slave_xactor_f_wr_data$EMPTY_N,
       slave_xactor_f_wr_data$ENQ,
       slave_xactor_f_wr_data$FULL_N;

  // ports of submodule slave_xactor_f_wr_resp
  wire [1 : 0] slave_xactor_f_wr_resp$D_IN, slave_xactor_f_wr_resp$D_OUT;
  wire slave_xactor_f_wr_resp$CLR,
       slave_xactor_f_wr_resp$DEQ,
       slave_xactor_f_wr_resp$EMPTY_N,
       slave_xactor_f_wr_resp$ENQ,
       slave_xactor_f_wr_resp$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_process_rd_req,
       CAN_FIRE_RL_rl_process_wr_req,
       CAN_FIRE_set_addr_map,
       CAN_FIRE_slave_m_arvalid,
       CAN_FIRE_slave_m_awvalid,
       CAN_FIRE_slave_m_bready,
       CAN_FIRE_slave_m_rready,
       CAN_FIRE_slave_m_wvalid,
       WILL_FIRE_RL_rl_process_rd_req,
       WILL_FIRE_RL_rl_process_wr_req,
       WILL_FIRE_set_addr_map,
       WILL_FIRE_slave_m_arvalid,
       WILL_FIRE_slave_m_awvalid,
       WILL_FIRE_slave_m_bready,
       WILL_FIRE_slave_m_rready,
       WILL_FIRE_slave_m_wvalid;

  // remaining internal signals
  reg [63 : 0] data64__h926;
  reg [31 : 0] CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1,
	       CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2,
	       v__h778,
	       v__h784,
	       v__h8826,
	       v__h8832,
	       v__h9080,
	       v__h9086,
	       v__h9190,
	       v__h9196;
  wire [31 : 0] byte_addr__h681;
  wire NOT_slave_xactor_f_rd_addr_first_BITS_5_TO_3_E_ETC___d18,
       NOT_slave_xactor_f_wr_addr_first__199_BITS_5_T_ETC___d1209;

  // action method set_addr_map
  assign RDY_set_addr_map = 1'd1 ;
  assign CAN_FIRE_set_addr_map = 1'd1 ;
  assign WILL_FIRE_set_addr_map = EN_set_addr_map ;

  // action method slave_m_awvalid
  assign CAN_FIRE_slave_m_awvalid = 1'd1 ;
  assign WILL_FIRE_slave_m_awvalid = 1'd1 ;

  // value method slave_m_awready
  assign slave_awready = slave_xactor_f_wr_addr$FULL_N ;

  // action method slave_m_wvalid
  assign CAN_FIRE_slave_m_wvalid = 1'd1 ;
  assign WILL_FIRE_slave_m_wvalid = 1'd1 ;

  // value method slave_m_wready
  assign slave_wready = slave_xactor_f_wr_data$FULL_N ;

  // value method slave_m_bvalid
  assign slave_bvalid = slave_xactor_f_wr_resp$EMPTY_N ;

  // value method slave_m_bresp
  assign slave_bresp = slave_xactor_f_wr_resp$D_OUT ;

  // action method slave_m_bready
  assign CAN_FIRE_slave_m_bready = 1'd1 ;
  assign WILL_FIRE_slave_m_bready = 1'd1 ;

  // action method slave_m_arvalid
  assign CAN_FIRE_slave_m_arvalid = 1'd1 ;
  assign WILL_FIRE_slave_m_arvalid = 1'd1 ;

  // value method slave_m_arready
  assign slave_arready = slave_xactor_f_rd_addr$FULL_N ;

  // value method slave_m_rvalid
  assign slave_rvalid = slave_xactor_f_rd_data$EMPTY_N ;

  // value method slave_m_rresp
  assign slave_rresp = slave_xactor_f_rd_data$D_OUT[65:64] ;

  // value method slave_m_rdata
  assign slave_rdata = slave_xactor_f_rd_data$D_OUT[63:0] ;

  // action method slave_m_rready
  assign CAN_FIRE_slave_m_rready = 1'd1 ;
  assign WILL_FIRE_slave_m_rready = 1'd1 ;

  // submodule slave_xactor_f_rd_addr
  FIFO2 #(.width(32'd35), .guarded(32'd1)) slave_xactor_f_rd_addr(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(slave_xactor_f_rd_addr$D_IN),
								  .ENQ(slave_xactor_f_rd_addr$ENQ),
								  .DEQ(slave_xactor_f_rd_addr$DEQ),
								  .CLR(slave_xactor_f_rd_addr$CLR),
								  .D_OUT(slave_xactor_f_rd_addr$D_OUT),
								  .FULL_N(slave_xactor_f_rd_addr$FULL_N),
								  .EMPTY_N(slave_xactor_f_rd_addr$EMPTY_N));

  // submodule slave_xactor_f_rd_data
  FIFO2 #(.width(32'd66), .guarded(32'd1)) slave_xactor_f_rd_data(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(slave_xactor_f_rd_data$D_IN),
								  .ENQ(slave_xactor_f_rd_data$ENQ),
								  .DEQ(slave_xactor_f_rd_data$DEQ),
								  .CLR(slave_xactor_f_rd_data$CLR),
								  .D_OUT(slave_xactor_f_rd_data$D_OUT),
								  .FULL_N(slave_xactor_f_rd_data$FULL_N),
								  .EMPTY_N(slave_xactor_f_rd_data$EMPTY_N));

  // submodule slave_xactor_f_wr_addr
  FIFO2 #(.width(32'd35), .guarded(32'd1)) slave_xactor_f_wr_addr(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(slave_xactor_f_wr_addr$D_IN),
								  .ENQ(slave_xactor_f_wr_addr$ENQ),
								  .DEQ(slave_xactor_f_wr_addr$DEQ),
								  .CLR(slave_xactor_f_wr_addr$CLR),
								  .D_OUT(slave_xactor_f_wr_addr$D_OUT),
								  .FULL_N(slave_xactor_f_wr_addr$FULL_N),
								  .EMPTY_N(slave_xactor_f_wr_addr$EMPTY_N));

  // submodule slave_xactor_f_wr_data
  FIFO2 #(.width(32'd72), .guarded(32'd1)) slave_xactor_f_wr_data(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(slave_xactor_f_wr_data$D_IN),
								  .ENQ(slave_xactor_f_wr_data$ENQ),
								  .DEQ(slave_xactor_f_wr_data$DEQ),
								  .CLR(slave_xactor_f_wr_data$CLR),
								  .D_OUT(),
								  .FULL_N(slave_xactor_f_wr_data$FULL_N),
								  .EMPTY_N(slave_xactor_f_wr_data$EMPTY_N));

  // submodule slave_xactor_f_wr_resp
  FIFO2 #(.width(32'd2), .guarded(32'd1)) slave_xactor_f_wr_resp(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(slave_xactor_f_wr_resp$D_IN),
								 .ENQ(slave_xactor_f_wr_resp$ENQ),
								 .DEQ(slave_xactor_f_wr_resp$DEQ),
								 .CLR(slave_xactor_f_wr_resp$CLR),
								 .D_OUT(slave_xactor_f_wr_resp$D_OUT),
								 .FULL_N(slave_xactor_f_wr_resp$FULL_N),
								 .EMPTY_N(slave_xactor_f_wr_resp$EMPTY_N));

  // rule RL_rl_process_rd_req
  assign CAN_FIRE_RL_rl_process_rd_req =
	     slave_xactor_f_rd_addr$EMPTY_N &&
	     slave_xactor_f_rd_data$FULL_N &&
	     rg_module_ready ;
  assign WILL_FIRE_RL_rl_process_rd_req = CAN_FIRE_RL_rl_process_rd_req ;

  // rule RL_rl_process_wr_req
  assign CAN_FIRE_RL_rl_process_wr_req =
	     slave_xactor_f_wr_addr$EMPTY_N &&
	     slave_xactor_f_wr_data$EMPTY_N &&
	     slave_xactor_f_wr_resp$FULL_N &&
	     rg_module_ready ;
  assign WILL_FIRE_RL_rl_process_wr_req = CAN_FIRE_RL_rl_process_wr_req ;

  // register rg_addr_base
  assign rg_addr_base$D_IN = set_addr_map_addr_base ;
  assign rg_addr_base$EN = EN_set_addr_map ;

  // register rg_addr_lim
  assign rg_addr_lim$D_IN = set_addr_map_addr_lim ;
  assign rg_addr_lim$EN = EN_set_addr_map ;

  // register rg_module_ready
  assign rg_module_ready$D_IN = 1'd1 ;
  assign rg_module_ready$EN = EN_set_addr_map ;

  // submodule slave_xactor_f_rd_addr
  assign slave_xactor_f_rd_addr$D_IN = { slave_araddr, slave_arprot } ;
  assign slave_xactor_f_rd_addr$ENQ =
	     slave_arvalid && slave_xactor_f_rd_addr$FULL_N ;
  assign slave_xactor_f_rd_addr$DEQ = CAN_FIRE_RL_rl_process_rd_req ;
  assign slave_xactor_f_rd_addr$CLR = 1'b0 ;

  // submodule slave_xactor_f_rd_data
  assign slave_xactor_f_rd_data$D_IN =
	     NOT_slave_xactor_f_rd_addr_first_BITS_5_TO_3_E_ETC___d18 ?
	       66'h20000000000000000 :
	       { 2'd0, data64__h926 } ;
  assign slave_xactor_f_rd_data$ENQ = CAN_FIRE_RL_rl_process_rd_req ;
  assign slave_xactor_f_rd_data$DEQ =
	     slave_rready && slave_xactor_f_rd_data$EMPTY_N ;
  assign slave_xactor_f_rd_data$CLR = 1'b0 ;

  // submodule slave_xactor_f_wr_addr
  assign slave_xactor_f_wr_addr$D_IN = { slave_awaddr, slave_awprot } ;
  assign slave_xactor_f_wr_addr$ENQ =
	     slave_awvalid && slave_xactor_f_wr_addr$FULL_N ;
  assign slave_xactor_f_wr_addr$DEQ = CAN_FIRE_RL_rl_process_wr_req ;
  assign slave_xactor_f_wr_addr$CLR = 1'b0 ;

  // submodule slave_xactor_f_wr_data
  assign slave_xactor_f_wr_data$D_IN = { slave_wdata, slave_wstrb } ;
  assign slave_xactor_f_wr_data$ENQ =
	     slave_wvalid && slave_xactor_f_wr_data$FULL_N ;
  assign slave_xactor_f_wr_data$DEQ = CAN_FIRE_RL_rl_process_wr_req ;
  assign slave_xactor_f_wr_data$CLR = 1'b0 ;

  // submodule slave_xactor_f_wr_resp
  assign slave_xactor_f_wr_resp$D_IN =
	     NOT_slave_xactor_f_wr_addr_first__199_BITS_5_T_ETC___d1209 ?
	       2'd2 :
	       2'd0 ;
  assign slave_xactor_f_wr_resp$ENQ = CAN_FIRE_RL_rl_process_wr_req ;
  assign slave_xactor_f_wr_resp$DEQ =
	     slave_bready && slave_xactor_f_wr_resp$EMPTY_N ;
  assign slave_xactor_f_wr_resp$CLR = 1'b0 ;

  // remaining internal signals
  assign NOT_slave_xactor_f_rd_addr_first_BITS_5_TO_3_E_ETC___d18 =
	     slave_xactor_f_rd_addr$D_OUT[5:3] != 3'b0 ||
	     rg_addr_base > slave_xactor_f_rd_addr$D_OUT[34:3] ||
	     slave_xactor_f_rd_addr$D_OUT[34:3] >= rg_addr_lim ;
  assign NOT_slave_xactor_f_wr_addr_first__199_BITS_5_T_ETC___d1209 =
	     slave_xactor_f_wr_addr$D_OUT[5:3] != 3'b0 ||
	     rg_addr_base > slave_xactor_f_wr_addr$D_OUT[34:3] ||
	     slave_xactor_f_wr_addr$D_OUT[34:3] >= rg_addr_lim ;
  assign byte_addr__h681 = slave_xactor_f_rd_addr$D_OUT[34:3] - rg_addr_base ;
  always@(byte_addr__h681)
  begin
    case (byte_addr__h681)
      32'd16,
      32'd24,
      32'd56,
      32'd72,
      32'd80,
      32'd88,
      32'd200,
      32'd232,
      32'd312,
      32'd360,
      32'd584,
      32'd592,
      32'd688,
      32'd696,
      32'd792,
      32'd800,
      32'd856,
      32'd872,
      32'd880,
      32'd1144,
      32'd1152,
      32'd1160,
      32'd1168,
      32'd1176,
      32'd1184,
      32'd1192,
      32'd1200,
      32'd1208,
      32'd1216,
      32'd1224,
      32'd1232,
      32'd1240,
      32'd1248,
      32'd1256,
      32'd1264,
      32'd1272,
      32'd1280,
      32'd1288,
      32'd1296,
      32'd1304,
      32'd1312,
      32'd1320,
      32'd1328,
      32'd1336,
      32'd1344,
      32'd1352,
      32'd1360,
      32'd1368,
      32'd1376,
      32'd1384,
      32'd1392,
      32'd1400,
      32'd1408,
      32'd1416,
      32'd1424,
      32'd1432,
      32'd1440,
      32'd1448,
      32'd1456,
      32'd1464,
      32'd1472,
      32'd1480,
      32'd1488,
      32'd1496,
      32'd1504,
      32'd1512,
      32'd1520,
      32'd1528,
      32'd1536,
      32'd1544,
      32'd1552,
      32'd1560,
      32'd1568,
      32'd1576,
      32'd1584,
      32'd1592,
      32'd1600,
      32'd1608,
      32'd1616,
      32'd1624,
      32'd1632,
      32'd1640,
      32'd1648,
      32'd1656,
      32'd1664,
      32'd1672,
      32'd1680,
      32'd1688,
      32'd1696,
      32'd1704,
      32'd1712,
      32'd1720,
      32'd1728,
      32'd1736,
      32'd1744,
      32'd1752,
      32'd1760,
      32'd1768,
      32'd1776,
      32'd1784,
      32'd1792,
      32'd1800,
      32'd1808,
      32'd1816,
      32'd1824,
      32'd1832,
      32'd1840,
      32'd1848,
      32'd1856,
      32'd1864,
      32'd1872,
      32'd1880,
      32'd1888,
      32'd1896,
      32'd1904,
      32'd1912,
      32'd1920,
      32'd1928,
      32'd1936,
      32'd1944,
      32'd1952,
      32'd1960,
      32'd1968,
      32'd1976,
      32'd1984,
      32'd1992,
      32'd2000,
      32'd2008,
      32'd2016,
      32'd2024,
      32'd2032,
      32'd2040,
      32'd2048,
      32'd2056,
      32'd2064,
      32'd2072,
      32'd2080,
      32'd2088,
      32'd2096,
      32'd2104,
      32'd2112,
      32'd2120,
      32'd2128,
      32'd2136,
      32'd2144,
      32'd2152,
      32'd2160,
      32'd2168,
      32'd2176,
      32'd2184,
      32'd2192,
      32'd2200,
      32'd2208,
      32'd2216,
      32'd2224,
      32'd2232,
      32'd2240,
      32'd2248,
      32'd2256,
      32'd2264,
      32'd2272,
      32'd2280,
      32'd2288,
      32'd2296,
      32'd2304,
      32'd2312,
      32'd2320,
      32'd2328,
      32'd2336,
      32'd2344,
      32'd2352,
      32'd2360,
      32'd2368,
      32'd2376,
      32'd2384,
      32'd2392,
      32'd2400,
      32'd2408,
      32'd2416,
      32'd2424,
      32'd2432,
      32'd2440,
      32'd2448,
      32'd2456,
      32'd2464,
      32'd2472,
      32'd2480,
      32'd2488,
      32'd2496,
      32'd2504,
      32'd2512,
      32'd2520,
      32'd2528,
      32'd2536,
      32'd2544,
      32'd2552,
      32'd2560,
      32'd2568,
      32'd2576,
      32'd2584,
      32'd2592,
      32'd2600,
      32'd2608,
      32'd2616,
      32'd2624,
      32'd2632,
      32'd2640,
      32'd2648,
      32'd2656,
      32'd2664,
      32'd2672,
      32'd2680,
      32'd2688,
      32'd2696,
      32'd2704,
      32'd2712,
      32'd2720,
      32'd2728,
      32'd2736,
      32'd2744,
      32'd2752,
      32'd2760,
      32'd2768,
      32'd2776,
      32'd2784,
      32'd2792,
      32'd2800,
      32'd2808,
      32'd2816,
      32'd2824,
      32'd2832,
      32'd2840,
      32'd2848,
      32'd2856,
      32'd2864,
      32'd2872,
      32'd2880,
      32'd2888,
      32'd2896,
      32'd2904,
      32'd2912,
      32'd2920,
      32'd2928,
      32'd2936,
      32'd2944,
      32'd2952,
      32'd2960,
      32'd2968,
      32'd2976,
      32'd2984,
      32'd2992,
      32'd3000,
      32'd3008,
      32'd3016,
      32'd3024,
      32'd3032,
      32'd3040,
      32'd3048,
      32'd3056,
      32'd3064,
      32'd3072,
      32'd3080,
      32'd3088,
      32'd3096,
      32'd3104,
      32'd3112,
      32'd3120,
      32'd3128,
      32'd3136,
      32'd3144,
      32'd3152,
      32'd3160,
      32'd3168,
      32'd3176,
      32'd3184,
      32'd3192,
      32'd3200,
      32'd3208,
      32'd3216,
      32'd3224,
      32'd3232,
      32'd3240,
      32'd3248,
      32'd3256,
      32'd3264,
      32'd3272,
      32'd3280,
      32'd3288,
      32'd3296,
      32'd3304,
      32'd3312,
      32'd3320,
      32'd3328,
      32'd3336,
      32'd3344,
      32'd3352,
      32'd3360,
      32'd3368,
      32'd3376,
      32'd3384,
      32'd3392,
      32'd3400,
      32'd3408,
      32'd3416,
      32'd3424,
      32'd3432,
      32'd3440,
      32'd3448,
      32'd3456,
      32'd3464,
      32'd3472,
      32'd3480,
      32'd3488,
      32'd3496,
      32'd3504,
      32'd3512,
      32'd3520,
      32'd3528,
      32'd3536,
      32'd3544,
      32'd3552,
      32'd3560,
      32'd3568,
      32'd3576,
      32'd3584,
      32'd3592,
      32'd3600,
      32'd3608,
      32'd3616,
      32'd3624,
      32'd3632,
      32'd3640,
      32'd3648,
      32'd3656,
      32'd3664,
      32'd3672,
      32'd3680,
      32'd3688,
      32'd3696,
      32'd3704,
      32'd3712,
      32'd3720,
      32'd3728,
      32'd3736,
      32'd3744,
      32'd3752,
      32'd3760,
      32'd3768,
      32'd3776,
      32'd3784,
      32'd3792,
      32'd3800,
      32'd3808,
      32'd3816,
      32'd3824,
      32'd3832,
      32'd3840,
      32'd3848,
      32'd3856,
      32'd3864,
      32'd3872,
      32'd3880,
      32'd3888,
      32'd3896,
      32'd3904,
      32'd3912,
      32'd3920,
      32'd3928,
      32'd3936,
      32'd3944,
      32'd3952,
      32'd3960,
      32'd3968,
      32'd3976,
      32'd3984,
      32'd3992,
      32'd4000,
      32'd4008,
      32'd4016,
      32'd4024,
      32'd4032,
      32'd4040,
      32'd4048,
      32'd4056,
      32'd4064,
      32'd4072,
      32'd4080,
      32'd4088:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 = 32'h0;
      32'd32:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h5A040000;
      32'd40:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h88030000;
      32'd48:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h11000000;
      32'd64:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h50030000;
      32'd96, 32'd112, 32'd208, 32'd224, 32'd240, 32'd392, 32'd616, 32'd632:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h04000000;
      32'd104,
      32'd120,
      32'd520,
      32'd528,
      32'd600,
      32'd624,
      32'd640,
      32'd808,
      32'd920:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h02000000;
      32'd128:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h16000000;
      32'd136, 32'd656:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h62626375;
      32'd144, 32'd664:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h656B6970;
      32'd152:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h65642D65;
      32'd160,
      32'd264,
      32'd280,
      32'd296,
      32'd336,
      32'd432,
      32'd448,
      32'd488,
      32'd504,
      32'd552,
      32'd752,
      32'd768,
      32'd888,
      32'd904:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h03000000;
      32'd168:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h26000000;
      32'd176:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h732C7261;
      32'd184:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h7261622D;
      32'd192, 32'd216, 32'd704, 32'd816:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h01000000;
      32'd248:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h80969800;
      32'd256:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h40757063;
      32'd272, 32'd560:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h3F000000;
      32'd288:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h4B000000;
      32'd304:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h4F000000;
      32'd320:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h06000000;
      32'd328, 32'd376, 32'd472, 32'd736:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h63736972;
      32'd344:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h56000000;
      32'd352:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h66616D69;
      32'd368:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h0B000000;
      32'd384:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h00003233;
      32'd400:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h00CA9A3B;
      32'd408, 32'd1112:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h65746E69;
      32'd416:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h6F632D74;
      32'd424:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h72656C6C;
      32'd440:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h79000000;
      32'd456:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h8A000000;
      32'd464:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h0F000000;
      32'd480:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h6E692D75;
      32'd496:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h9F000000;
      32'd512:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'hA5000000;
      32'd536:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h6F6D656D;
      32'd544:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h30303030;
      32'd568:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h00007972;
      32'd576, 32'd784, 32'd864:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h10000000;
      32'd608:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h00636F73;
      32'd648:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h21000000;
      32'd672:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h6F732D65;
      32'd680:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h656C706D;
      32'd712:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h30324074;
      32'd720, 32'd832:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h00000030;
      32'd728:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h0D000000;
      32'd744:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h30746E69;
      32'd760:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'hB4000000;
      32'd776:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h07000000;
      32'd824:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h30306340;
      32'd840, 32'd928:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h09000000;
      32'd848:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h3631736E;
      32'd896:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'hC8000000;
      32'd912:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h69000000;
      32'd936:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h73736572;
      32'd944:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h2300736C;
      32'd952:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h6C65632D;
      32'd960:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h61706D6F;
      32'd968:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h6F6D0065;
      32'd976:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h656D6974;
      32'd984:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h6572662D;
      32'd992:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h64007963;
      32'd1000:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h79745F65;
      32'd1008:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h73006765;
      32'd1016:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h69720073;
      32'd1024:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h00617369;
      32'd1032:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h65707974;
      32'd1040:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h662D6B63;
      32'd1048:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h79636E65;
      32'd1056, 32'd1072:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h72726574;
      32'd1064:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h6C6C6563;
      32'd1080:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h746E6F63;
      32'd1088:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h6C007265;
      32'd1096:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h6168702C;
      32'd1104:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h6E617200;
      32'd1120:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h652D7374;
      32'd1128:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h00646564;
      32'd1136:
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
	      32'h66696873;
      default: CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 =
		   32'hAAAAAAAA;
    endcase
  end
  always@(byte_addr__h681)
  begin
    case (byte_addr__h681)
      32'd16:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h00028067;
      32'd24:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h80000000;
      32'd32:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'hEDFE0DD0;
      32'd40:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h38000000;
      32'd48:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h28000000;
      32'd56, 32'd760:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h10000000;
      32'd64:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'hD2000000;
      32'd72,
      32'd80,
      32'd104,
      32'd216,
      32'd296,
      32'd432,
      32'd456,
      32'd624,
      32'd752,
      32'd904,
      32'd1152,
      32'd1160,
      32'd1168,
      32'd1176,
      32'd1184,
      32'd1192,
      32'd1200,
      32'd1208,
      32'd1216,
      32'd1224,
      32'd1232,
      32'd1240,
      32'd1248,
      32'd1256,
      32'd1264,
      32'd1272,
      32'd1280,
      32'd1288,
      32'd1296,
      32'd1304,
      32'd1312,
      32'd1320,
      32'd1328,
      32'd1336,
      32'd1344,
      32'd1352,
      32'd1360,
      32'd1368,
      32'd1376,
      32'd1384,
      32'd1392,
      32'd1400,
      32'd1408,
      32'd1416,
      32'd1424,
      32'd1432,
      32'd1440,
      32'd1448,
      32'd1456,
      32'd1464,
      32'd1472,
      32'd1480,
      32'd1488,
      32'd1496,
      32'd1504,
      32'd1512,
      32'd1520,
      32'd1528,
      32'd1536,
      32'd1544,
      32'd1552,
      32'd1560,
      32'd1568,
      32'd1576,
      32'd1584,
      32'd1592,
      32'd1600,
      32'd1608,
      32'd1616,
      32'd1624,
      32'd1632,
      32'd1640,
      32'd1648,
      32'd1656,
      32'd1664,
      32'd1672,
      32'd1680,
      32'd1688,
      32'd1696,
      32'd1704,
      32'd1712,
      32'd1720,
      32'd1728,
      32'd1736,
      32'd1744,
      32'd1752,
      32'd1760,
      32'd1768,
      32'd1776,
      32'd1784,
      32'd1792,
      32'd1800,
      32'd1808,
      32'd1816,
      32'd1824,
      32'd1832,
      32'd1840,
      32'd1848,
      32'd1856,
      32'd1864,
      32'd1872,
      32'd1880,
      32'd1888,
      32'd1896,
      32'd1904,
      32'd1912,
      32'd1920,
      32'd1928,
      32'd1936,
      32'd1944,
      32'd1952,
      32'd1960,
      32'd1968,
      32'd1976,
      32'd1984,
      32'd1992,
      32'd2000,
      32'd2008,
      32'd2016,
      32'd2024,
      32'd2032,
      32'd2040,
      32'd2048,
      32'd2056,
      32'd2064,
      32'd2072,
      32'd2080,
      32'd2088,
      32'd2096,
      32'd2104,
      32'd2112,
      32'd2120,
      32'd2128,
      32'd2136,
      32'd2144,
      32'd2152,
      32'd2160,
      32'd2168,
      32'd2176,
      32'd2184,
      32'd2192,
      32'd2200,
      32'd2208,
      32'd2216,
      32'd2224,
      32'd2232,
      32'd2240,
      32'd2248,
      32'd2256,
      32'd2264,
      32'd2272,
      32'd2280,
      32'd2288,
      32'd2296,
      32'd2304,
      32'd2312,
      32'd2320,
      32'd2328,
      32'd2336,
      32'd2344,
      32'd2352,
      32'd2360,
      32'd2368,
      32'd2376,
      32'd2384,
      32'd2392,
      32'd2400,
      32'd2408,
      32'd2416,
      32'd2424,
      32'd2432,
      32'd2440,
      32'd2448,
      32'd2456,
      32'd2464,
      32'd2472,
      32'd2480,
      32'd2488,
      32'd2496,
      32'd2504,
      32'd2512,
      32'd2520,
      32'd2528,
      32'd2536,
      32'd2544,
      32'd2552,
      32'd2560,
      32'd2568,
      32'd2576,
      32'd2584,
      32'd2592,
      32'd2600,
      32'd2608,
      32'd2616,
      32'd2624,
      32'd2632,
      32'd2640,
      32'd2648,
      32'd2656,
      32'd2664,
      32'd2672,
      32'd2680,
      32'd2688,
      32'd2696,
      32'd2704,
      32'd2712,
      32'd2720,
      32'd2728,
      32'd2736,
      32'd2744,
      32'd2752,
      32'd2760,
      32'd2768,
      32'd2776,
      32'd2784,
      32'd2792,
      32'd2800,
      32'd2808,
      32'd2816,
      32'd2824,
      32'd2832,
      32'd2840,
      32'd2848,
      32'd2856,
      32'd2864,
      32'd2872,
      32'd2880,
      32'd2888,
      32'd2896,
      32'd2904,
      32'd2912,
      32'd2920,
      32'd2928,
      32'd2936,
      32'd2944,
      32'd2952,
      32'd2960,
      32'd2968,
      32'd2976,
      32'd2984,
      32'd2992,
      32'd3000,
      32'd3008,
      32'd3016,
      32'd3024,
      32'd3032,
      32'd3040,
      32'd3048,
      32'd3056,
      32'd3064,
      32'd3072,
      32'd3080,
      32'd3088,
      32'd3096,
      32'd3104,
      32'd3112,
      32'd3120,
      32'd3128,
      32'd3136,
      32'd3144,
      32'd3152,
      32'd3160,
      32'd3168,
      32'd3176,
      32'd3184,
      32'd3192,
      32'd3200,
      32'd3208,
      32'd3216,
      32'd3224,
      32'd3232,
      32'd3240,
      32'd3248,
      32'd3256,
      32'd3264,
      32'd3272,
      32'd3280,
      32'd3288,
      32'd3296,
      32'd3304,
      32'd3312,
      32'd3320,
      32'd3328,
      32'd3336,
      32'd3344,
      32'd3352,
      32'd3360,
      32'd3368,
      32'd3376,
      32'd3384,
      32'd3392,
      32'd3400,
      32'd3408,
      32'd3416,
      32'd3424,
      32'd3432,
      32'd3440,
      32'd3448,
      32'd3456,
      32'd3464,
      32'd3472,
      32'd3480,
      32'd3488,
      32'd3496,
      32'd3504,
      32'd3512,
      32'd3520,
      32'd3528,
      32'd3536,
      32'd3544,
      32'd3552,
      32'd3560,
      32'd3568,
      32'd3576,
      32'd3584,
      32'd3592,
      32'd3600,
      32'd3608,
      32'd3616,
      32'd3624,
      32'd3632,
      32'd3640,
      32'd3648,
      32'd3656,
      32'd3664,
      32'd3672,
      32'd3680,
      32'd3688,
      32'd3696,
      32'd3704,
      32'd3712,
      32'd3720,
      32'd3728,
      32'd3736,
      32'd3744,
      32'd3752,
      32'd3760,
      32'd3768,
      32'd3776,
      32'd3784,
      32'd3792,
      32'd3800,
      32'd3808,
      32'd3816,
      32'd3824,
      32'd3832,
      32'd3840,
      32'd3848,
      32'd3856,
      32'd3864,
      32'd3872,
      32'd3880,
      32'd3888,
      32'd3896,
      32'd3904,
      32'd3912,
      32'd3920,
      32'd3928,
      32'd3936,
      32'd3944,
      32'd3952,
      32'd3960,
      32'd3968,
      32'd3976,
      32'd3984,
      32'd3992,
      32'd4000,
      32'd4008,
      32'd4016,
      32'd4024,
      32'd4032,
      32'd4040,
      32'd4048,
      32'd4056,
      32'd4064,
      32'd4072,
      32'd4080,
      32'd4088:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 = 32'h0;
      32'd88,
      32'd256,
      32'd408,
      32'd448,
      32'd504,
      32'd520,
      32'd536,
      32'd608,
      32'd768,
      32'd776:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h01000000;
      32'd96,
      32'd112,
      32'd128,
      32'd208,
      32'd224,
      32'd240,
      32'd320,
      32'd368,
      32'd392,
      32'd464,
      32'd576,
      32'd616,
      32'd632,
      32'd648,
      32'd696,
      32'd728,
      32'd784,
      32'd840,
      32'd864:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h03000000;
      32'd120, 32'd232, 32'd640:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h0F000000;
      32'd136, 32'd328, 32'd472, 32'd656, 32'd736, 32'd848:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h1B000000;
      32'd144, 32'd664:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h732C7261;
      32'd152, 32'd672:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h7261622D;
      32'd160, 32'd336:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h00000076;
      32'd168:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h12000000;
      32'd176:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h62626375;
      32'd184:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h656B6970;
      32'd192:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h00000065;
      32'd200:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h73757063;
      32'd248:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h2C000000;
      32'd264:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h00000030;
      32'd272, 32'd288, 32'd440, 32'd496, 32'd512, 32'd896, 32'd912:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h04000000;
      32'd280:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h00757063;
      32'd304:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h05000000;
      32'd312:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h79616B6F;
      32'd344:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h0D000000;
      32'd352:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h32337672;
      32'd360:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h73756364;
      32'd376:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h60000000;
      32'd384:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h76732C76;
      32'd400:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h69000000;
      32'd416, 32'd1120:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h70757272;
      32'd424:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h6F72746E;
      32'd480:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h70632C76;
      32'd488:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h00006374;
      32'd528, 32'd816, 32'd928:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h02000000;
      32'd544:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h38407972;
      32'd552:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h00303030;
      32'd560:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h07000000;
      32'd568:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h6F6D656D;
      32'd584, 32'd792, 32'd872:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h4B000000;
      32'd592:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h00000080;
      32'd600:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h00000010;
      32'd680:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h69730063;
      32'd688:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h7375622D;
      32'd704:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'hAD000000;
      32'd712:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h6E696C63;
      32'd720, 32'd832:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h30303030;
      32'd744:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h6C632C76;
      32'd800:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h00000002;
      32'd808:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h00000C00;
      32'd824:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h74726175;
      32'd856:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h61303535;
      32'd880:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h000000C0;
      32'd888:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h08000000;
      32'd920:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h80969800;
      32'd936:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h64646123;
      32'd944:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h6C65632D;
      32'd952:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h657A6973;
      32'd960:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h6300736C;
      32'd968:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h6C626974;
      32'd976:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h006C6564;
      32'd984:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h65736162;
      32'd992:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h6E657571;
      32'd1000:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h63697665;
      32'd1008:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h72006570;
      32'd1016:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h75746174;
      32'd1024:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h2C766373;
      32'd1032:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h2D756D6D;
      32'd1040:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h6F6C6300;
      32'd1048:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h75716572;
      32'd1056:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h6E692300;
      32'd1064, 32'd1080:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h2D747075;
      32'd1072:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h6E690073;
      32'd1088:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h6C6C6F72;
      32'd1096:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h78756E69;
      32'd1104:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h656C646E;
      32'd1112:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h00736567;
      32'd1128:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h6E657478;
      32'd1136:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h2D676572;
      32'd1144:
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
	      32'h00000074;
      default: CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 =
		   32'hAAAAAAAA;
    endcase
  end
  always@(byte_addr__h681 or
	  CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1 or
	  CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2)
  begin
    case (byte_addr__h681)
      32'd0: data64__h926 = 64'h0202859300000297;
      32'd8: data64__h926 = 64'h0182A283F1402573;
      default: data64__h926 =
		   { CASE_byte_addr81_16_0x0_24_0x0_32_0x5A040000_4_ETC__q1,
		     CASE_byte_addr81_16_0x28067_24_0x80000000_32_0_ETC__q2 };
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_module_ready <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (rg_module_ready$EN)
	  rg_module_ready <= `BSV_ASSIGNMENT_DELAY rg_module_ready$D_IN;
      end
    if (rg_addr_base$EN)
      rg_addr_base <= `BSV_ASSIGNMENT_DELAY rg_addr_base$D_IN;
    if (rg_addr_lim$EN) rg_addr_lim <= `BSV_ASSIGNMENT_DELAY rg_addr_lim$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_addr_base = 32'hAAAAAAAA;
    rg_addr_lim = 32'hAAAAAAAA;
    rg_module_ready = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_slave_xactor_f_rd_addr_first_BITS_5_TO_3_E_ETC___d18)
	begin
	  v__h784 = $stime;
	  #0;
	end
    v__h778 = v__h784 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_slave_xactor_f_rd_addr_first_BITS_5_TO_3_E_ETC___d18)
	$display("%0d: ERROR: Boot_ROM.rl_process_rd_req: unrecognized addr",
		 v__h778);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_slave_xactor_f_rd_addr_first_BITS_5_TO_3_E_ETC___d18)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_slave_xactor_f_rd_addr_first_BITS_5_TO_3_E_ETC___d18)
	$write("AXI4_Lite_Rd_Addr { ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_slave_xactor_f_rd_addr_first_BITS_5_TO_3_E_ETC___d18)
	$write("'h%h", slave_xactor_f_rd_addr$D_OUT[34:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_slave_xactor_f_rd_addr_first_BITS_5_TO_3_E_ETC___d18)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_slave_xactor_f_rd_addr_first_BITS_5_TO_3_E_ETC___d18)
	$write("'h%h", slave_xactor_f_rd_addr$D_OUT[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_slave_xactor_f_rd_addr_first_BITS_5_TO_3_E_ETC___d18)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_slave_xactor_f_rd_addr_first_BITS_5_TO_3_E_ETC___d18)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_slave_xactor_f_rd_addr_first_BITS_5_TO_3_E_ETC___d18)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_slave_xactor_f_wr_addr_first__199_BITS_5_T_ETC___d1209)
	begin
	  v__h8832 = $stime;
	  #0;
	end
    v__h8826 = v__h8832 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_slave_xactor_f_wr_addr_first__199_BITS_5_T_ETC___d1209)
	$display("%0d: ERROR: Boot_ROM.rl_process_wr_req: unrecognized addr",
		 v__h8826);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_slave_xactor_f_wr_addr_first__199_BITS_5_T_ETC___d1209)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_slave_xactor_f_wr_addr_first__199_BITS_5_T_ETC___d1209)
	$write("AXI4_Lite_Wr_Addr { ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_slave_xactor_f_wr_addr_first__199_BITS_5_T_ETC___d1209)
	$write("'h%h", slave_xactor_f_wr_addr$D_OUT[34:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_slave_xactor_f_wr_addr_first__199_BITS_5_T_ETC___d1209)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_slave_xactor_f_wr_addr_first__199_BITS_5_T_ETC___d1209)
	$write("'h%h", slave_xactor_f_wr_addr$D_OUT[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_slave_xactor_f_wr_addr_first__199_BITS_5_T_ETC___d1209)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_slave_xactor_f_wr_addr_first__199_BITS_5_T_ETC___d1209)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_slave_xactor_f_wr_addr_first__199_BITS_5_T_ETC___d1209)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_set_addr_map && set_addr_map_addr_base[2:0] != 3'd0)
	begin
	  v__h9086 = $stime;
	  #0;
	end
    v__h9080 = v__h9086 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_set_addr_map && set_addr_map_addr_base[2:0] != 3'd0)
	$display("%0d: WARNING: Boot_ROM.set_addr_map: addr_base 0x%0h is not 4-Byte-aligned",
		 v__h9080,
		 set_addr_map_addr_base);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_set_addr_map && set_addr_map_addr_lim[2:0] != 3'd0)
	begin
	  v__h9196 = $stime;
	  #0;
	end
    v__h9190 = v__h9196 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_set_addr_map && set_addr_map_addr_lim[2:0] != 3'd0)
	$display("%0d: WARNING: Boot_ROM.set_addr_map: addr_lim 0x%0h is not 4-Byte-aligned",
		 v__h9190,
		 set_addr_map_addr_lim);
  end
  // synopsys translate_on
endmodule  // mkBoot_ROM

