//
// Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
//
// On Sat Jun 30 00:41:30 EDT 2018
//
//
// Ports:
// Name                         I/O  size props
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1 reg
// RDY_set_addr_map               O     1 const
// slave_awready                  O     1 reg
// slave_wready                   O     1 reg
// slave_bvalid                   O     1 reg
// slave_bresp                    O     2 reg
// slave_arready                  O     1 reg
// slave_rvalid                   O     1 reg
// slave_rresp                    O     2 reg
// slave_rdata                    O    64 reg
// get_timer_interrupt_req_get    O     1 reg
// RDY_get_timer_interrupt_req_get  O     1 reg
// RDY_get_sw_interrupt_req_get   O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_addr_map_addr_base         I    64 reg
// set_addr_map_addr_lim          I    64 reg
// slave_awvalid                  I     1
// slave_awaddr                   I    64 reg
// slave_awprot                   I     3 reg
// slave_wvalid                   I     1
// slave_wdata                    I    64 reg
// slave_wstrb                    I     8 reg
// slave_bready                   I     1
// slave_arvalid                  I     1
// slave_araddr                   I    64 reg
// slave_arprot                   I     3 reg
// slave_rready                   I     1
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_set_addr_map                I     1
// EN_get_sw_interrupt_req_get    I     1
// EN_get_timer_interrupt_req_get  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTimer(CLK,
	       RST_N,

	       EN_server_reset_request_put,
	       RDY_server_reset_request_put,

	       EN_server_reset_response_get,
	       RDY_server_reset_response_get,

	       set_addr_map_addr_base,
	       set_addr_map_addr_lim,
	       EN_set_addr_map,
	       RDY_set_addr_map,

	       slave_awvalid,
	       slave_awaddr,
	       slave_awprot,

	       slave_awready,

	       slave_wvalid,
	       slave_wdata,
	       slave_wstrb,

	       slave_wready,

	       slave_bvalid,

	       slave_bresp,

	       slave_bready,

	       slave_arvalid,
	       slave_araddr,
	       slave_arprot,

	       slave_arready,

	       slave_rvalid,

	       slave_rresp,

	       slave_rdata,

	       slave_rready,

	       EN_get_timer_interrupt_req_get,
	       get_timer_interrupt_req_get,
	       RDY_get_timer_interrupt_req_get,

	       EN_get_sw_interrupt_req_get,
	       RDY_get_sw_interrupt_req_get);
  input  CLK;
  input  RST_N;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // action method set_addr_map
  input  [63 : 0] set_addr_map_addr_base;
  input  [63 : 0] set_addr_map_addr_lim;
  input  EN_set_addr_map;
  output RDY_set_addr_map;

  // action method slave_m_awvalid
  input  slave_awvalid;
  input  [63 : 0] slave_awaddr;
  input  [2 : 0] slave_awprot;

  // value method slave_m_awready
  output slave_awready;

  // action method slave_m_wvalid
  input  slave_wvalid;
  input  [63 : 0] slave_wdata;
  input  [7 : 0] slave_wstrb;

  // value method slave_m_wready
  output slave_wready;

  // value method slave_m_bvalid
  output slave_bvalid;

  // value method slave_m_bresp
  output [1 : 0] slave_bresp;

  // value method slave_m_buser

  // action method slave_m_bready
  input  slave_bready;

  // action method slave_m_arvalid
  input  slave_arvalid;
  input  [63 : 0] slave_araddr;
  input  [2 : 0] slave_arprot;

  // value method slave_m_arready
  output slave_arready;

  // value method slave_m_rvalid
  output slave_rvalid;

  // value method slave_m_rresp
  output [1 : 0] slave_rresp;

  // value method slave_m_rdata
  output [63 : 0] slave_rdata;

  // value method slave_m_ruser

  // action method slave_m_rready
  input  slave_rready;

  // actionvalue method get_timer_interrupt_req_get
  input  EN_get_timer_interrupt_req_get;
  output get_timer_interrupt_req_get;
  output RDY_get_timer_interrupt_req_get;

  // action method get_sw_interrupt_req_get
  input  EN_get_sw_interrupt_req_get;
  output RDY_get_sw_interrupt_req_get;

  // signals for module outputs
  wire [63 : 0] slave_rdata;
  wire [1 : 0] slave_bresp, slave_rresp;
  wire RDY_get_sw_interrupt_req_get,
       RDY_get_timer_interrupt_req_get,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_set_addr_map,
       get_timer_interrupt_req_get,
       slave_arready,
       slave_awready,
       slave_bvalid,
       slave_rvalid,
       slave_wready;

  // inlined wires
  wire [63 : 0] crg_time$port0__write_1,
		crg_time$port1__read,
		crg_time$port1__write_1,
		crg_time$port2__read,
		crg_timecmp$port1__read,
		crg_timecmp$port1__write_1,
		crg_timecmp$port2__read;
  wire crg_interrupted$EN_port0__write,
       crg_interrupted$port1__read,
       crg_interrupted$port2__read,
       crg_time$EN_port0__write,
       crg_time$EN_port1__write;

  // register cfg_verbosity
  reg [3 : 0] cfg_verbosity;
  wire [3 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register crg_interrupted
  reg crg_interrupted;
  wire crg_interrupted$D_IN, crg_interrupted$EN;

  // register crg_time
  reg [63 : 0] crg_time;
  wire [63 : 0] crg_time$D_IN;
  wire crg_time$EN;

  // register crg_timecmp
  reg [63 : 0] crg_timecmp;
  wire [63 : 0] crg_timecmp$D_IN;
  wire crg_timecmp$EN;

  // register rg_addr_base
  reg [63 : 0] rg_addr_base;
  wire [63 : 0] rg_addr_base$D_IN;
  wire rg_addr_base$EN;

  // register rg_addr_lim
  reg [63 : 0] rg_addr_lim;
  wire [63 : 0] rg_addr_lim$D_IN;
  wire rg_addr_lim$EN;

  // register rg_state
  reg rg_state;
  wire rg_state$D_IN, rg_state$EN;

  // ports of submodule f_reset_reqs
  wire f_reset_reqs$CLR,
       f_reset_reqs$DEQ,
       f_reset_reqs$EMPTY_N,
       f_reset_reqs$ENQ,
       f_reset_reqs$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule f_sw_interrupt_req
  wire f_sw_interrupt_req$CLR,
       f_sw_interrupt_req$DEQ,
       f_sw_interrupt_req$EMPTY_N,
       f_sw_interrupt_req$ENQ,
       f_sw_interrupt_req$FULL_N;

  // ports of submodule f_timer_interrupt_req
  wire f_timer_interrupt_req$CLR,
       f_timer_interrupt_req$DEQ,
       f_timer_interrupt_req$D_IN,
       f_timer_interrupt_req$D_OUT,
       f_timer_interrupt_req$EMPTY_N,
       f_timer_interrupt_req$ENQ,
       f_timer_interrupt_req$FULL_N;

  // ports of submodule slave_xactor_f_rd_addr
  wire [66 : 0] slave_xactor_f_rd_addr$D_IN, slave_xactor_f_rd_addr$D_OUT;
  wire slave_xactor_f_rd_addr$CLR,
       slave_xactor_f_rd_addr$DEQ,
       slave_xactor_f_rd_addr$EMPTY_N,
       slave_xactor_f_rd_addr$ENQ,
       slave_xactor_f_rd_addr$FULL_N;

  // ports of submodule slave_xactor_f_rd_data
  wire [65 : 0] slave_xactor_f_rd_data$D_IN, slave_xactor_f_rd_data$D_OUT;
  wire slave_xactor_f_rd_data$CLR,
       slave_xactor_f_rd_data$DEQ,
       slave_xactor_f_rd_data$EMPTY_N,
       slave_xactor_f_rd_data$ENQ,
       slave_xactor_f_rd_data$FULL_N;

  // ports of submodule slave_xactor_f_wr_addr
  wire [66 : 0] slave_xactor_f_wr_addr$D_IN, slave_xactor_f_wr_addr$D_OUT;
  wire slave_xactor_f_wr_addr$CLR,
       slave_xactor_f_wr_addr$DEQ,
       slave_xactor_f_wr_addr$EMPTY_N,
       slave_xactor_f_wr_addr$ENQ,
       slave_xactor_f_wr_addr$FULL_N;

  // ports of submodule slave_xactor_f_wr_data
  wire [71 : 0] slave_xactor_f_wr_data$D_IN, slave_xactor_f_wr_data$D_OUT;
  wire slave_xactor_f_wr_data$CLR,
       slave_xactor_f_wr_data$DEQ,
       slave_xactor_f_wr_data$EMPTY_N,
       slave_xactor_f_wr_data$ENQ,
       slave_xactor_f_wr_data$FULL_N;

  // ports of submodule slave_xactor_f_wr_resp
  reg [1 : 0] slave_xactor_f_wr_resp$D_IN;
  wire [1 : 0] slave_xactor_f_wr_resp$D_OUT;
  wire slave_xactor_f_wr_resp$CLR,
       slave_xactor_f_wr_resp$DEQ,
       slave_xactor_f_wr_resp$EMPTY_N,
       slave_xactor_f_wr_resp$ENQ,
       slave_xactor_f_wr_resp$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_compare,
       CAN_FIRE_RL_rl_process_rd_req,
       CAN_FIRE_RL_rl_process_wr_req,
       CAN_FIRE_RL_rl_reset,
       CAN_FIRE_RL_rl_tick_timer,
       CAN_FIRE_get_sw_interrupt_req_get,
       CAN_FIRE_get_timer_interrupt_req_get,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_set_addr_map,
       CAN_FIRE_slave_m_arvalid,
       CAN_FIRE_slave_m_awvalid,
       CAN_FIRE_slave_m_bready,
       CAN_FIRE_slave_m_rready,
       CAN_FIRE_slave_m_wvalid,
       WILL_FIRE_RL_rl_compare,
       WILL_FIRE_RL_rl_process_rd_req,
       WILL_FIRE_RL_rl_process_wr_req,
       WILL_FIRE_RL_rl_reset,
       WILL_FIRE_RL_rl_tick_timer,
       WILL_FIRE_get_sw_interrupt_req_get,
       WILL_FIRE_get_timer_interrupt_req_get,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_set_addr_map,
       WILL_FIRE_slave_m_arvalid,
       WILL_FIRE_slave_m_awvalid,
       WILL_FIRE_slave_m_bready,
       WILL_FIRE_slave_m_rready,
       WILL_FIRE_slave_m_wvalid;

  // inputs to muxes for submodule ports
  wire [63 : 0] MUX_crg_time$port0__write_1__VAL_2;
  wire MUX_f_timer_interrupt_req$enq_1__SEL_1;

  // remaining internal signals
  reg [63 : 0] rdr_rdata__h2444;
  reg [31 : 0] v__h1912,
	       v__h1918,
	       v__h2114,
	       v__h2120,
	       v__h2302,
	       v__h2308,
	       v__h2569,
	       v__h2575,
	       v__h3411,
	       v__h3417,
	       v__h3614,
	       v__h3620,
	       v__h3925,
	       v__h3931,
	       v__h4035,
	       v__h4041;
  reg [1 : 0] CASE_byte_addr222_0x0_0_0x4_0_0x4000_0_0x4004__ETC__q1;
  reg CASE_byte_addr775_0x0_NOT_slave_xactor_f_wr_da_ETC__q2;
  wire [63 : 0] byte_addr__h2222,
		byte_addr__h2775,
		rdata__h2263,
		rdata__h2269,
		x1__h3162,
		x1__h3318;
  wire NOT_cfg_verbosity_read_ULE_1_4___d25,
       slave_xactor_f_wr_addr_i_notEmpty__7_AND_slave_ETC___d99;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // action method set_addr_map
  assign RDY_set_addr_map = 1'd1 ;
  assign CAN_FIRE_set_addr_map = 1'd1 ;
  assign WILL_FIRE_set_addr_map = EN_set_addr_map ;

  // action method slave_m_awvalid
  assign CAN_FIRE_slave_m_awvalid = 1'd1 ;
  assign WILL_FIRE_slave_m_awvalid = 1'd1 ;

  // value method slave_m_awready
  assign slave_awready = slave_xactor_f_wr_addr$FULL_N ;

  // action method slave_m_wvalid
  assign CAN_FIRE_slave_m_wvalid = 1'd1 ;
  assign WILL_FIRE_slave_m_wvalid = 1'd1 ;

  // value method slave_m_wready
  assign slave_wready = slave_xactor_f_wr_data$FULL_N ;

  // value method slave_m_bvalid
  assign slave_bvalid = slave_xactor_f_wr_resp$EMPTY_N ;

  // value method slave_m_bresp
  assign slave_bresp = slave_xactor_f_wr_resp$D_OUT ;

  // action method slave_m_bready
  assign CAN_FIRE_slave_m_bready = 1'd1 ;
  assign WILL_FIRE_slave_m_bready = 1'd1 ;

  // action method slave_m_arvalid
  assign CAN_FIRE_slave_m_arvalid = 1'd1 ;
  assign WILL_FIRE_slave_m_arvalid = 1'd1 ;

  // value method slave_m_arready
  assign slave_arready = slave_xactor_f_rd_addr$FULL_N ;

  // value method slave_m_rvalid
  assign slave_rvalid = slave_xactor_f_rd_data$EMPTY_N ;

  // value method slave_m_rresp
  assign slave_rresp = slave_xactor_f_rd_data$D_OUT[65:64] ;

  // value method slave_m_rdata
  assign slave_rdata = slave_xactor_f_rd_data$D_OUT[63:0] ;

  // action method slave_m_rready
  assign CAN_FIRE_slave_m_rready = 1'd1 ;
  assign WILL_FIRE_slave_m_rready = 1'd1 ;

  // actionvalue method get_timer_interrupt_req_get
  assign get_timer_interrupt_req_get = f_timer_interrupt_req$D_OUT ;
  assign RDY_get_timer_interrupt_req_get = f_timer_interrupt_req$EMPTY_N ;
  assign CAN_FIRE_get_timer_interrupt_req_get =
	     f_timer_interrupt_req$EMPTY_N ;
  assign WILL_FIRE_get_timer_interrupt_req_get =
	     EN_get_timer_interrupt_req_get ;

  // action method get_sw_interrupt_req_get
  assign RDY_get_sw_interrupt_req_get = f_sw_interrupt_req$EMPTY_N ;
  assign CAN_FIRE_get_sw_interrupt_req_get = f_sw_interrupt_req$EMPTY_N ;
  assign WILL_FIRE_get_sw_interrupt_req_get = EN_get_sw_interrupt_req_get ;

  // submodule f_reset_reqs
  FIFO20 #(.guarded(32'd1)) f_reset_reqs(.RST(RST_N),
					 .CLK(CLK),
					 .ENQ(f_reset_reqs$ENQ),
					 .DEQ(f_reset_reqs$DEQ),
					 .CLR(f_reset_reqs$CLR),
					 .FULL_N(f_reset_reqs$FULL_N),
					 .EMPTY_N(f_reset_reqs$EMPTY_N));

  // submodule f_reset_rsps
  FIFO20 #(.guarded(32'd1)) f_reset_rsps(.RST(RST_N),
					 .CLK(CLK),
					 .ENQ(f_reset_rsps$ENQ),
					 .DEQ(f_reset_rsps$DEQ),
					 .CLR(f_reset_rsps$CLR),
					 .FULL_N(f_reset_rsps$FULL_N),
					 .EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule f_sw_interrupt_req
  FIFO20 #(.guarded(32'd1)) f_sw_interrupt_req(.RST(RST_N),
					       .CLK(CLK),
					       .ENQ(f_sw_interrupt_req$ENQ),
					       .DEQ(f_sw_interrupt_req$DEQ),
					       .CLR(f_sw_interrupt_req$CLR),
					       .FULL_N(f_sw_interrupt_req$FULL_N),
					       .EMPTY_N(f_sw_interrupt_req$EMPTY_N));

  // submodule f_timer_interrupt_req
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_timer_interrupt_req(.RST(RST_N),
								.CLK(CLK),
								.D_IN(f_timer_interrupt_req$D_IN),
								.ENQ(f_timer_interrupt_req$ENQ),
								.DEQ(f_timer_interrupt_req$DEQ),
								.CLR(f_timer_interrupt_req$CLR),
								.D_OUT(f_timer_interrupt_req$D_OUT),
								.FULL_N(f_timer_interrupt_req$FULL_N),
								.EMPTY_N(f_timer_interrupt_req$EMPTY_N));

  // submodule slave_xactor_f_rd_addr
  FIFO2 #(.width(32'd67), .guarded(32'd1)) slave_xactor_f_rd_addr(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(slave_xactor_f_rd_addr$D_IN),
								  .ENQ(slave_xactor_f_rd_addr$ENQ),
								  .DEQ(slave_xactor_f_rd_addr$DEQ),
								  .CLR(slave_xactor_f_rd_addr$CLR),
								  .D_OUT(slave_xactor_f_rd_addr$D_OUT),
								  .FULL_N(slave_xactor_f_rd_addr$FULL_N),
								  .EMPTY_N(slave_xactor_f_rd_addr$EMPTY_N));

  // submodule slave_xactor_f_rd_data
  FIFO2 #(.width(32'd66), .guarded(32'd1)) slave_xactor_f_rd_data(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(slave_xactor_f_rd_data$D_IN),
								  .ENQ(slave_xactor_f_rd_data$ENQ),
								  .DEQ(slave_xactor_f_rd_data$DEQ),
								  .CLR(slave_xactor_f_rd_data$CLR),
								  .D_OUT(slave_xactor_f_rd_data$D_OUT),
								  .FULL_N(slave_xactor_f_rd_data$FULL_N),
								  .EMPTY_N(slave_xactor_f_rd_data$EMPTY_N));

  // submodule slave_xactor_f_wr_addr
  FIFO2 #(.width(32'd67), .guarded(32'd1)) slave_xactor_f_wr_addr(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(slave_xactor_f_wr_addr$D_IN),
								  .ENQ(slave_xactor_f_wr_addr$ENQ),
								  .DEQ(slave_xactor_f_wr_addr$DEQ),
								  .CLR(slave_xactor_f_wr_addr$CLR),
								  .D_OUT(slave_xactor_f_wr_addr$D_OUT),
								  .FULL_N(slave_xactor_f_wr_addr$FULL_N),
								  .EMPTY_N(slave_xactor_f_wr_addr$EMPTY_N));

  // submodule slave_xactor_f_wr_data
  FIFO2 #(.width(32'd72), .guarded(32'd1)) slave_xactor_f_wr_data(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(slave_xactor_f_wr_data$D_IN),
								  .ENQ(slave_xactor_f_wr_data$ENQ),
								  .DEQ(slave_xactor_f_wr_data$DEQ),
								  .CLR(slave_xactor_f_wr_data$CLR),
								  .D_OUT(slave_xactor_f_wr_data$D_OUT),
								  .FULL_N(slave_xactor_f_wr_data$FULL_N),
								  .EMPTY_N(slave_xactor_f_wr_data$EMPTY_N));

  // submodule slave_xactor_f_wr_resp
  FIFO2 #(.width(32'd2), .guarded(32'd1)) slave_xactor_f_wr_resp(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(slave_xactor_f_wr_resp$D_IN),
								 .ENQ(slave_xactor_f_wr_resp$ENQ),
								 .DEQ(slave_xactor_f_wr_resp$DEQ),
								 .CLR(slave_xactor_f_wr_resp$CLR),
								 .D_OUT(slave_xactor_f_wr_resp$D_OUT),
								 .FULL_N(slave_xactor_f_wr_resp$FULL_N),
								 .EMPTY_N(slave_xactor_f_wr_resp$EMPTY_N));

  // rule RL_rl_compare
  assign CAN_FIRE_RL_rl_compare =
	     f_timer_interrupt_req$FULL_N && rg_state && !crg_interrupted &&
	     crg_time >= crg_timecmp ;
  assign WILL_FIRE_RL_rl_compare = CAN_FIRE_RL_rl_compare ;

  // rule RL_rl_process_rd_req
  assign CAN_FIRE_RL_rl_process_rd_req =
	     slave_xactor_f_rd_addr$EMPTY_N &&
	     slave_xactor_f_rd_data$FULL_N &&
	     rg_state ;
  assign WILL_FIRE_RL_rl_process_rd_req = CAN_FIRE_RL_rl_process_rd_req ;

  // rule RL_rl_tick_timer
  assign CAN_FIRE_RL_rl_tick_timer =
	     rg_state && crg_time != 64'hFFFFFFFFFFFFFFFF ;
  assign WILL_FIRE_RL_rl_tick_timer = CAN_FIRE_RL_rl_tick_timer ;

  // rule RL_rl_reset
  assign CAN_FIRE_RL_rl_reset = f_reset_reqs$EMPTY_N && f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_rl_reset = CAN_FIRE_RL_rl_reset ;

  // rule RL_rl_process_wr_req
  assign CAN_FIRE_RL_rl_process_wr_req =
	     slave_xactor_f_wr_addr_i_notEmpty__7_AND_slave_ETC___d99 &&
	     rg_state ;
  assign WILL_FIRE_RL_rl_process_wr_req =
	     CAN_FIRE_RL_rl_process_wr_req && !WILL_FIRE_RL_rl_compare &&
	     !WILL_FIRE_RL_rl_reset ;

  // inputs to muxes for submodule ports
  assign MUX_f_timer_interrupt_req$enq_1__SEL_1 =
	     WILL_FIRE_RL_rl_process_wr_req &&
	     (byte_addr__h2775 == 64'h0000000000004000 ||
	      byte_addr__h2775 == 64'h0000000000004004) ;
  assign MUX_crg_time$port0__write_1__VAL_2 = crg_time + 64'd1 ;

  // inlined wires
  assign crg_time$EN_port0__write =
	     WILL_FIRE_RL_rl_tick_timer || WILL_FIRE_RL_rl_reset ;
  assign crg_time$port0__write_1 =
	     WILL_FIRE_RL_rl_reset ?
	       64'd1 :
	       MUX_crg_time$port0__write_1__VAL_2 ;
  assign crg_time$port1__read =
	     crg_time$EN_port0__write ? crg_time$port0__write_1 : crg_time ;
  assign crg_time$EN_port1__write =
	     WILL_FIRE_RL_rl_process_wr_req &&
	     (byte_addr__h2775 == 64'h000000000000BFF8 ||
	      byte_addr__h2775 == 64'h000000000000BFFC) ;
  assign crg_time$port1__write_1 =
	     (byte_addr__h2775 == 64'h000000000000BFF8) ?
	       slave_xactor_f_wr_data$D_OUT[71:8] :
	       x1__h3318 ;
  assign crg_time$port2__read =
	     crg_time$EN_port1__write ?
	       crg_time$port1__write_1 :
	       crg_time$port1__read ;
  assign crg_timecmp$port1__read =
	     CAN_FIRE_RL_rl_reset ? 64'd0 : crg_timecmp ;
  assign crg_timecmp$port1__write_1 =
	     (byte_addr__h2775 == 64'h0000000000004000) ?
	       slave_xactor_f_wr_data$D_OUT[71:8] :
	       x1__h3162 ;
  assign crg_timecmp$port2__read =
	     MUX_f_timer_interrupt_req$enq_1__SEL_1 ?
	       crg_timecmp$port1__write_1 :
	       crg_timecmp$port1__read ;
  assign crg_interrupted$EN_port0__write =
	     WILL_FIRE_RL_rl_compare || WILL_FIRE_RL_rl_reset ;
  assign crg_interrupted$port1__read =
	     crg_interrupted$EN_port0__write || crg_interrupted ;
  assign crg_interrupted$port2__read =
	     !MUX_f_timer_interrupt_req$enq_1__SEL_1 &&
	     crg_interrupted$port1__read ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN = 4'h0 ;
  assign cfg_verbosity$EN = 1'b0 ;

  // register crg_interrupted
  assign crg_interrupted$D_IN = crg_interrupted$port2__read ;
  assign crg_interrupted$EN = 1'b1 ;

  // register crg_time
  assign crg_time$D_IN = crg_time$port2__read ;
  assign crg_time$EN = 1'b1 ;

  // register crg_timecmp
  assign crg_timecmp$D_IN = crg_timecmp$port2__read ;
  assign crg_timecmp$EN = 1'b1 ;

  // register rg_addr_base
  assign rg_addr_base$D_IN = set_addr_map_addr_base ;
  assign rg_addr_base$EN = EN_set_addr_map ;

  // register rg_addr_lim
  assign rg_addr_lim$D_IN = set_addr_map_addr_lim ;
  assign rg_addr_lim$EN = EN_set_addr_map ;

  // register rg_state
  assign rg_state$D_IN = 1'd1 ;
  assign rg_state$EN = f_reset_reqs$EMPTY_N && f_reset_rsps$FULL_N ;

  // submodule f_reset_reqs
  assign f_reset_reqs$ENQ = EN_server_reset_request_put ;
  assign f_reset_reqs$DEQ = f_reset_reqs$EMPTY_N && f_reset_rsps$FULL_N ;
  assign f_reset_reqs$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$ENQ = f_reset_reqs$EMPTY_N && f_reset_rsps$FULL_N ;
  assign f_reset_rsps$DEQ = EN_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule f_sw_interrupt_req
  assign f_sw_interrupt_req$ENQ =
	     WILL_FIRE_RL_rl_process_wr_req && byte_addr__h2775 == 64'h0 &&
	     slave_xactor_f_wr_data$D_OUT[8] ;
  assign f_sw_interrupt_req$DEQ = EN_get_sw_interrupt_req_get ;
  assign f_sw_interrupt_req$CLR = CAN_FIRE_RL_rl_reset ;

  // submodule f_timer_interrupt_req
  assign f_timer_interrupt_req$D_IN =
	     !MUX_f_timer_interrupt_req$enq_1__SEL_1 ;
  assign f_timer_interrupt_req$ENQ =
	     WILL_FIRE_RL_rl_process_wr_req &&
	     (byte_addr__h2775 == 64'h0000000000004000 ||
	      byte_addr__h2775 == 64'h0000000000004004) ||
	     WILL_FIRE_RL_rl_compare ;
  assign f_timer_interrupt_req$DEQ = EN_get_timer_interrupt_req_get ;
  assign f_timer_interrupt_req$CLR = CAN_FIRE_RL_rl_reset ;

  // submodule slave_xactor_f_rd_addr
  assign slave_xactor_f_rd_addr$D_IN = { slave_araddr, slave_arprot } ;
  assign slave_xactor_f_rd_addr$ENQ =
	     slave_arvalid && slave_xactor_f_rd_addr$FULL_N ;
  assign slave_xactor_f_rd_addr$DEQ = CAN_FIRE_RL_rl_process_rd_req ;
  assign slave_xactor_f_rd_addr$CLR =
	     f_reset_reqs$EMPTY_N && f_reset_rsps$FULL_N ;

  // submodule slave_xactor_f_rd_data
  assign slave_xactor_f_rd_data$D_IN =
	     { CASE_byte_addr222_0x0_0_0x4_0_0x4000_0_0x4004__ETC__q1,
	       rdr_rdata__h2444 } ;
  assign slave_xactor_f_rd_data$ENQ = CAN_FIRE_RL_rl_process_rd_req ;
  assign slave_xactor_f_rd_data$DEQ =
	     slave_rready && slave_xactor_f_rd_data$EMPTY_N ;
  assign slave_xactor_f_rd_data$CLR =
	     f_reset_reqs$EMPTY_N && f_reset_rsps$FULL_N ;

  // submodule slave_xactor_f_wr_addr
  assign slave_xactor_f_wr_addr$D_IN = { slave_awaddr, slave_awprot } ;
  assign slave_xactor_f_wr_addr$ENQ =
	     slave_awvalid && slave_xactor_f_wr_addr$FULL_N ;
  assign slave_xactor_f_wr_addr$DEQ = WILL_FIRE_RL_rl_process_wr_req ;
  assign slave_xactor_f_wr_addr$CLR =
	     f_reset_reqs$EMPTY_N && f_reset_rsps$FULL_N ;

  // submodule slave_xactor_f_wr_data
  assign slave_xactor_f_wr_data$D_IN = { slave_wdata, slave_wstrb } ;
  assign slave_xactor_f_wr_data$ENQ =
	     slave_wvalid && slave_xactor_f_wr_data$FULL_N ;
  assign slave_xactor_f_wr_data$DEQ = WILL_FIRE_RL_rl_process_wr_req ;
  assign slave_xactor_f_wr_data$CLR =
	     f_reset_reqs$EMPTY_N && f_reset_rsps$FULL_N ;

  // submodule slave_xactor_f_wr_resp
  always@(byte_addr__h2775)
  begin
    case (byte_addr__h2775)
      64'h0,
      64'h0000000000000004,
      64'h0000000000004000,
      64'h0000000000004004,
      64'h000000000000BFF8,
      64'h000000000000BFFC:
	  slave_xactor_f_wr_resp$D_IN = 2'd0;
      default: slave_xactor_f_wr_resp$D_IN = 2'd2;
    endcase
  end
  assign slave_xactor_f_wr_resp$ENQ = WILL_FIRE_RL_rl_process_wr_req ;
  assign slave_xactor_f_wr_resp$DEQ =
	     slave_bready && slave_xactor_f_wr_resp$EMPTY_N ;
  assign slave_xactor_f_wr_resp$CLR =
	     f_reset_reqs$EMPTY_N && f_reset_rsps$FULL_N ;

  // remaining internal signals
  assign NOT_cfg_verbosity_read_ULE_1_4___d25 = cfg_verbosity > 4'd1 ;
  assign byte_addr__h2222 =
	     slave_xactor_f_rd_addr$D_OUT[66:3] - rg_addr_base ;
  assign byte_addr__h2775 =
	     slave_xactor_f_wr_addr$D_OUT[66:3] - rg_addr_base ;
  assign rdata__h2263 = { 32'd0, crg_timecmp[63:32] } ;
  assign rdata__h2269 = { 32'd0, crg_time[63:32] } ;
  assign slave_xactor_f_wr_addr_i_notEmpty__7_AND_slave_ETC___d99 =
	     slave_xactor_f_wr_addr$EMPTY_N &&
	     slave_xactor_f_wr_data$EMPTY_N &&
	     slave_xactor_f_wr_resp$FULL_N &&
	     CASE_byte_addr775_0x0_NOT_slave_xactor_f_wr_da_ETC__q2 ;
  assign x1__h3162 =
	     { slave_xactor_f_wr_data$D_OUT[39:8],
	       crg_timecmp$port1__read[31:0] } ;
  assign x1__h3318 =
	     { slave_xactor_f_wr_data$D_OUT[39:8],
	       crg_time$port1__read[31:0] } ;
  always@(byte_addr__h2222 or
	  crg_timecmp or rdata__h2263 or crg_time or rdata__h2269)
  begin
    case (byte_addr__h2222)
      64'h0: rdr_rdata__h2444 = byte_addr__h2222;
      64'h0000000000000004: rdr_rdata__h2444 = 64'd0;
      64'h0000000000004000: rdr_rdata__h2444 = crg_timecmp;
      64'h0000000000004004: rdr_rdata__h2444 = rdata__h2263;
      64'h000000000000BFF8: rdr_rdata__h2444 = crg_time;
      64'h000000000000BFFC: rdr_rdata__h2444 = rdata__h2269;
      default: rdr_rdata__h2444 = 64'd0;
    endcase
  end
  always@(byte_addr__h2222)
  begin
    case (byte_addr__h2222)
      64'h0,
      64'h0000000000000004,
      64'h0000000000004000,
      64'h0000000000004004,
      64'h000000000000BFF8,
      64'h000000000000BFFC:
	  CASE_byte_addr222_0x0_0_0x4_0_0x4000_0_0x4004__ETC__q1 = 2'd0;
      default: CASE_byte_addr222_0x0_0_0x4_0_0x4000_0_0x4004__ETC__q1 = 2'd2;
    endcase
  end
  always@(byte_addr__h2775 or
	  f_timer_interrupt_req$FULL_N or
	  slave_xactor_f_wr_data$D_OUT or f_sw_interrupt_req$FULL_N)
  begin
    case (byte_addr__h2775)
      64'h0:
	  CASE_byte_addr775_0x0_NOT_slave_xactor_f_wr_da_ETC__q2 =
	      !slave_xactor_f_wr_data$D_OUT[8] || f_sw_interrupt_req$FULL_N;
      64'h0000000000004000:
	  CASE_byte_addr775_0x0_NOT_slave_xactor_f_wr_da_ETC__q2 =
	      f_timer_interrupt_req$FULL_N;
      default: CASE_byte_addr775_0x0_NOT_slave_xactor_f_wr_da_ETC__q2 =
		   byte_addr__h2775 != 64'h0000000000004004 ||
		   f_timer_interrupt_req$FULL_N;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
      end
    if (crg_interrupted$EN)
      crg_interrupted <= `BSV_ASSIGNMENT_DELAY crg_interrupted$D_IN;
    if (crg_time$EN) crg_time <= `BSV_ASSIGNMENT_DELAY crg_time$D_IN;
    if (crg_timecmp$EN) crg_timecmp <= `BSV_ASSIGNMENT_DELAY crg_timecmp$D_IN;
    if (rg_addr_base$EN)
      rg_addr_base <= `BSV_ASSIGNMENT_DELAY rg_addr_base$D_IN;
    if (rg_addr_lim$EN) rg_addr_lim <= `BSV_ASSIGNMENT_DELAY rg_addr_lim$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_verbosity = 4'hA;
    crg_interrupted = 1'h0;
    crg_time = 64'hAAAAAAAAAAAAAAAA;
    crg_timecmp = 64'hAAAAAAAAAAAAAAAA;
    rg_addr_base = 64'hAAAAAAAAAAAAAAAA;
    rg_addr_lim = 64'hAAAAAAAAAAAAAAAA;
    rg_state = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_compare && NOT_cfg_verbosity_read_ULE_1_4___d25)
	begin
	  v__h2120 = $stime;
	  #0;
	end
    v__h2114 = v__h2120 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_compare && NOT_cfg_verbosity_read_ULE_1_4___d25)
	$display("%0d: Timer.rl_compare: raising interrupt. time = %0d, timecmp = %0d",
		 v__h2114,
		 crg_time,
		 crg_timecmp);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && byte_addr__h2222 != 64'h0 &&
	  byte_addr__h2222 != 64'h0000000000004000 &&
	  byte_addr__h2222 != 64'h000000000000BFF8 &&
	  byte_addr__h2222 != 64'h0000000000000004 &&
	  byte_addr__h2222 != 64'h0000000000004004 &&
	  byte_addr__h2222 != 64'h000000000000BFFC)
	begin
	  v__h2308 = $stime;
	  #0;
	end
    v__h2302 = v__h2308 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && byte_addr__h2222 != 64'h0 &&
	  byte_addr__h2222 != 64'h0000000000004000 &&
	  byte_addr__h2222 != 64'h000000000000BFF8 &&
	  byte_addr__h2222 != 64'h0000000000000004 &&
	  byte_addr__h2222 != 64'h0000000000004004 &&
	  byte_addr__h2222 != 64'h000000000000BFFC)
	$display("%0d: ERROR: Timer.rl_process_rd_req: unrecognized addr",
		 v__h2302);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && byte_addr__h2222 != 64'h0 &&
	  byte_addr__h2222 != 64'h0000000000004000 &&
	  byte_addr__h2222 != 64'h000000000000BFF8 &&
	  byte_addr__h2222 != 64'h0000000000000004 &&
	  byte_addr__h2222 != 64'h0000000000004004 &&
	  byte_addr__h2222 != 64'h000000000000BFFC)
	$write("            ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && byte_addr__h2222 != 64'h0 &&
	  byte_addr__h2222 != 64'h0000000000004000 &&
	  byte_addr__h2222 != 64'h000000000000BFF8 &&
	  byte_addr__h2222 != 64'h0000000000000004 &&
	  byte_addr__h2222 != 64'h0000000000004004 &&
	  byte_addr__h2222 != 64'h000000000000BFFC)
	$write("AXI4_Lite_Rd_Addr { ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && byte_addr__h2222 != 64'h0 &&
	  byte_addr__h2222 != 64'h0000000000004000 &&
	  byte_addr__h2222 != 64'h000000000000BFF8 &&
	  byte_addr__h2222 != 64'h0000000000000004 &&
	  byte_addr__h2222 != 64'h0000000000004004 &&
	  byte_addr__h2222 != 64'h000000000000BFFC)
	$write("'h%h", slave_xactor_f_rd_addr$D_OUT[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && byte_addr__h2222 != 64'h0 &&
	  byte_addr__h2222 != 64'h0000000000004000 &&
	  byte_addr__h2222 != 64'h000000000000BFF8 &&
	  byte_addr__h2222 != 64'h0000000000000004 &&
	  byte_addr__h2222 != 64'h0000000000004004 &&
	  byte_addr__h2222 != 64'h000000000000BFFC)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && byte_addr__h2222 != 64'h0 &&
	  byte_addr__h2222 != 64'h0000000000004000 &&
	  byte_addr__h2222 != 64'h000000000000BFF8 &&
	  byte_addr__h2222 != 64'h0000000000000004 &&
	  byte_addr__h2222 != 64'h0000000000004004 &&
	  byte_addr__h2222 != 64'h000000000000BFFC)
	$write("'h%h", slave_xactor_f_rd_addr$D_OUT[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && byte_addr__h2222 != 64'h0 &&
	  byte_addr__h2222 != 64'h0000000000004000 &&
	  byte_addr__h2222 != 64'h000000000000BFF8 &&
	  byte_addr__h2222 != 64'h0000000000000004 &&
	  byte_addr__h2222 != 64'h0000000000004004 &&
	  byte_addr__h2222 != 64'h000000000000BFFC)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && byte_addr__h2222 != 64'h0 &&
	  byte_addr__h2222 != 64'h0000000000004000 &&
	  byte_addr__h2222 != 64'h000000000000BFF8 &&
	  byte_addr__h2222 != 64'h0000000000000004 &&
	  byte_addr__h2222 != 64'h0000000000004004 &&
	  byte_addr__h2222 != 64'h000000000000BFFC)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && byte_addr__h2222 != 64'h0 &&
	  byte_addr__h2222 != 64'h0000000000004000 &&
	  byte_addr__h2222 != 64'h000000000000BFF8 &&
	  byte_addr__h2222 != 64'h0000000000000004 &&
	  byte_addr__h2222 != 64'h0000000000004004 &&
	  byte_addr__h2222 != 64'h000000000000BFFC)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_4___d25)
	begin
	  v__h2575 = $stime;
	  #0;
	end
    v__h2569 = v__h2575 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_4___d25)
	$display("%0d: Timer.rl_process_rd_req: ", v__h2569);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_4___d25)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_4___d25)
	$write("AXI4_Lite_Rd_Addr { ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_4___d25)
	$write("'h%h", slave_xactor_f_rd_addr$D_OUT[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_4___d25)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_4___d25)
	$write("'h%h", slave_xactor_f_rd_addr$D_OUT[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_4___d25)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_4___d25)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_4___d25)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_4___d25)
	$write("     => ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_4___d25)
	$write("AXI4_Lite_Rd_Data { ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_4___d25 &&
	  (byte_addr__h2222 == 64'h0 ||
	   byte_addr__h2222 == 64'h0000000000004000 ||
	   byte_addr__h2222 == 64'h000000000000BFF8 ||
	   byte_addr__h2222 == 64'h0000000000000004 ||
	   byte_addr__h2222 == 64'h0000000000004004 ||
	   byte_addr__h2222 == 64'h000000000000BFFC))
	$write("AXI4_LITE_OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_4___d25 &&
	  byte_addr__h2222 != 64'h0 &&
	  byte_addr__h2222 != 64'h0000000000004000 &&
	  byte_addr__h2222 != 64'h000000000000BFF8 &&
	  byte_addr__h2222 != 64'h0000000000000004 &&
	  byte_addr__h2222 != 64'h0000000000004004 &&
	  byte_addr__h2222 != 64'h000000000000BFFC)
	$write("AXI4_LITE_SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_4___d25)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_4___d25)
	$write("'h%h", rdr_rdata__h2444);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_4___d25)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_4___d25)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req &&
	  NOT_cfg_verbosity_read_ULE_1_4___d25)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && cfg_verbosity != 4'd0)
	begin
	  v__h1918 = $stime;
	  #0;
	end
    v__h1912 = v__h1918 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && cfg_verbosity != 4'd0)
	$display("%0d: Timer.rl_reset", v__h1912);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && byte_addr__h2775 != 64'h0 &&
	  byte_addr__h2775 != 64'h0000000000004000 &&
	  byte_addr__h2775 != 64'h000000000000BFF8 &&
	  byte_addr__h2775 != 64'h0000000000000004 &&
	  byte_addr__h2775 != 64'h0000000000004004 &&
	  byte_addr__h2775 != 64'h000000000000BFFC)
	begin
	  v__h3417 = $stime;
	  #0;
	end
    v__h3411 = v__h3417 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && byte_addr__h2775 != 64'h0 &&
	  byte_addr__h2775 != 64'h0000000000004000 &&
	  byte_addr__h2775 != 64'h000000000000BFF8 &&
	  byte_addr__h2775 != 64'h0000000000000004 &&
	  byte_addr__h2775 != 64'h0000000000004004 &&
	  byte_addr__h2775 != 64'h000000000000BFFC)
	$display("%0d: ERROR: Timer.rl_process_wr_req: unrecognized addr",
		 v__h3411);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && byte_addr__h2775 != 64'h0 &&
	  byte_addr__h2775 != 64'h0000000000004000 &&
	  byte_addr__h2775 != 64'h000000000000BFF8 &&
	  byte_addr__h2775 != 64'h0000000000000004 &&
	  byte_addr__h2775 != 64'h0000000000004004 &&
	  byte_addr__h2775 != 64'h000000000000BFFC)
	$write("            ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && byte_addr__h2775 != 64'h0 &&
	  byte_addr__h2775 != 64'h0000000000004000 &&
	  byte_addr__h2775 != 64'h000000000000BFF8 &&
	  byte_addr__h2775 != 64'h0000000000000004 &&
	  byte_addr__h2775 != 64'h0000000000004004 &&
	  byte_addr__h2775 != 64'h000000000000BFFC)
	$write("AXI4_Lite_Wr_Addr { ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && byte_addr__h2775 != 64'h0 &&
	  byte_addr__h2775 != 64'h0000000000004000 &&
	  byte_addr__h2775 != 64'h000000000000BFF8 &&
	  byte_addr__h2775 != 64'h0000000000000004 &&
	  byte_addr__h2775 != 64'h0000000000004004 &&
	  byte_addr__h2775 != 64'h000000000000BFFC)
	$write("'h%h", slave_xactor_f_wr_addr$D_OUT[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && byte_addr__h2775 != 64'h0 &&
	  byte_addr__h2775 != 64'h0000000000004000 &&
	  byte_addr__h2775 != 64'h000000000000BFF8 &&
	  byte_addr__h2775 != 64'h0000000000000004 &&
	  byte_addr__h2775 != 64'h0000000000004004 &&
	  byte_addr__h2775 != 64'h000000000000BFFC)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && byte_addr__h2775 != 64'h0 &&
	  byte_addr__h2775 != 64'h0000000000004000 &&
	  byte_addr__h2775 != 64'h000000000000BFF8 &&
	  byte_addr__h2775 != 64'h0000000000000004 &&
	  byte_addr__h2775 != 64'h0000000000004004 &&
	  byte_addr__h2775 != 64'h000000000000BFFC)
	$write("'h%h", slave_xactor_f_wr_addr$D_OUT[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && byte_addr__h2775 != 64'h0 &&
	  byte_addr__h2775 != 64'h0000000000004000 &&
	  byte_addr__h2775 != 64'h000000000000BFF8 &&
	  byte_addr__h2775 != 64'h0000000000000004 &&
	  byte_addr__h2775 != 64'h0000000000004004 &&
	  byte_addr__h2775 != 64'h000000000000BFFC)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && byte_addr__h2775 != 64'h0 &&
	  byte_addr__h2775 != 64'h0000000000004000 &&
	  byte_addr__h2775 != 64'h000000000000BFF8 &&
	  byte_addr__h2775 != 64'h0000000000000004 &&
	  byte_addr__h2775 != 64'h0000000000004004 &&
	  byte_addr__h2775 != 64'h000000000000BFFC)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && byte_addr__h2775 != 64'h0 &&
	  byte_addr__h2775 != 64'h0000000000004000 &&
	  byte_addr__h2775 != 64'h000000000000BFF8 &&
	  byte_addr__h2775 != 64'h0000000000000004 &&
	  byte_addr__h2775 != 64'h0000000000004004 &&
	  byte_addr__h2775 != 64'h000000000000BFFC)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && byte_addr__h2775 != 64'h0 &&
	  byte_addr__h2775 != 64'h0000000000004000 &&
	  byte_addr__h2775 != 64'h000000000000BFF8 &&
	  byte_addr__h2775 != 64'h0000000000000004 &&
	  byte_addr__h2775 != 64'h0000000000004004 &&
	  byte_addr__h2775 != 64'h000000000000BFFC)
	$write("            ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && byte_addr__h2775 != 64'h0 &&
	  byte_addr__h2775 != 64'h0000000000004000 &&
	  byte_addr__h2775 != 64'h000000000000BFF8 &&
	  byte_addr__h2775 != 64'h0000000000000004 &&
	  byte_addr__h2775 != 64'h0000000000004004 &&
	  byte_addr__h2775 != 64'h000000000000BFFC)
	$write("AXI4_Lite_Wr_Data { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && byte_addr__h2775 != 64'h0 &&
	  byte_addr__h2775 != 64'h0000000000004000 &&
	  byte_addr__h2775 != 64'h000000000000BFF8 &&
	  byte_addr__h2775 != 64'h0000000000000004 &&
	  byte_addr__h2775 != 64'h0000000000004004 &&
	  byte_addr__h2775 != 64'h000000000000BFFC)
	$write("'h%h", slave_xactor_f_wr_data$D_OUT[71:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && byte_addr__h2775 != 64'h0 &&
	  byte_addr__h2775 != 64'h0000000000004000 &&
	  byte_addr__h2775 != 64'h000000000000BFF8 &&
	  byte_addr__h2775 != 64'h0000000000000004 &&
	  byte_addr__h2775 != 64'h0000000000004004 &&
	  byte_addr__h2775 != 64'h000000000000BFFC)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && byte_addr__h2775 != 64'h0 &&
	  byte_addr__h2775 != 64'h0000000000004000 &&
	  byte_addr__h2775 != 64'h000000000000BFF8 &&
	  byte_addr__h2775 != 64'h0000000000000004 &&
	  byte_addr__h2775 != 64'h0000000000004004 &&
	  byte_addr__h2775 != 64'h000000000000BFFC)
	$write("'h%h", slave_xactor_f_wr_data$D_OUT[7:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && byte_addr__h2775 != 64'h0 &&
	  byte_addr__h2775 != 64'h0000000000004000 &&
	  byte_addr__h2775 != 64'h000000000000BFF8 &&
	  byte_addr__h2775 != 64'h0000000000000004 &&
	  byte_addr__h2775 != 64'h0000000000004004 &&
	  byte_addr__h2775 != 64'h000000000000BFFC)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_4___d25)
	begin
	  v__h3620 = $stime;
	  #0;
	end
    v__h3614 = v__h3620 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_4___d25)
	$display("%0d: Timer.rl_process_wr_req", v__h3614);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_4___d25)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_4___d25)
	$write("AXI4_Lite_Wr_Addr { ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_4___d25)
	$write("'h%h", slave_xactor_f_wr_addr$D_OUT[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_4___d25)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_4___d25)
	$write("'h%h", slave_xactor_f_wr_addr$D_OUT[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_4___d25)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_4___d25)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_4___d25)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_4___d25)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_4___d25)
	$write("AXI4_Lite_Wr_Data { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_4___d25)
	$write("'h%h", slave_xactor_f_wr_data$D_OUT[71:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_4___d25)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_4___d25)
	$write("'h%h", slave_xactor_f_wr_data$D_OUT[7:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_4___d25)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_4___d25)
	$write("     => ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_4___d25)
	$write("AXI4_Lite_Wr_Resp { ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_4___d25 &&
	  (byte_addr__h2775 == 64'h0 ||
	   byte_addr__h2775 == 64'h0000000000004000 ||
	   byte_addr__h2775 == 64'h000000000000BFF8 ||
	   byte_addr__h2775 == 64'h0000000000000004 ||
	   byte_addr__h2775 == 64'h0000000000004004 ||
	   byte_addr__h2775 == 64'h000000000000BFFC))
	$write("AXI4_LITE_OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_4___d25 &&
	  byte_addr__h2775 != 64'h0 &&
	  byte_addr__h2775 != 64'h0000000000004000 &&
	  byte_addr__h2775 != 64'h000000000000BFF8 &&
	  byte_addr__h2775 != 64'h0000000000000004 &&
	  byte_addr__h2775 != 64'h0000000000004004 &&
	  byte_addr__h2775 != 64'h000000000000BFFC)
	$write("AXI4_LITE_SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_4___d25)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_4___d25)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req &&
	  NOT_cfg_verbosity_read_ULE_1_4___d25)
	$write("\n");
    if (EN_set_addr_map && set_addr_map_addr_base[1:0] != 2'd0)
      begin
        v__h3931 = $stime;
	#0;
      end
    v__h3925 = v__h3931 / 32'd10;
    if (EN_set_addr_map && set_addr_map_addr_base[1:0] != 2'd0)
      $display("%0d: WARNING: Timer.set_addr_map: addr_base 0x%0h is not 4-Byte-aligned",
	       v__h3925,
	       set_addr_map_addr_base);
    if (EN_set_addr_map && set_addr_map_addr_lim[1:0] != 2'd0)
      begin
        v__h4041 = $stime;
	#0;
      end
    v__h4035 = v__h4041 / 32'd10;
    if (EN_set_addr_map && set_addr_map_addr_lim[1:0] != 2'd0)
      $display("%0d: WARNING: Timer.set_addr_map: addr_lim 0x%0h is not 4-Byte-aligned",
	       v__h4035,
	       set_addr_map_addr_lim);
  end
  // synopsys translate_on
endmodule  // mkTimer

