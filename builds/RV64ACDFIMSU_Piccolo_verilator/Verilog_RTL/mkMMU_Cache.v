//
// Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
//
// On Fri Jan 18 12:48:52 EST 2019
//
//
// Ports:
// Name                         I/O  size props
// RDY_set_verbosity              O     1 const
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1
// valid                          O     1
// addr                           O    64 reg
// word64                         O    64
// st_amo_val                     O    64
// exc                            O     1
// exc_code                       O     4 reg
// RDY_server_flush_request_put   O     1 reg
// RDY_server_flush_response_get  O     1
// RDY_tlb_flush                  O     1 const
// mem_master_awvalid             O     1
// mem_master_awaddr              O    64 reg
// mem_master_awprot              O     3 reg
// mem_master_wvalid              O     1
// mem_master_wdata               O    64 reg
// mem_master_wstrb               O     8 reg
// mem_master_bready              O     1
// mem_master_arvalid             O     1
// mem_master_araddr              O    64 reg
// mem_master_arprot              O     3 reg
// mem_master_rready              O     1
// near_mem_io_client_request_get  O   137 reg
// RDY_near_mem_io_client_request_get  O     1 reg
// RDY_near_mem_io_client_response_put  O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_verbosity_verbosity        I     4 reg
// req_op                         I     2
// req_f3                         I     3
// req_amo_funct7                 I     7 reg
// req_addr                       I    64
// req_st_value                   I    64
// req_priv                       I     2 reg
// req_sstatus_SUM                I     1 reg
// req_mstatus_MXR                I     1 reg
// req_satp                       I    64 reg
// mem_master_awready             I     1
// mem_master_wready              I     1
// mem_master_bvalid              I     1
// mem_master_bresp               I     2 reg
// mem_master_arready             I     1
// mem_master_rvalid              I     1
// mem_master_rresp               I     2 reg
// mem_master_rdata               I    64 reg
// near_mem_io_client_response_put  I    66 reg
// EN_set_verbosity               I     1
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_req                         I     1
// EN_server_flush_request_put    I     1
// EN_server_flush_response_get   I     1
// EN_tlb_flush                   I     1
// EN_near_mem_io_client_response_put  I     1
// EN_near_mem_io_client_request_get  I     1
//
// Combinational paths from inputs to outputs:
//   (mem_master_awready, mem_master_wready) -> valid
//   (mem_master_awready, mem_master_wready) -> word64
//   (mem_master_awready, mem_master_wready) -> st_amo_val
//   (mem_master_awready, mem_master_wready) -> mem_master_bready
//   (mem_master_awready,
//    mem_master_wready,
//    mem_master_arready,
//    EN_req) -> mem_master_rready
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMMU_Cache(CLK,
		   RST_N,

		   set_verbosity_verbosity,
		   EN_set_verbosity,
		   RDY_set_verbosity,

		   EN_server_reset_request_put,
		   RDY_server_reset_request_put,

		   EN_server_reset_response_get,
		   RDY_server_reset_response_get,

		   req_op,
		   req_f3,
		   req_amo_funct7,
		   req_addr,
		   req_st_value,
		   req_priv,
		   req_sstatus_SUM,
		   req_mstatus_MXR,
		   req_satp,
		   EN_req,

		   valid,

		   addr,

		   word64,

		   st_amo_val,

		   exc,

		   exc_code,

		   EN_server_flush_request_put,
		   RDY_server_flush_request_put,

		   EN_server_flush_response_get,
		   RDY_server_flush_response_get,

		   EN_tlb_flush,
		   RDY_tlb_flush,

		   mem_master_awvalid,

		   mem_master_awaddr,

		   mem_master_awprot,

		   mem_master_awready,

		   mem_master_wvalid,

		   mem_master_wdata,

		   mem_master_wstrb,

		   mem_master_wready,

		   mem_master_bvalid,
		   mem_master_bresp,

		   mem_master_bready,

		   mem_master_arvalid,

		   mem_master_araddr,

		   mem_master_arprot,

		   mem_master_arready,

		   mem_master_rvalid,
		   mem_master_rresp,
		   mem_master_rdata,

		   mem_master_rready,

		   EN_near_mem_io_client_request_get,
		   near_mem_io_client_request_get,
		   RDY_near_mem_io_client_request_get,

		   near_mem_io_client_response_put,
		   EN_near_mem_io_client_response_put,
		   RDY_near_mem_io_client_response_put);
  parameter [0 : 0] dmem_not_imem = 1'b0;
  input  CLK;
  input  RST_N;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // action method req
  input  [1 : 0] req_op;
  input  [2 : 0] req_f3;
  input  [6 : 0] req_amo_funct7;
  input  [63 : 0] req_addr;
  input  [63 : 0] req_st_value;
  input  [1 : 0] req_priv;
  input  req_sstatus_SUM;
  input  req_mstatus_MXR;
  input  [63 : 0] req_satp;
  input  EN_req;

  // value method valid
  output valid;

  // value method addr
  output [63 : 0] addr;

  // value method word64
  output [63 : 0] word64;

  // value method st_amo_val
  output [63 : 0] st_amo_val;

  // value method exc
  output exc;

  // value method exc_code
  output [3 : 0] exc_code;

  // action method server_flush_request_put
  input  EN_server_flush_request_put;
  output RDY_server_flush_request_put;

  // action method server_flush_response_get
  input  EN_server_flush_response_get;
  output RDY_server_flush_response_get;

  // action method tlb_flush
  input  EN_tlb_flush;
  output RDY_tlb_flush;

  // value method mem_master_m_awvalid
  output mem_master_awvalid;

  // value method mem_master_m_awaddr
  output [63 : 0] mem_master_awaddr;

  // value method mem_master_m_awprot
  output [2 : 0] mem_master_awprot;

  // value method mem_master_m_awuser

  // action method mem_master_m_awready
  input  mem_master_awready;

  // value method mem_master_m_wvalid
  output mem_master_wvalid;

  // value method mem_master_m_wdata
  output [63 : 0] mem_master_wdata;

  // value method mem_master_m_wstrb
  output [7 : 0] mem_master_wstrb;

  // action method mem_master_m_wready
  input  mem_master_wready;

  // action method mem_master_m_bvalid
  input  mem_master_bvalid;
  input  [1 : 0] mem_master_bresp;

  // value method mem_master_m_bready
  output mem_master_bready;

  // value method mem_master_m_arvalid
  output mem_master_arvalid;

  // value method mem_master_m_araddr
  output [63 : 0] mem_master_araddr;

  // value method mem_master_m_arprot
  output [2 : 0] mem_master_arprot;

  // value method mem_master_m_aruser

  // action method mem_master_m_arready
  input  mem_master_arready;

  // action method mem_master_m_rvalid
  input  mem_master_rvalid;
  input  [1 : 0] mem_master_rresp;
  input  [63 : 0] mem_master_rdata;

  // value method mem_master_m_rready
  output mem_master_rready;

  // actionvalue method near_mem_io_client_request_get
  input  EN_near_mem_io_client_request_get;
  output [136 : 0] near_mem_io_client_request_get;
  output RDY_near_mem_io_client_request_get;

  // action method near_mem_io_client_response_put
  input  [65 : 0] near_mem_io_client_response_put;
  input  EN_near_mem_io_client_response_put;
  output RDY_near_mem_io_client_response_put;

  // signals for module outputs
  reg [63 : 0] word64;
  wire [136 : 0] near_mem_io_client_request_get;
  wire [63 : 0] addr,
		mem_master_araddr,
		mem_master_awaddr,
		mem_master_wdata,
		st_amo_val;
  wire [7 : 0] mem_master_wstrb;
  wire [3 : 0] exc_code;
  wire [2 : 0] mem_master_arprot, mem_master_awprot;
  wire RDY_near_mem_io_client_request_get,
       RDY_near_mem_io_client_response_put,
       RDY_server_flush_request_put,
       RDY_server_flush_response_get,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_set_verbosity,
       RDY_tlb_flush,
       exc,
       mem_master_arvalid,
       mem_master_awvalid,
       mem_master_bready,
       mem_master_rready,
       mem_master_wvalid,
       valid;

  // inlined wires
  reg [3 : 0] ctr_wr_rsps_pending_crg$port0__write_1;
  wire [3 : 0] ctr_wr_rsps_pending_crg$port1__write_1,
	       ctr_wr_rsps_pending_crg$port2__read,
	       ctr_wr_rsps_pending_crg$port3__read;
  wire ctr_wr_rsps_pending_crg$EN_port0__write,
       ctr_wr_rsps_pending_crg$EN_port2__write,
       dw_valid$whas,
       master_xactor_crg_rd_addr_full$EN_port0__write,
       master_xactor_crg_rd_addr_full$EN_port1__write,
       master_xactor_crg_rd_addr_full$EN_port2__write,
       master_xactor_crg_rd_addr_full$port1__read,
       master_xactor_crg_rd_addr_full$port2__read,
       master_xactor_crg_rd_addr_full$port3__read,
       master_xactor_crg_rd_data_full$EN_port0__write,
       master_xactor_crg_rd_data_full$EN_port1__write,
       master_xactor_crg_rd_data_full$EN_port2__write,
       master_xactor_crg_rd_data_full$port1__read,
       master_xactor_crg_rd_data_full$port2__read,
       master_xactor_crg_rd_data_full$port3__read,
       master_xactor_crg_wr_addr_full$EN_port0__write,
       master_xactor_crg_wr_addr_full$EN_port1__write,
       master_xactor_crg_wr_addr_full$EN_port2__write,
       master_xactor_crg_wr_addr_full$port1__read,
       master_xactor_crg_wr_addr_full$port2__read,
       master_xactor_crg_wr_addr_full$port3__read,
       master_xactor_crg_wr_data_full$EN_port0__write,
       master_xactor_crg_wr_data_full$EN_port1__write,
       master_xactor_crg_wr_data_full$EN_port2__write,
       master_xactor_crg_wr_data_full$port1__read,
       master_xactor_crg_wr_data_full$port2__read,
       master_xactor_crg_wr_data_full$port3__read,
       master_xactor_crg_wr_resp_full$EN_port0__write,
       master_xactor_crg_wr_resp_full$EN_port2__write,
       master_xactor_crg_wr_resp_full$port1__read,
       master_xactor_crg_wr_resp_full$port2__read,
       master_xactor_crg_wr_resp_full$port3__read;

  // register cfg_verbosity
  reg [3 : 0] cfg_verbosity;
  wire [3 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register ctr_wr_rsps_pending_crg
  reg [3 : 0] ctr_wr_rsps_pending_crg;
  wire [3 : 0] ctr_wr_rsps_pending_crg$D_IN;
  wire ctr_wr_rsps_pending_crg$EN;

  // register master_xactor_crg_rd_addr_full
  reg master_xactor_crg_rd_addr_full;
  wire master_xactor_crg_rd_addr_full$D_IN, master_xactor_crg_rd_addr_full$EN;

  // register master_xactor_crg_rd_data_full
  reg master_xactor_crg_rd_data_full;
  wire master_xactor_crg_rd_data_full$D_IN, master_xactor_crg_rd_data_full$EN;

  // register master_xactor_crg_wr_addr_full
  reg master_xactor_crg_wr_addr_full;
  wire master_xactor_crg_wr_addr_full$D_IN, master_xactor_crg_wr_addr_full$EN;

  // register master_xactor_crg_wr_data_full
  reg master_xactor_crg_wr_data_full;
  wire master_xactor_crg_wr_data_full$D_IN, master_xactor_crg_wr_data_full$EN;

  // register master_xactor_crg_wr_resp_full
  reg master_xactor_crg_wr_resp_full;
  wire master_xactor_crg_wr_resp_full$D_IN, master_xactor_crg_wr_resp_full$EN;

  // register master_xactor_rg_rd_addr
  reg [66 : 0] master_xactor_rg_rd_addr;
  reg [66 : 0] master_xactor_rg_rd_addr$D_IN;
  wire master_xactor_rg_rd_addr$EN;

  // register master_xactor_rg_rd_data
  reg [65 : 0] master_xactor_rg_rd_data;
  wire [65 : 0] master_xactor_rg_rd_data$D_IN;
  wire master_xactor_rg_rd_data$EN;

  // register master_xactor_rg_wr_addr
  reg [66 : 0] master_xactor_rg_wr_addr;
  reg [66 : 0] master_xactor_rg_wr_addr$D_IN;
  wire master_xactor_rg_wr_addr$EN;

  // register master_xactor_rg_wr_data
  reg [71 : 0] master_xactor_rg_wr_data;
  reg [71 : 0] master_xactor_rg_wr_data$D_IN;
  wire master_xactor_rg_wr_data$EN;

  // register master_xactor_rg_wr_resp
  reg [1 : 0] master_xactor_rg_wr_resp;
  wire [1 : 0] master_xactor_rg_wr_resp$D_IN;
  wire master_xactor_rg_wr_resp$EN;

  // register rg_addr
  reg [63 : 0] rg_addr;
  wire [63 : 0] rg_addr$D_IN;
  wire rg_addr$EN;

  // register rg_amo_funct7
  reg [6 : 0] rg_amo_funct7;
  wire [6 : 0] rg_amo_funct7$D_IN;
  wire rg_amo_funct7$EN;

  // register rg_cset_in_cache
  reg [5 : 0] rg_cset_in_cache;
  wire [5 : 0] rg_cset_in_cache$D_IN;
  wire rg_cset_in_cache$EN;

  // register rg_error_during_refill
  reg rg_error_during_refill;
  wire rg_error_during_refill$D_IN, rg_error_during_refill$EN;

  // register rg_exc_code
  reg [3 : 0] rg_exc_code;
  reg [3 : 0] rg_exc_code$D_IN;
  wire rg_exc_code$EN;

  // register rg_f3
  reg [2 : 0] rg_f3;
  wire [2 : 0] rg_f3$D_IN;
  wire rg_f3$EN;

  // register rg_ld_val
  reg [63 : 0] rg_ld_val;
  reg [63 : 0] rg_ld_val$D_IN;
  wire rg_ld_val$EN;

  // register rg_lower_word32
  reg [31 : 0] rg_lower_word32;
  wire [31 : 0] rg_lower_word32$D_IN;
  wire rg_lower_word32$EN;

  // register rg_lower_word32_full
  reg rg_lower_word32_full;
  wire rg_lower_word32_full$D_IN, rg_lower_word32_full$EN;

  // register rg_lrsc_pa
  reg [63 : 0] rg_lrsc_pa;
  wire [63 : 0] rg_lrsc_pa$D_IN;
  wire rg_lrsc_pa$EN;

  // register rg_lrsc_valid
  reg rg_lrsc_valid;
  wire rg_lrsc_valid$D_IN, rg_lrsc_valid$EN;

  // register rg_mstatus_MXR
  reg rg_mstatus_MXR;
  wire rg_mstatus_MXR$D_IN, rg_mstatus_MXR$EN;

  // register rg_op
  reg [1 : 0] rg_op;
  wire [1 : 0] rg_op$D_IN;
  wire rg_op$EN;

  // register rg_pa
  reg [63 : 0] rg_pa;
  wire [63 : 0] rg_pa$D_IN;
  wire rg_pa$EN;

  // register rg_priv
  reg [1 : 0] rg_priv;
  wire [1 : 0] rg_priv$D_IN;
  wire rg_priv$EN;

  // register rg_pte_pa
  reg [63 : 0] rg_pte_pa;
  reg [63 : 0] rg_pte_pa$D_IN;
  wire rg_pte_pa$EN;

  // register rg_req_byte_in_cline
  reg [63 : 0] rg_req_byte_in_cline;
  wire [63 : 0] rg_req_byte_in_cline$D_IN;
  wire rg_req_byte_in_cline$EN;

  // register rg_requesting_cline
  reg rg_requesting_cline;
  reg rg_requesting_cline$D_IN;
  wire rg_requesting_cline$EN;

  // register rg_satp
  reg [63 : 0] rg_satp;
  wire [63 : 0] rg_satp$D_IN;
  wire rg_satp$EN;

  // register rg_sstatus_SUM
  reg rg_sstatus_SUM;
  wire rg_sstatus_SUM$D_IN, rg_sstatus_SUM$EN;

  // register rg_st_amo_val
  reg [63 : 0] rg_st_amo_val;
  wire [63 : 0] rg_st_amo_val$D_IN;
  wire rg_st_amo_val$EN;

  // register rg_state
  reg [4 : 0] rg_state;
  reg [4 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // register rg_word64_set_in_cache
  reg [8 : 0] rg_word64_set_in_cache;
  wire [8 : 0] rg_word64_set_in_cache$D_IN;
  wire rg_word64_set_in_cache$EN;

  // ports of submodule f_near_mem_io_reqs
  wire [136 : 0] f_near_mem_io_reqs$D_IN, f_near_mem_io_reqs$D_OUT;
  wire f_near_mem_io_reqs$CLR,
       f_near_mem_io_reqs$DEQ,
       f_near_mem_io_reqs$EMPTY_N,
       f_near_mem_io_reqs$ENQ,
       f_near_mem_io_reqs$FULL_N;

  // ports of submodule f_near_mem_io_rsps
  wire [65 : 0] f_near_mem_io_rsps$D_IN, f_near_mem_io_rsps$D_OUT;
  wire f_near_mem_io_rsps$CLR,
       f_near_mem_io_rsps$DEQ,
       f_near_mem_io_rsps$EMPTY_N,
       f_near_mem_io_rsps$ENQ,
       f_near_mem_io_rsps$FULL_N;

  // ports of submodule f_reset_reqs
  wire f_reset_reqs$CLR,
       f_reset_reqs$DEQ,
       f_reset_reqs$D_IN,
       f_reset_reqs$D_OUT,
       f_reset_reqs$EMPTY_N,
       f_reset_reqs$ENQ,
       f_reset_reqs$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$D_IN,
       f_reset_rsps$D_OUT,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule ram_state_and_ctag_cset
  wire [52 : 0] ram_state_and_ctag_cset$DIA,
		ram_state_and_ctag_cset$DIB,
		ram_state_and_ctag_cset$DOB;
  wire [5 : 0] ram_state_and_ctag_cset$ADDRA, ram_state_and_ctag_cset$ADDRB;
  wire ram_state_and_ctag_cset$ENA,
       ram_state_and_ctag_cset$ENB,
       ram_state_and_ctag_cset$WEA,
       ram_state_and_ctag_cset$WEB;

  // ports of submodule ram_word64_set
  reg [63 : 0] ram_word64_set$DIB;
  reg [8 : 0] ram_word64_set$ADDRB;
  wire [63 : 0] ram_word64_set$DIA, ram_word64_set$DOB;
  wire [8 : 0] ram_word64_set$ADDRA;
  wire ram_word64_set$ENA,
       ram_word64_set$ENB,
       ram_word64_set$WEA,
       ram_word64_set$WEB;

  // ports of submodule soc_map
  wire [63 : 0] soc_map$m_is_IO_addr_addr,
		soc_map$m_is_mem_addr_addr,
		soc_map$m_is_near_mem_IO_addr_addr;
  wire soc_map$m_is_IO_addr, soc_map$m_is_near_mem_IO_addr;

  // ports of submodule tlb
  reg [1 : 0] tlb$insert_level;
  wire [130 : 0] tlb$lookup;
  wire [63 : 0] tlb$insert_pte, tlb$insert_pte_pa;
  wire [26 : 0] tlb$insert_vpn, tlb$lookup_vpn;
  wire [15 : 0] tlb$insert_asid, tlb$lookup_asid;
  wire tlb$EN_flush, tlb$EN_insert, tlb$RDY_insert, tlb$RDY_lookup;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_ST_AMO_response,
       CAN_FIRE_RL_rl_cache_refill_req_loop,
       CAN_FIRE_RL_rl_cache_refill_rsps_loop,
       CAN_FIRE_RL_rl_discard_write_rsp,
       CAN_FIRE_RL_rl_drive_exception_rsp,
       CAN_FIRE_RL_rl_io_AMO_SC_req,
       CAN_FIRE_RL_rl_io_AMO_op_req,
       CAN_FIRE_RL_rl_io_AMO_read_rsp,
       CAN_FIRE_RL_rl_io_near_mem_read_req,
       CAN_FIRE_RL_rl_io_near_mem_read_rsp,
       CAN_FIRE_RL_rl_io_near_mem_write_req,
       CAN_FIRE_RL_rl_io_near_mem_write_rsp,
       CAN_FIRE_RL_rl_io_read_req,
       CAN_FIRE_RL_rl_io_read_rsp,
       CAN_FIRE_RL_rl_io_write_req,
       CAN_FIRE_RL_rl_maintain_io_read_rsp,
       CAN_FIRE_RL_rl_probe_and_immed_rsp,
       CAN_FIRE_RL_rl_ptw_level_0,
       CAN_FIRE_RL_rl_ptw_level_1,
       CAN_FIRE_RL_rl_ptw_level_2,
       CAN_FIRE_RL_rl_rereq,
       CAN_FIRE_RL_rl_reset,
       CAN_FIRE_RL_rl_start_cache_refill,
       CAN_FIRE_RL_rl_start_reset,
       CAN_FIRE_RL_rl_start_tlb_refill,
       CAN_FIRE_mem_master_m_arready,
       CAN_FIRE_mem_master_m_awready,
       CAN_FIRE_mem_master_m_bvalid,
       CAN_FIRE_mem_master_m_rvalid,
       CAN_FIRE_mem_master_m_wready,
       CAN_FIRE_near_mem_io_client_request_get,
       CAN_FIRE_near_mem_io_client_response_put,
       CAN_FIRE_req,
       CAN_FIRE_server_flush_request_put,
       CAN_FIRE_server_flush_response_get,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_tlb_flush,
       WILL_FIRE_RL_rl_ST_AMO_response,
       WILL_FIRE_RL_rl_cache_refill_req_loop,
       WILL_FIRE_RL_rl_cache_refill_rsps_loop,
       WILL_FIRE_RL_rl_discard_write_rsp,
       WILL_FIRE_RL_rl_drive_exception_rsp,
       WILL_FIRE_RL_rl_io_AMO_SC_req,
       WILL_FIRE_RL_rl_io_AMO_op_req,
       WILL_FIRE_RL_rl_io_AMO_read_rsp,
       WILL_FIRE_RL_rl_io_near_mem_read_req,
       WILL_FIRE_RL_rl_io_near_mem_read_rsp,
       WILL_FIRE_RL_rl_io_near_mem_write_req,
       WILL_FIRE_RL_rl_io_near_mem_write_rsp,
       WILL_FIRE_RL_rl_io_read_req,
       WILL_FIRE_RL_rl_io_read_rsp,
       WILL_FIRE_RL_rl_io_write_req,
       WILL_FIRE_RL_rl_maintain_io_read_rsp,
       WILL_FIRE_RL_rl_probe_and_immed_rsp,
       WILL_FIRE_RL_rl_ptw_level_0,
       WILL_FIRE_RL_rl_ptw_level_1,
       WILL_FIRE_RL_rl_ptw_level_2,
       WILL_FIRE_RL_rl_rereq,
       WILL_FIRE_RL_rl_reset,
       WILL_FIRE_RL_rl_start_cache_refill,
       WILL_FIRE_RL_rl_start_reset,
       WILL_FIRE_RL_rl_start_tlb_refill,
       WILL_FIRE_mem_master_m_arready,
       WILL_FIRE_mem_master_m_awready,
       WILL_FIRE_mem_master_m_bvalid,
       WILL_FIRE_mem_master_m_rvalid,
       WILL_FIRE_mem_master_m_wready,
       WILL_FIRE_near_mem_io_client_request_get,
       WILL_FIRE_near_mem_io_client_response_put,
       WILL_FIRE_req,
       WILL_FIRE_server_flush_request_put,
       WILL_FIRE_server_flush_response_get,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_tlb_flush;

  // inputs to muxes for submodule ports
  reg [63 : 0] MUX_dw_output_ld_val$wset_1__VAL_1,
	       MUX_dw_output_ld_val$wset_1__VAL_2,
	       MUX_dw_output_ld_val$wset_1__VAL_3,
	       MUX_dw_output_ld_val$wset_1__VAL_6;
  wire [136 : 0] MUX_f_near_mem_io_reqs$enq_1__VAL_1,
		 MUX_f_near_mem_io_reqs$enq_1__VAL_2;
  wire [71 : 0] MUX_master_xactor_rg_wr_data$write_1__VAL_1,
		MUX_master_xactor_rg_wr_data$write_1__VAL_2,
		MUX_master_xactor_rg_wr_data$write_1__VAL_3;
  wire [66 : 0] MUX_master_xactor_rg_rd_addr$write_1__VAL_1,
		MUX_master_xactor_rg_rd_addr$write_1__VAL_2,
		MUX_master_xactor_rg_rd_addr$write_1__VAL_3,
		MUX_master_xactor_rg_rd_addr$write_1__VAL_4,
		MUX_master_xactor_rg_rd_addr$write_1__VAL_5,
		MUX_master_xactor_rg_rd_addr$write_1__VAL_6,
		MUX_master_xactor_rg_wr_addr$write_1__VAL_1,
		MUX_master_xactor_rg_wr_addr$write_1__VAL_2;
  wire [63 : 0] MUX_dw_output_ld_val$wset_1__VAL_4,
		MUX_ram_word64_set$a_put_3__VAL_2,
		MUX_rg_ld_val$write_1__VAL_2,
		MUX_rg_req_byte_in_cline$write_1__VAL_1;
  wire [52 : 0] MUX_ram_state_and_ctag_cset$a_put_3__VAL_1;
  wire [8 : 0] MUX_ram_word64_set$b_put_2__VAL_2,
	       MUX_ram_word64_set$b_put_2__VAL_4;
  wire [5 : 0] MUX_rg_cset_in_cache$write_1__VAL_1;
  wire [4 : 0] MUX_rg_state$write_1__VAL_10,
	       MUX_rg_state$write_1__VAL_11,
	       MUX_rg_state$write_1__VAL_12,
	       MUX_rg_state$write_1__VAL_13,
	       MUX_rg_state$write_1__VAL_14,
	       MUX_rg_state$write_1__VAL_18,
	       MUX_rg_state$write_1__VAL_3,
	       MUX_rg_state$write_1__VAL_5;
  wire [3 : 0] MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1,
	       MUX_rg_exc_code$write_1__VAL_1,
	       MUX_rg_exc_code$write_1__VAL_7;
  wire MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1,
       MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2,
       MUX_dw_output_ld_val$wset_1__SEL_1,
       MUX_dw_output_ld_val$wset_1__SEL_3,
       MUX_dw_output_ld_val$wset_1__SEL_4,
       MUX_master_xactor_rg_rd_addr$write_1__SEL_1,
       MUX_master_xactor_rg_rd_addr$write_1__SEL_2,
       MUX_master_xactor_rg_rd_addr$write_1__SEL_3,
       MUX_ram_state_and_ctag_cset$b_put_1__SEL_1,
       MUX_ram_word64_set$a_put_1__SEL_1,
       MUX_ram_word64_set$b_put_1__SEL_2,
       MUX_rg_error_during_refill$write_1__SEL_1,
       MUX_rg_exc_code$write_1__SEL_1,
       MUX_rg_exc_code$write_1__SEL_2,
       MUX_rg_exc_code$write_1__SEL_3,
       MUX_rg_exc_code$write_1__SEL_5,
       MUX_rg_exc_code$write_1__SEL_6,
       MUX_rg_exc_code$write_1__SEL_7,
       MUX_rg_exc_code$write_1__SEL_8,
       MUX_rg_exc_code$write_1__SEL_9,
       MUX_rg_ld_val$write_1__SEL_2,
       MUX_rg_lrsc_valid$write_1__SEL_2,
       MUX_rg_state$write_1__SEL_10,
       MUX_rg_state$write_1__SEL_11,
       MUX_rg_state$write_1__SEL_2,
       MUX_rg_state$write_1__SEL_21,
       MUX_tlb$insert_1__SEL_1,
       MUX_tlb$insert_1__SEL_2,
       MUX_tlb$insert_1__SEL_3;

  // remaining internal signals
  reg [63 : 0] CASE_rg_addr_BITS_2_TO_0_0x0_result3817_0x4_re_ETC__q36,
	       CASE_rg_addr_BITS_2_TO_0_0x0_result8374_0x4_re_ETC__q40,
	       CASE_x1_avValue_pa400_BITS_2_TO_0_0x0_ram_word_ETC__q39,
	       CASE_x1_avValue_pa400_BITS_2_TO_0_0x0_ram_word_ETC__q45,
	       IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d616,
	       IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d625,
	       IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d681,
	       IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d690,
	       IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d1221,
	       IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d1238,
	       IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d1245,
	       IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d476,
	       IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d496,
	       IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d506,
	       IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d1206,
	       IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d1231,
	       IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d460,
	       IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d488,
	       IF_rg_f3_39_EQ_0b0_40_THEN_IF_IF_rg_priv_9_ULE_ETC___d634,
	       IF_rg_f3_39_EQ_0b0_40_THEN_IF_IF_rg_priv_9_ULE_ETC___d699,
	       IF_rg_f3_39_EQ_0b10_70_THEN_SEXT_IF_rg_f3_39_E_ETC___d574,
	       _theResult_____2__h14817,
	       _theResult_____2__h32104,
	       _theResult___fst__h5903,
	       io_req_wr_data_wdata__h31968,
	       mem_req_wr_data_wdata__h20101,
	       mem_req_wr_data_wdata__h20859,
	       new_ld_val__h31741,
	       new_value__h18971,
	       new_value__h6704,
	       value__h31014,
	       w1__h14809,
	       w1__h32092,
	       w1__h32096;
  reg [31 : 0] v__h13990,
	       v__h13996,
	       v__h19874,
	       v__h19880,
	       v__h20441,
	       v__h20447,
	       v__h21168,
	       v__h21174,
	       v__h22204,
	       v__h22210,
	       v__h22848,
	       v__h22854,
	       v__h22919,
	       v__h22925,
	       v__h23021,
	       v__h23027,
	       v__h23127,
	       v__h23133,
	       v__h23239,
	       v__h23245,
	       v__h23802,
	       v__h23808,
	       v__h23873,
	       v__h23879,
	       v__h23975,
	       v__h23981,
	       v__h24081,
	       v__h24087,
	       v__h24193,
	       v__h24199,
	       v__h24598,
	       v__h24604,
	       v__h24669,
	       v__h24675,
	       v__h24740,
	       v__h24746,
	       v__h24822,
	       v__h24828,
	       v__h25541,
	       v__h25547,
	       v__h25760,
	       v__h25766,
	       v__h25882,
	       v__h25888,
	       v__h26107,
	       v__h26113,
	       v__h27881,
	       v__h27887,
	       v__h28047,
	       v__h28053,
	       v__h28446,
	       v__h28452,
	       v__h28553,
	       v__h28559,
	       v__h28786,
	       v__h28792,
	       v__h28971,
	       v__h28977,
	       v__h29373,
	       v__h29379,
	       v__h29480,
	       v__h29486,
	       v__h29761,
	       v__h29767,
	       v__h30283,
	       v__h30289,
	       v__h30428,
	       v__h30434,
	       v__h30948,
	       v__h30954,
	       v__h31090,
	       v__h31096,
	       v__h31270,
	       v__h31276,
	       v__h31476,
	       v__h31482,
	       v__h31608,
	       v__h31614,
	       v__h31889,
	       v__h31895,
	       v__h33388,
	       v__h33394,
	       v__h33738,
	       v__h33744,
	       v__h33854,
	       v__h33860,
	       v__h34436,
	       v__h34442,
	       v__h34475,
	       v__h34481,
	       v__h34864,
	       v__h34870,
	       v__h36018,
	       v__h36024,
	       v__h3845,
	       v__h3851,
	       v__h4216,
	       v__h4222,
	       v__h4317,
	       v__h4323,
	       v__h4466,
	       v__h4472;
  reg [7 : 0] io_req_wr_data_wstrb__h31969, mem_req_wr_data_wstrb__h20102;
  reg CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_39_ETC__q35,
      IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d247,
      IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d252,
      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_OR_rg_ad_ETC___d161,
      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_OR_rg_ad_ETC___d169,
      IF_rg_f3_39_BITS_1_TO_0_00_EQ_0b0_01_OR_rg_f3__ETC___d207,
      IF_rg_f3_39_EQ_0b0_40_OR_rg_f3_39_EQ_0b100_41__ETC___d183,
      IF_rg_f3_39_EQ_0b0_40_THEN_IF_IF_rg_priv_9_ULE_ETC___d259;
  wire [63 : 0] IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_1_E_ETC___d521,
		IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_mas_ETC___d1246,
		IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_ram_ETC___d507,
		IF_rg_f3_39_EQ_0b10_70_THEN_SEXT_rg_st_amo_val_ETC___d638,
		IF_rg_op_6_EQ_1_85_OR_rg_op_6_EQ_2_9_AND_rg_am_ETC___d717,
		_theResult___fst__h20219,
		_theResult___fst__h20977,
		_theResult___fst__h30737,
		_theResult___fst__h32086,
		_theResult___fst__h5489,
		_theResult___fst__h5560,
		_theResult___snd_fst__h5491,
		_theResult___snd_fst__h5562,
		_theResult___snd_fst__h6132,
		cline_addr__h25599,
		cline_fabric_addr__h25600,
		io_req_wr_addr_awaddr__h31809,
		lev_0_pte_pa__h23524,
		lev_0_pte_pa_w64_fa__h23526,
		lev_1_PTN_pa__h22496,
		lev_1_pte_pa__h22498,
		lev_1_pte_pa_w64_fa__h22500,
		lev_2_pte_pa__h21995,
		lev_2_pte_pa_w64_fa__h21997,
		mem_req_wr_addr_awaddr__h19990,
		new_st_val__h14821,
		new_st_val__h14913,
		new_st_val__h15893,
		new_st_val__h15897,
		new_st_val__h15901,
		new_st_val__h15905,
		new_st_val__h15910,
		new_st_val__h15916,
		new_st_val__h15921,
		new_st_val__h32108,
		new_st_val__h32199,
		new_st_val__h33153,
		new_st_val__h33157,
		new_st_val__h33161,
		new_st_val__h33165,
		new_st_val__h33170,
		new_st_val__h33176,
		new_st_val__h33181,
		new_st_val__h6644,
		pa___1__h5909,
		pa___1__h5958,
		pa___1__h6027,
		pte___1__h6181,
		pte___1__h6209,
		pte___2__h5901,
		result__h13113,
		result__h13141,
		result__h13169,
		result__h13197,
		result__h13225,
		result__h13253,
		result__h13281,
		result__h13326,
		result__h13354,
		result__h13382,
		result__h13410,
		result__h13438,
		result__h13466,
		result__h13494,
		result__h13522,
		result__h13567,
		result__h13595,
		result__h13623,
		result__h13651,
		result__h13692,
		result__h13720,
		result__h13748,
		result__h13776,
		result__h13817,
		result__h13845,
		result__h13884,
		result__h13912,
		result__h28269,
		result__h28296,
		result__h28322,
		result__h28348,
		result__h28374,
		result__h28400,
		result__h29196,
		result__h29223,
		result__h29249,
		result__h29275,
		result__h29301,
		result__h29327,
		result__h29579,
		result__h29606,
		result__h29633,
		result__h29660,
		result__h29687,
		result__h29714,
		result__h32316,
		result__h32343,
		result__h32370,
		result__h32397,
		result__h32424,
		result__h32451,
		result__h32478,
		result__h32549,
		result__h32576,
		result__h32603,
		result__h32630,
		result__h32657,
		result__h32684,
		result__h32711,
		result__h32782,
		result__h32809,
		result__h32836,
		result__h32903,
		result__h32930,
		result__h32957,
		result__h33024,
		result__h33089,
		result__h33553,
		result__h33583,
		result__h33610,
		result__h33637,
		result__h33664,
		result__h33691,
		result__h6757,
		satp_pa__h2617,
		value__h6226,
		vpn_0_pa__h23523,
		vpn_1_pa__h22497,
		vpn_2_pa__h21994,
		w1___1__h14880,
		w1___1__h32167,
		w2___1__h32168,
		w2__h32098,
		word64__h31814,
		word64__h6520,
		x1_avValue_pa__h5400,
		x__h14383,
		y__h6793;
  wire [55 : 0] x__h22723, x__h4592, x__h5912, x__h5961, x__h6030;
  wire [31 : 0] f_near_mem_io_rspsD_OUT_BITS_31_TO_0__q19,
		master_xactor_rg_rd_data_BITS_31_TO_0__q3,
		master_xactor_rg_rd_data_BITS_63_TO_32__q10,
		new_ld_val1741_BITS_31_TO_0__q44,
		new_value704_BITS_31_TO_0__q37,
		rg_ld_val_BITS_31_TO_0__q20,
		rg_st_amo_val_BITS_31_TO_0__q38,
		w12092_BITS_31_TO_0__q41,
		word64520_BITS_31_TO_0__q23,
		word64520_BITS_63_TO_32__q30;
  wire [15 : 0] f_near_mem_io_rspsD_OUT_BITS_15_TO_0__q17,
		master_xactor_rg_rd_data_BITS_15_TO_0__q2,
		master_xactor_rg_rd_data_BITS_31_TO_16__q6,
		master_xactor_rg_rd_data_BITS_47_TO_32__q9,
		master_xactor_rg_rd_data_BITS_63_TO_48__q13,
		new_ld_val1741_BITS_15_TO_0__q43,
		rg_ld_val_BITS_15_TO_0__q18,
		word64520_BITS_15_TO_0__q22,
		word64520_BITS_31_TO_16__q26,
		word64520_BITS_47_TO_32__q29,
		word64520_BITS_63_TO_48__q33;
  wire [7 : 0] f_near_mem_io_rspsD_OUT_BITS_7_TO_0__q15,
	       master_xactor_rg_rd_data_BITS_15_TO_8__q4,
	       master_xactor_rg_rd_data_BITS_23_TO_16__q5,
	       master_xactor_rg_rd_data_BITS_31_TO_24__q8,
	       master_xactor_rg_rd_data_BITS_39_TO_32__q7,
	       master_xactor_rg_rd_data_BITS_47_TO_40__q11,
	       master_xactor_rg_rd_data_BITS_55_TO_48__q12,
	       master_xactor_rg_rd_data_BITS_63_TO_56__q14,
	       master_xactor_rg_rd_data_BITS_7_TO_0__q1,
	       new_ld_val1741_BITS_7_TO_0__q42,
	       rg_ld_val_BITS_7_TO_0__q16,
	       strobe64__h20218,
	       strobe64__h20261,
	       strobe64__h20284,
	       strobe64__h32085,
	       strobe64__h33239,
	       strobe64__h33262,
	       word64520_BITS_15_TO_8__q24,
	       word64520_BITS_23_TO_16__q25,
	       word64520_BITS_31_TO_24__q27,
	       word64520_BITS_39_TO_32__q28,
	       word64520_BITS_47_TO_40__q31,
	       word64520_BITS_55_TO_48__q32,
	       word64520_BITS_63_TO_56__q34,
	       word64520_BITS_7_TO_0__q21;
  wire [5 : 0] shift_bits__h19999, shift_bits__h31817;
  wire [4 : 0] IF_rg_op_6_EQ_0_7_OR_rg_op_6_EQ_2_9_AND_rg_amo_ETC___d365,
	       IF_rg_op_6_EQ_1_85_OR_rg_op_6_EQ_2_9_AND_rg_am_ETC___d364,
	       IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_T_ETC___d367;
  wire [3 : 0] access_exc_code__h3360,
	       b__h21986,
	       exc_code___1__h5801,
	       x1_avValue_exc_code__h5401;
  wire IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d255,
       IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_NOT_ETC___d175,
       IF_rg_op_6_EQ_0_7_OR_rg_op_6_EQ_2_9_AND_rg_amo_ETC___d267,
       IF_rg_op_6_EQ_1_85_OR_rg_op_6_EQ_2_9_AND_rg_am_ETC___d266,
       IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_T_ETC___d269,
       IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_T_ETC___d379,
       NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS__ETC___d246,
       NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS__ETC___d251,
       NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS__ETC___d254,
       NOT_cfg_verbosity_read__0_ULE_2_000___d1001,
       NOT_dmem_not_imem_1_AND_rg_op_6_EQ_0_7_OR_rg_o_ETC___d298,
       NOT_dmem_not_imem_1_OR_NOT_rg_op_6_EQ_0_7_8_AN_ETC___d88,
       NOT_master_xactor_rg_rd_data_30_BIT_0_34_35_OR_ETC___d862,
       NOT_ram_state_and_ctag_cset_b_read__31_BIT_52__ETC___d157,
       NOT_ram_state_and_ctag_cset_b_read__31_BIT_52__ETC___d381,
       NOT_req_f3_BITS_1_TO_0_358_EQ_0b0_359_360_AND__ETC___d1379,
       NOT_rg_f3_39_EQ_0b11_76_77_OR_rg_amo_funct7_1__ETC___d256,
       NOT_rg_op_6_EQ_0_7_8_AND_NOT_rg_op_6_EQ_2_9_0__ETC___d358,
       NOT_rg_op_6_EQ_1_85_87_AND_NOT_rg_op_6_EQ_2_9__ETC___d390,
       NOT_rg_op_6_EQ_1_85_87_AND_NOT_rg_op_6_EQ_2_9__ETC___d578,
       NOT_rg_op_6_EQ_1_85_87_AND_NOT_rg_op_6_EQ_2_9__ETC___d786,
       NOT_rg_op_6_EQ_1_85_87_AND_NOT_rg_op_6_EQ_2_9__ETC___d792,
       NOT_rg_op_6_EQ_1_85_87_AND_NOT_rg_op_6_EQ_2_9__ETC___d800,
       NOT_rg_op_6_EQ_1_85_87_AND_NOT_rg_op_6_EQ_2_9__ETC___d809,
       NOT_rg_op_6_EQ_2_9_0_OR_NOT_rg_amo_funct7_1_BI_ETC___d576,
       NOT_rg_op_6_EQ_2_9_0_OR_NOT_rg_amo_funct7_1_BI_ETC___d751,
       NOT_rg_op_6_EQ_2_9_0_OR_NOT_rg_amo_funct7_1_BI_ETC___d757,
       NOT_rg_op_6_EQ_2_9_0_OR_NOT_rg_amo_funct7_1_BI_ETC___d764,
       NOT_rg_op_6_EQ_2_9_0_OR_NOT_rg_amo_funct7_1_BI_ETC___d772,
       NOT_rg_priv_9_EQ_0b0_6_91_OR_tlb_lookup_rg_sat_ETC___d305,
       NOT_rg_priv_9_EQ_0b0_6_91_OR_tlb_lookup_rg_sat_ETC___d337,
       NOT_rg_priv_9_EQ_0b0_6_91_OR_tlb_lookup_rg_sat_ETC___d527,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d271,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d310,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d334,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d371,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d372,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d375,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d396,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d403,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d530,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d535,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d542,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d548,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d554,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d561,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d564,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d570,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d583,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d706,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d732,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d738,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d745,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d750,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d756,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d762,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d769,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d777,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d783,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d790,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d796,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d804,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d808,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d813,
       NOT_soc_map_m_is_IO_addr_IF_rg_priv_9_ULE_0b1__ETC___d568,
       NOT_tlb_lookup_rg_satp_2_BITS_59_TO_44_9_rg_ad_ETC___d103,
       cfg_verbosity_read__0_ULE_1___d11,
       dmem_not_imem_AND_rg_op_6_EQ_0_7_OR_rg_op_6_EQ_ETC___d300,
       dmem_not_imem_OR_NOT_rg_op_6_EQ_0_7_8_AND_NOT__ETC___d80,
       lrsc_result__h14373,
       master_xactor_crg_rd_data_full_port1__read__29_ETC___d1180,
       master_xactor_crg_rd_data_full_port1__read__29_ETC___d856,
       master_xactor_crg_rd_data_full_port1__read__29_ETC___d919,
       master_xactor_rg_rd_data_30_BITS_65_TO_64_31_E_ETC___d905,
       master_xactor_rg_rd_data_30_BITS_65_TO_64_31_E_ETC___d944,
       master_xactor_rg_rd_data_30_BITS_65_TO_64_31_E_ETC___d950,
       master_xactor_rg_rd_data_30_BIT_3_41_OR_master_ETC___d895,
       master_xactor_rg_rd_data_30_BIT_3_41_OR_master_ETC___d907,
       ram_state_and_ctag_cset_b_read__31_BITS_51_TO__ETC___d136,
       ram_state_and_ctag_cset_b_read__31_BIT_52_32_A_ETC___d382,
       req_f3_BITS_1_TO_0_358_EQ_0b0_359_OR_req_f3_BI_ETC___d1388,
       rg_amo_funct7_1_BITS_6_TO_2_2_EQ_0b10_3_AND_NO_ETC___d557,
       rg_lrsc_pa_91_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d192,
       rg_op_6_EQ_0_7_OR_rg_op_6_EQ_2_9_AND_rg_amo_fu_ETC___d353,
       rg_op_6_EQ_0_7_OR_rg_op_6_EQ_2_9_AND_rg_amo_fu_ETC___d393,
       rg_op_6_EQ_0_7_OR_rg_op_6_EQ_2_9_AND_rg_amo_fu_ETC___d397,
       rg_op_6_EQ_0_7_OR_rg_op_6_EQ_2_9_AND_rg_amo_fu_ETC___d532,
       rg_op_6_EQ_0_7_OR_rg_op_6_EQ_2_9_AND_rg_amo_fu_ETC___d551,
       rg_op_6_EQ_1_85_OR_rg_op_6_EQ_2_9_AND_rg_amo_f_ETC___d391,
       rg_op_6_EQ_1_85_OR_rg_op_6_EQ_2_9_AND_rg_amo_f_ETC___d579,
       rg_op_6_EQ_1_85_OR_rg_op_6_EQ_2_9_AND_rg_amo_f_ETC___d701,
       rg_op_6_EQ_2_9_AND_rg_amo_funct7_1_BITS_6_TO_2_ETC___d210,
       rg_priv_9_EQ_0b0_6_AND_NOT_tlb_lookup_rg_satp__ETC___d322,
       rg_priv_9_EQ_0b0_6_AND_NOT_tlb_lookup_rg_satp__ETC___d97,
       rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_TO_6_ETC___d106,
       rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_TO_6_ETC___d313,
       rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_TO_6_ETC___d344,
       rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_TO_6_ETC___d362,
       rg_priv_9_ULE_0b1___d40,
       rg_state_EQ_13_037_AND_rg_op_6_EQ_0_7_OR_rg_op_ETC___d1041,
       rg_state_EQ_13_037_AND_rg_op_6_EQ_0_7_OR_rg_op_ETC___d1078,
       tlb_lookup_rg_satp_2_BITS_59_TO_44_9_rg_addr_0_ETC___d307,
       tlb_lookup_rg_satp_2_BITS_59_TO_44_9_rg_addr_0_ETC___d86,
       y__h5727;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get =
	     !f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get =
	     !f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // action method req
  assign CAN_FIRE_req = 1'd1 ;
  assign WILL_FIRE_req = EN_req ;

  // value method valid
  assign valid = dw_valid$whas ;

  // value method addr
  assign addr = rg_addr ;

  // value method word64
  always@(MUX_dw_output_ld_val$wset_1__SEL_1 or
	  MUX_dw_output_ld_val$wset_1__VAL_1 or
	  MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  MUX_dw_output_ld_val$wset_1__VAL_2 or
	  MUX_dw_output_ld_val$wset_1__SEL_3 or
	  MUX_dw_output_ld_val$wset_1__VAL_3 or
	  MUX_dw_output_ld_val$wset_1__SEL_4 or
	  MUX_dw_output_ld_val$wset_1__VAL_4 or
	  WILL_FIRE_RL_rl_ST_AMO_response or
	  rg_ld_val or
	  WILL_FIRE_RL_rl_maintain_io_read_rsp or
	  MUX_dw_output_ld_val$wset_1__VAL_6)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dw_output_ld_val$wset_1__SEL_1:
	  word64 = MUX_dw_output_ld_val$wset_1__VAL_1;
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  word64 = MUX_dw_output_ld_val$wset_1__VAL_2;
      MUX_dw_output_ld_val$wset_1__SEL_3:
	  word64 = MUX_dw_output_ld_val$wset_1__VAL_3;
      MUX_dw_output_ld_val$wset_1__SEL_4:
	  word64 = MUX_dw_output_ld_val$wset_1__VAL_4;
      WILL_FIRE_RL_rl_ST_AMO_response: word64 = rg_ld_val;
      WILL_FIRE_RL_rl_maintain_io_read_rsp:
	  word64 = MUX_dw_output_ld_val$wset_1__VAL_6;
      default: word64 = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end

  // value method st_amo_val
  assign st_amo_val =
	     MUX_dw_output_ld_val$wset_1__SEL_4 ? 64'd0 : rg_st_amo_val ;

  // value method exc
  assign exc = rg_state == 5'd4 ;

  // value method exc_code
  assign exc_code = rg_exc_code ;

  // action method server_flush_request_put
  assign RDY_server_flush_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_flush_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_flush_request_put = EN_server_flush_request_put ;

  // action method server_flush_response_get
  assign RDY_server_flush_response_get =
	     f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_flush_response_get =
	     f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_flush_response_get = EN_server_flush_response_get ;

  // action method tlb_flush
  assign RDY_tlb_flush = 1'd1 ;
  assign CAN_FIRE_tlb_flush = 1'd1 ;
  assign WILL_FIRE_tlb_flush = EN_tlb_flush ;

  // value method mem_master_m_awvalid
  assign mem_master_awvalid =
	     !master_xactor_crg_wr_addr_full$EN_port0__write &&
	     master_xactor_crg_wr_addr_full ;

  // value method mem_master_m_awaddr
  assign mem_master_awaddr = master_xactor_rg_wr_addr[66:3] ;

  // value method mem_master_m_awprot
  assign mem_master_awprot = master_xactor_rg_wr_addr[2:0] ;

  // action method mem_master_m_awready
  assign CAN_FIRE_mem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_awready = 1'd1 ;

  // value method mem_master_m_wvalid
  assign mem_master_wvalid =
	     !master_xactor_crg_wr_data_full$EN_port0__write &&
	     master_xactor_crg_wr_data_full ;

  // value method mem_master_m_wdata
  assign mem_master_wdata = master_xactor_rg_wr_data[71:8] ;

  // value method mem_master_m_wstrb
  assign mem_master_wstrb = master_xactor_rg_wr_data[7:0] ;

  // action method mem_master_m_wready
  assign CAN_FIRE_mem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_wready = 1'd1 ;

  // action method mem_master_m_bvalid
  assign CAN_FIRE_mem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_mem_master_m_bvalid = 1'd1 ;

  // value method mem_master_m_bready
  assign mem_master_bready = !master_xactor_crg_wr_resp_full$port2__read ;

  // value method mem_master_m_arvalid
  assign mem_master_arvalid =
	     !master_xactor_crg_rd_addr_full$EN_port0__write &&
	     master_xactor_crg_rd_addr_full ;

  // value method mem_master_m_araddr
  assign mem_master_araddr = master_xactor_rg_rd_addr[66:3] ;

  // value method mem_master_m_arprot
  assign mem_master_arprot = master_xactor_rg_rd_addr[2:0] ;

  // action method mem_master_m_arready
  assign CAN_FIRE_mem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_arready = 1'd1 ;

  // action method mem_master_m_rvalid
  assign CAN_FIRE_mem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_mem_master_m_rvalid = 1'd1 ;

  // value method mem_master_m_rready
  assign mem_master_rready = !master_xactor_crg_rd_data_full$port2__read ;

  // actionvalue method near_mem_io_client_request_get
  assign near_mem_io_client_request_get = f_near_mem_io_reqs$D_OUT ;
  assign RDY_near_mem_io_client_request_get = f_near_mem_io_reqs$EMPTY_N ;
  assign CAN_FIRE_near_mem_io_client_request_get =
	     f_near_mem_io_reqs$EMPTY_N ;
  assign WILL_FIRE_near_mem_io_client_request_get =
	     EN_near_mem_io_client_request_get ;

  // action method near_mem_io_client_response_put
  assign RDY_near_mem_io_client_response_put = f_near_mem_io_rsps$FULL_N ;
  assign CAN_FIRE_near_mem_io_client_response_put =
	     f_near_mem_io_rsps$FULL_N ;
  assign WILL_FIRE_near_mem_io_client_response_put =
	     EN_near_mem_io_client_response_put ;

  // submodule f_near_mem_io_reqs
  FIFO2 #(.width(32'd137), .guarded(32'd1)) f_near_mem_io_reqs(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(f_near_mem_io_reqs$D_IN),
							       .ENQ(f_near_mem_io_reqs$ENQ),
							       .DEQ(f_near_mem_io_reqs$DEQ),
							       .CLR(f_near_mem_io_reqs$CLR),
							       .D_OUT(f_near_mem_io_reqs$D_OUT),
							       .FULL_N(f_near_mem_io_reqs$FULL_N),
							       .EMPTY_N(f_near_mem_io_reqs$EMPTY_N));

  // submodule f_near_mem_io_rsps
  FIFO2 #(.width(32'd66), .guarded(32'd1)) f_near_mem_io_rsps(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(f_near_mem_io_rsps$D_IN),
							      .ENQ(f_near_mem_io_rsps$ENQ),
							      .DEQ(f_near_mem_io_rsps$DEQ),
							      .CLR(f_near_mem_io_rsps$CLR),
							      .D_OUT(f_near_mem_io_rsps$D_OUT),
							      .FULL_N(f_near_mem_io_rsps$FULL_N),
							      .EMPTY_N(f_near_mem_io_rsps$EMPTY_N));

  // submodule f_reset_reqs
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_reqs(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_reset_reqs$D_IN),
						       .ENQ(f_reset_reqs$ENQ),
						       .DEQ(f_reset_reqs$DEQ),
						       .CLR(f_reset_reqs$CLR),
						       .D_OUT(f_reset_reqs$D_OUT),
						       .FULL_N(f_reset_reqs$FULL_N),
						       .EMPTY_N(f_reset_reqs$EMPTY_N));

  // submodule f_reset_rsps
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_rsps(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_reset_rsps$D_IN),
						       .ENQ(f_reset_rsps$ENQ),
						       .DEQ(f_reset_rsps$DEQ),
						       .CLR(f_reset_rsps$CLR),
						       .D_OUT(f_reset_rsps$D_OUT),
						       .FULL_N(f_reset_rsps$FULL_N),
						       .EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule ram_state_and_ctag_cset
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd53),
	  .MEMSIZE(7'd64)) ram_state_and_ctag_cset(.CLKA(CLK),
						   .CLKB(CLK),
						   .ADDRA(ram_state_and_ctag_cset$ADDRA),
						   .ADDRB(ram_state_and_ctag_cset$ADDRB),
						   .DIA(ram_state_and_ctag_cset$DIA),
						   .DIB(ram_state_and_ctag_cset$DIB),
						   .WEA(ram_state_and_ctag_cset$WEA),
						   .WEB(ram_state_and_ctag_cset$WEB),
						   .ENA(ram_state_and_ctag_cset$ENA),
						   .ENB(ram_state_and_ctag_cset$ENB),
						   .DOA(),
						   .DOB(ram_state_and_ctag_cset$DOB));

  // submodule ram_word64_set
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd9),
	  .DATA_WIDTH(32'd64),
	  .MEMSIZE(10'd512)) ram_word64_set(.CLKA(CLK),
					    .CLKB(CLK),
					    .ADDRA(ram_word64_set$ADDRA),
					    .ADDRB(ram_word64_set$ADDRB),
					    .DIA(ram_word64_set$DIA),
					    .DIB(ram_word64_set$DIB),
					    .WEA(ram_word64_set$WEA),
					    .WEB(ram_word64_set$WEB),
					    .ENA(ram_word64_set$ENA),
					    .ENB(ram_word64_set$ENB),
					    .DOA(),
					    .DOB(ram_word64_set$DOB));

  // submodule soc_map
  mkSoC_Map soc_map(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_is_IO_addr_addr(soc_map$m_is_IO_addr_addr),
		    .m_is_mem_addr_addr(soc_map$m_is_mem_addr_addr),
		    .m_is_near_mem_IO_addr_addr(soc_map$m_is_near_mem_IO_addr_addr),
		    .m_uart0_addr_base(),
		    .m_uart0_addr_size(),
		    .m_uart0_addr_lim(),
		    .m_near_mem_io_addr_base(),
		    .m_near_mem_io_addr_size(),
		    .m_near_mem_io_addr_lim(),
		    .m_boot_rom_addr_base(),
		    .m_boot_rom_addr_size(),
		    .m_boot_rom_addr_lim(),
		    .m_mem0_controller_addr_base(),
		    .m_mem0_controller_addr_size(),
		    .m_mem0_controller_addr_lim(),
		    .m_tcm_addr_base(),
		    .m_tcm_addr_size(),
		    .m_tcm_addr_lim(),
		    .m_is_mem_addr(),
		    .m_is_IO_addr(soc_map$m_is_IO_addr),
		    .m_is_near_mem_IO_addr(soc_map$m_is_near_mem_IO_addr),
		    .m_pc_reset_value());

  // submodule tlb
  mkTLB #(.dmem_not_imem(dmem_not_imem)) tlb(.CLK(CLK),
					     .RST_N(RST_N),
					     .insert_asid(tlb$insert_asid),
					     .insert_level(tlb$insert_level),
					     .insert_pte(tlb$insert_pte),
					     .insert_pte_pa(tlb$insert_pte_pa),
					     .insert_vpn(tlb$insert_vpn),
					     .lookup_asid(tlb$lookup_asid),
					     .lookup_vpn(tlb$lookup_vpn),
					     .EN_flush(tlb$EN_flush),
					     .EN_insert(tlb$EN_insert),
					     .RDY_flush(),
					     .lookup(tlb$lookup),
					     .RDY_lookup(tlb$RDY_lookup),
					     .RDY_insert(tlb$RDY_insert));

  // rule RL_rl_reset
  assign CAN_FIRE_RL_rl_reset =
	     (rg_cset_in_cache != 6'd63 ||
	      f_reset_reqs$EMPTY_N && f_reset_rsps$FULL_N) &&
	     rg_state == 5'd1 ;
  assign WILL_FIRE_RL_rl_reset = CAN_FIRE_RL_rl_reset ;

  // rule RL_rl_rereq
  assign CAN_FIRE_RL_rl_rereq = rg_state == 5'd11 ;
  assign WILL_FIRE_RL_rl_rereq =
	     CAN_FIRE_RL_rl_rereq && !WILL_FIRE_RL_rl_start_reset && !EN_req ;

  // rule RL_rl_ST_AMO_response
  assign CAN_FIRE_RL_rl_ST_AMO_response = rg_state == 5'd12 ;
  assign WILL_FIRE_RL_rl_ST_AMO_response = CAN_FIRE_RL_rl_ST_AMO_response ;

  // rule RL_rl_io_near_mem_read_req
  assign CAN_FIRE_RL_rl_io_near_mem_read_req =
	     f_near_mem_io_reqs$FULL_N &&
	     rg_state_EQ_13_037_AND_rg_op_6_EQ_0_7_OR_rg_op_ETC___d1078 ;
  assign WILL_FIRE_RL_rl_io_near_mem_read_req =
	     CAN_FIRE_RL_rl_io_near_mem_read_req &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_near_mem_read_rsp
  assign CAN_FIRE_RL_rl_io_near_mem_read_rsp =
	     f_near_mem_io_rsps$EMPTY_N && rg_state == 5'd14 &&
	     soc_map$m_is_near_mem_IO_addr &&
	     f_near_mem_io_rsps$D_OUT[65] ;
  assign WILL_FIRE_RL_rl_io_near_mem_read_rsp =
	     CAN_FIRE_RL_rl_io_near_mem_read_rsp &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_maintain_io_read_rsp
  assign CAN_FIRE_RL_rl_maintain_io_read_rsp = rg_state == 5'd15 ;
  assign WILL_FIRE_RL_rl_maintain_io_read_rsp =
	     CAN_FIRE_RL_rl_maintain_io_read_rsp ;

  // rule RL_rl_io_near_mem_write_req
  assign CAN_FIRE_RL_rl_io_near_mem_write_req =
	     f_near_mem_io_reqs$FULL_N && rg_state == 5'd13 &&
	     rg_op == 2'd1 &&
	     soc_map$m_is_near_mem_IO_addr ;
  assign WILL_FIRE_RL_rl_io_near_mem_write_req =
	     CAN_FIRE_RL_rl_io_near_mem_write_req &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_near_mem_write_rsp
  assign CAN_FIRE_RL_rl_io_near_mem_write_rsp =
	     f_near_mem_io_rsps$EMPTY_N && !f_near_mem_io_rsps$D_OUT[65] ;
  assign WILL_FIRE_RL_rl_io_near_mem_write_rsp =
	     CAN_FIRE_RL_rl_io_near_mem_write_rsp ;

  // rule RL_rl_io_AMO_SC_req
  assign CAN_FIRE_RL_rl_io_AMO_SC_req =
	     rg_state == 5'd13 && rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 &&
	     !soc_map$m_is_near_mem_IO_addr ;
  assign WILL_FIRE_RL_rl_io_AMO_SC_req =
	     CAN_FIRE_RL_rl_io_AMO_SC_req && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_drive_exception_rsp
  assign CAN_FIRE_RL_rl_drive_exception_rsp = rg_state == 5'd4 ;
  assign WILL_FIRE_RL_rl_drive_exception_rsp = rg_state == 5'd4 ;

  // rule RL_rl_start_reset
  assign CAN_FIRE_RL_rl_start_reset =
	     f_reset_reqs$EMPTY_N && rg_state != 5'd1 ;
  assign WILL_FIRE_RL_rl_start_reset = CAN_FIRE_RL_rl_start_reset ;

  // rule RL_rl_ptw_level_2
  assign CAN_FIRE_RL_rl_ptw_level_2 =
	     master_xactor_crg_rd_data_full_port1__read__29_ETC___d856 &&
	     rg_state == 5'd6 ;
  assign WILL_FIRE_RL_rl_ptw_level_2 =
	     CAN_FIRE_RL_rl_ptw_level_2 && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_ptw_level_1
  assign CAN_FIRE_RL_rl_ptw_level_1 =
	     master_xactor_crg_rd_data_full_port1__read__29_ETC___d919 &&
	     rg_state == 5'd7 ;
  assign WILL_FIRE_RL_rl_ptw_level_1 =
	     CAN_FIRE_RL_rl_ptw_level_1 && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_ptw_level_0
  assign CAN_FIRE_RL_rl_ptw_level_0 =
	     master_xactor_crg_rd_data_full$port1__read &&
	     (master_xactor_rg_rd_data[65:64] != 2'd0 ||
	      !master_xactor_rg_rd_data[0] ||
	      !master_xactor_rg_rd_data[1] && master_xactor_rg_rd_data[2] ||
	      !master_xactor_rg_rd_data[3] && !master_xactor_rg_rd_data[1] ||
	      tlb$RDY_insert) &&
	     rg_state == 5'd8 ;
  assign WILL_FIRE_RL_rl_ptw_level_0 =
	     CAN_FIRE_RL_rl_ptw_level_0 && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_cache_refill_req_loop
  assign CAN_FIRE_RL_rl_cache_refill_req_loop =
	     !master_xactor_crg_rd_addr_full$port2__read &&
	     rg_requesting_cline ;
  assign WILL_FIRE_RL_rl_cache_refill_req_loop =
	     CAN_FIRE_RL_rl_cache_refill_req_loop &&
	     !WILL_FIRE_RL_rl_ptw_level_1 &&
	     !WILL_FIRE_RL_rl_ptw_level_2 &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_probe_and_immed_rsp
  assign CAN_FIRE_RL_rl_probe_and_immed_rsp =
	     (cfg_verbosity_read__0_ULE_1___d11 || tlb$RDY_lookup) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d271 &&
	     rg_state == 5'd3 ;
  assign WILL_FIRE_RL_rl_probe_and_immed_rsp =
	     CAN_FIRE_RL_rl_probe_and_immed_rsp &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_cache_refill_rsps_loop
  assign CAN_FIRE_RL_rl_cache_refill_rsps_loop =
	     master_xactor_crg_rd_data_full$port1__read && rg_state == 5'd10 ;
  assign WILL_FIRE_RL_rl_cache_refill_rsps_loop =
	     CAN_FIRE_RL_rl_cache_refill_rsps_loop &&
	     !WILL_FIRE_RL_rl_start_reset &&
	     !EN_req ;

  // rule RL_rl_io_read_req
  assign CAN_FIRE_RL_rl_io_read_req =
	     !master_xactor_crg_rd_addr_full$port2__read &&
	     rg_state_EQ_13_037_AND_rg_op_6_EQ_0_7_OR_rg_op_ETC___d1041 ;
  assign WILL_FIRE_RL_rl_io_read_req =
	     CAN_FIRE_RL_rl_io_read_req &&
	     !WILL_FIRE_RL_rl_cache_refill_req_loop &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_read_rsp
  assign CAN_FIRE_RL_rl_io_read_rsp =
	     master_xactor_crg_rd_data_full$port1__read &&
	     rg_state == 5'd14 &&
	     !soc_map$m_is_near_mem_IO_addr ;
  assign WILL_FIRE_RL_rl_io_read_rsp =
	     CAN_FIRE_RL_rl_io_read_rsp && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_write_req
  assign CAN_FIRE_RL_rl_io_write_req =
	     !master_xactor_crg_wr_addr_full$port2__read &&
	     !master_xactor_crg_wr_data_full$port2__read &&
	     rg_state == 5'd13 &&
	     rg_op == 2'd1 &&
	     !soc_map$m_is_near_mem_IO_addr ;
  assign WILL_FIRE_RL_rl_io_write_req =
	     CAN_FIRE_RL_rl_io_write_req && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_AMO_op_req
  assign CAN_FIRE_RL_rl_io_AMO_op_req =
	     !master_xactor_crg_rd_addr_full$port2__read &&
	     rg_state == 5'd13 &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] != 5'b00010 &&
	     rg_amo_funct7[6:2] != 5'b00011 ;
  assign WILL_FIRE_RL_rl_io_AMO_op_req =
	     CAN_FIRE_RL_rl_io_AMO_op_req &&
	     !WILL_FIRE_RL_rl_cache_refill_req_loop &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_AMO_read_rsp
  assign CAN_FIRE_RL_rl_io_AMO_read_rsp =
	     master_xactor_crg_rd_data_full_port1__read__29_ETC___d1180 &&
	     rg_state == 5'd16 ;
  assign WILL_FIRE_RL_rl_io_AMO_read_rsp =
	     CAN_FIRE_RL_rl_io_AMO_read_rsp && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_start_tlb_refill
  assign CAN_FIRE_RL_rl_start_tlb_refill =
	     !master_xactor_crg_rd_addr_full$port2__read &&
	     rg_state == 5'd5 &&
	     b__h21986 == 4'd0 ;
  assign WILL_FIRE_RL_rl_start_tlb_refill =
	     CAN_FIRE_RL_rl_start_tlb_refill &&
	     !WILL_FIRE_RL_rl_cache_refill_req_loop &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_start_cache_refill
  assign CAN_FIRE_RL_rl_start_cache_refill =
	     !master_xactor_crg_rd_addr_full$port2__read &&
	     rg_state == 5'd9 &&
	     b__h21986 == 4'd0 ;
  assign WILL_FIRE_RL_rl_start_cache_refill = MUX_rg_state$write_1__SEL_2 ;

  // rule RL_rl_discard_write_rsp
  assign CAN_FIRE_RL_rl_discard_write_rsp =
	     b__h21986 != 4'd0 && master_xactor_crg_wr_resp_full$port1__read ;
  assign WILL_FIRE_RL_rl_discard_write_rsp =
	     CAN_FIRE_RL_rl_discard_write_rsp &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // inputs to muxes for submodule ports
  assign MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ;
  assign MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d706 ;
  assign MUX_dw_output_ld_val$wset_1__SEL_1 =
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ;
  assign MUX_dw_output_ld_val$wset_1__SEL_3 =
	     WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	     f_near_mem_io_rsps$D_OUT[64] ;
  assign MUX_dw_output_ld_val$wset_1__SEL_4 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d403 ;
  assign MUX_master_xactor_rg_rd_addr$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_ptw_level_2 &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     master_xactor_rg_rd_data[0] &&
	     !master_xactor_rg_rd_data[2] &&
	     !master_xactor_rg_rd_data[3] &&
	     !master_xactor_rg_rd_data[1] ;
  assign MUX_master_xactor_rg_rd_addr$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     master_xactor_rg_rd_data[0] &&
	     !master_xactor_rg_rd_data[2] &&
	     !master_xactor_rg_rd_data[3] &&
	     !master_xactor_rg_rd_data[1] ;
  assign MUX_master_xactor_rg_rd_addr$write_1__SEL_3 =
	     WILL_FIRE_RL_rl_io_AMO_op_req || WILL_FIRE_RL_rl_io_read_req ;
  assign MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 =
	     EN_req &&
	     req_f3_BITS_1_TO_0_358_EQ_0b0_359_OR_req_f3_BI_ETC___d1388 ;
  assign MUX_ram_word64_set$a_put_1__SEL_1 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ;
  assign MUX_ram_word64_set$b_put_1__SEL_2 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[2:0] != 3'd7 ;
  assign MUX_rg_error_during_refill$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_rg_rd_data[65:64] != 2'd0 ;
  assign MUX_rg_exc_code$write_1__SEL_1 =
	     EN_req &&
	     NOT_req_f3_BITS_1_TO_0_358_EQ_0b0_359_360_AND__ETC___d1379 ;
  assign MUX_rg_exc_code$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[65:64] != 2'd0 ;
  assign MUX_rg_exc_code$write_1__SEL_3 =
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_rg_rd_data[65:64] != 2'd0 ;
  assign MUX_rg_exc_code$write_1__SEL_5 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_TO_6_ETC___d106 ;
  assign MUX_rg_exc_code$write_1__SEL_6 =
	     WILL_FIRE_RL_rl_ptw_level_0 &&
	     (!master_xactor_rg_rd_data[0] ||
	      !master_xactor_rg_rd_data[1] && master_xactor_rg_rd_data[2] ||
	      !master_xactor_rg_rd_data[3] && !master_xactor_rg_rd_data[1] ||
	      master_xactor_rg_rd_data[65:64] != 2'd0) ;
  assign MUX_rg_exc_code$write_1__SEL_7 =
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     (!master_xactor_rg_rd_data[0] ||
	      !master_xactor_rg_rd_data[1] && master_xactor_rg_rd_data[2] ||
	      (master_xactor_rg_rd_data[3] || master_xactor_rg_rd_data[1]) &&
	      master_xactor_rg_rd_data[18:10] != 9'd0 ||
	      master_xactor_rg_rd_data[65:64] != 2'd0) ;
  assign MUX_rg_exc_code$write_1__SEL_8 =
	     WILL_FIRE_RL_rl_ptw_level_2 &&
	     NOT_master_xactor_rg_rd_data_30_BIT_0_34_35_OR_ETC___d862 ;
  assign MUX_rg_exc_code$write_1__SEL_9 =
	     WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	     !f_near_mem_io_rsps$D_OUT[64] ;
  assign MUX_rg_ld_val$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d570 ;
  assign MUX_rg_lrsc_valid$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d396 ;
  assign MUX_rg_state$write_1__SEL_2 =
	     CAN_FIRE_RL_rl_start_cache_refill &&
	     !WILL_FIRE_RL_rl_cache_refill_req_loop &&
	     !WILL_FIRE_RL_rl_start_reset &&
	     !EN_req ;
  assign MUX_rg_state$write_1__SEL_10 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[2:0] == 3'd7 ;
  assign MUX_rg_state$write_1__SEL_11 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_TO_6_ETC___d362 ;
  assign MUX_rg_state$write_1__SEL_21 =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 6'd63 ;
  assign MUX_tlb$insert_1__SEL_1 =
	     WILL_FIRE_RL_rl_ptw_level_2 &&
	     master_xactor_rg_rd_data_30_BITS_65_TO_64_31_E_ETC___d905 ;
  assign MUX_tlb$insert_1__SEL_2 =
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     master_xactor_rg_rd_data[0] &&
	     (master_xactor_rg_rd_data[1] || !master_xactor_rg_rd_data[2]) &&
	     (master_xactor_rg_rd_data[3] || master_xactor_rg_rd_data[1]) &&
	     master_xactor_rg_rd_data[18:10] == 9'd0 ;
  assign MUX_tlb$insert_1__SEL_3 =
	     WILL_FIRE_RL_rl_ptw_level_0 &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     master_xactor_rg_rd_data[0] &&
	     (master_xactor_rg_rd_data[1] || !master_xactor_rg_rd_data[2]) &&
	     (master_xactor_rg_rd_data[3] || master_xactor_rg_rd_data[1]) ;
  assign MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1 =
	     ctr_wr_rsps_pending_crg + 4'd1 ;
  always@(rg_f3 or
	  result__h28269 or
	  result__h28322 or
	  result__h28374 or
	  master_xactor_rg_rd_data or
	  result__h28296 or result__h28348 or result__h28400)
  begin
    case (rg_f3)
      3'b0: MUX_dw_output_ld_val$wset_1__VAL_1 = result__h28269;
      3'b001: MUX_dw_output_ld_val$wset_1__VAL_1 = result__h28322;
      3'b010: MUX_dw_output_ld_val$wset_1__VAL_1 = result__h28374;
      3'b011:
	  MUX_dw_output_ld_val$wset_1__VAL_1 = master_xactor_rg_rd_data[63:0];
      3'b100: MUX_dw_output_ld_val$wset_1__VAL_1 = result__h28296;
      3'b101: MUX_dw_output_ld_val$wset_1__VAL_1 = result__h28348;
      3'b110: MUX_dw_output_ld_val$wset_1__VAL_1 = result__h28400;
      3'd7: MUX_dw_output_ld_val$wset_1__VAL_1 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  result__h33553 or
	  result__h33610 or
	  result__h33664 or
	  new_ld_val__h31741 or
	  result__h33583 or result__h33637 or result__h33691)
  begin
    case (rg_f3)
      3'b0: MUX_dw_output_ld_val$wset_1__VAL_2 = result__h33553;
      3'b001: MUX_dw_output_ld_val$wset_1__VAL_2 = result__h33610;
      3'b010: MUX_dw_output_ld_val$wset_1__VAL_2 = result__h33664;
      3'b011: MUX_dw_output_ld_val$wset_1__VAL_2 = new_ld_val__h31741;
      3'b100: MUX_dw_output_ld_val$wset_1__VAL_2 = result__h33583;
      3'b101: MUX_dw_output_ld_val$wset_1__VAL_2 = result__h33637;
      3'b110: MUX_dw_output_ld_val$wset_1__VAL_2 = result__h33691;
      3'd7: MUX_dw_output_ld_val$wset_1__VAL_2 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  result__h29196 or
	  result__h29249 or
	  result__h29301 or
	  f_near_mem_io_rsps$D_OUT or
	  result__h29223 or result__h29275 or result__h29327)
  begin
    case (rg_f3)
      3'b0: MUX_dw_output_ld_val$wset_1__VAL_3 = result__h29196;
      3'b001: MUX_dw_output_ld_val$wset_1__VAL_3 = result__h29249;
      3'b010: MUX_dw_output_ld_val$wset_1__VAL_3 = result__h29301;
      3'b011:
	  MUX_dw_output_ld_val$wset_1__VAL_3 = f_near_mem_io_rsps$D_OUT[63:0];
      3'b100: MUX_dw_output_ld_val$wset_1__VAL_3 = result__h29223;
      3'b101: MUX_dw_output_ld_val$wset_1__VAL_3 = result__h29275;
      3'b110: MUX_dw_output_ld_val$wset_1__VAL_3 = result__h29327;
      3'd7: MUX_dw_output_ld_val$wset_1__VAL_3 = 64'd0;
    endcase
  end
  assign MUX_dw_output_ld_val$wset_1__VAL_4 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
	       new_value__h6704 :
	       new_value__h18971 ;
  always@(rg_f3 or
	  result__h29579 or
	  result__h29633 or
	  result__h29687 or
	  rg_ld_val or result__h29606 or result__h29660 or result__h29714)
  begin
    case (rg_f3)
      3'b0: MUX_dw_output_ld_val$wset_1__VAL_6 = result__h29579;
      3'b001: MUX_dw_output_ld_val$wset_1__VAL_6 = result__h29633;
      3'b010: MUX_dw_output_ld_val$wset_1__VAL_6 = result__h29687;
      3'b011: MUX_dw_output_ld_val$wset_1__VAL_6 = rg_ld_val;
      3'b100: MUX_dw_output_ld_val$wset_1__VAL_6 = result__h29606;
      3'b101: MUX_dw_output_ld_val$wset_1__VAL_6 = result__h29660;
      3'b110: MUX_dw_output_ld_val$wset_1__VAL_6 = result__h29714;
      3'd7: MUX_dw_output_ld_val$wset_1__VAL_6 = 64'd0;
    endcase
  end
  assign MUX_f_near_mem_io_reqs$enq_1__VAL_1 =
	     { 1'd1, rg_pa, 72'hAAAAAAAAAAAAAAAAAA } ;
  assign MUX_f_near_mem_io_reqs$enq_1__VAL_2 =
	     { 1'd0, rg_pa, value__h31014, io_req_wr_data_wstrb__h31969 } ;
  assign MUX_master_xactor_rg_rd_addr$write_1__VAL_1 =
	     { lev_1_pte_pa_w64_fa__h22500, 3'd0 } ;
  assign MUX_master_xactor_rg_rd_addr$write_1__VAL_2 =
	     { lev_0_pte_pa_w64_fa__h23526, 3'd0 } ;
  assign MUX_master_xactor_rg_rd_addr$write_1__VAL_3 = { rg_pa, 3'd0 } ;
  assign MUX_master_xactor_rg_rd_addr$write_1__VAL_4 =
	     { lev_2_pte_pa_w64_fa__h21997, 3'd0 } ;
  assign MUX_master_xactor_rg_rd_addr$write_1__VAL_5 =
	     { cline_addr__h25599, 3'd0 } ;
  assign MUX_master_xactor_rg_rd_addr$write_1__VAL_6 =
	     { cline_fabric_addr__h25600, 3'd0 } ;
  assign MUX_master_xactor_rg_wr_addr$write_1__VAL_1 =
	     { io_req_wr_addr_awaddr__h31809, 3'd0 } ;
  assign MUX_master_xactor_rg_wr_addr$write_1__VAL_2 =
	     { mem_req_wr_addr_awaddr__h19990, 3'd0 } ;
  assign MUX_master_xactor_rg_wr_data$write_1__VAL_1 =
	     { io_req_wr_data_wdata__h31968, io_req_wr_data_wstrb__h31969 } ;
  assign MUX_master_xactor_rg_wr_data$write_1__VAL_2 =
	     { IF_rg_op_6_EQ_1_85_OR_rg_op_6_EQ_2_9_AND_rg_am_ETC___d717,
	       mem_req_wr_data_wstrb__h20102 } ;
  assign MUX_master_xactor_rg_wr_data$write_1__VAL_3 =
	     { value__h31014, io_req_wr_data_wstrb__h31969 } ;
  assign MUX_ram_state_and_ctag_cset$a_put_3__VAL_1 = { 1'd1, rg_pa[63:12] } ;
  assign MUX_ram_word64_set$a_put_3__VAL_2 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       IF_rg_f3_39_EQ_0b0_40_THEN_IF_IF_rg_priv_9_ULE_ETC___d634 :
	       IF_rg_f3_39_EQ_0b0_40_THEN_IF_IF_rg_priv_9_ULE_ETC___d699 ;
  assign MUX_ram_word64_set$b_put_2__VAL_2 = rg_word64_set_in_cache + 9'd1 ;
  assign MUX_ram_word64_set$b_put_2__VAL_4 = { rg_addr[11:6], 3'd0 } ;
  assign MUX_rg_cset_in_cache$write_1__VAL_1 = rg_cset_in_cache + 6'd1 ;
  assign MUX_rg_exc_code$write_1__VAL_1 = (req_op == 2'd0) ? 4'd4 : 4'd6 ;
  assign MUX_rg_exc_code$write_1__VAL_7 =
	     (master_xactor_rg_rd_data[65:64] == 2'd0) ?
	       exc_code___1__h5801 :
	       access_exc_code__h3360 ;
  assign MUX_rg_ld_val$write_1__VAL_2 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       x__h14383 :
	       IF_rg_f3_39_EQ_0b10_70_THEN_SEXT_IF_rg_f3_39_E_ETC___d574 ;
  assign MUX_rg_req_byte_in_cline$write_1__VAL_1 =
	     rg_req_byte_in_cline + 64'd8 ;
  assign MUX_rg_state$write_1__VAL_3 =
	     NOT_req_f3_BITS_1_TO_0_358_EQ_0b0_359_360_AND__ETC___d1379 ?
	       5'd4 :
	       5'd3 ;
  assign MUX_rg_state$write_1__VAL_5 =
	     (master_xactor_rg_rd_data[65:64] == 2'd0) ? 5'd15 : 5'd4 ;
  assign MUX_rg_state$write_1__VAL_10 =
	     (master_xactor_rg_rd_data[65:64] != 2'd0 ||
	      rg_error_during_refill) ?
	       5'd4 :
	       5'd11 ;
  assign MUX_rg_state$write_1__VAL_11 =
	     (rg_priv_9_ULE_0b1___d40 && rg_satp[63:60] == 4'd8 &&
	      !tlb$lookup[130]) ?
	       5'd5 :
	       IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_T_ETC___d367 ;
  assign MUX_rg_state$write_1__VAL_12 =
	     (master_xactor_rg_rd_data[65:64] == 2'd0) ?
	       ((!master_xactor_rg_rd_data[0] ||
		 !master_xactor_rg_rd_data[1] &&
		 master_xactor_rg_rd_data[2] ||
		 !master_xactor_rg_rd_data[3] &&
		 !master_xactor_rg_rd_data[1]) ?
		  5'd4 :
		  5'd11) :
	       5'd4 ;
  assign MUX_rg_state$write_1__VAL_13 =
	     (master_xactor_rg_rd_data[65:64] == 2'd0) ?
	       ((!master_xactor_rg_rd_data[0] ||
		 !master_xactor_rg_rd_data[1] &&
		 master_xactor_rg_rd_data[2]) ?
		  5'd4 :
		  ((!master_xactor_rg_rd_data[3] &&
		    !master_xactor_rg_rd_data[1]) ?
		     5'd8 :
		     ((master_xactor_rg_rd_data[18:10] == 9'd0) ?
			5'd11 :
			5'd4))) :
	       5'd4 ;
  assign MUX_rg_state$write_1__VAL_14 =
	     (master_xactor_rg_rd_data[65:64] == 2'd0) ?
	       ((!master_xactor_rg_rd_data[0] ||
		 !master_xactor_rg_rd_data[1] &&
		 master_xactor_rg_rd_data[2]) ?
		  5'd4 :
		  ((!master_xactor_rg_rd_data[3] &&
		    !master_xactor_rg_rd_data[1]) ?
		     5'd7 :
		     ((master_xactor_rg_rd_data[27:19] != 9'd0 ||
		       master_xactor_rg_rd_data[18:10] != 9'd0) ?
			5'd4 :
			5'd11))) :
	       5'd4 ;
  assign MUX_rg_state$write_1__VAL_18 =
	     f_near_mem_io_rsps$D_OUT[64] ? 5'd15 : 5'd4 ;

  // inlined wires
  assign dw_valid$whas =
	     (WILL_FIRE_RL_rl_io_AMO_read_rsp ||
	      WILL_FIRE_RL_rl_io_read_rsp) &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ||
	     WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	     f_near_mem_io_rsps$D_OUT[64] ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d403 ||
	     WILL_FIRE_RL_rl_drive_exception_rsp ||
	     WILL_FIRE_RL_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_rl_ST_AMO_response ;
  assign master_xactor_crg_wr_addr_full$EN_port0__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign master_xactor_crg_wr_addr_full$port1__read =
	     !master_xactor_crg_wr_addr_full$EN_port0__write &&
	     master_xactor_crg_wr_addr_full ;
  assign master_xactor_crg_wr_addr_full$EN_port1__write =
	     master_xactor_crg_wr_addr_full$port1__read &&
	     mem_master_awready ;
  assign master_xactor_crg_wr_addr_full$port2__read =
	     !master_xactor_crg_wr_addr_full$EN_port1__write &&
	     master_xactor_crg_wr_addr_full$port1__read ;
  assign master_xactor_crg_wr_addr_full$EN_port2__write =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d706 ||
	     WILL_FIRE_RL_rl_io_write_req ;
  assign master_xactor_crg_wr_addr_full$port3__read =
	     master_xactor_crg_wr_addr_full$EN_port2__write ?
	       1'd1 :
	       master_xactor_crg_wr_addr_full$port2__read ;
  assign master_xactor_crg_wr_data_full$EN_port0__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign master_xactor_crg_wr_data_full$port1__read =
	     !master_xactor_crg_wr_data_full$EN_port0__write &&
	     master_xactor_crg_wr_data_full ;
  assign master_xactor_crg_wr_data_full$EN_port1__write =
	     master_xactor_crg_wr_data_full$port1__read && mem_master_wready ;
  assign master_xactor_crg_wr_data_full$port2__read =
	     !master_xactor_crg_wr_data_full$EN_port1__write &&
	     master_xactor_crg_wr_data_full$port1__read ;
  assign master_xactor_crg_wr_data_full$EN_port2__write =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d706 ||
	     WILL_FIRE_RL_rl_io_write_req ;
  assign master_xactor_crg_wr_data_full$port3__read =
	     master_xactor_crg_wr_data_full$EN_port2__write ?
	       1'd1 :
	       master_xactor_crg_wr_data_full$port2__read ;
  assign master_xactor_crg_wr_resp_full$EN_port0__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign master_xactor_crg_wr_resp_full$port1__read =
	     !master_xactor_crg_wr_resp_full$EN_port0__write &&
	     master_xactor_crg_wr_resp_full ;
  assign master_xactor_crg_wr_resp_full$port2__read =
	     !WILL_FIRE_RL_rl_discard_write_rsp &&
	     master_xactor_crg_wr_resp_full$port1__read ;
  assign master_xactor_crg_wr_resp_full$EN_port2__write =
	     mem_master_bvalid &&
	     !master_xactor_crg_wr_resp_full$port2__read ;
  assign master_xactor_crg_wr_resp_full$port3__read =
	     master_xactor_crg_wr_resp_full$EN_port2__write ||
	     master_xactor_crg_wr_resp_full$port2__read ;
  assign master_xactor_crg_rd_addr_full$EN_port0__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign master_xactor_crg_rd_addr_full$port1__read =
	     !master_xactor_crg_rd_addr_full$EN_port0__write &&
	     master_xactor_crg_rd_addr_full ;
  assign master_xactor_crg_rd_addr_full$EN_port1__write =
	     master_xactor_crg_rd_addr_full$port1__read &&
	     mem_master_arready ;
  assign master_xactor_crg_rd_addr_full$port2__read =
	     !master_xactor_crg_rd_addr_full$EN_port1__write &&
	     master_xactor_crg_rd_addr_full$port1__read ;
  assign master_xactor_crg_rd_addr_full$EN_port2__write =
	     (WILL_FIRE_RL_rl_ptw_level_1 || WILL_FIRE_RL_rl_ptw_level_2) &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     master_xactor_rg_rd_data[0] &&
	     !master_xactor_rg_rd_data[2] &&
	     !master_xactor_rg_rd_data[3] &&
	     !master_xactor_rg_rd_data[1] ||
	     WILL_FIRE_RL_rl_io_AMO_op_req ||
	     WILL_FIRE_RL_rl_io_read_req ||
	     WILL_FIRE_RL_rl_cache_refill_req_loop ||
	     WILL_FIRE_RL_rl_start_cache_refill ||
	     WILL_FIRE_RL_rl_start_tlb_refill ;
  assign master_xactor_crg_rd_addr_full$port3__read =
	     master_xactor_crg_rd_addr_full$EN_port2__write ?
	       1'd1 :
	       master_xactor_crg_rd_addr_full$port2__read ;
  assign master_xactor_crg_rd_data_full$EN_port0__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign master_xactor_crg_rd_data_full$port1__read =
	     !master_xactor_crg_rd_data_full$EN_port0__write &&
	     master_xactor_crg_rd_data_full ;
  assign master_xactor_crg_rd_data_full$EN_port1__write =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp || WILL_FIRE_RL_rl_io_read_rsp ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop ||
	     WILL_FIRE_RL_rl_ptw_level_0 ||
	     WILL_FIRE_RL_rl_ptw_level_1 ||
	     WILL_FIRE_RL_rl_ptw_level_2 ;
  assign master_xactor_crg_rd_data_full$port2__read =
	     !master_xactor_crg_rd_data_full$EN_port1__write &&
	     master_xactor_crg_rd_data_full$port1__read ;
  assign master_xactor_crg_rd_data_full$EN_port2__write =
	     mem_master_rvalid &&
	     !master_xactor_crg_rd_data_full$port2__read ;
  assign master_xactor_crg_rd_data_full$port3__read =
	     master_xactor_crg_rd_data_full$EN_port2__write ||
	     master_xactor_crg_rd_data_full$port2__read ;
  assign ctr_wr_rsps_pending_crg$EN_port0__write =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d706 ||
	     WILL_FIRE_RL_rl_io_write_req ;
  always@(MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1 or
	  MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2 or
	  WILL_FIRE_RL_rl_io_write_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  ctr_wr_rsps_pending_crg$port0__write_1 =
	      MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1;
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2:
	  ctr_wr_rsps_pending_crg$port0__write_1 =
	      MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1;
      WILL_FIRE_RL_rl_io_write_req:
	  ctr_wr_rsps_pending_crg$port0__write_1 =
	      MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1;
      default: ctr_wr_rsps_pending_crg$port0__write_1 =
		   4'b1010 /* unspecified value */ ;
    endcase
  end
  assign ctr_wr_rsps_pending_crg$port1__write_1 = b__h21986 - 4'd1 ;
  assign ctr_wr_rsps_pending_crg$port2__read =
	     WILL_FIRE_RL_rl_discard_write_rsp ?
	       ctr_wr_rsps_pending_crg$port1__write_1 :
	       b__h21986 ;
  assign ctr_wr_rsps_pending_crg$EN_port2__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign ctr_wr_rsps_pending_crg$port3__read =
	     ctr_wr_rsps_pending_crg$EN_port2__write ?
	       4'd0 :
	       ctr_wr_rsps_pending_crg$port2__read ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN = set_verbosity_verbosity ;
  assign cfg_verbosity$EN = EN_set_verbosity ;

  // register ctr_wr_rsps_pending_crg
  assign ctr_wr_rsps_pending_crg$D_IN = ctr_wr_rsps_pending_crg$port3__read ;
  assign ctr_wr_rsps_pending_crg$EN = 1'b1 ;

  // register master_xactor_crg_rd_addr_full
  assign master_xactor_crg_rd_addr_full$D_IN =
	     master_xactor_crg_rd_addr_full$port3__read ;
  assign master_xactor_crg_rd_addr_full$EN = 1'b1 ;

  // register master_xactor_crg_rd_data_full
  assign master_xactor_crg_rd_data_full$D_IN =
	     master_xactor_crg_rd_data_full$port3__read ;
  assign master_xactor_crg_rd_data_full$EN = 1'b1 ;

  // register master_xactor_crg_wr_addr_full
  assign master_xactor_crg_wr_addr_full$D_IN =
	     master_xactor_crg_wr_addr_full$port3__read ;
  assign master_xactor_crg_wr_addr_full$EN = 1'b1 ;

  // register master_xactor_crg_wr_data_full
  assign master_xactor_crg_wr_data_full$D_IN =
	     master_xactor_crg_wr_data_full$port3__read ;
  assign master_xactor_crg_wr_data_full$EN = 1'b1 ;

  // register master_xactor_crg_wr_resp_full
  assign master_xactor_crg_wr_resp_full$D_IN =
	     master_xactor_crg_wr_resp_full$port3__read ;
  assign master_xactor_crg_wr_resp_full$EN = 1'b1 ;

  // register master_xactor_rg_rd_addr
  always@(MUX_master_xactor_rg_rd_addr$write_1__SEL_1 or
	  MUX_master_xactor_rg_rd_addr$write_1__VAL_1 or
	  MUX_master_xactor_rg_rd_addr$write_1__SEL_2 or
	  MUX_master_xactor_rg_rd_addr$write_1__VAL_2 or
	  MUX_master_xactor_rg_rd_addr$write_1__SEL_3 or
	  MUX_master_xactor_rg_rd_addr$write_1__VAL_3 or
	  WILL_FIRE_RL_rl_start_tlb_refill or
	  MUX_master_xactor_rg_rd_addr$write_1__VAL_4 or
	  WILL_FIRE_RL_rl_start_cache_refill or
	  MUX_master_xactor_rg_rd_addr$write_1__VAL_5 or
	  WILL_FIRE_RL_rl_cache_refill_req_loop or
	  MUX_master_xactor_rg_rd_addr$write_1__VAL_6)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_master_xactor_rg_rd_addr$write_1__SEL_1:
	  master_xactor_rg_rd_addr$D_IN =
	      MUX_master_xactor_rg_rd_addr$write_1__VAL_1;
      MUX_master_xactor_rg_rd_addr$write_1__SEL_2:
	  master_xactor_rg_rd_addr$D_IN =
	      MUX_master_xactor_rg_rd_addr$write_1__VAL_2;
      MUX_master_xactor_rg_rd_addr$write_1__SEL_3:
	  master_xactor_rg_rd_addr$D_IN =
	      MUX_master_xactor_rg_rd_addr$write_1__VAL_3;
      WILL_FIRE_RL_rl_start_tlb_refill:
	  master_xactor_rg_rd_addr$D_IN =
	      MUX_master_xactor_rg_rd_addr$write_1__VAL_4;
      WILL_FIRE_RL_rl_start_cache_refill:
	  master_xactor_rg_rd_addr$D_IN =
	      MUX_master_xactor_rg_rd_addr$write_1__VAL_5;
      WILL_FIRE_RL_rl_cache_refill_req_loop:
	  master_xactor_rg_rd_addr$D_IN =
	      MUX_master_xactor_rg_rd_addr$write_1__VAL_6;
      default: master_xactor_rg_rd_addr$D_IN =
		   67'h2AAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign master_xactor_rg_rd_addr$EN =
	     WILL_FIRE_RL_rl_ptw_level_2 &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     master_xactor_rg_rd_data[0] &&
	     !master_xactor_rg_rd_data[2] &&
	     !master_xactor_rg_rd_data[3] &&
	     !master_xactor_rg_rd_data[1] ||
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     master_xactor_rg_rd_data[0] &&
	     !master_xactor_rg_rd_data[2] &&
	     !master_xactor_rg_rd_data[3] &&
	     !master_xactor_rg_rd_data[1] ||
	     WILL_FIRE_RL_rl_io_AMO_op_req ||
	     WILL_FIRE_RL_rl_io_read_req ||
	     WILL_FIRE_RL_rl_start_tlb_refill ||
	     WILL_FIRE_RL_rl_start_cache_refill ||
	     WILL_FIRE_RL_rl_cache_refill_req_loop ;

  // register master_xactor_rg_rd_data
  assign master_xactor_rg_rd_data$D_IN =
	     { mem_master_rresp, mem_master_rdata } ;
  assign master_xactor_rg_rd_data$EN = 1'd1 ;

  // register master_xactor_rg_wr_addr
  always@(MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  MUX_master_xactor_rg_wr_addr$write_1__VAL_1 or
	  MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2 or
	  MUX_master_xactor_rg_wr_addr$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_io_write_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  master_xactor_rg_wr_addr$D_IN =
	      MUX_master_xactor_rg_wr_addr$write_1__VAL_1;
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2:
	  master_xactor_rg_wr_addr$D_IN =
	      MUX_master_xactor_rg_wr_addr$write_1__VAL_2;
      WILL_FIRE_RL_rl_io_write_req:
	  master_xactor_rg_wr_addr$D_IN =
	      MUX_master_xactor_rg_wr_addr$write_1__VAL_1;
      default: master_xactor_rg_wr_addr$D_IN =
		   67'h2AAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign master_xactor_rg_wr_addr$EN =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d706 ||
	     WILL_FIRE_RL_rl_io_write_req ;

  // register master_xactor_rg_wr_data
  always@(MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  MUX_master_xactor_rg_wr_data$write_1__VAL_1 or
	  MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2 or
	  MUX_master_xactor_rg_wr_data$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_io_write_req or
	  MUX_master_xactor_rg_wr_data$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  master_xactor_rg_wr_data$D_IN =
	      MUX_master_xactor_rg_wr_data$write_1__VAL_1;
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2:
	  master_xactor_rg_wr_data$D_IN =
	      MUX_master_xactor_rg_wr_data$write_1__VAL_2;
      WILL_FIRE_RL_rl_io_write_req:
	  master_xactor_rg_wr_data$D_IN =
	      MUX_master_xactor_rg_wr_data$write_1__VAL_3;
      default: master_xactor_rg_wr_data$D_IN =
		   72'hAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign master_xactor_rg_wr_data$EN =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d706 ||
	     WILL_FIRE_RL_rl_io_write_req ;

  // register master_xactor_rg_wr_resp
  assign master_xactor_rg_wr_resp$D_IN = mem_master_bresp ;
  assign master_xactor_rg_wr_resp$EN =
	     mem_master_bvalid &&
	     !master_xactor_crg_wr_resp_full$port2__read ;

  // register rg_addr
  assign rg_addr$D_IN = req_addr ;
  assign rg_addr$EN = EN_req ;

  // register rg_amo_funct7
  assign rg_amo_funct7$D_IN = req_amo_funct7 ;
  assign rg_amo_funct7$EN = EN_req ;

  // register rg_cset_in_cache
  assign rg_cset_in_cache$D_IN =
	     WILL_FIRE_RL_rl_reset ?
	       MUX_rg_cset_in_cache$write_1__VAL_1 :
	       6'd0 ;
  assign rg_cset_in_cache$EN =
	     WILL_FIRE_RL_rl_reset || WILL_FIRE_RL_rl_start_reset ;

  // register rg_error_during_refill
  assign rg_error_during_refill$D_IN =
	     MUX_rg_error_during_refill$write_1__SEL_1 ;
  assign rg_error_during_refill$EN =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_rg_rd_data[65:64] != 2'd0 ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // register rg_exc_code
  always@(MUX_rg_exc_code$write_1__SEL_1 or
	  MUX_rg_exc_code$write_1__VAL_1 or
	  MUX_rg_exc_code$write_1__SEL_2 or
	  MUX_rg_exc_code$write_1__SEL_3 or
	  MUX_rg_error_during_refill$write_1__SEL_1 or
	  access_exc_code__h3360 or
	  MUX_rg_exc_code$write_1__SEL_5 or
	  x1_avValue_exc_code__h5401 or
	  MUX_rg_exc_code$write_1__SEL_6 or
	  MUX_rg_exc_code$write_1__VAL_7 or
	  MUX_rg_exc_code$write_1__SEL_7 or
	  MUX_rg_exc_code$write_1__SEL_8 or MUX_rg_exc_code$write_1__SEL_9)
  case (1'b1)
    MUX_rg_exc_code$write_1__SEL_1:
	rg_exc_code$D_IN = MUX_rg_exc_code$write_1__VAL_1;
    MUX_rg_exc_code$write_1__SEL_2: rg_exc_code$D_IN = 4'd7;
    MUX_rg_exc_code$write_1__SEL_3: rg_exc_code$D_IN = 4'd5;
    MUX_rg_error_during_refill$write_1__SEL_1:
	rg_exc_code$D_IN = access_exc_code__h3360;
    MUX_rg_exc_code$write_1__SEL_5:
	rg_exc_code$D_IN = x1_avValue_exc_code__h5401;
    MUX_rg_exc_code$write_1__SEL_6:
	rg_exc_code$D_IN = MUX_rg_exc_code$write_1__VAL_7;
    MUX_rg_exc_code$write_1__SEL_7:
	rg_exc_code$D_IN = MUX_rg_exc_code$write_1__VAL_7;
    MUX_rg_exc_code$write_1__SEL_8:
	rg_exc_code$D_IN = MUX_rg_exc_code$write_1__VAL_7;
    MUX_rg_exc_code$write_1__SEL_9: rg_exc_code$D_IN = 4'd5;
    default: rg_exc_code$D_IN = 4'b1010 /* unspecified value */ ;
  endcase
  assign rg_exc_code$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_TO_6_ETC___d106 ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_rg_rd_data[65:64] != 2'd0 ||
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_rg_rd_data[65:64] != 2'd0 ||
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[65:64] != 2'd0 ||
	     WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	     !f_near_mem_io_rsps$D_OUT[64] ||
	     EN_req &&
	     NOT_req_f3_BITS_1_TO_0_358_EQ_0b0_359_360_AND__ETC___d1379 ||
	     WILL_FIRE_RL_rl_ptw_level_2 &&
	     NOT_master_xactor_rg_rd_data_30_BIT_0_34_35_OR_ETC___d862 ||
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     (!master_xactor_rg_rd_data[0] ||
	      !master_xactor_rg_rd_data[1] && master_xactor_rg_rd_data[2] ||
	      (master_xactor_rg_rd_data[3] || master_xactor_rg_rd_data[1]) &&
	      master_xactor_rg_rd_data[18:10] != 9'd0 ||
	      master_xactor_rg_rd_data[65:64] != 2'd0) ||
	     WILL_FIRE_RL_rl_ptw_level_0 &&
	     (!master_xactor_rg_rd_data[0] ||
	      !master_xactor_rg_rd_data[1] && master_xactor_rg_rd_data[2] ||
	      !master_xactor_rg_rd_data[3] && !master_xactor_rg_rd_data[1] ||
	      master_xactor_rg_rd_data[65:64] != 2'd0) ;

  // register rg_f3
  assign rg_f3$D_IN = req_f3 ;
  assign rg_f3$EN = EN_req ;

  // register rg_ld_val
  always@(MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  new_ld_val__h31741 or
	  MUX_rg_ld_val$write_1__SEL_2 or
	  MUX_rg_ld_val$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_io_read_rsp or
	  master_xactor_rg_rd_data or
	  WILL_FIRE_RL_rl_io_near_mem_read_rsp or
	  f_near_mem_io_rsps$D_OUT or WILL_FIRE_RL_rl_io_AMO_SC_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  rg_ld_val$D_IN = new_ld_val__h31741;
      MUX_rg_ld_val$write_1__SEL_2:
	  rg_ld_val$D_IN = MUX_rg_ld_val$write_1__VAL_2;
      WILL_FIRE_RL_rl_io_read_rsp:
	  rg_ld_val$D_IN = master_xactor_rg_rd_data[63:0];
      WILL_FIRE_RL_rl_io_near_mem_read_rsp:
	  rg_ld_val$D_IN = f_near_mem_io_rsps$D_OUT[63:0];
      WILL_FIRE_RL_rl_io_AMO_SC_req: rg_ld_val$D_IN = 64'd1;
      default: rg_ld_val$D_IN = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rg_ld_val$EN =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d570 ||
	     WILL_FIRE_RL_rl_io_read_rsp ||
	     WILL_FIRE_RL_rl_io_near_mem_read_rsp ||
	     WILL_FIRE_RL_rl_io_AMO_SC_req ;

  // register rg_lower_word32
  assign rg_lower_word32$D_IN = 32'h0 ;
  assign rg_lower_word32$EN = 1'b0 ;

  // register rg_lower_word32_full
  assign rg_lower_word32_full$D_IN = 1'd0 ;
  assign rg_lower_word32_full$EN =
	     WILL_FIRE_RL_rl_start_cache_refill ||
	     WILL_FIRE_RL_rl_start_reset ;

  // register rg_lrsc_pa
  assign rg_lrsc_pa$D_IN = soc_map$m_is_IO_addr_addr ;
  assign rg_lrsc_pa$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d542 ;

  // register rg_lrsc_valid
  assign rg_lrsc_valid$D_IN =
	     MUX_rg_lrsc_valid$write_1__SEL_2 &&
	     rg_op_6_EQ_0_7_OR_rg_op_6_EQ_2_9_AND_rg_amo_fu_ETC___d397 ;
  assign rg_lrsc_valid$EN =
	     (WILL_FIRE_RL_rl_io_near_mem_read_req ||
	      WILL_FIRE_RL_rl_io_read_req) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d396 ||
	     WILL_FIRE_RL_rl_start_reset ;

  // register rg_mstatus_MXR
  assign rg_mstatus_MXR$D_IN = req_mstatus_MXR ;
  assign rg_mstatus_MXR$EN = EN_req ;

  // register rg_op
  assign rg_op$D_IN = req_op ;
  assign rg_op$EN = EN_req ;

  // register rg_pa
  assign rg_pa$D_IN = EN_req ? req_addr : soc_map$m_is_IO_addr_addr ;
  assign rg_pa$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d372 ||
	     EN_req ;

  // register rg_priv
  assign rg_priv$D_IN = req_priv ;
  assign rg_priv$EN = EN_req ;

  // register rg_pte_pa
  always@(MUX_master_xactor_rg_rd_addr$write_1__SEL_1 or
	  lev_1_pte_pa__h22498 or
	  MUX_master_xactor_rg_rd_addr$write_1__SEL_2 or
	  lev_0_pte_pa__h23524 or
	  WILL_FIRE_RL_rl_start_tlb_refill or lev_2_pte_pa__h21995)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_master_xactor_rg_rd_addr$write_1__SEL_1:
	  rg_pte_pa$D_IN = lev_1_pte_pa__h22498;
      MUX_master_xactor_rg_rd_addr$write_1__SEL_2:
	  rg_pte_pa$D_IN = lev_0_pte_pa__h23524;
      WILL_FIRE_RL_rl_start_tlb_refill: rg_pte_pa$D_IN = lev_2_pte_pa__h21995;
      default: rg_pte_pa$D_IN = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rg_pte_pa$EN =
	     WILL_FIRE_RL_rl_ptw_level_2 &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     master_xactor_rg_rd_data[0] &&
	     !master_xactor_rg_rd_data[2] &&
	     !master_xactor_rg_rd_data[3] &&
	     !master_xactor_rg_rd_data[1] ||
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     master_xactor_rg_rd_data[0] &&
	     !master_xactor_rg_rd_data[2] &&
	     !master_xactor_rg_rd_data[3] &&
	     !master_xactor_rg_rd_data[1] ||
	     WILL_FIRE_RL_rl_start_tlb_refill ;

  // register rg_req_byte_in_cline
  assign rg_req_byte_in_cline$D_IN =
	     WILL_FIRE_RL_rl_cache_refill_req_loop ?
	       MUX_rg_req_byte_in_cline$write_1__VAL_1 :
	       64'd8 ;
  assign rg_req_byte_in_cline$EN =
	     WILL_FIRE_RL_rl_cache_refill_req_loop ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // register rg_requesting_cline
  always@(WILL_FIRE_RL_rl_cache_refill_req_loop or
	  rg_req_byte_in_cline or
	  WILL_FIRE_RL_rl_start_reset or WILL_FIRE_RL_rl_start_cache_refill)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_cache_refill_req_loop:
	  rg_requesting_cline$D_IN = rg_req_byte_in_cline != 64'd56;
      WILL_FIRE_RL_rl_start_reset: rg_requesting_cline$D_IN = 1'd0;
      WILL_FIRE_RL_rl_start_cache_refill: rg_requesting_cline$D_IN = 1'd1;
      default: rg_requesting_cline$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign rg_requesting_cline$EN =
	     WILL_FIRE_RL_rl_cache_refill_req_loop ||
	     WILL_FIRE_RL_rl_start_reset ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // register rg_satp
  assign rg_satp$D_IN = req_satp ;
  assign rg_satp$EN = EN_req ;

  // register rg_sstatus_SUM
  assign rg_sstatus_SUM$D_IN = req_sstatus_SUM ;
  assign rg_sstatus_SUM$EN = EN_req ;

  // register rg_st_amo_val
  assign rg_st_amo_val$D_IN = EN_req ? req_st_value : new_st_val__h6644 ;
  assign rg_st_amo_val$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d808 ||
	     EN_req ;

  // register rg_state
  always@(EN_tlb_flush or
	  WILL_FIRE_RL_rl_start_cache_refill or
	  EN_req or
	  MUX_rg_state$write_1__VAL_3 or
	  WILL_FIRE_RL_rl_start_tlb_refill or
	  WILL_FIRE_RL_rl_io_AMO_read_rsp or
	  MUX_rg_state$write_1__VAL_5 or
	  WILL_FIRE_RL_rl_io_AMO_op_req or
	  WILL_FIRE_RL_rl_io_write_req or
	  WILL_FIRE_RL_rl_io_read_rsp or
	  WILL_FIRE_RL_rl_io_read_req or
	  MUX_rg_state$write_1__SEL_10 or
	  MUX_rg_state$write_1__VAL_10 or
	  MUX_rg_state$write_1__SEL_11 or
	  MUX_rg_state$write_1__VAL_11 or
	  WILL_FIRE_RL_rl_ptw_level_0 or
	  MUX_rg_state$write_1__VAL_12 or
	  WILL_FIRE_RL_rl_ptw_level_1 or
	  MUX_rg_state$write_1__VAL_13 or
	  WILL_FIRE_RL_rl_ptw_level_2 or
	  MUX_rg_state$write_1__VAL_14 or
	  WILL_FIRE_RL_rl_start_reset or
	  WILL_FIRE_RL_rl_io_AMO_SC_req or
	  WILL_FIRE_RL_rl_io_near_mem_write_req or
	  WILL_FIRE_RL_rl_io_near_mem_read_rsp or
	  MUX_rg_state$write_1__VAL_18 or
	  WILL_FIRE_RL_rl_io_near_mem_read_req or
	  WILL_FIRE_RL_rl_rereq or MUX_rg_state$write_1__SEL_21)
  case (1'b1)
    EN_tlb_flush: rg_state$D_IN = 5'd2;
    WILL_FIRE_RL_rl_start_cache_refill: rg_state$D_IN = 5'd10;
    EN_req: rg_state$D_IN = MUX_rg_state$write_1__VAL_3;
    WILL_FIRE_RL_rl_start_tlb_refill: rg_state$D_IN = 5'd6;
    WILL_FIRE_RL_rl_io_AMO_read_rsp:
	rg_state$D_IN = MUX_rg_state$write_1__VAL_5;
    WILL_FIRE_RL_rl_io_AMO_op_req: rg_state$D_IN = 5'd16;
    WILL_FIRE_RL_rl_io_write_req: rg_state$D_IN = 5'd12;
    WILL_FIRE_RL_rl_io_read_rsp: rg_state$D_IN = MUX_rg_state$write_1__VAL_5;
    WILL_FIRE_RL_rl_io_read_req: rg_state$D_IN = 5'd14;
    MUX_rg_state$write_1__SEL_10:
	rg_state$D_IN = MUX_rg_state$write_1__VAL_10;
    MUX_rg_state$write_1__SEL_11:
	rg_state$D_IN = MUX_rg_state$write_1__VAL_11;
    WILL_FIRE_RL_rl_ptw_level_0: rg_state$D_IN = MUX_rg_state$write_1__VAL_12;
    WILL_FIRE_RL_rl_ptw_level_1: rg_state$D_IN = MUX_rg_state$write_1__VAL_13;
    WILL_FIRE_RL_rl_ptw_level_2: rg_state$D_IN = MUX_rg_state$write_1__VAL_14;
    WILL_FIRE_RL_rl_start_reset: rg_state$D_IN = 5'd1;
    WILL_FIRE_RL_rl_io_AMO_SC_req || WILL_FIRE_RL_rl_io_near_mem_write_req:
	rg_state$D_IN = 5'd12;
    WILL_FIRE_RL_rl_io_near_mem_read_rsp:
	rg_state$D_IN = MUX_rg_state$write_1__VAL_18;
    WILL_FIRE_RL_rl_io_near_mem_read_req: rg_state$D_IN = 5'd14;
    WILL_FIRE_RL_rl_rereq: rg_state$D_IN = 5'd3;
    MUX_rg_state$write_1__SEL_21: rg_state$D_IN = 5'd2;
    default: rg_state$D_IN = 5'b01010 /* unspecified value */ ;
  endcase
  assign rg_state$EN =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 6'd63 ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[2:0] == 3'd7 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_TO_6_ETC___d362 ||
	     WILL_FIRE_RL_rl_io_AMO_read_rsp ||
	     WILL_FIRE_RL_rl_io_read_rsp ||
	     WILL_FIRE_RL_rl_ptw_level_2 ||
	     WILL_FIRE_RL_rl_ptw_level_1 ||
	     WILL_FIRE_RL_rl_ptw_level_0 ||
	     WILL_FIRE_RL_rl_io_near_mem_read_rsp ||
	     EN_req ||
	     WILL_FIRE_RL_rl_start_reset ||
	     EN_tlb_flush ||
	     WILL_FIRE_RL_rl_rereq ||
	     WILL_FIRE_RL_rl_start_tlb_refill ||
	     WILL_FIRE_RL_rl_start_cache_refill ||
	     WILL_FIRE_RL_rl_io_AMO_SC_req ||
	     WILL_FIRE_RL_rl_io_near_mem_write_req ||
	     WILL_FIRE_RL_rl_io_write_req ||
	     WILL_FIRE_RL_rl_io_near_mem_read_req ||
	     WILL_FIRE_RL_rl_io_read_req ||
	     WILL_FIRE_RL_rl_io_AMO_op_req ;

  // register rg_word64_set_in_cache
  assign rg_word64_set_in_cache$D_IN =
	     MUX_ram_word64_set$b_put_1__SEL_2 ?
	       MUX_ram_word64_set$b_put_2__VAL_2 :
	       MUX_ram_word64_set$b_put_2__VAL_4 ;
  assign rg_word64_set_in_cache$EN =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[2:0] != 3'd7 ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // submodule f_near_mem_io_reqs
  assign f_near_mem_io_reqs$D_IN =
	     WILL_FIRE_RL_rl_io_near_mem_read_req ?
	       MUX_f_near_mem_io_reqs$enq_1__VAL_1 :
	       MUX_f_near_mem_io_reqs$enq_1__VAL_2 ;
  assign f_near_mem_io_reqs$ENQ =
	     WILL_FIRE_RL_rl_io_near_mem_read_req ||
	     WILL_FIRE_RL_rl_io_near_mem_write_req ;
  assign f_near_mem_io_reqs$DEQ = EN_near_mem_io_client_request_get ;
  assign f_near_mem_io_reqs$CLR = 1'b0 ;

  // submodule f_near_mem_io_rsps
  assign f_near_mem_io_rsps$D_IN = near_mem_io_client_response_put ;
  assign f_near_mem_io_rsps$ENQ = EN_near_mem_io_client_response_put ;
  assign f_near_mem_io_rsps$DEQ =
	     WILL_FIRE_RL_rl_io_near_mem_write_rsp ||
	     WILL_FIRE_RL_rl_io_near_mem_read_rsp ;
  assign f_near_mem_io_rsps$CLR = 1'b0 ;

  // submodule f_reset_reqs
  assign f_reset_reqs$D_IN = !EN_server_reset_request_put ;
  assign f_reset_reqs$ENQ =
	     EN_server_reset_request_put || EN_server_flush_request_put ;
  assign f_reset_reqs$DEQ =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 6'd63 ;
  assign f_reset_reqs$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$D_IN = f_reset_reqs$D_OUT ;
  assign f_reset_rsps$ENQ =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 6'd63 ;
  assign f_reset_rsps$DEQ =
	     EN_server_flush_response_get || EN_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule ram_state_and_ctag_cset
  assign ram_state_and_ctag_cset$ADDRA =
	     WILL_FIRE_RL_rl_start_cache_refill ?
	       rg_addr[11:6] :
	       rg_cset_in_cache ;
  assign ram_state_and_ctag_cset$ADDRB =
	     MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       req_addr[11:6] :
	       rg_addr[11:6] ;
  assign ram_state_and_ctag_cset$DIA =
	     WILL_FIRE_RL_rl_start_cache_refill ?
	       MUX_ram_state_and_ctag_cset$a_put_3__VAL_1 :
	       53'h0AAAAAAAAAAAAA ;
  assign ram_state_and_ctag_cset$DIB =
	     MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       53'h0AAAAAAAAAAAAA /* unspecified value */  :
	       53'h0AAAAAAAAAAAAA /* unspecified value */  ;
  assign ram_state_and_ctag_cset$WEA = 1'd1 ;
  assign ram_state_and_ctag_cset$WEB = 1'd0 ;
  assign ram_state_and_ctag_cset$ENA =
	     WILL_FIRE_RL_rl_start_cache_refill || WILL_FIRE_RL_rl_reset ;
  assign ram_state_and_ctag_cset$ENB =
	     EN_req &&
	     req_f3_BITS_1_TO_0_358_EQ_0b0_359_OR_req_f3_BI_ETC___d1388 ||
	     WILL_FIRE_RL_rl_rereq ;

  // submodule ram_word64_set
  assign ram_word64_set$ADDRA =
	     MUX_ram_word64_set$a_put_1__SEL_1 ?
	       rg_word64_set_in_cache :
	       rg_addr[11:3] ;
  always@(MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  req_addr or
	  MUX_ram_word64_set$b_put_1__SEL_2 or
	  MUX_ram_word64_set$b_put_2__VAL_2 or
	  WILL_FIRE_RL_rl_rereq or
	  rg_addr or
	  WILL_FIRE_RL_rl_start_cache_refill or
	  MUX_ram_word64_set$b_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  ram_word64_set$ADDRB = req_addr[11:3];
      MUX_ram_word64_set$b_put_1__SEL_2:
	  ram_word64_set$ADDRB = MUX_ram_word64_set$b_put_2__VAL_2;
      WILL_FIRE_RL_rl_rereq: ram_word64_set$ADDRB = rg_addr[11:3];
      WILL_FIRE_RL_rl_start_cache_refill:
	  ram_word64_set$ADDRB = MUX_ram_word64_set$b_put_2__VAL_4;
      default: ram_word64_set$ADDRB = 9'b010101010 /* unspecified value */ ;
    endcase
  end
  assign ram_word64_set$DIA =
	     MUX_ram_word64_set$a_put_1__SEL_1 ?
	       master_xactor_rg_rd_data[63:0] :
	       MUX_ram_word64_set$a_put_3__VAL_2 ;
  always@(MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  MUX_ram_word64_set$b_put_1__SEL_2 or
	  WILL_FIRE_RL_rl_rereq or WILL_FIRE_RL_rl_start_cache_refill)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      MUX_ram_word64_set$b_put_1__SEL_2:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_rl_rereq:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_rl_start_cache_refill:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      default: ram_word64_set$DIB =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ram_word64_set$WEA = 1'd1 ;
  assign ram_word64_set$WEB = 1'd0 ;
  assign ram_word64_set$ENA =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d583 ;
  assign ram_word64_set$ENB =
	     EN_req &&
	     req_f3_BITS_1_TO_0_358_EQ_0b0_359_OR_req_f3_BI_ETC___d1388 ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[2:0] != 3'd7 ||
	     WILL_FIRE_RL_rl_rereq ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // submodule soc_map
  assign soc_map$m_is_IO_addr_addr =
	     (rg_priv_9_ULE_0b1___d40 && rg_satp[63:60] == 4'd8) ?
	       _theResult___fst__h5489 :
	       rg_addr ;
  assign soc_map$m_is_mem_addr_addr = 64'h0 ;
  assign soc_map$m_is_near_mem_IO_addr_addr = rg_pa ;

  // submodule tlb
  assign tlb$insert_asid = rg_satp[59:44] ;
  always@(MUX_tlb$insert_1__SEL_1 or
	  MUX_tlb$insert_1__SEL_2 or MUX_tlb$insert_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_tlb$insert_1__SEL_1: tlb$insert_level = 2'd2;
      MUX_tlb$insert_1__SEL_2: tlb$insert_level = 2'd1;
      MUX_tlb$insert_1__SEL_3: tlb$insert_level = 2'd0;
      default: tlb$insert_level = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign tlb$insert_pte = master_xactor_rg_rd_data[63:0] ;
  assign tlb$insert_pte_pa = rg_pte_pa ;
  assign tlb$insert_vpn = rg_addr[38:12] ;
  assign tlb$lookup_asid = rg_satp[59:44] ;
  assign tlb$lookup_vpn = rg_addr[38:12] ;
  assign tlb$EN_flush = WILL_FIRE_RL_rl_start_reset || EN_tlb_flush ;
  assign tlb$EN_insert =
	     WILL_FIRE_RL_rl_ptw_level_2 &&
	     master_xactor_rg_rd_data_30_BITS_65_TO_64_31_E_ETC___d905 ||
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     master_xactor_rg_rd_data[0] &&
	     (master_xactor_rg_rd_data[1] || !master_xactor_rg_rd_data[2]) &&
	     (master_xactor_rg_rd_data[3] || master_xactor_rg_rd_data[1]) &&
	     master_xactor_rg_rd_data[18:10] == 9'd0 ||
	     WILL_FIRE_RL_rl_ptw_level_0 &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     master_xactor_rg_rd_data[0] &&
	     (master_xactor_rg_rd_data[1] || !master_xactor_rg_rd_data[2]) &&
	     (master_xactor_rg_rd_data[3] || master_xactor_rg_rd_data[1]) ;

  // remaining internal signals
  assign IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d255 =
	     (x1_avValue_pa__h5400[2:0] == 3'h0) ?
	       CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_39_ETC__q35 :
	       NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS__ETC___d254 ;
  assign IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_1_E_ETC___d521 =
	     (rg_addr[2:0] == 3'h0) ? 64'd1 : 64'd0 ;
  assign IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_NOT_ETC___d175 =
	     (rg_addr[2:0] == 3'h0) ?
	       NOT_ram_state_and_ctag_cset_b_read__31_BIT_52__ETC___d157 :
	       rg_addr[2:0] != 3'h4 ||
	       NOT_ram_state_and_ctag_cset_b_read__31_BIT_52__ETC___d157 ;
  assign IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_mas_ETC___d1246 =
	     (rg_addr[2:0] == 3'h0) ? master_xactor_rg_rd_data[63:0] : 64'd0 ;
  assign IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_ram_ETC___d507 =
	     (rg_addr[2:0] == 3'h0) ? word64__h6520 : 64'd0 ;
  assign IF_rg_f3_39_EQ_0b10_70_THEN_SEXT_rg_st_amo_val_ETC___d638 =
	     (rg_f3 == 3'b010) ?
	       { {32{rg_st_amo_val_BITS_31_TO_0__q38[31]}},
		 rg_st_amo_val_BITS_31_TO_0__q38 } :
	       rg_st_amo_val ;
  assign IF_rg_op_6_EQ_0_7_OR_rg_op_6_EQ_2_9_AND_rg_amo_ETC___d267 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
	       !ram_state_and_ctag_cset$DOB[52] ||
	       !ram_state_and_ctag_cset_b_read__31_BITS_51_TO__ETC___d136 ||
	       IF_rg_f3_39_EQ_0b0_40_OR_rg_f3_39_EQ_0b100_41__ETC___d183 :
	       IF_rg_op_6_EQ_1_85_OR_rg_op_6_EQ_2_9_AND_rg_am_ETC___d266 ;
  assign IF_rg_op_6_EQ_0_7_OR_rg_op_6_EQ_2_9_AND_rg_amo_ETC___d365 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
	       5'd9 :
	       IF_rg_op_6_EQ_1_85_OR_rg_op_6_EQ_2_9_AND_rg_am_ETC___d364 ;
  assign IF_rg_op_6_EQ_1_85_OR_rg_op_6_EQ_2_9_AND_rg_am_ETC___d266 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       rg_op_6_EQ_2_9_AND_rg_amo_funct7_1_BITS_6_TO_2_ETC___d210 :
	       !ram_state_and_ctag_cset$DOB[52] ||
	       !ram_state_and_ctag_cset_b_read__31_BITS_51_TO__ETC___d136 ||
	       !master_xactor_crg_wr_addr_full$port2__read &&
	       !master_xactor_crg_wr_data_full$port2__read &&
	       IF_rg_f3_39_EQ_0b0_40_THEN_IF_IF_rg_priv_9_ULE_ETC___d259 &&
	       IF_rg_f3_39_EQ_0b0_40_OR_rg_f3_39_EQ_0b100_41__ETC___d183 &&
	       IF_rg_f3_39_BITS_1_TO_0_00_EQ_0b0_01_OR_rg_f3__ETC___d207 ;
  assign IF_rg_op_6_EQ_1_85_OR_rg_op_6_EQ_2_9_AND_rg_am_ETC___d364 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       5'd12 :
	       ((!ram_state_and_ctag_cset$DOB[52] ||
		 !ram_state_and_ctag_cset_b_read__31_BITS_51_TO__ETC___d136) ?
		  5'd9 :
		  5'd12) ;
  assign IF_rg_op_6_EQ_1_85_OR_rg_op_6_EQ_2_9_AND_rg_am_ETC___d717 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       mem_req_wr_data_wdata__h20101 :
	       mem_req_wr_data_wdata__h20859 ;
  assign IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_T_ETC___d269 =
	     rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_TO_6_ETC___d106 ?
	       tlb$RDY_lookup :
	       soc_map$m_is_IO_addr ||
	       IF_rg_op_6_EQ_0_7_OR_rg_op_6_EQ_2_9_AND_rg_amo_ETC___d267 ;
  assign IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_T_ETC___d367 =
	     rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_TO_6_ETC___d106 ?
	       5'd4 :
	       (soc_map$m_is_IO_addr ?
		  5'd13 :
		  IF_rg_op_6_EQ_0_7_OR_rg_op_6_EQ_2_9_AND_rg_amo_ETC___d365) ;
  assign IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_T_ETC___d379 =
	     x1_avValue_pa__h5400 == rg_lrsc_pa ;
  assign NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS__ETC___d246 =
	     x1_avValue_pa__h5400[2:0] != 3'h7 ||
	     CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_39_ETC__q35 ;
  assign NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS__ETC___d251 =
	     x1_avValue_pa__h5400[2:0] != 3'h6 ||
	     CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_39_ETC__q35 ;
  assign NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS__ETC___d254 =
	     x1_avValue_pa__h5400[2:0] != 3'h4 ||
	     CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_39_ETC__q35 ;
  assign NOT_cfg_verbosity_read__0_ULE_2_000___d1001 = cfg_verbosity > 4'd2 ;
  assign NOT_dmem_not_imem_1_AND_rg_op_6_EQ_0_7_OR_rg_o_ETC___d298 =
	     !dmem_not_imem &&
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     tlb$lookup[69] ;
  assign NOT_dmem_not_imem_1_OR_NOT_rg_op_6_EQ_0_7_8_AN_ETC___d88 =
	     !dmem_not_imem ||
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) ||
	     !tlb_lookup_rg_satp_2_BITS_59_TO_44_9_rg_addr_0_ETC___d86 ;
  assign NOT_master_xactor_rg_rd_data_30_BIT_0_34_35_OR_ETC___d862 =
	     !master_xactor_rg_rd_data[0] ||
	     !master_xactor_rg_rd_data[1] && master_xactor_rg_rd_data[2] ||
	     (master_xactor_rg_rd_data[3] || master_xactor_rg_rd_data[1]) &&
	     (master_xactor_rg_rd_data[27:19] != 9'd0 ||
	      master_xactor_rg_rd_data[18:10] != 9'd0) ||
	     master_xactor_rg_rd_data[65:64] != 2'd0 ;
  assign NOT_ram_state_and_ctag_cset_b_read__31_BIT_52__ETC___d157 =
	     !ram_state_and_ctag_cset$DOB[52] || !rg_priv_9_ULE_0b1___d40 ||
	     rg_satp[63:60] != 4'd8 ||
	     tlb$RDY_lookup ;
  assign NOT_ram_state_and_ctag_cset_b_read__31_BIT_52__ETC___d381 =
	     (!ram_state_and_ctag_cset$DOB[52] ||
	      !ram_state_and_ctag_cset_b_read__31_BITS_51_TO__ETC___d136) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_T_ETC___d379 ;
  assign NOT_req_f3_BITS_1_TO_0_358_EQ_0b0_359_360_AND__ETC___d1379 =
	     req_f3[1:0] != 2'b0 && (req_f3[1:0] != 2'b01 || req_addr[0]) &&
	     (req_f3[1:0] != 2'b10 || req_addr[1:0] != 2'b0) &&
	     (req_f3[1:0] != 2'b11 || req_addr[2:0] != 3'b0) ;
  assign NOT_rg_f3_39_EQ_0b11_76_77_OR_rg_amo_funct7_1__ETC___d256 =
	     rg_f3 != 3'b011 ||
	     CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_39_ETC__q35 ;
  assign NOT_rg_op_6_EQ_0_7_8_AND_NOT_rg_op_6_EQ_2_9_0__ETC___d358 =
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_91_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d192) ;
  assign NOT_rg_op_6_EQ_1_85_87_AND_NOT_rg_op_6_EQ_2_9__ETC___d390 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__31_BITS_51_TO__ETC___d136 &&
	     IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_T_ETC___d379 ;
  assign NOT_rg_op_6_EQ_1_85_87_AND_NOT_rg_op_6_EQ_2_9__ETC___d578 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__31_BITS_51_TO__ETC___d136 ;
  assign NOT_rg_op_6_EQ_1_85_87_AND_NOT_rg_op_6_EQ_2_9__ETC___d786 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     (!ram_state_and_ctag_cset$DOB[52] ||
	      !ram_state_and_ctag_cset_b_read__31_BITS_51_TO__ETC___d136) &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_op_6_EQ_1_85_87_AND_NOT_rg_op_6_EQ_2_9__ETC___d792 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__31_BITS_51_TO__ETC___d136 &&
	     ctr_wr_rsps_pending_crg == 4'd15 ;
  assign NOT_rg_op_6_EQ_1_85_87_AND_NOT_rg_op_6_EQ_2_9__ETC___d800 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__31_BITS_51_TO__ETC___d136 &&
	     IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_T_ETC___d379 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_op_6_EQ_1_85_87_AND_NOT_rg_op_6_EQ_2_9__ETC___d809 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__31_BITS_51_TO__ETC___d136 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_op_6_EQ_2_9_0_OR_NOT_rg_amo_funct7_1_BI_ETC___d576 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_91_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d192) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__31_BITS_51_TO__ETC___d136 ;
  assign NOT_rg_op_6_EQ_2_9_0_OR_NOT_rg_amo_funct7_1_BI_ETC___d751 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_91_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d192) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__31_BITS_51_TO__ETC___d136 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_op_6_EQ_2_9_0_OR_NOT_rg_amo_funct7_1_BI_ETC___d757 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_91_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d192) &&
	     (!ram_state_and_ctag_cset$DOB[52] ||
	      !ram_state_and_ctag_cset_b_read__31_BITS_51_TO__ETC___d136) &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_op_6_EQ_2_9_0_OR_NOT_rg_amo_funct7_1_BI_ETC___d764 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_91_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d192) &&
	     ctr_wr_rsps_pending_crg == 4'd15 ;
  assign NOT_rg_op_6_EQ_2_9_0_OR_NOT_rg_amo_funct7_1_BI_ETC___d772 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_91_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d192) &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_priv_9_EQ_0b0_6_91_OR_tlb_lookup_rg_sat_ETC___d305 =
	     (rg_priv != 2'b0 || tlb$lookup[70]) &&
	     (rg_priv != 2'b01 || !tlb$lookup[70] || rg_sstatus_SUM) &&
	     (NOT_dmem_not_imem_1_AND_rg_op_6_EQ_0_7_OR_rg_o_ETC___d298 ||
	      dmem_not_imem_AND_rg_op_6_EQ_0_7_OR_rg_op_6_EQ_ETC___d300 ||
	      dmem_not_imem && rg_op != 2'd0 &&
	      (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	      tlb$lookup[68]) ;
  assign NOT_rg_priv_9_EQ_0b0_6_91_OR_tlb_lookup_rg_sat_ETC___d337 =
	     (rg_priv != 2'b0 || tlb$lookup[70]) &&
	     (rg_priv != 2'b01 || !tlb$lookup[70] || rg_sstatus_SUM) &&
	     dmem_not_imem &&
	     tlb$lookup[68] ;
  assign NOT_rg_priv_9_EQ_0b0_6_91_OR_tlb_lookup_rg_sat_ETC___d527 =
	     (rg_priv != 2'b0 || tlb$lookup[70]) &&
	     (rg_priv != 2'b01 || !tlb$lookup[70] || rg_sstatus_SUM) &&
	     (!dmem_not_imem && tlb$lookup[69] ||
	      dmem_not_imem &&
	      tlb_lookup_rg_satp_2_BITS_59_TO_44_9_rg_addr_0_ETC___d86) ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d271 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$RDY_lookup) &&
	     (rg_priv_9_ULE_0b1___d40 && rg_satp[63:60] == 4'd8 &&
	      !tlb$lookup[130] ||
	      IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_T_ETC___d269) ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d310 =
	     !rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	     tlb$lookup[130] &&
	     NOT_rg_priv_9_EQ_0b0_6_91_OR_tlb_lookup_rg_sat_ETC___d305 &&
	     tlb_lookup_rg_satp_2_BITS_59_TO_44_9_rg_addr_0_ETC___d307 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d334 =
	     !rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	     !tlb$lookup[130] ||
	     rg_priv_9_EQ_0b0_6_AND_NOT_tlb_lookup_rg_satp__ETC___d322 ||
	     !tlb$lookup[72] ||
	     !tlb$lookup[73] ||
	     pte___2__h5901[7] ||
	     rg_op == 2'd0 ||
	     rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d371 =
	     !rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	     !tlb$lookup[130] ||
	     NOT_rg_priv_9_EQ_0b0_6_91_OR_tlb_lookup_rg_sat_ETC___d305 &&
	     tlb_lookup_rg_satp_2_BITS_59_TO_44_9_rg_addr_0_ETC___d307 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d372 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d371 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d375 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d371 &&
	     soc_map$m_is_IO_addr &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d396 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d371 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op_6_EQ_0_7_OR_rg_op_6_EQ_2_9_AND_rg_amo_fu_ETC___d393 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d403 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d371 &&
	     !soc_map$m_is_IO_addr &&
	     (rg_op_6_EQ_0_7_OR_rg_op_6_EQ_2_9_AND_rg_amo_fu_ETC___d397 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 &&
	      lrsc_result__h14373) ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d530 =
	     !rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	     !tlb$lookup[130] ||
	     NOT_rg_priv_9_EQ_0b0_6_91_OR_tlb_lookup_rg_sat_ETC___d527 &&
	     tlb$lookup[72] ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d535 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d530 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op_6_EQ_0_7_OR_rg_op_6_EQ_2_9_AND_rg_amo_fu_ETC___d532 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d542 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d530 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__31_BITS_51_TO__ETC___d136 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d548 =
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d530 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__31_BITS_51_TO__ETC___d136 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d554 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d530 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op_6_EQ_0_7_OR_rg_op_6_EQ_2_9_AND_rg_amo_fu_ETC___d551 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d561 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d530 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7_1_BITS_6_TO_2_2_EQ_0b10_3_AND_NO_ETC___d557 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d564 =
	     !rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	     !tlb$lookup[130] ||
	     NOT_rg_priv_9_EQ_0b0_6_91_OR_tlb_lookup_rg_sat_ETC___d337 &&
	     tlb$lookup[72] &&
	     tlb$lookup[73] ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d570 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d564 &&
	     NOT_soc_map_m_is_IO_addr_IF_rg_priv_9_ULE_0b1__ETC___d568 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d583 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d564 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     rg_op_6_EQ_1_85_OR_rg_op_6_EQ_2_9_AND_rg_amo_f_ETC___d579 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d706 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d564 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     (rg_op_6_EQ_1_85_OR_rg_op_6_EQ_2_9_AND_rg_amo_f_ETC___d701 ||
	      NOT_rg_op_6_EQ_1_85_87_AND_NOT_rg_op_6_EQ_2_9__ETC___d578) ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d732 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d564 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op == 2'd1 &&
	     IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_T_ETC___d379 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d738 =
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d564 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 &&
	     rg_lrsc_valid &&
	     !rg_lrsc_pa_91_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d192 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d745 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d564 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 &&
	     !rg_lrsc_valid &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d750 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d564 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d756 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d564 &&
	     !soc_map$m_is_IO_addr &&
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_6_EQ_2_9_0_OR_NOT_rg_amo_funct7_1_BI_ETC___d751 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d762 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d564 &&
	     !soc_map$m_is_IO_addr &&
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_6_EQ_2_9_0_OR_NOT_rg_amo_funct7_1_BI_ETC___d757 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d769 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d564 &&
	     !soc_map$m_is_IO_addr &&
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_6_EQ_2_9_0_OR_NOT_rg_amo_funct7_1_BI_ETC___d764 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d777 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d564 &&
	     !soc_map$m_is_IO_addr &&
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_6_EQ_2_9_0_OR_NOT_rg_amo_funct7_1_BI_ETC___d772 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d783 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d564 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h14373 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d790 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d564 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_6_EQ_1_85_87_AND_NOT_rg_op_6_EQ_2_9__ETC___d786 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d796 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d564 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_6_EQ_1_85_87_AND_NOT_rg_op_6_EQ_2_9__ETC___d792 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d804 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d564 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_6_EQ_1_85_87_AND_NOT_rg_op_6_EQ_2_9__ETC___d800 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d808 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d564 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_6_EQ_1_85_87_AND_NOT_rg_op_6_EQ_2_9__ETC___d578 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d813 =
	     (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$lookup[130]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d564 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_6_EQ_1_85_87_AND_NOT_rg_op_6_EQ_2_9__ETC___d809 ;
  assign NOT_soc_map_m_is_IO_addr_IF_rg_priv_9_ULE_0b1__ETC___d568 =
	     !soc_map$m_is_IO_addr && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     (rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 ||
	      rg_op != 2'd1 && ram_state_and_ctag_cset$DOB[52] &&
	      ram_state_and_ctag_cset_b_read__31_BITS_51_TO__ETC___d136) ;
  assign NOT_tlb_lookup_rg_satp_2_BITS_59_TO_44_9_rg_ad_ETC___d103 =
	     !tlb$lookup[72] ||
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     !tlb$lookup[73] ;
  assign _theResult___fst__h20219 = rg_st_amo_val << shift_bits__h19999 ;
  assign _theResult___fst__h20977 = new_st_val__h6644 << shift_bits__h19999 ;
  assign _theResult___fst__h30737 = rg_st_amo_val << shift_bits__h31817 ;
  assign _theResult___fst__h32086 = word64__h31814 << shift_bits__h31817 ;
  assign _theResult___fst__h5489 =
	     tlb$lookup[130] ? _theResult___fst__h5560 : rg_addr ;
  assign _theResult___fst__h5560 =
	     (rg_priv_9_EQ_0b0_6_AND_NOT_tlb_lookup_rg_satp__ETC___d97 ||
	      NOT_tlb_lookup_rg_satp_2_BITS_59_TO_44_9_rg_ad_ETC___d103) ?
	       rg_addr :
	       _theResult___fst__h5903 ;
  assign _theResult___snd_fst__h5491 =
	     tlb$lookup[130] ?
	       _theResult___snd_fst__h5562 :
	       tlb$lookup[129:66] ;
  assign _theResult___snd_fst__h5562 =
	     (rg_priv_9_EQ_0b0_6_AND_NOT_tlb_lookup_rg_satp__ETC___d97 ||
	      NOT_tlb_lookup_rg_satp_2_BITS_59_TO_44_9_rg_ad_ETC___d103) ?
	       tlb$lookup[129:66] :
	       _theResult___snd_fst__h6132 ;
  assign _theResult___snd_fst__h6132 =
	     (!pte___2__h5901[7] && rg_op != 2'd0 &&
	      (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010)) ?
	       pte___1__h6209 :
	       pte___2__h5901 ;
  assign access_exc_code__h3360 =
	     dmem_not_imem ?
	       ((rg_op == 2'd0 ||
		 rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
		  4'd5 :
		  4'd7) :
	       4'd1 ;
  assign b__h21986 =
	     ctr_wr_rsps_pending_crg$EN_port0__write ?
	       ctr_wr_rsps_pending_crg$port0__write_1 :
	       ctr_wr_rsps_pending_crg ;
  assign cfg_verbosity_read__0_ULE_1___d11 = cfg_verbosity <= 4'd1 ;
  assign cline_addr__h25599 = { rg_pa[63:6], 6'd0 } ;
  assign cline_fabric_addr__h25600 =
	     cline_addr__h25599 | rg_req_byte_in_cline ;
  assign dmem_not_imem_AND_rg_op_6_EQ_0_7_OR_rg_op_6_EQ_ETC___d300 =
	     dmem_not_imem &&
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     tlb_lookup_rg_satp_2_BITS_59_TO_44_9_rg_addr_0_ETC___d86 ;
  assign dmem_not_imem_OR_NOT_rg_op_6_EQ_0_7_8_AND_NOT__ETC___d80 =
	     dmem_not_imem ||
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) ||
	     !tlb$lookup[69] ;
  assign exc_code___1__h5801 = x1_avValue_exc_code__h5401 ;
  assign f_near_mem_io_rspsD_OUT_BITS_15_TO_0__q17 =
	     f_near_mem_io_rsps$D_OUT[15:0] ;
  assign f_near_mem_io_rspsD_OUT_BITS_31_TO_0__q19 =
	     f_near_mem_io_rsps$D_OUT[31:0] ;
  assign f_near_mem_io_rspsD_OUT_BITS_7_TO_0__q15 =
	     f_near_mem_io_rsps$D_OUT[7:0] ;
  assign io_req_wr_addr_awaddr__h31809 = { rg_pa[63:3], 3'd0 } ;
  assign lev_0_pte_pa__h23524 = lev_1_PTN_pa__h22496 + vpn_0_pa__h23523 ;
  assign lev_0_pte_pa_w64_fa__h23526 = { lev_0_pte_pa__h23524[63:3], 3'b0 } ;
  assign lev_1_PTN_pa__h22496 = { 8'd0, x__h22723 } ;
  assign lev_1_pte_pa__h22498 = lev_1_PTN_pa__h22496 + vpn_1_pa__h22497 ;
  assign lev_1_pte_pa_w64_fa__h22500 = { lev_1_pte_pa__h22498[63:3], 3'b0 } ;
  assign lev_2_pte_pa__h21995 = satp_pa__h2617 + vpn_2_pa__h21994 ;
  assign lev_2_pte_pa_w64_fa__h21997 = { lev_2_pte_pa__h21995[63:3], 3'b0 } ;
  assign lrsc_result__h14373 =
	     !rg_lrsc_valid ||
	     !rg_lrsc_pa_91_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d192 ;
  assign master_xactor_crg_rd_data_full_port1__read__29_ETC___d1180 =
	     master_xactor_crg_rd_data_full$port1__read &&
	     (master_xactor_rg_rd_data[65:64] != 2'd0 ||
	      !master_xactor_crg_wr_addr_full$port2__read &&
	      !master_xactor_crg_wr_data_full$port2__read) ;
  assign master_xactor_crg_rd_data_full_port1__read__29_ETC___d856 =
	     master_xactor_crg_rd_data_full$port1__read &&
	     (master_xactor_rg_rd_data[65:64] != 2'd0 ||
	      !master_xactor_rg_rd_data[0] ||
	      !master_xactor_rg_rd_data[1] && master_xactor_rg_rd_data[2] ||
	      ((!master_xactor_rg_rd_data[3] &&
		!master_xactor_rg_rd_data[1]) ?
		 !master_xactor_crg_rd_addr_full$port2__read :
		 master_xactor_rg_rd_data[27:19] != 9'd0 ||
		 master_xactor_rg_rd_data[18:10] != 9'd0 ||
		 tlb$RDY_insert)) ;
  assign master_xactor_crg_rd_data_full_port1__read__29_ETC___d919 =
	     master_xactor_crg_rd_data_full$port1__read &&
	     (master_xactor_rg_rd_data[65:64] != 2'd0 ||
	      !master_xactor_rg_rd_data[0] ||
	      !master_xactor_rg_rd_data[1] && master_xactor_rg_rd_data[2] ||
	      ((!master_xactor_rg_rd_data[3] &&
		!master_xactor_rg_rd_data[1]) ?
		 !master_xactor_crg_rd_addr_full$port2__read :
		 master_xactor_rg_rd_data[18:10] != 9'd0 || tlb$RDY_insert)) ;
  assign master_xactor_rg_rd_data_30_BITS_65_TO_64_31_E_ETC___d905 =
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     master_xactor_rg_rd_data[0] &&
	     (master_xactor_rg_rd_data[1] || !master_xactor_rg_rd_data[2]) &&
	     (master_xactor_rg_rd_data[3] || master_xactor_rg_rd_data[1]) &&
	     master_xactor_rg_rd_data[27:19] == 9'd0 &&
	     master_xactor_rg_rd_data[18:10] == 9'd0 ;
  assign master_xactor_rg_rd_data_30_BITS_65_TO_64_31_E_ETC___d944 =
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     master_xactor_rg_rd_data[0] &&
	     (master_xactor_rg_rd_data[1] || !master_xactor_rg_rd_data[2]) &&
	     (master_xactor_rg_rd_data[3] || master_xactor_rg_rd_data[1]) &&
	     master_xactor_rg_rd_data[18:10] == 9'd0 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign master_xactor_rg_rd_data_30_BITS_65_TO_64_31_E_ETC___d950 =
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     master_xactor_rg_rd_data[0] &&
	     (master_xactor_rg_rd_data[1] || !master_xactor_rg_rd_data[2]) &&
	     (master_xactor_rg_rd_data[3] || master_xactor_rg_rd_data[1]) &&
	     master_xactor_rg_rd_data[18:10] != 9'd0 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign master_xactor_rg_rd_data_30_BIT_3_41_OR_master_ETC___d895 =
	     (master_xactor_rg_rd_data[3] || master_xactor_rg_rd_data[1]) &&
	     (master_xactor_rg_rd_data[27:19] != 9'd0 ||
	      master_xactor_rg_rd_data[18:10] != 9'd0) &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign master_xactor_rg_rd_data_30_BIT_3_41_OR_master_ETC___d907 =
	     (master_xactor_rg_rd_data[3] || master_xactor_rg_rd_data[1]) &&
	     master_xactor_rg_rd_data[27:19] == 9'd0 &&
	     master_xactor_rg_rd_data[18:10] == 9'd0 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign master_xactor_rg_rd_data_BITS_15_TO_0__q2 =
	     master_xactor_rg_rd_data[15:0] ;
  assign master_xactor_rg_rd_data_BITS_15_TO_8__q4 =
	     master_xactor_rg_rd_data[15:8] ;
  assign master_xactor_rg_rd_data_BITS_23_TO_16__q5 =
	     master_xactor_rg_rd_data[23:16] ;
  assign master_xactor_rg_rd_data_BITS_31_TO_0__q3 =
	     master_xactor_rg_rd_data[31:0] ;
  assign master_xactor_rg_rd_data_BITS_31_TO_16__q6 =
	     master_xactor_rg_rd_data[31:16] ;
  assign master_xactor_rg_rd_data_BITS_31_TO_24__q8 =
	     master_xactor_rg_rd_data[31:24] ;
  assign master_xactor_rg_rd_data_BITS_39_TO_32__q7 =
	     master_xactor_rg_rd_data[39:32] ;
  assign master_xactor_rg_rd_data_BITS_47_TO_32__q9 =
	     master_xactor_rg_rd_data[47:32] ;
  assign master_xactor_rg_rd_data_BITS_47_TO_40__q11 =
	     master_xactor_rg_rd_data[47:40] ;
  assign master_xactor_rg_rd_data_BITS_55_TO_48__q12 =
	     master_xactor_rg_rd_data[55:48] ;
  assign master_xactor_rg_rd_data_BITS_63_TO_32__q10 =
	     master_xactor_rg_rd_data[63:32] ;
  assign master_xactor_rg_rd_data_BITS_63_TO_48__q13 =
	     master_xactor_rg_rd_data[63:48] ;
  assign master_xactor_rg_rd_data_BITS_63_TO_56__q14 =
	     master_xactor_rg_rd_data[63:56] ;
  assign master_xactor_rg_rd_data_BITS_7_TO_0__q1 =
	     master_xactor_rg_rd_data[7:0] ;
  assign mem_req_wr_addr_awaddr__h19990 =
	     { x1_avValue_pa__h5400[63:3], 3'd0 } ;
  assign new_ld_val1741_BITS_15_TO_0__q43 = new_ld_val__h31741[15:0] ;
  assign new_ld_val1741_BITS_31_TO_0__q44 = new_ld_val__h31741[31:0] ;
  assign new_ld_val1741_BITS_7_TO_0__q42 = new_ld_val__h31741[7:0] ;
  assign new_st_val__h14821 = { 32'd0, _theResult_____2__h14817[31:0] } ;
  assign new_st_val__h14913 =
	     IF_rg_f3_39_EQ_0b10_70_THEN_SEXT_IF_rg_f3_39_E_ETC___d574 +
	     IF_rg_f3_39_EQ_0b10_70_THEN_SEXT_rg_st_amo_val_ETC___d638 ;
  assign new_st_val__h15893 = w1__h14809 ^ w2__h32098 ;
  assign new_st_val__h15897 = w1__h14809 & w2__h32098 ;
  assign new_st_val__h15901 = w1__h14809 | w2__h32098 ;
  assign new_st_val__h15905 =
	     (w1__h14809 < w2__h32098) ? w1__h14809 : w2__h32098 ;
  assign new_st_val__h15910 =
	     (w1__h14809 <= w2__h32098) ? w2__h32098 : w1__h14809 ;
  assign new_st_val__h15916 =
	     ((IF_rg_f3_39_EQ_0b10_70_THEN_SEXT_IF_rg_f3_39_E_ETC___d574 ^
	       64'h8000000000000000) <
	      (IF_rg_f3_39_EQ_0b10_70_THEN_SEXT_rg_st_amo_val_ETC___d638 ^
	       64'h8000000000000000)) ?
	       w1__h14809 :
	       w2__h32098 ;
  assign new_st_val__h15921 =
	     ((IF_rg_f3_39_EQ_0b10_70_THEN_SEXT_IF_rg_f3_39_E_ETC___d574 ^
	       64'h8000000000000000) <=
	      (IF_rg_f3_39_EQ_0b10_70_THEN_SEXT_rg_st_amo_val_ETC___d638 ^
	       64'h8000000000000000)) ?
	       w2__h32098 :
	       w1__h14809 ;
  assign new_st_val__h32108 = { 32'd0, _theResult_____2__h32104[31:0] } ;
  assign new_st_val__h32199 =
	     new_ld_val__h31741 +
	     IF_rg_f3_39_EQ_0b10_70_THEN_SEXT_rg_st_amo_val_ETC___d638 ;
  assign new_st_val__h33153 = w1__h32096 ^ w2__h32098 ;
  assign new_st_val__h33157 = w1__h32096 & w2__h32098 ;
  assign new_st_val__h33161 = w1__h32096 | w2__h32098 ;
  assign new_st_val__h33165 =
	     (w1__h32096 < w2__h32098) ? w1__h32096 : w2__h32098 ;
  assign new_st_val__h33170 =
	     (w1__h32096 <= w2__h32098) ? w2__h32098 : w1__h32096 ;
  assign new_st_val__h33176 =
	     ((new_ld_val__h31741 ^ 64'h8000000000000000) <
	      (IF_rg_f3_39_EQ_0b10_70_THEN_SEXT_rg_st_amo_val_ETC___d638 ^
	       64'h8000000000000000)) ?
	       w1__h32096 :
	       w2__h32098 ;
  assign new_st_val__h33181 =
	     ((new_ld_val__h31741 ^ 64'h8000000000000000) <=
	      (IF_rg_f3_39_EQ_0b10_70_THEN_SEXT_rg_st_amo_val_ETC___d638 ^
	       64'h8000000000000000)) ?
	       w2__h32098 :
	       w1__h32096 ;
  assign new_st_val__h6644 =
	     (rg_f3 == 3'b010) ?
	       new_st_val__h14821 :
	       _theResult_____2__h14817 ;
  assign new_value704_BITS_31_TO_0__q37 = new_value__h6704[31:0] ;
  assign pa___1__h5909 = { 8'd0, x__h5912 } ;
  assign pa___1__h5958 = { 8'd0, x__h5961 } ;
  assign pa___1__h6027 = { 8'd0, x__h6030 } ;
  assign pte___1__h6181 = { tlb$lookup[129:73], 1'd1, tlb$lookup[71:66] } ;
  assign pte___1__h6209 =
	     { pte___2__h5901[63:8], 1'd1, pte___2__h5901[6:0] } ;
  assign pte___2__h5901 =
	     tlb$lookup[72] ? tlb$lookup[129:66] : pte___1__h6181 ;
  assign ram_state_and_ctag_cset_b_read__31_BITS_51_TO__ETC___d136 =
	     ram_state_and_ctag_cset$DOB[51:0] ==
	     x1_avValue_pa__h5400[63:12] ;
  assign ram_state_and_ctag_cset_b_read__31_BIT_52_32_A_ETC___d382 =
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__31_BITS_51_TO__ETC___d136 &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 ||
	     NOT_ram_state_and_ctag_cset_b_read__31_BIT_52__ETC___d381 ;
  assign req_f3_BITS_1_TO_0_358_EQ_0b0_359_OR_req_f3_BI_ETC___d1388 =
	     req_f3[1:0] == 2'b0 || req_f3[1:0] == 2'b01 && !req_addr[0] ||
	     req_f3[1:0] == 2'b10 && req_addr[1:0] == 2'b0 ||
	     req_f3[1:0] == 2'b11 && req_addr[2:0] == 3'b0 ;
  assign result__h13113 =
	     { {56{word64520_BITS_15_TO_8__q24[7]}},
	       word64520_BITS_15_TO_8__q24 } ;
  assign result__h13141 =
	     { {56{word64520_BITS_23_TO_16__q25[7]}},
	       word64520_BITS_23_TO_16__q25 } ;
  assign result__h13169 =
	     { {56{word64520_BITS_31_TO_24__q27[7]}},
	       word64520_BITS_31_TO_24__q27 } ;
  assign result__h13197 =
	     { {56{word64520_BITS_39_TO_32__q28[7]}},
	       word64520_BITS_39_TO_32__q28 } ;
  assign result__h13225 =
	     { {56{word64520_BITS_47_TO_40__q31[7]}},
	       word64520_BITS_47_TO_40__q31 } ;
  assign result__h13253 =
	     { {56{word64520_BITS_55_TO_48__q32[7]}},
	       word64520_BITS_55_TO_48__q32 } ;
  assign result__h13281 =
	     { {56{word64520_BITS_63_TO_56__q34[7]}},
	       word64520_BITS_63_TO_56__q34 } ;
  assign result__h13326 = { 56'd0, word64__h6520[7:0] } ;
  assign result__h13354 = { 56'd0, word64__h6520[15:8] } ;
  assign result__h13382 = { 56'd0, word64__h6520[23:16] } ;
  assign result__h13410 = { 56'd0, word64__h6520[31:24] } ;
  assign result__h13438 = { 56'd0, word64__h6520[39:32] } ;
  assign result__h13466 = { 56'd0, word64__h6520[47:40] } ;
  assign result__h13494 = { 56'd0, word64__h6520[55:48] } ;
  assign result__h13522 = { 56'd0, word64__h6520[63:56] } ;
  assign result__h13567 =
	     { {48{word64520_BITS_15_TO_0__q22[15]}},
	       word64520_BITS_15_TO_0__q22 } ;
  assign result__h13595 =
	     { {48{word64520_BITS_31_TO_16__q26[15]}},
	       word64520_BITS_31_TO_16__q26 } ;
  assign result__h13623 =
	     { {48{word64520_BITS_47_TO_32__q29[15]}},
	       word64520_BITS_47_TO_32__q29 } ;
  assign result__h13651 =
	     { {48{word64520_BITS_63_TO_48__q33[15]}},
	       word64520_BITS_63_TO_48__q33 } ;
  assign result__h13692 = { 48'd0, word64__h6520[15:0] } ;
  assign result__h13720 = { 48'd0, word64__h6520[31:16] } ;
  assign result__h13748 = { 48'd0, word64__h6520[47:32] } ;
  assign result__h13776 = { 48'd0, word64__h6520[63:48] } ;
  assign result__h13817 =
	     { {32{word64520_BITS_31_TO_0__q23[31]}},
	       word64520_BITS_31_TO_0__q23 } ;
  assign result__h13845 =
	     { {32{word64520_BITS_63_TO_32__q30[31]}},
	       word64520_BITS_63_TO_32__q30 } ;
  assign result__h13884 = { 32'd0, word64__h6520[31:0] } ;
  assign result__h13912 = { 32'd0, word64__h6520[63:32] } ;
  assign result__h28269 =
	     { {56{master_xactor_rg_rd_data_BITS_7_TO_0__q1[7]}},
	       master_xactor_rg_rd_data_BITS_7_TO_0__q1 } ;
  assign result__h28296 = { 56'd0, master_xactor_rg_rd_data[7:0] } ;
  assign result__h28322 =
	     { {48{master_xactor_rg_rd_data_BITS_15_TO_0__q2[15]}},
	       master_xactor_rg_rd_data_BITS_15_TO_0__q2 } ;
  assign result__h28348 = { 48'd0, master_xactor_rg_rd_data[15:0] } ;
  assign result__h28374 =
	     { {32{master_xactor_rg_rd_data_BITS_31_TO_0__q3[31]}},
	       master_xactor_rg_rd_data_BITS_31_TO_0__q3 } ;
  assign result__h28400 = { 32'd0, master_xactor_rg_rd_data[31:0] } ;
  assign result__h29196 =
	     { {56{f_near_mem_io_rspsD_OUT_BITS_7_TO_0__q15[7]}},
	       f_near_mem_io_rspsD_OUT_BITS_7_TO_0__q15 } ;
  assign result__h29223 = { 56'd0, f_near_mem_io_rsps$D_OUT[7:0] } ;
  assign result__h29249 =
	     { {48{f_near_mem_io_rspsD_OUT_BITS_15_TO_0__q17[15]}},
	       f_near_mem_io_rspsD_OUT_BITS_15_TO_0__q17 } ;
  assign result__h29275 = { 48'd0, f_near_mem_io_rsps$D_OUT[15:0] } ;
  assign result__h29301 =
	     { {32{f_near_mem_io_rspsD_OUT_BITS_31_TO_0__q19[31]}},
	       f_near_mem_io_rspsD_OUT_BITS_31_TO_0__q19 } ;
  assign result__h29327 = { 32'd0, f_near_mem_io_rsps$D_OUT[31:0] } ;
  assign result__h29579 =
	     { {56{rg_ld_val_BITS_7_TO_0__q16[7]}},
	       rg_ld_val_BITS_7_TO_0__q16 } ;
  assign result__h29606 = { 56'd0, rg_ld_val[7:0] } ;
  assign result__h29633 =
	     { {48{rg_ld_val_BITS_15_TO_0__q18[15]}},
	       rg_ld_val_BITS_15_TO_0__q18 } ;
  assign result__h29660 = { 48'd0, rg_ld_val[15:0] } ;
  assign result__h29687 =
	     { {32{rg_ld_val_BITS_31_TO_0__q20[31]}},
	       rg_ld_val_BITS_31_TO_0__q20 } ;
  assign result__h29714 = { 32'd0, rg_ld_val[31:0] } ;
  assign result__h32316 =
	     { {56{master_xactor_rg_rd_data_BITS_15_TO_8__q4[7]}},
	       master_xactor_rg_rd_data_BITS_15_TO_8__q4 } ;
  assign result__h32343 =
	     { {56{master_xactor_rg_rd_data_BITS_23_TO_16__q5[7]}},
	       master_xactor_rg_rd_data_BITS_23_TO_16__q5 } ;
  assign result__h32370 =
	     { {56{master_xactor_rg_rd_data_BITS_31_TO_24__q8[7]}},
	       master_xactor_rg_rd_data_BITS_31_TO_24__q8 } ;
  assign result__h32397 =
	     { {56{master_xactor_rg_rd_data_BITS_39_TO_32__q7[7]}},
	       master_xactor_rg_rd_data_BITS_39_TO_32__q7 } ;
  assign result__h32424 =
	     { {56{master_xactor_rg_rd_data_BITS_47_TO_40__q11[7]}},
	       master_xactor_rg_rd_data_BITS_47_TO_40__q11 } ;
  assign result__h32451 =
	     { {56{master_xactor_rg_rd_data_BITS_55_TO_48__q12[7]}},
	       master_xactor_rg_rd_data_BITS_55_TO_48__q12 } ;
  assign result__h32478 =
	     { {56{master_xactor_rg_rd_data_BITS_63_TO_56__q14[7]}},
	       master_xactor_rg_rd_data_BITS_63_TO_56__q14 } ;
  assign result__h32549 = { 56'd0, master_xactor_rg_rd_data[15:8] } ;
  assign result__h32576 = { 56'd0, master_xactor_rg_rd_data[23:16] } ;
  assign result__h32603 = { 56'd0, master_xactor_rg_rd_data[31:24] } ;
  assign result__h32630 = { 56'd0, master_xactor_rg_rd_data[39:32] } ;
  assign result__h32657 = { 56'd0, master_xactor_rg_rd_data[47:40] } ;
  assign result__h32684 = { 56'd0, master_xactor_rg_rd_data[55:48] } ;
  assign result__h32711 = { 56'd0, master_xactor_rg_rd_data[63:56] } ;
  assign result__h32782 =
	     { {48{master_xactor_rg_rd_data_BITS_31_TO_16__q6[15]}},
	       master_xactor_rg_rd_data_BITS_31_TO_16__q6 } ;
  assign result__h32809 =
	     { {48{master_xactor_rg_rd_data_BITS_47_TO_32__q9[15]}},
	       master_xactor_rg_rd_data_BITS_47_TO_32__q9 } ;
  assign result__h32836 =
	     { {48{master_xactor_rg_rd_data_BITS_63_TO_48__q13[15]}},
	       master_xactor_rg_rd_data_BITS_63_TO_48__q13 } ;
  assign result__h32903 = { 48'd0, master_xactor_rg_rd_data[31:16] } ;
  assign result__h32930 = { 48'd0, master_xactor_rg_rd_data[47:32] } ;
  assign result__h32957 = { 48'd0, master_xactor_rg_rd_data[63:48] } ;
  assign result__h33024 =
	     { {32{master_xactor_rg_rd_data_BITS_63_TO_32__q10[31]}},
	       master_xactor_rg_rd_data_BITS_63_TO_32__q10 } ;
  assign result__h33089 = { 32'd0, master_xactor_rg_rd_data[63:32] } ;
  assign result__h33553 =
	     { {56{new_ld_val1741_BITS_7_TO_0__q42[7]}},
	       new_ld_val1741_BITS_7_TO_0__q42 } ;
  assign result__h33583 = { 56'd0, new_ld_val__h31741[7:0] } ;
  assign result__h33610 =
	     { {48{new_ld_val1741_BITS_15_TO_0__q43[15]}},
	       new_ld_val1741_BITS_15_TO_0__q43 } ;
  assign result__h33637 = { 48'd0, new_ld_val__h31741[15:0] } ;
  assign result__h33664 =
	     { {32{new_ld_val1741_BITS_31_TO_0__q44[31]}},
	       new_ld_val1741_BITS_31_TO_0__q44 } ;
  assign result__h33691 = { 32'd0, new_ld_val__h31741[31:0] } ;
  assign result__h6757 =
	     { {56{word64520_BITS_7_TO_0__q21[7]}},
	       word64520_BITS_7_TO_0__q21 } ;
  assign rg_amo_funct7_1_BITS_6_TO_2_2_EQ_0b10_3_AND_NO_ETC___d557 =
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     (!ram_state_and_ctag_cset$DOB[52] ||
	      !ram_state_and_ctag_cset_b_read__31_BITS_51_TO__ETC___d136) &&
	     IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_T_ETC___d379 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign rg_ld_val_BITS_15_TO_0__q18 = rg_ld_val[15:0] ;
  assign rg_ld_val_BITS_31_TO_0__q20 = rg_ld_val[31:0] ;
  assign rg_ld_val_BITS_7_TO_0__q16 = rg_ld_val[7:0] ;
  assign rg_lrsc_pa_91_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d192 =
	     rg_lrsc_pa == x1_avValue_pa__h5400 ;
  assign rg_op_6_EQ_0_7_OR_rg_op_6_EQ_2_9_AND_rg_amo_fu_ETC___d353 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     (!ram_state_and_ctag_cset$DOB[52] ||
	      !ram_state_and_ctag_cset_b_read__31_BITS_51_TO__ETC___d136) ;
  assign rg_op_6_EQ_0_7_OR_rg_op_6_EQ_2_9_AND_rg_amo_fu_ETC___d393 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     ram_state_and_ctag_cset_b_read__31_BIT_52_32_A_ETC___d382 ||
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     rg_op_6_EQ_1_85_OR_rg_op_6_EQ_2_9_AND_rg_amo_f_ETC___d391 ;
  assign rg_op_6_EQ_0_7_OR_rg_op_6_EQ_2_9_AND_rg_amo_fu_ETC___d397 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__31_BITS_51_TO__ETC___d136 ;
  assign rg_op_6_EQ_0_7_OR_rg_op_6_EQ_2_9_AND_rg_amo_fu_ETC___d532 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__31_BITS_51_TO__ETC___d136 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign rg_op_6_EQ_0_7_OR_rg_op_6_EQ_2_9_AND_rg_amo_fu_ETC___d551 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     (!ram_state_and_ctag_cset$DOB[52] ||
	      !ram_state_and_ctag_cset_b_read__31_BITS_51_TO__ETC___d136) &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign rg_op_6_EQ_1_85_OR_rg_op_6_EQ_2_9_AND_rg_amo_f_ETC___d391 =
	     rg_op == 2'd1 &&
	     IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_T_ETC___d379 ||
	     rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 ||
	     NOT_rg_op_6_EQ_1_85_87_AND_NOT_rg_op_6_EQ_2_9__ETC___d390 ;
  assign rg_op_6_EQ_1_85_OR_rg_op_6_EQ_2_9_AND_rg_amo_f_ETC___d579 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_6_EQ_2_9_0_OR_NOT_rg_amo_funct7_1_BI_ETC___d576 ||
	     NOT_rg_op_6_EQ_1_85_87_AND_NOT_rg_op_6_EQ_2_9__ETC___d578 ;
  assign rg_op_6_EQ_1_85_OR_rg_op_6_EQ_2_9_AND_rg_amo_f_ETC___d701 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_91_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d192) ;
  assign rg_op_6_EQ_2_9_AND_rg_amo_funct7_1_BITS_6_TO_2_ETC___d210 =
	     rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h14373 ||
	     !master_xactor_crg_wr_addr_full$port2__read &&
	     !master_xactor_crg_wr_data_full$port2__read &&
	     IF_rg_f3_39_BITS_1_TO_0_00_EQ_0b0_01_OR_rg_f3__ETC___d207 ;
  assign rg_priv_9_EQ_0b0_6_AND_NOT_tlb_lookup_rg_satp__ETC___d322 =
	     rg_priv == 2'b0 && !tlb$lookup[70] ||
	     rg_priv == 2'b01 && tlb$lookup[70] && !rg_sstatus_SUM ||
	     !dmem_not_imem ||
	     !tlb$lookup[68] ;
  assign rg_priv_9_EQ_0b0_6_AND_NOT_tlb_lookup_rg_satp__ETC___d97 =
	     rg_priv == 2'b0 && !tlb$lookup[70] ||
	     rg_priv == 2'b01 && tlb$lookup[70] && !rg_sstatus_SUM ||
	     dmem_not_imem_OR_NOT_rg_op_6_EQ_0_7_8_AND_NOT__ETC___d80 &&
	     NOT_dmem_not_imem_1_OR_NOT_rg_op_6_EQ_0_7_8_AN_ETC___d88 &&
	     (!dmem_not_imem || rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010 ||
	      !tlb$lookup[68]) ;
  assign rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_TO_6_ETC___d106 =
	     rg_priv_9_ULE_0b1___d40 && rg_satp[63:60] == 4'd8 &&
	     tlb$lookup[130] &&
	     (rg_priv_9_EQ_0b0_6_AND_NOT_tlb_lookup_rg_satp__ETC___d97 ||
	      NOT_tlb_lookup_rg_satp_2_BITS_59_TO_44_9_rg_ad_ETC___d103) ;
  assign rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_TO_6_ETC___d313 =
	     rg_priv_9_ULE_0b1___d40 && rg_satp[63:60] == 4'd8 &&
	     (rg_priv_9_EQ_0b0_6_AND_NOT_tlb_lookup_rg_satp__ETC___d97 ||
	      NOT_tlb_lookup_rg_satp_2_BITS_59_TO_44_9_rg_ad_ETC___d103) &&
	     tlb$lookup[130] ;
  assign rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_TO_6_ETC___d344 =
	     rg_priv_9_ULE_0b1___d40 && rg_satp[63:60] == 4'd8 &&
	     tlb$lookup[130] &&
	     NOT_rg_priv_9_EQ_0b0_6_91_OR_tlb_lookup_rg_sat_ETC___d337 &&
	     tlb$lookup[72] &&
	     tlb$lookup[73] &&
	     !pte___2__h5901[7] &&
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) ;
  assign rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_TO_6_ETC___d362 =
	     rg_priv_9_ULE_0b1___d40 && rg_satp[63:60] == 4'd8 &&
	     !tlb$lookup[130] ||
	     rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_TO_6_ETC___d106 ||
	     soc_map$m_is_IO_addr ||
	     rg_op_6_EQ_0_7_OR_rg_op_6_EQ_2_9_AND_rg_amo_fu_ETC___d353 ||
	     NOT_rg_op_6_EQ_0_7_8_AND_NOT_rg_op_6_EQ_2_9_0__ETC___d358 ;
  assign rg_priv_9_ULE_0b1___d40 = rg_priv <= 2'b01 ;
  assign rg_st_amo_val_BITS_31_TO_0__q38 = rg_st_amo_val[31:0] ;
  assign rg_state_EQ_13_037_AND_rg_op_6_EQ_0_7_OR_rg_op_ETC___d1041 =
	     rg_state == 5'd13 &&
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     !soc_map$m_is_near_mem_IO_addr ;
  assign rg_state_EQ_13_037_AND_rg_op_6_EQ_0_7_OR_rg_op_ETC___d1078 =
	     rg_state == 5'd13 &&
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     soc_map$m_is_near_mem_IO_addr ;
  assign satp_pa__h2617 = { 8'd0, x__h4592 } ;
  assign shift_bits__h19999 = { x1_avValue_pa__h5400[2:0], 3'b0 } ;
  assign shift_bits__h31817 = { rg_pa[2:0], 3'b0 } ;
  assign strobe64__h20218 = 8'b00000001 << x1_avValue_pa__h5400[2:0] ;
  assign strobe64__h20261 = 8'b00000011 << x1_avValue_pa__h5400[2:0] ;
  assign strobe64__h20284 = 8'b00001111 << x1_avValue_pa__h5400[2:0] ;
  assign strobe64__h32085 = 8'b00000001 << rg_pa[2:0] ;
  assign strobe64__h33239 = 8'b00000011 << rg_pa[2:0] ;
  assign strobe64__h33262 = 8'b00001111 << rg_pa[2:0] ;
  assign tlb_lookup_rg_satp_2_BITS_59_TO_44_9_rg_addr_0_ETC___d307 =
	     tlb$lookup[72] &&
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010 ||
	      tlb$lookup[73]) ;
  assign tlb_lookup_rg_satp_2_BITS_59_TO_44_9_rg_addr_0_ETC___d86 =
	     tlb$lookup[67] | y__h5727 ;
  assign value__h6226 =
	     (rg_priv_9_ULE_0b1___d40 && rg_satp[63:60] == 4'd8) ?
	       _theResult___snd_fst__h5491 :
	       tlb$lookup[129:66] ;
  assign vpn_0_pa__h23523 = { 52'd0, rg_addr[20:12], 3'd0 } ;
  assign vpn_1_pa__h22497 = { 52'd0, rg_addr[29:21], 3'd0 } ;
  assign vpn_2_pa__h21994 = { 52'd0, rg_addr[38:30], 3'd0 } ;
  assign w12092_BITS_31_TO_0__q41 = w1__h32092[31:0] ;
  assign w1___1__h14880 = { 32'd0, new_value__h6704[31:0] } ;
  assign w1___1__h32167 = { 32'd0, w1__h32092[31:0] } ;
  assign w2___1__h32168 = { 32'd0, rg_st_amo_val[31:0] } ;
  assign w2__h32098 = (rg_f3 == 3'b010) ? w2___1__h32168 : rg_st_amo_val ;
  assign word64520_BITS_15_TO_0__q22 = word64__h6520[15:0] ;
  assign word64520_BITS_15_TO_8__q24 = word64__h6520[15:8] ;
  assign word64520_BITS_23_TO_16__q25 = word64__h6520[23:16] ;
  assign word64520_BITS_31_TO_0__q23 = word64__h6520[31:0] ;
  assign word64520_BITS_31_TO_16__q26 = word64__h6520[31:16] ;
  assign word64520_BITS_31_TO_24__q27 = word64__h6520[31:24] ;
  assign word64520_BITS_39_TO_32__q28 = word64__h6520[39:32] ;
  assign word64520_BITS_47_TO_32__q29 = word64__h6520[47:32] ;
  assign word64520_BITS_47_TO_40__q31 = word64__h6520[47:40] ;
  assign word64520_BITS_55_TO_48__q32 = word64__h6520[55:48] ;
  assign word64520_BITS_63_TO_32__q30 = word64__h6520[63:32] ;
  assign word64520_BITS_63_TO_48__q33 = word64__h6520[63:48] ;
  assign word64520_BITS_63_TO_56__q34 = word64__h6520[63:56] ;
  assign word64520_BITS_7_TO_0__q21 = word64__h6520[7:0] ;
  assign word64__h31814 =
	     (rg_f3 == 3'b010) ?
	       new_st_val__h32108 :
	       _theResult_____2__h32104 ;
  assign word64__h6520 = ram_word64_set$DOB & y__h6793 ;
  assign x1_avValue_exc_code__h5401 =
	     dmem_not_imem ?
	       ((rg_op == 2'd0 ||
		 rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
		  4'd13 :
		  4'd15) :
	       4'd12 ;
  assign x1_avValue_pa__h5400 = soc_map$m_is_IO_addr_addr ;
  assign x__h14383 = { 63'd0, lrsc_result__h14373 } ;
  assign x__h22723 = { master_xactor_rg_rd_data[53:10], 12'b0 } ;
  assign x__h4592 = { rg_satp[43:0], 12'b0 } ;
  assign x__h5912 = { tlb$lookup[119:76], rg_addr[11:0] } ;
  assign x__h5961 = { tlb$lookup[119:85], rg_addr[20:0] } ;
  assign x__h6030 = { tlb$lookup[119:94], rg_addr[29:0] } ;
  assign y__h5727 = rg_mstatus_MXR & tlb$lookup[69] ;
  assign y__h6793 =
	     {64{ram_state_and_ctag_cset$DOB[52] &&
		 ram_state_and_ctag_cset_b_read__31_BITS_51_TO__ETC___d136}} ;
  always@(tlb$lookup or
	  rg_addr or pa___1__h5909 or pa___1__h5958 or pa___1__h6027)
  begin
    case (tlb$lookup[65:64])
      2'd0: _theResult___fst__h5903 = pa___1__h5909;
      2'd1: _theResult___fst__h5903 = pa___1__h5958;
      2'd2: _theResult___fst__h5903 = pa___1__h6027;
      2'd3: _theResult___fst__h5903 = rg_addr;
    endcase
  end
  always@(rg_f3 or strobe64__h32085 or strobe64__h33239 or strobe64__h33262)
  begin
    case (rg_f3[1:0])
      2'b0: io_req_wr_data_wstrb__h31969 = strobe64__h32085;
      2'b01: io_req_wr_data_wstrb__h31969 = strobe64__h33239;
      2'b10: io_req_wr_data_wstrb__h31969 = strobe64__h33262;
      2'b11: io_req_wr_data_wstrb__h31969 = 8'b11111111;
    endcase
  end
  always@(rg_f3 or rg_st_amo_val or _theResult___fst__h30737)
  begin
    case (rg_f3[1:0])
      2'b0, 2'b01, 2'b10: value__h31014 = _theResult___fst__h30737;
      2'd3: value__h31014 = rg_st_amo_val;
    endcase
  end
  always@(rg_f3 or strobe64__h20218 or strobe64__h20261 or strobe64__h20284)
  begin
    case (rg_f3[1:0])
      2'b0: mem_req_wr_data_wstrb__h20102 = strobe64__h20218;
      2'b01: mem_req_wr_data_wstrb__h20102 = strobe64__h20261;
      2'b10: mem_req_wr_data_wstrb__h20102 = strobe64__h20284;
      2'b11: mem_req_wr_data_wstrb__h20102 = 8'b11111111;
    endcase
  end
  always@(rg_f3 or rg_st_amo_val or _theResult___fst__h20219)
  begin
    case (rg_f3[1:0])
      2'b0, 2'b01, 2'b10:
	  mem_req_wr_data_wdata__h20101 = _theResult___fst__h20219;
      2'd3: mem_req_wr_data_wdata__h20101 = rg_st_amo_val;
    endcase
  end
  always@(rg_addr or
	  NOT_ram_state_and_ctag_cset_b_read__31_BIT_52__ETC___d157)
  begin
    case (rg_addr[2:0])
      3'h0, 3'h1, 3'h2, 3'h3, 3'h4, 3'h5, 3'h6:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_OR_rg_ad_ETC___d161 =
	      NOT_ram_state_and_ctag_cset_b_read__31_BIT_52__ETC___d157;
      3'd7:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_OR_rg_ad_ETC___d161 =
	      rg_addr[2:0] != 3'h7 ||
	      NOT_ram_state_and_ctag_cset_b_read__31_BIT_52__ETC___d157;
    endcase
  end
  always@(rg_addr or
	  NOT_ram_state_and_ctag_cset_b_read__31_BIT_52__ETC___d157)
  begin
    case (rg_addr[2:0])
      3'h0, 3'h2, 3'h4:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_OR_rg_ad_ETC___d169 =
	      NOT_ram_state_and_ctag_cset_b_read__31_BIT_52__ETC___d157;
      default: IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_OR_rg_ad_ETC___d169 =
		   rg_addr[2:0] != 3'h6 ||
		   NOT_ram_state_and_ctag_cset_b_read__31_BIT_52__ETC___d157;
    endcase
  end
  always@(rg_f3 or
	  rg_addr or
	  NOT_ram_state_and_ctag_cset_b_read__31_BIT_52__ETC___d157 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_OR_rg_ad_ETC___d161 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_OR_rg_ad_ETC___d169 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_NOT_ETC___d175)
  begin
    case (rg_f3)
      3'b0, 3'b100:
	  IF_rg_f3_39_EQ_0b0_40_OR_rg_f3_39_EQ_0b100_41__ETC___d183 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_OR_rg_ad_ETC___d161;
      3'b001, 3'b101:
	  IF_rg_f3_39_EQ_0b0_40_OR_rg_f3_39_EQ_0b100_41__ETC___d183 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_OR_rg_ad_ETC___d169;
      3'b010, 3'b110:
	  IF_rg_f3_39_EQ_0b0_40_OR_rg_f3_39_EQ_0b100_41__ETC___d183 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_NOT_ETC___d175;
      default: IF_rg_f3_39_EQ_0b0_40_OR_rg_f3_39_EQ_0b100_41__ETC___d183 =
		   rg_f3 != 3'b011 || rg_addr[2:0] != 3'h0 ||
		   NOT_ram_state_and_ctag_cset_b_read__31_BIT_52__ETC___d157;
    endcase
  end
  always@(rg_amo_funct7 or
	  IF_rg_f3_39_EQ_0b0_40_OR_rg_f3_39_EQ_0b100_41__ETC___d183)
  begin
    case (rg_amo_funct7[6:2])
      5'b0, 5'b00100, 5'b01000, 5'b01100, 5'b10000, 5'b11000, 5'b11100:
	  CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_39_ETC__q35 =
	      IF_rg_f3_39_EQ_0b0_40_OR_rg_f3_39_EQ_0b100_41__ETC___d183;
      default: CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_39_ETC__q35 =
		   rg_amo_funct7[6:2] != 5'b10100 ||
		   IF_rg_f3_39_EQ_0b0_40_OR_rg_f3_39_EQ_0b100_41__ETC___d183;
    endcase
  end
  always@(x1_avValue_pa__h5400 or
	  NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS__ETC___d246 or
	  CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_39_ETC__q35)
  begin
    case (x1_avValue_pa__h5400[2:0])
      3'h0, 3'h1, 3'h2, 3'h3, 3'h4, 3'h5, 3'h6:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d247 =
	      CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_39_ETC__q35;
      3'd7:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d247 =
	      NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS__ETC___d246;
    endcase
  end
  always@(x1_avValue_pa__h5400 or
	  NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS__ETC___d251 or
	  CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_39_ETC__q35)
  begin
    case (x1_avValue_pa__h5400[2:0])
      3'h0, 3'h2, 3'h4:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d252 =
	      CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_39_ETC__q35;
      default: IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d252 =
		   NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS__ETC___d251;
    endcase
  end
  always@(rg_f3 or
	  NOT_rg_f3_39_EQ_0b11_76_77_OR_rg_amo_funct7_1__ETC___d256 or
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d247 or
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d252 or
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d255)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_39_EQ_0b0_40_THEN_IF_IF_rg_priv_9_ULE_ETC___d259 =
	      IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d247;
      3'b001:
	  IF_rg_f3_39_EQ_0b0_40_THEN_IF_IF_rg_priv_9_ULE_ETC___d259 =
	      IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d252;
      3'b010:
	  IF_rg_f3_39_EQ_0b0_40_THEN_IF_IF_rg_priv_9_ULE_ETC___d259 =
	      IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d255;
      default: IF_rg_f3_39_EQ_0b0_40_THEN_IF_IF_rg_priv_9_ULE_ETC___d259 =
		   NOT_rg_f3_39_EQ_0b11_76_77_OR_rg_amo_funct7_1__ETC___d256;
    endcase
  end
  always@(rg_f3 or rg_priv_9_ULE_0b1___d40 or rg_satp or tlb$RDY_lookup)
  begin
    case (rg_f3[1:0])
      2'b0, 2'b01:
	  IF_rg_f3_39_BITS_1_TO_0_00_EQ_0b0_01_OR_rg_f3__ETC___d207 =
	      !rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	      tlb$RDY_lookup;
      default: IF_rg_f3_39_BITS_1_TO_0_00_EQ_0b0_01_OR_rg_f3__ETC___d207 =
		   rg_f3[1:0] != 2'b10 || !rg_priv_9_ULE_0b1___d40 ||
		   rg_satp[63:60] != 4'd8 ||
		   tlb$RDY_lookup;
    endcase
  end
  always@(rg_addr or
	  result__h6757 or
	  result__h13113 or
	  result__h13141 or
	  result__h13169 or
	  result__h13197 or
	  result__h13225 or result__h13253 or result__h13281)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d460 =
	      result__h6757;
      3'h1:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d460 =
	      result__h13113;
      3'h2:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d460 =
	      result__h13141;
      3'h3:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d460 =
	      result__h13169;
      3'h4:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d460 =
	      result__h13197;
      3'h5:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d460 =
	      result__h13225;
      3'h6:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d460 =
	      result__h13253;
      3'h7:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d460 =
	      result__h13281;
    endcase
  end
  always@(rg_addr or
	  result__h13326 or
	  result__h13354 or
	  result__h13382 or
	  result__h13410 or
	  result__h13438 or
	  result__h13466 or result__h13494 or result__h13522)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d476 =
	      result__h13326;
      3'h1:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d476 =
	      result__h13354;
      3'h2:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d476 =
	      result__h13382;
      3'h3:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d476 =
	      result__h13410;
      3'h4:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d476 =
	      result__h13438;
      3'h5:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d476 =
	      result__h13466;
      3'h6:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d476 =
	      result__h13494;
      3'h7:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d476 =
	      result__h13522;
    endcase
  end
  always@(rg_addr or
	  result__h13567 or
	  result__h13595 or result__h13623 or result__h13651)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d488 =
	      result__h13567;
      3'h2:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d488 =
	      result__h13595;
      3'h4:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d488 =
	      result__h13623;
      3'h6:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d488 =
	      result__h13651;
      default: IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d488 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h13692 or
	  result__h13720 or result__h13748 or result__h13776)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d496 =
	      result__h13692;
      3'h2:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d496 =
	      result__h13720;
      3'h4:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d496 =
	      result__h13748;
      3'h6:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d496 =
	      result__h13776;
      default: IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d496 =
		   64'd0;
    endcase
  end
  always@(rg_addr or result__h13884 or result__h13912)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d506 =
	      result__h13884;
      3'h4:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d506 =
	      result__h13912;
      default: IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d506 =
		   64'd0;
    endcase
  end
  always@(rg_addr or result__h13817 or result__h13845)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result3817_0x4_re_ETC__q36 =
	      result__h13817;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result3817_0x4_re_ETC__q36 =
	      result__h13845;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result3817_0x4_re_ETC__q36 =
		   64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d460 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d488 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result3817_0x4_re_ETC__q36 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_ram_ETC___d507 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d476 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d496 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d506)
  begin
    case (rg_f3)
      3'b0:
	  new_value__h6704 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d460;
      3'b001:
	  new_value__h6704 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d488;
      3'b010:
	  new_value__h6704 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result3817_0x4_re_ETC__q36;
      3'b011:
	  new_value__h6704 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_ram_ETC___d507;
      3'b100:
	  new_value__h6704 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d476;
      3'b101:
	  new_value__h6704 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d496;
      3'b110:
	  new_value__h6704 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d506;
      3'd7: new_value__h6704 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d460 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d488 or
	  w1___1__h14880 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_ram_ETC___d507 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d476 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d496 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d506)
  begin
    case (rg_f3)
      3'b0:
	  w1__h14809 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d460;
      3'b001:
	  w1__h14809 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d488;
      3'b010: w1__h14809 = w1___1__h14880;
      3'b011:
	  w1__h14809 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_ram_ETC___d507;
      3'b100:
	  w1__h14809 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d476;
      3'b101:
	  w1__h14809 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d496;
      3'b110:
	  w1__h14809 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d506;
      3'd7: w1__h14809 = 64'd0;
    endcase
  end
  always@(x1_avValue_pa__h5400 or ram_word64_set$DOB or rg_st_amo_val)
  begin
    case (x1_avValue_pa__h5400[2:0])
      3'h0:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d625 =
	      { ram_word64_set$DOB[63:16], rg_st_amo_val[15:0] };
      3'h2:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d625 =
	      { ram_word64_set$DOB[63:32],
		rg_st_amo_val[15:0],
		ram_word64_set$DOB[15:0] };
      3'h4:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d625 =
	      { ram_word64_set$DOB[63:48],
		rg_st_amo_val[15:0],
		ram_word64_set$DOB[31:0] };
      3'h6:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d625 =
	      { rg_st_amo_val[15:0], ram_word64_set$DOB[47:0] };
      default: IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d625 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(x1_avValue_pa__h5400 or ram_word64_set$DOB or rg_st_amo_val)
  begin
    case (x1_avValue_pa__h5400[2:0])
      3'h0:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d616 =
	      { ram_word64_set$DOB[63:8], rg_st_amo_val[7:0] };
      3'h1:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d616 =
	      { ram_word64_set$DOB[63:16],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[7:0] };
      3'h2:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d616 =
	      { ram_word64_set$DOB[63:24],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[15:0] };
      3'h3:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d616 =
	      { ram_word64_set$DOB[63:32],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[23:0] };
      3'h4:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d616 =
	      { ram_word64_set$DOB[63:40],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[31:0] };
      3'h5:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d616 =
	      { ram_word64_set$DOB[63:48],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[39:0] };
      3'h6:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d616 =
	      { ram_word64_set$DOB[63:56],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[47:0] };
      3'h7:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d616 =
	      { rg_st_amo_val[7:0], ram_word64_set$DOB[55:0] };
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d460 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d488 or
	  new_value704_BITS_31_TO_0__q37 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_ram_ETC___d507 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d476 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d496 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d506)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_39_EQ_0b10_70_THEN_SEXT_IF_rg_f3_39_E_ETC___d574 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d460;
      3'b001:
	  IF_rg_f3_39_EQ_0b10_70_THEN_SEXT_IF_rg_f3_39_E_ETC___d574 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d488;
      3'b010:
	  IF_rg_f3_39_EQ_0b10_70_THEN_SEXT_IF_rg_f3_39_E_ETC___d574 =
	      { {32{new_value704_BITS_31_TO_0__q37[31]}},
		new_value704_BITS_31_TO_0__q37 };
      3'b011:
	  IF_rg_f3_39_EQ_0b10_70_THEN_SEXT_IF_rg_f3_39_E_ETC___d574 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_ram_ETC___d507;
      3'b100:
	  IF_rg_f3_39_EQ_0b10_70_THEN_SEXT_IF_rg_f3_39_E_ETC___d574 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d476;
      3'b101:
	  IF_rg_f3_39_EQ_0b10_70_THEN_SEXT_IF_rg_f3_39_E_ETC___d574 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d496;
      3'b110:
	  IF_rg_f3_39_EQ_0b10_70_THEN_SEXT_IF_rg_f3_39_E_ETC___d574 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d506;
      3'd7: IF_rg_f3_39_EQ_0b10_70_THEN_SEXT_IF_rg_f3_39_E_ETC___d574 = 64'd0;
    endcase
  end
  always@(rg_amo_funct7 or
	  new_st_val__h15921 or
	  new_st_val__h14913 or
	  w2__h32098 or
	  new_st_val__h15893 or
	  new_st_val__h15901 or
	  new_st_val__h15897 or
	  new_st_val__h15916 or new_st_val__h15905 or new_st_val__h15910)
  begin
    case (rg_amo_funct7[6:2])
      5'b0: _theResult_____2__h14817 = new_st_val__h14913;
      5'b00001: _theResult_____2__h14817 = w2__h32098;
      5'b00100: _theResult_____2__h14817 = new_st_val__h15893;
      5'b01000: _theResult_____2__h14817 = new_st_val__h15901;
      5'b01100: _theResult_____2__h14817 = new_st_val__h15897;
      5'b10000: _theResult_____2__h14817 = new_st_val__h15916;
      5'b11000: _theResult_____2__h14817 = new_st_val__h15905;
      5'b11100: _theResult_____2__h14817 = new_st_val__h15910;
      default: _theResult_____2__h14817 = new_st_val__h15921;
    endcase
  end
  always@(rg_f3 or new_st_val__h6644 or _theResult___fst__h20977)
  begin
    case (rg_f3[1:0])
      2'b0, 2'b01, 2'b10:
	  mem_req_wr_data_wdata__h20859 = _theResult___fst__h20977;
      2'd3: mem_req_wr_data_wdata__h20859 = new_st_val__h6644;
    endcase
  end
  always@(x1_avValue_pa__h5400 or ram_word64_set$DOB or new_st_val__h6644)
  begin
    case (x1_avValue_pa__h5400[2:0])
      3'h0:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d690 =
	      { ram_word64_set$DOB[63:16], new_st_val__h6644[15:0] };
      3'h2:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d690 =
	      { ram_word64_set$DOB[63:32],
		new_st_val__h6644[15:0],
		ram_word64_set$DOB[15:0] };
      3'h4:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d690 =
	      { ram_word64_set$DOB[63:48],
		new_st_val__h6644[15:0],
		ram_word64_set$DOB[31:0] };
      3'h6:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d690 =
	      { new_st_val__h6644[15:0], ram_word64_set$DOB[47:0] };
      default: IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d690 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(x1_avValue_pa__h5400 or ram_word64_set$DOB or new_st_val__h6644)
  begin
    case (x1_avValue_pa__h5400[2:0])
      3'h0:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d681 =
	      { ram_word64_set$DOB[63:8], new_st_val__h6644[7:0] };
      3'h1:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d681 =
	      { ram_word64_set$DOB[63:16],
		new_st_val__h6644[7:0],
		ram_word64_set$DOB[7:0] };
      3'h2:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d681 =
	      { ram_word64_set$DOB[63:24],
		new_st_val__h6644[7:0],
		ram_word64_set$DOB[15:0] };
      3'h3:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d681 =
	      { ram_word64_set$DOB[63:32],
		new_st_val__h6644[7:0],
		ram_word64_set$DOB[23:0] };
      3'h4:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d681 =
	      { ram_word64_set$DOB[63:40],
		new_st_val__h6644[7:0],
		ram_word64_set$DOB[31:0] };
      3'h5:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d681 =
	      { ram_word64_set$DOB[63:48],
		new_st_val__h6644[7:0],
		ram_word64_set$DOB[39:0] };
      3'h6:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d681 =
	      { ram_word64_set$DOB[63:56],
		new_st_val__h6644[7:0],
		ram_word64_set$DOB[47:0] };
      3'h7:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d681 =
	      { new_st_val__h6644[7:0], ram_word64_set$DOB[55:0] };
    endcase
  end
  always@(x1_avValue_pa__h5400 or ram_word64_set$DOB or rg_st_amo_val)
  begin
    case (x1_avValue_pa__h5400[2:0])
      3'h0:
	  CASE_x1_avValue_pa400_BITS_2_TO_0_0x0_ram_word_ETC__q39 =
	      { ram_word64_set$DOB[63:32], rg_st_amo_val[31:0] };
      3'h4:
	  CASE_x1_avValue_pa400_BITS_2_TO_0_0x0_ram_word_ETC__q39 =
	      { rg_st_amo_val[31:0], ram_word64_set$DOB[31:0] };
      default: CASE_x1_avValue_pa400_BITS_2_TO_0_0x0_ram_word_ETC__q39 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_f3 or
	  ram_word64_set$DOB or
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d616 or
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d625 or
	  CASE_x1_avValue_pa400_BITS_2_TO_0_0x0_ram_word_ETC__q39 or
	  rg_st_amo_val)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_39_EQ_0b0_40_THEN_IF_IF_rg_priv_9_ULE_ETC___d634 =
	      IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d616;
      3'b001:
	  IF_rg_f3_39_EQ_0b0_40_THEN_IF_IF_rg_priv_9_ULE_ETC___d634 =
	      IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d625;
      3'b010:
	  IF_rg_f3_39_EQ_0b0_40_THEN_IF_IF_rg_priv_9_ULE_ETC___d634 =
	      CASE_x1_avValue_pa400_BITS_2_TO_0_0x0_ram_word_ETC__q39;
      3'b011:
	  IF_rg_f3_39_EQ_0b0_40_THEN_IF_IF_rg_priv_9_ULE_ETC___d634 =
	      rg_st_amo_val;
      default: IF_rg_f3_39_EQ_0b0_40_THEN_IF_IF_rg_priv_9_ULE_ETC___d634 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_addr or result__h28400 or result__h33089)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d1245 =
	      result__h28400;
      3'h4:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d1245 =
	      result__h33089;
      default: IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d1245 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h28348 or
	  result__h32903 or result__h32930 or result__h32957)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d1238 =
	      result__h28348;
      3'h2:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d1238 =
	      result__h32903;
      3'h4:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d1238 =
	      result__h32930;
      3'h6:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d1238 =
	      result__h32957;
      default: IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d1238 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h28322 or
	  result__h32782 or result__h32809 or result__h32836)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d1231 =
	      result__h28322;
      3'h2:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d1231 =
	      result__h32782;
      3'h4:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d1231 =
	      result__h32809;
      3'h6:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d1231 =
	      result__h32836;
      default: IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d1231 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h28296 or
	  result__h32549 or
	  result__h32576 or
	  result__h32603 or
	  result__h32630 or
	  result__h32657 or result__h32684 or result__h32711)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d1221 =
	      result__h28296;
      3'h1:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d1221 =
	      result__h32549;
      3'h2:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d1221 =
	      result__h32576;
      3'h3:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d1221 =
	      result__h32603;
      3'h4:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d1221 =
	      result__h32630;
      3'h5:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d1221 =
	      result__h32657;
      3'h6:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d1221 =
	      result__h32684;
      3'h7:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d1221 =
	      result__h32711;
    endcase
  end
  always@(rg_addr or
	  result__h28269 or
	  result__h32316 or
	  result__h32343 or
	  result__h32370 or
	  result__h32397 or
	  result__h32424 or result__h32451 or result__h32478)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d1206 =
	      result__h28269;
      3'h1:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d1206 =
	      result__h32316;
      3'h2:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d1206 =
	      result__h32343;
      3'h3:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d1206 =
	      result__h32370;
      3'h4:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d1206 =
	      result__h32397;
      3'h5:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d1206 =
	      result__h32424;
      3'h6:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d1206 =
	      result__h32451;
      3'h7:
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d1206 =
	      result__h32478;
    endcase
  end
  always@(rg_addr or result__h28374 or result__h33024)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result8374_0x4_re_ETC__q40 =
	      result__h28374;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result8374_0x4_re_ETC__q40 =
	      result__h33024;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result8374_0x4_re_ETC__q40 =
		   64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d1206 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d1231 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result8374_0x4_re_ETC__q40 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_mas_ETC___d1246 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d1221 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d1238 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d1245)
  begin
    case (rg_f3)
      3'b0:
	  w1__h32092 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d1206;
      3'b001:
	  w1__h32092 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d1231;
      3'b010:
	  w1__h32092 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result8374_0x4_re_ETC__q40;
      3'b011:
	  w1__h32092 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_mas_ETC___d1246;
      3'b100:
	  w1__h32092 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d1221;
      3'b101:
	  w1__h32092 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d1238;
      3'b110:
	  w1__h32092 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d1245;
      3'd7: w1__h32092 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d1206 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d1231 or
	  w1___1__h32167 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_mas_ETC___d1246 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d1221 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d1238 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d1245)
  begin
    case (rg_f3)
      3'b0:
	  w1__h32096 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d1206;
      3'b001:
	  w1__h32096 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d1231;
      3'b010: w1__h32096 = w1___1__h32167;
      3'b011:
	  w1__h32096 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_mas_ETC___d1246;
      3'b100:
	  w1__h32096 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d1221;
      3'b101:
	  w1__h32096 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d1238;
      3'b110:
	  w1__h32096 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d1245;
      3'd7: w1__h32096 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d1206 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d1231 or
	  w12092_BITS_31_TO_0__q41 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_mas_ETC___d1246 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d1221 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d1238 or
	  IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d1245)
  begin
    case (rg_f3)
      3'b0:
	  new_ld_val__h31741 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d1206;
      3'b001:
	  new_ld_val__h31741 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_SEX_ETC___d1231;
      3'b010:
	  new_ld_val__h31741 =
	      { {32{w12092_BITS_31_TO_0__q41[31]}},
		w12092_BITS_31_TO_0__q41 };
      3'b011:
	  new_ld_val__h31741 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_mas_ETC___d1246;
      3'b100:
	  new_ld_val__h31741 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d1221;
      3'b101:
	  new_ld_val__h31741 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d1238;
      3'b110:
	  new_ld_val__h31741 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_0_C_ETC___d1245;
      3'd7: new_ld_val__h31741 = 64'd0;
    endcase
  end
  always@(rg_amo_funct7 or
	  new_st_val__h33181 or
	  new_st_val__h32199 or
	  w2__h32098 or
	  new_st_val__h33153 or
	  new_st_val__h33161 or
	  new_st_val__h33157 or
	  new_st_val__h33176 or new_st_val__h33165 or new_st_val__h33170)
  begin
    case (rg_amo_funct7[6:2])
      5'b0: _theResult_____2__h32104 = new_st_val__h32199;
      5'b00001: _theResult_____2__h32104 = w2__h32098;
      5'b00100: _theResult_____2__h32104 = new_st_val__h33153;
      5'b01000: _theResult_____2__h32104 = new_st_val__h33161;
      5'b01100: _theResult_____2__h32104 = new_st_val__h33157;
      5'b10000: _theResult_____2__h32104 = new_st_val__h33176;
      5'b11000: _theResult_____2__h32104 = new_st_val__h33165;
      5'b11100: _theResult_____2__h32104 = new_st_val__h33170;
      default: _theResult_____2__h32104 = new_st_val__h33181;
    endcase
  end
  always@(rg_f3 or word64__h31814 or _theResult___fst__h32086)
  begin
    case (rg_f3[1:0])
      2'b0, 2'b01, 2'b10:
	  io_req_wr_data_wdata__h31968 = _theResult___fst__h32086;
      2'd3: io_req_wr_data_wdata__h31968 = word64__h31814;
    endcase
  end
  always@(rg_f3 or IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_1_E_ETC___d521)
  begin
    case (rg_f3)
      3'b0, 3'b001, 3'b010, 3'b011, 3'b100, 3'b101, 3'b110:
	  new_value__h18971 =
	      IF_rg_addr_0_BITS_2_TO_0_43_EQ_0x0_44_THEN_1_E_ETC___d521;
      3'd7: new_value__h18971 = 64'd0;
    endcase
  end
  always@(x1_avValue_pa__h5400 or ram_word64_set$DOB or new_st_val__h6644)
  begin
    case (x1_avValue_pa__h5400[2:0])
      3'h0:
	  CASE_x1_avValue_pa400_BITS_2_TO_0_0x0_ram_word_ETC__q45 =
	      { ram_word64_set$DOB[63:32], new_st_val__h6644[31:0] };
      3'h4:
	  CASE_x1_avValue_pa400_BITS_2_TO_0_0x0_ram_word_ETC__q45 =
	      { new_st_val__h6644[31:0], ram_word64_set$DOB[31:0] };
      default: CASE_x1_avValue_pa400_BITS_2_TO_0_0x0_ram_word_ETC__q45 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_f3 or
	  ram_word64_set$DOB or
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d681 or
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d690 or
	  CASE_x1_avValue_pa400_BITS_2_TO_0_0x0_ram_word_ETC__q45 or
	  new_st_val__h6644)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_39_EQ_0b0_40_THEN_IF_IF_rg_priv_9_ULE_ETC___d699 =
	      IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d681;
      3'b001:
	  IF_rg_f3_39_EQ_0b0_40_THEN_IF_IF_rg_priv_9_ULE_ETC___d699 =
	      IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_6_ETC___d690;
      3'b010:
	  IF_rg_f3_39_EQ_0b0_40_THEN_IF_IF_rg_priv_9_ULE_ETC___d699 =
	      CASE_x1_avValue_pa400_BITS_2_TO_0_0x0_ram_word_ETC__q45;
      3'b011:
	  IF_rg_f3_39_EQ_0b0_40_THEN_IF_IF_rg_priv_9_ULE_ETC___d699 =
	      new_st_val__h6644;
      default: IF_rg_f3_39_EQ_0b0_40_THEN_IF_IF_rg_priv_9_ULE_ETC___d699 =
		   ram_word64_set$DOB;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY 4'd0;
	master_xactor_crg_rd_addr_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	master_xactor_crg_rd_data_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	master_xactor_crg_wr_addr_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	master_xactor_crg_wr_data_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	master_xactor_crg_wr_resp_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY 6'd0;
	rg_lower_word32_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_requesting_cline <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 5'd0;
      end
    else
      begin
        if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (ctr_wr_rsps_pending_crg$EN)
	  ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY
	      ctr_wr_rsps_pending_crg$D_IN;
	if (master_xactor_crg_rd_addr_full$EN)
	  master_xactor_crg_rd_addr_full <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_crg_rd_addr_full$D_IN;
	if (master_xactor_crg_rd_data_full$EN)
	  master_xactor_crg_rd_data_full <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_crg_rd_data_full$D_IN;
	if (master_xactor_crg_wr_addr_full$EN)
	  master_xactor_crg_wr_addr_full <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_crg_wr_addr_full$D_IN;
	if (master_xactor_crg_wr_data_full$EN)
	  master_xactor_crg_wr_data_full <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_crg_wr_data_full$D_IN;
	if (master_xactor_crg_wr_resp_full$EN)
	  master_xactor_crg_wr_resp_full <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_crg_wr_resp_full$D_IN;
	if (rg_cset_in_cache$EN)
	  rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY rg_cset_in_cache$D_IN;
	if (rg_lower_word32_full$EN)
	  rg_lower_word32_full <= `BSV_ASSIGNMENT_DELAY
	      rg_lower_word32_full$D_IN;
	if (rg_lrsc_valid$EN)
	  rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY rg_lrsc_valid$D_IN;
	if (rg_requesting_cline$EN)
	  rg_requesting_cline <= `BSV_ASSIGNMENT_DELAY
	      rg_requesting_cline$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
      end
    if (master_xactor_rg_rd_addr$EN)
      master_xactor_rg_rd_addr <= `BSV_ASSIGNMENT_DELAY
	  master_xactor_rg_rd_addr$D_IN;
    if (master_xactor_rg_rd_data$EN)
      master_xactor_rg_rd_data <= `BSV_ASSIGNMENT_DELAY
	  master_xactor_rg_rd_data$D_IN;
    if (master_xactor_rg_wr_addr$EN)
      master_xactor_rg_wr_addr <= `BSV_ASSIGNMENT_DELAY
	  master_xactor_rg_wr_addr$D_IN;
    if (master_xactor_rg_wr_data$EN)
      master_xactor_rg_wr_data <= `BSV_ASSIGNMENT_DELAY
	  master_xactor_rg_wr_data$D_IN;
    if (master_xactor_rg_wr_resp$EN)
      master_xactor_rg_wr_resp <= `BSV_ASSIGNMENT_DELAY
	  master_xactor_rg_wr_resp$D_IN;
    if (rg_addr$EN) rg_addr <= `BSV_ASSIGNMENT_DELAY rg_addr$D_IN;
    if (rg_amo_funct7$EN)
      rg_amo_funct7 <= `BSV_ASSIGNMENT_DELAY rg_amo_funct7$D_IN;
    if (rg_error_during_refill$EN)
      rg_error_during_refill <= `BSV_ASSIGNMENT_DELAY
	  rg_error_during_refill$D_IN;
    if (rg_exc_code$EN) rg_exc_code <= `BSV_ASSIGNMENT_DELAY rg_exc_code$D_IN;
    if (rg_f3$EN) rg_f3 <= `BSV_ASSIGNMENT_DELAY rg_f3$D_IN;
    if (rg_ld_val$EN) rg_ld_val <= `BSV_ASSIGNMENT_DELAY rg_ld_val$D_IN;
    if (rg_lower_word32$EN)
      rg_lower_word32 <= `BSV_ASSIGNMENT_DELAY rg_lower_word32$D_IN;
    if (rg_lrsc_pa$EN) rg_lrsc_pa <= `BSV_ASSIGNMENT_DELAY rg_lrsc_pa$D_IN;
    if (rg_mstatus_MXR$EN)
      rg_mstatus_MXR <= `BSV_ASSIGNMENT_DELAY rg_mstatus_MXR$D_IN;
    if (rg_op$EN) rg_op <= `BSV_ASSIGNMENT_DELAY rg_op$D_IN;
    if (rg_pa$EN) rg_pa <= `BSV_ASSIGNMENT_DELAY rg_pa$D_IN;
    if (rg_priv$EN) rg_priv <= `BSV_ASSIGNMENT_DELAY rg_priv$D_IN;
    if (rg_pte_pa$EN) rg_pte_pa <= `BSV_ASSIGNMENT_DELAY rg_pte_pa$D_IN;
    if (rg_req_byte_in_cline$EN)
      rg_req_byte_in_cline <= `BSV_ASSIGNMENT_DELAY rg_req_byte_in_cline$D_IN;
    if (rg_satp$EN) rg_satp <= `BSV_ASSIGNMENT_DELAY rg_satp$D_IN;
    if (rg_sstatus_SUM$EN)
      rg_sstatus_SUM <= `BSV_ASSIGNMENT_DELAY rg_sstatus_SUM$D_IN;
    if (rg_st_amo_val$EN)
      rg_st_amo_val <= `BSV_ASSIGNMENT_DELAY rg_st_amo_val$D_IN;
    if (rg_word64_set_in_cache$EN)
      rg_word64_set_in_cache <= `BSV_ASSIGNMENT_DELAY
	  rg_word64_set_in_cache$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_verbosity = 4'hA;
    ctr_wr_rsps_pending_crg = 4'hA;
    master_xactor_crg_rd_addr_full = 1'h0;
    master_xactor_crg_rd_data_full = 1'h0;
    master_xactor_crg_wr_addr_full = 1'h0;
    master_xactor_crg_wr_data_full = 1'h0;
    master_xactor_crg_wr_resp_full = 1'h0;
    master_xactor_rg_rd_addr = 67'h2AAAAAAAAAAAAAAAA;
    master_xactor_rg_rd_data = 66'h2AAAAAAAAAAAAAAAA;
    master_xactor_rg_wr_addr = 67'h2AAAAAAAAAAAAAAAA;
    master_xactor_rg_wr_data = 72'hAAAAAAAAAAAAAAAAAA;
    master_xactor_rg_wr_resp = 2'h2;
    rg_addr = 64'hAAAAAAAAAAAAAAAA;
    rg_amo_funct7 = 7'h2A;
    rg_cset_in_cache = 6'h2A;
    rg_error_during_refill = 1'h0;
    rg_exc_code = 4'hA;
    rg_f3 = 3'h2;
    rg_ld_val = 64'hAAAAAAAAAAAAAAAA;
    rg_lower_word32 = 32'hAAAAAAAA;
    rg_lower_word32_full = 1'h0;
    rg_lrsc_pa = 64'hAAAAAAAAAAAAAAAA;
    rg_lrsc_valid = 1'h0;
    rg_mstatus_MXR = 1'h0;
    rg_op = 2'h2;
    rg_pa = 64'hAAAAAAAAAAAAAAAA;
    rg_priv = 2'h2;
    rg_pte_pa = 64'hAAAAAAAAAAAAAAAA;
    rg_req_byte_in_cline = 64'hAAAAAAAAAAAAAAAA;
    rg_requesting_cline = 1'h0;
    rg_satp = 64'hAAAAAAAAAAAAAAAA;
    rg_sstatus_SUM = 1'h0;
    rg_st_amo_val = 64'hAAAAAAAAAAAAAAAA;
    rg_state = 5'h0A;
    rg_word64_set_in_cache = 9'h0AA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 6'd63 &&
	  cfg_verbosity != 4'd0 &&
	  !f_reset_reqs$D_OUT)
	begin
	  v__h4222 = $stime;
	  #0;
	end
    v__h4216 = v__h4222 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 6'd63 &&
	  cfg_verbosity != 4'd0 &&
	  !f_reset_reqs$D_OUT)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		   v__h4216,
		   "D_MMU_Cache",
		   $signed(32'd64),
		   $signed(32'd1));
	else
	  $display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		   v__h4216,
		   "I_MMU_Cache",
		   $signed(32'd64),
		   $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 6'd63 &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  f_reset_reqs$D_OUT)
	begin
	  v__h4323 = $stime;
	  #0;
	end
    v__h4317 = v__h4323 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 6'd63 &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  f_reset_reqs$D_OUT)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_reset: Flushed", v__h4317, "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_reset: Flushed", v__h4317, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_rereq && !cfg_verbosity_read__0_ULE_1___d11)
	$display("    fa_req_ram_B tagCSet [0x%0x] word64_set [0x%0d]",
		 rg_addr[11:6],
		 rg_addr[11:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_req &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h28792 = $stime;
	  #0;
	end
    v__h28786 = v__h28792 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_req &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_near_mem_read_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h28786,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_near_mem_read_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h28786,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_req &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$display("    ", { 1'd1, rg_pa, 72'hAAAAAAAAAAAAAAAAAA });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h28977 = $stime;
	  #0;
	end
    v__h28971 = v__h28977 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_near_mem_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h28971,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_near_mem_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h28971,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("Near_Mem_IO_Rsp { ", "read_not_write: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "ok: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  f_near_mem_io_rsps$D_OUT[64])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  !f_near_mem_io_rsps$D_OUT[64])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", f_near_mem_io_rsps$D_OUT[63:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  f_near_mem_io_rsps$D_OUT[64] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h29379 = $stime;
	  #0;
	end
    v__h29373 = v__h29379 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  f_near_mem_io_rsps$D_OUT[64] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h29373,
		   "D_MMU_Cache",
		   rg_addr,
		   f_near_mem_io_rsps$D_OUT[63:0]);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h29373,
		   "I_MMU_Cache",
		   rg_addr,
		   f_near_mem_io_rsps$D_OUT[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  !f_near_mem_io_rsps$D_OUT[64] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h29486 = $stime;
	  #0;
	end
    v__h29480 = v__h29486 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  !f_near_mem_io_rsps$D_OUT[64] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_near_mem_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		   v__h29480,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_io_near_mem_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		   v__h29480,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_maintain_io_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h29767 = $stime;
	  #0;
	end
    v__h29761 = v__h29767 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_maintain_io_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h29761,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_ld_val);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h29761,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_ld_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h30954 = $stime;
	  #0;
	end
    v__h30948 = v__h30954 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_near_mem_write_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h30948,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_near_mem_write_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h30948,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("Near_Mem_IO_Req { ", "read_not_write: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", value__h31014);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", io_req_wr_data_wstrb__h31969, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h31096 = $stime;
	  #0;
	end
    v__h31090 = v__h31096 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_near_mem_write_rsp",
		   v__h31090,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_io_near_mem_write_rsp",
		   v__h31090,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("Near_Mem_IO_Rsp { ", "read_not_write: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "ok: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  f_near_mem_io_rsps$D_OUT[64])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  !f_near_mem_io_rsps$D_OUT[64])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", f_near_mem_io_rsps$D_OUT[63:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req && !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h31276 = $stime;
	  #0;
	end
    v__h31270 = v__h31276 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req && !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_AMO_SC_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h31270,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_AMO_SC_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h31270,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req && !cfg_verbosity_read__0_ULE_1___d11)
	$display("    FAIL due to I/O address.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req && !cfg_verbosity_read__0_ULE_1___d11)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_reset && !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h3851 = $stime;
	  #0;
	end
    v__h3845 = v__h3851 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_reset && !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_start_reset", v__h3845, "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_start_reset", v__h3845, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  (!master_xactor_rg_rd_data[0] ||
	   !master_xactor_rg_rd_data[1] && master_xactor_rg_rd_data[2]) &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h22925 = $stime;
	  #0;
	end
    v__h22919 = v__h22925 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  (!master_xactor_rg_rd_data[0] ||
	   !master_xactor_rg_rd_data[1] && master_xactor_rg_rd_data[2]) &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		   v__h22919,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa,
		   exc_code___1__h5801);
	else
	  $display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		   v__h22919,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa,
		   exc_code___1__h5801);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h23027 = $stime;
	  #0;
	end
    v__h23021 = v__h23027 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_rl_ptw_level_2: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: continue to level 1",
		   v__h23021,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_rl_ptw_level_2: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: continue to level 1",
		   v__h23021,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("    Req for level 1 PTE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("AXI4_Lite_Rd_Addr { ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", lev_1_pte_pa_w64_fa__h22500);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  (master_xactor_rg_rd_data[1] || !master_xactor_rg_rd_data[2]) &&
	  master_xactor_rg_rd_data_30_BIT_3_41_OR_master_ETC___d895)
	begin
	  v__h23133 = $stime;
	  #0;
	end
    v__h23127 = v__h23133 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  (master_xactor_rg_rd_data[1] || !master_xactor_rg_rd_data[2]) &&
	  master_xactor_rg_rd_data_30_BIT_3_41_OR_master_ETC___d895)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: gigapage pte 0x%0h @ 0x%0h",
		   v__h23127,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: gigapage pte 0x%0h @ 0x%0h",
		   v__h23127,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  (master_xactor_rg_rd_data[1] || !master_xactor_rg_rd_data[2]) &&
	  (master_xactor_rg_rd_data[3] || master_xactor_rg_rd_data[1]) &&
	  (master_xactor_rg_rd_data[27:19] != 9'd0 ||
	   master_xactor_rg_rd_data[18:10] != 9'd0))
	$display("    Invalid PTE: PPN[1] or PPN[0] is not zero; page fault %0d",
		 exc_code___1__h5801);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  (master_xactor_rg_rd_data[1] || !master_xactor_rg_rd_data[2]) &&
	  master_xactor_rg_rd_data_30_BIT_3_41_OR_master_ETC___d907)
	begin
	  v__h23245 = $stime;
	  #0;
	end
    v__h23239 = v__h23245 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  (master_xactor_rg_rd_data[1] || !master_xactor_rg_rd_data[2]) &&
	  master_xactor_rg_rd_data_30_BIT_3_41_OR_master_ETC___d907)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE for gigapage",
		   v__h23239,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE for gigapage",
		   v__h23239,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  (master_xactor_rg_rd_data[1] || !master_xactor_rg_rd_data[2]) &&
	  master_xactor_rg_rd_data_30_BIT_3_41_OR_master_ETC___d907)
	$display("    Addr Space megapage pa: 0x%0h", lev_1_PTN_pa__h22496);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h22854 = $stime;
	  #0;
	end
    v__h22848 = v__h22854 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_2 &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		   v__h22848,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pte_pa,
		   access_exc_code__h3360);
	else
	  $display("%0d: %s.rl_ptw_level_2: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		   v__h22848,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pte_pa,
		   access_exc_code__h3360);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  (!master_xactor_rg_rd_data[0] ||
	   !master_xactor_rg_rd_data[1] && master_xactor_rg_rd_data[2]) &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h23879 = $stime;
	  #0;
	end
    v__h23873 = v__h23879 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  (!master_xactor_rg_rd_data[0] ||
	   !master_xactor_rg_rd_data[1] && master_xactor_rg_rd_data[2]) &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		   v__h23873,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa,
		   exc_code___1__h5801);
	else
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		   v__h23873,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa,
		   exc_code___1__h5801);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h23981 = $stime;
	  #0;
	end
    v__h23975 = v__h23981 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: continue to level 0",
		   v__h23975,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: continue to level 0",
		   v__h23975,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("    Req for level 0 PTE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("AXI4_Lite_Rd_Addr { ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", lev_0_pte_pa_w64_fa__h23526);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_30_BITS_65_TO_64_31_E_ETC___d944)
	begin
	  v__h24199 = $stime;
	  #0;
	end
    v__h24193 = v__h24199 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_30_BITS_65_TO_64_31_E_ETC___d944)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE for megapage",
		   v__h24193,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE for megapage",
		   v__h24193,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_30_BITS_65_TO_64_31_E_ETC___d944)
	$display("    Addr Space megapage pa: 0x%0h", lev_1_PTN_pa__h22496);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_30_BITS_65_TO_64_31_E_ETC___d950)
	begin
	  v__h24087 = $stime;
	  #0;
	end
    v__h24081 = v__h24087 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_30_BITS_65_TO_64_31_E_ETC___d950)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: megapage pte 0x%0h @ 0x%0h",
		   v__h24081,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: megapage pte 0x%0h @ 0x%0h",
		   v__h24081,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  (master_xactor_rg_rd_data[1] || !master_xactor_rg_rd_data[2]) &&
	  (master_xactor_rg_rd_data[3] || master_xactor_rg_rd_data[1]) &&
	  master_xactor_rg_rd_data[18:10] != 9'd0)
	$display("    Invalid PTE: PPN [0] is not zero; page fault %0d",
		 exc_code___1__h5801);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h23808 = $stime;
	  #0;
	end
    v__h23802 = v__h23808 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		   v__h23802,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pte_pa,
		   access_exc_code__h3360);
	else
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		   v__h23802,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pte_pa,
		   access_exc_code__h3360);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  (!master_xactor_rg_rd_data[0] ||
	   !master_xactor_rg_rd_data[1] && master_xactor_rg_rd_data[2]) &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h24675 = $stime;
	  #0;
	end
    v__h24669 = v__h24675 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  (!master_xactor_rg_rd_data[0] ||
	   !master_xactor_rg_rd_data[1] && master_xactor_rg_rd_data[2]) &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		   v__h24669,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa,
		   exc_code___1__h5801);
	else
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		   v__h24669,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa,
		   exc_code___1__h5801);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h24746 = $stime;
	  #0;
	end
    v__h24740 = v__h24746 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  !master_xactor_rg_rd_data[2] &&
	  !master_xactor_rg_rd_data[3] &&
	  !master_xactor_rg_rd_data[1] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x50h: Not a leaf PTE; page fault %0d",
		   v__h24740,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa,
		   exc_code___1__h5801);
	else
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x50h: Not a leaf PTE; page fault %0d",
		   v__h24740,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa,
		   exc_code___1__h5801);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  (master_xactor_rg_rd_data[1] || !master_xactor_rg_rd_data[2]) &&
	  (master_xactor_rg_rd_data[3] || master_xactor_rg_rd_data[1]) &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h24828 = $stime;
	  #0;
	end
    v__h24822 = v__h24828 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  (master_xactor_rg_rd_data[1] || !master_xactor_rg_rd_data[2]) &&
	  (master_xactor_rg_rd_data[3] || master_xactor_rg_rd_data[1]) &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE",
		   v__h24822,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE",
		   v__h24822,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0],
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  master_xactor_rg_rd_data[0] &&
	  (master_xactor_rg_rd_data[1] || !master_xactor_rg_rd_data[2]) &&
	  (master_xactor_rg_rd_data[3] || master_xactor_rg_rd_data[1]) &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$display("    Addr Space page pa: 0x%0h", lev_1_PTN_pa__h22496);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h24604 = $stime;
	  #0;
	end
    v__h24598 = v__h24604 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		   v__h24598,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pte_pa,
		   access_exc_code__h3360);
	else
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		   v__h24598,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pte_pa,
		   access_exc_code__h3360);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_000___d1001)
	begin
	  v__h25766 = $stime;
	  #0;
	end
    v__h25760 = v__h25766 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_000___d1001)
	if (dmem_not_imem)
	  $write("%0d: %s.rl_cache_refill_req_loop: mem req: ",
		 v__h25760,
		 "D_MMU_Cache");
	else
	  $write("%0d: %s.rl_cache_refill_req_loop: mem req: ",
		 v__h25760,
		 "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_000___d1001)
	$write("AXI4_Lite_Rd_Addr { ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_000___d1001)
	$write("'h%h", cline_fabric_addr__h25600);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_000___d1001)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_000___d1001)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_000___d1001)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_000___d1001)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_000___d1001)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h4472 = $stime;
	  #0;
	end
    v__h4466 = v__h4472 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h",
		   v__h4466,
		   "D_MMU_Cache",
		   rg_addr);
	else
	  $display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h",
		   v__h4466,
		   "I_MMU_Cache",
		   rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  rg_satp[63:60] != 4'd0)
	$display("        Priv:%0d  SATP:{mode %0d asid %0h pa %0h}  VA:%0h.%0h.%0h",
		 rg_priv,
		 rg_satp[63:60],
		 rg_satp[59:44],
		 satp_pa__h2617,
		 rg_addr[29:21],
		 rg_addr[20:12],
		 rg_addr[11:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$display("        eaddr = {CTag 0x%0h  CSet 0x%0h  Word64 0x%0h  Byte 0x%0h}",
		 rg_addr[63:12],
		 rg_addr[11:6],
		 rg_addr[5:3],
		 rg_addr[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("        CSet 0x%0x: (state, tag):", rg_addr[11:6]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(" (");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  ram_state_and_ctag_cset$DOB[52])
	$write("CTAG_CLEAN");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  !ram_state_and_ctag_cset$DOB[52])
	$write("CTAG_EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  ram_state_and_ctag_cset$DOB[52])
	$write(", 0x%0x", ram_state_and_ctag_cset$DOB[51:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  !ram_state_and_ctag_cset$DOB[52])
	$write(", --");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(")");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:6],
	       rg_addr[5:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(" 0x%0x", ram_word64_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("    TLB result: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("VM_Xlate_Result { ", "outcome: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d310)
	$write("VM_XLATE_OK");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_TO_6_ETC___d313)
	$write("VM_XLATE_EXCEPTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  rg_priv_9_ULE_0b1___d40 &&
	  rg_satp[63:60] == 4'd8 &&
	  !tlb$lookup[130])
	$write("VM_XLATE_TLB_MISS");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "pa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", x1_avValue_pa__h5400);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", x1_avValue_exc_code__h5401);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "pte_modified: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d334)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BITS_63_TO_6_ETC___d344)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "pte: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", value__h6226, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d375)
	$display("    => IO_REQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d535)
	begin
	  v__h13996 = $stime;
	  #0;
	end
    v__h13990 = v__h13996 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d535)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h13990,
		   "D_MMU_Cache",
		   rg_addr,
		   word64__h6520,
		   64'd0);
	else
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h13990,
		   "I_MMU_Cache",
		   rg_addr,
		   word64__h6520,
		   64'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	   tlb$lookup[130]) &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d548)
	$display("        AMO LR: reserving PA 0x%0h", x1_avValue_pa__h5400);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d535)
	$display("        Read-hit: addr 0x%0h word64 0x%0h",
		 rg_addr,
		 word64__h6520);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d554)
	$display("        Read Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d561)
	$display("        AMO LR: cache refill: cancelling LR/SC reservation for PA 0x%0h",
		 rg_lrsc_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d732)
	$display("        ST: cancelling LR/SC reservation for PA",
		 x1_avValue_pa__h5400);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!rg_priv_9_ULE_0b1___d40 || rg_satp[63:60] != 4'd8 ||
	   tlb$lookup[130]) &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d738)
	$display("        AMO SC: fail: reserved addr 0x%0h, this address 0x%0h",
		 rg_lrsc_pa,
		 x1_avValue_pa__h5400);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d745)
	$display("        AMO SC: fail due to invalid LR/SC reservation");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d750)
	$display("        AMO SC result = %0d", lrsc_result__h14373);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d756)
	$display("        Write-Cache-Hit: pa 0x%0h word64 0x%0h",
		 x1_avValue_pa__h5400,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d756)
	$write("        New Word64_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d756)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:6],
	       rg_addr[5:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d756)
	$write(" 0x%0x",
	       IF_rg_f3_39_EQ_0b0_40_THEN_IF_IF_rg_priv_9_ULE_ETC___d634);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d756)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d762)
	$display("        Write-Cache-Miss: pa 0x%0h word64 0x%0h",
		 x1_avValue_pa__h5400,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d769)
	begin
	  v__h20447 = $stime;
	  #0;
	end
    v__h20441 = v__h20447 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d769)
	$display("%0d: ERROR: CreditCounter: overflow", v__h20441);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d769)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d777)
	$display("        Write-Hit/Miss: eaddr 0x%0h word64 0x%0h",
		 rg_addr,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d777)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d777)
	$write("AXI4_Lite_Wr_Addr { ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d777)
	$write("'h%h", mem_req_wr_addr_awaddr__h19990);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d777)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d777)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d777)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d777)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d777)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d777)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d777)
	$write("AXI4_Lite_Wr_Data { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d777)
	$write("'h%h", mem_req_wr_data_wdata__h20101);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d777)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d777)
	$write("'h%h", mem_req_wr_data_wstrb__h20102, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d777)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d777)
	$display("    => rl_write_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d783)
	begin
	  v__h19880 = $stime;
	  #0;
	end
    v__h19874 = v__h19880 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d783)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h19874,
		   "D_MMU_Cache",
		   rg_addr,
		   64'd1,
		   64'd0);
	else
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h19874,
		   "I_MMU_Cache",
		   rg_addr,
		   64'd1,
		   64'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d783)
	$display("        AMO SC: Fail response for addr 0x%0h", rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d790)
	$display("        AMO Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d796)
	begin
	  v__h21174 = $stime;
	  #0;
	end
    v__h21168 = v__h21174 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d796)
	$display("%0d: ERROR: CreditCounter: overflow", v__h21168);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d796)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d804)
	$display("        AMO_op: cancelling LR/SC reservation for PA",
		 x1_avValue_pa__h5400);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d813)
	$display("        AMO: addr 0x%0h amo_f7 0x%0h f3 %0d rs2_val 0x%0h",
		 rg_addr,
		 rg_amo_funct7,
		 rg_f3,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d813)
	$display("          PA 0x%0h ", x1_avValue_pa__h5400);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d813)
	$display("          Cache word64 0x%0h, load-result 0x%0h",
		 word64__h6520,
		 word64__h6520);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d813)
	$display("          0x%0h  op  0x%0h -> 0x%0h",
		 word64__h6520,
		 word64__h6520,
		 new_st_val__h6644);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d813)
	$write("          New Word64_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d813)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:6],
	       rg_addr[5:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d813)
	$write(" 0x%0x",
	       IF_rg_f3_39_EQ_0b0_40_THEN_IF_IF_rg_priv_9_ULE_ETC___d699);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d813)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d813)
	$write("          To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d813)
	$write("AXI4_Lite_Wr_Addr { ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d813)
	$write("'h%h", mem_req_wr_addr_awaddr__h19990);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d813)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d813)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d813)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d813)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d813)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d813)
	$write("                     ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d813)
	$write("AXI4_Lite_Wr_Data { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d813)
	$write("'h%h", mem_req_wr_data_wdata__h20859);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d813)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d813)
	$write("'h%h", mem_req_wr_data_wstrb__h20102, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d813)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_000___d1001)
	begin
	  v__h25888 = $stime;
	  #0;
	end
    v__h25882 = v__h25888 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_000___d1001)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_cache_refill_rsps_loop:",
		   v__h25882,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_cache_refill_rsps_loop:",
		   v__h25882,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_000___d1001)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_000___d1001)
	$write("AXI4_Lite_Rd_Data { ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_000___d1001 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0)
	$write("AXI4_LITE_OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_000___d1001 &&
	  master_xactor_rg_rd_data[65:64] == 2'd1)
	$write("AXI4_LITE_EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_000___d1001 &&
	  master_xactor_rg_rd_data[65:64] == 2'd2)
	$write("AXI4_LITE_SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_000___d1001 &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  master_xactor_rg_rd_data[65:64] != 2'd1 &&
	  master_xactor_rg_rd_data[65:64] != 2'd2)
	$write("AXI4_LITE_DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_000___d1001)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_000___d1001)
	$write("'h%h", master_xactor_rg_rd_data[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_000___d1001)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_000___d1001)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_000___d1001)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h26113 = $stime;
	  #0;
	end
    v__h26107 = v__h26113 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d",
		   v__h26107,
		   "D_MMU_Cache",
		   access_exc_code__h3360);
	else
	  $display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d",
		   v__h26107,
		   "I_MMU_Cache",
		   access_exc_code__h3360);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  rg_word64_set_in_cache[2:0] == 3'd7 &&
	  (master_xactor_rg_rd_data[65:64] != 2'd0 ||
	   rg_error_during_refill) &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$display("    => MODULE_EXCEPTION_RSP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  rg_word64_set_in_cache[2:0] == 3'd7 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !rg_error_during_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$display("    => CACHE_REREQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_000___d1001)
	$display("        Updating Cache [0x%0x] (Word64_Set %0d) old => new",
		 rg_word64_set_in_cache,
		 rg_word64_set_in_cache[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_000___d1001)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:6],
	       rg_word64_set_in_cache[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_000___d1001)
	$write(" 0x%0x", ram_word64_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_000___d1001)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_000___d1001)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:6],
	       rg_word64_set_in_cache[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_000___d1001)
	$write(" 0x%0x", master_xactor_rg_rd_data[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_000___d1001)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h27887 = $stime;
	  #0;
	end
    v__h27881 = v__h27887 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_read_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h27881,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_read_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h27881,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d11)
	$display("    ", { rg_pa, 3'd0 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h28053 = $stime;
	  #0;
	end
    v__h28047 = v__h28053 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h28047,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h28047,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11)
	$write("AXI4_Lite_Rd_Data { ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0)
	$write("AXI4_LITE_OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11 &&
	  master_xactor_rg_rd_data[65:64] == 2'd1)
	$write("AXI4_LITE_EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11 &&
	  master_xactor_rg_rd_data[65:64] == 2'd2)
	$write("AXI4_LITE_SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11 &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  master_xactor_rg_rd_data[65:64] != 2'd1 &&
	  master_xactor_rg_rd_data[65:64] != 2'd2)
	$write("AXI4_LITE_DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", master_xactor_rg_rd_data[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h28452 = $stime;
	  #0;
	end
    v__h28446 = v__h28452 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h28446,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0]);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h28446,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h28559 = $stime;
	  #0;
	end
    v__h28553 = v__h28559 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		   v__h28553,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		   v__h28553,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && ctr_wr_rsps_pending_crg == 4'd15)
	begin
	  v__h30289 = $stime;
	  #0;
	end
    v__h30283 = v__h30289 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && ctr_wr_rsps_pending_crg == 4'd15)
	$display("%0d: ERROR: CreditCounter: overflow", v__h30283);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && ctr_wr_rsps_pending_crg == 4'd15)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h30434 = $stime;
	  #0;
	end
    v__h30428 = v__h30434 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_write_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h30428,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_write_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h30428,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("AXI4_Lite_Wr_Addr { ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", io_req_wr_addr_awaddr__h31809);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("AXI4_Lite_Wr_Data { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", value__h31014);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", io_req_wr_data_wstrb__h31969, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h31482 = $stime;
	  #0;
	end
    v__h31476 = v__h31482 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_AMO_op_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h31476,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_AMO_op_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h31476,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d11)
	$display("    ", { rg_pa, 3'd0 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h31614 = $stime;
	  #0;
	end
    v__h31608 = v__h31614 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_AMO_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h31608,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_AMO_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h31608,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("AXI4_Lite_Rd_Data { ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0)
	$write("AXI4_LITE_OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  master_xactor_rg_rd_data[65:64] == 2'd1)
	$write("AXI4_LITE_EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  master_xactor_rg_rd_data[65:64] == 2'd2)
	$write("AXI4_LITE_SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  master_xactor_rg_rd_data[65:64] != 2'd1 &&
	  master_xactor_rg_rd_data[65:64] != 2'd2)
	$write("AXI4_LITE_DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", master_xactor_rg_rd_data[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  ctr_wr_rsps_pending_crg == 4'd15)
	begin
	  v__h33394 = $stime;
	  #0;
	end
    v__h33388 = v__h33394 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  ctr_wr_rsps_pending_crg == 4'd15)
	$display("%0d: ERROR: CreditCounter: overflow", v__h33388);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  ctr_wr_rsps_pending_crg == 4'd15)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h33744 = $stime;
	  #0;
	end
    v__h33738 = v__h33744 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h33738,
		   "D_MMU_Cache",
		   rg_addr,
		   new_ld_val__h31741);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h33738,
		   "I_MMU_Cache",
		   rg_addr,
		   new_ld_val__h31741);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h33860 = $stime;
	  #0;
	end
    v__h33854 = v__h33860 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_AMO_read_rsp; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h33854,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_AMO_read_rsp; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h33854,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("AXI4_Lite_Wr_Addr { ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", io_req_wr_addr_awaddr__h31809);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("AXI4_Lite_Wr_Data { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", io_req_wr_data_wdata__h31968);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", io_req_wr_data_wstrb__h31969, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h31895 = $stime;
	  #0;
	end
    v__h31889 = v__h31895 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_AMO_read_rsp: FABRIC_RSP_ERR: raising trap STORE_AMO_ACCESS_FAULT",
		   v__h31889,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_io_AMO_read_rsp: FABRIC_RSP_ERR: raising trap STORE_AMO_ACCESS_FAULT",
		   v__h31889,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h22210 = $stime;
	  #0;
	end
    v__h22204 = v__h22210 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_start_tlb_refill for eaddr 0x%0h",
		   v__h22204,
		   "D_MMU_Cache",
		   rg_addr);
	else
	  $display("%0d: %s.rl_start_tlb_refill for eaddr 0x%0h",
		   v__h22204,
		   "I_MMU_Cache",
		   rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("    Req for level 2 PTE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("AXI4_Lite_Rd_Addr { ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", lev_2_pte_pa_w64_fa__h21997);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h34870 = $stime;
	  #0;
	end
    v__h34864 = v__h34870 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $write("%0d: %s.req: op:", v__h34864, "D_MMU_Cache");
	else
	  $write("%0d: %s.req: op:", v__h34864, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11 && req_op == 2'd0)
	$write("CACHE_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11 && req_op == 2'd1)
	$write("CACHE_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11 && req_op != 2'd0 &&
	  req_op != 2'd1)
	$write("CACHE_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(" f3:%0d addr:0x%0h st_value:0x%0h priv:",
	       req_f3,
	       req_addr,
	       req_st_value);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11 && req_priv == 2'b0)
	$write("U");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11 && req_priv == 2'b01)
	$write("S");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11 && req_priv == 2'b11)
	$write("M");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11 && req_priv != 2'b0 &&
	  req_priv != 2'b01 &&
	  req_priv != 2'b11)
	$write("RESERVED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(" sstatus_SUM:%0d mstatus_MXR:%0d satp:0x%0h",
	       req_sstatus_SUM,
	       req_mstatus_MXR,
	       req_satp,
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11)
	$display("    amo_funct7 = 0x%0h", req_amo_funct7);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req &&
	  req_f3_BITS_1_TO_0_358_EQ_0b0_359_OR_req_f3_BI_ETC___d1388 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$display("    fa_req_ram_B tagCSet [0x%0x] word64_set [0x%0d]",
		 req_addr[11:6],
		 req_addr[11:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h25547 = $stime;
	  #0;
	end
    v__h25541 = v__h25547 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $write("%0d: %s.rl_start_cache_refill: mem req: ",
		 v__h25541,
		 "D_MMU_Cache");
	else
	  $write("%0d: %s.rl_start_cache_refill: mem req: ",
		 v__h25541,
		 "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("AXI4_Lite_Rd_Addr { ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", cline_addr__h25599);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$display("    Victim way is %0d; => CACHE_REFILL", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_tlb_flush && !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h36024 = $stime;
	  #0;
	end
    v__h36018 = v__h36024 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_tlb_flush && !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.tlb_flush", v__h36018, "D_MMU_Cache");
	else
	  $display("%0d: %s.tlb_flush", v__h36018, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h34481 = $stime;
	  #0;
	end
    v__h34475 = v__h34481 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $write("%0d: %s.rl_discard_write_rsp: pending %0d ",
		 v__h34475,
		 "D_MMU_Cache",
		 $unsigned(b__h21986));
	else
	  $write("%0d: %s.rl_discard_write_rsp: pending %0d ",
		 v__h34475,
		 "I_MMU_Cache",
		 $unsigned(b__h21986));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("AXI4_Lite_Wr_Resp { ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("AXI4_LITE_OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	begin
	  v__h34442 = $stime;
	  #0;
	end
    v__h34436 = v__h34442 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_discard_write_rsp: fabric response error: exit",
		   v__h34436,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_discard_write_rsp: fabric response error: exit",
		   v__h34436,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	$write("AXI4_Lite_Wr_Resp { ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd1)
	$write("AXI4_LITE_EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd2)
	$write("AXI4_LITE_SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0 &&
	  master_xactor_rg_wr_resp != 2'd1 &&
	  master_xactor_rg_wr_resp != 2'd2)
	$write("AXI4_LITE_DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	$finish(32'd1);
  end
  // synopsys translate_on
endmodule  // mkMMU_Cache

