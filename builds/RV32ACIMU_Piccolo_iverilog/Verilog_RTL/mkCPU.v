//
// Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
//
// On Tue Jan  8 13:57:11 EST 2019
//
//
// Ports:
// Name                         I/O  size props
// RDY_hart0_server_reset_request_put  O     1 reg
// RDY_hart0_server_reset_response_get  O     1 reg
// imem_master_awvalid            O     1
// imem_master_awaddr             O    64 reg
// imem_master_awprot             O     3 reg
// imem_master_wvalid             O     1
// imem_master_wdata              O    64 reg
// imem_master_wstrb              O     8 reg
// imem_master_bready             O     1
// imem_master_arvalid            O     1
// imem_master_araddr             O    64 reg
// imem_master_arprot             O     3 reg
// imem_master_rready             O     1
// dmem_master_awvalid            O     1
// dmem_master_awaddr             O    64 reg
// dmem_master_awprot             O     3 reg
// dmem_master_wvalid             O     1
// dmem_master_wdata              O    64 reg
// dmem_master_wstrb              O     8 reg
// dmem_master_bready             O     1
// dmem_master_arvalid            O     1
// dmem_master_araddr             O    64 reg
// dmem_master_arprot             O     3 reg
// dmem_master_rready             O     1
// near_mem_slave_awready         O     1 const
// near_mem_slave_wready          O     1 const
// near_mem_slave_bvalid          O     1 const
// near_mem_slave_bresp           O     2 const
// near_mem_slave_arready         O     1 const
// near_mem_slave_rvalid          O     1 const
// near_mem_slave_rresp           O     2 const
// near_mem_slave_rdata           O    64 const
// RDY_external_interrupt_req     O     1 const
// RDY_timer_interrupt_req        O     1 const
// RDY_software_interrupt_req     O     1 const
// RDY_set_verbosity              O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// imem_master_awready            I     1
// imem_master_wready             I     1
// imem_master_bvalid             I     1
// imem_master_bresp              I     2 reg
// imem_master_arready            I     1
// imem_master_rvalid             I     1
// imem_master_rresp              I     2 reg
// imem_master_rdata              I    64 reg
// dmem_master_awready            I     1
// dmem_master_wready             I     1
// dmem_master_bvalid             I     1
// dmem_master_bresp              I     2 reg
// dmem_master_arready            I     1
// dmem_master_rvalid             I     1
// dmem_master_rresp              I     2 reg
// dmem_master_rdata              I    64 reg
// near_mem_slave_awvalid         I     1 unused
// near_mem_slave_awaddr          I    64 unused
// near_mem_slave_awprot          I     3 unused
// near_mem_slave_wvalid          I     1 unused
// near_mem_slave_wdata           I    64 unused
// near_mem_slave_wstrb           I     8 unused
// near_mem_slave_bready          I     1 unused
// near_mem_slave_arvalid         I     1 unused
// near_mem_slave_araddr          I    64 unused
// near_mem_slave_arprot          I     3 unused
// near_mem_slave_rready          I     1 unused
// external_interrupt_req_set_not_clear  I     1
// timer_interrupt_req_set_not_clear  I     1
// software_interrupt_req_set_not_clear  I     1
// set_verbosity_verbosity        I     4 reg
// set_verbosity_logdelay         I    64 reg
// EN_hart0_server_reset_request_put  I     1
// EN_hart0_server_reset_response_get  I     1
// EN_external_interrupt_req      I     1
// EN_timer_interrupt_req         I     1
// EN_software_interrupt_req      I     1
// EN_set_verbosity               I     1
//
// Combinational paths from inputs to outputs:
//   (imem_master_awready, imem_master_wready) -> imem_master_bready
//   (imem_master_awready,
//    imem_master_wready,
//    dmem_master_awready,
//    dmem_master_wready) -> imem_master_rready
//   (imem_master_awready,
//    imem_master_wready,
//    dmem_master_awready,
//    dmem_master_wready) -> dmem_master_rready
//   (dmem_master_awready, dmem_master_wready) -> dmem_master_bready
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCPU(CLK,
	     RST_N,

	     EN_hart0_server_reset_request_put,
	     RDY_hart0_server_reset_request_put,

	     EN_hart0_server_reset_response_get,
	     RDY_hart0_server_reset_response_get,

	     imem_master_awvalid,

	     imem_master_awaddr,

	     imem_master_awprot,

	     imem_master_awready,

	     imem_master_wvalid,

	     imem_master_wdata,

	     imem_master_wstrb,

	     imem_master_wready,

	     imem_master_bvalid,
	     imem_master_bresp,

	     imem_master_bready,

	     imem_master_arvalid,

	     imem_master_araddr,

	     imem_master_arprot,

	     imem_master_arready,

	     imem_master_rvalid,
	     imem_master_rresp,
	     imem_master_rdata,

	     imem_master_rready,

	     dmem_master_awvalid,

	     dmem_master_awaddr,

	     dmem_master_awprot,

	     dmem_master_awready,

	     dmem_master_wvalid,

	     dmem_master_wdata,

	     dmem_master_wstrb,

	     dmem_master_wready,

	     dmem_master_bvalid,
	     dmem_master_bresp,

	     dmem_master_bready,

	     dmem_master_arvalid,

	     dmem_master_araddr,

	     dmem_master_arprot,

	     dmem_master_arready,

	     dmem_master_rvalid,
	     dmem_master_rresp,
	     dmem_master_rdata,

	     dmem_master_rready,

	     near_mem_slave_awvalid,
	     near_mem_slave_awaddr,
	     near_mem_slave_awprot,

	     near_mem_slave_awready,

	     near_mem_slave_wvalid,
	     near_mem_slave_wdata,
	     near_mem_slave_wstrb,

	     near_mem_slave_wready,

	     near_mem_slave_bvalid,

	     near_mem_slave_bresp,

	     near_mem_slave_bready,

	     near_mem_slave_arvalid,
	     near_mem_slave_araddr,
	     near_mem_slave_arprot,

	     near_mem_slave_arready,

	     near_mem_slave_rvalid,

	     near_mem_slave_rresp,

	     near_mem_slave_rdata,

	     near_mem_slave_rready,

	     external_interrupt_req_set_not_clear,
	     EN_external_interrupt_req,
	     RDY_external_interrupt_req,

	     timer_interrupt_req_set_not_clear,
	     EN_timer_interrupt_req,
	     RDY_timer_interrupt_req,

	     software_interrupt_req_set_not_clear,
	     EN_software_interrupt_req,
	     RDY_software_interrupt_req,

	     set_verbosity_verbosity,
	     set_verbosity_logdelay,
	     EN_set_verbosity,
	     RDY_set_verbosity);
  parameter [63 : 0] pc_reset_value = 64'b0;
  input  CLK;
  input  RST_N;

  // action method hart0_server_reset_request_put
  input  EN_hart0_server_reset_request_put;
  output RDY_hart0_server_reset_request_put;

  // action method hart0_server_reset_response_get
  input  EN_hart0_server_reset_response_get;
  output RDY_hart0_server_reset_response_get;

  // value method imem_master_m_awvalid
  output imem_master_awvalid;

  // value method imem_master_m_awaddr
  output [63 : 0] imem_master_awaddr;

  // value method imem_master_m_awprot
  output [2 : 0] imem_master_awprot;

  // value method imem_master_m_awuser

  // action method imem_master_m_awready
  input  imem_master_awready;

  // value method imem_master_m_wvalid
  output imem_master_wvalid;

  // value method imem_master_m_wdata
  output [63 : 0] imem_master_wdata;

  // value method imem_master_m_wstrb
  output [7 : 0] imem_master_wstrb;

  // action method imem_master_m_wready
  input  imem_master_wready;

  // action method imem_master_m_bvalid
  input  imem_master_bvalid;
  input  [1 : 0] imem_master_bresp;

  // value method imem_master_m_bready
  output imem_master_bready;

  // value method imem_master_m_arvalid
  output imem_master_arvalid;

  // value method imem_master_m_araddr
  output [63 : 0] imem_master_araddr;

  // value method imem_master_m_arprot
  output [2 : 0] imem_master_arprot;

  // value method imem_master_m_aruser

  // action method imem_master_m_arready
  input  imem_master_arready;

  // action method imem_master_m_rvalid
  input  imem_master_rvalid;
  input  [1 : 0] imem_master_rresp;
  input  [63 : 0] imem_master_rdata;

  // value method imem_master_m_rready
  output imem_master_rready;

  // value method dmem_master_m_awvalid
  output dmem_master_awvalid;

  // value method dmem_master_m_awaddr
  output [63 : 0] dmem_master_awaddr;

  // value method dmem_master_m_awprot
  output [2 : 0] dmem_master_awprot;

  // value method dmem_master_m_awuser

  // action method dmem_master_m_awready
  input  dmem_master_awready;

  // value method dmem_master_m_wvalid
  output dmem_master_wvalid;

  // value method dmem_master_m_wdata
  output [63 : 0] dmem_master_wdata;

  // value method dmem_master_m_wstrb
  output [7 : 0] dmem_master_wstrb;

  // action method dmem_master_m_wready
  input  dmem_master_wready;

  // action method dmem_master_m_bvalid
  input  dmem_master_bvalid;
  input  [1 : 0] dmem_master_bresp;

  // value method dmem_master_m_bready
  output dmem_master_bready;

  // value method dmem_master_m_arvalid
  output dmem_master_arvalid;

  // value method dmem_master_m_araddr
  output [63 : 0] dmem_master_araddr;

  // value method dmem_master_m_arprot
  output [2 : 0] dmem_master_arprot;

  // value method dmem_master_m_aruser

  // action method dmem_master_m_arready
  input  dmem_master_arready;

  // action method dmem_master_m_rvalid
  input  dmem_master_rvalid;
  input  [1 : 0] dmem_master_rresp;
  input  [63 : 0] dmem_master_rdata;

  // value method dmem_master_m_rready
  output dmem_master_rready;

  // action method near_mem_slave_m_awvalid
  input  near_mem_slave_awvalid;
  input  [63 : 0] near_mem_slave_awaddr;
  input  [2 : 0] near_mem_slave_awprot;

  // value method near_mem_slave_m_awready
  output near_mem_slave_awready;

  // action method near_mem_slave_m_wvalid
  input  near_mem_slave_wvalid;
  input  [63 : 0] near_mem_slave_wdata;
  input  [7 : 0] near_mem_slave_wstrb;

  // value method near_mem_slave_m_wready
  output near_mem_slave_wready;

  // value method near_mem_slave_m_bvalid
  output near_mem_slave_bvalid;

  // value method near_mem_slave_m_bresp
  output [1 : 0] near_mem_slave_bresp;

  // value method near_mem_slave_m_buser

  // action method near_mem_slave_m_bready
  input  near_mem_slave_bready;

  // action method near_mem_slave_m_arvalid
  input  near_mem_slave_arvalid;
  input  [63 : 0] near_mem_slave_araddr;
  input  [2 : 0] near_mem_slave_arprot;

  // value method near_mem_slave_m_arready
  output near_mem_slave_arready;

  // value method near_mem_slave_m_rvalid
  output near_mem_slave_rvalid;

  // value method near_mem_slave_m_rresp
  output [1 : 0] near_mem_slave_rresp;

  // value method near_mem_slave_m_rdata
  output [63 : 0] near_mem_slave_rdata;

  // value method near_mem_slave_m_ruser

  // action method near_mem_slave_m_rready
  input  near_mem_slave_rready;

  // action method external_interrupt_req
  input  external_interrupt_req_set_not_clear;
  input  EN_external_interrupt_req;
  output RDY_external_interrupt_req;

  // action method timer_interrupt_req
  input  timer_interrupt_req_set_not_clear;
  input  EN_timer_interrupt_req;
  output RDY_timer_interrupt_req;

  // action method software_interrupt_req
  input  software_interrupt_req_set_not_clear;
  input  EN_software_interrupt_req;
  output RDY_software_interrupt_req;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  [63 : 0] set_verbosity_logdelay;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // signals for module outputs
  wire [63 : 0] dmem_master_araddr,
		dmem_master_awaddr,
		dmem_master_wdata,
		imem_master_araddr,
		imem_master_awaddr,
		imem_master_wdata,
		near_mem_slave_rdata;
  wire [7 : 0] dmem_master_wstrb, imem_master_wstrb;
  wire [2 : 0] dmem_master_arprot,
	       dmem_master_awprot,
	       imem_master_arprot,
	       imem_master_awprot;
  wire [1 : 0] near_mem_slave_bresp, near_mem_slave_rresp;
  wire RDY_external_interrupt_req,
       RDY_hart0_server_reset_request_put,
       RDY_hart0_server_reset_response_get,
       RDY_set_verbosity,
       RDY_software_interrupt_req,
       RDY_timer_interrupt_req,
       dmem_master_arvalid,
       dmem_master_awvalid,
       dmem_master_bready,
       dmem_master_rready,
       dmem_master_wvalid,
       imem_master_arvalid,
       imem_master_awvalid,
       imem_master_bready,
       imem_master_rready,
       imem_master_wvalid,
       near_mem_slave_arready,
       near_mem_slave_awready,
       near_mem_slave_bvalid,
       near_mem_slave_rvalid,
       near_mem_slave_wready;

  // register cfg_logdelay
  reg [63 : 0] cfg_logdelay;
  wire [63 : 0] cfg_logdelay$D_IN;
  wire cfg_logdelay$EN;

  // register cfg_verbosity
  reg [3 : 0] cfg_verbosity;
  wire [3 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register imem_rg_f3
  reg [2 : 0] imem_rg_f3;
  wire [2 : 0] imem_rg_f3$D_IN;
  wire imem_rg_f3$EN;

  // register imem_rg_instr_15_0
  reg [15 : 0] imem_rg_instr_15_0;
  wire [15 : 0] imem_rg_instr_15_0$D_IN;
  wire imem_rg_instr_15_0$EN;

  // register imem_rg_mstatus_MXR
  reg imem_rg_mstatus_MXR;
  wire imem_rg_mstatus_MXR$D_IN, imem_rg_mstatus_MXR$EN;

  // register imem_rg_pc
  reg [31 : 0] imem_rg_pc;
  reg [31 : 0] imem_rg_pc$D_IN;
  wire imem_rg_pc$EN;

  // register imem_rg_priv
  reg [1 : 0] imem_rg_priv;
  reg [1 : 0] imem_rg_priv$D_IN;
  wire imem_rg_priv$EN;

  // register imem_rg_satp
  reg [31 : 0] imem_rg_satp;
  wire [31 : 0] imem_rg_satp$D_IN;
  wire imem_rg_satp$EN;

  // register imem_rg_sstatus_SUM
  reg imem_rg_sstatus_SUM;
  wire imem_rg_sstatus_SUM$D_IN, imem_rg_sstatus_SUM$EN;

  // register rg_cur_priv
  reg [1 : 0] rg_cur_priv;
  reg [1 : 0] rg_cur_priv$D_IN;
  wire rg_cur_priv$EN;

  // register rg_halt
  reg rg_halt;
  wire rg_halt$D_IN, rg_halt$EN;

  // register rg_next_pc
  reg [31 : 0] rg_next_pc;
  wire [31 : 0] rg_next_pc$D_IN;
  wire rg_next_pc$EN;

  // register rg_start_CPI_cycles
  reg [63 : 0] rg_start_CPI_cycles;
  wire [63 : 0] rg_start_CPI_cycles$D_IN;
  wire rg_start_CPI_cycles$EN;

  // register rg_start_CPI_instrs
  reg [63 : 0] rg_start_CPI_instrs;
  wire [63 : 0] rg_start_CPI_instrs$D_IN;
  wire rg_start_CPI_instrs$EN;

  // register rg_state
  reg [3 : 0] rg_state;
  reg [3 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // register stage1_rg_full
  reg stage1_rg_full;
  reg stage1_rg_full$D_IN;
  wire stage1_rg_full$EN;

  // register stage2_rg_full
  reg stage2_rg_full;
  reg stage2_rg_full$D_IN;
  wire stage2_rg_full$EN;

  // register stage2_rg_stage2
  reg [169 : 0] stage2_rg_stage2;
  wire [169 : 0] stage2_rg_stage2$D_IN;
  wire stage2_rg_stage2$EN;

  // register stage3_rg_full
  reg stage3_rg_full;
  wire stage3_rg_full$D_IN, stage3_rg_full$EN;

  // register stage3_rg_stage3
  reg [103 : 0] stage3_rg_stage3;
  wire [103 : 0] stage3_rg_stage3$D_IN;
  wire stage3_rg_stage3$EN;

  // ports of submodule csr_regfile
  reg [31 : 0] csr_regfile$csr_trap_actions_xtval;
  reg [3 : 0] csr_regfile$csr_trap_actions_exc_code;
  reg [1 : 0] csr_regfile$csr_ret_actions_from_priv;
  wire [97 : 0] csr_regfile$csr_trap_actions;
  wire [65 : 0] csr_regfile$csr_ret_actions;
  wire [63 : 0] csr_regfile$read_csr_mcycle, csr_regfile$read_csr_minstret;
  wire [32 : 0] csr_regfile$read_csr;
  wire [31 : 0] csr_regfile$csr_trap_actions_pc,
		csr_regfile$mav_csr_write_word,
		csr_regfile$read_mstatus,
		csr_regfile$read_satp;
  wire [27 : 0] csr_regfile$read_misa;
  wire [11 : 0] csr_regfile$access_permitted_1_csr_addr,
		csr_regfile$access_permitted_2_csr_addr,
		csr_regfile$csr_counter_read_fault_csr_addr,
		csr_regfile$mav_csr_write_csr_addr,
		csr_regfile$mav_read_csr_csr_addr,
		csr_regfile$read_csr_csr_addr,
		csr_regfile$read_csr_port2_csr_addr;
  wire [4 : 0] csr_regfile$interrupt_pending;
  wire [1 : 0] csr_regfile$access_permitted_1_priv,
	       csr_regfile$access_permitted_2_priv,
	       csr_regfile$csr_counter_read_fault_priv,
	       csr_regfile$csr_trap_actions_from_priv,
	       csr_regfile$interrupt_pending_cur_priv;
  wire csr_regfile$EN_csr_minstret_incr,
       csr_regfile$EN_csr_ret_actions,
       csr_regfile$EN_csr_trap_actions,
       csr_regfile$EN_debug,
       csr_regfile$EN_external_interrupt_req,
       csr_regfile$EN_mav_csr_write,
       csr_regfile$EN_mav_read_csr,
       csr_regfile$EN_server_reset_request_put,
       csr_regfile$EN_server_reset_response_get,
       csr_regfile$EN_software_interrupt_req,
       csr_regfile$EN_timer_interrupt_req,
       csr_regfile$RDY_server_reset_request_put,
       csr_regfile$RDY_server_reset_response_get,
       csr_regfile$access_permitted_1,
       csr_regfile$access_permitted_1_read_not_write,
       csr_regfile$access_permitted_2,
       csr_regfile$access_permitted_2_read_not_write,
       csr_regfile$csr_trap_actions_interrupt,
       csr_regfile$external_interrupt_req_set_not_clear,
       csr_regfile$software_interrupt_req_set_not_clear,
       csr_regfile$timer_interrupt_req_set_not_clear,
       csr_regfile$wfi_resume;

  // ports of submodule f_reset_reqs
  wire f_reset_reqs$CLR,
       f_reset_reqs$DEQ,
       f_reset_reqs$EMPTY_N,
       f_reset_reqs$ENQ,
       f_reset_reqs$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule gpr_regfile
  wire [31 : 0] gpr_regfile$read_rs1,
		gpr_regfile$read_rs2,
		gpr_regfile$write_rd_rd_val;
  wire [4 : 0] gpr_regfile$read_rs1_port2_rs1,
	       gpr_regfile$read_rs1_rs1,
	       gpr_regfile$read_rs2_rs2,
	       gpr_regfile$write_rd_rd;
  wire gpr_regfile$EN_server_reset_request_put,
       gpr_regfile$EN_server_reset_response_get,
       gpr_regfile$EN_write_rd,
       gpr_regfile$RDY_server_reset_request_put,
       gpr_regfile$RDY_server_reset_response_get;

  // ports of submodule near_mem
  reg [31 : 0] near_mem$imem_req_addr;
  reg [1 : 0] near_mem$dmem_req_op, near_mem$imem_req_priv;
  reg near_mem$imem_req_mstatus_MXR, near_mem$imem_req_sstatus_SUM;
  wire [63 : 0] near_mem$dmem_master_araddr,
		near_mem$dmem_master_awaddr,
		near_mem$dmem_master_rdata,
		near_mem$dmem_master_wdata,
		near_mem$dmem_req_store_value,
		near_mem$dmem_word64,
		near_mem$imem_master_araddr,
		near_mem$imem_master_awaddr,
		near_mem$imem_master_rdata,
		near_mem$imem_master_wdata,
		near_mem$near_mem_slave_araddr,
		near_mem$near_mem_slave_awaddr,
		near_mem$near_mem_slave_rdata,
		near_mem$near_mem_slave_wdata;
  wire [31 : 0] near_mem$dmem_req_addr,
		near_mem$dmem_req_satp,
		near_mem$imem_instr,
		near_mem$imem_pc,
		near_mem$imem_req_satp;
  wire [7 : 0] near_mem$dmem_master_wstrb,
	       near_mem$imem_master_wstrb,
	       near_mem$near_mem_slave_wstrb,
	       near_mem$server_fence_request_put;
  wire [6 : 0] near_mem$dmem_req_amo_funct7;
  wire [3 : 0] near_mem$dmem_exc_code, near_mem$imem_exc_code;
  wire [2 : 0] near_mem$dmem_master_arprot,
	       near_mem$dmem_master_awprot,
	       near_mem$dmem_req_f3,
	       near_mem$imem_master_arprot,
	       near_mem$imem_master_awprot,
	       near_mem$imem_req_f3,
	       near_mem$near_mem_slave_arprot,
	       near_mem$near_mem_slave_awprot;
  wire [1 : 0] near_mem$dmem_master_bresp,
	       near_mem$dmem_master_rresp,
	       near_mem$dmem_req_priv,
	       near_mem$imem_master_bresp,
	       near_mem$imem_master_rresp,
	       near_mem$near_mem_slave_bresp,
	       near_mem$near_mem_slave_rresp;
  wire near_mem$EN_dmem_req,
       near_mem$EN_imem_req,
       near_mem$EN_server_fence_i_request_put,
       near_mem$EN_server_fence_i_response_get,
       near_mem$EN_server_fence_request_put,
       near_mem$EN_server_fence_response_get,
       near_mem$EN_server_reset_request_put,
       near_mem$EN_server_reset_response_get,
       near_mem$EN_sfence_vma,
       near_mem$RDY_server_fence_i_request_put,
       near_mem$RDY_server_fence_i_response_get,
       near_mem$RDY_server_fence_request_put,
       near_mem$RDY_server_fence_response_get,
       near_mem$RDY_server_reset_request_put,
       near_mem$RDY_server_reset_response_get,
       near_mem$dmem_exc,
       near_mem$dmem_master_arready,
       near_mem$dmem_master_arvalid,
       near_mem$dmem_master_awready,
       near_mem$dmem_master_awvalid,
       near_mem$dmem_master_bready,
       near_mem$dmem_master_bvalid,
       near_mem$dmem_master_rready,
       near_mem$dmem_master_rvalid,
       near_mem$dmem_master_wready,
       near_mem$dmem_master_wvalid,
       near_mem$dmem_req_mstatus_MXR,
       near_mem$dmem_req_sstatus_SUM,
       near_mem$dmem_valid,
       near_mem$imem_exc,
       near_mem$imem_master_arready,
       near_mem$imem_master_arvalid,
       near_mem$imem_master_awready,
       near_mem$imem_master_awvalid,
       near_mem$imem_master_bready,
       near_mem$imem_master_bvalid,
       near_mem$imem_master_rready,
       near_mem$imem_master_rvalid,
       near_mem$imem_master_wready,
       near_mem$imem_master_wvalid,
       near_mem$imem_valid,
       near_mem$near_mem_slave_arready,
       near_mem$near_mem_slave_arvalid,
       near_mem$near_mem_slave_awready,
       near_mem$near_mem_slave_awvalid,
       near_mem$near_mem_slave_bready,
       near_mem$near_mem_slave_bvalid,
       near_mem$near_mem_slave_rready,
       near_mem$near_mem_slave_rvalid,
       near_mem$near_mem_slave_wready,
       near_mem$near_mem_slave_wvalid;

  // ports of submodule stage1_f_reset_reqs
  wire stage1_f_reset_reqs$CLR,
       stage1_f_reset_reqs$DEQ,
       stage1_f_reset_reqs$EMPTY_N,
       stage1_f_reset_reqs$ENQ,
       stage1_f_reset_reqs$FULL_N;

  // ports of submodule stage1_f_reset_rsps
  wire stage1_f_reset_rsps$CLR,
       stage1_f_reset_rsps$DEQ,
       stage1_f_reset_rsps$EMPTY_N,
       stage1_f_reset_rsps$ENQ,
       stage1_f_reset_rsps$FULL_N;

  // ports of submodule stage2_f_reset_reqs
  wire stage2_f_reset_reqs$CLR,
       stage2_f_reset_reqs$DEQ,
       stage2_f_reset_reqs$EMPTY_N,
       stage2_f_reset_reqs$ENQ,
       stage2_f_reset_reqs$FULL_N;

  // ports of submodule stage2_f_reset_rsps
  wire stage2_f_reset_rsps$CLR,
       stage2_f_reset_rsps$DEQ,
       stage2_f_reset_rsps$EMPTY_N,
       stage2_f_reset_rsps$ENQ,
       stage2_f_reset_rsps$FULL_N;

  // ports of submodule stage2_mbox
  wire [31 : 0] stage2_mbox$req_v1, stage2_mbox$req_v2, stage2_mbox$word;
  wire [3 : 0] stage2_mbox$set_verbosity_verbosity;
  wire [2 : 0] stage2_mbox$req_f3;
  wire stage2_mbox$EN_req,
       stage2_mbox$EN_req_reset,
       stage2_mbox$EN_rsp_reset,
       stage2_mbox$EN_set_verbosity,
       stage2_mbox$req_is_OP_not_OP_32,
       stage2_mbox$valid;

  // ports of submodule stage3_f_reset_reqs
  wire stage3_f_reset_reqs$CLR,
       stage3_f_reset_reqs$DEQ,
       stage3_f_reset_reqs$EMPTY_N,
       stage3_f_reset_reqs$ENQ,
       stage3_f_reset_reqs$FULL_N;

  // ports of submodule stage3_f_reset_rsps
  wire stage3_f_reset_rsps$CLR,
       stage3_f_reset_rsps$DEQ,
       stage3_f_reset_rsps$EMPTY_N,
       stage3_f_reset_rsps$ENQ,
       stage3_f_reset_rsps$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_imem_rl_fetch_next_32b,
       CAN_FIRE_RL_rl_WFI_resume,
       CAN_FIRE_RL_rl_finish_FENCE,
       CAN_FIRE_RL_rl_finish_FENCE_I,
       CAN_FIRE_RL_rl_finish_SFENCE_VMA,
       CAN_FIRE_RL_rl_pipe,
       CAN_FIRE_RL_rl_reset_complete,
       CAN_FIRE_RL_rl_reset_from_WFI,
       CAN_FIRE_RL_rl_reset_start,
       CAN_FIRE_RL_rl_show_pipe,
       CAN_FIRE_RL_rl_stage1_CSRR_S_or_C,
       CAN_FIRE_RL_rl_stage1_CSRR_W,
       CAN_FIRE_RL_rl_stage1_FENCE,
       CAN_FIRE_RL_rl_stage1_FENCE_I,
       CAN_FIRE_RL_rl_stage1_SFENCE_VMA,
       CAN_FIRE_RL_rl_stage1_WFI,
       CAN_FIRE_RL_rl_stage1_interrupt,
       CAN_FIRE_RL_rl_stage1_restart_after_csrrx,
       CAN_FIRE_RL_rl_stage1_trap,
       CAN_FIRE_RL_rl_stage1_xRET,
       CAN_FIRE_RL_rl_stage2_nonpipe,
       CAN_FIRE_RL_stage1_rl_reset,
       CAN_FIRE_RL_stage2_rl_reset,
       CAN_FIRE_RL_stage3_rl_reset,
       CAN_FIRE_dmem_master_m_arready,
       CAN_FIRE_dmem_master_m_awready,
       CAN_FIRE_dmem_master_m_bvalid,
       CAN_FIRE_dmem_master_m_rvalid,
       CAN_FIRE_dmem_master_m_wready,
       CAN_FIRE_external_interrupt_req,
       CAN_FIRE_hart0_server_reset_request_put,
       CAN_FIRE_hart0_server_reset_response_get,
       CAN_FIRE_imem_master_m_arready,
       CAN_FIRE_imem_master_m_awready,
       CAN_FIRE_imem_master_m_bvalid,
       CAN_FIRE_imem_master_m_rvalid,
       CAN_FIRE_imem_master_m_wready,
       CAN_FIRE_near_mem_slave_m_arvalid,
       CAN_FIRE_near_mem_slave_m_awvalid,
       CAN_FIRE_near_mem_slave_m_bready,
       CAN_FIRE_near_mem_slave_m_rready,
       CAN_FIRE_near_mem_slave_m_wvalid,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_software_interrupt_req,
       CAN_FIRE_timer_interrupt_req,
       WILL_FIRE_RL_imem_rl_fetch_next_32b,
       WILL_FIRE_RL_rl_WFI_resume,
       WILL_FIRE_RL_rl_finish_FENCE,
       WILL_FIRE_RL_rl_finish_FENCE_I,
       WILL_FIRE_RL_rl_finish_SFENCE_VMA,
       WILL_FIRE_RL_rl_pipe,
       WILL_FIRE_RL_rl_reset_complete,
       WILL_FIRE_RL_rl_reset_from_WFI,
       WILL_FIRE_RL_rl_reset_start,
       WILL_FIRE_RL_rl_show_pipe,
       WILL_FIRE_RL_rl_stage1_CSRR_S_or_C,
       WILL_FIRE_RL_rl_stage1_CSRR_W,
       WILL_FIRE_RL_rl_stage1_FENCE,
       WILL_FIRE_RL_rl_stage1_FENCE_I,
       WILL_FIRE_RL_rl_stage1_SFENCE_VMA,
       WILL_FIRE_RL_rl_stage1_WFI,
       WILL_FIRE_RL_rl_stage1_interrupt,
       WILL_FIRE_RL_rl_stage1_restart_after_csrrx,
       WILL_FIRE_RL_rl_stage1_trap,
       WILL_FIRE_RL_rl_stage1_xRET,
       WILL_FIRE_RL_rl_stage2_nonpipe,
       WILL_FIRE_RL_stage1_rl_reset,
       WILL_FIRE_RL_stage2_rl_reset,
       WILL_FIRE_RL_stage3_rl_reset,
       WILL_FIRE_dmem_master_m_arready,
       WILL_FIRE_dmem_master_m_awready,
       WILL_FIRE_dmem_master_m_bvalid,
       WILL_FIRE_dmem_master_m_rvalid,
       WILL_FIRE_dmem_master_m_wready,
       WILL_FIRE_external_interrupt_req,
       WILL_FIRE_hart0_server_reset_request_put,
       WILL_FIRE_hart0_server_reset_response_get,
       WILL_FIRE_imem_master_m_arready,
       WILL_FIRE_imem_master_m_awready,
       WILL_FIRE_imem_master_m_bvalid,
       WILL_FIRE_imem_master_m_rvalid,
       WILL_FIRE_imem_master_m_wready,
       WILL_FIRE_near_mem_slave_m_arvalid,
       WILL_FIRE_near_mem_slave_m_awvalid,
       WILL_FIRE_near_mem_slave_m_bready,
       WILL_FIRE_near_mem_slave_m_rready,
       WILL_FIRE_near_mem_slave_m_wvalid,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_software_interrupt_req,
       WILL_FIRE_timer_interrupt_req;

  // inputs to muxes for submodule ports
  reg [31 : 0] MUX_csr_regfile$mav_csr_write_2__VAL_2;
  wire [31 : 0] MUX_near_mem$imem_req_2__VAL_1,
		MUX_near_mem$imem_req_2__VAL_3,
		MUX_near_mem$imem_req_2__VAL_5,
		MUX_near_mem$imem_req_2__VAL_6,
		MUX_near_mem$imem_req_2__VAL_7;
  wire [3 : 0] MUX_rg_state$write_1__VAL_1, MUX_rg_state$write_1__VAL_2;
  wire MUX_csr_regfile$mav_csr_write_1__SEL_1,
       MUX_gpr_regfile$write_rd_1__SEL_1,
       MUX_gpr_regfile$write_rd_1__SEL_3,
       MUX_imem_rg_f3$write_1__SEL_1,
       MUX_imem_rg_mstatus_MXR$write_1__SEL_2,
       MUX_imem_rg_pc$write_1__SEL_3,
       MUX_imem_rg_pc$write_1__SEL_6,
       MUX_imem_rg_priv$write_1__SEL_2,
       MUX_near_mem$imem_req_1__SEL_8,
       MUX_rg_state$write_1__SEL_1,
       MUX_rg_state$write_1__SEL_2,
       MUX_rg_state$write_1__SEL_3,
       MUX_rg_state$write_1__SEL_5,
       MUX_rg_state$write_1__SEL_6,
       MUX_rg_state$write_1__SEL_7,
       MUX_rg_state$write_1__SEL_8,
       MUX_rg_state$write_1__SEL_9,
       MUX_stage1_rg_full$write_1__VAL_2,
       MUX_stage2_rg_full$write_1__VAL_2;

  // remaining internal signals
  reg [31 : 0] IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1013,
	       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d932,
	       _theResult_____1_fst__h11693,
	       rs1_val__h16741,
	       x_out_bypass_rd_val__h4786,
	       x_out_data_to_stage2_addr__h10586,
	       x_out_data_to_stage2_val1__h10587,
	       x_out_data_to_stage3_rd_val__h4446;
  reg [4 : 0] x_out_bypass_rd__h4785, x_out_data_to_stage3_rd__h4445;
  reg [3 : 0] CASE_rg_cur_priv_0b0_8_0b1_9_11__q6,
	      CASE_theResult__058_BITS_14_TO_12_0b0_4_0b1_5_11__q13,
	      CASE_theResult__058_BITS_14_TO_12_0b0_IF_theRe_ETC__q14,
	      CASE_theResult__058_BITS_31_TO_20_0b0_CASE_rg__ETC__q7,
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d719,
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d734,
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d738,
	      alu_outputs_exc_code__h11249;
  reg [2 : 0] CASE_theResult__058_BITS_6_TO_0_0b11_1_0b10011_ETC__q15,
	      IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d819;
  reg [1 : 0] CASE_stage2_rg_stage2_BITS_103_TO_101_0_2_1_IF_ETC__q1,
	      CASE_stage2_rg_stage2_BITS_103_TO_101_0_2_1_IF_ETC__q2;
  reg CASE_theResult__058_BITS_6_TO_0_0b10011_IF_NOT_ETC__q12,
      CASE_theResult__058_BITS_6_TO_0_0b10011_NOT_IF_ETC__q10,
      CASE_theResult__058_BITS_6_TO_0_0b11_NOT_theRe_ETC__q9,
      CASE_theResult__058_BITS_6_TO_0_0b11_theResult_ETC__q11,
      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d528,
      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d622,
      IF_stage2_rg_stage2_5_BITS_103_TO_101_6_EQ_1_8_ETC___d129,
      IF_stage2_rg_stage2_5_BITS_103_TO_101_6_EQ_1_8_ETC___d138;
  wire [127 : 0] csr_regfile_read_csr_mcycle__9_MINUS_rg_start__ETC___d1247;
  wire [63 : 0] _theResult____h21389,
		cpi__h21391,
		cpifrac__h21392,
		delta_CPI_cycles__h21387,
		delta_CPI_instrs___1__h21424,
		delta_CPI_instrs__h21388,
		x__h21390;
  wire [31 : 0] IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d933,
		IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_ETC___d863,
		IF_csr_regfile_read_csr_IF_NOT_stage1_rg_full__ETC___d1190,
		IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d431,
		IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d433,
		IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d435,
		IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d436,
		IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d438,
		IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d439,
		IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d440,
		IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d442,
		IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d443,
		IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d444,
		IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d446,
		IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d447,
		IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d448,
		IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d449,
		IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d450,
		IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d451,
		IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d452,
		IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d453,
		IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d454,
		SEXT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLU_ETC___d874,
		_theResult_____1_fst__h11686,
		_theResult_____1_fst__h11721,
		_theResult____h3058,
		_theResult___fst__h5291,
		_theResult___fst__h5319,
		_theResult___snd__h12848,
		alu_outputs___1_addr__h10708,
		alu_outputs___1_addr__h10730,
		alu_outputs___1_addr__h10756,
		alu_outputs___1_addr__h10950,
		alu_outputs___1_addr__h10970,
		alu_outputs___1_val1__h10860,
		alu_outputs___1_val1__h10898,
		alu_outputs___1_val1__h10914,
		alu_outputs___1_val1__h10930,
		alu_outputs___1_val1__h11210,
		alu_outputs___1_val1__h11231,
		branch_target__h10688,
		data_to_stage2_addr__h10578,
		fall_through_pc__h10542,
		imem_rg_pc_PLUS_SEXT_theResult__058_BIT_31_CON_ETC__q5,
		instr___1__h5123,
		instr__h10119,
		instr__h10457,
		instr__h3056,
		instr__h5391,
		instr__h5536,
		instr__h5728,
		instr__h5923,
		instr__h6152,
		instr__h6495,
		instr__h6885,
		instr__h7001,
		instr__h7066,
		instr__h7383,
		instr__h7721,
		instr__h7905,
		instr__h8034,
		instr__h8471,
		instr__h8643,
		instr__h8816,
		instr__h9009,
		instr__h9202,
		instr__h9319,
		instr__h9497,
		instr__h9616,
		instr__h9711,
		instr__h9847,
		instr__h9983,
		instr_out___1__h5260,
		instr_out___1__h5293,
		instr_out___1__h5321,
		next_pc___1__h12357,
		next_pc__h12355,
		output_stage2___1_bypass_rd_val__h4774,
		rd_val___1__h11674,
		rd_val___1__h11682,
		rd_val___1__h11689,
		rd_val___1__h11696,
		rd_val___1__h11703,
		rd_val___1__h11710,
		rd_val__h10499,
		rd_val__h12744,
		rd_val__h12796,
		rd_val__h12818,
		rd_val__h5075,
		rs1_val__h16251,
		rs1_val_bypassed__h3066,
		rs2_val__h10684,
		trap_info_tval__h12198,
		val__h10501,
		val__h5077,
		value__h12250,
		x_out_data_to_stage2_instr__h10583,
		x_out_data_to_stage2_val2__h10588,
		x_out_next_pc__h10555,
		y__h17042;
  wire [20 : 0] SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d282,
		theResult__058_BIT_31_CONCAT_theResult__058_BI_ETC__q4;
  wire [19 : 0] imm20__h7773;
  wire [12 : 0] SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d311,
		theResult__058_BIT_31_CONCAT_theResult__058_BI_ETC__q3;
  wire [11 : 0] imm12__h5392,
		imm12__h5729,
		imm12__h7645,
		imm12__h8269,
		imm12__h8484,
		imm12__h8680,
		imm12__h9025,
		offset__h6099,
		theResult__058_BITS_31_TO_20__q16,
		theResult__058_BITS_31_TO_25_CONCAT_theResult__ETC__q8;
  wire [9 : 0] nzimm10__h8267, nzimm10__h8482;
  wire [8 : 0] offset__h7010;
  wire [7 : 0] offset__h5161;
  wire [6 : 0] offset__h5671;
  wire [5 : 0] imm6__h7643;
  wire [4 : 0] offset_BITS_4_TO_0___h5660,
	       offset_BITS_4_TO_0___h6091,
	       rd__h5731,
	       rs1__h5730,
	       shamt__h10845,
	       x_out_data_to_stage2_rd__h10585;
  wire [3 : 0] IF_NOT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_P_ETC___d684,
	       IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740,
	       IF_rg_cur_priv_0_EQ_0b11_98_OR_rg_cur_priv_0_E_ETC___d717,
	       alu_outputs___1_exc_code__h11206,
	       cur_verbosity__h1892,
	       x_out_trap_info_exc_code__h12201;
  wire [1 : 0] IF_near_mem_dmem_valid__06_THEN_IF_near_mem_dm_ETC___d109,
	       IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115,
	       IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d175,
	       IF_stage2_rg_stage2_5_BITS_100_TO_96_45_EQ_0_6_ETC___d171,
	       IF_stage2_rg_stage2_5_BITS_103_TO_101_6_EQ_3_2_ETC___d112;
  wire IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1257,
       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d517,
       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d519,
       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d521,
       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d616,
       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d627,
       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d674,
       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d676,
       IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_ETC___d647,
       IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d1244,
       IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d458,
       IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d460,
       NOT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_ETC___d558,
       NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38,
       NOT_near_mem_imem_exc__79_32_AND_IF_IF_NOT_nea_ETC___d806,
       NOT_near_mem_imem_exc__79_32_AND_IF_IF_NOT_nea_ETC___d843,
       NOT_near_mem_imem_pc_BITS_31_TO_2_EQ_imem_rg_p_ETC___d1053,
       NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_91_ETC___d199,
       NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_91_ETC___d204,
       NOT_near_mem_imem_valid_90_OR_NOT_near_mem_ime_ETC___d1067,
       NOT_near_mem_imem_valid_90_OR_NOT_near_mem_ime_ETC___d1078,
       NOT_near_mem_imem_valid_90_OR_NOT_near_mem_ime_ETC___d1086,
       NOT_near_mem_imem_valid_90_OR_NOT_near_mem_ime_ETC___d463,
       NOT_rg_halt_059_083_AND_NOT_csr_regfile_interr_ETC___d1089,
       NOT_rg_halt_059_083_AND_NOT_csr_regfile_interr_ETC___d1109,
       NOT_rg_halt_059_083_AND_NOT_csr_regfile_interr_ETC___d1131,
       csr_regfile_interrupt_pending_rg_cur_priv_0_06_ETC___d1263,
       csr_regfile_read_misa__7_BIT_2_06_AND_IF_near__ETC___d296,
       csr_regfile_read_misa__7_BIT_2_06_AND_IF_near__ETC___d302,
       gpr_regfile_RDY_server_reset_request_put__023__ETC___d1035,
       gpr_regfile_RDY_server_reset_response_get__040_ETC___d1052,
       near_mem_imem_exc__79_OR_IF_IF_NOT_near_mem_im_ETC___d945,
       near_mem_imem_exc__79_OR_IF_IF_NOT_near_mem_im_ETC___d948,
       near_mem_imem_exc__79_OR_IF_IF_NOT_near_mem_im_ETC___d951,
       near_mem_imem_exc__79_OR_IF_IF_NOT_near_mem_im_ETC___d954,
       near_mem_imem_exc__79_OR_IF_IF_NOT_near_mem_im_ETC___d957,
       near_mem_imem_exc__79_OR_IF_IF_NOT_near_mem_im_ETC___d960,
       near_mem_imem_exc__79_OR_IF_IF_NOT_near_mem_im_ETC___d963,
       near_mem_imem_exc__79_OR_IF_IF_NOT_near_mem_im_ETC___d966,
       near_mem_imem_exc__79_OR_IF_IF_NOT_near_mem_im_ETC___d969,
       near_mem_imem_exc__79_OR_IF_IF_NOT_near_mem_im_ETC___d972,
       near_mem_imem_exc__79_OR_IF_IF_NOT_near_mem_im_ETC___d975,
       near_mem_imem_exc__79_OR_IF_IF_NOT_near_mem_im_ETC___d978,
       near_mem_imem_pc_BITS_31_TO_2_EQ_imem_rg_pc_BI_ETC___d6,
       near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_91_OR__ETC___d470,
       near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_91_OR__ETC___d472,
       near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7___d191,
       near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d478,
       near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d630,
       near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d679,
       rg_cur_priv_0_EQ_0b11_98_OR_rg_cur_priv_0_EQ_0_ETC___d715,
       rg_halt_059_OR_csr_regfile_interrupt_pending_r_ETC___d1071,
       rg_state_9_EQ_2_073_AND_NOT_rg_halt_059_083_AN_ETC___d1154,
       rg_state_9_EQ_2_073_AND_NOT_rg_halt_059_083_AN_ETC___d1203,
       rg_state_9_EQ_2_073_AND_NOT_rg_halt_059_083_AN_ETC___d1214,
       rg_state_9_EQ_2_073_AND_NOT_rg_halt_059_083_AN_ETC___d1224,
       rg_state_9_EQ_2_073_AND_NOT_rg_halt_059_083_AN_ETC___d1241,
       rg_state_9_EQ_2_073_AND_stage3_rg_full_5_OR_NO_ETC___d1092;

  // action method hart0_server_reset_request_put
  assign RDY_hart0_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_hart0_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_hart0_server_reset_request_put =
	     EN_hart0_server_reset_request_put ;

  // action method hart0_server_reset_response_get
  assign RDY_hart0_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_hart0_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_hart0_server_reset_response_get =
	     EN_hart0_server_reset_response_get ;

  // value method imem_master_m_awvalid
  assign imem_master_awvalid = near_mem$imem_master_awvalid ;

  // value method imem_master_m_awaddr
  assign imem_master_awaddr = near_mem$imem_master_awaddr ;

  // value method imem_master_m_awprot
  assign imem_master_awprot = near_mem$imem_master_awprot ;

  // action method imem_master_m_awready
  assign CAN_FIRE_imem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_awready = 1'd1 ;

  // value method imem_master_m_wvalid
  assign imem_master_wvalid = near_mem$imem_master_wvalid ;

  // value method imem_master_m_wdata
  assign imem_master_wdata = near_mem$imem_master_wdata ;

  // value method imem_master_m_wstrb
  assign imem_master_wstrb = near_mem$imem_master_wstrb ;

  // action method imem_master_m_wready
  assign CAN_FIRE_imem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_wready = 1'd1 ;

  // action method imem_master_m_bvalid
  assign CAN_FIRE_imem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_imem_master_m_bvalid = 1'd1 ;

  // value method imem_master_m_bready
  assign imem_master_bready = near_mem$imem_master_bready ;

  // value method imem_master_m_arvalid
  assign imem_master_arvalid = near_mem$imem_master_arvalid ;

  // value method imem_master_m_araddr
  assign imem_master_araddr = near_mem$imem_master_araddr ;

  // value method imem_master_m_arprot
  assign imem_master_arprot = near_mem$imem_master_arprot ;

  // action method imem_master_m_arready
  assign CAN_FIRE_imem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_arready = 1'd1 ;

  // action method imem_master_m_rvalid
  assign CAN_FIRE_imem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_imem_master_m_rvalid = 1'd1 ;

  // value method imem_master_m_rready
  assign imem_master_rready = near_mem$imem_master_rready ;

  // value method dmem_master_m_awvalid
  assign dmem_master_awvalid = near_mem$dmem_master_awvalid ;

  // value method dmem_master_m_awaddr
  assign dmem_master_awaddr = near_mem$dmem_master_awaddr ;

  // value method dmem_master_m_awprot
  assign dmem_master_awprot = near_mem$dmem_master_awprot ;

  // action method dmem_master_m_awready
  assign CAN_FIRE_dmem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_awready = 1'd1 ;

  // value method dmem_master_m_wvalid
  assign dmem_master_wvalid = near_mem$dmem_master_wvalid ;

  // value method dmem_master_m_wdata
  assign dmem_master_wdata = near_mem$dmem_master_wdata ;

  // value method dmem_master_m_wstrb
  assign dmem_master_wstrb = near_mem$dmem_master_wstrb ;

  // action method dmem_master_m_wready
  assign CAN_FIRE_dmem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_wready = 1'd1 ;

  // action method dmem_master_m_bvalid
  assign CAN_FIRE_dmem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_bvalid = 1'd1 ;

  // value method dmem_master_m_bready
  assign dmem_master_bready = near_mem$dmem_master_bready ;

  // value method dmem_master_m_arvalid
  assign dmem_master_arvalid = near_mem$dmem_master_arvalid ;

  // value method dmem_master_m_araddr
  assign dmem_master_araddr = near_mem$dmem_master_araddr ;

  // value method dmem_master_m_arprot
  assign dmem_master_arprot = near_mem$dmem_master_arprot ;

  // action method dmem_master_m_arready
  assign CAN_FIRE_dmem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_arready = 1'd1 ;

  // action method dmem_master_m_rvalid
  assign CAN_FIRE_dmem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_rvalid = 1'd1 ;

  // value method dmem_master_m_rready
  assign dmem_master_rready = near_mem$dmem_master_rready ;

  // action method near_mem_slave_m_awvalid
  assign CAN_FIRE_near_mem_slave_m_awvalid = 1'd1 ;
  assign WILL_FIRE_near_mem_slave_m_awvalid = 1'd1 ;

  // value method near_mem_slave_m_awready
  assign near_mem_slave_awready = near_mem$near_mem_slave_awready ;

  // action method near_mem_slave_m_wvalid
  assign CAN_FIRE_near_mem_slave_m_wvalid = 1'd1 ;
  assign WILL_FIRE_near_mem_slave_m_wvalid = 1'd1 ;

  // value method near_mem_slave_m_wready
  assign near_mem_slave_wready = near_mem$near_mem_slave_wready ;

  // value method near_mem_slave_m_bvalid
  assign near_mem_slave_bvalid = near_mem$near_mem_slave_bvalid ;

  // value method near_mem_slave_m_bresp
  assign near_mem_slave_bresp = near_mem$near_mem_slave_bresp ;

  // action method near_mem_slave_m_bready
  assign CAN_FIRE_near_mem_slave_m_bready = 1'd1 ;
  assign WILL_FIRE_near_mem_slave_m_bready = 1'd1 ;

  // action method near_mem_slave_m_arvalid
  assign CAN_FIRE_near_mem_slave_m_arvalid = 1'd1 ;
  assign WILL_FIRE_near_mem_slave_m_arvalid = 1'd1 ;

  // value method near_mem_slave_m_arready
  assign near_mem_slave_arready = near_mem$near_mem_slave_arready ;

  // value method near_mem_slave_m_rvalid
  assign near_mem_slave_rvalid = near_mem$near_mem_slave_rvalid ;

  // value method near_mem_slave_m_rresp
  assign near_mem_slave_rresp = near_mem$near_mem_slave_rresp ;

  // value method near_mem_slave_m_rdata
  assign near_mem_slave_rdata = near_mem$near_mem_slave_rdata ;

  // action method near_mem_slave_m_rready
  assign CAN_FIRE_near_mem_slave_m_rready = 1'd1 ;
  assign WILL_FIRE_near_mem_slave_m_rready = 1'd1 ;

  // action method external_interrupt_req
  assign RDY_external_interrupt_req = 1'd1 ;
  assign CAN_FIRE_external_interrupt_req = 1'd1 ;
  assign WILL_FIRE_external_interrupt_req = EN_external_interrupt_req ;

  // action method timer_interrupt_req
  assign RDY_timer_interrupt_req = 1'd1 ;
  assign CAN_FIRE_timer_interrupt_req = 1'd1 ;
  assign WILL_FIRE_timer_interrupt_req = EN_timer_interrupt_req ;

  // action method software_interrupt_req
  assign RDY_software_interrupt_req = 1'd1 ;
  assign CAN_FIRE_software_interrupt_req = 1'd1 ;
  assign WILL_FIRE_software_interrupt_req = EN_software_interrupt_req ;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // submodule csr_regfile
  mkCSR_RegFile csr_regfile(.CLK(CLK),
			    .RST_N(RST_N),
			    .access_permitted_1_csr_addr(csr_regfile$access_permitted_1_csr_addr),
			    .access_permitted_1_priv(csr_regfile$access_permitted_1_priv),
			    .access_permitted_1_read_not_write(csr_regfile$access_permitted_1_read_not_write),
			    .access_permitted_2_csr_addr(csr_regfile$access_permitted_2_csr_addr),
			    .access_permitted_2_priv(csr_regfile$access_permitted_2_priv),
			    .access_permitted_2_read_not_write(csr_regfile$access_permitted_2_read_not_write),
			    .csr_counter_read_fault_csr_addr(csr_regfile$csr_counter_read_fault_csr_addr),
			    .csr_counter_read_fault_priv(csr_regfile$csr_counter_read_fault_priv),
			    .csr_ret_actions_from_priv(csr_regfile$csr_ret_actions_from_priv),
			    .csr_trap_actions_exc_code(csr_regfile$csr_trap_actions_exc_code),
			    .csr_trap_actions_from_priv(csr_regfile$csr_trap_actions_from_priv),
			    .csr_trap_actions_interrupt(csr_regfile$csr_trap_actions_interrupt),
			    .csr_trap_actions_pc(csr_regfile$csr_trap_actions_pc),
			    .csr_trap_actions_xtval(csr_regfile$csr_trap_actions_xtval),
			    .external_interrupt_req_set_not_clear(csr_regfile$external_interrupt_req_set_not_clear),
			    .interrupt_pending_cur_priv(csr_regfile$interrupt_pending_cur_priv),
			    .mav_csr_write_csr_addr(csr_regfile$mav_csr_write_csr_addr),
			    .mav_csr_write_word(csr_regfile$mav_csr_write_word),
			    .mav_read_csr_csr_addr(csr_regfile$mav_read_csr_csr_addr),
			    .read_csr_csr_addr(csr_regfile$read_csr_csr_addr),
			    .read_csr_port2_csr_addr(csr_regfile$read_csr_port2_csr_addr),
			    .software_interrupt_req_set_not_clear(csr_regfile$software_interrupt_req_set_not_clear),
			    .timer_interrupt_req_set_not_clear(csr_regfile$timer_interrupt_req_set_not_clear),
			    .EN_server_reset_request_put(csr_regfile$EN_server_reset_request_put),
			    .EN_server_reset_response_get(csr_regfile$EN_server_reset_response_get),
			    .EN_mav_read_csr(csr_regfile$EN_mav_read_csr),
			    .EN_mav_csr_write(csr_regfile$EN_mav_csr_write),
			    .EN_csr_trap_actions(csr_regfile$EN_csr_trap_actions),
			    .EN_csr_ret_actions(csr_regfile$EN_csr_ret_actions),
			    .EN_csr_minstret_incr(csr_regfile$EN_csr_minstret_incr),
			    .EN_external_interrupt_req(csr_regfile$EN_external_interrupt_req),
			    .EN_timer_interrupt_req(csr_regfile$EN_timer_interrupt_req),
			    .EN_software_interrupt_req(csr_regfile$EN_software_interrupt_req),
			    .EN_debug(csr_regfile$EN_debug),
			    .RDY_server_reset_request_put(csr_regfile$RDY_server_reset_request_put),
			    .RDY_server_reset_response_get(csr_regfile$RDY_server_reset_response_get),
			    .read_csr(csr_regfile$read_csr),
			    .read_csr_port2(),
			    .mav_read_csr(),
			    .mav_csr_write(),
			    .read_misa(csr_regfile$read_misa),
			    .read_mstatus(csr_regfile$read_mstatus),
			    .read_ustatus(),
			    .read_satp(csr_regfile$read_satp),
			    .csr_trap_actions(csr_regfile$csr_trap_actions),
			    .RDY_csr_trap_actions(),
			    .csr_ret_actions(csr_regfile$csr_ret_actions),
			    .RDY_csr_ret_actions(),
			    .read_csr_minstret(csr_regfile$read_csr_minstret),
			    .read_csr_mcycle(csr_regfile$read_csr_mcycle),
			    .read_csr_mtime(),
			    .access_permitted_1(csr_regfile$access_permitted_1),
			    .access_permitted_2(csr_regfile$access_permitted_2),
			    .csr_counter_read_fault(),
			    .csr_mip_read(),
			    .RDY_external_interrupt_req(),
			    .RDY_timer_interrupt_req(),
			    .RDY_software_interrupt_req(),
			    .interrupt_pending(csr_regfile$interrupt_pending),
			    .wfi_resume(csr_regfile$wfi_resume),
			    .RDY_debug());

  // submodule f_reset_reqs
  FIFO20 #(.guarded(32'd1)) f_reset_reqs(.RST(RST_N),
					 .CLK(CLK),
					 .ENQ(f_reset_reqs$ENQ),
					 .DEQ(f_reset_reqs$DEQ),
					 .CLR(f_reset_reqs$CLR),
					 .FULL_N(f_reset_reqs$FULL_N),
					 .EMPTY_N(f_reset_reqs$EMPTY_N));

  // submodule f_reset_rsps
  FIFO20 #(.guarded(32'd1)) f_reset_rsps(.RST(RST_N),
					 .CLK(CLK),
					 .ENQ(f_reset_rsps$ENQ),
					 .DEQ(f_reset_rsps$DEQ),
					 .CLR(f_reset_rsps$CLR),
					 .FULL_N(f_reset_rsps$FULL_N),
					 .EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule gpr_regfile
  mkGPR_RegFile gpr_regfile(.CLK(CLK),
			    .RST_N(RST_N),
			    .read_rs1_port2_rs1(gpr_regfile$read_rs1_port2_rs1),
			    .read_rs1_rs1(gpr_regfile$read_rs1_rs1),
			    .read_rs2_rs2(gpr_regfile$read_rs2_rs2),
			    .write_rd_rd(gpr_regfile$write_rd_rd),
			    .write_rd_rd_val(gpr_regfile$write_rd_rd_val),
			    .EN_server_reset_request_put(gpr_regfile$EN_server_reset_request_put),
			    .EN_server_reset_response_get(gpr_regfile$EN_server_reset_response_get),
			    .EN_write_rd(gpr_regfile$EN_write_rd),
			    .RDY_server_reset_request_put(gpr_regfile$RDY_server_reset_request_put),
			    .RDY_server_reset_response_get(gpr_regfile$RDY_server_reset_response_get),
			    .read_rs1(gpr_regfile$read_rs1),
			    .read_rs1_port2(),
			    .read_rs2(gpr_regfile$read_rs2));

  // submodule near_mem
  mkNear_Mem near_mem(.CLK(CLK),
		      .RST_N(RST_N),
		      .dmem_master_arready(near_mem$dmem_master_arready),
		      .dmem_master_awready(near_mem$dmem_master_awready),
		      .dmem_master_bresp(near_mem$dmem_master_bresp),
		      .dmem_master_bvalid(near_mem$dmem_master_bvalid),
		      .dmem_master_rdata(near_mem$dmem_master_rdata),
		      .dmem_master_rresp(near_mem$dmem_master_rresp),
		      .dmem_master_rvalid(near_mem$dmem_master_rvalid),
		      .dmem_master_wready(near_mem$dmem_master_wready),
		      .dmem_req_addr(near_mem$dmem_req_addr),
		      .dmem_req_amo_funct7(near_mem$dmem_req_amo_funct7),
		      .dmem_req_f3(near_mem$dmem_req_f3),
		      .dmem_req_mstatus_MXR(near_mem$dmem_req_mstatus_MXR),
		      .dmem_req_op(near_mem$dmem_req_op),
		      .dmem_req_priv(near_mem$dmem_req_priv),
		      .dmem_req_satp(near_mem$dmem_req_satp),
		      .dmem_req_sstatus_SUM(near_mem$dmem_req_sstatus_SUM),
		      .dmem_req_store_value(near_mem$dmem_req_store_value),
		      .imem_master_arready(near_mem$imem_master_arready),
		      .imem_master_awready(near_mem$imem_master_awready),
		      .imem_master_bresp(near_mem$imem_master_bresp),
		      .imem_master_bvalid(near_mem$imem_master_bvalid),
		      .imem_master_rdata(near_mem$imem_master_rdata),
		      .imem_master_rresp(near_mem$imem_master_rresp),
		      .imem_master_rvalid(near_mem$imem_master_rvalid),
		      .imem_master_wready(near_mem$imem_master_wready),
		      .imem_req_addr(near_mem$imem_req_addr),
		      .imem_req_f3(near_mem$imem_req_f3),
		      .imem_req_mstatus_MXR(near_mem$imem_req_mstatus_MXR),
		      .imem_req_priv(near_mem$imem_req_priv),
		      .imem_req_satp(near_mem$imem_req_satp),
		      .imem_req_sstatus_SUM(near_mem$imem_req_sstatus_SUM),
		      .near_mem_slave_araddr(near_mem$near_mem_slave_araddr),
		      .near_mem_slave_arprot(near_mem$near_mem_slave_arprot),
		      .near_mem_slave_arvalid(near_mem$near_mem_slave_arvalid),
		      .near_mem_slave_awaddr(near_mem$near_mem_slave_awaddr),
		      .near_mem_slave_awprot(near_mem$near_mem_slave_awprot),
		      .near_mem_slave_awvalid(near_mem$near_mem_slave_awvalid),
		      .near_mem_slave_bready(near_mem$near_mem_slave_bready),
		      .near_mem_slave_rready(near_mem$near_mem_slave_rready),
		      .near_mem_slave_wdata(near_mem$near_mem_slave_wdata),
		      .near_mem_slave_wstrb(near_mem$near_mem_slave_wstrb),
		      .near_mem_slave_wvalid(near_mem$near_mem_slave_wvalid),
		      .server_fence_request_put(near_mem$server_fence_request_put),
		      .EN_server_reset_request_put(near_mem$EN_server_reset_request_put),
		      .EN_server_reset_response_get(near_mem$EN_server_reset_response_get),
		      .EN_imem_req(near_mem$EN_imem_req),
		      .EN_dmem_req(near_mem$EN_dmem_req),
		      .EN_server_fence_i_request_put(near_mem$EN_server_fence_i_request_put),
		      .EN_server_fence_i_response_get(near_mem$EN_server_fence_i_response_get),
		      .EN_server_fence_request_put(near_mem$EN_server_fence_request_put),
		      .EN_server_fence_response_get(near_mem$EN_server_fence_response_get),
		      .EN_sfence_vma(near_mem$EN_sfence_vma),
		      .RDY_server_reset_request_put(near_mem$RDY_server_reset_request_put),
		      .RDY_server_reset_response_get(near_mem$RDY_server_reset_response_get),
		      .imem_valid(near_mem$imem_valid),
		      .imem_is_i32_not_i16(),
		      .imem_pc(near_mem$imem_pc),
		      .imem_instr(near_mem$imem_instr),
		      .imem_exc(near_mem$imem_exc),
		      .imem_exc_code(near_mem$imem_exc_code),
		      .imem_tval(),
		      .imem_master_awvalid(near_mem$imem_master_awvalid),
		      .imem_master_awaddr(near_mem$imem_master_awaddr),
		      .imem_master_awprot(near_mem$imem_master_awprot),
		      .imem_master_wvalid(near_mem$imem_master_wvalid),
		      .imem_master_wdata(near_mem$imem_master_wdata),
		      .imem_master_wstrb(near_mem$imem_master_wstrb),
		      .imem_master_bready(near_mem$imem_master_bready),
		      .imem_master_arvalid(near_mem$imem_master_arvalid),
		      .imem_master_araddr(near_mem$imem_master_araddr),
		      .imem_master_arprot(near_mem$imem_master_arprot),
		      .imem_master_rready(near_mem$imem_master_rready),
		      .dmem_valid(near_mem$dmem_valid),
		      .dmem_word64(near_mem$dmem_word64),
		      .dmem_st_amo_val(),
		      .dmem_exc(near_mem$dmem_exc),
		      .dmem_exc_code(near_mem$dmem_exc_code),
		      .dmem_master_awvalid(near_mem$dmem_master_awvalid),
		      .dmem_master_awaddr(near_mem$dmem_master_awaddr),
		      .dmem_master_awprot(near_mem$dmem_master_awprot),
		      .dmem_master_wvalid(near_mem$dmem_master_wvalid),
		      .dmem_master_wdata(near_mem$dmem_master_wdata),
		      .dmem_master_wstrb(near_mem$dmem_master_wstrb),
		      .dmem_master_bready(near_mem$dmem_master_bready),
		      .dmem_master_arvalid(near_mem$dmem_master_arvalid),
		      .dmem_master_araddr(near_mem$dmem_master_araddr),
		      .dmem_master_arprot(near_mem$dmem_master_arprot),
		      .dmem_master_rready(near_mem$dmem_master_rready),
		      .RDY_server_fence_i_request_put(near_mem$RDY_server_fence_i_request_put),
		      .RDY_server_fence_i_response_get(near_mem$RDY_server_fence_i_response_get),
		      .RDY_server_fence_request_put(near_mem$RDY_server_fence_request_put),
		      .RDY_server_fence_response_get(near_mem$RDY_server_fence_response_get),
		      .RDY_sfence_vma(),
		      .near_mem_slave_awready(near_mem$near_mem_slave_awready),
		      .near_mem_slave_wready(near_mem$near_mem_slave_wready),
		      .near_mem_slave_bvalid(near_mem$near_mem_slave_bvalid),
		      .near_mem_slave_bresp(near_mem$near_mem_slave_bresp),
		      .near_mem_slave_arready(near_mem$near_mem_slave_arready),
		      .near_mem_slave_rvalid(near_mem$near_mem_slave_rvalid),
		      .near_mem_slave_rresp(near_mem$near_mem_slave_rresp),
		      .near_mem_slave_rdata(near_mem$near_mem_slave_rdata));

  // submodule stage1_f_reset_reqs
  FIFO20 #(.guarded(32'd1)) stage1_f_reset_reqs(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage1_f_reset_reqs$ENQ),
						.DEQ(stage1_f_reset_reqs$DEQ),
						.CLR(stage1_f_reset_reqs$CLR),
						.FULL_N(stage1_f_reset_reqs$FULL_N),
						.EMPTY_N(stage1_f_reset_reqs$EMPTY_N));

  // submodule stage1_f_reset_rsps
  FIFO20 #(.guarded(32'd1)) stage1_f_reset_rsps(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage1_f_reset_rsps$ENQ),
						.DEQ(stage1_f_reset_rsps$DEQ),
						.CLR(stage1_f_reset_rsps$CLR),
						.FULL_N(stage1_f_reset_rsps$FULL_N),
						.EMPTY_N(stage1_f_reset_rsps$EMPTY_N));

  // submodule stage2_f_reset_reqs
  FIFO20 #(.guarded(32'd1)) stage2_f_reset_reqs(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage2_f_reset_reqs$ENQ),
						.DEQ(stage2_f_reset_reqs$DEQ),
						.CLR(stage2_f_reset_reqs$CLR),
						.FULL_N(stage2_f_reset_reqs$FULL_N),
						.EMPTY_N(stage2_f_reset_reqs$EMPTY_N));

  // submodule stage2_f_reset_rsps
  FIFO20 #(.guarded(32'd1)) stage2_f_reset_rsps(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage2_f_reset_rsps$ENQ),
						.DEQ(stage2_f_reset_rsps$DEQ),
						.CLR(stage2_f_reset_rsps$CLR),
						.FULL_N(stage2_f_reset_rsps$FULL_N),
						.EMPTY_N(stage2_f_reset_rsps$EMPTY_N));

  // submodule stage2_mbox
  mkRISCV_MBox stage2_mbox(.CLK(CLK),
			   .RST_N(RST_N),
			   .req_f3(stage2_mbox$req_f3),
			   .req_is_OP_not_OP_32(stage2_mbox$req_is_OP_not_OP_32),
			   .req_v1(stage2_mbox$req_v1),
			   .req_v2(stage2_mbox$req_v2),
			   .set_verbosity_verbosity(stage2_mbox$set_verbosity_verbosity),
			   .EN_set_verbosity(stage2_mbox$EN_set_verbosity),
			   .EN_req_reset(stage2_mbox$EN_req_reset),
			   .EN_rsp_reset(stage2_mbox$EN_rsp_reset),
			   .EN_req(stage2_mbox$EN_req),
			   .RDY_set_verbosity(),
			   .RDY_req_reset(),
			   .RDY_rsp_reset(),
			   .valid(stage2_mbox$valid),
			   .word(stage2_mbox$word));

  // submodule stage3_f_reset_reqs
  FIFO20 #(.guarded(32'd1)) stage3_f_reset_reqs(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage3_f_reset_reqs$ENQ),
						.DEQ(stage3_f_reset_reqs$DEQ),
						.CLR(stage3_f_reset_reqs$CLR),
						.FULL_N(stage3_f_reset_reqs$FULL_N),
						.EMPTY_N(stage3_f_reset_reqs$EMPTY_N));

  // submodule stage3_f_reset_rsps
  FIFO20 #(.guarded(32'd1)) stage3_f_reset_rsps(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage3_f_reset_rsps$ENQ),
						.DEQ(stage3_f_reset_rsps$DEQ),
						.CLR(stage3_f_reset_rsps$CLR),
						.FULL_N(stage3_f_reset_rsps$FULL_N),
						.EMPTY_N(stage3_f_reset_rsps$EMPTY_N));

  // rule RL_rl_show_pipe
  assign CAN_FIRE_RL_rl_show_pipe =
	     NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38 &&
	     rg_state != 4'd0 &&
	     rg_state != 4'd1 &&
	     rg_state != 4'd8 ;
  assign WILL_FIRE_RL_rl_show_pipe = CAN_FIRE_RL_rl_show_pipe ;

  // rule RL_rl_reset_complete
  assign CAN_FIRE_RL_rl_reset_complete =
	     NOT_near_mem_imem_pc_BITS_31_TO_2_EQ_imem_rg_p_ETC___d1053 &&
	     rg_state == 4'd1 ;
  assign WILL_FIRE_RL_rl_reset_complete = CAN_FIRE_RL_rl_reset_complete ;

  // rule RL_rl_stage2_nonpipe
  assign CAN_FIRE_RL_rl_stage2_nonpipe =
	     (!near_mem_imem_pc_BITS_31_TO_2_EQ_imem_rg_pc_BI_ETC___d6 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     rg_state == 4'd2 &&
	     !stage3_rg_full &&
	     IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 ==
	     2'd3 ;
  assign WILL_FIRE_RL_rl_stage2_nonpipe = CAN_FIRE_RL_rl_stage2_nonpipe ;

  // rule RL_rl_stage1_CSRR_W
  assign CAN_FIRE_RL_rl_stage1_CSRR_W = MUX_rg_state$write_1__SEL_1 ;
  assign WILL_FIRE_RL_rl_stage1_CSRR_W = MUX_rg_state$write_1__SEL_1 ;

  // rule RL_rl_stage1_CSRR_S_or_C
  assign CAN_FIRE_RL_rl_stage1_CSRR_S_or_C = MUX_rg_state$write_1__SEL_2 ;
  assign WILL_FIRE_RL_rl_stage1_CSRR_S_or_C = MUX_rg_state$write_1__SEL_2 ;

  // rule RL_rl_stage1_restart_after_csrrx
  assign CAN_FIRE_RL_rl_stage1_restart_after_csrrx =
	     (!near_mem_imem_pc_BITS_31_TO_2_EQ_imem_rg_pc_BI_ETC___d6 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     rg_state == 4'd4 ;
  assign WILL_FIRE_RL_rl_stage1_restart_after_csrrx =
	     CAN_FIRE_RL_rl_stage1_restart_after_csrrx ;

  // rule RL_rl_stage1_xRET
  assign CAN_FIRE_RL_rl_stage1_xRET =
	     (!near_mem_imem_pc_BITS_31_TO_2_EQ_imem_rg_pc_BI_ETC___d6 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     rg_state_9_EQ_2_073_AND_NOT_rg_halt_059_083_AN_ETC___d1203 ;
  assign WILL_FIRE_RL_rl_stage1_xRET = CAN_FIRE_RL_rl_stage1_xRET ;

  // rule RL_rl_stage1_FENCE_I
  assign CAN_FIRE_RL_rl_stage1_FENCE_I = MUX_rg_state$write_1__SEL_6 ;
  assign WILL_FIRE_RL_rl_stage1_FENCE_I = MUX_rg_state$write_1__SEL_6 ;

  // rule RL_rl_finish_FENCE_I
  assign CAN_FIRE_RL_rl_finish_FENCE_I =
	     (!near_mem_imem_pc_BITS_31_TO_2_EQ_imem_rg_pc_BI_ETC___d6 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     near_mem$RDY_server_fence_i_response_get &&
	     rg_state == 4'd5 ;
  assign WILL_FIRE_RL_rl_finish_FENCE_I = CAN_FIRE_RL_rl_finish_FENCE_I ;

  // rule RL_rl_stage1_FENCE
  assign CAN_FIRE_RL_rl_stage1_FENCE = MUX_rg_state$write_1__SEL_7 ;
  assign WILL_FIRE_RL_rl_stage1_FENCE = MUX_rg_state$write_1__SEL_7 ;

  // rule RL_rl_finish_FENCE
  assign CAN_FIRE_RL_rl_finish_FENCE =
	     (!near_mem_imem_pc_BITS_31_TO_2_EQ_imem_rg_pc_BI_ETC___d6 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     near_mem$RDY_server_fence_response_get &&
	     rg_state == 4'd6 ;
  assign WILL_FIRE_RL_rl_finish_FENCE = CAN_FIRE_RL_rl_finish_FENCE ;

  // rule RL_rl_stage1_SFENCE_VMA
  assign CAN_FIRE_RL_rl_stage1_SFENCE_VMA = MUX_rg_state$write_1__SEL_8 ;
  assign WILL_FIRE_RL_rl_stage1_SFENCE_VMA = MUX_rg_state$write_1__SEL_8 ;

  // rule RL_rl_finish_SFENCE_VMA
  assign CAN_FIRE_RL_rl_finish_SFENCE_VMA =
	     (!near_mem_imem_pc_BITS_31_TO_2_EQ_imem_rg_pc_BI_ETC___d6 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     rg_state == 4'd7 ;
  assign WILL_FIRE_RL_rl_finish_SFENCE_VMA =
	     CAN_FIRE_RL_rl_finish_SFENCE_VMA ;

  // rule RL_rl_stage1_WFI
  assign CAN_FIRE_RL_rl_stage1_WFI = MUX_rg_state$write_1__SEL_9 ;
  assign WILL_FIRE_RL_rl_stage1_WFI = MUX_rg_state$write_1__SEL_9 ;

  // rule RL_rl_WFI_resume
  assign CAN_FIRE_RL_rl_WFI_resume =
	     (!near_mem_imem_pc_BITS_31_TO_2_EQ_imem_rg_pc_BI_ETC___d6 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     rg_state == 4'd8 &&
	     csr_regfile$wfi_resume ;
  assign WILL_FIRE_RL_rl_WFI_resume = CAN_FIRE_RL_rl_WFI_resume ;

  // rule RL_rl_reset_from_WFI
  assign CAN_FIRE_RL_rl_reset_from_WFI =
	     rg_state == 4'd8 && f_reset_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_rl_reset_from_WFI = MUX_rg_state$write_1__SEL_3 ;

  // rule RL_rl_stage1_trap
  assign CAN_FIRE_RL_rl_stage1_trap =
	     (!near_mem_imem_pc_BITS_31_TO_2_EQ_imem_rg_pc_BI_ETC___d6 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     (rg_state == 4'd3 ||
	      rg_state_9_EQ_2_073_AND_NOT_rg_halt_059_083_AN_ETC___d1241) ;
  assign WILL_FIRE_RL_rl_stage1_trap = CAN_FIRE_RL_rl_stage1_trap ;

  // rule RL_rl_stage1_interrupt
  assign CAN_FIRE_RL_rl_stage1_interrupt =
	     (!near_mem_imem_pc_BITS_31_TO_2_EQ_imem_rg_pc_BI_ETC___d6 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     csr_regfile_interrupt_pending_rg_cur_priv_0_06_ETC___d1263 ;
  assign WILL_FIRE_RL_rl_stage1_interrupt = CAN_FIRE_RL_rl_stage1_interrupt ;

  // rule RL_rl_pipe
  assign CAN_FIRE_RL_rl_pipe =
	     (rg_halt_059_OR_csr_regfile_interrupt_pending_r_ETC___d1071 ||
	      !near_mem_imem_pc_BITS_31_TO_2_EQ_imem_rg_pc_BI_ETC___d6 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     rg_state_9_EQ_2_073_AND_stage3_rg_full_5_OR_NO_ETC___d1092 ;
  assign WILL_FIRE_RL_rl_pipe =
	     CAN_FIRE_RL_rl_pipe && !WILL_FIRE_RL_imem_rl_fetch_next_32b ;

  // rule RL_rl_reset_start
  assign CAN_FIRE_RL_rl_reset_start =
	     gpr_regfile_RDY_server_reset_request_put__023__ETC___d1035 &&
	     rg_state == 4'd0 ;
  assign WILL_FIRE_RL_rl_reset_start = CAN_FIRE_RL_rl_reset_start ;

  // rule RL_imem_rl_fetch_next_32b
  assign CAN_FIRE_RL_imem_rl_fetch_next_32b =
	     near_mem$imem_valid &&
	     near_mem_imem_pc_BITS_31_TO_2_EQ_imem_rg_pc_BI_ETC___d6 &&
	     imem_rg_pc[1:0] != 2'b0 &&
	     near_mem$imem_instr[17:16] == 2'b11 ;
  assign WILL_FIRE_RL_imem_rl_fetch_next_32b =
	     CAN_FIRE_RL_imem_rl_fetch_next_32b ;

  // rule RL_stage3_rl_reset
  assign CAN_FIRE_RL_stage3_rl_reset =
	     stage3_f_reset_reqs$EMPTY_N && stage3_f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_stage3_rl_reset = CAN_FIRE_RL_stage3_rl_reset ;

  // rule RL_stage2_rl_reset
  assign CAN_FIRE_RL_stage2_rl_reset =
	     stage2_f_reset_reqs$EMPTY_N && stage2_f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_stage2_rl_reset = CAN_FIRE_RL_stage2_rl_reset ;

  // rule RL_stage1_rl_reset
  assign CAN_FIRE_RL_stage1_rl_reset =
	     stage1_f_reset_reqs$EMPTY_N && stage1_f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_stage1_rl_reset = CAN_FIRE_RL_stage1_rl_reset ;

  // inputs to muxes for submodule ports
  assign MUX_csr_regfile$mav_csr_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_stage1_CSRR_W && csr_regfile$access_permitted_1 ;
  assign MUX_gpr_regfile$write_rd_1__SEL_1 =
	     WILL_FIRE_RL_rl_pipe && stage3_rg_full && stage3_rg_stage3[37] ;
  assign MUX_gpr_regfile$write_rd_1__SEL_3 =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	     csr_regfile$access_permitted_2 ;
  assign MUX_imem_rg_f3$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_rg_halt_059_083_AND_NOT_csr_regfile_interr_ETC___d1131 ;
  assign MUX_imem_rg_mstatus_MXR$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_stage1_trap || WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_reset_complete ;
  assign MUX_imem_rg_pc$write_1__SEL_3 =
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ;
  assign MUX_imem_rg_pc$write_1__SEL_6 =
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ;
  assign MUX_imem_rg_priv$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_reset_complete ;
  assign MUX_near_mem$imem_req_1__SEL_8 =
	     WILL_FIRE_RL_rl_stage1_trap || WILL_FIRE_RL_rl_stage2_nonpipe ;
  assign MUX_rg_state$write_1__SEL_1 =
	     rg_state_9_EQ_2_073_AND_NOT_rg_halt_059_083_AN_ETC___d1154 &&
	     IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 ==
	     2'd0 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d630 &&
	     IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 ==
	     4'd2 ;
  assign MUX_rg_state$write_1__SEL_2 =
	     rg_state_9_EQ_2_073_AND_NOT_rg_halt_059_083_AN_ETC___d1154 &&
	     IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 ==
	     2'd0 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d630 &&
	     IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 ==
	     4'd3 ;
  assign MUX_rg_state$write_1__SEL_3 =
	     CAN_FIRE_RL_rl_reset_from_WFI && !WILL_FIRE_RL_rl_WFI_resume ;
  assign MUX_rg_state$write_1__SEL_5 =
	     WILL_FIRE_RL_rl_stage1_trap || WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_reset_complete ;
  assign MUX_rg_state$write_1__SEL_6 =
	     near_mem$RDY_server_fence_i_request_put &&
	     rg_state_9_EQ_2_073_AND_NOT_rg_halt_059_083_AN_ETC___d1214 ;
  assign MUX_rg_state$write_1__SEL_7 =
	     near_mem$RDY_server_fence_request_put &&
	     rg_state_9_EQ_2_073_AND_NOT_rg_halt_059_083_AN_ETC___d1224 ;
  assign MUX_rg_state$write_1__SEL_8 =
	     rg_state_9_EQ_2_073_AND_NOT_rg_halt_059_083_AN_ETC___d1154 &&
	     IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 ==
	     2'd0 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d630 &&
	     IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 ==
	     4'd6 ;
  assign MUX_rg_state$write_1__SEL_9 =
	     rg_state_9_EQ_2_073_AND_NOT_rg_halt_059_083_AN_ETC___d1154 &&
	     IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 ==
	     2'd0 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d630 &&
	     IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 ==
	     4'd10 ;
  always@(x_out_data_to_stage2_instr__h10583 or
	  csr_regfile$read_csr or
	  y__h17042 or
	  IF_csr_regfile_read_csr_IF_NOT_stage1_rg_full__ETC___d1190)
  begin
    case (x_out_data_to_stage2_instr__h10583[14:12])
      3'b010, 3'b110:
	  MUX_csr_regfile$mav_csr_write_2__VAL_2 =
	      IF_csr_regfile_read_csr_IF_NOT_stage1_rg_full__ETC___d1190;
      default: MUX_csr_regfile$mav_csr_write_2__VAL_2 =
		   csr_regfile$read_csr[31:0] & y__h17042;
    endcase
  end
  assign MUX_near_mem$imem_req_2__VAL_1 =
	     { x_out_next_pc__h10555[31:2], 2'b0 } ;
  assign MUX_near_mem$imem_req_2__VAL_3 = { pc_reset_value[31:2], 2'b0 } ;
  assign MUX_near_mem$imem_req_2__VAL_5 =
	     { csr_regfile$csr_ret_actions[65:36], 2'b0 } ;
  assign MUX_near_mem$imem_req_2__VAL_6 = { rg_next_pc[31:2], 2'b0 } ;
  assign MUX_near_mem$imem_req_2__VAL_7 =
	     { csr_regfile$csr_trap_actions[97:68], 2'b0 } ;
  assign MUX_rg_state$write_1__VAL_1 =
	     csr_regfile$access_permitted_1 ? 4'd4 : 4'd3 ;
  assign MUX_rg_state$write_1__VAL_2 =
	     csr_regfile$access_permitted_2 ? 4'd4 : 4'd3 ;
  assign MUX_stage1_rg_full$write_1__VAL_2 =
	     NOT_rg_halt_059_083_AND_NOT_csr_regfile_interr_ETC___d1131 ||
	     (rg_halt || csr_regfile$interrupt_pending[4] ||
	      IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 !=
	      2'd2 &&
	      IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 !=
	      2'd0 ||
	      NOT_near_mem_imem_valid_90_OR_NOT_near_mem_ime_ETC___d1086) &&
	     stage1_rg_full ;
  assign MUX_stage2_rg_full$write_1__VAL_2 =
	     !rg_halt && !csr_regfile$interrupt_pending[4] &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d679 ||
	     IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 !=
	     2'd2 &&
	     IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 !=
	     2'd0 ;

  // register cfg_logdelay
  assign cfg_logdelay$D_IN = set_verbosity_logdelay ;
  assign cfg_logdelay$EN = EN_set_verbosity ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN = set_verbosity_verbosity ;
  assign cfg_verbosity$EN = EN_set_verbosity ;

  // register imem_rg_f3
  assign imem_rg_f3$D_IN = 3'b010 ;
  assign imem_rg_f3$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_rg_halt_059_083_AND_NOT_csr_regfile_interr_ETC___d1131 ||
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_reset_complete ;

  // register imem_rg_instr_15_0
  assign imem_rg_instr_15_0$D_IN = near_mem$imem_instr[31:16] ;
  assign imem_rg_instr_15_0$EN = CAN_FIRE_RL_imem_rl_fetch_next_32b ;

  // register imem_rg_mstatus_MXR
  assign imem_rg_mstatus_MXR$D_IN =
	     (MUX_imem_rg_f3$write_1__SEL_1 ||
	      MUX_imem_rg_mstatus_MXR$write_1__SEL_2) ?
	       csr_regfile$read_mstatus[19] :
	       csr_regfile$csr_trap_actions[53] ;
  assign imem_rg_mstatus_MXR$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_rg_halt_059_083_AND_NOT_csr_regfile_interr_ETC___d1131 ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_reset_complete ||
	     WILL_FIRE_RL_rl_stage1_interrupt ;

  // register imem_rg_pc
  always@(MUX_imem_rg_f3$write_1__SEL_1 or
	  x_out_next_pc__h10555 or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  MUX_imem_rg_pc$write_1__SEL_3 or
	  csr_regfile$csr_trap_actions or
	  WILL_FIRE_RL_rl_reset_complete or
	  pc_reset_value or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  csr_regfile$csr_ret_actions or
	  MUX_imem_rg_pc$write_1__SEL_6 or rg_next_pc)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_f3$write_1__SEL_1: imem_rg_pc$D_IN = x_out_next_pc__h10555;
      WILL_FIRE_RL_rl_stage1_restart_after_csrrx:
	  imem_rg_pc$D_IN = x_out_next_pc__h10555;
      MUX_imem_rg_pc$write_1__SEL_3:
	  imem_rg_pc$D_IN = csr_regfile$csr_trap_actions[97:66];
      WILL_FIRE_RL_rl_reset_complete: imem_rg_pc$D_IN = pc_reset_value[31:0];
      WILL_FIRE_RL_rl_stage1_xRET:
	  imem_rg_pc$D_IN = csr_regfile$csr_ret_actions[65:34];
      MUX_imem_rg_pc$write_1__SEL_6: imem_rg_pc$D_IN = rg_next_pc;
      default: imem_rg_pc$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign imem_rg_pc$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_rg_halt_059_083_AND_NOT_csr_regfile_interr_ETC___d1131 ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_reset_complete ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ;

  // register imem_rg_priv
  always@(WILL_FIRE_RL_rl_stage1_xRET or
	  csr_regfile$csr_ret_actions or
	  MUX_imem_rg_pc$write_1__SEL_3 or
	  csr_regfile$csr_trap_actions or
	  MUX_imem_rg_f3$write_1__SEL_1 or
	  MUX_imem_rg_priv$write_1__SEL_2 or rg_cur_priv)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_stage1_xRET:
	  imem_rg_priv$D_IN = csr_regfile$csr_ret_actions[33:32];
      MUX_imem_rg_pc$write_1__SEL_3:
	  imem_rg_priv$D_IN = csr_regfile$csr_trap_actions[1:0];
      MUX_imem_rg_f3$write_1__SEL_1 || MUX_imem_rg_priv$write_1__SEL_2:
	  imem_rg_priv$D_IN = rg_cur_priv;
      default: imem_rg_priv$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign imem_rg_priv$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_rg_halt_059_083_AND_NOT_csr_regfile_interr_ETC___d1131 ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_reset_complete ||
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_xRET ;

  // register imem_rg_satp
  assign imem_rg_satp$D_IN = csr_regfile$read_satp ;
  assign imem_rg_satp$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_rg_halt_059_083_AND_NOT_csr_regfile_interr_ETC___d1131 ||
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_reset_complete ;

  // register imem_rg_sstatus_SUM
  assign imem_rg_sstatus_SUM$D_IN =
	     WILL_FIRE_RL_rl_stage1_interrupt &&
	     csr_regfile$csr_trap_actions[52] ;
  assign imem_rg_sstatus_SUM$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_rg_halt_059_083_AND_NOT_csr_regfile_interr_ETC___d1131 ||
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_reset_complete ;

  // register rg_cur_priv
  always@(MUX_imem_rg_pc$write_1__SEL_3 or
	  csr_regfile$csr_trap_actions or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  csr_regfile$csr_ret_actions or WILL_FIRE_RL_rl_reset_start)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_pc$write_1__SEL_3:
	  rg_cur_priv$D_IN = csr_regfile$csr_trap_actions[1:0];
      WILL_FIRE_RL_rl_stage1_xRET:
	  rg_cur_priv$D_IN = csr_regfile$csr_ret_actions[33:32];
      WILL_FIRE_RL_rl_reset_start: rg_cur_priv$D_IN = 2'b11;
      default: rg_cur_priv$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign rg_cur_priv$EN =
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_halt
  assign rg_halt$D_IN = 1'd0 ;
  assign rg_halt$EN = CAN_FIRE_RL_rl_reset_start ;

  // register rg_next_pc
  assign rg_next_pc$D_IN = x_out_next_pc__h10555 ;
  assign rg_next_pc$EN =
	     WILL_FIRE_RL_rl_stage1_WFI ||
	     WILL_FIRE_RL_rl_stage1_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ;

  // register rg_start_CPI_cycles
  assign rg_start_CPI_cycles$D_IN = csr_regfile$read_csr_mcycle ;
  assign rg_start_CPI_cycles$EN = CAN_FIRE_RL_rl_reset_complete ;

  // register rg_start_CPI_instrs
  assign rg_start_CPI_instrs$D_IN = csr_regfile$read_csr_minstret ;
  assign rg_start_CPI_instrs$EN = CAN_FIRE_RL_rl_reset_complete ;

  // register rg_state
  always@(WILL_FIRE_RL_rl_stage1_CSRR_W or
	  MUX_rg_state$write_1__VAL_1 or
	  WILL_FIRE_RL_rl_stage1_CSRR_S_or_C or
	  MUX_rg_state$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_reset_from_WFI or
	  WILL_FIRE_RL_rl_reset_start or
	  MUX_rg_state$write_1__SEL_5 or
	  WILL_FIRE_RL_rl_stage1_FENCE_I or
	  WILL_FIRE_RL_rl_stage1_FENCE or
	  WILL_FIRE_RL_rl_stage1_SFENCE_VMA or WILL_FIRE_RL_rl_stage1_WFI)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_stage1_CSRR_W:
	  rg_state$D_IN = MUX_rg_state$write_1__VAL_1;
      WILL_FIRE_RL_rl_stage1_CSRR_S_or_C:
	  rg_state$D_IN = MUX_rg_state$write_1__VAL_2;
      WILL_FIRE_RL_rl_reset_from_WFI: rg_state$D_IN = 4'd0;
      WILL_FIRE_RL_rl_reset_start: rg_state$D_IN = 4'd1;
      MUX_rg_state$write_1__SEL_5: rg_state$D_IN = 4'd2;
      WILL_FIRE_RL_rl_stage1_FENCE_I: rg_state$D_IN = 4'd5;
      WILL_FIRE_RL_rl_stage1_FENCE: rg_state$D_IN = 4'd6;
      WILL_FIRE_RL_rl_stage1_SFENCE_VMA: rg_state$D_IN = 4'd7;
      WILL_FIRE_RL_rl_stage1_WFI: rg_state$D_IN = 4'd8;
      default: rg_state$D_IN = 4'b1010 /* unspecified value */ ;
    endcase
  end
  assign rg_state$EN =
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_reset_from_WFI ||
	     WILL_FIRE_RL_rl_reset_start ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_reset_complete ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_stage1_WFI ;

  // register stage1_rg_full
  always@(WILL_FIRE_RL_stage1_rl_reset or
	  WILL_FIRE_RL_rl_pipe or
	  MUX_stage1_rg_full$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_stage1_interrupt or
	  WILL_FIRE_RL_rl_stage1_trap or
	  WILL_FIRE_RL_rl_WFI_resume or
	  WILL_FIRE_RL_rl_finish_SFENCE_VMA or
	  WILL_FIRE_RL_rl_finish_FENCE or
	  WILL_FIRE_RL_rl_finish_FENCE_I or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  WILL_FIRE_RL_rl_stage2_nonpipe or WILL_FIRE_RL_rl_reset_complete)
  case (1'b1)
    WILL_FIRE_RL_stage1_rl_reset: stage1_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_pipe:
	stage1_rg_full$D_IN = MUX_stage1_rg_full$write_1__VAL_2;
    WILL_FIRE_RL_rl_stage1_interrupt || WILL_FIRE_RL_rl_stage1_trap ||
    WILL_FIRE_RL_rl_WFI_resume ||
    WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
    WILL_FIRE_RL_rl_finish_FENCE ||
    WILL_FIRE_RL_rl_finish_FENCE_I ||
    WILL_FIRE_RL_rl_stage1_xRET ||
    WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
    WILL_FIRE_RL_rl_stage2_nonpipe ||
    WILL_FIRE_RL_rl_reset_complete:
	stage1_rg_full$D_IN = 1'd1;
    default: stage1_rg_full$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stage1_rg_full$EN =
	     WILL_FIRE_RL_rl_pipe || WILL_FIRE_RL_stage1_rl_reset ||
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_reset_complete ;

  // register stage2_rg_full
  always@(WILL_FIRE_RL_stage2_rl_reset or
	  WILL_FIRE_RL_rl_pipe or
	  MUX_stage2_rg_full$write_1__VAL_2 or WILL_FIRE_RL_rl_stage2_nonpipe)
  case (1'b1)
    WILL_FIRE_RL_stage2_rl_reset: stage2_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_pipe:
	stage2_rg_full$D_IN = MUX_stage2_rg_full$write_1__VAL_2;
    WILL_FIRE_RL_rl_stage2_nonpipe: stage2_rg_full$D_IN = 1'd0;
    default: stage2_rg_full$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stage2_rg_full$EN =
	     WILL_FIRE_RL_rl_pipe || WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_stage2_rl_reset ;

  // register stage2_rg_stage2
  assign stage2_rg_stage2$D_IN =
	     { rg_cur_priv,
	       imem_rg_pc,
	       x_out_data_to_stage2_instr__h10583,
	       IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d819,
	       x_out_data_to_stage2_rd__h10585,
	       x_out_data_to_stage2_addr__h10586,
	       x_out_data_to_stage2_val1__h10587,
	       x_out_data_to_stage2_val2__h10588 } ;
  assign stage2_rg_stage2$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_rg_halt_059_083_AND_NOT_csr_regfile_interr_ETC___d1109 ;

  // register stage3_rg_full
  assign stage3_rg_full$D_IN =
	     !WILL_FIRE_RL_stage3_rl_reset &&
	     IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 ==
	     2'd2 ;
  assign stage3_rg_full$EN =
	     WILL_FIRE_RL_rl_pipe || WILL_FIRE_RL_stage3_rl_reset ;

  // register stage3_rg_stage3
  assign stage3_rg_stage3$D_IN =
	     { stage2_rg_stage2[167:104],
	       stage2_rg_stage2[169:168],
	       stage2_rg_stage2[103:101] == 3'd0 ||
	       IF_stage2_rg_stage2_5_BITS_103_TO_101_6_EQ_1_8_ETC___d138,
	       x_out_data_to_stage3_rd__h4445,
	       x_out_data_to_stage3_rd_val__h4446 } ;
  assign stage3_rg_stage3$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 ==
	     2'd2 ;

  // submodule csr_regfile
  assign csr_regfile$access_permitted_1_csr_addr =
	     x_out_data_to_stage2_instr__h10583[31:20] ;
  assign csr_regfile$access_permitted_1_priv = rg_cur_priv ;
  assign csr_regfile$access_permitted_1_read_not_write = 1'd0 ;
  assign csr_regfile$access_permitted_2_csr_addr =
	     x_out_data_to_stage2_instr__h10583[31:20] ;
  assign csr_regfile$access_permitted_2_priv = rg_cur_priv ;
  assign csr_regfile$access_permitted_2_read_not_write =
	     rs1_val__h16741 == 32'd0 ;
  assign csr_regfile$csr_counter_read_fault_csr_addr = 12'h0 ;
  assign csr_regfile$csr_counter_read_fault_priv = 2'h0 ;
  always@(IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740)
  begin
    case (IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740)
      4'd7: csr_regfile$csr_ret_actions_from_priv = 2'b11;
      4'd8: csr_regfile$csr_ret_actions_from_priv = 2'b01;
      default: csr_regfile$csr_ret_actions_from_priv = 2'b0;
    endcase
  end
  always@(WILL_FIRE_RL_rl_stage1_trap or
	  x_out_trap_info_exc_code__h12201 or
	  WILL_FIRE_RL_rl_stage1_interrupt or
	  csr_regfile$interrupt_pending or
	  WILL_FIRE_RL_rl_stage2_nonpipe or near_mem$dmem_exc_code)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_stage1_trap:
	  csr_regfile$csr_trap_actions_exc_code =
	      x_out_trap_info_exc_code__h12201;
      WILL_FIRE_RL_rl_stage1_interrupt:
	  csr_regfile$csr_trap_actions_exc_code =
	      csr_regfile$interrupt_pending[3:0];
      WILL_FIRE_RL_rl_stage2_nonpipe:
	  csr_regfile$csr_trap_actions_exc_code = near_mem$dmem_exc_code;
      default: csr_regfile$csr_trap_actions_exc_code =
		   4'b1010 /* unspecified value */ ;
    endcase
  end
  assign csr_regfile$csr_trap_actions_from_priv = rg_cur_priv ;
  assign csr_regfile$csr_trap_actions_interrupt =
	     !WILL_FIRE_RL_rl_stage1_trap && !WILL_FIRE_RL_rl_stage2_nonpipe ;
  assign csr_regfile$csr_trap_actions_pc =
	     WILL_FIRE_RL_rl_stage2_nonpipe ?
	       stage2_rg_stage2[167:136] :
	       imem_rg_pc ;
  always@(WILL_FIRE_RL_rl_stage1_trap or
	  value__h12250 or
	  WILL_FIRE_RL_rl_stage1_interrupt or
	  WILL_FIRE_RL_rl_stage2_nonpipe or stage2_rg_stage2)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_stage1_trap:
	  csr_regfile$csr_trap_actions_xtval = value__h12250;
      WILL_FIRE_RL_rl_stage1_interrupt:
	  csr_regfile$csr_trap_actions_xtval = 32'd0;
      WILL_FIRE_RL_rl_stage2_nonpipe:
	  csr_regfile$csr_trap_actions_xtval = stage2_rg_stage2[95:64];
      default: csr_regfile$csr_trap_actions_xtval =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign csr_regfile$external_interrupt_req_set_not_clear =
	     external_interrupt_req_set_not_clear ;
  assign csr_regfile$interrupt_pending_cur_priv = rg_cur_priv ;
  assign csr_regfile$mav_csr_write_csr_addr =
	     x_out_data_to_stage2_instr__h10583[31:20] ;
  assign csr_regfile$mav_csr_write_word =
	     MUX_csr_regfile$mav_csr_write_1__SEL_1 ?
	       rs1_val__h16251 :
	       MUX_csr_regfile$mav_csr_write_2__VAL_2 ;
  assign csr_regfile$mav_read_csr_csr_addr = 12'h0 ;
  assign csr_regfile$read_csr_csr_addr =
	     x_out_data_to_stage2_instr__h10583[31:20] ;
  assign csr_regfile$read_csr_port2_csr_addr = 12'h0 ;
  assign csr_regfile$software_interrupt_req_set_not_clear =
	     software_interrupt_req_set_not_clear ;
  assign csr_regfile$timer_interrupt_req_set_not_clear =
	     timer_interrupt_req_set_not_clear ;
  assign csr_regfile$EN_server_reset_request_put =
	     CAN_FIRE_RL_rl_reset_start ;
  assign csr_regfile$EN_server_reset_response_get =
	     CAN_FIRE_RL_rl_reset_complete ;
  assign csr_regfile$EN_mav_read_csr = 1'b0 ;
  assign csr_regfile$EN_mav_csr_write =
	     WILL_FIRE_RL_rl_stage1_CSRR_W &&
	     csr_regfile$access_permitted_1 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	     csr_regfile$access_permitted_2 &&
	     x_out_data_to_stage2_instr__h10583[19:15] != 5'd0 ;
  assign csr_regfile$EN_csr_trap_actions =
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ;
  assign csr_regfile$EN_csr_ret_actions = CAN_FIRE_RL_rl_stage1_xRET ;
  assign csr_regfile$EN_csr_minstret_incr =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 ==
	     2'd2 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W &&
	     csr_regfile$access_permitted_1 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	     csr_regfile$access_permitted_2 ||
	     WILL_FIRE_RL_rl_stage1_WFI ||
	     WILL_FIRE_RL_rl_stage1_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ;
  assign csr_regfile$EN_external_interrupt_req = EN_external_interrupt_req ;
  assign csr_regfile$EN_timer_interrupt_req = EN_timer_interrupt_req ;
  assign csr_regfile$EN_software_interrupt_req = EN_software_interrupt_req ;
  assign csr_regfile$EN_debug = 1'b0 ;

  // submodule f_reset_reqs
  assign f_reset_reqs$ENQ = EN_hart0_server_reset_request_put ;
  assign f_reset_reqs$DEQ =
	     gpr_regfile_RDY_server_reset_request_put__023__ETC___d1035 &&
	     rg_state == 4'd0 ;
  assign f_reset_reqs$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$ENQ =
	     NOT_near_mem_imem_pc_BITS_31_TO_2_EQ_imem_rg_p_ETC___d1053 &&
	     rg_state == 4'd1 ;
  assign f_reset_rsps$DEQ = EN_hart0_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule gpr_regfile
  assign gpr_regfile$read_rs1_port2_rs1 = 5'h0 ;
  assign gpr_regfile$read_rs1_rs1 = _theResult____h3058[19:15] ;
  assign gpr_regfile$read_rs2_rs2 = _theResult____h3058[24:20] ;
  assign gpr_regfile$write_rd_rd =
	     MUX_gpr_regfile$write_rd_1__SEL_1 ?
	       stage3_rg_stage3[36:32] :
	       x_out_data_to_stage2_instr__h10583[11:7] ;
  assign gpr_regfile$write_rd_rd_val =
	     (MUX_csr_regfile$mav_csr_write_1__SEL_1 ||
	      MUX_gpr_regfile$write_rd_1__SEL_3) ?
	       csr_regfile$read_csr[31:0] :
	       stage3_rg_stage3[31:0] ;
  assign gpr_regfile$EN_server_reset_request_put =
	     CAN_FIRE_RL_rl_reset_start ;
  assign gpr_regfile$EN_server_reset_response_get =
	     CAN_FIRE_RL_rl_reset_complete ;
  assign gpr_regfile$EN_write_rd =
	     WILL_FIRE_RL_rl_pipe && stage3_rg_full && stage3_rg_stage3[37] ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W &&
	     csr_regfile$access_permitted_1 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	     csr_regfile$access_permitted_2 ;

  // submodule near_mem
  assign near_mem$dmem_master_arready = dmem_master_arready ;
  assign near_mem$dmem_master_awready = dmem_master_awready ;
  assign near_mem$dmem_master_bresp = dmem_master_bresp ;
  assign near_mem$dmem_master_bvalid = dmem_master_bvalid ;
  assign near_mem$dmem_master_rdata = dmem_master_rdata ;
  assign near_mem$dmem_master_rresp = dmem_master_rresp ;
  assign near_mem$dmem_master_rvalid = dmem_master_rvalid ;
  assign near_mem$dmem_master_wready = dmem_master_wready ;
  assign near_mem$dmem_req_addr = x_out_data_to_stage2_addr__h10586 ;
  assign near_mem$dmem_req_amo_funct7 =
	     x_out_data_to_stage2_val1__h10587[6:0] ;
  assign near_mem$dmem_req_f3 = x_out_data_to_stage2_instr__h10583[14:12] ;
  assign near_mem$dmem_req_mstatus_MXR = csr_regfile$read_mstatus[19] ;
  always@(IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d819)
  begin
    case (IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d819)
      3'd1: near_mem$dmem_req_op = 2'd0;
      3'd2: near_mem$dmem_req_op = 2'd1;
      default: near_mem$dmem_req_op = 2'd2;
    endcase
  end
  assign near_mem$dmem_req_priv =
	     csr_regfile$read_mstatus[17] ?
	       csr_regfile$read_mstatus[12:11] :
	       rg_cur_priv ;
  assign near_mem$dmem_req_satp = csr_regfile$read_satp ;
  assign near_mem$dmem_req_sstatus_SUM = 1'd0 ;
  assign near_mem$dmem_req_store_value =
	     { 32'd0, x_out_data_to_stage2_val2__h10588 } ;
  assign near_mem$imem_master_arready = imem_master_arready ;
  assign near_mem$imem_master_awready = imem_master_awready ;
  assign near_mem$imem_master_bresp = imem_master_bresp ;
  assign near_mem$imem_master_bvalid = imem_master_bvalid ;
  assign near_mem$imem_master_rdata = imem_master_rdata ;
  assign near_mem$imem_master_rresp = imem_master_rresp ;
  assign near_mem$imem_master_rvalid = imem_master_rvalid ;
  assign near_mem$imem_master_wready = imem_master_wready ;
  always@(MUX_imem_rg_f3$write_1__SEL_1 or
	  MUX_near_mem$imem_req_2__VAL_1 or
	  WILL_FIRE_RL_imem_rl_fetch_next_32b or
	  next_pc___1__h12357 or
	  WILL_FIRE_RL_rl_reset_complete or
	  MUX_near_mem$imem_req_2__VAL_3 or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  MUX_near_mem$imem_req_2__VAL_5 or
	  MUX_imem_rg_pc$write_1__SEL_6 or
	  MUX_near_mem$imem_req_2__VAL_6 or
	  WILL_FIRE_RL_rl_stage1_interrupt or
	  MUX_near_mem$imem_req_2__VAL_7 or MUX_near_mem$imem_req_1__SEL_8)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_f3$write_1__SEL_1:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_1;
      WILL_FIRE_RL_imem_rl_fetch_next_32b:
	  near_mem$imem_req_addr = next_pc___1__h12357;
      WILL_FIRE_RL_rl_reset_complete:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_3;
      WILL_FIRE_RL_rl_stage1_restart_after_csrrx:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_1;
      WILL_FIRE_RL_rl_stage1_xRET:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_5;
      MUX_imem_rg_pc$write_1__SEL_6:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_6;
      WILL_FIRE_RL_rl_stage1_interrupt:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_7;
      MUX_near_mem$imem_req_1__SEL_8:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_7;
      default: near_mem$imem_req_addr = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign near_mem$imem_req_f3 =
	     WILL_FIRE_RL_imem_rl_fetch_next_32b ? imem_rg_f3 : 3'b010 ;
  always@(MUX_imem_rg_f3$write_1__SEL_1 or
	  WILL_FIRE_RL_rl_reset_complete or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  MUX_imem_rg_pc$write_1__SEL_6 or
	  MUX_near_mem$imem_req_1__SEL_8 or
	  csr_regfile$read_mstatus or
	  WILL_FIRE_RL_rl_stage1_interrupt or
	  csr_regfile$csr_trap_actions or
	  WILL_FIRE_RL_imem_rl_fetch_next_32b or imem_rg_mstatus_MXR)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_f3$write_1__SEL_1 || WILL_FIRE_RL_rl_reset_complete ||
      WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
      WILL_FIRE_RL_rl_stage1_xRET ||
      MUX_imem_rg_pc$write_1__SEL_6 ||
      MUX_near_mem$imem_req_1__SEL_8:
	  near_mem$imem_req_mstatus_MXR = csr_regfile$read_mstatus[19];
      WILL_FIRE_RL_rl_stage1_interrupt:
	  near_mem$imem_req_mstatus_MXR = csr_regfile$csr_trap_actions[53];
      WILL_FIRE_RL_imem_rl_fetch_next_32b:
	  near_mem$imem_req_mstatus_MXR = imem_rg_mstatus_MXR;
      default: near_mem$imem_req_mstatus_MXR = 1'b0 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_rl_stage1_xRET or
	  csr_regfile$csr_ret_actions or
	  WILL_FIRE_RL_rl_stage1_interrupt or
	  MUX_near_mem$imem_req_1__SEL_8 or
	  csr_regfile$csr_trap_actions or
	  MUX_imem_rg_f3$write_1__SEL_1 or
	  WILL_FIRE_RL_rl_reset_complete or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  MUX_imem_rg_pc$write_1__SEL_6 or
	  rg_cur_priv or WILL_FIRE_RL_imem_rl_fetch_next_32b or imem_rg_priv)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_stage1_xRET:
	  near_mem$imem_req_priv = csr_regfile$csr_ret_actions[33:32];
      WILL_FIRE_RL_rl_stage1_interrupt || MUX_near_mem$imem_req_1__SEL_8:
	  near_mem$imem_req_priv = csr_regfile$csr_trap_actions[1:0];
      MUX_imem_rg_f3$write_1__SEL_1 || WILL_FIRE_RL_rl_reset_complete ||
      WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
      MUX_imem_rg_pc$write_1__SEL_6:
	  near_mem$imem_req_priv = rg_cur_priv;
      WILL_FIRE_RL_imem_rl_fetch_next_32b:
	  near_mem$imem_req_priv = imem_rg_priv;
      default: near_mem$imem_req_priv = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign near_mem$imem_req_satp =
	     WILL_FIRE_RL_imem_rl_fetch_next_32b ?
	       imem_rg_satp :
	       csr_regfile$read_satp ;
  always@(WILL_FIRE_RL_rl_stage1_interrupt or
	  csr_regfile$csr_trap_actions or
	  WILL_FIRE_RL_imem_rl_fetch_next_32b or
	  imem_rg_sstatus_SUM or
	  MUX_imem_rg_f3$write_1__SEL_1 or
	  WILL_FIRE_RL_rl_reset_complete or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  MUX_imem_rg_pc$write_1__SEL_6 or MUX_near_mem$imem_req_1__SEL_8)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_stage1_interrupt:
	  near_mem$imem_req_sstatus_SUM = csr_regfile$csr_trap_actions[52];
      WILL_FIRE_RL_imem_rl_fetch_next_32b:
	  near_mem$imem_req_sstatus_SUM = imem_rg_sstatus_SUM;
      MUX_imem_rg_f3$write_1__SEL_1 || WILL_FIRE_RL_rl_reset_complete ||
      WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
      WILL_FIRE_RL_rl_stage1_xRET ||
      MUX_imem_rg_pc$write_1__SEL_6 ||
      MUX_near_mem$imem_req_1__SEL_8:
	  near_mem$imem_req_sstatus_SUM = 1'd0;
      default: near_mem$imem_req_sstatus_SUM = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign near_mem$near_mem_slave_araddr = near_mem_slave_araddr ;
  assign near_mem$near_mem_slave_arprot = near_mem_slave_arprot ;
  assign near_mem$near_mem_slave_arvalid = near_mem_slave_arvalid ;
  assign near_mem$near_mem_slave_awaddr = near_mem_slave_awaddr ;
  assign near_mem$near_mem_slave_awprot = near_mem_slave_awprot ;
  assign near_mem$near_mem_slave_awvalid = near_mem_slave_awvalid ;
  assign near_mem$near_mem_slave_bready = near_mem_slave_bready ;
  assign near_mem$near_mem_slave_rready = near_mem_slave_rready ;
  assign near_mem$near_mem_slave_wdata = near_mem_slave_wdata ;
  assign near_mem$near_mem_slave_wstrb = near_mem_slave_wstrb ;
  assign near_mem$near_mem_slave_wvalid = near_mem_slave_wvalid ;
  assign near_mem$server_fence_request_put =
	     8'b10101010 /* unspecified value */  ;
  assign near_mem$EN_server_reset_request_put = CAN_FIRE_RL_rl_reset_start ;
  assign near_mem$EN_server_reset_response_get =
	     CAN_FIRE_RL_rl_reset_complete ;
  assign near_mem$EN_imem_req =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_rg_halt_059_083_AND_NOT_csr_regfile_interr_ETC___d1131 ||
	     WILL_FIRE_RL_imem_rl_fetch_next_32b ||
	     WILL_FIRE_RL_rl_reset_complete ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ;
  assign near_mem$EN_dmem_req =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_rg_halt_059_083_AND_NOT_csr_regfile_interr_ETC___d1109 &&
	     (IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d819 ==
	      3'd1 ||
	      IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d819 ==
	      3'd2 ||
	      IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d819 ==
	      3'd4) ;
  assign near_mem$EN_server_fence_i_request_put =
	     MUX_rg_state$write_1__SEL_6 ;
  assign near_mem$EN_server_fence_i_response_get =
	     CAN_FIRE_RL_rl_finish_FENCE_I ;
  assign near_mem$EN_server_fence_request_put = MUX_rg_state$write_1__SEL_7 ;
  assign near_mem$EN_server_fence_response_get = CAN_FIRE_RL_rl_finish_FENCE ;
  assign near_mem$EN_sfence_vma = MUX_rg_state$write_1__SEL_8 ;

  // submodule stage1_f_reset_reqs
  assign stage1_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stage1_f_reset_reqs$DEQ = CAN_FIRE_RL_stage1_rl_reset ;
  assign stage1_f_reset_reqs$CLR = 1'b0 ;

  // submodule stage1_f_reset_rsps
  assign stage1_f_reset_rsps$ENQ = CAN_FIRE_RL_stage1_rl_reset ;
  assign stage1_f_reset_rsps$DEQ = CAN_FIRE_RL_rl_reset_complete ;
  assign stage1_f_reset_rsps$CLR = 1'b0 ;

  // submodule stage2_f_reset_reqs
  assign stage2_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stage2_f_reset_reqs$DEQ = CAN_FIRE_RL_stage2_rl_reset ;
  assign stage2_f_reset_reqs$CLR = 1'b0 ;

  // submodule stage2_f_reset_rsps
  assign stage2_f_reset_rsps$ENQ = CAN_FIRE_RL_stage2_rl_reset ;
  assign stage2_f_reset_rsps$DEQ = CAN_FIRE_RL_rl_reset_complete ;
  assign stage2_f_reset_rsps$CLR = 1'b0 ;

  // submodule stage2_mbox
  assign stage2_mbox$req_f3 = x_out_data_to_stage2_instr__h10583[14:12] ;
  assign stage2_mbox$req_is_OP_not_OP_32 = !_theResult____h3058[3] ;
  assign stage2_mbox$req_v1 = x_out_data_to_stage2_val1__h10587 ;
  assign stage2_mbox$req_v2 = x_out_data_to_stage2_val2__h10588 ;
  assign stage2_mbox$set_verbosity_verbosity = 4'h0 ;
  assign stage2_mbox$EN_set_verbosity = 1'b0 ;
  assign stage2_mbox$EN_req_reset = 1'b0 ;
  assign stage2_mbox$EN_rsp_reset = 1'b0 ;
  assign stage2_mbox$EN_req =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_rg_halt_059_083_AND_NOT_csr_regfile_interr_ETC___d1109 &&
	     IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d819 ==
	     3'd3 ;

  // submodule stage3_f_reset_reqs
  assign stage3_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stage3_f_reset_reqs$DEQ = CAN_FIRE_RL_stage3_rl_reset ;
  assign stage3_f_reset_reqs$CLR = 1'b0 ;

  // submodule stage3_f_reset_rsps
  assign stage3_f_reset_rsps$ENQ = CAN_FIRE_RL_stage3_rl_reset ;
  assign stage3_f_reset_rsps$DEQ = CAN_FIRE_RL_rl_reset_complete ;
  assign stage3_f_reset_rsps$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1257 =
	     IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d674 ||
	     IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d676 ||
	     near_mem$imem_exc ||
	     IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d616 &&
	     IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d627 ;
  assign IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d517 =
	     rs1_val_bypassed__h3066 == rs2_val__h10684 ;
  assign IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d519 =
	     (rs1_val_bypassed__h3066 ^ 32'h80000000) <
	     (rs2_val__h10684 ^ 32'h80000000) ;
  assign IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d521 =
	     rs1_val_bypassed__h3066 < rs2_val__h10684 ;
  assign IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d616 =
	     (_theResult____h3058[6:0] == 7'b1100011) ?
	       _theResult____h3058[14:12] != 3'b0 &&
	       _theResult____h3058[14:12] != 3'b001 &&
	       _theResult____h3058[14:12] != 3'b100 &&
	       _theResult____h3058[14:12] != 3'b101 &&
	       _theResult____h3058[14:12] != 3'b110 &&
	       _theResult____h3058[14:12] != 3'b111 ||
	       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d528 :
	       (_theResult____h3058[6:0] != 7'b0110011 ||
		_theResult____h3058[31:25] != 7'b0000001) &&
	       (((_theResult____h3058[6:0] == 7'b0010011 ||
		  _theResult____h3058[6:0] == 7'b0110011) &&
		 (_theResult____h3058[14:12] == 3'b001 ||
		  _theResult____h3058[14:12] == 3'b101)) ?
		  _theResult____h3058[25] :
		  CASE_theResult__058_BITS_6_TO_0_0b10011_NOT_IF_ETC__q10) ;
  assign IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d627 =
	     (_theResult____h3058[6:0] == 7'b1100011) ?
	       _theResult____h3058[14:12] != 3'b0 &&
	       _theResult____h3058[14:12] != 3'b001 &&
	       _theResult____h3058[14:12] != 3'b100 &&
	       _theResult____h3058[14:12] != 3'b101 &&
	       _theResult____h3058[14:12] != 3'b110 &&
	       _theResult____h3058[14:12] != 3'b111 ||
	       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d622 :
	       _theResult____h3058[6:0] != 7'b1101111 &&
	       _theResult____h3058[6:0] != 7'b1100111 ;
  assign IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d674 =
	     (_theResult____h3058[6:0] == 7'b1100011) ?
	       (_theResult____h3058[14:12] == 3'b0 ||
		_theResult____h3058[14:12] == 3'b001 ||
		_theResult____h3058[14:12] == 3'b100 ||
		_theResult____h3058[14:12] == 3'b101 ||
		_theResult____h3058[14:12] == 3'b110 ||
		_theResult____h3058[14:12] == 3'b111) &&
	       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d622 :
	       _theResult____h3058[6:0] == 7'b0110011 &&
	       _theResult____h3058[31:25] == 7'b0000001 ||
	       (((_theResult____h3058[6:0] == 7'b0010011 ||
		  _theResult____h3058[6:0] == 7'b0110011) &&
		 (_theResult____h3058[14:12] == 3'b001 ||
		  _theResult____h3058[14:12] == 3'b101)) ?
		  !_theResult____h3058[25] :
		  CASE_theResult__058_BITS_6_TO_0_0b10011_IF_NOT_ETC__q12) ;
  assign IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d676 =
	     (_theResult____h3058[6:0] == 7'b1100011) ?
	       (_theResult____h3058[14:12] == 3'b0 ||
		_theResult____h3058[14:12] == 3'b001 ||
		_theResult____h3058[14:12] == 3'b100 ||
		_theResult____h3058[14:12] == 3'b101 ||
		_theResult____h3058[14:12] == 3'b110 ||
		_theResult____h3058[14:12] == 3'b111) &&
	       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d528 :
	       _theResult____h3058[6:0] == 7'b1101111 ||
	       _theResult____h3058[6:0] == 7'b1100111 ;
  assign IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d933 =
	     ((_theResult____h3058[6:0] == 7'b0010011 ||
	       _theResult____h3058[6:0] == 7'b0110011) &&
	      (_theResult____h3058[14:12] == 3'b001 ||
	       _theResult____h3058[14:12] == 3'b101)) ?
	       alu_outputs___1_val1__h10860 :
	       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d932 ;
  assign IF_NOT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_P_ETC___d684 =
	     NOT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_ETC___d558 ?
	       4'd11 :
	       4'd0 ;
  assign IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_ETC___d647 =
	     _theResult____h3058[14:12] == 3'b0 &&
	     (_theResult____h3058[6:0] != 7'b0110011 ||
	      !_theResult____h3058[30]) ||
	     _theResult____h3058[14:12] == 3'b0 &&
	     _theResult____h3058[6:0] == 7'b0110011 &&
	     _theResult____h3058[30] ||
	     _theResult____h3058[14:12] == 3'b010 ||
	     _theResult____h3058[14:12] == 3'b011 ||
	     _theResult____h3058[14:12] == 3'b100 ||
	     _theResult____h3058[14:12] == 3'b110 ||
	     _theResult____h3058[14:12] == 3'b111 ;
  assign IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_ETC___d863 =
	     NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_91_ETC___d199 ?
	       next_pc___1__h12357 :
	       next_pc__h12355 ;
  assign IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d1244 =
	     imem_rg_pc == csr_regfile$csr_trap_actions[97:66] ;
  assign IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 =
	     near_mem$imem_exc ?
	       4'd11 :
	       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d738 ;
  assign IF_csr_regfile_read_csr_IF_NOT_stage1_rg_full__ETC___d1190 =
	     csr_regfile$read_csr[31:0] | rs1_val__h16741 ;
  assign IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d431 =
	     (csr_regfile$read_misa[2] && instr__h3056[1:0] == 2'b01 &&
	      instr__h3056[15:10] == 6'b100011 &&
	      instr__h3056[6:5] == 2'b0) ?
	       instr__h10119 :
	       ((csr_regfile$read_misa[2] && instr__h3056[1:0] == 2'b10 &&
		 instr__h3056[15:12] == 4'b1001 &&
		 instr__h3056[11:7] == 5'd0 &&
		 instr__h3056[6:2] == 5'd0) ?
		  instr__h10457 :
		  32'h0) ;
  assign IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d433 =
	     (csr_regfile$read_misa[2] && instr__h3056[1:0] == 2'b01 &&
	      instr__h3056[15:10] == 6'b100011 &&
	      instr__h3056[6:5] == 2'b10) ?
	       instr__h9847 :
	       ((csr_regfile$read_misa[2] && instr__h3056[1:0] == 2'b01 &&
		 instr__h3056[15:10] == 6'b100011 &&
		 instr__h3056[6:5] == 2'b01) ?
		  instr__h9983 :
		  IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d431) ;
  assign IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d435 =
	     (csr_regfile_read_misa__7_BIT_2_06_AND_IF_near__ETC___d302 &&
	      instr__h3056[6:2] != 5'd0) ?
	       instr__h9616 :
	       ((csr_regfile$read_misa[2] && instr__h3056[1:0] == 2'b01 &&
		 instr__h3056[15:10] == 6'b100011 &&
		 instr__h3056[6:5] == 2'b11) ?
		  instr__h9711 :
		  IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d433) ;
  assign IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d436 =
	     (csr_regfile_read_misa__7_BIT_2_06_AND_IF_near__ETC___d296 &&
	      instr__h3056[6:2] != 5'd0) ?
	       instr__h9497 :
	       IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d435 ;
  assign IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d438 =
	     (csr_regfile$read_misa[2] && instr__h3056[1:0] == 2'b01 &&
	      instr__h3056[15:13] == 3'b100 &&
	      instr__h3056[11:10] == 2'b01 &&
	      imm6__h7643 != 6'd0 &&
	      !instr__h3056[12]) ?
	       instr__h9202 :
	       ((csr_regfile$read_misa[2] && instr__h3056[1:0] == 2'b01 &&
		 instr__h3056[15:13] == 3'b100 &&
		 instr__h3056[11:10] == 2'b10) ?
		  instr__h9319 :
		  IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d436) ;
  assign IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d439 =
	     (csr_regfile$read_misa[2] && instr__h3056[1:0] == 2'b01 &&
	      instr__h3056[15:13] == 3'b100 &&
	      instr__h3056[11:10] == 2'b0 &&
	      imm6__h7643 != 6'd0 &&
	      !instr__h3056[12]) ?
	       instr__h9009 :
	       IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d438 ;
  assign IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d440 =
	     (csr_regfile$read_misa[2] && instr__h3056[1:0] == 2'b10 &&
	      instr__h3056[15:13] == 3'b0 &&
	      instr__h3056[11:7] != 5'd0 &&
	      imm6__h7643 != 6'd0 &&
	      !instr__h3056[12]) ?
	       instr__h8816 :
	       IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d439 ;
  assign IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d442 =
	     (csr_regfile$read_misa[2] && instr__h3056[1:0] == 2'b01 &&
	      instr__h3056[15:13] == 3'b011 &&
	      instr__h3056[11:7] == 5'd2 &&
	      nzimm10__h8267 != 10'd0) ?
	       instr__h8471 :
	       ((csr_regfile$read_misa[2] && instr__h3056[1:0] == 2'b0 &&
		 instr__h3056[15:13] == 3'b0 &&
		 nzimm10__h8482 != 10'd0) ?
		  instr__h8643 :
		  IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d440) ;
  assign IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d443 =
	     (csr_regfile$read_misa[2] && instr__h3056[1:0] == 2'b01 &&
	      instr__h3056[15:13] == 3'b0 &&
	      instr__h3056[11:7] != 5'd0 &&
	      imm6__h7643 != 6'd0 ||
	      csr_regfile$read_misa[2] && instr__h3056[1:0] == 2'b01 &&
	      instr__h3056[15:13] == 3'b0 &&
	      instr__h3056[11:7] == 5'd0 &&
	      imm6__h7643 == 6'd0) ?
	       instr__h8034 :
	       IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d442 ;
  assign IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d444 =
	     (csr_regfile$read_misa[2] && instr__h3056[1:0] == 2'b01 &&
	      instr__h3056[15:13] == 3'b011 &&
	      instr__h3056[11:7] != 5'd0 &&
	      instr__h3056[11:7] != 5'd2 &&
	      imm6__h7643 != 6'd0) ?
	       instr__h7905 :
	       IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d443 ;
  assign IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d446 =
	     (csr_regfile$read_misa[2] && instr__h3056[1:0] == 2'b01 &&
	      instr__h3056[15:13] == 3'b111) ?
	       instr__h7383 :
	       ((csr_regfile$read_misa[2] && instr__h3056[1:0] == 2'b01 &&
		 instr__h3056[15:13] == 3'b010 &&
		 instr__h3056[11:7] != 5'd0) ?
		  instr__h7721 :
		  IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d444) ;
  assign IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d447 =
	     (csr_regfile$read_misa[2] && instr__h3056[1:0] == 2'b01 &&
	      instr__h3056[15:13] == 3'b110) ?
	       instr__h7066 :
	       IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d446 ;
  assign IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d448 =
	     (csr_regfile_read_misa__7_BIT_2_06_AND_IF_near__ETC___d302 &&
	      instr__h3056[6:2] == 5'd0) ?
	       instr__h7001 :
	       IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d447 ;
  assign IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d449 =
	     (csr_regfile_read_misa__7_BIT_2_06_AND_IF_near__ETC___d296 &&
	      instr__h3056[6:2] == 5'd0) ?
	       instr__h6885 :
	       IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d448 ;
  assign IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d450 =
	     (csr_regfile$read_misa[2] && instr__h3056[1:0] == 2'b01 &&
	      instr__h3056[15:13] == 3'b001) ?
	       instr__h6495 :
	       IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d449 ;
  assign IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d451 =
	     (csr_regfile$read_misa[2] && instr__h3056[1:0] == 2'b01 &&
	      instr__h3056[15:13] == 3'b101) ?
	       instr__h6152 :
	       IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d450 ;
  assign IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d452 =
	     (csr_regfile$read_misa[2] && instr__h3056[1:0] == 2'b0 &&
	      instr__h3056[15:13] == 3'b110) ?
	       instr__h5923 :
	       IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d451 ;
  assign IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d453 =
	     (csr_regfile$read_misa[2] && instr__h3056[1:0] == 2'b0 &&
	      instr__h3056[15:13] == 3'b010) ?
	       instr__h5728 :
	       IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d452 ;
  assign IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d454 =
	     (csr_regfile$read_misa[2] && instr__h3056[1:0] == 2'b10 &&
	      instr__h3056[15:13] == 3'b110) ?
	       instr__h5536 :
	       IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d453 ;
  assign IF_near_mem_dmem_valid__06_THEN_IF_near_mem_dm_ETC___d109 =
	     near_mem$dmem_valid ? (near_mem$dmem_exc ? 2'd3 : 2'd2) : 2'd1 ;
  assign IF_rg_cur_priv_0_EQ_0b11_98_OR_rg_cur_priv_0_E_ETC___d717 =
	     ((rg_cur_priv == 2'b11 ||
	       rg_cur_priv == 2'b01 && !csr_regfile$read_mstatus[22]) &&
	      _theResult____h3058[31:20] == 12'b000100000010) ?
	       4'd8 :
	       (rg_cur_priv_0_EQ_0b11_98_OR_rg_cur_priv_0_EQ_0_ETC___d715 ?
		  4'd10 :
		  4'd11) ;
  assign IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 =
	     stage2_rg_full ?
	       CASE_stage2_rg_stage2_BITS_103_TO_101_0_2_1_IF_ETC__q1 :
	       2'd0 ;
  assign IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d175 =
	     stage2_rg_full ?
	       CASE_stage2_rg_stage2_BITS_103_TO_101_0_2_1_IF_ETC__q2 :
	       2'd0 ;
  assign IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d458 =
	     x_out_bypass_rd__h4785 == _theResult____h3058[19:15] ;
  assign IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d460 =
	     x_out_bypass_rd__h4785 == _theResult____h3058[24:20] ;
  assign IF_stage2_rg_stage2_5_BITS_100_TO_96_45_EQ_0_6_ETC___d171 =
	     (stage2_rg_stage2[100:96] == 5'd0) ?
	       2'd0 :
	       ((near_mem$dmem_valid && !near_mem$dmem_exc) ? 2'd2 : 2'd1) ;
  assign IF_stage2_rg_stage2_5_BITS_103_TO_101_6_EQ_3_2_ETC___d112 =
	     stage2_mbox$valid ? 2'd2 : 2'd1 ;
  assign NOT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_ETC___d558 =
	     (_theResult____h3058[14:12] != 3'b0 ||
	      _theResult____h3058[6:0] == 7'b0110011 &&
	      _theResult____h3058[30]) &&
	     (_theResult____h3058[14:12] != 3'b0 ||
	      _theResult____h3058[6:0] != 7'b0110011 ||
	      !_theResult____h3058[30]) &&
	     _theResult____h3058[14:12] != 3'b010 &&
	     _theResult____h3058[14:12] != 3'b011 &&
	     _theResult____h3058[14:12] != 3'b100 &&
	     _theResult____h3058[14:12] != 3'b110 &&
	     _theResult____h3058[14:12] != 3'b111 ;
  assign NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38 =
	     cur_verbosity__h1892 > 4'd1 ;
  assign NOT_near_mem_imem_exc__79_32_AND_IF_IF_NOT_nea_ETC___d806 =
	     !near_mem$imem_exc &&
	     (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d674 ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d676) &&
	     IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 !=
	     4'd0 &&
	     IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 !=
	     4'd1 &&
	     IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 !=
	     4'd2 &&
	     IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 !=
	     4'd3 &&
	     IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 !=
	     4'd4 &&
	     IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 !=
	     4'd5 &&
	     IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 !=
	     4'd6 &&
	     IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 !=
	     4'd7 &&
	     IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 !=
	     4'd8 &&
	     IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 !=
	     4'd9 &&
	     IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 !=
	     4'd10 ;
  assign NOT_near_mem_imem_exc__79_32_AND_IF_IF_NOT_nea_ETC___d843 =
	     !near_mem$imem_exc &&
	     (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d674 ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d676) &&
	     IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d819 !=
	     3'd0 &&
	     IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d819 !=
	     3'd1 &&
	     IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d819 !=
	     3'd2 &&
	     IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d819 !=
	     3'd3 ;
  assign NOT_near_mem_imem_pc_BITS_31_TO_2_EQ_imem_rg_p_ETC___d1053 =
	     (!near_mem_imem_pc_BITS_31_TO_2_EQ_imem_rg_pc_BI_ETC___d6 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     gpr_regfile_RDY_server_reset_response_get__040_ETC___d1052 ;
  assign NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_91_ETC___d199 =
	     !near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7___d191 &&
	     (!near_mem_imem_pc_BITS_31_TO_2_EQ_imem_rg_pc_BI_ETC___d6 ||
	      imem_rg_pc[1:0] != 2'b0 ||
	      near_mem$imem_instr[1:0] != 2'b11) ;
  assign NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_91_ETC___d204 =
	     NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_91_ETC___d199 &&
	     (!near_mem_imem_pc_BITS_31_TO_2_EQ_imem_rg_pc_BI_ETC___d6 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] == 2'b11) &&
	     (!near_mem_imem_pc_BITS_31_TO_2_EQ_imem_rg_pc_BI_ETC___d6 ||
	      imem_rg_pc[1:0] != 2'b0 ||
	      near_mem$imem_instr[1:0] == 2'b11) ;
  assign NOT_near_mem_imem_valid_90_OR_NOT_near_mem_ime_ETC___d1067 =
	     !near_mem$imem_valid ||
	     !near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7___d191 ||
	     IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d175 ==
	     2'd1 &&
	     (IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d458 ||
	      IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d460) ;
  assign NOT_near_mem_imem_valid_90_OR_NOT_near_mem_ime_ETC___d1078 =
	     NOT_near_mem_imem_valid_90_OR_NOT_near_mem_ime_ETC___d463 ||
	     !near_mem$imem_exc &&
	     (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d674 ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d676) ;
  assign NOT_near_mem_imem_valid_90_OR_NOT_near_mem_ime_ETC___d1086 =
	     NOT_near_mem_imem_valid_90_OR_NOT_near_mem_ime_ETC___d463 ||
	     near_mem$imem_exc ||
	     IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d616 &&
	     IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d627 ;
  assign NOT_near_mem_imem_valid_90_OR_NOT_near_mem_ime_ETC___d463 =
	     !near_mem$imem_valid ||
	     NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_91_ETC___d204 ||
	     IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d175 ==
	     2'd1 &&
	     (IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d458 ||
	      IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d460) ;
  assign NOT_rg_halt_059_083_AND_NOT_csr_regfile_interr_ETC___d1089 =
	     !rg_halt && !csr_regfile$interrupt_pending[4] ||
	     (!stage1_rg_full ||
	      NOT_near_mem_imem_valid_90_OR_NOT_near_mem_ime_ETC___d1086) &&
	     (!stage1_rg_full ||
	      NOT_near_mem_imem_valid_90_OR_NOT_near_mem_ime_ETC___d1078) ;
  assign NOT_rg_halt_059_083_AND_NOT_csr_regfile_interr_ETC___d1109 =
	     !rg_halt && !csr_regfile$interrupt_pending[4] &&
	     (IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 ==
	      2'd2 ||
	      IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 ==
	      2'd0) &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d679 ;
  assign NOT_rg_halt_059_083_AND_NOT_csr_regfile_interr_ETC___d1131 =
	     !rg_halt && !csr_regfile$interrupt_pending[4] &&
	     ((IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 ==
	       2'd2 ||
	       IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 ==
	       2'd0) &&
	      near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d679 ||
	      !stage1_rg_full) ;
  assign SEXT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLU_ETC___d874 =
	     { {20{theResult__058_BITS_31_TO_20__q16[11]}},
	       theResult__058_BITS_31_TO_20__q16 } ;
  assign SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d282 =
	     { {9{offset__h6099[11]}}, offset__h6099 } ;
  assign SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d311 =
	     { {4{offset__h7010[8]}}, offset__h7010 } ;
  assign _theResult_____1_fst__h11686 =
	     (_theResult____h3058[14:12] == 3'b0 &&
	      _theResult____h3058[6:0] == 7'b0110011 &&
	      _theResult____h3058[30]) ?
	       rd_val___1__h11682 :
	       _theResult_____1_fst__h11693 ;
  assign _theResult_____1_fst__h11721 =
	     rs1_val_bypassed__h3066 & _theResult___snd__h12848 ;
  assign _theResult____h21389 =
	     (delta_CPI_instrs__h21388 == 64'd0) ?
	       delta_CPI_instrs___1__h21424 :
	       delta_CPI_instrs__h21388 ;
  assign _theResult____h3058 = x_out_data_to_stage2_instr__h10583 ;
  assign _theResult___fst__h5291 =
	     (near_mem_imem_pc_BITS_31_TO_2_EQ_imem_rg_pc_BI_ETC___d6 &&
	      imem_rg_pc[1:0] == 2'b0 &&
	      near_mem$imem_instr[1:0] != 2'b11) ?
	       instr_out___1__h5293 :
	       _theResult___fst__h5319 ;
  assign _theResult___fst__h5319 =
	     (near_mem_imem_pc_BITS_31_TO_2_EQ_imem_rg_pc_BI_ETC___d6 &&
	      imem_rg_pc[1:0] != 2'b0 &&
	      near_mem$imem_instr[17:16] != 2'b11) ?
	       instr_out___1__h5321 :
	       near_mem$imem_instr ;
  assign _theResult___snd__h12848 =
	     (_theResult____h3058[6:0] == 7'b0010011) ?
	       SEXT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLU_ETC___d874 :
	       rs2_val__h10684 ;
  assign alu_outputs___1_addr__h10708 =
	     IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d528 ?
	       branch_target__h10688 :
	       IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_ETC___d863 ;
  assign alu_outputs___1_addr__h10730 =
	     { imem_rg_pc_PLUS_SEXT_theResult__058_BIT_31_CON_ETC__q5[31:1],
	       1'd0 } ;
  assign alu_outputs___1_addr__h10756 =
	     { alu_outputs___1_addr__h10950[31:1], 1'd0 } ;
  assign alu_outputs___1_addr__h10950 =
	     rs1_val_bypassed__h3066 +
	     SEXT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLU_ETC___d874 ;
  assign alu_outputs___1_addr__h10970 =
	     rs1_val_bypassed__h3066 +
	     { {20{theResult__058_BITS_31_TO_25_CONCAT_theResult__ETC__q8[11]}},
	       theResult__058_BITS_31_TO_25_CONCAT_theResult__ETC__q8 } ;
  assign alu_outputs___1_exc_code__h11206 =
	     (_theResult____h3058[14:12] == 3'b0) ?
	       ((_theResult____h3058[11:7] == 5'd0 &&
		 _theResult____h3058[19:15] == 5'd0) ?
		  CASE_theResult__058_BITS_31_TO_20_0b0_CASE_rg__ETC__q7 :
		  4'd2) :
	       4'd2 ;
  assign alu_outputs___1_val1__h10860 =
	     (_theResult____h3058[14:12] == 3'b001) ?
	       rd_val__h12744 :
	       (_theResult____h3058[30] ? rd_val__h12818 : rd_val__h12796) ;
  assign alu_outputs___1_val1__h10898 =
	     (_theResult____h3058[14:12] == 3'b0 &&
	      (_theResult____h3058[6:0] != 7'b0110011 ||
	       !_theResult____h3058[30])) ?
	       rd_val___1__h11674 :
	       _theResult_____1_fst__h11686 ;
  assign alu_outputs___1_val1__h10914 =
	     { _theResult____h3058[31:12], 12'h0 } ;
  assign alu_outputs___1_val1__h10930 =
	     imem_rg_pc + alu_outputs___1_val1__h10914 ;
  assign alu_outputs___1_val1__h11210 =
	     _theResult____h3058[14] ?
	       { 27'd0, _theResult____h3058[19:15] } :
	       rs1_val_bypassed__h3066 ;
  assign alu_outputs___1_val1__h11231 =
	     { 25'd0, _theResult____h3058[31:25] } ;
  assign branch_target__h10688 =
	     imem_rg_pc +
	     { {19{theResult__058_BIT_31_CONCAT_theResult__058_BI_ETC__q3[12]}},
	       theResult__058_BIT_31_CONCAT_theResult__058_BI_ETC__q3 } ;
  assign cpi__h21391 = x__h21390 / 64'd10 ;
  assign cpifrac__h21392 = x__h21390 % 64'd10 ;
  assign csr_regfile_interrupt_pending_rg_cur_priv_0_06_ETC___d1263 =
	     csr_regfile$interrupt_pending[4] && rg_state == 4'd2 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d478 &&
	     IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1257 &&
	     IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 ==
	     2'd0 &&
	     !stage3_rg_full ;
  assign csr_regfile_read_csr_mcycle__9_MINUS_rg_start__ETC___d1247 =
	     delta_CPI_cycles__h21387 * 64'd10 ;
  assign csr_regfile_read_misa__7_BIT_2_06_AND_IF_near__ETC___d296 =
	     csr_regfile$read_misa[2] && instr__h3056[1:0] == 2'b10 &&
	     instr__h3056[15:12] == 4'b1000 &&
	     instr__h3056[11:7] != 5'd0 ;
  assign csr_regfile_read_misa__7_BIT_2_06_AND_IF_near__ETC___d302 =
	     csr_regfile$read_misa[2] && instr__h3056[1:0] == 2'b10 &&
	     instr__h3056[15:12] == 4'b1001 &&
	     instr__h3056[11:7] != 5'd0 ;
  assign cur_verbosity__h1892 =
	     (csr_regfile$read_csr_minstret < cfg_logdelay) ?
	       4'd0 :
	       cfg_verbosity ;
  assign data_to_stage2_addr__h10578 = x_out_data_to_stage2_addr__h10586 ;
  assign delta_CPI_cycles__h21387 =
	     csr_regfile$read_csr_mcycle - rg_start_CPI_cycles ;
  assign delta_CPI_instrs___1__h21424 = delta_CPI_instrs__h21388 + 64'd1 ;
  assign delta_CPI_instrs__h21388 =
	     csr_regfile$read_csr_minstret - rg_start_CPI_instrs ;
  assign fall_through_pc__h10542 =
	     imem_rg_pc +
	     (near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_91_OR__ETC___d470 ?
		32'd4 :
		32'd2) ;
  assign gpr_regfile_RDY_server_reset_request_put__023__ETC___d1035 =
	     gpr_regfile$RDY_server_reset_request_put &&
	     near_mem$RDY_server_reset_request_put &&
	     csr_regfile$RDY_server_reset_request_put &&
	     f_reset_reqs$EMPTY_N &&
	     stage1_f_reset_reqs$FULL_N &&
	     stage2_f_reset_reqs$FULL_N &&
	     stage3_f_reset_reqs$FULL_N ;
  assign gpr_regfile_RDY_server_reset_response_get__040_ETC___d1052 =
	     gpr_regfile$RDY_server_reset_response_get &&
	     near_mem$RDY_server_reset_response_get &&
	     csr_regfile$RDY_server_reset_response_get &&
	     stage1_f_reset_rsps$EMPTY_N &&
	     stage2_f_reset_rsps$EMPTY_N &&
	     stage3_f_reset_rsps$EMPTY_N &&
	     f_reset_rsps$FULL_N ;
  assign imem_rg_pc_PLUS_SEXT_theResult__058_BIT_31_CON_ETC__q5 =
	     imem_rg_pc +
	     { {11{theResult__058_BIT_31_CONCAT_theResult__058_BI_ETC__q4[20]}},
	       theResult__058_BIT_31_CONCAT_theResult__058_BI_ETC__q4 } ;
  assign imm12__h5392 = { 4'd0, offset__h5161 } ;
  assign imm12__h5729 = { 5'd0, offset__h5671 } ;
  assign imm12__h7645 = { {6{imm6__h7643[5]}}, imm6__h7643 } ;
  assign imm12__h8269 = { {2{nzimm10__h8267[9]}}, nzimm10__h8267 } ;
  assign imm12__h8484 = { 2'd0, nzimm10__h8482 } ;
  assign imm12__h8680 = { 7'b0, instr__h3056[6:2] } ;
  assign imm12__h9025 = { 7'b0100000, instr__h3056[6:2] } ;
  assign imm20__h7773 = { {14{imm6__h7643[5]}}, imm6__h7643 } ;
  assign imm6__h7643 = { instr__h3056[12], instr__h3056[6:2] } ;
  assign instr___1__h5123 =
	     (csr_regfile$read_misa[2] && instr__h3056[1:0] == 2'b10 &&
	      instr__h3056[11:7] != 5'd0 &&
	      instr__h3056[15:13] == 3'b010) ?
	       instr__h5391 :
	       IF_csr_regfile_read_misa__7_BIT_2_06_AND_IF_ne_ETC___d454 ;
  assign instr__h10119 =
	     { 7'b0100000,
	       rd__h5731,
	       rs1__h5730,
	       3'b0,
	       rs1__h5730,
	       7'b0110011 } ;
  assign instr__h10457 =
	     { 12'b000000000001,
	       instr__h3056[11:7],
	       3'b0,
	       instr__h3056[11:7],
	       7'b1110011 } ;
  assign instr__h3056 =
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7___d191 ?
	       instr_out___1__h5260 :
	       _theResult___fst__h5291 ;
  assign instr__h5391 =
	     { imm12__h5392, 8'd18, instr__h3056[11:7], 7'b0000011 } ;
  assign instr__h5536 =
	     { 4'd0,
	       instr__h3056[8:7],
	       instr__h3056[12],
	       instr__h3056[6:2],
	       8'd18,
	       offset_BITS_4_TO_0___h5660,
	       7'b0100011 } ;
  assign instr__h5728 =
	     { imm12__h5729, rs1__h5730, 3'b010, rd__h5731, 7'b0000011 } ;
  assign instr__h5923 =
	     { 5'd0,
	       instr__h3056[5],
	       instr__h3056[12],
	       rd__h5731,
	       rs1__h5730,
	       3'b010,
	       offset_BITS_4_TO_0___h6091,
	       7'b0100011 } ;
  assign instr__h6152 =
	     { SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d282[20],
	       SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d282[10:1],
	       SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d282[11],
	       SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d282[19:12],
	       12'd111 } ;
  assign instr__h6495 =
	     { SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d282[20],
	       SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d282[10:1],
	       SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d282[11],
	       SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d282[19:12],
	       12'd239 } ;
  assign instr__h6885 = { 12'd0, instr__h3056[11:7], 15'd103 } ;
  assign instr__h7001 = { 12'd0, instr__h3056[11:7], 15'd231 } ;
  assign instr__h7066 =
	     { SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d311[12],
	       SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d311[10:5],
	       5'd0,
	       rs1__h5730,
	       3'b0,
	       SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d311[4:1],
	       SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d311[11],
	       7'b1100011 } ;
  assign instr__h7383 =
	     { SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d311[12],
	       SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d311[10:5],
	       5'd0,
	       rs1__h5730,
	       3'b001,
	       SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d311[4:1],
	       SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d311[11],
	       7'b1100011 } ;
  assign instr__h7721 =
	     { imm12__h7645, 8'd0, instr__h3056[11:7], 7'b0010011 } ;
  assign instr__h7905 = { imm20__h7773, instr__h3056[11:7], 7'b0110111 } ;
  assign instr__h8034 =
	     { imm12__h7645,
	       instr__h3056[11:7],
	       3'b0,
	       instr__h3056[11:7],
	       7'b0010011 } ;
  assign instr__h8471 =
	     { imm12__h8269,
	       instr__h3056[11:7],
	       3'b0,
	       instr__h3056[11:7],
	       7'b0010011 } ;
  assign instr__h8643 = { imm12__h8484, 8'd16, rd__h5731, 7'b0010011 } ;
  assign instr__h8816 =
	     { imm12__h8680,
	       instr__h3056[11:7],
	       3'b001,
	       instr__h3056[11:7],
	       7'b0010011 } ;
  assign instr__h9009 =
	     { imm12__h8680, rs1__h5730, 3'b101, rs1__h5730, 7'b0010011 } ;
  assign instr__h9202 =
	     { imm12__h9025, rs1__h5730, 3'b101, rs1__h5730, 7'b0010011 } ;
  assign instr__h9319 =
	     { imm12__h7645, rs1__h5730, 3'b111, rs1__h5730, 7'b0010011 } ;
  assign instr__h9497 =
	     { 7'b0,
	       instr__h3056[6:2],
	       8'd0,
	       instr__h3056[11:7],
	       7'b0110011 } ;
  assign instr__h9616 =
	     { 7'b0,
	       instr__h3056[6:2],
	       instr__h3056[11:7],
	       3'b0,
	       instr__h3056[11:7],
	       7'b0110011 } ;
  assign instr__h9711 =
	     { 7'b0, rd__h5731, rs1__h5730, 3'b111, rs1__h5730, 7'b0110011 } ;
  assign instr__h9847 =
	     { 7'b0, rd__h5731, rs1__h5730, 3'b110, rs1__h5730, 7'b0110011 } ;
  assign instr__h9983 =
	     { 7'b0, rd__h5731, rs1__h5730, 3'b100, rs1__h5730, 7'b0110011 } ;
  assign instr_out___1__h5260 =
	     { near_mem$imem_instr[15:0], imem_rg_instr_15_0 } ;
  assign instr_out___1__h5293 = { 16'b0, near_mem$imem_instr[15:0] } ;
  assign instr_out___1__h5321 = { 16'b0, near_mem$imem_instr[31:16] } ;
  assign near_mem_imem_exc__79_OR_IF_IF_NOT_near_mem_im_ETC___d945 =
	     (near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d616 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d627) &&
	     IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 ==
	     4'd0 ;
  assign near_mem_imem_exc__79_OR_IF_IF_NOT_near_mem_im_ETC___d948 =
	     (near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d616 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d627) &&
	     IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 ==
	     4'd1 ;
  assign near_mem_imem_exc__79_OR_IF_IF_NOT_near_mem_im_ETC___d951 =
	     (near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d616 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d627) &&
	     IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 ==
	     4'd2 ;
  assign near_mem_imem_exc__79_OR_IF_IF_NOT_near_mem_im_ETC___d954 =
	     (near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d616 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d627) &&
	     IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 ==
	     4'd3 ;
  assign near_mem_imem_exc__79_OR_IF_IF_NOT_near_mem_im_ETC___d957 =
	     (near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d616 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d627) &&
	     IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 ==
	     4'd4 ;
  assign near_mem_imem_exc__79_OR_IF_IF_NOT_near_mem_im_ETC___d960 =
	     (near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d616 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d627) &&
	     IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 ==
	     4'd5 ;
  assign near_mem_imem_exc__79_OR_IF_IF_NOT_near_mem_im_ETC___d963 =
	     (near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d616 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d627) &&
	     IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 ==
	     4'd6 ;
  assign near_mem_imem_exc__79_OR_IF_IF_NOT_near_mem_im_ETC___d966 =
	     (near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d616 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d627) &&
	     IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 ==
	     4'd7 ;
  assign near_mem_imem_exc__79_OR_IF_IF_NOT_near_mem_im_ETC___d969 =
	     (near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d616 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d627) &&
	     IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 ==
	     4'd8 ;
  assign near_mem_imem_exc__79_OR_IF_IF_NOT_near_mem_im_ETC___d972 =
	     (near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d616 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d627) &&
	     IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 ==
	     4'd9 ;
  assign near_mem_imem_exc__79_OR_IF_IF_NOT_near_mem_im_ETC___d975 =
	     (near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d616 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d627) &&
	     IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 ==
	     4'd10 ;
  assign near_mem_imem_exc__79_OR_IF_IF_NOT_near_mem_im_ETC___d978 =
	     (near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d616 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d627) &&
	     IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 !=
	     4'd0 &&
	     IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 !=
	     4'd1 &&
	     IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 !=
	     4'd2 &&
	     IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 !=
	     4'd3 &&
	     IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 !=
	     4'd4 &&
	     IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 !=
	     4'd5 &&
	     IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 !=
	     4'd6 &&
	     IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 !=
	     4'd7 &&
	     IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 !=
	     4'd8 &&
	     IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 !=
	     4'd9 &&
	     IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 !=
	     4'd10 ;
  assign near_mem_imem_pc_BITS_31_TO_2_EQ_imem_rg_pc_BI_ETC___d6 =
	     near_mem$imem_pc[31:2] == imem_rg_pc[31:2] ;
  assign near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_91_OR__ETC___d470 =
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7___d191 ||
	     near_mem_imem_pc_BITS_31_TO_2_EQ_imem_rg_pc_BI_ETC___d6 &&
	     imem_rg_pc[1:0] == 2'b0 &&
	     near_mem$imem_instr[1:0] == 2'b11 ;
  assign near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_91_OR__ETC___d472 =
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_91_OR__ETC___d470 ||
	     near_mem_imem_pc_BITS_31_TO_2_EQ_imem_rg_pc_BI_ETC___d6 &&
	     imem_rg_pc[1:0] != 2'b0 &&
	     near_mem$imem_instr[17:16] != 2'b11 ||
	     near_mem_imem_pc_BITS_31_TO_2_EQ_imem_rg_pc_BI_ETC___d6 &&
	     imem_rg_pc[1:0] == 2'b0 &&
	     near_mem$imem_instr[1:0] != 2'b11 ;
  assign near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7___d191 =
	     near_mem$imem_pc == next_pc___1__h12357 ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d478 =
	     near_mem$imem_valid &&
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_91_OR__ETC___d472 &&
	     (IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d175 !=
	      2'd1 ||
	      !IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d458 &&
	      !IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d460) ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d630 =
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d478 &&
	     (near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d616 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d627) ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d679 =
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d478 &&
	     !near_mem$imem_exc &&
	     (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d674 ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d676) ;
  assign next_pc___1__h12357 = imem_rg_pc + 32'd2 ;
  assign next_pc__h12355 = imem_rg_pc + 32'd4 ;
  assign nzimm10__h8267 =
	     { instr__h3056[12],
	       instr__h3056[4:3],
	       instr__h3056[5],
	       instr__h3056[2],
	       instr__h3056[6],
	       4'b0 } ;
  assign nzimm10__h8482 =
	     { instr__h3056[10:7],
	       instr__h3056[12:11],
	       instr__h3056[5],
	       instr__h3056[6],
	       2'b0 } ;
  assign offset_BITS_4_TO_0___h5660 = { instr__h3056[11:9], 2'b0 } ;
  assign offset_BITS_4_TO_0___h6091 =
	     { instr__h3056[11:10], instr__h3056[6], 2'b0 } ;
  assign offset__h5161 =
	     { instr__h3056[3:2],
	       instr__h3056[12],
	       instr__h3056[6:4],
	       2'b0 } ;
  assign offset__h5671 =
	     { instr__h3056[5], instr__h3056[12:10], instr__h3056[6], 2'b0 } ;
  assign offset__h6099 =
	     { instr__h3056[12],
	       instr__h3056[8],
	       instr__h3056[10:9],
	       instr__h3056[6],
	       instr__h3056[7],
	       instr__h3056[2],
	       instr__h3056[11],
	       instr__h3056[5:3],
	       1'b0 } ;
  assign offset__h7010 =
	     { instr__h3056[12],
	       instr__h3056[6:5],
	       instr__h3056[2],
	       instr__h3056[11:10],
	       instr__h3056[4:3],
	       1'b0 } ;
  assign output_stage2___1_bypass_rd_val__h4774 =
	     (stage2_rg_stage2[100:96] == 5'd0) ?
	       stage2_rg_stage2[63:32] :
	       near_mem$dmem_word64[31:0] ;
  assign rd__h5731 = { 2'b01, instr__h3056[4:2] } ;
  assign rd_val___1__h11674 =
	     rs1_val_bypassed__h3066 + _theResult___snd__h12848 ;
  assign rd_val___1__h11682 =
	     rs1_val_bypassed__h3066 - _theResult___snd__h12848 ;
  assign rd_val___1__h11689 =
	     ((rs1_val_bypassed__h3066 ^ 32'h80000000) <
	      (_theResult___snd__h12848 ^ 32'h80000000)) ?
	       32'd1 :
	       32'd0 ;
  assign rd_val___1__h11696 =
	     (rs1_val_bypassed__h3066 < _theResult___snd__h12848) ?
	       32'd1 :
	       32'd0 ;
  assign rd_val___1__h11703 =
	     rs1_val_bypassed__h3066 ^ _theResult___snd__h12848 ;
  assign rd_val___1__h11710 =
	     rs1_val_bypassed__h3066 | _theResult___snd__h12848 ;
  assign rd_val__h10499 =
	     (stage3_rg_full && stage3_rg_stage3[37] &&
	      stage3_rg_stage3[36:32] == _theResult____h3058[24:20]) ?
	       stage3_rg_stage3[31:0] :
	       gpr_regfile$read_rs2 ;
  assign rd_val__h12744 = rs1_val_bypassed__h3066 << shamt__h10845 ;
  assign rd_val__h12796 = rs1_val_bypassed__h3066 >> shamt__h10845 ;
  assign rd_val__h12818 =
	     rs1_val_bypassed__h3066 >> shamt__h10845 |
	     ~(32'hFFFFFFFF >> shamt__h10845) &
	     {32{rs1_val_bypassed__h3066[31]}} ;
  assign rd_val__h5075 =
	     (stage3_rg_full && stage3_rg_stage3[37] &&
	      stage3_rg_stage3[36:32] == _theResult____h3058[19:15]) ?
	       stage3_rg_stage3[31:0] :
	       gpr_regfile$read_rs1 ;
  assign rg_cur_priv_0_EQ_0b11_98_OR_rg_cur_priv_0_EQ_0_ETC___d715 =
	     (rg_cur_priv == 2'b11 ||
	      rg_cur_priv == 2'b01 && !csr_regfile$read_mstatus[21] ||
	      rg_cur_priv == 2'b0 && csr_regfile$read_misa[13]) &&
	     _theResult____h3058[31:20] == 12'b000100000101 ;
  assign rg_halt_059_OR_csr_regfile_interrupt_pending_r_ETC___d1071 =
	     rg_halt || csr_regfile$interrupt_pending[4] ||
	     (IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 !=
	      2'd2 &&
	      IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 !=
	      2'd0 ||
	      NOT_near_mem_imem_valid_90_OR_NOT_near_mem_ime_ETC___d1067 ||
	      near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d616 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d627) &&
	     stage1_rg_full ;
  assign rg_state_9_EQ_2_073_AND_NOT_rg_halt_059_083_AN_ETC___d1154 =
	     rg_state == 4'd2 && !rg_halt &&
	     !csr_regfile$interrupt_pending[4] &&
	     !stage3_rg_full ;
  assign rg_state_9_EQ_2_073_AND_NOT_rg_halt_059_083_AN_ETC___d1203 =
	     rg_state_9_EQ_2_073_AND_NOT_rg_halt_059_083_AN_ETC___d1154 &&
	     IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 ==
	     2'd0 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d630 &&
	     (IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 ==
	      4'd7 ||
	      IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 ==
	      4'd8 ||
	      IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 ==
	      4'd9) ;
  assign rg_state_9_EQ_2_073_AND_NOT_rg_halt_059_083_AN_ETC___d1214 =
	     rg_state_9_EQ_2_073_AND_NOT_rg_halt_059_083_AN_ETC___d1154 &&
	     IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 ==
	     2'd0 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d630 &&
	     IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 ==
	     4'd5 ;
  assign rg_state_9_EQ_2_073_AND_NOT_rg_halt_059_083_AN_ETC___d1224 =
	     rg_state_9_EQ_2_073_AND_NOT_rg_halt_059_083_AN_ETC___d1154 &&
	     IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 ==
	     2'd0 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d630 &&
	     IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 ==
	     4'd4 ;
  assign rg_state_9_EQ_2_073_AND_NOT_rg_halt_059_083_AN_ETC___d1241 =
	     rg_state_9_EQ_2_073_AND_NOT_rg_halt_059_083_AN_ETC___d1154 &&
	     IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 ==
	     2'd0 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d630 &&
	     IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 ==
	     4'd11 ;
  assign rg_state_9_EQ_2_073_AND_stage3_rg_full_5_OR_NO_ETC___d1092 =
	     rg_state == 4'd2 &&
	     (stage3_rg_full ||
	      IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 !=
	      2'd0 ||
	      stage1_rg_full) &&
	     (stage3_rg_full ||
	      IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 !=
	      2'd3) &&
	     (stage3_rg_full ||
	      IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 !=
	      2'd0 ||
	      !stage1_rg_full ||
	      NOT_near_mem_imem_valid_90_OR_NOT_near_mem_ime_ETC___d1078) &&
	     (NOT_rg_halt_059_083_AND_NOT_csr_regfile_interr_ETC___d1089 ||
	      IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 !=
	      2'd0 ||
	      stage3_rg_full) ;
  assign rs1__h5730 = { 2'b01, instr__h3056[9:7] } ;
  assign rs1_val__h16251 =
	     (x_out_data_to_stage2_instr__h10583[14:12] == 3'b001) ?
	       x_out_data_to_stage2_val1__h10587 :
	       { 27'd0, x_out_data_to_stage2_instr__h10583[19:15] } ;
  assign rs1_val_bypassed__h3066 =
	     (_theResult____h3058[19:15] == 5'd0) ? 32'd0 : val__h5077 ;
  assign rs2_val__h10684 =
	     (_theResult____h3058[24:20] == 5'd0) ? 32'd0 : val__h10501 ;
  assign shamt__h10845 =
	     (_theResult____h3058[6:0] == 7'b0010011) ?
	       _theResult____h3058[24:20] :
	       rs2_val__h10684[4:0] ;
  assign theResult__058_BITS_31_TO_20__q16 = _theResult____h3058[31:20] ;
  assign theResult__058_BITS_31_TO_25_CONCAT_theResult__ETC__q8 =
	     { _theResult____h3058[31:25], _theResult____h3058[11:7] } ;
  assign theResult__058_BIT_31_CONCAT_theResult__058_BI_ETC__q3 =
	     { _theResult____h3058[31],
	       _theResult____h3058[7],
	       _theResult____h3058[30:25],
	       _theResult____h3058[11:8],
	       1'b0 } ;
  assign theResult__058_BIT_31_CONCAT_theResult__058_BI_ETC__q4 =
	     { _theResult____h3058[31],
	       _theResult____h3058[19:12],
	       _theResult____h3058[20],
	       _theResult____h3058[30:21],
	       1'b0 } ;
  assign trap_info_tval__h12198 =
	     (_theResult____h3058[6:0] != 7'b1100011 &&
	      _theResult____h3058[6:0] != 7'b1101111 &&
	      _theResult____h3058[6:0] != 7'b1100111 &&
	      (_theResult____h3058[6:0] != 7'b1110011 ||
	       _theResult____h3058[14:12] != 3'b0 ||
	       _theResult____h3058[11:7] != 5'd0 ||
	       _theResult____h3058[19:15] != 5'd0 ||
	       _theResult____h3058[31:20] != 12'b0 &&
	       _theResult____h3058[31:20] != 12'b000000000001)) ?
	       _theResult____h3058 :
	       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1013 ;
  assign val__h10501 =
	     (IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d175 ==
	      2'd2 &&
	      IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d460) ?
	       x_out_bypass_rd_val__h4786 :
	       rd_val__h10499 ;
  assign val__h5077 =
	     (IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d175 ==
	      2'd2 &&
	      IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d458) ?
	       x_out_bypass_rd_val__h4786 :
	       rd_val__h5075 ;
  assign value__h12250 =
	     near_mem$imem_exc ? near_mem$imem_pc : trap_info_tval__h12198 ;
  assign x__h21390 =
	     csr_regfile_read_csr_mcycle__9_MINUS_rg_start__ETC___d1247[63:0] /
	     _theResult____h21389 ;
  assign x_out_data_to_stage2_instr__h10583 =
	     NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_91_ETC___d199 ?
	       instr___1__h5123 :
	       instr__h3056 ;
  assign x_out_data_to_stage2_rd__h10585 =
	     (_theResult____h3058[6:0] == 7'b1100011) ?
	       5'd0 :
	       _theResult____h3058[11:7] ;
  assign x_out_data_to_stage2_val2__h10588 =
	     (_theResult____h3058[6:0] == 7'b1100011) ?
	       branch_target__h10688 :
	       rs2_val__h10684 ;
  assign x_out_next_pc__h10555 =
	     IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d676 ?
	       data_to_stage2_addr__h10578 :
	       fall_through_pc__h10542 ;
  assign x_out_trap_info_exc_code__h12201 =
	     near_mem$imem_exc ?
	       near_mem$imem_exc_code :
	       alu_outputs_exc_code__h11249 ;
  assign y__h17042 = ~rs1_val__h16741 ;
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[103:101])
      3'd0, 3'd1, 3'd4:
	  x_out_data_to_stage3_rd__h4445 = stage2_rg_stage2[100:96];
      3'd2: x_out_data_to_stage3_rd__h4445 = 5'd0;
      default: x_out_data_to_stage3_rd__h4445 = stage2_rg_stage2[100:96];
    endcase
  end
  always@(stage2_rg_stage2 or stage2_mbox$word or near_mem$dmem_word64)
  begin
    case (stage2_rg_stage2[103:101])
      3'd0: x_out_data_to_stage3_rd_val__h4446 = stage2_rg_stage2[63:32];
      3'd1, 3'd4:
	  x_out_data_to_stage3_rd_val__h4446 = near_mem$dmem_word64[31:0];
      default: x_out_data_to_stage3_rd_val__h4446 = stage2_mbox$word;
    endcase
  end
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[103:101])
      3'd0, 3'd1, 3'd4: x_out_bypass_rd__h4785 = stage2_rg_stage2[100:96];
      default: x_out_bypass_rd__h4785 = stage2_rg_stage2[100:96];
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_mbox$word or output_stage2___1_bypass_rd_val__h4774)
  begin
    case (stage2_rg_stage2[103:101])
      3'd0: x_out_bypass_rd_val__h4786 = stage2_rg_stage2[63:32];
      3'd1, 3'd4:
	  x_out_bypass_rd_val__h4786 = output_stage2___1_bypass_rd_val__h4774;
      default: x_out_bypass_rd_val__h4786 = stage2_mbox$word;
    endcase
  end
  always@(stage2_rg_stage2 or
	  IF_stage2_rg_stage2_5_BITS_103_TO_101_6_EQ_3_2_ETC___d112 or
	  IF_near_mem_dmem_valid__06_THEN_IF_near_mem_dm_ETC___d109)
  begin
    case (stage2_rg_stage2[103:101])
      3'd0: CASE_stage2_rg_stage2_BITS_103_TO_101_0_2_1_IF_ETC__q1 = 2'd2;
      3'd1, 3'd2, 3'd4:
	  CASE_stage2_rg_stage2_BITS_103_TO_101_0_2_1_IF_ETC__q1 =
	      IF_near_mem_dmem_valid__06_THEN_IF_near_mem_dm_ETC___d109;
      default: CASE_stage2_rg_stage2_BITS_103_TO_101_0_2_1_IF_ETC__q1 =
		   IF_stage2_rg_stage2_5_BITS_103_TO_101_6_EQ_3_2_ETC___d112;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_mbox$valid or near_mem$dmem_valid or near_mem$dmem_exc)
  begin
    case (stage2_rg_stage2[103:101])
      3'd1, 3'd2, 3'd4:
	  IF_stage2_rg_stage2_5_BITS_103_TO_101_6_EQ_1_8_ETC___d129 =
	      !near_mem$dmem_valid || near_mem$dmem_exc;
      default: IF_stage2_rg_stage2_5_BITS_103_TO_101_6_EQ_1_8_ETC___d129 =
		   !stage2_mbox$valid;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_mbox$valid or near_mem$dmem_valid or near_mem$dmem_exc)
  begin
    case (stage2_rg_stage2[103:101])
      3'd1, 3'd2, 3'd4:
	  IF_stage2_rg_stage2_5_BITS_103_TO_101_6_EQ_1_8_ETC___d138 =
	      near_mem$dmem_valid && !near_mem$dmem_exc;
      default: IF_stage2_rg_stage2_5_BITS_103_TO_101_6_EQ_1_8_ETC___d138 =
		   stage2_mbox$valid;
    endcase
  end
  always@(stage2_rg_stage2 or
	  IF_stage2_rg_stage2_5_BITS_103_TO_101_6_EQ_3_2_ETC___d112 or
	  IF_stage2_rg_stage2_5_BITS_100_TO_96_45_EQ_0_6_ETC___d171)
  begin
    case (stage2_rg_stage2[103:101])
      3'd0: CASE_stage2_rg_stage2_BITS_103_TO_101_0_2_1_IF_ETC__q2 = 2'd2;
      3'd1, 3'd4:
	  CASE_stage2_rg_stage2_BITS_103_TO_101_0_2_1_IF_ETC__q2 =
	      IF_stage2_rg_stage2_5_BITS_100_TO_96_45_EQ_0_6_ETC___d171;
      3'd2: CASE_stage2_rg_stage2_BITS_103_TO_101_0_2_1_IF_ETC__q2 = 2'd0;
      default: CASE_stage2_rg_stage2_BITS_103_TO_101_0_2_1_IF_ETC__q2 =
		   IF_stage2_rg_stage2_5_BITS_103_TO_101_6_EQ_3_2_ETC___d112;
    endcase
  end
  always@(rg_cur_priv)
  begin
    case (rg_cur_priv)
      2'b0: CASE_rg_cur_priv_0b0_8_0b1_9_11__q6 = 4'd8;
      2'b01: CASE_rg_cur_priv_0b0_8_0b1_9_11__q6 = 4'd9;
      default: CASE_rg_cur_priv_0b0_8_0b1_9_11__q6 = 4'd11;
    endcase
  end
  always@(_theResult____h3058 or CASE_rg_cur_priv_0b0_8_0b1_9_11__q6)
  begin
    case (_theResult____h3058[31:20])
      12'b0:
	  CASE_theResult__058_BITS_31_TO_20_0b0_CASE_rg__ETC__q7 =
	      CASE_rg_cur_priv_0b0_8_0b1_9_11__q6;
      12'b000000000001:
	  CASE_theResult__058_BITS_31_TO_20_0b0_CASE_rg__ETC__q7 = 4'd3;
      default: CASE_theResult__058_BITS_31_TO_20_0b0_CASE_rg__ETC__q7 = 4'd2;
    endcase
  end
  always@(_theResult____h3058 or alu_outputs___1_exc_code__h11206)
  begin
    case (_theResult____h3058[6:0])
      7'b0000011,
      7'b0001111,
      7'b0010011,
      7'b0010111,
      7'b0100011,
      7'b0110011,
      7'b0110111:
	  alu_outputs_exc_code__h11249 = 4'd2;
      7'b1100011, 7'b1100111, 7'b1101111: alu_outputs_exc_code__h11249 = 4'd0;
      7'b1110011:
	  alu_outputs_exc_code__h11249 = alu_outputs___1_exc_code__h11206;
      default: alu_outputs_exc_code__h11249 = 4'd2;
    endcase
  end
  always@(_theResult____h3058 or
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d521 or
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d517 or
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d519)
  begin
    case (_theResult____h3058[14:12])
      3'b0:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d622 =
	      !IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d517;
      3'b001:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d622 =
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d517;
      3'b100:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d622 =
	      !IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d519;
      3'b101:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d622 =
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d519;
      3'b110:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d622 =
	      !IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d521;
      default: IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d622 =
		   _theResult____h3058[14:12] != 3'b111 ||
		   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d521;
    endcase
  end
  always@(_theResult____h3058 or
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d521 or
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d517 or
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d519)
  begin
    case (_theResult____h3058[14:12])
      3'b0:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d528 =
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d517;
      3'b001:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d528 =
	      !IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d517;
      3'b100:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d528 =
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d519;
      3'b101:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d528 =
	      !IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d519;
      3'b110:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d528 =
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d521;
      default: IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d528 =
		   _theResult____h3058[14:12] == 3'b111 &&
		   !IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d521;
    endcase
  end
  always@(_theResult____h3058)
  begin
    case (_theResult____h3058[6:0])
      7'b0000011:
	  CASE_theResult__058_BITS_6_TO_0_0b11_NOT_theRe_ETC__q9 =
	      _theResult____h3058[14:12] != 3'b0 &&
	      _theResult____h3058[14:12] != 3'b100 &&
	      _theResult____h3058[14:12] != 3'b001 &&
	      _theResult____h3058[14:12] != 3'b101 &&
	      _theResult____h3058[14:12] != 3'b010;
      7'b0100011:
	  CASE_theResult__058_BITS_6_TO_0_0b11_NOT_theRe_ETC__q9 =
	      _theResult____h3058[14:12] != 3'b0 &&
	      _theResult____h3058[14:12] != 3'b001 &&
	      _theResult____h3058[14:12] != 3'b010;
      default: CASE_theResult__058_BITS_6_TO_0_0b11_NOT_theRe_ETC__q9 =
		   _theResult____h3058[6:0] != 7'b0101111 ||
		   _theResult____h3058[31:27] != 5'b00010 &&
		   _theResult____h3058[31:27] != 5'b00011 &&
		   _theResult____h3058[31:27] != 5'b0 &&
		   _theResult____h3058[31:27] != 5'b00001 &&
		   _theResult____h3058[31:27] != 5'b01100 &&
		   _theResult____h3058[31:27] != 5'b01000 &&
		   _theResult____h3058[31:27] != 5'b00100 &&
		   _theResult____h3058[31:27] != 5'b10000 &&
		   _theResult____h3058[31:27] != 5'b11000 &&
		   _theResult____h3058[31:27] != 5'b10100 &&
		   _theResult____h3058[31:27] != 5'b11100 ||
		   _theResult____h3058[14:12] != 3'b010;
    endcase
  end
  always@(_theResult____h3058 or
	  CASE_theResult__058_BITS_6_TO_0_0b11_NOT_theRe_ETC__q9 or
	  NOT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_ETC___d558)
  begin
    case (_theResult____h3058[6:0])
      7'b0010011, 7'b0110011:
	  CASE_theResult__058_BITS_6_TO_0_0b10011_NOT_IF_ETC__q10 =
	      NOT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_ETC___d558;
      default: CASE_theResult__058_BITS_6_TO_0_0b10011_NOT_IF_ETC__q10 =
		   _theResult____h3058[6:0] != 7'b0110111 &&
		   _theResult____h3058[6:0] != 7'b0010111 &&
		   CASE_theResult__058_BITS_6_TO_0_0b11_NOT_theRe_ETC__q9;
    endcase
  end
  always@(_theResult____h3058)
  begin
    case (_theResult____h3058[6:0])
      7'b0000011:
	  CASE_theResult__058_BITS_6_TO_0_0b11_theResult_ETC__q11 =
	      _theResult____h3058[14:12] == 3'b0 ||
	      _theResult____h3058[14:12] == 3'b100 ||
	      _theResult____h3058[14:12] == 3'b001 ||
	      _theResult____h3058[14:12] == 3'b101 ||
	      _theResult____h3058[14:12] == 3'b010;
      7'b0100011:
	  CASE_theResult__058_BITS_6_TO_0_0b11_theResult_ETC__q11 =
	      _theResult____h3058[14:12] == 3'b0 ||
	      _theResult____h3058[14:12] == 3'b001 ||
	      _theResult____h3058[14:12] == 3'b010;
      default: CASE_theResult__058_BITS_6_TO_0_0b11_theResult_ETC__q11 =
		   _theResult____h3058[6:0] == 7'b0101111 &&
		   (_theResult____h3058[31:27] == 5'b00010 ||
		    _theResult____h3058[31:27] == 5'b00011 ||
		    _theResult____h3058[31:27] == 5'b0 ||
		    _theResult____h3058[31:27] == 5'b00001 ||
		    _theResult____h3058[31:27] == 5'b01100 ||
		    _theResult____h3058[31:27] == 5'b01000 ||
		    _theResult____h3058[31:27] == 5'b00100 ||
		    _theResult____h3058[31:27] == 5'b10000 ||
		    _theResult____h3058[31:27] == 5'b11000 ||
		    _theResult____h3058[31:27] == 5'b10100 ||
		    _theResult____h3058[31:27] == 5'b11100) &&
		   _theResult____h3058[14:12] == 3'b010;
    endcase
  end
  always@(_theResult____h3058 or
	  CASE_theResult__058_BITS_6_TO_0_0b11_theResult_ETC__q11 or
	  IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_ETC___d647)
  begin
    case (_theResult____h3058[6:0])
      7'b0010011, 7'b0110011:
	  CASE_theResult__058_BITS_6_TO_0_0b10011_IF_NOT_ETC__q12 =
	      IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_ETC___d647;
      default: CASE_theResult__058_BITS_6_TO_0_0b10011_IF_NOT_ETC__q12 =
		   _theResult____h3058[6:0] == 7'b0110111 ||
		   _theResult____h3058[6:0] == 7'b0010111 ||
		   CASE_theResult__058_BITS_6_TO_0_0b11_theResult_ETC__q11;
    endcase
  end
  always@(_theResult____h3058 or
	  rg_cur_priv or
	  IF_rg_cur_priv_0_EQ_0b11_98_OR_rg_cur_priv_0_E_ETC___d717)
  begin
    case (_theResult____h3058[31:20])
      12'b0, 12'b000000000001:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d719 = 4'd11;
      default: IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d719 =
		   (rg_cur_priv == 2'b11 &&
		    _theResult____h3058[31:20] == 12'b001100000010) ?
		     4'd7 :
		     IF_rg_cur_priv_0_EQ_0b11_98_OR_rg_cur_priv_0_E_ETC___d717;
    endcase
  end
  always@(_theResult____h3058)
  begin
    case (_theResult____h3058[14:12])
      3'b0: CASE_theResult__058_BITS_14_TO_12_0b0_4_0b1_5_11__q13 = 4'd4;
      3'b001: CASE_theResult__058_BITS_14_TO_12_0b0_4_0b1_5_11__q13 = 4'd5;
      default: CASE_theResult__058_BITS_14_TO_12_0b0_4_0b1_5_11__q13 = 4'd11;
    endcase
  end
  always@(_theResult____h3058 or
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d719)
  begin
    case (_theResult____h3058[14:12])
      3'b0:
	  CASE_theResult__058_BITS_14_TO_12_0b0_IF_theRe_ETC__q14 =
	      (_theResult____h3058[11:7] == 5'd0 &&
	       _theResult____h3058[19:15] == 5'd0) ?
		IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d719 :
		4'd11;
      3'b001, 3'b101:
	  CASE_theResult__058_BITS_14_TO_12_0b0_IF_theRe_ETC__q14 = 4'd2;
      3'b010, 3'b011, 3'b110, 3'b111:
	  CASE_theResult__058_BITS_14_TO_12_0b0_IF_theRe_ETC__q14 = 4'd3;
      3'd4: CASE_theResult__058_BITS_14_TO_12_0b0_IF_theRe_ETC__q14 = 4'd11;
    endcase
  end
  always@(_theResult____h3058 or
	  CASE_theResult__058_BITS_14_TO_12_0b0_4_0b1_5_11__q13 or
	  IF_NOT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_P_ETC___d684 or
	  CASE_theResult__058_BITS_14_TO_12_0b0_IF_theRe_ETC__q14)
  begin
    case (_theResult____h3058[6:0])
      7'b0000011:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d734 =
	      (_theResult____h3058[14:12] != 3'b0 &&
	       _theResult____h3058[14:12] != 3'b100 &&
	       _theResult____h3058[14:12] != 3'b001 &&
	       _theResult____h3058[14:12] != 3'b101 &&
	       _theResult____h3058[14:12] != 3'b010) ?
		4'd11 :
		4'd0;
      7'b0001111:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d734 =
	      CASE_theResult__058_BITS_14_TO_12_0b0_4_0b1_5_11__q13;
      7'b0010011, 7'b0110011:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d734 =
	      IF_NOT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_P_ETC___d684;
      7'b0010111, 7'b0110111:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d734 = 4'd0;
      7'b0100011:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d734 =
	      (_theResult____h3058[14:12] != 3'b0 &&
	       _theResult____h3058[14:12] != 3'b001 &&
	       _theResult____h3058[14:12] != 3'b010) ?
		4'd11 :
		4'd0;
      7'b0101111:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d734 =
	      ((_theResult____h3058[31:27] == 5'b00010 ||
		_theResult____h3058[31:27] == 5'b00011 ||
		_theResult____h3058[31:27] == 5'b0 ||
		_theResult____h3058[31:27] == 5'b00001 ||
		_theResult____h3058[31:27] == 5'b01100 ||
		_theResult____h3058[31:27] == 5'b01000 ||
		_theResult____h3058[31:27] == 5'b00100 ||
		_theResult____h3058[31:27] == 5'b10000 ||
		_theResult____h3058[31:27] == 5'b11000 ||
		_theResult____h3058[31:27] == 5'b10100 ||
		_theResult____h3058[31:27] == 5'b11100) &&
	       _theResult____h3058[14:12] == 3'b010) ?
		4'd0 :
		4'd11;
      7'b1110011:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d734 =
	      CASE_theResult__058_BITS_14_TO_12_0b0_IF_theRe_ETC__q14;
      default: IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d734 =
		   4'd11;
    endcase
  end
  always@(_theResult____h3058 or
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d734 or
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d528)
  begin
    case (_theResult____h3058[6:0])
      7'b1100011:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d738 =
	      (_theResult____h3058[14:12] != 3'b0 &&
	       _theResult____h3058[14:12] != 3'b001 &&
	       _theResult____h3058[14:12] != 3'b100 &&
	       _theResult____h3058[14:12] != 3'b101 &&
	       _theResult____h3058[14:12] != 3'b110 &&
	       _theResult____h3058[14:12] != 3'b111) ?
		4'd11 :
		(IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d528 ?
		   4'd1 :
		   4'd0);
      7'b1100111, 7'b1101111:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d738 = 4'd1;
      default: IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d738 =
		   (_theResult____h3058[6:0] == 7'b0110011 &&
		    _theResult____h3058[31:25] == 7'b0000001) ?
		     4'd0 :
		     (((_theResult____h3058[6:0] == 7'b0010011 ||
			_theResult____h3058[6:0] == 7'b0110011) &&
		       (_theResult____h3058[14:12] == 3'b001 ||
			_theResult____h3058[14:12] == 3'b101)) ?
			(_theResult____h3058[25] ? 4'd11 : 4'd0) :
			IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d734);
    endcase
  end
  always@(_theResult____h3058)
  begin
    case (_theResult____h3058[6:0])
      7'b0000011:
	  CASE_theResult__058_BITS_6_TO_0_0b11_1_0b10011_ETC__q15 = 3'd1;
      7'b0010011, 7'b0010111, 7'b0110011, 7'b0110111:
	  CASE_theResult__058_BITS_6_TO_0_0b11_1_0b10011_ETC__q15 = 3'd0;
      7'b0100011:
	  CASE_theResult__058_BITS_6_TO_0_0b11_1_0b10011_ETC__q15 = 3'd2;
      default: CASE_theResult__058_BITS_6_TO_0_0b11_1_0b10011_ETC__q15 = 3'd4;
    endcase
  end
  always@(_theResult____h3058 or
	  CASE_theResult__058_BITS_6_TO_0_0b11_1_0b10011_ETC__q15)
  begin
    case (_theResult____h3058[6:0])
      7'b1100011, 7'b1100111, 7'b1101111:
	  IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d819 = 3'd0;
      default: IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d819 =
		   (_theResult____h3058[6:0] == 7'b0110011 &&
		    _theResult____h3058[31:25] == 7'b0000001) ?
		     3'd3 :
		     CASE_theResult__058_BITS_6_TO_0_0b11_1_0b10011_ETC__q15;
    endcase
  end
  always@(_theResult____h3058 or
	  _theResult_____1_fst__h11721 or
	  rd_val___1__h11689 or
	  rd_val___1__h11696 or rd_val___1__h11703 or rd_val___1__h11710)
  begin
    case (_theResult____h3058[14:12])
      3'b010: _theResult_____1_fst__h11693 = rd_val___1__h11689;
      3'b011: _theResult_____1_fst__h11693 = rd_val___1__h11696;
      3'b100: _theResult_____1_fst__h11693 = rd_val___1__h11703;
      3'b110: _theResult_____1_fst__h11693 = rd_val___1__h11710;
      default: _theResult_____1_fst__h11693 = _theResult_____1_fst__h11721;
    endcase
  end
  always@(_theResult____h3058 or
	  rs1_val_bypassed__h3066 or
	  alu_outputs___1_addr__h10950 or
	  alu_outputs___1_addr__h10970 or
	  alu_outputs___1_addr__h10708 or
	  alu_outputs___1_addr__h10756 or alu_outputs___1_addr__h10730)
  begin
    case (_theResult____h3058[6:0])
      7'b0000011:
	  x_out_data_to_stage2_addr__h10586 = alu_outputs___1_addr__h10950;
      7'b0100011:
	  x_out_data_to_stage2_addr__h10586 = alu_outputs___1_addr__h10970;
      7'b1100011:
	  x_out_data_to_stage2_addr__h10586 = alu_outputs___1_addr__h10708;
      7'b1100111:
	  x_out_data_to_stage2_addr__h10586 = alu_outputs___1_addr__h10756;
      7'b1101111:
	  x_out_data_to_stage2_addr__h10586 = alu_outputs___1_addr__h10730;
      default: x_out_data_to_stage2_addr__h10586 = rs1_val_bypassed__h3066;
    endcase
  end
  always@(_theResult____h3058 or imem_rg_pc or data_to_stage2_addr__h10578)
  begin
    case (_theResult____h3058[6:0])
      7'b1100011, 7'b1100111, 7'b1101111:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1013 =
	      data_to_stage2_addr__h10578;
      default: IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1013 =
		   (_theResult____h3058[6:0] == 7'b1110011 &&
		    _theResult____h3058[14:12] == 3'b0 &&
		    _theResult____h3058[11:7] == 5'd0 &&
		    _theResult____h3058[19:15] == 5'd0 &&
		    _theResult____h3058[31:20] == 12'b000000000001) ?
		     imem_rg_pc :
		     32'd0;
    endcase
  end
  always@(_theResult____h3058 or
	  alu_outputs___1_val1__h11231 or
	  alu_outputs___1_val1__h10898 or
	  alu_outputs___1_val1__h10930 or
	  alu_outputs___1_val1__h10914 or alu_outputs___1_val1__h11210)
  begin
    case (_theResult____h3058[6:0])
      7'b0010011, 7'b0110011:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d932 =
	      alu_outputs___1_val1__h10898;
      7'b0010111:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d932 =
	      alu_outputs___1_val1__h10930;
      7'b0110111:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d932 =
	      alu_outputs___1_val1__h10914;
      7'b1110011:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d932 =
	      alu_outputs___1_val1__h11210;
      default: IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d932 =
		   alu_outputs___1_val1__h11231;
    endcase
  end
  always@(_theResult____h3058 or
	  rs1_val_bypassed__h3066 or
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d933 or
	  IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_ETC___d863)
  begin
    case (_theResult____h3058[6:0])
      7'b1100111, 7'b1101111:
	  x_out_data_to_stage2_val1__h10587 =
	      IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_ETC___d863;
      default: x_out_data_to_stage2_val1__h10587 =
		   (_theResult____h3058[6:0] == 7'b0110011 &&
		    _theResult____h3058[31:25] == 7'b0000001) ?
		     rs1_val_bypassed__h3066 :
		     IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d933;
    endcase
  end
  always@(x_out_data_to_stage2_instr__h10583 or
	  x_out_data_to_stage2_val1__h10587)
  begin
    case (x_out_data_to_stage2_instr__h10583[14:12])
      3'b010, 3'b011: rs1_val__h16741 = x_out_data_to_stage2_val1__h10587;
      default: rs1_val__h16741 =
		   { 27'd0, x_out_data_to_stage2_instr__h10583[19:15] };
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_logdelay <= `BSV_ASSIGNMENT_DELAY 64'd0;
	cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	rg_halt <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 4'd0;
	stage1_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stage2_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stage3_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (cfg_logdelay$EN)
	  cfg_logdelay <= `BSV_ASSIGNMENT_DELAY cfg_logdelay$D_IN;
	if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (rg_halt$EN) rg_halt <= `BSV_ASSIGNMENT_DELAY rg_halt$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
	if (stage1_rg_full$EN)
	  stage1_rg_full <= `BSV_ASSIGNMENT_DELAY stage1_rg_full$D_IN;
	if (stage2_rg_full$EN)
	  stage2_rg_full <= `BSV_ASSIGNMENT_DELAY stage2_rg_full$D_IN;
	if (stage3_rg_full$EN)
	  stage3_rg_full <= `BSV_ASSIGNMENT_DELAY stage3_rg_full$D_IN;
      end
    if (imem_rg_f3$EN) imem_rg_f3 <= `BSV_ASSIGNMENT_DELAY imem_rg_f3$D_IN;
    if (imem_rg_instr_15_0$EN)
      imem_rg_instr_15_0 <= `BSV_ASSIGNMENT_DELAY imem_rg_instr_15_0$D_IN;
    if (imem_rg_mstatus_MXR$EN)
      imem_rg_mstatus_MXR <= `BSV_ASSIGNMENT_DELAY imem_rg_mstatus_MXR$D_IN;
    if (imem_rg_pc$EN) imem_rg_pc <= `BSV_ASSIGNMENT_DELAY imem_rg_pc$D_IN;
    if (imem_rg_priv$EN)
      imem_rg_priv <= `BSV_ASSIGNMENT_DELAY imem_rg_priv$D_IN;
    if (imem_rg_satp$EN)
      imem_rg_satp <= `BSV_ASSIGNMENT_DELAY imem_rg_satp$D_IN;
    if (imem_rg_sstatus_SUM$EN)
      imem_rg_sstatus_SUM <= `BSV_ASSIGNMENT_DELAY imem_rg_sstatus_SUM$D_IN;
    if (rg_cur_priv$EN) rg_cur_priv <= `BSV_ASSIGNMENT_DELAY rg_cur_priv$D_IN;
    if (rg_next_pc$EN) rg_next_pc <= `BSV_ASSIGNMENT_DELAY rg_next_pc$D_IN;
    if (rg_start_CPI_cycles$EN)
      rg_start_CPI_cycles <= `BSV_ASSIGNMENT_DELAY rg_start_CPI_cycles$D_IN;
    if (rg_start_CPI_instrs$EN)
      rg_start_CPI_instrs <= `BSV_ASSIGNMENT_DELAY rg_start_CPI_instrs$D_IN;
    if (stage2_rg_stage2$EN)
      stage2_rg_stage2 <= `BSV_ASSIGNMENT_DELAY stage2_rg_stage2$D_IN;
    if (stage3_rg_stage3$EN)
      stage3_rg_stage3 <= `BSV_ASSIGNMENT_DELAY stage3_rg_stage3$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_logdelay = 64'hAAAAAAAAAAAAAAAA;
    cfg_verbosity = 4'hA;
    imem_rg_f3 = 3'h2;
    imem_rg_instr_15_0 = 16'hAAAA;
    imem_rg_mstatus_MXR = 1'h0;
    imem_rg_pc = 32'hAAAAAAAA;
    imem_rg_priv = 2'h2;
    imem_rg_satp = 32'hAAAAAAAA;
    imem_rg_sstatus_SUM = 1'h0;
    rg_cur_priv = 2'h2;
    rg_halt = 1'h0;
    rg_next_pc = 32'hAAAAAAAA;
    rg_start_CPI_cycles = 64'hAAAAAAAAAAAAAAAA;
    rg_start_CPI_instrs = 64'hAAAAAAAAAAAAAAAA;
    rg_state = 4'hA;
    stage1_rg_full = 1'h0;
    stage2_rg_full = 1'h0;
    stage2_rg_stage2 = 170'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    stage3_rg_full = 1'h0;
    stage3_rg_stage3 = 104'hAAAAAAAAAAAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("%0d: Pipeline State:  minstret:%0d  cur_priv:%0d  mstatus:%0x",
		 csr_regfile$read_csr_mcycle,
		 csr_regfile$read_csr_minstret,
		 rg_cur_priv,
		 csr_regfile$read_mstatus);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write("MStatus{",
	       "sd:%0d",
	       csr_regfile$read_mstatus[14:13] == 2'h3 ||
	       csr_regfile$read_mstatus[16:15] == 2'h3);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && csr_regfile$read_misa[27:26] == 2'd2)
	$write(" sxl:%0d uxl:%0d", 2'd0, 2'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && csr_regfile$read_misa[27:26] != 2'd2)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" tsr:%0d", csr_regfile$read_mstatus[22]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" tw:%0d", csr_regfile$read_mstatus[21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" tvm:%0d", csr_regfile$read_mstatus[20]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" mxr:%0d", csr_regfile$read_mstatus[19]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" sum:%0d", csr_regfile$read_mstatus[18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" mprv:%0d", csr_regfile$read_mstatus[17]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" xs:%0d", csr_regfile$read_mstatus[16:15]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" fs:%0d", csr_regfile$read_mstatus[14:13]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" mpp:%0d", csr_regfile$read_mstatus[12:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" spp:%0d", csr_regfile$read_mstatus[8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" pies:%0d_%0d%0d",
	       csr_regfile$read_mstatus[7],
	       csr_regfile$read_mstatus[5],
	       csr_regfile$read_mstatus[4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" ies:%0d_%0d%0d",
	       csr_regfile$read_mstatus[3],
	       csr_regfile$read_mstatus[1],
	       csr_regfile$read_mstatus[0]);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("    Stage3: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Output_Stage3");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage3_rg_full) $write(" PIPE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage3_rg_full) $write(" EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        Bypass to Stage1: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Bypass {");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  (!stage3_rg_full || !stage3_rg_stage3[37]))
	$write("Rd -");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage3_rg_full && stage3_rg_stage3[37])
	$write("Rd %0d ",
	       stage3_rg_stage3[36:32],
	       "rd_val:%h",
	       stage3_rg_stage3[31:0]);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("    Stage2: pc 0x%08h instr 0x%08h priv %0d",
		 stage2_rg_stage2[167:136],
		 stage2_rg_stage2[135:104],
		 stage2_rg_stage2[169:168]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd0)
	$write("Output_Stage2", " EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd1)
	$write("Output_Stage2", " BUSY: pc:%0h", stage2_rg_stage2[167:136]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd3)
	$write("Output_Stage2", " NONPIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd0 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd1 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd3)
	$write("Output_Stage2", " PIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd0 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd1 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd3)
	$write("data_to_Stage3 {pc:%h  instr:%h  priv:%0d\n",
	       stage2_rg_stage2[167:136],
	       stage2_rg_stage2[135:104],
	       stage2_rg_stage2[169:168]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd0 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd1 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd3)
	$write("        rd_valid:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd0 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd1 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd3 &&
	  stage2_rg_stage2[103:101] != 3'd0 &&
	  IF_stage2_rg_stage2_5_BITS_103_TO_101_6_EQ_1_8_ETC___d129)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd0 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd1 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd3 &&
	  (stage2_rg_stage2[103:101] == 3'd0 ||
	   IF_stage2_rg_stage2_5_BITS_103_TO_101_6_EQ_1_8_ETC___d138))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd0 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd1 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd3)
	$write("  grd:%0d  rd_val:%h\n",
	       x_out_data_to_stage3_rd__h4445,
	       x_out_data_to_stage3_rd_val__h4446);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd3)
	$write("Trap_Info { ", "epc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd0 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd1 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd3)
	$write("'h%h", stage2_rg_stage2[167:136]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd0 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd1 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd3)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd0 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd1 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd3)
	$write("'h%h", near_mem$dmem_exc_code);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd0 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd1 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd3)
	$write(", ", "tval: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd0 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd1 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd3)
	$write("'h%h", stage2_rg_stage2[95:64], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd0 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd1 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd3)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd0 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd1 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd3)
	$write("Trap_Info { ", "epc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd0 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd1 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd3)
	$write("'h%h", stage2_rg_stage2[167:136]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd0 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd1 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd3)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd0 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd1 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd3)
	$write("'h%h", near_mem$dmem_exc_code);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd0 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd1 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd3)
	$write(", ", "tval: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd0 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd1 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd3)
	$write("'h%h", stage2_rg_stage2[95:64], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd0 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd1 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        Bypass to Stage1: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Bypass {");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d175 == 2'd0)
	$write("Rd -");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d175 != 2'd0)
	$write("Rd %0d ", x_out_bypass_rd__h4785);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d175 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d175 == 2'd1)
	$write("-");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d175 != 2'd0 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d175 != 2'd1)
	$write("rd_val:%h", x_out_bypass_rd_val__h4786);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("    Stage1: pc 0x%08h instr 0x%08h priv %0d",
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h10583,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_90_OR_NOT_near_mem_ime_ETC___d463)
	$write("Output_Stage1", " BUSY pc:%h", imem_rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d630)
	$write("Output_Stage1", " NONPIPE: pc:%h", imem_rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d679)
	$write("Output_Stage1");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full)
	$write("Output_Stage1", " EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_90_OR_NOT_near_mem_ime_ETC___d463)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d630)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d679)
	$write(" PIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_90_OR_NOT_near_mem_ime_ETC___d463)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d630)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d478 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d674 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d676) &&
	  IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 == 4'd0)
	$write("CONTROL_STRAIGHT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d478 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d674 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d676) &&
	  IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 == 4'd1)
	$write("CONTROL_BRANCH");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d478 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d674 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d676) &&
	  IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 == 4'd2)
	$write("CONTROL_CSRR_W");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d478 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d674 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d676) &&
	  IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 == 4'd3)
	$write("CONTROL_CSRR_S_or_C");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d478 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d674 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d676) &&
	  IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 == 4'd4)
	$write("CONTROL_FENCE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d478 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d674 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d676) &&
	  IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 == 4'd5)
	$write("CONTROL_FENCE_I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d478 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d674 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d676) &&
	  IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 == 4'd6)
	$write("CONTROL_SFENCE_VMA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d478 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d674 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d676) &&
	  IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 == 4'd7)
	$write("CONTROL_MRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d478 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d674 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d676) &&
	  IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 == 4'd8)
	$write("CONTROL_SRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d478 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d674 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d676) &&
	  IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 == 4'd9)
	$write("CONTROL_URET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d478 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d674 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d676) &&
	  IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d740 == 4'd10)
	$write("CONTROL_WFI");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d478 &&
	  NOT_near_mem_imem_exc__79_32_AND_IF_IF_NOT_nea_ETC___d806)
	$write("CONTROL_TRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_90_OR_NOT_near_mem_ime_ETC___d463)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d630)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d679)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_90_OR_NOT_near_mem_ime_ETC___d463)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d630)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d679)
	$write("data_to_Stage 2 {pc:%h  instr:%h  priv:%0d\n",
	       imem_rg_pc,
	       x_out_data_to_stage2_instr__h10583,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_90_OR_NOT_near_mem_ime_ETC___d463)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d630)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d679)
	$write("            op_stage2:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_90_OR_NOT_near_mem_ime_ETC___d463)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d630)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d478 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d674 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d676) &&
	  IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d819 == 3'd0)
	$write("OP_Stage2_ALU");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d478 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d674 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d676) &&
	  IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d819 == 3'd1)
	$write("OP_Stage2_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d478 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d674 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d676) &&
	  IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d819 == 3'd2)
	$write("OP_Stage2_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d478 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d674 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d676) &&
	  IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d819 == 3'd3)
	$write("OP_Stage2_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d478 &&
	  NOT_near_mem_imem_exc__79_32_AND_IF_IF_NOT_nea_ETC___d843)
	$write("OP_Stage2_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_90_OR_NOT_near_mem_ime_ETC___d463)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d630)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d679)
	$write("  rd:%0d\n", x_out_data_to_stage2_rd__h10585);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_90_OR_NOT_near_mem_ime_ETC___d463)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d630)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d679)
	$write("            addr:%h  val1:%h  val2:%h}",
	       x_out_data_to_stage2_addr__h10586,
	       x_out_data_to_stage2_val1__h10587,
	       x_out_data_to_stage2_val2__h10588);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_90_OR_NOT_near_mem_ime_ETC___d463)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d630)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d679)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_90_OR_NOT_near_mem_ime_ETC___d463)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d478 &&
	  near_mem_imem_exc__79_OR_IF_IF_NOT_near_mem_im_ETC___d945)
	$write("CONTROL_STRAIGHT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d478 &&
	  near_mem_imem_exc__79_OR_IF_IF_NOT_near_mem_im_ETC___d948)
	$write("CONTROL_BRANCH");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d478 &&
	  near_mem_imem_exc__79_OR_IF_IF_NOT_near_mem_im_ETC___d951)
	$write("CONTROL_CSRR_W");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d478 &&
	  near_mem_imem_exc__79_OR_IF_IF_NOT_near_mem_im_ETC___d954)
	$write("CONTROL_CSRR_S_or_C");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d478 &&
	  near_mem_imem_exc__79_OR_IF_IF_NOT_near_mem_im_ETC___d957)
	$write("CONTROL_FENCE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d478 &&
	  near_mem_imem_exc__79_OR_IF_IF_NOT_near_mem_im_ETC___d960)
	$write("CONTROL_FENCE_I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d478 &&
	  near_mem_imem_exc__79_OR_IF_IF_NOT_near_mem_im_ETC___d963)
	$write("CONTROL_SFENCE_VMA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d478 &&
	  near_mem_imem_exc__79_OR_IF_IF_NOT_near_mem_im_ETC___d966)
	$write("CONTROL_MRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d478 &&
	  near_mem_imem_exc__79_OR_IF_IF_NOT_near_mem_im_ETC___d969)
	$write("CONTROL_SRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d478 &&
	  near_mem_imem_exc__79_OR_IF_IF_NOT_near_mem_im_ETC___d972)
	$write("CONTROL_URET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d478 &&
	  near_mem_imem_exc__79_OR_IF_IF_NOT_near_mem_im_ETC___d975)
	$write("CONTROL_WFI");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d478 &&
	  near_mem_imem_exc__79_OR_IF_IF_NOT_near_mem_im_ETC___d978)
	$write("CONTROL_TRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d679)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_90_OR_NOT_near_mem_ime_ETC___d463)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d630)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d679)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_90_OR_NOT_near_mem_ime_ETC___d463)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d630)
	$write("Trap_Info { ", "epc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d679)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_90_OR_NOT_near_mem_ime_ETC___d463)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d630)
	$write("'h%h", imem_rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d679)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_90_OR_NOT_near_mem_ime_ETC___d463)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d630)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d679)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_90_OR_NOT_near_mem_ime_ETC___d463)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d630)
	$write("'h%h", x_out_trap_info_exc_code__h12201);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d679)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_90_OR_NOT_near_mem_ime_ETC___d463)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d630)
	$write(", ", "tval: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d679)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_90_OR_NOT_near_mem_ime_ETC___d463)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d630)
	$write("'h%h", value__h12250, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d679)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_90_OR_NOT_near_mem_ime_ETC___d463)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d478)
	$write(" next_pc 0x%08h", x_out_next_pc__h10555);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $display("----------------");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && cur_verbosity__h1892 != 4'd0)
	$display("%0d: CPU.reset_complete", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("    CPU_Stage_1.enq: 0x%08x", pc_reset_value[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && cur_verbosity__h1892 != 4'd0)
	$display("    fa_restart: RUNNING with PC = 0x%0h",
		 pc_reset_value[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage2_nonpipe &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("%0d: CPU.rl_stage2_nonpipe", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage2_nonpipe &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("    CPU_Stage_1.enq: 0x%08x",
		 csr_regfile$csr_trap_actions[97:66]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage2_nonpipe && cur_verbosity__h1892 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 stage2_rg_stage2[167:136],
		 stage2_rg_stage2[135:104],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage2_nonpipe && cur_verbosity__h1892 != 4'd0)
	$display("    mcause:0x%0h  epc 0x%0h  tval:0x%0h  new pc 0x%0h, new mstatus 0x%0h",
		 csr_regfile$csr_trap_actions[33:2],
		 stage2_rg_stage2[167:136],
		 stage2_rg_stage2[95:64],
		 csr_regfile$csr_trap_actions[97:66],
		 csr_regfile$csr_trap_actions[65:34]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("%0d:  CPU.rl_stage1_CSRR_W", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W && csr_regfile$access_permitted_1 &&
	  cur_verbosity__h1892 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h10583,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W && csr_regfile$access_permitted_1 &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("    S1: write CSRRW/CSRRWI Rs1 %0d Rs1_val 0x%0h csr 0x%0h csr_val 0x%0h Rd %0d",
		 x_out_data_to_stage2_instr__h10583[19:15],
		 rs1_val__h16251,
		 x_out_data_to_stage2_instr__h10583[31:20],
		 csr_regfile$read_csr[31:0],
		 x_out_data_to_stage2_instr__h10583[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W && !csr_regfile$access_permitted_1 &&
	  cur_verbosity__h1892 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h10583,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W && !csr_regfile$access_permitted_1 &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("    rl_stage1_CSRR_W: Trap on CSR permissions: Rs1 %0d Rs1_val 0x%0h csr 0x%0h Rd %0d",
		 x_out_data_to_stage2_instr__h10583[19:15],
		 rs1_val__h16251,
		 x_out_data_to_stage2_instr__h10583[31:20],
		 x_out_data_to_stage2_instr__h10583[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("%0d:  CPU.rl_stage1_CSRR_S_or_C",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	  csr_regfile$access_permitted_2 &&
	  cur_verbosity__h1892 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h10583,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	  csr_regfile$access_permitted_2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("    S1: write CSRR_S_or_C: Rs1 %0d Rs1_val 0x%0h csr 0x%0h csr_val 0x%0h Rd %0d",
		 x_out_data_to_stage2_instr__h10583[19:15],
		 rs1_val__h16741,
		 x_out_data_to_stage2_instr__h10583[31:20],
		 csr_regfile$read_csr[31:0],
		 x_out_data_to_stage2_instr__h10583[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	  !csr_regfile$access_permitted_2 &&
	  cur_verbosity__h1892 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h10583,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	  !csr_regfile$access_permitted_2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("    rl_stage1_CSRR_S_or_C: Trap on CSR permissions: Rs1 %0d Rs1_val 0x%0h csr 0x%0h Rd %0d",
		 x_out_data_to_stage2_instr__h10583[19:15],
		 rs1_val__h16741,
		 x_out_data_to_stage2_instr__h10583[31:20],
		 x_out_data_to_stage2_instr__h10583[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("    CPU_Stage_1.enq: 0x%08x", x_out_next_pc__h10555);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("%0d: rl_stage1_restart_after_csrrx: minstret:%0d  pc:%0x  cur_priv:%0d",
		 csr_regfile$read_csr_mcycle,
		 csr_regfile$read_csr_minstret,
		 x_out_next_pc__h10555,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("%0d:  CPU.rl_stage1_xRET", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("    CPU_Stage_1.enq: 0x%08x",
		 csr_regfile$csr_ret_actions[65:34]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET && cur_verbosity__h1892 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h10583,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET && cur_verbosity__h1892 != 4'd0)
	$display("    xRET: next_pc:0x%0h  new mstatus:0x%0h  new priv:%0d",
		 csr_regfile$csr_ret_actions[65:34],
		 csr_regfile$csr_ret_actions[31:0],
		 csr_regfile$csr_ret_actions[33:32]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("%0d:  CPU.rl_stage1_FENCE_I", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE_I && cur_verbosity__h1892 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h10583,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("%0d: CPU.rl_stage1_FENCE_I", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("%0d:  CPU.rl_finish_FENCE_I", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("    CPU_Stage_1.enq: 0x%08x", rg_next_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("    CPU.rl_finish_FENCE_I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("%0d:  CPU.rl_stage1_FENCE", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE && cur_verbosity__h1892 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h10583,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("%0d: CPU.rl_stage1_FENCE", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("%0d:  CPU.rl_finish_FENCE", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("    CPU_Stage_1.enq: 0x%08x", rg_next_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("    CPU.rl_finish_FENCE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("%0d:  CPU.rl_stage1_SFENCE_VMA",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_SFENCE_VMA && cur_verbosity__h1892 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h10583,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("%0d: CPU.rl_stage1_SFENCE_VMA",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("%0d:  CPU.rl_finish_SFENCE_VMA",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("    CPU_Stage_1.enq: 0x%08x", rg_next_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("    CPU.rl_finish_SFENCE_VMA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_WFI &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("%0d:  CPU.rl_stage1_WFI", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_WFI && cur_verbosity__h1892 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h10583,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_WFI &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("    CPU.rl_stage1_WFI: minstret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h10583,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("%0d:  CPU.rl_WFI_resume", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume && cur_verbosity__h1892 != 4'd0)
	$display("    WFI resume");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("    CPU_Stage_1.enq: 0x%08x", rg_next_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_from_WFI &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("%0d:  CPU.rl_reset_from_WFI", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("%0d:  CPU.rl_stage1_trap", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("    CPU_Stage_1.enq: 0x%08x",
		 csr_regfile$csr_trap_actions[97:66]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d1244)
	$display("%0d: CPU.rl_stage1_trap: Tight infinite trap loop: pc 0x%0x instr 0x%08x",
		 csr_regfile$read_csr_mcycle,
		 csr_regfile$csr_trap_actions[97:66],
		 x_out_data_to_stage2_instr__h10583);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d1244)
	$display("CPI: %0d.%0d = (%0d/%0d) since last 'continue'",
		 cpi__h21391,
		 cpifrac__h21392,
		 delta_CPI_cycles__h21387,
		 _theResult____h21389);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_88_89_OR_NOT_near_mem_im_ETC___d1244)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap && cur_verbosity__h1892 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h10583,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap && cur_verbosity__h1892 != 4'd0)
	$display("%0d: CPU.rl_stage1_trap: priv:%0d  mcause:0x%0h  epc:0x%0h",
		 csr_regfile$read_csr_mcycle,
		 rg_cur_priv,
		 csr_regfile$csr_trap_actions[33:2],
		 imem_rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap && cur_verbosity__h1892 != 4'd0)
	$display("    tval:0x%0h  new pc:0x%0h  new mstatus:0x%0h",
		 value__h12250,
		 csr_regfile$csr_trap_actions[97:66],
		 csr_regfile$csr_trap_actions[65:34]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_interrupt &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("%0d:  CPU.rl_stage1_interrupt",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_interrupt &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("    CPU_Stage_1.enq: 0x%08x",
		 csr_regfile$csr_trap_actions[97:66]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_interrupt && cur_verbosity__h1892 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h10583,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_interrupt && cur_verbosity__h1892 != 4'd0)
	$display("%0d: CPU.rl_stage1_interrupt: epc 0x%0h  next PC 0x%0h  new_priv %0d  new mstatus 0x%0h",
		 csr_regfile$read_csr_mcycle,
		 imem_rg_pc,
		 csr_regfile$csr_trap_actions[97:66],
		 csr_regfile$csr_trap_actions[1:0],
		 csr_regfile$csr_trap_actions[65:34]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("%0d: CPU.rl_pipe", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe && stage3_rg_full && stage3_rg_stage3[37] &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("    S3.fa_deq: write GRd 0x%0h, rd_val 0x%0h",
		 stage3_rg_stage3[36:32],
		 stage3_rg_stage3[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$write("    S3.enq: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$write("data_to_Stage3 {pc:%h  instr:%h  priv:%0d\n",
	       stage2_rg_stage2[167:136],
	       stage2_rg_stage2[135:104],
	       stage2_rg_stage2[169:168]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$write("        rd_valid:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38 &&
	  stage2_rg_stage2[103:101] != 3'd0 &&
	  IF_stage2_rg_stage2_5_BITS_103_TO_101_6_EQ_1_8_ETC___d129)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38 &&
	  (stage2_rg_stage2[103:101] == 3'd0 ||
	   IF_stage2_rg_stage2_5_BITS_103_TO_101_6_EQ_1_8_ETC___d138))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$write("  grd:%0d  rd_val:%h\n",
	       x_out_data_to_stage3_rd__h4445,
	       x_out_data_to_stage3_rd_val__h4446);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d115 == 2'd2 &&
	  cur_verbosity__h1892 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 stage2_rg_stage2[167:136],
		 stage2_rg_stage2[135:104],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_rg_halt_059_083_AND_NOT_csr_regfile_interr_ETC___d1109 &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("    CPU_Stage2.enq (Data_Stage1_to_Stage2)");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_rg_halt_059_083_AND_NOT_csr_regfile_interr_ETC___d1131 &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("    CPU_Stage_1.enq: 0x%08x", x_out_next_pc__h10555);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$write("CPU: Bluespec  RISC-V  Piccolo  v3.0");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start) $display(" (RV32)");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$display("Copyright (c) 2016-2019 Bluespec, Inc. All Rights Reserved.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start && cur_verbosity__h1892 != 4'd0)
	$display("%0d: CPU.rl_reset_start", csr_regfile$read_csr_mcycle);
  end
  // synopsys translate_on
endmodule  // mkCPU

