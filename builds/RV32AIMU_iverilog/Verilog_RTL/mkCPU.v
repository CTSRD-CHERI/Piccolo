//
// Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
//
// On Wed Oct  3 18:11:31 EDT 2018
//
//
// Ports:
// Name                         I/O  size props
// RDY_hart0_server_reset_request_put  O     1 reg
// RDY_hart0_server_reset_response_get  O     1 reg
// imem_master_awvalid            O     1
// imem_master_awaddr             O    64 reg
// imem_master_awprot             O     3 reg
// imem_master_wvalid             O     1
// imem_master_wdata              O    64 reg
// imem_master_wstrb              O     8 reg
// imem_master_bready             O     1
// imem_master_arvalid            O     1
// imem_master_araddr             O    64 reg
// imem_master_arprot             O     3 reg
// imem_master_rready             O     1
// dmem_master_awvalid            O     1
// dmem_master_awaddr             O    64 reg
// dmem_master_awprot             O     3 reg
// dmem_master_wvalid             O     1
// dmem_master_wdata              O    64 reg
// dmem_master_wstrb              O     8 reg
// dmem_master_bready             O     1
// dmem_master_arvalid            O     1
// dmem_master_araddr             O    64 reg
// dmem_master_arprot             O     3 reg
// dmem_master_rready             O     1
// near_mem_slave_awready         O     1 const
// near_mem_slave_wready          O     1 const
// near_mem_slave_bvalid          O     1 const
// near_mem_slave_bresp           O     2 const
// near_mem_slave_arready         O     1 const
// near_mem_slave_rvalid          O     1 const
// near_mem_slave_rresp           O     2 const
// near_mem_slave_rdata           O    64 const
// RDY_external_interrupt_req     O     1 reg
// RDY_timer_interrupt_req        O     1 reg
// RDY_software_interrupt_req     O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// imem_master_awready            I     1
// imem_master_wready             I     1
// imem_master_bvalid             I     1
// imem_master_bresp              I     2 reg
// imem_master_arready            I     1
// imem_master_rvalid             I     1
// imem_master_rresp              I     2 reg
// imem_master_rdata              I    64 reg
// dmem_master_awready            I     1
// dmem_master_wready             I     1
// dmem_master_bvalid             I     1
// dmem_master_bresp              I     2 reg
// dmem_master_arready            I     1
// dmem_master_rvalid             I     1
// dmem_master_rresp              I     2 reg
// dmem_master_rdata              I    64 reg
// near_mem_slave_awvalid         I     1 unused
// near_mem_slave_awaddr          I    64 unused
// near_mem_slave_awprot          I     3 unused
// near_mem_slave_wvalid          I     1 unused
// near_mem_slave_wdata           I    64 unused
// near_mem_slave_wstrb           I     8 unused
// near_mem_slave_bready          I     1 unused
// near_mem_slave_arvalid         I     1 unused
// near_mem_slave_araddr          I    64 unused
// near_mem_slave_arprot          I     3 unused
// near_mem_slave_rready          I     1 unused
// external_interrupt_req_set_not_clear  I     1 reg
// timer_interrupt_req_set_not_clear  I     1 reg
// software_interrupt_req_set_not_clear  I     1 reg
// EN_hart0_server_reset_request_put  I     1
// EN_hart0_server_reset_response_get  I     1
// EN_external_interrupt_req      I     1
// EN_timer_interrupt_req         I     1
// EN_software_interrupt_req      I     1
//
// Combinational paths from inputs to outputs:
//   (imem_master_awready, imem_master_wready) -> imem_master_bready
//   (imem_master_awready,
//    imem_master_wready,
//    dmem_master_awready,
//    dmem_master_wready) -> imem_master_rready
//   (imem_master_awready,
//    imem_master_wready,
//    dmem_master_awready,
//    dmem_master_wready) -> dmem_master_rready
//   (dmem_master_awready, dmem_master_wready) -> dmem_master_bready
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCPU(CLK,
	     RST_N,

	     EN_hart0_server_reset_request_put,
	     RDY_hart0_server_reset_request_put,

	     EN_hart0_server_reset_response_get,
	     RDY_hart0_server_reset_response_get,

	     imem_master_awvalid,

	     imem_master_awaddr,

	     imem_master_awprot,

	     imem_master_awready,

	     imem_master_wvalid,

	     imem_master_wdata,

	     imem_master_wstrb,

	     imem_master_wready,

	     imem_master_bvalid,
	     imem_master_bresp,

	     imem_master_bready,

	     imem_master_arvalid,

	     imem_master_araddr,

	     imem_master_arprot,

	     imem_master_arready,

	     imem_master_rvalid,
	     imem_master_rresp,
	     imem_master_rdata,

	     imem_master_rready,

	     dmem_master_awvalid,

	     dmem_master_awaddr,

	     dmem_master_awprot,

	     dmem_master_awready,

	     dmem_master_wvalid,

	     dmem_master_wdata,

	     dmem_master_wstrb,

	     dmem_master_wready,

	     dmem_master_bvalid,
	     dmem_master_bresp,

	     dmem_master_bready,

	     dmem_master_arvalid,

	     dmem_master_araddr,

	     dmem_master_arprot,

	     dmem_master_arready,

	     dmem_master_rvalid,
	     dmem_master_rresp,
	     dmem_master_rdata,

	     dmem_master_rready,

	     near_mem_slave_awvalid,
	     near_mem_slave_awaddr,
	     near_mem_slave_awprot,

	     near_mem_slave_awready,

	     near_mem_slave_wvalid,
	     near_mem_slave_wdata,
	     near_mem_slave_wstrb,

	     near_mem_slave_wready,

	     near_mem_slave_bvalid,

	     near_mem_slave_bresp,

	     near_mem_slave_bready,

	     near_mem_slave_arvalid,
	     near_mem_slave_araddr,
	     near_mem_slave_arprot,

	     near_mem_slave_arready,

	     near_mem_slave_rvalid,

	     near_mem_slave_rresp,

	     near_mem_slave_rdata,

	     near_mem_slave_rready,

	     external_interrupt_req_set_not_clear,
	     EN_external_interrupt_req,
	     RDY_external_interrupt_req,

	     timer_interrupt_req_set_not_clear,
	     EN_timer_interrupt_req,
	     RDY_timer_interrupt_req,

	     software_interrupt_req_set_not_clear,
	     EN_software_interrupt_req,
	     RDY_software_interrupt_req);
  parameter [63 : 0] pc_reset_value = 64'b0;
  input  CLK;
  input  RST_N;

  // action method hart0_server_reset_request_put
  input  EN_hart0_server_reset_request_put;
  output RDY_hart0_server_reset_request_put;

  // action method hart0_server_reset_response_get
  input  EN_hart0_server_reset_response_get;
  output RDY_hart0_server_reset_response_get;

  // value method imem_master_m_awvalid
  output imem_master_awvalid;

  // value method imem_master_m_awaddr
  output [63 : 0] imem_master_awaddr;

  // value method imem_master_m_awprot
  output [2 : 0] imem_master_awprot;

  // value method imem_master_m_awuser

  // action method imem_master_m_awready
  input  imem_master_awready;

  // value method imem_master_m_wvalid
  output imem_master_wvalid;

  // value method imem_master_m_wdata
  output [63 : 0] imem_master_wdata;

  // value method imem_master_m_wstrb
  output [7 : 0] imem_master_wstrb;

  // action method imem_master_m_wready
  input  imem_master_wready;

  // action method imem_master_m_bvalid
  input  imem_master_bvalid;
  input  [1 : 0] imem_master_bresp;

  // value method imem_master_m_bready
  output imem_master_bready;

  // value method imem_master_m_arvalid
  output imem_master_arvalid;

  // value method imem_master_m_araddr
  output [63 : 0] imem_master_araddr;

  // value method imem_master_m_arprot
  output [2 : 0] imem_master_arprot;

  // value method imem_master_m_aruser

  // action method imem_master_m_arready
  input  imem_master_arready;

  // action method imem_master_m_rvalid
  input  imem_master_rvalid;
  input  [1 : 0] imem_master_rresp;
  input  [63 : 0] imem_master_rdata;

  // value method imem_master_m_rready
  output imem_master_rready;

  // value method dmem_master_m_awvalid
  output dmem_master_awvalid;

  // value method dmem_master_m_awaddr
  output [63 : 0] dmem_master_awaddr;

  // value method dmem_master_m_awprot
  output [2 : 0] dmem_master_awprot;

  // value method dmem_master_m_awuser

  // action method dmem_master_m_awready
  input  dmem_master_awready;

  // value method dmem_master_m_wvalid
  output dmem_master_wvalid;

  // value method dmem_master_m_wdata
  output [63 : 0] dmem_master_wdata;

  // value method dmem_master_m_wstrb
  output [7 : 0] dmem_master_wstrb;

  // action method dmem_master_m_wready
  input  dmem_master_wready;

  // action method dmem_master_m_bvalid
  input  dmem_master_bvalid;
  input  [1 : 0] dmem_master_bresp;

  // value method dmem_master_m_bready
  output dmem_master_bready;

  // value method dmem_master_m_arvalid
  output dmem_master_arvalid;

  // value method dmem_master_m_araddr
  output [63 : 0] dmem_master_araddr;

  // value method dmem_master_m_arprot
  output [2 : 0] dmem_master_arprot;

  // value method dmem_master_m_aruser

  // action method dmem_master_m_arready
  input  dmem_master_arready;

  // action method dmem_master_m_rvalid
  input  dmem_master_rvalid;
  input  [1 : 0] dmem_master_rresp;
  input  [63 : 0] dmem_master_rdata;

  // value method dmem_master_m_rready
  output dmem_master_rready;

  // action method near_mem_slave_m_awvalid
  input  near_mem_slave_awvalid;
  input  [63 : 0] near_mem_slave_awaddr;
  input  [2 : 0] near_mem_slave_awprot;

  // value method near_mem_slave_m_awready
  output near_mem_slave_awready;

  // action method near_mem_slave_m_wvalid
  input  near_mem_slave_wvalid;
  input  [63 : 0] near_mem_slave_wdata;
  input  [7 : 0] near_mem_slave_wstrb;

  // value method near_mem_slave_m_wready
  output near_mem_slave_wready;

  // value method near_mem_slave_m_bvalid
  output near_mem_slave_bvalid;

  // value method near_mem_slave_m_bresp
  output [1 : 0] near_mem_slave_bresp;

  // value method near_mem_slave_m_buser

  // action method near_mem_slave_m_bready
  input  near_mem_slave_bready;

  // action method near_mem_slave_m_arvalid
  input  near_mem_slave_arvalid;
  input  [63 : 0] near_mem_slave_araddr;
  input  [2 : 0] near_mem_slave_arprot;

  // value method near_mem_slave_m_arready
  output near_mem_slave_arready;

  // value method near_mem_slave_m_rvalid
  output near_mem_slave_rvalid;

  // value method near_mem_slave_m_rresp
  output [1 : 0] near_mem_slave_rresp;

  // value method near_mem_slave_m_rdata
  output [63 : 0] near_mem_slave_rdata;

  // value method near_mem_slave_m_ruser

  // action method near_mem_slave_m_rready
  input  near_mem_slave_rready;

  // action method external_interrupt_req
  input  external_interrupt_req_set_not_clear;
  input  EN_external_interrupt_req;
  output RDY_external_interrupt_req;

  // action method timer_interrupt_req
  input  timer_interrupt_req_set_not_clear;
  input  EN_timer_interrupt_req;
  output RDY_timer_interrupt_req;

  // action method software_interrupt_req
  input  software_interrupt_req_set_not_clear;
  input  EN_software_interrupt_req;
  output RDY_software_interrupt_req;

  // signals for module outputs
  wire [63 : 0] dmem_master_araddr,
		dmem_master_awaddr,
		dmem_master_wdata,
		imem_master_araddr,
		imem_master_awaddr,
		imem_master_wdata,
		near_mem_slave_rdata;
  wire [7 : 0] dmem_master_wstrb, imem_master_wstrb;
  wire [2 : 0] dmem_master_arprot,
	       dmem_master_awprot,
	       imem_master_arprot,
	       imem_master_awprot;
  wire [1 : 0] near_mem_slave_bresp, near_mem_slave_rresp;
  wire RDY_external_interrupt_req,
       RDY_hart0_server_reset_request_put,
       RDY_hart0_server_reset_response_get,
       RDY_software_interrupt_req,
       RDY_timer_interrupt_req,
       dmem_master_arvalid,
       dmem_master_awvalid,
       dmem_master_bready,
       dmem_master_rready,
       dmem_master_wvalid,
       imem_master_arvalid,
       imem_master_awvalid,
       imem_master_bready,
       imem_master_rready,
       imem_master_wvalid,
       near_mem_slave_arready,
       near_mem_slave_awready,
       near_mem_slave_bvalid,
       near_mem_slave_rvalid,
       near_mem_slave_wready;

  // register cfg_logdelay
  reg [63 : 0] cfg_logdelay;
  wire [63 : 0] cfg_logdelay$D_IN;
  wire cfg_logdelay$EN;

  // register cfg_verbosity
  reg [3 : 0] cfg_verbosity;
  wire [3 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register rg_cur_priv
  reg [1 : 0] rg_cur_priv;
  reg [1 : 0] rg_cur_priv$D_IN;
  wire rg_cur_priv$EN;

  // register rg_halt
  reg rg_halt;
  wire rg_halt$D_IN, rg_halt$EN;

  // register rg_inum
  reg [63 : 0] rg_inum;
  reg [63 : 0] rg_inum$D_IN;
  wire rg_inum$EN;

  // register rg_start_CPI_cycles
  reg [63 : 0] rg_start_CPI_cycles;
  wire [63 : 0] rg_start_CPI_cycles$D_IN;
  wire rg_start_CPI_cycles$EN;

  // register rg_start_CPI_instrs
  reg [63 : 0] rg_start_CPI_instrs;
  wire [63 : 0] rg_start_CPI_instrs$D_IN;
  wire rg_start_CPI_instrs$EN;

  // register rg_state
  reg [3 : 0] rg_state;
  reg [3 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // register stage1_rg_full
  reg stage1_rg_full;
  reg stage1_rg_full$D_IN;
  wire stage1_rg_full$EN;

  // register stage2_rg_full
  reg stage2_rg_full;
  wire stage2_rg_full$D_IN, stage2_rg_full$EN;

  // register stage2_rg_stage2
  reg [169 : 0] stage2_rg_stage2;
  wire [169 : 0] stage2_rg_stage2$D_IN;
  wire stage2_rg_stage2$EN;

  // register stage3_rg_full
  reg stage3_rg_full;
  wire stage3_rg_full$D_IN, stage3_rg_full$EN;

  // register stage3_rg_stage3
  reg [103 : 0] stage3_rg_stage3;
  wire [103 : 0] stage3_rg_stage3$D_IN;
  wire stage3_rg_stage3$EN;

  // ports of submodule csr_regfile
  reg [31 : 0] csr_regfile$csr_trap_actions_xtval;
  reg [3 : 0] csr_regfile$csr_trap_actions_exc_code;
  reg [1 : 0] csr_regfile$csr_ret_actions_from_priv;
  wire [97 : 0] csr_regfile$csr_trap_actions;
  wire [65 : 0] csr_regfile$csr_ret_actions;
  wire [63 : 0] csr_regfile$read_csr_mcycle, csr_regfile$read_csr_minstret;
  wire [32 : 0] csr_regfile$read_csr;
  wire [31 : 0] csr_regfile$csr_trap_actions_pc,
		csr_regfile$read_mstatus,
		csr_regfile$read_satp,
		csr_regfile$write_csr_word;
  wire [27 : 0] csr_regfile$read_misa;
  wire [11 : 0] csr_regfile$access_permitted_csr_addr,
		csr_regfile$csr_counter_read_fault_csr_addr,
		csr_regfile$mav_read_csr_csr_addr,
		csr_regfile$read_csr_csr_addr,
		csr_regfile$read_csr_port2_csr_addr,
		csr_regfile$write_csr_csr_addr;
  wire [4 : 0] csr_regfile$interrupt_pending;
  wire [1 : 0] csr_regfile$access_permitted_priv,
	       csr_regfile$csr_counter_read_fault_priv,
	       csr_regfile$csr_trap_actions_from_priv,
	       csr_regfile$interrupt_pending_cur_priv;
  wire csr_regfile$EN_csr_minstret_incr,
       csr_regfile$EN_csr_ret_actions,
       csr_regfile$EN_csr_trap_actions,
       csr_regfile$EN_external_interrupt_req,
       csr_regfile$EN_mav_read_csr,
       csr_regfile$EN_server_reset_request_put,
       csr_regfile$EN_server_reset_response_get,
       csr_regfile$EN_software_interrupt_req,
       csr_regfile$EN_timer_interrupt_req,
       csr_regfile$EN_write_csr,
       csr_regfile$RDY_external_interrupt_req,
       csr_regfile$RDY_server_reset_request_put,
       csr_regfile$RDY_server_reset_response_get,
       csr_regfile$RDY_software_interrupt_req,
       csr_regfile$RDY_timer_interrupt_req,
       csr_regfile$access_permitted,
       csr_regfile$access_permitted_read_not_write,
       csr_regfile$csr_trap_actions_interrupt,
       csr_regfile$external_interrupt_req_set_not_clear,
       csr_regfile$software_interrupt_req_set_not_clear,
       csr_regfile$timer_interrupt_req_set_not_clear,
       csr_regfile$wfi_resume;

  // ports of submodule f_reset_reqs
  wire f_reset_reqs$CLR,
       f_reset_reqs$DEQ,
       f_reset_reqs$EMPTY_N,
       f_reset_reqs$ENQ,
       f_reset_reqs$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule gpr_regfile
  wire [31 : 0] gpr_regfile$read_rs1,
		gpr_regfile$read_rs2,
		gpr_regfile$write_rd_rd_val;
  wire [4 : 0] gpr_regfile$read_rs1_port2_rs1,
	       gpr_regfile$read_rs1_rs1,
	       gpr_regfile$read_rs2_rs2,
	       gpr_regfile$write_rd_rd;
  wire gpr_regfile$EN_server_reset_request_put,
       gpr_regfile$EN_server_reset_response_get,
       gpr_regfile$EN_write_rd,
       gpr_regfile$RDY_server_reset_request_put,
       gpr_regfile$RDY_server_reset_response_get;

  // ports of submodule near_mem
  reg [31 : 0] near_mem$imem_req_addr;
  reg [1 : 0] near_mem$dmem_req_op, near_mem$imem_req_priv;
  wire [63 : 0] near_mem$dmem_master_araddr,
		near_mem$dmem_master_awaddr,
		near_mem$dmem_master_rdata,
		near_mem$dmem_master_wdata,
		near_mem$dmem_req_store_value,
		near_mem$dmem_word64,
		near_mem$imem_master_araddr,
		near_mem$imem_master_awaddr,
		near_mem$imem_master_rdata,
		near_mem$imem_master_wdata,
		near_mem$near_mem_slave_araddr,
		near_mem$near_mem_slave_awaddr,
		near_mem$near_mem_slave_rdata,
		near_mem$near_mem_slave_wdata;
  wire [31 : 0] near_mem$dmem_req_addr,
		near_mem$dmem_req_satp,
		near_mem$imem_instr,
		near_mem$imem_pc,
		near_mem$imem_req_satp;
  wire [7 : 0] near_mem$dmem_master_wstrb,
	       near_mem$imem_master_wstrb,
	       near_mem$near_mem_slave_wstrb,
	       near_mem$server_fence_request_put;
  wire [6 : 0] near_mem$dmem_req_amo_funct7;
  wire [3 : 0] near_mem$dmem_exc_code, near_mem$imem_exc_code;
  wire [2 : 0] near_mem$dmem_master_arprot,
	       near_mem$dmem_master_awprot,
	       near_mem$dmem_req_f3,
	       near_mem$imem_master_arprot,
	       near_mem$imem_master_awprot,
	       near_mem$imem_req_f3,
	       near_mem$near_mem_slave_arprot,
	       near_mem$near_mem_slave_awprot;
  wire [1 : 0] near_mem$dmem_master_bresp,
	       near_mem$dmem_master_rresp,
	       near_mem$dmem_req_priv,
	       near_mem$imem_master_bresp,
	       near_mem$imem_master_rresp,
	       near_mem$near_mem_slave_bresp,
	       near_mem$near_mem_slave_rresp;
  wire near_mem$EN_dmem_req,
       near_mem$EN_imem_req,
       near_mem$EN_server_fence_i_request_put,
       near_mem$EN_server_fence_i_response_get,
       near_mem$EN_server_fence_request_put,
       near_mem$EN_server_fence_response_get,
       near_mem$EN_server_reset_request_put,
       near_mem$EN_server_reset_response_get,
       near_mem$EN_sfence_vma,
       near_mem$RDY_server_fence_i_request_put,
       near_mem$RDY_server_fence_i_response_get,
       near_mem$RDY_server_fence_request_put,
       near_mem$RDY_server_fence_response_get,
       near_mem$RDY_server_reset_request_put,
       near_mem$RDY_server_reset_response_get,
       near_mem$dmem_exc,
       near_mem$dmem_master_arready,
       near_mem$dmem_master_arvalid,
       near_mem$dmem_master_awready,
       near_mem$dmem_master_awvalid,
       near_mem$dmem_master_bready,
       near_mem$dmem_master_bvalid,
       near_mem$dmem_master_rready,
       near_mem$dmem_master_rvalid,
       near_mem$dmem_master_wready,
       near_mem$dmem_master_wvalid,
       near_mem$dmem_req_mstatus_MXR,
       near_mem$dmem_req_sstatus_SUM,
       near_mem$dmem_valid,
       near_mem$imem_exc,
       near_mem$imem_master_arready,
       near_mem$imem_master_arvalid,
       near_mem$imem_master_awready,
       near_mem$imem_master_awvalid,
       near_mem$imem_master_bready,
       near_mem$imem_master_bvalid,
       near_mem$imem_master_rready,
       near_mem$imem_master_rvalid,
       near_mem$imem_master_wready,
       near_mem$imem_master_wvalid,
       near_mem$imem_req_mstatus_MXR,
       near_mem$imem_req_sstatus_SUM,
       near_mem$imem_valid,
       near_mem$near_mem_slave_arready,
       near_mem$near_mem_slave_arvalid,
       near_mem$near_mem_slave_awready,
       near_mem$near_mem_slave_awvalid,
       near_mem$near_mem_slave_bready,
       near_mem$near_mem_slave_bvalid,
       near_mem$near_mem_slave_rready,
       near_mem$near_mem_slave_rvalid,
       near_mem$near_mem_slave_wready,
       near_mem$near_mem_slave_wvalid;

  // ports of submodule stage1_f_reset_reqs
  wire stage1_f_reset_reqs$CLR,
       stage1_f_reset_reqs$DEQ,
       stage1_f_reset_reqs$EMPTY_N,
       stage1_f_reset_reqs$ENQ,
       stage1_f_reset_reqs$FULL_N;

  // ports of submodule stage1_f_reset_rsps
  wire stage1_f_reset_rsps$CLR,
       stage1_f_reset_rsps$DEQ,
       stage1_f_reset_rsps$EMPTY_N,
       stage1_f_reset_rsps$ENQ,
       stage1_f_reset_rsps$FULL_N;

  // ports of submodule stage2_f_reset_reqs
  wire stage2_f_reset_reqs$CLR,
       stage2_f_reset_reqs$DEQ,
       stage2_f_reset_reqs$EMPTY_N,
       stage2_f_reset_reqs$ENQ,
       stage2_f_reset_reqs$FULL_N;

  // ports of submodule stage2_f_reset_rsps
  wire stage2_f_reset_rsps$CLR,
       stage2_f_reset_rsps$DEQ,
       stage2_f_reset_rsps$EMPTY_N,
       stage2_f_reset_rsps$ENQ,
       stage2_f_reset_rsps$FULL_N;

  // ports of submodule stage2_mbox
  wire [31 : 0] stage2_mbox$req_v1, stage2_mbox$req_v2, stage2_mbox$word;
  wire [3 : 0] stage2_mbox$set_verbosity_verbosity;
  wire [2 : 0] stage2_mbox$req_f3;
  wire stage2_mbox$EN_req,
       stage2_mbox$EN_req_reset,
       stage2_mbox$EN_rsp_reset,
       stage2_mbox$EN_set_verbosity,
       stage2_mbox$req_is_OP_not_OP_32,
       stage2_mbox$valid;

  // ports of submodule stage3_f_reset_reqs
  wire stage3_f_reset_reqs$CLR,
       stage3_f_reset_reqs$DEQ,
       stage3_f_reset_reqs$EMPTY_N,
       stage3_f_reset_reqs$ENQ,
       stage3_f_reset_reqs$FULL_N;

  // ports of submodule stage3_f_reset_rsps
  wire stage3_f_reset_rsps$CLR,
       stage3_f_reset_rsps$DEQ,
       stage3_f_reset_rsps$EMPTY_N,
       stage3_f_reset_rsps$ENQ,
       stage3_f_reset_rsps$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_WFI_resume,
       CAN_FIRE_RL_rl_finish_FENCE,
       CAN_FIRE_RL_rl_finish_FENCE_I,
       CAN_FIRE_RL_rl_finish_SFENCE_VMA,
       CAN_FIRE_RL_rl_pipe,
       CAN_FIRE_RL_rl_reset_complete,
       CAN_FIRE_RL_rl_reset_from_WFI,
       CAN_FIRE_RL_rl_reset_start,
       CAN_FIRE_RL_rl_show_pipe,
       CAN_FIRE_RL_rl_stage1_CSRR_S_or_C,
       CAN_FIRE_RL_rl_stage1_CSRR_W,
       CAN_FIRE_RL_rl_stage1_FENCE,
       CAN_FIRE_RL_rl_stage1_FENCE_I,
       CAN_FIRE_RL_rl_stage1_SFENCE_VMA,
       CAN_FIRE_RL_rl_stage1_WFI,
       CAN_FIRE_RL_rl_stage1_interrupt,
       CAN_FIRE_RL_rl_stage1_restart_after_csrrx,
       CAN_FIRE_RL_rl_stage1_trap,
       CAN_FIRE_RL_rl_stage1_xRET,
       CAN_FIRE_RL_rl_stage2_nonpipe,
       CAN_FIRE_RL_stage1_rl_reset,
       CAN_FIRE_RL_stage2_rl_reset,
       CAN_FIRE_RL_stage3_rl_reset,
       CAN_FIRE_dmem_master_m_arready,
       CAN_FIRE_dmem_master_m_awready,
       CAN_FIRE_dmem_master_m_bvalid,
       CAN_FIRE_dmem_master_m_rvalid,
       CAN_FIRE_dmem_master_m_wready,
       CAN_FIRE_external_interrupt_req,
       CAN_FIRE_hart0_server_reset_request_put,
       CAN_FIRE_hart0_server_reset_response_get,
       CAN_FIRE_imem_master_m_arready,
       CAN_FIRE_imem_master_m_awready,
       CAN_FIRE_imem_master_m_bvalid,
       CAN_FIRE_imem_master_m_rvalid,
       CAN_FIRE_imem_master_m_wready,
       CAN_FIRE_near_mem_slave_m_arvalid,
       CAN_FIRE_near_mem_slave_m_awvalid,
       CAN_FIRE_near_mem_slave_m_bready,
       CAN_FIRE_near_mem_slave_m_rready,
       CAN_FIRE_near_mem_slave_m_wvalid,
       CAN_FIRE_software_interrupt_req,
       CAN_FIRE_timer_interrupt_req,
       WILL_FIRE_RL_rl_WFI_resume,
       WILL_FIRE_RL_rl_finish_FENCE,
       WILL_FIRE_RL_rl_finish_FENCE_I,
       WILL_FIRE_RL_rl_finish_SFENCE_VMA,
       WILL_FIRE_RL_rl_pipe,
       WILL_FIRE_RL_rl_reset_complete,
       WILL_FIRE_RL_rl_reset_from_WFI,
       WILL_FIRE_RL_rl_reset_start,
       WILL_FIRE_RL_rl_show_pipe,
       WILL_FIRE_RL_rl_stage1_CSRR_S_or_C,
       WILL_FIRE_RL_rl_stage1_CSRR_W,
       WILL_FIRE_RL_rl_stage1_FENCE,
       WILL_FIRE_RL_rl_stage1_FENCE_I,
       WILL_FIRE_RL_rl_stage1_SFENCE_VMA,
       WILL_FIRE_RL_rl_stage1_WFI,
       WILL_FIRE_RL_rl_stage1_interrupt,
       WILL_FIRE_RL_rl_stage1_restart_after_csrrx,
       WILL_FIRE_RL_rl_stage1_trap,
       WILL_FIRE_RL_rl_stage1_xRET,
       WILL_FIRE_RL_rl_stage2_nonpipe,
       WILL_FIRE_RL_stage1_rl_reset,
       WILL_FIRE_RL_stage2_rl_reset,
       WILL_FIRE_RL_stage3_rl_reset,
       WILL_FIRE_dmem_master_m_arready,
       WILL_FIRE_dmem_master_m_awready,
       WILL_FIRE_dmem_master_m_bvalid,
       WILL_FIRE_dmem_master_m_rvalid,
       WILL_FIRE_dmem_master_m_wready,
       WILL_FIRE_external_interrupt_req,
       WILL_FIRE_hart0_server_reset_request_put,
       WILL_FIRE_hart0_server_reset_response_get,
       WILL_FIRE_imem_master_m_arready,
       WILL_FIRE_imem_master_m_awready,
       WILL_FIRE_imem_master_m_bvalid,
       WILL_FIRE_imem_master_m_rvalid,
       WILL_FIRE_imem_master_m_wready,
       WILL_FIRE_near_mem_slave_m_arvalid,
       WILL_FIRE_near_mem_slave_m_awvalid,
       WILL_FIRE_near_mem_slave_m_bready,
       WILL_FIRE_near_mem_slave_m_rready,
       WILL_FIRE_near_mem_slave_m_wvalid,
       WILL_FIRE_software_interrupt_req,
       WILL_FIRE_timer_interrupt_req;

  // inputs to muxes for submodule ports
  reg [31 : 0] MUX_csr_regfile$write_csr_2__VAL_2;
  wire [63 : 0] MUX_rg_inum$write_1__VAL_1;
  wire [3 : 0] MUX_rg_state$write_1__VAL_1;
  wire MUX_csr_regfile$write_csr_1__SEL_1,
       MUX_csr_regfile$write_csr_1__SEL_2,
       MUX_near_mem$imem_req_1__SEL_1,
       MUX_near_mem$imem_req_1__SEL_2,
       MUX_near_mem$imem_req_1__SEL_4,
       MUX_rg_cur_priv$write_1__SEL_1,
       MUX_rg_inum$write_1__SEL_1,
       MUX_rg_inum$write_1__SEL_4,
       MUX_rg_state$write_1__SEL_1,
       MUX_rg_state$write_1__SEL_2,
       MUX_rg_state$write_1__SEL_3,
       MUX_rg_state$write_1__SEL_5,
       MUX_rg_state$write_1__SEL_6,
       MUX_rg_state$write_1__SEL_7,
       MUX_rg_state$write_1__SEL_8,
       MUX_rg_state$write_1__SEL_9,
       MUX_stage1_rg_full$write_1__VAL_11,
       MUX_stage2_rg_full$write_1__VAL_3;

  // remaining internal signals
  reg [31 : 0] CASE_near_memimem_instr_BITS_6_TO_0_0b1100011_ETC__q9,
	       IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d661,
	       _theResult_____1_fst__h5848,
	       rs1_val__h10335,
	       x_out_bypass_rd_val__h4231,
	       x_out_data_to_stage2_addr__h4500,
	       x_out_data_to_stage2_val1__h4501,
	       x_out_data_to_stage3_rd_val__h3893;
  reg [4 : 0] x_out_bypass_rd__h4230, x_out_data_to_stage3_rd__h3892;
  reg [3 : 0] CASE_near_memimem_instr_BITS_14_TO_12_0b0_4_0_ETC__q14,
	      CASE_near_memimem_instr_BITS_14_TO_12_0b0_IF__ETC__q15,
	      CASE_near_memimem_instr_BITS_31_TO_20_0b0_CAS_ETC__q2,
	      CASE_rg_cur_priv_0b0_8_0b1_9_11__q1,
	      IF_near_mem_imem_instr__71_BITS_31_TO_20_56_EQ_ETC___d464,
	      IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d479,
	      IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d484,
	      alu_outputs_exc_code__h5136;
  reg [2 : 0] CASE_near_memimem_instr_BITS_6_TO_0_0b11_1_0b_ETC__q16,
	      IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d566;
  reg [1 : 0] CASE_stage2_rg_stage2_BITS_103_TO_101_0_2_1_IF_ETC__q4,
	      CASE_stage2_rg_stage2_BITS_103_TO_101_0_2_1_IF_ETC__q5;
  reg CASE_near_memimem_instr_BITS_6_TO_0_0b10011_N_ETC__q11,
      CASE_near_memimem_instr_BITS_6_TO_0_0b10011_n_ETC__q13,
      CASE_near_memimem_instr_BITS_6_TO_0_0b11_NOT__ETC__q10,
      CASE_near_memimem_instr_BITS_6_TO_0_0b11_near_ETC__q12,
      IF_near_mem_imem_instr__71_BITS_14_TO_12_94_EQ_ETC___d240,
      IF_near_mem_imem_instr__71_BITS_14_TO_12_94_EQ_ETC___d345,
      IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d362,
      IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d420,
      IF_stage2_rg_stage2_4_BITS_103_TO_101_5_EQ_1_7_ETC___d108,
      IF_stage2_rg_stage2_4_BITS_103_TO_101_5_EQ_1_7_ETC___d117,
      TASK_testplusargs___d761,
      TASK_testplusargs___d762;
  wire [127 : 0] csr_regfile_read_csr_mcycle__7_MINUS_rg_start__ETC___d944;
  wire [63 : 0] _theResult____h13986,
		cpi__h13988,
		cpifrac__h13989,
		delta_CPI_cycles__h13984,
		delta_CPI_instrs___1__h14021,
		delta_CPI_instrs__h13985,
		x__h13987;
  wire [31 : 0] IF_csr_regfile_read_csr_IF_NOT_stage1_rg_full__ETC___d899,
		IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d662,
		SEXT_near_mem_imem_instr__71_BITS_31_TO_20_56___d357,
		_theResult_____1_fst__h5841,
		_theResult_____1_fst__h5876,
		_theResult___snd__h6653,
		alu_outputs___1_addr__h4609,
		alu_outputs___1_addr__h4626,
		alu_outputs___1_addr__h4647,
		alu_outputs___1_addr__h4840,
		alu_outputs___1_val1__h4746,
		alu_outputs___1_val1__h4781,
		alu_outputs___1_val1__h5102,
		alu_outputs___1_val1__h5120,
		branch_target__h4593,
		data_to_stage2_addr__h4491,
		eaddr__h4814,
		near_mem_imem_pc__82_PLUS_SEXT_near_mem_imem_i_ETC___d353,
		output_stage2___1_bypass_rd_val__h4219,
		rd_val___1__h5829,
		rd_val___1__h5837,
		rd_val___1__h5844,
		rd_val___1__h5851,
		rd_val___1__h5858,
		rd_val___1__h5865,
		rd_val__h4343,
		rd_val__h4403,
		rd_val__h4787,
		rd_val__h4800,
		rd_val__h6549,
		rd_val__h6601,
		rd_val__h6623,
		ret_pc__h4615,
		rs1_val__h9811,
		rs1_val_bypassed__h2508,
		rs2_val_bypassed__h2514,
		trap_info_badaddr__h6284,
		val__h4345,
		val__h4405,
		value__h6328,
		x_out_data_to_stage2_val2__h4502,
		x_out_next_pc__h4458,
		y__h10623;
  wire [20 : 0] near_memimem_instr_BIT_31_CONCAT_near_memime_ETC__q7;
  wire [12 : 0] near_memimem_instr_BIT_31_CONCAT_near_memime_ETC__q3;
  wire [11 : 0] near_memimem_instr_BITS_31_TO_20__q8,
		near_memimem_instr_BITS_31_TO_25_CONCAT_near__ETC__q6;
  wire [4 : 0] shamt__h4733, x_out_data_to_stage2_rd__h4499;
  wire [3 : 0] IF_NOT_near_mem_imem_instr__71_BITS_14_TO_12_9_ETC___d430,
	       IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486,
	       IF_rg_cur_priv_9_EQ_0b11_43_OR_rg_cur_priv_9_E_ETC___d462,
	       alu_outputs___1_exc_code__h5098,
	       cur_verbosity__h1330,
	       x_out_trap_info_exc_code__h6287;
  wire [1 : 0] IF_near_mem_dmem_valid__5_THEN_IF_near_mem_dme_ETC___d88,
	       IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d154,
	       IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94,
	       IF_stage2_rg_stage2_4_BITS_100_TO_96_24_EQ_0_4_ETC___d150,
	       IF_stage2_rg_stage2_4_BITS_103_TO_101_5_EQ_3_1_ETC___d91;
  wire IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d941,
       IF_near_mem_imem_instr__71_BITS_19_TO_15_72_EQ_ETC___d229,
       IF_near_mem_imem_instr__71_BITS_19_TO_15_72_EQ_ETC___d231,
       IF_near_mem_imem_instr__71_BITS_19_TO_15_72_EQ_ETC___d233,
       IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d328,
       IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d411,
       IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d954,
       IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d173,
       IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d175,
       NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d16,
       NOT_near_mem_imem_exc__80_67_AND_IF_near_mem_i_ETC___d552,
       NOT_near_mem_imem_exc__80_67_AND_IF_near_mem_i_ETC___d590,
       NOT_near_mem_imem_instr__71_BITS_14_TO_12_94_E_ETC___d269,
       NOT_near_mem_imem_instr__71_BITS_14_TO_12_94_E_ETC___d339,
       NOT_near_mem_imem_valid__69_70_OR_IF_stage2_rg_ETC___d178,
       NOT_near_mem_imem_valid__69_70_OR_IF_stage2_rg_ETC___d788,
       NOT_near_mem_imem_valid__69_70_OR_IF_stage2_rg_ETC___d799,
       NOT_rg_halt_93_94_AND_NOT_csr_regfile_interrup_ETC___d802,
       NOT_rg_halt_93_94_AND_NOT_csr_regfile_interrup_ETC___d823,
       NOT_rg_halt_93_94_AND_NOT_csr_regfile_interrup_ETC___d845,
       gpr_regfile_RDY_server_reset_request_put__47_A_ETC___d759,
       gpr_regfile_RDY_server_reset_response_get__67__ETC___d779,
       near_mem_imem_exc__80_OR_IF_near_mem_imem_inst_ETC___d674,
       near_mem_imem_exc__80_OR_IF_near_mem_imem_inst_ETC___d677,
       near_mem_imem_exc__80_OR_IF_near_mem_imem_inst_ETC___d680,
       near_mem_imem_exc__80_OR_IF_near_mem_imem_inst_ETC___d683,
       near_mem_imem_exc__80_OR_IF_near_mem_imem_inst_ETC___d686,
       near_mem_imem_exc__80_OR_IF_near_mem_imem_inst_ETC___d689,
       near_mem_imem_exc__80_OR_IF_near_mem_imem_inst_ETC___d692,
       near_mem_imem_exc__80_OR_IF_near_mem_imem_inst_ETC___d695,
       near_mem_imem_exc__80_OR_IF_near_mem_imem_inst_ETC___d698,
       near_mem_imem_exc__80_OR_IF_near_mem_imem_inst_ETC___d701,
       near_mem_imem_exc__80_OR_IF_near_mem_imem_inst_ETC___d704,
       near_mem_imem_exc__80_OR_IF_near_mem_imem_inst_ETC___d707,
       near_mem_imem_instr__71_BITS_14_TO_12_94_EQ_0b_ETC___d383,
       near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d191,
       near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d365,
       near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d423,
       rg_cur_priv_9_EQ_0b11_43_OR_rg_cur_priv_9_EQ_0_ETC___d460,
       rg_state_7_EQ_2_83_AND_NOT_rg_halt_93_94_AND_N_ETC___d866,
       rg_state_7_EQ_2_83_AND_NOT_rg_halt_93_94_AND_N_ETC___d919,
       rg_state_7_EQ_2_83_AND_NOT_rg_halt_93_94_AND_N_ETC___d925,
       rg_state_7_EQ_2_83_AND_NOT_rg_halt_93_94_AND_N_ETC___d939;

  // action method hart0_server_reset_request_put
  assign RDY_hart0_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_hart0_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_hart0_server_reset_request_put =
	     EN_hart0_server_reset_request_put ;

  // action method hart0_server_reset_response_get
  assign RDY_hart0_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_hart0_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_hart0_server_reset_response_get =
	     EN_hart0_server_reset_response_get ;

  // value method imem_master_m_awvalid
  assign imem_master_awvalid = near_mem$imem_master_awvalid ;

  // value method imem_master_m_awaddr
  assign imem_master_awaddr = near_mem$imem_master_awaddr ;

  // value method imem_master_m_awprot
  assign imem_master_awprot = near_mem$imem_master_awprot ;

  // action method imem_master_m_awready
  assign CAN_FIRE_imem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_awready = 1'd1 ;

  // value method imem_master_m_wvalid
  assign imem_master_wvalid = near_mem$imem_master_wvalid ;

  // value method imem_master_m_wdata
  assign imem_master_wdata = near_mem$imem_master_wdata ;

  // value method imem_master_m_wstrb
  assign imem_master_wstrb = near_mem$imem_master_wstrb ;

  // action method imem_master_m_wready
  assign CAN_FIRE_imem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_wready = 1'd1 ;

  // action method imem_master_m_bvalid
  assign CAN_FIRE_imem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_imem_master_m_bvalid = 1'd1 ;

  // value method imem_master_m_bready
  assign imem_master_bready = near_mem$imem_master_bready ;

  // value method imem_master_m_arvalid
  assign imem_master_arvalid = near_mem$imem_master_arvalid ;

  // value method imem_master_m_araddr
  assign imem_master_araddr = near_mem$imem_master_araddr ;

  // value method imem_master_m_arprot
  assign imem_master_arprot = near_mem$imem_master_arprot ;

  // action method imem_master_m_arready
  assign CAN_FIRE_imem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_arready = 1'd1 ;

  // action method imem_master_m_rvalid
  assign CAN_FIRE_imem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_imem_master_m_rvalid = 1'd1 ;

  // value method imem_master_m_rready
  assign imem_master_rready = near_mem$imem_master_rready ;

  // value method dmem_master_m_awvalid
  assign dmem_master_awvalid = near_mem$dmem_master_awvalid ;

  // value method dmem_master_m_awaddr
  assign dmem_master_awaddr = near_mem$dmem_master_awaddr ;

  // value method dmem_master_m_awprot
  assign dmem_master_awprot = near_mem$dmem_master_awprot ;

  // action method dmem_master_m_awready
  assign CAN_FIRE_dmem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_awready = 1'd1 ;

  // value method dmem_master_m_wvalid
  assign dmem_master_wvalid = near_mem$dmem_master_wvalid ;

  // value method dmem_master_m_wdata
  assign dmem_master_wdata = near_mem$dmem_master_wdata ;

  // value method dmem_master_m_wstrb
  assign dmem_master_wstrb = near_mem$dmem_master_wstrb ;

  // action method dmem_master_m_wready
  assign CAN_FIRE_dmem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_wready = 1'd1 ;

  // action method dmem_master_m_bvalid
  assign CAN_FIRE_dmem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_bvalid = 1'd1 ;

  // value method dmem_master_m_bready
  assign dmem_master_bready = near_mem$dmem_master_bready ;

  // value method dmem_master_m_arvalid
  assign dmem_master_arvalid = near_mem$dmem_master_arvalid ;

  // value method dmem_master_m_araddr
  assign dmem_master_araddr = near_mem$dmem_master_araddr ;

  // value method dmem_master_m_arprot
  assign dmem_master_arprot = near_mem$dmem_master_arprot ;

  // action method dmem_master_m_arready
  assign CAN_FIRE_dmem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_arready = 1'd1 ;

  // action method dmem_master_m_rvalid
  assign CAN_FIRE_dmem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_rvalid = 1'd1 ;

  // value method dmem_master_m_rready
  assign dmem_master_rready = near_mem$dmem_master_rready ;

  // action method near_mem_slave_m_awvalid
  assign CAN_FIRE_near_mem_slave_m_awvalid = 1'd1 ;
  assign WILL_FIRE_near_mem_slave_m_awvalid = 1'd1 ;

  // value method near_mem_slave_m_awready
  assign near_mem_slave_awready = near_mem$near_mem_slave_awready ;

  // action method near_mem_slave_m_wvalid
  assign CAN_FIRE_near_mem_slave_m_wvalid = 1'd1 ;
  assign WILL_FIRE_near_mem_slave_m_wvalid = 1'd1 ;

  // value method near_mem_slave_m_wready
  assign near_mem_slave_wready = near_mem$near_mem_slave_wready ;

  // value method near_mem_slave_m_bvalid
  assign near_mem_slave_bvalid = near_mem$near_mem_slave_bvalid ;

  // value method near_mem_slave_m_bresp
  assign near_mem_slave_bresp = near_mem$near_mem_slave_bresp ;

  // action method near_mem_slave_m_bready
  assign CAN_FIRE_near_mem_slave_m_bready = 1'd1 ;
  assign WILL_FIRE_near_mem_slave_m_bready = 1'd1 ;

  // action method near_mem_slave_m_arvalid
  assign CAN_FIRE_near_mem_slave_m_arvalid = 1'd1 ;
  assign WILL_FIRE_near_mem_slave_m_arvalid = 1'd1 ;

  // value method near_mem_slave_m_arready
  assign near_mem_slave_arready = near_mem$near_mem_slave_arready ;

  // value method near_mem_slave_m_rvalid
  assign near_mem_slave_rvalid = near_mem$near_mem_slave_rvalid ;

  // value method near_mem_slave_m_rresp
  assign near_mem_slave_rresp = near_mem$near_mem_slave_rresp ;

  // value method near_mem_slave_m_rdata
  assign near_mem_slave_rdata = near_mem$near_mem_slave_rdata ;

  // action method near_mem_slave_m_rready
  assign CAN_FIRE_near_mem_slave_m_rready = 1'd1 ;
  assign WILL_FIRE_near_mem_slave_m_rready = 1'd1 ;

  // action method external_interrupt_req
  assign RDY_external_interrupt_req = csr_regfile$RDY_external_interrupt_req ;
  assign CAN_FIRE_external_interrupt_req =
	     csr_regfile$RDY_external_interrupt_req ;
  assign WILL_FIRE_external_interrupt_req = EN_external_interrupt_req ;

  // action method timer_interrupt_req
  assign RDY_timer_interrupt_req = csr_regfile$RDY_timer_interrupt_req ;
  assign CAN_FIRE_timer_interrupt_req = csr_regfile$RDY_timer_interrupt_req ;
  assign WILL_FIRE_timer_interrupt_req = EN_timer_interrupt_req ;

  // action method software_interrupt_req
  assign RDY_software_interrupt_req = csr_regfile$RDY_software_interrupt_req ;
  assign CAN_FIRE_software_interrupt_req =
	     csr_regfile$RDY_software_interrupt_req ;
  assign WILL_FIRE_software_interrupt_req = EN_software_interrupt_req ;

  // submodule csr_regfile
  mkCSR_RegFile csr_regfile(.CLK(CLK),
			    .RST_N(RST_N),
			    .access_permitted_csr_addr(csr_regfile$access_permitted_csr_addr),
			    .access_permitted_priv(csr_regfile$access_permitted_priv),
			    .access_permitted_read_not_write(csr_regfile$access_permitted_read_not_write),
			    .csr_counter_read_fault_csr_addr(csr_regfile$csr_counter_read_fault_csr_addr),
			    .csr_counter_read_fault_priv(csr_regfile$csr_counter_read_fault_priv),
			    .csr_ret_actions_from_priv(csr_regfile$csr_ret_actions_from_priv),
			    .csr_trap_actions_exc_code(csr_regfile$csr_trap_actions_exc_code),
			    .csr_trap_actions_from_priv(csr_regfile$csr_trap_actions_from_priv),
			    .csr_trap_actions_interrupt(csr_regfile$csr_trap_actions_interrupt),
			    .csr_trap_actions_pc(csr_regfile$csr_trap_actions_pc),
			    .csr_trap_actions_xtval(csr_regfile$csr_trap_actions_xtval),
			    .external_interrupt_req_set_not_clear(csr_regfile$external_interrupt_req_set_not_clear),
			    .interrupt_pending_cur_priv(csr_regfile$interrupt_pending_cur_priv),
			    .mav_read_csr_csr_addr(csr_regfile$mav_read_csr_csr_addr),
			    .read_csr_csr_addr(csr_regfile$read_csr_csr_addr),
			    .read_csr_port2_csr_addr(csr_regfile$read_csr_port2_csr_addr),
			    .software_interrupt_req_set_not_clear(csr_regfile$software_interrupt_req_set_not_clear),
			    .timer_interrupt_req_set_not_clear(csr_regfile$timer_interrupt_req_set_not_clear),
			    .write_csr_csr_addr(csr_regfile$write_csr_csr_addr),
			    .write_csr_word(csr_regfile$write_csr_word),
			    .EN_server_reset_request_put(csr_regfile$EN_server_reset_request_put),
			    .EN_server_reset_response_get(csr_regfile$EN_server_reset_response_get),
			    .EN_mav_read_csr(csr_regfile$EN_mav_read_csr),
			    .EN_write_csr(csr_regfile$EN_write_csr),
			    .EN_csr_trap_actions(csr_regfile$EN_csr_trap_actions),
			    .EN_csr_ret_actions(csr_regfile$EN_csr_ret_actions),
			    .EN_csr_minstret_incr(csr_regfile$EN_csr_minstret_incr),
			    .EN_external_interrupt_req(csr_regfile$EN_external_interrupt_req),
			    .EN_timer_interrupt_req(csr_regfile$EN_timer_interrupt_req),
			    .EN_software_interrupt_req(csr_regfile$EN_software_interrupt_req),
			    .RDY_server_reset_request_put(csr_regfile$RDY_server_reset_request_put),
			    .RDY_server_reset_response_get(csr_regfile$RDY_server_reset_response_get),
			    .read_csr(csr_regfile$read_csr),
			    .read_csr_port2(),
			    .mav_read_csr(),
			    .read_misa(csr_regfile$read_misa),
			    .read_mstatus(csr_regfile$read_mstatus),
			    .read_ustatus(),
			    .read_satp(csr_regfile$read_satp),
			    .csr_trap_actions(csr_regfile$csr_trap_actions),
			    .RDY_csr_trap_actions(),
			    .csr_ret_actions(csr_regfile$csr_ret_actions),
			    .RDY_csr_ret_actions(),
			    .read_csr_minstret(csr_regfile$read_csr_minstret),
			    .read_csr_mcycle(csr_regfile$read_csr_mcycle),
			    .read_csr_mtime(),
			    .access_permitted(csr_regfile$access_permitted),
			    .csr_counter_read_fault(),
			    .read_csr_mip(),
			    .RDY_external_interrupt_req(csr_regfile$RDY_external_interrupt_req),
			    .RDY_timer_interrupt_req(csr_regfile$RDY_timer_interrupt_req),
			    .RDY_software_interrupt_req(csr_regfile$RDY_software_interrupt_req),
			    .interrupt_pending(csr_regfile$interrupt_pending),
			    .wfi_resume(csr_regfile$wfi_resume));

  // submodule f_reset_reqs
  FIFO20 #(.guarded(32'd1)) f_reset_reqs(.RST(RST_N),
					 .CLK(CLK),
					 .ENQ(f_reset_reqs$ENQ),
					 .DEQ(f_reset_reqs$DEQ),
					 .CLR(f_reset_reqs$CLR),
					 .FULL_N(f_reset_reqs$FULL_N),
					 .EMPTY_N(f_reset_reqs$EMPTY_N));

  // submodule f_reset_rsps
  FIFO20 #(.guarded(32'd1)) f_reset_rsps(.RST(RST_N),
					 .CLK(CLK),
					 .ENQ(f_reset_rsps$ENQ),
					 .DEQ(f_reset_rsps$DEQ),
					 .CLR(f_reset_rsps$CLR),
					 .FULL_N(f_reset_rsps$FULL_N),
					 .EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule gpr_regfile
  mkGPR_RegFile gpr_regfile(.CLK(CLK),
			    .RST_N(RST_N),
			    .read_rs1_port2_rs1(gpr_regfile$read_rs1_port2_rs1),
			    .read_rs1_rs1(gpr_regfile$read_rs1_rs1),
			    .read_rs2_rs2(gpr_regfile$read_rs2_rs2),
			    .write_rd_rd(gpr_regfile$write_rd_rd),
			    .write_rd_rd_val(gpr_regfile$write_rd_rd_val),
			    .EN_server_reset_request_put(gpr_regfile$EN_server_reset_request_put),
			    .EN_server_reset_response_get(gpr_regfile$EN_server_reset_response_get),
			    .EN_write_rd(gpr_regfile$EN_write_rd),
			    .RDY_server_reset_request_put(gpr_regfile$RDY_server_reset_request_put),
			    .RDY_server_reset_response_get(gpr_regfile$RDY_server_reset_response_get),
			    .read_rs1(gpr_regfile$read_rs1),
			    .read_rs1_port2(),
			    .read_rs2(gpr_regfile$read_rs2));

  // submodule near_mem
  mkNear_Mem near_mem(.CLK(CLK),
		      .RST_N(RST_N),
		      .dmem_master_arready(near_mem$dmem_master_arready),
		      .dmem_master_awready(near_mem$dmem_master_awready),
		      .dmem_master_bresp(near_mem$dmem_master_bresp),
		      .dmem_master_bvalid(near_mem$dmem_master_bvalid),
		      .dmem_master_rdata(near_mem$dmem_master_rdata),
		      .dmem_master_rresp(near_mem$dmem_master_rresp),
		      .dmem_master_rvalid(near_mem$dmem_master_rvalid),
		      .dmem_master_wready(near_mem$dmem_master_wready),
		      .dmem_req_addr(near_mem$dmem_req_addr),
		      .dmem_req_amo_funct7(near_mem$dmem_req_amo_funct7),
		      .dmem_req_f3(near_mem$dmem_req_f3),
		      .dmem_req_mstatus_MXR(near_mem$dmem_req_mstatus_MXR),
		      .dmem_req_op(near_mem$dmem_req_op),
		      .dmem_req_priv(near_mem$dmem_req_priv),
		      .dmem_req_satp(near_mem$dmem_req_satp),
		      .dmem_req_sstatus_SUM(near_mem$dmem_req_sstatus_SUM),
		      .dmem_req_store_value(near_mem$dmem_req_store_value),
		      .imem_master_arready(near_mem$imem_master_arready),
		      .imem_master_awready(near_mem$imem_master_awready),
		      .imem_master_bresp(near_mem$imem_master_bresp),
		      .imem_master_bvalid(near_mem$imem_master_bvalid),
		      .imem_master_rdata(near_mem$imem_master_rdata),
		      .imem_master_rresp(near_mem$imem_master_rresp),
		      .imem_master_rvalid(near_mem$imem_master_rvalid),
		      .imem_master_wready(near_mem$imem_master_wready),
		      .imem_req_addr(near_mem$imem_req_addr),
		      .imem_req_f3(near_mem$imem_req_f3),
		      .imem_req_mstatus_MXR(near_mem$imem_req_mstatus_MXR),
		      .imem_req_priv(near_mem$imem_req_priv),
		      .imem_req_satp(near_mem$imem_req_satp),
		      .imem_req_sstatus_SUM(near_mem$imem_req_sstatus_SUM),
		      .near_mem_slave_araddr(near_mem$near_mem_slave_araddr),
		      .near_mem_slave_arprot(near_mem$near_mem_slave_arprot),
		      .near_mem_slave_arvalid(near_mem$near_mem_slave_arvalid),
		      .near_mem_slave_awaddr(near_mem$near_mem_slave_awaddr),
		      .near_mem_slave_awprot(near_mem$near_mem_slave_awprot),
		      .near_mem_slave_awvalid(near_mem$near_mem_slave_awvalid),
		      .near_mem_slave_bready(near_mem$near_mem_slave_bready),
		      .near_mem_slave_rready(near_mem$near_mem_slave_rready),
		      .near_mem_slave_wdata(near_mem$near_mem_slave_wdata),
		      .near_mem_slave_wstrb(near_mem$near_mem_slave_wstrb),
		      .near_mem_slave_wvalid(near_mem$near_mem_slave_wvalid),
		      .server_fence_request_put(near_mem$server_fence_request_put),
		      .EN_server_reset_request_put(near_mem$EN_server_reset_request_put),
		      .EN_server_reset_response_get(near_mem$EN_server_reset_response_get),
		      .EN_imem_req(near_mem$EN_imem_req),
		      .EN_dmem_req(near_mem$EN_dmem_req),
		      .EN_server_fence_i_request_put(near_mem$EN_server_fence_i_request_put),
		      .EN_server_fence_i_response_get(near_mem$EN_server_fence_i_response_get),
		      .EN_server_fence_request_put(near_mem$EN_server_fence_request_put),
		      .EN_server_fence_response_get(near_mem$EN_server_fence_response_get),
		      .EN_sfence_vma(near_mem$EN_sfence_vma),
		      .RDY_server_reset_request_put(near_mem$RDY_server_reset_request_put),
		      .RDY_server_reset_response_get(near_mem$RDY_server_reset_response_get),
		      .imem_valid(near_mem$imem_valid),
		      .imem_pc(near_mem$imem_pc),
		      .imem_instr(near_mem$imem_instr),
		      .imem_exc(near_mem$imem_exc),
		      .imem_exc_code(near_mem$imem_exc_code),
		      .imem_master_awvalid(near_mem$imem_master_awvalid),
		      .imem_master_awaddr(near_mem$imem_master_awaddr),
		      .imem_master_awprot(near_mem$imem_master_awprot),
		      .imem_master_wvalid(near_mem$imem_master_wvalid),
		      .imem_master_wdata(near_mem$imem_master_wdata),
		      .imem_master_wstrb(near_mem$imem_master_wstrb),
		      .imem_master_bready(near_mem$imem_master_bready),
		      .imem_master_arvalid(near_mem$imem_master_arvalid),
		      .imem_master_araddr(near_mem$imem_master_araddr),
		      .imem_master_arprot(near_mem$imem_master_arprot),
		      .imem_master_rready(near_mem$imem_master_rready),
		      .dmem_valid(near_mem$dmem_valid),
		      .dmem_word64(near_mem$dmem_word64),
		      .dmem_st_amo_val(),
		      .dmem_exc(near_mem$dmem_exc),
		      .dmem_exc_code(near_mem$dmem_exc_code),
		      .dmem_master_awvalid(near_mem$dmem_master_awvalid),
		      .dmem_master_awaddr(near_mem$dmem_master_awaddr),
		      .dmem_master_awprot(near_mem$dmem_master_awprot),
		      .dmem_master_wvalid(near_mem$dmem_master_wvalid),
		      .dmem_master_wdata(near_mem$dmem_master_wdata),
		      .dmem_master_wstrb(near_mem$dmem_master_wstrb),
		      .dmem_master_bready(near_mem$dmem_master_bready),
		      .dmem_master_arvalid(near_mem$dmem_master_arvalid),
		      .dmem_master_araddr(near_mem$dmem_master_araddr),
		      .dmem_master_arprot(near_mem$dmem_master_arprot),
		      .dmem_master_rready(near_mem$dmem_master_rready),
		      .RDY_server_fence_i_request_put(near_mem$RDY_server_fence_i_request_put),
		      .RDY_server_fence_i_response_get(near_mem$RDY_server_fence_i_response_get),
		      .RDY_server_fence_request_put(near_mem$RDY_server_fence_request_put),
		      .RDY_server_fence_response_get(near_mem$RDY_server_fence_response_get),
		      .RDY_sfence_vma(),
		      .near_mem_slave_awready(near_mem$near_mem_slave_awready),
		      .near_mem_slave_wready(near_mem$near_mem_slave_wready),
		      .near_mem_slave_bvalid(near_mem$near_mem_slave_bvalid),
		      .near_mem_slave_bresp(near_mem$near_mem_slave_bresp),
		      .near_mem_slave_arready(near_mem$near_mem_slave_arready),
		      .near_mem_slave_rvalid(near_mem$near_mem_slave_rvalid),
		      .near_mem_slave_rresp(near_mem$near_mem_slave_rresp),
		      .near_mem_slave_rdata(near_mem$near_mem_slave_rdata));

  // submodule stage1_f_reset_reqs
  FIFO20 #(.guarded(32'd1)) stage1_f_reset_reqs(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage1_f_reset_reqs$ENQ),
						.DEQ(stage1_f_reset_reqs$DEQ),
						.CLR(stage1_f_reset_reqs$CLR),
						.FULL_N(stage1_f_reset_reqs$FULL_N),
						.EMPTY_N(stage1_f_reset_reqs$EMPTY_N));

  // submodule stage1_f_reset_rsps
  FIFO20 #(.guarded(32'd1)) stage1_f_reset_rsps(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage1_f_reset_rsps$ENQ),
						.DEQ(stage1_f_reset_rsps$DEQ),
						.CLR(stage1_f_reset_rsps$CLR),
						.FULL_N(stage1_f_reset_rsps$FULL_N),
						.EMPTY_N(stage1_f_reset_rsps$EMPTY_N));

  // submodule stage2_f_reset_reqs
  FIFO20 #(.guarded(32'd1)) stage2_f_reset_reqs(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage2_f_reset_reqs$ENQ),
						.DEQ(stage2_f_reset_reqs$DEQ),
						.CLR(stage2_f_reset_reqs$CLR),
						.FULL_N(stage2_f_reset_reqs$FULL_N),
						.EMPTY_N(stage2_f_reset_reqs$EMPTY_N));

  // submodule stage2_f_reset_rsps
  FIFO20 #(.guarded(32'd1)) stage2_f_reset_rsps(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage2_f_reset_rsps$ENQ),
						.DEQ(stage2_f_reset_rsps$DEQ),
						.CLR(stage2_f_reset_rsps$CLR),
						.FULL_N(stage2_f_reset_rsps$FULL_N),
						.EMPTY_N(stage2_f_reset_rsps$EMPTY_N));

  // submodule stage2_mbox
  mkRISCV_MBox stage2_mbox(.CLK(CLK),
			   .RST_N(RST_N),
			   .req_f3(stage2_mbox$req_f3),
			   .req_is_OP_not_OP_32(stage2_mbox$req_is_OP_not_OP_32),
			   .req_v1(stage2_mbox$req_v1),
			   .req_v2(stage2_mbox$req_v2),
			   .set_verbosity_verbosity(stage2_mbox$set_verbosity_verbosity),
			   .EN_set_verbosity(stage2_mbox$EN_set_verbosity),
			   .EN_req_reset(stage2_mbox$EN_req_reset),
			   .EN_rsp_reset(stage2_mbox$EN_rsp_reset),
			   .EN_req(stage2_mbox$EN_req),
			   .RDY_set_verbosity(),
			   .RDY_req_reset(),
			   .RDY_rsp_reset(),
			   .valid(stage2_mbox$valid),
			   .word(stage2_mbox$word));

  // submodule stage3_f_reset_reqs
  FIFO20 #(.guarded(32'd1)) stage3_f_reset_reqs(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage3_f_reset_reqs$ENQ),
						.DEQ(stage3_f_reset_reqs$DEQ),
						.CLR(stage3_f_reset_reqs$CLR),
						.FULL_N(stage3_f_reset_reqs$FULL_N),
						.EMPTY_N(stage3_f_reset_reqs$EMPTY_N));

  // submodule stage3_f_reset_rsps
  FIFO20 #(.guarded(32'd1)) stage3_f_reset_rsps(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage3_f_reset_rsps$ENQ),
						.DEQ(stage3_f_reset_rsps$DEQ),
						.CLR(stage3_f_reset_rsps$CLR),
						.FULL_N(stage3_f_reset_rsps$FULL_N),
						.EMPTY_N(stage3_f_reset_rsps$EMPTY_N));

  // rule RL_rl_show_pipe
  assign CAN_FIRE_RL_rl_show_pipe =
	     NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d16 &&
	     rg_state != 4'd0 &&
	     rg_state != 4'd1 &&
	     rg_state != 4'd8 ;
  assign WILL_FIRE_RL_rl_show_pipe = CAN_FIRE_RL_rl_show_pipe ;

  // rule RL_rl_reset_complete
  assign CAN_FIRE_RL_rl_reset_complete =
	     gpr_regfile_RDY_server_reset_response_get__67__ETC___d779 &&
	     rg_state == 4'd1 ;
  assign WILL_FIRE_RL_rl_reset_complete = CAN_FIRE_RL_rl_reset_complete ;

  // rule RL_rl_pipe
  assign CAN_FIRE_RL_rl_pipe =
	     rg_state == 4'd2 &&
	     (stage3_rg_full ||
	      IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 !=
	      2'd0 ||
	      stage1_rg_full) &&
	     (stage3_rg_full ||
	      IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 !=
	      2'd3) &&
	     (stage3_rg_full ||
	      IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 !=
	      2'd0 ||
	      !stage1_rg_full ||
	      NOT_near_mem_imem_valid__69_70_OR_IF_stage2_rg_ETC___d788) &&
	     (NOT_rg_halt_93_94_AND_NOT_csr_regfile_interrup_ETC___d802 ||
	      IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 !=
	      2'd0 ||
	      stage3_rg_full) ;
  assign WILL_FIRE_RL_rl_pipe = CAN_FIRE_RL_rl_pipe ;

  // rule RL_rl_stage2_nonpipe
  assign CAN_FIRE_RL_rl_stage2_nonpipe =
	     rg_state == 4'd2 && !stage3_rg_full &&
	     IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 ==
	     2'd3 ;
  assign WILL_FIRE_RL_rl_stage2_nonpipe = CAN_FIRE_RL_rl_stage2_nonpipe ;

  // rule RL_rl_stage1_CSRR_W
  assign CAN_FIRE_RL_rl_stage1_CSRR_W = MUX_rg_state$write_1__SEL_1 ;
  assign WILL_FIRE_RL_rl_stage1_CSRR_W = MUX_rg_state$write_1__SEL_1 ;

  // rule RL_rl_stage1_CSRR_S_or_C
  assign CAN_FIRE_RL_rl_stage1_CSRR_S_or_C = MUX_rg_state$write_1__SEL_2 ;
  assign WILL_FIRE_RL_rl_stage1_CSRR_S_or_C = MUX_rg_state$write_1__SEL_2 ;

  // rule RL_rl_stage1_restart_after_csrrx
  assign CAN_FIRE_RL_rl_stage1_restart_after_csrrx = rg_state == 4'd4 ;
  assign WILL_FIRE_RL_rl_stage1_restart_after_csrrx =
	     CAN_FIRE_RL_rl_stage1_restart_after_csrrx ;

  // rule RL_rl_stage1_xRET
  assign CAN_FIRE_RL_rl_stage1_xRET =
	     rg_state_7_EQ_2_83_AND_NOT_rg_halt_93_94_AND_N_ETC___d866 &&
	     IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 ==
	     2'd0 &&
	     stage1_rg_full &&
	     near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d365 &&
	     (IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 ==
	      4'd7 ||
	      IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 ==
	      4'd8 ||
	      IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 ==
	      4'd9) ;
  assign WILL_FIRE_RL_rl_stage1_xRET = CAN_FIRE_RL_rl_stage1_xRET ;

  // rule RL_rl_stage1_FENCE_I
  assign CAN_FIRE_RL_rl_stage1_FENCE_I = MUX_rg_state$write_1__SEL_6 ;
  assign WILL_FIRE_RL_rl_stage1_FENCE_I = MUX_rg_state$write_1__SEL_6 ;

  // rule RL_rl_finish_FENCE_I
  assign CAN_FIRE_RL_rl_finish_FENCE_I =
	     near_mem$RDY_server_fence_i_response_get && rg_state == 4'd5 ;
  assign WILL_FIRE_RL_rl_finish_FENCE_I = CAN_FIRE_RL_rl_finish_FENCE_I ;

  // rule RL_rl_stage1_FENCE
  assign CAN_FIRE_RL_rl_stage1_FENCE = MUX_rg_state$write_1__SEL_7 ;
  assign WILL_FIRE_RL_rl_stage1_FENCE = MUX_rg_state$write_1__SEL_7 ;

  // rule RL_rl_finish_FENCE
  assign CAN_FIRE_RL_rl_finish_FENCE =
	     near_mem$RDY_server_fence_response_get && rg_state == 4'd6 ;
  assign WILL_FIRE_RL_rl_finish_FENCE = CAN_FIRE_RL_rl_finish_FENCE ;

  // rule RL_rl_stage1_SFENCE_VMA
  assign CAN_FIRE_RL_rl_stage1_SFENCE_VMA = MUX_rg_state$write_1__SEL_8 ;
  assign WILL_FIRE_RL_rl_stage1_SFENCE_VMA = MUX_rg_state$write_1__SEL_8 ;

  // rule RL_rl_finish_SFENCE_VMA
  assign CAN_FIRE_RL_rl_finish_SFENCE_VMA = rg_state == 4'd7 ;
  assign WILL_FIRE_RL_rl_finish_SFENCE_VMA =
	     CAN_FIRE_RL_rl_finish_SFENCE_VMA ;

  // rule RL_rl_stage1_WFI
  assign CAN_FIRE_RL_rl_stage1_WFI = MUX_rg_state$write_1__SEL_9 ;
  assign WILL_FIRE_RL_rl_stage1_WFI = MUX_rg_state$write_1__SEL_9 ;

  // rule RL_rl_WFI_resume
  assign CAN_FIRE_RL_rl_WFI_resume =
	     rg_state == 4'd8 && csr_regfile$wfi_resume ;
  assign WILL_FIRE_RL_rl_WFI_resume = CAN_FIRE_RL_rl_WFI_resume ;

  // rule RL_rl_reset_from_WFI
  assign CAN_FIRE_RL_rl_reset_from_WFI =
	     rg_state == 4'd8 && f_reset_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_rl_reset_from_WFI = MUX_rg_state$write_1__SEL_3 ;

  // rule RL_rl_stage1_trap
  assign CAN_FIRE_RL_rl_stage1_trap =
	     rg_state == 4'd3 ||
	     rg_state_7_EQ_2_83_AND_NOT_rg_halt_93_94_AND_N_ETC___d939 ;
  assign WILL_FIRE_RL_rl_stage1_trap = CAN_FIRE_RL_rl_stage1_trap ;

  // rule RL_rl_stage1_interrupt
  assign CAN_FIRE_RL_rl_stage1_interrupt =
	     csr_regfile$interrupt_pending[4] && rg_state == 4'd2 &&
	     stage1_rg_full &&
	     near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d191 &&
	     IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d954 &&
	     IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 ==
	     2'd0 &&
	     !stage3_rg_full ;
  assign WILL_FIRE_RL_rl_stage1_interrupt = CAN_FIRE_RL_rl_stage1_interrupt ;

  // rule RL_rl_reset_start
  assign CAN_FIRE_RL_rl_reset_start =
	     gpr_regfile_RDY_server_reset_request_put__47_A_ETC___d759 &&
	     rg_state == 4'd0 ;
  assign WILL_FIRE_RL_rl_reset_start = CAN_FIRE_RL_rl_reset_start ;

  // rule RL_stage3_rl_reset
  assign CAN_FIRE_RL_stage3_rl_reset =
	     stage3_f_reset_reqs$EMPTY_N && stage3_f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_stage3_rl_reset = CAN_FIRE_RL_stage3_rl_reset ;

  // rule RL_stage2_rl_reset
  assign CAN_FIRE_RL_stage2_rl_reset =
	     stage2_f_reset_reqs$EMPTY_N && stage2_f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_stage2_rl_reset = CAN_FIRE_RL_stage2_rl_reset ;

  // rule RL_stage1_rl_reset
  assign CAN_FIRE_RL_stage1_rl_reset =
	     stage1_f_reset_reqs$EMPTY_N && stage1_f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_stage1_rl_reset = CAN_FIRE_RL_stage1_rl_reset ;

  // inputs to muxes for submodule ports
  assign MUX_csr_regfile$write_csr_1__SEL_1 =
	     WILL_FIRE_RL_rl_stage1_CSRR_W && csr_regfile$access_permitted ;
  assign MUX_csr_regfile$write_csr_1__SEL_2 =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	     csr_regfile$access_permitted ;
  assign MUX_near_mem$imem_req_1__SEL_1 =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_rg_halt_93_94_AND_NOT_csr_regfile_interrup_ETC___d845 ;
  assign MUX_near_mem$imem_req_1__SEL_2 =
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;
  assign MUX_near_mem$imem_req_1__SEL_4 =
	     WILL_FIRE_RL_rl_stage1_trap || WILL_FIRE_RL_rl_stage2_nonpipe ;
  assign MUX_rg_cur_priv$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ;
  assign MUX_rg_inum$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 ==
	     2'd2 ;
  assign MUX_rg_inum$write_1__SEL_4 =
	     WILL_FIRE_RL_rl_stage1_trap || WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ;
  assign MUX_rg_state$write_1__SEL_1 =
	     rg_state_7_EQ_2_83_AND_NOT_rg_halt_93_94_AND_N_ETC___d866 &&
	     IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 ==
	     2'd0 &&
	     stage1_rg_full &&
	     near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d365 &&
	     IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 ==
	     4'd2 ;
  assign MUX_rg_state$write_1__SEL_2 =
	     rg_state_7_EQ_2_83_AND_NOT_rg_halt_93_94_AND_N_ETC___d866 &&
	     IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 ==
	     2'd0 &&
	     stage1_rg_full &&
	     near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d365 &&
	     IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 ==
	     4'd3 ;
  assign MUX_rg_state$write_1__SEL_3 =
	     CAN_FIRE_RL_rl_reset_from_WFI && !WILL_FIRE_RL_rl_WFI_resume ;
  assign MUX_rg_state$write_1__SEL_5 =
	     WILL_FIRE_RL_rl_stage1_trap || WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_reset_complete ;
  assign MUX_rg_state$write_1__SEL_6 =
	     near_mem$RDY_server_fence_i_request_put &&
	     rg_state_7_EQ_2_83_AND_NOT_rg_halt_93_94_AND_N_ETC___d919 ;
  assign MUX_rg_state$write_1__SEL_7 =
	     near_mem$RDY_server_fence_request_put &&
	     rg_state_7_EQ_2_83_AND_NOT_rg_halt_93_94_AND_N_ETC___d925 ;
  assign MUX_rg_state$write_1__SEL_8 =
	     rg_state_7_EQ_2_83_AND_NOT_rg_halt_93_94_AND_N_ETC___d866 &&
	     IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 ==
	     2'd0 &&
	     stage1_rg_full &&
	     near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d365 &&
	     IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 ==
	     4'd6 ;
  assign MUX_rg_state$write_1__SEL_9 =
	     rg_state_7_EQ_2_83_AND_NOT_rg_halt_93_94_AND_N_ETC___d866 &&
	     IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 ==
	     2'd0 &&
	     stage1_rg_full &&
	     near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d365 &&
	     IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 ==
	     4'd10 ;
  always@(near_mem$imem_instr or
	  csr_regfile$read_csr or
	  y__h10623 or
	  IF_csr_regfile_read_csr_IF_NOT_stage1_rg_full__ETC___d899)
  begin
    case (near_mem$imem_instr[14:12])
      3'b010, 3'b110:
	  MUX_csr_regfile$write_csr_2__VAL_2 =
	      IF_csr_regfile_read_csr_IF_NOT_stage1_rg_full__ETC___d899;
      default: MUX_csr_regfile$write_csr_2__VAL_2 =
		   csr_regfile$read_csr[31:0] & y__h10623;
    endcase
  end
  assign MUX_rg_inum$write_1__VAL_1 = rg_inum + 64'd1 ;
  assign MUX_rg_state$write_1__VAL_1 =
	     csr_regfile$access_permitted ? 4'd4 : 4'd3 ;
  assign MUX_stage1_rg_full$write_1__VAL_11 =
	     NOT_rg_halt_93_94_AND_NOT_csr_regfile_interrup_ETC___d845 ||
	     (rg_halt || csr_regfile$interrupt_pending[4] ||
	      IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 !=
	      2'd2 &&
	      IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 !=
	      2'd0 ||
	      NOT_near_mem_imem_valid__69_70_OR_IF_stage2_rg_ETC___d799) &&
	     stage1_rg_full ;
  assign MUX_stage2_rg_full$write_1__VAL_3 =
	     !rg_halt && !csr_regfile$interrupt_pending[4] &&
	     stage1_rg_full &&
	     near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d423 ||
	     IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 !=
	     2'd2 &&
	     IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 !=
	     2'd0 ;

  // register cfg_logdelay
  assign cfg_logdelay$D_IN = 64'h0 ;
  assign cfg_logdelay$EN = 1'b0 ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN =
	     TASK_testplusargs___d761 ?
	       4'd2 :
	       (TASK_testplusargs___d762 ? 4'd1 : 4'd0) ;
  assign cfg_verbosity$EN =
	     gpr_regfile_RDY_server_reset_request_put__47_A_ETC___d759 &&
	     rg_state == 4'd0 ;

  // register rg_cur_priv
  always@(MUX_rg_cur_priv$write_1__SEL_1 or
	  csr_regfile$csr_trap_actions or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  csr_regfile$csr_ret_actions or WILL_FIRE_RL_rl_reset_start)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_cur_priv$write_1__SEL_1:
	  rg_cur_priv$D_IN = csr_regfile$csr_trap_actions[1:0];
      WILL_FIRE_RL_rl_stage1_xRET:
	  rg_cur_priv$D_IN = csr_regfile$csr_ret_actions[33:32];
      WILL_FIRE_RL_rl_reset_start: rg_cur_priv$D_IN = 2'b11;
      default: rg_cur_priv$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign rg_cur_priv$EN =
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_halt
  assign rg_halt$D_IN = 1'd0 ;
  assign rg_halt$EN = CAN_FIRE_RL_rl_reset_start ;

  // register rg_inum
  always@(MUX_rg_inum$write_1__SEL_1 or
	  MUX_rg_inum$write_1__VAL_1 or
	  MUX_csr_regfile$write_csr_1__SEL_1 or
	  MUX_csr_regfile$write_csr_1__SEL_2 or
	  MUX_rg_inum$write_1__SEL_4 or WILL_FIRE_RL_rl_reset_start)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_inum$write_1__SEL_1: rg_inum$D_IN = MUX_rg_inum$write_1__VAL_1;
      MUX_csr_regfile$write_csr_1__SEL_1:
	  rg_inum$D_IN = MUX_rg_inum$write_1__VAL_1;
      MUX_csr_regfile$write_csr_1__SEL_2:
	  rg_inum$D_IN = MUX_rg_inum$write_1__VAL_1;
      MUX_rg_inum$write_1__SEL_4: rg_inum$D_IN = MUX_rg_inum$write_1__VAL_1;
      WILL_FIRE_RL_rl_reset_start: rg_inum$D_IN = 64'd1;
      default: rg_inum$D_IN = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rg_inum$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 ==
	     2'd2 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W && csr_regfile$access_permitted ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	     csr_regfile$access_permitted ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_start_CPI_cycles
  assign rg_start_CPI_cycles$D_IN = csr_regfile$read_csr_mcycle ;
  assign rg_start_CPI_cycles$EN = CAN_FIRE_RL_rl_reset_complete ;

  // register rg_start_CPI_instrs
  assign rg_start_CPI_instrs$D_IN = csr_regfile$read_csr_minstret ;
  assign rg_start_CPI_instrs$EN = CAN_FIRE_RL_rl_reset_complete ;

  // register rg_state
  always@(WILL_FIRE_RL_rl_stage1_CSRR_W or
	  MUX_rg_state$write_1__VAL_1 or
	  WILL_FIRE_RL_rl_stage1_CSRR_S_or_C or
	  WILL_FIRE_RL_rl_reset_from_WFI or
	  WILL_FIRE_RL_rl_reset_start or
	  MUX_rg_state$write_1__SEL_5 or
	  WILL_FIRE_RL_rl_stage1_FENCE_I or
	  WILL_FIRE_RL_rl_stage1_FENCE or
	  WILL_FIRE_RL_rl_stage1_SFENCE_VMA or WILL_FIRE_RL_rl_stage1_WFI)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_stage1_CSRR_W:
	  rg_state$D_IN = MUX_rg_state$write_1__VAL_1;
      WILL_FIRE_RL_rl_stage1_CSRR_S_or_C:
	  rg_state$D_IN = MUX_rg_state$write_1__VAL_1;
      WILL_FIRE_RL_rl_reset_from_WFI: rg_state$D_IN = 4'd0;
      WILL_FIRE_RL_rl_reset_start: rg_state$D_IN = 4'd1;
      MUX_rg_state$write_1__SEL_5: rg_state$D_IN = 4'd2;
      WILL_FIRE_RL_rl_stage1_FENCE_I: rg_state$D_IN = 4'd5;
      WILL_FIRE_RL_rl_stage1_FENCE: rg_state$D_IN = 4'd6;
      WILL_FIRE_RL_rl_stage1_SFENCE_VMA: rg_state$D_IN = 4'd7;
      WILL_FIRE_RL_rl_stage1_WFI: rg_state$D_IN = 4'd8;
      default: rg_state$D_IN = 4'b1010 /* unspecified value */ ;
    endcase
  end
  assign rg_state$EN =
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_reset_from_WFI ||
	     WILL_FIRE_RL_rl_reset_start ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_reset_complete ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_stage1_WFI ;

  // register stage1_rg_full
  always@(WILL_FIRE_RL_stage1_rl_reset or
	  WILL_FIRE_RL_rl_stage1_interrupt or
	  WILL_FIRE_RL_rl_stage1_trap or
	  WILL_FIRE_RL_rl_WFI_resume or
	  WILL_FIRE_RL_rl_finish_SFENCE_VMA or
	  WILL_FIRE_RL_rl_finish_FENCE or
	  WILL_FIRE_RL_rl_finish_FENCE_I or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  WILL_FIRE_RL_rl_stage2_nonpipe or
	  WILL_FIRE_RL_rl_pipe or
	  MUX_stage1_rg_full$write_1__VAL_11 or
	  WILL_FIRE_RL_rl_reset_complete)
  case (1'b1)
    WILL_FIRE_RL_stage1_rl_reset: stage1_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_stage1_interrupt || WILL_FIRE_RL_rl_stage1_trap ||
    WILL_FIRE_RL_rl_WFI_resume ||
    WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
    WILL_FIRE_RL_rl_finish_FENCE ||
    WILL_FIRE_RL_rl_finish_FENCE_I ||
    WILL_FIRE_RL_rl_stage1_xRET ||
    WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
    WILL_FIRE_RL_rl_stage2_nonpipe:
	stage1_rg_full$D_IN = 1'd1;
    WILL_FIRE_RL_rl_pipe:
	stage1_rg_full$D_IN = MUX_stage1_rg_full$write_1__VAL_11;
    WILL_FIRE_RL_rl_reset_complete: stage1_rg_full$D_IN = 1'd1;
    default: stage1_rg_full$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stage1_rg_full$EN =
	     WILL_FIRE_RL_rl_pipe || WILL_FIRE_RL_stage1_rl_reset ||
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_reset_complete ;

  // register stage2_rg_full
  assign stage2_rg_full$D_IN =
	     !WILL_FIRE_RL_stage2_rl_reset &&
	     !WILL_FIRE_RL_rl_stage2_nonpipe &&
	     MUX_stage2_rg_full$write_1__VAL_3 ;
  assign stage2_rg_full$EN =
	     WILL_FIRE_RL_rl_pipe || WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_stage2_rl_reset ;

  // register stage2_rg_stage2
  assign stage2_rg_stage2$D_IN =
	     { rg_cur_priv,
	       near_mem$imem_pc,
	       near_mem$imem_instr,
	       IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d566,
	       x_out_data_to_stage2_rd__h4499,
	       x_out_data_to_stage2_addr__h4500,
	       x_out_data_to_stage2_val1__h4501,
	       x_out_data_to_stage2_val2__h4502 } ;
  assign stage2_rg_stage2$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_rg_halt_93_94_AND_NOT_csr_regfile_interrup_ETC___d823 ;

  // register stage3_rg_full
  assign stage3_rg_full$D_IN =
	     !WILL_FIRE_RL_stage3_rl_reset &&
	     IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 ==
	     2'd2 ;
  assign stage3_rg_full$EN =
	     WILL_FIRE_RL_rl_pipe || WILL_FIRE_RL_stage3_rl_reset ;

  // register stage3_rg_stage3
  assign stage3_rg_stage3$D_IN =
	     { stage2_rg_stage2[167:104],
	       stage2_rg_stage2[169:168],
	       stage2_rg_stage2[103:101] == 3'd0 ||
	       IF_stage2_rg_stage2_4_BITS_103_TO_101_5_EQ_1_7_ETC___d117,
	       x_out_data_to_stage3_rd__h3892,
	       x_out_data_to_stage3_rd_val__h3893 } ;
  assign stage3_rg_stage3$EN = MUX_rg_inum$write_1__SEL_1 ;

  // submodule csr_regfile
  assign csr_regfile$access_permitted_csr_addr = near_mem$imem_instr[31:20] ;
  assign csr_regfile$access_permitted_priv = rg_cur_priv ;
  assign csr_regfile$access_permitted_read_not_write =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C && rs1_val__h10335 == 32'd0 ;
  assign csr_regfile$csr_counter_read_fault_csr_addr = 12'h0 ;
  assign csr_regfile$csr_counter_read_fault_priv = 2'h0 ;
  always@(IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486)
  begin
    case (IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486)
      4'd7: csr_regfile$csr_ret_actions_from_priv = 2'b11;
      4'd8: csr_regfile$csr_ret_actions_from_priv = 2'b01;
      default: csr_regfile$csr_ret_actions_from_priv = 2'b0;
    endcase
  end
  always@(WILL_FIRE_RL_rl_stage1_interrupt or
	  csr_regfile$interrupt_pending or
	  WILL_FIRE_RL_rl_stage2_nonpipe or
	  near_mem$dmem_exc_code or
	  WILL_FIRE_RL_rl_stage1_trap or x_out_trap_info_exc_code__h6287)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_stage1_interrupt:
	  csr_regfile$csr_trap_actions_exc_code =
	      csr_regfile$interrupt_pending[3:0];
      WILL_FIRE_RL_rl_stage2_nonpipe:
	  csr_regfile$csr_trap_actions_exc_code = near_mem$dmem_exc_code;
      WILL_FIRE_RL_rl_stage1_trap:
	  csr_regfile$csr_trap_actions_exc_code =
	      x_out_trap_info_exc_code__h6287;
      default: csr_regfile$csr_trap_actions_exc_code =
		   4'b1010 /* unspecified value */ ;
    endcase
  end
  assign csr_regfile$csr_trap_actions_from_priv = rg_cur_priv ;
  assign csr_regfile$csr_trap_actions_interrupt =
	     !WILL_FIRE_RL_rl_stage2_nonpipe && !WILL_FIRE_RL_rl_stage1_trap ;
  assign csr_regfile$csr_trap_actions_pc =
	     WILL_FIRE_RL_rl_stage2_nonpipe ?
	       stage2_rg_stage2[167:136] :
	       near_mem$imem_pc ;
  always@(WILL_FIRE_RL_rl_stage1_interrupt or
	  WILL_FIRE_RL_rl_stage2_nonpipe or
	  stage2_rg_stage2 or WILL_FIRE_RL_rl_stage1_trap or value__h6328)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_stage1_interrupt:
	  csr_regfile$csr_trap_actions_xtval = 32'd0;
      WILL_FIRE_RL_rl_stage2_nonpipe:
	  csr_regfile$csr_trap_actions_xtval = stage2_rg_stage2[95:64];
      WILL_FIRE_RL_rl_stage1_trap:
	  csr_regfile$csr_trap_actions_xtval = value__h6328;
      default: csr_regfile$csr_trap_actions_xtval =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign csr_regfile$external_interrupt_req_set_not_clear =
	     external_interrupt_req_set_not_clear ;
  assign csr_regfile$interrupt_pending_cur_priv = rg_cur_priv ;
  assign csr_regfile$mav_read_csr_csr_addr = 12'h0 ;
  assign csr_regfile$read_csr_csr_addr = near_mem$imem_instr[31:20] ;
  assign csr_regfile$read_csr_port2_csr_addr = 12'h0 ;
  assign csr_regfile$software_interrupt_req_set_not_clear =
	     software_interrupt_req_set_not_clear ;
  assign csr_regfile$timer_interrupt_req_set_not_clear =
	     timer_interrupt_req_set_not_clear ;
  assign csr_regfile$write_csr_csr_addr = near_mem$imem_instr[31:20] ;
  assign csr_regfile$write_csr_word =
	     MUX_csr_regfile$write_csr_1__SEL_1 ?
	       rs1_val__h9811 :
	       MUX_csr_regfile$write_csr_2__VAL_2 ;
  assign csr_regfile$EN_server_reset_request_put =
	     CAN_FIRE_RL_rl_reset_start ;
  assign csr_regfile$EN_server_reset_response_get =
	     CAN_FIRE_RL_rl_reset_complete ;
  assign csr_regfile$EN_mav_read_csr = 1'b0 ;
  assign csr_regfile$EN_write_csr =
	     WILL_FIRE_RL_rl_stage1_CSRR_W && csr_regfile$access_permitted ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	     csr_regfile$access_permitted ;
  assign csr_regfile$EN_csr_trap_actions =
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_trap ;
  assign csr_regfile$EN_csr_ret_actions = CAN_FIRE_RL_rl_stage1_xRET ;
  assign csr_regfile$EN_csr_minstret_incr =
	     WILL_FIRE_RL_rl_pipe && stage3_rg_full ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W && csr_regfile$access_permitted ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	     csr_regfile$access_permitted ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ;
  assign csr_regfile$EN_external_interrupt_req = EN_external_interrupt_req ;
  assign csr_regfile$EN_timer_interrupt_req = EN_timer_interrupt_req ;
  assign csr_regfile$EN_software_interrupt_req = EN_software_interrupt_req ;

  // submodule f_reset_reqs
  assign f_reset_reqs$ENQ = EN_hart0_server_reset_request_put ;
  assign f_reset_reqs$DEQ =
	     gpr_regfile_RDY_server_reset_request_put__47_A_ETC___d759 &&
	     rg_state == 4'd0 ;
  assign f_reset_reqs$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$ENQ =
	     gpr_regfile_RDY_server_reset_response_get__67__ETC___d779 &&
	     rg_state == 4'd1 ;
  assign f_reset_rsps$DEQ = EN_hart0_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule gpr_regfile
  assign gpr_regfile$read_rs1_port2_rs1 = 5'h0 ;
  assign gpr_regfile$read_rs1_rs1 = near_mem$imem_instr[19:15] ;
  assign gpr_regfile$read_rs2_rs2 = near_mem$imem_instr[24:20] ;
  assign gpr_regfile$write_rd_rd =
	     (MUX_csr_regfile$write_csr_1__SEL_1 ||
	      MUX_csr_regfile$write_csr_1__SEL_2) ?
	       near_mem$imem_instr[11:7] :
	       stage3_rg_stage3[36:32] ;
  assign gpr_regfile$write_rd_rd_val =
	     (MUX_csr_regfile$write_csr_1__SEL_1 ||
	      MUX_csr_regfile$write_csr_1__SEL_2) ?
	       csr_regfile$read_csr[31:0] :
	       stage3_rg_stage3[31:0] ;
  assign gpr_regfile$EN_server_reset_request_put =
	     CAN_FIRE_RL_rl_reset_start ;
  assign gpr_regfile$EN_server_reset_response_get =
	     CAN_FIRE_RL_rl_reset_complete ;
  assign gpr_regfile$EN_write_rd =
	     WILL_FIRE_RL_rl_pipe && stage3_rg_full && stage3_rg_stage3[37] ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W && csr_regfile$access_permitted ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	     csr_regfile$access_permitted ;

  // submodule near_mem
  assign near_mem$dmem_master_arready = dmem_master_arready ;
  assign near_mem$dmem_master_awready = dmem_master_awready ;
  assign near_mem$dmem_master_bresp = dmem_master_bresp ;
  assign near_mem$dmem_master_bvalid = dmem_master_bvalid ;
  assign near_mem$dmem_master_rdata = dmem_master_rdata ;
  assign near_mem$dmem_master_rresp = dmem_master_rresp ;
  assign near_mem$dmem_master_rvalid = dmem_master_rvalid ;
  assign near_mem$dmem_master_wready = dmem_master_wready ;
  assign near_mem$dmem_req_addr = x_out_data_to_stage2_addr__h4500 ;
  assign near_mem$dmem_req_amo_funct7 =
	     x_out_data_to_stage2_val1__h4501[6:0] ;
  assign near_mem$dmem_req_f3 = near_mem$imem_instr[14:12] ;
  assign near_mem$dmem_req_mstatus_MXR = csr_regfile$read_mstatus[19] ;
  always@(IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d566)
  begin
    case (IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d566)
      3'd1: near_mem$dmem_req_op = 2'd0;
      3'd2: near_mem$dmem_req_op = 2'd1;
      default: near_mem$dmem_req_op = 2'd2;
    endcase
  end
  assign near_mem$dmem_req_priv =
	     csr_regfile$read_mstatus[17] ?
	       csr_regfile$read_mstatus[12:11] :
	       rg_cur_priv ;
  assign near_mem$dmem_req_satp = csr_regfile$read_satp ;
  assign near_mem$dmem_req_sstatus_SUM = 1'd0 ;
  assign near_mem$dmem_req_store_value =
	     { 32'd0, x_out_data_to_stage2_val2__h4502 } ;
  assign near_mem$imem_master_arready = imem_master_arready ;
  assign near_mem$imem_master_awready = imem_master_awready ;
  assign near_mem$imem_master_bresp = imem_master_bresp ;
  assign near_mem$imem_master_bvalid = imem_master_bvalid ;
  assign near_mem$imem_master_rdata = imem_master_rdata ;
  assign near_mem$imem_master_rresp = imem_master_rresp ;
  assign near_mem$imem_master_rvalid = imem_master_rvalid ;
  assign near_mem$imem_master_wready = imem_master_wready ;
  always@(WILL_FIRE_RL_rl_stage1_xRET or
	  csr_regfile$csr_ret_actions or
	  WILL_FIRE_RL_rl_stage1_interrupt or
	  MUX_near_mem$imem_req_1__SEL_4 or
	  csr_regfile$csr_trap_actions or
	  WILL_FIRE_RL_rl_reset_complete or
	  pc_reset_value or
	  MUX_near_mem$imem_req_1__SEL_1 or
	  x_out_next_pc__h4458 or MUX_near_mem$imem_req_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_stage1_xRET:
	  near_mem$imem_req_addr = csr_regfile$csr_ret_actions[65:34];
      WILL_FIRE_RL_rl_stage1_interrupt || MUX_near_mem$imem_req_1__SEL_4:
	  near_mem$imem_req_addr = csr_regfile$csr_trap_actions[97:66];
      WILL_FIRE_RL_rl_reset_complete:
	  near_mem$imem_req_addr = pc_reset_value[31:0];
      MUX_near_mem$imem_req_1__SEL_1:
	  near_mem$imem_req_addr = x_out_next_pc__h4458;
      MUX_near_mem$imem_req_1__SEL_2:
	  near_mem$imem_req_addr = x_out_next_pc__h4458;
      default: near_mem$imem_req_addr = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign near_mem$imem_req_f3 = 3'b010 ;
  assign near_mem$imem_req_mstatus_MXR =
	     (MUX_near_mem$imem_req_1__SEL_1 ||
	      MUX_near_mem$imem_req_1__SEL_2 ||
	      MUX_near_mem$imem_req_1__SEL_4 ||
	      WILL_FIRE_RL_rl_reset_complete ||
	      WILL_FIRE_RL_rl_stage1_xRET) ?
	       csr_regfile$read_mstatus[19] :
	       csr_regfile$csr_trap_actions[53] ;
  always@(WILL_FIRE_RL_rl_stage1_xRET or
	  csr_regfile$csr_ret_actions or
	  WILL_FIRE_RL_rl_stage1_interrupt or
	  MUX_near_mem$imem_req_1__SEL_4 or
	  csr_regfile$csr_trap_actions or
	  MUX_near_mem$imem_req_1__SEL_1 or
	  MUX_near_mem$imem_req_1__SEL_2 or
	  WILL_FIRE_RL_rl_reset_complete or rg_cur_priv)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_stage1_xRET:
	  near_mem$imem_req_priv = csr_regfile$csr_ret_actions[33:32];
      WILL_FIRE_RL_rl_stage1_interrupt || MUX_near_mem$imem_req_1__SEL_4:
	  near_mem$imem_req_priv = csr_regfile$csr_trap_actions[1:0];
      MUX_near_mem$imem_req_1__SEL_1 || MUX_near_mem$imem_req_1__SEL_2 ||
      WILL_FIRE_RL_rl_reset_complete:
	  near_mem$imem_req_priv = rg_cur_priv;
      default: near_mem$imem_req_priv = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign near_mem$imem_req_satp = csr_regfile$read_satp ;
  assign near_mem$imem_req_sstatus_SUM =
	     WILL_FIRE_RL_rl_stage1_interrupt &&
	     csr_regfile$csr_trap_actions[52] ;
  assign near_mem$near_mem_slave_araddr = near_mem_slave_araddr ;
  assign near_mem$near_mem_slave_arprot = near_mem_slave_arprot ;
  assign near_mem$near_mem_slave_arvalid = near_mem_slave_arvalid ;
  assign near_mem$near_mem_slave_awaddr = near_mem_slave_awaddr ;
  assign near_mem$near_mem_slave_awprot = near_mem_slave_awprot ;
  assign near_mem$near_mem_slave_awvalid = near_mem_slave_awvalid ;
  assign near_mem$near_mem_slave_bready = near_mem_slave_bready ;
  assign near_mem$near_mem_slave_rready = near_mem_slave_rready ;
  assign near_mem$near_mem_slave_wdata = near_mem_slave_wdata ;
  assign near_mem$near_mem_slave_wstrb = near_mem_slave_wstrb ;
  assign near_mem$near_mem_slave_wvalid = near_mem_slave_wvalid ;
  assign near_mem$server_fence_request_put =
	     8'b10101010 /* unspecified value */  ;
  assign near_mem$EN_server_reset_request_put = CAN_FIRE_RL_rl_reset_start ;
  assign near_mem$EN_server_reset_response_get =
	     CAN_FIRE_RL_rl_reset_complete ;
  assign near_mem$EN_imem_req =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_rg_halt_93_94_AND_NOT_csr_regfile_interrup_ETC___d845 ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_reset_complete ||
	     WILL_FIRE_RL_rl_stage1_xRET ;
  assign near_mem$EN_dmem_req =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_rg_halt_93_94_AND_NOT_csr_regfile_interrup_ETC___d823 &&
	     (IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d566 ==
	      3'd1 ||
	      IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d566 ==
	      3'd2 ||
	      IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d566 ==
	      3'd4) ;
  assign near_mem$EN_server_fence_i_request_put =
	     MUX_rg_state$write_1__SEL_6 ;
  assign near_mem$EN_server_fence_i_response_get =
	     CAN_FIRE_RL_rl_finish_FENCE_I ;
  assign near_mem$EN_server_fence_request_put = MUX_rg_state$write_1__SEL_7 ;
  assign near_mem$EN_server_fence_response_get = CAN_FIRE_RL_rl_finish_FENCE ;
  assign near_mem$EN_sfence_vma = MUX_rg_state$write_1__SEL_8 ;

  // submodule stage1_f_reset_reqs
  assign stage1_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stage1_f_reset_reqs$DEQ = CAN_FIRE_RL_stage1_rl_reset ;
  assign stage1_f_reset_reqs$CLR = 1'b0 ;

  // submodule stage1_f_reset_rsps
  assign stage1_f_reset_rsps$ENQ = CAN_FIRE_RL_stage1_rl_reset ;
  assign stage1_f_reset_rsps$DEQ = CAN_FIRE_RL_rl_reset_complete ;
  assign stage1_f_reset_rsps$CLR = 1'b0 ;

  // submodule stage2_f_reset_reqs
  assign stage2_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stage2_f_reset_reqs$DEQ = CAN_FIRE_RL_stage2_rl_reset ;
  assign stage2_f_reset_reqs$CLR = 1'b0 ;

  // submodule stage2_f_reset_rsps
  assign stage2_f_reset_rsps$ENQ = CAN_FIRE_RL_stage2_rl_reset ;
  assign stage2_f_reset_rsps$DEQ = CAN_FIRE_RL_rl_reset_complete ;
  assign stage2_f_reset_rsps$CLR = 1'b0 ;

  // submodule stage2_mbox
  assign stage2_mbox$req_f3 = near_mem$imem_instr[14:12] ;
  assign stage2_mbox$req_is_OP_not_OP_32 = !near_mem$imem_instr[3] ;
  assign stage2_mbox$req_v1 = x_out_data_to_stage2_val1__h4501 ;
  assign stage2_mbox$req_v2 = x_out_data_to_stage2_val2__h4502 ;
  assign stage2_mbox$set_verbosity_verbosity = 4'h0 ;
  assign stage2_mbox$EN_set_verbosity = 1'b0 ;
  assign stage2_mbox$EN_req_reset = 1'b0 ;
  assign stage2_mbox$EN_rsp_reset = 1'b0 ;
  assign stage2_mbox$EN_req =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_rg_halt_93_94_AND_NOT_csr_regfile_interrup_ETC___d823 &&
	     IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d566 ==
	     3'd3 ;

  // submodule stage3_f_reset_reqs
  assign stage3_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stage3_f_reset_reqs$DEQ = CAN_FIRE_RL_stage3_rl_reset ;
  assign stage3_f_reset_reqs$CLR = 1'b0 ;

  // submodule stage3_f_reset_rsps
  assign stage3_f_reset_rsps$ENQ = CAN_FIRE_RL_stage3_rl_reset ;
  assign stage3_f_reset_rsps$DEQ = CAN_FIRE_RL_rl_reset_complete ;
  assign stage3_f_reset_rsps$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_NOT_near_mem_imem_instr__71_BITS_14_TO_12_9_ETC___d430 =
	     NOT_near_mem_imem_instr__71_BITS_14_TO_12_94_E_ETC___d269 ?
	       4'd11 :
	       4'd0 ;
  assign IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 =
	     near_mem$imem_exc ?
	       4'd11 :
	       IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d484 ;
  assign IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d941 =
	     near_mem$imem_pc == csr_regfile$csr_trap_actions[97:66] ;
  assign IF_csr_regfile_read_csr_IF_NOT_stage1_rg_full__ETC___d899 =
	     csr_regfile$read_csr[31:0] | rs1_val__h10335 ;
  assign IF_near_mem_dmem_valid__5_THEN_IF_near_mem_dme_ETC___d88 =
	     near_mem$dmem_valid ? (near_mem$dmem_exc ? 2'd3 : 2'd2) : 2'd1 ;
  assign IF_near_mem_imem_instr__71_BITS_19_TO_15_72_EQ_ETC___d229 =
	     rs1_val_bypassed__h2508 == rs2_val_bypassed__h2514 ;
  assign IF_near_mem_imem_instr__71_BITS_19_TO_15_72_EQ_ETC___d231 =
	     (rs1_val_bypassed__h2508 ^ 32'h80000000) <
	     (rs2_val_bypassed__h2514 ^ 32'h80000000) ;
  assign IF_near_mem_imem_instr__71_BITS_19_TO_15_72_EQ_ETC___d233 =
	     rs1_val_bypassed__h2508 < rs2_val_bypassed__h2514 ;
  assign IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d328 =
	     (near_mem$imem_instr[6:0] == 7'b1100011) ?
	       near_mem$imem_instr[14:12] != 3'b0 &&
	       near_mem$imem_instr[14:12] != 3'b001 &&
	       near_mem$imem_instr[14:12] != 3'b100 &&
	       near_mem$imem_instr[14:12] != 3'b101 &&
	       near_mem$imem_instr[14:12] != 3'b110 &&
	       near_mem$imem_instr[14:12] != 3'b111 ||
	       IF_near_mem_imem_instr__71_BITS_14_TO_12_94_EQ_ETC___d240 :
	       (near_mem$imem_instr[6:0] != 7'b0110011 ||
		near_mem$imem_instr[31:25] != 7'b0000001) &&
	       (((near_mem$imem_instr[6:0] == 7'b0010011 ||
		  near_mem$imem_instr[6:0] == 7'b0110011) &&
		 (near_mem$imem_instr[14:12] == 3'b001 ||
		  near_mem$imem_instr[14:12] == 3'b101)) ?
		  near_mem$imem_instr[25] :
		  CASE_near_memimem_instr_BITS_6_TO_0_0b10011_N_ETC__q11) ;
  assign IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d411 =
	     (near_mem$imem_instr[6:0] == 7'b1100011) ?
	       (near_mem$imem_instr[14:12] == 3'b0 ||
		near_mem$imem_instr[14:12] == 3'b001 ||
		near_mem$imem_instr[14:12] == 3'b100 ||
		near_mem$imem_instr[14:12] == 3'b101 ||
		near_mem$imem_instr[14:12] == 3'b110 ||
		near_mem$imem_instr[14:12] == 3'b111) &&
	       IF_near_mem_imem_instr__71_BITS_14_TO_12_94_EQ_ETC___d345 :
	       near_mem$imem_instr[6:0] == 7'b0110011 &&
	       near_mem$imem_instr[31:25] == 7'b0000001 ||
	       (((near_mem$imem_instr[6:0] == 7'b0010011 ||
		  near_mem$imem_instr[6:0] == 7'b0110011) &&
		 (near_mem$imem_instr[14:12] == 3'b001 ||
		  near_mem$imem_instr[14:12] == 3'b101)) ?
		  !near_mem$imem_instr[25] :
		  CASE_near_memimem_instr_BITS_6_TO_0_0b10011_n_ETC__q13) ;
  assign IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d662 =
	     ((near_mem$imem_instr[6:0] == 7'b0010011 ||
	       near_mem$imem_instr[6:0] == 7'b0110011) &&
	      (near_mem$imem_instr[14:12] == 3'b001 ||
	       near_mem$imem_instr[14:12] == 3'b101)) ?
	       alu_outputs___1_val1__h4746 :
	       IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d661 ;
  assign IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d954 =
	     IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d411 ||
	     IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d420 ||
	     near_mem$imem_exc ||
	     IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d328 &&
	     IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d362 ;
  assign IF_rg_cur_priv_9_EQ_0b11_43_OR_rg_cur_priv_9_E_ETC___d462 =
	     ((rg_cur_priv == 2'b11 ||
	       rg_cur_priv == 2'b01 && !csr_regfile$read_mstatus[22]) &&
	      near_mem$imem_instr[31:20] == 12'b000100000010) ?
	       4'd8 :
	       (rg_cur_priv_9_EQ_0b11_43_OR_rg_cur_priv_9_EQ_0_ETC___d460 ?
		  4'd10 :
		  4'd11) ;
  assign IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d154 =
	     stage2_rg_full ?
	       CASE_stage2_rg_stage2_BITS_103_TO_101_0_2_1_IF_ETC__q5 :
	       2'd0 ;
  assign IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d173 =
	     x_out_bypass_rd__h4230 == near_mem$imem_instr[19:15] ;
  assign IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d175 =
	     x_out_bypass_rd__h4230 == near_mem$imem_instr[24:20] ;
  assign IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 =
	     stage2_rg_full ?
	       CASE_stage2_rg_stage2_BITS_103_TO_101_0_2_1_IF_ETC__q4 :
	       2'd0 ;
  assign IF_stage2_rg_stage2_4_BITS_100_TO_96_24_EQ_0_4_ETC___d150 =
	     (stage2_rg_stage2[100:96] == 5'd0) ?
	       2'd0 :
	       ((near_mem$dmem_valid && !near_mem$dmem_exc) ? 2'd2 : 2'd1) ;
  assign IF_stage2_rg_stage2_4_BITS_103_TO_101_5_EQ_3_1_ETC___d91 =
	     stage2_mbox$valid ? 2'd2 : 2'd1 ;
  assign NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d16 =
	     cur_verbosity__h1330 > 4'd1 ;
  assign NOT_near_mem_imem_exc__80_67_AND_IF_near_mem_i_ETC___d552 =
	     !near_mem$imem_exc &&
	     (IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d411 ||
	      IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d420) &&
	     IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 !=
	     4'd0 &&
	     IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 !=
	     4'd1 &&
	     IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 !=
	     4'd2 &&
	     IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 !=
	     4'd3 &&
	     IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 !=
	     4'd4 &&
	     IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 !=
	     4'd5 &&
	     IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 !=
	     4'd6 &&
	     IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 !=
	     4'd7 &&
	     IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 !=
	     4'd8 &&
	     IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 !=
	     4'd9 &&
	     IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 !=
	     4'd10 ;
  assign NOT_near_mem_imem_exc__80_67_AND_IF_near_mem_i_ETC___d590 =
	     !near_mem$imem_exc &&
	     (IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d411 ||
	      IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d420) &&
	     IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d566 !=
	     3'd0 &&
	     IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d566 !=
	     3'd1 &&
	     IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d566 !=
	     3'd2 &&
	     IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d566 !=
	     3'd3 ;
  assign NOT_near_mem_imem_instr__71_BITS_14_TO_12_94_E_ETC___d269 =
	     (near_mem$imem_instr[14:12] != 3'b0 ||
	      near_mem$imem_instr[6:0] == 7'b0110011 &&
	      near_mem$imem_instr[30]) &&
	     (near_mem$imem_instr[14:12] != 3'b0 ||
	      near_mem$imem_instr[6:0] != 7'b0110011 ||
	      !near_mem$imem_instr[30]) &&
	     near_mem$imem_instr[14:12] != 3'b010 &&
	     near_mem$imem_instr[14:12] != 3'b011 &&
	     near_mem$imem_instr[14:12] != 3'b100 &&
	     near_mem$imem_instr[14:12] != 3'b110 &&
	     near_mem$imem_instr[14:12] != 3'b111 ;
  assign NOT_near_mem_imem_instr__71_BITS_14_TO_12_94_E_ETC___d339 =
	     near_mem$imem_instr[14:12] != 3'b0 &&
	     near_mem$imem_instr[14:12] != 3'b001 &&
	     near_mem$imem_instr[14:12] != 3'b100 &&
	     near_mem$imem_instr[14:12] != 3'b101 &&
	     near_mem$imem_instr[14:12] != 3'b110 &&
	     near_mem$imem_instr[14:12] != 3'b111 ||
	     IF_near_mem_imem_instr__71_BITS_14_TO_12_94_EQ_ETC___d240 &&
	     branch_target__h4593[1] ;
  assign NOT_near_mem_imem_valid__69_70_OR_IF_stage2_rg_ETC___d178 =
	     !near_mem$imem_valid ||
	     IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d154 ==
	     2'd1 &&
	     (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d173 ||
	      IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d175) ;
  assign NOT_near_mem_imem_valid__69_70_OR_IF_stage2_rg_ETC___d788 =
	     NOT_near_mem_imem_valid__69_70_OR_IF_stage2_rg_ETC___d178 ||
	     !near_mem$imem_exc &&
	     (IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d411 ||
	      IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d420) ;
  assign NOT_near_mem_imem_valid__69_70_OR_IF_stage2_rg_ETC___d799 =
	     NOT_near_mem_imem_valid__69_70_OR_IF_stage2_rg_ETC___d178 ||
	     near_mem$imem_exc ||
	     IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d328 &&
	     IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d362 ;
  assign NOT_rg_halt_93_94_AND_NOT_csr_regfile_interrup_ETC___d802 =
	     !rg_halt && !csr_regfile$interrupt_pending[4] ||
	     (!stage1_rg_full ||
	      NOT_near_mem_imem_valid__69_70_OR_IF_stage2_rg_ETC___d799) &&
	     (!stage1_rg_full ||
	      NOT_near_mem_imem_valid__69_70_OR_IF_stage2_rg_ETC___d788) ;
  assign NOT_rg_halt_93_94_AND_NOT_csr_regfile_interrup_ETC___d823 =
	     !rg_halt && !csr_regfile$interrupt_pending[4] &&
	     (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 ==
	      2'd2 ||
	      IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 ==
	      2'd0) &&
	     stage1_rg_full &&
	     near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d423 ;
  assign NOT_rg_halt_93_94_AND_NOT_csr_regfile_interrup_ETC___d845 =
	     !rg_halt && !csr_regfile$interrupt_pending[4] &&
	     ((IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 ==
	       2'd2 ||
	       IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 ==
	       2'd0) &&
	      near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d423 ||
	      !stage1_rg_full) ;
  assign SEXT_near_mem_imem_instr__71_BITS_31_TO_20_56___d357 =
	     { {20{near_memimem_instr_BITS_31_TO_20__q8[11]}},
	       near_memimem_instr_BITS_31_TO_20__q8 } ;
  assign _theResult_____1_fst__h5841 =
	     (near_mem$imem_instr[14:12] == 3'b0 &&
	      near_mem$imem_instr[6:0] == 7'b0110011 &&
	      near_mem$imem_instr[30]) ?
	       rd_val___1__h5837 :
	       _theResult_____1_fst__h5848 ;
  assign _theResult_____1_fst__h5876 =
	     rs1_val_bypassed__h2508 & _theResult___snd__h6653 ;
  assign _theResult____h13986 =
	     (delta_CPI_instrs__h13985 == 64'd0) ?
	       delta_CPI_instrs___1__h14021 :
	       delta_CPI_instrs__h13985 ;
  assign _theResult___snd__h6653 =
	     (near_mem$imem_instr[6:0] == 7'b0010011) ?
	       SEXT_near_mem_imem_instr__71_BITS_31_TO_20_56___d357 :
	       rs2_val_bypassed__h2514 ;
  assign alu_outputs___1_addr__h4609 =
	     IF_near_mem_imem_instr__71_BITS_14_TO_12_94_EQ_ETC___d240 ?
	       branch_target__h4593 :
	       ret_pc__h4615 ;
  assign alu_outputs___1_addr__h4626 =
	     { near_mem_imem_pc__82_PLUS_SEXT_near_mem_imem_i_ETC___d353[31:1],
	       1'd0 } ;
  assign alu_outputs___1_addr__h4647 = { eaddr__h4814[31:1], 1'd0 } ;
  assign alu_outputs___1_addr__h4840 =
	     rs1_val_bypassed__h2508 +
	     { {20{near_memimem_instr_BITS_31_TO_25_CONCAT_near__ETC__q6[11]}},
	       near_memimem_instr_BITS_31_TO_25_CONCAT_near__ETC__q6 } ;
  assign alu_outputs___1_exc_code__h5098 =
	     (near_mem$imem_instr[14:12] == 3'b0) ?
	       ((near_mem$imem_instr[11:7] == 5'd0 &&
		 near_mem$imem_instr[19:15] == 5'd0) ?
		  CASE_near_memimem_instr_BITS_31_TO_20_0b0_CAS_ETC__q2 :
		  4'd2) :
	       4'd2 ;
  assign alu_outputs___1_val1__h4746 =
	     (near_mem$imem_instr[14:12] == 3'b001) ?
	       rd_val__h6549 :
	       (near_mem$imem_instr[30] ? rd_val__h6623 : rd_val__h6601) ;
  assign alu_outputs___1_val1__h4781 =
	     (near_mem$imem_instr[14:12] == 3'b0 &&
	      (near_mem$imem_instr[6:0] != 7'b0110011 ||
	       !near_mem$imem_instr[30])) ?
	       rd_val___1__h5829 :
	       _theResult_____1_fst__h5841 ;
  assign alu_outputs___1_val1__h5102 =
	     near_mem$imem_instr[14] ?
	       { 27'd0, near_mem$imem_instr[19:15] } :
	       rs1_val_bypassed__h2508 ;
  assign alu_outputs___1_val1__h5120 = { 25'd0, near_mem$imem_instr[31:25] } ;
  assign branch_target__h4593 =
	     near_mem$imem_pc +
	     { {19{near_memimem_instr_BIT_31_CONCAT_near_memime_ETC__q3[12]}},
	       near_memimem_instr_BIT_31_CONCAT_near_memime_ETC__q3 } ;
  assign cpi__h13988 = x__h13987 / 64'd10 ;
  assign cpifrac__h13989 = x__h13987 % 64'd10 ;
  assign csr_regfile_read_csr_mcycle__7_MINUS_rg_start__ETC___d944 =
	     delta_CPI_cycles__h13984 * 64'd10 ;
  assign cur_verbosity__h1330 =
	     (csr_regfile$read_csr_minstret < cfg_logdelay) ?
	       4'd0 :
	       cfg_verbosity ;
  assign data_to_stage2_addr__h4491 = x_out_data_to_stage2_addr__h4500 ;
  assign delta_CPI_cycles__h13984 =
	     csr_regfile$read_csr_mcycle - rg_start_CPI_cycles ;
  assign delta_CPI_instrs___1__h14021 = delta_CPI_instrs__h13985 + 64'd1 ;
  assign delta_CPI_instrs__h13985 =
	     csr_regfile$read_csr_minstret - rg_start_CPI_instrs ;
  assign eaddr__h4814 =
	     rs1_val_bypassed__h2508 +
	     SEXT_near_mem_imem_instr__71_BITS_31_TO_20_56___d357 ;
  assign gpr_regfile_RDY_server_reset_request_put__47_A_ETC___d759 =
	     gpr_regfile$RDY_server_reset_request_put &&
	     near_mem$RDY_server_reset_request_put &&
	     csr_regfile$RDY_server_reset_request_put &&
	     f_reset_reqs$EMPTY_N &&
	     stage1_f_reset_reqs$FULL_N &&
	     stage2_f_reset_reqs$FULL_N &&
	     stage3_f_reset_reqs$FULL_N ;
  assign gpr_regfile_RDY_server_reset_response_get__67__ETC___d779 =
	     gpr_regfile$RDY_server_reset_response_get &&
	     near_mem$RDY_server_reset_response_get &&
	     csr_regfile$RDY_server_reset_response_get &&
	     stage1_f_reset_rsps$EMPTY_N &&
	     stage2_f_reset_rsps$EMPTY_N &&
	     stage3_f_reset_rsps$EMPTY_N &&
	     f_reset_rsps$FULL_N ;
  assign near_mem_imem_exc__80_OR_IF_near_mem_imem_inst_ETC___d674 =
	     (near_mem$imem_exc ||
	      IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d328 &&
	      IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d362) &&
	     IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 ==
	     4'd0 ;
  assign near_mem_imem_exc__80_OR_IF_near_mem_imem_inst_ETC___d677 =
	     (near_mem$imem_exc ||
	      IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d328 &&
	      IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d362) &&
	     IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 ==
	     4'd1 ;
  assign near_mem_imem_exc__80_OR_IF_near_mem_imem_inst_ETC___d680 =
	     (near_mem$imem_exc ||
	      IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d328 &&
	      IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d362) &&
	     IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 ==
	     4'd2 ;
  assign near_mem_imem_exc__80_OR_IF_near_mem_imem_inst_ETC___d683 =
	     (near_mem$imem_exc ||
	      IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d328 &&
	      IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d362) &&
	     IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 ==
	     4'd3 ;
  assign near_mem_imem_exc__80_OR_IF_near_mem_imem_inst_ETC___d686 =
	     (near_mem$imem_exc ||
	      IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d328 &&
	      IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d362) &&
	     IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 ==
	     4'd4 ;
  assign near_mem_imem_exc__80_OR_IF_near_mem_imem_inst_ETC___d689 =
	     (near_mem$imem_exc ||
	      IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d328 &&
	      IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d362) &&
	     IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 ==
	     4'd5 ;
  assign near_mem_imem_exc__80_OR_IF_near_mem_imem_inst_ETC___d692 =
	     (near_mem$imem_exc ||
	      IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d328 &&
	      IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d362) &&
	     IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 ==
	     4'd6 ;
  assign near_mem_imem_exc__80_OR_IF_near_mem_imem_inst_ETC___d695 =
	     (near_mem$imem_exc ||
	      IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d328 &&
	      IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d362) &&
	     IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 ==
	     4'd7 ;
  assign near_mem_imem_exc__80_OR_IF_near_mem_imem_inst_ETC___d698 =
	     (near_mem$imem_exc ||
	      IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d328 &&
	      IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d362) &&
	     IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 ==
	     4'd8 ;
  assign near_mem_imem_exc__80_OR_IF_near_mem_imem_inst_ETC___d701 =
	     (near_mem$imem_exc ||
	      IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d328 &&
	      IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d362) &&
	     IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 ==
	     4'd9 ;
  assign near_mem_imem_exc__80_OR_IF_near_mem_imem_inst_ETC___d704 =
	     (near_mem$imem_exc ||
	      IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d328 &&
	      IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d362) &&
	     IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 ==
	     4'd10 ;
  assign near_mem_imem_exc__80_OR_IF_near_mem_imem_inst_ETC___d707 =
	     (near_mem$imem_exc ||
	      IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d328 &&
	      IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d362) &&
	     IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 !=
	     4'd0 &&
	     IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 !=
	     4'd1 &&
	     IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 !=
	     4'd2 &&
	     IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 !=
	     4'd3 &&
	     IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 !=
	     4'd4 &&
	     IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 !=
	     4'd5 &&
	     IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 !=
	     4'd6 &&
	     IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 !=
	     4'd7 &&
	     IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 !=
	     4'd8 &&
	     IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 !=
	     4'd9 &&
	     IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 !=
	     4'd10 ;
  assign near_mem_imem_instr__71_BITS_14_TO_12_94_EQ_0b_ETC___d383 =
	     near_mem$imem_instr[14:12] == 3'b0 &&
	     (near_mem$imem_instr[6:0] != 7'b0110011 ||
	      !near_mem$imem_instr[30]) ||
	     near_mem$imem_instr[14:12] == 3'b0 &&
	     near_mem$imem_instr[6:0] == 7'b0110011 &&
	     near_mem$imem_instr[30] ||
	     near_mem$imem_instr[14:12] == 3'b010 ||
	     near_mem$imem_instr[14:12] == 3'b011 ||
	     near_mem$imem_instr[14:12] == 3'b100 ||
	     near_mem$imem_instr[14:12] == 3'b110 ||
	     near_mem$imem_instr[14:12] == 3'b111 ;
  assign near_mem_imem_pc__82_PLUS_SEXT_near_mem_imem_i_ETC___d353 =
	     near_mem$imem_pc +
	     { {11{near_memimem_instr_BIT_31_CONCAT_near_memime_ETC__q7[20]}},
	       near_memimem_instr_BIT_31_CONCAT_near_memime_ETC__q7 } ;
  assign near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d191 =
	     near_mem$imem_valid &&
	     (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d154 !=
	      2'd1 ||
	      !IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d173 &&
	      !IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d175) ;
  assign near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d365 =
	     near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d191 &&
	     (near_mem$imem_exc ||
	      IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d328 &&
	      IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d362) ;
  assign near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d423 =
	     near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d191 &&
	     !near_mem$imem_exc &&
	     (IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d411 ||
	      IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d420) ;
  assign near_memimem_instr_BITS_31_TO_20__q8 = near_mem$imem_instr[31:20] ;
  assign near_memimem_instr_BITS_31_TO_25_CONCAT_near__ETC__q6 =
	     { near_mem$imem_instr[31:25], near_mem$imem_instr[11:7] } ;
  assign near_memimem_instr_BIT_31_CONCAT_near_memime_ETC__q3 =
	     { near_mem$imem_instr[31],
	       near_mem$imem_instr[7],
	       near_mem$imem_instr[30:25],
	       near_mem$imem_instr[11:8],
	       1'b0 } ;
  assign near_memimem_instr_BIT_31_CONCAT_near_memime_ETC__q7 =
	     { near_mem$imem_instr[31],
	       near_mem$imem_instr[19:12],
	       near_mem$imem_instr[20],
	       near_mem$imem_instr[30:21],
	       1'b0 } ;
  assign output_stage2___1_bypass_rd_val__h4219 =
	     (stage2_rg_stage2[100:96] == 5'd0) ?
	       stage2_rg_stage2[63:32] :
	       near_mem$dmem_word64[31:0] ;
  assign rd_val___1__h5829 =
	     rs1_val_bypassed__h2508 + _theResult___snd__h6653 ;
  assign rd_val___1__h5837 =
	     rs1_val_bypassed__h2508 - _theResult___snd__h6653 ;
  assign rd_val___1__h5844 =
	     ((rs1_val_bypassed__h2508 ^ 32'h80000000) <
	      (_theResult___snd__h6653 ^ 32'h80000000)) ?
	       32'd1 :
	       32'd0 ;
  assign rd_val___1__h5851 =
	     (rs1_val_bypassed__h2508 < _theResult___snd__h6653) ?
	       32'd1 :
	       32'd0 ;
  assign rd_val___1__h5858 =
	     rs1_val_bypassed__h2508 ^ _theResult___snd__h6653 ;
  assign rd_val___1__h5865 =
	     rs1_val_bypassed__h2508 | _theResult___snd__h6653 ;
  assign rd_val__h4343 =
	     (stage3_rg_full && stage3_rg_stage3[37] &&
	      stage3_rg_stage3[36:32] == near_mem$imem_instr[19:15]) ?
	       stage3_rg_stage3[31:0] :
	       gpr_regfile$read_rs1 ;
  assign rd_val__h4403 =
	     (stage3_rg_full && stage3_rg_stage3[37] &&
	      stage3_rg_stage3[36:32] == near_mem$imem_instr[24:20]) ?
	       stage3_rg_stage3[31:0] :
	       gpr_regfile$read_rs2 ;
  assign rd_val__h4787 = { near_mem$imem_instr[31:12], 12'h0 } ;
  assign rd_val__h4800 = near_mem$imem_pc + rd_val__h4787 ;
  assign rd_val__h6549 = rs1_val_bypassed__h2508 << shamt__h4733 ;
  assign rd_val__h6601 = rs1_val_bypassed__h2508 >> shamt__h4733 ;
  assign rd_val__h6623 =
	     rs1_val_bypassed__h2508 >> shamt__h4733 |
	     ~(32'hFFFFFFFF >> shamt__h4733) &
	     {32{rs1_val_bypassed__h2508[31]}} ;
  assign ret_pc__h4615 = near_mem$imem_pc + 32'd4 ;
  assign rg_cur_priv_9_EQ_0b11_43_OR_rg_cur_priv_9_EQ_0_ETC___d460 =
	     (rg_cur_priv == 2'b11 ||
	      rg_cur_priv == 2'b01 && !csr_regfile$read_mstatus[21] ||
	      rg_cur_priv == 2'b0 && csr_regfile$read_misa[13]) &&
	     near_mem$imem_instr[31:20] == 12'b000100000101 ;
  assign rg_state_7_EQ_2_83_AND_NOT_rg_halt_93_94_AND_N_ETC___d866 =
	     rg_state == 4'd2 && !rg_halt &&
	     !csr_regfile$interrupt_pending[4] &&
	     !stage3_rg_full ;
  assign rg_state_7_EQ_2_83_AND_NOT_rg_halt_93_94_AND_N_ETC___d919 =
	     rg_state_7_EQ_2_83_AND_NOT_rg_halt_93_94_AND_N_ETC___d866 &&
	     IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 ==
	     2'd0 &&
	     stage1_rg_full &&
	     near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d365 &&
	     IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 ==
	     4'd5 ;
  assign rg_state_7_EQ_2_83_AND_NOT_rg_halt_93_94_AND_N_ETC___d925 =
	     rg_state_7_EQ_2_83_AND_NOT_rg_halt_93_94_AND_N_ETC___d866 &&
	     IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 ==
	     2'd0 &&
	     stage1_rg_full &&
	     near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d365 &&
	     IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 ==
	     4'd4 ;
  assign rg_state_7_EQ_2_83_AND_NOT_rg_halt_93_94_AND_N_ETC___d939 =
	     rg_state_7_EQ_2_83_AND_NOT_rg_halt_93_94_AND_N_ETC___d866 &&
	     IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 ==
	     2'd0 &&
	     stage1_rg_full &&
	     near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d365 &&
	     IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 ==
	     4'd11 ;
  assign rs1_val__h9811 =
	     (near_mem$imem_instr[14:12] == 3'b001) ?
	       x_out_data_to_stage2_val1__h4501 :
	       { 27'd0, near_mem$imem_instr[19:15] } ;
  assign rs1_val_bypassed__h2508 =
	     (near_mem$imem_instr[19:15] == 5'd0) ? 32'd0 : val__h4345 ;
  assign rs2_val_bypassed__h2514 =
	     (near_mem$imem_instr[24:20] == 5'd0) ? 32'd0 : val__h4405 ;
  assign shamt__h4733 =
	     (near_mem$imem_instr[6:0] == 7'b0010011) ?
	       near_mem$imem_instr[24:20] :
	       rs2_val_bypassed__h2514[4:0] ;
  assign trap_info_badaddr__h6284 =
	     (near_mem$imem_instr[6:0] != 7'b1100011 &&
	      near_mem$imem_instr[6:0] != 7'b1101111 &&
	      near_mem$imem_instr[6:0] != 7'b1100111 &&
	      (near_mem$imem_instr[6:0] != 7'b1110011 ||
	       near_mem$imem_instr[14:12] != 3'b0 ||
	       near_mem$imem_instr[11:7] != 5'd0 ||
	       near_mem$imem_instr[19:15] != 5'd0 ||
	       near_mem$imem_instr[31:20] != 12'b0 &&
	       near_mem$imem_instr[31:20] != 12'b000000000001)) ?
	       near_mem$imem_instr :
	       CASE_near_memimem_instr_BITS_6_TO_0_0b1100011_ETC__q9 ;
  assign val__h4345 =
	     (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d154 ==
	      2'd2 &&
	      IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d173) ?
	       x_out_bypass_rd_val__h4231 :
	       rd_val__h4343 ;
  assign val__h4405 =
	     (IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d154 ==
	      2'd2 &&
	      IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d175) ?
	       x_out_bypass_rd_val__h4231 :
	       rd_val__h4403 ;
  assign value__h6328 =
	     near_mem$imem_exc ? near_mem$imem_pc : trap_info_badaddr__h6284 ;
  assign x__h13987 =
	     csr_regfile_read_csr_mcycle__7_MINUS_rg_start__ETC___d944[63:0] /
	     _theResult____h13986 ;
  assign x_out_data_to_stage2_rd__h4499 =
	     (near_mem$imem_instr[6:0] == 7'b1100011) ?
	       5'd0 :
	       near_mem$imem_instr[11:7] ;
  assign x_out_data_to_stage2_val2__h4502 =
	     (near_mem$imem_instr[6:0] == 7'b1100011) ?
	       branch_target__h4593 :
	       rs2_val_bypassed__h2514 ;
  assign x_out_next_pc__h4458 =
	     IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d420 ?
	       data_to_stage2_addr__h4491 :
	       ret_pc__h4615 ;
  assign x_out_trap_info_exc_code__h6287 =
	     near_mem$imem_exc ?
	       near_mem$imem_exc_code :
	       alu_outputs_exc_code__h5136 ;
  assign y__h10623 = ~rs1_val__h10335 ;
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[103:101])
      3'd0, 3'd1, 3'd4:
	  x_out_data_to_stage3_rd__h3892 = stage2_rg_stage2[100:96];
      3'd2: x_out_data_to_stage3_rd__h3892 = 5'd0;
      default: x_out_data_to_stage3_rd__h3892 = stage2_rg_stage2[100:96];
    endcase
  end
  always@(stage2_rg_stage2 or stage2_mbox$word or near_mem$dmem_word64)
  begin
    case (stage2_rg_stage2[103:101])
      3'd0: x_out_data_to_stage3_rd_val__h3893 = stage2_rg_stage2[63:32];
      3'd1, 3'd4:
	  x_out_data_to_stage3_rd_val__h3893 = near_mem$dmem_word64[31:0];
      default: x_out_data_to_stage3_rd_val__h3893 = stage2_mbox$word;
    endcase
  end
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[103:101])
      3'd0, 3'd1, 3'd4: x_out_bypass_rd__h4230 = stage2_rg_stage2[100:96];
      default: x_out_bypass_rd__h4230 = stage2_rg_stage2[100:96];
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_mbox$word or output_stage2___1_bypass_rd_val__h4219)
  begin
    case (stage2_rg_stage2[103:101])
      3'd0: x_out_bypass_rd_val__h4231 = stage2_rg_stage2[63:32];
      3'd1, 3'd4:
	  x_out_bypass_rd_val__h4231 = output_stage2___1_bypass_rd_val__h4219;
      default: x_out_bypass_rd_val__h4231 = stage2_mbox$word;
    endcase
  end
  always@(rg_cur_priv)
  begin
    case (rg_cur_priv)
      2'b0: CASE_rg_cur_priv_0b0_8_0b1_9_11__q1 = 4'd8;
      2'b01: CASE_rg_cur_priv_0b0_8_0b1_9_11__q1 = 4'd9;
      default: CASE_rg_cur_priv_0b0_8_0b1_9_11__q1 = 4'd11;
    endcase
  end
  always@(near_mem$imem_instr or CASE_rg_cur_priv_0b0_8_0b1_9_11__q1)
  begin
    case (near_mem$imem_instr[31:20])
      12'b0:
	  CASE_near_memimem_instr_BITS_31_TO_20_0b0_CAS_ETC__q2 =
	      CASE_rg_cur_priv_0b0_8_0b1_9_11__q1;
      12'b000000000001:
	  CASE_near_memimem_instr_BITS_31_TO_20_0b0_CAS_ETC__q2 = 4'd3;
      default: CASE_near_memimem_instr_BITS_31_TO_20_0b0_CAS_ETC__q2 = 4'd2;
    endcase
  end
  always@(near_mem$imem_instr or alu_outputs___1_exc_code__h5098)
  begin
    case (near_mem$imem_instr[6:0])
      7'b0000011,
      7'b0001111,
      7'b0010011,
      7'b0010111,
      7'b0100011,
      7'b0110011,
      7'b0110111:
	  alu_outputs_exc_code__h5136 = 4'd2;
      7'b1100011, 7'b1100111, 7'b1101111: alu_outputs_exc_code__h5136 = 4'd0;
      7'b1110011:
	  alu_outputs_exc_code__h5136 = alu_outputs___1_exc_code__h5098;
      default: alu_outputs_exc_code__h5136 = 4'd2;
    endcase
  end
  always@(stage2_rg_stage2 or
	  IF_stage2_rg_stage2_4_BITS_103_TO_101_5_EQ_3_1_ETC___d91 or
	  IF_near_mem_dmem_valid__5_THEN_IF_near_mem_dme_ETC___d88)
  begin
    case (stage2_rg_stage2[103:101])
      3'd0: CASE_stage2_rg_stage2_BITS_103_TO_101_0_2_1_IF_ETC__q4 = 2'd2;
      3'd1, 3'd2, 3'd4:
	  CASE_stage2_rg_stage2_BITS_103_TO_101_0_2_1_IF_ETC__q4 =
	      IF_near_mem_dmem_valid__5_THEN_IF_near_mem_dme_ETC___d88;
      default: CASE_stage2_rg_stage2_BITS_103_TO_101_0_2_1_IF_ETC__q4 =
		   IF_stage2_rg_stage2_4_BITS_103_TO_101_5_EQ_3_1_ETC___d91;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_mbox$valid or near_mem$dmem_valid or near_mem$dmem_exc)
  begin
    case (stage2_rg_stage2[103:101])
      3'd1, 3'd2, 3'd4:
	  IF_stage2_rg_stage2_4_BITS_103_TO_101_5_EQ_1_7_ETC___d108 =
	      !near_mem$dmem_valid || near_mem$dmem_exc;
      default: IF_stage2_rg_stage2_4_BITS_103_TO_101_5_EQ_1_7_ETC___d108 =
		   !stage2_mbox$valid;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_mbox$valid or near_mem$dmem_valid or near_mem$dmem_exc)
  begin
    case (stage2_rg_stage2[103:101])
      3'd1, 3'd2, 3'd4:
	  IF_stage2_rg_stage2_4_BITS_103_TO_101_5_EQ_1_7_ETC___d117 =
	      near_mem$dmem_valid && !near_mem$dmem_exc;
      default: IF_stage2_rg_stage2_4_BITS_103_TO_101_5_EQ_1_7_ETC___d117 =
		   stage2_mbox$valid;
    endcase
  end
  always@(stage2_rg_stage2 or
	  IF_stage2_rg_stage2_4_BITS_103_TO_101_5_EQ_3_1_ETC___d91 or
	  IF_stage2_rg_stage2_4_BITS_100_TO_96_24_EQ_0_4_ETC___d150)
  begin
    case (stage2_rg_stage2[103:101])
      3'd0: CASE_stage2_rg_stage2_BITS_103_TO_101_0_2_1_IF_ETC__q5 = 2'd2;
      3'd1, 3'd4:
	  CASE_stage2_rg_stage2_BITS_103_TO_101_0_2_1_IF_ETC__q5 =
	      IF_stage2_rg_stage2_4_BITS_100_TO_96_24_EQ_0_4_ETC___d150;
      3'd2: CASE_stage2_rg_stage2_BITS_103_TO_101_0_2_1_IF_ETC__q5 = 2'd0;
      default: CASE_stage2_rg_stage2_BITS_103_TO_101_0_2_1_IF_ETC__q5 =
		   IF_stage2_rg_stage2_4_BITS_103_TO_101_5_EQ_3_1_ETC___d91;
    endcase
  end
  always@(near_mem$imem_instr or
	  IF_near_mem_imem_instr__71_BITS_19_TO_15_72_EQ_ETC___d233 or
	  IF_near_mem_imem_instr__71_BITS_19_TO_15_72_EQ_ETC___d229 or
	  IF_near_mem_imem_instr__71_BITS_19_TO_15_72_EQ_ETC___d231)
  begin
    case (near_mem$imem_instr[14:12])
      3'b0:
	  IF_near_mem_imem_instr__71_BITS_14_TO_12_94_EQ_ETC___d240 =
	      IF_near_mem_imem_instr__71_BITS_19_TO_15_72_EQ_ETC___d229;
      3'b001:
	  IF_near_mem_imem_instr__71_BITS_14_TO_12_94_EQ_ETC___d240 =
	      !IF_near_mem_imem_instr__71_BITS_19_TO_15_72_EQ_ETC___d229;
      3'b100:
	  IF_near_mem_imem_instr__71_BITS_14_TO_12_94_EQ_ETC___d240 =
	      IF_near_mem_imem_instr__71_BITS_19_TO_15_72_EQ_ETC___d231;
      3'b101:
	  IF_near_mem_imem_instr__71_BITS_14_TO_12_94_EQ_ETC___d240 =
	      !IF_near_mem_imem_instr__71_BITS_19_TO_15_72_EQ_ETC___d231;
      3'b110:
	  IF_near_mem_imem_instr__71_BITS_14_TO_12_94_EQ_ETC___d240 =
	      IF_near_mem_imem_instr__71_BITS_19_TO_15_72_EQ_ETC___d233;
      default: IF_near_mem_imem_instr__71_BITS_14_TO_12_94_EQ_ETC___d240 =
		   near_mem$imem_instr[14:12] == 3'b111 &&
		   !IF_near_mem_imem_instr__71_BITS_19_TO_15_72_EQ_ETC___d233;
    endcase
  end
  always@(near_mem$imem_instr or
	  rs1_val_bypassed__h2508 or
	  eaddr__h4814 or
	  alu_outputs___1_addr__h4840 or
	  alu_outputs___1_addr__h4609 or
	  alu_outputs___1_addr__h4647 or alu_outputs___1_addr__h4626)
  begin
    case (near_mem$imem_instr[6:0])
      7'b0000011: x_out_data_to_stage2_addr__h4500 = eaddr__h4814;
      7'b0100011:
	  x_out_data_to_stage2_addr__h4500 = alu_outputs___1_addr__h4840;
      7'b1100011:
	  x_out_data_to_stage2_addr__h4500 = alu_outputs___1_addr__h4609;
      7'b1100111:
	  x_out_data_to_stage2_addr__h4500 = alu_outputs___1_addr__h4647;
      7'b1101111:
	  x_out_data_to_stage2_addr__h4500 = alu_outputs___1_addr__h4626;
      default: x_out_data_to_stage2_addr__h4500 = rs1_val_bypassed__h2508;
    endcase
  end
  always@(near_mem$imem_instr or data_to_stage2_addr__h4491)
  begin
    case (near_mem$imem_instr[6:0])
      7'b1100011, 7'b1100111, 7'b1101111:
	  CASE_near_memimem_instr_BITS_6_TO_0_0b1100011_ETC__q9 =
	      data_to_stage2_addr__h4491;
      default: CASE_near_memimem_instr_BITS_6_TO_0_0b1100011_ETC__q9 = 32'd0;
    endcase
  end
  always@(near_mem$imem_instr or
	  _theResult_____1_fst__h5876 or
	  rd_val___1__h5844 or
	  rd_val___1__h5851 or rd_val___1__h5858 or rd_val___1__h5865)
  begin
    case (near_mem$imem_instr[14:12])
      3'b010: _theResult_____1_fst__h5848 = rd_val___1__h5844;
      3'b011: _theResult_____1_fst__h5848 = rd_val___1__h5851;
      3'b100: _theResult_____1_fst__h5848 = rd_val___1__h5858;
      3'b110: _theResult_____1_fst__h5848 = rd_val___1__h5865;
      default: _theResult_____1_fst__h5848 = _theResult_____1_fst__h5876;
    endcase
  end
  always@(near_mem$imem_instr or
	  IF_near_mem_imem_instr__71_BITS_19_TO_15_72_EQ_ETC___d233 or
	  IF_near_mem_imem_instr__71_BITS_19_TO_15_72_EQ_ETC___d229 or
	  IF_near_mem_imem_instr__71_BITS_19_TO_15_72_EQ_ETC___d231)
  begin
    case (near_mem$imem_instr[14:12])
      3'b0:
	  IF_near_mem_imem_instr__71_BITS_14_TO_12_94_EQ_ETC___d345 =
	      !IF_near_mem_imem_instr__71_BITS_19_TO_15_72_EQ_ETC___d229;
      3'b001:
	  IF_near_mem_imem_instr__71_BITS_14_TO_12_94_EQ_ETC___d345 =
	      IF_near_mem_imem_instr__71_BITS_19_TO_15_72_EQ_ETC___d229;
      3'b100:
	  IF_near_mem_imem_instr__71_BITS_14_TO_12_94_EQ_ETC___d345 =
	      !IF_near_mem_imem_instr__71_BITS_19_TO_15_72_EQ_ETC___d231;
      3'b101:
	  IF_near_mem_imem_instr__71_BITS_14_TO_12_94_EQ_ETC___d345 =
	      IF_near_mem_imem_instr__71_BITS_19_TO_15_72_EQ_ETC___d231;
      3'b110:
	  IF_near_mem_imem_instr__71_BITS_14_TO_12_94_EQ_ETC___d345 =
	      !IF_near_mem_imem_instr__71_BITS_19_TO_15_72_EQ_ETC___d233;
      default: IF_near_mem_imem_instr__71_BITS_14_TO_12_94_EQ_ETC___d345 =
		   near_mem$imem_instr[14:12] != 3'b111 ||
		   IF_near_mem_imem_instr__71_BITS_19_TO_15_72_EQ_ETC___d233;
    endcase
  end
  always@(near_mem$imem_instr)
  begin
    case (near_mem$imem_instr[6:0])
      7'b0000011:
	  CASE_near_memimem_instr_BITS_6_TO_0_0b11_NOT__ETC__q10 =
	      near_mem$imem_instr[14:12] != 3'b0 &&
	      near_mem$imem_instr[14:12] != 3'b100 &&
	      near_mem$imem_instr[14:12] != 3'b001 &&
	      near_mem$imem_instr[14:12] != 3'b101 &&
	      near_mem$imem_instr[14:12] != 3'b010;
      7'b0100011:
	  CASE_near_memimem_instr_BITS_6_TO_0_0b11_NOT__ETC__q10 =
	      near_mem$imem_instr[14:12] != 3'b0 &&
	      near_mem$imem_instr[14:12] != 3'b001 &&
	      near_mem$imem_instr[14:12] != 3'b010;
      default: CASE_near_memimem_instr_BITS_6_TO_0_0b11_NOT__ETC__q10 =
		   near_mem$imem_instr[6:0] != 7'b0101111 ||
		   near_mem$imem_instr[31:27] != 5'b00010 &&
		   near_mem$imem_instr[31:27] != 5'b00011 &&
		   near_mem$imem_instr[31:27] != 5'b0 &&
		   near_mem$imem_instr[31:27] != 5'b00001 &&
		   near_mem$imem_instr[31:27] != 5'b01100 &&
		   near_mem$imem_instr[31:27] != 5'b01000 &&
		   near_mem$imem_instr[31:27] != 5'b00100 &&
		   near_mem$imem_instr[31:27] != 5'b10000 &&
		   near_mem$imem_instr[31:27] != 5'b11000 &&
		   near_mem$imem_instr[31:27] != 5'b10100 &&
		   near_mem$imem_instr[31:27] != 5'b11100 ||
		   near_mem$imem_instr[14:12] != 3'b010;
    endcase
  end
  always@(near_mem$imem_instr or
	  CASE_near_memimem_instr_BITS_6_TO_0_0b11_NOT__ETC__q10 or
	  NOT_near_mem_imem_instr__71_BITS_14_TO_12_94_E_ETC___d269)
  begin
    case (near_mem$imem_instr[6:0])
      7'b0010011, 7'b0110011:
	  CASE_near_memimem_instr_BITS_6_TO_0_0b10011_N_ETC__q11 =
	      NOT_near_mem_imem_instr__71_BITS_14_TO_12_94_E_ETC___d269;
      default: CASE_near_memimem_instr_BITS_6_TO_0_0b10011_N_ETC__q11 =
		   near_mem$imem_instr[6:0] != 7'b0110111 &&
		   near_mem$imem_instr[6:0] != 7'b0010111 &&
		   CASE_near_memimem_instr_BITS_6_TO_0_0b11_NOT__ETC__q10;
    endcase
  end
  always@(near_mem$imem_instr or
	  eaddr__h4814 or
	  NOT_near_mem_imem_instr__71_BITS_14_TO_12_94_E_ETC___d339 or
	  IF_near_mem_imem_instr__71_BITS_14_TO_12_94_EQ_ETC___d345 or
	  near_mem_imem_pc__82_PLUS_SEXT_near_mem_imem_i_ETC___d353)
  begin
    case (near_mem$imem_instr[6:0])
      7'b1100011:
	  IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d362 =
	      NOT_near_mem_imem_instr__71_BITS_14_TO_12_94_E_ETC___d339 ||
	      IF_near_mem_imem_instr__71_BITS_14_TO_12_94_EQ_ETC___d345;
      7'b1101111:
	  IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d362 =
	      near_mem_imem_pc__82_PLUS_SEXT_near_mem_imem_i_ETC___d353[1];
      default: IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d362 =
		   near_mem$imem_instr[6:0] != 7'b1100111 || eaddr__h4814[1];
    endcase
  end
  always@(near_mem$imem_instr)
  begin
    case (near_mem$imem_instr[6:0])
      7'b0000011:
	  CASE_near_memimem_instr_BITS_6_TO_0_0b11_near_ETC__q12 =
	      near_mem$imem_instr[14:12] == 3'b0 ||
	      near_mem$imem_instr[14:12] == 3'b100 ||
	      near_mem$imem_instr[14:12] == 3'b001 ||
	      near_mem$imem_instr[14:12] == 3'b101 ||
	      near_mem$imem_instr[14:12] == 3'b010;
      7'b0100011:
	  CASE_near_memimem_instr_BITS_6_TO_0_0b11_near_ETC__q12 =
	      near_mem$imem_instr[14:12] == 3'b0 ||
	      near_mem$imem_instr[14:12] == 3'b001 ||
	      near_mem$imem_instr[14:12] == 3'b010;
      default: CASE_near_memimem_instr_BITS_6_TO_0_0b11_near_ETC__q12 =
		   near_mem$imem_instr[6:0] == 7'b0101111 &&
		   (near_mem$imem_instr[31:27] == 5'b00010 ||
		    near_mem$imem_instr[31:27] == 5'b00011 ||
		    near_mem$imem_instr[31:27] == 5'b0 ||
		    near_mem$imem_instr[31:27] == 5'b00001 ||
		    near_mem$imem_instr[31:27] == 5'b01100 ||
		    near_mem$imem_instr[31:27] == 5'b01000 ||
		    near_mem$imem_instr[31:27] == 5'b00100 ||
		    near_mem$imem_instr[31:27] == 5'b10000 ||
		    near_mem$imem_instr[31:27] == 5'b11000 ||
		    near_mem$imem_instr[31:27] == 5'b10100 ||
		    near_mem$imem_instr[31:27] == 5'b11100) &&
		   near_mem$imem_instr[14:12] == 3'b010;
    endcase
  end
  always@(near_mem$imem_instr or
	  CASE_near_memimem_instr_BITS_6_TO_0_0b11_near_ETC__q12 or
	  near_mem_imem_instr__71_BITS_14_TO_12_94_EQ_0b_ETC___d383)
  begin
    case (near_mem$imem_instr[6:0])
      7'b0010011, 7'b0110011:
	  CASE_near_memimem_instr_BITS_6_TO_0_0b10011_n_ETC__q13 =
	      near_mem_imem_instr__71_BITS_14_TO_12_94_EQ_0b_ETC___d383;
      default: CASE_near_memimem_instr_BITS_6_TO_0_0b10011_n_ETC__q13 =
		   near_mem$imem_instr[6:0] == 7'b0110111 ||
		   near_mem$imem_instr[6:0] == 7'b0010111 ||
		   CASE_near_memimem_instr_BITS_6_TO_0_0b11_near_ETC__q12;
    endcase
  end
  always@(near_mem$imem_instr or
	  eaddr__h4814 or
	  IF_near_mem_imem_instr__71_BITS_14_TO_12_94_EQ_ETC___d345 or
	  branch_target__h4593 or
	  IF_near_mem_imem_instr__71_BITS_14_TO_12_94_EQ_ETC___d240 or
	  near_mem_imem_pc__82_PLUS_SEXT_near_mem_imem_i_ETC___d353)
  begin
    case (near_mem$imem_instr[6:0])
      7'b1100011:
	  IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d420 =
	      (near_mem$imem_instr[14:12] == 3'b0 ||
	       near_mem$imem_instr[14:12] == 3'b001 ||
	       near_mem$imem_instr[14:12] == 3'b100 ||
	       near_mem$imem_instr[14:12] == 3'b101 ||
	       near_mem$imem_instr[14:12] == 3'b110 ||
	       near_mem$imem_instr[14:12] == 3'b111) &&
	      (IF_near_mem_imem_instr__71_BITS_14_TO_12_94_EQ_ETC___d345 ||
	       !branch_target__h4593[1]) &&
	      IF_near_mem_imem_instr__71_BITS_14_TO_12_94_EQ_ETC___d240;
      7'b1101111:
	  IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d420 =
	      !near_mem_imem_pc__82_PLUS_SEXT_near_mem_imem_i_ETC___d353[1];
      default: IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d420 =
		   near_mem$imem_instr[6:0] == 7'b1100111 && !eaddr__h4814[1];
    endcase
  end
  always@(near_mem$imem_instr or
	  rg_cur_priv or
	  IF_rg_cur_priv_9_EQ_0b11_43_OR_rg_cur_priv_9_E_ETC___d462)
  begin
    case (near_mem$imem_instr[31:20])
      12'b0, 12'b000000000001:
	  IF_near_mem_imem_instr__71_BITS_31_TO_20_56_EQ_ETC___d464 = 4'd11;
      default: IF_near_mem_imem_instr__71_BITS_31_TO_20_56_EQ_ETC___d464 =
		   (rg_cur_priv == 2'b11 &&
		    near_mem$imem_instr[31:20] == 12'b001100000010) ?
		     4'd7 :
		     IF_rg_cur_priv_9_EQ_0b11_43_OR_rg_cur_priv_9_E_ETC___d462;
    endcase
  end
  always@(near_mem$imem_instr)
  begin
    case (near_mem$imem_instr[14:12])
      3'b0: CASE_near_memimem_instr_BITS_14_TO_12_0b0_4_0_ETC__q14 = 4'd4;
      3'b001: CASE_near_memimem_instr_BITS_14_TO_12_0b0_4_0_ETC__q14 = 4'd5;
      default: CASE_near_memimem_instr_BITS_14_TO_12_0b0_4_0_ETC__q14 = 4'd11;
    endcase
  end
  always@(near_mem$imem_instr or
	  IF_near_mem_imem_instr__71_BITS_31_TO_20_56_EQ_ETC___d464)
  begin
    case (near_mem$imem_instr[14:12])
      3'b0:
	  CASE_near_memimem_instr_BITS_14_TO_12_0b0_IF__ETC__q15 =
	      (near_mem$imem_instr[11:7] == 5'd0 &&
	       near_mem$imem_instr[19:15] == 5'd0) ?
		IF_near_mem_imem_instr__71_BITS_31_TO_20_56_EQ_ETC___d464 :
		4'd11;
      3'b001, 3'b101:
	  CASE_near_memimem_instr_BITS_14_TO_12_0b0_IF__ETC__q15 = 4'd2;
      3'b010, 3'b011, 3'b110, 3'b111:
	  CASE_near_memimem_instr_BITS_14_TO_12_0b0_IF__ETC__q15 = 4'd3;
      3'd4: CASE_near_memimem_instr_BITS_14_TO_12_0b0_IF__ETC__q15 = 4'd11;
    endcase
  end
  always@(near_mem$imem_instr or
	  CASE_near_memimem_instr_BITS_14_TO_12_0b0_4_0_ETC__q14 or
	  IF_NOT_near_mem_imem_instr__71_BITS_14_TO_12_9_ETC___d430 or
	  CASE_near_memimem_instr_BITS_14_TO_12_0b0_IF__ETC__q15)
  begin
    case (near_mem$imem_instr[6:0])
      7'b0000011:
	  IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d479 =
	      (near_mem$imem_instr[14:12] != 3'b0 &&
	       near_mem$imem_instr[14:12] != 3'b100 &&
	       near_mem$imem_instr[14:12] != 3'b001 &&
	       near_mem$imem_instr[14:12] != 3'b101 &&
	       near_mem$imem_instr[14:12] != 3'b010) ?
		4'd11 :
		4'd0;
      7'b0001111:
	  IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d479 =
	      CASE_near_memimem_instr_BITS_14_TO_12_0b0_4_0_ETC__q14;
      7'b0010011, 7'b0110011:
	  IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d479 =
	      IF_NOT_near_mem_imem_instr__71_BITS_14_TO_12_9_ETC___d430;
      7'b0010111, 7'b0110111:
	  IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d479 = 4'd0;
      7'b0100011:
	  IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d479 =
	      (near_mem$imem_instr[14:12] != 3'b0 &&
	       near_mem$imem_instr[14:12] != 3'b001 &&
	       near_mem$imem_instr[14:12] != 3'b010) ?
		4'd11 :
		4'd0;
      7'b0101111:
	  IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d479 =
	      ((near_mem$imem_instr[31:27] == 5'b00010 ||
		near_mem$imem_instr[31:27] == 5'b00011 ||
		near_mem$imem_instr[31:27] == 5'b0 ||
		near_mem$imem_instr[31:27] == 5'b00001 ||
		near_mem$imem_instr[31:27] == 5'b01100 ||
		near_mem$imem_instr[31:27] == 5'b01000 ||
		near_mem$imem_instr[31:27] == 5'b00100 ||
		near_mem$imem_instr[31:27] == 5'b10000 ||
		near_mem$imem_instr[31:27] == 5'b11000 ||
		near_mem$imem_instr[31:27] == 5'b10100 ||
		near_mem$imem_instr[31:27] == 5'b11100) &&
	       near_mem$imem_instr[14:12] == 3'b010) ?
		4'd0 :
		4'd11;
      7'b1110011:
	  IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d479 =
	      CASE_near_memimem_instr_BITS_14_TO_12_0b0_IF__ETC__q15;
      default: IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d479 =
		   4'd11;
    endcase
  end
  always@(near_mem$imem_instr or
	  IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d479 or
	  NOT_near_mem_imem_instr__71_BITS_14_TO_12_94_E_ETC___d339 or
	  IF_near_mem_imem_instr__71_BITS_14_TO_12_94_EQ_ETC___d240 or
	  eaddr__h4814 or
	  near_mem_imem_pc__82_PLUS_SEXT_near_mem_imem_i_ETC___d353)
  begin
    case (near_mem$imem_instr[6:0])
      7'b1100011:
	  IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d484 =
	      NOT_near_mem_imem_instr__71_BITS_14_TO_12_94_E_ETC___d339 ?
		4'd11 :
		(IF_near_mem_imem_instr__71_BITS_14_TO_12_94_EQ_ETC___d240 ?
		   4'd1 :
		   4'd0);
      7'b1100111:
	  IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d484 =
	      eaddr__h4814[1] ? 4'd11 : 4'd1;
      7'b1101111:
	  IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d484 =
	      near_mem_imem_pc__82_PLUS_SEXT_near_mem_imem_i_ETC___d353[1] ?
		4'd11 :
		4'd1;
      default: IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d484 =
		   (near_mem$imem_instr[6:0] == 7'b0110011 &&
		    near_mem$imem_instr[31:25] == 7'b0000001) ?
		     4'd0 :
		     (((near_mem$imem_instr[6:0] == 7'b0010011 ||
			near_mem$imem_instr[6:0] == 7'b0110011) &&
		       (near_mem$imem_instr[14:12] == 3'b001 ||
			near_mem$imem_instr[14:12] == 3'b101)) ?
			(near_mem$imem_instr[25] ? 4'd11 : 4'd0) :
			IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d479);
    endcase
  end
  always@(near_mem$imem_instr)
  begin
    case (near_mem$imem_instr[6:0])
      7'b0000011:
	  CASE_near_memimem_instr_BITS_6_TO_0_0b11_1_0b_ETC__q16 = 3'd1;
      7'b0010011, 7'b0010111, 7'b0110011, 7'b0110111:
	  CASE_near_memimem_instr_BITS_6_TO_0_0b11_1_0b_ETC__q16 = 3'd0;
      7'b0100011:
	  CASE_near_memimem_instr_BITS_6_TO_0_0b11_1_0b_ETC__q16 = 3'd2;
      default: CASE_near_memimem_instr_BITS_6_TO_0_0b11_1_0b_ETC__q16 = 3'd4;
    endcase
  end
  always@(near_mem$imem_instr or
	  CASE_near_memimem_instr_BITS_6_TO_0_0b11_1_0b_ETC__q16)
  begin
    case (near_mem$imem_instr[6:0])
      7'b1100011, 7'b1100111, 7'b1101111:
	  IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d566 = 3'd0;
      default: IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d566 =
		   (near_mem$imem_instr[6:0] == 7'b0110011 &&
		    near_mem$imem_instr[31:25] == 7'b0000001) ?
		     3'd3 :
		     CASE_near_memimem_instr_BITS_6_TO_0_0b11_1_0b_ETC__q16;
    endcase
  end
  always@(near_mem$imem_instr or
	  alu_outputs___1_val1__h5120 or
	  alu_outputs___1_val1__h4781 or
	  rd_val__h4800 or rd_val__h4787 or alu_outputs___1_val1__h5102)
  begin
    case (near_mem$imem_instr[6:0])
      7'b0010011, 7'b0110011:
	  IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d661 =
	      alu_outputs___1_val1__h4781;
      7'b0010111:
	  IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d661 =
	      rd_val__h4800;
      7'b0110111:
	  IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d661 =
	      rd_val__h4787;
      7'b1110011:
	  IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d661 =
	      alu_outputs___1_val1__h5102;
      default: IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d661 =
		   alu_outputs___1_val1__h5120;
    endcase
  end
  always@(near_mem$imem_instr or
	  rs1_val_bypassed__h2508 or
	  IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d662 or
	  ret_pc__h4615)
  begin
    case (near_mem$imem_instr[6:0])
      7'b1100111, 7'b1101111:
	  x_out_data_to_stage2_val1__h4501 = ret_pc__h4615;
      default: x_out_data_to_stage2_val1__h4501 =
		   (near_mem$imem_instr[6:0] == 7'b0110011 &&
		    near_mem$imem_instr[31:25] == 7'b0000001) ?
		     rs1_val_bypassed__h2508 :
		     IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d662;
    endcase
  end
  always@(near_mem$imem_instr or x_out_data_to_stage2_val1__h4501)
  begin
    case (near_mem$imem_instr[14:12])
      3'b010, 3'b011: rs1_val__h10335 = x_out_data_to_stage2_val1__h4501;
      default: rs1_val__h10335 = { 27'd0, near_mem$imem_instr[19:15] };
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_logdelay <= `BSV_ASSIGNMENT_DELAY 64'd0;
	cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	rg_halt <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 4'd0;
	stage1_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stage2_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stage3_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (cfg_logdelay$EN)
	  cfg_logdelay <= `BSV_ASSIGNMENT_DELAY cfg_logdelay$D_IN;
	if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (rg_halt$EN) rg_halt <= `BSV_ASSIGNMENT_DELAY rg_halt$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
	if (stage1_rg_full$EN)
	  stage1_rg_full <= `BSV_ASSIGNMENT_DELAY stage1_rg_full$D_IN;
	if (stage2_rg_full$EN)
	  stage2_rg_full <= `BSV_ASSIGNMENT_DELAY stage2_rg_full$D_IN;
	if (stage3_rg_full$EN)
	  stage3_rg_full <= `BSV_ASSIGNMENT_DELAY stage3_rg_full$D_IN;
      end
    if (rg_cur_priv$EN) rg_cur_priv <= `BSV_ASSIGNMENT_DELAY rg_cur_priv$D_IN;
    if (rg_inum$EN) rg_inum <= `BSV_ASSIGNMENT_DELAY rg_inum$D_IN;
    if (rg_start_CPI_cycles$EN)
      rg_start_CPI_cycles <= `BSV_ASSIGNMENT_DELAY rg_start_CPI_cycles$D_IN;
    if (rg_start_CPI_instrs$EN)
      rg_start_CPI_instrs <= `BSV_ASSIGNMENT_DELAY rg_start_CPI_instrs$D_IN;
    if (stage2_rg_stage2$EN)
      stage2_rg_stage2 <= `BSV_ASSIGNMENT_DELAY stage2_rg_stage2$D_IN;
    if (stage3_rg_stage3$EN)
      stage3_rg_stage3 <= `BSV_ASSIGNMENT_DELAY stage3_rg_stage3$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_logdelay = 64'hAAAAAAAAAAAAAAAA;
    cfg_verbosity = 4'hA;
    rg_cur_priv = 2'h2;
    rg_halt = 1'h0;
    rg_inum = 64'hAAAAAAAAAAAAAAAA;
    rg_start_CPI_cycles = 64'hAAAAAAAAAAAAAAAA;
    rg_start_CPI_instrs = 64'hAAAAAAAAAAAAAAAA;
    rg_state = 4'hA;
    stage1_rg_full = 1'h0;
    stage2_rg_full = 1'h0;
    stage2_rg_stage2 = 170'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    stage3_rg_full = 1'h0;
    stage3_rg_stage3 = 104'hAAAAAAAAAAAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("%0d: Pipeline State:  inum:%0d  cur_priv:%0d  mstatus:%0x",
		 csr_regfile$read_csr_mcycle,
		 rg_inum,
		 rg_cur_priv,
		 csr_regfile$read_mstatus);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write("MStatus{",
	       "sd:%0d",
	       csr_regfile$read_mstatus[14:13] == 2'h3 ||
	       csr_regfile$read_mstatus[16:15] == 2'h3);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && csr_regfile$read_misa[27:26] == 2'd2)
	$write(" sxl:%0d uxl:%0d", 2'd0, 2'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && csr_regfile$read_misa[27:26] != 2'd2)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" tsr:%0d", csr_regfile$read_mstatus[22]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" tw:%0d", csr_regfile$read_mstatus[21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" tvm:%0d", csr_regfile$read_mstatus[20]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" mxr:%0d", csr_regfile$read_mstatus[19]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" sum:%0d", csr_regfile$read_mstatus[18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" mprv:%0d", csr_regfile$read_mstatus[17]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" xs:%0d", csr_regfile$read_mstatus[16:15]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" fs:%0d", csr_regfile$read_mstatus[14:13]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" mpp:%0d", csr_regfile$read_mstatus[12:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" spp:%0d", csr_regfile$read_mstatus[8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" pies:%0d_%0d%0d",
	       csr_regfile$read_mstatus[7],
	       csr_regfile$read_mstatus[5],
	       csr_regfile$read_mstatus[4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" ies:%0d_%0d%0d",
	       csr_regfile$read_mstatus[3],
	       csr_regfile$read_mstatus[1],
	       csr_regfile$read_mstatus[0]);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("    Stage3: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Output_Stage3");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage3_rg_full) $write(" PIPE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage3_rg_full) $write(" EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        Bypass to Stage1: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Bypass {");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  (!stage3_rg_full || !stage3_rg_stage3[37]))
	$write("Rd -");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage3_rg_full && stage3_rg_stage3[37])
	$write("Rd %0d ",
	       stage3_rg_stage3[36:32],
	       "rd_val:%h",
	       stage3_rg_stage3[31:0]);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("    Stage2: pc 0x%08h instr 0x%08h priv %0d",
		 stage2_rg_stage2[167:136],
		 stage2_rg_stage2[135:104],
		 stage2_rg_stage2[169:168]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd0)
	$write("Output_Stage2", " EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd1)
	$write("Output_Stage2", " BUSY: pc:%0h", stage2_rg_stage2[167:136]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd3)
	$write("Output_Stage2", " NONPIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd0 &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd1 &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd3)
	$write("Output_Stage2", " PIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd0 &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd1 &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd3)
	$write("data_to_Stage3 {pc:%h  instr:%h  priv:%0d\n",
	       stage2_rg_stage2[167:136],
	       stage2_rg_stage2[135:104],
	       stage2_rg_stage2[169:168]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd0 &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd1 &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd3)
	$write("        rd_valid:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd0 &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd1 &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd3 &&
	  stage2_rg_stage2[103:101] != 3'd0 &&
	  IF_stage2_rg_stage2_4_BITS_103_TO_101_5_EQ_1_7_ETC___d108)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd0 &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd1 &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd3 &&
	  (stage2_rg_stage2[103:101] == 3'd0 ||
	   IF_stage2_rg_stage2_4_BITS_103_TO_101_5_EQ_1_7_ETC___d117))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd0 &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd1 &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd3)
	$write(" rd:%0d  rd_val:%h\n",
	       x_out_data_to_stage3_rd__h3892,
	       x_out_data_to_stage3_rd_val__h3893);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd3)
	$write("Trap_Info { ", "epc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd0 &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd1 &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd3)
	$write("'h%h", stage2_rg_stage2[167:136]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd0 &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd1 &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd3)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd0 &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd1 &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd3)
	$write("'h%h", near_mem$dmem_exc_code);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd0 &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd1 &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd3)
	$write(", ", "badaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd0 &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd1 &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd3)
	$write("'h%h", stage2_rg_stage2[95:64], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd0 &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd1 &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd3)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd0 &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd1 &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd3)
	$write("Trap_Info { ", "epc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd0 &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd1 &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd3)
	$write("'h%h", stage2_rg_stage2[167:136]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd0 &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd1 &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd3)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd0 &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd1 &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd3)
	$write("'h%h", near_mem$dmem_exc_code);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd0 &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd1 &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd3)
	$write(", ", "badaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd0 &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd1 &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd3)
	$write("'h%h", stage2_rg_stage2[95:64], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd0 &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd1 &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        Bypass to Stage1: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Bypass {");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d154 == 2'd0)
	$write("Rd -");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d154 != 2'd0)
	$write("Rd %0d ", x_out_bypass_rd__h4230);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d154 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d154 == 2'd1)
	$write("-");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d154 != 2'd0 &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d154 != 2'd1)
	$write("rd_val:%h", x_out_bypass_rd_val__h4231);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("    Stage1: pc 0x%08h instr 0x%08h priv %0d",
		 near_mem$imem_pc,
		 near_mem$imem_instr,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid__69_70_OR_IF_stage2_rg_ETC___d178)
	$write("Output_Stage1", " BUSY pc:%h", near_mem$imem_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d365)
	$write("Output_Stage1", " NONPIPE: pc:%h", near_mem$imem_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d423)
	$write("Output_Stage1");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full)
	$write("Output_Stage1", " EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid__69_70_OR_IF_stage2_rg_ETC___d178)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d365)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d423)
	$write(" PIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid__69_70_OR_IF_stage2_rg_ETC___d178)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d365)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d191 &&
	  !near_mem$imem_exc &&
	  (IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d411 ||
	   IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d420) &&
	  IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 == 4'd0)
	$write("CONTROL_STRAIGHT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d191 &&
	  !near_mem$imem_exc &&
	  (IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d411 ||
	   IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d420) &&
	  IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 == 4'd1)
	$write("CONTROL_BRANCH");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d191 &&
	  !near_mem$imem_exc &&
	  (IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d411 ||
	   IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d420) &&
	  IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 == 4'd2)
	$write("CONTROL_CSRR_W");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d191 &&
	  !near_mem$imem_exc &&
	  (IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d411 ||
	   IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d420) &&
	  IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 == 4'd3)
	$write("CONTROL_CSRR_S_or_C");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d191 &&
	  !near_mem$imem_exc &&
	  (IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d411 ||
	   IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d420) &&
	  IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 == 4'd4)
	$write("CONTROL_FENCE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d191 &&
	  !near_mem$imem_exc &&
	  (IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d411 ||
	   IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d420) &&
	  IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 == 4'd5)
	$write("CONTROL_FENCE_I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d191 &&
	  !near_mem$imem_exc &&
	  (IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d411 ||
	   IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d420) &&
	  IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 == 4'd6)
	$write("CONTROL_SFENCE_VMA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d191 &&
	  !near_mem$imem_exc &&
	  (IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d411 ||
	   IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d420) &&
	  IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 == 4'd7)
	$write("CONTROL_MRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d191 &&
	  !near_mem$imem_exc &&
	  (IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d411 ||
	   IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d420) &&
	  IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 == 4'd8)
	$write("CONTROL_SRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d191 &&
	  !near_mem$imem_exc &&
	  (IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d411 ||
	   IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d420) &&
	  IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 == 4'd9)
	$write("CONTROL_URET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d191 &&
	  !near_mem$imem_exc &&
	  (IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d411 ||
	   IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d420) &&
	  IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d486 == 4'd10)
	$write("CONTROL_WFI");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d191 &&
	  NOT_near_mem_imem_exc__80_67_AND_IF_near_mem_i_ETC___d552)
	$write("CONTROL_TRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid__69_70_OR_IF_stage2_rg_ETC___d178)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d365)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d423)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid__69_70_OR_IF_stage2_rg_ETC___d178)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d365)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d423)
	$write("data_to_Stage 2 {pc:%h  instr:%h  priv:%0d\n",
	       near_mem$imem_pc,
	       near_mem$imem_instr,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid__69_70_OR_IF_stage2_rg_ETC___d178)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d365)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d423)
	$write("            op_stage2:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid__69_70_OR_IF_stage2_rg_ETC___d178)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d365)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d191 &&
	  !near_mem$imem_exc &&
	  (IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d411 ||
	   IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d420) &&
	  IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d566 == 3'd0)
	$write("OP_Stage2_ALU");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d191 &&
	  !near_mem$imem_exc &&
	  (IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d411 ||
	   IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d420) &&
	  IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d566 == 3'd1)
	$write("OP_Stage2_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d191 &&
	  !near_mem$imem_exc &&
	  (IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d411 ||
	   IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d420) &&
	  IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d566 == 3'd2)
	$write("OP_Stage2_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d191 &&
	  !near_mem$imem_exc &&
	  (IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d411 ||
	   IF_near_mem_imem_instr__71_BITS_6_TO_0_92_EQ_0_ETC___d420) &&
	  IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d566 == 3'd3)
	$write("OP_Stage2_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d191 &&
	  NOT_near_mem_imem_exc__80_67_AND_IF_near_mem_i_ETC___d590)
	$write("OP_Stage2_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid__69_70_OR_IF_stage2_rg_ETC___d178)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d365)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d423)
	$write("  rd:%0d\n", x_out_data_to_stage2_rd__h4499);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid__69_70_OR_IF_stage2_rg_ETC___d178)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d365)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d423)
	$write("            addr:%h  val1:%h  val2:%h}",
	       x_out_data_to_stage2_addr__h4500,
	       x_out_data_to_stage2_val1__h4501,
	       x_out_data_to_stage2_val2__h4502);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid__69_70_OR_IF_stage2_rg_ETC___d178)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d365)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d423)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid__69_70_OR_IF_stage2_rg_ETC___d178)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d191 &&
	  near_mem_imem_exc__80_OR_IF_near_mem_imem_inst_ETC___d674)
	$write("CONTROL_STRAIGHT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d191 &&
	  near_mem_imem_exc__80_OR_IF_near_mem_imem_inst_ETC___d677)
	$write("CONTROL_BRANCH");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d191 &&
	  near_mem_imem_exc__80_OR_IF_near_mem_imem_inst_ETC___d680)
	$write("CONTROL_CSRR_W");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d191 &&
	  near_mem_imem_exc__80_OR_IF_near_mem_imem_inst_ETC___d683)
	$write("CONTROL_CSRR_S_or_C");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d191 &&
	  near_mem_imem_exc__80_OR_IF_near_mem_imem_inst_ETC___d686)
	$write("CONTROL_FENCE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d191 &&
	  near_mem_imem_exc__80_OR_IF_near_mem_imem_inst_ETC___d689)
	$write("CONTROL_FENCE_I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d191 &&
	  near_mem_imem_exc__80_OR_IF_near_mem_imem_inst_ETC___d692)
	$write("CONTROL_SFENCE_VMA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d191 &&
	  near_mem_imem_exc__80_OR_IF_near_mem_imem_inst_ETC___d695)
	$write("CONTROL_MRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d191 &&
	  near_mem_imem_exc__80_OR_IF_near_mem_imem_inst_ETC___d698)
	$write("CONTROL_SRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d191 &&
	  near_mem_imem_exc__80_OR_IF_near_mem_imem_inst_ETC___d701)
	$write("CONTROL_URET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d191 &&
	  near_mem_imem_exc__80_OR_IF_near_mem_imem_inst_ETC___d704)
	$write("CONTROL_WFI");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d191 &&
	  near_mem_imem_exc__80_OR_IF_near_mem_imem_inst_ETC___d707)
	$write("CONTROL_TRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d423)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid__69_70_OR_IF_stage2_rg_ETC___d178)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d365)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d423)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid__69_70_OR_IF_stage2_rg_ETC___d178)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d365)
	$write("Trap_Info { ", "epc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d423)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid__69_70_OR_IF_stage2_rg_ETC___d178)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d365)
	$write("'h%h", near_mem$imem_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d423)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid__69_70_OR_IF_stage2_rg_ETC___d178)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d365)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d423)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid__69_70_OR_IF_stage2_rg_ETC___d178)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d365)
	$write("'h%h", x_out_trap_info_exc_code__h6287);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d423)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid__69_70_OR_IF_stage2_rg_ETC___d178)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d365)
	$write(", ", "badaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d423)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid__69_70_OR_IF_stage2_rg_ETC___d178)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d365)
	$write("'h%h", value__h6328, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d423)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid__69_70_OR_IF_stage2_rg_ETC___d178)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid__69_AND_NOT_IF_stage2_rg_f_ETC___d191)
	$write(" next_pc 0x%08h", x_out_next_pc__h4458);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $display("----------------");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && cur_verbosity__h1330 != 4'd0)
	$display("%0d: CPU.reset_complete", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d16)
	$display("    CPU_Stage_1.enq: 0x%08x", pc_reset_value[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && cur_verbosity__h1330 != 4'd0)
	$display("    restart with PC = 0x%0h", pc_reset_value[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d16)
	$display("%0d: CPU.rl_pipe", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe && stage3_rg_full && stage3_rg_stage3[37] &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d16)
	$display("    S3.fa_deq: write Rd 0x%0h, rd_val 0x%0h",
		 stage3_rg_stage3[36:32],
		 stage3_rg_stage3[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d16)
	$write("    S3.enq: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d16)
	$write("data_to_Stage3 {pc:%h  instr:%h  priv:%0d\n",
	       stage2_rg_stage2[167:136],
	       stage2_rg_stage2[135:104],
	       stage2_rg_stage2[169:168]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d16)
	$write("        rd_valid:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d16 &&
	  stage2_rg_stage2[103:101] != 3'd0 &&
	  IF_stage2_rg_stage2_4_BITS_103_TO_101_5_EQ_1_7_ETC___d108)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d16 &&
	  (stage2_rg_stage2[103:101] == 3'd0 ||
	   IF_stage2_rg_stage2_4_BITS_103_TO_101_5_EQ_1_7_ETC___d117))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d16)
	$write(" rd:%0d  rd_val:%h\n",
	       x_out_data_to_stage3_rd__h3892,
	       x_out_data_to_stage3_rd_val__h3893);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d16)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_3_THEN_IF_stage2_rg_stage2_4_ETC___d94 == 2'd2 &&
	  cur_verbosity__h1330 == 4'd1)
	$display("inum:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 rg_inum,
		 stage2_rg_stage2[167:136],
		 stage2_rg_stage2[135:104],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_rg_halt_93_94_AND_NOT_csr_regfile_interrup_ETC___d823 &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d16)
	$display("    CPU_Stage2.enq (Data_Stage1_to_Stage2)");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_rg_halt_93_94_AND_NOT_csr_regfile_interrup_ETC___d845 &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d16)
	$display("    CPU_Stage_1.enq: 0x%08x", x_out_next_pc__h4458);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage2_nonpipe &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d16)
	$display("%0d: CPU.rl_stage2_nonpipe", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage2_nonpipe &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d16)
	$display("    CPU_Stage_1.enq: 0x%08x",
		 csr_regfile$csr_trap_actions[97:66]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage2_nonpipe && cur_verbosity__h1330 == 4'd1)
	$display("inum:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 rg_inum,
		 stage2_rg_stage2[167:136],
		 stage2_rg_stage2[135:104],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage2_nonpipe && cur_verbosity__h1330 != 4'd0)
	$display("    mcause:0x%0h  epc 0x%0h  tval:0x%0h  new pc 0x%0h, new mstatus 0x%0h",
		 csr_regfile$csr_trap_actions[33:2],
		 stage2_rg_stage2[167:136],
		 stage2_rg_stage2[95:64],
		 csr_regfile$csr_trap_actions[97:66],
		 csr_regfile$csr_trap_actions[65:34]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d16)
	$display("%0d:  CPU.rl_stage1_CSRR_W", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W && csr_regfile$access_permitted &&
	  cur_verbosity__h1330 == 4'd1)
	$display("inum:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 rg_inum,
		 near_mem$imem_pc,
		 near_mem$imem_instr,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W && csr_regfile$access_permitted &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d16)
	$display("    S1: write CSRRW/CSRRWI Rs1 %0d Rs1_val 0x%0h csr 0x%0h csr_val 0x%0h Rd %0d",
		 near_mem$imem_instr[19:15],
		 rs1_val__h9811,
		 near_mem$imem_instr[31:20],
		 csr_regfile$read_csr[31:0],
		 near_mem$imem_instr[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W && !csr_regfile$access_permitted &&
	  cur_verbosity__h1330 == 4'd1)
	$display("inum:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 rg_inum,
		 near_mem$imem_pc,
		 near_mem$imem_instr,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W && !csr_regfile$access_permitted &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d16)
	$display("    rl_stage1_CSRR_W: Trap on CSR permissions: Rs1 %0d Rs1_val 0x%0h csr 0x%0h Rd %0d",
		 near_mem$imem_instr[19:15],
		 rs1_val__h9811,
		 near_mem$imem_instr[31:20],
		 near_mem$imem_instr[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d16)
	$display("%0d:  CPU.rl_stage1_CSRR_S_or_C",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	  csr_regfile$access_permitted &&
	  cur_verbosity__h1330 == 4'd1)
	$display("inum:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 rg_inum,
		 near_mem$imem_pc,
		 near_mem$imem_instr,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	  csr_regfile$access_permitted &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d16)
	$display("    S1: write CSRRW/CSRRWI Rs1 %0d Rs1_val 0x%0h csr 0x%0h csr_val 0x%0h Rd %0d",
		 near_mem$imem_instr[19:15],
		 rs1_val__h10335,
		 near_mem$imem_instr[31:20],
		 csr_regfile$read_csr[31:0],
		 near_mem$imem_instr[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	  !csr_regfile$access_permitted &&
	  cur_verbosity__h1330 == 4'd1)
	$display("inum:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 rg_inum,
		 near_mem$imem_pc,
		 near_mem$imem_instr,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	  !csr_regfile$access_permitted &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d16)
	$display("    rl_stage1_CSRR_W: Trap on CSR permissions: Rs1 %0d Rs1_val 0x%0h csr 0x%0h Rd %0d",
		 near_mem$imem_instr[19:15],
		 rs1_val__h10335,
		 near_mem$imem_instr[31:20],
		 near_mem$imem_instr[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d16)
	$display("    CPU_Stage_1.enq: 0x%08x", x_out_next_pc__h4458);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d16)
	$display("%0d: rl_stage1_restart_after_csrrx: inum:%0d  pc:%0x  cur_priv:%0d",
		 csr_regfile$read_csr_mcycle,
		 rg_inum,
		 x_out_next_pc__h4458,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d16)
	$display("%0d:  CPU.rl_stage1_xRET", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d16)
	$display("    CPU_Stage_1.enq: 0x%08x",
		 csr_regfile$csr_ret_actions[65:34]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET && cur_verbosity__h1330 == 4'd1)
	$display("inum:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 rg_inum,
		 near_mem$imem_pc,
		 near_mem$imem_instr,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET && cur_verbosity__h1330 != 4'd0)
	$display("    xRET: next_pc:0x%0h  new mstatus:0x%0h  new priv:%0d",
		 csr_regfile$csr_ret_actions[65:34],
		 csr_regfile$csr_ret_actions[31:0],
		 csr_regfile$csr_ret_actions[33:32]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d16)
	$display("%0d:  CPU.rl_stage1_FENCE_I", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d16)
	$display("%0d: CPU.rl_stage1_FENCE_I", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d16)
	$display("%0d:  CPU.rl_finish_FENCE_I", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d16)
	$display("    CPU_Stage_1.enq: 0x%08x", x_out_next_pc__h4458);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I && cur_verbosity__h1330 == 4'd1)
	$display("inum:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 rg_inum,
		 near_mem$imem_pc,
		 near_mem$imem_instr,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d16)
	$display("    CPU.rl_finish_FENCE_I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d16)
	$display("%0d:  CPU.rl_stage1_FENCE", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d16)
	$display("%0d: CPU.rl_stage1_FENCE", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d16)
	$display("%0d:  CPU.rl_finish_FENCE", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d16)
	$display("    CPU_Stage_1.enq: 0x%08x", x_out_next_pc__h4458);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE && cur_verbosity__h1330 == 4'd1)
	$display("inum:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 rg_inum,
		 near_mem$imem_pc,
		 near_mem$imem_instr,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d16)
	$display("    CPU.rl_finish_FENCE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d16)
	$display("%0d:  CPU.rl_stage1_SFENCE_VMA",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d16)
	$display("%0d: CPU.rl_stage1_SFENCE_VMA",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d16)
	$display("%0d:  CPU.rl_finish_SFENCE_VMA",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d16)
	$display("    CPU_Stage_1.enq: 0x%08x", x_out_next_pc__h4458);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA && cur_verbosity__h1330 == 4'd1)
	$display("inum:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 rg_inum,
		 near_mem$imem_pc,
		 near_mem$imem_instr,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d16)
	$display("    CPU.rl_finish_SFENCE_VMA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_WFI &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d16)
	$display("%0d:  CPU.rl_stage1_WFI", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_WFI && cur_verbosity__h1330 == 4'd1)
	$display("inum:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 rg_inum,
		 near_mem$imem_pc,
		 near_mem$imem_instr,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_WFI &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d16)
	$display("    CPU.rl_stage1_WFI");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d16)
	$display("%0d:  CPU.rl_WFI_resume", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume && cur_verbosity__h1330 != 4'd0)
	$display("    WFI resume: inum:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 rg_inum,
		 near_mem$imem_pc,
		 near_mem$imem_instr,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d16)
	$display("    CPU_Stage_1.enq: 0x%08x", x_out_next_pc__h4458);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_from_WFI &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d16)
	$display("%0d:  CPU.rl_reset_from_WFI", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d16)
	$display("%0d:  CPU.rl_stage1_trap", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d16)
	$display("    CPU_Stage_1.enq: 0x%08x",
		 csr_regfile$csr_trap_actions[97:66]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d941)
	$display("%0d: CPU.rl_stage1_trap: Tight infinite trap loop: pc 0x%0x instr 0x%08x",
		 csr_regfile$read_csr_mcycle,
		 csr_regfile$csr_trap_actions[97:66],
		 near_mem$imem_instr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d941)
	$display("CPI: %0d.%0d = (%0d/%0d) since last 'continue'",
		 cpi__h13988,
		 cpifrac__h13989,
		 delta_CPI_cycles__h13984,
		 _theResult____h13986);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_67_68_OR_NOT_near_mem_im_ETC___d941)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap && cur_verbosity__h1330 == 4'd1)
	$display("inum:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 rg_inum,
		 near_mem$imem_pc,
		 near_mem$imem_instr,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap && cur_verbosity__h1330 != 4'd0)
	$display("%0d: CPU.rl_stage1_trap: priv:%0d  mcause:0x%0h  epc:0x%0h",
		 csr_regfile$read_csr_mcycle,
		 rg_cur_priv,
		 csr_regfile$csr_trap_actions[33:2],
		 near_mem$imem_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap && cur_verbosity__h1330 != 4'd0)
	$display("    tval:0x%0h  new pc:0x%0h  new mstatus:0x%0h",
		 value__h6328,
		 csr_regfile$csr_trap_actions[97:66],
		 csr_regfile$csr_trap_actions[65:34]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_interrupt &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d16)
	$display("%0d:  CPU.rl_stage1_interrupt",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_interrupt &&
	  NOT_IF_csr_regfile_read_csr_minstret__0_ULT_cf_ETC___d16)
	$display("    CPU_Stage_1.enq: 0x%08x",
		 csr_regfile$csr_trap_actions[97:66]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_interrupt && cur_verbosity__h1330 == 4'd1)
	$display("inum:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 rg_inum,
		 near_mem$imem_pc,
		 near_mem$imem_instr,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_interrupt && cur_verbosity__h1330 != 4'd0)
	$display("%0d: CPU.rl_stage1_interrupt: epc 0x%0h  next PC 0x%0h  new_priv %0d  new mstatus 0x%0h",
		 csr_regfile$read_csr_mcycle,
		 near_mem$imem_pc,
		 csr_regfile$csr_trap_actions[97:66],
		 csr_regfile$csr_trap_actions[1:0],
		 csr_regfile$csr_trap_actions[65:34]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$write("CPU: Bluespec  RISC-V  Piccolo  v3.0");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start) $display(" (RV32)");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$display("Copyright (c) 2016-2018 Bluespec, Inc. All Rights Reserved.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	begin
	  TASK_testplusargs___d762 = $test$plusargs("v1");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	begin
	  TASK_testplusargs___d761 = $test$plusargs("v2");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start && cur_verbosity__h1330 != 4'd0)
	$display("%0d: CPU.rl_reset_start", csr_regfile$read_csr_mcycle);
  end
  // synopsys translate_on
endmodule  // mkCPU

