//
// Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
//
//
//
//
// Ports:
// Name                         I/O  size props
// RDY_hart0_server_reset_request_put  O     1 reg
// RDY_hart0_server_reset_response_get  O     1 reg
// imem_master_awvalid            O     1
// imem_master_awid               O     4 reg
// imem_master_awaddr             O    64 reg
// imem_master_awlen              O     8 reg
// imem_master_awsize             O     3 reg
// imem_master_awburst            O     2 reg
// imem_master_awlock             O     1 reg
// imem_master_awcache            O     4 reg
// imem_master_awprot             O     3 reg
// imem_master_awqos              O     4 reg
// imem_master_awregion           O     4 reg
// imem_master_wvalid             O     1
// imem_master_wid                O     4 reg
// imem_master_wdata              O    64 reg
// imem_master_wstrb              O     8 reg
// imem_master_wlast              O     1 reg
// imem_master_bready             O     1
// imem_master_arvalid            O     1
// imem_master_arid               O     4 reg
// imem_master_araddr             O    64 reg
// imem_master_arlen              O     8 reg
// imem_master_arsize             O     3 reg
// imem_master_arburst            O     2 reg
// imem_master_arlock             O     1 reg
// imem_master_arcache            O     4 reg
// imem_master_arprot             O     3 reg
// imem_master_arqos              O     4 reg
// imem_master_arregion           O     4 reg
// imem_master_rready             O     1
// dmem_master_awvalid            O     1
// dmem_master_awid               O     4 reg
// dmem_master_awaddr             O    64 reg
// dmem_master_awlen              O     8 reg
// dmem_master_awsize             O     3 reg
// dmem_master_awburst            O     2 reg
// dmem_master_awlock             O     1 reg
// dmem_master_awcache            O     4 reg
// dmem_master_awprot             O     3 reg
// dmem_master_awqos              O     4 reg
// dmem_master_awregion           O     4 reg
// dmem_master_wvalid             O     1
// dmem_master_wid                O     4 reg
// dmem_master_wdata              O    64 reg
// dmem_master_wstrb              O     8 reg
// dmem_master_wlast              O     1 reg
// dmem_master_bready             O     1
// dmem_master_arvalid            O     1
// dmem_master_arid               O     4 reg
// dmem_master_araddr             O    64 reg
// dmem_master_arlen              O     8 reg
// dmem_master_arsize             O     3 reg
// dmem_master_arburst            O     2 reg
// dmem_master_arlock             O     1 reg
// dmem_master_arcache            O     4 reg
// dmem_master_arprot             O     3 reg
// dmem_master_arqos              O     4 reg
// dmem_master_arregion           O     4 reg
// dmem_master_rready             O     1
// RDY_set_verbosity              O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// imem_master_awready            I     1
// imem_master_wready             I     1
// imem_master_bvalid             I     1
// imem_master_bid                I     4 reg
// imem_master_bresp              I     2 reg
// imem_master_arready            I     1
// imem_master_rvalid             I     1
// imem_master_rid                I     4 reg
// imem_master_rdata              I    64 reg
// imem_master_rresp              I     2 reg
// imem_master_rlast              I     1 reg
// dmem_master_awready            I     1
// dmem_master_wready             I     1
// dmem_master_bvalid             I     1
// dmem_master_bid                I     4 reg
// dmem_master_bresp              I     2 reg
// dmem_master_arready            I     1
// dmem_master_rvalid             I     1
// dmem_master_rid                I     4 reg
// dmem_master_rdata              I    64 reg
// dmem_master_rresp              I     2 reg
// dmem_master_rlast              I     1 reg
// m_external_interrupt_req_set_not_clear  I     1 reg
// s_external_interrupt_req_set_not_clear  I     1 reg
// software_interrupt_req_set_not_clear  I     1 reg
// timer_interrupt_req_set_not_clear  I     1 reg
// nmi_req_set_not_clear          I     1
// set_verbosity_verbosity        I     4 reg
// set_verbosity_logdelay         I    64 reg
// EN_hart0_server_reset_request_put  I     1
// EN_hart0_server_reset_response_get  I     1
// EN_set_verbosity               I     1
//
// Combinational paths from inputs to outputs:
//   (imem_master_awready, imem_master_wready) -> imem_master_bready
//   (imem_master_awready,
//    imem_master_wready,
//    dmem_master_awready,
//    dmem_master_wready) -> imem_master_rready
//   (imem_master_awready,
//    imem_master_wready,
//    dmem_master_awready,
//    dmem_master_wready) -> dmem_master_rready
//   (dmem_master_awready, dmem_master_wready) -> dmem_master_bready
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCPU(CLK,
	     RST_N,

	     EN_hart0_server_reset_request_put,
	     RDY_hart0_server_reset_request_put,

	     EN_hart0_server_reset_response_get,
	     RDY_hart0_server_reset_response_get,

	     imem_master_awvalid,

	     imem_master_awid,

	     imem_master_awaddr,

	     imem_master_awlen,

	     imem_master_awsize,

	     imem_master_awburst,

	     imem_master_awlock,

	     imem_master_awcache,

	     imem_master_awprot,

	     imem_master_awqos,

	     imem_master_awregion,

	     imem_master_awready,

	     imem_master_wvalid,

	     imem_master_wid,

	     imem_master_wdata,

	     imem_master_wstrb,

	     imem_master_wlast,

	     imem_master_wready,

	     imem_master_bvalid,
	     imem_master_bid,
	     imem_master_bresp,

	     imem_master_bready,

	     imem_master_arvalid,

	     imem_master_arid,

	     imem_master_araddr,

	     imem_master_arlen,

	     imem_master_arsize,

	     imem_master_arburst,

	     imem_master_arlock,

	     imem_master_arcache,

	     imem_master_arprot,

	     imem_master_arqos,

	     imem_master_arregion,

	     imem_master_arready,

	     imem_master_rvalid,
	     imem_master_rid,
	     imem_master_rdata,
	     imem_master_rresp,
	     imem_master_rlast,

	     imem_master_rready,

	     dmem_master_awvalid,

	     dmem_master_awid,

	     dmem_master_awaddr,

	     dmem_master_awlen,

	     dmem_master_awsize,

	     dmem_master_awburst,

	     dmem_master_awlock,

	     dmem_master_awcache,

	     dmem_master_awprot,

	     dmem_master_awqos,

	     dmem_master_awregion,

	     dmem_master_awready,

	     dmem_master_wvalid,

	     dmem_master_wid,

	     dmem_master_wdata,

	     dmem_master_wstrb,

	     dmem_master_wlast,

	     dmem_master_wready,

	     dmem_master_bvalid,
	     dmem_master_bid,
	     dmem_master_bresp,

	     dmem_master_bready,

	     dmem_master_arvalid,

	     dmem_master_arid,

	     dmem_master_araddr,

	     dmem_master_arlen,

	     dmem_master_arsize,

	     dmem_master_arburst,

	     dmem_master_arlock,

	     dmem_master_arcache,

	     dmem_master_arprot,

	     dmem_master_arqos,

	     dmem_master_arregion,

	     dmem_master_arready,

	     dmem_master_rvalid,
	     dmem_master_rid,
	     dmem_master_rdata,
	     dmem_master_rresp,
	     dmem_master_rlast,

	     dmem_master_rready,

	     m_external_interrupt_req_set_not_clear,

	     s_external_interrupt_req_set_not_clear,

	     software_interrupt_req_set_not_clear,

	     timer_interrupt_req_set_not_clear,

	     nmi_req_set_not_clear,

	     set_verbosity_verbosity,
	     set_verbosity_logdelay,
	     EN_set_verbosity,
	     RDY_set_verbosity);
  input  CLK;
  input  RST_N;

  // action method hart0_server_reset_request_put
  input  EN_hart0_server_reset_request_put;
  output RDY_hart0_server_reset_request_put;

  // action method hart0_server_reset_response_get
  input  EN_hart0_server_reset_response_get;
  output RDY_hart0_server_reset_response_get;

  // value method imem_master_m_awvalid
  output imem_master_awvalid;

  // value method imem_master_m_awid
  output [3 : 0] imem_master_awid;

  // value method imem_master_m_awaddr
  output [63 : 0] imem_master_awaddr;

  // value method imem_master_m_awlen
  output [7 : 0] imem_master_awlen;

  // value method imem_master_m_awsize
  output [2 : 0] imem_master_awsize;

  // value method imem_master_m_awburst
  output [1 : 0] imem_master_awburst;

  // value method imem_master_m_awlock
  output imem_master_awlock;

  // value method imem_master_m_awcache
  output [3 : 0] imem_master_awcache;

  // value method imem_master_m_awprot
  output [2 : 0] imem_master_awprot;

  // value method imem_master_m_awqos
  output [3 : 0] imem_master_awqos;

  // value method imem_master_m_awregion
  output [3 : 0] imem_master_awregion;

  // value method imem_master_m_awuser

  // action method imem_master_m_awready
  input  imem_master_awready;

  // value method imem_master_m_wvalid
  output imem_master_wvalid;

  // value method imem_master_m_wid
  output [3 : 0] imem_master_wid;

  // value method imem_master_m_wdata
  output [63 : 0] imem_master_wdata;

  // value method imem_master_m_wstrb
  output [7 : 0] imem_master_wstrb;

  // value method imem_master_m_wlast
  output imem_master_wlast;

  // value method imem_master_m_wuser

  // action method imem_master_m_wready
  input  imem_master_wready;

  // action method imem_master_m_bvalid
  input  imem_master_bvalid;
  input  [3 : 0] imem_master_bid;
  input  [1 : 0] imem_master_bresp;

  // value method imem_master_m_bready
  output imem_master_bready;

  // value method imem_master_m_arvalid
  output imem_master_arvalid;

  // value method imem_master_m_arid
  output [3 : 0] imem_master_arid;

  // value method imem_master_m_araddr
  output [63 : 0] imem_master_araddr;

  // value method imem_master_m_arlen
  output [7 : 0] imem_master_arlen;

  // value method imem_master_m_arsize
  output [2 : 0] imem_master_arsize;

  // value method imem_master_m_arburst
  output [1 : 0] imem_master_arburst;

  // value method imem_master_m_arlock
  output imem_master_arlock;

  // value method imem_master_m_arcache
  output [3 : 0] imem_master_arcache;

  // value method imem_master_m_arprot
  output [2 : 0] imem_master_arprot;

  // value method imem_master_m_arqos
  output [3 : 0] imem_master_arqos;

  // value method imem_master_m_arregion
  output [3 : 0] imem_master_arregion;

  // value method imem_master_m_aruser

  // action method imem_master_m_arready
  input  imem_master_arready;

  // action method imem_master_m_rvalid
  input  imem_master_rvalid;
  input  [3 : 0] imem_master_rid;
  input  [63 : 0] imem_master_rdata;
  input  [1 : 0] imem_master_rresp;
  input  imem_master_rlast;

  // value method imem_master_m_rready
  output imem_master_rready;

  // value method dmem_master_m_awvalid
  output dmem_master_awvalid;

  // value method dmem_master_m_awid
  output [3 : 0] dmem_master_awid;

  // value method dmem_master_m_awaddr
  output [63 : 0] dmem_master_awaddr;

  // value method dmem_master_m_awlen
  output [7 : 0] dmem_master_awlen;

  // value method dmem_master_m_awsize
  output [2 : 0] dmem_master_awsize;

  // value method dmem_master_m_awburst
  output [1 : 0] dmem_master_awburst;

  // value method dmem_master_m_awlock
  output dmem_master_awlock;

  // value method dmem_master_m_awcache
  output [3 : 0] dmem_master_awcache;

  // value method dmem_master_m_awprot
  output [2 : 0] dmem_master_awprot;

  // value method dmem_master_m_awqos
  output [3 : 0] dmem_master_awqos;

  // value method dmem_master_m_awregion
  output [3 : 0] dmem_master_awregion;

  // value method dmem_master_m_awuser

  // action method dmem_master_m_awready
  input  dmem_master_awready;

  // value method dmem_master_m_wvalid
  output dmem_master_wvalid;

  // value method dmem_master_m_wid
  output [3 : 0] dmem_master_wid;

  // value method dmem_master_m_wdata
  output [63 : 0] dmem_master_wdata;

  // value method dmem_master_m_wstrb
  output [7 : 0] dmem_master_wstrb;

  // value method dmem_master_m_wlast
  output dmem_master_wlast;

  // value method dmem_master_m_wuser

  // action method dmem_master_m_wready
  input  dmem_master_wready;

  // action method dmem_master_m_bvalid
  input  dmem_master_bvalid;
  input  [3 : 0] dmem_master_bid;
  input  [1 : 0] dmem_master_bresp;

  // value method dmem_master_m_bready
  output dmem_master_bready;

  // value method dmem_master_m_arvalid
  output dmem_master_arvalid;

  // value method dmem_master_m_arid
  output [3 : 0] dmem_master_arid;

  // value method dmem_master_m_araddr
  output [63 : 0] dmem_master_araddr;

  // value method dmem_master_m_arlen
  output [7 : 0] dmem_master_arlen;

  // value method dmem_master_m_arsize
  output [2 : 0] dmem_master_arsize;

  // value method dmem_master_m_arburst
  output [1 : 0] dmem_master_arburst;

  // value method dmem_master_m_arlock
  output dmem_master_arlock;

  // value method dmem_master_m_arcache
  output [3 : 0] dmem_master_arcache;

  // value method dmem_master_m_arprot
  output [2 : 0] dmem_master_arprot;

  // value method dmem_master_m_arqos
  output [3 : 0] dmem_master_arqos;

  // value method dmem_master_m_arregion
  output [3 : 0] dmem_master_arregion;

  // value method dmem_master_m_aruser

  // action method dmem_master_m_arready
  input  dmem_master_arready;

  // action method dmem_master_m_rvalid
  input  dmem_master_rvalid;
  input  [3 : 0] dmem_master_rid;
  input  [63 : 0] dmem_master_rdata;
  input  [1 : 0] dmem_master_rresp;
  input  dmem_master_rlast;

  // value method dmem_master_m_rready
  output dmem_master_rready;

  // action method m_external_interrupt_req
  input  m_external_interrupt_req_set_not_clear;

  // action method s_external_interrupt_req
  input  s_external_interrupt_req_set_not_clear;

  // action method software_interrupt_req
  input  software_interrupt_req_set_not_clear;

  // action method timer_interrupt_req
  input  timer_interrupt_req_set_not_clear;

  // action method nmi_req
  input  nmi_req_set_not_clear;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  [63 : 0] set_verbosity_logdelay;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // signals for module outputs
  wire [63 : 0] dmem_master_araddr,
		dmem_master_awaddr,
		dmem_master_wdata,
		imem_master_araddr,
		imem_master_awaddr,
		imem_master_wdata;
  wire [7 : 0] dmem_master_arlen,
	       dmem_master_awlen,
	       dmem_master_wstrb,
	       imem_master_arlen,
	       imem_master_awlen,
	       imem_master_wstrb;
  wire [3 : 0] dmem_master_arcache,
	       dmem_master_arid,
	       dmem_master_arqos,
	       dmem_master_arregion,
	       dmem_master_awcache,
	       dmem_master_awid,
	       dmem_master_awqos,
	       dmem_master_awregion,
	       dmem_master_wid,
	       imem_master_arcache,
	       imem_master_arid,
	       imem_master_arqos,
	       imem_master_arregion,
	       imem_master_awcache,
	       imem_master_awid,
	       imem_master_awqos,
	       imem_master_awregion,
	       imem_master_wid;
  wire [2 : 0] dmem_master_arprot,
	       dmem_master_arsize,
	       dmem_master_awprot,
	       dmem_master_awsize,
	       imem_master_arprot,
	       imem_master_arsize,
	       imem_master_awprot,
	       imem_master_awsize;
  wire [1 : 0] dmem_master_arburst,
	       dmem_master_awburst,
	       imem_master_arburst,
	       imem_master_awburst;
  wire RDY_hart0_server_reset_request_put,
       RDY_hart0_server_reset_response_get,
       RDY_set_verbosity,
       dmem_master_arlock,
       dmem_master_arvalid,
       dmem_master_awlock,
       dmem_master_awvalid,
       dmem_master_bready,
       dmem_master_rready,
       dmem_master_wlast,
       dmem_master_wvalid,
       imem_master_arlock,
       imem_master_arvalid,
       imem_master_awlock,
       imem_master_awvalid,
       imem_master_bready,
       imem_master_rready,
       imem_master_wlast,
       imem_master_wvalid;

  // register cfg_logdelay
  reg [63 : 0] cfg_logdelay;
  wire [63 : 0] cfg_logdelay$D_IN;
  wire cfg_logdelay$EN;

  // register cfg_verbosity
  reg [3 : 0] cfg_verbosity;
  wire [3 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register imem_rg_f3
  reg [2 : 0] imem_rg_f3;
  wire [2 : 0] imem_rg_f3$D_IN;
  wire imem_rg_f3$EN;

  // register imem_rg_instr_15_0
  reg [15 : 0] imem_rg_instr_15_0;
  wire [15 : 0] imem_rg_instr_15_0$D_IN;
  wire imem_rg_instr_15_0$EN;

  // register imem_rg_mstatus_MXR
  reg imem_rg_mstatus_MXR;
  wire imem_rg_mstatus_MXR$D_IN, imem_rg_mstatus_MXR$EN;

  // register imem_rg_pc
  reg [63 : 0] imem_rg_pc;
  reg [63 : 0] imem_rg_pc$D_IN;
  wire imem_rg_pc$EN;

  // register imem_rg_priv
  reg [1 : 0] imem_rg_priv;
  wire [1 : 0] imem_rg_priv$D_IN;
  wire imem_rg_priv$EN;

  // register imem_rg_satp
  reg [63 : 0] imem_rg_satp;
  wire [63 : 0] imem_rg_satp$D_IN;
  wire imem_rg_satp$EN;

  // register imem_rg_sstatus_SUM
  reg imem_rg_sstatus_SUM;
  wire imem_rg_sstatus_SUM$D_IN, imem_rg_sstatus_SUM$EN;

  // register imem_rg_tval
  reg [63 : 0] imem_rg_tval;
  reg [63 : 0] imem_rg_tval$D_IN;
  wire imem_rg_tval$EN;

  // register rg_cur_priv
  reg [1 : 0] rg_cur_priv;
  reg [1 : 0] rg_cur_priv$D_IN;
  wire rg_cur_priv$EN;

  // register rg_mstatus_MXR
  reg rg_mstatus_MXR;
  wire rg_mstatus_MXR$D_IN, rg_mstatus_MXR$EN;

  // register rg_next_pc
  reg [63 : 0] rg_next_pc;
  reg [63 : 0] rg_next_pc$D_IN;
  wire rg_next_pc$EN;

  // register rg_sstatus_SUM
  reg rg_sstatus_SUM;
  wire rg_sstatus_SUM$D_IN, rg_sstatus_SUM$EN;

  // register rg_start_CPI_cycles
  reg [63 : 0] rg_start_CPI_cycles;
  wire [63 : 0] rg_start_CPI_cycles$D_IN;
  wire rg_start_CPI_cycles$EN;

  // register rg_start_CPI_instrs
  reg [63 : 0] rg_start_CPI_instrs;
  wire [63 : 0] rg_start_CPI_instrs$D_IN;
  wire rg_start_CPI_instrs$EN;

  // register rg_state
  reg [3 : 0] rg_state;
  reg [3 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // register stage1_rg_full
  reg stage1_rg_full;
  reg stage1_rg_full$D_IN;
  wire stage1_rg_full$EN;

  // register stage2_rg_full
  reg stage2_rg_full;
  reg stage2_rg_full$D_IN;
  wire stage2_rg_full$EN;

  // register stage2_rg_resetting
  reg stage2_rg_resetting;
  wire stage2_rg_resetting$D_IN, stage2_rg_resetting$EN;

  // register stage2_rg_stage2
  reg [297 : 0] stage2_rg_stage2;
  wire [297 : 0] stage2_rg_stage2$D_IN;
  wire stage2_rg_stage2$EN;

  // register stage3_rg_full
  reg stage3_rg_full;
  reg stage3_rg_full$D_IN;
  wire stage3_rg_full$EN;

  // register stage3_rg_stage3
  reg [167 : 0] stage3_rg_stage3;
  wire [167 : 0] stage3_rg_stage3$D_IN;
  wire stage3_rg_stage3$EN;

  // ports of submodule csr_regfile
  reg [63 : 0] csr_regfile$csr_trap_actions_xtval;
  reg [3 : 0] csr_regfile$csr_trap_actions_exc_code;
  reg [1 : 0] csr_regfile$csr_ret_actions_from_priv;
  wire [193 : 0] csr_regfile$csr_trap_actions;
  wire [129 : 0] csr_regfile$csr_ret_actions;
  wire [64 : 0] csr_regfile$read_csr;
  wire [63 : 0] csr_regfile$csr_trap_actions_pc,
		csr_regfile$mav_csr_write_word,
		csr_regfile$read_csr_mcycle,
		csr_regfile$read_csr_minstret,
		csr_regfile$read_mstatus,
		csr_regfile$read_satp;
  wire [27 : 0] csr_regfile$read_misa;
  wire [11 : 0] csr_regfile$access_permitted_1_csr_addr,
		csr_regfile$access_permitted_2_csr_addr,
		csr_regfile$csr_counter_read_fault_csr_addr,
		csr_regfile$mav_csr_write_csr_addr,
		csr_regfile$mav_read_csr_csr_addr,
		csr_regfile$read_csr_csr_addr,
		csr_regfile$read_csr_port2_csr_addr;
  wire [4 : 0] csr_regfile$interrupt_pending;
  wire [1 : 0] csr_regfile$access_permitted_1_priv,
	       csr_regfile$access_permitted_2_priv,
	       csr_regfile$csr_counter_read_fault_priv,
	       csr_regfile$csr_trap_actions_from_priv,
	       csr_regfile$interrupt_pending_cur_priv;
  wire csr_regfile$EN_csr_minstret_incr,
       csr_regfile$EN_csr_ret_actions,
       csr_regfile$EN_csr_trap_actions,
       csr_regfile$EN_debug,
       csr_regfile$EN_mav_csr_write,
       csr_regfile$EN_mav_read_csr,
       csr_regfile$EN_server_reset_request_put,
       csr_regfile$EN_server_reset_response_get,
       csr_regfile$RDY_server_reset_request_put,
       csr_regfile$RDY_server_reset_response_get,
       csr_regfile$access_permitted_1,
       csr_regfile$access_permitted_1_read_not_write,
       csr_regfile$access_permitted_2,
       csr_regfile$access_permitted_2_read_not_write,
       csr_regfile$csr_trap_actions_interrupt,
       csr_regfile$csr_trap_actions_nmi,
       csr_regfile$m_external_interrupt_req_set_not_clear,
       csr_regfile$nmi_pending,
       csr_regfile$nmi_req_set_not_clear,
       csr_regfile$s_external_interrupt_req_set_not_clear,
       csr_regfile$software_interrupt_req_set_not_clear,
       csr_regfile$timer_interrupt_req_set_not_clear,
       csr_regfile$wfi_resume;

  // ports of submodule f_reset_reqs
  wire f_reset_reqs$CLR,
       f_reset_reqs$DEQ,
       f_reset_reqs$EMPTY_N,
       f_reset_reqs$ENQ,
       f_reset_reqs$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule gpr_regfile
  wire [63 : 0] gpr_regfile$read_rs1,
		gpr_regfile$read_rs2,
		gpr_regfile$write_rd_rd_val;
  wire [4 : 0] gpr_regfile$read_rs1_port2_rs1,
	       gpr_regfile$read_rs1_rs1,
	       gpr_regfile$read_rs2_rs2,
	       gpr_regfile$write_rd_rd;
  wire gpr_regfile$EN_server_reset_request_put,
       gpr_regfile$EN_server_reset_response_get,
       gpr_regfile$EN_write_rd,
       gpr_regfile$RDY_server_reset_request_put,
       gpr_regfile$RDY_server_reset_response_get;

  // ports of submodule near_mem
  reg [63 : 0] near_mem$imem_req_addr;
  reg [1 : 0] near_mem$dmem_req_op;
  reg near_mem$imem_req_mstatus_MXR, near_mem$imem_req_sstatus_SUM;
  wire [63 : 0] near_mem$dmem_master_araddr,
		near_mem$dmem_master_awaddr,
		near_mem$dmem_master_rdata,
		near_mem$dmem_master_wdata,
		near_mem$dmem_req_addr,
		near_mem$dmem_req_satp,
		near_mem$dmem_req_store_value,
		near_mem$dmem_word64,
		near_mem$imem_master_araddr,
		near_mem$imem_master_awaddr,
		near_mem$imem_master_rdata,
		near_mem$imem_master_wdata,
		near_mem$imem_pc,
		near_mem$imem_req_satp;
  wire [31 : 0] near_mem$imem_instr;
  wire [7 : 0] near_mem$dmem_master_arlen,
	       near_mem$dmem_master_awlen,
	       near_mem$dmem_master_wstrb,
	       near_mem$imem_master_arlen,
	       near_mem$imem_master_awlen,
	       near_mem$imem_master_wstrb,
	       near_mem$server_fence_request_put;
  wire [6 : 0] near_mem$dmem_req_amo_funct7;
  wire [3 : 0] near_mem$dmem_exc_code,
	       near_mem$dmem_master_arcache,
	       near_mem$dmem_master_arid,
	       near_mem$dmem_master_arqos,
	       near_mem$dmem_master_arregion,
	       near_mem$dmem_master_awcache,
	       near_mem$dmem_master_awid,
	       near_mem$dmem_master_awqos,
	       near_mem$dmem_master_awregion,
	       near_mem$dmem_master_bid,
	       near_mem$dmem_master_rid,
	       near_mem$dmem_master_wid,
	       near_mem$imem_exc_code,
	       near_mem$imem_master_arcache,
	       near_mem$imem_master_arid,
	       near_mem$imem_master_arqos,
	       near_mem$imem_master_arregion,
	       near_mem$imem_master_awcache,
	       near_mem$imem_master_awid,
	       near_mem$imem_master_awqos,
	       near_mem$imem_master_awregion,
	       near_mem$imem_master_bid,
	       near_mem$imem_master_rid,
	       near_mem$imem_master_wid;
  wire [2 : 0] near_mem$dmem_master_arprot,
	       near_mem$dmem_master_arsize,
	       near_mem$dmem_master_awprot,
	       near_mem$dmem_master_awsize,
	       near_mem$dmem_req_f3,
	       near_mem$imem_master_arprot,
	       near_mem$imem_master_arsize,
	       near_mem$imem_master_awprot,
	       near_mem$imem_master_awsize,
	       near_mem$imem_req_f3;
  wire [1 : 0] near_mem$dmem_master_arburst,
	       near_mem$dmem_master_awburst,
	       near_mem$dmem_master_bresp,
	       near_mem$dmem_master_rresp,
	       near_mem$dmem_req_priv,
	       near_mem$imem_master_arburst,
	       near_mem$imem_master_awburst,
	       near_mem$imem_master_bresp,
	       near_mem$imem_master_rresp,
	       near_mem$imem_req_priv;
  wire near_mem$EN_dmem_req,
       near_mem$EN_imem_req,
       near_mem$EN_server_fence_i_request_put,
       near_mem$EN_server_fence_i_response_get,
       near_mem$EN_server_fence_request_put,
       near_mem$EN_server_fence_response_get,
       near_mem$EN_server_reset_request_put,
       near_mem$EN_server_reset_response_get,
       near_mem$EN_sfence_vma,
       near_mem$RDY_server_fence_i_request_put,
       near_mem$RDY_server_fence_i_response_get,
       near_mem$RDY_server_fence_request_put,
       near_mem$RDY_server_fence_response_get,
       near_mem$RDY_server_reset_request_put,
       near_mem$RDY_server_reset_response_get,
       near_mem$dmem_exc,
       near_mem$dmem_master_arlock,
       near_mem$dmem_master_arready,
       near_mem$dmem_master_arvalid,
       near_mem$dmem_master_awlock,
       near_mem$dmem_master_awready,
       near_mem$dmem_master_awvalid,
       near_mem$dmem_master_bready,
       near_mem$dmem_master_bvalid,
       near_mem$dmem_master_rlast,
       near_mem$dmem_master_rready,
       near_mem$dmem_master_rvalid,
       near_mem$dmem_master_wlast,
       near_mem$dmem_master_wready,
       near_mem$dmem_master_wvalid,
       near_mem$dmem_req_mstatus_MXR,
       near_mem$dmem_req_sstatus_SUM,
       near_mem$dmem_valid,
       near_mem$imem_exc,
       near_mem$imem_is_i32_not_i16,
       near_mem$imem_master_arlock,
       near_mem$imem_master_arready,
       near_mem$imem_master_arvalid,
       near_mem$imem_master_awlock,
       near_mem$imem_master_awready,
       near_mem$imem_master_awvalid,
       near_mem$imem_master_bready,
       near_mem$imem_master_bvalid,
       near_mem$imem_master_rlast,
       near_mem$imem_master_rready,
       near_mem$imem_master_rvalid,
       near_mem$imem_master_wlast,
       near_mem$imem_master_wready,
       near_mem$imem_master_wvalid,
       near_mem$imem_valid;

  // ports of submodule soc_map
  wire [63 : 0] soc_map$m_is_IO_addr_addr,
		soc_map$m_is_mem_addr_addr,
		soc_map$m_is_near_mem_IO_addr_addr,
		soc_map$m_pc_reset_value;

  // ports of submodule stage1_f_reset_reqs
  wire stage1_f_reset_reqs$CLR,
       stage1_f_reset_reqs$DEQ,
       stage1_f_reset_reqs$EMPTY_N,
       stage1_f_reset_reqs$ENQ,
       stage1_f_reset_reqs$FULL_N;

  // ports of submodule stage1_f_reset_rsps
  wire stage1_f_reset_rsps$CLR,
       stage1_f_reset_rsps$DEQ,
       stage1_f_reset_rsps$EMPTY_N,
       stage1_f_reset_rsps$ENQ,
       stage1_f_reset_rsps$FULL_N;

  // ports of submodule stage2_f_reset_reqs
  wire stage2_f_reset_reqs$CLR,
       stage2_f_reset_reqs$DEQ,
       stage2_f_reset_reqs$EMPTY_N,
       stage2_f_reset_reqs$ENQ,
       stage2_f_reset_reqs$FULL_N;

  // ports of submodule stage2_f_reset_rsps
  wire stage2_f_reset_rsps$CLR,
       stage2_f_reset_rsps$DEQ,
       stage2_f_reset_rsps$EMPTY_N,
       stage2_f_reset_rsps$ENQ,
       stage2_f_reset_rsps$FULL_N;

  // ports of submodule stage2_mbox
  wire [63 : 0] stage2_mbox$req_v1, stage2_mbox$req_v2, stage2_mbox$word;
  wire [3 : 0] stage2_mbox$set_verbosity_verbosity;
  wire [2 : 0] stage2_mbox$req_f3;
  wire stage2_mbox$EN_req,
       stage2_mbox$EN_req_reset,
       stage2_mbox$EN_rsp_reset,
       stage2_mbox$EN_set_verbosity,
       stage2_mbox$req_is_OP_not_OP_32,
       stage2_mbox$valid;

  // ports of submodule stage3_f_reset_reqs
  wire stage3_f_reset_reqs$CLR,
       stage3_f_reset_reqs$DEQ,
       stage3_f_reset_reqs$EMPTY_N,
       stage3_f_reset_reqs$ENQ,
       stage3_f_reset_reqs$FULL_N;

  // ports of submodule stage3_f_reset_rsps
  wire stage3_f_reset_rsps$CLR,
       stage3_f_reset_rsps$DEQ,
       stage3_f_reset_rsps$EMPTY_N,
       stage3_f_reset_rsps$ENQ,
       stage3_f_reset_rsps$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_imem_rl_assert_fail,
       CAN_FIRE_RL_imem_rl_fetch_next_32b,
       CAN_FIRE_RL_rl_WFI_resume,
       CAN_FIRE_RL_rl_finish_FENCE,
       CAN_FIRE_RL_rl_finish_FENCE_I,
       CAN_FIRE_RL_rl_finish_SFENCE_VMA,
       CAN_FIRE_RL_rl_pipe,
       CAN_FIRE_RL_rl_reset_complete,
       CAN_FIRE_RL_rl_reset_from_WFI,
       CAN_FIRE_RL_rl_reset_start,
       CAN_FIRE_RL_rl_show_pipe,
       CAN_FIRE_RL_rl_stage1_CSRR_S_or_C,
       CAN_FIRE_RL_rl_stage1_CSRR_W,
       CAN_FIRE_RL_rl_stage1_FENCE,
       CAN_FIRE_RL_rl_stage1_FENCE_I,
       CAN_FIRE_RL_rl_stage1_SFENCE_VMA,
       CAN_FIRE_RL_rl_stage1_WFI,
       CAN_FIRE_RL_rl_stage1_interrupt,
       CAN_FIRE_RL_rl_stage1_restart_after_csrrx,
       CAN_FIRE_RL_rl_stage1_trap,
       CAN_FIRE_RL_rl_stage1_xRET,
       CAN_FIRE_RL_rl_stage2_nonpipe,
       CAN_FIRE_RL_rl_trap_fetch,
       CAN_FIRE_RL_stage1_rl_reset,
       CAN_FIRE_RL_stage2_rl_reset_begin,
       CAN_FIRE_RL_stage2_rl_reset_end,
       CAN_FIRE_RL_stage3_rl_reset,
       CAN_FIRE_dmem_master_m_arready,
       CAN_FIRE_dmem_master_m_awready,
       CAN_FIRE_dmem_master_m_bvalid,
       CAN_FIRE_dmem_master_m_rvalid,
       CAN_FIRE_dmem_master_m_wready,
       CAN_FIRE_hart0_server_reset_request_put,
       CAN_FIRE_hart0_server_reset_response_get,
       CAN_FIRE_imem_master_m_arready,
       CAN_FIRE_imem_master_m_awready,
       CAN_FIRE_imem_master_m_bvalid,
       CAN_FIRE_imem_master_m_rvalid,
       CAN_FIRE_imem_master_m_wready,
       CAN_FIRE_m_external_interrupt_req,
       CAN_FIRE_nmi_req,
       CAN_FIRE_s_external_interrupt_req,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_software_interrupt_req,
       CAN_FIRE_timer_interrupt_req,
       WILL_FIRE_RL_imem_rl_assert_fail,
       WILL_FIRE_RL_imem_rl_fetch_next_32b,
       WILL_FIRE_RL_rl_WFI_resume,
       WILL_FIRE_RL_rl_finish_FENCE,
       WILL_FIRE_RL_rl_finish_FENCE_I,
       WILL_FIRE_RL_rl_finish_SFENCE_VMA,
       WILL_FIRE_RL_rl_pipe,
       WILL_FIRE_RL_rl_reset_complete,
       WILL_FIRE_RL_rl_reset_from_WFI,
       WILL_FIRE_RL_rl_reset_start,
       WILL_FIRE_RL_rl_show_pipe,
       WILL_FIRE_RL_rl_stage1_CSRR_S_or_C,
       WILL_FIRE_RL_rl_stage1_CSRR_W,
       WILL_FIRE_RL_rl_stage1_FENCE,
       WILL_FIRE_RL_rl_stage1_FENCE_I,
       WILL_FIRE_RL_rl_stage1_SFENCE_VMA,
       WILL_FIRE_RL_rl_stage1_WFI,
       WILL_FIRE_RL_rl_stage1_interrupt,
       WILL_FIRE_RL_rl_stage1_restart_after_csrrx,
       WILL_FIRE_RL_rl_stage1_trap,
       WILL_FIRE_RL_rl_stage1_xRET,
       WILL_FIRE_RL_rl_stage2_nonpipe,
       WILL_FIRE_RL_rl_trap_fetch,
       WILL_FIRE_RL_stage1_rl_reset,
       WILL_FIRE_RL_stage2_rl_reset_begin,
       WILL_FIRE_RL_stage2_rl_reset_end,
       WILL_FIRE_RL_stage3_rl_reset,
       WILL_FIRE_dmem_master_m_arready,
       WILL_FIRE_dmem_master_m_awready,
       WILL_FIRE_dmem_master_m_bvalid,
       WILL_FIRE_dmem_master_m_rvalid,
       WILL_FIRE_dmem_master_m_wready,
       WILL_FIRE_hart0_server_reset_request_put,
       WILL_FIRE_hart0_server_reset_response_get,
       WILL_FIRE_imem_master_m_arready,
       WILL_FIRE_imem_master_m_awready,
       WILL_FIRE_imem_master_m_bvalid,
       WILL_FIRE_imem_master_m_rvalid,
       WILL_FIRE_imem_master_m_wready,
       WILL_FIRE_m_external_interrupt_req,
       WILL_FIRE_nmi_req,
       WILL_FIRE_s_external_interrupt_req,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_software_interrupt_req,
       WILL_FIRE_timer_interrupt_req;

  // inputs to muxes for submodule ports
  reg [63 : 0] MUX_csr_regfile$mav_csr_write_2__VAL_2;
  wire [63 : 0] MUX_near_mem$imem_req_2__VAL_1,
		MUX_near_mem$imem_req_2__VAL_3,
		MUX_near_mem$imem_req_2__VAL_5;
  wire [3 : 0] MUX_csr_regfile$csr_trap_actions_5__VAL_1,
	       MUX_rg_state$write_1__VAL_1,
	       MUX_rg_state$write_1__VAL_2;
  wire MUX_csr_regfile$mav_csr_write_1__SEL_1,
       MUX_gpr_regfile$write_rd_1__SEL_1,
       MUX_gpr_regfile$write_rd_1__SEL_3,
       MUX_imem_rg_f3$write_1__SEL_1,
       MUX_imem_rg_mstatus_MXR$write_1__SEL_3,
       MUX_imem_rg_pc$write_1__SEL_4,
       MUX_near_mem$imem_req_1__SEL_6,
       MUX_rg_cur_priv$write_1__SEL_1,
       MUX_rg_mstatus_MXR$write_1__SEL_1,
       MUX_rg_next_pc$write_1__SEL_1,
       MUX_rg_state$write_1__SEL_1,
       MUX_rg_state$write_1__SEL_10,
       MUX_rg_state$write_1__SEL_2,
       MUX_rg_state$write_1__SEL_3,
       MUX_rg_state$write_1__SEL_5,
       MUX_rg_state$write_1__SEL_6,
       MUX_rg_state$write_1__SEL_7,
       MUX_rg_state$write_1__SEL_8,
       MUX_rg_state$write_1__SEL_9,
       MUX_stage1_rg_full$write_1__VAL_2,
       MUX_stage2_rg_full$write_1__VAL_2;

  // remaining internal signals
  reg [63 : 0] IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1063,
	       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1151,
	       _theResult_____1_fst__h13377,
	       alu_outputs___1_val1__h12571,
	       rs1_val__h18876,
	       x_out_bypass_rd_val__h5995,
	       x_out_data_to_stage2_addr__h12201,
	       x_out_data_to_stage2_val1__h12202,
	       x_out_data_to_stage3_rd_val__h5644;
  reg [4 : 0] x_out_bypass_rd__h5994, x_out_data_to_stage3_rd__h5643;
  reg [3 : 0] CASE_rg_cur_priv_0b0_8_0b1_9_11__q5,
	      CASE_theResult__284_BITS_14_TO_12_0b0_0_0b1_0__ETC__q14,
	      CASE_theResult__284_BITS_14_TO_12_0b0_0_0b1_0__ETC__q16,
	      CASE_theResult__284_BITS_14_TO_12_0b0_4_0b1_5_11__q15,
	      CASE_theResult__284_BITS_14_TO_12_0b0_IF_theRe_ETC__q17,
	      CASE_theResult__284_BITS_31_TO_20_0b0_CASE_rg__ETC__q6,
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d811,
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d828,
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d831,
	      alu_outputs_exc_code__h12927;
  reg [2 : 0] CASE_theResult__284_BITS_6_TO_0_0b11_1_0b10011_ETC__q18,
	      IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d916;
  reg [1 : 0] CASE_stage2_rg_stage2_BITS_199_TO_197_0_2_1_IF_ETC__q1,
	      CASE_stage2_rg_stage2_BITS_199_TO_197_0_2_1_IF_ETC__q2;
  reg CASE_theResult__284_BITS_6_TO_0_0b11_NOT_theRe_ETC__q12,
      CASE_theResult__284_BITS_6_TO_0_0b11_theResult_ETC__q13,
      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d569,
      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d686,
      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d695,
      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d762,
      IF_stage2_rg_stage2_2_BITS_199_TO_197_3_EQ_1_5_ETC___d136,
      IF_stage2_rg_stage2_2_BITS_199_TO_197_3_EQ_1_5_ETC___d145;
  wire [127 : 0] csr_regfile_read_csr_mcycle__2_MINUS_rg_start__ETC___d1395;
  wire [63 : 0] IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1064,
		IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1065,
		IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_ETC___d962,
		IF_csr_regfile_read_csr_IF_NOT_stage1_rg_full__ETC___d1342,
		SEXT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLU_ETC___d971,
		_theResult_____1_fst__h13370,
		_theResult_____1_fst__h13405,
		_theResult____h23440,
		_theResult___fst__h13482,
		_theResult___fst__h13489,
		_theResult___fst__h13596,
		_theResult___snd__h14722,
		alu_outputs___1_addr__h12325,
		alu_outputs___1_addr__h12346,
		alu_outputs___1_addr__h12372,
		alu_outputs___1_addr__h12624,
		alu_outputs___1_addr__h12645,
		alu_outputs___1_val1__h12487,
		alu_outputs___1_val1__h12525,
		alu_outputs___1_val1__h12548,
		alu_outputs___1_val1__h12587,
		alu_outputs___1_val1__h12603,
		alu_outputs___1_val1__h12885,
		alu_outputs___1_val1__h12906,
		branch_target__h12303,
		cpi__h23442,
		cpifrac__h23443,
		data_to_stage2_addr__h12193,
		delta_CPI_cycles__h23438,
		delta_CPI_instrs___1__h23475,
		delta_CPI_instrs__h23439,
		fall_through_pc__h12157,
		next_pc___1__h14255,
		next_pc__h14253,
		output_stage2___1_bypass_rd_val__h5983,
		rd_val___1__h13358,
		rd_val___1__h13366,
		rd_val___1__h13373,
		rd_val___1__h13380,
		rd_val___1__h13387,
		rd_val___1__h13394,
		rd_val___1__h14751,
		rd_val___1__h14782,
		rd_val___1__h14836,
		rd_val___1__h14865,
		rd_val___1__h14917,
		rd_val___1__h14965,
		rd_val___1__h14971,
		rd_val___1__h15016,
		rd_val__h12114,
		rd_val__h14618,
		rd_val__h14670,
		rd_val__h14692,
		rd_val__h6107,
		rs1_val__h18386,
		rs1_val_bypassed__h4292,
		rs2_val__h12299,
		trap_info_tval__h14089,
		val__h12116,
		val__h6109,
		value__h14143,
		x__h23441,
		x_out_data_to_stage2_val2__h12203,
		x_out_next_pc__h12170,
		y__h19177;
  wire [31 : 0] IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d466,
		IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d467,
		IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d469,
		IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d471,
		IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d473,
		IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d475,
		IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d476,
		IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d477,
		IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d479,
		IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d480,
		IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d481,
		IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d483,
		IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d485,
		IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d486,
		IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d488,
		IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d489,
		IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d490,
		IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d491,
		IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d492,
		IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d493,
		IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d494,
		IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d495,
		_theResult____h4284,
		_theResult___fst__h6326,
		_theResult___fst__h6354,
		alu_outputs___1_addr2624_BITS_31_TO_0__q20,
		instr___1__h6155,
		instr__h10108,
		instr__h10286,
		instr__h10405,
		instr__h10500,
		instr__h10636,
		instr__h10772,
		instr__h10908,
		instr__h11046,
		instr__h11184,
		instr__h11342,
		instr__h11438,
		instr__h11591,
		instr__h11790,
		instr__h11941,
		instr__h4282,
		instr__h6426,
		instr__h6571,
		instr__h6763,
		instr__h6958,
		instr__h7187,
		instr__h7641,
		instr__h7757,
		instr__h7822,
		instr__h8139,
		instr__h8477,
		instr__h8661,
		instr__h8790,
		instr__h9017,
		instr__h9272,
		instr__h9444,
		instr__h9613,
		instr__h9802,
		instr__h9991,
		instr_out___1__h6296,
		instr_out___1__h6328,
		instr_out___1__h6356,
		rs1_val_bypassed292_BITS_31_TO_0_MINUS_rs2_val_ETC__q11,
		rs1_val_bypassed292_BITS_31_TO_0_PLUS_rs2_val2_ETC__q10,
		rs1_val_bypassed292_BITS_31_TO_0_SRL_rs2_val22_ETC__q9,
		rs1_val_bypassed292_BITS_31_TO_0__q8,
		tmp__h14864,
		v32__h12576,
		x__h14785,
		x__h14839,
		x__h14974,
		x__h15019,
		x_out_data_to_stage2_instr__h12198;
  wire [20 : 0] SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d292,
		theResult__284_BIT_31_CONCAT_theResult__284_BI_ETC__q4;
  wire [19 : 0] imm20__h8529;
  wire [12 : 0] SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d317,
		theResult__284_BIT_31_CONCAT_theResult__284_BI_ETC__q3;
  wire [11 : 0] imm12__h11439,
		imm12__h11791,
		imm12__h6427,
		imm12__h6764,
		imm12__h8401,
		imm12__h9070,
		imm12__h9285,
		imm12__h9481,
		imm12__h9818,
		offset__h7134,
		theResult__284_BITS_31_TO_20__q19,
		theResult__284_BITS_31_TO_25_CONCAT_theResult__ETC__q7;
  wire [9 : 0] funct10__h12557, nzimm10__h9068, nzimm10__h9283;
  wire [8 : 0] offset__h11353, offset__h7766;
  wire [7 : 0] offset__h11725, offset__h6197;
  wire [6 : 0] offset__h6706;
  wire [5 : 0] imm6__h8399, shamt__h12472;
  wire [4 : 0] offset_BITS_4_TO_0___h12066,
	       offset_BITS_4_TO_0___h6695,
	       offset_BITS_4_TO_0___h7126,
	       rd__h6766,
	       rs1__h6765,
	       x_out_data_to_stage2_rd__h12200;
  wire [3 : 0] IF_NOT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_P_ETC___d774,
	       IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833,
	       IF_rg_cur_priv_3_EQ_0b11_90_OR_rg_cur_priv_3_E_ETC___d809,
	       alu_outputs___1_exc_code__h12881,
	       cur_verbosity__h2989,
	       x_out_trap_info_exc_code__h14092;
  wire [1 : 0] IF_NOT_near_mem_dmem_valid__13_32_OR_NOT_near__ETC___d179,
	       IF_near_mem_dmem_valid__13_THEN_IF_near_mem_dm_ETC___d116,
	       IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122,
	       IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d183,
	       IF_stage2_rg_stage2_2_BITS_196_TO_192_52_EQ_0__ETC___d178,
	       IF_stage2_rg_stage2_2_BITS_199_TO_197_3_EQ_3_9_ETC___d119,
	       sxl__h4700,
	       uxl__h4701;
  wire IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1203,
       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d558,
       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d560,
       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d562,
       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d689,
       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d700,
       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d765,
       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d767,
       IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_ETC___d717,
       IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_ETC___d724,
       IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d1392,
       IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d499,
       IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d501,
       NOT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_ETC___d605,
       NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d41,
       NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1235,
       NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1253,
       NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1256,
       NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1276,
       NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1285,
       NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1287,
       NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1290,
       NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1304,
       NOT_near_mem_imem_exc__20_05_AND_IF_IF_NOT_nea_ETC___d899,
       NOT_near_mem_imem_exc__20_05_AND_IF_IF_NOT_nea_ETC___d940,
       NOT_near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_p_ETC___d1191,
       NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_00_ETC___d208,
       NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_00_ETC___d213,
       NOT_near_mem_imem_valid_99_OR_NOT_near_mem_ime_ETC___d1213,
       NOT_near_mem_imem_valid_99_OR_NOT_near_mem_ime_ETC___d1224,
       NOT_near_mem_imem_valid_99_OR_NOT_near_mem_ime_ETC___d1232,
       NOT_near_mem_imem_valid_99_OR_NOT_near_mem_ime_ETC___d504,
       _0_OR_0_OR_near_mem_imem_exc__20_OR_IF_IF_NOT_n_ETC___d1283,
       csr_regfile_interrupt_pending_rg_cur_priv_3_19_ETC___d1206,
       csr_regfile_interrupt_pending_rg_cur_priv_3_19_ETC___d1211,
       csr_regfile_interrupt_pending_rg_cur_priv_3_19_ETC___d1217,
       csr_regfile_read_misa__0_BIT_2_15_AND_IF_near__ETC___d302,
       csr_regfile_read_misa__0_BIT_2_15_AND_IF_near__ETC___d308,
       gpr_regfile_RDY_server_reset_request_put__161__ETC___d1173,
       gpr_regfile_RDY_server_reset_response_get__178_ETC___d1190,
       near_mem_imem_exc__20_OR_IF_IF_NOT_near_mem_im_ETC___d1076,
       near_mem_imem_exc__20_OR_IF_IF_NOT_near_mem_im_ETC___d1079,
       near_mem_imem_exc__20_OR_IF_IF_NOT_near_mem_im_ETC___d1082,
       near_mem_imem_exc__20_OR_IF_IF_NOT_near_mem_im_ETC___d1085,
       near_mem_imem_exc__20_OR_IF_IF_NOT_near_mem_im_ETC___d1088,
       near_mem_imem_exc__20_OR_IF_IF_NOT_near_mem_im_ETC___d1091,
       near_mem_imem_exc__20_OR_IF_IF_NOT_near_mem_im_ETC___d1094,
       near_mem_imem_exc__20_OR_IF_IF_NOT_near_mem_im_ETC___d1097,
       near_mem_imem_exc__20_OR_IF_IF_NOT_near_mem_im_ETC___d1100,
       near_mem_imem_exc__20_OR_IF_IF_NOT_near_mem_im_ETC___d1103,
       near_mem_imem_exc__20_OR_IF_IF_NOT_near_mem_im_ETC___d1106,
       near_mem_imem_exc__20_OR_IF_IF_NOT_near_mem_im_ETC___d1109,
       near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d8,
       near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_00_OR__ETC___d511,
       near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_00_OR__ETC___d513,
       near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9___d200,
       near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d1202,
       near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d519,
       near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d703,
       near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d770,
       rg_cur_priv_3_EQ_0b11_90_OR_rg_cur_priv_3_EQ_0_ETC___d807,
       rg_state_2_EQ_2_219_AND_NOT_csr_regfile_interr_ETC___d1307,
       rg_state_2_EQ_2_219_AND_stage3_rg_full_2_OR_NO_ETC___d1238;

  // action method hart0_server_reset_request_put
  assign RDY_hart0_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_hart0_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_hart0_server_reset_request_put =
	     EN_hart0_server_reset_request_put ;

  // action method hart0_server_reset_response_get
  assign RDY_hart0_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_hart0_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_hart0_server_reset_response_get =
	     EN_hart0_server_reset_response_get ;

  // value method imem_master_m_awvalid
  assign imem_master_awvalid = near_mem$imem_master_awvalid ;

  // value method imem_master_m_awid
  assign imem_master_awid = near_mem$imem_master_awid ;

  // value method imem_master_m_awaddr
  assign imem_master_awaddr = near_mem$imem_master_awaddr ;

  // value method imem_master_m_awlen
  assign imem_master_awlen = near_mem$imem_master_awlen ;

  // value method imem_master_m_awsize
  assign imem_master_awsize = near_mem$imem_master_awsize ;

  // value method imem_master_m_awburst
  assign imem_master_awburst = near_mem$imem_master_awburst ;

  // value method imem_master_m_awlock
  assign imem_master_awlock = near_mem$imem_master_awlock ;

  // value method imem_master_m_awcache
  assign imem_master_awcache = near_mem$imem_master_awcache ;

  // value method imem_master_m_awprot
  assign imem_master_awprot = near_mem$imem_master_awprot ;

  // value method imem_master_m_awqos
  assign imem_master_awqos = near_mem$imem_master_awqos ;

  // value method imem_master_m_awregion
  assign imem_master_awregion = near_mem$imem_master_awregion ;

  // action method imem_master_m_awready
  assign CAN_FIRE_imem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_awready = 1'd1 ;

  // value method imem_master_m_wvalid
  assign imem_master_wvalid = near_mem$imem_master_wvalid ;

  // value method imem_master_m_wid
  assign imem_master_wid = near_mem$imem_master_wid ;

  // value method imem_master_m_wdata
  assign imem_master_wdata = near_mem$imem_master_wdata ;

  // value method imem_master_m_wstrb
  assign imem_master_wstrb = near_mem$imem_master_wstrb ;

  // value method imem_master_m_wlast
  assign imem_master_wlast = near_mem$imem_master_wlast ;

  // action method imem_master_m_wready
  assign CAN_FIRE_imem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_wready = 1'd1 ;

  // action method imem_master_m_bvalid
  assign CAN_FIRE_imem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_imem_master_m_bvalid = 1'd1 ;

  // value method imem_master_m_bready
  assign imem_master_bready = near_mem$imem_master_bready ;

  // value method imem_master_m_arvalid
  assign imem_master_arvalid = near_mem$imem_master_arvalid ;

  // value method imem_master_m_arid
  assign imem_master_arid = near_mem$imem_master_arid ;

  // value method imem_master_m_araddr
  assign imem_master_araddr = near_mem$imem_master_araddr ;

  // value method imem_master_m_arlen
  assign imem_master_arlen = near_mem$imem_master_arlen ;

  // value method imem_master_m_arsize
  assign imem_master_arsize = near_mem$imem_master_arsize ;

  // value method imem_master_m_arburst
  assign imem_master_arburst = near_mem$imem_master_arburst ;

  // value method imem_master_m_arlock
  assign imem_master_arlock = near_mem$imem_master_arlock ;

  // value method imem_master_m_arcache
  assign imem_master_arcache = near_mem$imem_master_arcache ;

  // value method imem_master_m_arprot
  assign imem_master_arprot = near_mem$imem_master_arprot ;

  // value method imem_master_m_arqos
  assign imem_master_arqos = near_mem$imem_master_arqos ;

  // value method imem_master_m_arregion
  assign imem_master_arregion = near_mem$imem_master_arregion ;

  // action method imem_master_m_arready
  assign CAN_FIRE_imem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_arready = 1'd1 ;

  // action method imem_master_m_rvalid
  assign CAN_FIRE_imem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_imem_master_m_rvalid = 1'd1 ;

  // value method imem_master_m_rready
  assign imem_master_rready = near_mem$imem_master_rready ;

  // value method dmem_master_m_awvalid
  assign dmem_master_awvalid = near_mem$dmem_master_awvalid ;

  // value method dmem_master_m_awid
  assign dmem_master_awid = near_mem$dmem_master_awid ;

  // value method dmem_master_m_awaddr
  assign dmem_master_awaddr = near_mem$dmem_master_awaddr ;

  // value method dmem_master_m_awlen
  assign dmem_master_awlen = near_mem$dmem_master_awlen ;

  // value method dmem_master_m_awsize
  assign dmem_master_awsize = near_mem$dmem_master_awsize ;

  // value method dmem_master_m_awburst
  assign dmem_master_awburst = near_mem$dmem_master_awburst ;

  // value method dmem_master_m_awlock
  assign dmem_master_awlock = near_mem$dmem_master_awlock ;

  // value method dmem_master_m_awcache
  assign dmem_master_awcache = near_mem$dmem_master_awcache ;

  // value method dmem_master_m_awprot
  assign dmem_master_awprot = near_mem$dmem_master_awprot ;

  // value method dmem_master_m_awqos
  assign dmem_master_awqos = near_mem$dmem_master_awqos ;

  // value method dmem_master_m_awregion
  assign dmem_master_awregion = near_mem$dmem_master_awregion ;

  // action method dmem_master_m_awready
  assign CAN_FIRE_dmem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_awready = 1'd1 ;

  // value method dmem_master_m_wvalid
  assign dmem_master_wvalid = near_mem$dmem_master_wvalid ;

  // value method dmem_master_m_wid
  assign dmem_master_wid = near_mem$dmem_master_wid ;

  // value method dmem_master_m_wdata
  assign dmem_master_wdata = near_mem$dmem_master_wdata ;

  // value method dmem_master_m_wstrb
  assign dmem_master_wstrb = near_mem$dmem_master_wstrb ;

  // value method dmem_master_m_wlast
  assign dmem_master_wlast = near_mem$dmem_master_wlast ;

  // action method dmem_master_m_wready
  assign CAN_FIRE_dmem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_wready = 1'd1 ;

  // action method dmem_master_m_bvalid
  assign CAN_FIRE_dmem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_bvalid = 1'd1 ;

  // value method dmem_master_m_bready
  assign dmem_master_bready = near_mem$dmem_master_bready ;

  // value method dmem_master_m_arvalid
  assign dmem_master_arvalid = near_mem$dmem_master_arvalid ;

  // value method dmem_master_m_arid
  assign dmem_master_arid = near_mem$dmem_master_arid ;

  // value method dmem_master_m_araddr
  assign dmem_master_araddr = near_mem$dmem_master_araddr ;

  // value method dmem_master_m_arlen
  assign dmem_master_arlen = near_mem$dmem_master_arlen ;

  // value method dmem_master_m_arsize
  assign dmem_master_arsize = near_mem$dmem_master_arsize ;

  // value method dmem_master_m_arburst
  assign dmem_master_arburst = near_mem$dmem_master_arburst ;

  // value method dmem_master_m_arlock
  assign dmem_master_arlock = near_mem$dmem_master_arlock ;

  // value method dmem_master_m_arcache
  assign dmem_master_arcache = near_mem$dmem_master_arcache ;

  // value method dmem_master_m_arprot
  assign dmem_master_arprot = near_mem$dmem_master_arprot ;

  // value method dmem_master_m_arqos
  assign dmem_master_arqos = near_mem$dmem_master_arqos ;

  // value method dmem_master_m_arregion
  assign dmem_master_arregion = near_mem$dmem_master_arregion ;

  // action method dmem_master_m_arready
  assign CAN_FIRE_dmem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_arready = 1'd1 ;

  // action method dmem_master_m_rvalid
  assign CAN_FIRE_dmem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_rvalid = 1'd1 ;

  // value method dmem_master_m_rready
  assign dmem_master_rready = near_mem$dmem_master_rready ;

  // action method m_external_interrupt_req
  assign CAN_FIRE_m_external_interrupt_req = 1'd1 ;
  assign WILL_FIRE_m_external_interrupt_req = 1'd1 ;

  // action method s_external_interrupt_req
  assign CAN_FIRE_s_external_interrupt_req = 1'd1 ;
  assign WILL_FIRE_s_external_interrupt_req = 1'd1 ;

  // action method software_interrupt_req
  assign CAN_FIRE_software_interrupt_req = 1'd1 ;
  assign WILL_FIRE_software_interrupt_req = 1'd1 ;

  // action method timer_interrupt_req
  assign CAN_FIRE_timer_interrupt_req = 1'd1 ;
  assign WILL_FIRE_timer_interrupt_req = 1'd1 ;

  // action method nmi_req
  assign CAN_FIRE_nmi_req = 1'd1 ;
  assign WILL_FIRE_nmi_req = 1'd1 ;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // submodule csr_regfile
  mkCSR_RegFile csr_regfile(.CLK(CLK),
			    .RST_N(RST_N),
			    .access_permitted_1_csr_addr(csr_regfile$access_permitted_1_csr_addr),
			    .access_permitted_1_priv(csr_regfile$access_permitted_1_priv),
			    .access_permitted_1_read_not_write(csr_regfile$access_permitted_1_read_not_write),
			    .access_permitted_2_csr_addr(csr_regfile$access_permitted_2_csr_addr),
			    .access_permitted_2_priv(csr_regfile$access_permitted_2_priv),
			    .access_permitted_2_read_not_write(csr_regfile$access_permitted_2_read_not_write),
			    .csr_counter_read_fault_csr_addr(csr_regfile$csr_counter_read_fault_csr_addr),
			    .csr_counter_read_fault_priv(csr_regfile$csr_counter_read_fault_priv),
			    .csr_ret_actions_from_priv(csr_regfile$csr_ret_actions_from_priv),
			    .csr_trap_actions_exc_code(csr_regfile$csr_trap_actions_exc_code),
			    .csr_trap_actions_from_priv(csr_regfile$csr_trap_actions_from_priv),
			    .csr_trap_actions_interrupt(csr_regfile$csr_trap_actions_interrupt),
			    .csr_trap_actions_nmi(csr_regfile$csr_trap_actions_nmi),
			    .csr_trap_actions_pc(csr_regfile$csr_trap_actions_pc),
			    .csr_trap_actions_xtval(csr_regfile$csr_trap_actions_xtval),
			    .interrupt_pending_cur_priv(csr_regfile$interrupt_pending_cur_priv),
			    .m_external_interrupt_req_set_not_clear(csr_regfile$m_external_interrupt_req_set_not_clear),
			    .mav_csr_write_csr_addr(csr_regfile$mav_csr_write_csr_addr),
			    .mav_csr_write_word(csr_regfile$mav_csr_write_word),
			    .mav_read_csr_csr_addr(csr_regfile$mav_read_csr_csr_addr),
			    .nmi_req_set_not_clear(csr_regfile$nmi_req_set_not_clear),
			    .read_csr_csr_addr(csr_regfile$read_csr_csr_addr),
			    .read_csr_port2_csr_addr(csr_regfile$read_csr_port2_csr_addr),
			    .s_external_interrupt_req_set_not_clear(csr_regfile$s_external_interrupt_req_set_not_clear),
			    .software_interrupt_req_set_not_clear(csr_regfile$software_interrupt_req_set_not_clear),
			    .timer_interrupt_req_set_not_clear(csr_regfile$timer_interrupt_req_set_not_clear),
			    .EN_server_reset_request_put(csr_regfile$EN_server_reset_request_put),
			    .EN_server_reset_response_get(csr_regfile$EN_server_reset_response_get),
			    .EN_mav_read_csr(csr_regfile$EN_mav_read_csr),
			    .EN_mav_csr_write(csr_regfile$EN_mav_csr_write),
			    .EN_csr_trap_actions(csr_regfile$EN_csr_trap_actions),
			    .EN_csr_ret_actions(csr_regfile$EN_csr_ret_actions),
			    .EN_csr_minstret_incr(csr_regfile$EN_csr_minstret_incr),
			    .EN_debug(csr_regfile$EN_debug),
			    .RDY_server_reset_request_put(csr_regfile$RDY_server_reset_request_put),
			    .RDY_server_reset_response_get(csr_regfile$RDY_server_reset_response_get),
			    .read_csr(csr_regfile$read_csr),
			    .read_csr_port2(),
			    .mav_read_csr(),
			    .mav_csr_write(),
			    .read_misa(csr_regfile$read_misa),
			    .read_mstatus(csr_regfile$read_mstatus),
			    .read_ustatus(),
			    .read_satp(csr_regfile$read_satp),
			    .csr_trap_actions(csr_regfile$csr_trap_actions),
			    .RDY_csr_trap_actions(),
			    .csr_ret_actions(csr_regfile$csr_ret_actions),
			    .RDY_csr_ret_actions(),
			    .read_csr_minstret(csr_regfile$read_csr_minstret),
			    .read_csr_mcycle(csr_regfile$read_csr_mcycle),
			    .read_csr_mtime(),
			    .access_permitted_1(csr_regfile$access_permitted_1),
			    .access_permitted_2(csr_regfile$access_permitted_2),
			    .csr_counter_read_fault(),
			    .csr_mip_read(),
			    .interrupt_pending(csr_regfile$interrupt_pending),
			    .wfi_resume(csr_regfile$wfi_resume),
			    .nmi_pending(csr_regfile$nmi_pending),
			    .RDY_debug());

  // submodule f_reset_reqs
  FIFO20 #(.guarded(32'd1)) f_reset_reqs(.RST(RST_N),
					 .CLK(CLK),
					 .ENQ(f_reset_reqs$ENQ),
					 .DEQ(f_reset_reqs$DEQ),
					 .CLR(f_reset_reqs$CLR),
					 .FULL_N(f_reset_reqs$FULL_N),
					 .EMPTY_N(f_reset_reqs$EMPTY_N));

  // submodule f_reset_rsps
  FIFO20 #(.guarded(32'd1)) f_reset_rsps(.RST(RST_N),
					 .CLK(CLK),
					 .ENQ(f_reset_rsps$ENQ),
					 .DEQ(f_reset_rsps$DEQ),
					 .CLR(f_reset_rsps$CLR),
					 .FULL_N(f_reset_rsps$FULL_N),
					 .EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule gpr_regfile
  mkGPR_RegFile gpr_regfile(.CLK(CLK),
			    .RST_N(RST_N),
			    .read_rs1_port2_rs1(gpr_regfile$read_rs1_port2_rs1),
			    .read_rs1_rs1(gpr_regfile$read_rs1_rs1),
			    .read_rs2_rs2(gpr_regfile$read_rs2_rs2),
			    .write_rd_rd(gpr_regfile$write_rd_rd),
			    .write_rd_rd_val(gpr_regfile$write_rd_rd_val),
			    .EN_server_reset_request_put(gpr_regfile$EN_server_reset_request_put),
			    .EN_server_reset_response_get(gpr_regfile$EN_server_reset_response_get),
			    .EN_write_rd(gpr_regfile$EN_write_rd),
			    .RDY_server_reset_request_put(gpr_regfile$RDY_server_reset_request_put),
			    .RDY_server_reset_response_get(gpr_regfile$RDY_server_reset_response_get),
			    .read_rs1(gpr_regfile$read_rs1),
			    .read_rs1_port2(),
			    .read_rs2(gpr_regfile$read_rs2));

  // submodule near_mem
  mkNear_Mem near_mem(.CLK(CLK),
		      .RST_N(RST_N),
		      .dmem_master_arready(near_mem$dmem_master_arready),
		      .dmem_master_awready(near_mem$dmem_master_awready),
		      .dmem_master_bid(near_mem$dmem_master_bid),
		      .dmem_master_bresp(near_mem$dmem_master_bresp),
		      .dmem_master_bvalid(near_mem$dmem_master_bvalid),
		      .dmem_master_rdata(near_mem$dmem_master_rdata),
		      .dmem_master_rid(near_mem$dmem_master_rid),
		      .dmem_master_rlast(near_mem$dmem_master_rlast),
		      .dmem_master_rresp(near_mem$dmem_master_rresp),
		      .dmem_master_rvalid(near_mem$dmem_master_rvalid),
		      .dmem_master_wready(near_mem$dmem_master_wready),
		      .dmem_req_addr(near_mem$dmem_req_addr),
		      .dmem_req_amo_funct7(near_mem$dmem_req_amo_funct7),
		      .dmem_req_f3(near_mem$dmem_req_f3),
		      .dmem_req_mstatus_MXR(near_mem$dmem_req_mstatus_MXR),
		      .dmem_req_op(near_mem$dmem_req_op),
		      .dmem_req_priv(near_mem$dmem_req_priv),
		      .dmem_req_satp(near_mem$dmem_req_satp),
		      .dmem_req_sstatus_SUM(near_mem$dmem_req_sstatus_SUM),
		      .dmem_req_store_value(near_mem$dmem_req_store_value),
		      .imem_master_arready(near_mem$imem_master_arready),
		      .imem_master_awready(near_mem$imem_master_awready),
		      .imem_master_bid(near_mem$imem_master_bid),
		      .imem_master_bresp(near_mem$imem_master_bresp),
		      .imem_master_bvalid(near_mem$imem_master_bvalid),
		      .imem_master_rdata(near_mem$imem_master_rdata),
		      .imem_master_rid(near_mem$imem_master_rid),
		      .imem_master_rlast(near_mem$imem_master_rlast),
		      .imem_master_rresp(near_mem$imem_master_rresp),
		      .imem_master_rvalid(near_mem$imem_master_rvalid),
		      .imem_master_wready(near_mem$imem_master_wready),
		      .imem_req_addr(near_mem$imem_req_addr),
		      .imem_req_f3(near_mem$imem_req_f3),
		      .imem_req_mstatus_MXR(near_mem$imem_req_mstatus_MXR),
		      .imem_req_priv(near_mem$imem_req_priv),
		      .imem_req_satp(near_mem$imem_req_satp),
		      .imem_req_sstatus_SUM(near_mem$imem_req_sstatus_SUM),
		      .server_fence_request_put(near_mem$server_fence_request_put),
		      .EN_server_reset_request_put(near_mem$EN_server_reset_request_put),
		      .EN_server_reset_response_get(near_mem$EN_server_reset_response_get),
		      .EN_imem_req(near_mem$EN_imem_req),
		      .EN_dmem_req(near_mem$EN_dmem_req),
		      .EN_server_fence_i_request_put(near_mem$EN_server_fence_i_request_put),
		      .EN_server_fence_i_response_get(near_mem$EN_server_fence_i_response_get),
		      .EN_server_fence_request_put(near_mem$EN_server_fence_request_put),
		      .EN_server_fence_response_get(near_mem$EN_server_fence_response_get),
		      .EN_sfence_vma(near_mem$EN_sfence_vma),
		      .RDY_server_reset_request_put(near_mem$RDY_server_reset_request_put),
		      .RDY_server_reset_response_get(near_mem$RDY_server_reset_response_get),
		      .imem_valid(near_mem$imem_valid),
		      .imem_is_i32_not_i16(near_mem$imem_is_i32_not_i16),
		      .imem_pc(near_mem$imem_pc),
		      .imem_instr(near_mem$imem_instr),
		      .imem_exc(near_mem$imem_exc),
		      .imem_exc_code(near_mem$imem_exc_code),
		      .imem_tval(),
		      .imem_master_awvalid(near_mem$imem_master_awvalid),
		      .imem_master_awid(near_mem$imem_master_awid),
		      .imem_master_awaddr(near_mem$imem_master_awaddr),
		      .imem_master_awlen(near_mem$imem_master_awlen),
		      .imem_master_awsize(near_mem$imem_master_awsize),
		      .imem_master_awburst(near_mem$imem_master_awburst),
		      .imem_master_awlock(near_mem$imem_master_awlock),
		      .imem_master_awcache(near_mem$imem_master_awcache),
		      .imem_master_awprot(near_mem$imem_master_awprot),
		      .imem_master_awqos(near_mem$imem_master_awqos),
		      .imem_master_awregion(near_mem$imem_master_awregion),
		      .imem_master_wvalid(near_mem$imem_master_wvalid),
		      .imem_master_wid(near_mem$imem_master_wid),
		      .imem_master_wdata(near_mem$imem_master_wdata),
		      .imem_master_wstrb(near_mem$imem_master_wstrb),
		      .imem_master_wlast(near_mem$imem_master_wlast),
		      .imem_master_bready(near_mem$imem_master_bready),
		      .imem_master_arvalid(near_mem$imem_master_arvalid),
		      .imem_master_arid(near_mem$imem_master_arid),
		      .imem_master_araddr(near_mem$imem_master_araddr),
		      .imem_master_arlen(near_mem$imem_master_arlen),
		      .imem_master_arsize(near_mem$imem_master_arsize),
		      .imem_master_arburst(near_mem$imem_master_arburst),
		      .imem_master_arlock(near_mem$imem_master_arlock),
		      .imem_master_arcache(near_mem$imem_master_arcache),
		      .imem_master_arprot(near_mem$imem_master_arprot),
		      .imem_master_arqos(near_mem$imem_master_arqos),
		      .imem_master_arregion(near_mem$imem_master_arregion),
		      .imem_master_rready(near_mem$imem_master_rready),
		      .dmem_valid(near_mem$dmem_valid),
		      .dmem_word64(near_mem$dmem_word64),
		      .dmem_st_amo_val(),
		      .dmem_exc(near_mem$dmem_exc),
		      .dmem_exc_code(near_mem$dmem_exc_code),
		      .dmem_master_awvalid(near_mem$dmem_master_awvalid),
		      .dmem_master_awid(near_mem$dmem_master_awid),
		      .dmem_master_awaddr(near_mem$dmem_master_awaddr),
		      .dmem_master_awlen(near_mem$dmem_master_awlen),
		      .dmem_master_awsize(near_mem$dmem_master_awsize),
		      .dmem_master_awburst(near_mem$dmem_master_awburst),
		      .dmem_master_awlock(near_mem$dmem_master_awlock),
		      .dmem_master_awcache(near_mem$dmem_master_awcache),
		      .dmem_master_awprot(near_mem$dmem_master_awprot),
		      .dmem_master_awqos(near_mem$dmem_master_awqos),
		      .dmem_master_awregion(near_mem$dmem_master_awregion),
		      .dmem_master_wvalid(near_mem$dmem_master_wvalid),
		      .dmem_master_wid(near_mem$dmem_master_wid),
		      .dmem_master_wdata(near_mem$dmem_master_wdata),
		      .dmem_master_wstrb(near_mem$dmem_master_wstrb),
		      .dmem_master_wlast(near_mem$dmem_master_wlast),
		      .dmem_master_bready(near_mem$dmem_master_bready),
		      .dmem_master_arvalid(near_mem$dmem_master_arvalid),
		      .dmem_master_arid(near_mem$dmem_master_arid),
		      .dmem_master_araddr(near_mem$dmem_master_araddr),
		      .dmem_master_arlen(near_mem$dmem_master_arlen),
		      .dmem_master_arsize(near_mem$dmem_master_arsize),
		      .dmem_master_arburst(near_mem$dmem_master_arburst),
		      .dmem_master_arlock(near_mem$dmem_master_arlock),
		      .dmem_master_arcache(near_mem$dmem_master_arcache),
		      .dmem_master_arprot(near_mem$dmem_master_arprot),
		      .dmem_master_arqos(near_mem$dmem_master_arqos),
		      .dmem_master_arregion(near_mem$dmem_master_arregion),
		      .dmem_master_rready(near_mem$dmem_master_rready),
		      .RDY_server_fence_i_request_put(near_mem$RDY_server_fence_i_request_put),
		      .RDY_server_fence_i_response_get(near_mem$RDY_server_fence_i_response_get),
		      .RDY_server_fence_request_put(near_mem$RDY_server_fence_request_put),
		      .RDY_server_fence_response_get(near_mem$RDY_server_fence_response_get),
		      .RDY_sfence_vma());

  // submodule soc_map
  mkSoC_Map soc_map(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_is_IO_addr_addr(soc_map$m_is_IO_addr_addr),
		    .m_is_mem_addr_addr(soc_map$m_is_mem_addr_addr),
		    .m_is_near_mem_IO_addr_addr(soc_map$m_is_near_mem_IO_addr_addr),
		    .m_near_mem_io_addr_base(),
		    .m_near_mem_io_addr_size(),
		    .m_near_mem_io_addr_lim(),
		    .m_plic_addr_base(),
		    .m_plic_addr_size(),
		    .m_plic_addr_lim(),
		    .m_uart0_addr_base(),
		    .m_uart0_addr_size(),
		    .m_uart0_addr_lim(),
		    .m_boot_rom_addr_base(),
		    .m_boot_rom_addr_size(),
		    .m_boot_rom_addr_lim(),
		    .m_mem0_controller_addr_base(),
		    .m_mem0_controller_addr_size(),
		    .m_mem0_controller_addr_lim(),
		    .m_tcm_addr_base(),
		    .m_tcm_addr_size(),
		    .m_tcm_addr_lim(),
		    .m_is_mem_addr(),
		    .m_is_IO_addr(),
		    .m_is_near_mem_IO_addr(),
		    .m_pc_reset_value(soc_map$m_pc_reset_value),
		    .m_mtvec_reset_value(),
		    .m_nmivec_reset_value());

  // submodule stage1_f_reset_reqs
  FIFO20 #(.guarded(32'd1)) stage1_f_reset_reqs(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage1_f_reset_reqs$ENQ),
						.DEQ(stage1_f_reset_reqs$DEQ),
						.CLR(stage1_f_reset_reqs$CLR),
						.FULL_N(stage1_f_reset_reqs$FULL_N),
						.EMPTY_N(stage1_f_reset_reqs$EMPTY_N));

  // submodule stage1_f_reset_rsps
  FIFO20 #(.guarded(32'd1)) stage1_f_reset_rsps(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage1_f_reset_rsps$ENQ),
						.DEQ(stage1_f_reset_rsps$DEQ),
						.CLR(stage1_f_reset_rsps$CLR),
						.FULL_N(stage1_f_reset_rsps$FULL_N),
						.EMPTY_N(stage1_f_reset_rsps$EMPTY_N));

  // submodule stage2_f_reset_reqs
  FIFO20 #(.guarded(32'd1)) stage2_f_reset_reqs(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage2_f_reset_reqs$ENQ),
						.DEQ(stage2_f_reset_reqs$DEQ),
						.CLR(stage2_f_reset_reqs$CLR),
						.FULL_N(stage2_f_reset_reqs$FULL_N),
						.EMPTY_N(stage2_f_reset_reqs$EMPTY_N));

  // submodule stage2_f_reset_rsps
  FIFO20 #(.guarded(32'd1)) stage2_f_reset_rsps(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage2_f_reset_rsps$ENQ),
						.DEQ(stage2_f_reset_rsps$DEQ),
						.CLR(stage2_f_reset_rsps$CLR),
						.FULL_N(stage2_f_reset_rsps$FULL_N),
						.EMPTY_N(stage2_f_reset_rsps$EMPTY_N));

  // submodule stage2_mbox
  mkRISCV_MBox stage2_mbox(.CLK(CLK),
			   .RST_N(RST_N),
			   .req_f3(stage2_mbox$req_f3),
			   .req_is_OP_not_OP_32(stage2_mbox$req_is_OP_not_OP_32),
			   .req_v1(stage2_mbox$req_v1),
			   .req_v2(stage2_mbox$req_v2),
			   .set_verbosity_verbosity(stage2_mbox$set_verbosity_verbosity),
			   .EN_set_verbosity(stage2_mbox$EN_set_verbosity),
			   .EN_req_reset(stage2_mbox$EN_req_reset),
			   .EN_rsp_reset(stage2_mbox$EN_rsp_reset),
			   .EN_req(stage2_mbox$EN_req),
			   .RDY_set_verbosity(),
			   .RDY_req_reset(),
			   .RDY_rsp_reset(),
			   .valid(stage2_mbox$valid),
			   .word(stage2_mbox$word));

  // submodule stage3_f_reset_reqs
  FIFO20 #(.guarded(32'd1)) stage3_f_reset_reqs(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage3_f_reset_reqs$ENQ),
						.DEQ(stage3_f_reset_reqs$DEQ),
						.CLR(stage3_f_reset_reqs$CLR),
						.FULL_N(stage3_f_reset_reqs$FULL_N),
						.EMPTY_N(stage3_f_reset_reqs$EMPTY_N));

  // submodule stage3_f_reset_rsps
  FIFO20 #(.guarded(32'd1)) stage3_f_reset_rsps(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage3_f_reset_rsps$ENQ),
						.DEQ(stage3_f_reset_rsps$DEQ),
						.CLR(stage3_f_reset_rsps$CLR),
						.FULL_N(stage3_f_reset_rsps$FULL_N),
						.EMPTY_N(stage3_f_reset_rsps$EMPTY_N));

  // rule RL_rl_show_pipe
  assign CAN_FIRE_RL_rl_show_pipe =
	     NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d41 &&
	     rg_state != 4'd0 &&
	     rg_state != 4'd1 &&
	     rg_state != 4'd9 ;
  assign WILL_FIRE_RL_rl_show_pipe = CAN_FIRE_RL_rl_show_pipe ;

  // rule RL_rl_reset_complete
  assign CAN_FIRE_RL_rl_reset_complete =
	     NOT_near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_p_ETC___d1191 &&
	     rg_state == 4'd1 ;
  assign WILL_FIRE_RL_rl_reset_complete = CAN_FIRE_RL_rl_reset_complete ;

  // rule RL_rl_stage2_nonpipe
  assign CAN_FIRE_RL_rl_stage2_nonpipe =
	     rg_state == 4'd2 && !stage3_rg_full &&
	     IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 ==
	     2'd3 &&
	     (!stage1_rg_full ||
	      near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d519) ;
  assign WILL_FIRE_RL_rl_stage2_nonpipe = CAN_FIRE_RL_rl_stage2_nonpipe ;

  // rule RL_rl_stage1_CSRR_W
  assign CAN_FIRE_RL_rl_stage1_CSRR_W = MUX_rg_state$write_1__SEL_1 ;
  assign WILL_FIRE_RL_rl_stage1_CSRR_W = MUX_rg_state$write_1__SEL_1 ;

  // rule RL_rl_stage1_CSRR_S_or_C
  assign CAN_FIRE_RL_rl_stage1_CSRR_S_or_C = MUX_rg_state$write_1__SEL_2 ;
  assign WILL_FIRE_RL_rl_stage1_CSRR_S_or_C = MUX_rg_state$write_1__SEL_2 ;

  // rule RL_rl_stage1_restart_after_csrrx
  assign CAN_FIRE_RL_rl_stage1_restart_after_csrrx =
	     (!near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d8 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     rg_state == 4'd5 ;
  assign WILL_FIRE_RL_rl_stage1_restart_after_csrrx =
	     CAN_FIRE_RL_rl_stage1_restart_after_csrrx ;

  // rule RL_rl_stage1_xRET
  assign CAN_FIRE_RL_rl_stage1_xRET =
	     rg_state_2_EQ_2_219_AND_NOT_csr_regfile_interr_ETC___d1307 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d703 &&
	     (IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 ==
	      4'd7 ||
	      IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 ==
	      4'd8 ||
	      IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 ==
	      4'd9) ;
  assign WILL_FIRE_RL_rl_stage1_xRET = CAN_FIRE_RL_rl_stage1_xRET ;

  // rule RL_rl_stage1_FENCE_I
  assign CAN_FIRE_RL_rl_stage1_FENCE_I = MUX_rg_state$write_1__SEL_7 ;
  assign WILL_FIRE_RL_rl_stage1_FENCE_I = MUX_rg_state$write_1__SEL_7 ;

  // rule RL_rl_finish_FENCE_I
  assign CAN_FIRE_RL_rl_finish_FENCE_I =
	     (!near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d8 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     near_mem$RDY_server_fence_i_response_get &&
	     rg_state == 4'd6 ;
  assign WILL_FIRE_RL_rl_finish_FENCE_I = CAN_FIRE_RL_rl_finish_FENCE_I ;

  // rule RL_rl_stage1_FENCE
  assign CAN_FIRE_RL_rl_stage1_FENCE = MUX_rg_state$write_1__SEL_8 ;
  assign WILL_FIRE_RL_rl_stage1_FENCE = MUX_rg_state$write_1__SEL_8 ;

  // rule RL_rl_finish_FENCE
  assign CAN_FIRE_RL_rl_finish_FENCE =
	     (!near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d8 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     near_mem$RDY_server_fence_response_get &&
	     rg_state == 4'd7 ;
  assign WILL_FIRE_RL_rl_finish_FENCE = CAN_FIRE_RL_rl_finish_FENCE ;

  // rule RL_rl_stage1_SFENCE_VMA
  assign CAN_FIRE_RL_rl_stage1_SFENCE_VMA = MUX_rg_state$write_1__SEL_9 ;
  assign WILL_FIRE_RL_rl_stage1_SFENCE_VMA = MUX_rg_state$write_1__SEL_9 ;

  // rule RL_rl_finish_SFENCE_VMA
  assign CAN_FIRE_RL_rl_finish_SFENCE_VMA =
	     (!near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d8 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     rg_state == 4'd8 ;
  assign WILL_FIRE_RL_rl_finish_SFENCE_VMA =
	     CAN_FIRE_RL_rl_finish_SFENCE_VMA ;

  // rule RL_rl_stage1_WFI
  assign CAN_FIRE_RL_rl_stage1_WFI = MUX_rg_state$write_1__SEL_10 ;
  assign WILL_FIRE_RL_rl_stage1_WFI = MUX_rg_state$write_1__SEL_10 ;

  // rule RL_rl_WFI_resume
  assign CAN_FIRE_RL_rl_WFI_resume =
	     (!near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d8 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     rg_state == 4'd9 &&
	     csr_regfile$wfi_resume ;
  assign WILL_FIRE_RL_rl_WFI_resume = CAN_FIRE_RL_rl_WFI_resume ;

  // rule RL_rl_reset_from_WFI
  assign CAN_FIRE_RL_rl_reset_from_WFI =
	     rg_state == 4'd9 && f_reset_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_rl_reset_from_WFI = MUX_rg_state$write_1__SEL_3 ;

  // rule RL_rl_stage1_trap
  assign CAN_FIRE_RL_rl_stage1_trap =
	     rg_state == 4'd3 ||
	     rg_state_2_EQ_2_219_AND_NOT_csr_regfile_interr_ETC___d1307 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d703 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 ==
	     4'd11 ;
  assign WILL_FIRE_RL_rl_stage1_trap = CAN_FIRE_RL_rl_stage1_trap ;

  // rule RL_rl_trap_fetch
  assign CAN_FIRE_RL_rl_trap_fetch =
	     (!near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d8 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     rg_state == 4'd4 ;
  assign WILL_FIRE_RL_rl_trap_fetch = CAN_FIRE_RL_rl_trap_fetch ;

  // rule RL_rl_stage1_interrupt
  assign CAN_FIRE_RL_rl_stage1_interrupt =
	     (csr_regfile$interrupt_pending[4] || csr_regfile$nmi_pending) &&
	     rg_state == 4'd2 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d519 &&
	     IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1203 &&
	     IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 ==
	     2'd0 &&
	     !stage3_rg_full ;
  assign WILL_FIRE_RL_rl_stage1_interrupt = CAN_FIRE_RL_rl_stage1_interrupt ;

  // rule RL_imem_rl_assert_fail
  assign CAN_FIRE_RL_imem_rl_assert_fail = !near_mem$imem_is_i32_not_i16 ;
  assign WILL_FIRE_RL_imem_rl_assert_fail = CAN_FIRE_RL_imem_rl_assert_fail ;

  // rule RL_rl_pipe
  assign CAN_FIRE_RL_rl_pipe =
	     (csr_regfile_interrupt_pending_rg_cur_priv_3_19_ETC___d1217 ||
	      !near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d8 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     rg_state_2_EQ_2_219_AND_stage3_rg_full_2_OR_NO_ETC___d1238 ;
  assign WILL_FIRE_RL_rl_pipe =
	     CAN_FIRE_RL_rl_pipe && !WILL_FIRE_RL_imem_rl_fetch_next_32b ;

  // rule RL_rl_reset_start
  assign CAN_FIRE_RL_rl_reset_start =
	     gpr_regfile_RDY_server_reset_request_put__161__ETC___d1173 &&
	     rg_state == 4'd0 ;
  assign WILL_FIRE_RL_rl_reset_start = CAN_FIRE_RL_rl_reset_start ;

  // rule RL_imem_rl_fetch_next_32b
  assign CAN_FIRE_RL_imem_rl_fetch_next_32b =
	     near_mem$imem_valid &&
	     near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d8 &&
	     imem_rg_pc[1:0] != 2'b0 &&
	     near_mem$imem_instr[17:16] == 2'b11 ;
  assign WILL_FIRE_RL_imem_rl_fetch_next_32b =
	     CAN_FIRE_RL_imem_rl_fetch_next_32b ;

  // rule RL_stage3_rl_reset
  assign CAN_FIRE_RL_stage3_rl_reset =
	     stage3_f_reset_reqs$EMPTY_N && stage3_f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_stage3_rl_reset = CAN_FIRE_RL_stage3_rl_reset ;

  // rule RL_stage2_rl_reset_end
  assign CAN_FIRE_RL_stage2_rl_reset_end =
	     stage2_f_reset_rsps$FULL_N && stage2_rg_resetting ;
  assign WILL_FIRE_RL_stage2_rl_reset_end = CAN_FIRE_RL_stage2_rl_reset_end ;

  // rule RL_stage2_rl_reset_begin
  assign CAN_FIRE_RL_stage2_rl_reset_begin = stage2_f_reset_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_stage2_rl_reset_begin = stage2_f_reset_reqs$EMPTY_N ;

  // rule RL_stage1_rl_reset
  assign CAN_FIRE_RL_stage1_rl_reset =
	     stage1_f_reset_reqs$EMPTY_N && stage1_f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_stage1_rl_reset = CAN_FIRE_RL_stage1_rl_reset ;

  // inputs to muxes for submodule ports
  assign MUX_csr_regfile$mav_csr_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_stage1_CSRR_W && csr_regfile$access_permitted_1 ;
  assign MUX_gpr_regfile$write_rd_1__SEL_1 =
	     WILL_FIRE_RL_rl_pipe && stage3_rg_full && stage3_rg_stage3[69] ;
  assign MUX_gpr_regfile$write_rd_1__SEL_3 =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	     csr_regfile$access_permitted_2 ;
  assign MUX_imem_rg_f3$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1235 &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1276 ;
  assign MUX_imem_rg_mstatus_MXR$write_1__SEL_3 =
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_reset_complete ;
  assign MUX_imem_rg_pc$write_1__SEL_4 =
	     WILL_FIRE_RL_rl_trap_fetch || WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ;
  assign MUX_near_mem$imem_req_1__SEL_6 =
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ;
  assign MUX_rg_cur_priv$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ;
  assign MUX_rg_mstatus_MXR$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_stage1_trap || WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ;
  assign MUX_rg_next_pc$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_stage1_WFI || WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_SFENCE_VMA ;
  assign MUX_rg_state$write_1__SEL_1 =
	     rg_state_2_EQ_2_219_AND_NOT_csr_regfile_interr_ETC___d1307 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d703 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 ==
	     4'd2 ;
  assign MUX_rg_state$write_1__SEL_2 =
	     rg_state_2_EQ_2_219_AND_NOT_csr_regfile_interr_ETC___d1307 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d703 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 ==
	     4'd3 ;
  assign MUX_rg_state$write_1__SEL_3 =
	     CAN_FIRE_RL_rl_reset_from_WFI && !WILL_FIRE_RL_rl_WFI_resume ;
  assign MUX_rg_state$write_1__SEL_5 =
	     WILL_FIRE_RL_rl_trap_fetch || WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_reset_complete ;
  assign MUX_rg_state$write_1__SEL_6 =
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ;
  assign MUX_rg_state$write_1__SEL_7 =
	     near_mem$RDY_server_fence_i_request_put &&
	     rg_state_2_EQ_2_219_AND_NOT_csr_regfile_interr_ETC___d1307 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d703 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 ==
	     4'd5 ;
  assign MUX_rg_state$write_1__SEL_8 =
	     near_mem$RDY_server_fence_request_put &&
	     rg_state_2_EQ_2_219_AND_NOT_csr_regfile_interr_ETC___d1307 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d703 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 ==
	     4'd4 ;
  assign MUX_rg_state$write_1__SEL_9 =
	     rg_state_2_EQ_2_219_AND_NOT_csr_regfile_interr_ETC___d1307 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d703 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 ==
	     4'd6 ;
  assign MUX_rg_state$write_1__SEL_10 =
	     rg_state_2_EQ_2_219_AND_NOT_csr_regfile_interr_ETC___d1307 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d703 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 ==
	     4'd10 ;
  assign MUX_csr_regfile$csr_trap_actions_5__VAL_1 =
	     (csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending) ?
	       csr_regfile$interrupt_pending[3:0] :
	       4'd0 ;
  always@(x_out_data_to_stage2_instr__h12198 or
	  csr_regfile$read_csr or
	  y__h19177 or
	  IF_csr_regfile_read_csr_IF_NOT_stage1_rg_full__ETC___d1342)
  begin
    case (x_out_data_to_stage2_instr__h12198[14:12])
      3'b010, 3'b110:
	  MUX_csr_regfile$mav_csr_write_2__VAL_2 =
	      IF_csr_regfile_read_csr_IF_NOT_stage1_rg_full__ETC___d1342;
      default: MUX_csr_regfile$mav_csr_write_2__VAL_2 =
		   csr_regfile$read_csr[63:0] & y__h19177;
    endcase
  end
  assign MUX_near_mem$imem_req_2__VAL_1 =
	     { x_out_next_pc__h12170[63:2], 2'b0 } ;
  assign MUX_near_mem$imem_req_2__VAL_3 =
	     { soc_map$m_pc_reset_value[63:2], 2'b0 } ;
  assign MUX_near_mem$imem_req_2__VAL_5 = { rg_next_pc[63:2], 2'b0 } ;
  assign MUX_rg_state$write_1__VAL_1 =
	     csr_regfile$access_permitted_1 ? 4'd5 : 4'd3 ;
  assign MUX_rg_state$write_1__VAL_2 =
	     csr_regfile$access_permitted_2 ? 4'd5 : 4'd3 ;
  assign MUX_stage1_rg_full$write_1__VAL_2 =
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1290 ||
	     (csr_regfile_interrupt_pending_rg_cur_priv_3_19_ETC___d1211 ||
	      NOT_near_mem_imem_valid_99_OR_NOT_near_mem_ime_ETC___d1232) &&
	     stage1_rg_full ;
  assign MUX_stage2_rg_full$write_1__VAL_2 =
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1285 ||
	     IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 !=
	     2'd2 &&
	     IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 !=
	     2'd0 ;

  // register cfg_logdelay
  assign cfg_logdelay$D_IN = set_verbosity_logdelay ;
  assign cfg_logdelay$EN = EN_set_verbosity ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN = set_verbosity_verbosity ;
  assign cfg_verbosity$EN = EN_set_verbosity ;

  // register imem_rg_f3
  assign imem_rg_f3$D_IN = 3'b010 ;
  assign imem_rg_f3$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1235 &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1276 ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_reset_complete ;

  // register imem_rg_instr_15_0
  assign imem_rg_instr_15_0$D_IN = near_mem$imem_instr[31:16] ;
  assign imem_rg_instr_15_0$EN = CAN_FIRE_RL_imem_rl_fetch_next_32b ;

  // register imem_rg_mstatus_MXR
  assign imem_rg_mstatus_MXR$D_IN =
	     (MUX_imem_rg_f3$write_1__SEL_1 ||
	      MUX_imem_rg_mstatus_MXR$write_1__SEL_3) ?
	       csr_regfile$read_mstatus[19] :
	       rg_mstatus_MXR ;
  assign imem_rg_mstatus_MXR$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1235 &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1276 ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_reset_complete ;

  // register imem_rg_pc
  always@(MUX_imem_rg_f3$write_1__SEL_1 or
	  x_out_next_pc__h12170 or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  WILL_FIRE_RL_rl_reset_complete or
	  soc_map$m_pc_reset_value or
	  MUX_imem_rg_pc$write_1__SEL_4 or rg_next_pc)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_f3$write_1__SEL_1: imem_rg_pc$D_IN = x_out_next_pc__h12170;
      WILL_FIRE_RL_rl_stage1_restart_after_csrrx:
	  imem_rg_pc$D_IN = x_out_next_pc__h12170;
      WILL_FIRE_RL_rl_reset_complete:
	  imem_rg_pc$D_IN = soc_map$m_pc_reset_value;
      MUX_imem_rg_pc$write_1__SEL_4: imem_rg_pc$D_IN = rg_next_pc;
      default: imem_rg_pc$D_IN =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign imem_rg_pc$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1235 &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1276 ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_reset_complete ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ;

  // register imem_rg_priv
  assign imem_rg_priv$D_IN = rg_cur_priv ;
  assign imem_rg_priv$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1235 &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1276 ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_reset_complete ;

  // register imem_rg_satp
  assign imem_rg_satp$D_IN = csr_regfile$read_satp ;
  assign imem_rg_satp$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1235 &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1276 ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_reset_complete ;

  // register imem_rg_sstatus_SUM
  assign imem_rg_sstatus_SUM$D_IN =
	     WILL_FIRE_RL_rl_trap_fetch && rg_sstatus_SUM ;
  assign imem_rg_sstatus_SUM$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1235 &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1276 ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_reset_complete ;

  // register imem_rg_tval
  always@(MUX_imem_rg_f3$write_1__SEL_1 or
	  x_out_next_pc__h12170 or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  WILL_FIRE_RL_rl_reset_complete or
	  soc_map$m_pc_reset_value or
	  MUX_imem_rg_pc$write_1__SEL_4 or
	  rg_next_pc or
	  WILL_FIRE_RL_imem_rl_fetch_next_32b or next_pc___1__h14255)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_f3$write_1__SEL_1:
	  imem_rg_tval$D_IN = x_out_next_pc__h12170;
      WILL_FIRE_RL_rl_stage1_restart_after_csrrx:
	  imem_rg_tval$D_IN = x_out_next_pc__h12170;
      WILL_FIRE_RL_rl_reset_complete:
	  imem_rg_tval$D_IN = soc_map$m_pc_reset_value;
      MUX_imem_rg_pc$write_1__SEL_4: imem_rg_tval$D_IN = rg_next_pc;
      WILL_FIRE_RL_imem_rl_fetch_next_32b:
	  imem_rg_tval$D_IN = next_pc___1__h14255;
      default: imem_rg_tval$D_IN =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign imem_rg_tval$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1235 &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1276 ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_reset_complete ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_imem_rl_fetch_next_32b ;

  // register rg_cur_priv
  always@(MUX_rg_cur_priv$write_1__SEL_1 or
	  csr_regfile$csr_trap_actions or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  csr_regfile$csr_ret_actions or WILL_FIRE_RL_rl_reset_start)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_cur_priv$write_1__SEL_1:
	  rg_cur_priv$D_IN = csr_regfile$csr_trap_actions[1:0];
      WILL_FIRE_RL_rl_stage1_xRET:
	  rg_cur_priv$D_IN = csr_regfile$csr_ret_actions[65:64];
      WILL_FIRE_RL_rl_reset_start: rg_cur_priv$D_IN = 2'b11;
      default: rg_cur_priv$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign rg_cur_priv$EN =
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mstatus_MXR
  assign rg_mstatus_MXR$D_IN =
	     MUX_rg_mstatus_MXR$write_1__SEL_1 ?
	       csr_regfile$read_mstatus[19] :
	       csr_regfile$csr_trap_actions[85] ;
  assign rg_mstatus_MXR$EN =
	     WILL_FIRE_RL_rl_stage1_trap || WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_interrupt ;

  // register rg_next_pc
  always@(MUX_rg_next_pc$write_1__SEL_1 or
	  x_out_next_pc__h12170 or
	  MUX_rg_cur_priv$write_1__SEL_1 or
	  csr_regfile$csr_trap_actions or
	  WILL_FIRE_RL_rl_stage1_xRET or csr_regfile$csr_ret_actions)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_next_pc$write_1__SEL_1: rg_next_pc$D_IN = x_out_next_pc__h12170;
      MUX_rg_cur_priv$write_1__SEL_1:
	  rg_next_pc$D_IN = csr_regfile$csr_trap_actions[193:130];
      WILL_FIRE_RL_rl_stage1_xRET:
	  rg_next_pc$D_IN = csr_regfile$csr_ret_actions[129:66];
      default: rg_next_pc$D_IN =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rg_next_pc$EN =
	     WILL_FIRE_RL_rl_stage1_WFI || WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_xRET ;

  // register rg_sstatus_SUM
  assign rg_sstatus_SUM$D_IN =
	     WILL_FIRE_RL_rl_stage1_interrupt &&
	     csr_regfile$csr_trap_actions[84] ;
  assign rg_sstatus_SUM$EN = MUX_rg_state$write_1__SEL_6 ;

  // register rg_start_CPI_cycles
  assign rg_start_CPI_cycles$D_IN = csr_regfile$read_csr_mcycle ;
  assign rg_start_CPI_cycles$EN = CAN_FIRE_RL_rl_reset_complete ;

  // register rg_start_CPI_instrs
  assign rg_start_CPI_instrs$D_IN = csr_regfile$read_csr_minstret ;
  assign rg_start_CPI_instrs$EN = CAN_FIRE_RL_rl_reset_complete ;

  // register rg_state
  always@(WILL_FIRE_RL_rl_stage1_CSRR_W or
	  MUX_rg_state$write_1__VAL_1 or
	  WILL_FIRE_RL_rl_stage1_CSRR_S_or_C or
	  MUX_rg_state$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_reset_from_WFI or
	  WILL_FIRE_RL_rl_reset_start or
	  MUX_rg_state$write_1__SEL_5 or
	  MUX_rg_state$write_1__SEL_6 or
	  WILL_FIRE_RL_rl_stage1_FENCE_I or
	  WILL_FIRE_RL_rl_stage1_FENCE or
	  WILL_FIRE_RL_rl_stage1_SFENCE_VMA or WILL_FIRE_RL_rl_stage1_WFI)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_stage1_CSRR_W:
	  rg_state$D_IN = MUX_rg_state$write_1__VAL_1;
      WILL_FIRE_RL_rl_stage1_CSRR_S_or_C:
	  rg_state$D_IN = MUX_rg_state$write_1__VAL_2;
      WILL_FIRE_RL_rl_reset_from_WFI: rg_state$D_IN = 4'd0;
      WILL_FIRE_RL_rl_reset_start: rg_state$D_IN = 4'd1;
      MUX_rg_state$write_1__SEL_5: rg_state$D_IN = 4'd2;
      MUX_rg_state$write_1__SEL_6: rg_state$D_IN = 4'd4;
      WILL_FIRE_RL_rl_stage1_FENCE_I: rg_state$D_IN = 4'd6;
      WILL_FIRE_RL_rl_stage1_FENCE: rg_state$D_IN = 4'd7;
      WILL_FIRE_RL_rl_stage1_SFENCE_VMA: rg_state$D_IN = 4'd8;
      WILL_FIRE_RL_rl_stage1_WFI: rg_state$D_IN = 4'd9;
      default: rg_state$D_IN = 4'b1010 /* unspecified value */ ;
    endcase
  end
  assign rg_state$EN =
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_reset_from_WFI ||
	     WILL_FIRE_RL_rl_reset_start ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_reset_complete ||
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_stage1_WFI ;

  // register stage1_rg_full
  always@(WILL_FIRE_RL_stage1_rl_reset or
	  WILL_FIRE_RL_rl_pipe or
	  MUX_stage1_rg_full$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_stage1_interrupt or
	  WILL_FIRE_RL_rl_trap_fetch or
	  WILL_FIRE_RL_rl_stage1_trap or
	  WILL_FIRE_RL_rl_WFI_resume or
	  WILL_FIRE_RL_rl_finish_SFENCE_VMA or
	  WILL_FIRE_RL_rl_finish_FENCE or
	  WILL_FIRE_RL_rl_finish_FENCE_I or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  WILL_FIRE_RL_rl_stage2_nonpipe or WILL_FIRE_RL_rl_reset_complete)
  case (1'b1)
    WILL_FIRE_RL_stage1_rl_reset: stage1_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_pipe:
	stage1_rg_full$D_IN = MUX_stage1_rg_full$write_1__VAL_2;
    WILL_FIRE_RL_rl_stage1_interrupt: stage1_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_trap_fetch: stage1_rg_full$D_IN = 1'd1;
    WILL_FIRE_RL_rl_stage1_trap: stage1_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_WFI_resume || WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
    WILL_FIRE_RL_rl_finish_FENCE ||
    WILL_FIRE_RL_rl_finish_FENCE_I:
	stage1_rg_full$D_IN = 1'd1;
    WILL_FIRE_RL_rl_stage1_xRET: stage1_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_stage1_restart_after_csrrx: stage1_rg_full$D_IN = 1'd1;
    WILL_FIRE_RL_rl_stage2_nonpipe: stage1_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_reset_complete: stage1_rg_full$D_IN = 1'd1;
    default: stage1_rg_full$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stage1_rg_full$EN =
	     WILL_FIRE_RL_rl_pipe || WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_stage1_rl_reset ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_reset_complete ;

  // register stage2_rg_full
  always@(stage2_f_reset_reqs$EMPTY_N or
	  WILL_FIRE_RL_rl_pipe or
	  MUX_stage2_rg_full$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_stage2_nonpipe or WILL_FIRE_RL_rl_reset_complete)
  case (1'b1)
    stage2_f_reset_reqs$EMPTY_N: stage2_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_pipe:
	stage2_rg_full$D_IN = MUX_stage2_rg_full$write_1__VAL_2;
    WILL_FIRE_RL_rl_stage2_nonpipe || WILL_FIRE_RL_rl_reset_complete:
	stage2_rg_full$D_IN = 1'd0;
    default: stage2_rg_full$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stage2_rg_full$EN =
	     WILL_FIRE_RL_rl_pipe || WILL_FIRE_RL_rl_stage2_nonpipe ||
	     stage2_f_reset_reqs$EMPTY_N ||
	     WILL_FIRE_RL_rl_reset_complete ;

  // register stage2_rg_resetting
  assign stage2_rg_resetting$D_IN = stage2_f_reset_reqs$EMPTY_N ;
  assign stage2_rg_resetting$EN =
	     WILL_FIRE_RL_stage2_rl_reset_end || stage2_f_reset_reqs$EMPTY_N ;

  // register stage2_rg_stage2
  assign stage2_rg_stage2$D_IN =
	     { rg_cur_priv,
	       imem_rg_pc,
	       x_out_data_to_stage2_instr__h12198,
	       IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d916,
	       x_out_data_to_stage2_rd__h12200,
	       x_out_data_to_stage2_addr__h12201,
	       x_out_data_to_stage2_val1__h12202,
	       x_out_data_to_stage2_val2__h12203 } ;
  assign stage2_rg_stage2$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1256 ;

  // register stage3_rg_full
  always@(WILL_FIRE_RL_stage3_rl_reset or
	  WILL_FIRE_RL_rl_pipe or
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 or
	  WILL_FIRE_RL_rl_reset_complete)
  case (1'b1)
    WILL_FIRE_RL_stage3_rl_reset: stage3_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_pipe:
	stage3_rg_full$D_IN =
	    IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd2;
    WILL_FIRE_RL_rl_reset_complete: stage3_rg_full$D_IN = 1'd0;
    default: stage3_rg_full$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stage3_rg_full$EN =
	     WILL_FIRE_RL_rl_pipe || WILL_FIRE_RL_stage3_rl_reset ||
	     WILL_FIRE_RL_rl_reset_complete ;

  // register stage3_rg_stage3
  assign stage3_rg_stage3$D_IN =
	     { stage2_rg_stage2[295:200],
	       stage2_rg_stage2[297:296],
	       stage2_rg_stage2[199:197] == 3'd0 ||
	       IF_stage2_rg_stage2_2_BITS_199_TO_197_3_EQ_1_5_ETC___d145,
	       x_out_data_to_stage3_rd__h5643,
	       x_out_data_to_stage3_rd_val__h5644 } ;
  assign stage3_rg_stage3$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 ==
	     2'd2 ;

  // submodule csr_regfile
  assign csr_regfile$access_permitted_1_csr_addr =
	     x_out_data_to_stage2_instr__h12198[31:20] ;
  assign csr_regfile$access_permitted_1_priv = rg_cur_priv ;
  assign csr_regfile$access_permitted_1_read_not_write = 1'd0 ;
  assign csr_regfile$access_permitted_2_csr_addr =
	     x_out_data_to_stage2_instr__h12198[31:20] ;
  assign csr_regfile$access_permitted_2_priv = rg_cur_priv ;
  assign csr_regfile$access_permitted_2_read_not_write =
	     rs1_val__h18876 == 64'd0 ;
  assign csr_regfile$csr_counter_read_fault_csr_addr = 12'h0 ;
  assign csr_regfile$csr_counter_read_fault_priv = 2'h0 ;
  always@(IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833)
  begin
    case (IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833)
      4'd7: csr_regfile$csr_ret_actions_from_priv = 2'b11;
      4'd8: csr_regfile$csr_ret_actions_from_priv = 2'b01;
      default: csr_regfile$csr_ret_actions_from_priv = 2'b0;
    endcase
  end
  always@(WILL_FIRE_RL_rl_stage1_interrupt or
	  MUX_csr_regfile$csr_trap_actions_5__VAL_1 or
	  WILL_FIRE_RL_rl_stage1_trap or
	  x_out_trap_info_exc_code__h14092 or
	  WILL_FIRE_RL_rl_stage2_nonpipe or near_mem$dmem_exc_code)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_stage1_interrupt:
	  csr_regfile$csr_trap_actions_exc_code =
	      MUX_csr_regfile$csr_trap_actions_5__VAL_1;
      WILL_FIRE_RL_rl_stage1_trap:
	  csr_regfile$csr_trap_actions_exc_code =
	      x_out_trap_info_exc_code__h14092;
      WILL_FIRE_RL_rl_stage2_nonpipe:
	  csr_regfile$csr_trap_actions_exc_code = near_mem$dmem_exc_code;
      default: csr_regfile$csr_trap_actions_exc_code =
		   4'b1010 /* unspecified value */ ;
    endcase
  end
  assign csr_regfile$csr_trap_actions_from_priv = rg_cur_priv ;
  assign csr_regfile$csr_trap_actions_interrupt =
	     WILL_FIRE_RL_rl_stage1_interrupt && !csr_regfile$nmi_pending ;
  assign csr_regfile$csr_trap_actions_nmi =
	     WILL_FIRE_RL_rl_stage1_interrupt && csr_regfile$nmi_pending ;
  assign csr_regfile$csr_trap_actions_pc =
	     WILL_FIRE_RL_rl_stage2_nonpipe ?
	       stage2_rg_stage2[295:232] :
	       imem_rg_pc ;
  always@(WILL_FIRE_RL_rl_stage1_interrupt or
	  WILL_FIRE_RL_rl_stage1_trap or
	  value__h14143 or WILL_FIRE_RL_rl_stage2_nonpipe or stage2_rg_stage2)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_stage1_interrupt:
	  csr_regfile$csr_trap_actions_xtval = 64'd0;
      WILL_FIRE_RL_rl_stage1_trap:
	  csr_regfile$csr_trap_actions_xtval = value__h14143;
      WILL_FIRE_RL_rl_stage2_nonpipe:
	  csr_regfile$csr_trap_actions_xtval = stage2_rg_stage2[191:128];
      default: csr_regfile$csr_trap_actions_xtval =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign csr_regfile$interrupt_pending_cur_priv = rg_cur_priv ;
  assign csr_regfile$m_external_interrupt_req_set_not_clear =
	     m_external_interrupt_req_set_not_clear ;
  assign csr_regfile$mav_csr_write_csr_addr =
	     x_out_data_to_stage2_instr__h12198[31:20] ;
  assign csr_regfile$mav_csr_write_word =
	     MUX_csr_regfile$mav_csr_write_1__SEL_1 ?
	       rs1_val__h18386 :
	       MUX_csr_regfile$mav_csr_write_2__VAL_2 ;
  assign csr_regfile$mav_read_csr_csr_addr = 12'h0 ;
  assign csr_regfile$nmi_req_set_not_clear = nmi_req_set_not_clear ;
  assign csr_regfile$read_csr_csr_addr =
	     x_out_data_to_stage2_instr__h12198[31:20] ;
  assign csr_regfile$read_csr_port2_csr_addr = 12'h0 ;
  assign csr_regfile$s_external_interrupt_req_set_not_clear =
	     s_external_interrupt_req_set_not_clear ;
  assign csr_regfile$software_interrupt_req_set_not_clear =
	     software_interrupt_req_set_not_clear ;
  assign csr_regfile$timer_interrupt_req_set_not_clear =
	     timer_interrupt_req_set_not_clear ;
  assign csr_regfile$EN_server_reset_request_put =
	     CAN_FIRE_RL_rl_reset_start ;
  assign csr_regfile$EN_server_reset_response_get =
	     CAN_FIRE_RL_rl_reset_complete ;
  assign csr_regfile$EN_mav_read_csr = 1'b0 ;
  assign csr_regfile$EN_mav_csr_write =
	     WILL_FIRE_RL_rl_stage1_CSRR_W &&
	     csr_regfile$access_permitted_1 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	     csr_regfile$access_permitted_2 &&
	     x_out_data_to_stage2_instr__h12198[19:15] != 5'd0 ;
  assign csr_regfile$EN_csr_trap_actions = MUX_rg_cur_priv$write_1__SEL_1 ;
  assign csr_regfile$EN_csr_ret_actions = CAN_FIRE_RL_rl_stage1_xRET ;
  assign csr_regfile$EN_csr_minstret_incr =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 ==
	     2'd2 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W &&
	     csr_regfile$access_permitted_1 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	     csr_regfile$access_permitted_2 ||
	     WILL_FIRE_RL_rl_stage1_WFI ||
	     WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_SFENCE_VMA ;
  assign csr_regfile$EN_debug = 1'b0 ;

  // submodule f_reset_reqs
  assign f_reset_reqs$ENQ = EN_hart0_server_reset_request_put ;
  assign f_reset_reqs$DEQ =
	     gpr_regfile_RDY_server_reset_request_put__161__ETC___d1173 &&
	     rg_state == 4'd0 ;
  assign f_reset_reqs$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$ENQ =
	     NOT_near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_p_ETC___d1191 &&
	     rg_state == 4'd1 ;
  assign f_reset_rsps$DEQ = EN_hart0_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule gpr_regfile
  assign gpr_regfile$read_rs1_port2_rs1 = 5'h0 ;
  assign gpr_regfile$read_rs1_rs1 = _theResult____h4284[19:15] ;
  assign gpr_regfile$read_rs2_rs2 = _theResult____h4284[24:20] ;
  assign gpr_regfile$write_rd_rd =
	     MUX_gpr_regfile$write_rd_1__SEL_1 ?
	       stage3_rg_stage3[68:64] :
	       x_out_data_to_stage2_instr__h12198[11:7] ;
  assign gpr_regfile$write_rd_rd_val =
	     (MUX_csr_regfile$mav_csr_write_1__SEL_1 ||
	      MUX_gpr_regfile$write_rd_1__SEL_3) ?
	       csr_regfile$read_csr[63:0] :
	       stage3_rg_stage3[63:0] ;
  assign gpr_regfile$EN_server_reset_request_put =
	     CAN_FIRE_RL_rl_reset_start ;
  assign gpr_regfile$EN_server_reset_response_get =
	     CAN_FIRE_RL_rl_reset_complete ;
  assign gpr_regfile$EN_write_rd =
	     WILL_FIRE_RL_rl_pipe && stage3_rg_full && stage3_rg_stage3[69] ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W &&
	     csr_regfile$access_permitted_1 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	     csr_regfile$access_permitted_2 ;

  // submodule near_mem
  assign near_mem$dmem_master_arready = dmem_master_arready ;
  assign near_mem$dmem_master_awready = dmem_master_awready ;
  assign near_mem$dmem_master_bid = dmem_master_bid ;
  assign near_mem$dmem_master_bresp = dmem_master_bresp ;
  assign near_mem$dmem_master_bvalid = dmem_master_bvalid ;
  assign near_mem$dmem_master_rdata = dmem_master_rdata ;
  assign near_mem$dmem_master_rid = dmem_master_rid ;
  assign near_mem$dmem_master_rlast = dmem_master_rlast ;
  assign near_mem$dmem_master_rresp = dmem_master_rresp ;
  assign near_mem$dmem_master_rvalid = dmem_master_rvalid ;
  assign near_mem$dmem_master_wready = dmem_master_wready ;
  assign near_mem$dmem_req_addr = x_out_data_to_stage2_addr__h12201 ;
  assign near_mem$dmem_req_amo_funct7 =
	     x_out_data_to_stage2_val1__h12202[6:0] ;
  assign near_mem$dmem_req_f3 = x_out_data_to_stage2_instr__h12198[14:12] ;
  assign near_mem$dmem_req_mstatus_MXR = csr_regfile$read_mstatus[19] ;
  always@(IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d916)
  begin
    case (IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d916)
      3'd1: near_mem$dmem_req_op = 2'd0;
      3'd2: near_mem$dmem_req_op = 2'd1;
      default: near_mem$dmem_req_op = 2'd2;
    endcase
  end
  assign near_mem$dmem_req_priv =
	     csr_regfile$read_mstatus[17] ?
	       csr_regfile$read_mstatus[12:11] :
	       rg_cur_priv ;
  assign near_mem$dmem_req_satp = csr_regfile$read_satp ;
  assign near_mem$dmem_req_sstatus_SUM = 1'd0 ;
  assign near_mem$dmem_req_store_value = x_out_data_to_stage2_val2__h12203 ;
  assign near_mem$imem_master_arready = imem_master_arready ;
  assign near_mem$imem_master_awready = imem_master_awready ;
  assign near_mem$imem_master_bid = imem_master_bid ;
  assign near_mem$imem_master_bresp = imem_master_bresp ;
  assign near_mem$imem_master_bvalid = imem_master_bvalid ;
  assign near_mem$imem_master_rdata = imem_master_rdata ;
  assign near_mem$imem_master_rid = imem_master_rid ;
  assign near_mem$imem_master_rlast = imem_master_rlast ;
  assign near_mem$imem_master_rresp = imem_master_rresp ;
  assign near_mem$imem_master_rvalid = imem_master_rvalid ;
  assign near_mem$imem_master_wready = imem_master_wready ;
  always@(MUX_imem_rg_f3$write_1__SEL_1 or
	  MUX_near_mem$imem_req_2__VAL_1 or
	  WILL_FIRE_RL_imem_rl_fetch_next_32b or
	  next_pc___1__h14255 or
	  WILL_FIRE_RL_rl_reset_complete or
	  MUX_near_mem$imem_req_2__VAL_3 or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  WILL_FIRE_RL_rl_trap_fetch or
	  MUX_near_mem$imem_req_2__VAL_5 or MUX_near_mem$imem_req_1__SEL_6)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_f3$write_1__SEL_1:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_1;
      WILL_FIRE_RL_imem_rl_fetch_next_32b:
	  near_mem$imem_req_addr = next_pc___1__h14255;
      WILL_FIRE_RL_rl_reset_complete:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_3;
      WILL_FIRE_RL_rl_stage1_restart_after_csrrx:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_1;
      WILL_FIRE_RL_rl_trap_fetch:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_5;
      MUX_near_mem$imem_req_1__SEL_6:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_5;
      default: near_mem$imem_req_addr =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign near_mem$imem_req_f3 =
	     WILL_FIRE_RL_imem_rl_fetch_next_32b ? imem_rg_f3 : 3'b010 ;
  always@(MUX_imem_rg_f3$write_1__SEL_1 or
	  WILL_FIRE_RL_rl_reset_complete or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  MUX_near_mem$imem_req_1__SEL_6 or
	  csr_regfile$read_mstatus or
	  WILL_FIRE_RL_rl_trap_fetch or
	  rg_mstatus_MXR or
	  WILL_FIRE_RL_imem_rl_fetch_next_32b or imem_rg_mstatus_MXR)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_f3$write_1__SEL_1 || WILL_FIRE_RL_rl_reset_complete ||
      WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
      MUX_near_mem$imem_req_1__SEL_6:
	  near_mem$imem_req_mstatus_MXR = csr_regfile$read_mstatus[19];
      WILL_FIRE_RL_rl_trap_fetch:
	  near_mem$imem_req_mstatus_MXR = rg_mstatus_MXR;
      WILL_FIRE_RL_imem_rl_fetch_next_32b:
	  near_mem$imem_req_mstatus_MXR = imem_rg_mstatus_MXR;
      default: near_mem$imem_req_mstatus_MXR = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign near_mem$imem_req_priv =
	     (MUX_imem_rg_f3$write_1__SEL_1 ||
	      WILL_FIRE_RL_rl_reset_complete ||
	      WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	      WILL_FIRE_RL_rl_trap_fetch ||
	      MUX_near_mem$imem_req_1__SEL_6) ?
	       rg_cur_priv :
	       imem_rg_priv ;
  assign near_mem$imem_req_satp =
	     WILL_FIRE_RL_imem_rl_fetch_next_32b ?
	       imem_rg_satp :
	       csr_regfile$read_satp ;
  always@(WILL_FIRE_RL_rl_trap_fetch or
	  rg_sstatus_SUM or
	  WILL_FIRE_RL_imem_rl_fetch_next_32b or
	  imem_rg_sstatus_SUM or
	  MUX_imem_rg_f3$write_1__SEL_1 or
	  WILL_FIRE_RL_rl_reset_complete or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  MUX_near_mem$imem_req_1__SEL_6)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_trap_fetch:
	  near_mem$imem_req_sstatus_SUM = rg_sstatus_SUM;
      WILL_FIRE_RL_imem_rl_fetch_next_32b:
	  near_mem$imem_req_sstatus_SUM = imem_rg_sstatus_SUM;
      MUX_imem_rg_f3$write_1__SEL_1 || WILL_FIRE_RL_rl_reset_complete ||
      WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
      MUX_near_mem$imem_req_1__SEL_6:
	  near_mem$imem_req_sstatus_SUM = 1'd0;
      default: near_mem$imem_req_sstatus_SUM = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign near_mem$server_fence_request_put =
	     8'b10101010 /* unspecified value */  ;
  assign near_mem$EN_server_reset_request_put = CAN_FIRE_RL_rl_reset_start ;
  assign near_mem$EN_server_reset_response_get =
	     CAN_FIRE_RL_rl_reset_complete ;
  assign near_mem$EN_imem_req =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1235 &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1276 ||
	     WILL_FIRE_RL_imem_rl_fetch_next_32b ||
	     WILL_FIRE_RL_rl_reset_complete ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ;
  assign near_mem$EN_dmem_req =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1256 &&
	     (IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d916 ==
	      3'd1 ||
	      IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d916 ==
	      3'd2 ||
	      IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d916 ==
	      3'd4) ;
  assign near_mem$EN_server_fence_i_request_put =
	     MUX_rg_state$write_1__SEL_7 ;
  assign near_mem$EN_server_fence_i_response_get =
	     CAN_FIRE_RL_rl_finish_FENCE_I ;
  assign near_mem$EN_server_fence_request_put = MUX_rg_state$write_1__SEL_8 ;
  assign near_mem$EN_server_fence_response_get = CAN_FIRE_RL_rl_finish_FENCE ;
  assign near_mem$EN_sfence_vma = MUX_rg_state$write_1__SEL_9 ;

  // submodule soc_map
  assign soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign soc_map$m_is_mem_addr_addr = 64'h0 ;
  assign soc_map$m_is_near_mem_IO_addr_addr = 64'h0 ;

  // submodule stage1_f_reset_reqs
  assign stage1_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stage1_f_reset_reqs$DEQ = CAN_FIRE_RL_stage1_rl_reset ;
  assign stage1_f_reset_reqs$CLR = 1'b0 ;

  // submodule stage1_f_reset_rsps
  assign stage1_f_reset_rsps$ENQ = CAN_FIRE_RL_stage1_rl_reset ;
  assign stage1_f_reset_rsps$DEQ = CAN_FIRE_RL_rl_reset_complete ;
  assign stage1_f_reset_rsps$CLR = 1'b0 ;

  // submodule stage2_f_reset_reqs
  assign stage2_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stage2_f_reset_reqs$DEQ = stage2_f_reset_reqs$EMPTY_N ;
  assign stage2_f_reset_reqs$CLR = 1'b0 ;

  // submodule stage2_f_reset_rsps
  assign stage2_f_reset_rsps$ENQ = CAN_FIRE_RL_stage2_rl_reset_end ;
  assign stage2_f_reset_rsps$DEQ = CAN_FIRE_RL_rl_reset_complete ;
  assign stage2_f_reset_rsps$CLR = 1'b0 ;

  // submodule stage2_mbox
  assign stage2_mbox$req_f3 = x_out_data_to_stage2_instr__h12198[14:12] ;
  assign stage2_mbox$req_is_OP_not_OP_32 = !_theResult____h4284[3] ;
  assign stage2_mbox$req_v1 = x_out_data_to_stage2_val1__h12202 ;
  assign stage2_mbox$req_v2 = x_out_data_to_stage2_val2__h12203 ;
  assign stage2_mbox$set_verbosity_verbosity = 4'h0 ;
  assign stage2_mbox$EN_set_verbosity = 1'b0 ;
  assign stage2_mbox$EN_req_reset = 1'b0 ;
  assign stage2_mbox$EN_rsp_reset = 1'b0 ;
  assign stage2_mbox$EN_req =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1256 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d916 ==
	     3'd3 ;

  // submodule stage3_f_reset_reqs
  assign stage3_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stage3_f_reset_reqs$DEQ = CAN_FIRE_RL_stage3_rl_reset ;
  assign stage3_f_reset_reqs$CLR = 1'b0 ;

  // submodule stage3_f_reset_rsps
  assign stage3_f_reset_rsps$ENQ = CAN_FIRE_RL_stage3_rl_reset ;
  assign stage3_f_reset_rsps$DEQ = CAN_FIRE_RL_rl_reset_complete ;
  assign stage3_f_reset_rsps$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1064 =
	     ((_theResult____h4284[6:0] == 7'b0010011 ||
	       _theResult____h4284[6:0] == 7'b0110011) &&
	      (_theResult____h4284[14:12] == 3'b001 ||
	       _theResult____h4284[14:12] == 3'b101)) ?
	       alu_outputs___1_val1__h12487 :
	       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1063 ;
  assign IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1065 =
	     ((_theResult____h4284[6:0] == 7'b0110011 ||
	       _theResult____h4284[6:0] == 7'b0111011) &&
	      _theResult____h4284[31:25] == 7'b0000001) ?
	       rs1_val_bypassed__h4292 :
	       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1064 ;
  assign IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1203 =
	     IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d765 ||
	     IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d767 ||
	     near_mem$imem_exc ||
	     IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d689 &&
	     IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d700 ;
  assign IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d558 =
	     rs1_val_bypassed__h4292 == rs2_val__h12299 ;
  assign IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d560 =
	     (rs1_val_bypassed__h4292 ^ 64'h8000000000000000) <
	     (rs2_val__h12299 ^ 64'h8000000000000000) ;
  assign IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d562 =
	     rs1_val_bypassed__h4292 < rs2_val__h12299 ;
  assign IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d689 =
	     (_theResult____h4284[6:0] == 7'b1100011) ?
	       _theResult____h4284[14:12] != 3'b0 &&
	       _theResult____h4284[14:12] != 3'b001 &&
	       _theResult____h4284[14:12] != 3'b100 &&
	       _theResult____h4284[14:12] != 3'b101 &&
	       _theResult____h4284[14:12] != 3'b110 &&
	       _theResult____h4284[14:12] != 3'b111 ||
	       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d569 :
	       _theResult____h4284[6:0] == 7'b1101111 ||
	       _theResult____h4284[6:0] == 7'b1100111 ||
	       (_theResult____h4284[6:0] != 7'b0110011 ||
		_theResult____h4284[31:25] != 7'b0000001) &&
	       (_theResult____h4284[6:0] != 7'b0111011 ||
		_theResult____h4284[31:25] != 7'b0000001) &&
	       (_theResult____h4284[6:0] != 7'b0010011 &&
		_theResult____h4284[6:0] != 7'b0110011 ||
		_theResult____h4284[14:12] != 3'b001 &&
		_theResult____h4284[14:12] != 3'b101) &&
	       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d686 ;
  assign IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d700 =
	     (_theResult____h4284[6:0] == 7'b1100011) ?
	       _theResult____h4284[14:12] != 3'b0 &&
	       _theResult____h4284[14:12] != 3'b001 &&
	       _theResult____h4284[14:12] != 3'b100 &&
	       _theResult____h4284[14:12] != 3'b101 &&
	       _theResult____h4284[14:12] != 3'b110 &&
	       _theResult____h4284[14:12] != 3'b111 ||
	       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d695 :
	       _theResult____h4284[6:0] != 7'b1101111 &&
	       _theResult____h4284[6:0] != 7'b1100111 ;
  assign IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d765 =
	     (_theResult____h4284[6:0] == 7'b1100011) ?
	       (_theResult____h4284[14:12] == 3'b0 ||
		_theResult____h4284[14:12] == 3'b001 ||
		_theResult____h4284[14:12] == 3'b100 ||
		_theResult____h4284[14:12] == 3'b101 ||
		_theResult____h4284[14:12] == 3'b110 ||
		_theResult____h4284[14:12] == 3'b111) &&
	       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d695 :
	       _theResult____h4284[6:0] != 7'b1101111 &&
	       _theResult____h4284[6:0] != 7'b1100111 &&
	       (IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_ETC___d717 ||
		IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d762) ;
  assign IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d767 =
	     (_theResult____h4284[6:0] == 7'b1100011) ?
	       (_theResult____h4284[14:12] == 3'b0 ||
		_theResult____h4284[14:12] == 3'b001 ||
		_theResult____h4284[14:12] == 3'b100 ||
		_theResult____h4284[14:12] == 3'b101 ||
		_theResult____h4284[14:12] == 3'b110 ||
		_theResult____h4284[14:12] == 3'b111) &&
	       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d569 :
	       _theResult____h4284[6:0] == 7'b1101111 ||
	       _theResult____h4284[6:0] == 7'b1100111 ;
  assign IF_NOT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_P_ETC___d774 =
	     NOT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_ETC___d605 ?
	       4'd11 :
	       4'd0 ;
  assign IF_NOT_near_mem_dmem_valid__13_32_OR_NOT_near__ETC___d179 =
	     (!near_mem$dmem_valid || !near_mem$dmem_exc) ?
	       IF_stage2_rg_stage2_2_BITS_196_TO_192_52_EQ_0__ETC___d178 :
	       2'd0 ;
  assign IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_ETC___d717 =
	     _theResult____h4284[6:0] == 7'b0110011 &&
	     _theResult____h4284[31:25] == 7'b0000001 ||
	     _theResult____h4284[6:0] == 7'b0111011 &&
	     _theResult____h4284[31:25] == 7'b0000001 ||
	     (_theResult____h4284[6:0] == 7'b0010011 ||
	      _theResult____h4284[6:0] == 7'b0110011) &&
	     (_theResult____h4284[14:12] == 3'b001 ||
	      _theResult____h4284[14:12] == 3'b101) ;
  assign IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_ETC___d724 =
	     _theResult____h4284[14:12] == 3'b0 &&
	     (_theResult____h4284[6:0] != 7'b0110011 ||
	      !_theResult____h4284[30]) ||
	     _theResult____h4284[14:12] == 3'b0 &&
	     _theResult____h4284[6:0] == 7'b0110011 &&
	     _theResult____h4284[30] ||
	     _theResult____h4284[14:12] == 3'b010 ||
	     _theResult____h4284[14:12] == 3'b011 ||
	     _theResult____h4284[14:12] == 3'b100 ||
	     _theResult____h4284[14:12] == 3'b110 ||
	     _theResult____h4284[14:12] == 3'b111 ;
  assign IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_ETC___d962 =
	     NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_00_ETC___d208 ?
	       next_pc___1__h14255 :
	       next_pc__h14253 ;
  assign IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d1392 =
	     imem_rg_pc == csr_regfile$csr_trap_actions[193:130] ;
  assign IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 =
	     near_mem$imem_exc ?
	       4'd11 :
	       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d831 ;
  assign IF_csr_regfile_read_csr_IF_NOT_stage1_rg_full__ETC___d1342 =
	     csr_regfile$read_csr[63:0] | rs1_val__h18876 ;
  assign IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d466 =
	     (csr_regfile$read_misa[2] && instr__h4282[1:0] == 2'b0 &&
	      instr__h4282[15:13] == 3'b011) ?
	       instr__h11790 :
	       ((csr_regfile$read_misa[2] && instr__h4282[1:0] == 2'b0 &&
		 instr__h4282[15:13] == 3'b111) ?
		  instr__h11941 :
		  32'h0) ;
  assign IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d467 =
	     (csr_regfile$read_misa[2] && instr__h4282[1:0] == 2'b10 &&
	      instr__h4282[15:13] == 3'b111) ?
	       instr__h11591 :
	       IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d466 ;
  assign IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d469 =
	     (csr_regfile$read_misa[2] && instr__h4282[1:0] == 2'b10 &&
	      instr__h4282[15:12] == 4'b1001 &&
	      instr__h4282[11:7] == 5'd0 &&
	      instr__h4282[6:2] == 5'd0) ?
	       instr__h11342 :
	       ((csr_regfile$read_misa[2] && instr__h4282[1:0] == 2'b10 &&
		 instr__h4282[11:7] != 5'd0 &&
		 instr__h4282[15:13] == 3'b011) ?
		  instr__h11438 :
		  IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d467) ;
  assign IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d471 =
	     (csr_regfile$read_misa[2] && instr__h4282[1:0] == 2'b01 &&
	      instr__h4282[15:10] == 6'b100111 &&
	      instr__h4282[6:5] == 2'b01) ?
	       instr__h11046 :
	       ((csr_regfile$read_misa[2] && instr__h4282[1:0] == 2'b01 &&
		 instr__h4282[15:10] == 6'b100111 &&
		 instr__h4282[6:5] == 2'b0) ?
		  instr__h11184 :
		  IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d469) ;
  assign IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d473 =
	     (csr_regfile$read_misa[2] && instr__h4282[1:0] == 2'b01 &&
	      instr__h4282[15:10] == 6'b100011 &&
	      instr__h4282[6:5] == 2'b01) ?
	       instr__h10772 :
	       ((csr_regfile$read_misa[2] && instr__h4282[1:0] == 2'b01 &&
		 instr__h4282[15:10] == 6'b100011 &&
		 instr__h4282[6:5] == 2'b0) ?
		  instr__h10908 :
		  IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d471) ;
  assign IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d475 =
	     (csr_regfile$read_misa[2] && instr__h4282[1:0] == 2'b01 &&
	      instr__h4282[15:10] == 6'b100011 &&
	      instr__h4282[6:5] == 2'b11) ?
	       instr__h10500 :
	       ((csr_regfile$read_misa[2] && instr__h4282[1:0] == 2'b01 &&
		 instr__h4282[15:10] == 6'b100011 &&
		 instr__h4282[6:5] == 2'b10) ?
		  instr__h10636 :
		  IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d473) ;
  assign IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d476 =
	     (csr_regfile_read_misa__0_BIT_2_15_AND_IF_near__ETC___d308 &&
	      instr__h4282[6:2] != 5'd0) ?
	       instr__h10405 :
	       IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d475 ;
  assign IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d477 =
	     (csr_regfile_read_misa__0_BIT_2_15_AND_IF_near__ETC___d302 &&
	      instr__h4282[6:2] != 5'd0) ?
	       instr__h10286 :
	       IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d476 ;
  assign IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d479 =
	     (csr_regfile$read_misa[2] && instr__h4282[1:0] == 2'b01 &&
	      instr__h4282[15:13] == 3'b100 &&
	      instr__h4282[11:10] == 2'b01 &&
	      imm6__h8399 != 6'd0) ?
	       instr__h9991 :
	       ((csr_regfile$read_misa[2] && instr__h4282[1:0] == 2'b01 &&
		 instr__h4282[15:13] == 3'b100 &&
		 instr__h4282[11:10] == 2'b10) ?
		  instr__h10108 :
		  IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d477) ;
  assign IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d480 =
	     (csr_regfile$read_misa[2] && instr__h4282[1:0] == 2'b01 &&
	      instr__h4282[15:13] == 3'b100 &&
	      instr__h4282[11:10] == 2'b0 &&
	      imm6__h8399 != 6'd0) ?
	       instr__h9802 :
	       IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d479 ;
  assign IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d481 =
	     (csr_regfile$read_misa[2] && instr__h4282[1:0] == 2'b10 &&
	      instr__h4282[15:13] == 3'b0 &&
	      instr__h4282[11:7] != 5'd0 &&
	      imm6__h8399 != 6'd0) ?
	       instr__h9613 :
	       IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d480 ;
  assign IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d483 =
	     (csr_regfile$read_misa[2] && instr__h4282[1:0] == 2'b01 &&
	      instr__h4282[15:13] == 3'b011 &&
	      instr__h4282[11:7] == 5'd2 &&
	      nzimm10__h9068 != 10'd0) ?
	       instr__h9272 :
	       ((csr_regfile$read_misa[2] && instr__h4282[1:0] == 2'b0 &&
		 instr__h4282[15:13] == 3'b0 &&
		 nzimm10__h9283 != 10'd0) ?
		  instr__h9444 :
		  IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d481) ;
  assign IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d485 =
	     (csr_regfile$read_misa[2] && instr__h4282[1:0] == 2'b01 &&
	      instr__h4282[15:13] == 3'b0 &&
	      instr__h4282[11:7] != 5'd0 &&
	      imm6__h8399 != 6'd0 ||
	      csr_regfile$read_misa[2] && instr__h4282[1:0] == 2'b01 &&
	      instr__h4282[15:13] == 3'b0 &&
	      instr__h4282[11:7] == 5'd0 &&
	      imm6__h8399 == 6'd0) ?
	       instr__h8790 :
	       ((csr_regfile$read_misa[2] && instr__h4282[1:0] == 2'b01 &&
		 instr__h4282[15:13] == 3'b001 &&
		 instr__h4282[11:7] != 5'd0) ?
		  instr__h9017 :
		  IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d483) ;
  assign IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d486 =
	     (csr_regfile$read_misa[2] && instr__h4282[1:0] == 2'b01 &&
	      instr__h4282[15:13] == 3'b011 &&
	      instr__h4282[11:7] != 5'd0 &&
	      instr__h4282[11:7] != 5'd2 &&
	      imm6__h8399 != 6'd0) ?
	       instr__h8661 :
	       IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d485 ;
  assign IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d488 =
	     (csr_regfile$read_misa[2] && instr__h4282[1:0] == 2'b01 &&
	      instr__h4282[15:13] == 3'b111) ?
	       instr__h8139 :
	       ((csr_regfile$read_misa[2] && instr__h4282[1:0] == 2'b01 &&
		 instr__h4282[15:13] == 3'b010 &&
		 instr__h4282[11:7] != 5'd0) ?
		  instr__h8477 :
		  IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d486) ;
  assign IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d489 =
	     (csr_regfile$read_misa[2] && instr__h4282[1:0] == 2'b01 &&
	      instr__h4282[15:13] == 3'b110) ?
	       instr__h7822 :
	       IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d488 ;
  assign IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d490 =
	     (csr_regfile_read_misa__0_BIT_2_15_AND_IF_near__ETC___d308 &&
	      instr__h4282[6:2] == 5'd0) ?
	       instr__h7757 :
	       IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d489 ;
  assign IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d491 =
	     (csr_regfile_read_misa__0_BIT_2_15_AND_IF_near__ETC___d302 &&
	      instr__h4282[6:2] == 5'd0) ?
	       instr__h7641 :
	       IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d490 ;
  assign IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d492 =
	     (csr_regfile$read_misa[2] && instr__h4282[1:0] == 2'b01 &&
	      instr__h4282[15:13] == 3'b101) ?
	       instr__h7187 :
	       IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d491 ;
  assign IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d493 =
	     (csr_regfile$read_misa[2] && instr__h4282[1:0] == 2'b0 &&
	      instr__h4282[15:13] == 3'b110) ?
	       instr__h6958 :
	       IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d492 ;
  assign IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d494 =
	     (csr_regfile$read_misa[2] && instr__h4282[1:0] == 2'b0 &&
	      instr__h4282[15:13] == 3'b010) ?
	       instr__h6763 :
	       IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d493 ;
  assign IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d495 =
	     (csr_regfile$read_misa[2] && instr__h4282[1:0] == 2'b10 &&
	      instr__h4282[15:13] == 3'b110) ?
	       instr__h6571 :
	       IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d494 ;
  assign IF_near_mem_dmem_valid__13_THEN_IF_near_mem_dm_ETC___d116 =
	     near_mem$dmem_valid ? (near_mem$dmem_exc ? 2'd3 : 2'd2) : 2'd1 ;
  assign IF_rg_cur_priv_3_EQ_0b11_90_OR_rg_cur_priv_3_E_ETC___d809 =
	     ((rg_cur_priv == 2'b11 ||
	       rg_cur_priv == 2'b01 && !csr_regfile$read_mstatus[22]) &&
	      _theResult____h4284[31:20] == 12'b000100000010) ?
	       4'd8 :
	       (rg_cur_priv_3_EQ_0b11_90_OR_rg_cur_priv_3_EQ_0_ETC___d807 ?
		  4'd10 :
		  4'd11) ;
  assign IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 =
	     stage2_rg_full ?
	       CASE_stage2_rg_stage2_BITS_199_TO_197_0_2_1_IF_ETC__q1 :
	       2'd0 ;
  assign IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d183 =
	     stage2_rg_full ?
	       CASE_stage2_rg_stage2_BITS_199_TO_197_0_2_1_IF_ETC__q2 :
	       2'd0 ;
  assign IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d499 =
	     x_out_bypass_rd__h5994 == _theResult____h4284[19:15] ;
  assign IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d501 =
	     x_out_bypass_rd__h5994 == _theResult____h4284[24:20] ;
  assign IF_stage2_rg_stage2_2_BITS_196_TO_192_52_EQ_0__ETC___d178 =
	     (stage2_rg_stage2[196:192] == 5'd0) ?
	       2'd0 :
	       ((near_mem$dmem_valid && !near_mem$dmem_exc) ? 2'd2 : 2'd1) ;
  assign IF_stage2_rg_stage2_2_BITS_199_TO_197_3_EQ_3_9_ETC___d119 =
	     stage2_mbox$valid ? 2'd2 : 2'd1 ;
  assign NOT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_ETC___d605 =
	     (_theResult____h4284[14:12] != 3'b0 ||
	      _theResult____h4284[6:0] == 7'b0110011 &&
	      _theResult____h4284[30]) &&
	     (_theResult____h4284[14:12] != 3'b0 ||
	      _theResult____h4284[6:0] != 7'b0110011 ||
	      !_theResult____h4284[30]) &&
	     _theResult____h4284[14:12] != 3'b010 &&
	     _theResult____h4284[14:12] != 3'b011 &&
	     _theResult____h4284[14:12] != 3'b100 &&
	     _theResult____h4284[14:12] != 3'b110 &&
	     _theResult____h4284[14:12] != 3'b111 ;
  assign NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d41 =
	     cur_verbosity__h2989 > 4'd1 ;
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1235 =
	     !csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	     (!stage1_rg_full ||
	      NOT_near_mem_imem_valid_99_OR_NOT_near_mem_ime_ETC___d1232) &&
	     (!stage1_rg_full ||
	      NOT_near_mem_imem_valid_99_OR_NOT_near_mem_ime_ETC___d1224) ;
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1253 =
	     !csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	     near_mem$imem_exc ||
	     IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d689 &&
	     IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d700 ;
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1256 =
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1253 &&
	     (IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 ==
	      2'd2 ||
	      IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 ==
	      2'd0) &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d770 ;
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1276 =
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1253 &&
	     (IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 ==
	      2'd2 ||
	      IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 ==
	      2'd0) &&
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d770 ||
	     !stage1_rg_full ;
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1285 =
	     (!csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	      _0_OR_0_OR_near_mem_imem_exc__20_OR_IF_IF_NOT_n_ETC___d1283) &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d770 ;
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1287 =
	     (!csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	      _0_OR_0_OR_near_mem_imem_exc__20_OR_IF_IF_NOT_n_ETC___d1283) &&
	     (IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 ==
	      2'd2 ||
	      IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 ==
	      2'd0) ;
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1290 =
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1235 &&
	     (NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1287 &&
	      near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d770 ||
	      !stage1_rg_full) ;
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1304 =
	     !csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	     !near_mem$imem_exc &&
	     (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d765 ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d767) ;
  assign NOT_near_mem_imem_exc__20_05_AND_IF_IF_NOT_nea_ETC___d899 =
	     !near_mem$imem_exc &&
	     (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d765 ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d767) &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 !=
	     4'd0 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 !=
	     4'd1 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 !=
	     4'd2 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 !=
	     4'd3 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 !=
	     4'd4 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 !=
	     4'd5 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 !=
	     4'd6 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 !=
	     4'd7 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 !=
	     4'd8 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 !=
	     4'd9 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 !=
	     4'd10 ;
  assign NOT_near_mem_imem_exc__20_05_AND_IF_IF_NOT_nea_ETC___d940 =
	     !near_mem$imem_exc &&
	     (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d765 ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d767) &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d916 !=
	     3'd0 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d916 !=
	     3'd1 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d916 !=
	     3'd2 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d916 !=
	     3'd3 ;
  assign NOT_near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_p_ETC___d1191 =
	     (!near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d8 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     gpr_regfile_RDY_server_reset_response_get__178_ETC___d1190 ;
  assign NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_00_ETC___d208 =
	     !near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9___d200 &&
	     (!near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d8 ||
	      imem_rg_pc[1:0] != 2'b0 ||
	      near_mem$imem_instr[1:0] != 2'b11) ;
  assign NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_00_ETC___d213 =
	     NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_00_ETC___d208 &&
	     (!near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d8 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] == 2'b11) &&
	     (!near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d8 ||
	      imem_rg_pc[1:0] != 2'b0 ||
	      near_mem$imem_instr[1:0] == 2'b11) ;
  assign NOT_near_mem_imem_valid_99_OR_NOT_near_mem_ime_ETC___d1213 =
	     !near_mem$imem_valid ||
	     !near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9___d200 ||
	     IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d183 ==
	     2'd1 &&
	     (IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d499 ||
	      IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d501) ;
  assign NOT_near_mem_imem_valid_99_OR_NOT_near_mem_ime_ETC___d1224 =
	     NOT_near_mem_imem_valid_99_OR_NOT_near_mem_ime_ETC___d504 ||
	     !near_mem$imem_exc &&
	     (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d765 ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d767) ;
  assign NOT_near_mem_imem_valid_99_OR_NOT_near_mem_ime_ETC___d1232 =
	     NOT_near_mem_imem_valid_99_OR_NOT_near_mem_ime_ETC___d504 ||
	     near_mem$imem_exc ||
	     IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d689 &&
	     IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d700 ;
  assign NOT_near_mem_imem_valid_99_OR_NOT_near_mem_ime_ETC___d504 =
	     !near_mem$imem_valid ||
	     NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_00_ETC___d213 ||
	     IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d183 ==
	     2'd1 &&
	     (IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d499 ||
	      IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d501) ;
  assign SEXT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLU_ETC___d971 =
	     { {52{theResult__284_BITS_31_TO_20__q19[11]}},
	       theResult__284_BITS_31_TO_20__q19 } ;
  assign SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d292 =
	     { {9{offset__h7134[11]}}, offset__h7134 } ;
  assign SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d317 =
	     { {4{offset__h7766[8]}}, offset__h7766 } ;
  assign _0_OR_0_OR_near_mem_imem_exc__20_OR_IF_IF_NOT_n_ETC___d1283 =
	     near_mem$imem_exc ||
	     IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d689 &&
	     IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d700 ;
  assign _theResult_____1_fst__h13370 =
	     (_theResult____h4284[14:12] == 3'b0 &&
	      _theResult____h4284[6:0] == 7'b0110011 &&
	      _theResult____h4284[30]) ?
	       rd_val___1__h13366 :
	       _theResult_____1_fst__h13377 ;
  assign _theResult_____1_fst__h13405 =
	     rs1_val_bypassed__h4292 & _theResult___snd__h14722 ;
  assign _theResult____h23440 =
	     (delta_CPI_instrs__h23439 == 64'd0) ?
	       delta_CPI_instrs___1__h23475 :
	       delta_CPI_instrs__h23439 ;
  assign _theResult____h4284 =
	     NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_00_ETC___d208 ?
	       instr___1__h6155 :
	       instr__h4282 ;
  assign _theResult___fst__h13482 =
	     (_theResult____h4284[14:12] == 3'b001 &&
	      !_theResult____h4284[25]) ?
	       rd_val___1__h14782 :
	       _theResult___fst__h13489 ;
  assign _theResult___fst__h13489 =
	     _theResult____h4284[30] ?
	       rd_val___1__h14865 :
	       rd_val___1__h14836 ;
  assign _theResult___fst__h13596 =
	     { {32{rs1_val_bypassed292_BITS_31_TO_0_SRL_rs2_val22_ETC__q9[31]}},
	       rs1_val_bypassed292_BITS_31_TO_0_SRL_rs2_val22_ETC__q9 } ;
  assign _theResult___fst__h6326 =
	     (near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d8 &&
	      imem_rg_pc[1:0] == 2'b0 &&
	      near_mem$imem_instr[1:0] != 2'b11) ?
	       instr_out___1__h6328 :
	       _theResult___fst__h6354 ;
  assign _theResult___fst__h6354 =
	     (near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d8 &&
	      imem_rg_pc[1:0] != 2'b0 &&
	      near_mem$imem_instr[17:16] != 2'b11) ?
	       instr_out___1__h6356 :
	       near_mem$imem_instr ;
  assign _theResult___snd__h14722 =
	     (_theResult____h4284[6:0] == 7'b0010011) ?
	       SEXT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLU_ETC___d971 :
	       rs2_val__h12299 ;
  assign alu_outputs___1_addr2624_BITS_31_TO_0__q20 =
	     alu_outputs___1_addr__h12624[31:0] ;
  assign alu_outputs___1_addr__h12325 =
	     IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d569 ?
	       branch_target__h12303 :
	       IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_ETC___d962 ;
  assign alu_outputs___1_addr__h12346 =
	     imem_rg_pc +
	     { {43{theResult__284_BIT_31_CONCAT_theResult__284_BI_ETC__q4[20]}},
	       theResult__284_BIT_31_CONCAT_theResult__284_BI_ETC__q4 } ;
  assign alu_outputs___1_addr__h12372 =
	     { alu_outputs___1_addr__h12624[63:1], 1'd0 } ;
  assign alu_outputs___1_addr__h12624 =
	     rs1_val_bypassed__h4292 +
	     SEXT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLU_ETC___d971 ;
  assign alu_outputs___1_addr__h12645 =
	     rs1_val_bypassed__h4292 +
	     { {52{theResult__284_BITS_31_TO_25_CONCAT_theResult__ETC__q7[11]}},
	       theResult__284_BITS_31_TO_25_CONCAT_theResult__ETC__q7 } ;
  assign alu_outputs___1_exc_code__h12881 =
	     (_theResult____h4284[14:12] == 3'b0) ?
	       ((_theResult____h4284[11:7] == 5'd0 &&
		 _theResult____h4284[19:15] == 5'd0) ?
		  CASE_theResult__284_BITS_31_TO_20_0b0_CASE_rg__ETC__q6 :
		  4'd2) :
	       4'd2 ;
  assign alu_outputs___1_val1__h12487 =
	     (_theResult____h4284[14:12] == 3'b001) ?
	       rd_val__h14618 :
	       (_theResult____h4284[30] ? rd_val__h14692 : rd_val__h14670) ;
  assign alu_outputs___1_val1__h12525 =
	     (_theResult____h4284[14:12] == 3'b0 &&
	      (_theResult____h4284[6:0] != 7'b0110011 ||
	       !_theResult____h4284[30])) ?
	       rd_val___1__h13358 :
	       _theResult_____1_fst__h13370 ;
  assign alu_outputs___1_val1__h12548 =
	     (_theResult____h4284[14:12] == 3'b0) ?
	       rd_val___1__h14751 :
	       _theResult___fst__h13482 ;
  assign alu_outputs___1_val1__h12587 =
	     { {32{v32__h12576[31]}}, v32__h12576 } ;
  assign alu_outputs___1_val1__h12603 =
	     imem_rg_pc + alu_outputs___1_val1__h12587 ;
  assign alu_outputs___1_val1__h12885 =
	     _theResult____h4284[14] ?
	       { 59'd0, _theResult____h4284[19:15] } :
	       rs1_val_bypassed__h4292 ;
  assign alu_outputs___1_val1__h12906 =
	     { 57'd0, _theResult____h4284[31:25] } ;
  assign branch_target__h12303 =
	     imem_rg_pc +
	     { {51{theResult__284_BIT_31_CONCAT_theResult__284_BI_ETC__q3[12]}},
	       theResult__284_BIT_31_CONCAT_theResult__284_BI_ETC__q3 } ;
  assign cpi__h23442 = x__h23441 / 64'd10 ;
  assign cpifrac__h23443 = x__h23441 % 64'd10 ;
  assign csr_regfile_interrupt_pending_rg_cur_priv_3_19_ETC___d1206 =
	     (csr_regfile$interrupt_pending[4] || csr_regfile$nmi_pending) &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d1202 &&
	     IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1203 ;
  assign csr_regfile_interrupt_pending_rg_cur_priv_3_19_ETC___d1211 =
	     (csr_regfile$interrupt_pending[4] || csr_regfile$nmi_pending) &&
	     (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d765 ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d767) ||
	     IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 !=
	     2'd2 &&
	     IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 !=
	     2'd0 ;
  assign csr_regfile_interrupt_pending_rg_cur_priv_3_19_ETC___d1217 =
	     csr_regfile_interrupt_pending_rg_cur_priv_3_19_ETC___d1206 ||
	     (csr_regfile_interrupt_pending_rg_cur_priv_3_19_ETC___d1211 ||
	      NOT_near_mem_imem_valid_99_OR_NOT_near_mem_ime_ETC___d1213 ||
	      near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d689 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d700) &&
	     stage1_rg_full ;
  assign csr_regfile_read_csr_mcycle__2_MINUS_rg_start__ETC___d1395 =
	     delta_CPI_cycles__h23438 * 64'd10 ;
  assign csr_regfile_read_misa__0_BIT_2_15_AND_IF_near__ETC___d302 =
	     csr_regfile$read_misa[2] && instr__h4282[1:0] == 2'b10 &&
	     instr__h4282[15:12] == 4'b1000 &&
	     instr__h4282[11:7] != 5'd0 ;
  assign csr_regfile_read_misa__0_BIT_2_15_AND_IF_near__ETC___d308 =
	     csr_regfile$read_misa[2] && instr__h4282[1:0] == 2'b10 &&
	     instr__h4282[15:12] == 4'b1001 &&
	     instr__h4282[11:7] != 5'd0 ;
  assign cur_verbosity__h2989 =
	     (csr_regfile$read_csr_minstret < cfg_logdelay) ?
	       4'd0 :
	       cfg_verbosity ;
  assign data_to_stage2_addr__h12193 = x_out_data_to_stage2_addr__h12201 ;
  assign delta_CPI_cycles__h23438 =
	     csr_regfile$read_csr_mcycle - rg_start_CPI_cycles ;
  assign delta_CPI_instrs___1__h23475 = delta_CPI_instrs__h23439 + 64'd1 ;
  assign delta_CPI_instrs__h23439 =
	     csr_regfile$read_csr_minstret - rg_start_CPI_instrs ;
  assign fall_through_pc__h12157 =
	     imem_rg_pc +
	     (near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_00_OR__ETC___d511 ?
		64'd4 :
		64'd2) ;
  assign funct10__h12557 =
	     { _theResult____h4284[31:25], _theResult____h4284[14:12] } ;
  assign gpr_regfile_RDY_server_reset_request_put__161__ETC___d1173 =
	     gpr_regfile$RDY_server_reset_request_put &&
	     near_mem$RDY_server_reset_request_put &&
	     csr_regfile$RDY_server_reset_request_put &&
	     f_reset_reqs$EMPTY_N &&
	     stage1_f_reset_reqs$FULL_N &&
	     stage2_f_reset_reqs$FULL_N &&
	     stage3_f_reset_reqs$FULL_N ;
  assign gpr_regfile_RDY_server_reset_response_get__178_ETC___d1190 =
	     gpr_regfile$RDY_server_reset_response_get &&
	     near_mem$RDY_server_reset_response_get &&
	     csr_regfile$RDY_server_reset_response_get &&
	     stage1_f_reset_rsps$EMPTY_N &&
	     stage2_f_reset_rsps$EMPTY_N &&
	     stage3_f_reset_rsps$EMPTY_N &&
	     f_reset_rsps$FULL_N ;
  assign imm12__h11439 = { 3'd0, offset__h11353 } ;
  assign imm12__h11791 = { 4'd0, offset__h11725 } ;
  assign imm12__h6427 = { 4'd0, offset__h6197 } ;
  assign imm12__h6764 = { 5'd0, offset__h6706 } ;
  assign imm12__h8401 = { {6{imm6__h8399[5]}}, imm6__h8399 } ;
  assign imm12__h9070 = { {2{nzimm10__h9068[9]}}, nzimm10__h9068 } ;
  assign imm12__h9285 = { 2'd0, nzimm10__h9283 } ;
  assign imm12__h9481 = { 6'b0, imm6__h8399 } ;
  assign imm12__h9818 = { 6'b010000, imm6__h8399 } ;
  assign imm20__h8529 = { {14{imm6__h8399[5]}}, imm6__h8399 } ;
  assign imm6__h8399 = { instr__h4282[12], instr__h4282[6:2] } ;
  assign instr___1__h6155 =
	     (csr_regfile$read_misa[2] && instr__h4282[1:0] == 2'b10 &&
	      instr__h4282[11:7] != 5'd0 &&
	      instr__h4282[15:13] == 3'b010) ?
	       instr__h6426 :
	       IF_csr_regfile_read_misa__0_BIT_2_15_AND_IF_ne_ETC___d495 ;
  assign instr__h10108 =
	     { imm12__h8401, rs1__h6765, 3'b111, rs1__h6765, 7'b0010011 } ;
  assign instr__h10286 =
	     { 7'b0,
	       instr__h4282[6:2],
	       8'd0,
	       instr__h4282[11:7],
	       7'b0110011 } ;
  assign instr__h10405 =
	     { 7'b0,
	       instr__h4282[6:2],
	       instr__h4282[11:7],
	       3'b0,
	       instr__h4282[11:7],
	       7'b0110011 } ;
  assign instr__h10500 =
	     { 7'b0, rd__h6766, rs1__h6765, 3'b111, rs1__h6765, 7'b0110011 } ;
  assign instr__h10636 =
	     { 7'b0, rd__h6766, rs1__h6765, 3'b110, rs1__h6765, 7'b0110011 } ;
  assign instr__h10772 =
	     { 7'b0, rd__h6766, rs1__h6765, 3'b100, rs1__h6765, 7'b0110011 } ;
  assign instr__h10908 =
	     { 7'b0100000,
	       rd__h6766,
	       rs1__h6765,
	       3'b0,
	       rs1__h6765,
	       7'b0110011 } ;
  assign instr__h11046 =
	     { 7'b0, rd__h6766, rs1__h6765, 3'b0, rs1__h6765, 7'b0111011 } ;
  assign instr__h11184 =
	     { 7'b0100000,
	       rd__h6766,
	       rs1__h6765,
	       3'b0,
	       rs1__h6765,
	       7'b0111011 } ;
  assign instr__h11342 =
	     { 12'b000000000001,
	       instr__h4282[11:7],
	       3'b0,
	       instr__h4282[11:7],
	       7'b1110011 } ;
  assign instr__h11438 =
	     { imm12__h11439, 8'd19, instr__h4282[11:7], 7'b0000011 } ;
  assign instr__h11591 =
	     { 3'd0,
	       instr__h4282[9:7],
	       instr__h4282[12],
	       instr__h4282[6:2],
	       8'd19,
	       offset_BITS_4_TO_0___h12066,
	       7'b0100011 } ;
  assign instr__h11790 =
	     { imm12__h11791, rs1__h6765, 3'b011, rd__h6766, 7'b0000011 } ;
  assign instr__h11941 =
	     { 4'd0,
	       instr__h4282[6:5],
	       instr__h4282[12],
	       rd__h6766,
	       rs1__h6765,
	       3'b011,
	       offset_BITS_4_TO_0___h12066,
	       7'b0100011 } ;
  assign instr__h4282 =
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9___d200 ?
	       instr_out___1__h6296 :
	       _theResult___fst__h6326 ;
  assign instr__h6426 =
	     { imm12__h6427, 8'd18, instr__h4282[11:7], 7'b0000011 } ;
  assign instr__h6571 =
	     { 4'd0,
	       instr__h4282[8:7],
	       instr__h4282[12],
	       instr__h4282[6:2],
	       8'd18,
	       offset_BITS_4_TO_0___h6695,
	       7'b0100011 } ;
  assign instr__h6763 =
	     { imm12__h6764, rs1__h6765, 3'b010, rd__h6766, 7'b0000011 } ;
  assign instr__h6958 =
	     { 5'd0,
	       instr__h4282[5],
	       instr__h4282[12],
	       rd__h6766,
	       rs1__h6765,
	       3'b010,
	       offset_BITS_4_TO_0___h7126,
	       7'b0100011 } ;
  assign instr__h7187 =
	     { SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d292[20],
	       SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d292[10:1],
	       SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d292[11],
	       SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d292[19:12],
	       12'd111 } ;
  assign instr__h7641 = { 12'd0, instr__h4282[11:7], 15'd103 } ;
  assign instr__h7757 = { 12'd0, instr__h4282[11:7], 15'd231 } ;
  assign instr__h7822 =
	     { SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d317[12],
	       SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d317[10:5],
	       5'd0,
	       rs1__h6765,
	       3'b0,
	       SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d317[4:1],
	       SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d317[11],
	       7'b1100011 } ;
  assign instr__h8139 =
	     { SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d317[12],
	       SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d317[10:5],
	       5'd0,
	       rs1__h6765,
	       3'b001,
	       SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d317[4:1],
	       SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d317[11],
	       7'b1100011 } ;
  assign instr__h8477 =
	     { imm12__h8401, 8'd0, instr__h4282[11:7], 7'b0010011 } ;
  assign instr__h8661 = { imm20__h8529, instr__h4282[11:7], 7'b0110111 } ;
  assign instr__h8790 =
	     { imm12__h8401,
	       instr__h4282[11:7],
	       3'b0,
	       instr__h4282[11:7],
	       7'b0010011 } ;
  assign instr__h9017 =
	     { imm12__h8401,
	       instr__h4282[11:7],
	       3'b0,
	       instr__h4282[11:7],
	       7'b0011011 } ;
  assign instr__h9272 =
	     { imm12__h9070,
	       instr__h4282[11:7],
	       3'b0,
	       instr__h4282[11:7],
	       7'b0010011 } ;
  assign instr__h9444 = { imm12__h9285, 8'd16, rd__h6766, 7'b0010011 } ;
  assign instr__h9613 =
	     { imm12__h9481,
	       instr__h4282[11:7],
	       3'b001,
	       instr__h4282[11:7],
	       7'b0010011 } ;
  assign instr__h9802 =
	     { imm12__h9481, rs1__h6765, 3'b101, rs1__h6765, 7'b0010011 } ;
  assign instr__h9991 =
	     { imm12__h9818, rs1__h6765, 3'b101, rs1__h6765, 7'b0010011 } ;
  assign instr_out___1__h6296 =
	     { near_mem$imem_instr[15:0], imem_rg_instr_15_0 } ;
  assign instr_out___1__h6328 = { 16'b0, near_mem$imem_instr[15:0] } ;
  assign instr_out___1__h6356 = { 16'b0, near_mem$imem_instr[31:16] } ;
  assign near_mem_imem_exc__20_OR_IF_IF_NOT_near_mem_im_ETC___d1076 =
	     (near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d689 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d700) &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 ==
	     4'd0 ;
  assign near_mem_imem_exc__20_OR_IF_IF_NOT_near_mem_im_ETC___d1079 =
	     (near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d689 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d700) &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 ==
	     4'd1 ;
  assign near_mem_imem_exc__20_OR_IF_IF_NOT_near_mem_im_ETC___d1082 =
	     (near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d689 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d700) &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 ==
	     4'd2 ;
  assign near_mem_imem_exc__20_OR_IF_IF_NOT_near_mem_im_ETC___d1085 =
	     (near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d689 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d700) &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 ==
	     4'd3 ;
  assign near_mem_imem_exc__20_OR_IF_IF_NOT_near_mem_im_ETC___d1088 =
	     (near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d689 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d700) &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 ==
	     4'd4 ;
  assign near_mem_imem_exc__20_OR_IF_IF_NOT_near_mem_im_ETC___d1091 =
	     (near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d689 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d700) &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 ==
	     4'd5 ;
  assign near_mem_imem_exc__20_OR_IF_IF_NOT_near_mem_im_ETC___d1094 =
	     (near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d689 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d700) &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 ==
	     4'd6 ;
  assign near_mem_imem_exc__20_OR_IF_IF_NOT_near_mem_im_ETC___d1097 =
	     (near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d689 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d700) &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 ==
	     4'd7 ;
  assign near_mem_imem_exc__20_OR_IF_IF_NOT_near_mem_im_ETC___d1100 =
	     (near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d689 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d700) &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 ==
	     4'd8 ;
  assign near_mem_imem_exc__20_OR_IF_IF_NOT_near_mem_im_ETC___d1103 =
	     (near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d689 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d700) &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 ==
	     4'd9 ;
  assign near_mem_imem_exc__20_OR_IF_IF_NOT_near_mem_im_ETC___d1106 =
	     (near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d689 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d700) &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 ==
	     4'd10 ;
  assign near_mem_imem_exc__20_OR_IF_IF_NOT_near_mem_im_ETC___d1109 =
	     (near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d689 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d700) &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 !=
	     4'd0 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 !=
	     4'd1 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 !=
	     4'd2 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 !=
	     4'd3 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 !=
	     4'd4 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 !=
	     4'd5 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 !=
	     4'd6 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 !=
	     4'd7 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 !=
	     4'd8 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 !=
	     4'd9 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 !=
	     4'd10 ;
  assign near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d8 =
	     near_mem$imem_pc[63:2] == imem_rg_pc[63:2] ;
  assign near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_00_OR__ETC___d511 =
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9___d200 ||
	     near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d8 &&
	     imem_rg_pc[1:0] == 2'b0 &&
	     near_mem$imem_instr[1:0] == 2'b11 ;
  assign near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_00_OR__ETC___d513 =
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_00_OR__ETC___d511 ||
	     near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d8 &&
	     imem_rg_pc[1:0] != 2'b0 &&
	     near_mem$imem_instr[17:16] != 2'b11 ||
	     near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d8 &&
	     imem_rg_pc[1:0] == 2'b0 &&
	     near_mem$imem_instr[1:0] != 2'b11 ;
  assign near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9___d200 =
	     near_mem$imem_pc == next_pc___1__h14255 ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d1202 =
	     near_mem$imem_valid &&
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9___d200 &&
	     (IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d183 !=
	      2'd1 ||
	      !IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d499 &&
	      !IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d501) ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d519 =
	     near_mem$imem_valid &&
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_00_OR__ETC___d513 &&
	     (IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d183 !=
	      2'd1 ||
	      !IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d499 &&
	      !IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d501) ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d703 =
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d519 &&
	     (near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d689 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d700) ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d770 =
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d519 &&
	     !near_mem$imem_exc &&
	     (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d765 ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d767) ;
  assign next_pc___1__h14255 = imem_rg_pc + 64'd2 ;
  assign next_pc__h14253 = imem_rg_pc + 64'd4 ;
  assign nzimm10__h9068 =
	     { instr__h4282[12],
	       instr__h4282[4:3],
	       instr__h4282[5],
	       instr__h4282[2],
	       instr__h4282[6],
	       4'b0 } ;
  assign nzimm10__h9283 =
	     { instr__h4282[10:7],
	       instr__h4282[12:11],
	       instr__h4282[5],
	       instr__h4282[6],
	       2'b0 } ;
  assign offset_BITS_4_TO_0___h12066 = { instr__h4282[11:10], 3'b0 } ;
  assign offset_BITS_4_TO_0___h6695 = { instr__h4282[11:9], 2'b0 } ;
  assign offset_BITS_4_TO_0___h7126 =
	     { instr__h4282[11:10], instr__h4282[6], 2'b0 } ;
  assign offset__h11353 =
	     { instr__h4282[4:2],
	       instr__h4282[12],
	       instr__h4282[6:5],
	       3'b0 } ;
  assign offset__h11725 = { instr__h4282[6:5], instr__h4282[12:10], 3'b0 } ;
  assign offset__h6197 =
	     { instr__h4282[3:2],
	       instr__h4282[12],
	       instr__h4282[6:4],
	       2'b0 } ;
  assign offset__h6706 =
	     { instr__h4282[5], instr__h4282[12:10], instr__h4282[6], 2'b0 } ;
  assign offset__h7134 =
	     { instr__h4282[12],
	       instr__h4282[8],
	       instr__h4282[10:9],
	       instr__h4282[6],
	       instr__h4282[7],
	       instr__h4282[2],
	       instr__h4282[11],
	       instr__h4282[5:3],
	       1'b0 } ;
  assign offset__h7766 =
	     { instr__h4282[12],
	       instr__h4282[6:5],
	       instr__h4282[2],
	       instr__h4282[11:10],
	       instr__h4282[4:3],
	       1'b0 } ;
  assign output_stage2___1_bypass_rd_val__h5983 =
	     (!near_mem$dmem_valid || !near_mem$dmem_exc) ?
	       ((stage2_rg_stage2[196:192] == 5'd0) ?
		  stage2_rg_stage2[127:64] :
		  near_mem$dmem_word64) :
	       stage2_rg_stage2[127:64] ;
  assign rd__h6766 = { 2'b01, instr__h4282[4:2] } ;
  assign rd_val___1__h13358 =
	     rs1_val_bypassed__h4292 + _theResult___snd__h14722 ;
  assign rd_val___1__h13366 =
	     rs1_val_bypassed__h4292 - _theResult___snd__h14722 ;
  assign rd_val___1__h13373 =
	     ((rs1_val_bypassed__h4292 ^ 64'h8000000000000000) <
	      (_theResult___snd__h14722 ^ 64'h8000000000000000)) ?
	       64'd1 :
	       64'd0 ;
  assign rd_val___1__h13380 =
	     (rs1_val_bypassed__h4292 < _theResult___snd__h14722) ?
	       64'd1 :
	       64'd0 ;
  assign rd_val___1__h13387 =
	     rs1_val_bypassed__h4292 ^ _theResult___snd__h14722 ;
  assign rd_val___1__h13394 =
	     rs1_val_bypassed__h4292 | _theResult___snd__h14722 ;
  assign rd_val___1__h14751 =
	     { {32{alu_outputs___1_addr2624_BITS_31_TO_0__q20[31]}},
	       alu_outputs___1_addr2624_BITS_31_TO_0__q20 } ;
  assign rd_val___1__h14782 = { {32{x__h14785[31]}}, x__h14785 } ;
  assign rd_val___1__h14836 = { {32{x__h14839[31]}}, x__h14839 } ;
  assign rd_val___1__h14865 = { {32{tmp__h14864[31]}}, tmp__h14864 } ;
  assign rd_val___1__h14917 =
	     { {32{rs1_val_bypassed292_BITS_31_TO_0_PLUS_rs2_val2_ETC__q10[31]}},
	       rs1_val_bypassed292_BITS_31_TO_0_PLUS_rs2_val2_ETC__q10 } ;
  assign rd_val___1__h14965 =
	     { {32{rs1_val_bypassed292_BITS_31_TO_0_MINUS_rs2_val_ETC__q11[31]}},
	       rs1_val_bypassed292_BITS_31_TO_0_MINUS_rs2_val_ETC__q11 } ;
  assign rd_val___1__h14971 = { {32{x__h14974[31]}}, x__h14974 } ;
  assign rd_val___1__h15016 = { {32{x__h15019[31]}}, x__h15019 } ;
  assign rd_val__h12114 =
	     (stage3_rg_full && stage3_rg_stage3[69] &&
	      stage3_rg_stage3[68:64] == _theResult____h4284[24:20]) ?
	       stage3_rg_stage3[63:0] :
	       gpr_regfile$read_rs2 ;
  assign rd_val__h14618 = rs1_val_bypassed__h4292 << shamt__h12472 ;
  assign rd_val__h14670 = rs1_val_bypassed__h4292 >> shamt__h12472 ;
  assign rd_val__h14692 =
	     rs1_val_bypassed__h4292 >> shamt__h12472 |
	     ~(64'hFFFFFFFFFFFFFFFF >> shamt__h12472) &
	     {64{rs1_val_bypassed__h4292[63]}} ;
  assign rd_val__h6107 =
	     (stage3_rg_full && stage3_rg_stage3[69] &&
	      stage3_rg_stage3[68:64] == _theResult____h4284[19:15]) ?
	       stage3_rg_stage3[63:0] :
	       gpr_regfile$read_rs1 ;
  assign rg_cur_priv_3_EQ_0b11_90_OR_rg_cur_priv_3_EQ_0_ETC___d807 =
	     (rg_cur_priv == 2'b11 ||
	      rg_cur_priv == 2'b01 && !csr_regfile$read_mstatus[21] ||
	      rg_cur_priv == 2'b0 && csr_regfile$read_misa[13]) &&
	     _theResult____h4284[31:20] == 12'b000100000101 ;
  assign rg_state_2_EQ_2_219_AND_NOT_csr_regfile_interr_ETC___d1307 =
	     rg_state == 4'd2 &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1304 &&
	     !stage3_rg_full &&
	     IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 ==
	     2'd0 ;
  assign rg_state_2_EQ_2_219_AND_stage3_rg_full_2_OR_NO_ETC___d1238 =
	     rg_state == 4'd2 &&
	     (stage3_rg_full ||
	      IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 !=
	      2'd0 ||
	      stage1_rg_full) &&
	     (stage3_rg_full ||
	      IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 !=
	      2'd3) &&
	     (stage3_rg_full ||
	      IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 !=
	      2'd0 ||
	      !stage1_rg_full ||
	      NOT_near_mem_imem_valid_99_OR_NOT_near_mem_ime_ETC___d1224) &&
	     (NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1235 ||
	      IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 !=
	      2'd0 ||
	      stage3_rg_full) ;
  assign rs1__h6765 = { 2'b01, instr__h4282[9:7] } ;
  assign rs1_val__h18386 =
	     (x_out_data_to_stage2_instr__h12198[14:12] == 3'b001) ?
	       x_out_data_to_stage2_val1__h12202 :
	       { 59'd0, x_out_data_to_stage2_instr__h12198[19:15] } ;
  assign rs1_val_bypassed292_BITS_31_TO_0_MINUS_rs2_val_ETC__q11 =
	     rs1_val_bypassed__h4292[31:0] - rs2_val__h12299[31:0] ;
  assign rs1_val_bypassed292_BITS_31_TO_0_PLUS_rs2_val2_ETC__q10 =
	     rs1_val_bypassed__h4292[31:0] + rs2_val__h12299[31:0] ;
  assign rs1_val_bypassed292_BITS_31_TO_0_SRL_rs2_val22_ETC__q9 =
	     rs1_val_bypassed__h4292[31:0] >> rs2_val__h12299[4:0] |
	     ~(32'hFFFFFFFF >> rs2_val__h12299[4:0]) &
	     {32{rs1_val_bypassed292_BITS_31_TO_0__q8[31]}} ;
  assign rs1_val_bypassed292_BITS_31_TO_0__q8 =
	     rs1_val_bypassed__h4292[31:0] ;
  assign rs1_val_bypassed__h4292 =
	     (_theResult____h4284[19:15] == 5'd0) ? 64'd0 : val__h6109 ;
  assign rs2_val__h12299 =
	     (_theResult____h4284[24:20] == 5'd0) ? 64'd0 : val__h12116 ;
  assign shamt__h12472 =
	     (_theResult____h4284[6:0] == 7'b0010011) ?
	       _theResult____h4284[25:20] :
	       rs2_val__h12299[5:0] ;
  assign sxl__h4700 =
	     (csr_regfile$read_misa[27:26] == 2'd2) ?
	       csr_regfile$read_mstatus[35:34] :
	       2'd0 ;
  assign theResult__284_BITS_31_TO_20__q19 = _theResult____h4284[31:20] ;
  assign theResult__284_BITS_31_TO_25_CONCAT_theResult__ETC__q7 =
	     { _theResult____h4284[31:25], _theResult____h4284[11:7] } ;
  assign theResult__284_BIT_31_CONCAT_theResult__284_BI_ETC__q3 =
	     { _theResult____h4284[31],
	       _theResult____h4284[7],
	       _theResult____h4284[30:25],
	       _theResult____h4284[11:8],
	       1'b0 } ;
  assign theResult__284_BIT_31_CONCAT_theResult__284_BI_ETC__q4 =
	     { _theResult____h4284[31],
	       _theResult____h4284[19:12],
	       _theResult____h4284[20],
	       _theResult____h4284[30:21],
	       1'b0 } ;
  assign tmp__h14864 =
	     rs1_val_bypassed__h4292[31:0] >> _theResult____h4284[24:20] |
	     ~(32'hFFFFFFFF >> _theResult____h4284[24:20]) &
	     {32{rs1_val_bypassed292_BITS_31_TO_0__q8[31]}} ;
  assign trap_info_tval__h14089 =
	     (_theResult____h4284[6:0] != 7'b1101111 &&
	      _theResult____h4284[6:0] != 7'b1100111 &&
	      (_theResult____h4284[6:0] != 7'b1110011 ||
	       _theResult____h4284[14:12] != 3'b0 ||
	       _theResult____h4284[11:7] != 5'd0 ||
	       _theResult____h4284[19:15] != 5'd0 ||
	       _theResult____h4284[31:20] != 12'b0 &&
	       _theResult____h4284[31:20] != 12'b000000000001)) ?
	       (near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_00_OR__ETC___d511 ?
		  { 32'd0, _theResult____h4284 } :
		  { 48'd0, instr__h4282[15:0] }) :
	       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1151 ;
  assign uxl__h4701 =
	     (csr_regfile$read_misa[27:26] == 2'd2) ?
	       csr_regfile$read_mstatus[33:32] :
	       2'd0 ;
  assign v32__h12576 = { _theResult____h4284[31:12], 12'h0 } ;
  assign val__h12116 =
	     (IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d183 ==
	      2'd2 &&
	      IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d501) ?
	       x_out_bypass_rd_val__h5995 :
	       rd_val__h12114 ;
  assign val__h6109 =
	     (IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d183 ==
	      2'd2 &&
	      IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d499) ?
	       x_out_bypass_rd_val__h5995 :
	       rd_val__h6107 ;
  assign value__h14143 =
	     near_mem$imem_exc ? imem_rg_tval : trap_info_tval__h14089 ;
  assign x__h14785 =
	     rs1_val_bypassed__h4292[31:0] << _theResult____h4284[24:20] ;
  assign x__h14839 =
	     rs1_val_bypassed__h4292[31:0] >> _theResult____h4284[24:20] ;
  assign x__h14974 = rs1_val_bypassed__h4292[31:0] << rs2_val__h12299[4:0] ;
  assign x__h15019 = rs1_val_bypassed__h4292[31:0] >> rs2_val__h12299[4:0] ;
  assign x__h23441 =
	     csr_regfile_read_csr_mcycle__2_MINUS_rg_start__ETC___d1395[63:0] /
	     _theResult____h23440 ;
  assign x_out_data_to_stage2_instr__h12198 = _theResult____h4284 ;
  assign x_out_data_to_stage2_rd__h12200 =
	     (_theResult____h4284[6:0] == 7'b1100011) ?
	       5'd0 :
	       _theResult____h4284[11:7] ;
  assign x_out_data_to_stage2_val2__h12203 =
	     (_theResult____h4284[6:0] == 7'b1100011) ?
	       branch_target__h12303 :
	       rs2_val__h12299 ;
  assign x_out_next_pc__h12170 =
	     IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d767 ?
	       data_to_stage2_addr__h12193 :
	       fall_through_pc__h12157 ;
  assign x_out_trap_info_exc_code__h14092 =
	     near_mem$imem_exc ?
	       near_mem$imem_exc_code :
	       alu_outputs_exc_code__h12927 ;
  assign y__h19177 = ~rs1_val__h18876 ;
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[199:197])
      3'd0, 3'd1, 3'd4:
	  x_out_data_to_stage3_rd__h5643 = stage2_rg_stage2[196:192];
      3'd2: x_out_data_to_stage3_rd__h5643 = 5'd0;
      default: x_out_data_to_stage3_rd__h5643 = stage2_rg_stage2[196:192];
    endcase
  end
  always@(stage2_rg_stage2 or stage2_mbox$word or near_mem$dmem_word64)
  begin
    case (stage2_rg_stage2[199:197])
      3'd0: x_out_data_to_stage3_rd_val__h5644 = stage2_rg_stage2[127:64];
      3'd1, 3'd4: x_out_data_to_stage3_rd_val__h5644 = near_mem$dmem_word64;
      default: x_out_data_to_stage3_rd_val__h5644 = stage2_mbox$word;
    endcase
  end
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[199:197])
      3'd0, 3'd1, 3'd4: x_out_bypass_rd__h5994 = stage2_rg_stage2[196:192];
      default: x_out_bypass_rd__h5994 = stage2_rg_stage2[196:192];
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_mbox$word or output_stage2___1_bypass_rd_val__h5983)
  begin
    case (stage2_rg_stage2[199:197])
      3'd0: x_out_bypass_rd_val__h5995 = stage2_rg_stage2[127:64];
      3'd1, 3'd4:
	  x_out_bypass_rd_val__h5995 = output_stage2___1_bypass_rd_val__h5983;
      default: x_out_bypass_rd_val__h5995 = stage2_mbox$word;
    endcase
  end
  always@(stage2_rg_stage2 or
	  IF_stage2_rg_stage2_2_BITS_199_TO_197_3_EQ_3_9_ETC___d119 or
	  IF_near_mem_dmem_valid__13_THEN_IF_near_mem_dm_ETC___d116)
  begin
    case (stage2_rg_stage2[199:197])
      3'd0: CASE_stage2_rg_stage2_BITS_199_TO_197_0_2_1_IF_ETC__q1 = 2'd2;
      3'd1, 3'd2, 3'd4:
	  CASE_stage2_rg_stage2_BITS_199_TO_197_0_2_1_IF_ETC__q1 =
	      IF_near_mem_dmem_valid__13_THEN_IF_near_mem_dm_ETC___d116;
      default: CASE_stage2_rg_stage2_BITS_199_TO_197_0_2_1_IF_ETC__q1 =
		   IF_stage2_rg_stage2_2_BITS_199_TO_197_3_EQ_3_9_ETC___d119;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_mbox$valid or near_mem$dmem_valid or near_mem$dmem_exc)
  begin
    case (stage2_rg_stage2[199:197])
      3'd1, 3'd2, 3'd4:
	  IF_stage2_rg_stage2_2_BITS_199_TO_197_3_EQ_1_5_ETC___d136 =
	      !near_mem$dmem_valid || near_mem$dmem_exc;
      default: IF_stage2_rg_stage2_2_BITS_199_TO_197_3_EQ_1_5_ETC___d136 =
		   !stage2_mbox$valid;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_mbox$valid or near_mem$dmem_valid or near_mem$dmem_exc)
  begin
    case (stage2_rg_stage2[199:197])
      3'd1, 3'd2, 3'd4:
	  IF_stage2_rg_stage2_2_BITS_199_TO_197_3_EQ_1_5_ETC___d145 =
	      near_mem$dmem_valid && !near_mem$dmem_exc;
      default: IF_stage2_rg_stage2_2_BITS_199_TO_197_3_EQ_1_5_ETC___d145 =
		   stage2_mbox$valid;
    endcase
  end
  always@(stage2_rg_stage2 or
	  IF_stage2_rg_stage2_2_BITS_199_TO_197_3_EQ_3_9_ETC___d119 or
	  IF_NOT_near_mem_dmem_valid__13_32_OR_NOT_near__ETC___d179)
  begin
    case (stage2_rg_stage2[199:197])
      3'd0: CASE_stage2_rg_stage2_BITS_199_TO_197_0_2_1_IF_ETC__q2 = 2'd2;
      3'd1, 3'd4:
	  CASE_stage2_rg_stage2_BITS_199_TO_197_0_2_1_IF_ETC__q2 =
	      IF_NOT_near_mem_dmem_valid__13_32_OR_NOT_near__ETC___d179;
      3'd2: CASE_stage2_rg_stage2_BITS_199_TO_197_0_2_1_IF_ETC__q2 = 2'd0;
      default: CASE_stage2_rg_stage2_BITS_199_TO_197_0_2_1_IF_ETC__q2 =
		   IF_stage2_rg_stage2_2_BITS_199_TO_197_3_EQ_3_9_ETC___d119;
    endcase
  end
  always@(rg_cur_priv)
  begin
    case (rg_cur_priv)
      2'b0: CASE_rg_cur_priv_0b0_8_0b1_9_11__q5 = 4'd8;
      2'b01: CASE_rg_cur_priv_0b0_8_0b1_9_11__q5 = 4'd9;
      default: CASE_rg_cur_priv_0b0_8_0b1_9_11__q5 = 4'd11;
    endcase
  end
  always@(_theResult____h4284 or CASE_rg_cur_priv_0b0_8_0b1_9_11__q5)
  begin
    case (_theResult____h4284[31:20])
      12'b0:
	  CASE_theResult__284_BITS_31_TO_20_0b0_CASE_rg__ETC__q6 =
	      CASE_rg_cur_priv_0b0_8_0b1_9_11__q5;
      12'b000000000001:
	  CASE_theResult__284_BITS_31_TO_20_0b0_CASE_rg__ETC__q6 = 4'd3;
      default: CASE_theResult__284_BITS_31_TO_20_0b0_CASE_rg__ETC__q6 = 4'd2;
    endcase
  end
  always@(_theResult____h4284 or alu_outputs___1_exc_code__h12881)
  begin
    case (_theResult____h4284[6:0])
      7'b0000011,
      7'b0001111,
      7'b0010011,
      7'b0010111,
      7'b0011011,
      7'b0100011,
      7'b0110011,
      7'b0110111,
      7'b0111011,
      7'b1100011:
	  alu_outputs_exc_code__h12927 = 4'd2;
      7'b1100111, 7'b1101111: alu_outputs_exc_code__h12927 = 4'd0;
      7'b1110011:
	  alu_outputs_exc_code__h12927 = alu_outputs___1_exc_code__h12881;
      default: alu_outputs_exc_code__h12927 = 4'd2;
    endcase
  end
  always@(funct10__h12557 or
	  _theResult___fst__h13596 or
	  rd_val___1__h14917 or
	  rd_val___1__h14971 or rd_val___1__h15016 or rd_val___1__h14965)
  begin
    case (funct10__h12557)
      10'b0: alu_outputs___1_val1__h12571 = rd_val___1__h14917;
      10'b0000000001: alu_outputs___1_val1__h12571 = rd_val___1__h14971;
      10'b0000000101: alu_outputs___1_val1__h12571 = rd_val___1__h15016;
      10'b0100000000: alu_outputs___1_val1__h12571 = rd_val___1__h14965;
      default: alu_outputs___1_val1__h12571 = _theResult___fst__h13596;
    endcase
  end
  always@(_theResult____h4284 or
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d562 or
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d558 or
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d560)
  begin
    case (_theResult____h4284[14:12])
      3'b0:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d695 =
	      !IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d558;
      3'b001:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d695 =
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d558;
      3'b100:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d695 =
	      !IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d560;
      3'b101:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d695 =
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d560;
      3'b110:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d695 =
	      !IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d562;
      default: IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d695 =
		   _theResult____h4284[14:12] != 3'b111 ||
		   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d562;
    endcase
  end
  always@(_theResult____h4284 or
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d562 or
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d558 or
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d560)
  begin
    case (_theResult____h4284[14:12])
      3'b0:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d569 =
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d558;
      3'b001:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d569 =
	      !IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d558;
      3'b100:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d569 =
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d560;
      3'b101:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d569 =
	      !IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d560;
      3'b110:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d569 =
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d562;
      default: IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d569 =
		   _theResult____h4284[14:12] == 3'b111 &&
		   !IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d562;
    endcase
  end
  always@(_theResult____h4284)
  begin
    case (_theResult____h4284[6:0])
      7'b0000011:
	  CASE_theResult__284_BITS_6_TO_0_0b11_NOT_theRe_ETC__q12 =
	      _theResult____h4284[14:12] != 3'b0 &&
	      _theResult____h4284[14:12] != 3'b100 &&
	      _theResult____h4284[14:12] != 3'b001 &&
	      _theResult____h4284[14:12] != 3'b101 &&
	      _theResult____h4284[14:12] != 3'b010 &&
	      _theResult____h4284[14:12] != 3'b110 &&
	      _theResult____h4284[14:12] != 3'b011;
      7'b0100011:
	  CASE_theResult__284_BITS_6_TO_0_0b11_NOT_theRe_ETC__q12 =
	      _theResult____h4284[14:12] != 3'b0 &&
	      _theResult____h4284[14:12] != 3'b001 &&
	      _theResult____h4284[14:12] != 3'b010 &&
	      _theResult____h4284[14:12] != 3'b011;
      default: CASE_theResult__284_BITS_6_TO_0_0b11_NOT_theRe_ETC__q12 =
		   _theResult____h4284[6:0] != 7'b0101111 ||
		   _theResult____h4284[31:27] != 5'b00010 &&
		   _theResult____h4284[31:27] != 5'b00011 &&
		   _theResult____h4284[31:27] != 5'b0 &&
		   _theResult____h4284[31:27] != 5'b00001 &&
		   _theResult____h4284[31:27] != 5'b01100 &&
		   _theResult____h4284[31:27] != 5'b01000 &&
		   _theResult____h4284[31:27] != 5'b00100 &&
		   _theResult____h4284[31:27] != 5'b10000 &&
		   _theResult____h4284[31:27] != 5'b11000 &&
		   _theResult____h4284[31:27] != 5'b10100 &&
		   _theResult____h4284[31:27] != 5'b11100 ||
		   _theResult____h4284[14:12] != 3'b010 &&
		   _theResult____h4284[14:12] != 3'b011;
    endcase
  end
  always@(_theResult____h4284 or
	  CASE_theResult__284_BITS_6_TO_0_0b11_NOT_theRe_ETC__q12 or
	  NOT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_ETC___d605 or
	  funct10__h12557)
  begin
    case (_theResult____h4284[6:0])
      7'b0010011, 7'b0110011:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d686 =
	      NOT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_ETC___d605;
      7'b0011011:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d686 =
	      _theResult____h4284[14:12] != 3'b0 &&
	      (_theResult____h4284[14:12] != 3'b001 ||
	       _theResult____h4284[25]) &&
	      (_theResult____h4284[14:12] != 3'b101 ||
	       _theResult____h4284[25]);
      7'b0111011:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d686 =
	      funct10__h12557 != 10'b0 && funct10__h12557 != 10'b0100000000 &&
	      funct10__h12557 != 10'b0000000001 &&
	      funct10__h12557 != 10'b0000000101 &&
	      funct10__h12557 != 10'b0100000101;
      default: IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d686 =
		   _theResult____h4284[6:0] != 7'b0110111 &&
		   _theResult____h4284[6:0] != 7'b0010111 &&
		   CASE_theResult__284_BITS_6_TO_0_0b11_NOT_theRe_ETC__q12;
    endcase
  end
  always@(_theResult____h4284)
  begin
    case (_theResult____h4284[6:0])
      7'b0000011:
	  CASE_theResult__284_BITS_6_TO_0_0b11_theResult_ETC__q13 =
	      _theResult____h4284[14:12] == 3'b0 ||
	      _theResult____h4284[14:12] == 3'b100 ||
	      _theResult____h4284[14:12] == 3'b001 ||
	      _theResult____h4284[14:12] == 3'b101 ||
	      _theResult____h4284[14:12] == 3'b010 ||
	      _theResult____h4284[14:12] == 3'b110 ||
	      _theResult____h4284[14:12] == 3'b011;
      7'b0100011:
	  CASE_theResult__284_BITS_6_TO_0_0b11_theResult_ETC__q13 =
	      _theResult____h4284[14:12] == 3'b0 ||
	      _theResult____h4284[14:12] == 3'b001 ||
	      _theResult____h4284[14:12] == 3'b010 ||
	      _theResult____h4284[14:12] == 3'b011;
      default: CASE_theResult__284_BITS_6_TO_0_0b11_theResult_ETC__q13 =
		   _theResult____h4284[6:0] == 7'b0101111 &&
		   (_theResult____h4284[31:27] == 5'b00010 ||
		    _theResult____h4284[31:27] == 5'b00011 ||
		    _theResult____h4284[31:27] == 5'b0 ||
		    _theResult____h4284[31:27] == 5'b00001 ||
		    _theResult____h4284[31:27] == 5'b01100 ||
		    _theResult____h4284[31:27] == 5'b01000 ||
		    _theResult____h4284[31:27] == 5'b00100 ||
		    _theResult____h4284[31:27] == 5'b10000 ||
		    _theResult____h4284[31:27] == 5'b11000 ||
		    _theResult____h4284[31:27] == 5'b10100 ||
		    _theResult____h4284[31:27] == 5'b11100) &&
		   (_theResult____h4284[14:12] == 3'b010 ||
		    _theResult____h4284[14:12] == 3'b011);
    endcase
  end
  always@(_theResult____h4284 or
	  CASE_theResult__284_BITS_6_TO_0_0b11_theResult_ETC__q13 or
	  IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_ETC___d724 or
	  funct10__h12557)
  begin
    case (_theResult____h4284[6:0])
      7'b0010011, 7'b0110011:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d762 =
	      IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_ETC___d724;
      7'b0011011:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d762 =
	      _theResult____h4284[14:12] == 3'b0 ||
	      (_theResult____h4284[14:12] == 3'b001 ||
	       _theResult____h4284[14:12] == 3'b101) &&
	      !_theResult____h4284[25];
      7'b0111011:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d762 =
	      funct10__h12557 == 10'b0 || funct10__h12557 == 10'b0100000000 ||
	      funct10__h12557 == 10'b0000000001 ||
	      funct10__h12557 == 10'b0000000101 ||
	      funct10__h12557 == 10'b0100000101;
      default: IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d762 =
		   _theResult____h4284[6:0] == 7'b0110111 ||
		   _theResult____h4284[6:0] == 7'b0010111 ||
		   CASE_theResult__284_BITS_6_TO_0_0b11_theResult_ETC__q13;
    endcase
  end
  always@(_theResult____h4284 or
	  rg_cur_priv or
	  IF_rg_cur_priv_3_EQ_0b11_90_OR_rg_cur_priv_3_E_ETC___d809)
  begin
    case (_theResult____h4284[31:20])
      12'b0, 12'b000000000001:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d811 = 4'd11;
      default: IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d811 =
		   (rg_cur_priv == 2'b11 &&
		    _theResult____h4284[31:20] == 12'b001100000010) ?
		     4'd7 :
		     IF_rg_cur_priv_3_EQ_0b11_90_OR_rg_cur_priv_3_E_ETC___d809;
    endcase
  end
  always@(_theResult____h4284)
  begin
    case (_theResult____h4284[14:12])
      3'b0, 3'b001, 3'b010, 3'b011, 3'b100, 3'b101, 3'b110:
	  CASE_theResult__284_BITS_14_TO_12_0b0_0_0b1_0__ETC__q14 = 4'd0;
      3'd7: CASE_theResult__284_BITS_14_TO_12_0b0_0_0b1_0__ETC__q14 = 4'd11;
    endcase
  end
  always@(_theResult____h4284)
  begin
    case (_theResult____h4284[14:12])
      3'b0: CASE_theResult__284_BITS_14_TO_12_0b0_4_0b1_5_11__q15 = 4'd4;
      3'b001: CASE_theResult__284_BITS_14_TO_12_0b0_4_0b1_5_11__q15 = 4'd5;
      default: CASE_theResult__284_BITS_14_TO_12_0b0_4_0b1_5_11__q15 = 4'd11;
    endcase
  end
  always@(_theResult____h4284)
  begin
    case (_theResult____h4284[14:12])
      3'b0, 3'b001, 3'b010, 3'b011:
	  CASE_theResult__284_BITS_14_TO_12_0b0_0_0b1_0__ETC__q16 = 4'd0;
      default: CASE_theResult__284_BITS_14_TO_12_0b0_0_0b1_0__ETC__q16 =
		   4'd11;
    endcase
  end
  always@(_theResult____h4284 or
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d811)
  begin
    case (_theResult____h4284[14:12])
      3'b0:
	  CASE_theResult__284_BITS_14_TO_12_0b0_IF_theRe_ETC__q17 =
	      (_theResult____h4284[11:7] == 5'd0 &&
	       _theResult____h4284[19:15] == 5'd0) ?
		IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d811 :
		4'd11;
      3'b001, 3'b101:
	  CASE_theResult__284_BITS_14_TO_12_0b0_IF_theRe_ETC__q17 = 4'd2;
      3'b010, 3'b011, 3'b110, 3'b111:
	  CASE_theResult__284_BITS_14_TO_12_0b0_IF_theRe_ETC__q17 = 4'd3;
      3'd4: CASE_theResult__284_BITS_14_TO_12_0b0_IF_theRe_ETC__q17 = 4'd11;
    endcase
  end
  always@(_theResult____h4284 or
	  CASE_theResult__284_BITS_14_TO_12_0b0_0_0b1_0__ETC__q14 or
	  CASE_theResult__284_BITS_14_TO_12_0b0_4_0b1_5_11__q15 or
	  IF_NOT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_P_ETC___d774 or
	  CASE_theResult__284_BITS_14_TO_12_0b0_0_0b1_0__ETC__q16 or
	  funct10__h12557 or
	  CASE_theResult__284_BITS_14_TO_12_0b0_IF_theRe_ETC__q17)
  begin
    case (_theResult____h4284[6:0])
      7'b0000011:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d828 =
	      CASE_theResult__284_BITS_14_TO_12_0b0_0_0b1_0__ETC__q14;
      7'b0001111:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d828 =
	      CASE_theResult__284_BITS_14_TO_12_0b0_4_0b1_5_11__q15;
      7'b0010011, 7'b0110011:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d828 =
	      IF_NOT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_P_ETC___d774;
      7'b0010111, 7'b0110111:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d828 = 4'd0;
      7'b0011011:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d828 =
	      (_theResult____h4284[14:12] != 3'b0 &&
	       (_theResult____h4284[14:12] != 3'b001 ||
		_theResult____h4284[25]) &&
	       (_theResult____h4284[14:12] != 3'b101 ||
		_theResult____h4284[25])) ?
		4'd11 :
		4'd0;
      7'b0100011:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d828 =
	      CASE_theResult__284_BITS_14_TO_12_0b0_0_0b1_0__ETC__q16;
      7'b0101111:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d828 =
	      ((_theResult____h4284[31:27] == 5'b00010 ||
		_theResult____h4284[31:27] == 5'b00011 ||
		_theResult____h4284[31:27] == 5'b0 ||
		_theResult____h4284[31:27] == 5'b00001 ||
		_theResult____h4284[31:27] == 5'b01100 ||
		_theResult____h4284[31:27] == 5'b01000 ||
		_theResult____h4284[31:27] == 5'b00100 ||
		_theResult____h4284[31:27] == 5'b10000 ||
		_theResult____h4284[31:27] == 5'b11000 ||
		_theResult____h4284[31:27] == 5'b10100 ||
		_theResult____h4284[31:27] == 5'b11100) &&
	       (_theResult____h4284[14:12] == 3'b010 ||
		_theResult____h4284[14:12] == 3'b011)) ?
		4'd0 :
		4'd11;
      7'b0111011:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d828 =
	      (funct10__h12557 != 10'b0 &&
	       funct10__h12557 != 10'b0100000000 &&
	       funct10__h12557 != 10'b0000000001 &&
	       funct10__h12557 != 10'b0000000101 &&
	       funct10__h12557 != 10'b0100000101) ?
		4'd11 :
		4'd0;
      7'b1110011:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d828 =
	      CASE_theResult__284_BITS_14_TO_12_0b0_IF_theRe_ETC__q17;
      default: IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d828 =
		   4'd11;
    endcase
  end
  always@(_theResult____h4284 or
	  IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_ETC___d717 or
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d828 or
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d569)
  begin
    case (_theResult____h4284[6:0])
      7'b1100011:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d831 =
	      (_theResult____h4284[14:12] != 3'b0 &&
	       _theResult____h4284[14:12] != 3'b001 &&
	       _theResult____h4284[14:12] != 3'b100 &&
	       _theResult____h4284[14:12] != 3'b101 &&
	       _theResult____h4284[14:12] != 3'b110 &&
	       _theResult____h4284[14:12] != 3'b111) ?
		4'd11 :
		(IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d569 ?
		   4'd1 :
		   4'd0);
      7'b1100111, 7'b1101111:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d831 = 4'd1;
      default: IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d831 =
		   IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_ETC___d717 ?
		     4'd0 :
		     IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d828;
    endcase
  end
  always@(_theResult____h4284)
  begin
    case (_theResult____h4284[6:0])
      7'b0000011:
	  CASE_theResult__284_BITS_6_TO_0_0b11_1_0b10011_ETC__q18 = 3'd1;
      7'b0010011, 7'b0010111, 7'b0011011, 7'b0110011, 7'b0110111, 7'b0111011:
	  CASE_theResult__284_BITS_6_TO_0_0b11_1_0b10011_ETC__q18 = 3'd0;
      7'b0100011:
	  CASE_theResult__284_BITS_6_TO_0_0b11_1_0b10011_ETC__q18 = 3'd2;
      default: CASE_theResult__284_BITS_6_TO_0_0b11_1_0b10011_ETC__q18 = 3'd4;
    endcase
  end
  always@(_theResult____h4284 or
	  CASE_theResult__284_BITS_6_TO_0_0b11_1_0b10011_ETC__q18)
  begin
    case (_theResult____h4284[6:0])
      7'b1100011, 7'b1100111, 7'b1101111:
	  IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d916 = 3'd0;
      default: IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d916 =
		   ((_theResult____h4284[6:0] == 7'b0110011 ||
		     _theResult____h4284[6:0] == 7'b0111011) &&
		    _theResult____h4284[31:25] == 7'b0000001) ?
		     3'd3 :
		     CASE_theResult__284_BITS_6_TO_0_0b11_1_0b10011_ETC__q18;
    endcase
  end
  always@(_theResult____h4284 or
	  _theResult_____1_fst__h13405 or
	  rd_val___1__h13373 or
	  rd_val___1__h13380 or rd_val___1__h13387 or rd_val___1__h13394)
  begin
    case (_theResult____h4284[14:12])
      3'b010: _theResult_____1_fst__h13377 = rd_val___1__h13373;
      3'b011: _theResult_____1_fst__h13377 = rd_val___1__h13380;
      3'b100: _theResult_____1_fst__h13377 = rd_val___1__h13387;
      3'b110: _theResult_____1_fst__h13377 = rd_val___1__h13394;
      default: _theResult_____1_fst__h13377 = _theResult_____1_fst__h13405;
    endcase
  end
  always@(_theResult____h4284 or
	  rs1_val_bypassed__h4292 or
	  alu_outputs___1_addr__h12624 or
	  alu_outputs___1_addr__h12645 or
	  alu_outputs___1_addr__h12325 or
	  alu_outputs___1_addr__h12372 or alu_outputs___1_addr__h12346)
  begin
    case (_theResult____h4284[6:0])
      7'b0000011:
	  x_out_data_to_stage2_addr__h12201 = alu_outputs___1_addr__h12624;
      7'b0100011:
	  x_out_data_to_stage2_addr__h12201 = alu_outputs___1_addr__h12645;
      7'b1100011:
	  x_out_data_to_stage2_addr__h12201 = alu_outputs___1_addr__h12325;
      7'b1100111:
	  x_out_data_to_stage2_addr__h12201 = alu_outputs___1_addr__h12372;
      7'b1101111:
	  x_out_data_to_stage2_addr__h12201 = alu_outputs___1_addr__h12346;
      default: x_out_data_to_stage2_addr__h12201 = rs1_val_bypassed__h4292;
    endcase
  end
  always@(_theResult____h4284 or imem_rg_pc or data_to_stage2_addr__h12193)
  begin
    case (_theResult____h4284[6:0])
      7'b1100111, 7'b1101111:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1151 =
	      data_to_stage2_addr__h12193;
      default: IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1151 =
		   (_theResult____h4284[6:0] == 7'b1110011 &&
		    _theResult____h4284[14:12] == 3'b0 &&
		    _theResult____h4284[11:7] == 5'd0 &&
		    _theResult____h4284[19:15] == 5'd0 &&
		    _theResult____h4284[31:20] == 12'b000000000001) ?
		     imem_rg_pc :
		     64'd0;
    endcase
  end
  always@(_theResult____h4284 or
	  alu_outputs___1_val1__h12906 or
	  alu_outputs___1_val1__h12525 or
	  alu_outputs___1_val1__h12603 or
	  alu_outputs___1_val1__h12548 or
	  alu_outputs___1_val1__h12587 or
	  alu_outputs___1_val1__h12571 or alu_outputs___1_val1__h12885)
  begin
    case (_theResult____h4284[6:0])
      7'b0010011, 7'b0110011:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1063 =
	      alu_outputs___1_val1__h12525;
      7'b0010111:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1063 =
	      alu_outputs___1_val1__h12603;
      7'b0011011:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1063 =
	      alu_outputs___1_val1__h12548;
      7'b0110111:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1063 =
	      alu_outputs___1_val1__h12587;
      7'b0111011:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1063 =
	      alu_outputs___1_val1__h12571;
      7'b1110011:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1063 =
	      alu_outputs___1_val1__h12885;
      default: IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1063 =
		   alu_outputs___1_val1__h12906;
    endcase
  end
  always@(_theResult____h4284 or
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1065 or
	  IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_ETC___d962)
  begin
    case (_theResult____h4284[6:0])
      7'b1100111, 7'b1101111:
	  x_out_data_to_stage2_val1__h12202 =
	      IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_ETC___d962;
      default: x_out_data_to_stage2_val1__h12202 =
		   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1065;
    endcase
  end
  always@(x_out_data_to_stage2_instr__h12198 or
	  x_out_data_to_stage2_val1__h12202)
  begin
    case (x_out_data_to_stage2_instr__h12198[14:12])
      3'b010, 3'b011: rs1_val__h18876 = x_out_data_to_stage2_val1__h12202;
      default: rs1_val__h18876 =
		   { 59'd0, x_out_data_to_stage2_instr__h12198[19:15] };
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_logdelay <= `BSV_ASSIGNMENT_DELAY 64'd0;
	cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	rg_cur_priv <= `BSV_ASSIGNMENT_DELAY 2'b11;
	rg_state <= `BSV_ASSIGNMENT_DELAY 4'd0;
	stage1_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stage2_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stage2_rg_resetting <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stage3_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (cfg_logdelay$EN)
	  cfg_logdelay <= `BSV_ASSIGNMENT_DELAY cfg_logdelay$D_IN;
	if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (rg_cur_priv$EN)
	  rg_cur_priv <= `BSV_ASSIGNMENT_DELAY rg_cur_priv$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
	if (stage1_rg_full$EN)
	  stage1_rg_full <= `BSV_ASSIGNMENT_DELAY stage1_rg_full$D_IN;
	if (stage2_rg_full$EN)
	  stage2_rg_full <= `BSV_ASSIGNMENT_DELAY stage2_rg_full$D_IN;
	if (stage2_rg_resetting$EN)
	  stage2_rg_resetting <= `BSV_ASSIGNMENT_DELAY
	      stage2_rg_resetting$D_IN;
	if (stage3_rg_full$EN)
	  stage3_rg_full <= `BSV_ASSIGNMENT_DELAY stage3_rg_full$D_IN;
      end
    if (imem_rg_f3$EN) imem_rg_f3 <= `BSV_ASSIGNMENT_DELAY imem_rg_f3$D_IN;
    if (imem_rg_instr_15_0$EN)
      imem_rg_instr_15_0 <= `BSV_ASSIGNMENT_DELAY imem_rg_instr_15_0$D_IN;
    if (imem_rg_mstatus_MXR$EN)
      imem_rg_mstatus_MXR <= `BSV_ASSIGNMENT_DELAY imem_rg_mstatus_MXR$D_IN;
    if (imem_rg_pc$EN) imem_rg_pc <= `BSV_ASSIGNMENT_DELAY imem_rg_pc$D_IN;
    if (imem_rg_priv$EN)
      imem_rg_priv <= `BSV_ASSIGNMENT_DELAY imem_rg_priv$D_IN;
    if (imem_rg_satp$EN)
      imem_rg_satp <= `BSV_ASSIGNMENT_DELAY imem_rg_satp$D_IN;
    if (imem_rg_sstatus_SUM$EN)
      imem_rg_sstatus_SUM <= `BSV_ASSIGNMENT_DELAY imem_rg_sstatus_SUM$D_IN;
    if (imem_rg_tval$EN)
      imem_rg_tval <= `BSV_ASSIGNMENT_DELAY imem_rg_tval$D_IN;
    if (rg_mstatus_MXR$EN)
      rg_mstatus_MXR <= `BSV_ASSIGNMENT_DELAY rg_mstatus_MXR$D_IN;
    if (rg_next_pc$EN) rg_next_pc <= `BSV_ASSIGNMENT_DELAY rg_next_pc$D_IN;
    if (rg_sstatus_SUM$EN)
      rg_sstatus_SUM <= `BSV_ASSIGNMENT_DELAY rg_sstatus_SUM$D_IN;
    if (rg_start_CPI_cycles$EN)
      rg_start_CPI_cycles <= `BSV_ASSIGNMENT_DELAY rg_start_CPI_cycles$D_IN;
    if (rg_start_CPI_instrs$EN)
      rg_start_CPI_instrs <= `BSV_ASSIGNMENT_DELAY rg_start_CPI_instrs$D_IN;
    if (stage2_rg_stage2$EN)
      stage2_rg_stage2 <= `BSV_ASSIGNMENT_DELAY stage2_rg_stage2$D_IN;
    if (stage3_rg_stage3$EN)
      stage3_rg_stage3 <= `BSV_ASSIGNMENT_DELAY stage3_rg_stage3$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_logdelay = 64'hAAAAAAAAAAAAAAAA;
    cfg_verbosity = 4'hA;
    imem_rg_f3 = 3'h2;
    imem_rg_instr_15_0 = 16'hAAAA;
    imem_rg_mstatus_MXR = 1'h0;
    imem_rg_pc = 64'hAAAAAAAAAAAAAAAA;
    imem_rg_priv = 2'h2;
    imem_rg_satp = 64'hAAAAAAAAAAAAAAAA;
    imem_rg_sstatus_SUM = 1'h0;
    imem_rg_tval = 64'hAAAAAAAAAAAAAAAA;
    rg_cur_priv = 2'h2;
    rg_mstatus_MXR = 1'h0;
    rg_next_pc = 64'hAAAAAAAAAAAAAAAA;
    rg_sstatus_SUM = 1'h0;
    rg_start_CPI_cycles = 64'hAAAAAAAAAAAAAAAA;
    rg_start_CPI_instrs = 64'hAAAAAAAAAAAAAAAA;
    rg_state = 4'hA;
    stage1_rg_full = 1'h0;
    stage2_rg_full = 1'h0;
    stage2_rg_resetting = 1'h0;
    stage2_rg_stage2 =
	298'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    stage3_rg_full = 1'h0;
    stage3_rg_stage3 = 168'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("%0d: Pipeline State:  minstret:%0d  cur_priv:%0d  mstatus:%0x",
		 csr_regfile$read_csr_mcycle,
		 csr_regfile$read_csr_minstret,
		 rg_cur_priv,
		 csr_regfile$read_mstatus);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write("MStatus{",
	       "sd:%0d",
	       csr_regfile$read_mstatus[14:13] == 2'h3 ||
	       csr_regfile$read_mstatus[16:15] == 2'h3);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && csr_regfile$read_misa[27:26] == 2'd2)
	$write(" sxl:%0d uxl:%0d", sxl__h4700, uxl__h4701);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && csr_regfile$read_misa[27:26] != 2'd2)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" tsr:%0d", csr_regfile$read_mstatus[22]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" tw:%0d", csr_regfile$read_mstatus[21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" tvm:%0d", csr_regfile$read_mstatus[20]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" mxr:%0d", csr_regfile$read_mstatus[19]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" sum:%0d", csr_regfile$read_mstatus[18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" mprv:%0d", csr_regfile$read_mstatus[17]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" xs:%0d", csr_regfile$read_mstatus[16:15]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" fs:%0d", csr_regfile$read_mstatus[14:13]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" mpp:%0d", csr_regfile$read_mstatus[12:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" spp:%0d", csr_regfile$read_mstatus[8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" pies:%0d_%0d%0d",
	       csr_regfile$read_mstatus[7],
	       csr_regfile$read_mstatus[5],
	       csr_regfile$read_mstatus[4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" ies:%0d_%0d%0d",
	       csr_regfile$read_mstatus[3],
	       csr_regfile$read_mstatus[1],
	       csr_regfile$read_mstatus[0]);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("    Stage3: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Output_Stage3");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage3_rg_full) $write(" PIPE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage3_rg_full) $write(" EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        Bypass  to Stage1: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Bypass {");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  (!stage3_rg_full || !stage3_rg_stage3[69]))
	$write("Rd -");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage3_rg_full && stage3_rg_stage3[69])
	$write("Rd %0d ",
	       stage3_rg_stage3[68:64],
	       "rd_val:%h",
	       stage3_rg_stage3[63:0]);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("    Stage2: pc 0x%08h instr 0x%08h priv %0d",
		 stage2_rg_stage2[295:232],
		 stage2_rg_stage2[231:200],
		 stage2_rg_stage2[297:296]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd0)
	$write("Output_Stage2", " EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd1)
	$write("Output_Stage2", " BUSY: pc:%0h", stage2_rg_stage2[295:232]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd3)
	$write("Output_Stage2", " NONPIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd0 &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd1 &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd3)
	$write("Output_Stage2", " PIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd0 &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd1 &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd3)
	$write("data_to_Stage3 {pc:%h  instr:%h  priv:%0d\n",
	       stage2_rg_stage2[295:232],
	       stage2_rg_stage2[231:200],
	       stage2_rg_stage2[297:296]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd0 &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd1 &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd3)
	$write("        rd_valid:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd0 &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd1 &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd3 &&
	  stage2_rg_stage2[199:197] != 3'd0 &&
	  IF_stage2_rg_stage2_2_BITS_199_TO_197_3_EQ_1_5_ETC___d136)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd0 &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd1 &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd3 &&
	  (stage2_rg_stage2[199:197] == 3'd0 ||
	   IF_stage2_rg_stage2_2_BITS_199_TO_197_3_EQ_1_5_ETC___d145))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd0 &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd1 &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd3)
	$write("  grd:%0d  rd_val:%h\n",
	       x_out_data_to_stage3_rd__h5643,
	       x_out_data_to_stage3_rd_val__h5644);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd3)
	$write("Trap_Info { ", "epc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd0 &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd1 &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd3)
	$write("'h%h", stage2_rg_stage2[295:232]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd0 &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd1 &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd3)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd0 &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd1 &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd3)
	$write("'h%h", near_mem$dmem_exc_code);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd0 &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd1 &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd3)
	$write(", ", "tval: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd0 &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd1 &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd3)
	$write("'h%h", stage2_rg_stage2[191:128], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd0 &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd1 &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd3)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd0 &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd1 &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd3)
	$write("Trap_Info { ", "epc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd0 &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd1 &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd3)
	$write("'h%h", stage2_rg_stage2[295:232]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd0 &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd1 &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd3)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd0 &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd1 &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd3)
	$write("'h%h", near_mem$dmem_exc_code);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd0 &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd1 &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd3)
	$write(", ", "tval: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd0 &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd1 &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd3)
	$write("'h%h", stage2_rg_stage2[191:128], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd0 &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd1 &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        Bypass  to Stage1: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Bypass {");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d183 == 2'd0)
	$write("Rd -");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d183 != 2'd0)
	$write("Rd %0d ", x_out_bypass_rd__h5994);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d183 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d183 == 2'd1)
	$write("-");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d183 != 2'd0 &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d183 != 2'd1)
	$write("rd_val:%h", x_out_bypass_rd_val__h5995);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("    Stage1: pc 0x%08h instr 0x%08h priv %0d",
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h12198,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_99_OR_NOT_near_mem_ime_ETC___d504)
	$write("Output_Stage1", " BUSY pc:%h", imem_rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d703)
	$write("Output_Stage1", " NONPIPE: pc:%h", imem_rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d770)
	$write("Output_Stage1");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full)
	$write("Output_Stage1", " EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_99_OR_NOT_near_mem_ime_ETC___d504)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d703)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d770)
	$write(" PIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_99_OR_NOT_near_mem_ime_ETC___d504)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d703)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d519 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d765 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d767) &&
	  IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 == 4'd0)
	$write("CONTROL_STRAIGHT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d519 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d765 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d767) &&
	  IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 == 4'd1)
	$write("CONTROL_BRANCH");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d519 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d765 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d767) &&
	  IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 == 4'd2)
	$write("CONTROL_CSRR_W");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d519 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d765 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d767) &&
	  IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 == 4'd3)
	$write("CONTROL_CSRR_S_or_C");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d519 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d765 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d767) &&
	  IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 == 4'd4)
	$write("CONTROL_FENCE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d519 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d765 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d767) &&
	  IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 == 4'd5)
	$write("CONTROL_FENCE_I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d519 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d765 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d767) &&
	  IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 == 4'd6)
	$write("CONTROL_SFENCE_VMA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d519 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d765 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d767) &&
	  IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 == 4'd7)
	$write("CONTROL_MRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d519 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d765 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d767) &&
	  IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 == 4'd8)
	$write("CONTROL_SRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d519 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d765 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d767) &&
	  IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 == 4'd9)
	$write("CONTROL_URET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d519 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d765 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d767) &&
	  IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d833 == 4'd10)
	$write("CONTROL_WFI");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d519 &&
	  NOT_near_mem_imem_exc__20_05_AND_IF_IF_NOT_nea_ETC___d899)
	$write("CONTROL_TRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_99_OR_NOT_near_mem_ime_ETC___d504)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d703)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d770)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_99_OR_NOT_near_mem_ime_ETC___d504)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d703)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d770)
	$write("data_to_Stage 2 {pc:%h  instr:%h  priv:%0d\n",
	       imem_rg_pc,
	       x_out_data_to_stage2_instr__h12198,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_99_OR_NOT_near_mem_ime_ETC___d504)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d703)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d770)
	$write("            op_stage2:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_99_OR_NOT_near_mem_ime_ETC___d504)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d703)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d519 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d765 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d767) &&
	  IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d916 == 3'd0)
	$write("OP_Stage2_ALU");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d519 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d765 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d767) &&
	  IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d916 == 3'd1)
	$write("OP_Stage2_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d519 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d765 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d767) &&
	  IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d916 == 3'd2)
	$write("OP_Stage2_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d519 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d765 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d767) &&
	  IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d916 == 3'd3)
	$write("OP_Stage2_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d519 &&
	  NOT_near_mem_imem_exc__20_05_AND_IF_IF_NOT_nea_ETC___d940)
	$write("OP_Stage2_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_99_OR_NOT_near_mem_ime_ETC___d504)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d703)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d770)
	$write("  rd:%0d\n", x_out_data_to_stage2_rd__h12200);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_99_OR_NOT_near_mem_ime_ETC___d504)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d703)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d770)
	$write("            addr:%h  val1:%h  val2:%h}",
	       x_out_data_to_stage2_addr__h12201,
	       x_out_data_to_stage2_val1__h12202,
	       x_out_data_to_stage2_val2__h12203);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_99_OR_NOT_near_mem_ime_ETC___d504)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d703)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d770)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_99_OR_NOT_near_mem_ime_ETC___d504)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d519 &&
	  near_mem_imem_exc__20_OR_IF_IF_NOT_near_mem_im_ETC___d1076)
	$write("CONTROL_STRAIGHT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d519 &&
	  near_mem_imem_exc__20_OR_IF_IF_NOT_near_mem_im_ETC___d1079)
	$write("CONTROL_BRANCH");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d519 &&
	  near_mem_imem_exc__20_OR_IF_IF_NOT_near_mem_im_ETC___d1082)
	$write("CONTROL_CSRR_W");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d519 &&
	  near_mem_imem_exc__20_OR_IF_IF_NOT_near_mem_im_ETC___d1085)
	$write("CONTROL_CSRR_S_or_C");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d519 &&
	  near_mem_imem_exc__20_OR_IF_IF_NOT_near_mem_im_ETC___d1088)
	$write("CONTROL_FENCE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d519 &&
	  near_mem_imem_exc__20_OR_IF_IF_NOT_near_mem_im_ETC___d1091)
	$write("CONTROL_FENCE_I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d519 &&
	  near_mem_imem_exc__20_OR_IF_IF_NOT_near_mem_im_ETC___d1094)
	$write("CONTROL_SFENCE_VMA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d519 &&
	  near_mem_imem_exc__20_OR_IF_IF_NOT_near_mem_im_ETC___d1097)
	$write("CONTROL_MRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d519 &&
	  near_mem_imem_exc__20_OR_IF_IF_NOT_near_mem_im_ETC___d1100)
	$write("CONTROL_SRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d519 &&
	  near_mem_imem_exc__20_OR_IF_IF_NOT_near_mem_im_ETC___d1103)
	$write("CONTROL_URET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d519 &&
	  near_mem_imem_exc__20_OR_IF_IF_NOT_near_mem_im_ETC___d1106)
	$write("CONTROL_WFI");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d519 &&
	  near_mem_imem_exc__20_OR_IF_IF_NOT_near_mem_im_ETC___d1109)
	$write("CONTROL_TRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d770)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_99_OR_NOT_near_mem_ime_ETC___d504)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d703)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d770)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_99_OR_NOT_near_mem_ime_ETC___d504)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d703)
	$write("Trap_Info { ", "epc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d770)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_99_OR_NOT_near_mem_ime_ETC___d504)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d703)
	$write("'h%h", imem_rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d770)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_99_OR_NOT_near_mem_ime_ETC___d504)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d703)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d770)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_99_OR_NOT_near_mem_ime_ETC___d504)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d703)
	$write("'h%h", x_out_trap_info_exc_code__h14092);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d770)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_99_OR_NOT_near_mem_ime_ETC___d504)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d703)
	$write(", ", "tval: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d770)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_99_OR_NOT_near_mem_ime_ETC___d504)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d703)
	$write("'h%h", value__h14143, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d770)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_99_OR_NOT_near_mem_ime_ETC___d504)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d519)
	$write(" next_pc 0x%08h", x_out_next_pc__h12170);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $display("----------------");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete)
	$display("%0d: CPU.reset_complete", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d41)
	$display("    CPU_Stage1.enq: 0x%08h", soc_map$m_pc_reset_value);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete)
	$display("    CPU restart at PC = 0x%0h", soc_map$m_pc_reset_value);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage2_nonpipe &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d41)
	$display("%0d: CPU.rl_stage2_nonpipe", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage2_nonpipe && cur_verbosity__h2989 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 stage2_rg_stage2[295:232],
		 stage2_rg_stage2[231:200],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage2_nonpipe && cur_verbosity__h2989 != 4'd0)
	$display("    mcause:0x%0h  epc 0x%0h  tval:0x%0h  new pc 0x%0h, new mstatus 0x%0h",
		 csr_regfile$csr_trap_actions[65:2],
		 stage2_rg_stage2[295:232],
		 stage2_rg_stage2[191:128],
		 csr_regfile$csr_trap_actions[193:130],
		 csr_regfile$csr_trap_actions[129:66]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d41)
	$display("%0d: CPU.rl_stage1_CSRR_W", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W && csr_regfile$access_permitted_1 &&
	  cur_verbosity__h2989 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h12198,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W && csr_regfile$access_permitted_1 &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d41)
	$display("    S1: write CSRRW/CSRRWI Rs1 %0d Rs1_val 0x%0h csr 0x%0h csr_val 0x%0h Rd %0d",
		 x_out_data_to_stage2_instr__h12198[19:15],
		 rs1_val__h18386,
		 x_out_data_to_stage2_instr__h12198[31:20],
		 csr_regfile$read_csr[63:0],
		 x_out_data_to_stage2_instr__h12198[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W && !csr_regfile$access_permitted_1 &&
	  cur_verbosity__h2989 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h12198,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W && !csr_regfile$access_permitted_1 &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d41)
	$display("    rl_stage1_CSRR_W: Trap on CSR permissions: Rs1 %0d Rs1_val 0x%0h csr 0x%0h Rd %0d",
		 x_out_data_to_stage2_instr__h12198[19:15],
		 rs1_val__h18386,
		 x_out_data_to_stage2_instr__h12198[31:20],
		 x_out_data_to_stage2_instr__h12198[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d41)
	$display("%0d: CPU.rl_stage1_CSRR_S_or_C",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	  csr_regfile$access_permitted_2 &&
	  cur_verbosity__h2989 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h12198,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	  csr_regfile$access_permitted_2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d41)
	$display("    S1: write CSRR_S_or_C: Rs1 %0d Rs1_val 0x%0h csr 0x%0h csr_val 0x%0h Rd %0d",
		 x_out_data_to_stage2_instr__h12198[19:15],
		 rs1_val__h18876,
		 x_out_data_to_stage2_instr__h12198[31:20],
		 csr_regfile$read_csr[63:0],
		 x_out_data_to_stage2_instr__h12198[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	  !csr_regfile$access_permitted_2 &&
	  cur_verbosity__h2989 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h12198,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	  !csr_regfile$access_permitted_2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d41)
	$display("    rl_stage1_CSRR_S_or_C: Trap on CSR permissions: Rs1 %0d Rs1_val 0x%0h csr 0x%0h Rd %0d",
		 x_out_data_to_stage2_instr__h12198[19:15],
		 rs1_val__h18876,
		 x_out_data_to_stage2_instr__h12198[31:20],
		 x_out_data_to_stage2_instr__h12198[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d41)
	$display("    CPU_Stage1.enq: 0x%08h", x_out_next_pc__h12170);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d41)
	$display("%0d: rl_stage1_restart_after_csrrx: minstret:%0d  pc:%0x  cur_priv:%0d",
		 csr_regfile$read_csr_mcycle,
		 csr_regfile$read_csr_minstret,
		 x_out_next_pc__h12170,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d41)
	$display("%0d: CPU.rl_stage1_xRET", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET && cur_verbosity__h2989 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h12198,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET && cur_verbosity__h2989 != 4'd0)
	$display("    xRET: next_pc:0x%0h  new mstatus:0x%0h  new priv:%0d",
		 csr_regfile$csr_ret_actions[129:66],
		 csr_regfile$csr_ret_actions[63:0],
		 csr_regfile$csr_ret_actions[65:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d41)
	$display("%0d: CPU.rl_stage1_FENCE_I", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE_I && cur_verbosity__h2989 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h12198,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d41)
	$display("%0d: CPU.rl_stage1_FENCE_I", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d41)
	$display("%0d: CPU.rl_finish_FENCE_I", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d41)
	$display("    CPU_Stage1.enq: 0x%08h", rg_next_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d41)
	$display("    CPU.rl_finish_FENCE_I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d41)
	$display("%0d: CPU.rl_stage1_FENCE", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE && cur_verbosity__h2989 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h12198,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d41)
	$display("%0d: CPU.rl_stage1_FENCE", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d41)
	$display("%0d: CPU.rl_finish_FENCE", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d41)
	$display("    CPU_Stage1.enq: 0x%08h", rg_next_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d41)
	$display("    CPU.rl_finish_FENCE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d41)
	$display("%0d: CPU.rl_stage1_SFENCE_VMA",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_SFENCE_VMA && cur_verbosity__h2989 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h12198,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d41)
	$display("%0d: CPU.rl_stage1_SFENCE_VMA",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d41)
	$display("%0d: CPU.rl_finish_SFENCE_VMA",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d41)
	$display("    CPU_Stage1.enq: 0x%08h", rg_next_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d41)
	$display("    CPU.rl_finish_SFENCE_VMA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_WFI &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d41)
	$display("%0d: CPU.rl_stage1_WFI", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_WFI && cur_verbosity__h2989 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h12198,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_WFI &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d41)
	$display("    CPU.rl_stage1_WFI");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d41)
	$display("%0d: CPU.rl_WFI_resume", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume && cur_verbosity__h2989 != 4'd0)
	$display("    WFI resume");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d41)
	$display("    CPU_Stage1.enq: 0x%08h", rg_next_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_from_WFI &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d41)
	$display("%0d: CPU.rl_reset_from_WFI", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d41)
	$display("%0d: CPU.rl_stage1_trap", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d1392)
	$display("%0d: CPU.rl_stage1_trap: Tight infinite trap loop: pc 0x%0x instr 0x%08x",
		 csr_regfile$read_csr_mcycle,
		 csr_regfile$csr_trap_actions[193:130],
		 x_out_data_to_stage2_instr__h12198);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d1392)
	$display("CPI: %0d.%0d = (%0d/%0d) since last 'continue'",
		 cpi__h23442,
		 cpifrac__h23443,
		 delta_CPI_cycles__h23438,
		 _theResult____h23440);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d1392)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap && cur_verbosity__h2989 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h12198,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap && cur_verbosity__h2989 != 4'd0)
	$display("%0d: CPU.rl_stage1_trap: priv:%0d  mcause:0x%0h  epc:0x%0h",
		 csr_regfile$read_csr_mcycle,
		 rg_cur_priv,
		 csr_regfile$csr_trap_actions[65:2],
		 imem_rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap && cur_verbosity__h2989 != 4'd0)
	$display("    tval:0x%0h  new pc:0x%0h  new mstatus:0x%0h",
		 value__h14143,
		 csr_regfile$csr_trap_actions[193:130],
		 csr_regfile$csr_trap_actions[129:66]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap_fetch &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d41)
	$display("    CPU_Stage1.enq: 0x%08h", rg_next_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_interrupt &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d41)
	$display("%0d: CPU.rl_stage1_interrupt", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_interrupt && cur_verbosity__h2989 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h12198,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_interrupt && cur_verbosity__h2989 != 4'd0)
	$display("%0d: CPU.rl_stage1_interrupt: epc 0x%0h  next PC 0x%0h  new_priv %0d  new mstatus 0x%0h",
		 csr_regfile$read_csr_mcycle,
		 imem_rg_pc,
		 csr_regfile$csr_trap_actions[193:130],
		 csr_regfile$csr_trap_actions[1:0],
		 csr_regfile$csr_trap_actions[129:66]);
    if (WILL_FIRE_RL_imem_rl_assert_fail)
      $display("ERROR: CPU_Fetch_C: imem32.is_i32_not_i16 is False");
    if (WILL_FIRE_RL_imem_rl_assert_fail) $finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d41)
	$display("%0d: CPU.rl_pipe", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe && stage3_rg_full && stage3_rg_stage3[69] &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d41)
	$display("    S3.fa_deq: write GRd 0x%0h, rd_val 0x%0h",
		 stage3_rg_stage3[68:64],
		 stage3_rg_stage3[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d41)
	$write("    S3.enq: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d41)
	$write("data_to_Stage3 {pc:%h  instr:%h  priv:%0d\n",
	       stage2_rg_stage2[295:232],
	       stage2_rg_stage2[231:200],
	       stage2_rg_stage2[297:296]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d41)
	$write("        rd_valid:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d41 &&
	  stage2_rg_stage2[199:197] != 3'd0 &&
	  IF_stage2_rg_stage2_2_BITS_199_TO_197_3_EQ_1_5_ETC___d136)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d41 &&
	  (stage2_rg_stage2[199:197] == 3'd0 ||
	   IF_stage2_rg_stage2_2_BITS_199_TO_197_3_EQ_1_5_ETC___d145))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d41)
	$write("  grd:%0d  rd_val:%h\n",
	       x_out_data_to_stage3_rd__h5643,
	       x_out_data_to_stage3_rd_val__h5644);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d41)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_1_THEN_IF_stage2_rg_stage2_2_ETC___d122 == 2'd2 &&
	  cur_verbosity__h2989 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 stage2_rg_stage2[295:232],
		 stage2_rg_stage2[231:200],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1256 &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d41)
	$display("    CPU_Stage2.enq (Data_Stage1_to_Stage2)");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1235 &&
	  NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1276 &&
	  NOT_IF_csr_regfile_read_csr_minstret__5_ULT_cf_ETC___d41)
	$display("    CPU_Stage1.enq: 0x%08h", x_out_next_pc__h12170);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$write("CPU: Bluespec  RISC-V  Piccolo  v3.0");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start) $display(" (RV64)");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$display("Copyright (c) 2016-2019 Bluespec, Inc. All Rights Reserved.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start && cur_verbosity__h2989 != 4'd0)
	$display("%0d: CPU.rl_reset_start", csr_regfile$read_csr_mcycle);
  end
  // synopsys translate_on
endmodule  // mkCPU

