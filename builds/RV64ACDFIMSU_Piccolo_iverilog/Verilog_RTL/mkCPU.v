//
// Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
//
// On Thu Jan 10 22:37:04 EST 2019
//
//
// Ports:
// Name                         I/O  size props
// RDY_hart0_server_reset_request_put  O     1 reg
// RDY_hart0_server_reset_response_get  O     1 reg
// imem_master_awvalid            O     1
// imem_master_awaddr             O    64 reg
// imem_master_awprot             O     3 reg
// imem_master_wvalid             O     1
// imem_master_wdata              O    64 reg
// imem_master_wstrb              O     8 reg
// imem_master_bready             O     1
// imem_master_arvalid            O     1
// imem_master_araddr             O    64 reg
// imem_master_arprot             O     3 reg
// imem_master_rready             O     1
// dmem_master_awvalid            O     1
// dmem_master_awaddr             O    64 reg
// dmem_master_awprot             O     3 reg
// dmem_master_wvalid             O     1
// dmem_master_wdata              O    64 reg
// dmem_master_wstrb              O     8 reg
// dmem_master_bready             O     1
// dmem_master_arvalid            O     1
// dmem_master_araddr             O    64 reg
// dmem_master_arprot             O     3 reg
// dmem_master_rready             O     1
// near_mem_slave_awready         O     1 const
// near_mem_slave_wready          O     1 const
// near_mem_slave_bvalid          O     1 const
// near_mem_slave_bresp           O     2 const
// near_mem_slave_arready         O     1 const
// near_mem_slave_rvalid          O     1 const
// near_mem_slave_rresp           O     2 const
// near_mem_slave_rdata           O    64 const
// RDY_external_interrupt_req     O     1 const
// RDY_set_verbosity              O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// imem_master_awready            I     1
// imem_master_wready             I     1
// imem_master_bvalid             I     1
// imem_master_bresp              I     2 reg
// imem_master_arready            I     1
// imem_master_rvalid             I     1
// imem_master_rresp              I     2 reg
// imem_master_rdata              I    64 reg
// dmem_master_awready            I     1
// dmem_master_wready             I     1
// dmem_master_bvalid             I     1
// dmem_master_bresp              I     2 reg
// dmem_master_arready            I     1
// dmem_master_rvalid             I     1
// dmem_master_rresp              I     2 reg
// dmem_master_rdata              I    64 reg
// near_mem_slave_awvalid         I     1 unused
// near_mem_slave_awaddr          I    64 unused
// near_mem_slave_awprot          I     3 unused
// near_mem_slave_wvalid          I     1 unused
// near_mem_slave_wdata           I    64 unused
// near_mem_slave_wstrb           I     8 unused
// near_mem_slave_bready          I     1 unused
// near_mem_slave_arvalid         I     1 unused
// near_mem_slave_araddr          I    64 unused
// near_mem_slave_arprot          I     3 unused
// near_mem_slave_rready          I     1 unused
// external_interrupt_req_set_not_clear  I     1
// set_verbosity_verbosity        I     4 reg
// set_verbosity_logdelay         I    64 reg
// EN_hart0_server_reset_request_put  I     1
// EN_hart0_server_reset_response_get  I     1
// EN_external_interrupt_req      I     1
// EN_set_verbosity               I     1
//
// Combinational paths from inputs to outputs:
//   (imem_master_awready, imem_master_wready) -> imem_master_bready
//   (imem_master_awready,
//    imem_master_wready,
//    imem_master_arready,
//    dmem_master_awready,
//    dmem_master_wready) -> imem_master_rready
//   (imem_master_awready,
//    imem_master_wready,
//    dmem_master_awready,
//    dmem_master_wready,
//    dmem_master_arready) -> dmem_master_rready
//   (dmem_master_awready, dmem_master_wready) -> dmem_master_bready
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCPU(CLK,
	     RST_N,

	     EN_hart0_server_reset_request_put,
	     RDY_hart0_server_reset_request_put,

	     EN_hart0_server_reset_response_get,
	     RDY_hart0_server_reset_response_get,

	     imem_master_awvalid,

	     imem_master_awaddr,

	     imem_master_awprot,

	     imem_master_awready,

	     imem_master_wvalid,

	     imem_master_wdata,

	     imem_master_wstrb,

	     imem_master_wready,

	     imem_master_bvalid,
	     imem_master_bresp,

	     imem_master_bready,

	     imem_master_arvalid,

	     imem_master_araddr,

	     imem_master_arprot,

	     imem_master_arready,

	     imem_master_rvalid,
	     imem_master_rresp,
	     imem_master_rdata,

	     imem_master_rready,

	     dmem_master_awvalid,

	     dmem_master_awaddr,

	     dmem_master_awprot,

	     dmem_master_awready,

	     dmem_master_wvalid,

	     dmem_master_wdata,

	     dmem_master_wstrb,

	     dmem_master_wready,

	     dmem_master_bvalid,
	     dmem_master_bresp,

	     dmem_master_bready,

	     dmem_master_arvalid,

	     dmem_master_araddr,

	     dmem_master_arprot,

	     dmem_master_arready,

	     dmem_master_rvalid,
	     dmem_master_rresp,
	     dmem_master_rdata,

	     dmem_master_rready,

	     near_mem_slave_awvalid,
	     near_mem_slave_awaddr,
	     near_mem_slave_awprot,

	     near_mem_slave_awready,

	     near_mem_slave_wvalid,
	     near_mem_slave_wdata,
	     near_mem_slave_wstrb,

	     near_mem_slave_wready,

	     near_mem_slave_bvalid,

	     near_mem_slave_bresp,

	     near_mem_slave_bready,

	     near_mem_slave_arvalid,
	     near_mem_slave_araddr,
	     near_mem_slave_arprot,

	     near_mem_slave_arready,

	     near_mem_slave_rvalid,

	     near_mem_slave_rresp,

	     near_mem_slave_rdata,

	     near_mem_slave_rready,

	     external_interrupt_req_set_not_clear,
	     EN_external_interrupt_req,
	     RDY_external_interrupt_req,

	     set_verbosity_verbosity,
	     set_verbosity_logdelay,
	     EN_set_verbosity,
	     RDY_set_verbosity);
  parameter [63 : 0] pc_reset_value = 64'b0;
  input  CLK;
  input  RST_N;

  // action method hart0_server_reset_request_put
  input  EN_hart0_server_reset_request_put;
  output RDY_hart0_server_reset_request_put;

  // action method hart0_server_reset_response_get
  input  EN_hart0_server_reset_response_get;
  output RDY_hart0_server_reset_response_get;

  // value method imem_master_m_awvalid
  output imem_master_awvalid;

  // value method imem_master_m_awaddr
  output [63 : 0] imem_master_awaddr;

  // value method imem_master_m_awprot
  output [2 : 0] imem_master_awprot;

  // value method imem_master_m_awuser

  // action method imem_master_m_awready
  input  imem_master_awready;

  // value method imem_master_m_wvalid
  output imem_master_wvalid;

  // value method imem_master_m_wdata
  output [63 : 0] imem_master_wdata;

  // value method imem_master_m_wstrb
  output [7 : 0] imem_master_wstrb;

  // action method imem_master_m_wready
  input  imem_master_wready;

  // action method imem_master_m_bvalid
  input  imem_master_bvalid;
  input  [1 : 0] imem_master_bresp;

  // value method imem_master_m_bready
  output imem_master_bready;

  // value method imem_master_m_arvalid
  output imem_master_arvalid;

  // value method imem_master_m_araddr
  output [63 : 0] imem_master_araddr;

  // value method imem_master_m_arprot
  output [2 : 0] imem_master_arprot;

  // value method imem_master_m_aruser

  // action method imem_master_m_arready
  input  imem_master_arready;

  // action method imem_master_m_rvalid
  input  imem_master_rvalid;
  input  [1 : 0] imem_master_rresp;
  input  [63 : 0] imem_master_rdata;

  // value method imem_master_m_rready
  output imem_master_rready;

  // value method dmem_master_m_awvalid
  output dmem_master_awvalid;

  // value method dmem_master_m_awaddr
  output [63 : 0] dmem_master_awaddr;

  // value method dmem_master_m_awprot
  output [2 : 0] dmem_master_awprot;

  // value method dmem_master_m_awuser

  // action method dmem_master_m_awready
  input  dmem_master_awready;

  // value method dmem_master_m_wvalid
  output dmem_master_wvalid;

  // value method dmem_master_m_wdata
  output [63 : 0] dmem_master_wdata;

  // value method dmem_master_m_wstrb
  output [7 : 0] dmem_master_wstrb;

  // action method dmem_master_m_wready
  input  dmem_master_wready;

  // action method dmem_master_m_bvalid
  input  dmem_master_bvalid;
  input  [1 : 0] dmem_master_bresp;

  // value method dmem_master_m_bready
  output dmem_master_bready;

  // value method dmem_master_m_arvalid
  output dmem_master_arvalid;

  // value method dmem_master_m_araddr
  output [63 : 0] dmem_master_araddr;

  // value method dmem_master_m_arprot
  output [2 : 0] dmem_master_arprot;

  // value method dmem_master_m_aruser

  // action method dmem_master_m_arready
  input  dmem_master_arready;

  // action method dmem_master_m_rvalid
  input  dmem_master_rvalid;
  input  [1 : 0] dmem_master_rresp;
  input  [63 : 0] dmem_master_rdata;

  // value method dmem_master_m_rready
  output dmem_master_rready;

  // action method near_mem_slave_m_awvalid
  input  near_mem_slave_awvalid;
  input  [63 : 0] near_mem_slave_awaddr;
  input  [2 : 0] near_mem_slave_awprot;

  // value method near_mem_slave_m_awready
  output near_mem_slave_awready;

  // action method near_mem_slave_m_wvalid
  input  near_mem_slave_wvalid;
  input  [63 : 0] near_mem_slave_wdata;
  input  [7 : 0] near_mem_slave_wstrb;

  // value method near_mem_slave_m_wready
  output near_mem_slave_wready;

  // value method near_mem_slave_m_bvalid
  output near_mem_slave_bvalid;

  // value method near_mem_slave_m_bresp
  output [1 : 0] near_mem_slave_bresp;

  // value method near_mem_slave_m_buser

  // action method near_mem_slave_m_bready
  input  near_mem_slave_bready;

  // action method near_mem_slave_m_arvalid
  input  near_mem_slave_arvalid;
  input  [63 : 0] near_mem_slave_araddr;
  input  [2 : 0] near_mem_slave_arprot;

  // value method near_mem_slave_m_arready
  output near_mem_slave_arready;

  // value method near_mem_slave_m_rvalid
  output near_mem_slave_rvalid;

  // value method near_mem_slave_m_rresp
  output [1 : 0] near_mem_slave_rresp;

  // value method near_mem_slave_m_rdata
  output [63 : 0] near_mem_slave_rdata;

  // value method near_mem_slave_m_ruser

  // action method near_mem_slave_m_rready
  input  near_mem_slave_rready;

  // action method external_interrupt_req
  input  external_interrupt_req_set_not_clear;
  input  EN_external_interrupt_req;
  output RDY_external_interrupt_req;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  [63 : 0] set_verbosity_logdelay;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // signals for module outputs
  wire [63 : 0] dmem_master_araddr,
		dmem_master_awaddr,
		dmem_master_wdata,
		imem_master_araddr,
		imem_master_awaddr,
		imem_master_wdata,
		near_mem_slave_rdata;
  wire [7 : 0] dmem_master_wstrb, imem_master_wstrb;
  wire [2 : 0] dmem_master_arprot,
	       dmem_master_awprot,
	       imem_master_arprot,
	       imem_master_awprot;
  wire [1 : 0] near_mem_slave_bresp, near_mem_slave_rresp;
  wire RDY_external_interrupt_req,
       RDY_hart0_server_reset_request_put,
       RDY_hart0_server_reset_response_get,
       RDY_set_verbosity,
       dmem_master_arvalid,
       dmem_master_awvalid,
       dmem_master_bready,
       dmem_master_rready,
       dmem_master_wvalid,
       imem_master_arvalid,
       imem_master_awvalid,
       imem_master_bready,
       imem_master_rready,
       imem_master_wvalid,
       near_mem_slave_arready,
       near_mem_slave_awready,
       near_mem_slave_bvalid,
       near_mem_slave_rvalid,
       near_mem_slave_wready;

  // register cfg_logdelay
  reg [63 : 0] cfg_logdelay;
  wire [63 : 0] cfg_logdelay$D_IN;
  wire cfg_logdelay$EN;

  // register cfg_verbosity
  reg [3 : 0] cfg_verbosity;
  wire [3 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register imem_rg_f3
  reg [2 : 0] imem_rg_f3;
  wire [2 : 0] imem_rg_f3$D_IN;
  wire imem_rg_f3$EN;

  // register imem_rg_instr_15_0
  reg [15 : 0] imem_rg_instr_15_0;
  wire [15 : 0] imem_rg_instr_15_0$D_IN;
  wire imem_rg_instr_15_0$EN;

  // register imem_rg_mstatus_MXR
  reg imem_rg_mstatus_MXR;
  wire imem_rg_mstatus_MXR$D_IN, imem_rg_mstatus_MXR$EN;

  // register imem_rg_pc
  reg [63 : 0] imem_rg_pc;
  reg [63 : 0] imem_rg_pc$D_IN;
  wire imem_rg_pc$EN;

  // register imem_rg_priv
  reg [1 : 0] imem_rg_priv;
  reg [1 : 0] imem_rg_priv$D_IN;
  wire imem_rg_priv$EN;

  // register imem_rg_satp
  reg [63 : 0] imem_rg_satp;
  wire [63 : 0] imem_rg_satp$D_IN;
  wire imem_rg_satp$EN;

  // register imem_rg_sstatus_SUM
  reg imem_rg_sstatus_SUM;
  wire imem_rg_sstatus_SUM$D_IN, imem_rg_sstatus_SUM$EN;

  // register rg_cur_priv
  reg [1 : 0] rg_cur_priv;
  reg [1 : 0] rg_cur_priv$D_IN;
  wire rg_cur_priv$EN;

  // register rg_halt
  reg rg_halt;
  wire rg_halt$D_IN, rg_halt$EN;

  // register rg_next_pc
  reg [63 : 0] rg_next_pc;
  wire [63 : 0] rg_next_pc$D_IN;
  wire rg_next_pc$EN;

  // register rg_start_CPI_cycles
  reg [63 : 0] rg_start_CPI_cycles;
  wire [63 : 0] rg_start_CPI_cycles$D_IN;
  wire rg_start_CPI_cycles$EN;

  // register rg_start_CPI_instrs
  reg [63 : 0] rg_start_CPI_instrs;
  wire [63 : 0] rg_start_CPI_instrs$D_IN;
  wire rg_start_CPI_instrs$EN;

  // register rg_state
  reg [3 : 0] rg_state;
  reg [3 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // register stage1_rg_full
  reg stage1_rg_full;
  reg stage1_rg_full$D_IN;
  wire stage1_rg_full$EN;

  // register stage2_rg_full
  reg stage2_rg_full;
  reg stage2_rg_full$D_IN;
  wire stage2_rg_full$EN;

  // register stage2_rg_stage2
  reg [365 : 0] stage2_rg_stage2;
  wire [365 : 0] stage2_rg_stage2$D_IN;
  wire stage2_rg_stage2$EN;

  // register stage3_rg_full
  reg stage3_rg_full;
  wire stage3_rg_full$D_IN, stage3_rg_full$EN;

  // register stage3_rg_stage3
  reg [174 : 0] stage3_rg_stage3;
  wire [174 : 0] stage3_rg_stage3$D_IN;
  wire stage3_rg_stage3$EN;

  // ports of submodule csr_regfile
  reg [63 : 0] csr_regfile$csr_trap_actions_xtval;
  reg [3 : 0] csr_regfile$csr_trap_actions_exc_code;
  reg [1 : 0] csr_regfile$csr_ret_actions_from_priv;
  wire [193 : 0] csr_regfile$csr_trap_actions;
  wire [129 : 0] csr_regfile$csr_ret_actions;
  wire [64 : 0] csr_regfile$read_csr;
  wire [63 : 0] csr_regfile$csr_trap_actions_pc,
		csr_regfile$mav_csr_write_word,
		csr_regfile$read_csr_mcycle,
		csr_regfile$read_csr_minstret,
		csr_regfile$read_mstatus,
		csr_regfile$read_satp,
		csr_regfile$read_sstatus;
  wire [27 : 0] csr_regfile$read_misa;
  wire [11 : 0] csr_regfile$access_permitted_1_csr_addr,
		csr_regfile$access_permitted_2_csr_addr,
		csr_regfile$csr_counter_read_fault_csr_addr,
		csr_regfile$mav_csr_write_csr_addr,
		csr_regfile$mav_read_csr_csr_addr,
		csr_regfile$read_csr_csr_addr,
		csr_regfile$read_csr_port2_csr_addr;
  wire [4 : 0] csr_regfile$interrupt_pending,
	       csr_regfile$update_fcsr_fflags_flags;
  wire [2 : 0] csr_regfile$read_frm;
  wire [1 : 0] csr_regfile$access_permitted_1_priv,
	       csr_regfile$access_permitted_2_priv,
	       csr_regfile$csr_counter_read_fault_priv,
	       csr_regfile$csr_trap_actions_from_priv,
	       csr_regfile$interrupt_pending_cur_priv;
  wire csr_regfile$EN_csr_minstret_incr,
       csr_regfile$EN_csr_ret_actions,
       csr_regfile$EN_csr_trap_actions,
       csr_regfile$EN_debug,
       csr_regfile$EN_external_interrupt_req,
       csr_regfile$EN_mav_csr_write,
       csr_regfile$EN_mav_read_csr,
       csr_regfile$EN_server_reset_request_put,
       csr_regfile$EN_server_reset_response_get,
       csr_regfile$EN_software_interrupt_req,
       csr_regfile$EN_timer_interrupt_req,
       csr_regfile$EN_update_fcsr_fflags,
       csr_regfile$RDY_server_reset_request_put,
       csr_regfile$RDY_server_reset_response_get,
       csr_regfile$access_permitted_1,
       csr_regfile$access_permitted_1_read_not_write,
       csr_regfile$access_permitted_2,
       csr_regfile$access_permitted_2_read_not_write,
       csr_regfile$csr_trap_actions_interrupt,
       csr_regfile$external_interrupt_req_set_not_clear,
       csr_regfile$software_interrupt_req_set_not_clear,
       csr_regfile$timer_interrupt_req_set_not_clear,
       csr_regfile$wfi_resume;

  // ports of submodule f_reset_reqs
  wire f_reset_reqs$CLR,
       f_reset_reqs$DEQ,
       f_reset_reqs$EMPTY_N,
       f_reset_reqs$ENQ,
       f_reset_reqs$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule fpr_regfile
  wire [63 : 0] fpr_regfile$read_rs1,
		fpr_regfile$read_rs2,
		fpr_regfile$read_rs3,
		fpr_regfile$write_rd_rd_val;
  wire [4 : 0] fpr_regfile$read_rs1_port2_rs1,
	       fpr_regfile$read_rs1_rs1,
	       fpr_regfile$read_rs2_rs2,
	       fpr_regfile$read_rs3_rs3,
	       fpr_regfile$write_rd_rd;
  wire fpr_regfile$EN_server_reset_request_put,
       fpr_regfile$EN_server_reset_response_get,
       fpr_regfile$EN_write_rd,
       fpr_regfile$RDY_server_reset_request_put,
       fpr_regfile$RDY_server_reset_response_get;

  // ports of submodule gpr_regfile
  wire [63 : 0] gpr_regfile$read_rs1,
		gpr_regfile$read_rs2,
		gpr_regfile$write_rd_rd_val;
  wire [4 : 0] gpr_regfile$read_rs1_port2_rs1,
	       gpr_regfile$read_rs1_rs1,
	       gpr_regfile$read_rs2_rs2,
	       gpr_regfile$write_rd_rd;
  wire gpr_regfile$EN_server_reset_request_put,
       gpr_regfile$EN_server_reset_response_get,
       gpr_regfile$EN_write_rd,
       gpr_regfile$RDY_server_reset_request_put,
       gpr_regfile$RDY_server_reset_response_get;

  // ports of submodule near_mem
  reg [63 : 0] near_mem$imem_req_addr;
  reg [1 : 0] near_mem$dmem_req_op, near_mem$imem_req_priv;
  reg near_mem$imem_req_mstatus_MXR, near_mem$imem_req_sstatus_SUM;
  wire [63 : 0] near_mem$dmem_master_araddr,
		near_mem$dmem_master_awaddr,
		near_mem$dmem_master_rdata,
		near_mem$dmem_master_wdata,
		near_mem$dmem_req_addr,
		near_mem$dmem_req_satp,
		near_mem$dmem_req_store_value,
		near_mem$dmem_word64,
		near_mem$imem_master_araddr,
		near_mem$imem_master_awaddr,
		near_mem$imem_master_rdata,
		near_mem$imem_master_wdata,
		near_mem$imem_pc,
		near_mem$imem_req_satp,
		near_mem$near_mem_slave_araddr,
		near_mem$near_mem_slave_awaddr,
		near_mem$near_mem_slave_rdata,
		near_mem$near_mem_slave_wdata;
  wire [31 : 0] near_mem$imem_instr;
  wire [7 : 0] near_mem$dmem_master_wstrb,
	       near_mem$imem_master_wstrb,
	       near_mem$near_mem_slave_wstrb,
	       near_mem$server_fence_request_put;
  wire [6 : 0] near_mem$dmem_req_amo_funct7;
  wire [3 : 0] near_mem$dmem_exc_code, near_mem$imem_exc_code;
  wire [2 : 0] near_mem$dmem_master_arprot,
	       near_mem$dmem_master_awprot,
	       near_mem$dmem_req_f3,
	       near_mem$imem_master_arprot,
	       near_mem$imem_master_awprot,
	       near_mem$imem_req_f3,
	       near_mem$near_mem_slave_arprot,
	       near_mem$near_mem_slave_awprot;
  wire [1 : 0] near_mem$dmem_master_bresp,
	       near_mem$dmem_master_rresp,
	       near_mem$dmem_req_priv,
	       near_mem$imem_master_bresp,
	       near_mem$imem_master_rresp,
	       near_mem$near_mem_slave_bresp,
	       near_mem$near_mem_slave_rresp;
  wire near_mem$EN_dmem_req,
       near_mem$EN_get_sw_interrupt_req_get,
       near_mem$EN_get_timer_interrupt_req_get,
       near_mem$EN_imem_req,
       near_mem$EN_server_fence_i_request_put,
       near_mem$EN_server_fence_i_response_get,
       near_mem$EN_server_fence_request_put,
       near_mem$EN_server_fence_response_get,
       near_mem$EN_server_reset_request_put,
       near_mem$EN_server_reset_response_get,
       near_mem$EN_sfence_vma,
       near_mem$RDY_get_sw_interrupt_req_get,
       near_mem$RDY_get_timer_interrupt_req_get,
       near_mem$RDY_server_fence_i_request_put,
       near_mem$RDY_server_fence_i_response_get,
       near_mem$RDY_server_fence_request_put,
       near_mem$RDY_server_fence_response_get,
       near_mem$RDY_server_reset_request_put,
       near_mem$RDY_server_reset_response_get,
       near_mem$dmem_exc,
       near_mem$dmem_master_arready,
       near_mem$dmem_master_arvalid,
       near_mem$dmem_master_awready,
       near_mem$dmem_master_awvalid,
       near_mem$dmem_master_bready,
       near_mem$dmem_master_bvalid,
       near_mem$dmem_master_rready,
       near_mem$dmem_master_rvalid,
       near_mem$dmem_master_wready,
       near_mem$dmem_master_wvalid,
       near_mem$dmem_req_mstatus_MXR,
       near_mem$dmem_req_sstatus_SUM,
       near_mem$dmem_valid,
       near_mem$get_sw_interrupt_req_get,
       near_mem$get_timer_interrupt_req_get,
       near_mem$imem_exc,
       near_mem$imem_master_arready,
       near_mem$imem_master_arvalid,
       near_mem$imem_master_awready,
       near_mem$imem_master_awvalid,
       near_mem$imem_master_bready,
       near_mem$imem_master_bvalid,
       near_mem$imem_master_rready,
       near_mem$imem_master_rvalid,
       near_mem$imem_master_wready,
       near_mem$imem_master_wvalid,
       near_mem$imem_valid,
       near_mem$near_mem_slave_arready,
       near_mem$near_mem_slave_arvalid,
       near_mem$near_mem_slave_awready,
       near_mem$near_mem_slave_awvalid,
       near_mem$near_mem_slave_bready,
       near_mem$near_mem_slave_bvalid,
       near_mem$near_mem_slave_rready,
       near_mem$near_mem_slave_rvalid,
       near_mem$near_mem_slave_wready,
       near_mem$near_mem_slave_wvalid;

  // ports of submodule stage1_f_reset_reqs
  wire stage1_f_reset_reqs$CLR,
       stage1_f_reset_reqs$DEQ,
       stage1_f_reset_reqs$EMPTY_N,
       stage1_f_reset_reqs$ENQ,
       stage1_f_reset_reqs$FULL_N;

  // ports of submodule stage1_f_reset_rsps
  wire stage1_f_reset_rsps$CLR,
       stage1_f_reset_rsps$DEQ,
       stage1_f_reset_rsps$EMPTY_N,
       stage1_f_reset_rsps$ENQ,
       stage1_f_reset_rsps$FULL_N;

  // ports of submodule stage2_f_reset_reqs
  wire stage2_f_reset_reqs$CLR,
       stage2_f_reset_reqs$DEQ,
       stage2_f_reset_reqs$EMPTY_N,
       stage2_f_reset_reqs$ENQ,
       stage2_f_reset_reqs$FULL_N;

  // ports of submodule stage2_f_reset_rsps
  wire stage2_f_reset_rsps$CLR,
       stage2_f_reset_rsps$DEQ,
       stage2_f_reset_rsps$EMPTY_N,
       stage2_f_reset_rsps$ENQ,
       stage2_f_reset_rsps$FULL_N;

  // ports of submodule stage2_fbox
  wire [63 : 0] stage2_fbox$req_v1,
		stage2_fbox$req_v2,
		stage2_fbox$req_v3,
		stage2_fbox$word_fst;
  wire [6 : 0] stage2_fbox$req_f7, stage2_fbox$req_opcode;
  wire [4 : 0] stage2_fbox$req_rs2, stage2_fbox$word_snd;
  wire [3 : 0] stage2_fbox$set_verbosity_verbosity;
  wire [2 : 0] stage2_fbox$req_rm;
  wire stage2_fbox$EN_req, stage2_fbox$EN_set_verbosity, stage2_fbox$valid;

  // ports of submodule stage2_mbox
  wire [63 : 0] stage2_mbox$req_v1, stage2_mbox$req_v2, stage2_mbox$word;
  wire [3 : 0] stage2_mbox$set_verbosity_verbosity;
  wire [2 : 0] stage2_mbox$req_f3;
  wire stage2_mbox$EN_req,
       stage2_mbox$EN_req_reset,
       stage2_mbox$EN_rsp_reset,
       stage2_mbox$EN_set_verbosity,
       stage2_mbox$req_is_OP_not_OP_32,
       stage2_mbox$valid;

  // ports of submodule stage3_f_reset_reqs
  wire stage3_f_reset_reqs$CLR,
       stage3_f_reset_reqs$DEQ,
       stage3_f_reset_reqs$EMPTY_N,
       stage3_f_reset_reqs$ENQ,
       stage3_f_reset_reqs$FULL_N;

  // ports of submodule stage3_f_reset_rsps
  wire stage3_f_reset_rsps$CLR,
       stage3_f_reset_rsps$DEQ,
       stage3_f_reset_rsps$EMPTY_N,
       stage3_f_reset_rsps$ENQ,
       stage3_f_reset_rsps$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_imem_rl_fetch_next_32b,
       CAN_FIRE_RL_rl_WFI_resume,
       CAN_FIRE_RL_rl_finish_FENCE,
       CAN_FIRE_RL_rl_finish_FENCE_I,
       CAN_FIRE_RL_rl_finish_SFENCE_VMA,
       CAN_FIRE_RL_rl_pipe,
       CAN_FIRE_RL_rl_relay_sw_interrupts,
       CAN_FIRE_RL_rl_relay_timer_interrupts,
       CAN_FIRE_RL_rl_reset_complete,
       CAN_FIRE_RL_rl_reset_from_WFI,
       CAN_FIRE_RL_rl_reset_start,
       CAN_FIRE_RL_rl_show_pipe,
       CAN_FIRE_RL_rl_stage1_CSRR_S_or_C,
       CAN_FIRE_RL_rl_stage1_CSRR_W,
       CAN_FIRE_RL_rl_stage1_FENCE,
       CAN_FIRE_RL_rl_stage1_FENCE_I,
       CAN_FIRE_RL_rl_stage1_SFENCE_VMA,
       CAN_FIRE_RL_rl_stage1_WFI,
       CAN_FIRE_RL_rl_stage1_interrupt,
       CAN_FIRE_RL_rl_stage1_restart_after_csrrx,
       CAN_FIRE_RL_rl_stage1_trap,
       CAN_FIRE_RL_rl_stage1_xRET,
       CAN_FIRE_RL_rl_stage2_nonpipe,
       CAN_FIRE_RL_stage1_rl_reset,
       CAN_FIRE_RL_stage2_rl_reset,
       CAN_FIRE_RL_stage3_rl_reset,
       CAN_FIRE_dmem_master_m_arready,
       CAN_FIRE_dmem_master_m_awready,
       CAN_FIRE_dmem_master_m_bvalid,
       CAN_FIRE_dmem_master_m_rvalid,
       CAN_FIRE_dmem_master_m_wready,
       CAN_FIRE_external_interrupt_req,
       CAN_FIRE_hart0_server_reset_request_put,
       CAN_FIRE_hart0_server_reset_response_get,
       CAN_FIRE_imem_master_m_arready,
       CAN_FIRE_imem_master_m_awready,
       CAN_FIRE_imem_master_m_bvalid,
       CAN_FIRE_imem_master_m_rvalid,
       CAN_FIRE_imem_master_m_wready,
       CAN_FIRE_near_mem_slave_m_arvalid,
       CAN_FIRE_near_mem_slave_m_awvalid,
       CAN_FIRE_near_mem_slave_m_bready,
       CAN_FIRE_near_mem_slave_m_rready,
       CAN_FIRE_near_mem_slave_m_wvalid,
       CAN_FIRE_set_verbosity,
       WILL_FIRE_RL_imem_rl_fetch_next_32b,
       WILL_FIRE_RL_rl_WFI_resume,
       WILL_FIRE_RL_rl_finish_FENCE,
       WILL_FIRE_RL_rl_finish_FENCE_I,
       WILL_FIRE_RL_rl_finish_SFENCE_VMA,
       WILL_FIRE_RL_rl_pipe,
       WILL_FIRE_RL_rl_relay_sw_interrupts,
       WILL_FIRE_RL_rl_relay_timer_interrupts,
       WILL_FIRE_RL_rl_reset_complete,
       WILL_FIRE_RL_rl_reset_from_WFI,
       WILL_FIRE_RL_rl_reset_start,
       WILL_FIRE_RL_rl_show_pipe,
       WILL_FIRE_RL_rl_stage1_CSRR_S_or_C,
       WILL_FIRE_RL_rl_stage1_CSRR_W,
       WILL_FIRE_RL_rl_stage1_FENCE,
       WILL_FIRE_RL_rl_stage1_FENCE_I,
       WILL_FIRE_RL_rl_stage1_SFENCE_VMA,
       WILL_FIRE_RL_rl_stage1_WFI,
       WILL_FIRE_RL_rl_stage1_interrupt,
       WILL_FIRE_RL_rl_stage1_restart_after_csrrx,
       WILL_FIRE_RL_rl_stage1_trap,
       WILL_FIRE_RL_rl_stage1_xRET,
       WILL_FIRE_RL_rl_stage2_nonpipe,
       WILL_FIRE_RL_stage1_rl_reset,
       WILL_FIRE_RL_stage2_rl_reset,
       WILL_FIRE_RL_stage3_rl_reset,
       WILL_FIRE_dmem_master_m_arready,
       WILL_FIRE_dmem_master_m_awready,
       WILL_FIRE_dmem_master_m_bvalid,
       WILL_FIRE_dmem_master_m_rvalid,
       WILL_FIRE_dmem_master_m_wready,
       WILL_FIRE_external_interrupt_req,
       WILL_FIRE_hart0_server_reset_request_put,
       WILL_FIRE_hart0_server_reset_response_get,
       WILL_FIRE_imem_master_m_arready,
       WILL_FIRE_imem_master_m_awready,
       WILL_FIRE_imem_master_m_bvalid,
       WILL_FIRE_imem_master_m_rvalid,
       WILL_FIRE_imem_master_m_wready,
       WILL_FIRE_near_mem_slave_m_arvalid,
       WILL_FIRE_near_mem_slave_m_awvalid,
       WILL_FIRE_near_mem_slave_m_bready,
       WILL_FIRE_near_mem_slave_m_rready,
       WILL_FIRE_near_mem_slave_m_wvalid,
       WILL_FIRE_set_verbosity;

  // inputs to muxes for submodule ports
  reg [63 : 0] MUX_csr_regfile$mav_csr_write_2__VAL_2;
  wire [63 : 0] MUX_near_mem$imem_req_2__VAL_1,
		MUX_near_mem$imem_req_2__VAL_3,
		MUX_near_mem$imem_req_2__VAL_5,
		MUX_near_mem$imem_req_2__VAL_6,
		MUX_near_mem$imem_req_2__VAL_7;
  wire [3 : 0] MUX_rg_state$write_1__VAL_1, MUX_rg_state$write_1__VAL_2;
  wire MUX_csr_regfile$mav_csr_write_1__SEL_1,
       MUX_gpr_regfile$write_rd_1__SEL_2,
       MUX_gpr_regfile$write_rd_1__SEL_3,
       MUX_imem_rg_f3$write_1__SEL_1,
       MUX_imem_rg_mstatus_MXR$write_1__SEL_2,
       MUX_imem_rg_pc$write_1__SEL_4,
       MUX_imem_rg_pc$write_1__SEL_6,
       MUX_imem_rg_priv$write_1__SEL_2,
       MUX_near_mem$imem_req_1__SEL_7,
       MUX_rg_state$write_1__SEL_1,
       MUX_rg_state$write_1__SEL_2,
       MUX_rg_state$write_1__SEL_3,
       MUX_rg_state$write_1__SEL_5,
       MUX_rg_state$write_1__SEL_6,
       MUX_rg_state$write_1__SEL_7,
       MUX_rg_state$write_1__SEL_8,
       MUX_rg_state$write_1__SEL_9,
       MUX_stage1_rg_full$write_1__VAL_2,
       MUX_stage2_rg_full$write_1__VAL_2;

  // remaining internal signals
  reg [63 : 0] CASE_theResult__332_BITS_6_TO_0_0b100011_alu_o_ETC__q25,
	       CASE_theResult__332_BITS_6_TO_0_0b1100011_data_ETC__q26,
	       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1496,
	       _theResult_____1_fst__h14954,
	       alu_outputs___1_val1__h13864,
	       rs1_val__h22340,
	       value__h5109,
	       value__h5170,
	       x_out_bypass_rd_val__h5404,
	       x_out_data_to_stage2_addr__h13473,
	       x_out_data_to_stage2_val1__h13474,
	       x_out_data_to_stage3_rd_val__h4905,
	       x_out_fbypass_rd_val__h5549;
  reg [4 : 0] x_out_bypass_rd__h5403,
	      x_out_data_to_stage2_rd__h13472,
	      x_out_data_to_stage3_fpr_flags__h4904,
	      x_out_data_to_stage3_rd__h4901,
	      x_out_fbypass_rd__h5548;
  reg [3 : 0] CASE_rg_cur_priv_0b0_8_0b1_9_11__q18,
	      CASE_theResult__332_BITS_14_TO_12_0b0_4_0b1_5_11__q20,
	      CASE_theResult__332_BITS_14_TO_12_0b0_IF_IF_NO_ETC__q21,
	      CASE_theResult__332_BITS_31_TO_20_0b0_CASE_rg__ETC__q19,
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1197,
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1219,
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1222,
	      alu_outputs_exc_code__h14390,
	      x_out_trap_info_exc_code__h5146;
  reg [2 : 0] CASE_theResult__332_BITS_6_TO_0_0b11_1_0b111_1_ETC__q22,
	      IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1310;
  reg [1 : 0] CASE_stage2_rg_stage2_BITS_267_TO_265_0_2_1_IF_ETC__q1,
	      CASE_stage2_rg_stage2_BITS_267_TO_265_0_2_1_IF_ETC__q2,
	      CASE_stage2_rg_stage2_BITS_267_TO_265_1_IF_sta_ETC__q3;
  reg CASE_stage2_rg_stage2_BITS_267_TO_265_1_NOT_st_ETC__q28,
      CASE_stage2_rg_stage2_BITS_267_TO_265_1_stage2_ETC__q27,
      CASE_theResult__332_BITS_6_TO_0_0b1000011_NOT__ETC__q12,
      CASE_theResult__332_BITS_6_TO_0_0b1000011_theR_ETC__q15,
      CASE_theResult__332_BITS_6_TO_0_0b111_NOT_theR_ETC__q13,
      CASE_theResult__332_BITS_6_TO_0_0b111_theResul_ETC__q16,
      CASE_theResult__332_BITS_6_TO_0_0b11_NOT_theRe_ETC__q14,
      CASE_theResult__332_BITS_6_TO_0_0b11_theResult_ETC__q17,
      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1145,
      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d664,
      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d963,
      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d972,
      IF_stage2_rg_stage2_5_BITS_267_TO_265_6_EQ_1_8_ETC___d146,
      IF_stage2_rg_stage2_5_BITS_267_TO_265_6_EQ_1_8_ETC___d156;
  wire [127 : 0] csr_regfile_read_csr_mcycle__9_MINUS_rg_start__ETC___d1919;
  wire [63 : 0] IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1497,
		IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1498,
		IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1515,
		IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_ETC___d1369,
		IF_csr_regfile_read_csr_IF_NOT_stage1_rg_full__ETC___d1862,
		SEXT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLU_ETC___d1380,
		_theResult_____1_fst__h14947,
		_theResult_____1_fst__h14982,
		_theResult____h27138,
		_theResult___fst__h15072,
		_theResult___fst__h15079,
		_theResult___fst__h15199,
		_theResult___fst_rd_val__h5534,
		_theResult___fst_rd_val__h5540,
		_theResult___snd__h17252,
		_theResult___snd_rd_val__h5382,
		_theResult___snd_rd_val__h5393,
		alu_outputs___1_addr__h13599,
		alu_outputs___1_addr__h13624,
		alu_outputs___1_addr__h13653,
		alu_outputs___1_addr__h13926,
		alu_outputs___1_addr__h13949,
		alu_outputs___1_val1__h13771,
		alu_outputs___1_val1__h13812,
		alu_outputs___1_val1__h13838,
		alu_outputs___1_val1__h13883,
		alu_outputs___1_val1__h13902,
		alu_outputs___1_val1__h14236,
		alu_outputs___1_val1__h14260,
		alu_outputs___1_val1__h14363,
		alu_outputs___1_val2__h13951,
		branch_target__h13579,
		cpi__h27140,
		cpifrac__h27141,
		data_to_stage2_addr__h13462,
		delta_CPI_cycles__h27136,
		delta_CPI_instrs___1__h27173,
		delta_CPI_instrs__h27137,
		fall_through_pc__h13423,
		frs1_val_bypassed__h3351,
		frs2_val_bypassed__h3356,
		imem_rg_pc_PLUS_SEXT_theResult__332_BIT_31_CON_ETC__q6,
		next_pc___1__h16712,
		next_pc__h16710,
		rd_val___1__h14935,
		rd_val___1__h14943,
		rd_val___1__h14950,
		rd_val___1__h14957,
		rd_val___1__h14964,
		rd_val___1__h14971,
		rd_val___1__h17283,
		rd_val___1__h17314,
		rd_val___1__h17368,
		rd_val___1__h17397,
		rd_val___1__h17451,
		rd_val___1__h17499,
		rd_val___1__h17505,
		rd_val___1__h17550,
		rd_val__h13356,
		rd_val__h13399,
		rd_val__h17146,
		rd_val__h17198,
		rd_val__h17220,
		rd_val__h17837,
		rd_val__h17893,
		rd_val__h17946,
		rs1_val__h21847,
		rs1_val_bypassed__h3340,
		rs2_val_bypassed__h3346,
		trap_info_tval__h16546,
		val__h13358,
		val__h13401,
		value__h16605,
		x__h27139,
		x_out_data_to_stage2_val2__h13475,
		x_out_data_to_stage2_val3__h13476,
		x_out_next_pc__h13436,
		y__h22644;
  wire [31 : 0] IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d559,
		IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d560,
		IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d561,
		IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d562,
		IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d564,
		IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d566,
		IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d568,
		IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d570,
		IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d571,
		IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d572,
		IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d574,
		IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d575,
		IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d576,
		IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d578,
		IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d580,
		IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d581,
		IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d583,
		IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d584,
		IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d585,
		IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d586,
		IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d587,
		IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d588,
		IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d589,
		IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d590,
		_theResult____h3332,
		_theResult___fst__h6055,
		_theResult___fst__h6083,
		alu_outputs___1_addr3926_BITS_31_TO_0__q24,
		instr___1__h5875,
		instr__h10015,
		instr__h10134,
		instr__h10229,
		instr__h10365,
		instr__h10501,
		instr__h10637,
		instr__h10775,
		instr__h10913,
		instr__h11071,
		instr__h11167,
		instr__h11320,
		instr__h11519,
		instr__h11670,
		instr__h13182,
		instr__h3330,
		instr__h6155,
		instr__h6300,
		instr__h6492,
		instr__h6687,
		instr__h6916,
		instr__h7370,
		instr__h7486,
		instr__h7551,
		instr__h7868,
		instr__h8206,
		instr__h8390,
		instr__h8519,
		instr__h8746,
		instr__h9001,
		instr__h9173,
		instr__h9342,
		instr__h9531,
		instr__h9720,
		instr__h9837,
		instr_out___1__h6024,
		instr_out___1__h6057,
		instr_out___1__h6085,
		rs1_val_bypassed340_BITS_31_TO_0_MINUS_rs2_val_ETC__q11,
		rs1_val_bypassed340_BITS_31_TO_0_PLUS_rs2_val__ETC__q10,
		rs1_val_bypassed340_BITS_31_TO_0_SRL_rs2_val_b_ETC__q9,
		rs1_val_bypassed340_BITS_31_TO_0__q8,
		tmp__h17396,
		v32__h13872,
		x__h17317,
		x__h17371,
		x__h17508,
		x__h17553,
		x_out_data_to_stage2_instr__h13470;
  wire [20 : 0] SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d380,
		theResult__332_BIT_31_CONCAT_theResult__332_BI_ETC__q5;
  wire [19 : 0] imm20__h8258;
  wire [12 : 0] SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d405,
		theResult__332_BIT_31_CONCAT_theResult__332_BI_ETC__q4;
  wire [11 : 0] imm12__h11168,
		imm12__h11520,
		imm12__h6156,
		imm12__h6493,
		imm12__h8130,
		imm12__h8799,
		imm12__h9014,
		imm12__h9210,
		imm12__h9547,
		offset__h6863,
		theResult__332_BITS_31_TO_20__q23,
		theResult__332_BITS_31_TO_25_CONCAT_theResult__ETC__q7;
  wire [9 : 0] funct10__h13850, nzimm10__h8797, nzimm10__h9012;
  wire [8 : 0] offset__h11082, offset__h7495;
  wire [7 : 0] offset__h11454, offset__h5925;
  wire [6 : 0] offset__h6435;
  wire [5 : 0] imm6__h8128, shamt__h13756;
  wire [4 : 0] offset_BITS_4_TO_0___h11795,
	       offset_BITS_4_TO_0___h6424,
	       offset_BITS_4_TO_0___h6855,
	       rd__h6495,
	       rs1__h6494;
  wire [3 : 0] IF_IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PL_ETC___d1207,
	       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1199,
	       IF_NOT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_P_ETC___d1157,
	       IF_NOT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_P_ETC___d1160,
	       IF_NOT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_P_ETC___d1161,
	       IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224,
	       IF_rg_cur_priv_0_EQ_0b11_166_OR_rg_cur_priv_0__ETC___d1195,
	       alu_outputs___1_exc_code__h14232,
	       cur_verbosity__h2051,
	       x_out_trap_info_exc_code__h16549;
  wire [2 : 0] rm__h14347, x_out_data_to_stage2_rounding_mode__h13478;
  wire [1 : 0] IF_NOT_stage2_rg_full_4_21_OR_stage2_rg_stage2_ETC___d269,
	       IF_near_mem_dmem_valid__18_AND_NOT_near_mem_dm_ETC___d239,
	       IF_near_mem_dmem_valid__18_THEN_IF_near_mem_dm_ETC___d121,
	       IF_stage2_fbox_valid__24_THEN_2_ELSE_1___d125,
	       IF_stage2_mbox_valid__22_THEN_2_ELSE_1___d123,
	       IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130,
	       IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d247,
	       IF_stage2_rg_stage2_5_BIT_3_85_OR_stage2_rg_st_ETC___d240,
	       IF_stage2_rg_stage2_5_BIT_3_85_THEN_IF_near_me_ETC___d264,
	       sxl__h3797,
	       uxl__h3798;
  wire IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1133,
       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1148,
       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1150,
       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1929,
       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d653,
       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d655,
       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d657,
       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d951,
       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d966,
       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d977,
       IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_ETC___d1001,
       IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_ETC___d1172,
       IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_ETC___d994,
       IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1916,
       IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d1736,
       IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d1738,
       IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d594,
       IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d596,
       NOT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_ETC___d700,
       NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38,
       NOT_near_mem_imem_exc__15_82_AND_IF_IF_NOT_nea_ETC___d1290,
       NOT_near_mem_imem_exc__15_82_AND_IF_IF_NOT_nea_ETC___d1340,
       NOT_near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_p_ETC___d1665,
       NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_88_ETC___d296,
       NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_88_ETC___d301,
       NOT_near_mem_imem_valid_87_OR_NOT_near_mem_ime_ETC___d1680,
       NOT_near_mem_imem_valid_87_OR_NOT_near_mem_ime_ETC___d1691,
       NOT_near_mem_imem_valid_87_OR_NOT_near_mem_ime_ETC___d1699,
       NOT_near_mem_imem_valid_87_OR_NOT_near_mem_ime_ETC___d599,
       NOT_rg_halt_672_696_AND_NOT_csr_regfile_interr_ETC___d1702,
       NOT_rg_halt_672_696_AND_NOT_csr_regfile_interr_ETC___d1743,
       NOT_rg_halt_672_696_AND_NOT_csr_regfile_interr_ETC___d1803,
       csr_regfile_interrupt_pending_rg_cur_priv_0_67_ETC___d1935,
       csr_regfile_read_misa__7_BIT_2_03_AND_IF_near__ETC___d390,
       csr_regfile_read_misa__7_BIT_2_03_AND_IF_near__ETC___d396,
       fpr_regfile_RDY_server_reset_request_put__632__ETC___d1644,
       fpr_regfile_RDY_server_reset_response_get__651_ETC___d1663,
       near_mem_imem_exc__15_OR_IF_IF_NOT_near_mem_im_ETC___d1542,
       near_mem_imem_exc__15_OR_IF_IF_NOT_near_mem_im_ETC___d1545,
       near_mem_imem_exc__15_OR_IF_IF_NOT_near_mem_im_ETC___d1548,
       near_mem_imem_exc__15_OR_IF_IF_NOT_near_mem_im_ETC___d1551,
       near_mem_imem_exc__15_OR_IF_IF_NOT_near_mem_im_ETC___d1554,
       near_mem_imem_exc__15_OR_IF_IF_NOT_near_mem_im_ETC___d1557,
       near_mem_imem_exc__15_OR_IF_IF_NOT_near_mem_im_ETC___d1560,
       near_mem_imem_exc__15_OR_IF_IF_NOT_near_mem_im_ETC___d1563,
       near_mem_imem_exc__15_OR_IF_IF_NOT_near_mem_im_ETC___d1566,
       near_mem_imem_exc__15_OR_IF_IF_NOT_near_mem_im_ETC___d1569,
       near_mem_imem_exc__15_OR_IF_IF_NOT_near_mem_im_ETC___d1572,
       near_mem_imem_exc__15_OR_IF_IF_NOT_near_mem_im_ETC___d1575,
       near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d6,
       near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_88_OR__ETC___d606,
       near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_88_OR__ETC___d608,
       near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7___d288,
       near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d1153,
       near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d614,
       near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d980,
       rg_cur_priv_0_EQ_0b11_166_OR_rg_cur_priv_0_EQ__ETC___d1193,
       rg_halt_672_OR_csr_regfile_interrupt_pending_r_ETC___d1684,
       rg_state_9_EQ_2_686_AND_NOT_rg_halt_672_696_AN_ETC___d1826,
       rg_state_9_EQ_2_686_AND_NOT_rg_halt_672_696_AN_ETC___d1875,
       rg_state_9_EQ_2_686_AND_NOT_rg_halt_672_696_AN_ETC___d1886,
       rg_state_9_EQ_2_686_AND_NOT_rg_halt_672_696_AN_ETC___d1896,
       rg_state_9_EQ_2_686_AND_NOT_rg_halt_672_696_AN_ETC___d1913,
       rg_state_9_EQ_2_686_AND_stage3_rg_full_9_OR_NO_ETC___d1705,
       stage3_rg_stage3_1_BITS_75_TO_71_0_EQ_IF_NOT_n_ETC___d639,
       stage3_rg_stage3_1_BITS_75_TO_71_0_EQ_IF_NOT_n_ETC___d647;

  // action method hart0_server_reset_request_put
  assign RDY_hart0_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_hart0_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_hart0_server_reset_request_put =
	     EN_hart0_server_reset_request_put ;

  // action method hart0_server_reset_response_get
  assign RDY_hart0_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_hart0_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_hart0_server_reset_response_get =
	     EN_hart0_server_reset_response_get ;

  // value method imem_master_m_awvalid
  assign imem_master_awvalid = near_mem$imem_master_awvalid ;

  // value method imem_master_m_awaddr
  assign imem_master_awaddr = near_mem$imem_master_awaddr ;

  // value method imem_master_m_awprot
  assign imem_master_awprot = near_mem$imem_master_awprot ;

  // action method imem_master_m_awready
  assign CAN_FIRE_imem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_awready = 1'd1 ;

  // value method imem_master_m_wvalid
  assign imem_master_wvalid = near_mem$imem_master_wvalid ;

  // value method imem_master_m_wdata
  assign imem_master_wdata = near_mem$imem_master_wdata ;

  // value method imem_master_m_wstrb
  assign imem_master_wstrb = near_mem$imem_master_wstrb ;

  // action method imem_master_m_wready
  assign CAN_FIRE_imem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_wready = 1'd1 ;

  // action method imem_master_m_bvalid
  assign CAN_FIRE_imem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_imem_master_m_bvalid = 1'd1 ;

  // value method imem_master_m_bready
  assign imem_master_bready = near_mem$imem_master_bready ;

  // value method imem_master_m_arvalid
  assign imem_master_arvalid = near_mem$imem_master_arvalid ;

  // value method imem_master_m_araddr
  assign imem_master_araddr = near_mem$imem_master_araddr ;

  // value method imem_master_m_arprot
  assign imem_master_arprot = near_mem$imem_master_arprot ;

  // action method imem_master_m_arready
  assign CAN_FIRE_imem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_arready = 1'd1 ;

  // action method imem_master_m_rvalid
  assign CAN_FIRE_imem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_imem_master_m_rvalid = 1'd1 ;

  // value method imem_master_m_rready
  assign imem_master_rready = near_mem$imem_master_rready ;

  // value method dmem_master_m_awvalid
  assign dmem_master_awvalid = near_mem$dmem_master_awvalid ;

  // value method dmem_master_m_awaddr
  assign dmem_master_awaddr = near_mem$dmem_master_awaddr ;

  // value method dmem_master_m_awprot
  assign dmem_master_awprot = near_mem$dmem_master_awprot ;

  // action method dmem_master_m_awready
  assign CAN_FIRE_dmem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_awready = 1'd1 ;

  // value method dmem_master_m_wvalid
  assign dmem_master_wvalid = near_mem$dmem_master_wvalid ;

  // value method dmem_master_m_wdata
  assign dmem_master_wdata = near_mem$dmem_master_wdata ;

  // value method dmem_master_m_wstrb
  assign dmem_master_wstrb = near_mem$dmem_master_wstrb ;

  // action method dmem_master_m_wready
  assign CAN_FIRE_dmem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_wready = 1'd1 ;

  // action method dmem_master_m_bvalid
  assign CAN_FIRE_dmem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_bvalid = 1'd1 ;

  // value method dmem_master_m_bready
  assign dmem_master_bready = near_mem$dmem_master_bready ;

  // value method dmem_master_m_arvalid
  assign dmem_master_arvalid = near_mem$dmem_master_arvalid ;

  // value method dmem_master_m_araddr
  assign dmem_master_araddr = near_mem$dmem_master_araddr ;

  // value method dmem_master_m_arprot
  assign dmem_master_arprot = near_mem$dmem_master_arprot ;

  // action method dmem_master_m_arready
  assign CAN_FIRE_dmem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_arready = 1'd1 ;

  // action method dmem_master_m_rvalid
  assign CAN_FIRE_dmem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_rvalid = 1'd1 ;

  // value method dmem_master_m_rready
  assign dmem_master_rready = near_mem$dmem_master_rready ;

  // action method near_mem_slave_m_awvalid
  assign CAN_FIRE_near_mem_slave_m_awvalid = 1'd1 ;
  assign WILL_FIRE_near_mem_slave_m_awvalid = 1'd1 ;

  // value method near_mem_slave_m_awready
  assign near_mem_slave_awready = near_mem$near_mem_slave_awready ;

  // action method near_mem_slave_m_wvalid
  assign CAN_FIRE_near_mem_slave_m_wvalid = 1'd1 ;
  assign WILL_FIRE_near_mem_slave_m_wvalid = 1'd1 ;

  // value method near_mem_slave_m_wready
  assign near_mem_slave_wready = near_mem$near_mem_slave_wready ;

  // value method near_mem_slave_m_bvalid
  assign near_mem_slave_bvalid = near_mem$near_mem_slave_bvalid ;

  // value method near_mem_slave_m_bresp
  assign near_mem_slave_bresp = near_mem$near_mem_slave_bresp ;

  // action method near_mem_slave_m_bready
  assign CAN_FIRE_near_mem_slave_m_bready = 1'd1 ;
  assign WILL_FIRE_near_mem_slave_m_bready = 1'd1 ;

  // action method near_mem_slave_m_arvalid
  assign CAN_FIRE_near_mem_slave_m_arvalid = 1'd1 ;
  assign WILL_FIRE_near_mem_slave_m_arvalid = 1'd1 ;

  // value method near_mem_slave_m_arready
  assign near_mem_slave_arready = near_mem$near_mem_slave_arready ;

  // value method near_mem_slave_m_rvalid
  assign near_mem_slave_rvalid = near_mem$near_mem_slave_rvalid ;

  // value method near_mem_slave_m_rresp
  assign near_mem_slave_rresp = near_mem$near_mem_slave_rresp ;

  // value method near_mem_slave_m_rdata
  assign near_mem_slave_rdata = near_mem$near_mem_slave_rdata ;

  // action method near_mem_slave_m_rready
  assign CAN_FIRE_near_mem_slave_m_rready = 1'd1 ;
  assign WILL_FIRE_near_mem_slave_m_rready = 1'd1 ;

  // action method external_interrupt_req
  assign RDY_external_interrupt_req = 1'd1 ;
  assign CAN_FIRE_external_interrupt_req = 1'd1 ;
  assign WILL_FIRE_external_interrupt_req = EN_external_interrupt_req ;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // submodule csr_regfile
  mkCSR_RegFile csr_regfile(.CLK(CLK),
			    .RST_N(RST_N),
			    .access_permitted_1_csr_addr(csr_regfile$access_permitted_1_csr_addr),
			    .access_permitted_1_priv(csr_regfile$access_permitted_1_priv),
			    .access_permitted_1_read_not_write(csr_regfile$access_permitted_1_read_not_write),
			    .access_permitted_2_csr_addr(csr_regfile$access_permitted_2_csr_addr),
			    .access_permitted_2_priv(csr_regfile$access_permitted_2_priv),
			    .access_permitted_2_read_not_write(csr_regfile$access_permitted_2_read_not_write),
			    .csr_counter_read_fault_csr_addr(csr_regfile$csr_counter_read_fault_csr_addr),
			    .csr_counter_read_fault_priv(csr_regfile$csr_counter_read_fault_priv),
			    .csr_ret_actions_from_priv(csr_regfile$csr_ret_actions_from_priv),
			    .csr_trap_actions_exc_code(csr_regfile$csr_trap_actions_exc_code),
			    .csr_trap_actions_from_priv(csr_regfile$csr_trap_actions_from_priv),
			    .csr_trap_actions_interrupt(csr_regfile$csr_trap_actions_interrupt),
			    .csr_trap_actions_pc(csr_regfile$csr_trap_actions_pc),
			    .csr_trap_actions_xtval(csr_regfile$csr_trap_actions_xtval),
			    .external_interrupt_req_set_not_clear(csr_regfile$external_interrupt_req_set_not_clear),
			    .interrupt_pending_cur_priv(csr_regfile$interrupt_pending_cur_priv),
			    .mav_csr_write_csr_addr(csr_regfile$mav_csr_write_csr_addr),
			    .mav_csr_write_word(csr_regfile$mav_csr_write_word),
			    .mav_read_csr_csr_addr(csr_regfile$mav_read_csr_csr_addr),
			    .read_csr_csr_addr(csr_regfile$read_csr_csr_addr),
			    .read_csr_port2_csr_addr(csr_regfile$read_csr_port2_csr_addr),
			    .software_interrupt_req_set_not_clear(csr_regfile$software_interrupt_req_set_not_clear),
			    .timer_interrupt_req_set_not_clear(csr_regfile$timer_interrupt_req_set_not_clear),
			    .update_fcsr_fflags_flags(csr_regfile$update_fcsr_fflags_flags),
			    .EN_server_reset_request_put(csr_regfile$EN_server_reset_request_put),
			    .EN_server_reset_response_get(csr_regfile$EN_server_reset_response_get),
			    .EN_mav_read_csr(csr_regfile$EN_mav_read_csr),
			    .EN_mav_csr_write(csr_regfile$EN_mav_csr_write),
			    .EN_update_fcsr_fflags(csr_regfile$EN_update_fcsr_fflags),
			    .EN_csr_trap_actions(csr_regfile$EN_csr_trap_actions),
			    .EN_csr_ret_actions(csr_regfile$EN_csr_ret_actions),
			    .EN_csr_minstret_incr(csr_regfile$EN_csr_minstret_incr),
			    .EN_external_interrupt_req(csr_regfile$EN_external_interrupt_req),
			    .EN_timer_interrupt_req(csr_regfile$EN_timer_interrupt_req),
			    .EN_software_interrupt_req(csr_regfile$EN_software_interrupt_req),
			    .EN_debug(csr_regfile$EN_debug),
			    .RDY_server_reset_request_put(csr_regfile$RDY_server_reset_request_put),
			    .RDY_server_reset_response_get(csr_regfile$RDY_server_reset_response_get),
			    .read_csr(csr_regfile$read_csr),
			    .read_csr_port2(),
			    .mav_read_csr(),
			    .mav_csr_write(),
			    .read_frm(csr_regfile$read_frm),
			    .read_misa(csr_regfile$read_misa),
			    .read_mstatus(csr_regfile$read_mstatus),
			    .read_sstatus(csr_regfile$read_sstatus),
			    .read_ustatus(),
			    .read_satp(csr_regfile$read_satp),
			    .csr_trap_actions(csr_regfile$csr_trap_actions),
			    .RDY_csr_trap_actions(),
			    .csr_ret_actions(csr_regfile$csr_ret_actions),
			    .RDY_csr_ret_actions(),
			    .read_csr_minstret(csr_regfile$read_csr_minstret),
			    .read_csr_mcycle(csr_regfile$read_csr_mcycle),
			    .read_csr_mtime(),
			    .access_permitted_1(csr_regfile$access_permitted_1),
			    .access_permitted_2(csr_regfile$access_permitted_2),
			    .csr_counter_read_fault(),
			    .csr_mip_read(),
			    .RDY_external_interrupt_req(),
			    .RDY_timer_interrupt_req(),
			    .RDY_software_interrupt_req(),
			    .interrupt_pending(csr_regfile$interrupt_pending),
			    .wfi_resume(csr_regfile$wfi_resume),
			    .RDY_debug());

  // submodule f_reset_reqs
  FIFO20 #(.guarded(32'd1)) f_reset_reqs(.RST(RST_N),
					 .CLK(CLK),
					 .ENQ(f_reset_reqs$ENQ),
					 .DEQ(f_reset_reqs$DEQ),
					 .CLR(f_reset_reqs$CLR),
					 .FULL_N(f_reset_reqs$FULL_N),
					 .EMPTY_N(f_reset_reqs$EMPTY_N));

  // submodule f_reset_rsps
  FIFO20 #(.guarded(32'd1)) f_reset_rsps(.RST(RST_N),
					 .CLK(CLK),
					 .ENQ(f_reset_rsps$ENQ),
					 .DEQ(f_reset_rsps$DEQ),
					 .CLR(f_reset_rsps$CLR),
					 .FULL_N(f_reset_rsps$FULL_N),
					 .EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule fpr_regfile
  mkFPR_RegFile fpr_regfile(.CLK(CLK),
			    .RST_N(RST_N),
			    .read_rs1_port2_rs1(fpr_regfile$read_rs1_port2_rs1),
			    .read_rs1_rs1(fpr_regfile$read_rs1_rs1),
			    .read_rs2_rs2(fpr_regfile$read_rs2_rs2),
			    .read_rs3_rs3(fpr_regfile$read_rs3_rs3),
			    .write_rd_rd(fpr_regfile$write_rd_rd),
			    .write_rd_rd_val(fpr_regfile$write_rd_rd_val),
			    .EN_server_reset_request_put(fpr_regfile$EN_server_reset_request_put),
			    .EN_server_reset_response_get(fpr_regfile$EN_server_reset_response_get),
			    .EN_write_rd(fpr_regfile$EN_write_rd),
			    .RDY_server_reset_request_put(fpr_regfile$RDY_server_reset_request_put),
			    .RDY_server_reset_response_get(fpr_regfile$RDY_server_reset_response_get),
			    .read_rs1(fpr_regfile$read_rs1),
			    .read_rs1_port2(),
			    .read_rs2(fpr_regfile$read_rs2),
			    .read_rs3(fpr_regfile$read_rs3));

  // submodule gpr_regfile
  mkGPR_RegFile gpr_regfile(.CLK(CLK),
			    .RST_N(RST_N),
			    .read_rs1_port2_rs1(gpr_regfile$read_rs1_port2_rs1),
			    .read_rs1_rs1(gpr_regfile$read_rs1_rs1),
			    .read_rs2_rs2(gpr_regfile$read_rs2_rs2),
			    .write_rd_rd(gpr_regfile$write_rd_rd),
			    .write_rd_rd_val(gpr_regfile$write_rd_rd_val),
			    .EN_server_reset_request_put(gpr_regfile$EN_server_reset_request_put),
			    .EN_server_reset_response_get(gpr_regfile$EN_server_reset_response_get),
			    .EN_write_rd(gpr_regfile$EN_write_rd),
			    .RDY_server_reset_request_put(gpr_regfile$RDY_server_reset_request_put),
			    .RDY_server_reset_response_get(gpr_regfile$RDY_server_reset_response_get),
			    .read_rs1(gpr_regfile$read_rs1),
			    .read_rs1_port2(),
			    .read_rs2(gpr_regfile$read_rs2));

  // submodule near_mem
  mkNear_Mem near_mem(.CLK(CLK),
		      .RST_N(RST_N),
		      .dmem_master_arready(near_mem$dmem_master_arready),
		      .dmem_master_awready(near_mem$dmem_master_awready),
		      .dmem_master_bresp(near_mem$dmem_master_bresp),
		      .dmem_master_bvalid(near_mem$dmem_master_bvalid),
		      .dmem_master_rdata(near_mem$dmem_master_rdata),
		      .dmem_master_rresp(near_mem$dmem_master_rresp),
		      .dmem_master_rvalid(near_mem$dmem_master_rvalid),
		      .dmem_master_wready(near_mem$dmem_master_wready),
		      .dmem_req_addr(near_mem$dmem_req_addr),
		      .dmem_req_amo_funct7(near_mem$dmem_req_amo_funct7),
		      .dmem_req_f3(near_mem$dmem_req_f3),
		      .dmem_req_mstatus_MXR(near_mem$dmem_req_mstatus_MXR),
		      .dmem_req_op(near_mem$dmem_req_op),
		      .dmem_req_priv(near_mem$dmem_req_priv),
		      .dmem_req_satp(near_mem$dmem_req_satp),
		      .dmem_req_sstatus_SUM(near_mem$dmem_req_sstatus_SUM),
		      .dmem_req_store_value(near_mem$dmem_req_store_value),
		      .imem_master_arready(near_mem$imem_master_arready),
		      .imem_master_awready(near_mem$imem_master_awready),
		      .imem_master_bresp(near_mem$imem_master_bresp),
		      .imem_master_bvalid(near_mem$imem_master_bvalid),
		      .imem_master_rdata(near_mem$imem_master_rdata),
		      .imem_master_rresp(near_mem$imem_master_rresp),
		      .imem_master_rvalid(near_mem$imem_master_rvalid),
		      .imem_master_wready(near_mem$imem_master_wready),
		      .imem_req_addr(near_mem$imem_req_addr),
		      .imem_req_f3(near_mem$imem_req_f3),
		      .imem_req_mstatus_MXR(near_mem$imem_req_mstatus_MXR),
		      .imem_req_priv(near_mem$imem_req_priv),
		      .imem_req_satp(near_mem$imem_req_satp),
		      .imem_req_sstatus_SUM(near_mem$imem_req_sstatus_SUM),
		      .near_mem_slave_araddr(near_mem$near_mem_slave_araddr),
		      .near_mem_slave_arprot(near_mem$near_mem_slave_arprot),
		      .near_mem_slave_arvalid(near_mem$near_mem_slave_arvalid),
		      .near_mem_slave_awaddr(near_mem$near_mem_slave_awaddr),
		      .near_mem_slave_awprot(near_mem$near_mem_slave_awprot),
		      .near_mem_slave_awvalid(near_mem$near_mem_slave_awvalid),
		      .near_mem_slave_bready(near_mem$near_mem_slave_bready),
		      .near_mem_slave_rready(near_mem$near_mem_slave_rready),
		      .near_mem_slave_wdata(near_mem$near_mem_slave_wdata),
		      .near_mem_slave_wstrb(near_mem$near_mem_slave_wstrb),
		      .near_mem_slave_wvalid(near_mem$near_mem_slave_wvalid),
		      .server_fence_request_put(near_mem$server_fence_request_put),
		      .EN_server_reset_request_put(near_mem$EN_server_reset_request_put),
		      .EN_server_reset_response_get(near_mem$EN_server_reset_response_get),
		      .EN_imem_req(near_mem$EN_imem_req),
		      .EN_dmem_req(near_mem$EN_dmem_req),
		      .EN_server_fence_i_request_put(near_mem$EN_server_fence_i_request_put),
		      .EN_server_fence_i_response_get(near_mem$EN_server_fence_i_response_get),
		      .EN_server_fence_request_put(near_mem$EN_server_fence_request_put),
		      .EN_server_fence_response_get(near_mem$EN_server_fence_response_get),
		      .EN_sfence_vma(near_mem$EN_sfence_vma),
		      .EN_get_timer_interrupt_req_get(near_mem$EN_get_timer_interrupt_req_get),
		      .EN_get_sw_interrupt_req_get(near_mem$EN_get_sw_interrupt_req_get),
		      .RDY_server_reset_request_put(near_mem$RDY_server_reset_request_put),
		      .RDY_server_reset_response_get(near_mem$RDY_server_reset_response_get),
		      .imem_valid(near_mem$imem_valid),
		      .imem_is_i32_not_i16(),
		      .imem_pc(near_mem$imem_pc),
		      .imem_instr(near_mem$imem_instr),
		      .imem_exc(near_mem$imem_exc),
		      .imem_exc_code(near_mem$imem_exc_code),
		      .imem_tval(),
		      .imem_master_awvalid(near_mem$imem_master_awvalid),
		      .imem_master_awaddr(near_mem$imem_master_awaddr),
		      .imem_master_awprot(near_mem$imem_master_awprot),
		      .imem_master_wvalid(near_mem$imem_master_wvalid),
		      .imem_master_wdata(near_mem$imem_master_wdata),
		      .imem_master_wstrb(near_mem$imem_master_wstrb),
		      .imem_master_bready(near_mem$imem_master_bready),
		      .imem_master_arvalid(near_mem$imem_master_arvalid),
		      .imem_master_araddr(near_mem$imem_master_araddr),
		      .imem_master_arprot(near_mem$imem_master_arprot),
		      .imem_master_rready(near_mem$imem_master_rready),
		      .dmem_valid(near_mem$dmem_valid),
		      .dmem_word64(near_mem$dmem_word64),
		      .dmem_st_amo_val(),
		      .dmem_exc(near_mem$dmem_exc),
		      .dmem_exc_code(near_mem$dmem_exc_code),
		      .dmem_master_awvalid(near_mem$dmem_master_awvalid),
		      .dmem_master_awaddr(near_mem$dmem_master_awaddr),
		      .dmem_master_awprot(near_mem$dmem_master_awprot),
		      .dmem_master_wvalid(near_mem$dmem_master_wvalid),
		      .dmem_master_wdata(near_mem$dmem_master_wdata),
		      .dmem_master_wstrb(near_mem$dmem_master_wstrb),
		      .dmem_master_bready(near_mem$dmem_master_bready),
		      .dmem_master_arvalid(near_mem$dmem_master_arvalid),
		      .dmem_master_araddr(near_mem$dmem_master_araddr),
		      .dmem_master_arprot(near_mem$dmem_master_arprot),
		      .dmem_master_rready(near_mem$dmem_master_rready),
		      .RDY_server_fence_i_request_put(near_mem$RDY_server_fence_i_request_put),
		      .RDY_server_fence_i_response_get(near_mem$RDY_server_fence_i_response_get),
		      .RDY_server_fence_request_put(near_mem$RDY_server_fence_request_put),
		      .RDY_server_fence_response_get(near_mem$RDY_server_fence_response_get),
		      .RDY_sfence_vma(),
		      .get_timer_interrupt_req_get(near_mem$get_timer_interrupt_req_get),
		      .RDY_get_timer_interrupt_req_get(near_mem$RDY_get_timer_interrupt_req_get),
		      .get_sw_interrupt_req_get(near_mem$get_sw_interrupt_req_get),
		      .RDY_get_sw_interrupt_req_get(near_mem$RDY_get_sw_interrupt_req_get),
		      .near_mem_slave_awready(near_mem$near_mem_slave_awready),
		      .near_mem_slave_wready(near_mem$near_mem_slave_wready),
		      .near_mem_slave_bvalid(near_mem$near_mem_slave_bvalid),
		      .near_mem_slave_bresp(near_mem$near_mem_slave_bresp),
		      .near_mem_slave_arready(near_mem$near_mem_slave_arready),
		      .near_mem_slave_rvalid(near_mem$near_mem_slave_rvalid),
		      .near_mem_slave_rresp(near_mem$near_mem_slave_rresp),
		      .near_mem_slave_rdata(near_mem$near_mem_slave_rdata));

  // submodule stage1_f_reset_reqs
  FIFO20 #(.guarded(32'd1)) stage1_f_reset_reqs(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage1_f_reset_reqs$ENQ),
						.DEQ(stage1_f_reset_reqs$DEQ),
						.CLR(stage1_f_reset_reqs$CLR),
						.FULL_N(stage1_f_reset_reqs$FULL_N),
						.EMPTY_N(stage1_f_reset_reqs$EMPTY_N));

  // submodule stage1_f_reset_rsps
  FIFO20 #(.guarded(32'd1)) stage1_f_reset_rsps(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage1_f_reset_rsps$ENQ),
						.DEQ(stage1_f_reset_rsps$DEQ),
						.CLR(stage1_f_reset_rsps$CLR),
						.FULL_N(stage1_f_reset_rsps$FULL_N),
						.EMPTY_N(stage1_f_reset_rsps$EMPTY_N));

  // submodule stage2_f_reset_reqs
  FIFO20 #(.guarded(32'd1)) stage2_f_reset_reqs(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage2_f_reset_reqs$ENQ),
						.DEQ(stage2_f_reset_reqs$DEQ),
						.CLR(stage2_f_reset_reqs$CLR),
						.FULL_N(stage2_f_reset_reqs$FULL_N),
						.EMPTY_N(stage2_f_reset_reqs$EMPTY_N));

  // submodule stage2_f_reset_rsps
  FIFO20 #(.guarded(32'd1)) stage2_f_reset_rsps(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage2_f_reset_rsps$ENQ),
						.DEQ(stage2_f_reset_rsps$DEQ),
						.CLR(stage2_f_reset_rsps$CLR),
						.FULL_N(stage2_f_reset_rsps$FULL_N),
						.EMPTY_N(stage2_f_reset_rsps$EMPTY_N));

  // submodule stage2_fbox
  mkRISCV_FBox stage2_fbox(.CLK(CLK),
			   .RST_N(RST_N),
			   .req_f7(stage2_fbox$req_f7),
			   .req_opcode(stage2_fbox$req_opcode),
			   .req_rm(stage2_fbox$req_rm),
			   .req_rs2(stage2_fbox$req_rs2),
			   .req_v1(stage2_fbox$req_v1),
			   .req_v2(stage2_fbox$req_v2),
			   .req_v3(stage2_fbox$req_v3),
			   .set_verbosity_verbosity(stage2_fbox$set_verbosity_verbosity),
			   .EN_set_verbosity(stage2_fbox$EN_set_verbosity),
			   .EN_req(stage2_fbox$EN_req),
			   .RDY_set_verbosity(),
			   .valid(stage2_fbox$valid),
			   .word_fst(stage2_fbox$word_fst),
			   .word_snd(stage2_fbox$word_snd));

  // submodule stage2_mbox
  mkRISCV_MBox stage2_mbox(.CLK(CLK),
			   .RST_N(RST_N),
			   .req_f3(stage2_mbox$req_f3),
			   .req_is_OP_not_OP_32(stage2_mbox$req_is_OP_not_OP_32),
			   .req_v1(stage2_mbox$req_v1),
			   .req_v2(stage2_mbox$req_v2),
			   .set_verbosity_verbosity(stage2_mbox$set_verbosity_verbosity),
			   .EN_set_verbosity(stage2_mbox$EN_set_verbosity),
			   .EN_req_reset(stage2_mbox$EN_req_reset),
			   .EN_rsp_reset(stage2_mbox$EN_rsp_reset),
			   .EN_req(stage2_mbox$EN_req),
			   .RDY_set_verbosity(),
			   .RDY_req_reset(),
			   .RDY_rsp_reset(),
			   .valid(stage2_mbox$valid),
			   .word(stage2_mbox$word));

  // submodule stage3_f_reset_reqs
  FIFO20 #(.guarded(32'd1)) stage3_f_reset_reqs(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage3_f_reset_reqs$ENQ),
						.DEQ(stage3_f_reset_reqs$DEQ),
						.CLR(stage3_f_reset_reqs$CLR),
						.FULL_N(stage3_f_reset_reqs$FULL_N),
						.EMPTY_N(stage3_f_reset_reqs$EMPTY_N));

  // submodule stage3_f_reset_rsps
  FIFO20 #(.guarded(32'd1)) stage3_f_reset_rsps(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage3_f_reset_rsps$ENQ),
						.DEQ(stage3_f_reset_rsps$DEQ),
						.CLR(stage3_f_reset_rsps$CLR),
						.FULL_N(stage3_f_reset_rsps$FULL_N),
						.EMPTY_N(stage3_f_reset_rsps$EMPTY_N));

  // rule RL_rl_show_pipe
  assign CAN_FIRE_RL_rl_show_pipe =
	     NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38 &&
	     rg_state != 4'd0 &&
	     rg_state != 4'd1 &&
	     rg_state != 4'd8 ;
  assign WILL_FIRE_RL_rl_show_pipe = CAN_FIRE_RL_rl_show_pipe ;

  // rule RL_rl_reset_complete
  assign CAN_FIRE_RL_rl_reset_complete =
	     NOT_near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_p_ETC___d1665 &&
	     rg_state == 4'd1 ;
  assign WILL_FIRE_RL_rl_reset_complete = CAN_FIRE_RL_rl_reset_complete ;

  // rule RL_rl_stage2_nonpipe
  assign CAN_FIRE_RL_rl_stage2_nonpipe =
	     (!near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d6 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     rg_state == 4'd2 &&
	     !stage3_rg_full &&
	     IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 ==
	     2'd3 ;
  assign WILL_FIRE_RL_rl_stage2_nonpipe = CAN_FIRE_RL_rl_stage2_nonpipe ;

  // rule RL_rl_stage1_CSRR_W
  assign CAN_FIRE_RL_rl_stage1_CSRR_W = MUX_rg_state$write_1__SEL_1 ;
  assign WILL_FIRE_RL_rl_stage1_CSRR_W = MUX_rg_state$write_1__SEL_1 ;

  // rule RL_rl_stage1_CSRR_S_or_C
  assign CAN_FIRE_RL_rl_stage1_CSRR_S_or_C = MUX_rg_state$write_1__SEL_2 ;
  assign WILL_FIRE_RL_rl_stage1_CSRR_S_or_C = MUX_rg_state$write_1__SEL_2 ;

  // rule RL_rl_stage1_restart_after_csrrx
  assign CAN_FIRE_RL_rl_stage1_restart_after_csrrx =
	     (!near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d6 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     rg_state == 4'd4 ;
  assign WILL_FIRE_RL_rl_stage1_restart_after_csrrx =
	     CAN_FIRE_RL_rl_stage1_restart_after_csrrx ;

  // rule RL_rl_stage1_xRET
  assign CAN_FIRE_RL_rl_stage1_xRET =
	     (!near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d6 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     rg_state_9_EQ_2_686_AND_NOT_rg_halt_672_696_AN_ETC___d1875 ;
  assign WILL_FIRE_RL_rl_stage1_xRET = CAN_FIRE_RL_rl_stage1_xRET ;

  // rule RL_rl_stage1_FENCE_I
  assign CAN_FIRE_RL_rl_stage1_FENCE_I = MUX_rg_state$write_1__SEL_6 ;
  assign WILL_FIRE_RL_rl_stage1_FENCE_I = MUX_rg_state$write_1__SEL_6 ;

  // rule RL_rl_finish_FENCE_I
  assign CAN_FIRE_RL_rl_finish_FENCE_I =
	     (!near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d6 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     near_mem$RDY_server_fence_i_response_get &&
	     rg_state == 4'd5 ;
  assign WILL_FIRE_RL_rl_finish_FENCE_I = CAN_FIRE_RL_rl_finish_FENCE_I ;

  // rule RL_rl_stage1_FENCE
  assign CAN_FIRE_RL_rl_stage1_FENCE = MUX_rg_state$write_1__SEL_7 ;
  assign WILL_FIRE_RL_rl_stage1_FENCE = MUX_rg_state$write_1__SEL_7 ;

  // rule RL_rl_finish_FENCE
  assign CAN_FIRE_RL_rl_finish_FENCE =
	     (!near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d6 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     near_mem$RDY_server_fence_response_get &&
	     rg_state == 4'd6 ;
  assign WILL_FIRE_RL_rl_finish_FENCE = CAN_FIRE_RL_rl_finish_FENCE ;

  // rule RL_rl_stage1_SFENCE_VMA
  assign CAN_FIRE_RL_rl_stage1_SFENCE_VMA = MUX_rg_state$write_1__SEL_8 ;
  assign WILL_FIRE_RL_rl_stage1_SFENCE_VMA = MUX_rg_state$write_1__SEL_8 ;

  // rule RL_rl_finish_SFENCE_VMA
  assign CAN_FIRE_RL_rl_finish_SFENCE_VMA =
	     (!near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d6 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     rg_state == 4'd7 ;
  assign WILL_FIRE_RL_rl_finish_SFENCE_VMA =
	     CAN_FIRE_RL_rl_finish_SFENCE_VMA ;

  // rule RL_rl_stage1_WFI
  assign CAN_FIRE_RL_rl_stage1_WFI = MUX_rg_state$write_1__SEL_9 ;
  assign WILL_FIRE_RL_rl_stage1_WFI = MUX_rg_state$write_1__SEL_9 ;

  // rule RL_rl_WFI_resume
  assign CAN_FIRE_RL_rl_WFI_resume =
	     (!near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d6 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     rg_state == 4'd8 &&
	     csr_regfile$wfi_resume ;
  assign WILL_FIRE_RL_rl_WFI_resume = CAN_FIRE_RL_rl_WFI_resume ;

  // rule RL_rl_reset_from_WFI
  assign CAN_FIRE_RL_rl_reset_from_WFI =
	     rg_state == 4'd8 && f_reset_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_rl_reset_from_WFI = MUX_rg_state$write_1__SEL_3 ;

  // rule RL_rl_stage1_trap
  assign CAN_FIRE_RL_rl_stage1_trap =
	     (!near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d6 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     (rg_state == 4'd3 ||
	      rg_state_9_EQ_2_686_AND_NOT_rg_halt_672_696_AN_ETC___d1913) ;
  assign WILL_FIRE_RL_rl_stage1_trap = CAN_FIRE_RL_rl_stage1_trap ;

  // rule RL_rl_stage1_interrupt
  assign CAN_FIRE_RL_rl_stage1_interrupt =
	     (!near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d6 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     csr_regfile_interrupt_pending_rg_cur_priv_0_67_ETC___d1935 ;
  assign WILL_FIRE_RL_rl_stage1_interrupt = CAN_FIRE_RL_rl_stage1_interrupt ;

  // rule RL_rl_pipe
  assign CAN_FIRE_RL_rl_pipe =
	     (rg_halt_672_OR_csr_regfile_interrupt_pending_r_ETC___d1684 ||
	      !near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d6 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     rg_state_9_EQ_2_686_AND_stage3_rg_full_9_OR_NO_ETC___d1705 ;
  assign WILL_FIRE_RL_rl_pipe =
	     CAN_FIRE_RL_rl_pipe && !WILL_FIRE_RL_imem_rl_fetch_next_32b ;

  // rule RL_rl_reset_start
  assign CAN_FIRE_RL_rl_reset_start =
	     gpr_regfile$RDY_server_reset_request_put &&
	     fpr_regfile_RDY_server_reset_request_put__632__ETC___d1644 &&
	     rg_state == 4'd0 ;
  assign WILL_FIRE_RL_rl_reset_start = CAN_FIRE_RL_rl_reset_start ;

  // rule RL_rl_relay_sw_interrupts
  assign CAN_FIRE_RL_rl_relay_sw_interrupts =
	     near_mem$RDY_get_sw_interrupt_req_get ;
  assign WILL_FIRE_RL_rl_relay_sw_interrupts =
	     near_mem$RDY_get_sw_interrupt_req_get ;

  // rule RL_imem_rl_fetch_next_32b
  assign CAN_FIRE_RL_imem_rl_fetch_next_32b =
	     near_mem$imem_valid &&
	     near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d6 &&
	     imem_rg_pc[1:0] != 2'b0 &&
	     near_mem$imem_instr[17:16] == 2'b11 ;
  assign WILL_FIRE_RL_imem_rl_fetch_next_32b =
	     CAN_FIRE_RL_imem_rl_fetch_next_32b &&
	     !WILL_FIRE_RL_rl_stage1_SFENCE_VMA ;

  // rule RL_rl_relay_timer_interrupts
  assign CAN_FIRE_RL_rl_relay_timer_interrupts =
	     near_mem$RDY_get_timer_interrupt_req_get ;
  assign WILL_FIRE_RL_rl_relay_timer_interrupts =
	     near_mem$RDY_get_timer_interrupt_req_get ;

  // rule RL_stage3_rl_reset
  assign CAN_FIRE_RL_stage3_rl_reset =
	     stage3_f_reset_reqs$EMPTY_N && stage3_f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_stage3_rl_reset = CAN_FIRE_RL_stage3_rl_reset ;

  // rule RL_stage2_rl_reset
  assign CAN_FIRE_RL_stage2_rl_reset =
	     stage2_f_reset_reqs$EMPTY_N && stage2_f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_stage2_rl_reset = CAN_FIRE_RL_stage2_rl_reset ;

  // rule RL_stage1_rl_reset
  assign CAN_FIRE_RL_stage1_rl_reset =
	     stage1_f_reset_reqs$EMPTY_N && stage1_f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_stage1_rl_reset = CAN_FIRE_RL_stage1_rl_reset ;

  // inputs to muxes for submodule ports
  assign MUX_csr_regfile$mav_csr_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_stage1_CSRR_W && csr_regfile$access_permitted_1 ;
  assign MUX_gpr_regfile$write_rd_1__SEL_2 =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	     csr_regfile$access_permitted_2 ;
  assign MUX_gpr_regfile$write_rd_1__SEL_3 =
	     WILL_FIRE_RL_rl_pipe && stage3_rg_full && stage3_rg_stage3[76] &&
	     !stage3_rg_stage3[69] ;
  assign MUX_imem_rg_f3$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_rg_halt_672_696_AND_NOT_csr_regfile_interr_ETC___d1803 ;
  assign MUX_imem_rg_mstatus_MXR$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_stage1_trap || WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_reset_complete ;
  assign MUX_imem_rg_pc$write_1__SEL_4 =
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ;
  assign MUX_imem_rg_pc$write_1__SEL_6 =
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ;
  assign MUX_imem_rg_priv$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_reset_complete ;
  assign MUX_near_mem$imem_req_1__SEL_7 =
	     WILL_FIRE_RL_rl_stage1_trap || WILL_FIRE_RL_rl_stage2_nonpipe ;
  assign MUX_rg_state$write_1__SEL_1 =
	     rg_state_9_EQ_2_686_AND_NOT_rg_halt_672_696_AN_ETC___d1826 &&
	     IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 ==
	     2'd0 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d980 &&
	     IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 ==
	     4'd2 ;
  assign MUX_rg_state$write_1__SEL_2 =
	     rg_state_9_EQ_2_686_AND_NOT_rg_halt_672_696_AN_ETC___d1826 &&
	     IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 ==
	     2'd0 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d980 &&
	     IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 ==
	     4'd3 ;
  assign MUX_rg_state$write_1__SEL_3 =
	     CAN_FIRE_RL_rl_reset_from_WFI && !WILL_FIRE_RL_rl_WFI_resume ;
  assign MUX_rg_state$write_1__SEL_5 =
	     WILL_FIRE_RL_rl_stage1_trap || WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_reset_complete ;
  assign MUX_rg_state$write_1__SEL_6 =
	     near_mem$RDY_server_fence_i_request_put &&
	     rg_state_9_EQ_2_686_AND_NOT_rg_halt_672_696_AN_ETC___d1886 ;
  assign MUX_rg_state$write_1__SEL_7 =
	     near_mem$RDY_server_fence_request_put &&
	     rg_state_9_EQ_2_686_AND_NOT_rg_halt_672_696_AN_ETC___d1896 ;
  assign MUX_rg_state$write_1__SEL_8 =
	     rg_state_9_EQ_2_686_AND_NOT_rg_halt_672_696_AN_ETC___d1826 &&
	     IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 ==
	     2'd0 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d980 &&
	     IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 ==
	     4'd6 ;
  assign MUX_rg_state$write_1__SEL_9 =
	     rg_state_9_EQ_2_686_AND_NOT_rg_halt_672_696_AN_ETC___d1826 &&
	     IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 ==
	     2'd0 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d980 &&
	     IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 ==
	     4'd10 ;
  always@(x_out_data_to_stage2_instr__h13470 or
	  csr_regfile$read_csr or
	  y__h22644 or
	  IF_csr_regfile_read_csr_IF_NOT_stage1_rg_full__ETC___d1862)
  begin
    case (x_out_data_to_stage2_instr__h13470[14:12])
      3'b010, 3'b110:
	  MUX_csr_regfile$mav_csr_write_2__VAL_2 =
	      IF_csr_regfile_read_csr_IF_NOT_stage1_rg_full__ETC___d1862;
      default: MUX_csr_regfile$mav_csr_write_2__VAL_2 =
		   csr_regfile$read_csr[63:0] & y__h22644;
    endcase
  end
  assign MUX_near_mem$imem_req_2__VAL_1 =
	     { x_out_next_pc__h13436[63:2], 2'b0 } ;
  assign MUX_near_mem$imem_req_2__VAL_3 = { pc_reset_value[63:2], 2'b0 } ;
  assign MUX_near_mem$imem_req_2__VAL_5 =
	     { csr_regfile$csr_ret_actions[129:68], 2'b0 } ;
  assign MUX_near_mem$imem_req_2__VAL_6 = { rg_next_pc[63:2], 2'b0 } ;
  assign MUX_near_mem$imem_req_2__VAL_7 =
	     { csr_regfile$csr_trap_actions[193:132], 2'b0 } ;
  assign MUX_rg_state$write_1__VAL_1 =
	     csr_regfile$access_permitted_1 ? 4'd4 : 4'd3 ;
  assign MUX_rg_state$write_1__VAL_2 =
	     csr_regfile$access_permitted_2 ? 4'd4 : 4'd3 ;
  assign MUX_stage1_rg_full$write_1__VAL_2 =
	     NOT_rg_halt_672_696_AND_NOT_csr_regfile_interr_ETC___d1803 ||
	     (rg_halt || csr_regfile$interrupt_pending[4] ||
	      IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 !=
	      2'd2 &&
	      IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 !=
	      2'd0 ||
	      NOT_near_mem_imem_valid_87_OR_NOT_near_mem_ime_ETC___d1699) &&
	     stage1_rg_full ;
  assign MUX_stage2_rg_full$write_1__VAL_2 =
	     !rg_halt && !csr_regfile$interrupt_pending[4] &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d1153 ||
	     IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 !=
	     2'd2 &&
	     IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 !=
	     2'd0 ;

  // register cfg_logdelay
  assign cfg_logdelay$D_IN = set_verbosity_logdelay ;
  assign cfg_logdelay$EN = EN_set_verbosity ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN = set_verbosity_verbosity ;
  assign cfg_verbosity$EN = EN_set_verbosity ;

  // register imem_rg_f3
  assign imem_rg_f3$D_IN = 3'b010 ;
  assign imem_rg_f3$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_rg_halt_672_696_AND_NOT_csr_regfile_interr_ETC___d1803 ||
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_reset_complete ;

  // register imem_rg_instr_15_0
  assign imem_rg_instr_15_0$D_IN = near_mem$imem_instr[31:16] ;
  assign imem_rg_instr_15_0$EN = WILL_FIRE_RL_imem_rl_fetch_next_32b ;

  // register imem_rg_mstatus_MXR
  assign imem_rg_mstatus_MXR$D_IN =
	     (MUX_imem_rg_f3$write_1__SEL_1 ||
	      MUX_imem_rg_mstatus_MXR$write_1__SEL_2) ?
	       csr_regfile$read_mstatus[19] :
	       csr_regfile$csr_trap_actions[85] ;
  assign imem_rg_mstatus_MXR$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_rg_halt_672_696_AND_NOT_csr_regfile_interr_ETC___d1803 ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_reset_complete ||
	     WILL_FIRE_RL_rl_stage1_interrupt ;

  // register imem_rg_pc
  always@(MUX_imem_rg_f3$write_1__SEL_1 or
	  x_out_next_pc__h13436 or
	  WILL_FIRE_RL_rl_reset_complete or
	  pc_reset_value or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  MUX_imem_rg_pc$write_1__SEL_4 or
	  csr_regfile$csr_trap_actions or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  csr_regfile$csr_ret_actions or
	  MUX_imem_rg_pc$write_1__SEL_6 or rg_next_pc)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_f3$write_1__SEL_1: imem_rg_pc$D_IN = x_out_next_pc__h13436;
      WILL_FIRE_RL_rl_reset_complete: imem_rg_pc$D_IN = pc_reset_value;
      WILL_FIRE_RL_rl_stage1_restart_after_csrrx:
	  imem_rg_pc$D_IN = x_out_next_pc__h13436;
      MUX_imem_rg_pc$write_1__SEL_4:
	  imem_rg_pc$D_IN = csr_regfile$csr_trap_actions[193:130];
      WILL_FIRE_RL_rl_stage1_xRET:
	  imem_rg_pc$D_IN = csr_regfile$csr_ret_actions[129:66];
      MUX_imem_rg_pc$write_1__SEL_6: imem_rg_pc$D_IN = rg_next_pc;
      default: imem_rg_pc$D_IN =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign imem_rg_pc$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_rg_halt_672_696_AND_NOT_csr_regfile_interr_ETC___d1803 ||
	     WILL_FIRE_RL_rl_reset_complete ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ;

  // register imem_rg_priv
  always@(WILL_FIRE_RL_rl_stage1_xRET or
	  csr_regfile$csr_ret_actions or
	  MUX_imem_rg_pc$write_1__SEL_4 or
	  csr_regfile$csr_trap_actions or
	  MUX_imem_rg_f3$write_1__SEL_1 or
	  MUX_imem_rg_priv$write_1__SEL_2 or rg_cur_priv)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_stage1_xRET:
	  imem_rg_priv$D_IN = csr_regfile$csr_ret_actions[65:64];
      MUX_imem_rg_pc$write_1__SEL_4:
	  imem_rg_priv$D_IN = csr_regfile$csr_trap_actions[1:0];
      MUX_imem_rg_f3$write_1__SEL_1 || MUX_imem_rg_priv$write_1__SEL_2:
	  imem_rg_priv$D_IN = rg_cur_priv;
      default: imem_rg_priv$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign imem_rg_priv$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_rg_halt_672_696_AND_NOT_csr_regfile_interr_ETC___d1803 ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_reset_complete ||
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_xRET ;

  // register imem_rg_satp
  assign imem_rg_satp$D_IN = csr_regfile$read_satp ;
  assign imem_rg_satp$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_rg_halt_672_696_AND_NOT_csr_regfile_interr_ETC___d1803 ||
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_reset_complete ;

  // register imem_rg_sstatus_SUM
  assign imem_rg_sstatus_SUM$D_IN =
	     (MUX_imem_rg_f3$write_1__SEL_1 ||
	      MUX_imem_rg_mstatus_MXR$write_1__SEL_2) ?
	       csr_regfile$read_sstatus[18] :
	       csr_regfile$csr_trap_actions[84] ;
  assign imem_rg_sstatus_SUM$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_rg_halt_672_696_AND_NOT_csr_regfile_interr_ETC___d1803 ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_reset_complete ||
	     WILL_FIRE_RL_rl_stage1_interrupt ;

  // register rg_cur_priv
  always@(MUX_imem_rg_pc$write_1__SEL_4 or
	  csr_regfile$csr_trap_actions or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  csr_regfile$csr_ret_actions or WILL_FIRE_RL_rl_reset_start)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_pc$write_1__SEL_4:
	  rg_cur_priv$D_IN = csr_regfile$csr_trap_actions[1:0];
      WILL_FIRE_RL_rl_stage1_xRET:
	  rg_cur_priv$D_IN = csr_regfile$csr_ret_actions[65:64];
      WILL_FIRE_RL_rl_reset_start: rg_cur_priv$D_IN = 2'b11;
      default: rg_cur_priv$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign rg_cur_priv$EN =
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_halt
  assign rg_halt$D_IN = 1'd0 ;
  assign rg_halt$EN = CAN_FIRE_RL_rl_reset_start ;

  // register rg_next_pc
  assign rg_next_pc$D_IN = x_out_next_pc__h13436 ;
  assign rg_next_pc$EN =
	     WILL_FIRE_RL_rl_stage1_WFI ||
	     WILL_FIRE_RL_rl_stage1_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ;

  // register rg_start_CPI_cycles
  assign rg_start_CPI_cycles$D_IN = csr_regfile$read_csr_mcycle ;
  assign rg_start_CPI_cycles$EN = CAN_FIRE_RL_rl_reset_complete ;

  // register rg_start_CPI_instrs
  assign rg_start_CPI_instrs$D_IN = csr_regfile$read_csr_minstret ;
  assign rg_start_CPI_instrs$EN = CAN_FIRE_RL_rl_reset_complete ;

  // register rg_state
  always@(WILL_FIRE_RL_rl_stage1_CSRR_W or
	  MUX_rg_state$write_1__VAL_1 or
	  WILL_FIRE_RL_rl_stage1_CSRR_S_or_C or
	  MUX_rg_state$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_reset_from_WFI or
	  WILL_FIRE_RL_rl_reset_start or
	  MUX_rg_state$write_1__SEL_5 or
	  WILL_FIRE_RL_rl_stage1_FENCE_I or
	  WILL_FIRE_RL_rl_stage1_FENCE or
	  WILL_FIRE_RL_rl_stage1_SFENCE_VMA or WILL_FIRE_RL_rl_stage1_WFI)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_stage1_CSRR_W:
	  rg_state$D_IN = MUX_rg_state$write_1__VAL_1;
      WILL_FIRE_RL_rl_stage1_CSRR_S_or_C:
	  rg_state$D_IN = MUX_rg_state$write_1__VAL_2;
      WILL_FIRE_RL_rl_reset_from_WFI: rg_state$D_IN = 4'd0;
      WILL_FIRE_RL_rl_reset_start: rg_state$D_IN = 4'd1;
      MUX_rg_state$write_1__SEL_5: rg_state$D_IN = 4'd2;
      WILL_FIRE_RL_rl_stage1_FENCE_I: rg_state$D_IN = 4'd5;
      WILL_FIRE_RL_rl_stage1_FENCE: rg_state$D_IN = 4'd6;
      WILL_FIRE_RL_rl_stage1_SFENCE_VMA: rg_state$D_IN = 4'd7;
      WILL_FIRE_RL_rl_stage1_WFI: rg_state$D_IN = 4'd8;
      default: rg_state$D_IN = 4'b1010 /* unspecified value */ ;
    endcase
  end
  assign rg_state$EN =
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_reset_from_WFI ||
	     WILL_FIRE_RL_rl_reset_start ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_reset_complete ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_stage1_WFI ;

  // register stage1_rg_full
  always@(WILL_FIRE_RL_stage1_rl_reset or
	  WILL_FIRE_RL_rl_pipe or
	  MUX_stage1_rg_full$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_stage1_interrupt or
	  WILL_FIRE_RL_rl_stage1_trap or
	  WILL_FIRE_RL_rl_WFI_resume or
	  WILL_FIRE_RL_rl_finish_SFENCE_VMA or
	  WILL_FIRE_RL_rl_finish_FENCE or
	  WILL_FIRE_RL_rl_finish_FENCE_I or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  WILL_FIRE_RL_rl_stage2_nonpipe or WILL_FIRE_RL_rl_reset_complete)
  case (1'b1)
    WILL_FIRE_RL_stage1_rl_reset: stage1_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_pipe:
	stage1_rg_full$D_IN = MUX_stage1_rg_full$write_1__VAL_2;
    WILL_FIRE_RL_rl_stage1_interrupt || WILL_FIRE_RL_rl_stage1_trap ||
    WILL_FIRE_RL_rl_WFI_resume ||
    WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
    WILL_FIRE_RL_rl_finish_FENCE ||
    WILL_FIRE_RL_rl_finish_FENCE_I ||
    WILL_FIRE_RL_rl_stage1_xRET ||
    WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
    WILL_FIRE_RL_rl_stage2_nonpipe ||
    WILL_FIRE_RL_rl_reset_complete:
	stage1_rg_full$D_IN = 1'd1;
    default: stage1_rg_full$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stage1_rg_full$EN =
	     WILL_FIRE_RL_rl_pipe || WILL_FIRE_RL_stage1_rl_reset ||
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_reset_complete ;

  // register stage2_rg_full
  always@(WILL_FIRE_RL_stage2_rl_reset or
	  WILL_FIRE_RL_rl_pipe or
	  MUX_stage2_rg_full$write_1__VAL_2 or WILL_FIRE_RL_rl_stage2_nonpipe)
  case (1'b1)
    WILL_FIRE_RL_stage2_rl_reset: stage2_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_pipe:
	stage2_rg_full$D_IN = MUX_stage2_rg_full$write_1__VAL_2;
    WILL_FIRE_RL_rl_stage2_nonpipe: stage2_rg_full$D_IN = 1'd0;
    default: stage2_rg_full$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stage2_rg_full$EN =
	     WILL_FIRE_RL_rl_pipe || WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_stage2_rl_reset ;

  // register stage2_rg_stage2
  assign stage2_rg_stage2$D_IN =
	     { rg_cur_priv,
	       imem_rg_pc,
	       x_out_data_to_stage2_instr__h13470,
	       IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1310,
	       x_out_data_to_stage2_rd__h13472,
	       x_out_data_to_stage2_addr__h13473,
	       x_out_data_to_stage2_val1__h13474,
	       x_out_data_to_stage2_val2__h13475,
	       x_out_data_to_stage2_val3__h13476,
	       _theResult____h3332[6:0] == 7'b0000111 ||
	       (_theResult____h3332[6:0] == 7'b1010011 ||
		_theResult____h3332[6:0] == 7'b1000011 ||
		_theResult____h3332[6:0] == 7'b1000111 ||
		_theResult____h3332[6:0] == 7'b1001011 ||
		_theResult____h3332[6:0] == 7'b1001111) &&
	       (_theResult____h3332[31:25] != 7'h61 ||
		_theResult____h3332[24:20] != 5'd0) &&
	       (_theResult____h3332[31:25] != 7'h61 ||
		_theResult____h3332[24:20] != 5'd1) &&
	       (_theResult____h3332[31:25] != 7'h61 ||
		_theResult____h3332[24:20] != 5'd2) &&
	       (_theResult____h3332[31:25] != 7'h61 ||
		_theResult____h3332[24:20] != 5'd3) &&
	       _theResult____h3332[31:25] != 7'h71 &&
	       _theResult____h3332[31:25] != 7'h51 &&
	       (_theResult____h3332[31:25] != 7'h60 ||
		_theResult____h3332[24:20] != 5'd2) &&
	       (_theResult____h3332[31:25] != 7'h60 ||
		_theResult____h3332[24:20] != 5'd3) &&
	       (_theResult____h3332[31:25] != 7'h60 ||
		_theResult____h3332[24:20] != 5'd0) &&
	       (_theResult____h3332[31:25] != 7'h60 ||
		_theResult____h3332[24:20] != 5'd1) &&
	       _theResult____h3332[31:25] != 7'h70 &&
	       _theResult____h3332[31:25] != 7'h50,
	       x_out_data_to_stage2_rounding_mode__h13478 } ;
  assign stage2_rg_stage2$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_rg_halt_672_696_AND_NOT_csr_regfile_interr_ETC___d1743 ;

  // register stage3_rg_full
  assign stage3_rg_full$D_IN =
	     !WILL_FIRE_RL_stage3_rl_reset &&
	     IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 ==
	     2'd2 ;
  assign stage3_rg_full$EN =
	     WILL_FIRE_RL_rl_pipe || WILL_FIRE_RL_stage3_rl_reset ;

  // register stage3_rg_stage3
  assign stage3_rg_stage3$D_IN =
	     { stage2_rg_stage2[363:268],
	       stage2_rg_stage2[365:364],
	       stage2_rg_stage2[267:265] == 3'd0 ||
	       IF_stage2_rg_stage2_5_BITS_267_TO_265_6_EQ_1_8_ETC___d156,
	       x_out_data_to_stage3_rd__h4901,
	       stage2_rg_stage2[267:265] != 3'd0 &&
	       stage2_rg_stage2[267:265] != 3'd1 &&
	       stage2_rg_stage2[267:265] != 3'd4 &&
	       stage2_rg_stage2[267:265] != 3'd2 &&
	       stage2_rg_stage2[267:265] != 3'd3,
	       stage2_rg_stage2[267:265] != 3'd0 &&
	       CASE_stage2_rg_stage2_BITS_267_TO_265_1_stage2_ETC__q27,
	       x_out_data_to_stage3_fpr_flags__h4904,
	       x_out_data_to_stage3_rd_val__h4905 } ;
  assign stage3_rg_stage3$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 ==
	     2'd2 ;

  // submodule csr_regfile
  assign csr_regfile$access_permitted_1_csr_addr =
	     x_out_data_to_stage2_instr__h13470[31:20] ;
  assign csr_regfile$access_permitted_1_priv = rg_cur_priv ;
  assign csr_regfile$access_permitted_1_read_not_write = 1'd0 ;
  assign csr_regfile$access_permitted_2_csr_addr =
	     x_out_data_to_stage2_instr__h13470[31:20] ;
  assign csr_regfile$access_permitted_2_priv = rg_cur_priv ;
  assign csr_regfile$access_permitted_2_read_not_write =
	     rs1_val__h22340 == 64'd0 ;
  assign csr_regfile$csr_counter_read_fault_csr_addr = 12'h0 ;
  assign csr_regfile$csr_counter_read_fault_priv = 2'h0 ;
  always@(IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224)
  begin
    case (IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224)
      4'd7: csr_regfile$csr_ret_actions_from_priv = 2'b11;
      4'd8: csr_regfile$csr_ret_actions_from_priv = 2'b01;
      default: csr_regfile$csr_ret_actions_from_priv = 2'b0;
    endcase
  end
  always@(WILL_FIRE_RL_rl_stage1_trap or
	  x_out_trap_info_exc_code__h16549 or
	  WILL_FIRE_RL_rl_stage1_interrupt or
	  csr_regfile$interrupt_pending or
	  WILL_FIRE_RL_rl_stage2_nonpipe or x_out_trap_info_exc_code__h5146)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_stage1_trap:
	  csr_regfile$csr_trap_actions_exc_code =
	      x_out_trap_info_exc_code__h16549;
      WILL_FIRE_RL_rl_stage1_interrupt:
	  csr_regfile$csr_trap_actions_exc_code =
	      csr_regfile$interrupt_pending[3:0];
      WILL_FIRE_RL_rl_stage2_nonpipe:
	  csr_regfile$csr_trap_actions_exc_code =
	      x_out_trap_info_exc_code__h5146;
      default: csr_regfile$csr_trap_actions_exc_code =
		   4'b1010 /* unspecified value */ ;
    endcase
  end
  assign csr_regfile$csr_trap_actions_from_priv = rg_cur_priv ;
  assign csr_regfile$csr_trap_actions_interrupt =
	     !WILL_FIRE_RL_rl_stage1_trap && !WILL_FIRE_RL_rl_stage2_nonpipe ;
  assign csr_regfile$csr_trap_actions_pc =
	     (WILL_FIRE_RL_rl_stage1_trap ||
	      WILL_FIRE_RL_rl_stage1_interrupt) ?
	       imem_rg_pc :
	       value__h5109 ;
  always@(WILL_FIRE_RL_rl_stage1_trap or
	  value__h16605 or
	  WILL_FIRE_RL_rl_stage1_interrupt or
	  WILL_FIRE_RL_rl_stage2_nonpipe or value__h5170)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_stage1_trap:
	  csr_regfile$csr_trap_actions_xtval = value__h16605;
      WILL_FIRE_RL_rl_stage1_interrupt:
	  csr_regfile$csr_trap_actions_xtval = 64'd0;
      WILL_FIRE_RL_rl_stage2_nonpipe:
	  csr_regfile$csr_trap_actions_xtval = value__h5170;
      default: csr_regfile$csr_trap_actions_xtval =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign csr_regfile$external_interrupt_req_set_not_clear =
	     external_interrupt_req_set_not_clear ;
  assign csr_regfile$interrupt_pending_cur_priv = rg_cur_priv ;
  assign csr_regfile$mav_csr_write_csr_addr =
	     x_out_data_to_stage2_instr__h13470[31:20] ;
  assign csr_regfile$mav_csr_write_word =
	     MUX_csr_regfile$mav_csr_write_1__SEL_1 ?
	       rs1_val__h21847 :
	       MUX_csr_regfile$mav_csr_write_2__VAL_2 ;
  assign csr_regfile$mav_read_csr_csr_addr = 12'h0 ;
  assign csr_regfile$read_csr_csr_addr =
	     x_out_data_to_stage2_instr__h13470[31:20] ;
  assign csr_regfile$read_csr_port2_csr_addr = 12'h0 ;
  assign csr_regfile$software_interrupt_req_set_not_clear =
	     near_mem$get_sw_interrupt_req_get ;
  assign csr_regfile$timer_interrupt_req_set_not_clear =
	     near_mem$get_timer_interrupt_req_get ;
  assign csr_regfile$update_fcsr_fflags_flags = stage3_rg_stage3[68:64] ;
  assign csr_regfile$EN_server_reset_request_put =
	     CAN_FIRE_RL_rl_reset_start ;
  assign csr_regfile$EN_server_reset_response_get =
	     CAN_FIRE_RL_rl_reset_complete ;
  assign csr_regfile$EN_mav_read_csr = 1'b0 ;
  assign csr_regfile$EN_mav_csr_write =
	     WILL_FIRE_RL_rl_stage1_CSRR_W &&
	     csr_regfile$access_permitted_1 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	     csr_regfile$access_permitted_2 &&
	     x_out_data_to_stage2_instr__h13470[19:15] != 5'd0 ;
  assign csr_regfile$EN_update_fcsr_fflags =
	     WILL_FIRE_RL_rl_pipe && stage3_rg_full && stage3_rg_stage3[76] &&
	     stage3_rg_stage3[70] ;
  assign csr_regfile$EN_csr_trap_actions =
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ;
  assign csr_regfile$EN_csr_ret_actions = CAN_FIRE_RL_rl_stage1_xRET ;
  assign csr_regfile$EN_csr_minstret_incr =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 ==
	     2'd2 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W &&
	     csr_regfile$access_permitted_1 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	     csr_regfile$access_permitted_2 ||
	     WILL_FIRE_RL_rl_stage1_WFI ||
	     WILL_FIRE_RL_rl_stage1_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ;
  assign csr_regfile$EN_external_interrupt_req = EN_external_interrupt_req ;
  assign csr_regfile$EN_timer_interrupt_req =
	     near_mem$RDY_get_timer_interrupt_req_get ;
  assign csr_regfile$EN_software_interrupt_req =
	     near_mem$RDY_get_sw_interrupt_req_get ;
  assign csr_regfile$EN_debug = 1'b0 ;

  // submodule f_reset_reqs
  assign f_reset_reqs$ENQ = EN_hart0_server_reset_request_put ;
  assign f_reset_reqs$DEQ =
	     gpr_regfile$RDY_server_reset_request_put &&
	     fpr_regfile_RDY_server_reset_request_put__632__ETC___d1644 &&
	     rg_state == 4'd0 ;
  assign f_reset_reqs$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$ENQ =
	     NOT_near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_p_ETC___d1665 &&
	     rg_state == 4'd1 ;
  assign f_reset_rsps$DEQ = EN_hart0_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule fpr_regfile
  assign fpr_regfile$read_rs1_port2_rs1 = 5'h0 ;
  assign fpr_regfile$read_rs1_rs1 = _theResult____h3332[19:15] ;
  assign fpr_regfile$read_rs2_rs2 = _theResult____h3332[24:20] ;
  assign fpr_regfile$read_rs3_rs3 = _theResult____h3332[31:27] ;
  assign fpr_regfile$write_rd_rd = stage3_rg_stage3[75:71] ;
  assign fpr_regfile$write_rd_rd_val = stage3_rg_stage3[63:0] ;
  assign fpr_regfile$EN_server_reset_request_put =
	     CAN_FIRE_RL_rl_reset_start ;
  assign fpr_regfile$EN_server_reset_response_get =
	     CAN_FIRE_RL_rl_reset_complete ;
  assign fpr_regfile$EN_write_rd =
	     WILL_FIRE_RL_rl_pipe && stage3_rg_full && stage3_rg_stage3[76] &&
	     stage3_rg_stage3[69] ;

  // submodule gpr_regfile
  assign gpr_regfile$read_rs1_port2_rs1 = 5'h0 ;
  assign gpr_regfile$read_rs1_rs1 = _theResult____h3332[19:15] ;
  assign gpr_regfile$read_rs2_rs2 = _theResult____h3332[24:20] ;
  assign gpr_regfile$write_rd_rd =
	     MUX_gpr_regfile$write_rd_1__SEL_3 ?
	       stage3_rg_stage3[75:71] :
	       x_out_data_to_stage2_instr__h13470[11:7] ;
  assign gpr_regfile$write_rd_rd_val =
	     (MUX_csr_regfile$mav_csr_write_1__SEL_1 ||
	      MUX_gpr_regfile$write_rd_1__SEL_2) ?
	       csr_regfile$read_csr[63:0] :
	       stage3_rg_stage3[63:0] ;
  assign gpr_regfile$EN_server_reset_request_put =
	     CAN_FIRE_RL_rl_reset_start ;
  assign gpr_regfile$EN_server_reset_response_get =
	     CAN_FIRE_RL_rl_reset_complete ;
  assign gpr_regfile$EN_write_rd =
	     WILL_FIRE_RL_rl_stage1_CSRR_W &&
	     csr_regfile$access_permitted_1 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	     csr_regfile$access_permitted_2 ||
	     WILL_FIRE_RL_rl_pipe && stage3_rg_full && stage3_rg_stage3[76] &&
	     !stage3_rg_stage3[69] ;

  // submodule near_mem
  assign near_mem$dmem_master_arready = dmem_master_arready ;
  assign near_mem$dmem_master_awready = dmem_master_awready ;
  assign near_mem$dmem_master_bresp = dmem_master_bresp ;
  assign near_mem$dmem_master_bvalid = dmem_master_bvalid ;
  assign near_mem$dmem_master_rdata = dmem_master_rdata ;
  assign near_mem$dmem_master_rresp = dmem_master_rresp ;
  assign near_mem$dmem_master_rvalid = dmem_master_rvalid ;
  assign near_mem$dmem_master_wready = dmem_master_wready ;
  assign near_mem$dmem_req_addr = x_out_data_to_stage2_addr__h13473 ;
  assign near_mem$dmem_req_amo_funct7 =
	     x_out_data_to_stage2_val1__h13474[6:0] ;
  assign near_mem$dmem_req_f3 = x_out_data_to_stage2_instr__h13470[14:12] ;
  assign near_mem$dmem_req_mstatus_MXR = csr_regfile$read_mstatus[19] ;
  always@(IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1310)
  begin
    case (IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1310)
      3'd1: near_mem$dmem_req_op = 2'd0;
      3'd2: near_mem$dmem_req_op = 2'd1;
      default: near_mem$dmem_req_op = 2'd2;
    endcase
  end
  assign near_mem$dmem_req_priv =
	     csr_regfile$read_mstatus[17] ?
	       csr_regfile$read_mstatus[12:11] :
	       rg_cur_priv ;
  assign near_mem$dmem_req_satp = csr_regfile$read_satp ;
  assign near_mem$dmem_req_sstatus_SUM = csr_regfile$read_sstatus[18] ;
  assign near_mem$dmem_req_store_value = x_out_data_to_stage2_val2__h13475 ;
  assign near_mem$imem_master_arready = imem_master_arready ;
  assign near_mem$imem_master_awready = imem_master_awready ;
  assign near_mem$imem_master_bresp = imem_master_bresp ;
  assign near_mem$imem_master_bvalid = imem_master_bvalid ;
  assign near_mem$imem_master_rdata = imem_master_rdata ;
  assign near_mem$imem_master_rresp = imem_master_rresp ;
  assign near_mem$imem_master_rvalid = imem_master_rvalid ;
  assign near_mem$imem_master_wready = imem_master_wready ;
  always@(MUX_imem_rg_f3$write_1__SEL_1 or
	  MUX_near_mem$imem_req_2__VAL_1 or
	  WILL_FIRE_RL_imem_rl_fetch_next_32b or
	  next_pc___1__h16712 or
	  WILL_FIRE_RL_rl_reset_complete or
	  MUX_near_mem$imem_req_2__VAL_3 or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  MUX_near_mem$imem_req_2__VAL_5 or
	  MUX_imem_rg_pc$write_1__SEL_6 or
	  MUX_near_mem$imem_req_2__VAL_6 or
	  MUX_near_mem$imem_req_1__SEL_7 or
	  MUX_near_mem$imem_req_2__VAL_7 or WILL_FIRE_RL_rl_stage1_interrupt)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_f3$write_1__SEL_1:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_1;
      WILL_FIRE_RL_imem_rl_fetch_next_32b:
	  near_mem$imem_req_addr = next_pc___1__h16712;
      WILL_FIRE_RL_rl_reset_complete:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_3;
      WILL_FIRE_RL_rl_stage1_restart_after_csrrx:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_1;
      WILL_FIRE_RL_rl_stage1_xRET:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_5;
      MUX_imem_rg_pc$write_1__SEL_6:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_6;
      MUX_near_mem$imem_req_1__SEL_7:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_7;
      WILL_FIRE_RL_rl_stage1_interrupt:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_7;
      default: near_mem$imem_req_addr =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign near_mem$imem_req_f3 =
	     WILL_FIRE_RL_imem_rl_fetch_next_32b ? imem_rg_f3 : 3'b010 ;
  always@(MUX_imem_rg_f3$write_1__SEL_1 or
	  WILL_FIRE_RL_rl_reset_complete or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  MUX_imem_rg_pc$write_1__SEL_6 or
	  MUX_near_mem$imem_req_1__SEL_7 or
	  csr_regfile$read_mstatus or
	  WILL_FIRE_RL_rl_stage1_interrupt or
	  csr_regfile$csr_trap_actions or
	  WILL_FIRE_RL_imem_rl_fetch_next_32b or imem_rg_mstatus_MXR)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_f3$write_1__SEL_1 || WILL_FIRE_RL_rl_reset_complete ||
      WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
      WILL_FIRE_RL_rl_stage1_xRET ||
      MUX_imem_rg_pc$write_1__SEL_6 ||
      MUX_near_mem$imem_req_1__SEL_7:
	  near_mem$imem_req_mstatus_MXR = csr_regfile$read_mstatus[19];
      WILL_FIRE_RL_rl_stage1_interrupt:
	  near_mem$imem_req_mstatus_MXR = csr_regfile$csr_trap_actions[85];
      WILL_FIRE_RL_imem_rl_fetch_next_32b:
	  near_mem$imem_req_mstatus_MXR = imem_rg_mstatus_MXR;
      default: near_mem$imem_req_mstatus_MXR = 1'b0 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_rl_stage1_xRET or
	  csr_regfile$csr_ret_actions or
	  MUX_near_mem$imem_req_1__SEL_7 or
	  WILL_FIRE_RL_rl_stage1_interrupt or
	  csr_regfile$csr_trap_actions or
	  MUX_imem_rg_f3$write_1__SEL_1 or
	  WILL_FIRE_RL_rl_reset_complete or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  MUX_imem_rg_pc$write_1__SEL_6 or
	  rg_cur_priv or WILL_FIRE_RL_imem_rl_fetch_next_32b or imem_rg_priv)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_stage1_xRET:
	  near_mem$imem_req_priv = csr_regfile$csr_ret_actions[65:64];
      MUX_near_mem$imem_req_1__SEL_7 || WILL_FIRE_RL_rl_stage1_interrupt:
	  near_mem$imem_req_priv = csr_regfile$csr_trap_actions[1:0];
      MUX_imem_rg_f3$write_1__SEL_1 || WILL_FIRE_RL_rl_reset_complete ||
      WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
      MUX_imem_rg_pc$write_1__SEL_6:
	  near_mem$imem_req_priv = rg_cur_priv;
      WILL_FIRE_RL_imem_rl_fetch_next_32b:
	  near_mem$imem_req_priv = imem_rg_priv;
      default: near_mem$imem_req_priv = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign near_mem$imem_req_satp =
	     WILL_FIRE_RL_imem_rl_fetch_next_32b ?
	       imem_rg_satp :
	       csr_regfile$read_satp ;
  always@(MUX_imem_rg_f3$write_1__SEL_1 or
	  WILL_FIRE_RL_rl_reset_complete or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  MUX_imem_rg_pc$write_1__SEL_6 or
	  MUX_near_mem$imem_req_1__SEL_7 or
	  csr_regfile$read_sstatus or
	  WILL_FIRE_RL_rl_stage1_interrupt or
	  csr_regfile$csr_trap_actions or
	  WILL_FIRE_RL_imem_rl_fetch_next_32b or imem_rg_sstatus_SUM)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_f3$write_1__SEL_1 || WILL_FIRE_RL_rl_reset_complete ||
      WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
      WILL_FIRE_RL_rl_stage1_xRET ||
      MUX_imem_rg_pc$write_1__SEL_6 ||
      MUX_near_mem$imem_req_1__SEL_7:
	  near_mem$imem_req_sstatus_SUM = csr_regfile$read_sstatus[18];
      WILL_FIRE_RL_rl_stage1_interrupt:
	  near_mem$imem_req_sstatus_SUM = csr_regfile$csr_trap_actions[84];
      WILL_FIRE_RL_imem_rl_fetch_next_32b:
	  near_mem$imem_req_sstatus_SUM = imem_rg_sstatus_SUM;
      default: near_mem$imem_req_sstatus_SUM = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign near_mem$near_mem_slave_araddr = near_mem_slave_araddr ;
  assign near_mem$near_mem_slave_arprot = near_mem_slave_arprot ;
  assign near_mem$near_mem_slave_arvalid = near_mem_slave_arvalid ;
  assign near_mem$near_mem_slave_awaddr = near_mem_slave_awaddr ;
  assign near_mem$near_mem_slave_awprot = near_mem_slave_awprot ;
  assign near_mem$near_mem_slave_awvalid = near_mem_slave_awvalid ;
  assign near_mem$near_mem_slave_bready = near_mem_slave_bready ;
  assign near_mem$near_mem_slave_rready = near_mem_slave_rready ;
  assign near_mem$near_mem_slave_wdata = near_mem_slave_wdata ;
  assign near_mem$near_mem_slave_wstrb = near_mem_slave_wstrb ;
  assign near_mem$near_mem_slave_wvalid = near_mem_slave_wvalid ;
  assign near_mem$server_fence_request_put =
	     8'b10101010 /* unspecified value */  ;
  assign near_mem$EN_server_reset_request_put = CAN_FIRE_RL_rl_reset_start ;
  assign near_mem$EN_server_reset_response_get =
	     CAN_FIRE_RL_rl_reset_complete ;
  assign near_mem$EN_imem_req =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_rg_halt_672_696_AND_NOT_csr_regfile_interr_ETC___d1803 ||
	     WILL_FIRE_RL_imem_rl_fetch_next_32b ||
	     WILL_FIRE_RL_rl_reset_complete ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_interrupt ;
  assign near_mem$EN_dmem_req =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_rg_halt_672_696_AND_NOT_csr_regfile_interr_ETC___d1743 &&
	     (IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1310 ==
	      3'd1 ||
	      IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1310 ==
	      3'd2 ||
	      IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1310 ==
	      3'd4) ;
  assign near_mem$EN_server_fence_i_request_put =
	     MUX_rg_state$write_1__SEL_6 ;
  assign near_mem$EN_server_fence_i_response_get =
	     CAN_FIRE_RL_rl_finish_FENCE_I ;
  assign near_mem$EN_server_fence_request_put = MUX_rg_state$write_1__SEL_7 ;
  assign near_mem$EN_server_fence_response_get = CAN_FIRE_RL_rl_finish_FENCE ;
  assign near_mem$EN_sfence_vma = MUX_rg_state$write_1__SEL_8 ;
  assign near_mem$EN_get_timer_interrupt_req_get =
	     near_mem$RDY_get_timer_interrupt_req_get ;
  assign near_mem$EN_get_sw_interrupt_req_get =
	     near_mem$RDY_get_sw_interrupt_req_get ;

  // submodule stage1_f_reset_reqs
  assign stage1_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stage1_f_reset_reqs$DEQ = CAN_FIRE_RL_stage1_rl_reset ;
  assign stage1_f_reset_reqs$CLR = 1'b0 ;

  // submodule stage1_f_reset_rsps
  assign stage1_f_reset_rsps$ENQ = CAN_FIRE_RL_stage1_rl_reset ;
  assign stage1_f_reset_rsps$DEQ = CAN_FIRE_RL_rl_reset_complete ;
  assign stage1_f_reset_rsps$CLR = 1'b0 ;

  // submodule stage2_f_reset_reqs
  assign stage2_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stage2_f_reset_reqs$DEQ = CAN_FIRE_RL_stage2_rl_reset ;
  assign stage2_f_reset_reqs$CLR = 1'b0 ;

  // submodule stage2_f_reset_rsps
  assign stage2_f_reset_rsps$ENQ = CAN_FIRE_RL_stage2_rl_reset ;
  assign stage2_f_reset_rsps$DEQ = CAN_FIRE_RL_rl_reset_complete ;
  assign stage2_f_reset_rsps$CLR = 1'b0 ;

  // submodule stage2_fbox
  assign stage2_fbox$req_f7 = x_out_data_to_stage2_instr__h13470[31:25] ;
  assign stage2_fbox$req_opcode = x_out_data_to_stage2_instr__h13470[6:0] ;
  assign stage2_fbox$req_rm = x_out_data_to_stage2_rounding_mode__h13478 ;
  assign stage2_fbox$req_rs2 = x_out_data_to_stage2_instr__h13470[24:20] ;
  assign stage2_fbox$req_v1 = x_out_data_to_stage2_val1__h13474 ;
  assign stage2_fbox$req_v2 = x_out_data_to_stage2_val2__h13475 ;
  assign stage2_fbox$req_v3 = x_out_data_to_stage2_val3__h13476 ;
  assign stage2_fbox$set_verbosity_verbosity = 4'h0 ;
  assign stage2_fbox$EN_set_verbosity = 1'b0 ;
  assign stage2_fbox$EN_req =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_rg_halt_672_696_AND_NOT_csr_regfile_interr_ETC___d1743 &&
	     IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1310 ==
	     3'd5 ;

  // submodule stage2_mbox
  assign stage2_mbox$req_f3 = x_out_data_to_stage2_instr__h13470[14:12] ;
  assign stage2_mbox$req_is_OP_not_OP_32 = !_theResult____h3332[3] ;
  assign stage2_mbox$req_v1 = x_out_data_to_stage2_val1__h13474 ;
  assign stage2_mbox$req_v2 = x_out_data_to_stage2_val2__h13475 ;
  assign stage2_mbox$set_verbosity_verbosity = 4'h0 ;
  assign stage2_mbox$EN_set_verbosity = 1'b0 ;
  assign stage2_mbox$EN_req_reset = 1'b0 ;
  assign stage2_mbox$EN_rsp_reset = 1'b0 ;
  assign stage2_mbox$EN_req =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_rg_halt_672_696_AND_NOT_csr_regfile_interr_ETC___d1743 &&
	     IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1310 ==
	     3'd3 ;

  // submodule stage3_f_reset_reqs
  assign stage3_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stage3_f_reset_reqs$DEQ = CAN_FIRE_RL_stage3_rl_reset ;
  assign stage3_f_reset_reqs$CLR = 1'b0 ;

  // submodule stage3_f_reset_rsps
  assign stage3_f_reset_rsps$ENQ = CAN_FIRE_RL_stage3_rl_reset ;
  assign stage3_f_reset_rsps$DEQ = CAN_FIRE_RL_rl_reset_complete ;
  assign stage3_f_reset_rsps$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PL_ETC___d1207 =
	     IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1133 ?
	       4'd0 :
	       4'd11 ;
  assign IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1133 =
	     CASE_theResult__332_BITS_6_TO_0_0b1000011_theR_ETC__q15 &&
	     ((_theResult____h3332[14:12] == 3'b111) ?
		csr_regfile$read_frm != 3'b101 &&
		csr_regfile$read_frm != 3'b110 &&
		csr_regfile$read_frm != 3'b111 :
		_theResult____h3332[14:12] != 3'b101 &&
		_theResult____h3332[14:12] != 3'b110) ;
  assign IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1148 =
	     (_theResult____h3332[6:0] == 7'b1100011) ?
	       (_theResult____h3332[14:12] == 3'b0 ||
		_theResult____h3332[14:12] == 3'b001 ||
		_theResult____h3332[14:12] == 3'b100 ||
		_theResult____h3332[14:12] == 3'b101 ||
		_theResult____h3332[14:12] == 3'b110 ||
		_theResult____h3332[14:12] == 3'b111) &&
	       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d972 :
	       _theResult____h3332[6:0] != 7'b1101111 &&
	       _theResult____h3332[6:0] != 7'b1100111 &&
	       (IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_ETC___d994 ||
		IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1145) ;
  assign IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1150 =
	     (_theResult____h3332[6:0] == 7'b1100011) ?
	       (_theResult____h3332[14:12] == 3'b0 ||
		_theResult____h3332[14:12] == 3'b001 ||
		_theResult____h3332[14:12] == 3'b100 ||
		_theResult____h3332[14:12] == 3'b101 ||
		_theResult____h3332[14:12] == 3'b110 ||
		_theResult____h3332[14:12] == 3'b111) &&
	       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d664 :
	       _theResult____h3332[6:0] == 7'b1101111 ||
	       _theResult____h3332[6:0] == 7'b1100111 ;
  assign IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1199 =
	     IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_ETC___d1172 ?
	       4'd6 :
	       ((_theResult____h3332[11:7] == 5'd0 &&
		 _theResult____h3332[19:15] == 5'd0) ?
		  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1197 :
		  4'd11) ;
  assign IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1497 =
	     ((_theResult____h3332[6:0] == 7'b0010011 ||
	       _theResult____h3332[6:0] == 7'b0110011) &&
	      (_theResult____h3332[14:12] == 3'b001 ||
	       _theResult____h3332[14:12] == 3'b101)) ?
	       alu_outputs___1_val1__h13771 :
	       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1496 ;
  assign IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1498 =
	     ((_theResult____h3332[6:0] == 7'b0110011 ||
	       _theResult____h3332[6:0] == 7'b0111011) &&
	      _theResult____h3332[31:25] == 7'b0000001) ?
	       rs1_val_bypassed__h3340 :
	       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1497 ;
  assign IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1515 =
	     ((_theResult____h3332[6:0] == 7'b0110011 ||
	       _theResult____h3332[6:0] == 7'b0111011) &&
	      _theResult____h3332[31:25] == 7'b0000001) ?
	       rs2_val_bypassed__h3346 :
	       CASE_theResult__332_BITS_6_TO_0_0b100011_alu_o_ETC__q25 ;
  assign IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1929 =
	     IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1148 ||
	     IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1150 ||
	     near_mem$imem_exc ||
	     IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d966 &&
	     IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d977 ;
  assign IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d653 =
	     rs1_val_bypassed__h3340 == rs2_val_bypassed__h3346 ;
  assign IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d655 =
	     (rs1_val_bypassed__h3340 ^ 64'h8000000000000000) <
	     (rs2_val_bypassed__h3346 ^ 64'h8000000000000000) ;
  assign IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d657 =
	     rs1_val_bypassed__h3340 < rs2_val_bypassed__h3346 ;
  assign IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d951 =
	     CASE_theResult__332_BITS_6_TO_0_0b1000011_NOT__ETC__q12 ||
	     ((_theResult____h3332[14:12] == 3'b111) ?
		csr_regfile$read_frm == 3'b101 ||
		csr_regfile$read_frm == 3'b110 ||
		csr_regfile$read_frm == 3'b111 :
		_theResult____h3332[14:12] == 3'b101 ||
		_theResult____h3332[14:12] == 3'b110) ;
  assign IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d966 =
	     (_theResult____h3332[6:0] == 7'b1100011) ?
	       _theResult____h3332[14:12] != 3'b0 &&
	       _theResult____h3332[14:12] != 3'b001 &&
	       _theResult____h3332[14:12] != 3'b100 &&
	       _theResult____h3332[14:12] != 3'b101 &&
	       _theResult____h3332[14:12] != 3'b110 &&
	       _theResult____h3332[14:12] != 3'b111 ||
	       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d664 :
	       _theResult____h3332[6:0] == 7'b1101111 ||
	       _theResult____h3332[6:0] == 7'b1100111 ||
	       (_theResult____h3332[6:0] != 7'b0110011 ||
		_theResult____h3332[31:25] != 7'b0000001) &&
	       (_theResult____h3332[6:0] != 7'b0111011 ||
		_theResult____h3332[31:25] != 7'b0000001) &&
	       (_theResult____h3332[6:0] != 7'b0010011 &&
		_theResult____h3332[6:0] != 7'b0110011 ||
		_theResult____h3332[14:12] != 3'b001 &&
		_theResult____h3332[14:12] != 3'b101) &&
	       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d963 ;
  assign IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d977 =
	     (_theResult____h3332[6:0] == 7'b1100011) ?
	       _theResult____h3332[14:12] != 3'b0 &&
	       _theResult____h3332[14:12] != 3'b001 &&
	       _theResult____h3332[14:12] != 3'b100 &&
	       _theResult____h3332[14:12] != 3'b101 &&
	       _theResult____h3332[14:12] != 3'b110 &&
	       _theResult____h3332[14:12] != 3'b111 ||
	       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d972 :
	       _theResult____h3332[6:0] != 7'b1101111 &&
	       _theResult____h3332[6:0] != 7'b1100111 ;
  assign IF_NOT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_P_ETC___d1157 =
	     NOT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_ETC___d700 ?
	       4'd11 :
	       4'd0 ;
  assign IF_NOT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_P_ETC___d1160 =
	     (_theResult____h3332[14:12] != 3'b0 &&
	      _theResult____h3332[14:12] != 3'b100 &&
	      _theResult____h3332[14:12] != 3'b001 &&
	      _theResult____h3332[14:12] != 3'b101 &&
	      _theResult____h3332[14:12] != 3'b010 &&
	      _theResult____h3332[14:12] != 3'b110 &&
	      _theResult____h3332[14:12] != 3'b011) ?
	       4'd11 :
	       4'd0 ;
  assign IF_NOT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_P_ETC___d1161 =
	     (_theResult____h3332[14:12] != 3'b0 &&
	      _theResult____h3332[14:12] != 3'b001 &&
	      _theResult____h3332[14:12] != 3'b010 &&
	      _theResult____h3332[14:12] != 3'b011) ?
	       4'd11 :
	       4'd0 ;
  assign IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_ETC___d1001 =
	     _theResult____h3332[14:12] == 3'b0 &&
	     (_theResult____h3332[6:0] != 7'b0110011 ||
	      !_theResult____h3332[30]) ||
	     _theResult____h3332[14:12] == 3'b0 &&
	     _theResult____h3332[6:0] == 7'b0110011 &&
	     _theResult____h3332[30] ||
	     _theResult____h3332[14:12] == 3'b010 ||
	     _theResult____h3332[14:12] == 3'b011 ||
	     _theResult____h3332[14:12] == 3'b100 ||
	     _theResult____h3332[14:12] == 3'b110 ||
	     _theResult____h3332[14:12] == 3'b111 ;
  assign IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_ETC___d1172 =
	     _theResult____h3332[11:7] == 5'd0 &&
	     (rg_cur_priv == 2'b11 ||
	      rg_cur_priv == 2'b01 && !csr_regfile$read_mstatus[20]) &&
	     _theResult____h3332[31:25] == 7'b0001001 ;
  assign IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_ETC___d1369 =
	     NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_88_ETC___d296 ?
	       next_pc___1__h16712 :
	       next_pc__h16710 ;
  assign IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_ETC___d994 =
	     _theResult____h3332[6:0] == 7'b0110011 &&
	     _theResult____h3332[31:25] == 7'b0000001 ||
	     _theResult____h3332[6:0] == 7'b0111011 &&
	     _theResult____h3332[31:25] == 7'b0000001 ||
	     (_theResult____h3332[6:0] == 7'b0010011 ||
	      _theResult____h3332[6:0] == 7'b0110011) &&
	     (_theResult____h3332[14:12] == 3'b001 ||
	      _theResult____h3332[14:12] == 3'b101) ;
  assign IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 =
	     near_mem$imem_exc ?
	       4'd11 :
	       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1222 ;
  assign IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1916 =
	     imem_rg_pc == csr_regfile$csr_trap_actions[193:130] ;
  assign IF_NOT_stage2_rg_full_4_21_OR_stage2_rg_stage2_ETC___d269 =
	     (!stage2_rg_full || stage2_rg_stage2[267:265] == 3'd0) ?
	       2'd0 :
	       CASE_stage2_rg_stage2_BITS_267_TO_265_1_IF_sta_ETC__q3 ;
  assign IF_csr_regfile_read_csr_IF_NOT_stage1_rg_full__ETC___d1862 =
	     csr_regfile$read_csr[63:0] | rs1_val__h22340 ;
  assign IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d559 =
	     (csr_regfile$read_misa[2] && instr__h3330[1:0] == 2'b0 &&
	      instr__h3330[15:13] == 3'b001) ?
	       instr__h11519 :
	       ((csr_regfile$read_misa[2] && instr__h3330[1:0] == 2'b0 &&
		 instr__h3330[15:13] == 3'b101) ?
		  instr__h13182 :
		  32'h0) ;
  assign IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d560 =
	     (csr_regfile$read_misa[2] && instr__h3330[1:0] == 2'b0 &&
	      instr__h3330[15:13] == 3'b111) ?
	       instr__h11670 :
	       IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d559 ;
  assign IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d561 =
	     (csr_regfile$read_misa[2] && instr__h3330[1:0] == 2'b0 &&
	      instr__h3330[15:13] == 3'b011) ?
	       instr__h11519 :
	       IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d560 ;
  assign IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d562 =
	     (csr_regfile$read_misa[2] && instr__h3330[1:0] == 2'b10 &&
	      instr__h3330[15:13] == 3'b111) ?
	       instr__h11320 :
	       IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d561 ;
  assign IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d564 =
	     (csr_regfile$read_misa[2] && instr__h3330[1:0] == 2'b10 &&
	      instr__h3330[15:12] == 4'b1001 &&
	      instr__h3330[11:7] == 5'd0 &&
	      instr__h3330[6:2] == 5'd0) ?
	       instr__h11071 :
	       ((csr_regfile$read_misa[2] && instr__h3330[1:0] == 2'b10 &&
		 instr__h3330[11:7] != 5'd0 &&
		 instr__h3330[15:13] == 3'b011) ?
		  instr__h11167 :
		  IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d562) ;
  assign IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d566 =
	     (csr_regfile$read_misa[2] && instr__h3330[1:0] == 2'b01 &&
	      instr__h3330[15:10] == 6'b100111 &&
	      instr__h3330[6:5] == 2'b01) ?
	       instr__h10775 :
	       ((csr_regfile$read_misa[2] && instr__h3330[1:0] == 2'b01 &&
		 instr__h3330[15:10] == 6'b100111 &&
		 instr__h3330[6:5] == 2'b0) ?
		  instr__h10913 :
		  IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d564) ;
  assign IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d568 =
	     (csr_regfile$read_misa[2] && instr__h3330[1:0] == 2'b01 &&
	      instr__h3330[15:10] == 6'b100011 &&
	      instr__h3330[6:5] == 2'b01) ?
	       instr__h10501 :
	       ((csr_regfile$read_misa[2] && instr__h3330[1:0] == 2'b01 &&
		 instr__h3330[15:10] == 6'b100011 &&
		 instr__h3330[6:5] == 2'b0) ?
		  instr__h10637 :
		  IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d566) ;
  assign IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d570 =
	     (csr_regfile$read_misa[2] && instr__h3330[1:0] == 2'b01 &&
	      instr__h3330[15:10] == 6'b100011 &&
	      instr__h3330[6:5] == 2'b11) ?
	       instr__h10229 :
	       ((csr_regfile$read_misa[2] && instr__h3330[1:0] == 2'b01 &&
		 instr__h3330[15:10] == 6'b100011 &&
		 instr__h3330[6:5] == 2'b10) ?
		  instr__h10365 :
		  IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d568) ;
  assign IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d571 =
	     (csr_regfile_read_misa__7_BIT_2_03_AND_IF_near__ETC___d396 &&
	      instr__h3330[6:2] != 5'd0) ?
	       instr__h10134 :
	       IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d570 ;
  assign IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d572 =
	     (csr_regfile_read_misa__7_BIT_2_03_AND_IF_near__ETC___d390 &&
	      instr__h3330[6:2] != 5'd0) ?
	       instr__h10015 :
	       IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d571 ;
  assign IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d574 =
	     (csr_regfile$read_misa[2] && instr__h3330[1:0] == 2'b01 &&
	      instr__h3330[15:13] == 3'b100 &&
	      instr__h3330[11:10] == 2'b01 &&
	      imm6__h8128 != 6'd0) ?
	       instr__h9720 :
	       ((csr_regfile$read_misa[2] && instr__h3330[1:0] == 2'b01 &&
		 instr__h3330[15:13] == 3'b100 &&
		 instr__h3330[11:10] == 2'b10) ?
		  instr__h9837 :
		  IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d572) ;
  assign IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d575 =
	     (csr_regfile$read_misa[2] && instr__h3330[1:0] == 2'b01 &&
	      instr__h3330[15:13] == 3'b100 &&
	      instr__h3330[11:10] == 2'b0 &&
	      imm6__h8128 != 6'd0) ?
	       instr__h9531 :
	       IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d574 ;
  assign IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d576 =
	     (csr_regfile$read_misa[2] && instr__h3330[1:0] == 2'b10 &&
	      instr__h3330[15:13] == 3'b0 &&
	      instr__h3330[11:7] != 5'd0 &&
	      imm6__h8128 != 6'd0) ?
	       instr__h9342 :
	       IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d575 ;
  assign IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d578 =
	     (csr_regfile$read_misa[2] && instr__h3330[1:0] == 2'b01 &&
	      instr__h3330[15:13] == 3'b011 &&
	      instr__h3330[11:7] == 5'd2 &&
	      nzimm10__h8797 != 10'd0) ?
	       instr__h9001 :
	       ((csr_regfile$read_misa[2] && instr__h3330[1:0] == 2'b0 &&
		 instr__h3330[15:13] == 3'b0 &&
		 nzimm10__h9012 != 10'd0) ?
		  instr__h9173 :
		  IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d576) ;
  assign IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d580 =
	     (csr_regfile$read_misa[2] && instr__h3330[1:0] == 2'b01 &&
	      instr__h3330[15:13] == 3'b0 &&
	      instr__h3330[11:7] != 5'd0 &&
	      imm6__h8128 != 6'd0 ||
	      csr_regfile$read_misa[2] && instr__h3330[1:0] == 2'b01 &&
	      instr__h3330[15:13] == 3'b0 &&
	      instr__h3330[11:7] == 5'd0 &&
	      imm6__h8128 == 6'd0) ?
	       instr__h8519 :
	       ((csr_regfile$read_misa[2] && instr__h3330[1:0] == 2'b01 &&
		 instr__h3330[15:13] == 3'b001 &&
		 instr__h3330[11:7] != 5'd0) ?
		  instr__h8746 :
		  IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d578) ;
  assign IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d581 =
	     (csr_regfile$read_misa[2] && instr__h3330[1:0] == 2'b01 &&
	      instr__h3330[15:13] == 3'b011 &&
	      instr__h3330[11:7] != 5'd0 &&
	      instr__h3330[11:7] != 5'd2 &&
	      imm6__h8128 != 6'd0) ?
	       instr__h8390 :
	       IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d580 ;
  assign IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d583 =
	     (csr_regfile$read_misa[2] && instr__h3330[1:0] == 2'b01 &&
	      instr__h3330[15:13] == 3'b111) ?
	       instr__h7868 :
	       ((csr_regfile$read_misa[2] && instr__h3330[1:0] == 2'b01 &&
		 instr__h3330[15:13] == 3'b010 &&
		 instr__h3330[11:7] != 5'd0) ?
		  instr__h8206 :
		  IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d581) ;
  assign IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d584 =
	     (csr_regfile$read_misa[2] && instr__h3330[1:0] == 2'b01 &&
	      instr__h3330[15:13] == 3'b110) ?
	       instr__h7551 :
	       IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d583 ;
  assign IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d585 =
	     (csr_regfile_read_misa__7_BIT_2_03_AND_IF_near__ETC___d396 &&
	      instr__h3330[6:2] == 5'd0) ?
	       instr__h7486 :
	       IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d584 ;
  assign IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d586 =
	     (csr_regfile_read_misa__7_BIT_2_03_AND_IF_near__ETC___d390 &&
	      instr__h3330[6:2] == 5'd0) ?
	       instr__h7370 :
	       IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d585 ;
  assign IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d587 =
	     (csr_regfile$read_misa[2] && instr__h3330[1:0] == 2'b01 &&
	      instr__h3330[15:13] == 3'b101) ?
	       instr__h6916 :
	       IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d586 ;
  assign IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d588 =
	     (csr_regfile$read_misa[2] && instr__h3330[1:0] == 2'b0 &&
	      instr__h3330[15:13] == 3'b110) ?
	       instr__h6687 :
	       IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d587 ;
  assign IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d589 =
	     (csr_regfile$read_misa[2] && instr__h3330[1:0] == 2'b0 &&
	      instr__h3330[15:13] == 3'b010) ?
	       instr__h6492 :
	       IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d588 ;
  assign IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d590 =
	     (csr_regfile$read_misa[2] && instr__h3330[1:0] == 2'b10 &&
	      instr__h3330[15:13] == 3'b110) ?
	       instr__h6300 :
	       IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d589 ;
  assign IF_near_mem_dmem_valid__18_AND_NOT_near_mem_dm_ETC___d239 =
	     (near_mem$dmem_valid && !near_mem$dmem_exc) ? 2'd2 : 2'd1 ;
  assign IF_near_mem_dmem_valid__18_THEN_IF_near_mem_dm_ETC___d121 =
	     near_mem$dmem_valid ? (near_mem$dmem_exc ? 2'd3 : 2'd2) : 2'd1 ;
  assign IF_rg_cur_priv_0_EQ_0b11_166_OR_rg_cur_priv_0__ETC___d1195 =
	     ((rg_cur_priv == 2'b11 ||
	       rg_cur_priv == 2'b01 && !csr_regfile$read_mstatus[22]) &&
	      _theResult____h3332[31:20] == 12'b000100000010) ?
	       4'd8 :
	       (rg_cur_priv_0_EQ_0b11_166_OR_rg_cur_priv_0_EQ__ETC___d1193 ?
		  4'd10 :
		  4'd11) ;
  assign IF_stage2_fbox_valid__24_THEN_2_ELSE_1___d125 =
	     stage2_fbox$valid ? 2'd2 : 2'd1 ;
  assign IF_stage2_mbox_valid__22_THEN_2_ELSE_1___d123 =
	     stage2_mbox$valid ? 2'd2 : 2'd1 ;
  assign IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 =
	     stage2_rg_full ?
	       CASE_stage2_rg_stage2_BITS_267_TO_265_0_2_1_IF_ETC__q1 :
	       2'd0 ;
  assign IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d1736 =
	     IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 ==
	     2'd2 &&
	     NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38 &&
	     stage2_rg_stage2[267:265] != 3'd0 &&
	     CASE_stage2_rg_stage2_BITS_267_TO_265_1_stage2_ETC__q27 ;
  assign IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d1738 =
	     IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 ==
	     2'd2 &&
	     NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38 &&
	     (stage2_rg_stage2[267:265] == 3'd0 ||
	      CASE_stage2_rg_stage2_BITS_267_TO_265_1_NOT_st_ETC__q28) ;
  assign IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d247 =
	     stage2_rg_full ?
	       CASE_stage2_rg_stage2_BITS_267_TO_265_0_2_1_IF_ETC__q2 :
	       2'd0 ;
  assign IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d594 =
	     x_out_bypass_rd__h5403 == _theResult____h3332[19:15] ;
  assign IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d596 =
	     x_out_bypass_rd__h5403 == _theResult____h3332[24:20] ;
  assign IF_stage2_rg_stage2_5_BIT_3_85_OR_stage2_rg_st_ETC___d240 =
	     (stage2_rg_stage2[3] || stage2_rg_stage2[264:260] == 5'd0) ?
	       2'd0 :
	       IF_near_mem_dmem_valid__18_AND_NOT_near_mem_dm_ETC___d239 ;
  assign IF_stage2_rg_stage2_5_BIT_3_85_THEN_IF_near_me_ETC___d264 =
	     stage2_rg_stage2[3] ?
	       IF_near_mem_dmem_valid__18_AND_NOT_near_mem_dm_ETC___d239 :
	       2'd0 ;
  assign NOT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_ETC___d700 =
	     (_theResult____h3332[14:12] != 3'b0 ||
	      _theResult____h3332[6:0] == 7'b0110011 &&
	      _theResult____h3332[30]) &&
	     (_theResult____h3332[14:12] != 3'b0 ||
	      _theResult____h3332[6:0] != 7'b0110011 ||
	      !_theResult____h3332[30]) &&
	     _theResult____h3332[14:12] != 3'b010 &&
	     _theResult____h3332[14:12] != 3'b011 &&
	     _theResult____h3332[14:12] != 3'b100 &&
	     _theResult____h3332[14:12] != 3'b110 &&
	     _theResult____h3332[14:12] != 3'b111 ;
  assign NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38 =
	     cur_verbosity__h2051 > 4'd1 ;
  assign NOT_near_mem_imem_exc__15_82_AND_IF_IF_NOT_nea_ETC___d1290 =
	     !near_mem$imem_exc &&
	     (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1148 ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1150) &&
	     IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 !=
	     4'd0 &&
	     IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 !=
	     4'd1 &&
	     IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 !=
	     4'd2 &&
	     IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 !=
	     4'd3 &&
	     IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 !=
	     4'd4 &&
	     IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 !=
	     4'd5 &&
	     IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 !=
	     4'd6 &&
	     IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 !=
	     4'd7 &&
	     IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 !=
	     4'd8 &&
	     IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 !=
	     4'd9 &&
	     IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 !=
	     4'd10 ;
  assign NOT_near_mem_imem_exc__15_82_AND_IF_IF_NOT_nea_ETC___d1340 =
	     !near_mem$imem_exc &&
	     (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1148 ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1150) &&
	     IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1310 !=
	     3'd0 &&
	     IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1310 !=
	     3'd1 &&
	     IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1310 !=
	     3'd2 &&
	     IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1310 !=
	     3'd3 &&
	     IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1310 !=
	     3'd4 ;
  assign NOT_near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_p_ETC___d1665 =
	     (!near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d6 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     gpr_regfile$RDY_server_reset_response_get &&
	     fpr_regfile_RDY_server_reset_response_get__651_ETC___d1663 ;
  assign NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_88_ETC___d296 =
	     !near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7___d288 &&
	     (!near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d6 ||
	      imem_rg_pc[1:0] != 2'b0 ||
	      near_mem$imem_instr[1:0] != 2'b11) ;
  assign NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_88_ETC___d301 =
	     NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_88_ETC___d296 &&
	     (!near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d6 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] == 2'b11) &&
	     (!near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d6 ||
	      imem_rg_pc[1:0] != 2'b0 ||
	      near_mem$imem_instr[1:0] == 2'b11) ;
  assign NOT_near_mem_imem_valid_87_OR_NOT_near_mem_ime_ETC___d1680 =
	     !near_mem$imem_valid ||
	     !near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7___d288 ||
	     IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d247 ==
	     2'd1 &&
	     (IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d594 ||
	      IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d596) ;
  assign NOT_near_mem_imem_valid_87_OR_NOT_near_mem_ime_ETC___d1691 =
	     NOT_near_mem_imem_valid_87_OR_NOT_near_mem_ime_ETC___d599 ||
	     !near_mem$imem_exc &&
	     (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1148 ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1150) ;
  assign NOT_near_mem_imem_valid_87_OR_NOT_near_mem_ime_ETC___d1699 =
	     NOT_near_mem_imem_valid_87_OR_NOT_near_mem_ime_ETC___d599 ||
	     near_mem$imem_exc ||
	     IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d966 &&
	     IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d977 ;
  assign NOT_near_mem_imem_valid_87_OR_NOT_near_mem_ime_ETC___d599 =
	     !near_mem$imem_valid ||
	     NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_88_ETC___d301 ||
	     IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d247 ==
	     2'd1 &&
	     (IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d594 ||
	      IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d596) ;
  assign NOT_rg_halt_672_696_AND_NOT_csr_regfile_interr_ETC___d1702 =
	     !rg_halt && !csr_regfile$interrupt_pending[4] ||
	     (!stage1_rg_full ||
	      NOT_near_mem_imem_valid_87_OR_NOT_near_mem_ime_ETC___d1699) &&
	     (!stage1_rg_full ||
	      NOT_near_mem_imem_valid_87_OR_NOT_near_mem_ime_ETC___d1691) ;
  assign NOT_rg_halt_672_696_AND_NOT_csr_regfile_interr_ETC___d1743 =
	     !rg_halt && !csr_regfile$interrupt_pending[4] &&
	     (IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 ==
	      2'd2 ||
	      IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 ==
	      2'd0) &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d1153 ;
  assign NOT_rg_halt_672_696_AND_NOT_csr_regfile_interr_ETC___d1803 =
	     !rg_halt && !csr_regfile$interrupt_pending[4] &&
	     ((IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 ==
	       2'd2 ||
	       IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 ==
	       2'd0) &&
	      near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d1153 ||
	      !stage1_rg_full) ;
  assign SEXT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLU_ETC___d1380 =
	     { {52{theResult__332_BITS_31_TO_20__q23[11]}},
	       theResult__332_BITS_31_TO_20__q23 } ;
  assign SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d380 =
	     { {9{offset__h6863[11]}}, offset__h6863 } ;
  assign SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d405 =
	     { {4{offset__h7495[8]}}, offset__h7495 } ;
  assign _theResult_____1_fst__h14947 =
	     (_theResult____h3332[14:12] == 3'b0 &&
	      _theResult____h3332[6:0] == 7'b0110011 &&
	      _theResult____h3332[30]) ?
	       rd_val___1__h14943 :
	       _theResult_____1_fst__h14954 ;
  assign _theResult_____1_fst__h14982 =
	     rs1_val_bypassed__h3340 & _theResult___snd__h17252 ;
  assign _theResult____h27138 =
	     (delta_CPI_instrs__h27137 == 64'd0) ?
	       delta_CPI_instrs___1__h27173 :
	       delta_CPI_instrs__h27137 ;
  assign _theResult____h3332 =
	     NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_88_ETC___d296 ?
	       instr___1__h5875 :
	       instr__h3330 ;
  assign _theResult___fst__h15072 =
	     (_theResult____h3332[14:12] == 3'b001 &&
	      !_theResult____h3332[25]) ?
	       rd_val___1__h17314 :
	       _theResult___fst__h15079 ;
  assign _theResult___fst__h15079 =
	     _theResult____h3332[30] ?
	       rd_val___1__h17397 :
	       rd_val___1__h17368 ;
  assign _theResult___fst__h15199 =
	     { {32{rs1_val_bypassed340_BITS_31_TO_0_SRL_rs2_val_b_ETC__q9[31]}},
	       rs1_val_bypassed340_BITS_31_TO_0_SRL_rs2_val_b_ETC__q9 } ;
  assign _theResult___fst__h6055 =
	     (near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d6 &&
	      imem_rg_pc[1:0] == 2'b0 &&
	      near_mem$imem_instr[1:0] != 2'b11) ?
	       instr_out___1__h6057 :
	       _theResult___fst__h6083 ;
  assign _theResult___fst__h6083 =
	     (near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d6 &&
	      imem_rg_pc[1:0] != 2'b0 &&
	      near_mem$imem_instr[17:16] != 2'b11) ?
	       instr_out___1__h6085 :
	       near_mem$imem_instr ;
  assign _theResult___fst_rd_val__h5534 =
	     stage2_rg_stage2[3] ?
	       near_mem$dmem_word64 :
	       stage2_rg_stage2[195:132] ;
  assign _theResult___fst_rd_val__h5540 =
	     stage2_rg_stage2[3] ?
	       stage2_fbox$word_fst :
	       stage2_rg_stage2[195:132] ;
  assign _theResult___snd__h17252 =
	     (_theResult____h3332[6:0] == 7'b0010011) ?
	       SEXT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLU_ETC___d1380 :
	       rs2_val_bypassed__h3346 ;
  assign _theResult___snd_rd_val__h5382 =
	     (stage2_rg_stage2[3] || stage2_rg_stage2[264:260] == 5'd0) ?
	       stage2_rg_stage2[195:132] :
	       near_mem$dmem_word64 ;
  assign _theResult___snd_rd_val__h5393 =
	     stage2_rg_stage2[3] ?
	       stage2_rg_stage2[195:132] :
	       stage2_fbox$word_fst ;
  assign alu_outputs___1_addr3926_BITS_31_TO_0__q24 =
	     alu_outputs___1_addr__h13926[31:0] ;
  assign alu_outputs___1_addr__h13599 =
	     IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d664 ?
	       branch_target__h13579 :
	       IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_ETC___d1369 ;
  assign alu_outputs___1_addr__h13624 =
	     { imem_rg_pc_PLUS_SEXT_theResult__332_BIT_31_CON_ETC__q6[63:1],
	       1'd0 } ;
  assign alu_outputs___1_addr__h13653 =
	     { alu_outputs___1_addr__h13926[63:1], 1'd0 } ;
  assign alu_outputs___1_addr__h13926 =
	     rs1_val_bypassed__h3340 +
	     SEXT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLU_ETC___d1380 ;
  assign alu_outputs___1_addr__h13949 =
	     rs1_val_bypassed__h3340 +
	     { {52{theResult__332_BITS_31_TO_25_CONCAT_theResult__ETC__q7[11]}},
	       theResult__332_BITS_31_TO_25_CONCAT_theResult__ETC__q7 } ;
  assign alu_outputs___1_exc_code__h14232 =
	     (_theResult____h3332[14:12] == 3'b0) ?
	       (IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_ETC___d1172 ?
		  4'd2 :
		  ((_theResult____h3332[11:7] == 5'd0 &&
		    _theResult____h3332[19:15] == 5'd0) ?
		     CASE_theResult__332_BITS_31_TO_20_0b0_CASE_rg__ETC__q19 :
		     4'd2)) :
	       4'd2 ;
  assign alu_outputs___1_val1__h13771 =
	     (_theResult____h3332[14:12] == 3'b001) ?
	       rd_val__h17146 :
	       (_theResult____h3332[30] ? rd_val__h17220 : rd_val__h17198) ;
  assign alu_outputs___1_val1__h13812 =
	     (_theResult____h3332[14:12] == 3'b0 &&
	      (_theResult____h3332[6:0] != 7'b0110011 ||
	       !_theResult____h3332[30])) ?
	       rd_val___1__h14935 :
	       _theResult_____1_fst__h14947 ;
  assign alu_outputs___1_val1__h13838 =
	     (_theResult____h3332[14:12] == 3'b0) ?
	       rd_val___1__h17283 :
	       _theResult___fst__h15072 ;
  assign alu_outputs___1_val1__h13883 =
	     { {32{v32__h13872[31]}}, v32__h13872 } ;
  assign alu_outputs___1_val1__h13902 =
	     imem_rg_pc + alu_outputs___1_val1__h13883 ;
  assign alu_outputs___1_val1__h14236 =
	     _theResult____h3332[14] ?
	       { 59'd0, _theResult____h3332[19:15] } :
	       rs1_val_bypassed__h3340 ;
  assign alu_outputs___1_val1__h14260 =
	     { 57'd0, _theResult____h3332[31:25] } ;
  assign alu_outputs___1_val1__h14363 =
	     (_theResult____h3332[6:0] == 7'b1010011 &&
	      (_theResult____h3332[31:25] == 7'h69 &&
	       (_theResult____h3332[24:20] == 5'd0 ||
		_theResult____h3332[24:20] == 5'd1 ||
		_theResult____h3332[24:20] == 5'd2 ||
		_theResult____h3332[24:20] == 5'd3) ||
	       _theResult____h3332[31:25] == 7'h79 ||
	       _theResult____h3332[31:25] == 7'h68 &&
	       (_theResult____h3332[24:20] == 5'd0 ||
		_theResult____h3332[24:20] == 5'd1 ||
		_theResult____h3332[24:20] == 5'd2 ||
		_theResult____h3332[24:20] == 5'd3) ||
	       _theResult____h3332[31:25] == 7'h78)) ?
	       rs1_val_bypassed__h3340 :
	       frs1_val_bypassed__h3351 ;
  assign alu_outputs___1_val2__h13951 =
	     (_theResult____h3332[6:0] == 7'b0100111) ?
	       frs2_val_bypassed__h3356 :
	       rs2_val_bypassed__h3346 ;
  assign branch_target__h13579 =
	     imem_rg_pc +
	     { {51{theResult__332_BIT_31_CONCAT_theResult__332_BI_ETC__q4[12]}},
	       theResult__332_BIT_31_CONCAT_theResult__332_BI_ETC__q4 } ;
  assign cpi__h27140 = x__h27139 / 64'd10 ;
  assign cpifrac__h27141 = x__h27139 % 64'd10 ;
  assign csr_regfile_interrupt_pending_rg_cur_priv_0_67_ETC___d1935 =
	     csr_regfile$interrupt_pending[4] && rg_state == 4'd2 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d614 &&
	     IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1929 &&
	     IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 ==
	     2'd0 &&
	     !stage3_rg_full ;
  assign csr_regfile_read_csr_mcycle__9_MINUS_rg_start__ETC___d1919 =
	     delta_CPI_cycles__h27136 * 64'd10 ;
  assign csr_regfile_read_misa__7_BIT_2_03_AND_IF_near__ETC___d390 =
	     csr_regfile$read_misa[2] && instr__h3330[1:0] == 2'b10 &&
	     instr__h3330[15:12] == 4'b1000 &&
	     instr__h3330[11:7] != 5'd0 ;
  assign csr_regfile_read_misa__7_BIT_2_03_AND_IF_near__ETC___d396 =
	     csr_regfile$read_misa[2] && instr__h3330[1:0] == 2'b10 &&
	     instr__h3330[15:12] == 4'b1001 &&
	     instr__h3330[11:7] != 5'd0 ;
  assign cur_verbosity__h2051 =
	     (csr_regfile$read_csr_minstret < cfg_logdelay) ?
	       4'd0 :
	       cfg_verbosity ;
  assign data_to_stage2_addr__h13462 = x_out_data_to_stage2_addr__h13473 ;
  assign delta_CPI_cycles__h27136 =
	     csr_regfile$read_csr_mcycle - rg_start_CPI_cycles ;
  assign delta_CPI_instrs___1__h27173 = delta_CPI_instrs__h27137 + 64'd1 ;
  assign delta_CPI_instrs__h27137 =
	     csr_regfile$read_csr_minstret - rg_start_CPI_instrs ;
  assign fall_through_pc__h13423 =
	     imem_rg_pc +
	     (near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_88_OR__ETC___d606 ?
		64'd4 :
		64'd2) ;
  assign fpr_regfile_RDY_server_reset_request_put__632__ETC___d1644 =
	     fpr_regfile$RDY_server_reset_request_put &&
	     near_mem$RDY_server_reset_request_put &&
	     csr_regfile$RDY_server_reset_request_put &&
	     f_reset_reqs$EMPTY_N &&
	     stage1_f_reset_reqs$FULL_N &&
	     stage2_f_reset_reqs$FULL_N &&
	     stage3_f_reset_reqs$FULL_N ;
  assign fpr_regfile_RDY_server_reset_response_get__651_ETC___d1663 =
	     fpr_regfile$RDY_server_reset_response_get &&
	     near_mem$RDY_server_reset_response_get &&
	     csr_regfile$RDY_server_reset_response_get &&
	     stage1_f_reset_rsps$EMPTY_N &&
	     stage2_f_reset_rsps$EMPTY_N &&
	     stage3_f_reset_rsps$EMPTY_N &&
	     f_reset_rsps$FULL_N ;
  assign frs1_val_bypassed__h3351 =
	     (IF_NOT_stage2_rg_full_4_21_OR_stage2_rg_stage2_ETC___d269 ==
	      2'd2 &&
	      x_out_fbypass_rd__h5548 == _theResult____h3332[19:15]) ?
	       x_out_fbypass_rd_val__h5549 :
	       rd_val__h17837 ;
  assign frs2_val_bypassed__h3356 =
	     (IF_NOT_stage2_rg_full_4_21_OR_stage2_rg_stage2_ETC___d269 ==
	      2'd2 &&
	      x_out_fbypass_rd__h5548 == _theResult____h3332[24:20]) ?
	       x_out_fbypass_rd_val__h5549 :
	       rd_val__h17893 ;
  assign funct10__h13850 =
	     { _theResult____h3332[31:25], _theResult____h3332[14:12] } ;
  assign imem_rg_pc_PLUS_SEXT_theResult__332_BIT_31_CON_ETC__q6 =
	     imem_rg_pc +
	     { {43{theResult__332_BIT_31_CONCAT_theResult__332_BI_ETC__q5[20]}},
	       theResult__332_BIT_31_CONCAT_theResult__332_BI_ETC__q5 } ;
  assign imm12__h11168 = { 3'd0, offset__h11082 } ;
  assign imm12__h11520 = { 4'd0, offset__h11454 } ;
  assign imm12__h6156 = { 4'd0, offset__h5925 } ;
  assign imm12__h6493 = { 5'd0, offset__h6435 } ;
  assign imm12__h8130 = { {6{imm6__h8128[5]}}, imm6__h8128 } ;
  assign imm12__h8799 = { {2{nzimm10__h8797[9]}}, nzimm10__h8797 } ;
  assign imm12__h9014 = { 2'd0, nzimm10__h9012 } ;
  assign imm12__h9210 = { 6'b0, imm6__h8128 } ;
  assign imm12__h9547 = { 6'b010000, imm6__h8128 } ;
  assign imm20__h8258 = { {14{imm6__h8128[5]}}, imm6__h8128 } ;
  assign imm6__h8128 = { instr__h3330[12], instr__h3330[6:2] } ;
  assign instr___1__h5875 =
	     (csr_regfile$read_misa[2] && instr__h3330[1:0] == 2'b10 &&
	      instr__h3330[11:7] != 5'd0 &&
	      instr__h3330[15:13] == 3'b010) ?
	       instr__h6155 :
	       IF_csr_regfile_read_misa__7_BIT_2_03_AND_IF_ne_ETC___d590 ;
  assign instr__h10015 =
	     { 7'b0,
	       instr__h3330[6:2],
	       8'd0,
	       instr__h3330[11:7],
	       7'b0110011 } ;
  assign instr__h10134 =
	     { 7'b0,
	       instr__h3330[6:2],
	       instr__h3330[11:7],
	       3'b0,
	       instr__h3330[11:7],
	       7'b0110011 } ;
  assign instr__h10229 =
	     { 7'b0, rd__h6495, rs1__h6494, 3'b111, rs1__h6494, 7'b0110011 } ;
  assign instr__h10365 =
	     { 7'b0, rd__h6495, rs1__h6494, 3'b110, rs1__h6494, 7'b0110011 } ;
  assign instr__h10501 =
	     { 7'b0, rd__h6495, rs1__h6494, 3'b100, rs1__h6494, 7'b0110011 } ;
  assign instr__h10637 =
	     { 7'b0100000,
	       rd__h6495,
	       rs1__h6494,
	       3'b0,
	       rs1__h6494,
	       7'b0110011 } ;
  assign instr__h10775 =
	     { 7'b0, rd__h6495, rs1__h6494, 3'b0, rs1__h6494, 7'b0111011 } ;
  assign instr__h10913 =
	     { 7'b0100000,
	       rd__h6495,
	       rs1__h6494,
	       3'b0,
	       rs1__h6494,
	       7'b0111011 } ;
  assign instr__h11071 =
	     { 12'b000000000001,
	       instr__h3330[11:7],
	       3'b0,
	       instr__h3330[11:7],
	       7'b1110011 } ;
  assign instr__h11167 =
	     { imm12__h11168, 8'd19, instr__h3330[11:7], 7'b0000011 } ;
  assign instr__h11320 =
	     { 3'd0,
	       instr__h3330[9:7],
	       instr__h3330[12],
	       instr__h3330[6:2],
	       8'd19,
	       offset_BITS_4_TO_0___h11795,
	       7'b0100011 } ;
  assign instr__h11519 =
	     { imm12__h11520, rs1__h6494, 3'b011, rd__h6495, 7'b0000011 } ;
  assign instr__h11670 =
	     { 4'd0,
	       instr__h3330[6:5],
	       instr__h3330[12],
	       rd__h6495,
	       rs1__h6494,
	       3'b011,
	       offset_BITS_4_TO_0___h11795,
	       7'b0100011 } ;
  assign instr__h13182 =
	     { 4'd0,
	       instr__h3330[6:5],
	       instr__h3330[12],
	       rd__h6495,
	       rs1__h6494,
	       3'b011,
	       offset_BITS_4_TO_0___h11795,
	       7'b0100111 } ;
  assign instr__h3330 =
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7___d288 ?
	       instr_out___1__h6024 :
	       _theResult___fst__h6055 ;
  assign instr__h6155 =
	     { imm12__h6156, 8'd18, instr__h3330[11:7], 7'b0000011 } ;
  assign instr__h6300 =
	     { 4'd0,
	       instr__h3330[8:7],
	       instr__h3330[12],
	       instr__h3330[6:2],
	       8'd18,
	       offset_BITS_4_TO_0___h6424,
	       7'b0100011 } ;
  assign instr__h6492 =
	     { imm12__h6493, rs1__h6494, 3'b010, rd__h6495, 7'b0000011 } ;
  assign instr__h6687 =
	     { 5'd0,
	       instr__h3330[5],
	       instr__h3330[12],
	       rd__h6495,
	       rs1__h6494,
	       3'b010,
	       offset_BITS_4_TO_0___h6855,
	       7'b0100011 } ;
  assign instr__h6916 =
	     { SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d380[20],
	       SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d380[10:1],
	       SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d380[11],
	       SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d380[19:12],
	       12'd111 } ;
  assign instr__h7370 = { 12'd0, instr__h3330[11:7], 15'd103 } ;
  assign instr__h7486 = { 12'd0, instr__h3330[11:7], 15'd231 } ;
  assign instr__h7551 =
	     { SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d405[12],
	       SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d405[10:5],
	       5'd0,
	       rs1__h6494,
	       3'b0,
	       SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d405[4:1],
	       SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d405[11],
	       7'b1100011 } ;
  assign instr__h7868 =
	     { SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d405[12],
	       SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d405[10:5],
	       5'd0,
	       rs1__h6494,
	       3'b001,
	       SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d405[4:1],
	       SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d405[11],
	       7'b1100011 } ;
  assign instr__h8206 =
	     { imm12__h8130, 8'd0, instr__h3330[11:7], 7'b0010011 } ;
  assign instr__h8390 = { imm20__h8258, instr__h3330[11:7], 7'b0110111 } ;
  assign instr__h8519 =
	     { imm12__h8130,
	       instr__h3330[11:7],
	       3'b0,
	       instr__h3330[11:7],
	       7'b0010011 } ;
  assign instr__h8746 =
	     { imm12__h8130,
	       instr__h3330[11:7],
	       3'b0,
	       instr__h3330[11:7],
	       7'b0011011 } ;
  assign instr__h9001 =
	     { imm12__h8799,
	       instr__h3330[11:7],
	       3'b0,
	       instr__h3330[11:7],
	       7'b0010011 } ;
  assign instr__h9173 = { imm12__h9014, 8'd16, rd__h6495, 7'b0010011 } ;
  assign instr__h9342 =
	     { imm12__h9210,
	       instr__h3330[11:7],
	       3'b001,
	       instr__h3330[11:7],
	       7'b0010011 } ;
  assign instr__h9531 =
	     { imm12__h9210, rs1__h6494, 3'b101, rs1__h6494, 7'b0010011 } ;
  assign instr__h9720 =
	     { imm12__h9547, rs1__h6494, 3'b101, rs1__h6494, 7'b0010011 } ;
  assign instr__h9837 =
	     { imm12__h8130, rs1__h6494, 3'b111, rs1__h6494, 7'b0010011 } ;
  assign instr_out___1__h6024 =
	     { near_mem$imem_instr[15:0], imem_rg_instr_15_0 } ;
  assign instr_out___1__h6057 = { 16'b0, near_mem$imem_instr[15:0] } ;
  assign instr_out___1__h6085 = { 16'b0, near_mem$imem_instr[31:16] } ;
  assign near_mem_imem_exc__15_OR_IF_IF_NOT_near_mem_im_ETC___d1542 =
	     (near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d966 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d977) &&
	     IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 ==
	     4'd0 ;
  assign near_mem_imem_exc__15_OR_IF_IF_NOT_near_mem_im_ETC___d1545 =
	     (near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d966 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d977) &&
	     IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 ==
	     4'd1 ;
  assign near_mem_imem_exc__15_OR_IF_IF_NOT_near_mem_im_ETC___d1548 =
	     (near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d966 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d977) &&
	     IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 ==
	     4'd2 ;
  assign near_mem_imem_exc__15_OR_IF_IF_NOT_near_mem_im_ETC___d1551 =
	     (near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d966 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d977) &&
	     IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 ==
	     4'd3 ;
  assign near_mem_imem_exc__15_OR_IF_IF_NOT_near_mem_im_ETC___d1554 =
	     (near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d966 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d977) &&
	     IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 ==
	     4'd4 ;
  assign near_mem_imem_exc__15_OR_IF_IF_NOT_near_mem_im_ETC___d1557 =
	     (near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d966 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d977) &&
	     IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 ==
	     4'd5 ;
  assign near_mem_imem_exc__15_OR_IF_IF_NOT_near_mem_im_ETC___d1560 =
	     (near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d966 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d977) &&
	     IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 ==
	     4'd6 ;
  assign near_mem_imem_exc__15_OR_IF_IF_NOT_near_mem_im_ETC___d1563 =
	     (near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d966 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d977) &&
	     IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 ==
	     4'd7 ;
  assign near_mem_imem_exc__15_OR_IF_IF_NOT_near_mem_im_ETC___d1566 =
	     (near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d966 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d977) &&
	     IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 ==
	     4'd8 ;
  assign near_mem_imem_exc__15_OR_IF_IF_NOT_near_mem_im_ETC___d1569 =
	     (near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d966 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d977) &&
	     IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 ==
	     4'd9 ;
  assign near_mem_imem_exc__15_OR_IF_IF_NOT_near_mem_im_ETC___d1572 =
	     (near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d966 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d977) &&
	     IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 ==
	     4'd10 ;
  assign near_mem_imem_exc__15_OR_IF_IF_NOT_near_mem_im_ETC___d1575 =
	     (near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d966 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d977) &&
	     IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 !=
	     4'd0 &&
	     IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 !=
	     4'd1 &&
	     IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 !=
	     4'd2 &&
	     IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 !=
	     4'd3 &&
	     IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 !=
	     4'd4 &&
	     IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 !=
	     4'd5 &&
	     IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 !=
	     4'd6 &&
	     IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 !=
	     4'd7 &&
	     IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 !=
	     4'd8 &&
	     IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 !=
	     4'd9 &&
	     IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 !=
	     4'd10 ;
  assign near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d6 =
	     near_mem$imem_pc[63:2] == imem_rg_pc[63:2] ;
  assign near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_88_OR__ETC___d606 =
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7___d288 ||
	     near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d6 &&
	     imem_rg_pc[1:0] == 2'b0 &&
	     near_mem$imem_instr[1:0] == 2'b11 ;
  assign near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_88_OR__ETC___d608 =
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_88_OR__ETC___d606 ||
	     near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d6 &&
	     imem_rg_pc[1:0] != 2'b0 &&
	     near_mem$imem_instr[17:16] != 2'b11 ||
	     near_mem_imem_pc_BITS_63_TO_2_EQ_imem_rg_pc_BI_ETC___d6 &&
	     imem_rg_pc[1:0] == 2'b0 &&
	     near_mem$imem_instr[1:0] != 2'b11 ;
  assign near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7___d288 =
	     near_mem$imem_pc == next_pc___1__h16712 ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d1153 =
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d614 &&
	     !near_mem$imem_exc &&
	     (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1148 ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1150) ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d614 =
	     near_mem$imem_valid &&
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_88_OR__ETC___d608 &&
	     (IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d247 !=
	      2'd1 ||
	      !IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d594 &&
	      !IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d596) ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d980 =
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d614 &&
	     (near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d966 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d977) ;
  assign next_pc___1__h16712 = imem_rg_pc + 64'd2 ;
  assign next_pc__h16710 = imem_rg_pc + 64'd4 ;
  assign nzimm10__h8797 =
	     { instr__h3330[12],
	       instr__h3330[4:3],
	       instr__h3330[5],
	       instr__h3330[2],
	       instr__h3330[6],
	       4'b0 } ;
  assign nzimm10__h9012 =
	     { instr__h3330[10:7],
	       instr__h3330[12:11],
	       instr__h3330[5],
	       instr__h3330[6],
	       2'b0 } ;
  assign offset_BITS_4_TO_0___h11795 = { instr__h3330[11:10], 3'b0 } ;
  assign offset_BITS_4_TO_0___h6424 = { instr__h3330[11:9], 2'b0 } ;
  assign offset_BITS_4_TO_0___h6855 =
	     { instr__h3330[11:10], instr__h3330[6], 2'b0 } ;
  assign offset__h11082 =
	     { instr__h3330[4:2],
	       instr__h3330[12],
	       instr__h3330[6:5],
	       3'b0 } ;
  assign offset__h11454 = { instr__h3330[6:5], instr__h3330[12:10], 3'b0 } ;
  assign offset__h5925 =
	     { instr__h3330[3:2],
	       instr__h3330[12],
	       instr__h3330[6:4],
	       2'b0 } ;
  assign offset__h6435 =
	     { instr__h3330[5], instr__h3330[12:10], instr__h3330[6], 2'b0 } ;
  assign offset__h6863 =
	     { instr__h3330[12],
	       instr__h3330[8],
	       instr__h3330[10:9],
	       instr__h3330[6],
	       instr__h3330[7],
	       instr__h3330[2],
	       instr__h3330[11],
	       instr__h3330[5:3],
	       1'b0 } ;
  assign offset__h7495 =
	     { instr__h3330[12],
	       instr__h3330[6:5],
	       instr__h3330[2],
	       instr__h3330[11:10],
	       instr__h3330[4:3],
	       1'b0 } ;
  assign rd__h6495 = { 2'b01, instr__h3330[4:2] } ;
  assign rd_val___1__h14935 =
	     rs1_val_bypassed__h3340 + _theResult___snd__h17252 ;
  assign rd_val___1__h14943 =
	     rs1_val_bypassed__h3340 - _theResult___snd__h17252 ;
  assign rd_val___1__h14950 =
	     ((rs1_val_bypassed__h3340 ^ 64'h8000000000000000) <
	      (_theResult___snd__h17252 ^ 64'h8000000000000000)) ?
	       64'd1 :
	       64'd0 ;
  assign rd_val___1__h14957 =
	     (rs1_val_bypassed__h3340 < _theResult___snd__h17252) ?
	       64'd1 :
	       64'd0 ;
  assign rd_val___1__h14964 =
	     rs1_val_bypassed__h3340 ^ _theResult___snd__h17252 ;
  assign rd_val___1__h14971 =
	     rs1_val_bypassed__h3340 | _theResult___snd__h17252 ;
  assign rd_val___1__h17283 =
	     { {32{alu_outputs___1_addr3926_BITS_31_TO_0__q24[31]}},
	       alu_outputs___1_addr3926_BITS_31_TO_0__q24 } ;
  assign rd_val___1__h17314 = { {32{x__h17317[31]}}, x__h17317 } ;
  assign rd_val___1__h17368 = { {32{x__h17371[31]}}, x__h17371 } ;
  assign rd_val___1__h17397 = { {32{tmp__h17396[31]}}, tmp__h17396 } ;
  assign rd_val___1__h17451 =
	     { {32{rs1_val_bypassed340_BITS_31_TO_0_PLUS_rs2_val__ETC__q10[31]}},
	       rs1_val_bypassed340_BITS_31_TO_0_PLUS_rs2_val__ETC__q10 } ;
  assign rd_val___1__h17499 =
	     { {32{rs1_val_bypassed340_BITS_31_TO_0_MINUS_rs2_val_ETC__q11[31]}},
	       rs1_val_bypassed340_BITS_31_TO_0_MINUS_rs2_val_ETC__q11 } ;
  assign rd_val___1__h17505 = { {32{x__h17508[31]}}, x__h17508 } ;
  assign rd_val___1__h17550 = { {32{x__h17553[31]}}, x__h17553 } ;
  assign rd_val__h13356 =
	     (!stage3_rg_stage3[69] && stage3_rg_full &&
	      stage3_rg_stage3[76] &&
	      stage3_rg_stage3_1_BITS_75_TO_71_0_EQ_IF_NOT_n_ETC___d639) ?
	       stage3_rg_stage3[63:0] :
	       gpr_regfile$read_rs1 ;
  assign rd_val__h13399 =
	     (!stage3_rg_stage3[69] && stage3_rg_full &&
	      stage3_rg_stage3[76] &&
	      stage3_rg_stage3_1_BITS_75_TO_71_0_EQ_IF_NOT_n_ETC___d647) ?
	       stage3_rg_stage3[63:0] :
	       gpr_regfile$read_rs2 ;
  assign rd_val__h17146 = rs1_val_bypassed__h3340 << shamt__h13756 ;
  assign rd_val__h17198 = rs1_val_bypassed__h3340 >> shamt__h13756 ;
  assign rd_val__h17220 =
	     rs1_val_bypassed__h3340 >> shamt__h13756 |
	     ~(64'hFFFFFFFFFFFFFFFF >> shamt__h13756) &
	     {64{rs1_val_bypassed__h3340[63]}} ;
  assign rd_val__h17837 =
	     (stage3_rg_stage3[69] && stage3_rg_full &&
	      stage3_rg_stage3[76] &&
	      stage3_rg_stage3_1_BITS_75_TO_71_0_EQ_IF_NOT_n_ETC___d639) ?
	       stage3_rg_stage3[63:0] :
	       fpr_regfile$read_rs1 ;
  assign rd_val__h17893 =
	     (stage3_rg_stage3[69] && stage3_rg_full &&
	      stage3_rg_stage3[76] &&
	      stage3_rg_stage3_1_BITS_75_TO_71_0_EQ_IF_NOT_n_ETC___d647) ?
	       stage3_rg_stage3[63:0] :
	       fpr_regfile$read_rs2 ;
  assign rd_val__h17946 =
	     (stage3_rg_stage3[69] && stage3_rg_full &&
	      stage3_rg_stage3[76] &&
	      stage3_rg_stage3[75:71] == _theResult____h3332[31:27]) ?
	       stage3_rg_stage3[63:0] :
	       fpr_regfile$read_rs3 ;
  assign rg_cur_priv_0_EQ_0b11_166_OR_rg_cur_priv_0_EQ__ETC___d1193 =
	     (rg_cur_priv == 2'b11 ||
	      rg_cur_priv == 2'b01 && !csr_regfile$read_mstatus[21] ||
	      rg_cur_priv == 2'b0 && csr_regfile$read_misa[13]) &&
	     _theResult____h3332[31:20] == 12'b000100000101 ;
  assign rg_halt_672_OR_csr_regfile_interrupt_pending_r_ETC___d1684 =
	     rg_halt || csr_regfile$interrupt_pending[4] ||
	     (IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 !=
	      2'd2 &&
	      IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 !=
	      2'd0 ||
	      NOT_near_mem_imem_valid_87_OR_NOT_near_mem_ime_ETC___d1680 ||
	      near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d966 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d977) &&
	     stage1_rg_full ;
  assign rg_state_9_EQ_2_686_AND_NOT_rg_halt_672_696_AN_ETC___d1826 =
	     rg_state == 4'd2 && !rg_halt &&
	     !csr_regfile$interrupt_pending[4] &&
	     !stage3_rg_full ;
  assign rg_state_9_EQ_2_686_AND_NOT_rg_halt_672_696_AN_ETC___d1875 =
	     rg_state_9_EQ_2_686_AND_NOT_rg_halt_672_696_AN_ETC___d1826 &&
	     IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 ==
	     2'd0 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d980 &&
	     (IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 ==
	      4'd7 ||
	      IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 ==
	      4'd8 ||
	      IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 ==
	      4'd9) ;
  assign rg_state_9_EQ_2_686_AND_NOT_rg_halt_672_696_AN_ETC___d1886 =
	     rg_state_9_EQ_2_686_AND_NOT_rg_halt_672_696_AN_ETC___d1826 &&
	     IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 ==
	     2'd0 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d980 &&
	     IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 ==
	     4'd5 ;
  assign rg_state_9_EQ_2_686_AND_NOT_rg_halt_672_696_AN_ETC___d1896 =
	     rg_state_9_EQ_2_686_AND_NOT_rg_halt_672_696_AN_ETC___d1826 &&
	     IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 ==
	     2'd0 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d980 &&
	     IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 ==
	     4'd4 ;
  assign rg_state_9_EQ_2_686_AND_NOT_rg_halt_672_696_AN_ETC___d1913 =
	     rg_state_9_EQ_2_686_AND_NOT_rg_halt_672_696_AN_ETC___d1826 &&
	     IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 ==
	     2'd0 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d980 &&
	     IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 ==
	     4'd11 ;
  assign rg_state_9_EQ_2_686_AND_stage3_rg_full_9_OR_NO_ETC___d1705 =
	     rg_state == 4'd2 &&
	     (stage3_rg_full ||
	      IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 !=
	      2'd0 ||
	      stage1_rg_full) &&
	     (stage3_rg_full ||
	      IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 !=
	      2'd3) &&
	     (stage3_rg_full ||
	      IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 !=
	      2'd0 ||
	      !stage1_rg_full ||
	      NOT_near_mem_imem_valid_87_OR_NOT_near_mem_ime_ETC___d1691) &&
	     (NOT_rg_halt_672_696_AND_NOT_csr_regfile_interr_ETC___d1702 ||
	      IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 !=
	      2'd0 ||
	      stage3_rg_full) ;
  assign rm__h14347 = x_out_data_to_stage2_rounding_mode__h13478 ;
  assign rs1__h6494 = { 2'b01, instr__h3330[9:7] } ;
  assign rs1_val__h21847 =
	     (x_out_data_to_stage2_instr__h13470[14:12] == 3'b001) ?
	       x_out_data_to_stage2_val1__h13474 :
	       { 59'd0, x_out_data_to_stage2_instr__h13470[19:15] } ;
  assign rs1_val_bypassed340_BITS_31_TO_0_MINUS_rs2_val_ETC__q11 =
	     rs1_val_bypassed__h3340[31:0] - rs2_val_bypassed__h3346[31:0] ;
  assign rs1_val_bypassed340_BITS_31_TO_0_PLUS_rs2_val__ETC__q10 =
	     rs1_val_bypassed__h3340[31:0] + rs2_val_bypassed__h3346[31:0] ;
  assign rs1_val_bypassed340_BITS_31_TO_0_SRL_rs2_val_b_ETC__q9 =
	     rs1_val_bypassed__h3340[31:0] >> rs2_val_bypassed__h3346[4:0] |
	     ~(32'hFFFFFFFF >> rs2_val_bypassed__h3346[4:0]) &
	     {32{rs1_val_bypassed340_BITS_31_TO_0__q8[31]}} ;
  assign rs1_val_bypassed340_BITS_31_TO_0__q8 =
	     rs1_val_bypassed__h3340[31:0] ;
  assign rs1_val_bypassed__h3340 =
	     (_theResult____h3332[19:15] == 5'd0) ? 64'd0 : val__h13358 ;
  assign rs2_val_bypassed__h3346 =
	     (_theResult____h3332[24:20] == 5'd0) ? 64'd0 : val__h13401 ;
  assign shamt__h13756 =
	     (_theResult____h3332[6:0] == 7'b0010011) ?
	       _theResult____h3332[25:20] :
	       rs2_val_bypassed__h3346[5:0] ;
  assign stage3_rg_stage3_1_BITS_75_TO_71_0_EQ_IF_NOT_n_ETC___d639 =
	     stage3_rg_stage3[75:71] == _theResult____h3332[19:15] ;
  assign stage3_rg_stage3_1_BITS_75_TO_71_0_EQ_IF_NOT_n_ETC___d647 =
	     stage3_rg_stage3[75:71] == _theResult____h3332[24:20] ;
  assign sxl__h3797 =
	     (csr_regfile$read_misa[27:26] == 2'd2) ?
	       csr_regfile$read_mstatus[35:34] :
	       2'd0 ;
  assign theResult__332_BITS_31_TO_20__q23 = _theResult____h3332[31:20] ;
  assign theResult__332_BITS_31_TO_25_CONCAT_theResult__ETC__q7 =
	     { _theResult____h3332[31:25], _theResult____h3332[11:7] } ;
  assign theResult__332_BIT_31_CONCAT_theResult__332_BI_ETC__q4 =
	     { _theResult____h3332[31],
	       _theResult____h3332[7],
	       _theResult____h3332[30:25],
	       _theResult____h3332[11:8],
	       1'b0 } ;
  assign theResult__332_BIT_31_CONCAT_theResult__332_BI_ETC__q5 =
	     { _theResult____h3332[31],
	       _theResult____h3332[19:12],
	       _theResult____h3332[20],
	       _theResult____h3332[30:21],
	       1'b0 } ;
  assign tmp__h17396 =
	     rs1_val_bypassed__h3340[31:0] >> _theResult____h3332[24:20] |
	     ~(32'hFFFFFFFF >> _theResult____h3332[24:20]) &
	     {32{rs1_val_bypassed340_BITS_31_TO_0__q8[31]}} ;
  assign trap_info_tval__h16546 =
	     (_theResult____h3332[6:0] != 7'b1100011 &&
	      _theResult____h3332[6:0] != 7'b1101111 &&
	      _theResult____h3332[6:0] != 7'b1100111 &&
	      (_theResult____h3332[6:0] != 7'b1110011 ||
	       _theResult____h3332[14:12] != 3'b0 ||
	       _theResult____h3332[11:7] != 5'd0 ||
	       _theResult____h3332[19:15] != 5'd0 ||
	       _theResult____h3332[31:20] != 12'b0 &&
	       _theResult____h3332[31:20] != 12'b000000000001)) ?
	       { 32'd0, _theResult____h3332 } :
	       CASE_theResult__332_BITS_6_TO_0_0b1100011_data_ETC__q26 ;
  assign uxl__h3798 =
	     (csr_regfile$read_misa[27:26] == 2'd2) ?
	       csr_regfile$read_mstatus[33:32] :
	       2'd0 ;
  assign v32__h13872 = { _theResult____h3332[31:12], 12'h0 } ;
  assign val__h13358 =
	     (IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d247 ==
	      2'd2 &&
	      IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d594) ?
	       x_out_bypass_rd_val__h5404 :
	       rd_val__h13356 ;
  assign val__h13401 =
	     (IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d247 ==
	      2'd2 &&
	      IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d596) ?
	       x_out_bypass_rd_val__h5404 :
	       rd_val__h13399 ;
  assign value__h16605 =
	     near_mem$imem_exc ? near_mem$imem_pc : trap_info_tval__h16546 ;
  assign x__h17317 =
	     rs1_val_bypassed__h3340[31:0] << _theResult____h3332[24:20] ;
  assign x__h17371 =
	     rs1_val_bypassed__h3340[31:0] >> _theResult____h3332[24:20] ;
  assign x__h17508 =
	     rs1_val_bypassed__h3340[31:0] << rs2_val_bypassed__h3346[4:0] ;
  assign x__h17553 =
	     rs1_val_bypassed__h3340[31:0] >> rs2_val_bypassed__h3346[4:0] ;
  assign x__h27139 =
	     csr_regfile_read_csr_mcycle__9_MINUS_rg_start__ETC___d1919[63:0] /
	     _theResult____h27138 ;
  assign x_out_data_to_stage2_instr__h13470 = _theResult____h3332 ;
  assign x_out_data_to_stage2_rounding_mode__h13478 =
	     (_theResult____h3332[14:12] == 3'b111) ?
	       csr_regfile$read_frm :
	       _theResult____h3332[14:12] ;
  assign x_out_data_to_stage2_val2__h13475 =
	     (_theResult____h3332[6:0] == 7'b1100011) ?
	       branch_target__h13579 :
	       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1515 ;
  assign x_out_data_to_stage2_val3__h13476 =
	     (IF_NOT_stage2_rg_full_4_21_OR_stage2_rg_stage2_ETC___d269 ==
	      2'd2 &&
	      x_out_fbypass_rd__h5548 == _theResult____h3332[31:27]) ?
	       x_out_fbypass_rd_val__h5549 :
	       rd_val__h17946 ;
  assign x_out_next_pc__h13436 =
	     IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1150 ?
	       data_to_stage2_addr__h13462 :
	       fall_through_pc__h13423 ;
  assign x_out_trap_info_exc_code__h16549 =
	     near_mem$imem_exc ?
	       near_mem$imem_exc_code :
	       alu_outputs_exc_code__h14390 ;
  assign y__h22644 = ~rs1_val__h22340 ;
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[267:265])
      3'd1, 3'd2, 3'd4: value__h5109 = stage2_rg_stage2[363:300];
      default: value__h5109 = stage2_rg_stage2[363:300];
    endcase
  end
  always@(stage2_rg_stage2 or near_mem$dmem_exc_code)
  begin
    case (stage2_rg_stage2[267:265])
      3'd1, 3'd2, 3'd4:
	  x_out_trap_info_exc_code__h5146 = near_mem$dmem_exc_code;
      default: x_out_trap_info_exc_code__h5146 = 4'd2;
    endcase
  end
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[267:265])
      3'd1, 3'd2, 3'd4: value__h5170 = stage2_rg_stage2[259:196];
      default: value__h5170 = 64'd0;
    endcase
  end
  always@(stage2_rg_stage2 or stage2_fbox$word_snd)
  begin
    case (stage2_rg_stage2[267:265])
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4:
	  x_out_data_to_stage3_fpr_flags__h4904 = 5'd0;
      default: x_out_data_to_stage3_fpr_flags__h4904 = stage2_fbox$word_snd;
    endcase
  end
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[267:265])
      3'd0, 3'd1, 3'd4:
	  x_out_data_to_stage3_rd__h4901 = stage2_rg_stage2[264:260];
      3'd2: x_out_data_to_stage3_rd__h4901 = 5'd0;
      default: x_out_data_to_stage3_rd__h4901 = stage2_rg_stage2[264:260];
    endcase
  end
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[267:265])
      3'd0, 3'd1, 3'd4: x_out_bypass_rd__h5403 = stage2_rg_stage2[264:260];
      default: x_out_bypass_rd__h5403 = stage2_rg_stage2[264:260];
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_fbox$word_fst or near_mem$dmem_word64 or stage2_mbox$word)
  begin
    case (stage2_rg_stage2[267:265])
      3'd0: x_out_data_to_stage3_rd_val__h4905 = stage2_rg_stage2[195:132];
      3'd1, 3'd4: x_out_data_to_stage3_rd_val__h4905 = near_mem$dmem_word64;
      3'd3: x_out_data_to_stage3_rd_val__h4905 = stage2_mbox$word;
      default: x_out_data_to_stage3_rd_val__h4905 = stage2_fbox$word_fst;
    endcase
  end
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[267:265])
      3'd1, 3'd4: x_out_fbypass_rd__h5548 = stage2_rg_stage2[264:260];
      default: x_out_fbypass_rd__h5548 = stage2_rg_stage2[264:260];
    endcase
  end
  always@(stage2_rg_stage2 or
	  _theResult___snd_rd_val__h5393 or
	  _theResult___snd_rd_val__h5382 or stage2_mbox$word)
  begin
    case (stage2_rg_stage2[267:265])
      3'd0: x_out_bypass_rd_val__h5404 = stage2_rg_stage2[195:132];
      3'd1, 3'd4: x_out_bypass_rd_val__h5404 = _theResult___snd_rd_val__h5382;
      3'd3: x_out_bypass_rd_val__h5404 = stage2_mbox$word;
      default: x_out_bypass_rd_val__h5404 = _theResult___snd_rd_val__h5393;
    endcase
  end
  always@(stage2_rg_stage2 or
	  _theResult___fst_rd_val__h5540 or _theResult___fst_rd_val__h5534)
  begin
    case (stage2_rg_stage2[267:265])
      3'd1, 3'd4:
	  x_out_fbypass_rd_val__h5549 = _theResult___fst_rd_val__h5534;
      default: x_out_fbypass_rd_val__h5549 = _theResult___fst_rd_val__h5540;
    endcase
  end
  always@(stage2_rg_stage2 or
	  IF_stage2_fbox_valid__24_THEN_2_ELSE_1___d125 or
	  IF_near_mem_dmem_valid__18_THEN_IF_near_mem_dm_ETC___d121 or
	  IF_stage2_mbox_valid__22_THEN_2_ELSE_1___d123)
  begin
    case (stage2_rg_stage2[267:265])
      3'd0: CASE_stage2_rg_stage2_BITS_267_TO_265_0_2_1_IF_ETC__q1 = 2'd2;
      3'd1, 3'd2, 3'd4:
	  CASE_stage2_rg_stage2_BITS_267_TO_265_0_2_1_IF_ETC__q1 =
	      IF_near_mem_dmem_valid__18_THEN_IF_near_mem_dm_ETC___d121;
      3'd3:
	  CASE_stage2_rg_stage2_BITS_267_TO_265_0_2_1_IF_ETC__q1 =
	      IF_stage2_mbox_valid__22_THEN_2_ELSE_1___d123;
      default: CASE_stage2_rg_stage2_BITS_267_TO_265_0_2_1_IF_ETC__q1 =
		   IF_stage2_fbox_valid__24_THEN_2_ELSE_1___d125;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_fbox$valid or
	  near_mem$dmem_valid or near_mem$dmem_exc or stage2_mbox$valid)
  begin
    case (stage2_rg_stage2[267:265])
      3'd1, 3'd2, 3'd4:
	  IF_stage2_rg_stage2_5_BITS_267_TO_265_6_EQ_1_8_ETC___d146 =
	      !near_mem$dmem_valid || near_mem$dmem_exc;
      3'd3:
	  IF_stage2_rg_stage2_5_BITS_267_TO_265_6_EQ_1_8_ETC___d146 =
	      !stage2_mbox$valid;
      default: IF_stage2_rg_stage2_5_BITS_267_TO_265_6_EQ_1_8_ETC___d146 =
		   !stage2_fbox$valid;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_fbox$valid or
	  near_mem$dmem_valid or near_mem$dmem_exc or stage2_mbox$valid)
  begin
    case (stage2_rg_stage2[267:265])
      3'd1, 3'd2, 3'd4:
	  IF_stage2_rg_stage2_5_BITS_267_TO_265_6_EQ_1_8_ETC___d156 =
	      near_mem$dmem_valid && !near_mem$dmem_exc;
      3'd3:
	  IF_stage2_rg_stage2_5_BITS_267_TO_265_6_EQ_1_8_ETC___d156 =
	      stage2_mbox$valid;
      default: IF_stage2_rg_stage2_5_BITS_267_TO_265_6_EQ_1_8_ETC___d156 =
		   stage2_fbox$valid;
    endcase
  end
  always@(stage2_rg_stage2 or
	  IF_stage2_fbox_valid__24_THEN_2_ELSE_1___d125 or
	  IF_stage2_rg_stage2_5_BIT_3_85_OR_stage2_rg_st_ETC___d240 or
	  IF_stage2_mbox_valid__22_THEN_2_ELSE_1___d123)
  begin
    case (stage2_rg_stage2[267:265])
      3'd0: CASE_stage2_rg_stage2_BITS_267_TO_265_0_2_1_IF_ETC__q2 = 2'd2;
      3'd1, 3'd4:
	  CASE_stage2_rg_stage2_BITS_267_TO_265_0_2_1_IF_ETC__q2 =
	      IF_stage2_rg_stage2_5_BIT_3_85_OR_stage2_rg_st_ETC___d240;
      3'd2: CASE_stage2_rg_stage2_BITS_267_TO_265_0_2_1_IF_ETC__q2 = 2'd0;
      3'd3:
	  CASE_stage2_rg_stage2_BITS_267_TO_265_0_2_1_IF_ETC__q2 =
	      IF_stage2_mbox_valid__22_THEN_2_ELSE_1___d123;
      default: CASE_stage2_rg_stage2_BITS_267_TO_265_0_2_1_IF_ETC__q2 =
		   stage2_rg_stage2[3] ?
		     2'd0 :
		     IF_stage2_fbox_valid__24_THEN_2_ELSE_1___d125;
    endcase
  end
  always@(stage2_rg_stage2 or
	  IF_stage2_fbox_valid__24_THEN_2_ELSE_1___d125 or
	  IF_stage2_rg_stage2_5_BIT_3_85_THEN_IF_near_me_ETC___d264)
  begin
    case (stage2_rg_stage2[267:265])
      3'd1, 3'd4:
	  CASE_stage2_rg_stage2_BITS_267_TO_265_1_IF_sta_ETC__q3 =
	      IF_stage2_rg_stage2_5_BIT_3_85_THEN_IF_near_me_ETC___d264;
      3'd2, 3'd3:
	  CASE_stage2_rg_stage2_BITS_267_TO_265_1_IF_sta_ETC__q3 = 2'd0;
      default: CASE_stage2_rg_stage2_BITS_267_TO_265_1_IF_sta_ETC__q3 =
		   stage2_rg_stage2[3] ?
		     IF_stage2_fbox_valid__24_THEN_2_ELSE_1___d125 :
		     2'd0;
    endcase
  end
  always@(_theResult____h3332)
  begin
    case (_theResult____h3332[6:0])
      7'b0000011,
      7'b0000111,
      7'b0010011,
      7'b0010111,
      7'b0011011,
      7'b0110011,
      7'b0110111,
      7'b0111011,
      7'b1100111,
      7'b1101111:
	  x_out_data_to_stage2_rd__h13472 = _theResult____h3332[11:7];
      7'b1100011: x_out_data_to_stage2_rd__h13472 = 5'd0;
      default: x_out_data_to_stage2_rd__h13472 = _theResult____h3332[11:7];
    endcase
  end
  always@(funct10__h13850 or
	  _theResult___fst__h15199 or
	  rd_val___1__h17451 or
	  rd_val___1__h17505 or rd_val___1__h17550 or rd_val___1__h17499)
  begin
    case (funct10__h13850)
      10'b0: alu_outputs___1_val1__h13864 = rd_val___1__h17451;
      10'b0000000001: alu_outputs___1_val1__h13864 = rd_val___1__h17505;
      10'b0000000101: alu_outputs___1_val1__h13864 = rd_val___1__h17550;
      10'b0100000000: alu_outputs___1_val1__h13864 = rd_val___1__h17499;
      default: alu_outputs___1_val1__h13864 = _theResult___fst__h15199;
    endcase
  end
  always@(_theResult____h3332 or
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d657 or
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d653 or
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d655)
  begin
    case (_theResult____h3332[14:12])
      3'b0:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d972 =
	      !IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d653;
      3'b001:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d972 =
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d653;
      3'b100:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d972 =
	      !IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d655;
      3'b101:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d972 =
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d655;
      3'b110:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d972 =
	      !IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d657;
      default: IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d972 =
		   _theResult____h3332[14:12] != 3'b111 ||
		   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d657;
    endcase
  end
  always@(_theResult____h3332 or
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d657 or
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d653 or
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d655)
  begin
    case (_theResult____h3332[14:12])
      3'b0:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d664 =
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d653;
      3'b001:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d664 =
	      !IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d653;
      3'b100:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d664 =
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d655;
      3'b101:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d664 =
	      !IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d655;
      3'b110:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d664 =
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d657;
      default: IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d664 =
		   _theResult____h3332[14:12] == 3'b111 &&
		   !IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d657;
    endcase
  end
  always@(_theResult____h3332 or rm__h14347)
  begin
    case (_theResult____h3332[6:0])
      7'b1000011, 7'b1000111, 7'b1001011, 7'b1001111:
	  CASE_theResult__332_BITS_6_TO_0_0b1000011_NOT__ETC__q12 =
	      _theResult____h3332[26:25] != 2'b0 &&
	      _theResult____h3332[26:25] != 2'b01;
      default: CASE_theResult__332_BITS_6_TO_0_0b1000011_NOT__ETC__q12 =
		   _theResult____h3332[31:25] != 7'h0 &&
		   _theResult____h3332[31:25] != 7'h04 &&
		   _theResult____h3332[31:25] != 7'h08 &&
		   (_theResult____h3332[31:25] != 7'h10 ||
		    rm__h14347 != 3'd0) &&
		   (_theResult____h3332[31:25] != 7'h10 ||
		    rm__h14347 != 3'd1) &&
		   (_theResult____h3332[31:25] != 7'h10 ||
		    rm__h14347 != 3'd2) &&
		   (_theResult____h3332[31:25] != 7'h60 ||
		    _theResult____h3332[24:20] != 5'd0) &&
		   (_theResult____h3332[31:25] != 7'h60 ||
		    _theResult____h3332[24:20] != 5'd1) &&
		   (_theResult____h3332[31:25] != 7'h60 ||
		    _theResult____h3332[24:20] != 5'd2) &&
		   (_theResult____h3332[31:25] != 7'h60 ||
		    _theResult____h3332[24:20] != 5'd3) &&
		   (_theResult____h3332[31:25] != 7'h68 ||
		    _theResult____h3332[24:20] != 5'd0) &&
		   (_theResult____h3332[31:25] != 7'h68 ||
		    _theResult____h3332[24:20] != 5'd1) &&
		   (_theResult____h3332[31:25] != 7'h68 ||
		    _theResult____h3332[24:20] != 5'd2) &&
		   (_theResult____h3332[31:25] != 7'h68 ||
		    _theResult____h3332[24:20] != 5'd3) &&
		   (_theResult____h3332[31:25] != 7'h14 ||
		    rm__h14347 != 3'd0) &&
		   (_theResult____h3332[31:25] != 7'h14 ||
		    rm__h14347 != 3'd1) &&
		   (_theResult____h3332[31:25] != 7'h50 ||
		    rm__h14347 != 3'd0) &&
		   (_theResult____h3332[31:25] != 7'h50 ||
		    rm__h14347 != 3'd1) &&
		   (_theResult____h3332[31:25] != 7'h50 ||
		    rm__h14347 != 3'd2) &&
		   (_theResult____h3332[31:25] != 7'h70 ||
		    rm__h14347 != 3'd0) &&
		   (_theResult____h3332[31:25] != 7'h78 ||
		    rm__h14347 != 3'd0) &&
		   (_theResult____h3332[31:25] != 7'h70 ||
		    rm__h14347 != 3'd1) &&
		   _theResult____h3332[31:25] != 7'b0000001 &&
		   _theResult____h3332[31:25] != 7'h05 &&
		   _theResult____h3332[31:25] != 7'b0001001 &&
		   (_theResult____h3332[31:25] != 7'h11 ||
		    rm__h14347 != 3'd0) &&
		   (_theResult____h3332[31:25] != 7'h11 ||
		    rm__h14347 != 3'd1) &&
		   (_theResult____h3332[31:25] != 7'h11 ||
		    rm__h14347 != 3'd2) &&
		   (_theResult____h3332[31:25] != 7'h61 ||
		    _theResult____h3332[24:20] != 5'd0) &&
		   (_theResult____h3332[31:25] != 7'h61 ||
		    _theResult____h3332[24:20] != 5'd1) &&
		   (_theResult____h3332[31:25] != 7'h61 ||
		    _theResult____h3332[24:20] != 5'd2) &&
		   (_theResult____h3332[31:25] != 7'h61 ||
		    _theResult____h3332[24:20] != 5'd3) &&
		   (_theResult____h3332[31:25] != 7'h69 ||
		    _theResult____h3332[24:20] != 5'd0) &&
		   (_theResult____h3332[31:25] != 7'h69 ||
		    _theResult____h3332[24:20] != 5'd1) &&
		   (_theResult____h3332[31:25] != 7'h69 ||
		    _theResult____h3332[24:20] != 5'd2) &&
		   (_theResult____h3332[31:25] != 7'h69 ||
		    _theResult____h3332[24:20] != 5'd3) &&
		   (_theResult____h3332[31:25] != 7'h21 ||
		    _theResult____h3332[24:20] != 5'd0) &&
		   (_theResult____h3332[31:25] != 7'h20 ||
		    _theResult____h3332[24:20] != 5'd1) &&
		   (_theResult____h3332[31:25] != 7'h15 ||
		    rm__h14347 != 3'd0) &&
		   (_theResult____h3332[31:25] != 7'h15 ||
		    rm__h14347 != 3'd1) &&
		   (_theResult____h3332[31:25] != 7'h51 ||
		    rm__h14347 != 3'd0) &&
		   (_theResult____h3332[31:25] != 7'h51 ||
		    rm__h14347 != 3'd1) &&
		   (_theResult____h3332[31:25] != 7'h51 ||
		    rm__h14347 != 3'd2) &&
		   (_theResult____h3332[31:25] != 7'h71 ||
		    rm__h14347 != 3'd0) &&
		   (_theResult____h3332[31:25] != 7'h79 ||
		    rm__h14347 != 3'd0) &&
		   (_theResult____h3332[31:25] != 7'h71 ||
		    rm__h14347 != 3'd1);
    endcase
  end
  always@(_theResult____h3332 or
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d951)
  begin
    case (_theResult____h3332[6:0])
      7'b0000111:
	  CASE_theResult__332_BITS_6_TO_0_0b111_NOT_theR_ETC__q13 =
	      _theResult____h3332[14:12] != 3'b0 &&
	      _theResult____h3332[14:12] != 3'b100 &&
	      _theResult____h3332[14:12] != 3'b001 &&
	      _theResult____h3332[14:12] != 3'b101 &&
	      _theResult____h3332[14:12] != 3'b010 &&
	      _theResult____h3332[14:12] != 3'b110 &&
	      _theResult____h3332[14:12] != 3'b011;
      7'b0100111:
	  CASE_theResult__332_BITS_6_TO_0_0b111_NOT_theR_ETC__q13 =
	      _theResult____h3332[14:12] != 3'b0 &&
	      _theResult____h3332[14:12] != 3'b001 &&
	      _theResult____h3332[14:12] != 3'b010 &&
	      _theResult____h3332[14:12] != 3'b011;
      7'b0101111:
	  CASE_theResult__332_BITS_6_TO_0_0b111_NOT_theR_ETC__q13 =
	      _theResult____h3332[31:27] != 5'b00010 &&
	      _theResult____h3332[31:27] != 5'b00011 &&
	      _theResult____h3332[31:27] != 5'b0 &&
	      _theResult____h3332[31:27] != 5'b00001 &&
	      _theResult____h3332[31:27] != 5'b01100 &&
	      _theResult____h3332[31:27] != 5'b01000 &&
	      _theResult____h3332[31:27] != 5'b00100 &&
	      _theResult____h3332[31:27] != 5'b10000 &&
	      _theResult____h3332[31:27] != 5'b11000 &&
	      _theResult____h3332[31:27] != 5'b10100 &&
	      _theResult____h3332[31:27] != 5'b11100 ||
	      _theResult____h3332[14:12] != 3'b010 &&
	      _theResult____h3332[14:12] != 3'b011;
      default: CASE_theResult__332_BITS_6_TO_0_0b111_NOT_theR_ETC__q13 =
		   _theResult____h3332[6:0] != 7'b1010011 &&
		   _theResult____h3332[6:0] != 7'b1000011 &&
		   _theResult____h3332[6:0] != 7'b1000111 &&
		   _theResult____h3332[6:0] != 7'b1001011 &&
		   _theResult____h3332[6:0] != 7'b1001111 ||
		   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d951;
    endcase
  end
  always@(_theResult____h3332 or
	  CASE_theResult__332_BITS_6_TO_0_0b111_NOT_theR_ETC__q13)
  begin
    case (_theResult____h3332[6:0])
      7'b0000011:
	  CASE_theResult__332_BITS_6_TO_0_0b11_NOT_theRe_ETC__q14 =
	      _theResult____h3332[14:12] != 3'b0 &&
	      _theResult____h3332[14:12] != 3'b100 &&
	      _theResult____h3332[14:12] != 3'b001 &&
	      _theResult____h3332[14:12] != 3'b101 &&
	      _theResult____h3332[14:12] != 3'b010 &&
	      _theResult____h3332[14:12] != 3'b110 &&
	      _theResult____h3332[14:12] != 3'b011;
      7'b0100011:
	  CASE_theResult__332_BITS_6_TO_0_0b11_NOT_theRe_ETC__q14 =
	      _theResult____h3332[14:12] != 3'b0 &&
	      _theResult____h3332[14:12] != 3'b001 &&
	      _theResult____h3332[14:12] != 3'b010 &&
	      _theResult____h3332[14:12] != 3'b011;
      default: CASE_theResult__332_BITS_6_TO_0_0b11_NOT_theRe_ETC__q14 =
		   CASE_theResult__332_BITS_6_TO_0_0b111_NOT_theR_ETC__q13;
    endcase
  end
  always@(_theResult____h3332 or
	  CASE_theResult__332_BITS_6_TO_0_0b11_NOT_theRe_ETC__q14 or
	  NOT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_ETC___d700 or
	  funct10__h13850)
  begin
    case (_theResult____h3332[6:0])
      7'b0010011, 7'b0110011:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d963 =
	      NOT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_ETC___d700;
      7'b0011011:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d963 =
	      _theResult____h3332[14:12] != 3'b0 &&
	      (_theResult____h3332[14:12] != 3'b001 ||
	       _theResult____h3332[25]) &&
	      (_theResult____h3332[14:12] != 3'b101 ||
	       _theResult____h3332[25]);
      7'b0111011:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d963 =
	      funct10__h13850 != 10'b0 && funct10__h13850 != 10'b0100000000 &&
	      funct10__h13850 != 10'b0000000001 &&
	      funct10__h13850 != 10'b0000000101 &&
	      funct10__h13850 != 10'b0100000101;
      default: IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d963 =
		   _theResult____h3332[6:0] != 7'b0110111 &&
		   _theResult____h3332[6:0] != 7'b0010111 &&
		   CASE_theResult__332_BITS_6_TO_0_0b11_NOT_theRe_ETC__q14;
    endcase
  end
  always@(_theResult____h3332 or rm__h14347)
  begin
    case (_theResult____h3332[6:0])
      7'b1000011, 7'b1000111, 7'b1001011, 7'b1001111:
	  CASE_theResult__332_BITS_6_TO_0_0b1000011_theR_ETC__q15 =
	      _theResult____h3332[26:25] == 2'b0 ||
	      _theResult____h3332[26:25] == 2'b01;
      default: CASE_theResult__332_BITS_6_TO_0_0b1000011_theR_ETC__q15 =
		   _theResult____h3332[31:25] == 7'h0 ||
		   _theResult____h3332[31:25] == 7'h04 ||
		   _theResult____h3332[31:25] == 7'h08 ||
		   _theResult____h3332[31:25] == 7'h10 &&
		   (rm__h14347 == 3'd0 || rm__h14347 == 3'd1 ||
		    rm__h14347 == 3'd2) ||
		   _theResult____h3332[31:25] == 7'h60 &&
		   _theResult____h3332[24:20] == 5'd0 ||
		   _theResult____h3332[31:25] == 7'h60 &&
		   (_theResult____h3332[24:20] == 5'd1 ||
		    _theResult____h3332[24:20] == 5'd2 ||
		    _theResult____h3332[24:20] == 5'd3) ||
		   _theResult____h3332[31:25] == 7'h68 &&
		   (_theResult____h3332[24:20] == 5'd0 ||
		    _theResult____h3332[24:20] == 5'd1 ||
		    _theResult____h3332[24:20] == 5'd2) ||
		   _theResult____h3332[31:25] == 7'h68 &&
		   _theResult____h3332[24:20] == 5'd3 ||
		   _theResult____h3332[31:25] == 7'h14 &&
		   rm__h14347 == 3'd0 ||
		   _theResult____h3332[31:25] == 7'h14 &&
		   rm__h14347 == 3'd1 ||
		   _theResult____h3332[31:25] == 7'h50 &&
		   (rm__h14347 == 3'd0 || rm__h14347 == 3'd1) ||
		   _theResult____h3332[31:25] == 7'h50 &&
		   rm__h14347 == 3'd2 ||
		   (_theResult____h3332[31:25] == 7'h70 ||
		    _theResult____h3332[31:25] == 7'h78) &&
		   rm__h14347 == 3'd0 ||
		   _theResult____h3332[31:25] == 7'h70 &&
		   rm__h14347 == 3'd1 ||
		   _theResult____h3332[31:25] == 7'b0000001 ||
		   _theResult____h3332[31:25] == 7'h05 ||
		   _theResult____h3332[31:25] == 7'b0001001 ||
		   _theResult____h3332[31:25] == 7'h11 &&
		   (rm__h14347 == 3'd0 || rm__h14347 == 3'd1 ||
		    rm__h14347 == 3'd2) ||
		   _theResult____h3332[31:25] == 7'h61 &&
		   (_theResult____h3332[24:20] == 5'd0 ||
		    _theResult____h3332[24:20] == 5'd1 ||
		    _theResult____h3332[24:20] == 5'd2) ||
		   _theResult____h3332[31:25] == 7'h61 &&
		   _theResult____h3332[24:20] == 5'd3 ||
		   _theResult____h3332[31:25] == 7'h69 &&
		   (_theResult____h3332[24:20] == 5'd0 ||
		    _theResult____h3332[24:20] == 5'd1) ||
		   _theResult____h3332[31:25] == 7'h69 &&
		   (_theResult____h3332[24:20] == 5'd2 ||
		    _theResult____h3332[24:20] == 5'd3) ||
		   _theResult____h3332[31:25] == 7'h21 &&
		   _theResult____h3332[24:20] == 5'd0 ||
		   _theResult____h3332[31:25] == 7'h20 &&
		   _theResult____h3332[24:20] == 5'd1 ||
		   _theResult____h3332[31:25] == 7'h15 &&
		   rm__h14347 == 3'd0 ||
		   _theResult____h3332[31:25] == 7'h15 &&
		   rm__h14347 == 3'd1 ||
		   _theResult____h3332[31:25] == 7'h51 &&
		   (rm__h14347 == 3'd0 || rm__h14347 == 3'd1) ||
		   _theResult____h3332[31:25] == 7'h51 &&
		   rm__h14347 == 3'd2 ||
		   (_theResult____h3332[31:25] == 7'h71 ||
		    _theResult____h3332[31:25] == 7'h79) &&
		   rm__h14347 == 3'd0 ||
		   _theResult____h3332[31:25] == 7'h71 && rm__h14347 == 3'd1;
    endcase
  end
  always@(_theResult____h3332 or
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1133)
  begin
    case (_theResult____h3332[6:0])
      7'b0000111:
	  CASE_theResult__332_BITS_6_TO_0_0b111_theResul_ETC__q16 =
	      _theResult____h3332[14:12] == 3'b0 ||
	      _theResult____h3332[14:12] == 3'b100 ||
	      _theResult____h3332[14:12] == 3'b001 ||
	      _theResult____h3332[14:12] == 3'b101 ||
	      _theResult____h3332[14:12] == 3'b010 ||
	      _theResult____h3332[14:12] == 3'b110 ||
	      _theResult____h3332[14:12] == 3'b011;
      7'b0100111:
	  CASE_theResult__332_BITS_6_TO_0_0b111_theResul_ETC__q16 =
	      _theResult____h3332[14:12] == 3'b0 ||
	      _theResult____h3332[14:12] == 3'b001 ||
	      _theResult____h3332[14:12] == 3'b010 ||
	      _theResult____h3332[14:12] == 3'b011;
      7'b0101111:
	  CASE_theResult__332_BITS_6_TO_0_0b111_theResul_ETC__q16 =
	      (_theResult____h3332[31:27] == 5'b00010 ||
	       _theResult____h3332[31:27] == 5'b00011 ||
	       _theResult____h3332[31:27] == 5'b0 ||
	       _theResult____h3332[31:27] == 5'b00001 ||
	       _theResult____h3332[31:27] == 5'b01100 ||
	       _theResult____h3332[31:27] == 5'b01000 ||
	       _theResult____h3332[31:27] == 5'b00100 ||
	       _theResult____h3332[31:27] == 5'b10000 ||
	       _theResult____h3332[31:27] == 5'b11000 ||
	       _theResult____h3332[31:27] == 5'b10100 ||
	       _theResult____h3332[31:27] == 5'b11100) &&
	      (_theResult____h3332[14:12] == 3'b010 ||
	       _theResult____h3332[14:12] == 3'b011);
      default: CASE_theResult__332_BITS_6_TO_0_0b111_theResul_ETC__q16 =
		   (_theResult____h3332[6:0] == 7'b1010011 ||
		    _theResult____h3332[6:0] == 7'b1000011 ||
		    _theResult____h3332[6:0] == 7'b1000111 ||
		    _theResult____h3332[6:0] == 7'b1001011 ||
		    _theResult____h3332[6:0] == 7'b1001111) &&
		   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1133;
    endcase
  end
  always@(_theResult____h3332 or
	  CASE_theResult__332_BITS_6_TO_0_0b111_theResul_ETC__q16)
  begin
    case (_theResult____h3332[6:0])
      7'b0000011:
	  CASE_theResult__332_BITS_6_TO_0_0b11_theResult_ETC__q17 =
	      _theResult____h3332[14:12] == 3'b0 ||
	      _theResult____h3332[14:12] == 3'b100 ||
	      _theResult____h3332[14:12] == 3'b001 ||
	      _theResult____h3332[14:12] == 3'b101 ||
	      _theResult____h3332[14:12] == 3'b010 ||
	      _theResult____h3332[14:12] == 3'b110 ||
	      _theResult____h3332[14:12] == 3'b011;
      7'b0100011:
	  CASE_theResult__332_BITS_6_TO_0_0b11_theResult_ETC__q17 =
	      _theResult____h3332[14:12] == 3'b0 ||
	      _theResult____h3332[14:12] == 3'b001 ||
	      _theResult____h3332[14:12] == 3'b010 ||
	      _theResult____h3332[14:12] == 3'b011;
      default: CASE_theResult__332_BITS_6_TO_0_0b11_theResult_ETC__q17 =
		   CASE_theResult__332_BITS_6_TO_0_0b111_theResul_ETC__q16;
    endcase
  end
  always@(_theResult____h3332 or
	  CASE_theResult__332_BITS_6_TO_0_0b11_theResult_ETC__q17 or
	  IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_ETC___d1001 or
	  funct10__h13850)
  begin
    case (_theResult____h3332[6:0])
      7'b0010011, 7'b0110011:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1145 =
	      IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_ETC___d1001;
      7'b0011011:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1145 =
	      _theResult____h3332[14:12] == 3'b0 ||
	      (_theResult____h3332[14:12] == 3'b001 ||
	       _theResult____h3332[14:12] == 3'b101) &&
	      !_theResult____h3332[25];
      7'b0111011:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1145 =
	      funct10__h13850 == 10'b0 || funct10__h13850 == 10'b0100000000 ||
	      funct10__h13850 == 10'b0000000001 ||
	      funct10__h13850 == 10'b0000000101 ||
	      funct10__h13850 == 10'b0100000101;
      default: IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1145 =
		   _theResult____h3332[6:0] == 7'b0110111 ||
		   _theResult____h3332[6:0] == 7'b0010111 ||
		   CASE_theResult__332_BITS_6_TO_0_0b11_theResult_ETC__q17;
    endcase
  end
  always@(rg_cur_priv)
  begin
    case (rg_cur_priv)
      2'b0: CASE_rg_cur_priv_0b0_8_0b1_9_11__q18 = 4'd8;
      2'b01: CASE_rg_cur_priv_0b0_8_0b1_9_11__q18 = 4'd9;
      default: CASE_rg_cur_priv_0b0_8_0b1_9_11__q18 = 4'd11;
    endcase
  end
  always@(_theResult____h3332 or CASE_rg_cur_priv_0b0_8_0b1_9_11__q18)
  begin
    case (_theResult____h3332[31:20])
      12'b0:
	  CASE_theResult__332_BITS_31_TO_20_0b0_CASE_rg__ETC__q19 =
	      CASE_rg_cur_priv_0b0_8_0b1_9_11__q18;
      12'b000000000001:
	  CASE_theResult__332_BITS_31_TO_20_0b0_CASE_rg__ETC__q19 = 4'd3;
      default: CASE_theResult__332_BITS_31_TO_20_0b0_CASE_rg__ETC__q19 = 4'd2;
    endcase
  end
  always@(_theResult____h3332 or alu_outputs___1_exc_code__h14232)
  begin
    case (_theResult____h3332[6:0])
      7'b0000011,
      7'b0001111,
      7'b0010011,
      7'b0010111,
      7'b0011011,
      7'b0100011,
      7'b0110011,
      7'b0110111,
      7'b0111011:
	  alu_outputs_exc_code__h14390 = 4'd2;
      7'b1100011, 7'b1100111, 7'b1101111: alu_outputs_exc_code__h14390 = 4'd0;
      7'b1110011:
	  alu_outputs_exc_code__h14390 = alu_outputs___1_exc_code__h14232;
      default: alu_outputs_exc_code__h14390 = 4'd2;
    endcase
  end
  always@(_theResult____h3332 or
	  rg_cur_priv or
	  IF_rg_cur_priv_0_EQ_0b11_166_OR_rg_cur_priv_0__ETC___d1195)
  begin
    case (_theResult____h3332[31:20])
      12'b0, 12'b000000000001:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1197 = 4'd11;
      default: IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1197 =
		   (rg_cur_priv == 2'b11 &&
		    _theResult____h3332[31:20] == 12'b001100000010) ?
		     4'd7 :
		     IF_rg_cur_priv_0_EQ_0b11_166_OR_rg_cur_priv_0__ETC___d1195;
    endcase
  end
  always@(_theResult____h3332)
  begin
    case (_theResult____h3332[14:12])
      3'b0: CASE_theResult__332_BITS_14_TO_12_0b0_4_0b1_5_11__q20 = 4'd4;
      3'b001: CASE_theResult__332_BITS_14_TO_12_0b0_4_0b1_5_11__q20 = 4'd5;
      default: CASE_theResult__332_BITS_14_TO_12_0b0_4_0b1_5_11__q20 = 4'd11;
    endcase
  end
  always@(_theResult____h3332 or
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1199)
  begin
    case (_theResult____h3332[14:12])
      3'b0:
	  CASE_theResult__332_BITS_14_TO_12_0b0_IF_IF_NO_ETC__q21 =
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1199;
      3'b001, 3'b101:
	  CASE_theResult__332_BITS_14_TO_12_0b0_IF_IF_NO_ETC__q21 = 4'd2;
      3'b010, 3'b011, 3'b110, 3'b111:
	  CASE_theResult__332_BITS_14_TO_12_0b0_IF_IF_NO_ETC__q21 = 4'd3;
      3'd4: CASE_theResult__332_BITS_14_TO_12_0b0_IF_IF_NO_ETC__q21 = 4'd11;
    endcase
  end
  always@(_theResult____h3332 or
	  IF_NOT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_P_ETC___d1160 or
	  CASE_theResult__332_BITS_14_TO_12_0b0_4_0b1_5_11__q20 or
	  IF_NOT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_P_ETC___d1157 or
	  IF_NOT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_P_ETC___d1161 or
	  funct10__h13850 or
	  IF_IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PL_ETC___d1207 or
	  CASE_theResult__332_BITS_14_TO_12_0b0_IF_IF_NO_ETC__q21)
  begin
    case (_theResult____h3332[6:0])
      7'b0000011, 7'b0000111:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1219 =
	      IF_NOT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_P_ETC___d1160;
      7'b0001111:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1219 =
	      CASE_theResult__332_BITS_14_TO_12_0b0_4_0b1_5_11__q20;
      7'b0010011, 7'b0110011:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1219 =
	      IF_NOT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_P_ETC___d1157;
      7'b0010111, 7'b0110111:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1219 = 4'd0;
      7'b0011011:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1219 =
	      (_theResult____h3332[14:12] != 3'b0 &&
	       (_theResult____h3332[14:12] != 3'b001 ||
		_theResult____h3332[25]) &&
	       (_theResult____h3332[14:12] != 3'b101 ||
		_theResult____h3332[25])) ?
		4'd11 :
		4'd0;
      7'b0100011, 7'b0100111:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1219 =
	      IF_NOT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_P_ETC___d1161;
      7'b0101111:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1219 =
	      ((_theResult____h3332[31:27] == 5'b00010 ||
		_theResult____h3332[31:27] == 5'b00011 ||
		_theResult____h3332[31:27] == 5'b0 ||
		_theResult____h3332[31:27] == 5'b00001 ||
		_theResult____h3332[31:27] == 5'b01100 ||
		_theResult____h3332[31:27] == 5'b01000 ||
		_theResult____h3332[31:27] == 5'b00100 ||
		_theResult____h3332[31:27] == 5'b10000 ||
		_theResult____h3332[31:27] == 5'b11000 ||
		_theResult____h3332[31:27] == 5'b10100 ||
		_theResult____h3332[31:27] == 5'b11100) &&
	       (_theResult____h3332[14:12] == 3'b010 ||
		_theResult____h3332[14:12] == 3'b011)) ?
		4'd0 :
		4'd11;
      7'b0111011:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1219 =
	      (funct10__h13850 != 10'b0 &&
	       funct10__h13850 != 10'b0100000000 &&
	       funct10__h13850 != 10'b0000000001 &&
	       funct10__h13850 != 10'b0000000101 &&
	       funct10__h13850 != 10'b0100000101) ?
		4'd11 :
		4'd0;
      7'b1000011, 7'b1000111, 7'b1001011, 7'b1001111, 7'b1010011:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1219 =
	      IF_IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PL_ETC___d1207;
      7'b1110011:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1219 =
	      CASE_theResult__332_BITS_14_TO_12_0b0_IF_IF_NO_ETC__q21;
      default: IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1219 =
		   4'd11;
    endcase
  end
  always@(_theResult____h3332 or
	  IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_ETC___d994 or
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1219 or
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d664)
  begin
    case (_theResult____h3332[6:0])
      7'b1100011:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1222 =
	      (_theResult____h3332[14:12] != 3'b0 &&
	       _theResult____h3332[14:12] != 3'b001 &&
	       _theResult____h3332[14:12] != 3'b100 &&
	       _theResult____h3332[14:12] != 3'b101 &&
	       _theResult____h3332[14:12] != 3'b110 &&
	       _theResult____h3332[14:12] != 3'b111) ?
		4'd11 :
		(IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d664 ?
		   4'd1 :
		   4'd0);
      7'b1100111, 7'b1101111:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1222 = 4'd1;
      default: IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1222 =
		   IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_ETC___d994 ?
		     4'd0 :
		     IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1219;
    endcase
  end
  always@(_theResult____h3332)
  begin
    case (_theResult____h3332[6:0])
      7'b0000011, 7'b0000111:
	  CASE_theResult__332_BITS_6_TO_0_0b11_1_0b111_1_ETC__q22 = 3'd1;
      7'b0010011, 7'b0010111, 7'b0011011, 7'b0110011, 7'b0110111, 7'b0111011:
	  CASE_theResult__332_BITS_6_TO_0_0b11_1_0b111_1_ETC__q22 = 3'd0;
      7'b0100011, 7'b0100111:
	  CASE_theResult__332_BITS_6_TO_0_0b11_1_0b111_1_ETC__q22 = 3'd2;
      7'b0101111:
	  CASE_theResult__332_BITS_6_TO_0_0b11_1_0b111_1_ETC__q22 = 3'd4;
      default: CASE_theResult__332_BITS_6_TO_0_0b11_1_0b111_1_ETC__q22 = 3'd5;
    endcase
  end
  always@(_theResult____h3332 or
	  CASE_theResult__332_BITS_6_TO_0_0b11_1_0b111_1_ETC__q22)
  begin
    case (_theResult____h3332[6:0])
      7'b1100011, 7'b1100111, 7'b1101111:
	  IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1310 = 3'd0;
      default: IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1310 =
		   ((_theResult____h3332[6:0] == 7'b0110011 ||
		     _theResult____h3332[6:0] == 7'b0111011) &&
		    _theResult____h3332[31:25] == 7'b0000001) ?
		     3'd3 :
		     CASE_theResult__332_BITS_6_TO_0_0b11_1_0b111_1_ETC__q22;
    endcase
  end
  always@(_theResult____h3332 or
	  _theResult_____1_fst__h14982 or
	  rd_val___1__h14950 or
	  rd_val___1__h14957 or rd_val___1__h14964 or rd_val___1__h14971)
  begin
    case (_theResult____h3332[14:12])
      3'b010: _theResult_____1_fst__h14954 = rd_val___1__h14950;
      3'b011: _theResult_____1_fst__h14954 = rd_val___1__h14957;
      3'b100: _theResult_____1_fst__h14954 = rd_val___1__h14964;
      3'b110: _theResult_____1_fst__h14954 = rd_val___1__h14971;
      default: _theResult_____1_fst__h14954 = _theResult_____1_fst__h14982;
    endcase
  end
  always@(_theResult____h3332 or
	  frs2_val_bypassed__h3356 or
	  alu_outputs___1_val2__h13951 or rs2_val_bypassed__h3346)
  begin
    case (_theResult____h3332[6:0])
      7'b0100011, 7'b0100111:
	  CASE_theResult__332_BITS_6_TO_0_0b100011_alu_o_ETC__q25 =
	      alu_outputs___1_val2__h13951;
      7'b0101111:
	  CASE_theResult__332_BITS_6_TO_0_0b100011_alu_o_ETC__q25 =
	      rs2_val_bypassed__h3346;
      default: CASE_theResult__332_BITS_6_TO_0_0b100011_alu_o_ETC__q25 =
		   frs2_val_bypassed__h3356;
    endcase
  end
  always@(_theResult____h3332 or
	  alu_outputs___1_addr__h13949 or
	  alu_outputs___1_addr__h13926 or
	  rs1_val_bypassed__h3340 or
	  alu_outputs___1_addr__h13599 or
	  alu_outputs___1_addr__h13653 or alu_outputs___1_addr__h13624)
  begin
    case (_theResult____h3332[6:0])
      7'b0000011, 7'b0000111:
	  x_out_data_to_stage2_addr__h13473 = alu_outputs___1_addr__h13926;
      7'b0100011:
	  x_out_data_to_stage2_addr__h13473 = alu_outputs___1_addr__h13949;
      7'b0101111: x_out_data_to_stage2_addr__h13473 = rs1_val_bypassed__h3340;
      7'b1100011:
	  x_out_data_to_stage2_addr__h13473 = alu_outputs___1_addr__h13599;
      7'b1100111:
	  x_out_data_to_stage2_addr__h13473 = alu_outputs___1_addr__h13653;
      7'b1101111:
	  x_out_data_to_stage2_addr__h13473 = alu_outputs___1_addr__h13624;
      default: x_out_data_to_stage2_addr__h13473 =
		   alu_outputs___1_addr__h13949;
    endcase
  end
  always@(_theResult____h3332 or imem_rg_pc or data_to_stage2_addr__h13462)
  begin
    case (_theResult____h3332[6:0])
      7'b1100011, 7'b1100111, 7'b1101111:
	  CASE_theResult__332_BITS_6_TO_0_0b1100011_data_ETC__q26 =
	      data_to_stage2_addr__h13462;
      default: CASE_theResult__332_BITS_6_TO_0_0b1100011_data_ETC__q26 =
		   (_theResult____h3332[6:0] == 7'b1110011 &&
		    _theResult____h3332[14:12] == 3'b0 &&
		    _theResult____h3332[11:7] == 5'd0 &&
		    _theResult____h3332[19:15] == 5'd0 &&
		    _theResult____h3332[31:20] == 12'b000000000001) ?
		     imem_rg_pc :
		     64'd0;
    endcase
  end
  always@(_theResult____h3332 or
	  alu_outputs___1_val1__h14363 or
	  alu_outputs___1_val1__h13812 or
	  alu_outputs___1_val1__h13902 or
	  alu_outputs___1_val1__h13838 or
	  alu_outputs___1_val1__h14260 or
	  alu_outputs___1_val1__h13883 or
	  alu_outputs___1_val1__h13864 or alu_outputs___1_val1__h14236)
  begin
    case (_theResult____h3332[6:0])
      7'b0010011, 7'b0110011:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1496 =
	      alu_outputs___1_val1__h13812;
      7'b0010111:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1496 =
	      alu_outputs___1_val1__h13902;
      7'b0011011:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1496 =
	      alu_outputs___1_val1__h13838;
      7'b0101111:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1496 =
	      alu_outputs___1_val1__h14260;
      7'b0110111:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1496 =
	      alu_outputs___1_val1__h13883;
      7'b0111011:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1496 =
	      alu_outputs___1_val1__h13864;
      7'b1110011:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1496 =
	      alu_outputs___1_val1__h14236;
      default: IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1496 =
		   alu_outputs___1_val1__h14363;
    endcase
  end
  always@(_theResult____h3332 or
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1498 or
	  IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_ETC___d1369)
  begin
    case (_theResult____h3332[6:0])
      7'b1100111, 7'b1101111:
	  x_out_data_to_stage2_val1__h13474 =
	      IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_7_ETC___d1369;
      default: x_out_data_to_stage2_val1__h13474 =
		   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1498;
    endcase
  end
  always@(x_out_data_to_stage2_instr__h13470 or
	  x_out_data_to_stage2_val1__h13474)
  begin
    case (x_out_data_to_stage2_instr__h13470[14:12])
      3'b010, 3'b011: rs1_val__h22340 = x_out_data_to_stage2_val1__h13474;
      default: rs1_val__h22340 =
		   { 59'd0, x_out_data_to_stage2_instr__h13470[19:15] };
    endcase
  end
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[267:265])
      3'd1, 3'd4:
	  CASE_stage2_rg_stage2_BITS_267_TO_265_1_stage2_ETC__q27 =
	      stage2_rg_stage2[3];
      default: CASE_stage2_rg_stage2_BITS_267_TO_265_1_stage2_ETC__q27 =
		   stage2_rg_stage2[267:265] != 3'd2 &&
		   stage2_rg_stage2[267:265] != 3'd3 &&
		   stage2_rg_stage2[3];
    endcase
  end
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[267:265])
      3'd1, 3'd4:
	  CASE_stage2_rg_stage2_BITS_267_TO_265_1_NOT_st_ETC__q28 =
	      !stage2_rg_stage2[3];
      default: CASE_stage2_rg_stage2_BITS_267_TO_265_1_NOT_st_ETC__q28 =
		   stage2_rg_stage2[267:265] == 3'd2 ||
		   stage2_rg_stage2[267:265] == 3'd3 ||
		   !stage2_rg_stage2[3];
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_logdelay <= `BSV_ASSIGNMENT_DELAY 64'd0;
	cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	rg_halt <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 4'd0;
	stage1_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stage2_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stage3_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (cfg_logdelay$EN)
	  cfg_logdelay <= `BSV_ASSIGNMENT_DELAY cfg_logdelay$D_IN;
	if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (rg_halt$EN) rg_halt <= `BSV_ASSIGNMENT_DELAY rg_halt$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
	if (stage1_rg_full$EN)
	  stage1_rg_full <= `BSV_ASSIGNMENT_DELAY stage1_rg_full$D_IN;
	if (stage2_rg_full$EN)
	  stage2_rg_full <= `BSV_ASSIGNMENT_DELAY stage2_rg_full$D_IN;
	if (stage3_rg_full$EN)
	  stage3_rg_full <= `BSV_ASSIGNMENT_DELAY stage3_rg_full$D_IN;
      end
    if (imem_rg_f3$EN) imem_rg_f3 <= `BSV_ASSIGNMENT_DELAY imem_rg_f3$D_IN;
    if (imem_rg_instr_15_0$EN)
      imem_rg_instr_15_0 <= `BSV_ASSIGNMENT_DELAY imem_rg_instr_15_0$D_IN;
    if (imem_rg_mstatus_MXR$EN)
      imem_rg_mstatus_MXR <= `BSV_ASSIGNMENT_DELAY imem_rg_mstatus_MXR$D_IN;
    if (imem_rg_pc$EN) imem_rg_pc <= `BSV_ASSIGNMENT_DELAY imem_rg_pc$D_IN;
    if (imem_rg_priv$EN)
      imem_rg_priv <= `BSV_ASSIGNMENT_DELAY imem_rg_priv$D_IN;
    if (imem_rg_satp$EN)
      imem_rg_satp <= `BSV_ASSIGNMENT_DELAY imem_rg_satp$D_IN;
    if (imem_rg_sstatus_SUM$EN)
      imem_rg_sstatus_SUM <= `BSV_ASSIGNMENT_DELAY imem_rg_sstatus_SUM$D_IN;
    if (rg_cur_priv$EN) rg_cur_priv <= `BSV_ASSIGNMENT_DELAY rg_cur_priv$D_IN;
    if (rg_next_pc$EN) rg_next_pc <= `BSV_ASSIGNMENT_DELAY rg_next_pc$D_IN;
    if (rg_start_CPI_cycles$EN)
      rg_start_CPI_cycles <= `BSV_ASSIGNMENT_DELAY rg_start_CPI_cycles$D_IN;
    if (rg_start_CPI_instrs$EN)
      rg_start_CPI_instrs <= `BSV_ASSIGNMENT_DELAY rg_start_CPI_instrs$D_IN;
    if (stage2_rg_stage2$EN)
      stage2_rg_stage2 <= `BSV_ASSIGNMENT_DELAY stage2_rg_stage2$D_IN;
    if (stage3_rg_stage3$EN)
      stage3_rg_stage3 <= `BSV_ASSIGNMENT_DELAY stage3_rg_stage3$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_logdelay = 64'hAAAAAAAAAAAAAAAA;
    cfg_verbosity = 4'hA;
    imem_rg_f3 = 3'h2;
    imem_rg_instr_15_0 = 16'hAAAA;
    imem_rg_mstatus_MXR = 1'h0;
    imem_rg_pc = 64'hAAAAAAAAAAAAAAAA;
    imem_rg_priv = 2'h2;
    imem_rg_satp = 64'hAAAAAAAAAAAAAAAA;
    imem_rg_sstatus_SUM = 1'h0;
    rg_cur_priv = 2'h2;
    rg_halt = 1'h0;
    rg_next_pc = 64'hAAAAAAAAAAAAAAAA;
    rg_start_CPI_cycles = 64'hAAAAAAAAAAAAAAAA;
    rg_start_CPI_instrs = 64'hAAAAAAAAAAAAAAAA;
    rg_state = 4'hA;
    stage1_rg_full = 1'h0;
    stage2_rg_full = 1'h0;
    stage2_rg_stage2 =
	366'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    stage3_rg_full = 1'h0;
    stage3_rg_stage3 = 175'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("%0d: Pipeline State:  minstret:%0d  cur_priv:%0d  mstatus:%0x",
		 csr_regfile$read_csr_mcycle,
		 csr_regfile$read_csr_minstret,
		 rg_cur_priv,
		 csr_regfile$read_mstatus);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write("MStatus{",
	       "sd:%0d",
	       csr_regfile$read_mstatus[14:13] == 2'h3 ||
	       csr_regfile$read_mstatus[16:15] == 2'h3);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && csr_regfile$read_misa[27:26] == 2'd2)
	$write(" sxl:%0d uxl:%0d", sxl__h3797, uxl__h3798);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && csr_regfile$read_misa[27:26] != 2'd2)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" tsr:%0d", csr_regfile$read_mstatus[22]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" tw:%0d", csr_regfile$read_mstatus[21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" tvm:%0d", csr_regfile$read_mstatus[20]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" mxr:%0d", csr_regfile$read_mstatus[19]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" sum:%0d", csr_regfile$read_mstatus[18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" mprv:%0d", csr_regfile$read_mstatus[17]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" xs:%0d", csr_regfile$read_mstatus[16:15]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" fs:%0d", csr_regfile$read_mstatus[14:13]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" mpp:%0d", csr_regfile$read_mstatus[12:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" spp:%0d", csr_regfile$read_mstatus[8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" pies:%0d_%0d%0d",
	       csr_regfile$read_mstatus[7],
	       csr_regfile$read_mstatus[5],
	       csr_regfile$read_mstatus[4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" ies:%0d_%0d%0d",
	       csr_regfile$read_mstatus[3],
	       csr_regfile$read_mstatus[1],
	       csr_regfile$read_mstatus[0]);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("    Stage3: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Output_Stage3");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage3_rg_full) $write(" PIPE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage3_rg_full) $write(" EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        Bypass to Stage1: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Bypass {");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  (stage3_rg_stage3[69] || !stage3_rg_full || !stage3_rg_stage3[76]))
	$write("Rd -");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage3_rg_stage3[69] &&
	  stage3_rg_full &&
	  stage3_rg_stage3[76])
	$write("Rd %0d ", stage3_rg_stage3[75:71]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  (stage3_rg_stage3[69] || !stage3_rg_full || !stage3_rg_stage3[76]))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage3_rg_stage3[69] &&
	  stage3_rg_full &&
	  stage3_rg_stage3[76])
	$write("rd_val:%h", stage3_rg_stage3[63:0]);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        FBypass to Stage1: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("FBypass {");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  (!stage3_rg_stage3[69] || !stage3_rg_full || !stage3_rg_stage3[76]))
	$write("FRd -");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage3_rg_stage3[69] &&
	  stage3_rg_full &&
	  stage3_rg_stage3[76])
	$write("FRd %0d ", stage3_rg_stage3[75:71]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  (!stage3_rg_stage3[69] || !stage3_rg_full || !stage3_rg_stage3[76]))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage3_rg_stage3[69] &&
	  stage3_rg_full &&
	  stage3_rg_stage3[76])
	$write("frd_val:%h", stage3_rg_stage3[63:0]);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("    Stage2: pc 0x%08h instr 0x%08h priv %0d",
		 stage2_rg_stage2[363:300],
		 stage2_rg_stage2[299:268],
		 stage2_rg_stage2[365:364]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd0)
	$write("Output_Stage2", " EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd1)
	$write("Output_Stage2", " BUSY: pc:%0h", stage2_rg_stage2[363:300]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd3)
	$write("Output_Stage2", " NONPIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd0 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd1 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd3)
	$write("Output_Stage2", " PIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd0 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd1 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd3)
	$write("data_to_Stage3 {pc:%h  instr:%h  priv:%0d\n",
	       stage2_rg_stage2[363:300],
	       stage2_rg_stage2[299:268],
	       stage2_rg_stage2[365:364]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd0 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd1 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd3)
	$write("        rd_valid:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd0 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd1 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd3 &&
	  stage2_rg_stage2[267:265] != 3'd0 &&
	  IF_stage2_rg_stage2_5_BITS_267_TO_265_6_EQ_1_8_ETC___d146)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd0 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd1 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd3 &&
	  (stage2_rg_stage2[267:265] == 3'd0 ||
	   IF_stage2_rg_stage2_5_BITS_267_TO_265_6_EQ_1_8_ETC___d156))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd0 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd1 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd3 &&
	  stage2_rg_stage2[267:265] != 3'd0 &&
	  stage2_rg_stage2[267:265] != 3'd1 &&
	  stage2_rg_stage2[267:265] != 3'd4 &&
	  stage2_rg_stage2[267:265] != 3'd2 &&
	  stage2_rg_stage2[267:265] != 3'd3)
	$write("  fflags: %05b", x_out_data_to_stage3_fpr_flags__h4904);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd0 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd1 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd3 &&
	  (stage2_rg_stage2[267:265] == 3'd0 ||
	   stage2_rg_stage2[267:265] == 3'd1 ||
	   stage2_rg_stage2[267:265] == 3'd4 ||
	   stage2_rg_stage2[267:265] == 3'd2 ||
	   stage2_rg_stage2[267:265] == 3'd3))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd0 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd1 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd3 &&
	  stage2_rg_stage2[267:265] != 3'd0 &&
	  CASE_stage2_rg_stage2_BITS_267_TO_265_1_stage2_ETC__q27)
	$write("  frd:%0d  rd_val:%h\n",
	       x_out_data_to_stage3_rd__h4901,
	       x_out_data_to_stage3_rd_val__h4905);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd0 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd1 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd3 &&
	  (stage2_rg_stage2[267:265] == 3'd0 ||
	   CASE_stage2_rg_stage2_BITS_267_TO_265_1_NOT_st_ETC__q28))
	$write("  grd:%0d  rd_val:%h\n",
	       x_out_data_to_stage3_rd__h4901,
	       x_out_data_to_stage3_rd_val__h4905);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd3)
	$write("Trap_Info { ", "epc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd0 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd1 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd3)
	$write("'h%h", value__h5109);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd0 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd1 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd3)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd0 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd1 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd3)
	$write("'h%h", x_out_trap_info_exc_code__h5146);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd0 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd1 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd3)
	$write(", ", "tval: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd0 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd1 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd3)
	$write("'h%h", value__h5170, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd0 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd1 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd3)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd0 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd1 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd3)
	$write("Trap_Info { ", "epc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd0 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd1 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd3)
	$write("'h%h", value__h5109);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd0 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd1 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd3)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd0 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd1 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd3)
	$write("'h%h", x_out_trap_info_exc_code__h5146);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd0 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd1 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd3)
	$write(", ", "tval: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd0 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd1 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd3)
	$write("'h%h", value__h5170, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd0 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd1 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        Bypass to Stage1: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Bypass {");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d247 == 2'd0)
	$write("Rd -");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d247 != 2'd0)
	$write("Rd %0d ", x_out_bypass_rd__h5403);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d247 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d247 == 2'd1)
	$write("-");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d247 != 2'd0 &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d247 != 2'd1)
	$write("rd_val:%h", x_out_bypass_rd_val__h5404);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        FBypass to Stage1: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("FBypass {");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_NOT_stage2_rg_full_4_21_OR_stage2_rg_stage2_ETC___d269 == 2'd0)
	$write("FRd -");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_NOT_stage2_rg_full_4_21_OR_stage2_rg_stage2_ETC___d269 != 2'd0)
	$write("FRd %0d ", x_out_fbypass_rd__h5548);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_NOT_stage2_rg_full_4_21_OR_stage2_rg_stage2_ETC___d269 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_NOT_stage2_rg_full_4_21_OR_stage2_rg_stage2_ETC___d269 == 2'd1)
	$write("-");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_NOT_stage2_rg_full_4_21_OR_stage2_rg_stage2_ETC___d269 != 2'd0 &&
	  IF_NOT_stage2_rg_full_4_21_OR_stage2_rg_stage2_ETC___d269 != 2'd1)
	$write("frd_val:%h", x_out_fbypass_rd_val__h5549);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("    Stage1: pc 0x%08h instr 0x%08h priv %0d",
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h13470,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_87_OR_NOT_near_mem_ime_ETC___d599)
	$write("Output_Stage1", " BUSY pc:%h", imem_rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d980)
	$write("Output_Stage1", " NONPIPE: pc:%h", imem_rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d1153)
	$write("Output_Stage1");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full)
	$write("Output_Stage1", " EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_87_OR_NOT_near_mem_ime_ETC___d599)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d980)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d1153)
	$write(" PIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_87_OR_NOT_near_mem_ime_ETC___d599)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d980)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d614 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1148 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1150) &&
	  IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 == 4'd0)
	$write("CONTROL_STRAIGHT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d614 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1148 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1150) &&
	  IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 == 4'd1)
	$write("CONTROL_BRANCH");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d614 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1148 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1150) &&
	  IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 == 4'd2)
	$write("CONTROL_CSRR_W");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d614 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1148 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1150) &&
	  IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 == 4'd3)
	$write("CONTROL_CSRR_S_or_C");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d614 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1148 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1150) &&
	  IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 == 4'd4)
	$write("CONTROL_FENCE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d614 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1148 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1150) &&
	  IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 == 4'd5)
	$write("CONTROL_FENCE_I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d614 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1148 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1150) &&
	  IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 == 4'd6)
	$write("CONTROL_SFENCE_VMA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d614 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1148 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1150) &&
	  IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 == 4'd7)
	$write("CONTROL_MRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d614 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1148 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1150) &&
	  IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 == 4'd8)
	$write("CONTROL_SRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d614 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1148 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1150) &&
	  IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 == 4'd9)
	$write("CONTROL_URET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d614 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1148 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1150) &&
	  IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1224 == 4'd10)
	$write("CONTROL_WFI");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d614 &&
	  NOT_near_mem_imem_exc__15_82_AND_IF_IF_NOT_nea_ETC___d1290)
	$write("CONTROL_TRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_87_OR_NOT_near_mem_ime_ETC___d599)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d980)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d1153)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_87_OR_NOT_near_mem_ime_ETC___d599)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d980)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d1153)
	$write("data_to_Stage 2 {pc:%h  instr:%h  priv:%0d\n",
	       imem_rg_pc,
	       x_out_data_to_stage2_instr__h13470,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_87_OR_NOT_near_mem_ime_ETC___d599)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d980)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d1153)
	$write("            op_stage2:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_87_OR_NOT_near_mem_ime_ETC___d599)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d980)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d614 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1148 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1150) &&
	  IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1310 == 3'd0)
	$write("OP_Stage2_ALU");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d614 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1148 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1150) &&
	  IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1310 == 3'd1)
	$write("OP_Stage2_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d614 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1148 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1150) &&
	  IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1310 == 3'd2)
	$write("OP_Stage2_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d614 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1148 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1150) &&
	  IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1310 == 3'd3)
	$write("OP_Stage2_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d614 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1148 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1150) &&
	  IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1310 == 3'd4)
	$write("OP_Stage2_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d614 &&
	  NOT_near_mem_imem_exc__15_82_AND_IF_IF_NOT_nea_ETC___d1340)
	$write("OP_Stage2_FD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_87_OR_NOT_near_mem_ime_ETC___d599)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d980)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d1153)
	$write("  rd:%0d\n", x_out_data_to_stage2_rd__h13472);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_87_OR_NOT_near_mem_ime_ETC___d599)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d980)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d1153)
	$write("            addr:%h  val1:%h  val2:%h  val3:%h}",
	       x_out_data_to_stage2_addr__h13473,
	       x_out_data_to_stage2_val1__h13474,
	       x_out_data_to_stage2_val2__h13475,
	       x_out_data_to_stage2_val3__h13476);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_87_OR_NOT_near_mem_ime_ETC___d599)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d980)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d1153)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_87_OR_NOT_near_mem_ime_ETC___d599)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d614 &&
	  near_mem_imem_exc__15_OR_IF_IF_NOT_near_mem_im_ETC___d1542)
	$write("CONTROL_STRAIGHT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d614 &&
	  near_mem_imem_exc__15_OR_IF_IF_NOT_near_mem_im_ETC___d1545)
	$write("CONTROL_BRANCH");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d614 &&
	  near_mem_imem_exc__15_OR_IF_IF_NOT_near_mem_im_ETC___d1548)
	$write("CONTROL_CSRR_W");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d614 &&
	  near_mem_imem_exc__15_OR_IF_IF_NOT_near_mem_im_ETC___d1551)
	$write("CONTROL_CSRR_S_or_C");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d614 &&
	  near_mem_imem_exc__15_OR_IF_IF_NOT_near_mem_im_ETC___d1554)
	$write("CONTROL_FENCE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d614 &&
	  near_mem_imem_exc__15_OR_IF_IF_NOT_near_mem_im_ETC___d1557)
	$write("CONTROL_FENCE_I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d614 &&
	  near_mem_imem_exc__15_OR_IF_IF_NOT_near_mem_im_ETC___d1560)
	$write("CONTROL_SFENCE_VMA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d614 &&
	  near_mem_imem_exc__15_OR_IF_IF_NOT_near_mem_im_ETC___d1563)
	$write("CONTROL_MRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d614 &&
	  near_mem_imem_exc__15_OR_IF_IF_NOT_near_mem_im_ETC___d1566)
	$write("CONTROL_SRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d614 &&
	  near_mem_imem_exc__15_OR_IF_IF_NOT_near_mem_im_ETC___d1569)
	$write("CONTROL_URET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d614 &&
	  near_mem_imem_exc__15_OR_IF_IF_NOT_near_mem_im_ETC___d1572)
	$write("CONTROL_WFI");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d614 &&
	  near_mem_imem_exc__15_OR_IF_IF_NOT_near_mem_im_ETC___d1575)
	$write("CONTROL_TRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d1153)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_87_OR_NOT_near_mem_ime_ETC___d599)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d980)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d1153)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_87_OR_NOT_near_mem_ime_ETC___d599)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d980)
	$write("Trap_Info { ", "epc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d1153)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_87_OR_NOT_near_mem_ime_ETC___d599)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d980)
	$write("'h%h", imem_rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d1153)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_87_OR_NOT_near_mem_ime_ETC___d599)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d980)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d1153)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_87_OR_NOT_near_mem_ime_ETC___d599)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d980)
	$write("'h%h", x_out_trap_info_exc_code__h16549);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d1153)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_87_OR_NOT_near_mem_ime_ETC___d599)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d980)
	$write(", ", "tval: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d1153)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_87_OR_NOT_near_mem_ime_ETC___d599)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d980)
	$write("'h%h", value__h16605, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d1153)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_87_OR_NOT_near_mem_ime_ETC___d599)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d614)
	$write(" next_pc 0x%08h", x_out_next_pc__h13436);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $display("----------------");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && cur_verbosity__h2051 != 4'd0)
	$display("%0d: CPU.reset_complete", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("    CPU_Stage_1.enq: 0x%08x", pc_reset_value);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && cur_verbosity__h2051 != 4'd0)
	$display("    fa_restart: RUNNING with PC = 0x%0h", pc_reset_value);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage2_nonpipe &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("%0d: CPU.rl_stage2_nonpipe", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage2_nonpipe &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("    CPU_Stage_1.enq: 0x%08x",
		 csr_regfile$csr_trap_actions[193:130]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage2_nonpipe && cur_verbosity__h2051 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 value__h5109,
		 stage2_rg_stage2[299:268],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage2_nonpipe && cur_verbosity__h2051 != 4'd0)
	$display("    mcause:0x%0h  epc 0x%0h  tval:0x%0h  new pc 0x%0h, new mstatus 0x%0h",
		 csr_regfile$csr_trap_actions[65:2],
		 value__h5109,
		 value__h5170,
		 csr_regfile$csr_trap_actions[193:130],
		 csr_regfile$csr_trap_actions[129:66]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("%0d:  CPU.rl_stage1_CSRR_W", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W && csr_regfile$access_permitted_1 &&
	  cur_verbosity__h2051 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h13470,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W && csr_regfile$access_permitted_1 &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("    S1: write CSRRW/CSRRWI Rs1 %0d Rs1_val 0x%0h csr 0x%0h csr_val 0x%0h Rd %0d",
		 x_out_data_to_stage2_instr__h13470[19:15],
		 rs1_val__h21847,
		 x_out_data_to_stage2_instr__h13470[31:20],
		 csr_regfile$read_csr[63:0],
		 x_out_data_to_stage2_instr__h13470[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W && !csr_regfile$access_permitted_1 &&
	  cur_verbosity__h2051 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h13470,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W && !csr_regfile$access_permitted_1 &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("    rl_stage1_CSRR_W: Trap on CSR permissions: Rs1 %0d Rs1_val 0x%0h csr 0x%0h Rd %0d",
		 x_out_data_to_stage2_instr__h13470[19:15],
		 rs1_val__h21847,
		 x_out_data_to_stage2_instr__h13470[31:20],
		 x_out_data_to_stage2_instr__h13470[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("%0d:  CPU.rl_stage1_CSRR_S_or_C",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	  csr_regfile$access_permitted_2 &&
	  cur_verbosity__h2051 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h13470,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	  csr_regfile$access_permitted_2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("    S1: write CSRR_S_or_C: Rs1 %0d Rs1_val 0x%0h csr 0x%0h csr_val 0x%0h Rd %0d",
		 x_out_data_to_stage2_instr__h13470[19:15],
		 rs1_val__h22340,
		 x_out_data_to_stage2_instr__h13470[31:20],
		 csr_regfile$read_csr[63:0],
		 x_out_data_to_stage2_instr__h13470[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	  !csr_regfile$access_permitted_2 &&
	  cur_verbosity__h2051 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h13470,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	  !csr_regfile$access_permitted_2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("    rl_stage1_CSRR_S_or_C: Trap on CSR permissions: Rs1 %0d Rs1_val 0x%0h csr 0x%0h Rd %0d",
		 x_out_data_to_stage2_instr__h13470[19:15],
		 rs1_val__h22340,
		 x_out_data_to_stage2_instr__h13470[31:20],
		 x_out_data_to_stage2_instr__h13470[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("    CPU_Stage_1.enq: 0x%08x", x_out_next_pc__h13436);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("%0d: rl_stage1_restart_after_csrrx: minstret:%0d  pc:%0x  cur_priv:%0d",
		 csr_regfile$read_csr_mcycle,
		 csr_regfile$read_csr_minstret,
		 x_out_next_pc__h13436,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("%0d:  CPU.rl_stage1_xRET", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("    CPU_Stage_1.enq: 0x%08x",
		 csr_regfile$csr_ret_actions[129:66]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET && cur_verbosity__h2051 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h13470,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET && cur_verbosity__h2051 != 4'd0)
	$display("    xRET: next_pc:0x%0h  new mstatus:0x%0h  new priv:%0d",
		 csr_regfile$csr_ret_actions[129:66],
		 csr_regfile$csr_ret_actions[63:0],
		 csr_regfile$csr_ret_actions[65:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("%0d:  CPU.rl_stage1_FENCE_I", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE_I && cur_verbosity__h2051 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h13470,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("%0d: CPU.rl_stage1_FENCE_I", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("%0d:  CPU.rl_finish_FENCE_I", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("    CPU_Stage_1.enq: 0x%08x", rg_next_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("    CPU.rl_finish_FENCE_I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("%0d:  CPU.rl_stage1_FENCE", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE && cur_verbosity__h2051 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h13470,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("%0d: CPU.rl_stage1_FENCE", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("%0d:  CPU.rl_finish_FENCE", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("    CPU_Stage_1.enq: 0x%08x", rg_next_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("    CPU.rl_finish_FENCE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("%0d:  CPU.rl_stage1_SFENCE_VMA",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_SFENCE_VMA && cur_verbosity__h2051 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h13470,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("%0d: CPU.rl_stage1_SFENCE_VMA",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("%0d:  CPU.rl_finish_SFENCE_VMA",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("    CPU_Stage_1.enq: 0x%08x", rg_next_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("    CPU.rl_finish_SFENCE_VMA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_WFI &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("%0d:  CPU.rl_stage1_WFI", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_WFI && cur_verbosity__h2051 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h13470,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_WFI &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("    CPU.rl_stage1_WFI: minstret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h13470,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("%0d:  CPU.rl_WFI_resume", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume && cur_verbosity__h2051 != 4'd0)
	$display("    WFI resume");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("    CPU_Stage_1.enq: 0x%08x", rg_next_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_from_WFI &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("%0d:  CPU.rl_reset_from_WFI", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("%0d:  CPU.rl_stage1_trap", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("    CPU_Stage_1.enq: 0x%08x",
		 csr_regfile$csr_trap_actions[193:130]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1916)
	$display("%0d: CPU.rl_stage1_trap: Tight infinite trap loop: pc 0x%0x instr 0x%08x",
		 csr_regfile$read_csr_mcycle,
		 csr_regfile$csr_trap_actions[193:130],
		 x_out_data_to_stage2_instr__h13470);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1916)
	$display("CPI: %0d.%0d = (%0d/%0d) since last 'continue'",
		 cpi__h27140,
		 cpifrac__h27141,
		 delta_CPI_cycles__h27136,
		 _theResult____h27138);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_85_86_OR_NOT_near_mem_im_ETC___d1916)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap && cur_verbosity__h2051 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h13470,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap && cur_verbosity__h2051 != 4'd0)
	$display("%0d: CPU.rl_stage1_trap: priv:%0d  mcause:0x%0h  epc:0x%0h",
		 csr_regfile$read_csr_mcycle,
		 rg_cur_priv,
		 csr_regfile$csr_trap_actions[65:2],
		 imem_rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap && cur_verbosity__h2051 != 4'd0)
	$display("    tval:0x%0h  new pc:0x%0h  new mstatus:0x%0h",
		 value__h16605,
		 csr_regfile$csr_trap_actions[193:130],
		 csr_regfile$csr_trap_actions[129:66]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_interrupt &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("%0d:  CPU.rl_stage1_interrupt",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_interrupt &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("    CPU_Stage_1.enq: 0x%08x",
		 csr_regfile$csr_trap_actions[193:130]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_interrupt && cur_verbosity__h2051 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h13470,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_interrupt && cur_verbosity__h2051 != 4'd0)
	$display("%0d: CPU.rl_stage1_interrupt: epc 0x%0h  next PC 0x%0h  new_priv %0d  new mstatus 0x%0h",
		 csr_regfile$read_csr_mcycle,
		 imem_rg_pc,
		 csr_regfile$csr_trap_actions[193:130],
		 csr_regfile$csr_trap_actions[1:0],
		 csr_regfile$csr_trap_actions[129:66]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("%0d: CPU.rl_pipe", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe && stage3_rg_full && stage3_rg_stage3[76] &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38 &&
	  stage3_rg_stage3[69])
	$display("    S3.fa_deq: write FRd 0x%0h, rd_val 0x%0h",
		 stage3_rg_stage3[75:71],
		 stage3_rg_stage3[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe && stage3_rg_full && stage3_rg_stage3[76] &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38 &&
	  !stage3_rg_stage3[69])
	$display("    S3.fa_deq: write GRd 0x%0h, rd_val 0x%0h",
		 stage3_rg_stage3[75:71],
		 stage3_rg_stage3[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$write("    S3.enq: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$write("data_to_Stage3 {pc:%h  instr:%h  priv:%0d\n",
	       stage2_rg_stage2[363:300],
	       stage2_rg_stage2[299:268],
	       stage2_rg_stage2[365:364]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$write("        rd_valid:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38 &&
	  stage2_rg_stage2[267:265] != 3'd0 &&
	  IF_stage2_rg_stage2_5_BITS_267_TO_265_6_EQ_1_8_ETC___d146)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38 &&
	  (stage2_rg_stage2[267:265] == 3'd0 ||
	   IF_stage2_rg_stage2_5_BITS_267_TO_265_6_EQ_1_8_ETC___d156))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38 &&
	  stage2_rg_stage2[267:265] != 3'd0 &&
	  stage2_rg_stage2[267:265] != 3'd1 &&
	  stage2_rg_stage2[267:265] != 3'd4 &&
	  stage2_rg_stage2[267:265] != 3'd2 &&
	  stage2_rg_stage2[267:265] != 3'd3)
	$write("  fflags: %05b", x_out_data_to_stage3_fpr_flags__h4904);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38 &&
	  (stage2_rg_stage2[267:265] == 3'd0 ||
	   stage2_rg_stage2[267:265] == 3'd1 ||
	   stage2_rg_stage2[267:265] == 3'd4 ||
	   stage2_rg_stage2[267:265] == 3'd2 ||
	   stage2_rg_stage2[267:265] == 3'd3))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d1736)
	$write("  frd:%0d  rd_val:%h\n",
	       x_out_data_to_stage3_rd__h4901,
	       x_out_data_to_stage3_rd_val__h4905);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d1738)
	$write("  grd:%0d  rd_val:%h\n",
	       x_out_data_to_stage3_rd__h4901,
	       x_out_data_to_stage3_rd_val__h4905);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_4_THEN_IF_stage2_rg_stage2_5_ETC___d130 == 2'd2 &&
	  cur_verbosity__h2051 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 stage2_rg_stage2[363:300],
		 stage2_rg_stage2[299:268],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_rg_halt_672_696_AND_NOT_csr_regfile_interr_ETC___d1743 &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("    CPU_Stage2.enq (Data_Stage1_to_Stage2)");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_rg_halt_672_696_AND_NOT_csr_regfile_interr_ETC___d1803 &&
	  NOT_IF_csr_regfile_read_csr_minstret__2_ULT_cf_ETC___d38)
	$display("    CPU_Stage_1.enq: 0x%08x", x_out_next_pc__h13436);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$write("CPU: Bluespec  RISC-V  Piccolo  v3.0");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start) $display(" (RV64)");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$display("Copyright (c) 2016-2019 Bluespec, Inc. All Rights Reserved.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start && cur_verbosity__h2051 != 4'd0)
	$display("%0d: CPU.rl_reset_start", csr_regfile$read_csr_mcycle);
  end
  // synopsys translate_on
endmodule  // mkCPU

