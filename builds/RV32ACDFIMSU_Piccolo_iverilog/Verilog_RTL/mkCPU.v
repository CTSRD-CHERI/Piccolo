//
// Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
//
//
//
//
// Ports:
// Name                         I/O  size props
// RDY_hart0_server_reset_request_put  O     1 reg
// RDY_hart0_server_reset_response_get  O     1 reg
// imem_master_awvalid            O     1
// imem_master_awid               O     4 reg
// imem_master_awaddr             O    64 reg
// imem_master_awlen              O     8 reg
// imem_master_awsize             O     3 reg
// imem_master_awburst            O     2 reg
// imem_master_awlock             O     1 reg
// imem_master_awcache            O     4 reg
// imem_master_awprot             O     3 reg
// imem_master_awqos              O     4 reg
// imem_master_awregion           O     4 reg
// imem_master_wvalid             O     1
// imem_master_wid                O     4 reg
// imem_master_wdata              O    64 reg
// imem_master_wstrb              O     8 reg
// imem_master_wlast              O     1 reg
// imem_master_bready             O     1
// imem_master_arvalid            O     1
// imem_master_arid               O     4 reg
// imem_master_araddr             O    64 reg
// imem_master_arlen              O     8 reg
// imem_master_arsize             O     3 reg
// imem_master_arburst            O     2 reg
// imem_master_arlock             O     1 reg
// imem_master_arcache            O     4 reg
// imem_master_arprot             O     3 reg
// imem_master_arqos              O     4 reg
// imem_master_arregion           O     4 reg
// imem_master_rready             O     1
// dmem_master_awvalid            O     1
// dmem_master_awid               O     4 reg
// dmem_master_awaddr             O    64 reg
// dmem_master_awlen              O     8 reg
// dmem_master_awsize             O     3 reg
// dmem_master_awburst            O     2 reg
// dmem_master_awlock             O     1 reg
// dmem_master_awcache            O     4 reg
// dmem_master_awprot             O     3 reg
// dmem_master_awqos              O     4 reg
// dmem_master_awregion           O     4 reg
// dmem_master_wvalid             O     1
// dmem_master_wid                O     4 reg
// dmem_master_wdata              O    64 reg
// dmem_master_wstrb              O     8 reg
// dmem_master_wlast              O     1 reg
// dmem_master_bready             O     1
// dmem_master_arvalid            O     1
// dmem_master_arid               O     4 reg
// dmem_master_araddr             O    64 reg
// dmem_master_arlen              O     8 reg
// dmem_master_arsize             O     3 reg
// dmem_master_arburst            O     2 reg
// dmem_master_arlock             O     1 reg
// dmem_master_arcache            O     4 reg
// dmem_master_arprot             O     3 reg
// dmem_master_arqos              O     4 reg
// dmem_master_arregion           O     4 reg
// dmem_master_rready             O     1
// near_mem_slave_awready         O     1 const
// near_mem_slave_wready          O     1 const
// near_mem_slave_bvalid          O     1 const
// near_mem_slave_bid             O     4 const
// near_mem_slave_bresp           O     2 const
// near_mem_slave_arready         O     1 const
// near_mem_slave_rvalid          O     1 const
// near_mem_slave_rid             O     4 const
// near_mem_slave_rdata           O    64 const
// near_mem_slave_rresp           O     2 const
// near_mem_slave_rlast           O     1 const
// RDY_set_verbosity              O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// imem_master_awready            I     1
// imem_master_wready             I     1
// imem_master_bvalid             I     1
// imem_master_bid                I     4 reg
// imem_master_bresp              I     2 reg
// imem_master_arready            I     1
// imem_master_rvalid             I     1
// imem_master_rid                I     4 reg
// imem_master_rdata              I    64 reg
// imem_master_rresp              I     2 reg
// imem_master_rlast              I     1 reg
// dmem_master_awready            I     1
// dmem_master_wready             I     1
// dmem_master_bvalid             I     1
// dmem_master_bid                I     4 reg
// dmem_master_bresp              I     2 reg
// dmem_master_arready            I     1
// dmem_master_rvalid             I     1
// dmem_master_rid                I     4 reg
// dmem_master_rdata              I    64 reg
// dmem_master_rresp              I     2 reg
// dmem_master_rlast              I     1 reg
// near_mem_slave_awvalid         I     1 unused
// near_mem_slave_awid            I     4 unused
// near_mem_slave_awaddr          I    64 unused
// near_mem_slave_awlen           I     8 unused
// near_mem_slave_awsize          I     3 unused
// near_mem_slave_awburst         I     2 unused
// near_mem_slave_awlock          I     1 unused
// near_mem_slave_awcache         I     4 unused
// near_mem_slave_awprot          I     3 unused
// near_mem_slave_awqos           I     4 unused
// near_mem_slave_awregion        I     4 unused
// near_mem_slave_wvalid          I     1 unused
// near_mem_slave_wid             I     4 unused
// near_mem_slave_wdata           I    64 unused
// near_mem_slave_wstrb           I     8 unused
// near_mem_slave_wlast           I     1 unused
// near_mem_slave_bready          I     1 unused
// near_mem_slave_arvalid         I     1 unused
// near_mem_slave_arid            I     4 unused
// near_mem_slave_araddr          I    64 unused
// near_mem_slave_arlen           I     8 unused
// near_mem_slave_arsize          I     3 unused
// near_mem_slave_arburst         I     2 unused
// near_mem_slave_arlock          I     1 unused
// near_mem_slave_arcache         I     4 unused
// near_mem_slave_arprot          I     3 unused
// near_mem_slave_arqos           I     4 unused
// near_mem_slave_arregion        I     4 unused
// near_mem_slave_rready          I     1 unused
// external_interrupt_req_set_not_clear  I     1 reg
// set_verbosity_verbosity        I     4 reg
// set_verbosity_logdelay         I    64 reg
// EN_hart0_server_reset_request_put  I     1
// EN_hart0_server_reset_response_get  I     1
// EN_set_verbosity               I     1
//
// Combinational paths from inputs to outputs:
//   (imem_master_awready, imem_master_wready) -> imem_master_bready
//   (imem_master_awready,
//    imem_master_wready,
//    imem_master_arready,
//    dmem_master_awready,
//    dmem_master_wready) -> imem_master_rready
//   (imem_master_awready,
//    imem_master_wready,
//    dmem_master_awready,
//    dmem_master_wready,
//    dmem_master_arready) -> dmem_master_rready
//   (dmem_master_awready, dmem_master_wready) -> dmem_master_bready
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCPU(CLK,
	     RST_N,

	     EN_hart0_server_reset_request_put,
	     RDY_hart0_server_reset_request_put,

	     EN_hart0_server_reset_response_get,
	     RDY_hart0_server_reset_response_get,

	     imem_master_awvalid,

	     imem_master_awid,

	     imem_master_awaddr,

	     imem_master_awlen,

	     imem_master_awsize,

	     imem_master_awburst,

	     imem_master_awlock,

	     imem_master_awcache,

	     imem_master_awprot,

	     imem_master_awqos,

	     imem_master_awregion,

	     imem_master_awready,

	     imem_master_wvalid,

	     imem_master_wid,

	     imem_master_wdata,

	     imem_master_wstrb,

	     imem_master_wlast,

	     imem_master_wready,

	     imem_master_bvalid,
	     imem_master_bid,
	     imem_master_bresp,

	     imem_master_bready,

	     imem_master_arvalid,

	     imem_master_arid,

	     imem_master_araddr,

	     imem_master_arlen,

	     imem_master_arsize,

	     imem_master_arburst,

	     imem_master_arlock,

	     imem_master_arcache,

	     imem_master_arprot,

	     imem_master_arqos,

	     imem_master_arregion,

	     imem_master_arready,

	     imem_master_rvalid,
	     imem_master_rid,
	     imem_master_rdata,
	     imem_master_rresp,
	     imem_master_rlast,

	     imem_master_rready,

	     dmem_master_awvalid,

	     dmem_master_awid,

	     dmem_master_awaddr,

	     dmem_master_awlen,

	     dmem_master_awsize,

	     dmem_master_awburst,

	     dmem_master_awlock,

	     dmem_master_awcache,

	     dmem_master_awprot,

	     dmem_master_awqos,

	     dmem_master_awregion,

	     dmem_master_awready,

	     dmem_master_wvalid,

	     dmem_master_wid,

	     dmem_master_wdata,

	     dmem_master_wstrb,

	     dmem_master_wlast,

	     dmem_master_wready,

	     dmem_master_bvalid,
	     dmem_master_bid,
	     dmem_master_bresp,

	     dmem_master_bready,

	     dmem_master_arvalid,

	     dmem_master_arid,

	     dmem_master_araddr,

	     dmem_master_arlen,

	     dmem_master_arsize,

	     dmem_master_arburst,

	     dmem_master_arlock,

	     dmem_master_arcache,

	     dmem_master_arprot,

	     dmem_master_arqos,

	     dmem_master_arregion,

	     dmem_master_arready,

	     dmem_master_rvalid,
	     dmem_master_rid,
	     dmem_master_rdata,
	     dmem_master_rresp,
	     dmem_master_rlast,

	     dmem_master_rready,

	     near_mem_slave_awvalid,
	     near_mem_slave_awid,
	     near_mem_slave_awaddr,
	     near_mem_slave_awlen,
	     near_mem_slave_awsize,
	     near_mem_slave_awburst,
	     near_mem_slave_awlock,
	     near_mem_slave_awcache,
	     near_mem_slave_awprot,
	     near_mem_slave_awqos,
	     near_mem_slave_awregion,

	     near_mem_slave_awready,

	     near_mem_slave_wvalid,
	     near_mem_slave_wid,
	     near_mem_slave_wdata,
	     near_mem_slave_wstrb,
	     near_mem_slave_wlast,

	     near_mem_slave_wready,

	     near_mem_slave_bvalid,

	     near_mem_slave_bid,

	     near_mem_slave_bresp,

	     near_mem_slave_bready,

	     near_mem_slave_arvalid,
	     near_mem_slave_arid,
	     near_mem_slave_araddr,
	     near_mem_slave_arlen,
	     near_mem_slave_arsize,
	     near_mem_slave_arburst,
	     near_mem_slave_arlock,
	     near_mem_slave_arcache,
	     near_mem_slave_arprot,
	     near_mem_slave_arqos,
	     near_mem_slave_arregion,

	     near_mem_slave_arready,

	     near_mem_slave_rvalid,

	     near_mem_slave_rid,

	     near_mem_slave_rdata,

	     near_mem_slave_rresp,

	     near_mem_slave_rlast,

	     near_mem_slave_rready,

	     external_interrupt_req_set_not_clear,

	     set_verbosity_verbosity,
	     set_verbosity_logdelay,
	     EN_set_verbosity,
	     RDY_set_verbosity);
  input  CLK;
  input  RST_N;

  // action method hart0_server_reset_request_put
  input  EN_hart0_server_reset_request_put;
  output RDY_hart0_server_reset_request_put;

  // action method hart0_server_reset_response_get
  input  EN_hart0_server_reset_response_get;
  output RDY_hart0_server_reset_response_get;

  // value method imem_master_m_awvalid
  output imem_master_awvalid;

  // value method imem_master_m_awid
  output [3 : 0] imem_master_awid;

  // value method imem_master_m_awaddr
  output [63 : 0] imem_master_awaddr;

  // value method imem_master_m_awlen
  output [7 : 0] imem_master_awlen;

  // value method imem_master_m_awsize
  output [2 : 0] imem_master_awsize;

  // value method imem_master_m_awburst
  output [1 : 0] imem_master_awburst;

  // value method imem_master_m_awlock
  output imem_master_awlock;

  // value method imem_master_m_awcache
  output [3 : 0] imem_master_awcache;

  // value method imem_master_m_awprot
  output [2 : 0] imem_master_awprot;

  // value method imem_master_m_awqos
  output [3 : 0] imem_master_awqos;

  // value method imem_master_m_awregion
  output [3 : 0] imem_master_awregion;

  // value method imem_master_m_awuser

  // action method imem_master_m_awready
  input  imem_master_awready;

  // value method imem_master_m_wvalid
  output imem_master_wvalid;

  // value method imem_master_m_wid
  output [3 : 0] imem_master_wid;

  // value method imem_master_m_wdata
  output [63 : 0] imem_master_wdata;

  // value method imem_master_m_wstrb
  output [7 : 0] imem_master_wstrb;

  // value method imem_master_m_wlast
  output imem_master_wlast;

  // value method imem_master_m_wuser

  // action method imem_master_m_wready
  input  imem_master_wready;

  // action method imem_master_m_bvalid
  input  imem_master_bvalid;
  input  [3 : 0] imem_master_bid;
  input  [1 : 0] imem_master_bresp;

  // value method imem_master_m_bready
  output imem_master_bready;

  // value method imem_master_m_arvalid
  output imem_master_arvalid;

  // value method imem_master_m_arid
  output [3 : 0] imem_master_arid;

  // value method imem_master_m_araddr
  output [63 : 0] imem_master_araddr;

  // value method imem_master_m_arlen
  output [7 : 0] imem_master_arlen;

  // value method imem_master_m_arsize
  output [2 : 0] imem_master_arsize;

  // value method imem_master_m_arburst
  output [1 : 0] imem_master_arburst;

  // value method imem_master_m_arlock
  output imem_master_arlock;

  // value method imem_master_m_arcache
  output [3 : 0] imem_master_arcache;

  // value method imem_master_m_arprot
  output [2 : 0] imem_master_arprot;

  // value method imem_master_m_arqos
  output [3 : 0] imem_master_arqos;

  // value method imem_master_m_arregion
  output [3 : 0] imem_master_arregion;

  // value method imem_master_m_aruser

  // action method imem_master_m_arready
  input  imem_master_arready;

  // action method imem_master_m_rvalid
  input  imem_master_rvalid;
  input  [3 : 0] imem_master_rid;
  input  [63 : 0] imem_master_rdata;
  input  [1 : 0] imem_master_rresp;
  input  imem_master_rlast;

  // value method imem_master_m_rready
  output imem_master_rready;

  // value method dmem_master_m_awvalid
  output dmem_master_awvalid;

  // value method dmem_master_m_awid
  output [3 : 0] dmem_master_awid;

  // value method dmem_master_m_awaddr
  output [63 : 0] dmem_master_awaddr;

  // value method dmem_master_m_awlen
  output [7 : 0] dmem_master_awlen;

  // value method dmem_master_m_awsize
  output [2 : 0] dmem_master_awsize;

  // value method dmem_master_m_awburst
  output [1 : 0] dmem_master_awburst;

  // value method dmem_master_m_awlock
  output dmem_master_awlock;

  // value method dmem_master_m_awcache
  output [3 : 0] dmem_master_awcache;

  // value method dmem_master_m_awprot
  output [2 : 0] dmem_master_awprot;

  // value method dmem_master_m_awqos
  output [3 : 0] dmem_master_awqos;

  // value method dmem_master_m_awregion
  output [3 : 0] dmem_master_awregion;

  // value method dmem_master_m_awuser

  // action method dmem_master_m_awready
  input  dmem_master_awready;

  // value method dmem_master_m_wvalid
  output dmem_master_wvalid;

  // value method dmem_master_m_wid
  output [3 : 0] dmem_master_wid;

  // value method dmem_master_m_wdata
  output [63 : 0] dmem_master_wdata;

  // value method dmem_master_m_wstrb
  output [7 : 0] dmem_master_wstrb;

  // value method dmem_master_m_wlast
  output dmem_master_wlast;

  // value method dmem_master_m_wuser

  // action method dmem_master_m_wready
  input  dmem_master_wready;

  // action method dmem_master_m_bvalid
  input  dmem_master_bvalid;
  input  [3 : 0] dmem_master_bid;
  input  [1 : 0] dmem_master_bresp;

  // value method dmem_master_m_bready
  output dmem_master_bready;

  // value method dmem_master_m_arvalid
  output dmem_master_arvalid;

  // value method dmem_master_m_arid
  output [3 : 0] dmem_master_arid;

  // value method dmem_master_m_araddr
  output [63 : 0] dmem_master_araddr;

  // value method dmem_master_m_arlen
  output [7 : 0] dmem_master_arlen;

  // value method dmem_master_m_arsize
  output [2 : 0] dmem_master_arsize;

  // value method dmem_master_m_arburst
  output [1 : 0] dmem_master_arburst;

  // value method dmem_master_m_arlock
  output dmem_master_arlock;

  // value method dmem_master_m_arcache
  output [3 : 0] dmem_master_arcache;

  // value method dmem_master_m_arprot
  output [2 : 0] dmem_master_arprot;

  // value method dmem_master_m_arqos
  output [3 : 0] dmem_master_arqos;

  // value method dmem_master_m_arregion
  output [3 : 0] dmem_master_arregion;

  // value method dmem_master_m_aruser

  // action method dmem_master_m_arready
  input  dmem_master_arready;

  // action method dmem_master_m_rvalid
  input  dmem_master_rvalid;
  input  [3 : 0] dmem_master_rid;
  input  [63 : 0] dmem_master_rdata;
  input  [1 : 0] dmem_master_rresp;
  input  dmem_master_rlast;

  // value method dmem_master_m_rready
  output dmem_master_rready;

  // action method near_mem_slave_m_awvalid
  input  near_mem_slave_awvalid;
  input  [3 : 0] near_mem_slave_awid;
  input  [63 : 0] near_mem_slave_awaddr;
  input  [7 : 0] near_mem_slave_awlen;
  input  [2 : 0] near_mem_slave_awsize;
  input  [1 : 0] near_mem_slave_awburst;
  input  near_mem_slave_awlock;
  input  [3 : 0] near_mem_slave_awcache;
  input  [2 : 0] near_mem_slave_awprot;
  input  [3 : 0] near_mem_slave_awqos;
  input  [3 : 0] near_mem_slave_awregion;

  // value method near_mem_slave_m_awready
  output near_mem_slave_awready;

  // action method near_mem_slave_m_wvalid
  input  near_mem_slave_wvalid;
  input  [3 : 0] near_mem_slave_wid;
  input  [63 : 0] near_mem_slave_wdata;
  input  [7 : 0] near_mem_slave_wstrb;
  input  near_mem_slave_wlast;

  // value method near_mem_slave_m_wready
  output near_mem_slave_wready;

  // value method near_mem_slave_m_bvalid
  output near_mem_slave_bvalid;

  // value method near_mem_slave_m_bid
  output [3 : 0] near_mem_slave_bid;

  // value method near_mem_slave_m_bresp
  output [1 : 0] near_mem_slave_bresp;

  // value method near_mem_slave_m_buser

  // action method near_mem_slave_m_bready
  input  near_mem_slave_bready;

  // action method near_mem_slave_m_arvalid
  input  near_mem_slave_arvalid;
  input  [3 : 0] near_mem_slave_arid;
  input  [63 : 0] near_mem_slave_araddr;
  input  [7 : 0] near_mem_slave_arlen;
  input  [2 : 0] near_mem_slave_arsize;
  input  [1 : 0] near_mem_slave_arburst;
  input  near_mem_slave_arlock;
  input  [3 : 0] near_mem_slave_arcache;
  input  [2 : 0] near_mem_slave_arprot;
  input  [3 : 0] near_mem_slave_arqos;
  input  [3 : 0] near_mem_slave_arregion;

  // value method near_mem_slave_m_arready
  output near_mem_slave_arready;

  // value method near_mem_slave_m_rvalid
  output near_mem_slave_rvalid;

  // value method near_mem_slave_m_rid
  output [3 : 0] near_mem_slave_rid;

  // value method near_mem_slave_m_rdata
  output [63 : 0] near_mem_slave_rdata;

  // value method near_mem_slave_m_rresp
  output [1 : 0] near_mem_slave_rresp;

  // value method near_mem_slave_m_rlast
  output near_mem_slave_rlast;

  // value method near_mem_slave_m_ruser

  // action method near_mem_slave_m_rready
  input  near_mem_slave_rready;

  // action method external_interrupt_req
  input  external_interrupt_req_set_not_clear;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  [63 : 0] set_verbosity_logdelay;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // signals for module outputs
  wire [63 : 0] dmem_master_araddr,
		dmem_master_awaddr,
		dmem_master_wdata,
		imem_master_araddr,
		imem_master_awaddr,
		imem_master_wdata,
		near_mem_slave_rdata;
  wire [7 : 0] dmem_master_arlen,
	       dmem_master_awlen,
	       dmem_master_wstrb,
	       imem_master_arlen,
	       imem_master_awlen,
	       imem_master_wstrb;
  wire [3 : 0] dmem_master_arcache,
	       dmem_master_arid,
	       dmem_master_arqos,
	       dmem_master_arregion,
	       dmem_master_awcache,
	       dmem_master_awid,
	       dmem_master_awqos,
	       dmem_master_awregion,
	       dmem_master_wid,
	       imem_master_arcache,
	       imem_master_arid,
	       imem_master_arqos,
	       imem_master_arregion,
	       imem_master_awcache,
	       imem_master_awid,
	       imem_master_awqos,
	       imem_master_awregion,
	       imem_master_wid,
	       near_mem_slave_bid,
	       near_mem_slave_rid;
  wire [2 : 0] dmem_master_arprot,
	       dmem_master_arsize,
	       dmem_master_awprot,
	       dmem_master_awsize,
	       imem_master_arprot,
	       imem_master_arsize,
	       imem_master_awprot,
	       imem_master_awsize;
  wire [1 : 0] dmem_master_arburst,
	       dmem_master_awburst,
	       imem_master_arburst,
	       imem_master_awburst,
	       near_mem_slave_bresp,
	       near_mem_slave_rresp;
  wire RDY_hart0_server_reset_request_put,
       RDY_hart0_server_reset_response_get,
       RDY_set_verbosity,
       dmem_master_arlock,
       dmem_master_arvalid,
       dmem_master_awlock,
       dmem_master_awvalid,
       dmem_master_bready,
       dmem_master_rready,
       dmem_master_wlast,
       dmem_master_wvalid,
       imem_master_arlock,
       imem_master_arvalid,
       imem_master_awlock,
       imem_master_awvalid,
       imem_master_bready,
       imem_master_rready,
       imem_master_wlast,
       imem_master_wvalid,
       near_mem_slave_arready,
       near_mem_slave_awready,
       near_mem_slave_bvalid,
       near_mem_slave_rlast,
       near_mem_slave_rvalid,
       near_mem_slave_wready;

  // register cfg_logdelay
  reg [63 : 0] cfg_logdelay;
  wire [63 : 0] cfg_logdelay$D_IN;
  wire cfg_logdelay$EN;

  // register cfg_verbosity
  reg [3 : 0] cfg_verbosity;
  wire [3 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register imem_rg_f3
  reg [2 : 0] imem_rg_f3;
  wire [2 : 0] imem_rg_f3$D_IN;
  wire imem_rg_f3$EN;

  // register imem_rg_instr_15_0
  reg [15 : 0] imem_rg_instr_15_0;
  wire [15 : 0] imem_rg_instr_15_0$D_IN;
  wire imem_rg_instr_15_0$EN;

  // register imem_rg_mstatus_MXR
  reg imem_rg_mstatus_MXR;
  wire imem_rg_mstatus_MXR$D_IN, imem_rg_mstatus_MXR$EN;

  // register imem_rg_pc
  reg [31 : 0] imem_rg_pc;
  reg [31 : 0] imem_rg_pc$D_IN;
  wire imem_rg_pc$EN;

  // register imem_rg_priv
  reg [1 : 0] imem_rg_priv;
  reg [1 : 0] imem_rg_priv$D_IN;
  wire imem_rg_priv$EN;

  // register imem_rg_satp
  reg [31 : 0] imem_rg_satp;
  wire [31 : 0] imem_rg_satp$D_IN;
  wire imem_rg_satp$EN;

  // register imem_rg_sstatus_SUM
  reg imem_rg_sstatus_SUM;
  wire imem_rg_sstatus_SUM$D_IN, imem_rg_sstatus_SUM$EN;

  // register rg_cur_priv
  reg [1 : 0] rg_cur_priv;
  reg [1 : 0] rg_cur_priv$D_IN;
  wire rg_cur_priv$EN;

  // register rg_halt
  reg rg_halt;
  wire rg_halt$D_IN, rg_halt$EN;

  // register rg_next_pc
  reg [31 : 0] rg_next_pc;
  wire [31 : 0] rg_next_pc$D_IN;
  wire rg_next_pc$EN;

  // register rg_start_CPI_cycles
  reg [63 : 0] rg_start_CPI_cycles;
  wire [63 : 0] rg_start_CPI_cycles$D_IN;
  wire rg_start_CPI_cycles$EN;

  // register rg_start_CPI_instrs
  reg [63 : 0] rg_start_CPI_instrs;
  wire [63 : 0] rg_start_CPI_instrs$D_IN;
  wire rg_start_CPI_instrs$EN;

  // register rg_state
  reg [3 : 0] rg_state;
  reg [3 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // register stage1_rg_full
  reg stage1_rg_full;
  reg stage1_rg_full$D_IN;
  wire stage1_rg_full$EN;

  // register stage2_rg_full
  reg stage2_rg_full;
  reg stage2_rg_full$D_IN;
  wire stage2_rg_full$EN;

  // register stage2_rg_resetting
  reg stage2_rg_resetting;
  wire stage2_rg_resetting$D_IN, stage2_rg_resetting$EN;

  // register stage2_rg_stage2
  reg [301 : 0] stage2_rg_stage2;
  wire [301 : 0] stage2_rg_stage2$D_IN;
  wire stage2_rg_stage2$EN;

  // register stage3_rg_full
  reg stage3_rg_full;
  wire stage3_rg_full$D_IN, stage3_rg_full$EN;

  // register stage3_rg_stage3
  reg [142 : 0] stage3_rg_stage3;
  wire [142 : 0] stage3_rg_stage3$D_IN;
  wire stage3_rg_stage3$EN;

  // ports of submodule csr_regfile
  reg [31 : 0] csr_regfile$csr_trap_actions_xtval;
  reg [3 : 0] csr_regfile$csr_trap_actions_exc_code;
  reg [1 : 0] csr_regfile$csr_ret_actions_from_priv;
  wire [97 : 0] csr_regfile$csr_trap_actions;
  wire [65 : 0] csr_regfile$csr_ret_actions;
  wire [63 : 0] csr_regfile$read_csr_mcycle, csr_regfile$read_csr_minstret;
  wire [32 : 0] csr_regfile$read_csr;
  wire [31 : 0] csr_regfile$csr_trap_actions_pc,
		csr_regfile$mav_csr_write_word,
		csr_regfile$read_mstatus,
		csr_regfile$read_satp,
		csr_regfile$read_sstatus;
  wire [27 : 0] csr_regfile$read_misa;
  wire [11 : 0] csr_regfile$access_permitted_1_csr_addr,
		csr_regfile$access_permitted_2_csr_addr,
		csr_regfile$csr_counter_read_fault_csr_addr,
		csr_regfile$mav_csr_write_csr_addr,
		csr_regfile$mav_read_csr_csr_addr,
		csr_regfile$read_csr_csr_addr,
		csr_regfile$read_csr_port2_csr_addr;
  wire [4 : 0] csr_regfile$interrupt_pending,
	       csr_regfile$ma_update_fcsr_fflags_flags;
  wire [2 : 0] csr_regfile$read_frm;
  wire [1 : 0] csr_regfile$access_permitted_1_priv,
	       csr_regfile$access_permitted_2_priv,
	       csr_regfile$csr_counter_read_fault_priv,
	       csr_regfile$csr_trap_actions_from_priv,
	       csr_regfile$interrupt_pending_cur_priv,
	       csr_regfile$ma_update_mstatus_fs_fs;
  wire csr_regfile$EN_csr_minstret_incr,
       csr_regfile$EN_csr_ret_actions,
       csr_regfile$EN_csr_trap_actions,
       csr_regfile$EN_debug,
       csr_regfile$EN_ma_update_fcsr_fflags,
       csr_regfile$EN_ma_update_mstatus_fs,
       csr_regfile$EN_mav_csr_write,
       csr_regfile$EN_mav_read_csr,
       csr_regfile$EN_server_reset_request_put,
       csr_regfile$EN_server_reset_response_get,
       csr_regfile$EN_software_interrupt_req,
       csr_regfile$EN_timer_interrupt_req,
       csr_regfile$RDY_server_reset_request_put,
       csr_regfile$RDY_server_reset_response_get,
       csr_regfile$access_permitted_1,
       csr_regfile$access_permitted_1_read_not_write,
       csr_regfile$access_permitted_2,
       csr_regfile$access_permitted_2_read_not_write,
       csr_regfile$csr_trap_actions_interrupt,
       csr_regfile$external_interrupt_req_set_not_clear,
       csr_regfile$software_interrupt_req_set_not_clear,
       csr_regfile$timer_interrupt_req_set_not_clear,
       csr_regfile$wfi_resume;

  // ports of submodule f_reset_reqs
  wire f_reset_reqs$CLR,
       f_reset_reqs$DEQ,
       f_reset_reqs$EMPTY_N,
       f_reset_reqs$ENQ,
       f_reset_reqs$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule fpr_regfile
  wire [63 : 0] fpr_regfile$read_rs1,
		fpr_regfile$read_rs2,
		fpr_regfile$read_rs3,
		fpr_regfile$write_rd_rd_val;
  wire [4 : 0] fpr_regfile$read_rs1_port2_rs1,
	       fpr_regfile$read_rs1_rs1,
	       fpr_regfile$read_rs2_rs2,
	       fpr_regfile$read_rs3_rs3,
	       fpr_regfile$write_rd_rd;
  wire fpr_regfile$EN_server_reset_request_put,
       fpr_regfile$EN_server_reset_response_get,
       fpr_regfile$EN_write_rd,
       fpr_regfile$RDY_server_reset_request_put,
       fpr_regfile$RDY_server_reset_response_get;

  // ports of submodule gpr_regfile
  wire [31 : 0] gpr_regfile$read_rs1,
		gpr_regfile$read_rs2,
		gpr_regfile$write_rd_rd_val;
  wire [4 : 0] gpr_regfile$read_rs1_port2_rs1,
	       gpr_regfile$read_rs1_rs1,
	       gpr_regfile$read_rs2_rs2,
	       gpr_regfile$write_rd_rd;
  wire gpr_regfile$EN_server_reset_request_put,
       gpr_regfile$EN_server_reset_response_get,
       gpr_regfile$EN_write_rd,
       gpr_regfile$RDY_server_reset_request_put,
       gpr_regfile$RDY_server_reset_response_get;

  // ports of submodule near_mem
  reg [31 : 0] near_mem$imem_req_addr;
  reg [1 : 0] near_mem$dmem_req_op, near_mem$imem_req_priv;
  reg near_mem$imem_req_mstatus_MXR, near_mem$imem_req_sstatus_SUM;
  wire [63 : 0] near_mem$dmem_master_araddr,
		near_mem$dmem_master_awaddr,
		near_mem$dmem_master_rdata,
		near_mem$dmem_master_wdata,
		near_mem$dmem_req_store_value,
		near_mem$dmem_word64,
		near_mem$imem_master_araddr,
		near_mem$imem_master_awaddr,
		near_mem$imem_master_rdata,
		near_mem$imem_master_wdata,
		near_mem$near_mem_slave_araddr,
		near_mem$near_mem_slave_awaddr,
		near_mem$near_mem_slave_rdata,
		near_mem$near_mem_slave_wdata;
  wire [31 : 0] near_mem$dmem_req_addr,
		near_mem$dmem_req_satp,
		near_mem$imem_instr,
		near_mem$imem_pc,
		near_mem$imem_req_satp;
  wire [7 : 0] near_mem$dmem_master_arlen,
	       near_mem$dmem_master_awlen,
	       near_mem$dmem_master_wstrb,
	       near_mem$imem_master_arlen,
	       near_mem$imem_master_awlen,
	       near_mem$imem_master_wstrb,
	       near_mem$near_mem_slave_arlen,
	       near_mem$near_mem_slave_awlen,
	       near_mem$near_mem_slave_wstrb,
	       near_mem$server_fence_request_put;
  wire [6 : 0] near_mem$dmem_req_amo_funct7;
  wire [3 : 0] near_mem$dmem_exc_code,
	       near_mem$dmem_master_arcache,
	       near_mem$dmem_master_arid,
	       near_mem$dmem_master_arqos,
	       near_mem$dmem_master_arregion,
	       near_mem$dmem_master_awcache,
	       near_mem$dmem_master_awid,
	       near_mem$dmem_master_awqos,
	       near_mem$dmem_master_awregion,
	       near_mem$dmem_master_bid,
	       near_mem$dmem_master_rid,
	       near_mem$dmem_master_wid,
	       near_mem$imem_exc_code,
	       near_mem$imem_master_arcache,
	       near_mem$imem_master_arid,
	       near_mem$imem_master_arqos,
	       near_mem$imem_master_arregion,
	       near_mem$imem_master_awcache,
	       near_mem$imem_master_awid,
	       near_mem$imem_master_awqos,
	       near_mem$imem_master_awregion,
	       near_mem$imem_master_bid,
	       near_mem$imem_master_rid,
	       near_mem$imem_master_wid,
	       near_mem$near_mem_slave_arcache,
	       near_mem$near_mem_slave_arid,
	       near_mem$near_mem_slave_arqos,
	       near_mem$near_mem_slave_arregion,
	       near_mem$near_mem_slave_awcache,
	       near_mem$near_mem_slave_awid,
	       near_mem$near_mem_slave_awqos,
	       near_mem$near_mem_slave_awregion,
	       near_mem$near_mem_slave_bid,
	       near_mem$near_mem_slave_rid,
	       near_mem$near_mem_slave_wid;
  wire [2 : 0] near_mem$dmem_master_arprot,
	       near_mem$dmem_master_arsize,
	       near_mem$dmem_master_awprot,
	       near_mem$dmem_master_awsize,
	       near_mem$dmem_req_f3,
	       near_mem$imem_master_arprot,
	       near_mem$imem_master_arsize,
	       near_mem$imem_master_awprot,
	       near_mem$imem_master_awsize,
	       near_mem$imem_req_f3,
	       near_mem$near_mem_slave_arprot,
	       near_mem$near_mem_slave_arsize,
	       near_mem$near_mem_slave_awprot,
	       near_mem$near_mem_slave_awsize;
  wire [1 : 0] near_mem$dmem_master_arburst,
	       near_mem$dmem_master_awburst,
	       near_mem$dmem_master_bresp,
	       near_mem$dmem_master_rresp,
	       near_mem$dmem_req_priv,
	       near_mem$imem_master_arburst,
	       near_mem$imem_master_awburst,
	       near_mem$imem_master_bresp,
	       near_mem$imem_master_rresp,
	       near_mem$near_mem_slave_arburst,
	       near_mem$near_mem_slave_awburst,
	       near_mem$near_mem_slave_bresp,
	       near_mem$near_mem_slave_rresp;
  wire near_mem$EN_dmem_req,
       near_mem$EN_get_sw_interrupt_req_get,
       near_mem$EN_get_timer_interrupt_req_get,
       near_mem$EN_imem_req,
       near_mem$EN_server_fence_i_request_put,
       near_mem$EN_server_fence_i_response_get,
       near_mem$EN_server_fence_request_put,
       near_mem$EN_server_fence_response_get,
       near_mem$EN_server_reset_request_put,
       near_mem$EN_server_reset_response_get,
       near_mem$EN_sfence_vma,
       near_mem$RDY_get_sw_interrupt_req_get,
       near_mem$RDY_get_timer_interrupt_req_get,
       near_mem$RDY_server_fence_i_request_put,
       near_mem$RDY_server_fence_i_response_get,
       near_mem$RDY_server_fence_request_put,
       near_mem$RDY_server_fence_response_get,
       near_mem$RDY_server_reset_request_put,
       near_mem$RDY_server_reset_response_get,
       near_mem$dmem_exc,
       near_mem$dmem_master_arlock,
       near_mem$dmem_master_arready,
       near_mem$dmem_master_arvalid,
       near_mem$dmem_master_awlock,
       near_mem$dmem_master_awready,
       near_mem$dmem_master_awvalid,
       near_mem$dmem_master_bready,
       near_mem$dmem_master_bvalid,
       near_mem$dmem_master_rlast,
       near_mem$dmem_master_rready,
       near_mem$dmem_master_rvalid,
       near_mem$dmem_master_wlast,
       near_mem$dmem_master_wready,
       near_mem$dmem_master_wvalid,
       near_mem$dmem_req_mstatus_MXR,
       near_mem$dmem_req_sstatus_SUM,
       near_mem$dmem_valid,
       near_mem$get_sw_interrupt_req_get,
       near_mem$get_timer_interrupt_req_get,
       near_mem$imem_exc,
       near_mem$imem_is_i32_not_i16,
       near_mem$imem_master_arlock,
       near_mem$imem_master_arready,
       near_mem$imem_master_arvalid,
       near_mem$imem_master_awlock,
       near_mem$imem_master_awready,
       near_mem$imem_master_awvalid,
       near_mem$imem_master_bready,
       near_mem$imem_master_bvalid,
       near_mem$imem_master_rlast,
       near_mem$imem_master_rready,
       near_mem$imem_master_rvalid,
       near_mem$imem_master_wlast,
       near_mem$imem_master_wready,
       near_mem$imem_master_wvalid,
       near_mem$imem_valid,
       near_mem$near_mem_slave_arlock,
       near_mem$near_mem_slave_arready,
       near_mem$near_mem_slave_arvalid,
       near_mem$near_mem_slave_awlock,
       near_mem$near_mem_slave_awready,
       near_mem$near_mem_slave_awvalid,
       near_mem$near_mem_slave_bready,
       near_mem$near_mem_slave_bvalid,
       near_mem$near_mem_slave_rlast,
       near_mem$near_mem_slave_rready,
       near_mem$near_mem_slave_rvalid,
       near_mem$near_mem_slave_wlast,
       near_mem$near_mem_slave_wready,
       near_mem$near_mem_slave_wvalid;

  // ports of submodule soc_map
  wire [63 : 0] soc_map$m_is_IO_addr_addr,
		soc_map$m_is_mem_addr_addr,
		soc_map$m_is_near_mem_IO_addr_addr,
		soc_map$m_pc_reset_value;

  // ports of submodule stage1_f_reset_reqs
  wire stage1_f_reset_reqs$CLR,
       stage1_f_reset_reqs$DEQ,
       stage1_f_reset_reqs$EMPTY_N,
       stage1_f_reset_reqs$ENQ,
       stage1_f_reset_reqs$FULL_N;

  // ports of submodule stage1_f_reset_rsps
  wire stage1_f_reset_rsps$CLR,
       stage1_f_reset_rsps$DEQ,
       stage1_f_reset_rsps$EMPTY_N,
       stage1_f_reset_rsps$ENQ,
       stage1_f_reset_rsps$FULL_N;

  // ports of submodule stage2_f_reset_reqs
  wire stage2_f_reset_reqs$CLR,
       stage2_f_reset_reqs$DEQ,
       stage2_f_reset_reqs$EMPTY_N,
       stage2_f_reset_reqs$ENQ,
       stage2_f_reset_reqs$FULL_N;

  // ports of submodule stage2_f_reset_rsps
  wire stage2_f_reset_rsps$CLR,
       stage2_f_reset_rsps$DEQ,
       stage2_f_reset_rsps$EMPTY_N,
       stage2_f_reset_rsps$ENQ,
       stage2_f_reset_rsps$FULL_N;

  // ports of submodule stage2_fbox
  wire [63 : 0] stage2_fbox$req_v1,
		stage2_fbox$req_v2,
		stage2_fbox$req_v3,
		stage2_fbox$word_fst;
  wire [6 : 0] stage2_fbox$req_f7, stage2_fbox$req_opcode;
  wire [4 : 0] stage2_fbox$req_rs2, stage2_fbox$word_snd;
  wire [2 : 0] stage2_fbox$req_rm;
  wire stage2_fbox$EN_req,
       stage2_fbox$EN_server_reset_request_put,
       stage2_fbox$EN_server_reset_response_get,
       stage2_fbox$RDY_server_reset_request_put,
       stage2_fbox$RDY_server_reset_response_get,
       stage2_fbox$valid;

  // ports of submodule stage2_mbox
  wire [31 : 0] stage2_mbox$req_v1, stage2_mbox$req_v2, stage2_mbox$word;
  wire [3 : 0] stage2_mbox$set_verbosity_verbosity;
  wire [2 : 0] stage2_mbox$req_f3;
  wire stage2_mbox$EN_req,
       stage2_mbox$EN_req_reset,
       stage2_mbox$EN_rsp_reset,
       stage2_mbox$EN_set_verbosity,
       stage2_mbox$req_is_OP_not_OP_32,
       stage2_mbox$valid;

  // ports of submodule stage3_f_reset_reqs
  wire stage3_f_reset_reqs$CLR,
       stage3_f_reset_reqs$DEQ,
       stage3_f_reset_reqs$EMPTY_N,
       stage3_f_reset_reqs$ENQ,
       stage3_f_reset_reqs$FULL_N;

  // ports of submodule stage3_f_reset_rsps
  wire stage3_f_reset_rsps$CLR,
       stage3_f_reset_rsps$DEQ,
       stage3_f_reset_rsps$EMPTY_N,
       stage3_f_reset_rsps$ENQ,
       stage3_f_reset_rsps$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_imem_rl_assert_fail,
       CAN_FIRE_RL_imem_rl_fetch_next_32b,
       CAN_FIRE_RL_rl_WFI_resume,
       CAN_FIRE_RL_rl_finish_FENCE,
       CAN_FIRE_RL_rl_finish_FENCE_I,
       CAN_FIRE_RL_rl_finish_SFENCE_VMA,
       CAN_FIRE_RL_rl_pipe,
       CAN_FIRE_RL_rl_relay_sw_interrupts,
       CAN_FIRE_RL_rl_relay_timer_interrupts,
       CAN_FIRE_RL_rl_reset_complete,
       CAN_FIRE_RL_rl_reset_from_WFI,
       CAN_FIRE_RL_rl_reset_start,
       CAN_FIRE_RL_rl_show_pipe,
       CAN_FIRE_RL_rl_stage1_CSRR_S_or_C,
       CAN_FIRE_RL_rl_stage1_CSRR_W,
       CAN_FIRE_RL_rl_stage1_FENCE,
       CAN_FIRE_RL_rl_stage1_FENCE_I,
       CAN_FIRE_RL_rl_stage1_SFENCE_VMA,
       CAN_FIRE_RL_rl_stage1_WFI,
       CAN_FIRE_RL_rl_stage1_interrupt,
       CAN_FIRE_RL_rl_stage1_restart_after_csrrx,
       CAN_FIRE_RL_rl_stage1_trap,
       CAN_FIRE_RL_rl_stage1_xRET,
       CAN_FIRE_RL_rl_stage2_nonpipe,
       CAN_FIRE_RL_stage1_rl_reset,
       CAN_FIRE_RL_stage2_rl_reset_begin,
       CAN_FIRE_RL_stage2_rl_reset_end,
       CAN_FIRE_RL_stage3_rl_reset,
       CAN_FIRE_dmem_master_m_arready,
       CAN_FIRE_dmem_master_m_awready,
       CAN_FIRE_dmem_master_m_bvalid,
       CAN_FIRE_dmem_master_m_rvalid,
       CAN_FIRE_dmem_master_m_wready,
       CAN_FIRE_external_interrupt_req,
       CAN_FIRE_hart0_server_reset_request_put,
       CAN_FIRE_hart0_server_reset_response_get,
       CAN_FIRE_imem_master_m_arready,
       CAN_FIRE_imem_master_m_awready,
       CAN_FIRE_imem_master_m_bvalid,
       CAN_FIRE_imem_master_m_rvalid,
       CAN_FIRE_imem_master_m_wready,
       CAN_FIRE_near_mem_slave_m_arvalid,
       CAN_FIRE_near_mem_slave_m_awvalid,
       CAN_FIRE_near_mem_slave_m_bready,
       CAN_FIRE_near_mem_slave_m_rready,
       CAN_FIRE_near_mem_slave_m_wvalid,
       CAN_FIRE_set_verbosity,
       WILL_FIRE_RL_imem_rl_assert_fail,
       WILL_FIRE_RL_imem_rl_fetch_next_32b,
       WILL_FIRE_RL_rl_WFI_resume,
       WILL_FIRE_RL_rl_finish_FENCE,
       WILL_FIRE_RL_rl_finish_FENCE_I,
       WILL_FIRE_RL_rl_finish_SFENCE_VMA,
       WILL_FIRE_RL_rl_pipe,
       WILL_FIRE_RL_rl_relay_sw_interrupts,
       WILL_FIRE_RL_rl_relay_timer_interrupts,
       WILL_FIRE_RL_rl_reset_complete,
       WILL_FIRE_RL_rl_reset_from_WFI,
       WILL_FIRE_RL_rl_reset_start,
       WILL_FIRE_RL_rl_show_pipe,
       WILL_FIRE_RL_rl_stage1_CSRR_S_or_C,
       WILL_FIRE_RL_rl_stage1_CSRR_W,
       WILL_FIRE_RL_rl_stage1_FENCE,
       WILL_FIRE_RL_rl_stage1_FENCE_I,
       WILL_FIRE_RL_rl_stage1_SFENCE_VMA,
       WILL_FIRE_RL_rl_stage1_WFI,
       WILL_FIRE_RL_rl_stage1_interrupt,
       WILL_FIRE_RL_rl_stage1_restart_after_csrrx,
       WILL_FIRE_RL_rl_stage1_trap,
       WILL_FIRE_RL_rl_stage1_xRET,
       WILL_FIRE_RL_rl_stage2_nonpipe,
       WILL_FIRE_RL_stage1_rl_reset,
       WILL_FIRE_RL_stage2_rl_reset_begin,
       WILL_FIRE_RL_stage2_rl_reset_end,
       WILL_FIRE_RL_stage3_rl_reset,
       WILL_FIRE_dmem_master_m_arready,
       WILL_FIRE_dmem_master_m_awready,
       WILL_FIRE_dmem_master_m_bvalid,
       WILL_FIRE_dmem_master_m_rvalid,
       WILL_FIRE_dmem_master_m_wready,
       WILL_FIRE_external_interrupt_req,
       WILL_FIRE_hart0_server_reset_request_put,
       WILL_FIRE_hart0_server_reset_response_get,
       WILL_FIRE_imem_master_m_arready,
       WILL_FIRE_imem_master_m_awready,
       WILL_FIRE_imem_master_m_bvalid,
       WILL_FIRE_imem_master_m_rvalid,
       WILL_FIRE_imem_master_m_wready,
       WILL_FIRE_near_mem_slave_m_arvalid,
       WILL_FIRE_near_mem_slave_m_awvalid,
       WILL_FIRE_near_mem_slave_m_bready,
       WILL_FIRE_near_mem_slave_m_rready,
       WILL_FIRE_near_mem_slave_m_wvalid,
       WILL_FIRE_set_verbosity;

  // inputs to muxes for submodule ports
  reg [31 : 0] MUX_csr_regfile$mav_csr_write_2__VAL_2;
  wire [31 : 0] MUX_near_mem$imem_req_2__VAL_1,
		MUX_near_mem$imem_req_2__VAL_3,
		MUX_near_mem$imem_req_2__VAL_5,
		MUX_near_mem$imem_req_2__VAL_6,
		MUX_near_mem$imem_req_2__VAL_7;
  wire [3 : 0] MUX_rg_state$write_1__VAL_1, MUX_rg_state$write_1__VAL_2;
  wire MUX_csr_regfile$mav_csr_write_1__SEL_1,
       MUX_gpr_regfile$write_rd_1__SEL_2,
       MUX_gpr_regfile$write_rd_1__SEL_3,
       MUX_imem_rg_f3$write_1__SEL_1,
       MUX_imem_rg_mstatus_MXR$write_1__SEL_2,
       MUX_imem_rg_pc$write_1__SEL_3,
       MUX_imem_rg_pc$write_1__SEL_6,
       MUX_imem_rg_priv$write_1__SEL_2,
       MUX_near_mem$imem_req_1__SEL_7,
       MUX_rg_state$write_1__SEL_1,
       MUX_rg_state$write_1__SEL_2,
       MUX_rg_state$write_1__SEL_3,
       MUX_rg_state$write_1__SEL_5,
       MUX_rg_state$write_1__SEL_6,
       MUX_rg_state$write_1__SEL_7,
       MUX_rg_state$write_1__SEL_8,
       MUX_rg_state$write_1__SEL_9,
       MUX_stage1_rg_full$write_1__VAL_2,
       MUX_stage2_rg_full$write_1__VAL_2;

  // remaining internal signals
  reg [63 : 0] CASE_theResult__785_BITS_6_TO_0_0b100011_alu_o_ETC__q21,
	       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1387,
	       x_out_data_to_stage2_val1__h13913,
	       x_out_data_to_stage3_rd_val__h6353,
	       x_out_fbypass_rd_val__h7035;
  reg [31 : 0] CASE_theResult__785_BITS_6_TO_0_0b1100111_data_ETC__q20,
	       _theResult_____1_fst__h15315,
	       rs1_val__h22321,
	       value__h6595,
	       value__h6656,
	       x_out_bypass_rd_val__h6887,
	       x_out_data_to_stage2_addr__h13912;
  reg [4 : 0] x_out_bypass_rd__h6886,
	      x_out_data_to_stage2_rd__h13911,
	      x_out_data_to_stage3_fpr_flags__h6352,
	      x_out_data_to_stage3_rd__h6349,
	      x_out_fbypass_rd__h7034;
  reg [3 : 0] CASE_rg_cur_priv_0b0_8_0b1_9_11__q14,
	      CASE_theResult__785_BITS_14_TO_12_0b0_4_0b1_5_11__q16,
	      CASE_theResult__785_BITS_14_TO_12_0b0_IF_IF_NO_ETC__q17,
	      CASE_theResult__785_BITS_31_TO_20_0b0_CASE_rg__ETC__q15,
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1126,
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1146,
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1150,
	      alu_outputs_exc_code__h14768,
	      x_out_trap_info_exc_code__h6632;
  reg [2 : 0] CASE_theResult__785_BITS_6_TO_0_0b11_1_0b111_1_ETC__q18,
	      IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1234;
  reg [1 : 0] CASE_stage2_rg_stage2_BITS_235_TO_233_0_2_1_IF_ETC__q1,
	      CASE_stage2_rg_stage2_BITS_235_TO_233_0_2_1_IF_ETC__q2,
	      CASE_stage2_rg_stage2_BITS_235_TO_233_1_IF_sta_ETC__q3;
  reg CASE_stage2_rg_stage2_BITS_235_TO_233_1_NOT_st_ETC__q23,
      CASE_stage2_rg_stage2_BITS_235_TO_233_1_stage2_ETC__q22,
      CASE_theResult__785_BITS_6_TO_0_0b1000011_NOT__ETC__q8,
      CASE_theResult__785_BITS_6_TO_0_0b1000011_theR_ETC__q11,
      CASE_theResult__785_BITS_6_TO_0_0b10011_IF_NOT_ETC__q13,
      CASE_theResult__785_BITS_6_TO_0_0b10011_NOT_IF_ETC__q10,
      CASE_theResult__785_BITS_6_TO_0_0b11_NOT_theRe_ETC__q9,
      CASE_theResult__785_BITS_6_TO_0_0b11_theResult_ETC__q12,
      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1062,
      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d662,
      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d908,
      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d924,
      IF_stage2_rg_stage2_9_BITS_235_TO_233_00_EQ_1__ETC___d150,
      IF_stage2_rg_stage2_9_BITS_235_TO_233_00_EQ_1__ETC___d160;
  wire [127 : 0] csr_regfile_read_csr_mcycle__6_MINUS_rg_start__ETC___d1809;
  wire [63 : 0] IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1388,
		IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1408,
		_theResult____h27275,
		_theResult___snd_rd_val__h7020,
		_theResult___snd_rd_val__h7026,
		alu_outputs___1_val1__h14065,
		alu_outputs___1_val1__h14200,
		alu_outputs___1_val1__h14241,
		alu_outputs___1_val1__h14260,
		alu_outputs___1_val1__h14279,
		alu_outputs___1_val1__h14615,
		alu_outputs___1_val1__h14639,
		alu_outputs___1_val1__h14744,
		alu_outputs___1_val1__h15099,
		alu_outputs___1_val2__h14041,
		alu_outputs___1_val2__h14330,
		alu_outputs___1_val2__h15100,
		cpi__h27277,
		cpifrac__h27278,
		data_to_stage3_rd_val__h6303,
		delta_CPI_cycles__h27273,
		delta_CPI_instrs___1__h27310,
		delta_CPI_instrs__h27274,
		frs1_val_bypassed__h4804,
		frs2_val_bypassed__h4809,
		output_stage2___1_data_to_stage3_rd_val__h6321,
		rd_val__h17698,
		rd_val__h17751,
		rd_val__h17809,
		x__h27276,
		x_out_data_to_stage2_val2__h13914,
		x_out_data_to_stage2_val3__h13915;
  wire [31 : 0] IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_ETC___d1291,
		IF_csr_regfile_read_csr_IF_NOT_stage1_rg_full__ETC___d1752,
		IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d560,
		IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d561,
		IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d562,
		IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d563,
		IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d564,
		IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d566,
		IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d568,
		IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d569,
		IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d570,
		IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d572,
		IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d573,
		IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d574,
		IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d576,
		IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d577,
		IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d578,
		IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d580,
		IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d581,
		IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d582,
		IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d583,
		IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d584,
		IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d585,
		IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d586,
		IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d587,
		IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d588,
		SEXT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLU_ETC___d1302,
		_theResult_____1_fst__h15308,
		_theResult_____1_fst__h15343,
		_theResult____h14189,
		_theResult____h4785,
		_theResult___fst__h7356,
		_theResult___fst__h7384,
		_theResult___fst_rd_val__h6865,
		_theResult___fst_rd_val__h6876,
		_theResult___snd__h17514,
		alu_outputs___1_addr__h14039,
		alu_outputs___1_addr__h14064,
		alu_outputs___1_addr__h14093,
		alu_outputs___1_addr__h14304,
		alu_outputs___1_addr__h14328,
		branch_target__h14018,
		data_to_stage2_addr__h13901,
		fall_through_pc__h13862,
		imem_rg_pc_PLUS_SEXT_theResult__785_BIT_31_CON_ETC__q5,
		instr___1__h7181,
		instr__h10099,
		instr__h10536,
		instr__h10708,
		instr__h10881,
		instr__h11074,
		instr__h11267,
		instr__h11384,
		instr__h11562,
		instr__h11681,
		instr__h11776,
		instr__h11912,
		instr__h12048,
		instr__h12184,
		instr__h12522,
		instr__h12625,
		instr__h12770,
		instr__h13157,
		instr__h13630,
		instr__h4783,
		instr__h7456,
		instr__h7601,
		instr__h7793,
		instr__h7988,
		instr__h8217,
		instr__h8560,
		instr__h8950,
		instr__h9066,
		instr__h9131,
		instr__h9448,
		instr__h9786,
		instr__h9970,
		instr_out___1__h7326,
		instr_out___1__h7358,
		instr_out___1__h7386,
		next_pc___1__h16983,
		next_pc__h16981,
		rd_val___1__h15296,
		rd_val___1__h15304,
		rd_val___1__h15311,
		rd_val___1__h15318,
		rd_val___1__h15325,
		rd_val___1__h15332,
		rd_val__h13795,
		rd_val__h13838,
		rd_val__h14231,
		rd_val__h14251,
		rd_val__h14270,
		rd_val__h17408,
		rd_val__h17460,
		rd_val__h17482,
		rs1_val__h14581,
		rs1_val__h21828,
		rs1_val_bypassed__h4793,
		rs2_val__h14014,
		trap_info_tval__h16821,
		val__h13797,
		val__h13840,
		value__h16876,
		x_out_data_to_stage2_instr__h13909,
		x_out_next_pc__h13875,
		y__h22625;
  wire [20 : 0] SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d392,
		theResult__785_BIT_31_CONCAT_theResult__785_BI_ETC__q4;
  wire [19 : 0] imm20__h9838;
  wire [12 : 0] SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d421,
		theResult__785_BIT_31_CONCAT_theResult__785_BI_ETC__q6;
  wire [11 : 0] imm12__h10334,
		imm12__h10549,
		imm12__h10745,
		imm12__h11090,
		imm12__h7457,
		imm12__h7794,
		imm12__h9710,
		offset__h8164,
		theResult__785_BITS_31_TO_20__q19,
		theResult__785_BITS_31_TO_25_CONCAT_theResult__ETC__q7;
  wire [9 : 0] nzimm10__h10332, nzimm10__h10547;
  wire [8 : 0] offset__h9075;
  wire [7 : 0] offset__h7227;
  wire [6 : 0] offset__h7736;
  wire [5 : 0] imm6__h9708;
  wire [4 : 0] offset_BITS_4_TO_0___h13755,
	       offset_BITS_4_TO_0___h7725,
	       offset_BITS_4_TO_0___h8156,
	       rd__h7796,
	       rs1__h7795,
	       shamt__h14185;
  wire [3 : 0] IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1086,
	       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1090,
	       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1128,
	       IF_NOT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_P_ETC___d1082,
	       IF_NOT_csr_regfile_read_mstatus__8_BITS_14_TO__ETC___d1136,
	       IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152,
	       IF_rg_cur_priv_7_EQ_0b11_095_OR_rg_cur_priv_7__ETC___d1124,
	       alu_outputs___1_exc_code__h14611,
	       cur_verbosity__h3374,
	       x_out_trap_info_exc_code__h16824;
  wire [2 : 0] rm__h14728, x_out_data_to_stage2_rounding_mode__h13917;
  wire [1 : 0] IF_NOT_stage2_rg_full_8_32_OR_stage2_rg_stage2_ETC___d282,
	       IF_near_mem_dmem_valid__22_AND_NOT_near_mem_dm_ETC___d250,
	       IF_near_mem_dmem_valid__22_THEN_IF_near_mem_dm_ETC___d125,
	       IF_stage2_fbox_valid__28_THEN_2_ELSE_1___d129,
	       IF_stage2_mbox_valid__26_THEN_2_ELSE_1___d127,
	       IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134,
	       IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d258,
	       IF_stage2_rg_stage2_9_BIT_3_89_OR_stage2_rg_st_ETC___d251,
	       IF_stage2_rg_stage2_9_BIT_3_89_THEN_IF_near_me_ETC___d277;
  wire IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1069,
       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1072,
       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1074,
       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1819,
       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d651,
       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d653,
       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d655,
       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d915,
       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d918,
       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d929,
       IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_ETC___d1101,
       IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_ETC___d949,
       IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1806,
       IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d1629,
       IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d1631,
       IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d592,
       IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d594,
       NOT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_ETC___d692,
       NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45,
       NOT_csr_regfile_read_mstatus__8_BITS_14_TO_13__ETC___d1058,
       NOT_near_mem_imem_exc__13_34_AND_IF_IF_NOT_nea_ETC___d1218,
       NOT_near_mem_imem_exc__13_34_AND_IF_IF_NOT_nea_ETC___d1264,
       NOT_near_mem_imem_pc_BITS_31_TO_2_EQ_imem_rg_p_ETC___d1553,
       NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_01_ETC___d309,
       NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_01_ETC___d314,
       NOT_near_mem_imem_valid_00_OR_NOT_near_mem_ime_ETC___d1570,
       NOT_near_mem_imem_valid_00_OR_NOT_near_mem_ime_ETC___d1581,
       NOT_near_mem_imem_valid_00_OR_NOT_near_mem_ime_ETC___d1589,
       NOT_near_mem_imem_valid_00_OR_NOT_near_mem_ime_ETC___d597,
       NOT_rg_halt_562_586_AND_NOT_csr_regfile_interr_ETC___d1592,
       NOT_rg_halt_562_586_AND_NOT_csr_regfile_interr_ETC___d1636,
       NOT_rg_halt_562_586_AND_NOT_csr_regfile_interr_ETC___d1693,
       csr_regfile_interrupt_pending_rg_cur_priv_7_56_ETC___d1825,
       csr_regfile_read_misa__4_BIT_2_16_AND_IF_near__ETC___d406,
       csr_regfile_read_misa__4_BIT_2_16_AND_IF_near__ETC___d412,
       csr_regfile_read_mstatus__8_BITS_14_TO_13_9_EQ_ETC___d904,
       fpr_regfile_RDY_server_reset_request_put__520__ETC___d1532,
       fpr_regfile_RDY_server_reset_response_get__539_ETC___d1551,
       near_mem_imem_exc__13_OR_IF_IF_NOT_near_mem_im_ETC___d1433,
       near_mem_imem_exc__13_OR_IF_IF_NOT_near_mem_im_ETC___d1436,
       near_mem_imem_exc__13_OR_IF_IF_NOT_near_mem_im_ETC___d1439,
       near_mem_imem_exc__13_OR_IF_IF_NOT_near_mem_im_ETC___d1442,
       near_mem_imem_exc__13_OR_IF_IF_NOT_near_mem_im_ETC___d1445,
       near_mem_imem_exc__13_OR_IF_IF_NOT_near_mem_im_ETC___d1448,
       near_mem_imem_exc__13_OR_IF_IF_NOT_near_mem_im_ETC___d1451,
       near_mem_imem_exc__13_OR_IF_IF_NOT_near_mem_im_ETC___d1454,
       near_mem_imem_exc__13_OR_IF_IF_NOT_near_mem_im_ETC___d1457,
       near_mem_imem_exc__13_OR_IF_IF_NOT_near_mem_im_ETC___d1460,
       near_mem_imem_exc__13_OR_IF_IF_NOT_near_mem_im_ETC___d1463,
       near_mem_imem_exc__13_OR_IF_IF_NOT_near_mem_im_ETC___d1466,
       near_mem_imem_pc_BITS_31_TO_2_EQ_imem_rg_pc_BI_ETC___d8,
       near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_01_OR__ETC___d604,
       near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_01_OR__ETC___d606,
       near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9___d301,
       near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d1077,
       near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d612,
       near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d932,
       rg_cur_priv_7_EQ_0b11_095_OR_rg_cur_priv_7_EQ__ETC___d1122,
       rg_halt_562_OR_csr_regfile_interrupt_pending_r_ETC___d1574,
       rg_state_6_EQ_2_576_AND_NOT_rg_halt_562_586_AN_ETC___d1716,
       rg_state_6_EQ_2_576_AND_NOT_rg_halt_562_586_AN_ETC___d1765,
       rg_state_6_EQ_2_576_AND_NOT_rg_halt_562_586_AN_ETC___d1776,
       rg_state_6_EQ_2_576_AND_NOT_rg_halt_562_586_AN_ETC___d1786,
       rg_state_6_EQ_2_576_AND_NOT_rg_halt_562_586_AN_ETC___d1803,
       rg_state_6_EQ_2_576_AND_stage3_rg_full_2_OR_NO_ETC___d1595,
       stage3_rg_stage3_4_BITS_75_TO_71_3_EQ_IF_NOT_n_ETC___d637,
       stage3_rg_stage3_4_BITS_75_TO_71_3_EQ_IF_NOT_n_ETC___d645;

  // action method hart0_server_reset_request_put
  assign RDY_hart0_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_hart0_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_hart0_server_reset_request_put =
	     EN_hart0_server_reset_request_put ;

  // action method hart0_server_reset_response_get
  assign RDY_hart0_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_hart0_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_hart0_server_reset_response_get =
	     EN_hart0_server_reset_response_get ;

  // value method imem_master_m_awvalid
  assign imem_master_awvalid = near_mem$imem_master_awvalid ;

  // value method imem_master_m_awid
  assign imem_master_awid = near_mem$imem_master_awid ;

  // value method imem_master_m_awaddr
  assign imem_master_awaddr = near_mem$imem_master_awaddr ;

  // value method imem_master_m_awlen
  assign imem_master_awlen = near_mem$imem_master_awlen ;

  // value method imem_master_m_awsize
  assign imem_master_awsize = near_mem$imem_master_awsize ;

  // value method imem_master_m_awburst
  assign imem_master_awburst = near_mem$imem_master_awburst ;

  // value method imem_master_m_awlock
  assign imem_master_awlock = near_mem$imem_master_awlock ;

  // value method imem_master_m_awcache
  assign imem_master_awcache = near_mem$imem_master_awcache ;

  // value method imem_master_m_awprot
  assign imem_master_awprot = near_mem$imem_master_awprot ;

  // value method imem_master_m_awqos
  assign imem_master_awqos = near_mem$imem_master_awqos ;

  // value method imem_master_m_awregion
  assign imem_master_awregion = near_mem$imem_master_awregion ;

  // action method imem_master_m_awready
  assign CAN_FIRE_imem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_awready = 1'd1 ;

  // value method imem_master_m_wvalid
  assign imem_master_wvalid = near_mem$imem_master_wvalid ;

  // value method imem_master_m_wid
  assign imem_master_wid = near_mem$imem_master_wid ;

  // value method imem_master_m_wdata
  assign imem_master_wdata = near_mem$imem_master_wdata ;

  // value method imem_master_m_wstrb
  assign imem_master_wstrb = near_mem$imem_master_wstrb ;

  // value method imem_master_m_wlast
  assign imem_master_wlast = near_mem$imem_master_wlast ;

  // action method imem_master_m_wready
  assign CAN_FIRE_imem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_wready = 1'd1 ;

  // action method imem_master_m_bvalid
  assign CAN_FIRE_imem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_imem_master_m_bvalid = 1'd1 ;

  // value method imem_master_m_bready
  assign imem_master_bready = near_mem$imem_master_bready ;

  // value method imem_master_m_arvalid
  assign imem_master_arvalid = near_mem$imem_master_arvalid ;

  // value method imem_master_m_arid
  assign imem_master_arid = near_mem$imem_master_arid ;

  // value method imem_master_m_araddr
  assign imem_master_araddr = near_mem$imem_master_araddr ;

  // value method imem_master_m_arlen
  assign imem_master_arlen = near_mem$imem_master_arlen ;

  // value method imem_master_m_arsize
  assign imem_master_arsize = near_mem$imem_master_arsize ;

  // value method imem_master_m_arburst
  assign imem_master_arburst = near_mem$imem_master_arburst ;

  // value method imem_master_m_arlock
  assign imem_master_arlock = near_mem$imem_master_arlock ;

  // value method imem_master_m_arcache
  assign imem_master_arcache = near_mem$imem_master_arcache ;

  // value method imem_master_m_arprot
  assign imem_master_arprot = near_mem$imem_master_arprot ;

  // value method imem_master_m_arqos
  assign imem_master_arqos = near_mem$imem_master_arqos ;

  // value method imem_master_m_arregion
  assign imem_master_arregion = near_mem$imem_master_arregion ;

  // action method imem_master_m_arready
  assign CAN_FIRE_imem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_arready = 1'd1 ;

  // action method imem_master_m_rvalid
  assign CAN_FIRE_imem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_imem_master_m_rvalid = 1'd1 ;

  // value method imem_master_m_rready
  assign imem_master_rready = near_mem$imem_master_rready ;

  // value method dmem_master_m_awvalid
  assign dmem_master_awvalid = near_mem$dmem_master_awvalid ;

  // value method dmem_master_m_awid
  assign dmem_master_awid = near_mem$dmem_master_awid ;

  // value method dmem_master_m_awaddr
  assign dmem_master_awaddr = near_mem$dmem_master_awaddr ;

  // value method dmem_master_m_awlen
  assign dmem_master_awlen = near_mem$dmem_master_awlen ;

  // value method dmem_master_m_awsize
  assign dmem_master_awsize = near_mem$dmem_master_awsize ;

  // value method dmem_master_m_awburst
  assign dmem_master_awburst = near_mem$dmem_master_awburst ;

  // value method dmem_master_m_awlock
  assign dmem_master_awlock = near_mem$dmem_master_awlock ;

  // value method dmem_master_m_awcache
  assign dmem_master_awcache = near_mem$dmem_master_awcache ;

  // value method dmem_master_m_awprot
  assign dmem_master_awprot = near_mem$dmem_master_awprot ;

  // value method dmem_master_m_awqos
  assign dmem_master_awqos = near_mem$dmem_master_awqos ;

  // value method dmem_master_m_awregion
  assign dmem_master_awregion = near_mem$dmem_master_awregion ;

  // action method dmem_master_m_awready
  assign CAN_FIRE_dmem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_awready = 1'd1 ;

  // value method dmem_master_m_wvalid
  assign dmem_master_wvalid = near_mem$dmem_master_wvalid ;

  // value method dmem_master_m_wid
  assign dmem_master_wid = near_mem$dmem_master_wid ;

  // value method dmem_master_m_wdata
  assign dmem_master_wdata = near_mem$dmem_master_wdata ;

  // value method dmem_master_m_wstrb
  assign dmem_master_wstrb = near_mem$dmem_master_wstrb ;

  // value method dmem_master_m_wlast
  assign dmem_master_wlast = near_mem$dmem_master_wlast ;

  // action method dmem_master_m_wready
  assign CAN_FIRE_dmem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_wready = 1'd1 ;

  // action method dmem_master_m_bvalid
  assign CAN_FIRE_dmem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_bvalid = 1'd1 ;

  // value method dmem_master_m_bready
  assign dmem_master_bready = near_mem$dmem_master_bready ;

  // value method dmem_master_m_arvalid
  assign dmem_master_arvalid = near_mem$dmem_master_arvalid ;

  // value method dmem_master_m_arid
  assign dmem_master_arid = near_mem$dmem_master_arid ;

  // value method dmem_master_m_araddr
  assign dmem_master_araddr = near_mem$dmem_master_araddr ;

  // value method dmem_master_m_arlen
  assign dmem_master_arlen = near_mem$dmem_master_arlen ;

  // value method dmem_master_m_arsize
  assign dmem_master_arsize = near_mem$dmem_master_arsize ;

  // value method dmem_master_m_arburst
  assign dmem_master_arburst = near_mem$dmem_master_arburst ;

  // value method dmem_master_m_arlock
  assign dmem_master_arlock = near_mem$dmem_master_arlock ;

  // value method dmem_master_m_arcache
  assign dmem_master_arcache = near_mem$dmem_master_arcache ;

  // value method dmem_master_m_arprot
  assign dmem_master_arprot = near_mem$dmem_master_arprot ;

  // value method dmem_master_m_arqos
  assign dmem_master_arqos = near_mem$dmem_master_arqos ;

  // value method dmem_master_m_arregion
  assign dmem_master_arregion = near_mem$dmem_master_arregion ;

  // action method dmem_master_m_arready
  assign CAN_FIRE_dmem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_arready = 1'd1 ;

  // action method dmem_master_m_rvalid
  assign CAN_FIRE_dmem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_rvalid = 1'd1 ;

  // value method dmem_master_m_rready
  assign dmem_master_rready = near_mem$dmem_master_rready ;

  // action method near_mem_slave_m_awvalid
  assign CAN_FIRE_near_mem_slave_m_awvalid = 1'd1 ;
  assign WILL_FIRE_near_mem_slave_m_awvalid = 1'd1 ;

  // value method near_mem_slave_m_awready
  assign near_mem_slave_awready = near_mem$near_mem_slave_awready ;

  // action method near_mem_slave_m_wvalid
  assign CAN_FIRE_near_mem_slave_m_wvalid = 1'd1 ;
  assign WILL_FIRE_near_mem_slave_m_wvalid = 1'd1 ;

  // value method near_mem_slave_m_wready
  assign near_mem_slave_wready = near_mem$near_mem_slave_wready ;

  // value method near_mem_slave_m_bvalid
  assign near_mem_slave_bvalid = near_mem$near_mem_slave_bvalid ;

  // value method near_mem_slave_m_bid
  assign near_mem_slave_bid = near_mem$near_mem_slave_bid ;

  // value method near_mem_slave_m_bresp
  assign near_mem_slave_bresp = near_mem$near_mem_slave_bresp ;

  // action method near_mem_slave_m_bready
  assign CAN_FIRE_near_mem_slave_m_bready = 1'd1 ;
  assign WILL_FIRE_near_mem_slave_m_bready = 1'd1 ;

  // action method near_mem_slave_m_arvalid
  assign CAN_FIRE_near_mem_slave_m_arvalid = 1'd1 ;
  assign WILL_FIRE_near_mem_slave_m_arvalid = 1'd1 ;

  // value method near_mem_slave_m_arready
  assign near_mem_slave_arready = near_mem$near_mem_slave_arready ;

  // value method near_mem_slave_m_rvalid
  assign near_mem_slave_rvalid = near_mem$near_mem_slave_rvalid ;

  // value method near_mem_slave_m_rid
  assign near_mem_slave_rid = near_mem$near_mem_slave_rid ;

  // value method near_mem_slave_m_rdata
  assign near_mem_slave_rdata = near_mem$near_mem_slave_rdata ;

  // value method near_mem_slave_m_rresp
  assign near_mem_slave_rresp = near_mem$near_mem_slave_rresp ;

  // value method near_mem_slave_m_rlast
  assign near_mem_slave_rlast = near_mem$near_mem_slave_rlast ;

  // action method near_mem_slave_m_rready
  assign CAN_FIRE_near_mem_slave_m_rready = 1'd1 ;
  assign WILL_FIRE_near_mem_slave_m_rready = 1'd1 ;

  // action method external_interrupt_req
  assign CAN_FIRE_external_interrupt_req = 1'd1 ;
  assign WILL_FIRE_external_interrupt_req = 1'd1 ;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // submodule csr_regfile
  mkCSR_RegFile csr_regfile(.CLK(CLK),
			    .RST_N(RST_N),
			    .access_permitted_1_csr_addr(csr_regfile$access_permitted_1_csr_addr),
			    .access_permitted_1_priv(csr_regfile$access_permitted_1_priv),
			    .access_permitted_1_read_not_write(csr_regfile$access_permitted_1_read_not_write),
			    .access_permitted_2_csr_addr(csr_regfile$access_permitted_2_csr_addr),
			    .access_permitted_2_priv(csr_regfile$access_permitted_2_priv),
			    .access_permitted_2_read_not_write(csr_regfile$access_permitted_2_read_not_write),
			    .csr_counter_read_fault_csr_addr(csr_regfile$csr_counter_read_fault_csr_addr),
			    .csr_counter_read_fault_priv(csr_regfile$csr_counter_read_fault_priv),
			    .csr_ret_actions_from_priv(csr_regfile$csr_ret_actions_from_priv),
			    .csr_trap_actions_exc_code(csr_regfile$csr_trap_actions_exc_code),
			    .csr_trap_actions_from_priv(csr_regfile$csr_trap_actions_from_priv),
			    .csr_trap_actions_interrupt(csr_regfile$csr_trap_actions_interrupt),
			    .csr_trap_actions_pc(csr_regfile$csr_trap_actions_pc),
			    .csr_trap_actions_xtval(csr_regfile$csr_trap_actions_xtval),
			    .external_interrupt_req_set_not_clear(csr_regfile$external_interrupt_req_set_not_clear),
			    .interrupt_pending_cur_priv(csr_regfile$interrupt_pending_cur_priv),
			    .ma_update_fcsr_fflags_flags(csr_regfile$ma_update_fcsr_fflags_flags),
			    .ma_update_mstatus_fs_fs(csr_regfile$ma_update_mstatus_fs_fs),
			    .mav_csr_write_csr_addr(csr_regfile$mav_csr_write_csr_addr),
			    .mav_csr_write_word(csr_regfile$mav_csr_write_word),
			    .mav_read_csr_csr_addr(csr_regfile$mav_read_csr_csr_addr),
			    .read_csr_csr_addr(csr_regfile$read_csr_csr_addr),
			    .read_csr_port2_csr_addr(csr_regfile$read_csr_port2_csr_addr),
			    .software_interrupt_req_set_not_clear(csr_regfile$software_interrupt_req_set_not_clear),
			    .timer_interrupt_req_set_not_clear(csr_regfile$timer_interrupt_req_set_not_clear),
			    .EN_server_reset_request_put(csr_regfile$EN_server_reset_request_put),
			    .EN_server_reset_response_get(csr_regfile$EN_server_reset_response_get),
			    .EN_mav_read_csr(csr_regfile$EN_mav_read_csr),
			    .EN_mav_csr_write(csr_regfile$EN_mav_csr_write),
			    .EN_ma_update_fcsr_fflags(csr_regfile$EN_ma_update_fcsr_fflags),
			    .EN_ma_update_mstatus_fs(csr_regfile$EN_ma_update_mstatus_fs),
			    .EN_csr_trap_actions(csr_regfile$EN_csr_trap_actions),
			    .EN_csr_ret_actions(csr_regfile$EN_csr_ret_actions),
			    .EN_csr_minstret_incr(csr_regfile$EN_csr_minstret_incr),
			    .EN_timer_interrupt_req(csr_regfile$EN_timer_interrupt_req),
			    .EN_software_interrupt_req(csr_regfile$EN_software_interrupt_req),
			    .EN_debug(csr_regfile$EN_debug),
			    .RDY_server_reset_request_put(csr_regfile$RDY_server_reset_request_put),
			    .RDY_server_reset_response_get(csr_regfile$RDY_server_reset_response_get),
			    .read_csr(csr_regfile$read_csr),
			    .read_csr_port2(),
			    .mav_read_csr(),
			    .mav_csr_write(),
			    .read_frm(csr_regfile$read_frm),
			    .read_misa(csr_regfile$read_misa),
			    .read_mstatus(csr_regfile$read_mstatus),
			    .read_sstatus(csr_regfile$read_sstatus),
			    .read_ustatus(),
			    .read_satp(csr_regfile$read_satp),
			    .csr_trap_actions(csr_regfile$csr_trap_actions),
			    .RDY_csr_trap_actions(),
			    .csr_ret_actions(csr_regfile$csr_ret_actions),
			    .RDY_csr_ret_actions(),
			    .read_csr_minstret(csr_regfile$read_csr_minstret),
			    .read_csr_mcycle(csr_regfile$read_csr_mcycle),
			    .read_csr_mtime(),
			    .access_permitted_1(csr_regfile$access_permitted_1),
			    .access_permitted_2(csr_regfile$access_permitted_2),
			    .csr_counter_read_fault(),
			    .csr_mip_read(),
			    .RDY_timer_interrupt_req(),
			    .RDY_software_interrupt_req(),
			    .interrupt_pending(csr_regfile$interrupt_pending),
			    .wfi_resume(csr_regfile$wfi_resume),
			    .RDY_debug());

  // submodule f_reset_reqs
  FIFO20 #(.guarded(32'd1)) f_reset_reqs(.RST(RST_N),
					 .CLK(CLK),
					 .ENQ(f_reset_reqs$ENQ),
					 .DEQ(f_reset_reqs$DEQ),
					 .CLR(f_reset_reqs$CLR),
					 .FULL_N(f_reset_reqs$FULL_N),
					 .EMPTY_N(f_reset_reqs$EMPTY_N));

  // submodule f_reset_rsps
  FIFO20 #(.guarded(32'd1)) f_reset_rsps(.RST(RST_N),
					 .CLK(CLK),
					 .ENQ(f_reset_rsps$ENQ),
					 .DEQ(f_reset_rsps$DEQ),
					 .CLR(f_reset_rsps$CLR),
					 .FULL_N(f_reset_rsps$FULL_N),
					 .EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule fpr_regfile
  mkFPR_RegFile fpr_regfile(.CLK(CLK),
			    .RST_N(RST_N),
			    .read_rs1_port2_rs1(fpr_regfile$read_rs1_port2_rs1),
			    .read_rs1_rs1(fpr_regfile$read_rs1_rs1),
			    .read_rs2_rs2(fpr_regfile$read_rs2_rs2),
			    .read_rs3_rs3(fpr_regfile$read_rs3_rs3),
			    .write_rd_rd(fpr_regfile$write_rd_rd),
			    .write_rd_rd_val(fpr_regfile$write_rd_rd_val),
			    .EN_server_reset_request_put(fpr_regfile$EN_server_reset_request_put),
			    .EN_server_reset_response_get(fpr_regfile$EN_server_reset_response_get),
			    .EN_write_rd(fpr_regfile$EN_write_rd),
			    .RDY_server_reset_request_put(fpr_regfile$RDY_server_reset_request_put),
			    .RDY_server_reset_response_get(fpr_regfile$RDY_server_reset_response_get),
			    .read_rs1(fpr_regfile$read_rs1),
			    .read_rs1_port2(),
			    .read_rs2(fpr_regfile$read_rs2),
			    .read_rs3(fpr_regfile$read_rs3));

  // submodule gpr_regfile
  mkGPR_RegFile gpr_regfile(.CLK(CLK),
			    .RST_N(RST_N),
			    .read_rs1_port2_rs1(gpr_regfile$read_rs1_port2_rs1),
			    .read_rs1_rs1(gpr_regfile$read_rs1_rs1),
			    .read_rs2_rs2(gpr_regfile$read_rs2_rs2),
			    .write_rd_rd(gpr_regfile$write_rd_rd),
			    .write_rd_rd_val(gpr_regfile$write_rd_rd_val),
			    .EN_server_reset_request_put(gpr_regfile$EN_server_reset_request_put),
			    .EN_server_reset_response_get(gpr_regfile$EN_server_reset_response_get),
			    .EN_write_rd(gpr_regfile$EN_write_rd),
			    .RDY_server_reset_request_put(gpr_regfile$RDY_server_reset_request_put),
			    .RDY_server_reset_response_get(gpr_regfile$RDY_server_reset_response_get),
			    .read_rs1(gpr_regfile$read_rs1),
			    .read_rs1_port2(),
			    .read_rs2(gpr_regfile$read_rs2));

  // submodule near_mem
  mkNear_Mem near_mem(.CLK(CLK),
		      .RST_N(RST_N),
		      .dmem_master_arready(near_mem$dmem_master_arready),
		      .dmem_master_awready(near_mem$dmem_master_awready),
		      .dmem_master_bid(near_mem$dmem_master_bid),
		      .dmem_master_bresp(near_mem$dmem_master_bresp),
		      .dmem_master_bvalid(near_mem$dmem_master_bvalid),
		      .dmem_master_rdata(near_mem$dmem_master_rdata),
		      .dmem_master_rid(near_mem$dmem_master_rid),
		      .dmem_master_rlast(near_mem$dmem_master_rlast),
		      .dmem_master_rresp(near_mem$dmem_master_rresp),
		      .dmem_master_rvalid(near_mem$dmem_master_rvalid),
		      .dmem_master_wready(near_mem$dmem_master_wready),
		      .dmem_req_addr(near_mem$dmem_req_addr),
		      .dmem_req_amo_funct7(near_mem$dmem_req_amo_funct7),
		      .dmem_req_f3(near_mem$dmem_req_f3),
		      .dmem_req_mstatus_MXR(near_mem$dmem_req_mstatus_MXR),
		      .dmem_req_op(near_mem$dmem_req_op),
		      .dmem_req_priv(near_mem$dmem_req_priv),
		      .dmem_req_satp(near_mem$dmem_req_satp),
		      .dmem_req_sstatus_SUM(near_mem$dmem_req_sstatus_SUM),
		      .dmem_req_store_value(near_mem$dmem_req_store_value),
		      .imem_master_arready(near_mem$imem_master_arready),
		      .imem_master_awready(near_mem$imem_master_awready),
		      .imem_master_bid(near_mem$imem_master_bid),
		      .imem_master_bresp(near_mem$imem_master_bresp),
		      .imem_master_bvalid(near_mem$imem_master_bvalid),
		      .imem_master_rdata(near_mem$imem_master_rdata),
		      .imem_master_rid(near_mem$imem_master_rid),
		      .imem_master_rlast(near_mem$imem_master_rlast),
		      .imem_master_rresp(near_mem$imem_master_rresp),
		      .imem_master_rvalid(near_mem$imem_master_rvalid),
		      .imem_master_wready(near_mem$imem_master_wready),
		      .imem_req_addr(near_mem$imem_req_addr),
		      .imem_req_f3(near_mem$imem_req_f3),
		      .imem_req_mstatus_MXR(near_mem$imem_req_mstatus_MXR),
		      .imem_req_priv(near_mem$imem_req_priv),
		      .imem_req_satp(near_mem$imem_req_satp),
		      .imem_req_sstatus_SUM(near_mem$imem_req_sstatus_SUM),
		      .near_mem_slave_araddr(near_mem$near_mem_slave_araddr),
		      .near_mem_slave_arburst(near_mem$near_mem_slave_arburst),
		      .near_mem_slave_arcache(near_mem$near_mem_slave_arcache),
		      .near_mem_slave_arid(near_mem$near_mem_slave_arid),
		      .near_mem_slave_arlen(near_mem$near_mem_slave_arlen),
		      .near_mem_slave_arlock(near_mem$near_mem_slave_arlock),
		      .near_mem_slave_arprot(near_mem$near_mem_slave_arprot),
		      .near_mem_slave_arqos(near_mem$near_mem_slave_arqos),
		      .near_mem_slave_arregion(near_mem$near_mem_slave_arregion),
		      .near_mem_slave_arsize(near_mem$near_mem_slave_arsize),
		      .near_mem_slave_arvalid(near_mem$near_mem_slave_arvalid),
		      .near_mem_slave_awaddr(near_mem$near_mem_slave_awaddr),
		      .near_mem_slave_awburst(near_mem$near_mem_slave_awburst),
		      .near_mem_slave_awcache(near_mem$near_mem_slave_awcache),
		      .near_mem_slave_awid(near_mem$near_mem_slave_awid),
		      .near_mem_slave_awlen(near_mem$near_mem_slave_awlen),
		      .near_mem_slave_awlock(near_mem$near_mem_slave_awlock),
		      .near_mem_slave_awprot(near_mem$near_mem_slave_awprot),
		      .near_mem_slave_awqos(near_mem$near_mem_slave_awqos),
		      .near_mem_slave_awregion(near_mem$near_mem_slave_awregion),
		      .near_mem_slave_awsize(near_mem$near_mem_slave_awsize),
		      .near_mem_slave_awvalid(near_mem$near_mem_slave_awvalid),
		      .near_mem_slave_bready(near_mem$near_mem_slave_bready),
		      .near_mem_slave_rready(near_mem$near_mem_slave_rready),
		      .near_mem_slave_wdata(near_mem$near_mem_slave_wdata),
		      .near_mem_slave_wid(near_mem$near_mem_slave_wid),
		      .near_mem_slave_wlast(near_mem$near_mem_slave_wlast),
		      .near_mem_slave_wstrb(near_mem$near_mem_slave_wstrb),
		      .near_mem_slave_wvalid(near_mem$near_mem_slave_wvalid),
		      .server_fence_request_put(near_mem$server_fence_request_put),
		      .EN_server_reset_request_put(near_mem$EN_server_reset_request_put),
		      .EN_server_reset_response_get(near_mem$EN_server_reset_response_get),
		      .EN_imem_req(near_mem$EN_imem_req),
		      .EN_dmem_req(near_mem$EN_dmem_req),
		      .EN_server_fence_i_request_put(near_mem$EN_server_fence_i_request_put),
		      .EN_server_fence_i_response_get(near_mem$EN_server_fence_i_response_get),
		      .EN_server_fence_request_put(near_mem$EN_server_fence_request_put),
		      .EN_server_fence_response_get(near_mem$EN_server_fence_response_get),
		      .EN_sfence_vma(near_mem$EN_sfence_vma),
		      .EN_get_timer_interrupt_req_get(near_mem$EN_get_timer_interrupt_req_get),
		      .EN_get_sw_interrupt_req_get(near_mem$EN_get_sw_interrupt_req_get),
		      .RDY_server_reset_request_put(near_mem$RDY_server_reset_request_put),
		      .RDY_server_reset_response_get(near_mem$RDY_server_reset_response_get),
		      .imem_valid(near_mem$imem_valid),
		      .imem_is_i32_not_i16(near_mem$imem_is_i32_not_i16),
		      .imem_pc(near_mem$imem_pc),
		      .imem_instr(near_mem$imem_instr),
		      .imem_exc(near_mem$imem_exc),
		      .imem_exc_code(near_mem$imem_exc_code),
		      .imem_tval(),
		      .imem_master_awvalid(near_mem$imem_master_awvalid),
		      .imem_master_awid(near_mem$imem_master_awid),
		      .imem_master_awaddr(near_mem$imem_master_awaddr),
		      .imem_master_awlen(near_mem$imem_master_awlen),
		      .imem_master_awsize(near_mem$imem_master_awsize),
		      .imem_master_awburst(near_mem$imem_master_awburst),
		      .imem_master_awlock(near_mem$imem_master_awlock),
		      .imem_master_awcache(near_mem$imem_master_awcache),
		      .imem_master_awprot(near_mem$imem_master_awprot),
		      .imem_master_awqos(near_mem$imem_master_awqos),
		      .imem_master_awregion(near_mem$imem_master_awregion),
		      .imem_master_wvalid(near_mem$imem_master_wvalid),
		      .imem_master_wid(near_mem$imem_master_wid),
		      .imem_master_wdata(near_mem$imem_master_wdata),
		      .imem_master_wstrb(near_mem$imem_master_wstrb),
		      .imem_master_wlast(near_mem$imem_master_wlast),
		      .imem_master_bready(near_mem$imem_master_bready),
		      .imem_master_arvalid(near_mem$imem_master_arvalid),
		      .imem_master_arid(near_mem$imem_master_arid),
		      .imem_master_araddr(near_mem$imem_master_araddr),
		      .imem_master_arlen(near_mem$imem_master_arlen),
		      .imem_master_arsize(near_mem$imem_master_arsize),
		      .imem_master_arburst(near_mem$imem_master_arburst),
		      .imem_master_arlock(near_mem$imem_master_arlock),
		      .imem_master_arcache(near_mem$imem_master_arcache),
		      .imem_master_arprot(near_mem$imem_master_arprot),
		      .imem_master_arqos(near_mem$imem_master_arqos),
		      .imem_master_arregion(near_mem$imem_master_arregion),
		      .imem_master_rready(near_mem$imem_master_rready),
		      .dmem_valid(near_mem$dmem_valid),
		      .dmem_word64(near_mem$dmem_word64),
		      .dmem_st_amo_val(),
		      .dmem_exc(near_mem$dmem_exc),
		      .dmem_exc_code(near_mem$dmem_exc_code),
		      .dmem_master_awvalid(near_mem$dmem_master_awvalid),
		      .dmem_master_awid(near_mem$dmem_master_awid),
		      .dmem_master_awaddr(near_mem$dmem_master_awaddr),
		      .dmem_master_awlen(near_mem$dmem_master_awlen),
		      .dmem_master_awsize(near_mem$dmem_master_awsize),
		      .dmem_master_awburst(near_mem$dmem_master_awburst),
		      .dmem_master_awlock(near_mem$dmem_master_awlock),
		      .dmem_master_awcache(near_mem$dmem_master_awcache),
		      .dmem_master_awprot(near_mem$dmem_master_awprot),
		      .dmem_master_awqos(near_mem$dmem_master_awqos),
		      .dmem_master_awregion(near_mem$dmem_master_awregion),
		      .dmem_master_wvalid(near_mem$dmem_master_wvalid),
		      .dmem_master_wid(near_mem$dmem_master_wid),
		      .dmem_master_wdata(near_mem$dmem_master_wdata),
		      .dmem_master_wstrb(near_mem$dmem_master_wstrb),
		      .dmem_master_wlast(near_mem$dmem_master_wlast),
		      .dmem_master_bready(near_mem$dmem_master_bready),
		      .dmem_master_arvalid(near_mem$dmem_master_arvalid),
		      .dmem_master_arid(near_mem$dmem_master_arid),
		      .dmem_master_araddr(near_mem$dmem_master_araddr),
		      .dmem_master_arlen(near_mem$dmem_master_arlen),
		      .dmem_master_arsize(near_mem$dmem_master_arsize),
		      .dmem_master_arburst(near_mem$dmem_master_arburst),
		      .dmem_master_arlock(near_mem$dmem_master_arlock),
		      .dmem_master_arcache(near_mem$dmem_master_arcache),
		      .dmem_master_arprot(near_mem$dmem_master_arprot),
		      .dmem_master_arqos(near_mem$dmem_master_arqos),
		      .dmem_master_arregion(near_mem$dmem_master_arregion),
		      .dmem_master_rready(near_mem$dmem_master_rready),
		      .RDY_server_fence_i_request_put(near_mem$RDY_server_fence_i_request_put),
		      .RDY_server_fence_i_response_get(near_mem$RDY_server_fence_i_response_get),
		      .RDY_server_fence_request_put(near_mem$RDY_server_fence_request_put),
		      .RDY_server_fence_response_get(near_mem$RDY_server_fence_response_get),
		      .RDY_sfence_vma(),
		      .get_timer_interrupt_req_get(near_mem$get_timer_interrupt_req_get),
		      .RDY_get_timer_interrupt_req_get(near_mem$RDY_get_timer_interrupt_req_get),
		      .get_sw_interrupt_req_get(near_mem$get_sw_interrupt_req_get),
		      .RDY_get_sw_interrupt_req_get(near_mem$RDY_get_sw_interrupt_req_get),
		      .near_mem_slave_awready(near_mem$near_mem_slave_awready),
		      .near_mem_slave_wready(near_mem$near_mem_slave_wready),
		      .near_mem_slave_bvalid(near_mem$near_mem_slave_bvalid),
		      .near_mem_slave_bid(near_mem$near_mem_slave_bid),
		      .near_mem_slave_bresp(near_mem$near_mem_slave_bresp),
		      .near_mem_slave_arready(near_mem$near_mem_slave_arready),
		      .near_mem_slave_rvalid(near_mem$near_mem_slave_rvalid),
		      .near_mem_slave_rid(near_mem$near_mem_slave_rid),
		      .near_mem_slave_rdata(near_mem$near_mem_slave_rdata),
		      .near_mem_slave_rresp(near_mem$near_mem_slave_rresp),
		      .near_mem_slave_rlast(near_mem$near_mem_slave_rlast));

  // submodule soc_map
  mkSoC_Map soc_map(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_is_IO_addr_addr(soc_map$m_is_IO_addr_addr),
		    .m_is_mem_addr_addr(soc_map$m_is_mem_addr_addr),
		    .m_is_near_mem_IO_addr_addr(soc_map$m_is_near_mem_IO_addr_addr),
		    .m_uart0_addr_base(),
		    .m_uart0_addr_size(),
		    .m_uart0_addr_lim(),
		    .m_near_mem_io_addr_base(),
		    .m_near_mem_io_addr_size(),
		    .m_near_mem_io_addr_lim(),
		    .m_boot_rom_addr_base(),
		    .m_boot_rom_addr_size(),
		    .m_boot_rom_addr_lim(),
		    .m_mem0_controller_addr_base(),
		    .m_mem0_controller_addr_size(),
		    .m_mem0_controller_addr_lim(),
		    .m_tcm_addr_base(),
		    .m_tcm_addr_size(),
		    .m_tcm_addr_lim(),
		    .m_is_mem_addr(),
		    .m_is_IO_addr(),
		    .m_is_near_mem_IO_addr(),
		    .m_pc_reset_value(soc_map$m_pc_reset_value));

  // submodule stage1_f_reset_reqs
  FIFO20 #(.guarded(32'd1)) stage1_f_reset_reqs(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage1_f_reset_reqs$ENQ),
						.DEQ(stage1_f_reset_reqs$DEQ),
						.CLR(stage1_f_reset_reqs$CLR),
						.FULL_N(stage1_f_reset_reqs$FULL_N),
						.EMPTY_N(stage1_f_reset_reqs$EMPTY_N));

  // submodule stage1_f_reset_rsps
  FIFO20 #(.guarded(32'd1)) stage1_f_reset_rsps(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage1_f_reset_rsps$ENQ),
						.DEQ(stage1_f_reset_rsps$DEQ),
						.CLR(stage1_f_reset_rsps$CLR),
						.FULL_N(stage1_f_reset_rsps$FULL_N),
						.EMPTY_N(stage1_f_reset_rsps$EMPTY_N));

  // submodule stage2_f_reset_reqs
  FIFO20 #(.guarded(32'd1)) stage2_f_reset_reqs(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage2_f_reset_reqs$ENQ),
						.DEQ(stage2_f_reset_reqs$DEQ),
						.CLR(stage2_f_reset_reqs$CLR),
						.FULL_N(stage2_f_reset_reqs$FULL_N),
						.EMPTY_N(stage2_f_reset_reqs$EMPTY_N));

  // submodule stage2_f_reset_rsps
  FIFO20 #(.guarded(32'd1)) stage2_f_reset_rsps(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage2_f_reset_rsps$ENQ),
						.DEQ(stage2_f_reset_rsps$DEQ),
						.CLR(stage2_f_reset_rsps$CLR),
						.FULL_N(stage2_f_reset_rsps$FULL_N),
						.EMPTY_N(stage2_f_reset_rsps$EMPTY_N));

  // submodule stage2_fbox
  mkFBox_Top stage2_fbox(.CLK(CLK),
			 .RST_N(RST_N),
			 .req_f7(stage2_fbox$req_f7),
			 .req_opcode(stage2_fbox$req_opcode),
			 .req_rm(stage2_fbox$req_rm),
			 .req_rs2(stage2_fbox$req_rs2),
			 .req_v1(stage2_fbox$req_v1),
			 .req_v2(stage2_fbox$req_v2),
			 .req_v3(stage2_fbox$req_v3),
			 .EN_server_reset_request_put(stage2_fbox$EN_server_reset_request_put),
			 .EN_server_reset_response_get(stage2_fbox$EN_server_reset_response_get),
			 .EN_req(stage2_fbox$EN_req),
			 .RDY_server_reset_request_put(stage2_fbox$RDY_server_reset_request_put),
			 .RDY_server_reset_response_get(stage2_fbox$RDY_server_reset_response_get),
			 .valid(stage2_fbox$valid),
			 .word_fst(stage2_fbox$word_fst),
			 .word_snd(stage2_fbox$word_snd));

  // submodule stage2_mbox
  mkRISCV_MBox stage2_mbox(.CLK(CLK),
			   .RST_N(RST_N),
			   .req_f3(stage2_mbox$req_f3),
			   .req_is_OP_not_OP_32(stage2_mbox$req_is_OP_not_OP_32),
			   .req_v1(stage2_mbox$req_v1),
			   .req_v2(stage2_mbox$req_v2),
			   .set_verbosity_verbosity(stage2_mbox$set_verbosity_verbosity),
			   .EN_set_verbosity(stage2_mbox$EN_set_verbosity),
			   .EN_req_reset(stage2_mbox$EN_req_reset),
			   .EN_rsp_reset(stage2_mbox$EN_rsp_reset),
			   .EN_req(stage2_mbox$EN_req),
			   .RDY_set_verbosity(),
			   .RDY_req_reset(),
			   .RDY_rsp_reset(),
			   .valid(stage2_mbox$valid),
			   .word(stage2_mbox$word));

  // submodule stage3_f_reset_reqs
  FIFO20 #(.guarded(32'd1)) stage3_f_reset_reqs(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage3_f_reset_reqs$ENQ),
						.DEQ(stage3_f_reset_reqs$DEQ),
						.CLR(stage3_f_reset_reqs$CLR),
						.FULL_N(stage3_f_reset_reqs$FULL_N),
						.EMPTY_N(stage3_f_reset_reqs$EMPTY_N));

  // submodule stage3_f_reset_rsps
  FIFO20 #(.guarded(32'd1)) stage3_f_reset_rsps(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage3_f_reset_rsps$ENQ),
						.DEQ(stage3_f_reset_rsps$DEQ),
						.CLR(stage3_f_reset_rsps$CLR),
						.FULL_N(stage3_f_reset_rsps$FULL_N),
						.EMPTY_N(stage3_f_reset_rsps$EMPTY_N));

  // rule RL_rl_show_pipe
  assign CAN_FIRE_RL_rl_show_pipe =
	     NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45 &&
	     rg_state != 4'd0 &&
	     rg_state != 4'd1 &&
	     rg_state != 4'd8 ;
  assign WILL_FIRE_RL_rl_show_pipe = CAN_FIRE_RL_rl_show_pipe ;

  // rule RL_rl_reset_complete
  assign CAN_FIRE_RL_rl_reset_complete =
	     NOT_near_mem_imem_pc_BITS_31_TO_2_EQ_imem_rg_p_ETC___d1553 &&
	     rg_state == 4'd1 ;
  assign WILL_FIRE_RL_rl_reset_complete = CAN_FIRE_RL_rl_reset_complete ;

  // rule RL_rl_stage2_nonpipe
  assign CAN_FIRE_RL_rl_stage2_nonpipe =
	     (!near_mem_imem_pc_BITS_31_TO_2_EQ_imem_rg_pc_BI_ETC___d8 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     rg_state == 4'd2 &&
	     !stage3_rg_full &&
	     IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 ==
	     2'd3 ;
  assign WILL_FIRE_RL_rl_stage2_nonpipe = CAN_FIRE_RL_rl_stage2_nonpipe ;

  // rule RL_rl_stage1_CSRR_W
  assign CAN_FIRE_RL_rl_stage1_CSRR_W = MUX_rg_state$write_1__SEL_1 ;
  assign WILL_FIRE_RL_rl_stage1_CSRR_W = MUX_rg_state$write_1__SEL_1 ;

  // rule RL_rl_stage1_CSRR_S_or_C
  assign CAN_FIRE_RL_rl_stage1_CSRR_S_or_C = MUX_rg_state$write_1__SEL_2 ;
  assign WILL_FIRE_RL_rl_stage1_CSRR_S_or_C = MUX_rg_state$write_1__SEL_2 ;

  // rule RL_rl_stage1_restart_after_csrrx
  assign CAN_FIRE_RL_rl_stage1_restart_after_csrrx =
	     (!near_mem_imem_pc_BITS_31_TO_2_EQ_imem_rg_pc_BI_ETC___d8 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     rg_state == 4'd4 ;
  assign WILL_FIRE_RL_rl_stage1_restart_after_csrrx =
	     CAN_FIRE_RL_rl_stage1_restart_after_csrrx ;

  // rule RL_rl_stage1_xRET
  assign CAN_FIRE_RL_rl_stage1_xRET =
	     (!near_mem_imem_pc_BITS_31_TO_2_EQ_imem_rg_pc_BI_ETC___d8 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     rg_state_6_EQ_2_576_AND_NOT_rg_halt_562_586_AN_ETC___d1765 ;
  assign WILL_FIRE_RL_rl_stage1_xRET = CAN_FIRE_RL_rl_stage1_xRET ;

  // rule RL_rl_stage1_FENCE_I
  assign CAN_FIRE_RL_rl_stage1_FENCE_I = MUX_rg_state$write_1__SEL_6 ;
  assign WILL_FIRE_RL_rl_stage1_FENCE_I = MUX_rg_state$write_1__SEL_6 ;

  // rule RL_rl_finish_FENCE_I
  assign CAN_FIRE_RL_rl_finish_FENCE_I =
	     (!near_mem_imem_pc_BITS_31_TO_2_EQ_imem_rg_pc_BI_ETC___d8 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     near_mem$RDY_server_fence_i_response_get &&
	     rg_state == 4'd5 ;
  assign WILL_FIRE_RL_rl_finish_FENCE_I = CAN_FIRE_RL_rl_finish_FENCE_I ;

  // rule RL_rl_stage1_FENCE
  assign CAN_FIRE_RL_rl_stage1_FENCE = MUX_rg_state$write_1__SEL_7 ;
  assign WILL_FIRE_RL_rl_stage1_FENCE = MUX_rg_state$write_1__SEL_7 ;

  // rule RL_rl_finish_FENCE
  assign CAN_FIRE_RL_rl_finish_FENCE =
	     (!near_mem_imem_pc_BITS_31_TO_2_EQ_imem_rg_pc_BI_ETC___d8 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     near_mem$RDY_server_fence_response_get &&
	     rg_state == 4'd6 ;
  assign WILL_FIRE_RL_rl_finish_FENCE = CAN_FIRE_RL_rl_finish_FENCE ;

  // rule RL_rl_finish_SFENCE_VMA
  assign CAN_FIRE_RL_rl_finish_SFENCE_VMA =
	     (!near_mem_imem_pc_BITS_31_TO_2_EQ_imem_rg_pc_BI_ETC___d8 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     rg_state == 4'd7 ;
  assign WILL_FIRE_RL_rl_finish_SFENCE_VMA =
	     CAN_FIRE_RL_rl_finish_SFENCE_VMA ;

  // rule RL_rl_stage1_WFI
  assign CAN_FIRE_RL_rl_stage1_WFI = MUX_rg_state$write_1__SEL_9 ;
  assign WILL_FIRE_RL_rl_stage1_WFI = MUX_rg_state$write_1__SEL_9 ;

  // rule RL_rl_WFI_resume
  assign CAN_FIRE_RL_rl_WFI_resume =
	     (!near_mem_imem_pc_BITS_31_TO_2_EQ_imem_rg_pc_BI_ETC___d8 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     rg_state == 4'd8 &&
	     csr_regfile$wfi_resume ;
  assign WILL_FIRE_RL_rl_WFI_resume = CAN_FIRE_RL_rl_WFI_resume ;

  // rule RL_rl_reset_from_WFI
  assign CAN_FIRE_RL_rl_reset_from_WFI =
	     rg_state == 4'd8 && f_reset_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_rl_reset_from_WFI = MUX_rg_state$write_1__SEL_3 ;

  // rule RL_rl_stage1_trap
  assign CAN_FIRE_RL_rl_stage1_trap =
	     (!near_mem_imem_pc_BITS_31_TO_2_EQ_imem_rg_pc_BI_ETC___d8 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     (rg_state == 4'd3 ||
	      rg_state_6_EQ_2_576_AND_NOT_rg_halt_562_586_AN_ETC___d1803) ;
  assign WILL_FIRE_RL_rl_stage1_trap = CAN_FIRE_RL_rl_stage1_trap ;

  // rule RL_rl_stage1_interrupt
  assign CAN_FIRE_RL_rl_stage1_interrupt =
	     (!near_mem_imem_pc_BITS_31_TO_2_EQ_imem_rg_pc_BI_ETC___d8 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     csr_regfile_interrupt_pending_rg_cur_priv_7_56_ETC___d1825 ;
  assign WILL_FIRE_RL_rl_stage1_interrupt = CAN_FIRE_RL_rl_stage1_interrupt ;

  // rule RL_imem_rl_assert_fail
  assign CAN_FIRE_RL_imem_rl_assert_fail = !near_mem$imem_is_i32_not_i16 ;
  assign WILL_FIRE_RL_imem_rl_assert_fail = CAN_FIRE_RL_imem_rl_assert_fail ;

  // rule RL_rl_pipe
  assign CAN_FIRE_RL_rl_pipe =
	     (rg_halt_562_OR_csr_regfile_interrupt_pending_r_ETC___d1574 ||
	      !near_mem_imem_pc_BITS_31_TO_2_EQ_imem_rg_pc_BI_ETC___d8 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     rg_state_6_EQ_2_576_AND_stage3_rg_full_2_OR_NO_ETC___d1595 ;
  assign WILL_FIRE_RL_rl_pipe =
	     CAN_FIRE_RL_rl_pipe && !WILL_FIRE_RL_imem_rl_fetch_next_32b ;

  // rule RL_rl_stage1_SFENCE_VMA
  assign CAN_FIRE_RL_rl_stage1_SFENCE_VMA =
	     rg_state_6_EQ_2_576_AND_NOT_rg_halt_562_586_AN_ETC___d1716 &&
	     IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 ==
	     2'd0 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d932 &&
	     IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 ==
	     4'd6 ;
  assign WILL_FIRE_RL_rl_stage1_SFENCE_VMA = MUX_rg_state$write_1__SEL_8 ;

  // rule RL_rl_reset_start
  assign CAN_FIRE_RL_rl_reset_start =
	     gpr_regfile$RDY_server_reset_request_put &&
	     fpr_regfile_RDY_server_reset_request_put__520__ETC___d1532 &&
	     rg_state == 4'd0 ;
  assign WILL_FIRE_RL_rl_reset_start = CAN_FIRE_RL_rl_reset_start ;

  // rule RL_rl_relay_sw_interrupts
  assign CAN_FIRE_RL_rl_relay_sw_interrupts =
	     near_mem$RDY_get_sw_interrupt_req_get ;
  assign WILL_FIRE_RL_rl_relay_sw_interrupts =
	     near_mem$RDY_get_sw_interrupt_req_get ;

  // rule RL_imem_rl_fetch_next_32b
  assign CAN_FIRE_RL_imem_rl_fetch_next_32b =
	     near_mem$imem_valid &&
	     near_mem_imem_pc_BITS_31_TO_2_EQ_imem_rg_pc_BI_ETC___d8 &&
	     imem_rg_pc[1:0] != 2'b0 &&
	     near_mem$imem_instr[17:16] == 2'b11 ;
  assign WILL_FIRE_RL_imem_rl_fetch_next_32b =
	     CAN_FIRE_RL_imem_rl_fetch_next_32b ;

  // rule RL_rl_relay_timer_interrupts
  assign CAN_FIRE_RL_rl_relay_timer_interrupts =
	     near_mem$RDY_get_timer_interrupt_req_get ;
  assign WILL_FIRE_RL_rl_relay_timer_interrupts =
	     near_mem$RDY_get_timer_interrupt_req_get ;

  // rule RL_stage3_rl_reset
  assign CAN_FIRE_RL_stage3_rl_reset =
	     stage3_f_reset_reqs$EMPTY_N && stage3_f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_stage3_rl_reset = CAN_FIRE_RL_stage3_rl_reset ;

  // rule RL_stage2_rl_reset_end
  assign CAN_FIRE_RL_stage2_rl_reset_end =
	     stage2_fbox$RDY_server_reset_response_get &&
	     stage2_f_reset_rsps$FULL_N &&
	     stage2_rg_resetting ;
  assign WILL_FIRE_RL_stage2_rl_reset_end = CAN_FIRE_RL_stage2_rl_reset_end ;

  // rule RL_stage2_rl_reset_begin
  assign CAN_FIRE_RL_stage2_rl_reset_begin =
	     stage2_fbox$RDY_server_reset_request_put &&
	     stage2_f_reset_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_stage2_rl_reset_begin =
	     CAN_FIRE_RL_stage2_rl_reset_begin ;

  // rule RL_stage1_rl_reset
  assign CAN_FIRE_RL_stage1_rl_reset =
	     stage1_f_reset_reqs$EMPTY_N && stage1_f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_stage1_rl_reset = CAN_FIRE_RL_stage1_rl_reset ;

  // inputs to muxes for submodule ports
  assign MUX_csr_regfile$mav_csr_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_stage1_CSRR_W && csr_regfile$access_permitted_1 ;
  assign MUX_gpr_regfile$write_rd_1__SEL_2 =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	     csr_regfile$access_permitted_2 ;
  assign MUX_gpr_regfile$write_rd_1__SEL_3 =
	     WILL_FIRE_RL_rl_pipe && stage3_rg_full && stage3_rg_stage3[76] &&
	     !stage3_rg_stage3[69] ;
  assign MUX_imem_rg_f3$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_rg_halt_562_586_AND_NOT_csr_regfile_interr_ETC___d1693 ;
  assign MUX_imem_rg_mstatus_MXR$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_stage1_trap || WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_reset_complete ;
  assign MUX_imem_rg_pc$write_1__SEL_3 =
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ;
  assign MUX_imem_rg_pc$write_1__SEL_6 =
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ;
  assign MUX_imem_rg_priv$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_reset_complete ;
  assign MUX_near_mem$imem_req_1__SEL_7 =
	     WILL_FIRE_RL_rl_stage1_trap || WILL_FIRE_RL_rl_stage2_nonpipe ;
  assign MUX_rg_state$write_1__SEL_1 =
	     rg_state_6_EQ_2_576_AND_NOT_rg_halt_562_586_AN_ETC___d1716 &&
	     IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 ==
	     2'd0 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d932 &&
	     IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 ==
	     4'd2 ;
  assign MUX_rg_state$write_1__SEL_2 =
	     rg_state_6_EQ_2_576_AND_NOT_rg_halt_562_586_AN_ETC___d1716 &&
	     IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 ==
	     2'd0 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d932 &&
	     IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 ==
	     4'd3 ;
  assign MUX_rg_state$write_1__SEL_3 =
	     CAN_FIRE_RL_rl_reset_from_WFI && !WILL_FIRE_RL_rl_WFI_resume ;
  assign MUX_rg_state$write_1__SEL_5 =
	     WILL_FIRE_RL_rl_stage1_trap || WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_reset_complete ;
  assign MUX_rg_state$write_1__SEL_6 =
	     near_mem$RDY_server_fence_i_request_put &&
	     rg_state_6_EQ_2_576_AND_NOT_rg_halt_562_586_AN_ETC___d1776 ;
  assign MUX_rg_state$write_1__SEL_7 =
	     near_mem$RDY_server_fence_request_put &&
	     rg_state_6_EQ_2_576_AND_NOT_rg_halt_562_586_AN_ETC___d1786 ;
  assign MUX_rg_state$write_1__SEL_8 =
	     CAN_FIRE_RL_rl_stage1_SFENCE_VMA &&
	     !WILL_FIRE_RL_imem_rl_fetch_next_32b ;
  assign MUX_rg_state$write_1__SEL_9 =
	     rg_state_6_EQ_2_576_AND_NOT_rg_halt_562_586_AN_ETC___d1716 &&
	     IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 ==
	     2'd0 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d932 &&
	     IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 ==
	     4'd10 ;
  always@(x_out_data_to_stage2_instr__h13909 or
	  csr_regfile$read_csr or
	  y__h22625 or
	  IF_csr_regfile_read_csr_IF_NOT_stage1_rg_full__ETC___d1752)
  begin
    case (x_out_data_to_stage2_instr__h13909[14:12])
      3'b010, 3'b110:
	  MUX_csr_regfile$mav_csr_write_2__VAL_2 =
	      IF_csr_regfile_read_csr_IF_NOT_stage1_rg_full__ETC___d1752;
      default: MUX_csr_regfile$mav_csr_write_2__VAL_2 =
		   csr_regfile$read_csr[31:0] & y__h22625;
    endcase
  end
  assign MUX_near_mem$imem_req_2__VAL_1 =
	     { x_out_next_pc__h13875[31:2], 2'b0 } ;
  assign MUX_near_mem$imem_req_2__VAL_3 =
	     { soc_map$m_pc_reset_value[31:2], 2'b0 } ;
  assign MUX_near_mem$imem_req_2__VAL_5 =
	     { csr_regfile$csr_ret_actions[65:36], 2'b0 } ;
  assign MUX_near_mem$imem_req_2__VAL_6 = { rg_next_pc[31:2], 2'b0 } ;
  assign MUX_near_mem$imem_req_2__VAL_7 =
	     { csr_regfile$csr_trap_actions[97:68], 2'b0 } ;
  assign MUX_rg_state$write_1__VAL_1 =
	     csr_regfile$access_permitted_1 ? 4'd4 : 4'd3 ;
  assign MUX_rg_state$write_1__VAL_2 =
	     csr_regfile$access_permitted_2 ? 4'd4 : 4'd3 ;
  assign MUX_stage1_rg_full$write_1__VAL_2 =
	     NOT_rg_halt_562_586_AND_NOT_csr_regfile_interr_ETC___d1693 ||
	     (rg_halt || csr_regfile$interrupt_pending[4] ||
	      IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 !=
	      2'd2 &&
	      IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 !=
	      2'd0 ||
	      NOT_near_mem_imem_valid_00_OR_NOT_near_mem_ime_ETC___d1589) &&
	     stage1_rg_full ;
  assign MUX_stage2_rg_full$write_1__VAL_2 =
	     !rg_halt && !csr_regfile$interrupt_pending[4] &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d1077 ||
	     IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 !=
	     2'd2 &&
	     IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 !=
	     2'd0 ;

  // register cfg_logdelay
  assign cfg_logdelay$D_IN = set_verbosity_logdelay ;
  assign cfg_logdelay$EN = EN_set_verbosity ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN = set_verbosity_verbosity ;
  assign cfg_verbosity$EN = EN_set_verbosity ;

  // register imem_rg_f3
  assign imem_rg_f3$D_IN = 3'b010 ;
  assign imem_rg_f3$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_rg_halt_562_586_AND_NOT_csr_regfile_interr_ETC___d1693 ||
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_reset_complete ;

  // register imem_rg_instr_15_0
  assign imem_rg_instr_15_0$D_IN = near_mem$imem_instr[31:16] ;
  assign imem_rg_instr_15_0$EN = CAN_FIRE_RL_imem_rl_fetch_next_32b ;

  // register imem_rg_mstatus_MXR
  assign imem_rg_mstatus_MXR$D_IN =
	     (MUX_imem_rg_f3$write_1__SEL_1 ||
	      MUX_imem_rg_mstatus_MXR$write_1__SEL_2) ?
	       csr_regfile$read_mstatus[19] :
	       csr_regfile$csr_trap_actions[53] ;
  assign imem_rg_mstatus_MXR$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_rg_halt_562_586_AND_NOT_csr_regfile_interr_ETC___d1693 ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_reset_complete ||
	     WILL_FIRE_RL_rl_stage1_interrupt ;

  // register imem_rg_pc
  always@(MUX_imem_rg_f3$write_1__SEL_1 or
	  x_out_next_pc__h13875 or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  MUX_imem_rg_pc$write_1__SEL_3 or
	  csr_regfile$csr_trap_actions or
	  WILL_FIRE_RL_rl_reset_complete or
	  soc_map$m_pc_reset_value or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  csr_regfile$csr_ret_actions or
	  MUX_imem_rg_pc$write_1__SEL_6 or rg_next_pc)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_f3$write_1__SEL_1: imem_rg_pc$D_IN = x_out_next_pc__h13875;
      WILL_FIRE_RL_rl_stage1_restart_after_csrrx:
	  imem_rg_pc$D_IN = x_out_next_pc__h13875;
      MUX_imem_rg_pc$write_1__SEL_3:
	  imem_rg_pc$D_IN = csr_regfile$csr_trap_actions[97:66];
      WILL_FIRE_RL_rl_reset_complete:
	  imem_rg_pc$D_IN = soc_map$m_pc_reset_value[31:0];
      WILL_FIRE_RL_rl_stage1_xRET:
	  imem_rg_pc$D_IN = csr_regfile$csr_ret_actions[65:34];
      MUX_imem_rg_pc$write_1__SEL_6: imem_rg_pc$D_IN = rg_next_pc;
      default: imem_rg_pc$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign imem_rg_pc$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_rg_halt_562_586_AND_NOT_csr_regfile_interr_ETC___d1693 ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_reset_complete ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ;

  // register imem_rg_priv
  always@(WILL_FIRE_RL_rl_stage1_xRET or
	  csr_regfile$csr_ret_actions or
	  MUX_imem_rg_pc$write_1__SEL_3 or
	  csr_regfile$csr_trap_actions or
	  MUX_imem_rg_f3$write_1__SEL_1 or
	  MUX_imem_rg_priv$write_1__SEL_2 or rg_cur_priv)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_stage1_xRET:
	  imem_rg_priv$D_IN = csr_regfile$csr_ret_actions[33:32];
      MUX_imem_rg_pc$write_1__SEL_3:
	  imem_rg_priv$D_IN = csr_regfile$csr_trap_actions[1:0];
      MUX_imem_rg_f3$write_1__SEL_1 || MUX_imem_rg_priv$write_1__SEL_2:
	  imem_rg_priv$D_IN = rg_cur_priv;
      default: imem_rg_priv$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign imem_rg_priv$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_rg_halt_562_586_AND_NOT_csr_regfile_interr_ETC___d1693 ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_reset_complete ||
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_xRET ;

  // register imem_rg_satp
  assign imem_rg_satp$D_IN = csr_regfile$read_satp ;
  assign imem_rg_satp$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_rg_halt_562_586_AND_NOT_csr_regfile_interr_ETC___d1693 ||
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_reset_complete ;

  // register imem_rg_sstatus_SUM
  assign imem_rg_sstatus_SUM$D_IN =
	     (MUX_imem_rg_f3$write_1__SEL_1 ||
	      MUX_imem_rg_mstatus_MXR$write_1__SEL_2) ?
	       csr_regfile$read_sstatus[18] :
	       csr_regfile$csr_trap_actions[52] ;
  assign imem_rg_sstatus_SUM$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_rg_halt_562_586_AND_NOT_csr_regfile_interr_ETC___d1693 ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_reset_complete ||
	     WILL_FIRE_RL_rl_stage1_interrupt ;

  // register rg_cur_priv
  always@(MUX_imem_rg_pc$write_1__SEL_3 or
	  csr_regfile$csr_trap_actions or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  csr_regfile$csr_ret_actions or WILL_FIRE_RL_rl_reset_start)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_pc$write_1__SEL_3:
	  rg_cur_priv$D_IN = csr_regfile$csr_trap_actions[1:0];
      WILL_FIRE_RL_rl_stage1_xRET:
	  rg_cur_priv$D_IN = csr_regfile$csr_ret_actions[33:32];
      WILL_FIRE_RL_rl_reset_start: rg_cur_priv$D_IN = 2'b11;
      default: rg_cur_priv$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign rg_cur_priv$EN =
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_halt
  assign rg_halt$D_IN = 1'd0 ;
  assign rg_halt$EN = CAN_FIRE_RL_rl_reset_start ;

  // register rg_next_pc
  assign rg_next_pc$D_IN = x_out_next_pc__h13875 ;
  assign rg_next_pc$EN =
	     WILL_FIRE_RL_rl_stage1_WFI || WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_SFENCE_VMA ;

  // register rg_start_CPI_cycles
  assign rg_start_CPI_cycles$D_IN = csr_regfile$read_csr_mcycle ;
  assign rg_start_CPI_cycles$EN = CAN_FIRE_RL_rl_reset_complete ;

  // register rg_start_CPI_instrs
  assign rg_start_CPI_instrs$D_IN = csr_regfile$read_csr_minstret ;
  assign rg_start_CPI_instrs$EN = CAN_FIRE_RL_rl_reset_complete ;

  // register rg_state
  always@(WILL_FIRE_RL_rl_stage1_CSRR_W or
	  MUX_rg_state$write_1__VAL_1 or
	  WILL_FIRE_RL_rl_stage1_CSRR_S_or_C or
	  MUX_rg_state$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_reset_from_WFI or
	  WILL_FIRE_RL_rl_reset_start or
	  MUX_rg_state$write_1__SEL_5 or
	  WILL_FIRE_RL_rl_stage1_FENCE_I or
	  WILL_FIRE_RL_rl_stage1_FENCE or
	  WILL_FIRE_RL_rl_stage1_SFENCE_VMA or WILL_FIRE_RL_rl_stage1_WFI)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_stage1_CSRR_W:
	  rg_state$D_IN = MUX_rg_state$write_1__VAL_1;
      WILL_FIRE_RL_rl_stage1_CSRR_S_or_C:
	  rg_state$D_IN = MUX_rg_state$write_1__VAL_2;
      WILL_FIRE_RL_rl_reset_from_WFI: rg_state$D_IN = 4'd0;
      WILL_FIRE_RL_rl_reset_start: rg_state$D_IN = 4'd1;
      MUX_rg_state$write_1__SEL_5: rg_state$D_IN = 4'd2;
      WILL_FIRE_RL_rl_stage1_FENCE_I: rg_state$D_IN = 4'd5;
      WILL_FIRE_RL_rl_stage1_FENCE: rg_state$D_IN = 4'd6;
      WILL_FIRE_RL_rl_stage1_SFENCE_VMA: rg_state$D_IN = 4'd7;
      WILL_FIRE_RL_rl_stage1_WFI: rg_state$D_IN = 4'd8;
      default: rg_state$D_IN = 4'b1010 /* unspecified value */ ;
    endcase
  end
  assign rg_state$EN =
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_reset_from_WFI ||
	     WILL_FIRE_RL_rl_reset_start ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_reset_complete ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_stage1_WFI ;

  // register stage1_rg_full
  always@(WILL_FIRE_RL_stage1_rl_reset or
	  WILL_FIRE_RL_rl_pipe or
	  MUX_stage1_rg_full$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_stage1_interrupt or
	  WILL_FIRE_RL_rl_stage1_trap or
	  WILL_FIRE_RL_rl_WFI_resume or
	  WILL_FIRE_RL_rl_finish_SFENCE_VMA or
	  WILL_FIRE_RL_rl_finish_FENCE or
	  WILL_FIRE_RL_rl_finish_FENCE_I or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  WILL_FIRE_RL_rl_stage2_nonpipe or WILL_FIRE_RL_rl_reset_complete)
  case (1'b1)
    WILL_FIRE_RL_stage1_rl_reset: stage1_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_pipe:
	stage1_rg_full$D_IN = MUX_stage1_rg_full$write_1__VAL_2;
    WILL_FIRE_RL_rl_stage1_interrupt || WILL_FIRE_RL_rl_stage1_trap ||
    WILL_FIRE_RL_rl_WFI_resume ||
    WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
    WILL_FIRE_RL_rl_finish_FENCE ||
    WILL_FIRE_RL_rl_finish_FENCE_I ||
    WILL_FIRE_RL_rl_stage1_xRET ||
    WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
    WILL_FIRE_RL_rl_stage2_nonpipe ||
    WILL_FIRE_RL_rl_reset_complete:
	stage1_rg_full$D_IN = 1'd1;
    default: stage1_rg_full$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stage1_rg_full$EN =
	     WILL_FIRE_RL_rl_pipe || WILL_FIRE_RL_stage1_rl_reset ||
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_reset_complete ;

  // register stage2_rg_full
  always@(WILL_FIRE_RL_stage2_rl_reset_begin or
	  WILL_FIRE_RL_rl_pipe or
	  MUX_stage2_rg_full$write_1__VAL_2 or WILL_FIRE_RL_rl_stage2_nonpipe)
  case (1'b1)
    WILL_FIRE_RL_stage2_rl_reset_begin: stage2_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_pipe:
	stage2_rg_full$D_IN = MUX_stage2_rg_full$write_1__VAL_2;
    WILL_FIRE_RL_rl_stage2_nonpipe: stage2_rg_full$D_IN = 1'd0;
    default: stage2_rg_full$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stage2_rg_full$EN =
	     WILL_FIRE_RL_rl_pipe || WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_stage2_rl_reset_begin ;

  // register stage2_rg_resetting
  assign stage2_rg_resetting$D_IN = WILL_FIRE_RL_stage2_rl_reset_begin ;
  assign stage2_rg_resetting$EN =
	     WILL_FIRE_RL_stage2_rl_reset_end ||
	     WILL_FIRE_RL_stage2_rl_reset_begin ;

  // register stage2_rg_stage2
  assign stage2_rg_stage2$D_IN =
	     { rg_cur_priv,
	       imem_rg_pc,
	       x_out_data_to_stage2_instr__h13909,
	       IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1234,
	       x_out_data_to_stage2_rd__h13911,
	       x_out_data_to_stage2_addr__h13912,
	       x_out_data_to_stage2_val1__h13913,
	       x_out_data_to_stage2_val2__h13914,
	       x_out_data_to_stage2_val3__h13915,
	       _theResult____h4785[6:0] == 7'b0000111 ||
	       (_theResult____h4785[6:0] == 7'b1010011 ||
		_theResult____h4785[6:0] == 7'b1000011 ||
		_theResult____h4785[6:0] == 7'b1000111 ||
		_theResult____h4785[6:0] == 7'b1001011 ||
		_theResult____h4785[6:0] == 7'b1001111) &&
	       (_theResult____h4785[31:25] != 7'h61 ||
		_theResult____h4785[24:20] != 5'd0) &&
	       (_theResult____h4785[31:25] != 7'h61 ||
		_theResult____h4785[24:20] != 5'd1) &&
	       _theResult____h4785[31:25] != 7'h71 &&
	       _theResult____h4785[31:25] != 7'h51 &&
	       (_theResult____h4785[31:25] != 7'h60 ||
		_theResult____h4785[24:20] != 5'd0) &&
	       (_theResult____h4785[31:25] != 7'h60 ||
		_theResult____h4785[24:20] != 5'd1) &&
	       _theResult____h4785[31:25] != 7'h70 &&
	       _theResult____h4785[31:25] != 7'h50,
	       x_out_data_to_stage2_rounding_mode__h13917 } ;
  assign stage2_rg_stage2$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_rg_halt_562_586_AND_NOT_csr_regfile_interr_ETC___d1636 ;

  // register stage3_rg_full
  assign stage3_rg_full$D_IN =
	     !WILL_FIRE_RL_stage3_rl_reset &&
	     IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 ==
	     2'd2 ;
  assign stage3_rg_full$EN =
	     WILL_FIRE_RL_rl_pipe || WILL_FIRE_RL_stage3_rl_reset ;

  // register stage3_rg_stage3
  assign stage3_rg_stage3$D_IN =
	     { stage2_rg_stage2[299:236],
	       stage2_rg_stage2[301:300],
	       stage2_rg_stage2[235:233] == 3'd0 ||
	       IF_stage2_rg_stage2_9_BITS_235_TO_233_00_EQ_1__ETC___d160,
	       x_out_data_to_stage3_rd__h6349,
	       stage2_rg_stage2[235:233] != 3'd0 &&
	       stage2_rg_stage2[235:233] != 3'd1 &&
	       stage2_rg_stage2[235:233] != 3'd4 &&
	       stage2_rg_stage2[235:233] != 3'd2 &&
	       stage2_rg_stage2[235:233] != 3'd3,
	       stage2_rg_stage2[235:233] != 3'd0 &&
	       CASE_stage2_rg_stage2_BITS_235_TO_233_1_stage2_ETC__q22,
	       x_out_data_to_stage3_fpr_flags__h6352,
	       x_out_data_to_stage3_rd_val__h6353 } ;
  assign stage3_rg_stage3$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 ==
	     2'd2 ;

  // submodule csr_regfile
  assign csr_regfile$access_permitted_1_csr_addr =
	     x_out_data_to_stage2_instr__h13909[31:20] ;
  assign csr_regfile$access_permitted_1_priv = rg_cur_priv ;
  assign csr_regfile$access_permitted_1_read_not_write = 1'd0 ;
  assign csr_regfile$access_permitted_2_csr_addr =
	     x_out_data_to_stage2_instr__h13909[31:20] ;
  assign csr_regfile$access_permitted_2_priv = rg_cur_priv ;
  assign csr_regfile$access_permitted_2_read_not_write =
	     rs1_val__h22321 == 32'd0 ;
  assign csr_regfile$csr_counter_read_fault_csr_addr = 12'h0 ;
  assign csr_regfile$csr_counter_read_fault_priv = 2'h0 ;
  always@(IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152)
  begin
    case (IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152)
      4'd7: csr_regfile$csr_ret_actions_from_priv = 2'b11;
      4'd8: csr_regfile$csr_ret_actions_from_priv = 2'b01;
      default: csr_regfile$csr_ret_actions_from_priv = 2'b0;
    endcase
  end
  always@(WILL_FIRE_RL_rl_stage1_trap or
	  x_out_trap_info_exc_code__h16824 or
	  WILL_FIRE_RL_rl_stage1_interrupt or
	  csr_regfile$interrupt_pending or
	  WILL_FIRE_RL_rl_stage2_nonpipe or x_out_trap_info_exc_code__h6632)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_stage1_trap:
	  csr_regfile$csr_trap_actions_exc_code =
	      x_out_trap_info_exc_code__h16824;
      WILL_FIRE_RL_rl_stage1_interrupt:
	  csr_regfile$csr_trap_actions_exc_code =
	      csr_regfile$interrupt_pending[3:0];
      WILL_FIRE_RL_rl_stage2_nonpipe:
	  csr_regfile$csr_trap_actions_exc_code =
	      x_out_trap_info_exc_code__h6632;
      default: csr_regfile$csr_trap_actions_exc_code =
		   4'b1010 /* unspecified value */ ;
    endcase
  end
  assign csr_regfile$csr_trap_actions_from_priv = rg_cur_priv ;
  assign csr_regfile$csr_trap_actions_interrupt =
	     !WILL_FIRE_RL_rl_stage1_trap && !WILL_FIRE_RL_rl_stage2_nonpipe ;
  assign csr_regfile$csr_trap_actions_pc =
	     (WILL_FIRE_RL_rl_stage1_trap ||
	      WILL_FIRE_RL_rl_stage1_interrupt) ?
	       imem_rg_pc :
	       value__h6595 ;
  always@(WILL_FIRE_RL_rl_stage1_trap or
	  value__h16876 or
	  WILL_FIRE_RL_rl_stage1_interrupt or
	  WILL_FIRE_RL_rl_stage2_nonpipe or value__h6656)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_stage1_trap:
	  csr_regfile$csr_trap_actions_xtval = value__h16876;
      WILL_FIRE_RL_rl_stage1_interrupt:
	  csr_regfile$csr_trap_actions_xtval = 32'd0;
      WILL_FIRE_RL_rl_stage2_nonpipe:
	  csr_regfile$csr_trap_actions_xtval = value__h6656;
      default: csr_regfile$csr_trap_actions_xtval =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign csr_regfile$external_interrupt_req_set_not_clear =
	     external_interrupt_req_set_not_clear ;
  assign csr_regfile$interrupt_pending_cur_priv = rg_cur_priv ;
  assign csr_regfile$ma_update_fcsr_fflags_flags = stage3_rg_stage3[68:64] ;
  assign csr_regfile$ma_update_mstatus_fs_fs = 2'h3 ;
  assign csr_regfile$mav_csr_write_csr_addr =
	     x_out_data_to_stage2_instr__h13909[31:20] ;
  assign csr_regfile$mav_csr_write_word =
	     MUX_csr_regfile$mav_csr_write_1__SEL_1 ?
	       rs1_val__h21828 :
	       MUX_csr_regfile$mav_csr_write_2__VAL_2 ;
  assign csr_regfile$mav_read_csr_csr_addr = 12'h0 ;
  assign csr_regfile$read_csr_csr_addr =
	     x_out_data_to_stage2_instr__h13909[31:20] ;
  assign csr_regfile$read_csr_port2_csr_addr = 12'h0 ;
  assign csr_regfile$software_interrupt_req_set_not_clear =
	     near_mem$get_sw_interrupt_req_get ;
  assign csr_regfile$timer_interrupt_req_set_not_clear =
	     near_mem$get_timer_interrupt_req_get ;
  assign csr_regfile$EN_server_reset_request_put =
	     CAN_FIRE_RL_rl_reset_start ;
  assign csr_regfile$EN_server_reset_response_get =
	     CAN_FIRE_RL_rl_reset_complete ;
  assign csr_regfile$EN_mav_read_csr = 1'b0 ;
  assign csr_regfile$EN_mav_csr_write =
	     WILL_FIRE_RL_rl_stage1_CSRR_W &&
	     csr_regfile$access_permitted_1 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	     csr_regfile$access_permitted_2 &&
	     x_out_data_to_stage2_instr__h13909[19:15] != 5'd0 ;
  assign csr_regfile$EN_ma_update_fcsr_fflags =
	     WILL_FIRE_RL_rl_pipe && stage3_rg_full && stage3_rg_stage3[76] &&
	     stage3_rg_stage3[70] ;
  assign csr_regfile$EN_ma_update_mstatus_fs =
	     WILL_FIRE_RL_rl_pipe && stage3_rg_full && stage3_rg_stage3[76] &&
	     (stage3_rg_stage3[70] || stage3_rg_stage3[69]) ;
  assign csr_regfile$EN_csr_trap_actions =
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ;
  assign csr_regfile$EN_csr_ret_actions = CAN_FIRE_RL_rl_stage1_xRET ;
  assign csr_regfile$EN_csr_minstret_incr =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 ==
	     2'd2 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W &&
	     csr_regfile$access_permitted_1 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	     csr_regfile$access_permitted_2 ||
	     WILL_FIRE_RL_rl_stage1_WFI ||
	     WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_SFENCE_VMA ;
  assign csr_regfile$EN_timer_interrupt_req =
	     near_mem$RDY_get_timer_interrupt_req_get ;
  assign csr_regfile$EN_software_interrupt_req =
	     near_mem$RDY_get_sw_interrupt_req_get ;
  assign csr_regfile$EN_debug = 1'b0 ;

  // submodule f_reset_reqs
  assign f_reset_reqs$ENQ = EN_hart0_server_reset_request_put ;
  assign f_reset_reqs$DEQ =
	     gpr_regfile$RDY_server_reset_request_put &&
	     fpr_regfile_RDY_server_reset_request_put__520__ETC___d1532 &&
	     rg_state == 4'd0 ;
  assign f_reset_reqs$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$ENQ =
	     NOT_near_mem_imem_pc_BITS_31_TO_2_EQ_imem_rg_p_ETC___d1553 &&
	     rg_state == 4'd1 ;
  assign f_reset_rsps$DEQ = EN_hart0_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule fpr_regfile
  assign fpr_regfile$read_rs1_port2_rs1 = 5'h0 ;
  assign fpr_regfile$read_rs1_rs1 = _theResult____h4785[19:15] ;
  assign fpr_regfile$read_rs2_rs2 = _theResult____h4785[24:20] ;
  assign fpr_regfile$read_rs3_rs3 = _theResult____h4785[31:27] ;
  assign fpr_regfile$write_rd_rd = stage3_rg_stage3[75:71] ;
  assign fpr_regfile$write_rd_rd_val = stage3_rg_stage3[63:0] ;
  assign fpr_regfile$EN_server_reset_request_put =
	     CAN_FIRE_RL_rl_reset_start ;
  assign fpr_regfile$EN_server_reset_response_get =
	     CAN_FIRE_RL_rl_reset_complete ;
  assign fpr_regfile$EN_write_rd =
	     WILL_FIRE_RL_rl_pipe && stage3_rg_full && stage3_rg_stage3[76] &&
	     stage3_rg_stage3[69] ;

  // submodule gpr_regfile
  assign gpr_regfile$read_rs1_port2_rs1 = 5'h0 ;
  assign gpr_regfile$read_rs1_rs1 = _theResult____h4785[19:15] ;
  assign gpr_regfile$read_rs2_rs2 = _theResult____h4785[24:20] ;
  assign gpr_regfile$write_rd_rd =
	     MUX_gpr_regfile$write_rd_1__SEL_3 ?
	       stage3_rg_stage3[75:71] :
	       x_out_data_to_stage2_instr__h13909[11:7] ;
  assign gpr_regfile$write_rd_rd_val =
	     (MUX_csr_regfile$mav_csr_write_1__SEL_1 ||
	      MUX_gpr_regfile$write_rd_1__SEL_2) ?
	       csr_regfile$read_csr[31:0] :
	       stage3_rg_stage3[31:0] ;
  assign gpr_regfile$EN_server_reset_request_put =
	     CAN_FIRE_RL_rl_reset_start ;
  assign gpr_regfile$EN_server_reset_response_get =
	     CAN_FIRE_RL_rl_reset_complete ;
  assign gpr_regfile$EN_write_rd =
	     WILL_FIRE_RL_rl_stage1_CSRR_W &&
	     csr_regfile$access_permitted_1 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	     csr_regfile$access_permitted_2 ||
	     WILL_FIRE_RL_rl_pipe && stage3_rg_full && stage3_rg_stage3[76] &&
	     !stage3_rg_stage3[69] ;

  // submodule near_mem
  assign near_mem$dmem_master_arready = dmem_master_arready ;
  assign near_mem$dmem_master_awready = dmem_master_awready ;
  assign near_mem$dmem_master_bid = dmem_master_bid ;
  assign near_mem$dmem_master_bresp = dmem_master_bresp ;
  assign near_mem$dmem_master_bvalid = dmem_master_bvalid ;
  assign near_mem$dmem_master_rdata = dmem_master_rdata ;
  assign near_mem$dmem_master_rid = dmem_master_rid ;
  assign near_mem$dmem_master_rlast = dmem_master_rlast ;
  assign near_mem$dmem_master_rresp = dmem_master_rresp ;
  assign near_mem$dmem_master_rvalid = dmem_master_rvalid ;
  assign near_mem$dmem_master_wready = dmem_master_wready ;
  assign near_mem$dmem_req_addr = x_out_data_to_stage2_addr__h13912 ;
  assign near_mem$dmem_req_amo_funct7 =
	     x_out_data_to_stage2_val1__h13913[6:0] ;
  assign near_mem$dmem_req_f3 = x_out_data_to_stage2_instr__h13909[14:12] ;
  assign near_mem$dmem_req_mstatus_MXR = csr_regfile$read_mstatus[19] ;
  always@(IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1234)
  begin
    case (IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1234)
      3'd1: near_mem$dmem_req_op = 2'd0;
      3'd2: near_mem$dmem_req_op = 2'd1;
      default: near_mem$dmem_req_op = 2'd2;
    endcase
  end
  assign near_mem$dmem_req_priv =
	     csr_regfile$read_mstatus[17] ?
	       csr_regfile$read_mstatus[12:11] :
	       rg_cur_priv ;
  assign near_mem$dmem_req_satp = csr_regfile$read_satp ;
  assign near_mem$dmem_req_sstatus_SUM = csr_regfile$read_sstatus[18] ;
  assign near_mem$dmem_req_store_value = x_out_data_to_stage2_val2__h13914 ;
  assign near_mem$imem_master_arready = imem_master_arready ;
  assign near_mem$imem_master_awready = imem_master_awready ;
  assign near_mem$imem_master_bid = imem_master_bid ;
  assign near_mem$imem_master_bresp = imem_master_bresp ;
  assign near_mem$imem_master_bvalid = imem_master_bvalid ;
  assign near_mem$imem_master_rdata = imem_master_rdata ;
  assign near_mem$imem_master_rid = imem_master_rid ;
  assign near_mem$imem_master_rlast = imem_master_rlast ;
  assign near_mem$imem_master_rresp = imem_master_rresp ;
  assign near_mem$imem_master_rvalid = imem_master_rvalid ;
  assign near_mem$imem_master_wready = imem_master_wready ;
  always@(MUX_imem_rg_f3$write_1__SEL_1 or
	  MUX_near_mem$imem_req_2__VAL_1 or
	  WILL_FIRE_RL_imem_rl_fetch_next_32b or
	  next_pc___1__h16983 or
	  WILL_FIRE_RL_rl_reset_complete or
	  MUX_near_mem$imem_req_2__VAL_3 or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  MUX_near_mem$imem_req_2__VAL_5 or
	  MUX_imem_rg_pc$write_1__SEL_6 or
	  MUX_near_mem$imem_req_2__VAL_6 or
	  MUX_near_mem$imem_req_1__SEL_7 or
	  MUX_near_mem$imem_req_2__VAL_7 or WILL_FIRE_RL_rl_stage1_interrupt)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_f3$write_1__SEL_1:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_1;
      WILL_FIRE_RL_imem_rl_fetch_next_32b:
	  near_mem$imem_req_addr = next_pc___1__h16983;
      WILL_FIRE_RL_rl_reset_complete:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_3;
      WILL_FIRE_RL_rl_stage1_restart_after_csrrx:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_1;
      WILL_FIRE_RL_rl_stage1_xRET:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_5;
      MUX_imem_rg_pc$write_1__SEL_6:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_6;
      MUX_near_mem$imem_req_1__SEL_7:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_7;
      WILL_FIRE_RL_rl_stage1_interrupt:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_7;
      default: near_mem$imem_req_addr = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign near_mem$imem_req_f3 =
	     WILL_FIRE_RL_imem_rl_fetch_next_32b ? imem_rg_f3 : 3'b010 ;
  always@(MUX_imem_rg_f3$write_1__SEL_1 or
	  WILL_FIRE_RL_rl_reset_complete or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  MUX_imem_rg_pc$write_1__SEL_6 or
	  MUX_near_mem$imem_req_1__SEL_7 or
	  csr_regfile$read_mstatus or
	  WILL_FIRE_RL_rl_stage1_interrupt or
	  csr_regfile$csr_trap_actions or
	  WILL_FIRE_RL_imem_rl_fetch_next_32b or imem_rg_mstatus_MXR)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_f3$write_1__SEL_1 || WILL_FIRE_RL_rl_reset_complete ||
      WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
      WILL_FIRE_RL_rl_stage1_xRET ||
      MUX_imem_rg_pc$write_1__SEL_6 ||
      MUX_near_mem$imem_req_1__SEL_7:
	  near_mem$imem_req_mstatus_MXR = csr_regfile$read_mstatus[19];
      WILL_FIRE_RL_rl_stage1_interrupt:
	  near_mem$imem_req_mstatus_MXR = csr_regfile$csr_trap_actions[53];
      WILL_FIRE_RL_imem_rl_fetch_next_32b:
	  near_mem$imem_req_mstatus_MXR = imem_rg_mstatus_MXR;
      default: near_mem$imem_req_mstatus_MXR = 1'b0 /* unspecified value */ ;
    endcase
  end
  always@(WILL_FIRE_RL_rl_stage1_xRET or
	  csr_regfile$csr_ret_actions or
	  MUX_near_mem$imem_req_1__SEL_7 or
	  WILL_FIRE_RL_rl_stage1_interrupt or
	  csr_regfile$csr_trap_actions or
	  MUX_imem_rg_f3$write_1__SEL_1 or
	  WILL_FIRE_RL_rl_reset_complete or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  MUX_imem_rg_pc$write_1__SEL_6 or
	  rg_cur_priv or WILL_FIRE_RL_imem_rl_fetch_next_32b or imem_rg_priv)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_stage1_xRET:
	  near_mem$imem_req_priv = csr_regfile$csr_ret_actions[33:32];
      MUX_near_mem$imem_req_1__SEL_7 || WILL_FIRE_RL_rl_stage1_interrupt:
	  near_mem$imem_req_priv = csr_regfile$csr_trap_actions[1:0];
      MUX_imem_rg_f3$write_1__SEL_1 || WILL_FIRE_RL_rl_reset_complete ||
      WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
      MUX_imem_rg_pc$write_1__SEL_6:
	  near_mem$imem_req_priv = rg_cur_priv;
      WILL_FIRE_RL_imem_rl_fetch_next_32b:
	  near_mem$imem_req_priv = imem_rg_priv;
      default: near_mem$imem_req_priv = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign near_mem$imem_req_satp =
	     WILL_FIRE_RL_imem_rl_fetch_next_32b ?
	       imem_rg_satp :
	       csr_regfile$read_satp ;
  always@(MUX_imem_rg_f3$write_1__SEL_1 or
	  WILL_FIRE_RL_rl_reset_complete or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  MUX_imem_rg_pc$write_1__SEL_6 or
	  MUX_near_mem$imem_req_1__SEL_7 or
	  csr_regfile$read_sstatus or
	  WILL_FIRE_RL_rl_stage1_interrupt or
	  csr_regfile$csr_trap_actions or
	  WILL_FIRE_RL_imem_rl_fetch_next_32b or imem_rg_sstatus_SUM)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_f3$write_1__SEL_1 || WILL_FIRE_RL_rl_reset_complete ||
      WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
      WILL_FIRE_RL_rl_stage1_xRET ||
      MUX_imem_rg_pc$write_1__SEL_6 ||
      MUX_near_mem$imem_req_1__SEL_7:
	  near_mem$imem_req_sstatus_SUM = csr_regfile$read_sstatus[18];
      WILL_FIRE_RL_rl_stage1_interrupt:
	  near_mem$imem_req_sstatus_SUM = csr_regfile$csr_trap_actions[52];
      WILL_FIRE_RL_imem_rl_fetch_next_32b:
	  near_mem$imem_req_sstatus_SUM = imem_rg_sstatus_SUM;
      default: near_mem$imem_req_sstatus_SUM = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign near_mem$near_mem_slave_araddr = near_mem_slave_araddr ;
  assign near_mem$near_mem_slave_arburst = near_mem_slave_arburst ;
  assign near_mem$near_mem_slave_arcache = near_mem_slave_arcache ;
  assign near_mem$near_mem_slave_arid = near_mem_slave_arid ;
  assign near_mem$near_mem_slave_arlen = near_mem_slave_arlen ;
  assign near_mem$near_mem_slave_arlock = near_mem_slave_arlock ;
  assign near_mem$near_mem_slave_arprot = near_mem_slave_arprot ;
  assign near_mem$near_mem_slave_arqos = near_mem_slave_arqos ;
  assign near_mem$near_mem_slave_arregion = near_mem_slave_arregion ;
  assign near_mem$near_mem_slave_arsize = near_mem_slave_arsize ;
  assign near_mem$near_mem_slave_arvalid = near_mem_slave_arvalid ;
  assign near_mem$near_mem_slave_awaddr = near_mem_slave_awaddr ;
  assign near_mem$near_mem_slave_awburst = near_mem_slave_awburst ;
  assign near_mem$near_mem_slave_awcache = near_mem_slave_awcache ;
  assign near_mem$near_mem_slave_awid = near_mem_slave_awid ;
  assign near_mem$near_mem_slave_awlen = near_mem_slave_awlen ;
  assign near_mem$near_mem_slave_awlock = near_mem_slave_awlock ;
  assign near_mem$near_mem_slave_awprot = near_mem_slave_awprot ;
  assign near_mem$near_mem_slave_awqos = near_mem_slave_awqos ;
  assign near_mem$near_mem_slave_awregion = near_mem_slave_awregion ;
  assign near_mem$near_mem_slave_awsize = near_mem_slave_awsize ;
  assign near_mem$near_mem_slave_awvalid = near_mem_slave_awvalid ;
  assign near_mem$near_mem_slave_bready = near_mem_slave_bready ;
  assign near_mem$near_mem_slave_rready = near_mem_slave_rready ;
  assign near_mem$near_mem_slave_wdata = near_mem_slave_wdata ;
  assign near_mem$near_mem_slave_wid = near_mem_slave_wid ;
  assign near_mem$near_mem_slave_wlast = near_mem_slave_wlast ;
  assign near_mem$near_mem_slave_wstrb = near_mem_slave_wstrb ;
  assign near_mem$near_mem_slave_wvalid = near_mem_slave_wvalid ;
  assign near_mem$server_fence_request_put =
	     8'b10101010 /* unspecified value */  ;
  assign near_mem$EN_server_reset_request_put = CAN_FIRE_RL_rl_reset_start ;
  assign near_mem$EN_server_reset_response_get =
	     CAN_FIRE_RL_rl_reset_complete ;
  assign near_mem$EN_imem_req =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_rg_halt_562_586_AND_NOT_csr_regfile_interr_ETC___d1693 ||
	     WILL_FIRE_RL_imem_rl_fetch_next_32b ||
	     WILL_FIRE_RL_rl_reset_complete ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_interrupt ;
  assign near_mem$EN_dmem_req =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_rg_halt_562_586_AND_NOT_csr_regfile_interr_ETC___d1636 &&
	     (IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1234 ==
	      3'd1 ||
	      IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1234 ==
	      3'd2 ||
	      IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1234 ==
	      3'd4) ;
  assign near_mem$EN_server_fence_i_request_put =
	     MUX_rg_state$write_1__SEL_6 ;
  assign near_mem$EN_server_fence_i_response_get =
	     CAN_FIRE_RL_rl_finish_FENCE_I ;
  assign near_mem$EN_server_fence_request_put = MUX_rg_state$write_1__SEL_7 ;
  assign near_mem$EN_server_fence_response_get = CAN_FIRE_RL_rl_finish_FENCE ;
  assign near_mem$EN_sfence_vma = MUX_rg_state$write_1__SEL_8 ;
  assign near_mem$EN_get_timer_interrupt_req_get =
	     near_mem$RDY_get_timer_interrupt_req_get ;
  assign near_mem$EN_get_sw_interrupt_req_get =
	     near_mem$RDY_get_sw_interrupt_req_get ;

  // submodule soc_map
  assign soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign soc_map$m_is_mem_addr_addr = 64'h0 ;
  assign soc_map$m_is_near_mem_IO_addr_addr = 64'h0 ;

  // submodule stage1_f_reset_reqs
  assign stage1_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stage1_f_reset_reqs$DEQ = CAN_FIRE_RL_stage1_rl_reset ;
  assign stage1_f_reset_reqs$CLR = 1'b0 ;

  // submodule stage1_f_reset_rsps
  assign stage1_f_reset_rsps$ENQ = CAN_FIRE_RL_stage1_rl_reset ;
  assign stage1_f_reset_rsps$DEQ = CAN_FIRE_RL_rl_reset_complete ;
  assign stage1_f_reset_rsps$CLR = 1'b0 ;

  // submodule stage2_f_reset_reqs
  assign stage2_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stage2_f_reset_reqs$DEQ = CAN_FIRE_RL_stage2_rl_reset_begin ;
  assign stage2_f_reset_reqs$CLR = 1'b0 ;

  // submodule stage2_f_reset_rsps
  assign stage2_f_reset_rsps$ENQ = CAN_FIRE_RL_stage2_rl_reset_end ;
  assign stage2_f_reset_rsps$DEQ = CAN_FIRE_RL_rl_reset_complete ;
  assign stage2_f_reset_rsps$CLR = 1'b0 ;

  // submodule stage2_fbox
  assign stage2_fbox$req_f7 = x_out_data_to_stage2_instr__h13909[31:25] ;
  assign stage2_fbox$req_opcode = x_out_data_to_stage2_instr__h13909[6:0] ;
  assign stage2_fbox$req_rm = x_out_data_to_stage2_rounding_mode__h13917 ;
  assign stage2_fbox$req_rs2 = x_out_data_to_stage2_instr__h13909[24:20] ;
  assign stage2_fbox$req_v1 = x_out_data_to_stage2_val1__h13913 ;
  assign stage2_fbox$req_v2 = x_out_data_to_stage2_val2__h13914 ;
  assign stage2_fbox$req_v3 = x_out_data_to_stage2_val3__h13915 ;
  assign stage2_fbox$EN_server_reset_request_put =
	     CAN_FIRE_RL_stage2_rl_reset_begin ;
  assign stage2_fbox$EN_server_reset_response_get =
	     CAN_FIRE_RL_stage2_rl_reset_end ;
  assign stage2_fbox$EN_req =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_rg_halt_562_586_AND_NOT_csr_regfile_interr_ETC___d1636 &&
	     IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1234 ==
	     3'd5 ;

  // submodule stage2_mbox
  assign stage2_mbox$req_f3 = x_out_data_to_stage2_instr__h13909[14:12] ;
  assign stage2_mbox$req_is_OP_not_OP_32 = !_theResult____h4785[3] ;
  assign stage2_mbox$req_v1 = x_out_data_to_stage2_val1__h13913[31:0] ;
  assign stage2_mbox$req_v2 = x_out_data_to_stage2_val2__h13914[31:0] ;
  assign stage2_mbox$set_verbosity_verbosity = 4'h0 ;
  assign stage2_mbox$EN_set_verbosity = 1'b0 ;
  assign stage2_mbox$EN_req_reset = 1'b0 ;
  assign stage2_mbox$EN_rsp_reset = 1'b0 ;
  assign stage2_mbox$EN_req =
	     WILL_FIRE_RL_rl_pipe &&
	     NOT_rg_halt_562_586_AND_NOT_csr_regfile_interr_ETC___d1636 &&
	     IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1234 ==
	     3'd3 ;

  // submodule stage3_f_reset_reqs
  assign stage3_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stage3_f_reset_reqs$DEQ = CAN_FIRE_RL_stage3_rl_reset ;
  assign stage3_f_reset_reqs$CLR = 1'b0 ;

  // submodule stage3_f_reset_rsps
  assign stage3_f_reset_rsps$ENQ = CAN_FIRE_RL_stage3_rl_reset ;
  assign stage3_f_reset_rsps$DEQ = CAN_FIRE_RL_rl_reset_complete ;
  assign stage3_f_reset_rsps$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1069 =
	     ((_theResult____h4785[6:0] == 7'b0010011 ||
	       _theResult____h4785[6:0] == 7'b0110011) &&
	      (_theResult____h4785[14:12] == 3'b001 ||
	       _theResult____h4785[14:12] == 3'b101)) ?
	       !_theResult____h4785[25] :
	       CASE_theResult__785_BITS_6_TO_0_0b10011_IF_NOT_ETC__q13 ;
  assign IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1072 =
	     (_theResult____h4785[6:0] == 7'b1100011) ?
	       (_theResult____h4785[14:12] == 3'b0 ||
		_theResult____h4785[14:12] == 3'b001 ||
		_theResult____h4785[14:12] == 3'b100 ||
		_theResult____h4785[14:12] == 3'b101 ||
		_theResult____h4785[14:12] == 3'b110 ||
		_theResult____h4785[14:12] == 3'b111) &&
	       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d924 :
	       _theResult____h4785[6:0] != 7'b1101111 &&
	       _theResult____h4785[6:0] != 7'b1100111 &&
	       (_theResult____h4785[6:0] == 7'b0110011 &&
		_theResult____h4785[31:25] == 7'b0000001 ||
		IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1069) ;
  assign IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1074 =
	     (_theResult____h4785[6:0] == 7'b1100011) ?
	       (_theResult____h4785[14:12] == 3'b0 ||
		_theResult____h4785[14:12] == 3'b001 ||
		_theResult____h4785[14:12] == 3'b100 ||
		_theResult____h4785[14:12] == 3'b101 ||
		_theResult____h4785[14:12] == 3'b110 ||
		_theResult____h4785[14:12] == 3'b111) &&
	       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d662 :
	       _theResult____h4785[6:0] == 7'b1101111 ||
	       _theResult____h4785[6:0] == 7'b1100111 ;
  assign IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1086 =
	     ((_theResult____h4785[14:12] == 3'b0 ||
	       _theResult____h4785[14:12] == 3'b100 ||
	       _theResult____h4785[14:12] == 3'b001 ||
	       _theResult____h4785[14:12] == 3'b101 ||
	       _theResult____h4785[14:12] == 3'b010 ||
	       _theResult____h4785[14:12] == 3'b011) &&
	      (_theResult____h4785[6:0] != 7'b0000111 ||
	       csr_regfile$read_mstatus[14:13] != 2'h0)) ?
	       4'd0 :
	       4'd11 ;
  assign IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1090 =
	     ((_theResult____h4785[14:12] == 3'b0 ||
	       _theResult____h4785[14:12] == 3'b001 ||
	       _theResult____h4785[14:12] == 3'b010 ||
	       _theResult____h4785[14:12] == 3'b011) &&
	      (_theResult____h4785[6:0] != 7'b0100111 ||
	       csr_regfile$read_mstatus[14:13] != 2'h0)) ?
	       4'd0 :
	       4'd11 ;
  assign IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1128 =
	     IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_ETC___d1101 ?
	       4'd6 :
	       ((_theResult____h4785[11:7] == 5'd0 &&
		 _theResult____h4785[19:15] == 5'd0) ?
		  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1126 :
		  4'd11) ;
  assign IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1388 =
	     ((_theResult____h4785[6:0] == 7'b0010011 ||
	       _theResult____h4785[6:0] == 7'b0110011) &&
	      (_theResult____h4785[14:12] == 3'b001 ||
	       _theResult____h4785[14:12] == 3'b101)) ?
	       alu_outputs___1_val1__h14200 :
	       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1387 ;
  assign IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1408 =
	     (_theResult____h4785[6:0] == 7'b0110011 &&
	      _theResult____h4785[31:25] == 7'b0000001) ?
	       alu_outputs___1_val2__h15100 :
	       CASE_theResult__785_BITS_6_TO_0_0b100011_alu_o_ETC__q21 ;
  assign IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1819 =
	     IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1072 ||
	     IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1074 ||
	     near_mem$imem_exc ||
	     IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d918 &&
	     IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d929 ;
  assign IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d651 =
	     rs1_val_bypassed__h4793 == rs2_val__h14014 ;
  assign IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d653 =
	     (rs1_val_bypassed__h4793 ^ 32'h80000000) <
	     (rs2_val__h14014 ^ 32'h80000000) ;
  assign IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d655 =
	     rs1_val_bypassed__h4793 < rs2_val__h14014 ;
  assign IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d915 =
	     ((_theResult____h4785[6:0] == 7'b0010011 ||
	       _theResult____h4785[6:0] == 7'b0110011) &&
	      (_theResult____h4785[14:12] == 3'b001 ||
	       _theResult____h4785[14:12] == 3'b101)) ?
	       _theResult____h4785[25] :
	       CASE_theResult__785_BITS_6_TO_0_0b10011_NOT_IF_ETC__q10 ;
  assign IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d918 =
	     (_theResult____h4785[6:0] == 7'b1100011) ?
	       _theResult____h4785[14:12] != 3'b0 &&
	       _theResult____h4785[14:12] != 3'b001 &&
	       _theResult____h4785[14:12] != 3'b100 &&
	       _theResult____h4785[14:12] != 3'b101 &&
	       _theResult____h4785[14:12] != 3'b110 &&
	       _theResult____h4785[14:12] != 3'b111 ||
	       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d662 :
	       _theResult____h4785[6:0] == 7'b1101111 ||
	       _theResult____h4785[6:0] == 7'b1100111 ||
	       (_theResult____h4785[6:0] != 7'b0110011 ||
		_theResult____h4785[31:25] != 7'b0000001) &&
	       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d915 ;
  assign IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d929 =
	     (_theResult____h4785[6:0] == 7'b1100011) ?
	       _theResult____h4785[14:12] != 3'b0 &&
	       _theResult____h4785[14:12] != 3'b001 &&
	       _theResult____h4785[14:12] != 3'b100 &&
	       _theResult____h4785[14:12] != 3'b101 &&
	       _theResult____h4785[14:12] != 3'b110 &&
	       _theResult____h4785[14:12] != 3'b111 ||
	       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d924 :
	       _theResult____h4785[6:0] != 7'b1101111 &&
	       _theResult____h4785[6:0] != 7'b1100111 ;
  assign IF_NOT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_P_ETC___d1082 =
	     NOT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_ETC___d692 ?
	       4'd11 :
	       4'd0 ;
  assign IF_NOT_csr_regfile_read_mstatus__8_BITS_14_TO__ETC___d1136 =
	     NOT_csr_regfile_read_mstatus__8_BITS_14_TO_13__ETC___d1058 ?
	       4'd0 :
	       4'd11 ;
  assign IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_ETC___d1101 =
	     _theResult____h4785[11:7] == 5'd0 &&
	     (rg_cur_priv == 2'b11 ||
	      rg_cur_priv == 2'b01 && !csr_regfile$read_mstatus[20]) &&
	     _theResult____h4785[31:25] == 7'b0001001 ;
  assign IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_ETC___d1291 =
	     NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_01_ETC___d309 ?
	       next_pc___1__h16983 :
	       next_pc__h16981 ;
  assign IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_ETC___d949 =
	     _theResult____h4785[14:12] == 3'b0 &&
	     (_theResult____h4785[6:0] != 7'b0110011 ||
	      !_theResult____h4785[30]) ||
	     _theResult____h4785[14:12] == 3'b0 &&
	     _theResult____h4785[6:0] == 7'b0110011 &&
	     _theResult____h4785[30] ||
	     _theResult____h4785[14:12] == 3'b010 ||
	     _theResult____h4785[14:12] == 3'b011 ||
	     _theResult____h4785[14:12] == 3'b100 ||
	     _theResult____h4785[14:12] == 3'b110 ||
	     _theResult____h4785[14:12] == 3'b111 ;
  assign IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 =
	     near_mem$imem_exc ?
	       4'd11 :
	       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1150 ;
  assign IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1806 =
	     imem_rg_pc == csr_regfile$csr_trap_actions[97:66] ;
  assign IF_NOT_stage2_rg_full_8_32_OR_stage2_rg_stage2_ETC___d282 =
	     (!stage2_rg_full || stage2_rg_stage2[235:233] == 3'd0) ?
	       2'd0 :
	       CASE_stage2_rg_stage2_BITS_235_TO_233_1_IF_sta_ETC__q3 ;
  assign IF_csr_regfile_read_csr_IF_NOT_stage1_rg_full__ETC___d1752 =
	     csr_regfile$read_csr[31:0] | rs1_val__h22321 ;
  assign IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d560 =
	     (csr_regfile$read_misa[2] && instr__h4783[1:0] == 2'b0 &&
	      instr__h4783[15:13] == 3'b111) ?
	       instr__h13157 :
	       ((csr_regfile$read_misa[2] && instr__h4783[1:0] == 2'b0 &&
		 instr__h4783[15:13] == 3'b101) ?
		  instr__h13630 :
		  32'h0) ;
  assign IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d561 =
	     (csr_regfile$read_misa[2] && instr__h4783[1:0] == 2'b0 &&
	      instr__h4783[15:13] == 3'b011) ?
	       instr__h7793 :
	       IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d560 ;
  assign IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d562 =
	     (csr_regfile$read_misa[2] && instr__h4783[1:0] == 2'b10 &&
	      instr__h4783[15:13] == 3'b111) ?
	       instr__h12770 :
	       IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d561 ;
  assign IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d563 =
	     (csr_regfile$read_misa[2] && instr__h4783[1:0] == 2'b10 &&
	      instr__h4783[11:7] != 5'd0 &&
	      instr__h4783[15:13] == 3'b011 &&
	      csr_regfile$read_misa[5]) ?
	       instr__h12625 :
	       IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d562 ;
  assign IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d564 =
	     (csr_regfile$read_misa[2] && instr__h4783[1:0] == 2'b10 &&
	      instr__h4783[15:12] == 4'b1001 &&
	      instr__h4783[11:7] == 5'd0 &&
	      instr__h4783[6:2] == 5'd0) ?
	       instr__h12522 :
	       IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d563 ;
  assign IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d566 =
	     (csr_regfile$read_misa[2] && instr__h4783[1:0] == 2'b01 &&
	      instr__h4783[15:10] == 6'b100011 &&
	      instr__h4783[6:5] == 2'b01) ?
	       instr__h12048 :
	       ((csr_regfile$read_misa[2] && instr__h4783[1:0] == 2'b01 &&
		 instr__h4783[15:10] == 6'b100011 &&
		 instr__h4783[6:5] == 2'b0) ?
		  instr__h12184 :
		  IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d564) ;
  assign IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d568 =
	     (csr_regfile$read_misa[2] && instr__h4783[1:0] == 2'b01 &&
	      instr__h4783[15:10] == 6'b100011 &&
	      instr__h4783[6:5] == 2'b11) ?
	       instr__h11776 :
	       ((csr_regfile$read_misa[2] && instr__h4783[1:0] == 2'b01 &&
		 instr__h4783[15:10] == 6'b100011 &&
		 instr__h4783[6:5] == 2'b10) ?
		  instr__h11912 :
		  IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d566) ;
  assign IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d569 =
	     (csr_regfile_read_misa__4_BIT_2_16_AND_IF_near__ETC___d412 &&
	      instr__h4783[6:2] != 5'd0) ?
	       instr__h11681 :
	       IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d568 ;
  assign IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d570 =
	     (csr_regfile_read_misa__4_BIT_2_16_AND_IF_near__ETC___d406 &&
	      instr__h4783[6:2] != 5'd0) ?
	       instr__h11562 :
	       IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d569 ;
  assign IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d572 =
	     (csr_regfile$read_misa[2] && instr__h4783[1:0] == 2'b01 &&
	      instr__h4783[15:13] == 3'b100 &&
	      instr__h4783[11:10] == 2'b01 &&
	      imm6__h9708 != 6'd0 &&
	      !instr__h4783[12]) ?
	       instr__h11267 :
	       ((csr_regfile$read_misa[2] && instr__h4783[1:0] == 2'b01 &&
		 instr__h4783[15:13] == 3'b100 &&
		 instr__h4783[11:10] == 2'b10) ?
		  instr__h11384 :
		  IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d570) ;
  assign IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d573 =
	     (csr_regfile$read_misa[2] && instr__h4783[1:0] == 2'b01 &&
	      instr__h4783[15:13] == 3'b100 &&
	      instr__h4783[11:10] == 2'b0 &&
	      imm6__h9708 != 6'd0 &&
	      !instr__h4783[12]) ?
	       instr__h11074 :
	       IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d572 ;
  assign IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d574 =
	     (csr_regfile$read_misa[2] && instr__h4783[1:0] == 2'b10 &&
	      instr__h4783[15:13] == 3'b0 &&
	      instr__h4783[11:7] != 5'd0 &&
	      imm6__h9708 != 6'd0 &&
	      !instr__h4783[12]) ?
	       instr__h10881 :
	       IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d573 ;
  assign IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d576 =
	     (csr_regfile$read_misa[2] && instr__h4783[1:0] == 2'b01 &&
	      instr__h4783[15:13] == 3'b011 &&
	      instr__h4783[11:7] == 5'd2 &&
	      nzimm10__h10332 != 10'd0) ?
	       instr__h10536 :
	       ((csr_regfile$read_misa[2] && instr__h4783[1:0] == 2'b0 &&
		 instr__h4783[15:13] == 3'b0 &&
		 nzimm10__h10547 != 10'd0) ?
		  instr__h10708 :
		  IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d574) ;
  assign IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d577 =
	     (csr_regfile$read_misa[2] && instr__h4783[1:0] == 2'b01 &&
	      instr__h4783[15:13] == 3'b0 &&
	      instr__h4783[11:7] != 5'd0 &&
	      imm6__h9708 != 6'd0 ||
	      csr_regfile$read_misa[2] && instr__h4783[1:0] == 2'b01 &&
	      instr__h4783[15:13] == 3'b0 &&
	      instr__h4783[11:7] == 5'd0 &&
	      imm6__h9708 == 6'd0) ?
	       instr__h10099 :
	       IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d576 ;
  assign IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d578 =
	     (csr_regfile$read_misa[2] && instr__h4783[1:0] == 2'b01 &&
	      instr__h4783[15:13] == 3'b011 &&
	      instr__h4783[11:7] != 5'd0 &&
	      instr__h4783[11:7] != 5'd2 &&
	      imm6__h9708 != 6'd0) ?
	       instr__h9970 :
	       IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d577 ;
  assign IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d580 =
	     (csr_regfile$read_misa[2] && instr__h4783[1:0] == 2'b01 &&
	      instr__h4783[15:13] == 3'b111) ?
	       instr__h9448 :
	       ((csr_regfile$read_misa[2] && instr__h4783[1:0] == 2'b01 &&
		 instr__h4783[15:13] == 3'b010 &&
		 instr__h4783[11:7] != 5'd0) ?
		  instr__h9786 :
		  IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d578) ;
  assign IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d581 =
	     (csr_regfile$read_misa[2] && instr__h4783[1:0] == 2'b01 &&
	      instr__h4783[15:13] == 3'b110) ?
	       instr__h9131 :
	       IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d580 ;
  assign IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d582 =
	     (csr_regfile_read_misa__4_BIT_2_16_AND_IF_near__ETC___d412 &&
	      instr__h4783[6:2] == 5'd0) ?
	       instr__h9066 :
	       IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d581 ;
  assign IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d583 =
	     (csr_regfile_read_misa__4_BIT_2_16_AND_IF_near__ETC___d406 &&
	      instr__h4783[6:2] == 5'd0) ?
	       instr__h8950 :
	       IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d582 ;
  assign IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d584 =
	     (csr_regfile$read_misa[2] && instr__h4783[1:0] == 2'b01 &&
	      instr__h4783[15:13] == 3'b001) ?
	       instr__h8560 :
	       IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d583 ;
  assign IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d585 =
	     (csr_regfile$read_misa[2] && instr__h4783[1:0] == 2'b01 &&
	      instr__h4783[15:13] == 3'b101) ?
	       instr__h8217 :
	       IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d584 ;
  assign IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d586 =
	     (csr_regfile$read_misa[2] && instr__h4783[1:0] == 2'b0 &&
	      instr__h4783[15:13] == 3'b110) ?
	       instr__h7988 :
	       IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d585 ;
  assign IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d587 =
	     (csr_regfile$read_misa[2] && instr__h4783[1:0] == 2'b0 &&
	      instr__h4783[15:13] == 3'b010) ?
	       instr__h7793 :
	       IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d586 ;
  assign IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d588 =
	     (csr_regfile$read_misa[2] && instr__h4783[1:0] == 2'b10 &&
	      instr__h4783[15:13] == 3'b110) ?
	       instr__h7601 :
	       IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d587 ;
  assign IF_near_mem_dmem_valid__22_AND_NOT_near_mem_dm_ETC___d250 =
	     (near_mem$dmem_valid && !near_mem$dmem_exc) ? 2'd2 : 2'd1 ;
  assign IF_near_mem_dmem_valid__22_THEN_IF_near_mem_dm_ETC___d125 =
	     near_mem$dmem_valid ? (near_mem$dmem_exc ? 2'd3 : 2'd2) : 2'd1 ;
  assign IF_rg_cur_priv_7_EQ_0b11_095_OR_rg_cur_priv_7__ETC___d1124 =
	     ((rg_cur_priv == 2'b11 ||
	       rg_cur_priv == 2'b01 && !csr_regfile$read_mstatus[22]) &&
	      _theResult____h4785[31:20] == 12'b000100000010) ?
	       4'd8 :
	       (rg_cur_priv_7_EQ_0b11_095_OR_rg_cur_priv_7_EQ__ETC___d1122 ?
		  4'd10 :
		  4'd11) ;
  assign IF_stage2_fbox_valid__28_THEN_2_ELSE_1___d129 =
	     stage2_fbox$valid ? 2'd2 : 2'd1 ;
  assign IF_stage2_mbox_valid__26_THEN_2_ELSE_1___d127 =
	     stage2_mbox$valid ? 2'd2 : 2'd1 ;
  assign IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 =
	     stage2_rg_full ?
	       CASE_stage2_rg_stage2_BITS_235_TO_233_0_2_1_IF_ETC__q1 :
	       2'd0 ;
  assign IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d1629 =
	     IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 ==
	     2'd2 &&
	     NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45 &&
	     stage2_rg_stage2[235:233] != 3'd0 &&
	     CASE_stage2_rg_stage2_BITS_235_TO_233_1_stage2_ETC__q22 ;
  assign IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d1631 =
	     IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 ==
	     2'd2 &&
	     NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45 &&
	     (stage2_rg_stage2[235:233] == 3'd0 ||
	      CASE_stage2_rg_stage2_BITS_235_TO_233_1_NOT_st_ETC__q23) ;
  assign IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d258 =
	     stage2_rg_full ?
	       CASE_stage2_rg_stage2_BITS_235_TO_233_0_2_1_IF_ETC__q2 :
	       2'd0 ;
  assign IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d592 =
	     x_out_bypass_rd__h6886 == _theResult____h4785[19:15] ;
  assign IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d594 =
	     x_out_bypass_rd__h6886 == _theResult____h4785[24:20] ;
  assign IF_stage2_rg_stage2_9_BIT_3_89_OR_stage2_rg_st_ETC___d251 =
	     (stage2_rg_stage2[3] || stage2_rg_stage2[232:228] == 5'd0) ?
	       2'd0 :
	       IF_near_mem_dmem_valid__22_AND_NOT_near_mem_dm_ETC___d250 ;
  assign IF_stage2_rg_stage2_9_BIT_3_89_THEN_IF_near_me_ETC___d277 =
	     stage2_rg_stage2[3] ?
	       IF_near_mem_dmem_valid__22_AND_NOT_near_mem_dm_ETC___d250 :
	       2'd0 ;
  assign NOT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_ETC___d692 =
	     (_theResult____h4785[14:12] != 3'b0 ||
	      _theResult____h4785[6:0] == 7'b0110011 &&
	      _theResult____h4785[30]) &&
	     (_theResult____h4785[14:12] != 3'b0 ||
	      _theResult____h4785[6:0] != 7'b0110011 ||
	      !_theResult____h4785[30]) &&
	     _theResult____h4785[14:12] != 3'b010 &&
	     _theResult____h4785[14:12] != 3'b011 &&
	     _theResult____h4785[14:12] != 3'b100 &&
	     _theResult____h4785[14:12] != 3'b110 &&
	     _theResult____h4785[14:12] != 3'b111 ;
  assign NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45 =
	     cur_verbosity__h3374 > 4'd1 ;
  assign NOT_csr_regfile_read_mstatus__8_BITS_14_TO_13__ETC___d1058 =
	     csr_regfile$read_mstatus[14:13] != 2'h0 &&
	     CASE_theResult__785_BITS_6_TO_0_0b1000011_theR_ETC__q11 &&
	     ((_theResult____h4785[14:12] == 3'b111) ?
		csr_regfile$read_frm != 3'b101 &&
		csr_regfile$read_frm != 3'b110 &&
		csr_regfile$read_frm != 3'b111 :
		_theResult____h4785[14:12] != 3'b101 &&
		_theResult____h4785[14:12] != 3'b110) ;
  assign NOT_near_mem_imem_exc__13_34_AND_IF_IF_NOT_nea_ETC___d1218 =
	     !near_mem$imem_exc &&
	     (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1072 ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1074) &&
	     IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 !=
	     4'd0 &&
	     IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 !=
	     4'd1 &&
	     IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 !=
	     4'd2 &&
	     IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 !=
	     4'd3 &&
	     IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 !=
	     4'd4 &&
	     IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 !=
	     4'd5 &&
	     IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 !=
	     4'd6 &&
	     IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 !=
	     4'd7 &&
	     IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 !=
	     4'd8 &&
	     IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 !=
	     4'd9 &&
	     IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 !=
	     4'd10 ;
  assign NOT_near_mem_imem_exc__13_34_AND_IF_IF_NOT_nea_ETC___d1264 =
	     !near_mem$imem_exc &&
	     (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1072 ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1074) &&
	     IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1234 !=
	     3'd0 &&
	     IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1234 !=
	     3'd1 &&
	     IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1234 !=
	     3'd2 &&
	     IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1234 !=
	     3'd3 &&
	     IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1234 !=
	     3'd4 ;
  assign NOT_near_mem_imem_pc_BITS_31_TO_2_EQ_imem_rg_p_ETC___d1553 =
	     (!near_mem_imem_pc_BITS_31_TO_2_EQ_imem_rg_pc_BI_ETC___d8 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] != 2'b11) &&
	     gpr_regfile$RDY_server_reset_response_get &&
	     fpr_regfile_RDY_server_reset_response_get__539_ETC___d1551 ;
  assign NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_01_ETC___d309 =
	     !near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9___d301 &&
	     (!near_mem_imem_pc_BITS_31_TO_2_EQ_imem_rg_pc_BI_ETC___d8 ||
	      imem_rg_pc[1:0] != 2'b0 ||
	      near_mem$imem_instr[1:0] != 2'b11) ;
  assign NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_01_ETC___d314 =
	     NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_01_ETC___d309 &&
	     (!near_mem_imem_pc_BITS_31_TO_2_EQ_imem_rg_pc_BI_ETC___d8 ||
	      imem_rg_pc[1:0] == 2'b0 ||
	      near_mem$imem_instr[17:16] == 2'b11) &&
	     (!near_mem_imem_pc_BITS_31_TO_2_EQ_imem_rg_pc_BI_ETC___d8 ||
	      imem_rg_pc[1:0] != 2'b0 ||
	      near_mem$imem_instr[1:0] == 2'b11) ;
  assign NOT_near_mem_imem_valid_00_OR_NOT_near_mem_ime_ETC___d1570 =
	     !near_mem$imem_valid ||
	     !near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9___d301 ||
	     IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d258 ==
	     2'd1 &&
	     (IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d592 ||
	      IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d594) ;
  assign NOT_near_mem_imem_valid_00_OR_NOT_near_mem_ime_ETC___d1581 =
	     NOT_near_mem_imem_valid_00_OR_NOT_near_mem_ime_ETC___d597 ||
	     !near_mem$imem_exc &&
	     (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1072 ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1074) ;
  assign NOT_near_mem_imem_valid_00_OR_NOT_near_mem_ime_ETC___d1589 =
	     NOT_near_mem_imem_valid_00_OR_NOT_near_mem_ime_ETC___d597 ||
	     near_mem$imem_exc ||
	     IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d918 &&
	     IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d929 ;
  assign NOT_near_mem_imem_valid_00_OR_NOT_near_mem_ime_ETC___d597 =
	     !near_mem$imem_valid ||
	     NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_01_ETC___d314 ||
	     IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d258 ==
	     2'd1 &&
	     (IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d592 ||
	      IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d594) ;
  assign NOT_rg_halt_562_586_AND_NOT_csr_regfile_interr_ETC___d1592 =
	     !rg_halt && !csr_regfile$interrupt_pending[4] ||
	     (!stage1_rg_full ||
	      NOT_near_mem_imem_valid_00_OR_NOT_near_mem_ime_ETC___d1589) &&
	     (!stage1_rg_full ||
	      NOT_near_mem_imem_valid_00_OR_NOT_near_mem_ime_ETC___d1581) ;
  assign NOT_rg_halt_562_586_AND_NOT_csr_regfile_interr_ETC___d1636 =
	     !rg_halt && !csr_regfile$interrupt_pending[4] &&
	     (IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 ==
	      2'd2 ||
	      IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 ==
	      2'd0) &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d1077 ;
  assign NOT_rg_halt_562_586_AND_NOT_csr_regfile_interr_ETC___d1693 =
	     !rg_halt && !csr_regfile$interrupt_pending[4] &&
	     ((IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 ==
	       2'd2 ||
	       IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 ==
	       2'd0) &&
	      near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d1077 ||
	      !stage1_rg_full) ;
  assign SEXT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLU_ETC___d1302 =
	     { {20{theResult__785_BITS_31_TO_20__q19[11]}},
	       theResult__785_BITS_31_TO_20__q19 } ;
  assign SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d392 =
	     { {9{offset__h8164[11]}}, offset__h8164 } ;
  assign SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d421 =
	     { {4{offset__h9075[8]}}, offset__h9075 } ;
  assign _theResult_____1_fst__h15308 =
	     (_theResult____h4785[14:12] == 3'b0 &&
	      _theResult____h4785[6:0] == 7'b0110011 &&
	      _theResult____h4785[30]) ?
	       rd_val___1__h15304 :
	       _theResult_____1_fst__h15315 ;
  assign _theResult_____1_fst__h15343 =
	     rs1_val_bypassed__h4793 & _theResult___snd__h17514 ;
  assign _theResult____h14189 =
	     (_theResult____h4785[14:12] == 3'b001) ?
	       rd_val__h17408 :
	       (_theResult____h4785[30] ? rd_val__h17482 : rd_val__h17460) ;
  assign _theResult____h27275 =
	     (delta_CPI_instrs__h27274 == 64'd0) ?
	       delta_CPI_instrs___1__h27310 :
	       delta_CPI_instrs__h27274 ;
  assign _theResult____h4785 = x_out_data_to_stage2_instr__h13909 ;
  assign _theResult___fst__h7356 =
	     (near_mem_imem_pc_BITS_31_TO_2_EQ_imem_rg_pc_BI_ETC___d8 &&
	      imem_rg_pc[1:0] == 2'b0 &&
	      near_mem$imem_instr[1:0] != 2'b11) ?
	       instr_out___1__h7358 :
	       _theResult___fst__h7384 ;
  assign _theResult___fst__h7384 =
	     (near_mem_imem_pc_BITS_31_TO_2_EQ_imem_rg_pc_BI_ETC___d8 &&
	      imem_rg_pc[1:0] != 2'b0 &&
	      near_mem$imem_instr[17:16] != 2'b11) ?
	       instr_out___1__h7386 :
	       near_mem$imem_instr ;
  assign _theResult___fst_rd_val__h6865 =
	     (stage2_rg_stage2[3] || stage2_rg_stage2[232:228] == 5'd0) ?
	       stage2_rg_stage2[163:132] :
	       near_mem$dmem_word64[31:0] ;
  assign _theResult___fst_rd_val__h6876 =
	     stage2_rg_stage2[3] ?
	       stage2_rg_stage2[163:132] :
	       stage2_fbox$word_fst[31:0] ;
  assign _theResult___snd__h17514 =
	     (_theResult____h4785[6:0] == 7'b0010011) ?
	       SEXT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLU_ETC___d1302 :
	       rs2_val__h14014 ;
  assign _theResult___snd_rd_val__h7020 =
	     stage2_rg_stage2[3] ?
	       data_to_stage3_rd_val__h6303 :
	       stage2_rg_stage2[195:132] ;
  assign _theResult___snd_rd_val__h7026 =
	     stage2_rg_stage2[3] ?
	       stage2_fbox$word_fst :
	       stage2_rg_stage2[195:132] ;
  assign alu_outputs___1_addr__h14039 =
	     IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d662 ?
	       branch_target__h14018 :
	       IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_ETC___d1291 ;
  assign alu_outputs___1_addr__h14064 =
	     { imem_rg_pc_PLUS_SEXT_theResult__785_BIT_31_CON_ETC__q5[31:1],
	       1'd0 } ;
  assign alu_outputs___1_addr__h14093 =
	     { alu_outputs___1_addr__h14304[31:1], 1'd0 } ;
  assign alu_outputs___1_addr__h14304 =
	     rs1_val_bypassed__h4793 +
	     SEXT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLU_ETC___d1302 ;
  assign alu_outputs___1_addr__h14328 =
	     rs1_val_bypassed__h4793 +
	     { {20{theResult__785_BITS_31_TO_25_CONCAT_theResult__ETC__q7[11]}},
	       theResult__785_BITS_31_TO_25_CONCAT_theResult__ETC__q7 } ;
  assign alu_outputs___1_exc_code__h14611 =
	     (_theResult____h4785[14:12] == 3'b0) ?
	       (IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_ETC___d1101 ?
		  4'd2 :
		  ((_theResult____h4785[11:7] == 5'd0 &&
		    _theResult____h4785[19:15] == 5'd0) ?
		     CASE_theResult__785_BITS_31_TO_20_0b0_CASE_rg__ETC__q15 :
		     4'd2)) :
	       4'd2 ;
  assign alu_outputs___1_val1__h14065 =
	     { 32'd0,
	       IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_ETC___d1291 } ;
  assign alu_outputs___1_val1__h14200 = { 32'd0, _theResult____h14189 } ;
  assign alu_outputs___1_val1__h14241 = { 32'd0, rd_val__h14231 } ;
  assign alu_outputs___1_val1__h14260 = { 32'd0, rd_val__h14251 } ;
  assign alu_outputs___1_val1__h14279 = { 32'd0, rd_val__h14270 } ;
  assign alu_outputs___1_val1__h14615 = { 32'd0, rs1_val__h14581 } ;
  assign alu_outputs___1_val1__h14639 =
	     { 57'd0, _theResult____h4785[31:25] } ;
  assign alu_outputs___1_val1__h14744 =
	     (_theResult____h4785[6:0] == 7'b1010011 &&
	      (_theResult____h4785[31:25] == 7'h69 &&
	       (_theResult____h4785[24:20] == 5'd0 ||
		_theResult____h4785[24:20] == 5'd1) ||
	       _theResult____h4785[31:25] == 7'h79 ||
	       _theResult____h4785[31:25] == 7'h68 &&
	       (_theResult____h4785[24:20] == 5'd0 ||
		_theResult____h4785[24:20] == 5'd1) ||
	       _theResult____h4785[31:25] == 7'h78)) ?
	       alu_outputs___1_val1__h15099 :
	       frs1_val_bypassed__h4804 ;
  assign alu_outputs___1_val1__h15099 = { 32'd0, rs1_val_bypassed__h4793 } ;
  assign alu_outputs___1_val2__h14041 = { 32'd0, branch_target__h14018 } ;
  assign alu_outputs___1_val2__h14330 =
	     (_theResult____h4785[6:0] == 7'b0100111) ?
	       frs2_val_bypassed__h4809 :
	       alu_outputs___1_val2__h15100 ;
  assign alu_outputs___1_val2__h15100 = { 32'd0, rs2_val__h14014 } ;
  assign branch_target__h14018 =
	     imem_rg_pc +
	     { {19{theResult__785_BIT_31_CONCAT_theResult__785_BI_ETC__q6[12]}},
	       theResult__785_BIT_31_CONCAT_theResult__785_BI_ETC__q6 } ;
  assign cpi__h27277 = x__h27276 / 64'd10 ;
  assign cpifrac__h27278 = x__h27276 % 64'd10 ;
  assign csr_regfile_interrupt_pending_rg_cur_priv_7_56_ETC___d1825 =
	     csr_regfile$interrupt_pending[4] && rg_state == 4'd2 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d612 &&
	     IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1819 &&
	     IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 ==
	     2'd0 &&
	     !stage3_rg_full ;
  assign csr_regfile_read_csr_mcycle__6_MINUS_rg_start__ETC___d1809 =
	     delta_CPI_cycles__h27273 * 64'd10 ;
  assign csr_regfile_read_misa__4_BIT_2_16_AND_IF_near__ETC___d406 =
	     csr_regfile$read_misa[2] && instr__h4783[1:0] == 2'b10 &&
	     instr__h4783[15:12] == 4'b1000 &&
	     instr__h4783[11:7] != 5'd0 ;
  assign csr_regfile_read_misa__4_BIT_2_16_AND_IF_near__ETC___d412 =
	     csr_regfile$read_misa[2] && instr__h4783[1:0] == 2'b10 &&
	     instr__h4783[15:12] == 4'b1001 &&
	     instr__h4783[11:7] != 5'd0 ;
  assign csr_regfile_read_mstatus__8_BITS_14_TO_13_9_EQ_ETC___d904 =
	     csr_regfile$read_mstatus[14:13] == 2'h0 ||
	     CASE_theResult__785_BITS_6_TO_0_0b1000011_NOT__ETC__q8 ||
	     ((_theResult____h4785[14:12] == 3'b111) ?
		csr_regfile$read_frm == 3'b101 ||
		csr_regfile$read_frm == 3'b110 ||
		csr_regfile$read_frm == 3'b111 :
		_theResult____h4785[14:12] == 3'b101 ||
		_theResult____h4785[14:12] == 3'b110) ;
  assign cur_verbosity__h3374 =
	     (csr_regfile$read_csr_minstret < cfg_logdelay) ?
	       4'd0 :
	       cfg_verbosity ;
  assign data_to_stage2_addr__h13901 = x_out_data_to_stage2_addr__h13912 ;
  assign data_to_stage3_rd_val__h6303 =
	     stage2_rg_stage2[3] ?
	       ((stage2_rg_stage2[250:248] == 3'b010) ?
		  { 32'hFFFFFFFF, near_mem$dmem_word64[31:0] } :
		  near_mem$dmem_word64) :
	       near_mem$dmem_word64 ;
  assign delta_CPI_cycles__h27273 =
	     csr_regfile$read_csr_mcycle - rg_start_CPI_cycles ;
  assign delta_CPI_instrs___1__h27310 = delta_CPI_instrs__h27274 + 64'd1 ;
  assign delta_CPI_instrs__h27274 =
	     csr_regfile$read_csr_minstret - rg_start_CPI_instrs ;
  assign fall_through_pc__h13862 =
	     imem_rg_pc +
	     (near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_01_OR__ETC___d604 ?
		32'd4 :
		32'd2) ;
  assign fpr_regfile_RDY_server_reset_request_put__520__ETC___d1532 =
	     fpr_regfile$RDY_server_reset_request_put &&
	     near_mem$RDY_server_reset_request_put &&
	     csr_regfile$RDY_server_reset_request_put &&
	     f_reset_reqs$EMPTY_N &&
	     stage1_f_reset_reqs$FULL_N &&
	     stage2_f_reset_reqs$FULL_N &&
	     stage3_f_reset_reqs$FULL_N ;
  assign fpr_regfile_RDY_server_reset_response_get__539_ETC___d1551 =
	     fpr_regfile$RDY_server_reset_response_get &&
	     near_mem$RDY_server_reset_response_get &&
	     csr_regfile$RDY_server_reset_response_get &&
	     stage1_f_reset_rsps$EMPTY_N &&
	     stage2_f_reset_rsps$EMPTY_N &&
	     stage3_f_reset_rsps$EMPTY_N &&
	     f_reset_rsps$FULL_N ;
  assign frs1_val_bypassed__h4804 =
	     (IF_NOT_stage2_rg_full_8_32_OR_stage2_rg_stage2_ETC___d282 ==
	      2'd2 &&
	      x_out_fbypass_rd__h7034 == _theResult____h4785[19:15]) ?
	       x_out_fbypass_rd_val__h7035 :
	       rd_val__h17698 ;
  assign frs2_val_bypassed__h4809 =
	     (IF_NOT_stage2_rg_full_8_32_OR_stage2_rg_stage2_ETC___d282 ==
	      2'd2 &&
	      x_out_fbypass_rd__h7034 == _theResult____h4785[24:20]) ?
	       x_out_fbypass_rd_val__h7035 :
	       rd_val__h17751 ;
  assign imem_rg_pc_PLUS_SEXT_theResult__785_BIT_31_CON_ETC__q5 =
	     imem_rg_pc +
	     { {11{theResult__785_BIT_31_CONCAT_theResult__785_BI_ETC__q4[20]}},
	       theResult__785_BIT_31_CONCAT_theResult__785_BI_ETC__q4 } ;
  assign imm12__h10334 = { {2{nzimm10__h10332[9]}}, nzimm10__h10332 } ;
  assign imm12__h10549 = { 2'd0, nzimm10__h10547 } ;
  assign imm12__h10745 = { 7'b0, instr__h4783[6:2] } ;
  assign imm12__h11090 = { 7'b0100000, instr__h4783[6:2] } ;
  assign imm12__h7457 = { 4'd0, offset__h7227 } ;
  assign imm12__h7794 = { 5'd0, offset__h7736 } ;
  assign imm12__h9710 = { {6{imm6__h9708[5]}}, imm6__h9708 } ;
  assign imm20__h9838 = { {14{imm6__h9708[5]}}, imm6__h9708 } ;
  assign imm6__h9708 = { instr__h4783[12], instr__h4783[6:2] } ;
  assign instr___1__h7181 =
	     (csr_regfile$read_misa[2] && instr__h4783[1:0] == 2'b10 &&
	      instr__h4783[11:7] != 5'd0 &&
	      instr__h4783[15:13] == 3'b010) ?
	       instr__h7456 :
	       IF_csr_regfile_read_misa__4_BIT_2_16_AND_IF_ne_ETC___d588 ;
  assign instr__h10099 =
	     { imm12__h9710,
	       instr__h4783[11:7],
	       3'b0,
	       instr__h4783[11:7],
	       7'b0010011 } ;
  assign instr__h10536 =
	     { imm12__h10334,
	       instr__h4783[11:7],
	       3'b0,
	       instr__h4783[11:7],
	       7'b0010011 } ;
  assign instr__h10708 = { imm12__h10549, 8'd16, rd__h7796, 7'b0010011 } ;
  assign instr__h10881 =
	     { imm12__h10745,
	       instr__h4783[11:7],
	       3'b001,
	       instr__h4783[11:7],
	       7'b0010011 } ;
  assign instr__h11074 =
	     { imm12__h10745, rs1__h7795, 3'b101, rs1__h7795, 7'b0010011 } ;
  assign instr__h11267 =
	     { imm12__h11090, rs1__h7795, 3'b101, rs1__h7795, 7'b0010011 } ;
  assign instr__h11384 =
	     { imm12__h9710, rs1__h7795, 3'b111, rs1__h7795, 7'b0010011 } ;
  assign instr__h11562 =
	     { 7'b0,
	       instr__h4783[6:2],
	       8'd0,
	       instr__h4783[11:7],
	       7'b0110011 } ;
  assign instr__h11681 =
	     { 7'b0,
	       instr__h4783[6:2],
	       instr__h4783[11:7],
	       3'b0,
	       instr__h4783[11:7],
	       7'b0110011 } ;
  assign instr__h11776 =
	     { 7'b0, rd__h7796, rs1__h7795, 3'b111, rs1__h7795, 7'b0110011 } ;
  assign instr__h11912 =
	     { 7'b0, rd__h7796, rs1__h7795, 3'b110, rs1__h7795, 7'b0110011 } ;
  assign instr__h12048 =
	     { 7'b0, rd__h7796, rs1__h7795, 3'b100, rs1__h7795, 7'b0110011 } ;
  assign instr__h12184 =
	     { 7'b0100000,
	       rd__h7796,
	       rs1__h7795,
	       3'b0,
	       rs1__h7795,
	       7'b0110011 } ;
  assign instr__h12522 =
	     { 12'b000000000001,
	       instr__h4783[11:7],
	       3'b0,
	       instr__h4783[11:7],
	       7'b1110011 } ;
  assign instr__h12625 =
	     { imm12__h7457, 8'd18, instr__h4783[11:7], 7'b0000111 } ;
  assign instr__h12770 =
	     { 4'd0,
	       instr__h4783[8:7],
	       instr__h4783[12],
	       instr__h4783[6:2],
	       8'd18,
	       offset_BITS_4_TO_0___h7725,
	       7'b0100111 } ;
  assign instr__h13157 =
	     { 5'd0,
	       instr__h4783[5],
	       instr__h4783[12],
	       rd__h7796,
	       rs1__h7795,
	       3'b010,
	       offset_BITS_4_TO_0___h8156,
	       7'b0100111 } ;
  assign instr__h13630 =
	     { 4'd0,
	       instr__h4783[6:5],
	       instr__h4783[12],
	       rd__h7796,
	       rs1__h7795,
	       3'b011,
	       offset_BITS_4_TO_0___h13755,
	       7'b0100111 } ;
  assign instr__h4783 =
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9___d301 ?
	       instr_out___1__h7326 :
	       _theResult___fst__h7356 ;
  assign instr__h7456 =
	     { imm12__h7457, 8'd18, instr__h4783[11:7], 7'b0000011 } ;
  assign instr__h7601 =
	     { 4'd0,
	       instr__h4783[8:7],
	       instr__h4783[12],
	       instr__h4783[6:2],
	       8'd18,
	       offset_BITS_4_TO_0___h7725,
	       7'b0100011 } ;
  assign instr__h7793 =
	     { imm12__h7794, rs1__h7795, 3'b010, rd__h7796, 7'b0000011 } ;
  assign instr__h7988 =
	     { 5'd0,
	       instr__h4783[5],
	       instr__h4783[12],
	       rd__h7796,
	       rs1__h7795,
	       3'b010,
	       offset_BITS_4_TO_0___h8156,
	       7'b0100011 } ;
  assign instr__h8217 =
	     { SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d392[20],
	       SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d392[10:1],
	       SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d392[11],
	       SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d392[19:12],
	       12'd111 } ;
  assign instr__h8560 =
	     { SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d392[20],
	       SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d392[10:1],
	       SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d392[11],
	       SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d392[19:12],
	       12'd239 } ;
  assign instr__h8950 = { 12'd0, instr__h4783[11:7], 15'd103 } ;
  assign instr__h9066 = { 12'd0, instr__h4783[11:7], 15'd231 } ;
  assign instr__h9131 =
	     { SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d421[12],
	       SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d421[10:5],
	       5'd0,
	       rs1__h7795,
	       3'b0,
	       SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d421[4:1],
	       SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d421[11],
	       7'b1100011 } ;
  assign instr__h9448 =
	     { SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d421[12],
	       SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d421[10:5],
	       5'd0,
	       rs1__h7795,
	       3'b001,
	       SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d421[4:1],
	       SEXT_IF_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2__ETC___d421[11],
	       7'b1100011 } ;
  assign instr__h9786 =
	     { imm12__h9710, 8'd0, instr__h4783[11:7], 7'b0010011 } ;
  assign instr__h9970 = { imm20__h9838, instr__h4783[11:7], 7'b0110111 } ;
  assign instr_out___1__h7326 =
	     { near_mem$imem_instr[15:0], imem_rg_instr_15_0 } ;
  assign instr_out___1__h7358 = { 16'b0, near_mem$imem_instr[15:0] } ;
  assign instr_out___1__h7386 = { 16'b0, near_mem$imem_instr[31:16] } ;
  assign near_mem_imem_exc__13_OR_IF_IF_NOT_near_mem_im_ETC___d1433 =
	     (near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d918 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d929) &&
	     IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 ==
	     4'd0 ;
  assign near_mem_imem_exc__13_OR_IF_IF_NOT_near_mem_im_ETC___d1436 =
	     (near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d918 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d929) &&
	     IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 ==
	     4'd1 ;
  assign near_mem_imem_exc__13_OR_IF_IF_NOT_near_mem_im_ETC___d1439 =
	     (near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d918 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d929) &&
	     IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 ==
	     4'd2 ;
  assign near_mem_imem_exc__13_OR_IF_IF_NOT_near_mem_im_ETC___d1442 =
	     (near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d918 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d929) &&
	     IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 ==
	     4'd3 ;
  assign near_mem_imem_exc__13_OR_IF_IF_NOT_near_mem_im_ETC___d1445 =
	     (near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d918 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d929) &&
	     IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 ==
	     4'd4 ;
  assign near_mem_imem_exc__13_OR_IF_IF_NOT_near_mem_im_ETC___d1448 =
	     (near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d918 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d929) &&
	     IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 ==
	     4'd5 ;
  assign near_mem_imem_exc__13_OR_IF_IF_NOT_near_mem_im_ETC___d1451 =
	     (near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d918 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d929) &&
	     IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 ==
	     4'd6 ;
  assign near_mem_imem_exc__13_OR_IF_IF_NOT_near_mem_im_ETC___d1454 =
	     (near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d918 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d929) &&
	     IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 ==
	     4'd7 ;
  assign near_mem_imem_exc__13_OR_IF_IF_NOT_near_mem_im_ETC___d1457 =
	     (near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d918 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d929) &&
	     IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 ==
	     4'd8 ;
  assign near_mem_imem_exc__13_OR_IF_IF_NOT_near_mem_im_ETC___d1460 =
	     (near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d918 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d929) &&
	     IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 ==
	     4'd9 ;
  assign near_mem_imem_exc__13_OR_IF_IF_NOT_near_mem_im_ETC___d1463 =
	     (near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d918 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d929) &&
	     IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 ==
	     4'd10 ;
  assign near_mem_imem_exc__13_OR_IF_IF_NOT_near_mem_im_ETC___d1466 =
	     (near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d918 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d929) &&
	     IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 !=
	     4'd0 &&
	     IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 !=
	     4'd1 &&
	     IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 !=
	     4'd2 &&
	     IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 !=
	     4'd3 &&
	     IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 !=
	     4'd4 &&
	     IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 !=
	     4'd5 &&
	     IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 !=
	     4'd6 &&
	     IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 !=
	     4'd7 &&
	     IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 !=
	     4'd8 &&
	     IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 !=
	     4'd9 &&
	     IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 !=
	     4'd10 ;
  assign near_mem_imem_pc_BITS_31_TO_2_EQ_imem_rg_pc_BI_ETC___d8 =
	     near_mem$imem_pc[31:2] == imem_rg_pc[31:2] ;
  assign near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_01_OR__ETC___d604 =
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9___d301 ||
	     near_mem_imem_pc_BITS_31_TO_2_EQ_imem_rg_pc_BI_ETC___d8 &&
	     imem_rg_pc[1:0] == 2'b0 &&
	     near_mem$imem_instr[1:0] == 2'b11 ;
  assign near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_01_OR__ETC___d606 =
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_01_OR__ETC___d604 ||
	     near_mem_imem_pc_BITS_31_TO_2_EQ_imem_rg_pc_BI_ETC___d8 &&
	     imem_rg_pc[1:0] != 2'b0 &&
	     near_mem$imem_instr[17:16] != 2'b11 ||
	     near_mem_imem_pc_BITS_31_TO_2_EQ_imem_rg_pc_BI_ETC___d8 &&
	     imem_rg_pc[1:0] == 2'b0 &&
	     near_mem$imem_instr[1:0] != 2'b11 ;
  assign near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9___d301 =
	     near_mem$imem_pc == next_pc___1__h16983 ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d1077 =
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d612 &&
	     !near_mem$imem_exc &&
	     (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1072 ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1074) ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d612 =
	     near_mem$imem_valid &&
	     near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_01_OR__ETC___d606 &&
	     (IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d258 !=
	      2'd1 ||
	      !IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d592 &&
	      !IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d594) ;
  assign near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d932 =
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d612 &&
	     (near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d918 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d929) ;
  assign next_pc___1__h16983 = imem_rg_pc + 32'd2 ;
  assign next_pc__h16981 = imem_rg_pc + 32'd4 ;
  assign nzimm10__h10332 =
	     { instr__h4783[12],
	       instr__h4783[4:3],
	       instr__h4783[5],
	       instr__h4783[2],
	       instr__h4783[6],
	       4'b0 } ;
  assign nzimm10__h10547 =
	     { instr__h4783[10:7],
	       instr__h4783[12:11],
	       instr__h4783[5],
	       instr__h4783[6],
	       2'b0 } ;
  assign offset_BITS_4_TO_0___h13755 = { instr__h4783[11:10], 3'b0 } ;
  assign offset_BITS_4_TO_0___h7725 = { instr__h4783[11:9], 2'b0 } ;
  assign offset_BITS_4_TO_0___h8156 =
	     { instr__h4783[11:10], instr__h4783[6], 2'b0 } ;
  assign offset__h7227 =
	     { instr__h4783[3:2],
	       instr__h4783[12],
	       instr__h4783[6:4],
	       2'b0 } ;
  assign offset__h7736 =
	     { instr__h4783[5], instr__h4783[12:10], instr__h4783[6], 2'b0 } ;
  assign offset__h8164 =
	     { instr__h4783[12],
	       instr__h4783[8],
	       instr__h4783[10:9],
	       instr__h4783[6],
	       instr__h4783[7],
	       instr__h4783[2],
	       instr__h4783[11],
	       instr__h4783[5:3],
	       1'b0 } ;
  assign offset__h9075 =
	     { instr__h4783[12],
	       instr__h4783[6:5],
	       instr__h4783[2],
	       instr__h4783[11:10],
	       instr__h4783[4:3],
	       1'b0 } ;
  assign output_stage2___1_data_to_stage3_rd_val__h6321 =
	     { 32'd0, stage2_mbox$word } ;
  assign rd__h7796 = { 2'b01, instr__h4783[4:2] } ;
  assign rd_val___1__h15296 =
	     rs1_val_bypassed__h4793 + _theResult___snd__h17514 ;
  assign rd_val___1__h15304 =
	     rs1_val_bypassed__h4793 - _theResult___snd__h17514 ;
  assign rd_val___1__h15311 =
	     ((rs1_val_bypassed__h4793 ^ 32'h80000000) <
	      (_theResult___snd__h17514 ^ 32'h80000000)) ?
	       32'd1 :
	       32'd0 ;
  assign rd_val___1__h15318 =
	     (rs1_val_bypassed__h4793 < _theResult___snd__h17514) ?
	       32'd1 :
	       32'd0 ;
  assign rd_val___1__h15325 =
	     rs1_val_bypassed__h4793 ^ _theResult___snd__h17514 ;
  assign rd_val___1__h15332 =
	     rs1_val_bypassed__h4793 | _theResult___snd__h17514 ;
  assign rd_val__h13795 =
	     (!stage3_rg_stage3[69] && stage3_rg_full &&
	      stage3_rg_stage3[76] &&
	      stage3_rg_stage3_4_BITS_75_TO_71_3_EQ_IF_NOT_n_ETC___d637) ?
	       stage3_rg_stage3[31:0] :
	       gpr_regfile$read_rs1 ;
  assign rd_val__h13838 =
	     (!stage3_rg_stage3[69] && stage3_rg_full &&
	      stage3_rg_stage3[76] &&
	      stage3_rg_stage3_4_BITS_75_TO_71_3_EQ_IF_NOT_n_ETC___d645) ?
	       stage3_rg_stage3[31:0] :
	       gpr_regfile$read_rs2 ;
  assign rd_val__h14231 =
	     (_theResult____h4785[14:12] == 3'b0 &&
	      (_theResult____h4785[6:0] != 7'b0110011 ||
	       !_theResult____h4785[30])) ?
	       rd_val___1__h15296 :
	       _theResult_____1_fst__h15308 ;
  assign rd_val__h14251 = { _theResult____h4785[31:12], 12'h0 } ;
  assign rd_val__h14270 = imem_rg_pc + rd_val__h14251 ;
  assign rd_val__h17408 = rs1_val_bypassed__h4793 << shamt__h14185 ;
  assign rd_val__h17460 = rs1_val_bypassed__h4793 >> shamt__h14185 ;
  assign rd_val__h17482 =
	     rs1_val_bypassed__h4793 >> shamt__h14185 |
	     ~(32'hFFFFFFFF >> shamt__h14185) &
	     {32{rs1_val_bypassed__h4793[31]}} ;
  assign rd_val__h17698 =
	     (stage3_rg_stage3[69] && stage3_rg_full &&
	      stage3_rg_stage3[76] &&
	      stage3_rg_stage3_4_BITS_75_TO_71_3_EQ_IF_NOT_n_ETC___d637) ?
	       stage3_rg_stage3[63:0] :
	       fpr_regfile$read_rs1 ;
  assign rd_val__h17751 =
	     (stage3_rg_stage3[69] && stage3_rg_full &&
	      stage3_rg_stage3[76] &&
	      stage3_rg_stage3_4_BITS_75_TO_71_3_EQ_IF_NOT_n_ETC___d645) ?
	       stage3_rg_stage3[63:0] :
	       fpr_regfile$read_rs2 ;
  assign rd_val__h17809 =
	     (stage3_rg_stage3[69] && stage3_rg_full &&
	      stage3_rg_stage3[76] &&
	      stage3_rg_stage3[75:71] == _theResult____h4785[31:27]) ?
	       stage3_rg_stage3[63:0] :
	       fpr_regfile$read_rs3 ;
  assign rg_cur_priv_7_EQ_0b11_095_OR_rg_cur_priv_7_EQ__ETC___d1122 =
	     (rg_cur_priv == 2'b11 ||
	      rg_cur_priv == 2'b01 && !csr_regfile$read_mstatus[21] ||
	      rg_cur_priv == 2'b0 && csr_regfile$read_misa[13]) &&
	     _theResult____h4785[31:20] == 12'b000100000101 ;
  assign rg_halt_562_OR_csr_regfile_interrupt_pending_r_ETC___d1574 =
	     rg_halt || csr_regfile$interrupt_pending[4] ||
	     (IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 !=
	      2'd2 &&
	      IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 !=
	      2'd0 ||
	      NOT_near_mem_imem_valid_00_OR_NOT_near_mem_ime_ETC___d1570 ||
	      near_mem$imem_exc ||
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d918 &&
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d929) &&
	     stage1_rg_full ;
  assign rg_state_6_EQ_2_576_AND_NOT_rg_halt_562_586_AN_ETC___d1716 =
	     rg_state == 4'd2 && !rg_halt &&
	     !csr_regfile$interrupt_pending[4] &&
	     !stage3_rg_full ;
  assign rg_state_6_EQ_2_576_AND_NOT_rg_halt_562_586_AN_ETC___d1765 =
	     rg_state_6_EQ_2_576_AND_NOT_rg_halt_562_586_AN_ETC___d1716 &&
	     IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 ==
	     2'd0 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d932 &&
	     (IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 ==
	      4'd7 ||
	      IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 ==
	      4'd8 ||
	      IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 ==
	      4'd9) ;
  assign rg_state_6_EQ_2_576_AND_NOT_rg_halt_562_586_AN_ETC___d1776 =
	     rg_state_6_EQ_2_576_AND_NOT_rg_halt_562_586_AN_ETC___d1716 &&
	     IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 ==
	     2'd0 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d932 &&
	     IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 ==
	     4'd5 ;
  assign rg_state_6_EQ_2_576_AND_NOT_rg_halt_562_586_AN_ETC___d1786 =
	     rg_state_6_EQ_2_576_AND_NOT_rg_halt_562_586_AN_ETC___d1716 &&
	     IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 ==
	     2'd0 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d932 &&
	     IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 ==
	     4'd4 ;
  assign rg_state_6_EQ_2_576_AND_NOT_rg_halt_562_586_AN_ETC___d1803 =
	     rg_state_6_EQ_2_576_AND_NOT_rg_halt_562_586_AN_ETC___d1716 &&
	     IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 ==
	     2'd0 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d932 &&
	     IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 ==
	     4'd11 ;
  assign rg_state_6_EQ_2_576_AND_stage3_rg_full_2_OR_NO_ETC___d1595 =
	     rg_state == 4'd2 &&
	     (stage3_rg_full ||
	      IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 !=
	      2'd0 ||
	      stage1_rg_full) &&
	     (stage3_rg_full ||
	      IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 !=
	      2'd3) &&
	     (stage3_rg_full ||
	      IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 !=
	      2'd0 ||
	      !stage1_rg_full ||
	      NOT_near_mem_imem_valid_00_OR_NOT_near_mem_ime_ETC___d1581) &&
	     (NOT_rg_halt_562_586_AND_NOT_csr_regfile_interr_ETC___d1592 ||
	      IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 !=
	      2'd0 ||
	      stage3_rg_full) ;
  assign rm__h14728 = x_out_data_to_stage2_rounding_mode__h13917 ;
  assign rs1__h7795 = { 2'b01, instr__h4783[9:7] } ;
  assign rs1_val__h14581 =
	     _theResult____h4785[14] ?
	       { 27'd0, _theResult____h4785[19:15] } :
	       rs1_val_bypassed__h4793 ;
  assign rs1_val__h21828 =
	     (x_out_data_to_stage2_instr__h13909[14:12] == 3'b001) ?
	       x_out_data_to_stage2_val1__h13913[31:0] :
	       { 27'd0, x_out_data_to_stage2_instr__h13909[19:15] } ;
  assign rs1_val_bypassed__h4793 =
	     (_theResult____h4785[19:15] == 5'd0) ? 32'd0 : val__h13797 ;
  assign rs2_val__h14014 =
	     (_theResult____h4785[24:20] == 5'd0) ? 32'd0 : val__h13840 ;
  assign shamt__h14185 =
	     (_theResult____h4785[6:0] == 7'b0010011) ?
	       _theResult____h4785[24:20] :
	       rs2_val__h14014[4:0] ;
  assign stage3_rg_stage3_4_BITS_75_TO_71_3_EQ_IF_NOT_n_ETC___d637 =
	     stage3_rg_stage3[75:71] == _theResult____h4785[19:15] ;
  assign stage3_rg_stage3_4_BITS_75_TO_71_3_EQ_IF_NOT_n_ETC___d645 =
	     stage3_rg_stage3[75:71] == _theResult____h4785[24:20] ;
  assign theResult__785_BITS_31_TO_20__q19 = _theResult____h4785[31:20] ;
  assign theResult__785_BITS_31_TO_25_CONCAT_theResult__ETC__q7 =
	     { _theResult____h4785[31:25], _theResult____h4785[11:7] } ;
  assign theResult__785_BIT_31_CONCAT_theResult__785_BI_ETC__q4 =
	     { _theResult____h4785[31],
	       _theResult____h4785[19:12],
	       _theResult____h4785[20],
	       _theResult____h4785[30:21],
	       1'b0 } ;
  assign theResult__785_BIT_31_CONCAT_theResult__785_BI_ETC__q6 =
	     { _theResult____h4785[31],
	       _theResult____h4785[7],
	       _theResult____h4785[30:25],
	       _theResult____h4785[11:8],
	       1'b0 } ;
  assign trap_info_tval__h16821 =
	     (_theResult____h4785[6:0] != 7'b1101111 &&
	      _theResult____h4785[6:0] != 7'b1100111 &&
	      (_theResult____h4785[6:0] != 7'b1110011 ||
	       _theResult____h4785[14:12] != 3'b0 ||
	       _theResult____h4785[11:7] != 5'd0 ||
	       _theResult____h4785[19:15] != 5'd0 ||
	       _theResult____h4785[31:20] != 12'b0 &&
	       _theResult____h4785[31:20] != 12'b000000000001)) ?
	       _theResult____h4785 :
	       CASE_theResult__785_BITS_6_TO_0_0b1100111_data_ETC__q20 ;
  assign val__h13797 =
	     (IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d258 ==
	      2'd2 &&
	      IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d592) ?
	       x_out_bypass_rd_val__h6887 :
	       rd_val__h13795 ;
  assign val__h13840 =
	     (IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d258 ==
	      2'd2 &&
	      IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d594) ?
	       x_out_bypass_rd_val__h6887 :
	       rd_val__h13838 ;
  assign value__h16876 =
	     near_mem$imem_exc ? near_mem$imem_pc : trap_info_tval__h16821 ;
  assign x__h27276 =
	     csr_regfile_read_csr_mcycle__6_MINUS_rg_start__ETC___d1809[63:0] /
	     _theResult____h27275 ;
  assign x_out_data_to_stage2_instr__h13909 =
	     NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_01_ETC___d309 ?
	       instr___1__h7181 :
	       instr__h4783 ;
  assign x_out_data_to_stage2_rounding_mode__h13917 =
	     (_theResult____h4785[14:12] == 3'b111) ?
	       csr_regfile$read_frm :
	       _theResult____h4785[14:12] ;
  assign x_out_data_to_stage2_val2__h13914 =
	     (_theResult____h4785[6:0] == 7'b1100011) ?
	       alu_outputs___1_val2__h14041 :
	       IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1408 ;
  assign x_out_data_to_stage2_val3__h13915 =
	     (IF_NOT_stage2_rg_full_8_32_OR_stage2_rg_stage2_ETC___d282 ==
	      2'd2 &&
	      x_out_fbypass_rd__h7034 == _theResult____h4785[31:27]) ?
	       x_out_fbypass_rd_val__h7035 :
	       rd_val__h17809 ;
  assign x_out_next_pc__h13875 =
	     IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1074 ?
	       data_to_stage2_addr__h13901 :
	       fall_through_pc__h13862 ;
  assign x_out_trap_info_exc_code__h16824 =
	     near_mem$imem_exc ?
	       near_mem$imem_exc_code :
	       alu_outputs_exc_code__h14768 ;
  assign y__h22625 = ~rs1_val__h22321 ;
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[235:233])
      3'd1, 3'd2, 3'd4: value__h6595 = stage2_rg_stage2[299:268];
      default: value__h6595 = stage2_rg_stage2[299:268];
    endcase
  end
  always@(stage2_rg_stage2 or near_mem$dmem_exc_code)
  begin
    case (stage2_rg_stage2[235:233])
      3'd1, 3'd2, 3'd4:
	  x_out_trap_info_exc_code__h6632 = near_mem$dmem_exc_code;
      default: x_out_trap_info_exc_code__h6632 = 4'd2;
    endcase
  end
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[235:233])
      3'd1, 3'd2, 3'd4: value__h6656 = stage2_rg_stage2[227:196];
      default: value__h6656 = 32'd0;
    endcase
  end
  always@(stage2_rg_stage2 or stage2_fbox$word_snd)
  begin
    case (stage2_rg_stage2[235:233])
      3'd0, 3'd1, 3'd2, 3'd3, 3'd4:
	  x_out_data_to_stage3_fpr_flags__h6352 = 5'd0;
      default: x_out_data_to_stage3_fpr_flags__h6352 = stage2_fbox$word_snd;
    endcase
  end
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[235:233])
      3'd0, 3'd1, 3'd4:
	  x_out_data_to_stage3_rd__h6349 = stage2_rg_stage2[232:228];
      3'd2: x_out_data_to_stage3_rd__h6349 = 5'd0;
      default: x_out_data_to_stage3_rd__h6349 = stage2_rg_stage2[232:228];
    endcase
  end
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[235:233])
      3'd0, 3'd1, 3'd4: x_out_bypass_rd__h6886 = stage2_rg_stage2[232:228];
      default: x_out_bypass_rd__h6886 = stage2_rg_stage2[232:228];
    endcase
  end
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[235:233])
      3'd1, 3'd4: x_out_fbypass_rd__h7034 = stage2_rg_stage2[232:228];
      default: x_out_fbypass_rd__h7034 = stage2_rg_stage2[232:228];
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_fbox$word_fst or
	  data_to_stage3_rd_val__h6303 or
	  output_stage2___1_data_to_stage3_rd_val__h6321)
  begin
    case (stage2_rg_stage2[235:233])
      3'd0: x_out_data_to_stage3_rd_val__h6353 = stage2_rg_stage2[195:132];
      3'd1, 3'd4:
	  x_out_data_to_stage3_rd_val__h6353 = data_to_stage3_rd_val__h6303;
      3'd3:
	  x_out_data_to_stage3_rd_val__h6353 =
	      output_stage2___1_data_to_stage3_rd_val__h6321;
      default: x_out_data_to_stage3_rd_val__h6353 = stage2_fbox$word_fst;
    endcase
  end
  always@(stage2_rg_stage2 or
	  _theResult___fst_rd_val__h6876 or
	  _theResult___fst_rd_val__h6865 or stage2_mbox$word)
  begin
    case (stage2_rg_stage2[235:233])
      3'd0: x_out_bypass_rd_val__h6887 = stage2_rg_stage2[163:132];
      3'd1, 3'd4: x_out_bypass_rd_val__h6887 = _theResult___fst_rd_val__h6865;
      3'd3: x_out_bypass_rd_val__h6887 = stage2_mbox$word;
      default: x_out_bypass_rd_val__h6887 = _theResult___fst_rd_val__h6876;
    endcase
  end
  always@(stage2_rg_stage2 or
	  _theResult___snd_rd_val__h7026 or _theResult___snd_rd_val__h7020)
  begin
    case (stage2_rg_stage2[235:233])
      3'd1, 3'd4:
	  x_out_fbypass_rd_val__h7035 = _theResult___snd_rd_val__h7020;
      default: x_out_fbypass_rd_val__h7035 = _theResult___snd_rd_val__h7026;
    endcase
  end
  always@(stage2_rg_stage2 or
	  IF_stage2_fbox_valid__28_THEN_2_ELSE_1___d129 or
	  IF_near_mem_dmem_valid__22_THEN_IF_near_mem_dm_ETC___d125 or
	  IF_stage2_mbox_valid__26_THEN_2_ELSE_1___d127)
  begin
    case (stage2_rg_stage2[235:233])
      3'd0: CASE_stage2_rg_stage2_BITS_235_TO_233_0_2_1_IF_ETC__q1 = 2'd2;
      3'd1, 3'd2, 3'd4:
	  CASE_stage2_rg_stage2_BITS_235_TO_233_0_2_1_IF_ETC__q1 =
	      IF_near_mem_dmem_valid__22_THEN_IF_near_mem_dm_ETC___d125;
      3'd3:
	  CASE_stage2_rg_stage2_BITS_235_TO_233_0_2_1_IF_ETC__q1 =
	      IF_stage2_mbox_valid__26_THEN_2_ELSE_1___d127;
      default: CASE_stage2_rg_stage2_BITS_235_TO_233_0_2_1_IF_ETC__q1 =
		   IF_stage2_fbox_valid__28_THEN_2_ELSE_1___d129;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_fbox$valid or
	  near_mem$dmem_valid or near_mem$dmem_exc or stage2_mbox$valid)
  begin
    case (stage2_rg_stage2[235:233])
      3'd1, 3'd2, 3'd4:
	  IF_stage2_rg_stage2_9_BITS_235_TO_233_00_EQ_1__ETC___d150 =
	      !near_mem$dmem_valid || near_mem$dmem_exc;
      3'd3:
	  IF_stage2_rg_stage2_9_BITS_235_TO_233_00_EQ_1__ETC___d150 =
	      !stage2_mbox$valid;
      default: IF_stage2_rg_stage2_9_BITS_235_TO_233_00_EQ_1__ETC___d150 =
		   !stage2_fbox$valid;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_fbox$valid or
	  near_mem$dmem_valid or near_mem$dmem_exc or stage2_mbox$valid)
  begin
    case (stage2_rg_stage2[235:233])
      3'd1, 3'd2, 3'd4:
	  IF_stage2_rg_stage2_9_BITS_235_TO_233_00_EQ_1__ETC___d160 =
	      near_mem$dmem_valid && !near_mem$dmem_exc;
      3'd3:
	  IF_stage2_rg_stage2_9_BITS_235_TO_233_00_EQ_1__ETC___d160 =
	      stage2_mbox$valid;
      default: IF_stage2_rg_stage2_9_BITS_235_TO_233_00_EQ_1__ETC___d160 =
		   stage2_fbox$valid;
    endcase
  end
  always@(stage2_rg_stage2 or
	  IF_stage2_fbox_valid__28_THEN_2_ELSE_1___d129 or
	  IF_stage2_rg_stage2_9_BIT_3_89_OR_stage2_rg_st_ETC___d251 or
	  IF_stage2_mbox_valid__26_THEN_2_ELSE_1___d127)
  begin
    case (stage2_rg_stage2[235:233])
      3'd0: CASE_stage2_rg_stage2_BITS_235_TO_233_0_2_1_IF_ETC__q2 = 2'd2;
      3'd1, 3'd4:
	  CASE_stage2_rg_stage2_BITS_235_TO_233_0_2_1_IF_ETC__q2 =
	      IF_stage2_rg_stage2_9_BIT_3_89_OR_stage2_rg_st_ETC___d251;
      3'd2: CASE_stage2_rg_stage2_BITS_235_TO_233_0_2_1_IF_ETC__q2 = 2'd0;
      3'd3:
	  CASE_stage2_rg_stage2_BITS_235_TO_233_0_2_1_IF_ETC__q2 =
	      IF_stage2_mbox_valid__26_THEN_2_ELSE_1___d127;
      default: CASE_stage2_rg_stage2_BITS_235_TO_233_0_2_1_IF_ETC__q2 =
		   stage2_rg_stage2[3] ?
		     2'd0 :
		     IF_stage2_fbox_valid__28_THEN_2_ELSE_1___d129;
    endcase
  end
  always@(stage2_rg_stage2 or
	  IF_stage2_fbox_valid__28_THEN_2_ELSE_1___d129 or
	  IF_stage2_rg_stage2_9_BIT_3_89_THEN_IF_near_me_ETC___d277)
  begin
    case (stage2_rg_stage2[235:233])
      3'd1, 3'd4:
	  CASE_stage2_rg_stage2_BITS_235_TO_233_1_IF_sta_ETC__q3 =
	      IF_stage2_rg_stage2_9_BIT_3_89_THEN_IF_near_me_ETC___d277;
      3'd2, 3'd3:
	  CASE_stage2_rg_stage2_BITS_235_TO_233_1_IF_sta_ETC__q3 = 2'd0;
      default: CASE_stage2_rg_stage2_BITS_235_TO_233_1_IF_sta_ETC__q3 =
		   stage2_rg_stage2[3] ?
		     IF_stage2_fbox_valid__28_THEN_2_ELSE_1___d129 :
		     2'd0;
    endcase
  end
  always@(_theResult____h4785)
  begin
    case (_theResult____h4785[6:0])
      7'b0000011,
      7'b0000111,
      7'b0010011,
      7'b0010111,
      7'b0110011,
      7'b0110111,
      7'b1100111,
      7'b1101111:
	  x_out_data_to_stage2_rd__h13911 = _theResult____h4785[11:7];
      7'b1100011: x_out_data_to_stage2_rd__h13911 = 5'd0;
      default: x_out_data_to_stage2_rd__h13911 = _theResult____h4785[11:7];
    endcase
  end
  always@(_theResult____h4785 or
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d655 or
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d651 or
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d653)
  begin
    case (_theResult____h4785[14:12])
      3'b0:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d924 =
	      !IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d651;
      3'b001:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d924 =
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d651;
      3'b100:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d924 =
	      !IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d653;
      3'b101:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d924 =
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d653;
      3'b110:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d924 =
	      !IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d655;
      default: IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d924 =
		   _theResult____h4785[14:12] != 3'b111 ||
		   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d655;
    endcase
  end
  always@(_theResult____h4785 or
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d655 or
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d651 or
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d653)
  begin
    case (_theResult____h4785[14:12])
      3'b0:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d662 =
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d651;
      3'b001:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d662 =
	      !IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d651;
      3'b100:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d662 =
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d653;
      3'b101:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d662 =
	      !IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d653;
      3'b110:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d662 =
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d655;
      default: IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d662 =
		   _theResult____h4785[14:12] == 3'b111 &&
		   !IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d655;
    endcase
  end
  always@(_theResult____h4785 or rm__h14728)
  begin
    case (_theResult____h4785[6:0])
      7'b1000011, 7'b1000111, 7'b1001011, 7'b1001111:
	  CASE_theResult__785_BITS_6_TO_0_0b1000011_NOT__ETC__q8 =
	      _theResult____h4785[26:25] != 2'b0 &&
	      _theResult____h4785[26:25] != 2'b01;
      default: CASE_theResult__785_BITS_6_TO_0_0b1000011_NOT__ETC__q8 =
		   _theResult____h4785[31:25] != 7'h0 &&
		   _theResult____h4785[31:25] != 7'h04 &&
		   _theResult____h4785[31:25] != 7'h08 &&
		   (_theResult____h4785[31:25] != 7'h10 ||
		    rm__h14728 != 3'd0) &&
		   (_theResult____h4785[31:25] != 7'h10 ||
		    rm__h14728 != 3'd1) &&
		   (_theResult____h4785[31:25] != 7'h10 ||
		    rm__h14728 != 3'd2) &&
		   (_theResult____h4785[31:25] != 7'h60 ||
		    _theResult____h4785[24:20] != 5'd0) &&
		   (_theResult____h4785[31:25] != 7'h60 ||
		    _theResult____h4785[24:20] != 5'd1) &&
		   (_theResult____h4785[31:25] != 7'h68 ||
		    _theResult____h4785[24:20] != 5'd0) &&
		   (_theResult____h4785[31:25] != 7'h68 ||
		    _theResult____h4785[24:20] != 5'd1) &&
		   (_theResult____h4785[31:25] != 7'h14 ||
		    rm__h14728 != 3'd0) &&
		   (_theResult____h4785[31:25] != 7'h14 ||
		    rm__h14728 != 3'd1) &&
		   (_theResult____h4785[31:25] != 7'h50 ||
		    rm__h14728 != 3'd0) &&
		   (_theResult____h4785[31:25] != 7'h50 ||
		    rm__h14728 != 3'd1) &&
		   (_theResult____h4785[31:25] != 7'h50 ||
		    rm__h14728 != 3'd2) &&
		   (_theResult____h4785[31:25] != 7'h70 ||
		    rm__h14728 != 3'd0) &&
		   (_theResult____h4785[31:25] != 7'h78 ||
		    rm__h14728 != 3'd0) &&
		   (_theResult____h4785[31:25] != 7'h70 ||
		    rm__h14728 != 3'd1) &&
		   _theResult____h4785[31:25] != 7'b0000001 &&
		   _theResult____h4785[31:25] != 7'h05 &&
		   _theResult____h4785[31:25] != 7'b0001001 &&
		   (_theResult____h4785[31:25] != 7'h11 ||
		    rm__h14728 != 3'd0) &&
		   (_theResult____h4785[31:25] != 7'h11 ||
		    rm__h14728 != 3'd1) &&
		   (_theResult____h4785[31:25] != 7'h11 ||
		    rm__h14728 != 3'd2) &&
		   (_theResult____h4785[31:25] != 7'h61 ||
		    _theResult____h4785[24:20] != 5'd0) &&
		   (_theResult____h4785[31:25] != 7'h61 ||
		    _theResult____h4785[24:20] != 5'd1) &&
		   (_theResult____h4785[31:25] != 7'h69 ||
		    _theResult____h4785[24:20] != 5'd0) &&
		   (_theResult____h4785[31:25] != 7'h69 ||
		    _theResult____h4785[24:20] != 5'd1) &&
		   (_theResult____h4785[31:25] != 7'h21 ||
		    _theResult____h4785[24:20] != 5'd0) &&
		   (_theResult____h4785[31:25] != 7'h20 ||
		    _theResult____h4785[24:20] != 5'd1) &&
		   (_theResult____h4785[31:25] != 7'h15 ||
		    rm__h14728 != 3'd0) &&
		   (_theResult____h4785[31:25] != 7'h15 ||
		    rm__h14728 != 3'd1) &&
		   (_theResult____h4785[31:25] != 7'h51 ||
		    rm__h14728 != 3'd0) &&
		   (_theResult____h4785[31:25] != 7'h51 ||
		    rm__h14728 != 3'd1) &&
		   (_theResult____h4785[31:25] != 7'h51 ||
		    rm__h14728 != 3'd2) &&
		   (_theResult____h4785[31:25] != 7'h71 ||
		    rm__h14728 != 3'd0) &&
		   (_theResult____h4785[31:25] != 7'h79 ||
		    rm__h14728 != 3'd0) &&
		   (_theResult____h4785[31:25] != 7'h71 ||
		    rm__h14728 != 3'd1);
    endcase
  end
  always@(_theResult____h4785 or
	  csr_regfile_read_mstatus__8_BITS_14_TO_13_9_EQ_ETC___d904 or
	  csr_regfile$read_mstatus)
  begin
    case (_theResult____h4785[6:0])
      7'b0000111:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d908 =
	      _theResult____h4785[14:12] != 3'b0 &&
	      _theResult____h4785[14:12] != 3'b100 &&
	      _theResult____h4785[14:12] != 3'b001 &&
	      _theResult____h4785[14:12] != 3'b101 &&
	      _theResult____h4785[14:12] != 3'b010 &&
	      _theResult____h4785[14:12] != 3'b011 ||
	      csr_regfile$read_mstatus[14:13] == 2'h0;
      7'b0100111:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d908 =
	      _theResult____h4785[14:12] != 3'b0 &&
	      _theResult____h4785[14:12] != 3'b001 &&
	      _theResult____h4785[14:12] != 3'b010 &&
	      _theResult____h4785[14:12] != 3'b011 ||
	      csr_regfile$read_mstatus[14:13] == 2'h0;
      7'b0101111:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d908 =
	      _theResult____h4785[31:27] != 5'b00010 &&
	      _theResult____h4785[31:27] != 5'b00011 &&
	      _theResult____h4785[31:27] != 5'b0 &&
	      _theResult____h4785[31:27] != 5'b00001 &&
	      _theResult____h4785[31:27] != 5'b01100 &&
	      _theResult____h4785[31:27] != 5'b01000 &&
	      _theResult____h4785[31:27] != 5'b00100 &&
	      _theResult____h4785[31:27] != 5'b10000 &&
	      _theResult____h4785[31:27] != 5'b11000 &&
	      _theResult____h4785[31:27] != 5'b10100 &&
	      _theResult____h4785[31:27] != 5'b11100 ||
	      _theResult____h4785[14:12] != 3'b010;
      default: IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d908 =
		   _theResult____h4785[6:0] != 7'b1010011 &&
		   _theResult____h4785[6:0] != 7'b1000011 &&
		   _theResult____h4785[6:0] != 7'b1000111 &&
		   _theResult____h4785[6:0] != 7'b1001011 &&
		   _theResult____h4785[6:0] != 7'b1001111 ||
		   csr_regfile_read_mstatus__8_BITS_14_TO_13_9_EQ_ETC___d904;
    endcase
  end
  always@(_theResult____h4785 or
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d908)
  begin
    case (_theResult____h4785[6:0])
      7'b0000011:
	  CASE_theResult__785_BITS_6_TO_0_0b11_NOT_theRe_ETC__q9 =
	      _theResult____h4785[14:12] != 3'b0 &&
	      _theResult____h4785[14:12] != 3'b100 &&
	      _theResult____h4785[14:12] != 3'b001 &&
	      _theResult____h4785[14:12] != 3'b101 &&
	      _theResult____h4785[14:12] != 3'b010 &&
	      _theResult____h4785[14:12] != 3'b011;
      7'b0100011:
	  CASE_theResult__785_BITS_6_TO_0_0b11_NOT_theRe_ETC__q9 =
	      _theResult____h4785[14:12] != 3'b0 &&
	      _theResult____h4785[14:12] != 3'b001 &&
	      _theResult____h4785[14:12] != 3'b010 &&
	      _theResult____h4785[14:12] != 3'b011;
      default: CASE_theResult__785_BITS_6_TO_0_0b11_NOT_theRe_ETC__q9 =
		   _theResult____h4785[6:0] == 7'b0001111 ||
		   _theResult____h4785[6:0] == 7'b1110011 ||
		   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d908;
    endcase
  end
  always@(_theResult____h4785 or
	  CASE_theResult__785_BITS_6_TO_0_0b11_NOT_theRe_ETC__q9 or
	  NOT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_ETC___d692)
  begin
    case (_theResult____h4785[6:0])
      7'b0010011, 7'b0110011:
	  CASE_theResult__785_BITS_6_TO_0_0b10011_NOT_IF_ETC__q10 =
	      NOT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_ETC___d692;
      default: CASE_theResult__785_BITS_6_TO_0_0b10011_NOT_IF_ETC__q10 =
		   _theResult____h4785[6:0] != 7'b0110111 &&
		   _theResult____h4785[6:0] != 7'b0010111 &&
		   CASE_theResult__785_BITS_6_TO_0_0b11_NOT_theRe_ETC__q9;
    endcase
  end
  always@(_theResult____h4785 or rm__h14728)
  begin
    case (_theResult____h4785[6:0])
      7'b1000011, 7'b1000111, 7'b1001011, 7'b1001111:
	  CASE_theResult__785_BITS_6_TO_0_0b1000011_theR_ETC__q11 =
	      _theResult____h4785[26:25] == 2'b0 ||
	      _theResult____h4785[26:25] == 2'b01;
      default: CASE_theResult__785_BITS_6_TO_0_0b1000011_theR_ETC__q11 =
		   _theResult____h4785[31:25] == 7'h0 ||
		   _theResult____h4785[31:25] == 7'h04 ||
		   _theResult____h4785[31:25] == 7'h08 ||
		   _theResult____h4785[31:25] == 7'h10 &&
		   (rm__h14728 == 3'd0 || rm__h14728 == 3'd1 ||
		    rm__h14728 == 3'd2) ||
		   _theResult____h4785[31:25] == 7'h60 &&
		   _theResult____h4785[24:20] == 5'd0 ||
		   _theResult____h4785[31:25] == 7'h60 &&
		   _theResult____h4785[24:20] == 5'd1 ||
		   _theResult____h4785[31:25] == 7'h68 &&
		   (_theResult____h4785[24:20] == 5'd0 ||
		    _theResult____h4785[24:20] == 5'd1) ||
		   _theResult____h4785[31:25] == 7'h14 &&
		   (rm__h14728 == 3'd0 || rm__h14728 == 3'd1) ||
		   _theResult____h4785[31:25] == 7'h50 &&
		   rm__h14728 == 3'd0 ||
		   _theResult____h4785[31:25] == 7'h50 &&
		   (rm__h14728 == 3'd1 || rm__h14728 == 3'd2) ||
		   _theResult____h4785[31:25] == 7'h70 &&
		   rm__h14728 == 3'd0 ||
		   _theResult____h4785[31:25] == 7'h78 &&
		   rm__h14728 == 3'd0 ||
		   _theResult____h4785[31:25] == 7'h70 &&
		   rm__h14728 == 3'd1 ||
		   _theResult____h4785[31:25] == 7'b0000001 ||
		   _theResult____h4785[31:25] == 7'h05 ||
		   _theResult____h4785[31:25] == 7'b0001001 ||
		   _theResult____h4785[31:25] == 7'h11 &&
		   (rm__h14728 == 3'd0 || rm__h14728 == 3'd1) ||
		   _theResult____h4785[31:25] == 7'h11 &&
		   rm__h14728 == 3'd2 ||
		   _theResult____h4785[31:25] == 7'h61 &&
		   _theResult____h4785[24:20] == 5'd0 ||
		   _theResult____h4785[31:25] == 7'h61 &&
		   _theResult____h4785[24:20] == 5'd1 ||
		   _theResult____h4785[31:25] == 7'h69 &&
		   (_theResult____h4785[24:20] == 5'd0 ||
		    _theResult____h4785[24:20] == 5'd1) ||
		   _theResult____h4785[31:25] == 7'h21 &&
		   _theResult____h4785[24:20] == 5'd0 ||
		   _theResult____h4785[31:25] == 7'h20 &&
		   _theResult____h4785[24:20] == 5'd1 ||
		   _theResult____h4785[31:25] == 7'h15 &&
		   rm__h14728 == 3'd0 ||
		   _theResult____h4785[31:25] == 7'h15 &&
		   rm__h14728 == 3'd1 ||
		   _theResult____h4785[31:25] == 7'h51 &&
		   (rm__h14728 == 3'd0 || rm__h14728 == 3'd1) ||
		   _theResult____h4785[31:25] == 7'h51 &&
		   rm__h14728 == 3'd2 ||
		   (_theResult____h4785[31:25] == 7'h71 ||
		    _theResult____h4785[31:25] == 7'h79) &&
		   rm__h14728 == 3'd0 ||
		   _theResult____h4785[31:25] == 7'h71 && rm__h14728 == 3'd1;
    endcase
  end
  always@(_theResult____h4785 or
	  NOT_csr_regfile_read_mstatus__8_BITS_14_TO_13__ETC___d1058 or
	  csr_regfile$read_mstatus)
  begin
    case (_theResult____h4785[6:0])
      7'b0000111:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1062 =
	      (_theResult____h4785[14:12] == 3'b0 ||
	       _theResult____h4785[14:12] == 3'b100 ||
	       _theResult____h4785[14:12] == 3'b001 ||
	       _theResult____h4785[14:12] == 3'b101 ||
	       _theResult____h4785[14:12] == 3'b010 ||
	       _theResult____h4785[14:12] == 3'b011) &&
	      csr_regfile$read_mstatus[14:13] != 2'h0;
      7'b0100111:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1062 =
	      (_theResult____h4785[14:12] == 3'b0 ||
	       _theResult____h4785[14:12] == 3'b001 ||
	       _theResult____h4785[14:12] == 3'b010 ||
	       _theResult____h4785[14:12] == 3'b011) &&
	      csr_regfile$read_mstatus[14:13] != 2'h0;
      7'b0101111:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1062 =
	      (_theResult____h4785[31:27] == 5'b00010 ||
	       _theResult____h4785[31:27] == 5'b00011 ||
	       _theResult____h4785[31:27] == 5'b0 ||
	       _theResult____h4785[31:27] == 5'b00001 ||
	       _theResult____h4785[31:27] == 5'b01100 ||
	       _theResult____h4785[31:27] == 5'b01000 ||
	       _theResult____h4785[31:27] == 5'b00100 ||
	       _theResult____h4785[31:27] == 5'b10000 ||
	       _theResult____h4785[31:27] == 5'b11000 ||
	       _theResult____h4785[31:27] == 5'b10100 ||
	       _theResult____h4785[31:27] == 5'b11100) &&
	      _theResult____h4785[14:12] == 3'b010;
      default: IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1062 =
		   (_theResult____h4785[6:0] == 7'b1010011 ||
		    _theResult____h4785[6:0] == 7'b1000011 ||
		    _theResult____h4785[6:0] == 7'b1000111 ||
		    _theResult____h4785[6:0] == 7'b1001011 ||
		    _theResult____h4785[6:0] == 7'b1001111) &&
		   NOT_csr_regfile_read_mstatus__8_BITS_14_TO_13__ETC___d1058;
    endcase
  end
  always@(_theResult____h4785 or
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1062)
  begin
    case (_theResult____h4785[6:0])
      7'b0000011:
	  CASE_theResult__785_BITS_6_TO_0_0b11_theResult_ETC__q12 =
	      _theResult____h4785[14:12] == 3'b0 ||
	      _theResult____h4785[14:12] == 3'b100 ||
	      _theResult____h4785[14:12] == 3'b001 ||
	      _theResult____h4785[14:12] == 3'b101 ||
	      _theResult____h4785[14:12] == 3'b010 ||
	      _theResult____h4785[14:12] == 3'b011;
      7'b0100011:
	  CASE_theResult__785_BITS_6_TO_0_0b11_theResult_ETC__q12 =
	      _theResult____h4785[14:12] == 3'b0 ||
	      _theResult____h4785[14:12] == 3'b001 ||
	      _theResult____h4785[14:12] == 3'b010 ||
	      _theResult____h4785[14:12] == 3'b011;
      default: CASE_theResult__785_BITS_6_TO_0_0b11_theResult_ETC__q12 =
		   _theResult____h4785[6:0] != 7'b0001111 &&
		   _theResult____h4785[6:0] != 7'b1110011 &&
		   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1062;
    endcase
  end
  always@(_theResult____h4785 or
	  CASE_theResult__785_BITS_6_TO_0_0b11_theResult_ETC__q12 or
	  IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_ETC___d949)
  begin
    case (_theResult____h4785[6:0])
      7'b0010011, 7'b0110011:
	  CASE_theResult__785_BITS_6_TO_0_0b10011_IF_NOT_ETC__q13 =
	      IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS_2_9_ETC___d949;
      default: CASE_theResult__785_BITS_6_TO_0_0b10011_IF_NOT_ETC__q13 =
		   _theResult____h4785[6:0] == 7'b0110111 ||
		   _theResult____h4785[6:0] == 7'b0010111 ||
		   CASE_theResult__785_BITS_6_TO_0_0b11_theResult_ETC__q12;
    endcase
  end
  always@(rg_cur_priv)
  begin
    case (rg_cur_priv)
      2'b0: CASE_rg_cur_priv_0b0_8_0b1_9_11__q14 = 4'd8;
      2'b01: CASE_rg_cur_priv_0b0_8_0b1_9_11__q14 = 4'd9;
      default: CASE_rg_cur_priv_0b0_8_0b1_9_11__q14 = 4'd11;
    endcase
  end
  always@(_theResult____h4785 or CASE_rg_cur_priv_0b0_8_0b1_9_11__q14)
  begin
    case (_theResult____h4785[31:20])
      12'b0:
	  CASE_theResult__785_BITS_31_TO_20_0b0_CASE_rg__ETC__q15 =
	      CASE_rg_cur_priv_0b0_8_0b1_9_11__q14;
      12'b000000000001:
	  CASE_theResult__785_BITS_31_TO_20_0b0_CASE_rg__ETC__q15 = 4'd3;
      default: CASE_theResult__785_BITS_31_TO_20_0b0_CASE_rg__ETC__q15 = 4'd2;
    endcase
  end
  always@(_theResult____h4785 or alu_outputs___1_exc_code__h14611)
  begin
    case (_theResult____h4785[6:0])
      7'b0000011,
      7'b0001111,
      7'b0010011,
      7'b0010111,
      7'b0100011,
      7'b0110011,
      7'b0110111,
      7'b1100011:
	  alu_outputs_exc_code__h14768 = 4'd2;
      7'b1100111, 7'b1101111: alu_outputs_exc_code__h14768 = 4'd0;
      7'b1110011:
	  alu_outputs_exc_code__h14768 = alu_outputs___1_exc_code__h14611;
      default: alu_outputs_exc_code__h14768 = 4'd2;
    endcase
  end
  always@(_theResult____h4785 or
	  rg_cur_priv or
	  IF_rg_cur_priv_7_EQ_0b11_095_OR_rg_cur_priv_7__ETC___d1124)
  begin
    case (_theResult____h4785[31:20])
      12'b0, 12'b000000000001:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1126 = 4'd11;
      default: IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1126 =
		   (rg_cur_priv == 2'b11 &&
		    _theResult____h4785[31:20] == 12'b001100000010) ?
		     4'd7 :
		     IF_rg_cur_priv_7_EQ_0b11_095_OR_rg_cur_priv_7__ETC___d1124;
    endcase
  end
  always@(_theResult____h4785)
  begin
    case (_theResult____h4785[14:12])
      3'b0: CASE_theResult__785_BITS_14_TO_12_0b0_4_0b1_5_11__q16 = 4'd4;
      3'b001: CASE_theResult__785_BITS_14_TO_12_0b0_4_0b1_5_11__q16 = 4'd5;
      default: CASE_theResult__785_BITS_14_TO_12_0b0_4_0b1_5_11__q16 = 4'd11;
    endcase
  end
  always@(_theResult____h4785 or
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1128)
  begin
    case (_theResult____h4785[14:12])
      3'b0:
	  CASE_theResult__785_BITS_14_TO_12_0b0_IF_IF_NO_ETC__q17 =
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1128;
      3'b001, 3'b101:
	  CASE_theResult__785_BITS_14_TO_12_0b0_IF_IF_NO_ETC__q17 = 4'd2;
      3'b010, 3'b011, 3'b110, 3'b111:
	  CASE_theResult__785_BITS_14_TO_12_0b0_IF_IF_NO_ETC__q17 = 4'd3;
      3'd4: CASE_theResult__785_BITS_14_TO_12_0b0_IF_IF_NO_ETC__q17 = 4'd11;
    endcase
  end
  always@(_theResult____h4785 or
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1086 or
	  CASE_theResult__785_BITS_14_TO_12_0b0_4_0b1_5_11__q16 or
	  IF_NOT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_P_ETC___d1082 or
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1090 or
	  IF_NOT_csr_regfile_read_mstatus__8_BITS_14_TO__ETC___d1136 or
	  CASE_theResult__785_BITS_14_TO_12_0b0_IF_IF_NO_ETC__q17)
  begin
    case (_theResult____h4785[6:0])
      7'b0000011, 7'b0000111:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1146 =
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1086;
      7'b0001111:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1146 =
	      CASE_theResult__785_BITS_14_TO_12_0b0_4_0b1_5_11__q16;
      7'b0010011, 7'b0110011:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1146 =
	      IF_NOT_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_P_ETC___d1082;
      7'b0010111, 7'b0110111:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1146 = 4'd0;
      7'b0100011, 7'b0100111:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1146 =
	      IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1090;
      7'b0101111:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1146 =
	      ((_theResult____h4785[31:27] == 5'b00010 ||
		_theResult____h4785[31:27] == 5'b00011 ||
		_theResult____h4785[31:27] == 5'b0 ||
		_theResult____h4785[31:27] == 5'b00001 ||
		_theResult____h4785[31:27] == 5'b01100 ||
		_theResult____h4785[31:27] == 5'b01000 ||
		_theResult____h4785[31:27] == 5'b00100 ||
		_theResult____h4785[31:27] == 5'b10000 ||
		_theResult____h4785[31:27] == 5'b11000 ||
		_theResult____h4785[31:27] == 5'b10100 ||
		_theResult____h4785[31:27] == 5'b11100) &&
	       _theResult____h4785[14:12] == 3'b010) ?
		4'd0 :
		4'd11;
      7'b1000011, 7'b1000111, 7'b1001011, 7'b1001111, 7'b1010011:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1146 =
	      IF_NOT_csr_regfile_read_mstatus__8_BITS_14_TO__ETC___d1136;
      7'b1110011:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1146 =
	      CASE_theResult__785_BITS_14_TO_12_0b0_IF_IF_NO_ETC__q17;
      default: IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1146 =
		   4'd11;
    endcase
  end
  always@(_theResult____h4785 or
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1146 or
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d662)
  begin
    case (_theResult____h4785[6:0])
      7'b1100011:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1150 =
	      (_theResult____h4785[14:12] != 3'b0 &&
	       _theResult____h4785[14:12] != 3'b001 &&
	       _theResult____h4785[14:12] != 3'b100 &&
	       _theResult____h4785[14:12] != 3'b101 &&
	       _theResult____h4785[14:12] != 3'b110 &&
	       _theResult____h4785[14:12] != 3'b111) ?
		4'd11 :
		(IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d662 ?
		   4'd1 :
		   4'd0);
      7'b1100111, 7'b1101111:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1150 = 4'd1;
      default: IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1150 =
		   (_theResult____h4785[6:0] == 7'b0110011 &&
		    _theResult____h4785[31:25] == 7'b0000001) ?
		     4'd0 :
		     (((_theResult____h4785[6:0] == 7'b0010011 ||
			_theResult____h4785[6:0] == 7'b0110011) &&
		       (_theResult____h4785[14:12] == 3'b001 ||
			_theResult____h4785[14:12] == 3'b101)) ?
			(_theResult____h4785[25] ? 4'd11 : 4'd0) :
			IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1146);
    endcase
  end
  always@(_theResult____h4785)
  begin
    case (_theResult____h4785[6:0])
      7'b0000011, 7'b0000111:
	  CASE_theResult__785_BITS_6_TO_0_0b11_1_0b111_1_ETC__q18 = 3'd1;
      7'b0010011, 7'b0010111, 7'b0110011, 7'b0110111:
	  CASE_theResult__785_BITS_6_TO_0_0b11_1_0b111_1_ETC__q18 = 3'd0;
      7'b0100011, 7'b0100111:
	  CASE_theResult__785_BITS_6_TO_0_0b11_1_0b111_1_ETC__q18 = 3'd2;
      7'b0101111:
	  CASE_theResult__785_BITS_6_TO_0_0b11_1_0b111_1_ETC__q18 = 3'd4;
      default: CASE_theResult__785_BITS_6_TO_0_0b11_1_0b111_1_ETC__q18 = 3'd5;
    endcase
  end
  always@(_theResult____h4785 or
	  CASE_theResult__785_BITS_6_TO_0_0b11_1_0b111_1_ETC__q18)
  begin
    case (_theResult____h4785[6:0])
      7'b1100011, 7'b1100111, 7'b1101111:
	  IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1234 = 3'd0;
      default: IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1234 =
		   (_theResult____h4785[6:0] == 7'b0110011 &&
		    _theResult____h4785[31:25] == 7'b0000001) ?
		     3'd3 :
		     CASE_theResult__785_BITS_6_TO_0_0b11_1_0b111_1_ETC__q18;
    endcase
  end
  always@(_theResult____h4785 or
	  _theResult_____1_fst__h15343 or
	  rd_val___1__h15311 or
	  rd_val___1__h15318 or rd_val___1__h15325 or rd_val___1__h15332)
  begin
    case (_theResult____h4785[14:12])
      3'b010: _theResult_____1_fst__h15315 = rd_val___1__h15311;
      3'b011: _theResult_____1_fst__h15315 = rd_val___1__h15318;
      3'b100: _theResult_____1_fst__h15315 = rd_val___1__h15325;
      3'b110: _theResult_____1_fst__h15315 = rd_val___1__h15332;
      default: _theResult_____1_fst__h15315 = _theResult_____1_fst__h15343;
    endcase
  end
  always@(_theResult____h4785 or
	  alu_outputs___1_addr__h14328 or
	  alu_outputs___1_addr__h14304 or
	  rs1_val_bypassed__h4793 or
	  alu_outputs___1_addr__h14039 or
	  alu_outputs___1_addr__h14093 or alu_outputs___1_addr__h14064)
  begin
    case (_theResult____h4785[6:0])
      7'b0000011, 7'b0000111:
	  x_out_data_to_stage2_addr__h13912 = alu_outputs___1_addr__h14304;
      7'b0100011:
	  x_out_data_to_stage2_addr__h13912 = alu_outputs___1_addr__h14328;
      7'b0101111: x_out_data_to_stage2_addr__h13912 = rs1_val_bypassed__h4793;
      7'b1100011:
	  x_out_data_to_stage2_addr__h13912 = alu_outputs___1_addr__h14039;
      7'b1100111:
	  x_out_data_to_stage2_addr__h13912 = alu_outputs___1_addr__h14093;
      7'b1101111:
	  x_out_data_to_stage2_addr__h13912 = alu_outputs___1_addr__h14064;
      default: x_out_data_to_stage2_addr__h13912 =
		   alu_outputs___1_addr__h14328;
    endcase
  end
  always@(_theResult____h4785 or imem_rg_pc or data_to_stage2_addr__h13901)
  begin
    case (_theResult____h4785[6:0])
      7'b1100111, 7'b1101111:
	  CASE_theResult__785_BITS_6_TO_0_0b1100111_data_ETC__q20 =
	      data_to_stage2_addr__h13901;
      default: CASE_theResult__785_BITS_6_TO_0_0b1100111_data_ETC__q20 =
		   (_theResult____h4785[6:0] == 7'b1110011 &&
		    _theResult____h4785[14:12] == 3'b0 &&
		    _theResult____h4785[11:7] == 5'd0 &&
		    _theResult____h4785[19:15] == 5'd0 &&
		    _theResult____h4785[31:20] == 12'b000000000001) ?
		     imem_rg_pc :
		     32'd0;
    endcase
  end
  always@(_theResult____h4785 or
	  alu_outputs___1_val1__h14744 or
	  alu_outputs___1_val1__h14241 or
	  alu_outputs___1_val1__h14279 or
	  alu_outputs___1_val1__h14639 or
	  alu_outputs___1_val1__h14260 or alu_outputs___1_val1__h14615)
  begin
    case (_theResult____h4785[6:0])
      7'b0010011, 7'b0110011:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1387 =
	      alu_outputs___1_val1__h14241;
      7'b0010111:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1387 =
	      alu_outputs___1_val1__h14279;
      7'b0101111:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1387 =
	      alu_outputs___1_val1__h14639;
      7'b0110111:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1387 =
	      alu_outputs___1_val1__h14260;
      7'b1110011:
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1387 =
	      alu_outputs___1_val1__h14615;
      default: IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1387 =
		   alu_outputs___1_val1__h14744;
    endcase
  end
  always@(_theResult____h4785 or
	  alu_outputs___1_val1__h15099 or
	  IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1388 or
	  alu_outputs___1_val1__h14065)
  begin
    case (_theResult____h4785[6:0])
      7'b1100111, 7'b1101111:
	  x_out_data_to_stage2_val1__h13913 = alu_outputs___1_val1__h14065;
      default: x_out_data_to_stage2_val1__h13913 =
		   (_theResult____h4785[6:0] == 7'b0110011 &&
		    _theResult____h4785[31:25] == 7'b0000001) ?
		     alu_outputs___1_val1__h15099 :
		     IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1388;
    endcase
  end
  always@(x_out_data_to_stage2_instr__h13909 or
	  x_out_data_to_stage2_val1__h13913)
  begin
    case (x_out_data_to_stage2_instr__h13909[14:12])
      3'b010, 3'b011:
	  rs1_val__h22321 = x_out_data_to_stage2_val1__h13913[31:0];
      default: rs1_val__h22321 =
		   { 27'd0, x_out_data_to_stage2_instr__h13909[19:15] };
    endcase
  end
  always@(_theResult____h4785 or
	  frs2_val_bypassed__h4809 or
	  alu_outputs___1_val2__h14330 or alu_outputs___1_val2__h15100)
  begin
    case (_theResult____h4785[6:0])
      7'b0100011, 7'b0100111:
	  CASE_theResult__785_BITS_6_TO_0_0b100011_alu_o_ETC__q21 =
	      alu_outputs___1_val2__h14330;
      7'b0101111:
	  CASE_theResult__785_BITS_6_TO_0_0b100011_alu_o_ETC__q21 =
	      alu_outputs___1_val2__h15100;
      default: CASE_theResult__785_BITS_6_TO_0_0b100011_alu_o_ETC__q21 =
		   frs2_val_bypassed__h4809;
    endcase
  end
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[235:233])
      3'd1, 3'd4:
	  CASE_stage2_rg_stage2_BITS_235_TO_233_1_stage2_ETC__q22 =
	      stage2_rg_stage2[3];
      default: CASE_stage2_rg_stage2_BITS_235_TO_233_1_stage2_ETC__q22 =
		   stage2_rg_stage2[235:233] != 3'd2 &&
		   stage2_rg_stage2[235:233] != 3'd3 &&
		   stage2_rg_stage2[3];
    endcase
  end
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[235:233])
      3'd1, 3'd4:
	  CASE_stage2_rg_stage2_BITS_235_TO_233_1_NOT_st_ETC__q23 =
	      !stage2_rg_stage2[3];
      default: CASE_stage2_rg_stage2_BITS_235_TO_233_1_NOT_st_ETC__q23 =
		   stage2_rg_stage2[235:233] == 3'd2 ||
		   stage2_rg_stage2[235:233] == 3'd3 ||
		   !stage2_rg_stage2[3];
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_logdelay <= `BSV_ASSIGNMENT_DELAY 64'd0;
	cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	rg_cur_priv <= `BSV_ASSIGNMENT_DELAY 2'b11;
	rg_halt <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 4'd0;
	stage1_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stage2_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stage2_rg_resetting <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stage3_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (cfg_logdelay$EN)
	  cfg_logdelay <= `BSV_ASSIGNMENT_DELAY cfg_logdelay$D_IN;
	if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (rg_cur_priv$EN)
	  rg_cur_priv <= `BSV_ASSIGNMENT_DELAY rg_cur_priv$D_IN;
	if (rg_halt$EN) rg_halt <= `BSV_ASSIGNMENT_DELAY rg_halt$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
	if (stage1_rg_full$EN)
	  stage1_rg_full <= `BSV_ASSIGNMENT_DELAY stage1_rg_full$D_IN;
	if (stage2_rg_full$EN)
	  stage2_rg_full <= `BSV_ASSIGNMENT_DELAY stage2_rg_full$D_IN;
	if (stage2_rg_resetting$EN)
	  stage2_rg_resetting <= `BSV_ASSIGNMENT_DELAY
	      stage2_rg_resetting$D_IN;
	if (stage3_rg_full$EN)
	  stage3_rg_full <= `BSV_ASSIGNMENT_DELAY stage3_rg_full$D_IN;
      end
    if (imem_rg_f3$EN) imem_rg_f3 <= `BSV_ASSIGNMENT_DELAY imem_rg_f3$D_IN;
    if (imem_rg_instr_15_0$EN)
      imem_rg_instr_15_0 <= `BSV_ASSIGNMENT_DELAY imem_rg_instr_15_0$D_IN;
    if (imem_rg_mstatus_MXR$EN)
      imem_rg_mstatus_MXR <= `BSV_ASSIGNMENT_DELAY imem_rg_mstatus_MXR$D_IN;
    if (imem_rg_pc$EN) imem_rg_pc <= `BSV_ASSIGNMENT_DELAY imem_rg_pc$D_IN;
    if (imem_rg_priv$EN)
      imem_rg_priv <= `BSV_ASSIGNMENT_DELAY imem_rg_priv$D_IN;
    if (imem_rg_satp$EN)
      imem_rg_satp <= `BSV_ASSIGNMENT_DELAY imem_rg_satp$D_IN;
    if (imem_rg_sstatus_SUM$EN)
      imem_rg_sstatus_SUM <= `BSV_ASSIGNMENT_DELAY imem_rg_sstatus_SUM$D_IN;
    if (rg_next_pc$EN) rg_next_pc <= `BSV_ASSIGNMENT_DELAY rg_next_pc$D_IN;
    if (rg_start_CPI_cycles$EN)
      rg_start_CPI_cycles <= `BSV_ASSIGNMENT_DELAY rg_start_CPI_cycles$D_IN;
    if (rg_start_CPI_instrs$EN)
      rg_start_CPI_instrs <= `BSV_ASSIGNMENT_DELAY rg_start_CPI_instrs$D_IN;
    if (stage2_rg_stage2$EN)
      stage2_rg_stage2 <= `BSV_ASSIGNMENT_DELAY stage2_rg_stage2$D_IN;
    if (stage3_rg_stage3$EN)
      stage3_rg_stage3 <= `BSV_ASSIGNMENT_DELAY stage3_rg_stage3$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_logdelay = 64'hAAAAAAAAAAAAAAAA;
    cfg_verbosity = 4'hA;
    imem_rg_f3 = 3'h2;
    imem_rg_instr_15_0 = 16'hAAAA;
    imem_rg_mstatus_MXR = 1'h0;
    imem_rg_pc = 32'hAAAAAAAA;
    imem_rg_priv = 2'h2;
    imem_rg_satp = 32'hAAAAAAAA;
    imem_rg_sstatus_SUM = 1'h0;
    rg_cur_priv = 2'h2;
    rg_halt = 1'h0;
    rg_next_pc = 32'hAAAAAAAA;
    rg_start_CPI_cycles = 64'hAAAAAAAAAAAAAAAA;
    rg_start_CPI_instrs = 64'hAAAAAAAAAAAAAAAA;
    rg_state = 4'hA;
    stage1_rg_full = 1'h0;
    stage2_rg_full = 1'h0;
    stage2_rg_resetting = 1'h0;
    stage2_rg_stage2 =
	302'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    stage3_rg_full = 1'h0;
    stage3_rg_stage3 = 143'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("%0d: Pipeline State:  minstret:%0d  cur_priv:%0d  mstatus:%0x",
		 csr_regfile$read_csr_mcycle,
		 csr_regfile$read_csr_minstret,
		 rg_cur_priv,
		 csr_regfile$read_mstatus);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write("MStatus{",
	       "sd:%0d",
	       csr_regfile$read_mstatus[14:13] == 2'h3 ||
	       csr_regfile$read_mstatus[16:15] == 2'h3);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && csr_regfile$read_misa[27:26] == 2'd2)
	$write(" sxl:%0d uxl:%0d", 2'd0, 2'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && csr_regfile$read_misa[27:26] != 2'd2)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" tsr:%0d", csr_regfile$read_mstatus[22]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" tw:%0d", csr_regfile$read_mstatus[21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" tvm:%0d", csr_regfile$read_mstatus[20]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" mxr:%0d", csr_regfile$read_mstatus[19]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" sum:%0d", csr_regfile$read_mstatus[18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" mprv:%0d", csr_regfile$read_mstatus[17]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" xs:%0d", csr_regfile$read_mstatus[16:15]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" fs:%0d", csr_regfile$read_mstatus[14:13]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" mpp:%0d", csr_regfile$read_mstatus[12:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" spp:%0d", csr_regfile$read_mstatus[8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" pies:%0d_%0d%0d",
	       csr_regfile$read_mstatus[7],
	       csr_regfile$read_mstatus[5],
	       csr_regfile$read_mstatus[4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" ies:%0d_%0d%0d",
	       csr_regfile$read_mstatus[3],
	       csr_regfile$read_mstatus[1],
	       csr_regfile$read_mstatus[0]);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("    Stage3: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Output_Stage3");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage3_rg_full) $write(" PIPE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage3_rg_full) $write(" EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        Bypass  to Stage1: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Bypass {");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  (stage3_rg_stage3[69] || !stage3_rg_full || !stage3_rg_stage3[76]))
	$write("Rd -");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage3_rg_stage3[69] &&
	  stage3_rg_full &&
	  stage3_rg_stage3[76])
	$write("Rd %0d ", stage3_rg_stage3[75:71]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  (stage3_rg_stage3[69] || !stage3_rg_full || !stage3_rg_stage3[76]))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage3_rg_stage3[69] &&
	  stage3_rg_full &&
	  stage3_rg_stage3[76])
	$write("rd_val:%h", stage3_rg_stage3[31:0]);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        FBypass to Stage1: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("FBypass {");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  (!stage3_rg_stage3[69] || !stage3_rg_full || !stage3_rg_stage3[76]))
	$write("FRd -");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage3_rg_stage3[69] &&
	  stage3_rg_full &&
	  stage3_rg_stage3[76])
	$write("FRd %0d ", stage3_rg_stage3[75:71]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  (!stage3_rg_stage3[69] || !stage3_rg_full || !stage3_rg_stage3[76]))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage3_rg_stage3[69] &&
	  stage3_rg_full &&
	  stage3_rg_stage3[76])
	$write("frd_val:%h", stage3_rg_stage3[63:0]);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("    Stage2: pc 0x%08h instr 0x%08h priv %0d",
		 stage2_rg_stage2[299:268],
		 stage2_rg_stage2[267:236],
		 stage2_rg_stage2[301:300]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd0)
	$write("Output_Stage2", " EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd1)
	$write("Output_Stage2", " BUSY: pc:%0h", stage2_rg_stage2[299:268]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd3)
	$write("Output_Stage2", " NONPIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd0 &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd1 &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd3)
	$write("Output_Stage2", " PIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd0 &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd1 &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd3)
	$write("data_to_Stage3 {pc:%h  instr:%h  priv:%0d\n",
	       stage2_rg_stage2[299:268],
	       stage2_rg_stage2[267:236],
	       stage2_rg_stage2[301:300]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd0 &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd1 &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd3)
	$write("        rd_valid:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd0 &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd1 &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd3 &&
	  stage2_rg_stage2[235:233] != 3'd0 &&
	  IF_stage2_rg_stage2_9_BITS_235_TO_233_00_EQ_1__ETC___d150)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd0 &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd1 &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd3 &&
	  (stage2_rg_stage2[235:233] == 3'd0 ||
	   IF_stage2_rg_stage2_9_BITS_235_TO_233_00_EQ_1__ETC___d160))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd0 &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd1 &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd3 &&
	  stage2_rg_stage2[235:233] != 3'd0 &&
	  stage2_rg_stage2[235:233] != 3'd1 &&
	  stage2_rg_stage2[235:233] != 3'd4 &&
	  stage2_rg_stage2[235:233] != 3'd2 &&
	  stage2_rg_stage2[235:233] != 3'd3)
	$write("  fflags: %05b",
	       "'h%h",
	       x_out_data_to_stage3_fpr_flags__h6352);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd0 &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd1 &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd3 &&
	  (stage2_rg_stage2[235:233] == 3'd0 ||
	   stage2_rg_stage2[235:233] == 3'd1 ||
	   stage2_rg_stage2[235:233] == 3'd4 ||
	   stage2_rg_stage2[235:233] == 3'd2 ||
	   stage2_rg_stage2[235:233] == 3'd3))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd0 &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd1 &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd3 &&
	  stage2_rg_stage2[235:233] != 3'd0 &&
	  CASE_stage2_rg_stage2_BITS_235_TO_233_1_stage2_ETC__q22)
	$write("  frd:%0d  rd_val:%h\n",
	       x_out_data_to_stage3_rd__h6349,
	       x_out_data_to_stage3_rd_val__h6353);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd0 &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd1 &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd3 &&
	  (stage2_rg_stage2[235:233] == 3'd0 ||
	   CASE_stage2_rg_stage2_BITS_235_TO_233_1_NOT_st_ETC__q23))
	$write("  grd:%0d  rd_val:%h\n",
	       x_out_data_to_stage3_rd__h6349,
	       x_out_data_to_stage3_rd_val__h6353);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd3)
	$write("Trap_Info { ", "epc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd0 &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd1 &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd3)
	$write("'h%h", value__h6595);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd0 &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd1 &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd3)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd0 &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd1 &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd3)
	$write("'h%h", x_out_trap_info_exc_code__h6632);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd0 &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd1 &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd3)
	$write(", ", "tval: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd0 &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd1 &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd3)
	$write("'h%h", value__h6656, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd0 &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd1 &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd3)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd0 &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd1 &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd3)
	$write("Trap_Info { ", "epc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd0 &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd1 &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd3)
	$write("'h%h", value__h6595);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd0 &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd1 &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd3)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd0 &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd1 &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd3)
	$write("'h%h", x_out_trap_info_exc_code__h6632);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd0 &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd1 &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd3)
	$write(", ", "tval: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd0 &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd1 &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd3)
	$write("'h%h", value__h6656, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd0 &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd1 &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        Bypass  to Stage1: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Bypass {");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d258 == 2'd0)
	$write("Rd -");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d258 != 2'd0)
	$write("Rd %0d ", x_out_bypass_rd__h6886);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d258 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d258 == 2'd1)
	$write("-");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d258 != 2'd0 &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d258 != 2'd1)
	$write("rd_val:%h", x_out_bypass_rd_val__h6887);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        FBypass to Stage1: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("FBypass {");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_NOT_stage2_rg_full_8_32_OR_stage2_rg_stage2_ETC___d282 == 2'd0)
	$write("FRd -");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_NOT_stage2_rg_full_8_32_OR_stage2_rg_stage2_ETC___d282 != 2'd0)
	$write("FRd %0d ", x_out_fbypass_rd__h7034);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_NOT_stage2_rg_full_8_32_OR_stage2_rg_stage2_ETC___d282 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_NOT_stage2_rg_full_8_32_OR_stage2_rg_stage2_ETC___d282 == 2'd1)
	$write("-");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_NOT_stage2_rg_full_8_32_OR_stage2_rg_stage2_ETC___d282 != 2'd0 &&
	  IF_NOT_stage2_rg_full_8_32_OR_stage2_rg_stage2_ETC___d282 != 2'd1)
	$write("frd_val:%h", x_out_fbypass_rd_val__h7035);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("    Stage1: pc 0x%08h instr 0x%08h priv %0d",
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h13909,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_00_OR_NOT_near_mem_ime_ETC___d597)
	$write("Output_Stage1", " BUSY pc:%h", imem_rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d932)
	$write("Output_Stage1", " NONPIPE: pc:%h", imem_rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d1077)
	$write("Output_Stage1");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full)
	$write("Output_Stage1", " EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_00_OR_NOT_near_mem_ime_ETC___d597)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d932)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d1077)
	$write(" PIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_00_OR_NOT_near_mem_ime_ETC___d597)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d932)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d612 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1072 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1074) &&
	  IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 == 4'd0)
	$write("CONTROL_STRAIGHT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d612 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1072 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1074) &&
	  IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 == 4'd1)
	$write("CONTROL_BRANCH");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d612 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1072 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1074) &&
	  IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 == 4'd2)
	$write("CONTROL_CSRR_W");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d612 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1072 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1074) &&
	  IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 == 4'd3)
	$write("CONTROL_CSRR_S_or_C");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d612 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1072 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1074) &&
	  IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 == 4'd4)
	$write("CONTROL_FENCE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d612 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1072 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1074) &&
	  IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 == 4'd5)
	$write("CONTROL_FENCE_I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d612 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1072 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1074) &&
	  IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 == 4'd6)
	$write("CONTROL_SFENCE_VMA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d612 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1072 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1074) &&
	  IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 == 4'd7)
	$write("CONTROL_MRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d612 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1072 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1074) &&
	  IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 == 4'd8)
	$write("CONTROL_SRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d612 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1072 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1074) &&
	  IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 == 4'd9)
	$write("CONTROL_URET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d612 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1072 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1074) &&
	  IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1152 == 4'd10)
	$write("CONTROL_WFI");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d612 &&
	  NOT_near_mem_imem_exc__13_34_AND_IF_IF_NOT_nea_ETC___d1218)
	$write("CONTROL_TRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_00_OR_NOT_near_mem_ime_ETC___d597)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d932)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d1077)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_00_OR_NOT_near_mem_ime_ETC___d597)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d932)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d1077)
	$write("data_to_Stage 2 {pc:%h  instr:%h  priv:%0d\n",
	       imem_rg_pc,
	       x_out_data_to_stage2_instr__h13909,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_00_OR_NOT_near_mem_ime_ETC___d597)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d932)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d1077)
	$write("            op_stage2:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_00_OR_NOT_near_mem_ime_ETC___d597)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d932)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d612 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1072 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1074) &&
	  IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1234 == 3'd0)
	$write("OP_Stage2_ALU");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d612 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1072 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1074) &&
	  IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1234 == 3'd1)
	$write("OP_Stage2_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d612 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1072 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1074) &&
	  IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1234 == 3'd2)
	$write("OP_Stage2_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d612 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1072 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1074) &&
	  IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1234 == 3'd3)
	$write("OP_Stage2_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d612 &&
	  !near_mem$imem_exc &&
	  (IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1072 ||
	   IF_IF_NOT_near_mem_imem_pc_EQ_imem_rg_pc_PLUS__ETC___d1074) &&
	  IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1234 == 3'd4)
	$write("OP_Stage2_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d612 &&
	  NOT_near_mem_imem_exc__13_34_AND_IF_IF_NOT_nea_ETC___d1264)
	$write("OP_Stage2_FD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_00_OR_NOT_near_mem_ime_ETC___d597)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d932)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d1077)
	$write("  rd:%0d\n", x_out_data_to_stage2_rd__h13911);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_00_OR_NOT_near_mem_ime_ETC___d597)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d932)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d1077)
	$write("            addr:%h  val1:%h  val2:%h  val3:%h}",
	       x_out_data_to_stage2_addr__h13912,
	       x_out_data_to_stage2_val1__h13913,
	       x_out_data_to_stage2_val2__h13914,
	       x_out_data_to_stage2_val3__h13915);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_00_OR_NOT_near_mem_ime_ETC___d597)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d932)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d1077)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_00_OR_NOT_near_mem_ime_ETC___d597)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d612 &&
	  near_mem_imem_exc__13_OR_IF_IF_NOT_near_mem_im_ETC___d1433)
	$write("CONTROL_STRAIGHT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d612 &&
	  near_mem_imem_exc__13_OR_IF_IF_NOT_near_mem_im_ETC___d1436)
	$write("CONTROL_BRANCH");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d612 &&
	  near_mem_imem_exc__13_OR_IF_IF_NOT_near_mem_im_ETC___d1439)
	$write("CONTROL_CSRR_W");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d612 &&
	  near_mem_imem_exc__13_OR_IF_IF_NOT_near_mem_im_ETC___d1442)
	$write("CONTROL_CSRR_S_or_C");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d612 &&
	  near_mem_imem_exc__13_OR_IF_IF_NOT_near_mem_im_ETC___d1445)
	$write("CONTROL_FENCE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d612 &&
	  near_mem_imem_exc__13_OR_IF_IF_NOT_near_mem_im_ETC___d1448)
	$write("CONTROL_FENCE_I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d612 &&
	  near_mem_imem_exc__13_OR_IF_IF_NOT_near_mem_im_ETC___d1451)
	$write("CONTROL_SFENCE_VMA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d612 &&
	  near_mem_imem_exc__13_OR_IF_IF_NOT_near_mem_im_ETC___d1454)
	$write("CONTROL_MRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d612 &&
	  near_mem_imem_exc__13_OR_IF_IF_NOT_near_mem_im_ETC___d1457)
	$write("CONTROL_SRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d612 &&
	  near_mem_imem_exc__13_OR_IF_IF_NOT_near_mem_im_ETC___d1460)
	$write("CONTROL_URET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d612 &&
	  near_mem_imem_exc__13_OR_IF_IF_NOT_near_mem_im_ETC___d1463)
	$write("CONTROL_WFI");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d612 &&
	  near_mem_imem_exc__13_OR_IF_IF_NOT_near_mem_im_ETC___d1466)
	$write("CONTROL_TRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d1077)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_00_OR_NOT_near_mem_ime_ETC___d597)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d932)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d1077)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_00_OR_NOT_near_mem_ime_ETC___d597)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d932)
	$write("Trap_Info { ", "epc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d1077)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_00_OR_NOT_near_mem_ime_ETC___d597)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d932)
	$write("'h%h", imem_rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d1077)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_00_OR_NOT_near_mem_ime_ETC___d597)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d932)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d1077)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_00_OR_NOT_near_mem_ime_ETC___d597)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d932)
	$write("'h%h", x_out_trap_info_exc_code__h16824);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d1077)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_00_OR_NOT_near_mem_ime_ETC___d597)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d932)
	$write(", ", "tval: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d1077)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_00_OR_NOT_near_mem_ime_ETC___d597)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d932)
	$write("'h%h", value__h16876, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d1077)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_00_OR_NOT_near_mem_ime_ETC___d597)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_near_mem_imem_pc_EQ_im_ETC___d612)
	$write(" next_pc 0x%08h", x_out_next_pc__h13875);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $display("----------------");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && cur_verbosity__h3374 != 4'd0)
	$display("%0d: CPU.reset_complete", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete &&
	  NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45)
	$display("    CPU_Stage1.enq: 0x%08x",
		 soc_map$m_pc_reset_value[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && cur_verbosity__h3374 != 4'd0)
	$display("    fa_restart: RUNNING with PC = 0x%0h",
		 soc_map$m_pc_reset_value[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage2_nonpipe &&
	  NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45)
	$display("%0d: CPU.rl_stage2_nonpipe", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage2_nonpipe &&
	  NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45)
	$display("    CPU_Stage1.enq: 0x%08x",
		 csr_regfile$csr_trap_actions[97:66]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage2_nonpipe && cur_verbosity__h3374 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 value__h6595,
		 stage2_rg_stage2[267:236],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage2_nonpipe && cur_verbosity__h3374 != 4'd0)
	$display("    mcause:0x%0h  epc 0x%0h  tval:0x%0h  new pc 0x%0h, new mstatus 0x%0h",
		 csr_regfile$csr_trap_actions[33:2],
		 value__h6595,
		 value__h6656,
		 csr_regfile$csr_trap_actions[97:66],
		 csr_regfile$csr_trap_actions[65:34]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W &&
	  NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45)
	$display("%0d:  CPU.rl_stage1_CSRR_W", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W && csr_regfile$access_permitted_1 &&
	  cur_verbosity__h3374 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h13909,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W && csr_regfile$access_permitted_1 &&
	  NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45)
	$display("    S1: write CSRRW/CSRRWI Rs1 %0d Rs1_val 0x%0h csr 0x%0h csr_val 0x%0h Rd %0d",
		 x_out_data_to_stage2_instr__h13909[19:15],
		 rs1_val__h21828,
		 x_out_data_to_stage2_instr__h13909[31:20],
		 csr_regfile$read_csr[31:0],
		 x_out_data_to_stage2_instr__h13909[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W && !csr_regfile$access_permitted_1 &&
	  cur_verbosity__h3374 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h13909,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W && !csr_regfile$access_permitted_1 &&
	  NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45)
	$display("    rl_stage1_CSRR_W: Trap on CSR permissions: Rs1 %0d Rs1_val 0x%0h csr 0x%0h Rd %0d",
		 x_out_data_to_stage2_instr__h13909[19:15],
		 rs1_val__h21828,
		 x_out_data_to_stage2_instr__h13909[31:20],
		 x_out_data_to_stage2_instr__h13909[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	  NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45)
	$display("%0d:  CPU.rl_stage1_CSRR_S_or_C",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	  csr_regfile$access_permitted_2 &&
	  cur_verbosity__h3374 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h13909,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	  csr_regfile$access_permitted_2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45)
	$display("    S1: write CSRR_S_or_C: Rs1 %0d Rs1_val 0x%0h csr 0x%0h csr_val 0x%0h Rd %0d",
		 x_out_data_to_stage2_instr__h13909[19:15],
		 rs1_val__h22321,
		 x_out_data_to_stage2_instr__h13909[31:20],
		 csr_regfile$read_csr[31:0],
		 x_out_data_to_stage2_instr__h13909[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	  !csr_regfile$access_permitted_2 &&
	  cur_verbosity__h3374 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h13909,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	  !csr_regfile$access_permitted_2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45)
	$display("    rl_stage1_CSRR_S_or_C: Trap on CSR permissions: Rs1 %0d Rs1_val 0x%0h csr 0x%0h Rd %0d",
		 x_out_data_to_stage2_instr__h13909[19:15],
		 rs1_val__h22321,
		 x_out_data_to_stage2_instr__h13909[31:20],
		 x_out_data_to_stage2_instr__h13909[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	  NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45)
	$display("    CPU_Stage1.enq: 0x%08x", x_out_next_pc__h13875);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	  NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45)
	$display("%0d: rl_stage1_restart_after_csrrx: minstret:%0d  pc:%0x  cur_priv:%0d",
		 csr_regfile$read_csr_mcycle,
		 csr_regfile$read_csr_minstret,
		 x_out_next_pc__h13875,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET &&
	  NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45)
	$display("%0d:  CPU.rl_stage1_xRET", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET &&
	  NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45)
	$display("    CPU_Stage1.enq: 0x%08x",
		 csr_regfile$csr_ret_actions[65:34]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET && cur_verbosity__h3374 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h13909,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET && cur_verbosity__h3374 != 4'd0)
	$display("    xRET: next_pc:0x%0h  new mstatus:0x%0h  new priv:%0d",
		 csr_regfile$csr_ret_actions[65:34],
		 csr_regfile$csr_ret_actions[31:0],
		 csr_regfile$csr_ret_actions[33:32]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45)
	$display("%0d:  CPU.rl_stage1_FENCE_I", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE_I && cur_verbosity__h3374 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h13909,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45)
	$display("%0d: CPU.rl_stage1_FENCE_I", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45)
	$display("%0d:  CPU.rl_finish_FENCE_I", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45)
	$display("    CPU_Stage1.enq: 0x%08x", rg_next_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45)
	$display("    CPU.rl_finish_FENCE_I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45)
	$display("%0d:  CPU.rl_stage1_FENCE", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE && cur_verbosity__h3374 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h13909,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45)
	$display("%0d: CPU.rl_stage1_FENCE", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45)
	$display("%0d:  CPU.rl_finish_FENCE", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45)
	$display("    CPU_Stage1.enq: 0x%08x", rg_next_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45)
	$display("    CPU.rl_finish_FENCE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45)
	$display("%0d:  CPU.rl_finish_SFENCE_VMA",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45)
	$display("    CPU_Stage1.enq: 0x%08x", rg_next_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45)
	$display("    CPU.rl_finish_SFENCE_VMA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_WFI &&
	  NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45)
	$display("%0d:  CPU.rl_stage1_WFI", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_WFI && cur_verbosity__h3374 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h13909,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_WFI &&
	  NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45)
	$display("    CPU.rl_stage1_WFI");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume &&
	  NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45)
	$display("%0d:  CPU.rl_WFI_resume", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume && cur_verbosity__h3374 != 4'd0)
	$display("    WFI resume");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume &&
	  NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45)
	$display("    CPU_Stage1.enq: 0x%08x", rg_next_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_from_WFI &&
	  NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45)
	$display("%0d:  CPU.rl_reset_from_WFI", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45)
	$display("%0d:  CPU.rl_stage1_trap", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45)
	$display("    CPU_Stage1.enq: 0x%08x",
		 csr_regfile$csr_trap_actions[97:66]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1806)
	$display("%0d: CPU.rl_stage1_trap: Tight infinite trap loop: pc 0x%0x instr 0x%08x",
		 csr_regfile$read_csr_mcycle,
		 csr_regfile$csr_trap_actions[97:66],
		 x_out_data_to_stage2_instr__h13909);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1806)
	$display("CPI: %0d.%0d = (%0d/%0d) since last 'continue'",
		 cpi__h27277,
		 cpifrac__h27278,
		 delta_CPI_cycles__h27273,
		 _theResult____h27275);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  IF_NOT_stage1_rg_full_98_99_OR_NOT_near_mem_im_ETC___d1806)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap && cur_verbosity__h3374 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h13909,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap && cur_verbosity__h3374 != 4'd0)
	$display("%0d: CPU.rl_stage1_trap: priv:%0d  mcause:0x%0h  epc:0x%0h",
		 csr_regfile$read_csr_mcycle,
		 rg_cur_priv,
		 csr_regfile$csr_trap_actions[33:2],
		 imem_rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap && cur_verbosity__h3374 != 4'd0)
	$display("    tval:0x%0h  new pc:0x%0h  new mstatus:0x%0h",
		 value__h16876,
		 csr_regfile$csr_trap_actions[97:66],
		 csr_regfile$csr_trap_actions[65:34]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_interrupt &&
	  NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45)
	$display("%0d:  CPU.rl_stage1_interrupt",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_interrupt &&
	  NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45)
	$display("    CPU_Stage1.enq: 0x%08x",
		 csr_regfile$csr_trap_actions[97:66]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_interrupt && cur_verbosity__h3374 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h13909,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_interrupt && cur_verbosity__h3374 != 4'd0)
	$display("%0d: CPU.rl_stage1_interrupt: epc 0x%0h  next PC 0x%0h  new_priv %0d  new mstatus 0x%0h",
		 csr_regfile$read_csr_mcycle,
		 imem_rg_pc,
		 csr_regfile$csr_trap_actions[97:66],
		 csr_regfile$csr_trap_actions[1:0],
		 csr_regfile$csr_trap_actions[65:34]);
    if (WILL_FIRE_RL_imem_rl_assert_fail)
      $display("ERROR: CPU_Fetch_C: imem32.is_i32_not_i16 is False");
    if (WILL_FIRE_RL_imem_rl_assert_fail) $finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45)
	$display("%0d: CPU.rl_pipe", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe && stage3_rg_full && stage3_rg_stage3[76] &&
	  NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45 &&
	  stage3_rg_stage3[69])
	$display("    S3.fa_deq: write FRd 0x%0h, rd_val 0x%0h",
		 stage3_rg_stage3[75:71],
		 stage3_rg_stage3[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe && stage3_rg_full && stage3_rg_stage3[76] &&
	  NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45 &&
	  !stage3_rg_stage3[69])
	$display("    S3.fa_deq: write GRd 0x%0h, rd_val 0x%0h",
		 stage3_rg_stage3[75:71],
		 stage3_rg_stage3[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45)
	$write("    S3.enq: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45)
	$write("data_to_Stage3 {pc:%h  instr:%h  priv:%0d\n",
	       stage2_rg_stage2[299:268],
	       stage2_rg_stage2[267:236],
	       stage2_rg_stage2[301:300]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45)
	$write("        rd_valid:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45 &&
	  stage2_rg_stage2[235:233] != 3'd0 &&
	  IF_stage2_rg_stage2_9_BITS_235_TO_233_00_EQ_1__ETC___d150)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45 &&
	  (stage2_rg_stage2[235:233] == 3'd0 ||
	   IF_stage2_rg_stage2_9_BITS_235_TO_233_00_EQ_1__ETC___d160))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45 &&
	  stage2_rg_stage2[235:233] != 3'd0 &&
	  stage2_rg_stage2[235:233] != 3'd1 &&
	  stage2_rg_stage2[235:233] != 3'd4 &&
	  stage2_rg_stage2[235:233] != 3'd2 &&
	  stage2_rg_stage2[235:233] != 3'd3)
	$write("  fflags: %05b",
	       "'h%h",
	       x_out_data_to_stage3_fpr_flags__h6352);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45 &&
	  (stage2_rg_stage2[235:233] == 3'd0 ||
	   stage2_rg_stage2[235:233] == 3'd1 ||
	   stage2_rg_stage2[235:233] == 3'd4 ||
	   stage2_rg_stage2[235:233] == 3'd2 ||
	   stage2_rg_stage2[235:233] == 3'd3))
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d1629)
	$write("  frd:%0d  rd_val:%h\n",
	       x_out_data_to_stage3_rd__h6349,
	       x_out_data_to_stage3_rd_val__h6353);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d1631)
	$write("  grd:%0d  rd_val:%h\n",
	       x_out_data_to_stage3_rd__h6349,
	       x_out_data_to_stage3_rd_val__h6353);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_8_THEN_IF_stage2_rg_stage2_9_ETC___d134 == 2'd2 &&
	  cur_verbosity__h3374 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 stage2_rg_stage2[299:268],
		 stage2_rg_stage2[267:236],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_rg_halt_562_586_AND_NOT_csr_regfile_interr_ETC___d1636 &&
	  NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45)
	$display("    CPU_Stage2.enq (Data_Stage1_to_Stage2)");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_rg_halt_562_586_AND_NOT_csr_regfile_interr_ETC___d1693 &&
	  NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45)
	$display("    CPU_Stage1.enq: 0x%08x", x_out_next_pc__h13875);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45)
	$display("%0d:  CPU.rl_stage1_SFENCE_VMA",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_SFENCE_VMA && cur_verbosity__h3374 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h13909,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__9_ULT_cf_ETC___d45)
	$display("%0d: CPU.rl_stage1_SFENCE_VMA",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$write("CPU: Bluespec  RISC-V  Piccolo  v3.0");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start) $display(" (RV32)");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$display("Copyright (c) 2016-2019 Bluespec, Inc. All Rights Reserved.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start && cur_verbosity__h3374 != 4'd0)
	$display("%0d: CPU.rl_reset_start", csr_regfile$read_csr_mcycle);
  end
  // synopsys translate_on
endmodule  // mkCPU

