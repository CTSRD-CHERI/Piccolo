//
// Generated by Bluespec Compiler, version 2018.10.beta1 (build e1df8052c, 2018-10-17)
//
//
//
//
// Ports:
// Name                         I/O  size props
// RDY_set_verbosity              O     1 const
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1
// valid                          O     1
// addr                           O    32 reg
// word64                         O    64
// st_amo_val                     O    64
// exc                            O     1
// exc_code                       O     4 reg
// RDY_server_flush_request_put   O     1 reg
// RDY_server_flush_response_get  O     1
// RDY_tlb_flush                  O     1 const
// mem_master_awvalid             O     1
// mem_master_awid                O     4 reg
// mem_master_awaddr              O    64 reg
// mem_master_awlen               O     8 reg
// mem_master_awsize              O     3 reg
// mem_master_awburst             O     2 reg
// mem_master_awlock              O     1 reg
// mem_master_awcache             O     4 reg
// mem_master_awprot              O     3 reg
// mem_master_awqos               O     4 reg
// mem_master_awregion            O     4 reg
// mem_master_wvalid              O     1
// mem_master_wid                 O     4 reg
// mem_master_wdata               O    64 reg
// mem_master_wstrb               O     8 reg
// mem_master_wlast               O     1 reg
// mem_master_bready              O     1
// mem_master_arvalid             O     1
// mem_master_arid                O     4 reg
// mem_master_araddr              O    64 reg
// mem_master_arlen               O     8 reg
// mem_master_arsize              O     3 reg
// mem_master_arburst             O     2 reg
// mem_master_arlock              O     1 reg
// mem_master_arcache             O     4 reg
// mem_master_arprot              O     3 reg
// mem_master_arqos               O     4 reg
// mem_master_arregion            O     4 reg
// mem_master_rready              O     1
// near_mem_io_client_request_get  O   137 reg
// RDY_near_mem_io_client_request_get  O     1 reg
// RDY_near_mem_io_client_response_put  O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_verbosity_verbosity        I     4 reg
// req_op                         I     2
// req_f3                         I     3
// req_amo_funct7                 I     7 reg
// req_addr                       I    32
// req_st_value                   I    64
// req_priv                       I     2 reg
// req_sstatus_SUM                I     1 reg
// req_mstatus_MXR                I     1 reg
// req_satp                       I    32 reg
// mem_master_awready             I     1
// mem_master_wready              I     1
// mem_master_bvalid              I     1
// mem_master_bid                 I     4 reg
// mem_master_bresp               I     2 reg
// mem_master_arready             I     1
// mem_master_rvalid              I     1
// mem_master_rid                 I     4 reg
// mem_master_rdata               I    64 reg
// mem_master_rresp               I     2 reg
// mem_master_rlast               I     1 reg
// near_mem_io_client_response_put  I    66 reg
// EN_set_verbosity               I     1
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_req                         I     1
// EN_server_flush_request_put    I     1
// EN_server_flush_response_get   I     1
// EN_tlb_flush                   I     1
// EN_near_mem_io_client_response_put  I     1
// EN_near_mem_io_client_request_get  I     1
//
// Combinational paths from inputs to outputs:
//   (mem_master_awready, mem_master_wready) -> valid
//   (mem_master_awready, mem_master_wready) -> word64
//   (mem_master_awready, mem_master_wready) -> st_amo_val
//   (mem_master_awready, mem_master_wready) -> mem_master_bready
//   (mem_master_awready,
//    mem_master_wready,
//    mem_master_arready,
//    EN_req) -> mem_master_rready
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMMU_Cache(CLK,
		   RST_N,

		   set_verbosity_verbosity,
		   EN_set_verbosity,
		   RDY_set_verbosity,

		   EN_server_reset_request_put,
		   RDY_server_reset_request_put,

		   EN_server_reset_response_get,
		   RDY_server_reset_response_get,

		   req_op,
		   req_f3,
		   req_amo_funct7,
		   req_addr,
		   req_st_value,
		   req_priv,
		   req_sstatus_SUM,
		   req_mstatus_MXR,
		   req_satp,
		   EN_req,

		   valid,

		   addr,

		   word64,

		   st_amo_val,

		   exc,

		   exc_code,

		   EN_server_flush_request_put,
		   RDY_server_flush_request_put,

		   EN_server_flush_response_get,
		   RDY_server_flush_response_get,

		   EN_tlb_flush,
		   RDY_tlb_flush,

		   mem_master_awvalid,

		   mem_master_awid,

		   mem_master_awaddr,

		   mem_master_awlen,

		   mem_master_awsize,

		   mem_master_awburst,

		   mem_master_awlock,

		   mem_master_awcache,

		   mem_master_awprot,

		   mem_master_awqos,

		   mem_master_awregion,

		   mem_master_awready,

		   mem_master_wvalid,

		   mem_master_wid,

		   mem_master_wdata,

		   mem_master_wstrb,

		   mem_master_wlast,

		   mem_master_wready,

		   mem_master_bvalid,
		   mem_master_bid,
		   mem_master_bresp,

		   mem_master_bready,

		   mem_master_arvalid,

		   mem_master_arid,

		   mem_master_araddr,

		   mem_master_arlen,

		   mem_master_arsize,

		   mem_master_arburst,

		   mem_master_arlock,

		   mem_master_arcache,

		   mem_master_arprot,

		   mem_master_arqos,

		   mem_master_arregion,

		   mem_master_arready,

		   mem_master_rvalid,
		   mem_master_rid,
		   mem_master_rdata,
		   mem_master_rresp,
		   mem_master_rlast,

		   mem_master_rready,

		   EN_near_mem_io_client_request_get,
		   near_mem_io_client_request_get,
		   RDY_near_mem_io_client_request_get,

		   near_mem_io_client_response_put,
		   EN_near_mem_io_client_response_put,
		   RDY_near_mem_io_client_response_put);
  parameter [0 : 0] dmem_not_imem = 1'b0;
  input  CLK;
  input  RST_N;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // action method req
  input  [1 : 0] req_op;
  input  [2 : 0] req_f3;
  input  [6 : 0] req_amo_funct7;
  input  [31 : 0] req_addr;
  input  [63 : 0] req_st_value;
  input  [1 : 0] req_priv;
  input  req_sstatus_SUM;
  input  req_mstatus_MXR;
  input  [31 : 0] req_satp;
  input  EN_req;

  // value method valid
  output valid;

  // value method addr
  output [31 : 0] addr;

  // value method word64
  output [63 : 0] word64;

  // value method st_amo_val
  output [63 : 0] st_amo_val;

  // value method exc
  output exc;

  // value method exc_code
  output [3 : 0] exc_code;

  // action method server_flush_request_put
  input  EN_server_flush_request_put;
  output RDY_server_flush_request_put;

  // action method server_flush_response_get
  input  EN_server_flush_response_get;
  output RDY_server_flush_response_get;

  // action method tlb_flush
  input  EN_tlb_flush;
  output RDY_tlb_flush;

  // value method mem_master_m_awvalid
  output mem_master_awvalid;

  // value method mem_master_m_awid
  output [3 : 0] mem_master_awid;

  // value method mem_master_m_awaddr
  output [63 : 0] mem_master_awaddr;

  // value method mem_master_m_awlen
  output [7 : 0] mem_master_awlen;

  // value method mem_master_m_awsize
  output [2 : 0] mem_master_awsize;

  // value method mem_master_m_awburst
  output [1 : 0] mem_master_awburst;

  // value method mem_master_m_awlock
  output mem_master_awlock;

  // value method mem_master_m_awcache
  output [3 : 0] mem_master_awcache;

  // value method mem_master_m_awprot
  output [2 : 0] mem_master_awprot;

  // value method mem_master_m_awqos
  output [3 : 0] mem_master_awqos;

  // value method mem_master_m_awregion
  output [3 : 0] mem_master_awregion;

  // value method mem_master_m_awuser

  // action method mem_master_m_awready
  input  mem_master_awready;

  // value method mem_master_m_wvalid
  output mem_master_wvalid;

  // value method mem_master_m_wid
  output [3 : 0] mem_master_wid;

  // value method mem_master_m_wdata
  output [63 : 0] mem_master_wdata;

  // value method mem_master_m_wstrb
  output [7 : 0] mem_master_wstrb;

  // value method mem_master_m_wlast
  output mem_master_wlast;

  // value method mem_master_m_wuser

  // action method mem_master_m_wready
  input  mem_master_wready;

  // action method mem_master_m_bvalid
  input  mem_master_bvalid;
  input  [3 : 0] mem_master_bid;
  input  [1 : 0] mem_master_bresp;

  // value method mem_master_m_bready
  output mem_master_bready;

  // value method mem_master_m_arvalid
  output mem_master_arvalid;

  // value method mem_master_m_arid
  output [3 : 0] mem_master_arid;

  // value method mem_master_m_araddr
  output [63 : 0] mem_master_araddr;

  // value method mem_master_m_arlen
  output [7 : 0] mem_master_arlen;

  // value method mem_master_m_arsize
  output [2 : 0] mem_master_arsize;

  // value method mem_master_m_arburst
  output [1 : 0] mem_master_arburst;

  // value method mem_master_m_arlock
  output mem_master_arlock;

  // value method mem_master_m_arcache
  output [3 : 0] mem_master_arcache;

  // value method mem_master_m_arprot
  output [2 : 0] mem_master_arprot;

  // value method mem_master_m_arqos
  output [3 : 0] mem_master_arqos;

  // value method mem_master_m_arregion
  output [3 : 0] mem_master_arregion;

  // value method mem_master_m_aruser

  // action method mem_master_m_arready
  input  mem_master_arready;

  // action method mem_master_m_rvalid
  input  mem_master_rvalid;
  input  [3 : 0] mem_master_rid;
  input  [63 : 0] mem_master_rdata;
  input  [1 : 0] mem_master_rresp;
  input  mem_master_rlast;

  // value method mem_master_m_rready
  output mem_master_rready;

  // actionvalue method near_mem_io_client_request_get
  input  EN_near_mem_io_client_request_get;
  output [136 : 0] near_mem_io_client_request_get;
  output RDY_near_mem_io_client_request_get;

  // action method near_mem_io_client_response_put
  input  [65 : 0] near_mem_io_client_response_put;
  input  EN_near_mem_io_client_response_put;
  output RDY_near_mem_io_client_response_put;

  // signals for module outputs
  reg [63 : 0] word64;
  wire [136 : 0] near_mem_io_client_request_get;
  wire [63 : 0] mem_master_araddr,
		mem_master_awaddr,
		mem_master_wdata,
		st_amo_val;
  wire [31 : 0] addr;
  wire [7 : 0] mem_master_arlen, mem_master_awlen, mem_master_wstrb;
  wire [3 : 0] exc_code,
	       mem_master_arcache,
	       mem_master_arid,
	       mem_master_arqos,
	       mem_master_arregion,
	       mem_master_awcache,
	       mem_master_awid,
	       mem_master_awqos,
	       mem_master_awregion,
	       mem_master_wid;
  wire [2 : 0] mem_master_arprot,
	       mem_master_arsize,
	       mem_master_awprot,
	       mem_master_awsize;
  wire [1 : 0] mem_master_arburst, mem_master_awburst;
  wire RDY_near_mem_io_client_request_get,
       RDY_near_mem_io_client_response_put,
       RDY_server_flush_request_put,
       RDY_server_flush_response_get,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_set_verbosity,
       RDY_tlb_flush,
       exc,
       mem_master_arlock,
       mem_master_arvalid,
       mem_master_awlock,
       mem_master_awvalid,
       mem_master_bready,
       mem_master_rready,
       mem_master_wlast,
       mem_master_wvalid,
       valid;

  // inlined wires
  reg [3 : 0] ctr_wr_rsps_pending_crg$port0__write_1;
  wire [3 : 0] ctr_wr_rsps_pending_crg$port1__write_1,
	       ctr_wr_rsps_pending_crg$port2__read,
	       ctr_wr_rsps_pending_crg$port3__read;
  wire ctr_wr_rsps_pending_crg$EN_port0__write,
       ctr_wr_rsps_pending_crg$EN_port2__write,
       dw_valid$whas,
       master_xactor_crg_rd_addr_full$EN_port0__write,
       master_xactor_crg_rd_addr_full$EN_port1__write,
       master_xactor_crg_rd_addr_full$EN_port2__write,
       master_xactor_crg_rd_addr_full$port1__read,
       master_xactor_crg_rd_addr_full$port2__read,
       master_xactor_crg_rd_addr_full$port3__read,
       master_xactor_crg_rd_data_full$EN_port0__write,
       master_xactor_crg_rd_data_full$EN_port1__write,
       master_xactor_crg_rd_data_full$EN_port2__write,
       master_xactor_crg_rd_data_full$port1__read,
       master_xactor_crg_rd_data_full$port2__read,
       master_xactor_crg_rd_data_full$port3__read,
       master_xactor_crg_wr_addr_full$EN_port0__write,
       master_xactor_crg_wr_addr_full$EN_port1__write,
       master_xactor_crg_wr_addr_full$EN_port2__write,
       master_xactor_crg_wr_addr_full$port1__read,
       master_xactor_crg_wr_addr_full$port2__read,
       master_xactor_crg_wr_addr_full$port3__read,
       master_xactor_crg_wr_data_full$EN_port0__write,
       master_xactor_crg_wr_data_full$EN_port1__write,
       master_xactor_crg_wr_data_full$EN_port2__write,
       master_xactor_crg_wr_data_full$port1__read,
       master_xactor_crg_wr_data_full$port2__read,
       master_xactor_crg_wr_data_full$port3__read,
       master_xactor_crg_wr_resp_full$EN_port0__write,
       master_xactor_crg_wr_resp_full$EN_port2__write,
       master_xactor_crg_wr_resp_full$port1__read,
       master_xactor_crg_wr_resp_full$port2__read,
       master_xactor_crg_wr_resp_full$port3__read;

  // register cfg_verbosity
  reg [3 : 0] cfg_verbosity;
  wire [3 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register ctr_wr_rsps_pending_crg
  reg [3 : 0] ctr_wr_rsps_pending_crg;
  wire [3 : 0] ctr_wr_rsps_pending_crg$D_IN;
  wire ctr_wr_rsps_pending_crg$EN;

  // register master_xactor_crg_rd_addr_full
  reg master_xactor_crg_rd_addr_full;
  wire master_xactor_crg_rd_addr_full$D_IN, master_xactor_crg_rd_addr_full$EN;

  // register master_xactor_crg_rd_data_full
  reg master_xactor_crg_rd_data_full;
  wire master_xactor_crg_rd_data_full$D_IN, master_xactor_crg_rd_data_full$EN;

  // register master_xactor_crg_wr_addr_full
  reg master_xactor_crg_wr_addr_full;
  wire master_xactor_crg_wr_addr_full$D_IN, master_xactor_crg_wr_addr_full$EN;

  // register master_xactor_crg_wr_data_full
  reg master_xactor_crg_wr_data_full;
  wire master_xactor_crg_wr_data_full$D_IN, master_xactor_crg_wr_data_full$EN;

  // register master_xactor_crg_wr_resp_full
  reg master_xactor_crg_wr_resp_full;
  wire master_xactor_crg_wr_resp_full$D_IN, master_xactor_crg_wr_resp_full$EN;

  // register master_xactor_rg_rd_addr
  reg [96 : 0] master_xactor_rg_rd_addr;
  reg [96 : 0] master_xactor_rg_rd_addr$D_IN;
  wire master_xactor_rg_rd_addr$EN;

  // register master_xactor_rg_rd_data
  reg [70 : 0] master_xactor_rg_rd_data;
  wire [70 : 0] master_xactor_rg_rd_data$D_IN;
  wire master_xactor_rg_rd_data$EN;

  // register master_xactor_rg_wr_addr
  reg [96 : 0] master_xactor_rg_wr_addr;
  reg [96 : 0] master_xactor_rg_wr_addr$D_IN;
  wire master_xactor_rg_wr_addr$EN;

  // register master_xactor_rg_wr_data
  reg [76 : 0] master_xactor_rg_wr_data;
  reg [76 : 0] master_xactor_rg_wr_data$D_IN;
  wire master_xactor_rg_wr_data$EN;

  // register master_xactor_rg_wr_resp
  reg [5 : 0] master_xactor_rg_wr_resp;
  wire [5 : 0] master_xactor_rg_wr_resp$D_IN;
  wire master_xactor_rg_wr_resp$EN;

  // register rg_addr
  reg [31 : 0] rg_addr;
  wire [31 : 0] rg_addr$D_IN;
  wire rg_addr$EN;

  // register rg_amo_funct7
  reg [6 : 0] rg_amo_funct7;
  wire [6 : 0] rg_amo_funct7$D_IN;
  wire rg_amo_funct7$EN;

  // register rg_cset_in_cache
  reg [6 : 0] rg_cset_in_cache;
  wire [6 : 0] rg_cset_in_cache$D_IN;
  wire rg_cset_in_cache$EN;

  // register rg_error_during_refill
  reg rg_error_during_refill;
  wire rg_error_during_refill$D_IN, rg_error_during_refill$EN;

  // register rg_exc_code
  reg [3 : 0] rg_exc_code;
  reg [3 : 0] rg_exc_code$D_IN;
  wire rg_exc_code$EN;

  // register rg_f3
  reg [2 : 0] rg_f3;
  wire [2 : 0] rg_f3$D_IN;
  wire rg_f3$EN;

  // register rg_ld_val
  reg [63 : 0] rg_ld_val;
  reg [63 : 0] rg_ld_val$D_IN;
  wire rg_ld_val$EN;

  // register rg_lower_word32
  reg [31 : 0] rg_lower_word32;
  wire [31 : 0] rg_lower_word32$D_IN;
  wire rg_lower_word32$EN;

  // register rg_lower_word32_full
  reg rg_lower_word32_full;
  wire rg_lower_word32_full$D_IN, rg_lower_word32_full$EN;

  // register rg_lrsc_pa
  reg [33 : 0] rg_lrsc_pa;
  wire [33 : 0] rg_lrsc_pa$D_IN;
  wire rg_lrsc_pa$EN;

  // register rg_lrsc_valid
  reg rg_lrsc_valid;
  wire rg_lrsc_valid$D_IN, rg_lrsc_valid$EN;

  // register rg_mstatus_MXR
  reg rg_mstatus_MXR;
  wire rg_mstatus_MXR$D_IN, rg_mstatus_MXR$EN;

  // register rg_op
  reg [1 : 0] rg_op;
  wire [1 : 0] rg_op$D_IN;
  wire rg_op$EN;

  // register rg_pa
  reg [33 : 0] rg_pa;
  wire [33 : 0] rg_pa$D_IN;
  wire rg_pa$EN;

  // register rg_priv
  reg [1 : 0] rg_priv;
  wire [1 : 0] rg_priv$D_IN;
  wire rg_priv$EN;

  // register rg_pte_pa
  reg [33 : 0] rg_pte_pa;
  wire [33 : 0] rg_pte_pa$D_IN;
  wire rg_pte_pa$EN;

  // register rg_req_byte_in_cline
  reg [63 : 0] rg_req_byte_in_cline;
  wire [63 : 0] rg_req_byte_in_cline$D_IN;
  wire rg_req_byte_in_cline$EN;

  // register rg_requesting_cline
  reg rg_requesting_cline;
  reg rg_requesting_cline$D_IN;
  wire rg_requesting_cline$EN;

  // register rg_satp
  reg [31 : 0] rg_satp;
  wire [31 : 0] rg_satp$D_IN;
  wire rg_satp$EN;

  // register rg_sstatus_SUM
  reg rg_sstatus_SUM;
  wire rg_sstatus_SUM$D_IN, rg_sstatus_SUM$EN;

  // register rg_st_amo_val
  reg [63 : 0] rg_st_amo_val;
  wire [63 : 0] rg_st_amo_val$D_IN;
  wire rg_st_amo_val$EN;

  // register rg_state
  reg [3 : 0] rg_state;
  reg [3 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // register rg_word64_set_in_cache
  reg [8 : 0] rg_word64_set_in_cache;
  wire [8 : 0] rg_word64_set_in_cache$D_IN;
  wire rg_word64_set_in_cache$EN;

  // ports of submodule f_near_mem_io_reqs
  wire [136 : 0] f_near_mem_io_reqs$D_IN, f_near_mem_io_reqs$D_OUT;
  wire f_near_mem_io_reqs$CLR,
       f_near_mem_io_reqs$DEQ,
       f_near_mem_io_reqs$EMPTY_N,
       f_near_mem_io_reqs$ENQ,
       f_near_mem_io_reqs$FULL_N;

  // ports of submodule f_near_mem_io_rsps
  wire [65 : 0] f_near_mem_io_rsps$D_IN, f_near_mem_io_rsps$D_OUT;
  wire f_near_mem_io_rsps$CLR,
       f_near_mem_io_rsps$DEQ,
       f_near_mem_io_rsps$EMPTY_N,
       f_near_mem_io_rsps$ENQ,
       f_near_mem_io_rsps$FULL_N;

  // ports of submodule f_reset_reqs
  wire f_reset_reqs$CLR,
       f_reset_reqs$DEQ,
       f_reset_reqs$D_IN,
       f_reset_reqs$D_OUT,
       f_reset_reqs$EMPTY_N,
       f_reset_reqs$ENQ,
       f_reset_reqs$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$D_IN,
       f_reset_rsps$D_OUT,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule ram_state_and_ctag_cset
  wire [22 : 0] ram_state_and_ctag_cset$DIA,
		ram_state_and_ctag_cset$DIB,
		ram_state_and_ctag_cset$DOB;
  wire [6 : 0] ram_state_and_ctag_cset$ADDRA, ram_state_and_ctag_cset$ADDRB;
  wire ram_state_and_ctag_cset$ENA,
       ram_state_and_ctag_cset$ENB,
       ram_state_and_ctag_cset$WEA,
       ram_state_and_ctag_cset$WEB;

  // ports of submodule ram_word64_set
  reg [63 : 0] ram_word64_set$DIB;
  reg [8 : 0] ram_word64_set$ADDRB;
  wire [63 : 0] ram_word64_set$DIA, ram_word64_set$DOB;
  wire [8 : 0] ram_word64_set$ADDRA;
  wire ram_word64_set$ENA,
       ram_word64_set$ENB,
       ram_word64_set$WEA,
       ram_word64_set$WEB;

  // ports of submodule soc_map
  wire [63 : 0] soc_map$m_is_IO_addr_addr,
		soc_map$m_is_mem_addr_addr,
		soc_map$m_is_near_mem_IO_addr_addr;
  wire soc_map$m_is_mem_addr, soc_map$m_is_near_mem_IO_addr;

  // ports of submodule tlb
  wire [68 : 0] tlb$lookup;
  wire [33 : 0] tlb$insert_pte_pa;
  wire [31 : 0] tlb$insert_pte;
  wire [19 : 0] tlb$insert_vpn, tlb$lookup_vpn;
  wire [8 : 0] tlb$insert_asid, tlb$lookup_asid;
  wire [1 : 0] tlb$insert_level;
  wire tlb$EN_flush, tlb$EN_insert, tlb$RDY_insert, tlb$RDY_lookup;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_ST_AMO_response,
       CAN_FIRE_RL_rl_cache_refill_req_loop,
       CAN_FIRE_RL_rl_cache_refill_rsps_loop,
       CAN_FIRE_RL_rl_discard_write_rsp,
       CAN_FIRE_RL_rl_drive_exception_rsp,
       CAN_FIRE_RL_rl_io_AMO_SC_req,
       CAN_FIRE_RL_rl_io_AMO_op_req,
       CAN_FIRE_RL_rl_io_AMO_read_rsp,
       CAN_FIRE_RL_rl_io_near_mem_read_req,
       CAN_FIRE_RL_rl_io_near_mem_read_rsp,
       CAN_FIRE_RL_rl_io_near_mem_write_req,
       CAN_FIRE_RL_rl_io_near_mem_write_rsp,
       CAN_FIRE_RL_rl_io_read_req,
       CAN_FIRE_RL_rl_io_read_rsp,
       CAN_FIRE_RL_rl_io_write_req,
       CAN_FIRE_RL_rl_maintain_io_read_rsp,
       CAN_FIRE_RL_rl_probe_and_immed_rsp,
       CAN_FIRE_RL_rl_ptw_level_0,
       CAN_FIRE_RL_rl_ptw_level_1,
       CAN_FIRE_RL_rl_rereq,
       CAN_FIRE_RL_rl_reset,
       CAN_FIRE_RL_rl_start_cache_refill,
       CAN_FIRE_RL_rl_start_reset,
       CAN_FIRE_RL_rl_start_tlb_refill,
       CAN_FIRE_mem_master_m_arready,
       CAN_FIRE_mem_master_m_awready,
       CAN_FIRE_mem_master_m_bvalid,
       CAN_FIRE_mem_master_m_rvalid,
       CAN_FIRE_mem_master_m_wready,
       CAN_FIRE_near_mem_io_client_request_get,
       CAN_FIRE_near_mem_io_client_response_put,
       CAN_FIRE_req,
       CAN_FIRE_server_flush_request_put,
       CAN_FIRE_server_flush_response_get,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_tlb_flush,
       WILL_FIRE_RL_rl_ST_AMO_response,
       WILL_FIRE_RL_rl_cache_refill_req_loop,
       WILL_FIRE_RL_rl_cache_refill_rsps_loop,
       WILL_FIRE_RL_rl_discard_write_rsp,
       WILL_FIRE_RL_rl_drive_exception_rsp,
       WILL_FIRE_RL_rl_io_AMO_SC_req,
       WILL_FIRE_RL_rl_io_AMO_op_req,
       WILL_FIRE_RL_rl_io_AMO_read_rsp,
       WILL_FIRE_RL_rl_io_near_mem_read_req,
       WILL_FIRE_RL_rl_io_near_mem_read_rsp,
       WILL_FIRE_RL_rl_io_near_mem_write_req,
       WILL_FIRE_RL_rl_io_near_mem_write_rsp,
       WILL_FIRE_RL_rl_io_read_req,
       WILL_FIRE_RL_rl_io_read_rsp,
       WILL_FIRE_RL_rl_io_write_req,
       WILL_FIRE_RL_rl_maintain_io_read_rsp,
       WILL_FIRE_RL_rl_probe_and_immed_rsp,
       WILL_FIRE_RL_rl_ptw_level_0,
       WILL_FIRE_RL_rl_ptw_level_1,
       WILL_FIRE_RL_rl_rereq,
       WILL_FIRE_RL_rl_reset,
       WILL_FIRE_RL_rl_start_cache_refill,
       WILL_FIRE_RL_rl_start_reset,
       WILL_FIRE_RL_rl_start_tlb_refill,
       WILL_FIRE_mem_master_m_arready,
       WILL_FIRE_mem_master_m_awready,
       WILL_FIRE_mem_master_m_bvalid,
       WILL_FIRE_mem_master_m_rvalid,
       WILL_FIRE_mem_master_m_wready,
       WILL_FIRE_near_mem_io_client_request_get,
       WILL_FIRE_near_mem_io_client_response_put,
       WILL_FIRE_req,
       WILL_FIRE_server_flush_request_put,
       WILL_FIRE_server_flush_response_get,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_tlb_flush;

  // inputs to muxes for submodule ports
  wire [136 : 0] MUX_f_near_mem_io_reqs$enq_1__VAL_1,
		 MUX_f_near_mem_io_reqs$enq_1__VAL_2;
  wire [96 : 0] MUX_master_xactor_rg_rd_addr$write_1__VAL_1,
		MUX_master_xactor_rg_rd_addr$write_1__VAL_2,
		MUX_master_xactor_rg_rd_addr$write_1__VAL_3,
		MUX_master_xactor_rg_rd_addr$write_1__VAL_4,
		MUX_master_xactor_rg_rd_addr$write_1__VAL_5,
		MUX_master_xactor_rg_wr_addr$write_1__VAL_1,
		MUX_master_xactor_rg_wr_addr$write_1__VAL_2;
  wire [76 : 0] MUX_master_xactor_rg_wr_data$write_1__VAL_1,
		MUX_master_xactor_rg_wr_data$write_1__VAL_2,
		MUX_master_xactor_rg_wr_data$write_1__VAL_3;
  wire [63 : 0] MUX_dw_output_ld_val$wset_1__VAL_4,
		MUX_ram_word64_set$a_put_3__VAL_2,
		MUX_rg_ld_val$write_1__VAL_2,
		MUX_rg_req_byte_in_cline$write_1__VAL_1;
  wire [33 : 0] MUX_rg_pa$write_1__VAL_1;
  wire [22 : 0] MUX_ram_state_and_ctag_cset$a_put_3__VAL_1;
  wire [8 : 0] MUX_ram_word64_set$b_put_2__VAL_2,
	       MUX_ram_word64_set$b_put_2__VAL_4;
  wire [6 : 0] MUX_rg_cset_in_cache$write_1__VAL_1;
  wire [3 : 0] MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1,
	       MUX_rg_exc_code$write_1__VAL_1,
	       MUX_rg_exc_code$write_1__VAL_6,
	       MUX_rg_state$write_1__VAL_10,
	       MUX_rg_state$write_1__VAL_11,
	       MUX_rg_state$write_1__VAL_12,
	       MUX_rg_state$write_1__VAL_13,
	       MUX_rg_state$write_1__VAL_17,
	       MUX_rg_state$write_1__VAL_3,
	       MUX_rg_state$write_1__VAL_5;
  wire MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1,
       MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2,
       MUX_dw_output_ld_val$wset_1__SEL_1,
       MUX_dw_output_ld_val$wset_1__SEL_3,
       MUX_dw_output_ld_val$wset_1__SEL_4,
       MUX_dw_output_ld_val$wset_1__SEL_5,
       MUX_master_xactor_crg_rd_addr_full$port2__write_1__SEL_1,
       MUX_master_xactor_rg_rd_addr$write_1__SEL_2,
       MUX_ram_state_and_ctag_cset$b_put_1__SEL_1,
       MUX_ram_word64_set$a_put_1__SEL_1,
       MUX_ram_word64_set$b_put_1__SEL_2,
       MUX_rg_error_during_refill$write_1__SEL_1,
       MUX_rg_exc_code$write_1__SEL_1,
       MUX_rg_exc_code$write_1__SEL_2,
       MUX_rg_exc_code$write_1__SEL_3,
       MUX_rg_exc_code$write_1__SEL_5,
       MUX_rg_exc_code$write_1__SEL_6,
       MUX_rg_exc_code$write_1__SEL_7,
       MUX_rg_exc_code$write_1__SEL_8,
       MUX_rg_ld_val$write_1__SEL_2,
       MUX_rg_lrsc_valid$write_1__SEL_2,
       MUX_rg_state$write_1__SEL_10,
       MUX_rg_state$write_1__SEL_11,
       MUX_rg_state$write_1__SEL_2,
       MUX_rg_state$write_1__SEL_20,
       MUX_tlb$insert_1__SEL_1;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h4210;
  reg [31 : 0] v__h4311;
  reg [31 : 0] v__h29248;
  reg [31 : 0] v__h29433;
  reg [31 : 0] v__h30540;
  reg [31 : 0] v__h30647;
  reg [31 : 0] v__h30752;
  reg [31 : 0] v__h32034;
  reg [31 : 0] v__h32176;
  reg [31 : 0] v__h32356;
  reg [31 : 0] v__h3845;
  reg [31 : 0] v__h23188;
  reg [31 : 0] v__h22929;
  reg [31 : 0] v__h23609;
  reg [31 : 0] v__h23497;
  reg [31 : 0] v__h23117;
  reg [31 : 0] v__h24149;
  reg [31 : 0] v__h24220;
  reg [31 : 0] v__h24302;
  reg [31 : 0] v__h24078;
  reg [31 : 0] v__h25211;
  reg [31 : 0] v__h4460;
  reg [31 : 0] v__h13891;
  reg [31 : 0] v__h18150;
  reg [31 : 0] v__h17478;
  reg [31 : 0] v__h21562;
  reg [31 : 0] v__h25548;
  reg [31 : 0] v__h25770;
  reg [31 : 0] v__h27404;
  reg [31 : 0] v__h27808;
  reg [31 : 0] v__h28908;
  reg [31 : 0] v__h29015;
  reg [31 : 0] v__h30862;
  reg [31 : 0] v__h31384;
  reg [31 : 0] v__h32474;
  reg [31 : 0] v__h32792;
  reg [31 : 0] v__h32967;
  reg [31 : 0] v__h35580;
  reg [31 : 0] v__h35832;
  reg [31 : 0] v__h33063;
  reg [31 : 0] v__h22193;
  reg [31 : 0] v__h36831;
  reg [31 : 0] v__h24427;
  reg [31 : 0] v__h37985;
  reg [31 : 0] v__h36452;
  reg [31 : 0] v__h36413;
  reg [31 : 0] v__h3839;
  reg [31 : 0] v__h4204;
  reg [31 : 0] v__h4305;
  reg [31 : 0] v__h4454;
  reg [31 : 0] v__h13885;
  reg [31 : 0] v__h17472;
  reg [31 : 0] v__h18144;
  reg [31 : 0] v__h21556;
  reg [31 : 0] v__h22187;
  reg [31 : 0] v__h22923;
  reg [31 : 0] v__h23111;
  reg [31 : 0] v__h23182;
  reg [31 : 0] v__h23491;
  reg [31 : 0] v__h23603;
  reg [31 : 0] v__h24072;
  reg [31 : 0] v__h24143;
  reg [31 : 0] v__h24214;
  reg [31 : 0] v__h24296;
  reg [31 : 0] v__h24421;
  reg [31 : 0] v__h25205;
  reg [31 : 0] v__h25542;
  reg [31 : 0] v__h25764;
  reg [31 : 0] v__h27398;
  reg [31 : 0] v__h27802;
  reg [31 : 0] v__h28902;
  reg [31 : 0] v__h29009;
  reg [31 : 0] v__h29242;
  reg [31 : 0] v__h29427;
  reg [31 : 0] v__h30534;
  reg [31 : 0] v__h30641;
  reg [31 : 0] v__h30746;
  reg [31 : 0] v__h30856;
  reg [31 : 0] v__h31378;
  reg [31 : 0] v__h32028;
  reg [31 : 0] v__h32170;
  reg [31 : 0] v__h32350;
  reg [31 : 0] v__h32468;
  reg [31 : 0] v__h32786;
  reg [31 : 0] v__h32961;
  reg [31 : 0] v__h33057;
  reg [31 : 0] v__h35574;
  reg [31 : 0] v__h35826;
  reg [31 : 0] v__h36407;
  reg [31 : 0] v__h36446;
  reg [31 : 0] v__h36825;
  reg [31 : 0] v__h37979;
  // synopsys translate_on

  // remaining internal signals
  reg [63 : 0] CASE_rg_addr_BITS_2_TO_0_0x0_result0322_0x4_re_ETC__q64,
	       CASE_rg_addr_BITS_2_TO_0_0x0_result0387_0x4_re_ETC__q65,
	       CASE_rg_addr_BITS_2_TO_0_0x0_result3712_0x4_re_ETC__q44,
	       CASE_rg_addr_BITS_2_TO_0_0x0_result5182_0x4_re_ETC__q66,
	       CASE_rg_addr_BITS_2_TO_0_0x0_result8688_0x4_re_ETC__q48,
	       CASE_rg_addr_BITS_2_TO_0_0x0_result8753_0x4_re_ETC__q49,
	       CASE_x1_avValue_pa387_BITS_2_TO_0_0x0_ram_word_ETC__q47,
	       CASE_x1_avValue_pa387_BITS_2_TO_0_0x0_ram_word_ETC__q68,
	       IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d615,
	       IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d624,
	       IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d680,
	       IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d689,
	       IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1053,
	       IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1073,
	       IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1154,
	       IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1174,
	       IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1291,
	       IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1311,
	       IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1321,
	       IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d475,
	       IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d495,
	       IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d505,
	       IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1037,
	       IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1065,
	       IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1138,
	       IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1166,
	       IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1275,
	       IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1303,
	       IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d459,
	       IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d487,
	       IF_rg_f3_34_EQ_0b0_35_THEN_IF_IF_rg_priv_9_ULE_ETC___d633,
	       IF_rg_f3_34_EQ_0b0_35_THEN_IF_IF_rg_priv_9_ULE_ETC___d698,
	       IF_rg_f3_34_EQ_0b10_65_THEN_SEXT_IF_rg_f3_34_E_ETC___d573,
	       _theResult_____2__h18709,
	       _theResult_____2__h33387,
	       ld_val__h27917,
	       ld_val__h29551,
	       mem_req_wr_data_wdata__h17920,
	       mem_req_wr_data_wdata__h21363,
	       mem_req_wr_data_wdata__h33365,
	       new_ld_val__h33093,
	       new_value__h16569,
	       new_value__h6597,
	       value__h32094,
	       w1__h18701,
	       w1__h33375,
	       w1__h33379;
  reg [33 : 0] _theResult___fst__h5886;
  reg [7 : 0] mem_req_wr_data_wstrb__h17921, mem_req_wr_data_wstrb__h33366;
  reg [2 : 0] value__h32678, value__h35704;
  reg CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_34_ETC__q43,
      IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d242,
      IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d247,
      IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_OR_rg_ad_ETC___d156,
      IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_OR_rg_ad_ETC___d164,
      IF_rg_f3_34_BITS_1_TO_0_95_EQ_0b0_96_OR_rg_f3__ETC___d202,
      IF_rg_f3_34_EQ_0b0_35_OR_rg_f3_34_EQ_0b100_36__ETC___d178,
      IF_rg_f3_34_EQ_0b0_35_THEN_IF_IF_rg_priv_9_ULE_ETC___d254;
  wire [63 : 0] IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_1_E_ETC___d520,
		IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_IF__ETC___d1322,
		IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_ram_ETC___d506,
		IF_rg_f3_34_EQ_0b10_65_THEN_SEXT_rg_st_amo_val_ETC___d637,
		IF_rg_op_5_EQ_1_80_OR_rg_op_5_EQ_2_8_AND_rg_am_ETC___d720,
		_theResult___fst__h17822,
		_theResult___fst__h21295,
		_theResult___fst__h31812,
		_theResult___fst__h33297,
		addr__h6238,
		cline_fabric_addr__h25264,
		lev_0_pte_pa_w64_fa__h23222,
		lev_1_pte_pa_w64_fa__h22248,
		mem_req_wr_addr_awaddr__h33155,
		new_st_val__h18431,
		new_st_val__h18713,
		new_st_val__h18804,
		new_st_val__h19784,
		new_st_val__h19788,
		new_st_val__h19792,
		new_st_val__h19796,
		new_st_val__h19801,
		new_st_val__h19807,
		new_st_val__h19812,
		new_st_val__h33391,
		new_st_val__h33482,
		new_st_val__h35342,
		new_st_val__h35346,
		new_st_val__h35350,
		new_st_val__h35354,
		new_st_val__h35359,
		new_st_val__h35365,
		new_st_val__h35370,
		result__h13008,
		result__h13036,
		result__h13064,
		result__h13092,
		result__h13120,
		result__h13148,
		result__h13176,
		result__h13221,
		result__h13249,
		result__h13277,
		result__h13305,
		result__h13333,
		result__h13361,
		result__h13389,
		result__h13417,
		result__h13462,
		result__h13490,
		result__h13518,
		result__h13546,
		result__h13587,
		result__h13615,
		result__h13643,
		result__h13671,
		result__h13712,
		result__h13740,
		result__h13779,
		result__h13807,
		result__h27977,
		result__h28007,
		result__h28034,
		result__h28061,
		result__h28088,
		result__h28115,
		result__h28142,
		result__h28169,
		result__h28213,
		result__h28240,
		result__h28267,
		result__h28294,
		result__h28321,
		result__h28348,
		result__h28375,
		result__h28402,
		result__h28446,
		result__h28473,
		result__h28500,
		result__h28527,
		result__h28567,
		result__h28594,
		result__h28621,
		result__h28648,
		result__h28688,
		result__h28715,
		result__h28753,
		result__h28780,
		result__h29611,
		result__h29641,
		result__h29668,
		result__h29695,
		result__h29722,
		result__h29749,
		result__h29776,
		result__h29803,
		result__h29847,
		result__h29874,
		result__h29901,
		result__h29928,
		result__h29955,
		result__h29982,
		result__h30009,
		result__h30036,
		result__h30080,
		result__h30107,
		result__h30134,
		result__h30161,
		result__h30201,
		result__h30228,
		result__h30255,
		result__h30282,
		result__h30322,
		result__h30349,
		result__h30387,
		result__h30414,
		result__h33570,
		result__h34478,
		result__h34506,
		result__h34534,
		result__h34562,
		result__h34590,
		result__h34618,
		result__h34646,
		result__h34691,
		result__h34719,
		result__h34747,
		result__h34775,
		result__h34803,
		result__h34831,
		result__h34859,
		result__h34887,
		result__h34932,
		result__h34960,
		result__h34988,
		result__h35016,
		result__h35057,
		result__h35085,
		result__h35113,
		result__h35141,
		result__h35182,
		result__h35210,
		result__h35249,
		result__h35277,
		result__h6652,
		st_val__h33105,
		w1___1__h18772,
		w1___1__h33450,
		w2___1__h33451,
		w2__h33381,
		word64__h6415,
		x__h14278,
		y__h6688;
  wire [33 : 0] _theResult___fst__h5475,
		_theResult___fst__h5547,
		cline_addr__h25263,
		lev_0_PTN_pa__h23218,
		lev_0_pte_pa__h23220,
		lev_0_pte_pa_w64__h23221,
		lev_1_pte_pa__h22246,
		lev_1_pte_pa_w64__h22247,
		pa___1__h5892,
		pa___1__h5941,
		pa__h5375,
		satp_pa__h2610,
		vpn_0_pa__h23219,
		vpn_1_pa__h22245,
		x1_avValue_pa__h5387;
  wire [31 : 0] _theResult____h22557,
		_theResult___snd_fst__h5477,
		_theResult___snd_fst__h5549,
		_theResult___snd_fst__h6024,
		f_near_mem_io_rspsD_OUT_BITS_31_TO_0__q6,
		f_near_mem_io_rspsD_OUT_BITS_63_TO_32__q20,
		ld_val7917_BITS_31_TO_0__q52,
		ld_val7917_BITS_63_TO_32__q59,
		master_xactor_rg_rd_data_BITS_34_TO_3__q3,
		master_xactor_rg_rd_data_BITS_66_TO_35__q17,
		new_value597_BITS_31_TO_0__q45,
		pte___1__h6073,
		pte___1__h6101,
		pte___2__h5884,
		rg_st_amo_val_BITS_31_TO_0__q46,
		w13375_BITS_31_TO_0__q67,
		word64415_BITS_31_TO_0__q31,
		word64415_BITS_63_TO_32__q38,
		x1_avValue_pte__h5390;
  wire [15 : 0] f_near_mem_io_rspsD_OUT_BITS_15_TO_0__q5,
		f_near_mem_io_rspsD_OUT_BITS_31_TO_16__q12,
		f_near_mem_io_rspsD_OUT_BITS_47_TO_32__q19,
		f_near_mem_io_rspsD_OUT_BITS_63_TO_48__q26,
		ld_val7917_BITS_15_TO_0__q51,
		ld_val7917_BITS_31_TO_16__q55,
		ld_val7917_BITS_47_TO_32__q58,
		ld_val7917_BITS_63_TO_48__q62,
		master_xactor_rg_rd_data_BITS_18_TO_3__q2,
		master_xactor_rg_rd_data_BITS_34_TO_19__q10,
		master_xactor_rg_rd_data_BITS_50_TO_35__q16,
		master_xactor_rg_rd_data_BITS_66_TO_51__q24,
		word64415_BITS_15_TO_0__q30,
		word64415_BITS_31_TO_16__q34,
		word64415_BITS_47_TO_32__q37,
		word64415_BITS_63_TO_48__q41;
  wire [7 : 0] f_near_mem_io_rspsD_OUT_BITS_15_TO_8__q8,
	       f_near_mem_io_rspsD_OUT_BITS_23_TO_16__q11,
	       f_near_mem_io_rspsD_OUT_BITS_31_TO_24__q14,
	       f_near_mem_io_rspsD_OUT_BITS_39_TO_32__q18,
	       f_near_mem_io_rspsD_OUT_BITS_47_TO_40__q22,
	       f_near_mem_io_rspsD_OUT_BITS_55_TO_48__q25,
	       f_near_mem_io_rspsD_OUT_BITS_63_TO_56__q28,
	       f_near_mem_io_rspsD_OUT_BITS_7_TO_0__q4,
	       ld_val7917_BITS_15_TO_8__q53,
	       ld_val7917_BITS_23_TO_16__q54,
	       ld_val7917_BITS_31_TO_24__q56,
	       ld_val7917_BITS_39_TO_32__q57,
	       ld_val7917_BITS_47_TO_40__q60,
	       ld_val7917_BITS_55_TO_48__q61,
	       ld_val7917_BITS_63_TO_56__q63,
	       ld_val7917_BITS_7_TO_0__q50,
	       master_xactor_rg_rd_data_BITS_10_TO_3__q1,
	       master_xactor_rg_rd_data_BITS_18_TO_11__q7,
	       master_xactor_rg_rd_data_BITS_26_TO_19__q9,
	       master_xactor_rg_rd_data_BITS_34_TO_27__q13,
	       master_xactor_rg_rd_data_BITS_42_TO_35__q15,
	       master_xactor_rg_rd_data_BITS_50_TO_43__q21,
	       master_xactor_rg_rd_data_BITS_58_TO_51__q23,
	       master_xactor_rg_rd_data_BITS_66_TO_59__q27,
	       strobe64__h17821,
	       strobe64__h17824,
	       strobe64__h17827,
	       strobe64__h33296,
	       strobe64__h33299,
	       strobe64__h33302,
	       word64415_BITS_15_TO_8__q32,
	       word64415_BITS_23_TO_16__q33,
	       word64415_BITS_31_TO_24__q35,
	       word64415_BITS_39_TO_32__q36,
	       word64415_BITS_47_TO_40__q39,
	       word64415_BITS_55_TO_48__q40,
	       word64415_BITS_63_TO_56__q42,
	       word64415_BITS_7_TO_0__q29;
  wire [5 : 0] shift_bits__h17684, shift_bits__h33161;
  wire [3 : 0] IF_rg_op_5_EQ_0_6_OR_rg_op_5_EQ_2_8_AND_rg_amo_ETC___d357,
	       IF_rg_op_5_EQ_1_80_OR_rg_op_5_EQ_2_8_AND_rg_am_ETC___d356,
	       IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3__ETC___d359,
	       access_exc_code__h3352,
	       b__h22147,
	       exc_code___1__h5786,
	       x1_avValue_exc_code__h5388;
  wire IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d250,
       IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_NOT_ETC___d170,
       IF_rg_op_5_EQ_0_6_OR_rg_op_5_EQ_2_8_AND_rg_amo_ETC___d262,
       IF_rg_op_5_EQ_1_80_OR_rg_op_5_EQ_2_8_AND_rg_am_ETC___d261,
       IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3__ETC___d264,
       IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3__ETC___d378,
       NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_3_ETC___d241,
       NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_3_ETC___d246,
       NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_3_ETC___d249,
       NOT_IF_rg_pte_pa_37_BIT_2_38_THEN_master_xacto_ETC___d866,
       NOT_cfg_verbosity_read__0_ULE_2_54___d955,
       NOT_dmem_not_imem_0_AND_rg_op_5_EQ_0_6_OR_rg_o_ETC___d290,
       NOT_dmem_not_imem_0_OR_NOT_rg_op_5_EQ_0_6_7_AN_ETC___d87,
       NOT_dmem_not_imem_0_OR_soc_map_m_is_mem_addr_0_ETC___d567,
       NOT_dmem_not_imem_0_OR_soc_map_m_is_mem_addr_0_ETC___d580,
       NOT_dmem_not_imem_0_OR_soc_map_m_is_mem_addr_0_ETC___d733,
       NOT_dmem_not_imem_0_OR_soc_map_m_is_mem_addr_0_ETC___d751,
       NOT_dmem_not_imem_0_OR_soc_map_m_is_mem_addr_0_ETC___d791,
       NOT_dmem_not_imem_0_OR_soc_map_m_is_mem_addr_0_ETC___d796,
       NOT_dmem_not_imem_0_OR_soc_map_m_is_mem_addr_0_ETC___d802,
       NOT_dmem_not_imem_0_OR_soc_map_m_is_mem_addr_0_ETC___d810,
       NOT_dmem_not_imem_0_OR_soc_map_m_is_mem_addr_0_ETC___d814,
       NOT_master_xactor_rg_rd_data_33_BITS_2_TO_1_34_ETC___d859,
       NOT_ram_state_and_ctag_cset_b_read__26_BIT_22__ETC___d152,
       NOT_ram_state_and_ctag_cset_b_read__26_BIT_22__ETC___d380,
       NOT_req_f3_BITS_1_TO_0_413_EQ_0b0_414_415_AND__ETC___d1434,
       NOT_rg_f3_34_EQ_0b11_71_72_OR_rg_amo_funct7_0__ETC___d251,
       NOT_rg_op_5_EQ_0_6_7_AND_NOT_rg_op_5_EQ_2_8_9__ETC___d350,
       NOT_rg_op_5_EQ_1_80_86_AND_NOT_rg_op_5_EQ_2_8__ETC___d389,
       NOT_rg_op_5_EQ_1_80_86_AND_NOT_rg_op_5_EQ_2_8__ETC___d577,
       NOT_rg_op_5_EQ_1_80_86_AND_NOT_rg_op_5_EQ_2_8__ETC___d789,
       NOT_rg_op_5_EQ_1_80_86_AND_NOT_rg_op_5_EQ_2_8__ETC___d794,
       NOT_rg_op_5_EQ_1_80_86_AND_NOT_rg_op_5_EQ_2_8__ETC___d800,
       NOT_rg_op_5_EQ_1_80_86_AND_NOT_rg_op_5_EQ_2_8__ETC___d808,
       NOT_rg_op_5_EQ_2_8_9_OR_NOT_rg_amo_funct7_0_BI_ETC___d575,
       NOT_rg_op_5_EQ_2_8_9_OR_NOT_rg_amo_funct7_0_BI_ETC___d754,
       NOT_rg_op_5_EQ_2_8_9_OR_NOT_rg_amo_funct7_0_BI_ETC___d760,
       NOT_rg_op_5_EQ_2_8_9_OR_NOT_rg_amo_funct7_0_BI_ETC___d766,
       NOT_rg_op_5_EQ_2_8_9_OR_NOT_rg_amo_funct7_0_BI_ETC___d773,
       NOT_rg_priv_9_EQ_0b0_5_83_OR_tlb_lookup_rg_sat_ETC___d297,
       NOT_rg_priv_9_EQ_0b0_5_83_OR_tlb_lookup_rg_sat_ETC___d329,
       NOT_rg_priv_9_EQ_0b0_5_83_OR_tlb_lookup_rg_sat_ETC___d526,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d266,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d302,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d326,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d363,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d364,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d371,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d374,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d395,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d401,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d402,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d529,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d534,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d540,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d547,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d553,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d559,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d563,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d569,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d582,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d704,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d705,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d735,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d741,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d747,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d753,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d758,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d759,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d764,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d770,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d771,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d777,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d778,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d785,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d786,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d793,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d798,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d804,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d812,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d816,
       NOT_tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_ad_ETC___d102,
       cfg_verbosity_read__0_ULE_1___d11,
       dmem_not_imem_AND_rg_op_5_EQ_0_6_OR_rg_op_5_EQ_ETC___d292,
       dmem_not_imem_OR_NOT_rg_op_5_EQ_0_6_7_AND_NOT__ETC___d79,
       lrsc_result__h14268,
       master_xactor_crg_rd_data_full_port1__read__32_ETC___d1245,
       master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d875,
       master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d883,
       master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d898,
       master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d902,
       master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d908,
       master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d934,
       ram_state_and_ctag_cset_b_read__26_BITS_21_TO__ETC___d131,
       ram_state_and_ctag_cset_b_read__26_BIT_22_27_A_ETC___d381,
       req_f3_BITS_1_TO_0_413_EQ_0b0_414_OR_req_f3_BI_ETC___d1443,
       rg_amo_funct7_0_BITS_6_TO_2_1_EQ_0b10_2_AND_NO_ETC___d556,
       rg_lrsc_pa_86_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d187,
       rg_op_5_EQ_0_6_OR_rg_op_5_EQ_2_8_AND_rg_amo_fu_ETC___d345,
       rg_op_5_EQ_0_6_OR_rg_op_5_EQ_2_8_AND_rg_amo_fu_ETC___d367,
       rg_op_5_EQ_0_6_OR_rg_op_5_EQ_2_8_AND_rg_amo_fu_ETC___d392,
       rg_op_5_EQ_0_6_OR_rg_op_5_EQ_2_8_AND_rg_amo_fu_ETC___d396,
       rg_op_5_EQ_0_6_OR_rg_op_5_EQ_2_8_AND_rg_amo_fu_ETC___d531,
       rg_op_5_EQ_0_6_OR_rg_op_5_EQ_2_8_AND_rg_amo_fu_ETC___d550,
       rg_op_5_EQ_1_80_OR_rg_op_5_EQ_2_8_AND_rg_amo_f_ETC___d390,
       rg_op_5_EQ_1_80_OR_rg_op_5_EQ_2_8_AND_rg_amo_f_ETC___d578,
       rg_op_5_EQ_1_80_OR_rg_op_5_EQ_2_8_AND_rg_amo_f_ETC___d700,
       rg_op_5_EQ_2_8_AND_rg_amo_funct7_0_BITS_6_TO_2_ETC___d205,
       rg_priv_9_EQ_0b0_5_AND_NOT_tlb_lookup_rg_satp__ETC___d314,
       rg_priv_9_EQ_0b0_5_AND_NOT_tlb_lookup_rg_satp__ETC___d96,
       rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d105,
       rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d305,
       rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d336,
       rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d353,
       rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d354,
       rg_priv_9_ULE_0b1___d40,
       rg_state_EQ_12_93_AND_rg_op_5_EQ_0_6_OR_rg_op__ETC___d1097,
       rg_state_EQ_12_93_AND_rg_op_5_EQ_0_6_OR_rg_op__ETC___d998,
       tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_addr_9_ETC___d299,
       tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_addr_9_ETC___d85,
       y__h5712;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get =
	     !f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get =
	     !f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // action method req
  assign CAN_FIRE_req = 1'd1 ;
  assign WILL_FIRE_req = EN_req ;

  // value method valid
  assign valid = dw_valid$whas ;

  // value method addr
  assign addr = rg_addr ;

  // value method word64
  always@(MUX_dw_output_ld_val$wset_1__SEL_1 or
	  ld_val__h27917 or
	  MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  new_ld_val__h33093 or
	  MUX_dw_output_ld_val$wset_1__SEL_3 or
	  ld_val__h29551 or
	  MUX_dw_output_ld_val$wset_1__SEL_4 or
	  MUX_dw_output_ld_val$wset_1__VAL_4 or
	  MUX_dw_output_ld_val$wset_1__SEL_5 or rg_ld_val)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dw_output_ld_val$wset_1__SEL_1: word64 = ld_val__h27917;
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  word64 = new_ld_val__h33093;
      MUX_dw_output_ld_val$wset_1__SEL_3: word64 = ld_val__h29551;
      MUX_dw_output_ld_val$wset_1__SEL_4:
	  word64 = MUX_dw_output_ld_val$wset_1__VAL_4;
      MUX_dw_output_ld_val$wset_1__SEL_5: word64 = rg_ld_val;
      default: word64 = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end

  // value method st_amo_val
  assign st_amo_val =
	     MUX_dw_output_ld_val$wset_1__SEL_4 ? 64'd0 : rg_st_amo_val ;

  // value method exc
  assign exc = rg_state == 4'd4 ;

  // value method exc_code
  assign exc_code = rg_exc_code ;

  // action method server_flush_request_put
  assign RDY_server_flush_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_flush_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_flush_request_put = EN_server_flush_request_put ;

  // action method server_flush_response_get
  assign RDY_server_flush_response_get =
	     f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_flush_response_get =
	     f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_flush_response_get = EN_server_flush_response_get ;

  // action method tlb_flush
  assign RDY_tlb_flush = 1'd1 ;
  assign CAN_FIRE_tlb_flush = 1'd1 ;
  assign WILL_FIRE_tlb_flush = EN_tlb_flush ;

  // value method mem_master_m_awvalid
  assign mem_master_awvalid =
	     !master_xactor_crg_wr_addr_full$EN_port0__write &&
	     master_xactor_crg_wr_addr_full ;

  // value method mem_master_m_awid
  assign mem_master_awid = master_xactor_rg_wr_addr[96:93] ;

  // value method mem_master_m_awaddr
  assign mem_master_awaddr = master_xactor_rg_wr_addr[92:29] ;

  // value method mem_master_m_awlen
  assign mem_master_awlen = master_xactor_rg_wr_addr[28:21] ;

  // value method mem_master_m_awsize
  assign mem_master_awsize = master_xactor_rg_wr_addr[20:18] ;

  // value method mem_master_m_awburst
  assign mem_master_awburst = master_xactor_rg_wr_addr[17:16] ;

  // value method mem_master_m_awlock
  assign mem_master_awlock = master_xactor_rg_wr_addr[15] ;

  // value method mem_master_m_awcache
  assign mem_master_awcache = master_xactor_rg_wr_addr[14:11] ;

  // value method mem_master_m_awprot
  assign mem_master_awprot = master_xactor_rg_wr_addr[10:8] ;

  // value method mem_master_m_awqos
  assign mem_master_awqos = master_xactor_rg_wr_addr[7:4] ;

  // value method mem_master_m_awregion
  assign mem_master_awregion = master_xactor_rg_wr_addr[3:0] ;

  // action method mem_master_m_awready
  assign CAN_FIRE_mem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_awready = 1'd1 ;

  // value method mem_master_m_wvalid
  assign mem_master_wvalid =
	     !master_xactor_crg_wr_data_full$EN_port0__write &&
	     master_xactor_crg_wr_data_full ;

  // value method mem_master_m_wid
  assign mem_master_wid = master_xactor_rg_wr_data[76:73] ;

  // value method mem_master_m_wdata
  assign mem_master_wdata = master_xactor_rg_wr_data[72:9] ;

  // value method mem_master_m_wstrb
  assign mem_master_wstrb = master_xactor_rg_wr_data[8:1] ;

  // value method mem_master_m_wlast
  assign mem_master_wlast = master_xactor_rg_wr_data[0] ;

  // action method mem_master_m_wready
  assign CAN_FIRE_mem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_wready = 1'd1 ;

  // action method mem_master_m_bvalid
  assign CAN_FIRE_mem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_mem_master_m_bvalid = 1'd1 ;

  // value method mem_master_m_bready
  assign mem_master_bready = !master_xactor_crg_wr_resp_full$port2__read ;

  // value method mem_master_m_arvalid
  assign mem_master_arvalid =
	     !master_xactor_crg_rd_addr_full$EN_port0__write &&
	     master_xactor_crg_rd_addr_full ;

  // value method mem_master_m_arid
  assign mem_master_arid = master_xactor_rg_rd_addr[96:93] ;

  // value method mem_master_m_araddr
  assign mem_master_araddr = master_xactor_rg_rd_addr[92:29] ;

  // value method mem_master_m_arlen
  assign mem_master_arlen = master_xactor_rg_rd_addr[28:21] ;

  // value method mem_master_m_arsize
  assign mem_master_arsize = master_xactor_rg_rd_addr[20:18] ;

  // value method mem_master_m_arburst
  assign mem_master_arburst = master_xactor_rg_rd_addr[17:16] ;

  // value method mem_master_m_arlock
  assign mem_master_arlock = master_xactor_rg_rd_addr[15] ;

  // value method mem_master_m_arcache
  assign mem_master_arcache = master_xactor_rg_rd_addr[14:11] ;

  // value method mem_master_m_arprot
  assign mem_master_arprot = master_xactor_rg_rd_addr[10:8] ;

  // value method mem_master_m_arqos
  assign mem_master_arqos = master_xactor_rg_rd_addr[7:4] ;

  // value method mem_master_m_arregion
  assign mem_master_arregion = master_xactor_rg_rd_addr[3:0] ;

  // action method mem_master_m_arready
  assign CAN_FIRE_mem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_arready = 1'd1 ;

  // action method mem_master_m_rvalid
  assign CAN_FIRE_mem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_mem_master_m_rvalid = 1'd1 ;

  // value method mem_master_m_rready
  assign mem_master_rready = !master_xactor_crg_rd_data_full$port2__read ;

  // actionvalue method near_mem_io_client_request_get
  assign near_mem_io_client_request_get = f_near_mem_io_reqs$D_OUT ;
  assign RDY_near_mem_io_client_request_get = f_near_mem_io_reqs$EMPTY_N ;
  assign CAN_FIRE_near_mem_io_client_request_get =
	     f_near_mem_io_reqs$EMPTY_N ;
  assign WILL_FIRE_near_mem_io_client_request_get =
	     EN_near_mem_io_client_request_get ;

  // action method near_mem_io_client_response_put
  assign RDY_near_mem_io_client_response_put = f_near_mem_io_rsps$FULL_N ;
  assign CAN_FIRE_near_mem_io_client_response_put =
	     f_near_mem_io_rsps$FULL_N ;
  assign WILL_FIRE_near_mem_io_client_response_put =
	     EN_near_mem_io_client_response_put ;

  // submodule f_near_mem_io_reqs
  FIFO2 #(.width(32'd137), .guarded(32'd1)) f_near_mem_io_reqs(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(f_near_mem_io_reqs$D_IN),
							       .ENQ(f_near_mem_io_reqs$ENQ),
							       .DEQ(f_near_mem_io_reqs$DEQ),
							       .CLR(f_near_mem_io_reqs$CLR),
							       .D_OUT(f_near_mem_io_reqs$D_OUT),
							       .FULL_N(f_near_mem_io_reqs$FULL_N),
							       .EMPTY_N(f_near_mem_io_reqs$EMPTY_N));

  // submodule f_near_mem_io_rsps
  FIFO2 #(.width(32'd66), .guarded(32'd1)) f_near_mem_io_rsps(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(f_near_mem_io_rsps$D_IN),
							      .ENQ(f_near_mem_io_rsps$ENQ),
							      .DEQ(f_near_mem_io_rsps$DEQ),
							      .CLR(f_near_mem_io_rsps$CLR),
							      .D_OUT(f_near_mem_io_rsps$D_OUT),
							      .FULL_N(f_near_mem_io_rsps$FULL_N),
							      .EMPTY_N(f_near_mem_io_rsps$EMPTY_N));

  // submodule f_reset_reqs
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_reqs(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_reset_reqs$D_IN),
						       .ENQ(f_reset_reqs$ENQ),
						       .DEQ(f_reset_reqs$DEQ),
						       .CLR(f_reset_reqs$CLR),
						       .D_OUT(f_reset_reqs$D_OUT),
						       .FULL_N(f_reset_reqs$FULL_N),
						       .EMPTY_N(f_reset_reqs$EMPTY_N));

  // submodule f_reset_rsps
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_rsps(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_reset_rsps$D_IN),
						       .ENQ(f_reset_rsps$ENQ),
						       .DEQ(f_reset_rsps$DEQ),
						       .CLR(f_reset_rsps$CLR),
						       .D_OUT(f_reset_rsps$D_OUT),
						       .FULL_N(f_reset_rsps$FULL_N),
						       .EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule ram_state_and_ctag_cset
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd23),
	  .MEMSIZE(8'd128)) ram_state_and_ctag_cset(.CLKA(CLK),
						    .CLKB(CLK),
						    .ADDRA(ram_state_and_ctag_cset$ADDRA),
						    .ADDRB(ram_state_and_ctag_cset$ADDRB),
						    .DIA(ram_state_and_ctag_cset$DIA),
						    .DIB(ram_state_and_ctag_cset$DIB),
						    .WEA(ram_state_and_ctag_cset$WEA),
						    .WEB(ram_state_and_ctag_cset$WEB),
						    .ENA(ram_state_and_ctag_cset$ENA),
						    .ENB(ram_state_and_ctag_cset$ENB),
						    .DOA(),
						    .DOB(ram_state_and_ctag_cset$DOB));

  // submodule ram_word64_set
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd9),
	  .DATA_WIDTH(32'd64),
	  .MEMSIZE(10'd512)) ram_word64_set(.CLKA(CLK),
					    .CLKB(CLK),
					    .ADDRA(ram_word64_set$ADDRA),
					    .ADDRB(ram_word64_set$ADDRB),
					    .DIA(ram_word64_set$DIA),
					    .DIB(ram_word64_set$DIB),
					    .WEA(ram_word64_set$WEA),
					    .WEB(ram_word64_set$WEB),
					    .ENA(ram_word64_set$ENA),
					    .ENB(ram_word64_set$ENB),
					    .DOA(),
					    .DOB(ram_word64_set$DOB));

  // submodule soc_map
  mkSoC_Map soc_map(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_is_IO_addr_addr(soc_map$m_is_IO_addr_addr),
		    .m_is_mem_addr_addr(soc_map$m_is_mem_addr_addr),
		    .m_is_near_mem_IO_addr_addr(soc_map$m_is_near_mem_IO_addr_addr),
		    .m_uart0_addr_base(),
		    .m_uart0_addr_size(),
		    .m_uart0_addr_lim(),
		    .m_near_mem_io_addr_base(),
		    .m_near_mem_io_addr_size(),
		    .m_near_mem_io_addr_lim(),
		    .m_boot_rom_addr_base(),
		    .m_boot_rom_addr_size(),
		    .m_boot_rom_addr_lim(),
		    .m_mem0_controller_addr_base(),
		    .m_mem0_controller_addr_size(),
		    .m_mem0_controller_addr_lim(),
		    .m_tcm_addr_base(),
		    .m_tcm_addr_size(),
		    .m_tcm_addr_lim(),
		    .m_is_mem_addr(soc_map$m_is_mem_addr),
		    .m_is_IO_addr(),
		    .m_is_near_mem_IO_addr(soc_map$m_is_near_mem_IO_addr),
		    .m_pc_reset_value());

  // submodule tlb
  mkTLB #(.dmem_not_imem(dmem_not_imem)) tlb(.CLK(CLK),
					     .RST_N(RST_N),
					     .insert_asid(tlb$insert_asid),
					     .insert_level(tlb$insert_level),
					     .insert_pte(tlb$insert_pte),
					     .insert_pte_pa(tlb$insert_pte_pa),
					     .insert_vpn(tlb$insert_vpn),
					     .lookup_asid(tlb$lookup_asid),
					     .lookup_vpn(tlb$lookup_vpn),
					     .EN_flush(tlb$EN_flush),
					     .EN_insert(tlb$EN_insert),
					     .RDY_flush(),
					     .lookup(tlb$lookup),
					     .RDY_lookup(tlb$RDY_lookup),
					     .RDY_insert(tlb$RDY_insert));

  // rule RL_rl_reset
  assign CAN_FIRE_RL_rl_reset =
	     (rg_cset_in_cache != 7'd127 ||
	      f_reset_reqs$EMPTY_N && f_reset_rsps$FULL_N) &&
	     rg_state == 4'd1 ;
  assign WILL_FIRE_RL_rl_reset = CAN_FIRE_RL_rl_reset ;

  // rule RL_rl_rereq
  assign CAN_FIRE_RL_rl_rereq = rg_state == 4'd10 ;
  assign WILL_FIRE_RL_rl_rereq =
	     CAN_FIRE_RL_rl_rereq && !WILL_FIRE_RL_rl_start_reset && !EN_req ;

  // rule RL_rl_ST_AMO_response
  assign CAN_FIRE_RL_rl_ST_AMO_response = rg_state == 4'd11 ;
  assign WILL_FIRE_RL_rl_ST_AMO_response = CAN_FIRE_RL_rl_ST_AMO_response ;

  // rule RL_rl_io_near_mem_read_req
  assign CAN_FIRE_RL_rl_io_near_mem_read_req =
	     f_near_mem_io_reqs$FULL_N &&
	     rg_state_EQ_12_93_AND_rg_op_5_EQ_0_6_OR_rg_op__ETC___d1097 ;
  assign WILL_FIRE_RL_rl_io_near_mem_read_req =
	     CAN_FIRE_RL_rl_io_near_mem_read_req &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_near_mem_read_rsp
  assign CAN_FIRE_RL_rl_io_near_mem_read_rsp =
	     f_near_mem_io_rsps$EMPTY_N && rg_state == 4'd13 &&
	     soc_map$m_is_near_mem_IO_addr &&
	     f_near_mem_io_rsps$D_OUT[65] ;
  assign WILL_FIRE_RL_rl_io_near_mem_read_rsp =
	     CAN_FIRE_RL_rl_io_near_mem_read_rsp &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_maintain_io_read_rsp
  assign CAN_FIRE_RL_rl_maintain_io_read_rsp = rg_state == 4'd14 ;
  assign WILL_FIRE_RL_rl_maintain_io_read_rsp =
	     CAN_FIRE_RL_rl_maintain_io_read_rsp ;

  // rule RL_rl_io_near_mem_write_req
  assign CAN_FIRE_RL_rl_io_near_mem_write_req =
	     f_near_mem_io_reqs$FULL_N && rg_state == 4'd12 &&
	     rg_op == 2'd1 &&
	     soc_map$m_is_near_mem_IO_addr ;
  assign WILL_FIRE_RL_rl_io_near_mem_write_req =
	     CAN_FIRE_RL_rl_io_near_mem_write_req &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_near_mem_write_rsp
  assign CAN_FIRE_RL_rl_io_near_mem_write_rsp =
	     f_near_mem_io_rsps$EMPTY_N && !f_near_mem_io_rsps$D_OUT[65] ;
  assign WILL_FIRE_RL_rl_io_near_mem_write_rsp =
	     CAN_FIRE_RL_rl_io_near_mem_write_rsp ;

  // rule RL_rl_io_AMO_SC_req
  assign CAN_FIRE_RL_rl_io_AMO_SC_req =
	     rg_state == 4'd12 && rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 &&
	     !soc_map$m_is_near_mem_IO_addr ;
  assign WILL_FIRE_RL_rl_io_AMO_SC_req =
	     CAN_FIRE_RL_rl_io_AMO_SC_req && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_drive_exception_rsp
  assign CAN_FIRE_RL_rl_drive_exception_rsp = rg_state == 4'd4 ;
  assign WILL_FIRE_RL_rl_drive_exception_rsp = rg_state == 4'd4 ;

  // rule RL_rl_start_reset
  assign CAN_FIRE_RL_rl_start_reset =
	     f_reset_reqs$EMPTY_N && rg_state != 4'd1 ;
  assign WILL_FIRE_RL_rl_start_reset = CAN_FIRE_RL_rl_start_reset ;

  // rule RL_rl_ptw_level_1
  assign CAN_FIRE_RL_rl_ptw_level_1 =
	     master_xactor_crg_rd_data_full$port1__read &&
	     NOT_master_xactor_rg_rd_data_33_BITS_2_TO_1_34_ETC___d859 &&
	     rg_state == 4'd6 ;
  assign WILL_FIRE_RL_rl_ptw_level_1 =
	     CAN_FIRE_RL_rl_ptw_level_1 && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_ptw_level_0
  assign CAN_FIRE_RL_rl_ptw_level_0 =
	     master_xactor_crg_rd_data_full$port1__read &&
	     (master_xactor_rg_rd_data[2:1] != 2'b0 ||
	      !_theResult____h22557[0] ||
	      !_theResult____h22557[1] && _theResult____h22557[2] ||
	      !_theResult____h22557[3] && !_theResult____h22557[1] ||
	      tlb$RDY_insert) &&
	     rg_state == 4'd7 ;
  assign WILL_FIRE_RL_rl_ptw_level_0 =
	     CAN_FIRE_RL_rl_ptw_level_0 && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_cache_refill_req_loop
  assign CAN_FIRE_RL_rl_cache_refill_req_loop =
	     !master_xactor_crg_rd_addr_full$port2__read &&
	     rg_requesting_cline ;
  assign WILL_FIRE_RL_rl_cache_refill_req_loop =
	     CAN_FIRE_RL_rl_cache_refill_req_loop &&
	     !WILL_FIRE_RL_rl_ptw_level_1 &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_probe_and_immed_rsp
  assign CAN_FIRE_RL_rl_probe_and_immed_rsp =
	     (cfg_verbosity_read__0_ULE_1___d11 || tlb$RDY_lookup) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d266 &&
	     rg_state == 4'd3 ;
  assign WILL_FIRE_RL_rl_probe_and_immed_rsp =
	     CAN_FIRE_RL_rl_probe_and_immed_rsp &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_cache_refill_rsps_loop
  assign CAN_FIRE_RL_rl_cache_refill_rsps_loop =
	     master_xactor_crg_rd_data_full$port1__read && rg_state == 4'd9 ;
  assign WILL_FIRE_RL_rl_cache_refill_rsps_loop =
	     CAN_FIRE_RL_rl_cache_refill_rsps_loop &&
	     !WILL_FIRE_RL_rl_start_reset &&
	     !EN_req ;

  // rule RL_rl_io_read_req
  assign CAN_FIRE_RL_rl_io_read_req =
	     !master_xactor_crg_rd_addr_full$port2__read &&
	     rg_state_EQ_12_93_AND_rg_op_5_EQ_0_6_OR_rg_op__ETC___d998 ;
  assign WILL_FIRE_RL_rl_io_read_req =
	     CAN_FIRE_RL_rl_io_read_req &&
	     !WILL_FIRE_RL_rl_cache_refill_req_loop &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_read_rsp
  assign CAN_FIRE_RL_rl_io_read_rsp =
	     master_xactor_crg_rd_data_full$port1__read &&
	     rg_state == 4'd13 &&
	     !soc_map$m_is_near_mem_IO_addr ;
  assign WILL_FIRE_RL_rl_io_read_rsp =
	     CAN_FIRE_RL_rl_io_read_rsp && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_write_req
  assign CAN_FIRE_RL_rl_io_write_req =
	     !master_xactor_crg_wr_addr_full$port2__read &&
	     !master_xactor_crg_wr_data_full$port2__read &&
	     rg_state == 4'd12 &&
	     rg_op == 2'd1 &&
	     !soc_map$m_is_near_mem_IO_addr ;
  assign WILL_FIRE_RL_rl_io_write_req =
	     CAN_FIRE_RL_rl_io_write_req && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_AMO_op_req
  assign CAN_FIRE_RL_rl_io_AMO_op_req =
	     !master_xactor_crg_rd_addr_full$port2__read &&
	     rg_state == 4'd12 &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] != 5'b00010 &&
	     rg_amo_funct7[6:2] != 5'b00011 ;
  assign WILL_FIRE_RL_rl_io_AMO_op_req =
	     CAN_FIRE_RL_rl_io_AMO_op_req &&
	     !WILL_FIRE_RL_rl_cache_refill_req_loop &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_AMO_read_rsp
  assign CAN_FIRE_RL_rl_io_AMO_read_rsp =
	     master_xactor_crg_rd_data_full_port1__read__32_ETC___d1245 &&
	     rg_state == 4'd15 ;
  assign WILL_FIRE_RL_rl_io_AMO_read_rsp =
	     CAN_FIRE_RL_rl_io_AMO_read_rsp && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_start_tlb_refill
  assign CAN_FIRE_RL_rl_start_tlb_refill =
	     !master_xactor_crg_rd_addr_full$port2__read &&
	     rg_state == 4'd5 &&
	     b__h22147 == 4'd0 ;
  assign WILL_FIRE_RL_rl_start_tlb_refill =
	     CAN_FIRE_RL_rl_start_tlb_refill &&
	     !WILL_FIRE_RL_rl_cache_refill_req_loop &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_start_cache_refill
  assign CAN_FIRE_RL_rl_start_cache_refill =
	     !master_xactor_crg_rd_addr_full$port2__read &&
	     rg_state == 4'd8 &&
	     b__h22147 == 4'd0 ;
  assign WILL_FIRE_RL_rl_start_cache_refill = MUX_rg_state$write_1__SEL_2 ;

  // rule RL_rl_discard_write_rsp
  assign CAN_FIRE_RL_rl_discard_write_rsp =
	     b__h22147 != 4'd0 && master_xactor_crg_wr_resp_full$port1__read ;
  assign WILL_FIRE_RL_rl_discard_write_rsp =
	     CAN_FIRE_RL_rl_discard_write_rsp &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // inputs to muxes for submodule ports
  assign MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[2:1] == 2'b0 ;
  assign MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d705 ;
  assign MUX_dw_output_ld_val$wset_1__SEL_1 =
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_rg_rd_data[2:1] == 2'b0 ;
  assign MUX_dw_output_ld_val$wset_1__SEL_3 =
	     WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	     f_near_mem_io_rsps$D_OUT[64] ;
  assign MUX_dw_output_ld_val$wset_1__SEL_4 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d402 ;
  assign MUX_dw_output_ld_val$wset_1__SEL_5 =
	     WILL_FIRE_RL_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_rl_ST_AMO_response ;
  assign MUX_master_xactor_crg_rd_addr_full$port2__write_1__SEL_1 =
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     master_xactor_rg_rd_data[2:1] == 2'b0 &&
	     _theResult____h22557[0] &&
	     !_theResult____h22557[2] &&
	     !_theResult____h22557[3] &&
	     !_theResult____h22557[1] ;
  assign MUX_master_xactor_rg_rd_addr$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_io_AMO_op_req || WILL_FIRE_RL_rl_io_read_req ;
  assign MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 =
	     EN_req &&
	     req_f3_BITS_1_TO_0_413_EQ_0b0_414_OR_req_f3_BI_ETC___d1443 ;
  assign MUX_ram_word64_set$a_put_1__SEL_1 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_rg_rd_data[2:1] == 2'b0 ;
  assign MUX_ram_word64_set$b_put_1__SEL_2 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[1:0] != 2'd3 ;
  assign MUX_rg_error_during_refill$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_rg_rd_data[2:1] != 2'b0 ;
  assign MUX_rg_exc_code$write_1__SEL_1 =
	     EN_req &&
	     NOT_req_f3_BITS_1_TO_0_413_EQ_0b0_414_415_AND__ETC___d1434 ;
  assign MUX_rg_exc_code$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[2:1] != 2'b0 ;
  assign MUX_rg_exc_code$write_1__SEL_3 =
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_rg_rd_data[2:1] != 2'b0 ;
  assign MUX_rg_exc_code$write_1__SEL_5 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d105 ;
  assign MUX_rg_exc_code$write_1__SEL_6 =
	     WILL_FIRE_RL_rl_ptw_level_0 &&
	     (!_theResult____h22557[0] ||
	      !_theResult____h22557[1] && _theResult____h22557[2] ||
	      !_theResult____h22557[3] && !_theResult____h22557[1] ||
	      master_xactor_rg_rd_data[2:1] != 2'b0) ;
  assign MUX_rg_exc_code$write_1__SEL_7 =
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     NOT_IF_rg_pte_pa_37_BIT_2_38_THEN_master_xacto_ETC___d866 ;
  assign MUX_rg_exc_code$write_1__SEL_8 =
	     WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	     !f_near_mem_io_rsps$D_OUT[64] ;
  assign MUX_rg_ld_val$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d569 ;
  assign MUX_rg_lrsc_valid$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d395 ;
  assign MUX_rg_state$write_1__SEL_2 =
	     CAN_FIRE_RL_rl_start_cache_refill &&
	     !WILL_FIRE_RL_rl_cache_refill_req_loop &&
	     !WILL_FIRE_RL_rl_start_reset &&
	     !EN_req ;
  assign MUX_rg_state$write_1__SEL_10 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[1:0] == 2'd3 ;
  assign MUX_rg_state$write_1__SEL_11 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d354 ;
  assign MUX_rg_state$write_1__SEL_20 =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 ;
  assign MUX_tlb$insert_1__SEL_1 =
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d898 ;
  assign MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1 =
	     ctr_wr_rsps_pending_crg + 4'd1 ;
  assign MUX_dw_output_ld_val$wset_1__VAL_4 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
	       new_value__h6597 :
	       new_value__h16569 ;
  assign MUX_f_near_mem_io_reqs$enq_1__VAL_1 =
	     { 1'd1,
	       mem_req_wr_addr_awaddr__h33155,
	       72'hAAAAAAAAAAAAAAAAAA } ;
  assign MUX_f_near_mem_io_reqs$enq_1__VAL_2 =
	     { 1'd0,
	       mem_req_wr_addr_awaddr__h33155,
	       value__h32094,
	       mem_req_wr_data_wstrb__h33366 } ;
  assign MUX_master_xactor_rg_rd_addr$write_1__VAL_1 =
	     { 4'd0, lev_0_pte_pa_w64_fa__h23222, 29'd851968 } ;
  assign MUX_master_xactor_rg_rd_addr$write_1__VAL_2 =
	     { 4'd0,
	       mem_req_wr_addr_awaddr__h33155,
	       8'd0,
	       value__h32678,
	       18'd65536 } ;
  assign MUX_master_xactor_rg_rd_addr$write_1__VAL_3 =
	     { 4'd0, lev_1_pte_pa_w64_fa__h22248, 29'd589824 } ;
  assign MUX_master_xactor_rg_rd_addr$write_1__VAL_4 =
	     { 34'd0, cline_addr__h25263, 29'd851968 } ;
  assign MUX_master_xactor_rg_rd_addr$write_1__VAL_5 =
	     { 4'd0, cline_fabric_addr__h25264, 29'd851968 } ;
  assign MUX_master_xactor_rg_wr_addr$write_1__VAL_1 =
	     { 4'd0,
	       mem_req_wr_addr_awaddr__h33155,
	       8'd0,
	       value__h35704,
	       18'd65536 } ;
  assign MUX_master_xactor_rg_wr_addr$write_1__VAL_2 =
	     { 4'd0, addr__h6238, 8'd0, value__h35704, 18'd65536 } ;
  assign MUX_master_xactor_rg_wr_data$write_1__VAL_1 =
	     { 4'd0,
	       mem_req_wr_data_wdata__h33365,
	       mem_req_wr_data_wstrb__h33366,
	       1'd1 } ;
  assign MUX_master_xactor_rg_wr_data$write_1__VAL_2 =
	     { 4'd0,
	       IF_rg_op_5_EQ_1_80_OR_rg_op_5_EQ_2_8_AND_rg_am_ETC___d720,
	       mem_req_wr_data_wstrb__h17921,
	       1'd1 } ;
  assign MUX_master_xactor_rg_wr_data$write_1__VAL_3 =
	     { 4'd0, value__h32094, mem_req_wr_data_wstrb__h33366, 1'd1 } ;
  assign MUX_ram_state_and_ctag_cset$a_put_3__VAL_1 = { 1'd1, rg_pa[33:12] } ;
  assign MUX_ram_word64_set$a_put_3__VAL_2 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       IF_rg_f3_34_EQ_0b0_35_THEN_IF_IF_rg_priv_9_ULE_ETC___d633 :
	       IF_rg_f3_34_EQ_0b0_35_THEN_IF_IF_rg_priv_9_ULE_ETC___d698 ;
  assign MUX_ram_word64_set$b_put_2__VAL_2 = rg_word64_set_in_cache + 9'd1 ;
  assign MUX_ram_word64_set$b_put_2__VAL_4 = { rg_addr[11:5], 2'd0 } ;
  assign MUX_rg_cset_in_cache$write_1__VAL_1 = rg_cset_in_cache + 7'd1 ;
  assign MUX_rg_exc_code$write_1__VAL_1 = (req_op == 2'd0) ? 4'd4 : 4'd6 ;
  assign MUX_rg_exc_code$write_1__VAL_6 =
	     (master_xactor_rg_rd_data[2:1] == 2'b0) ?
	       exc_code___1__h5786 :
	       access_exc_code__h3352 ;
  assign MUX_rg_ld_val$write_1__VAL_2 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       x__h14278 :
	       IF_rg_f3_34_EQ_0b10_65_THEN_SEXT_IF_rg_f3_34_E_ETC___d573 ;
  assign MUX_rg_pa$write_1__VAL_1 = { 2'd0, req_addr } ;
  assign MUX_rg_req_byte_in_cline$write_1__VAL_1 =
	     rg_req_byte_in_cline + 64'd8 ;
  assign MUX_rg_state$write_1__VAL_3 =
	     NOT_req_f3_BITS_1_TO_0_413_EQ_0b0_414_415_AND__ETC___d1434 ?
	       4'd4 :
	       4'd3 ;
  assign MUX_rg_state$write_1__VAL_5 =
	     (master_xactor_rg_rd_data[2:1] == 2'b0) ? 4'd14 : 4'd4 ;
  assign MUX_rg_state$write_1__VAL_10 =
	     (master_xactor_rg_rd_data[2:1] != 2'b0 ||
	      rg_error_during_refill) ?
	       4'd4 :
	       4'd10 ;
  assign MUX_rg_state$write_1__VAL_11 =
	     (rg_priv_9_ULE_0b1___d40 && rg_satp[31] && !tlb$lookup[68]) ?
	       4'd5 :
	       IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3__ETC___d359 ;
  assign MUX_rg_state$write_1__VAL_12 =
	     (master_xactor_rg_rd_data[2:1] == 2'b0) ?
	       ((!_theResult____h22557[0] ||
		 !_theResult____h22557[1] && _theResult____h22557[2] ||
		 !_theResult____h22557[3] && !_theResult____h22557[1]) ?
		  4'd4 :
		  4'd10) :
	       4'd4 ;
  assign MUX_rg_state$write_1__VAL_13 =
	     (master_xactor_rg_rd_data[2:1] == 2'b0) ?
	       ((!_theResult____h22557[0] ||
		 !_theResult____h22557[1] && _theResult____h22557[2]) ?
		  4'd4 :
		  ((!_theResult____h22557[3] && !_theResult____h22557[1]) ?
		     4'd7 :
		     ((_theResult____h22557[19:10] == 10'd0) ?
			4'd10 :
			4'd4))) :
	       4'd4 ;
  assign MUX_rg_state$write_1__VAL_17 =
	     f_near_mem_io_rsps$D_OUT[64] ? 4'd14 : 4'd4 ;

  // inlined wires
  assign dw_valid$whas =
	     (WILL_FIRE_RL_rl_io_AMO_read_rsp ||
	      WILL_FIRE_RL_rl_io_read_rsp) &&
	     master_xactor_rg_rd_data[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	     f_near_mem_io_rsps$D_OUT[64] ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d402 ||
	     WILL_FIRE_RL_rl_drive_exception_rsp ||
	     WILL_FIRE_RL_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_rl_ST_AMO_response ;
  assign master_xactor_crg_wr_addr_full$EN_port0__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign master_xactor_crg_wr_addr_full$port1__read =
	     !master_xactor_crg_wr_addr_full$EN_port0__write &&
	     master_xactor_crg_wr_addr_full ;
  assign master_xactor_crg_wr_addr_full$EN_port1__write =
	     master_xactor_crg_wr_addr_full$port1__read &&
	     mem_master_awready ;
  assign master_xactor_crg_wr_addr_full$port2__read =
	     !master_xactor_crg_wr_addr_full$EN_port1__write &&
	     master_xactor_crg_wr_addr_full$port1__read ;
  assign master_xactor_crg_wr_addr_full$EN_port2__write =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d705 ||
	     WILL_FIRE_RL_rl_io_write_req ;
  assign master_xactor_crg_wr_addr_full$port3__read =
	     master_xactor_crg_wr_addr_full$EN_port2__write ?
	       1'd1 :
	       master_xactor_crg_wr_addr_full$port2__read ;
  assign master_xactor_crg_wr_data_full$EN_port0__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign master_xactor_crg_wr_data_full$port1__read =
	     !master_xactor_crg_wr_data_full$EN_port0__write &&
	     master_xactor_crg_wr_data_full ;
  assign master_xactor_crg_wr_data_full$EN_port1__write =
	     master_xactor_crg_wr_data_full$port1__read && mem_master_wready ;
  assign master_xactor_crg_wr_data_full$port2__read =
	     !master_xactor_crg_wr_data_full$EN_port1__write &&
	     master_xactor_crg_wr_data_full$port1__read ;
  assign master_xactor_crg_wr_data_full$EN_port2__write =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d705 ||
	     WILL_FIRE_RL_rl_io_write_req ;
  assign master_xactor_crg_wr_data_full$port3__read =
	     master_xactor_crg_wr_data_full$EN_port2__write ?
	       1'd1 :
	       master_xactor_crg_wr_data_full$port2__read ;
  assign master_xactor_crg_wr_resp_full$EN_port0__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign master_xactor_crg_wr_resp_full$port1__read =
	     !master_xactor_crg_wr_resp_full$EN_port0__write &&
	     master_xactor_crg_wr_resp_full ;
  assign master_xactor_crg_wr_resp_full$port2__read =
	     !WILL_FIRE_RL_rl_discard_write_rsp &&
	     master_xactor_crg_wr_resp_full$port1__read ;
  assign master_xactor_crg_wr_resp_full$EN_port2__write =
	     mem_master_bvalid &&
	     !master_xactor_crg_wr_resp_full$port2__read ;
  assign master_xactor_crg_wr_resp_full$port3__read =
	     master_xactor_crg_wr_resp_full$EN_port2__write ||
	     master_xactor_crg_wr_resp_full$port2__read ;
  assign master_xactor_crg_rd_addr_full$EN_port0__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign master_xactor_crg_rd_addr_full$port1__read =
	     !master_xactor_crg_rd_addr_full$EN_port0__write &&
	     master_xactor_crg_rd_addr_full ;
  assign master_xactor_crg_rd_addr_full$EN_port1__write =
	     master_xactor_crg_rd_addr_full$port1__read &&
	     mem_master_arready ;
  assign master_xactor_crg_rd_addr_full$port2__read =
	     !master_xactor_crg_rd_addr_full$EN_port1__write &&
	     master_xactor_crg_rd_addr_full$port1__read ;
  assign master_xactor_crg_rd_addr_full$EN_port2__write =
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     master_xactor_rg_rd_data[2:1] == 2'b0 &&
	     _theResult____h22557[0] &&
	     !_theResult____h22557[2] &&
	     !_theResult____h22557[3] &&
	     !_theResult____h22557[1] ||
	     WILL_FIRE_RL_rl_io_AMO_op_req ||
	     WILL_FIRE_RL_rl_io_read_req ||
	     WILL_FIRE_RL_rl_cache_refill_req_loop ||
	     WILL_FIRE_RL_rl_start_cache_refill ||
	     WILL_FIRE_RL_rl_start_tlb_refill ;
  assign master_xactor_crg_rd_addr_full$port3__read =
	     master_xactor_crg_rd_addr_full$EN_port2__write ?
	       1'd1 :
	       master_xactor_crg_rd_addr_full$port2__read ;
  assign master_xactor_crg_rd_data_full$EN_port0__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign master_xactor_crg_rd_data_full$port1__read =
	     !master_xactor_crg_rd_data_full$EN_port0__write &&
	     master_xactor_crg_rd_data_full ;
  assign master_xactor_crg_rd_data_full$EN_port1__write =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp || WILL_FIRE_RL_rl_io_read_rsp ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop ||
	     WILL_FIRE_RL_rl_ptw_level_0 ||
	     WILL_FIRE_RL_rl_ptw_level_1 ;
  assign master_xactor_crg_rd_data_full$port2__read =
	     !master_xactor_crg_rd_data_full$EN_port1__write &&
	     master_xactor_crg_rd_data_full$port1__read ;
  assign master_xactor_crg_rd_data_full$EN_port2__write =
	     mem_master_rvalid &&
	     !master_xactor_crg_rd_data_full$port2__read ;
  assign master_xactor_crg_rd_data_full$port3__read =
	     master_xactor_crg_rd_data_full$EN_port2__write ||
	     master_xactor_crg_rd_data_full$port2__read ;
  assign ctr_wr_rsps_pending_crg$EN_port0__write =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d705 ||
	     WILL_FIRE_RL_rl_io_write_req ;
  always@(MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1 or
	  MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2 or
	  WILL_FIRE_RL_rl_io_write_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  ctr_wr_rsps_pending_crg$port0__write_1 =
	      MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1;
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2:
	  ctr_wr_rsps_pending_crg$port0__write_1 =
	      MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1;
      WILL_FIRE_RL_rl_io_write_req:
	  ctr_wr_rsps_pending_crg$port0__write_1 =
	      MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1;
      default: ctr_wr_rsps_pending_crg$port0__write_1 =
		   4'b1010 /* unspecified value */ ;
    endcase
  end
  assign ctr_wr_rsps_pending_crg$port1__write_1 = b__h22147 - 4'd1 ;
  assign ctr_wr_rsps_pending_crg$port2__read =
	     WILL_FIRE_RL_rl_discard_write_rsp ?
	       ctr_wr_rsps_pending_crg$port1__write_1 :
	       b__h22147 ;
  assign ctr_wr_rsps_pending_crg$EN_port2__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign ctr_wr_rsps_pending_crg$port3__read =
	     ctr_wr_rsps_pending_crg$EN_port2__write ?
	       4'd0 :
	       ctr_wr_rsps_pending_crg$port2__read ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN = set_verbosity_verbosity ;
  assign cfg_verbosity$EN = EN_set_verbosity ;

  // register ctr_wr_rsps_pending_crg
  assign ctr_wr_rsps_pending_crg$D_IN = ctr_wr_rsps_pending_crg$port3__read ;
  assign ctr_wr_rsps_pending_crg$EN = 1'b1 ;

  // register master_xactor_crg_rd_addr_full
  assign master_xactor_crg_rd_addr_full$D_IN =
	     master_xactor_crg_rd_addr_full$port3__read ;
  assign master_xactor_crg_rd_addr_full$EN = 1'b1 ;

  // register master_xactor_crg_rd_data_full
  assign master_xactor_crg_rd_data_full$D_IN =
	     master_xactor_crg_rd_data_full$port3__read ;
  assign master_xactor_crg_rd_data_full$EN = 1'b1 ;

  // register master_xactor_crg_wr_addr_full
  assign master_xactor_crg_wr_addr_full$D_IN =
	     master_xactor_crg_wr_addr_full$port3__read ;
  assign master_xactor_crg_wr_addr_full$EN = 1'b1 ;

  // register master_xactor_crg_wr_data_full
  assign master_xactor_crg_wr_data_full$D_IN =
	     master_xactor_crg_wr_data_full$port3__read ;
  assign master_xactor_crg_wr_data_full$EN = 1'b1 ;

  // register master_xactor_crg_wr_resp_full
  assign master_xactor_crg_wr_resp_full$D_IN =
	     master_xactor_crg_wr_resp_full$port3__read ;
  assign master_xactor_crg_wr_resp_full$EN = 1'b1 ;

  // register master_xactor_rg_rd_addr
  always@(MUX_master_xactor_crg_rd_addr_full$port2__write_1__SEL_1 or
	  MUX_master_xactor_rg_rd_addr$write_1__VAL_1 or
	  MUX_master_xactor_rg_rd_addr$write_1__SEL_2 or
	  MUX_master_xactor_rg_rd_addr$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_start_tlb_refill or
	  MUX_master_xactor_rg_rd_addr$write_1__VAL_3 or
	  WILL_FIRE_RL_rl_start_cache_refill or
	  MUX_master_xactor_rg_rd_addr$write_1__VAL_4 or
	  WILL_FIRE_RL_rl_cache_refill_req_loop or
	  MUX_master_xactor_rg_rd_addr$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_master_xactor_crg_rd_addr_full$port2__write_1__SEL_1:
	  master_xactor_rg_rd_addr$D_IN =
	      MUX_master_xactor_rg_rd_addr$write_1__VAL_1;
      MUX_master_xactor_rg_rd_addr$write_1__SEL_2:
	  master_xactor_rg_rd_addr$D_IN =
	      MUX_master_xactor_rg_rd_addr$write_1__VAL_2;
      WILL_FIRE_RL_rl_start_tlb_refill:
	  master_xactor_rg_rd_addr$D_IN =
	      MUX_master_xactor_rg_rd_addr$write_1__VAL_3;
      WILL_FIRE_RL_rl_start_cache_refill:
	  master_xactor_rg_rd_addr$D_IN =
	      MUX_master_xactor_rg_rd_addr$write_1__VAL_4;
      WILL_FIRE_RL_rl_cache_refill_req_loop:
	  master_xactor_rg_rd_addr$D_IN =
	      MUX_master_xactor_rg_rd_addr$write_1__VAL_5;
      default: master_xactor_rg_rd_addr$D_IN =
		   97'h0AAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign master_xactor_rg_rd_addr$EN =
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     master_xactor_rg_rd_data[2:1] == 2'b0 &&
	     _theResult____h22557[0] &&
	     !_theResult____h22557[2] &&
	     !_theResult____h22557[3] &&
	     !_theResult____h22557[1] ||
	     WILL_FIRE_RL_rl_io_AMO_op_req ||
	     WILL_FIRE_RL_rl_io_read_req ||
	     WILL_FIRE_RL_rl_start_tlb_refill ||
	     WILL_FIRE_RL_rl_start_cache_refill ||
	     WILL_FIRE_RL_rl_cache_refill_req_loop ;

  // register master_xactor_rg_rd_data
  assign master_xactor_rg_rd_data$D_IN =
	     { mem_master_rid,
	       mem_master_rdata,
	       mem_master_rresp,
	       mem_master_rlast } ;
  assign master_xactor_rg_rd_data$EN = 1'd1 ;

  // register master_xactor_rg_wr_addr
  always@(MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  MUX_master_xactor_rg_wr_addr$write_1__VAL_1 or
	  MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2 or
	  MUX_master_xactor_rg_wr_addr$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_io_write_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  master_xactor_rg_wr_addr$D_IN =
	      MUX_master_xactor_rg_wr_addr$write_1__VAL_1;
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2:
	  master_xactor_rg_wr_addr$D_IN =
	      MUX_master_xactor_rg_wr_addr$write_1__VAL_2;
      WILL_FIRE_RL_rl_io_write_req:
	  master_xactor_rg_wr_addr$D_IN =
	      MUX_master_xactor_rg_wr_addr$write_1__VAL_1;
      default: master_xactor_rg_wr_addr$D_IN =
		   97'h0AAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign master_xactor_rg_wr_addr$EN =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d705 ||
	     WILL_FIRE_RL_rl_io_write_req ;

  // register master_xactor_rg_wr_data
  always@(MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  MUX_master_xactor_rg_wr_data$write_1__VAL_1 or
	  MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2 or
	  MUX_master_xactor_rg_wr_data$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_io_write_req or
	  MUX_master_xactor_rg_wr_data$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  master_xactor_rg_wr_data$D_IN =
	      MUX_master_xactor_rg_wr_data$write_1__VAL_1;
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2:
	  master_xactor_rg_wr_data$D_IN =
	      MUX_master_xactor_rg_wr_data$write_1__VAL_2;
      WILL_FIRE_RL_rl_io_write_req:
	  master_xactor_rg_wr_data$D_IN =
	      MUX_master_xactor_rg_wr_data$write_1__VAL_3;
      default: master_xactor_rg_wr_data$D_IN =
		   77'h0AAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign master_xactor_rg_wr_data$EN =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d705 ||
	     WILL_FIRE_RL_rl_io_write_req ;

  // register master_xactor_rg_wr_resp
  assign master_xactor_rg_wr_resp$D_IN =
	     { mem_master_bid, mem_master_bresp } ;
  assign master_xactor_rg_wr_resp$EN =
	     mem_master_bvalid &&
	     !master_xactor_crg_wr_resp_full$port2__read ;

  // register rg_addr
  assign rg_addr$D_IN = req_addr ;
  assign rg_addr$EN = EN_req ;

  // register rg_amo_funct7
  assign rg_amo_funct7$D_IN = req_amo_funct7 ;
  assign rg_amo_funct7$EN = EN_req ;

  // register rg_cset_in_cache
  assign rg_cset_in_cache$D_IN =
	     WILL_FIRE_RL_rl_reset ?
	       MUX_rg_cset_in_cache$write_1__VAL_1 :
	       7'd0 ;
  assign rg_cset_in_cache$EN =
	     WILL_FIRE_RL_rl_reset || WILL_FIRE_RL_rl_start_reset ;

  // register rg_error_during_refill
  assign rg_error_during_refill$D_IN =
	     MUX_rg_error_during_refill$write_1__SEL_1 ;
  assign rg_error_during_refill$EN =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_rg_rd_data[2:1] != 2'b0 ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // register rg_exc_code
  always@(MUX_rg_exc_code$write_1__SEL_1 or
	  MUX_rg_exc_code$write_1__VAL_1 or
	  MUX_rg_exc_code$write_1__SEL_2 or
	  MUX_rg_exc_code$write_1__SEL_3 or
	  MUX_rg_error_during_refill$write_1__SEL_1 or
	  access_exc_code__h3352 or
	  MUX_rg_exc_code$write_1__SEL_5 or
	  x1_avValue_exc_code__h5388 or
	  MUX_rg_exc_code$write_1__SEL_6 or
	  MUX_rg_exc_code$write_1__VAL_6 or
	  MUX_rg_exc_code$write_1__SEL_7 or MUX_rg_exc_code$write_1__SEL_8)
  case (1'b1)
    MUX_rg_exc_code$write_1__SEL_1:
	rg_exc_code$D_IN = MUX_rg_exc_code$write_1__VAL_1;
    MUX_rg_exc_code$write_1__SEL_2: rg_exc_code$D_IN = 4'd7;
    MUX_rg_exc_code$write_1__SEL_3: rg_exc_code$D_IN = 4'd5;
    MUX_rg_error_during_refill$write_1__SEL_1:
	rg_exc_code$D_IN = access_exc_code__h3352;
    MUX_rg_exc_code$write_1__SEL_5:
	rg_exc_code$D_IN = x1_avValue_exc_code__h5388;
    MUX_rg_exc_code$write_1__SEL_6:
	rg_exc_code$D_IN = MUX_rg_exc_code$write_1__VAL_6;
    MUX_rg_exc_code$write_1__SEL_7:
	rg_exc_code$D_IN = MUX_rg_exc_code$write_1__VAL_6;
    MUX_rg_exc_code$write_1__SEL_8: rg_exc_code$D_IN = 4'd5;
    default: rg_exc_code$D_IN = 4'b1010 /* unspecified value */ ;
  endcase
  assign rg_exc_code$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d105 ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_rg_rd_data[2:1] != 2'b0 ||
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_rg_rd_data[2:1] != 2'b0 ||
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[2:1] != 2'b0 ||
	     WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	     !f_near_mem_io_rsps$D_OUT[64] ||
	     EN_req &&
	     NOT_req_f3_BITS_1_TO_0_413_EQ_0b0_414_415_AND__ETC___d1434 ||
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     NOT_IF_rg_pte_pa_37_BIT_2_38_THEN_master_xacto_ETC___d866 ||
	     WILL_FIRE_RL_rl_ptw_level_0 &&
	     (!_theResult____h22557[0] ||
	      !_theResult____h22557[1] && _theResult____h22557[2] ||
	      !_theResult____h22557[3] && !_theResult____h22557[1] ||
	      master_xactor_rg_rd_data[2:1] != 2'b0) ;

  // register rg_f3
  assign rg_f3$D_IN = req_f3 ;
  assign rg_f3$EN = EN_req ;

  // register rg_ld_val
  always@(MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  new_ld_val__h33093 or
	  MUX_rg_ld_val$write_1__SEL_2 or
	  MUX_rg_ld_val$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_io_read_rsp or
	  ld_val__h27917 or
	  WILL_FIRE_RL_rl_io_near_mem_read_rsp or
	  ld_val__h29551 or WILL_FIRE_RL_rl_io_AMO_SC_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  rg_ld_val$D_IN = new_ld_val__h33093;
      MUX_rg_ld_val$write_1__SEL_2:
	  rg_ld_val$D_IN = MUX_rg_ld_val$write_1__VAL_2;
      WILL_FIRE_RL_rl_io_read_rsp: rg_ld_val$D_IN = ld_val__h27917;
      WILL_FIRE_RL_rl_io_near_mem_read_rsp: rg_ld_val$D_IN = ld_val__h29551;
      WILL_FIRE_RL_rl_io_AMO_SC_req: rg_ld_val$D_IN = 64'd1;
      default: rg_ld_val$D_IN = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rg_ld_val$EN =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d569 ||
	     WILL_FIRE_RL_rl_io_read_rsp ||
	     WILL_FIRE_RL_rl_io_near_mem_read_rsp ||
	     WILL_FIRE_RL_rl_io_AMO_SC_req ;

  // register rg_lower_word32
  assign rg_lower_word32$D_IN = 32'h0 ;
  assign rg_lower_word32$EN = 1'b0 ;

  // register rg_lower_word32_full
  assign rg_lower_word32_full$D_IN = 1'd0 ;
  assign rg_lower_word32_full$EN =
	     WILL_FIRE_RL_rl_start_cache_refill ||
	     WILL_FIRE_RL_rl_start_reset ;

  // register rg_lrsc_pa
  assign rg_lrsc_pa$D_IN = x1_avValue_pa__h5387 ;
  assign rg_lrsc_pa$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d540 ;

  // register rg_lrsc_valid
  assign rg_lrsc_valid$D_IN =
	     MUX_rg_lrsc_valid$write_1__SEL_2 &&
	     rg_op_5_EQ_0_6_OR_rg_op_5_EQ_2_8_AND_rg_amo_fu_ETC___d396 ;
  assign rg_lrsc_valid$EN =
	     (WILL_FIRE_RL_rl_io_near_mem_read_req ||
	      WILL_FIRE_RL_rl_io_read_req) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d395 ||
	     WILL_FIRE_RL_rl_start_reset ;

  // register rg_mstatus_MXR
  assign rg_mstatus_MXR$D_IN = req_mstatus_MXR ;
  assign rg_mstatus_MXR$EN = EN_req ;

  // register rg_op
  assign rg_op$D_IN = req_op ;
  assign rg_op$EN = EN_req ;

  // register rg_pa
  assign rg_pa$D_IN =
	     EN_req ? MUX_rg_pa$write_1__VAL_1 : x1_avValue_pa__h5387 ;
  assign rg_pa$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d364 ||
	     EN_req ;

  // register rg_priv
  assign rg_priv$D_IN = req_priv ;
  assign rg_priv$EN = EN_req ;

  // register rg_pte_pa
  assign rg_pte_pa$D_IN =
	     MUX_master_xactor_crg_rd_addr_full$port2__write_1__SEL_1 ?
	       lev_0_pte_pa__h23220 :
	       lev_1_pte_pa__h22246 ;
  assign rg_pte_pa$EN =
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     master_xactor_rg_rd_data[2:1] == 2'b0 &&
	     _theResult____h22557[0] &&
	     !_theResult____h22557[2] &&
	     !_theResult____h22557[3] &&
	     !_theResult____h22557[1] ||
	     WILL_FIRE_RL_rl_start_tlb_refill ;

  // register rg_req_byte_in_cline
  assign rg_req_byte_in_cline$D_IN =
	     WILL_FIRE_RL_rl_cache_refill_req_loop ?
	       MUX_rg_req_byte_in_cline$write_1__VAL_1 :
	       64'd8 ;
  assign rg_req_byte_in_cline$EN =
	     WILL_FIRE_RL_rl_cache_refill_req_loop ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // register rg_requesting_cline
  always@(WILL_FIRE_RL_rl_cache_refill_req_loop or
	  rg_req_byte_in_cline or
	  WILL_FIRE_RL_rl_start_reset or WILL_FIRE_RL_rl_start_cache_refill)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_cache_refill_req_loop:
	  rg_requesting_cline$D_IN = rg_req_byte_in_cline != 64'd24;
      WILL_FIRE_RL_rl_start_reset: rg_requesting_cline$D_IN = 1'd0;
      WILL_FIRE_RL_rl_start_cache_refill: rg_requesting_cline$D_IN = 1'd1;
      default: rg_requesting_cline$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign rg_requesting_cline$EN =
	     WILL_FIRE_RL_rl_cache_refill_req_loop ||
	     WILL_FIRE_RL_rl_start_reset ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // register rg_satp
  assign rg_satp$D_IN = req_satp ;
  assign rg_satp$EN = EN_req ;

  // register rg_sstatus_SUM
  assign rg_sstatus_SUM$D_IN = req_sstatus_SUM ;
  assign rg_sstatus_SUM$EN = EN_req ;

  // register rg_st_amo_val
  assign rg_st_amo_val$D_IN = EN_req ? req_st_value : new_st_val__h18431 ;
  assign rg_st_amo_val$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d816 ||
	     EN_req ;

  // register rg_state
  always@(EN_tlb_flush or
	  WILL_FIRE_RL_rl_start_cache_refill or
	  EN_req or
	  MUX_rg_state$write_1__VAL_3 or
	  WILL_FIRE_RL_rl_start_tlb_refill or
	  WILL_FIRE_RL_rl_io_AMO_read_rsp or
	  MUX_rg_state$write_1__VAL_5 or
	  WILL_FIRE_RL_rl_io_AMO_op_req or
	  WILL_FIRE_RL_rl_io_write_req or
	  WILL_FIRE_RL_rl_io_read_rsp or
	  WILL_FIRE_RL_rl_io_read_req or
	  MUX_rg_state$write_1__SEL_10 or
	  MUX_rg_state$write_1__VAL_10 or
	  MUX_rg_state$write_1__SEL_11 or
	  MUX_rg_state$write_1__VAL_11 or
	  WILL_FIRE_RL_rl_ptw_level_0 or
	  MUX_rg_state$write_1__VAL_12 or
	  WILL_FIRE_RL_rl_ptw_level_1 or
	  MUX_rg_state$write_1__VAL_13 or
	  WILL_FIRE_RL_rl_start_reset or
	  WILL_FIRE_RL_rl_io_AMO_SC_req or
	  WILL_FIRE_RL_rl_io_near_mem_write_req or
	  WILL_FIRE_RL_rl_io_near_mem_read_rsp or
	  MUX_rg_state$write_1__VAL_17 or
	  WILL_FIRE_RL_rl_io_near_mem_read_req or
	  WILL_FIRE_RL_rl_rereq or MUX_rg_state$write_1__SEL_20)
  case (1'b1)
    EN_tlb_flush: rg_state$D_IN = 4'd2;
    WILL_FIRE_RL_rl_start_cache_refill: rg_state$D_IN = 4'd9;
    EN_req: rg_state$D_IN = MUX_rg_state$write_1__VAL_3;
    WILL_FIRE_RL_rl_start_tlb_refill: rg_state$D_IN = 4'd6;
    WILL_FIRE_RL_rl_io_AMO_read_rsp:
	rg_state$D_IN = MUX_rg_state$write_1__VAL_5;
    WILL_FIRE_RL_rl_io_AMO_op_req: rg_state$D_IN = 4'd15;
    WILL_FIRE_RL_rl_io_write_req: rg_state$D_IN = 4'd11;
    WILL_FIRE_RL_rl_io_read_rsp: rg_state$D_IN = MUX_rg_state$write_1__VAL_5;
    WILL_FIRE_RL_rl_io_read_req: rg_state$D_IN = 4'd13;
    MUX_rg_state$write_1__SEL_10:
	rg_state$D_IN = MUX_rg_state$write_1__VAL_10;
    MUX_rg_state$write_1__SEL_11:
	rg_state$D_IN = MUX_rg_state$write_1__VAL_11;
    WILL_FIRE_RL_rl_ptw_level_0: rg_state$D_IN = MUX_rg_state$write_1__VAL_12;
    WILL_FIRE_RL_rl_ptw_level_1: rg_state$D_IN = MUX_rg_state$write_1__VAL_13;
    WILL_FIRE_RL_rl_start_reset: rg_state$D_IN = 4'd1;
    WILL_FIRE_RL_rl_io_AMO_SC_req || WILL_FIRE_RL_rl_io_near_mem_write_req:
	rg_state$D_IN = 4'd11;
    WILL_FIRE_RL_rl_io_near_mem_read_rsp:
	rg_state$D_IN = MUX_rg_state$write_1__VAL_17;
    WILL_FIRE_RL_rl_io_near_mem_read_req: rg_state$D_IN = 4'd13;
    WILL_FIRE_RL_rl_rereq: rg_state$D_IN = 4'd3;
    MUX_rg_state$write_1__SEL_20: rg_state$D_IN = 4'd2;
    default: rg_state$D_IN = 4'b1010 /* unspecified value */ ;
  endcase
  assign rg_state$EN =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[1:0] == 2'd3 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d354 ||
	     WILL_FIRE_RL_rl_io_AMO_read_rsp ||
	     WILL_FIRE_RL_rl_io_read_rsp ||
	     WILL_FIRE_RL_rl_ptw_level_1 ||
	     WILL_FIRE_RL_rl_ptw_level_0 ||
	     WILL_FIRE_RL_rl_io_near_mem_read_rsp ||
	     EN_req ||
	     WILL_FIRE_RL_rl_start_reset ||
	     EN_tlb_flush ||
	     WILL_FIRE_RL_rl_rereq ||
	     WILL_FIRE_RL_rl_start_tlb_refill ||
	     WILL_FIRE_RL_rl_start_cache_refill ||
	     WILL_FIRE_RL_rl_io_AMO_SC_req ||
	     WILL_FIRE_RL_rl_io_near_mem_write_req ||
	     WILL_FIRE_RL_rl_io_write_req ||
	     WILL_FIRE_RL_rl_io_near_mem_read_req ||
	     WILL_FIRE_RL_rl_io_read_req ||
	     WILL_FIRE_RL_rl_io_AMO_op_req ;

  // register rg_word64_set_in_cache
  assign rg_word64_set_in_cache$D_IN =
	     MUX_ram_word64_set$b_put_1__SEL_2 ?
	       MUX_ram_word64_set$b_put_2__VAL_2 :
	       MUX_ram_word64_set$b_put_2__VAL_4 ;
  assign rg_word64_set_in_cache$EN =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[1:0] != 2'd3 ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // submodule f_near_mem_io_reqs
  assign f_near_mem_io_reqs$D_IN =
	     WILL_FIRE_RL_rl_io_near_mem_read_req ?
	       MUX_f_near_mem_io_reqs$enq_1__VAL_1 :
	       MUX_f_near_mem_io_reqs$enq_1__VAL_2 ;
  assign f_near_mem_io_reqs$ENQ =
	     WILL_FIRE_RL_rl_io_near_mem_read_req ||
	     WILL_FIRE_RL_rl_io_near_mem_write_req ;
  assign f_near_mem_io_reqs$DEQ = EN_near_mem_io_client_request_get ;
  assign f_near_mem_io_reqs$CLR = 1'b0 ;

  // submodule f_near_mem_io_rsps
  assign f_near_mem_io_rsps$D_IN = near_mem_io_client_response_put ;
  assign f_near_mem_io_rsps$ENQ = EN_near_mem_io_client_response_put ;
  assign f_near_mem_io_rsps$DEQ =
	     WILL_FIRE_RL_rl_io_near_mem_write_rsp ||
	     WILL_FIRE_RL_rl_io_near_mem_read_rsp ;
  assign f_near_mem_io_rsps$CLR = 1'b0 ;

  // submodule f_reset_reqs
  assign f_reset_reqs$D_IN = !EN_server_reset_request_put ;
  assign f_reset_reqs$ENQ =
	     EN_server_reset_request_put || EN_server_flush_request_put ;
  assign f_reset_reqs$DEQ =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 ;
  assign f_reset_reqs$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$D_IN = f_reset_reqs$D_OUT ;
  assign f_reset_rsps$ENQ =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 ;
  assign f_reset_rsps$DEQ =
	     EN_server_flush_response_get || EN_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule ram_state_and_ctag_cset
  assign ram_state_and_ctag_cset$ADDRA =
	     WILL_FIRE_RL_rl_start_cache_refill ?
	       rg_addr[11:5] :
	       rg_cset_in_cache ;
  assign ram_state_and_ctag_cset$ADDRB =
	     MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       req_addr[11:5] :
	       rg_addr[11:5] ;
  assign ram_state_and_ctag_cset$DIA =
	     WILL_FIRE_RL_rl_start_cache_refill ?
	       MUX_ram_state_and_ctag_cset$a_put_3__VAL_1 :
	       23'd2796202 ;
  assign ram_state_and_ctag_cset$DIB =
	     MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       23'b01010101010101010101010 /* unspecified value */  :
	       23'b01010101010101010101010 /* unspecified value */  ;
  assign ram_state_and_ctag_cset$WEA = 1'd1 ;
  assign ram_state_and_ctag_cset$WEB = 1'd0 ;
  assign ram_state_and_ctag_cset$ENA =
	     WILL_FIRE_RL_rl_start_cache_refill || WILL_FIRE_RL_rl_reset ;
  assign ram_state_and_ctag_cset$ENB =
	     EN_req &&
	     req_f3_BITS_1_TO_0_413_EQ_0b0_414_OR_req_f3_BI_ETC___d1443 ||
	     WILL_FIRE_RL_rl_rereq ;

  // submodule ram_word64_set
  assign ram_word64_set$ADDRA =
	     MUX_ram_word64_set$a_put_1__SEL_1 ?
	       rg_word64_set_in_cache :
	       rg_addr[11:3] ;
  always@(MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  req_addr or
	  MUX_ram_word64_set$b_put_1__SEL_2 or
	  MUX_ram_word64_set$b_put_2__VAL_2 or
	  WILL_FIRE_RL_rl_rereq or
	  rg_addr or
	  WILL_FIRE_RL_rl_start_cache_refill or
	  MUX_ram_word64_set$b_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  ram_word64_set$ADDRB = req_addr[11:3];
      MUX_ram_word64_set$b_put_1__SEL_2:
	  ram_word64_set$ADDRB = MUX_ram_word64_set$b_put_2__VAL_2;
      WILL_FIRE_RL_rl_rereq: ram_word64_set$ADDRB = rg_addr[11:3];
      WILL_FIRE_RL_rl_start_cache_refill:
	  ram_word64_set$ADDRB = MUX_ram_word64_set$b_put_2__VAL_4;
      default: ram_word64_set$ADDRB = 9'b010101010 /* unspecified value */ ;
    endcase
  end
  assign ram_word64_set$DIA =
	     MUX_ram_word64_set$a_put_1__SEL_1 ?
	       master_xactor_rg_rd_data[66:3] :
	       MUX_ram_word64_set$a_put_3__VAL_2 ;
  always@(MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  MUX_ram_word64_set$b_put_1__SEL_2 or
	  WILL_FIRE_RL_rl_rereq or WILL_FIRE_RL_rl_start_cache_refill)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      MUX_ram_word64_set$b_put_1__SEL_2:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_rl_rereq:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_rl_start_cache_refill:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      default: ram_word64_set$DIB =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ram_word64_set$WEA = 1'd1 ;
  assign ram_word64_set$WEB = 1'd0 ;
  assign ram_word64_set$ENA =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_rg_rd_data[2:1] == 2'b0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d582 ;
  assign ram_word64_set$ENB =
	     EN_req &&
	     req_f3_BITS_1_TO_0_413_EQ_0b0_414_OR_req_f3_BI_ETC___d1443 ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[1:0] != 2'd3 ||
	     WILL_FIRE_RL_rl_rereq ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // submodule soc_map
  assign soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign soc_map$m_is_mem_addr_addr = { 30'd0, x1_avValue_pa__h5387 } ;
  assign soc_map$m_is_near_mem_IO_addr_addr = { 30'd0, rg_pa } ;

  // submodule tlb
  assign tlb$insert_asid = rg_satp[30:22] ;
  assign tlb$insert_level = MUX_tlb$insert_1__SEL_1 ? 2'd1 : 2'd0 ;
  assign tlb$insert_pte =
	     MUX_tlb$insert_1__SEL_1 ?
	       _theResult____h22557 :
	       _theResult____h22557 ;
  assign tlb$insert_pte_pa = rg_pte_pa ;
  assign tlb$insert_vpn = rg_addr[31:12] ;
  assign tlb$lookup_asid = rg_satp[30:22] ;
  assign tlb$lookup_vpn = rg_addr[31:12] ;
  assign tlb$EN_flush = WILL_FIRE_RL_rl_start_reset || EN_tlb_flush ;
  assign tlb$EN_insert =
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d898 ||
	     WILL_FIRE_RL_rl_ptw_level_0 &&
	     master_xactor_rg_rd_data[2:1] == 2'b0 &&
	     _theResult____h22557[0] &&
	     (_theResult____h22557[1] || !_theResult____h22557[2]) &&
	     (_theResult____h22557[3] || _theResult____h22557[1]) ;

  // remaining internal signals
  assign IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d250 =
	     (x1_avValue_pa__h5387[2:0] == 3'h0) ?
	       CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_34_ETC__q43 :
	       NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_3_ETC___d249 ;
  assign IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_1_E_ETC___d520 =
	     (rg_addr[2:0] == 3'h0) ? 64'd1 : 64'd0 ;
  assign IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_IF__ETC___d1322 =
	     (rg_addr[2:0] == 3'h0) ? ld_val__h27917 : 64'd0 ;
  assign IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_NOT_ETC___d170 =
	     (rg_addr[2:0] == 3'h0) ?
	       NOT_ram_state_and_ctag_cset_b_read__26_BIT_22__ETC___d152 :
	       rg_addr[2:0] != 3'h4 ||
	       NOT_ram_state_and_ctag_cset_b_read__26_BIT_22__ETC___d152 ;
  assign IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_ram_ETC___d506 =
	     (rg_addr[2:0] == 3'h0) ? word64__h6415 : 64'd0 ;
  assign IF_rg_f3_34_EQ_0b10_65_THEN_SEXT_rg_st_amo_val_ETC___d637 =
	     (rg_f3 == 3'b010) ?
	       { {32{rg_st_amo_val_BITS_31_TO_0__q46[31]}},
		 rg_st_amo_val_BITS_31_TO_0__q46 } :
	       rg_st_amo_val ;
  assign IF_rg_op_5_EQ_0_6_OR_rg_op_5_EQ_2_8_AND_rg_amo_ETC___d262 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
	       !ram_state_and_ctag_cset$DOB[22] ||
	       !ram_state_and_ctag_cset_b_read__26_BITS_21_TO__ETC___d131 ||
	       IF_rg_f3_34_EQ_0b0_35_OR_rg_f3_34_EQ_0b100_36__ETC___d178 :
	       IF_rg_op_5_EQ_1_80_OR_rg_op_5_EQ_2_8_AND_rg_am_ETC___d261 ;
  assign IF_rg_op_5_EQ_0_6_OR_rg_op_5_EQ_2_8_AND_rg_amo_ETC___d357 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
	       4'd8 :
	       IF_rg_op_5_EQ_1_80_OR_rg_op_5_EQ_2_8_AND_rg_am_ETC___d356 ;
  assign IF_rg_op_5_EQ_1_80_OR_rg_op_5_EQ_2_8_AND_rg_am_ETC___d261 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       rg_op_5_EQ_2_8_AND_rg_amo_funct7_0_BITS_6_TO_2_ETC___d205 :
	       !ram_state_and_ctag_cset$DOB[22] ||
	       !ram_state_and_ctag_cset_b_read__26_BITS_21_TO__ETC___d131 ||
	       !master_xactor_crg_wr_addr_full$port2__read &&
	       !master_xactor_crg_wr_data_full$port2__read &&
	       IF_rg_f3_34_EQ_0b0_35_THEN_IF_IF_rg_priv_9_ULE_ETC___d254 &&
	       IF_rg_f3_34_EQ_0b0_35_OR_rg_f3_34_EQ_0b100_36__ETC___d178 &&
	       IF_rg_f3_34_BITS_1_TO_0_95_EQ_0b0_96_OR_rg_f3__ETC___d202 ;
  assign IF_rg_op_5_EQ_1_80_OR_rg_op_5_EQ_2_8_AND_rg_am_ETC___d356 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       4'd11 :
	       ((!ram_state_and_ctag_cset$DOB[22] ||
		 !ram_state_and_ctag_cset_b_read__26_BITS_21_TO__ETC___d131) ?
		  4'd8 :
		  4'd11) ;
  assign IF_rg_op_5_EQ_1_80_OR_rg_op_5_EQ_2_8_AND_rg_am_ETC___d720 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       mem_req_wr_data_wdata__h17920 :
	       mem_req_wr_data_wdata__h21363 ;
  assign IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3__ETC___d264 =
	     rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d105 ?
	       tlb$RDY_lookup :
	       dmem_not_imem && !soc_map$m_is_mem_addr ||
	       IF_rg_op_5_EQ_0_6_OR_rg_op_5_EQ_2_8_AND_rg_amo_ETC___d262 ;
  assign IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3__ETC___d359 =
	     rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d105 ?
	       4'd4 :
	       ((dmem_not_imem && !soc_map$m_is_mem_addr) ?
		  4'd12 :
		  IF_rg_op_5_EQ_0_6_OR_rg_op_5_EQ_2_8_AND_rg_amo_ETC___d357) ;
  assign IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3__ETC___d378 =
	     x1_avValue_pa__h5387 == rg_lrsc_pa ;
  assign NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_3_ETC___d241 =
	     x1_avValue_pa__h5387[2:0] != 3'h7 ||
	     CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_34_ETC__q43 ;
  assign NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_3_ETC___d246 =
	     x1_avValue_pa__h5387[2:0] != 3'h6 ||
	     CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_34_ETC__q43 ;
  assign NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_3_ETC___d249 =
	     x1_avValue_pa__h5387[2:0] != 3'h4 ||
	     CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_34_ETC__q43 ;
  assign NOT_IF_rg_pte_pa_37_BIT_2_38_THEN_master_xacto_ETC___d866 =
	     !_theResult____h22557[0] ||
	     !_theResult____h22557[1] && _theResult____h22557[2] ||
	     (_theResult____h22557[3] || _theResult____h22557[1]) &&
	     _theResult____h22557[19:10] != 10'd0 ||
	     master_xactor_rg_rd_data[2:1] != 2'b0 ;
  assign NOT_cfg_verbosity_read__0_ULE_2_54___d955 = cfg_verbosity > 4'd2 ;
  assign NOT_dmem_not_imem_0_AND_rg_op_5_EQ_0_6_OR_rg_o_ETC___d290 =
	     !dmem_not_imem &&
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     tlb$lookup[39] ;
  assign NOT_dmem_not_imem_0_OR_NOT_rg_op_5_EQ_0_6_7_AN_ETC___d87 =
	     !dmem_not_imem ||
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) ||
	     !tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_addr_9_ETC___d85 ;
  assign NOT_dmem_not_imem_0_OR_soc_map_m_is_mem_addr_0_ETC___d567 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     (rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 ||
	      rg_op != 2'd1 && ram_state_and_ctag_cset$DOB[22] &&
	      ram_state_and_ctag_cset_b_read__26_BITS_21_TO__ETC___d131) ;
  assign NOT_dmem_not_imem_0_OR_soc_map_m_is_mem_addr_0_ETC___d580 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     rg_op_5_EQ_1_80_OR_rg_op_5_EQ_2_8_AND_rg_amo_f_ETC___d578 ;
  assign NOT_dmem_not_imem_0_OR_soc_map_m_is_mem_addr_0_ETC___d733 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op == 2'd1 &&
	     IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3__ETC___d378 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_dmem_not_imem_0_OR_soc_map_m_is_mem_addr_0_ETC___d751 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_dmem_not_imem_0_OR_soc_map_m_is_mem_addr_0_ETC___d791 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_5_EQ_1_80_86_AND_NOT_rg_op_5_EQ_2_8__ETC___d789 ;
  assign NOT_dmem_not_imem_0_OR_soc_map_m_is_mem_addr_0_ETC___d796 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_5_EQ_1_80_86_AND_NOT_rg_op_5_EQ_2_8__ETC___d794 ;
  assign NOT_dmem_not_imem_0_OR_soc_map_m_is_mem_addr_0_ETC___d802 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_5_EQ_1_80_86_AND_NOT_rg_op_5_EQ_2_8__ETC___d800 ;
  assign NOT_dmem_not_imem_0_OR_soc_map_m_is_mem_addr_0_ETC___d810 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_5_EQ_1_80_86_AND_NOT_rg_op_5_EQ_2_8__ETC___d808 ;
  assign NOT_dmem_not_imem_0_OR_soc_map_m_is_mem_addr_0_ETC___d814 =
	     (!dmem_not_imem || soc_map$m_is_mem_addr) && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_5_EQ_1_80_86_AND_NOT_rg_op_5_EQ_2_8__ETC___d577 ;
  assign NOT_master_xactor_rg_rd_data_33_BITS_2_TO_1_34_ETC___d859 =
	     master_xactor_rg_rd_data[2:1] != 2'b0 ||
	     !_theResult____h22557[0] ||
	     !_theResult____h22557[1] && _theResult____h22557[2] ||
	     ((!_theResult____h22557[3] && !_theResult____h22557[1]) ?
		!master_xactor_crg_rd_addr_full$port2__read :
		_theResult____h22557[19:10] != 10'd0 || tlb$RDY_insert) ;
  assign NOT_ram_state_and_ctag_cset_b_read__26_BIT_22__ETC___d152 =
	     !ram_state_and_ctag_cset$DOB[22] || !rg_priv_9_ULE_0b1___d40 ||
	     !rg_satp[31] ||
	     tlb$RDY_lookup ;
  assign NOT_ram_state_and_ctag_cset_b_read__26_BIT_22__ETC___d380 =
	     (!ram_state_and_ctag_cset$DOB[22] ||
	      !ram_state_and_ctag_cset_b_read__26_BITS_21_TO__ETC___d131) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3__ETC___d378 ;
  assign NOT_req_f3_BITS_1_TO_0_413_EQ_0b0_414_415_AND__ETC___d1434 =
	     req_f3[1:0] != 2'b0 && (req_f3[1:0] != 2'b01 || req_addr[0]) &&
	     (req_f3[1:0] != 2'b10 || req_addr[1:0] != 2'b0) &&
	     (req_f3[1:0] != 2'b11 || req_addr[2:0] != 3'b0) ;
  assign NOT_rg_f3_34_EQ_0b11_71_72_OR_rg_amo_funct7_0__ETC___d251 =
	     rg_f3 != 3'b011 ||
	     CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_34_ETC__q43 ;
  assign NOT_rg_op_5_EQ_0_6_7_AND_NOT_rg_op_5_EQ_2_8_9__ETC___d350 =
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_86_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d187) ;
  assign NOT_rg_op_5_EQ_1_80_86_AND_NOT_rg_op_5_EQ_2_8__ETC___d389 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__26_BITS_21_TO__ETC___d131 &&
	     IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3__ETC___d378 ;
  assign NOT_rg_op_5_EQ_1_80_86_AND_NOT_rg_op_5_EQ_2_8__ETC___d577 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__26_BITS_21_TO__ETC___d131 ;
  assign NOT_rg_op_5_EQ_1_80_86_AND_NOT_rg_op_5_EQ_2_8__ETC___d789 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     (!ram_state_and_ctag_cset$DOB[22] ||
	      !ram_state_and_ctag_cset_b_read__26_BITS_21_TO__ETC___d131) &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_op_5_EQ_1_80_86_AND_NOT_rg_op_5_EQ_2_8__ETC___d794 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__26_BITS_21_TO__ETC___d131 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_op_5_EQ_1_80_86_AND_NOT_rg_op_5_EQ_2_8__ETC___d800 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__26_BITS_21_TO__ETC___d131 &&
	     ctr_wr_rsps_pending_crg == 4'd15 ;
  assign NOT_rg_op_5_EQ_1_80_86_AND_NOT_rg_op_5_EQ_2_8__ETC___d808 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__26_BITS_21_TO__ETC___d131 &&
	     IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3__ETC___d378 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_op_5_EQ_2_8_9_OR_NOT_rg_amo_funct7_0_BI_ETC___d575 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_86_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d187) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__26_BITS_21_TO__ETC___d131 ;
  assign NOT_rg_op_5_EQ_2_8_9_OR_NOT_rg_amo_funct7_0_BI_ETC___d754 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_86_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d187) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__26_BITS_21_TO__ETC___d131 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_op_5_EQ_2_8_9_OR_NOT_rg_amo_funct7_0_BI_ETC___d760 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_86_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d187) &&
	     (!ram_state_and_ctag_cset$DOB[22] ||
	      !ram_state_and_ctag_cset_b_read__26_BITS_21_TO__ETC___d131) &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_op_5_EQ_2_8_9_OR_NOT_rg_amo_funct7_0_BI_ETC___d766 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_86_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d187) &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_op_5_EQ_2_8_9_OR_NOT_rg_amo_funct7_0_BI_ETC___d773 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_86_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d187) &&
	     ctr_wr_rsps_pending_crg == 4'd15 ;
  assign NOT_rg_priv_9_EQ_0b0_5_83_OR_tlb_lookup_rg_sat_ETC___d297 =
	     (rg_priv != 2'b0 || tlb$lookup[40]) &&
	     (rg_priv != 2'b01 || !tlb$lookup[40] || rg_sstatus_SUM) &&
	     (NOT_dmem_not_imem_0_AND_rg_op_5_EQ_0_6_OR_rg_o_ETC___d290 ||
	      dmem_not_imem_AND_rg_op_5_EQ_0_6_OR_rg_op_5_EQ_ETC___d292 ||
	      dmem_not_imem && rg_op != 2'd0 &&
	      (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	      tlb$lookup[38]) ;
  assign NOT_rg_priv_9_EQ_0b0_5_83_OR_tlb_lookup_rg_sat_ETC___d329 =
	     (rg_priv != 2'b0 || tlb$lookup[40]) &&
	     (rg_priv != 2'b01 || !tlb$lookup[40] || rg_sstatus_SUM) &&
	     dmem_not_imem &&
	     tlb$lookup[38] ;
  assign NOT_rg_priv_9_EQ_0b0_5_83_OR_tlb_lookup_rg_sat_ETC___d526 =
	     (rg_priv != 2'b0 || tlb$lookup[40]) &&
	     (rg_priv != 2'b01 || !tlb$lookup[40] || rg_sstatus_SUM) &&
	     (!dmem_not_imem && tlb$lookup[39] ||
	      dmem_not_imem &&
	      tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_addr_9_ETC___d85) ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d266 =
	     (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$RDY_lookup) &&
	     (rg_priv_9_ULE_0b1___d40 && rg_satp[31] && !tlb$lookup[68] ||
	      IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3__ETC___d264) ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d302 =
	     !rg_priv_9_ULE_0b1___d40 || !rg_satp[31] ||
	     tlb$lookup[68] &&
	     NOT_rg_priv_9_EQ_0b0_5_83_OR_tlb_lookup_rg_sat_ETC___d297 &&
	     tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_addr_9_ETC___d299 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d326 =
	     !rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || !tlb$lookup[68] ||
	     rg_priv_9_EQ_0b0_5_AND_NOT_tlb_lookup_rg_satp__ETC___d314 ||
	     !tlb$lookup[42] ||
	     !tlb$lookup[43] ||
	     pte___2__h5884[7] ||
	     rg_op == 2'd0 ||
	     rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d363 =
	     !rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || !tlb$lookup[68] ||
	     NOT_rg_priv_9_EQ_0b0_5_83_OR_tlb_lookup_rg_sat_ETC___d297 &&
	     tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_addr_9_ETC___d299 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d364 =
	     (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d363 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d371 =
	     !rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || !tlb$lookup[68] ||
	     (rg_priv != 2'b0 || tlb$lookup[40]) &&
	     (rg_priv != 2'b01 || !tlb$lookup[40] || rg_sstatus_SUM) &&
	     rg_op_5_EQ_0_6_OR_rg_op_5_EQ_2_8_AND_rg_amo_fu_ETC___d367 &&
	     tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_addr_9_ETC___d299 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d374 =
	     (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d371 &&
	     dmem_not_imem &&
	     !soc_map$m_is_mem_addr &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d395 =
	     (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d363 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op_5_EQ_0_6_OR_rg_op_5_EQ_2_8_AND_rg_amo_fu_ETC___d392 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d401 =
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d363 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     (rg_op_5_EQ_0_6_OR_rg_op_5_EQ_2_8_AND_rg_amo_fu_ETC___d396 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 &&
	      lrsc_result__h14268) ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d402 =
	     (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d401 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d529 =
	     !rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || !tlb$lookup[68] ||
	     NOT_rg_priv_9_EQ_0b0_5_83_OR_tlb_lookup_rg_sat_ETC___d526 &&
	     tlb$lookup[42] ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d534 =
	     (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d529 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op_5_EQ_0_6_OR_rg_op_5_EQ_2_8_AND_rg_amo_fu_ETC___d531 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d540 =
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d529 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__26_BITS_21_TO__ETC___d131 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d547 =
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d529 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__26_BITS_21_TO__ETC___d131 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d553 =
	     (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d529 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op_5_EQ_0_6_OR_rg_op_5_EQ_2_8_AND_rg_amo_fu_ETC___d550 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d559 =
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d529 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7_0_BITS_6_TO_2_1_EQ_0b10_2_AND_NO_ETC___d556 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d563 =
	     !rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || !tlb$lookup[68] ||
	     NOT_rg_priv_9_EQ_0b0_5_83_OR_tlb_lookup_rg_sat_ETC___d329 &&
	     tlb$lookup[42] &&
	     tlb$lookup[43] ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d569 =
	     (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d563 &&
	     NOT_dmem_not_imem_0_OR_soc_map_m_is_mem_addr_0_ETC___d567 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d582 =
	     (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d563 &&
	     NOT_dmem_not_imem_0_OR_soc_map_m_is_mem_addr_0_ETC___d580 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d704 =
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d563 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     (rg_op_5_EQ_1_80_OR_rg_op_5_EQ_2_8_AND_rg_amo_f_ETC___d700 ||
	      NOT_rg_op_5_EQ_1_80_86_AND_NOT_rg_op_5_EQ_2_8__ETC___d577) ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d705 =
	     (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d704 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d735 =
	     (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d563 &&
	     NOT_dmem_not_imem_0_OR_soc_map_m_is_mem_addr_0_ETC___d733 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d741 =
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d563 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 &&
	     rg_lrsc_valid &&
	     !rg_lrsc_pa_86_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d187 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d747 =
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d563 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 &&
	     !rg_lrsc_valid &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d753 =
	     (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d563 &&
	     NOT_dmem_not_imem_0_OR_soc_map_m_is_mem_addr_0_ETC___d751 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d758 =
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d563 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_5_EQ_2_8_9_OR_NOT_rg_amo_funct7_0_BI_ETC___d754 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d759 =
	     (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d758 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d764 =
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d563 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_5_EQ_2_8_9_OR_NOT_rg_amo_funct7_0_BI_ETC___d760 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d770 =
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d563 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_5_EQ_2_8_9_OR_NOT_rg_amo_funct7_0_BI_ETC___d766 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d771 =
	     (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d770 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d777 =
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d563 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_5_EQ_2_8_9_OR_NOT_rg_amo_funct7_0_BI_ETC___d773 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d778 =
	     (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d777 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d785 =
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d563 &&
	     (!dmem_not_imem || soc_map$m_is_mem_addr) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h14268 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d786 =
	     (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d785 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d793 =
	     (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d563 &&
	     NOT_dmem_not_imem_0_OR_soc_map_m_is_mem_addr_0_ETC___d791 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d798 =
	     (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d563 &&
	     NOT_dmem_not_imem_0_OR_soc_map_m_is_mem_addr_0_ETC___d796 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d804 =
	     (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d563 &&
	     NOT_dmem_not_imem_0_OR_soc_map_m_is_mem_addr_0_ETC___d802 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d812 =
	     (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d563 &&
	     NOT_dmem_not_imem_0_OR_soc_map_m_is_mem_addr_0_ETC___d810 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d816 =
	     (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d563 &&
	     NOT_dmem_not_imem_0_OR_soc_map_m_is_mem_addr_0_ETC___d814 ;
  assign NOT_tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_ad_ETC___d102 =
	     !tlb$lookup[42] ||
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     !tlb$lookup[43] ;
  assign _theResult____h22557 =
	     rg_pte_pa[2] ?
	       master_xactor_rg_rd_data[66:35] :
	       master_xactor_rg_rd_data[34:3] ;
  assign _theResult___fst__h17822 = rg_st_amo_val << shift_bits__h17684 ;
  assign _theResult___fst__h21295 = new_st_val__h18431 << shift_bits__h17684 ;
  assign _theResult___fst__h31812 = rg_st_amo_val << shift_bits__h33161 ;
  assign _theResult___fst__h33297 = st_val__h33105 << shift_bits__h33161 ;
  assign _theResult___fst__h5475 =
	     tlb$lookup[68] ? _theResult___fst__h5547 : pa__h5375 ;
  assign _theResult___fst__h5547 =
	     (rg_priv_9_EQ_0b0_5_AND_NOT_tlb_lookup_rg_satp__ETC___d96 ||
	      NOT_tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_ad_ETC___d102) ?
	       pa__h5375 :
	       _theResult___fst__h5886 ;
  assign _theResult___snd_fst__h5477 =
	     tlb$lookup[68] ?
	       _theResult___snd_fst__h5549 :
	       tlb$lookup[67:36] ;
  assign _theResult___snd_fst__h5549 =
	     (rg_priv_9_EQ_0b0_5_AND_NOT_tlb_lookup_rg_satp__ETC___d96 ||
	      NOT_tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_ad_ETC___d102) ?
	       tlb$lookup[67:36] :
	       _theResult___snd_fst__h6024 ;
  assign _theResult___snd_fst__h6024 =
	     (!pte___2__h5884[7] && rg_op != 2'd0 &&
	      (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010)) ?
	       pte___1__h6101 :
	       pte___2__h5884 ;
  assign access_exc_code__h3352 =
	     dmem_not_imem ?
	       ((rg_op == 2'd0 ||
		 rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
		  4'd5 :
		  4'd7) :
	       4'd1 ;
  assign addr__h6238 = { 30'd0, x1_avValue_pa__h5387 } ;
  assign b__h22147 =
	     ctr_wr_rsps_pending_crg$EN_port0__write ?
	       ctr_wr_rsps_pending_crg$port0__write_1 :
	       ctr_wr_rsps_pending_crg ;
  assign cfg_verbosity_read__0_ULE_1___d11 = cfg_verbosity <= 4'd1 ;
  assign cline_addr__h25263 = { rg_pa[33:5], 5'd0 } ;
  assign cline_fabric_addr__h25264 =
	     { 30'd0, cline_addr__h25263 } | rg_req_byte_in_cline ;
  assign dmem_not_imem_AND_rg_op_5_EQ_0_6_OR_rg_op_5_EQ_ETC___d292 =
	     dmem_not_imem &&
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_addr_9_ETC___d85 ;
  assign dmem_not_imem_OR_NOT_rg_op_5_EQ_0_6_7_AND_NOT__ETC___d79 =
	     dmem_not_imem ||
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) ||
	     !tlb$lookup[39] ;
  assign exc_code___1__h5786 = x1_avValue_exc_code__h5388 ;
  assign f_near_mem_io_rspsD_OUT_BITS_15_TO_0__q5 =
	     f_near_mem_io_rsps$D_OUT[15:0] ;
  assign f_near_mem_io_rspsD_OUT_BITS_15_TO_8__q8 =
	     f_near_mem_io_rsps$D_OUT[15:8] ;
  assign f_near_mem_io_rspsD_OUT_BITS_23_TO_16__q11 =
	     f_near_mem_io_rsps$D_OUT[23:16] ;
  assign f_near_mem_io_rspsD_OUT_BITS_31_TO_0__q6 =
	     f_near_mem_io_rsps$D_OUT[31:0] ;
  assign f_near_mem_io_rspsD_OUT_BITS_31_TO_16__q12 =
	     f_near_mem_io_rsps$D_OUT[31:16] ;
  assign f_near_mem_io_rspsD_OUT_BITS_31_TO_24__q14 =
	     f_near_mem_io_rsps$D_OUT[31:24] ;
  assign f_near_mem_io_rspsD_OUT_BITS_39_TO_32__q18 =
	     f_near_mem_io_rsps$D_OUT[39:32] ;
  assign f_near_mem_io_rspsD_OUT_BITS_47_TO_32__q19 =
	     f_near_mem_io_rsps$D_OUT[47:32] ;
  assign f_near_mem_io_rspsD_OUT_BITS_47_TO_40__q22 =
	     f_near_mem_io_rsps$D_OUT[47:40] ;
  assign f_near_mem_io_rspsD_OUT_BITS_55_TO_48__q25 =
	     f_near_mem_io_rsps$D_OUT[55:48] ;
  assign f_near_mem_io_rspsD_OUT_BITS_63_TO_32__q20 =
	     f_near_mem_io_rsps$D_OUT[63:32] ;
  assign f_near_mem_io_rspsD_OUT_BITS_63_TO_48__q26 =
	     f_near_mem_io_rsps$D_OUT[63:48] ;
  assign f_near_mem_io_rspsD_OUT_BITS_63_TO_56__q28 =
	     f_near_mem_io_rsps$D_OUT[63:56] ;
  assign f_near_mem_io_rspsD_OUT_BITS_7_TO_0__q4 =
	     f_near_mem_io_rsps$D_OUT[7:0] ;
  assign ld_val7917_BITS_15_TO_0__q51 = ld_val__h27917[15:0] ;
  assign ld_val7917_BITS_15_TO_8__q53 = ld_val__h27917[15:8] ;
  assign ld_val7917_BITS_23_TO_16__q54 = ld_val__h27917[23:16] ;
  assign ld_val7917_BITS_31_TO_0__q52 = ld_val__h27917[31:0] ;
  assign ld_val7917_BITS_31_TO_16__q55 = ld_val__h27917[31:16] ;
  assign ld_val7917_BITS_31_TO_24__q56 = ld_val__h27917[31:24] ;
  assign ld_val7917_BITS_39_TO_32__q57 = ld_val__h27917[39:32] ;
  assign ld_val7917_BITS_47_TO_32__q58 = ld_val__h27917[47:32] ;
  assign ld_val7917_BITS_47_TO_40__q60 = ld_val__h27917[47:40] ;
  assign ld_val7917_BITS_55_TO_48__q61 = ld_val__h27917[55:48] ;
  assign ld_val7917_BITS_63_TO_32__q59 = ld_val__h27917[63:32] ;
  assign ld_val7917_BITS_63_TO_48__q62 = ld_val__h27917[63:48] ;
  assign ld_val7917_BITS_63_TO_56__q63 = ld_val__h27917[63:56] ;
  assign ld_val7917_BITS_7_TO_0__q50 = ld_val__h27917[7:0] ;
  assign lev_0_PTN_pa__h23218 = { _theResult____h22557[31:10], 12'b0 } ;
  assign lev_0_pte_pa__h23220 = lev_0_PTN_pa__h23218 + vpn_0_pa__h23219 ;
  assign lev_0_pte_pa_w64__h23221 = { lev_0_pte_pa__h23220[33:3], 3'b0 } ;
  assign lev_0_pte_pa_w64_fa__h23222 = { 30'd0, lev_0_pte_pa_w64__h23221 } ;
  assign lev_1_pte_pa__h22246 = satp_pa__h2610 + vpn_1_pa__h22245 ;
  assign lev_1_pte_pa_w64__h22247 = { lev_1_pte_pa__h22246[33:3], 3'b0 } ;
  assign lev_1_pte_pa_w64_fa__h22248 = { 30'd0, lev_1_pte_pa_w64__h22247 } ;
  assign lrsc_result__h14268 =
	     !rg_lrsc_valid ||
	     !rg_lrsc_pa_86_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d187 ;
  assign master_xactor_crg_rd_data_full_port1__read__32_ETC___d1245 =
	     master_xactor_crg_rd_data_full$port1__read &&
	     (master_xactor_rg_rd_data[2:1] != 2'b0 ||
	      !master_xactor_crg_wr_addr_full$port2__read &&
	      !master_xactor_crg_wr_data_full$port2__read) ;
  assign master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d875 =
	     master_xactor_rg_rd_data[2:1] == 2'b0 &&
	     (!_theResult____h22557[0] ||
	      !_theResult____h22557[1] && _theResult____h22557[2]) &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d883 =
	     master_xactor_rg_rd_data[2:1] == 2'b0 &&
	     _theResult____h22557[0] &&
	     !_theResult____h22557[2] &&
	     !_theResult____h22557[3] &&
	     !_theResult____h22557[1] &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d898 =
	     master_xactor_rg_rd_data[2:1] == 2'b0 &&
	     _theResult____h22557[0] &&
	     (_theResult____h22557[1] || !_theResult____h22557[2]) &&
	     (_theResult____h22557[3] || _theResult____h22557[1]) &&
	     _theResult____h22557[19:10] == 10'd0 ;
  assign master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d902 =
	     master_xactor_rg_rd_data[2:1] == 2'b0 &&
	     _theResult____h22557[0] &&
	     (_theResult____h22557[1] || !_theResult____h22557[2]) &&
	     (_theResult____h22557[3] || _theResult____h22557[1]) &&
	     _theResult____h22557[19:10] == 10'd0 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d908 =
	     master_xactor_rg_rd_data[2:1] == 2'b0 &&
	     _theResult____h22557[0] &&
	     (_theResult____h22557[1] || !_theResult____h22557[2]) &&
	     (_theResult____h22557[3] || _theResult____h22557[1]) &&
	     _theResult____h22557[19:10] != 10'd0 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d934 =
	     master_xactor_rg_rd_data[2:1] == 2'b0 &&
	     _theResult____h22557[0] &&
	     (_theResult____h22557[1] || !_theResult____h22557[2]) &&
	     (_theResult____h22557[3] || _theResult____h22557[1]) &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign master_xactor_rg_rd_data_BITS_10_TO_3__q1 =
	     master_xactor_rg_rd_data[10:3] ;
  assign master_xactor_rg_rd_data_BITS_18_TO_11__q7 =
	     master_xactor_rg_rd_data[18:11] ;
  assign master_xactor_rg_rd_data_BITS_18_TO_3__q2 =
	     master_xactor_rg_rd_data[18:3] ;
  assign master_xactor_rg_rd_data_BITS_26_TO_19__q9 =
	     master_xactor_rg_rd_data[26:19] ;
  assign master_xactor_rg_rd_data_BITS_34_TO_19__q10 =
	     master_xactor_rg_rd_data[34:19] ;
  assign master_xactor_rg_rd_data_BITS_34_TO_27__q13 =
	     master_xactor_rg_rd_data[34:27] ;
  assign master_xactor_rg_rd_data_BITS_34_TO_3__q3 =
	     master_xactor_rg_rd_data[34:3] ;
  assign master_xactor_rg_rd_data_BITS_42_TO_35__q15 =
	     master_xactor_rg_rd_data[42:35] ;
  assign master_xactor_rg_rd_data_BITS_50_TO_35__q16 =
	     master_xactor_rg_rd_data[50:35] ;
  assign master_xactor_rg_rd_data_BITS_50_TO_43__q21 =
	     master_xactor_rg_rd_data[50:43] ;
  assign master_xactor_rg_rd_data_BITS_58_TO_51__q23 =
	     master_xactor_rg_rd_data[58:51] ;
  assign master_xactor_rg_rd_data_BITS_66_TO_35__q17 =
	     master_xactor_rg_rd_data[66:35] ;
  assign master_xactor_rg_rd_data_BITS_66_TO_51__q24 =
	     master_xactor_rg_rd_data[66:51] ;
  assign master_xactor_rg_rd_data_BITS_66_TO_59__q27 =
	     master_xactor_rg_rd_data[66:59] ;
  assign mem_req_wr_addr_awaddr__h33155 = { 30'd0, rg_pa } ;
  assign new_st_val__h18431 =
	     (rg_f3 == 3'b010) ?
	       new_st_val__h18713 :
	       _theResult_____2__h18709 ;
  assign new_st_val__h18713 = { 32'd0, _theResult_____2__h18709[31:0] } ;
  assign new_st_val__h18804 =
	     IF_rg_f3_34_EQ_0b10_65_THEN_SEXT_IF_rg_f3_34_E_ETC___d573 +
	     IF_rg_f3_34_EQ_0b10_65_THEN_SEXT_rg_st_amo_val_ETC___d637 ;
  assign new_st_val__h19784 = w1__h18701 ^ w2__h33381 ;
  assign new_st_val__h19788 = w1__h18701 & w2__h33381 ;
  assign new_st_val__h19792 = w1__h18701 | w2__h33381 ;
  assign new_st_val__h19796 =
	     (w1__h18701 < w2__h33381) ? w1__h18701 : w2__h33381 ;
  assign new_st_val__h19801 =
	     (w1__h18701 <= w2__h33381) ? w2__h33381 : w1__h18701 ;
  assign new_st_val__h19807 =
	     ((IF_rg_f3_34_EQ_0b10_65_THEN_SEXT_IF_rg_f3_34_E_ETC___d573 ^
	       64'h8000000000000000) <
	      (IF_rg_f3_34_EQ_0b10_65_THEN_SEXT_rg_st_amo_val_ETC___d637 ^
	       64'h8000000000000000)) ?
	       w1__h18701 :
	       w2__h33381 ;
  assign new_st_val__h19812 =
	     ((IF_rg_f3_34_EQ_0b10_65_THEN_SEXT_IF_rg_f3_34_E_ETC___d573 ^
	       64'h8000000000000000) <=
	      (IF_rg_f3_34_EQ_0b10_65_THEN_SEXT_rg_st_amo_val_ETC___d637 ^
	       64'h8000000000000000)) ?
	       w2__h33381 :
	       w1__h18701 ;
  assign new_st_val__h33391 = { 32'd0, _theResult_____2__h33387[31:0] } ;
  assign new_st_val__h33482 =
	     new_ld_val__h33093 +
	     IF_rg_f3_34_EQ_0b10_65_THEN_SEXT_rg_st_amo_val_ETC___d637 ;
  assign new_st_val__h35342 = w1__h33379 ^ w2__h33381 ;
  assign new_st_val__h35346 = w1__h33379 & w2__h33381 ;
  assign new_st_val__h35350 = w1__h33379 | w2__h33381 ;
  assign new_st_val__h35354 =
	     (w1__h33379 < w2__h33381) ? w1__h33379 : w2__h33381 ;
  assign new_st_val__h35359 =
	     (w1__h33379 <= w2__h33381) ? w2__h33381 : w1__h33379 ;
  assign new_st_val__h35365 =
	     ((new_ld_val__h33093 ^ 64'h8000000000000000) <
	      (IF_rg_f3_34_EQ_0b10_65_THEN_SEXT_rg_st_amo_val_ETC___d637 ^
	       64'h8000000000000000)) ?
	       w1__h33379 :
	       w2__h33381 ;
  assign new_st_val__h35370 =
	     ((new_ld_val__h33093 ^ 64'h8000000000000000) <=
	      (IF_rg_f3_34_EQ_0b10_65_THEN_SEXT_rg_st_amo_val_ETC___d637 ^
	       64'h8000000000000000)) ?
	       w2__h33381 :
	       w1__h33379 ;
  assign new_value597_BITS_31_TO_0__q45 = new_value__h6597[31:0] ;
  assign pa___1__h5892 = { tlb$lookup[67:46], rg_addr[11:0] } ;
  assign pa___1__h5941 = { tlb$lookup[67:56], rg_addr[21:0] } ;
  assign pa__h5375 = { 2'd0, rg_addr } ;
  assign pte___1__h6073 = { tlb$lookup[67:43], 1'd1, tlb$lookup[41:36] } ;
  assign pte___1__h6101 =
	     { pte___2__h5884[31:8], 1'd1, pte___2__h5884[6:0] } ;
  assign pte___2__h5884 =
	     tlb$lookup[42] ? tlb$lookup[67:36] : pte___1__h6073 ;
  assign ram_state_and_ctag_cset_b_read__26_BITS_21_TO__ETC___d131 =
	     ram_state_and_ctag_cset$DOB[21:0] ==
	     x1_avValue_pa__h5387[33:12] ;
  assign ram_state_and_ctag_cset_b_read__26_BIT_22_27_A_ETC___d381 =
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__26_BITS_21_TO__ETC___d131 &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 ||
	     NOT_ram_state_and_ctag_cset_b_read__26_BIT_22__ETC___d380 ;
  assign req_f3_BITS_1_TO_0_413_EQ_0b0_414_OR_req_f3_BI_ETC___d1443 =
	     req_f3[1:0] == 2'b0 || req_f3[1:0] == 2'b01 && !req_addr[0] ||
	     req_f3[1:0] == 2'b10 && req_addr[1:0] == 2'b0 ||
	     req_f3[1:0] == 2'b11 && req_addr[2:0] == 3'b0 ;
  assign result__h13008 =
	     { {56{word64415_BITS_15_TO_8__q32[7]}},
	       word64415_BITS_15_TO_8__q32 } ;
  assign result__h13036 =
	     { {56{word64415_BITS_23_TO_16__q33[7]}},
	       word64415_BITS_23_TO_16__q33 } ;
  assign result__h13064 =
	     { {56{word64415_BITS_31_TO_24__q35[7]}},
	       word64415_BITS_31_TO_24__q35 } ;
  assign result__h13092 =
	     { {56{word64415_BITS_39_TO_32__q36[7]}},
	       word64415_BITS_39_TO_32__q36 } ;
  assign result__h13120 =
	     { {56{word64415_BITS_47_TO_40__q39[7]}},
	       word64415_BITS_47_TO_40__q39 } ;
  assign result__h13148 =
	     { {56{word64415_BITS_55_TO_48__q40[7]}},
	       word64415_BITS_55_TO_48__q40 } ;
  assign result__h13176 =
	     { {56{word64415_BITS_63_TO_56__q42[7]}},
	       word64415_BITS_63_TO_56__q42 } ;
  assign result__h13221 = { 56'd0, word64__h6415[7:0] } ;
  assign result__h13249 = { 56'd0, word64__h6415[15:8] } ;
  assign result__h13277 = { 56'd0, word64__h6415[23:16] } ;
  assign result__h13305 = { 56'd0, word64__h6415[31:24] } ;
  assign result__h13333 = { 56'd0, word64__h6415[39:32] } ;
  assign result__h13361 = { 56'd0, word64__h6415[47:40] } ;
  assign result__h13389 = { 56'd0, word64__h6415[55:48] } ;
  assign result__h13417 = { 56'd0, word64__h6415[63:56] } ;
  assign result__h13462 =
	     { {48{word64415_BITS_15_TO_0__q30[15]}},
	       word64415_BITS_15_TO_0__q30 } ;
  assign result__h13490 =
	     { {48{word64415_BITS_31_TO_16__q34[15]}},
	       word64415_BITS_31_TO_16__q34 } ;
  assign result__h13518 =
	     { {48{word64415_BITS_47_TO_32__q37[15]}},
	       word64415_BITS_47_TO_32__q37 } ;
  assign result__h13546 =
	     { {48{word64415_BITS_63_TO_48__q41[15]}},
	       word64415_BITS_63_TO_48__q41 } ;
  assign result__h13587 = { 48'd0, word64__h6415[15:0] } ;
  assign result__h13615 = { 48'd0, word64__h6415[31:16] } ;
  assign result__h13643 = { 48'd0, word64__h6415[47:32] } ;
  assign result__h13671 = { 48'd0, word64__h6415[63:48] } ;
  assign result__h13712 =
	     { {32{word64415_BITS_31_TO_0__q31[31]}},
	       word64415_BITS_31_TO_0__q31 } ;
  assign result__h13740 =
	     { {32{word64415_BITS_63_TO_32__q38[31]}},
	       word64415_BITS_63_TO_32__q38 } ;
  assign result__h13779 = { 32'd0, word64__h6415[31:0] } ;
  assign result__h13807 = { 32'd0, word64__h6415[63:32] } ;
  assign result__h27977 =
	     { {56{master_xactor_rg_rd_data_BITS_10_TO_3__q1[7]}},
	       master_xactor_rg_rd_data_BITS_10_TO_3__q1 } ;
  assign result__h28007 =
	     { {56{master_xactor_rg_rd_data_BITS_18_TO_11__q7[7]}},
	       master_xactor_rg_rd_data_BITS_18_TO_11__q7 } ;
  assign result__h28034 =
	     { {56{master_xactor_rg_rd_data_BITS_26_TO_19__q9[7]}},
	       master_xactor_rg_rd_data_BITS_26_TO_19__q9 } ;
  assign result__h28061 =
	     { {56{master_xactor_rg_rd_data_BITS_34_TO_27__q13[7]}},
	       master_xactor_rg_rd_data_BITS_34_TO_27__q13 } ;
  assign result__h28088 =
	     { {56{master_xactor_rg_rd_data_BITS_42_TO_35__q15[7]}},
	       master_xactor_rg_rd_data_BITS_42_TO_35__q15 } ;
  assign result__h28115 =
	     { {56{master_xactor_rg_rd_data_BITS_50_TO_43__q21[7]}},
	       master_xactor_rg_rd_data_BITS_50_TO_43__q21 } ;
  assign result__h28142 =
	     { {56{master_xactor_rg_rd_data_BITS_58_TO_51__q23[7]}},
	       master_xactor_rg_rd_data_BITS_58_TO_51__q23 } ;
  assign result__h28169 =
	     { {56{master_xactor_rg_rd_data_BITS_66_TO_59__q27[7]}},
	       master_xactor_rg_rd_data_BITS_66_TO_59__q27 } ;
  assign result__h28213 = { 56'd0, master_xactor_rg_rd_data[10:3] } ;
  assign result__h28240 = { 56'd0, master_xactor_rg_rd_data[18:11] } ;
  assign result__h28267 = { 56'd0, master_xactor_rg_rd_data[26:19] } ;
  assign result__h28294 = { 56'd0, master_xactor_rg_rd_data[34:27] } ;
  assign result__h28321 = { 56'd0, master_xactor_rg_rd_data[42:35] } ;
  assign result__h28348 = { 56'd0, master_xactor_rg_rd_data[50:43] } ;
  assign result__h28375 = { 56'd0, master_xactor_rg_rd_data[58:51] } ;
  assign result__h28402 = { 56'd0, master_xactor_rg_rd_data[66:59] } ;
  assign result__h28446 =
	     { {48{master_xactor_rg_rd_data_BITS_18_TO_3__q2[15]}},
	       master_xactor_rg_rd_data_BITS_18_TO_3__q2 } ;
  assign result__h28473 =
	     { {48{master_xactor_rg_rd_data_BITS_34_TO_19__q10[15]}},
	       master_xactor_rg_rd_data_BITS_34_TO_19__q10 } ;
  assign result__h28500 =
	     { {48{master_xactor_rg_rd_data_BITS_50_TO_35__q16[15]}},
	       master_xactor_rg_rd_data_BITS_50_TO_35__q16 } ;
  assign result__h28527 =
	     { {48{master_xactor_rg_rd_data_BITS_66_TO_51__q24[15]}},
	       master_xactor_rg_rd_data_BITS_66_TO_51__q24 } ;
  assign result__h28567 = { 48'd0, master_xactor_rg_rd_data[18:3] } ;
  assign result__h28594 = { 48'd0, master_xactor_rg_rd_data[34:19] } ;
  assign result__h28621 = { 48'd0, master_xactor_rg_rd_data[50:35] } ;
  assign result__h28648 = { 48'd0, master_xactor_rg_rd_data[66:51] } ;
  assign result__h28688 =
	     { {32{master_xactor_rg_rd_data_BITS_34_TO_3__q3[31]}},
	       master_xactor_rg_rd_data_BITS_34_TO_3__q3 } ;
  assign result__h28715 =
	     { {32{master_xactor_rg_rd_data_BITS_66_TO_35__q17[31]}},
	       master_xactor_rg_rd_data_BITS_66_TO_35__q17 } ;
  assign result__h28753 = { 32'd0, master_xactor_rg_rd_data[34:3] } ;
  assign result__h28780 = { 32'd0, master_xactor_rg_rd_data[66:35] } ;
  assign result__h29611 =
	     { {56{f_near_mem_io_rspsD_OUT_BITS_7_TO_0__q4[7]}},
	       f_near_mem_io_rspsD_OUT_BITS_7_TO_0__q4 } ;
  assign result__h29641 =
	     { {56{f_near_mem_io_rspsD_OUT_BITS_15_TO_8__q8[7]}},
	       f_near_mem_io_rspsD_OUT_BITS_15_TO_8__q8 } ;
  assign result__h29668 =
	     { {56{f_near_mem_io_rspsD_OUT_BITS_23_TO_16__q11[7]}},
	       f_near_mem_io_rspsD_OUT_BITS_23_TO_16__q11 } ;
  assign result__h29695 =
	     { {56{f_near_mem_io_rspsD_OUT_BITS_31_TO_24__q14[7]}},
	       f_near_mem_io_rspsD_OUT_BITS_31_TO_24__q14 } ;
  assign result__h29722 =
	     { {56{f_near_mem_io_rspsD_OUT_BITS_39_TO_32__q18[7]}},
	       f_near_mem_io_rspsD_OUT_BITS_39_TO_32__q18 } ;
  assign result__h29749 =
	     { {56{f_near_mem_io_rspsD_OUT_BITS_47_TO_40__q22[7]}},
	       f_near_mem_io_rspsD_OUT_BITS_47_TO_40__q22 } ;
  assign result__h29776 =
	     { {56{f_near_mem_io_rspsD_OUT_BITS_55_TO_48__q25[7]}},
	       f_near_mem_io_rspsD_OUT_BITS_55_TO_48__q25 } ;
  assign result__h29803 =
	     { {56{f_near_mem_io_rspsD_OUT_BITS_63_TO_56__q28[7]}},
	       f_near_mem_io_rspsD_OUT_BITS_63_TO_56__q28 } ;
  assign result__h29847 = { 56'd0, f_near_mem_io_rsps$D_OUT[7:0] } ;
  assign result__h29874 = { 56'd0, f_near_mem_io_rsps$D_OUT[15:8] } ;
  assign result__h29901 = { 56'd0, f_near_mem_io_rsps$D_OUT[23:16] } ;
  assign result__h29928 = { 56'd0, f_near_mem_io_rsps$D_OUT[31:24] } ;
  assign result__h29955 = { 56'd0, f_near_mem_io_rsps$D_OUT[39:32] } ;
  assign result__h29982 = { 56'd0, f_near_mem_io_rsps$D_OUT[47:40] } ;
  assign result__h30009 = { 56'd0, f_near_mem_io_rsps$D_OUT[55:48] } ;
  assign result__h30036 = { 56'd0, f_near_mem_io_rsps$D_OUT[63:56] } ;
  assign result__h30080 =
	     { {48{f_near_mem_io_rspsD_OUT_BITS_15_TO_0__q5[15]}},
	       f_near_mem_io_rspsD_OUT_BITS_15_TO_0__q5 } ;
  assign result__h30107 =
	     { {48{f_near_mem_io_rspsD_OUT_BITS_31_TO_16__q12[15]}},
	       f_near_mem_io_rspsD_OUT_BITS_31_TO_16__q12 } ;
  assign result__h30134 =
	     { {48{f_near_mem_io_rspsD_OUT_BITS_47_TO_32__q19[15]}},
	       f_near_mem_io_rspsD_OUT_BITS_47_TO_32__q19 } ;
  assign result__h30161 =
	     { {48{f_near_mem_io_rspsD_OUT_BITS_63_TO_48__q26[15]}},
	       f_near_mem_io_rspsD_OUT_BITS_63_TO_48__q26 } ;
  assign result__h30201 = { 48'd0, f_near_mem_io_rsps$D_OUT[15:0] } ;
  assign result__h30228 = { 48'd0, f_near_mem_io_rsps$D_OUT[31:16] } ;
  assign result__h30255 = { 48'd0, f_near_mem_io_rsps$D_OUT[47:32] } ;
  assign result__h30282 = { 48'd0, f_near_mem_io_rsps$D_OUT[63:48] } ;
  assign result__h30322 =
	     { {32{f_near_mem_io_rspsD_OUT_BITS_31_TO_0__q6[31]}},
	       f_near_mem_io_rspsD_OUT_BITS_31_TO_0__q6 } ;
  assign result__h30349 =
	     { {32{f_near_mem_io_rspsD_OUT_BITS_63_TO_32__q20[31]}},
	       f_near_mem_io_rspsD_OUT_BITS_63_TO_32__q20 } ;
  assign result__h30387 = { 32'd0, f_near_mem_io_rsps$D_OUT[31:0] } ;
  assign result__h30414 = { 32'd0, f_near_mem_io_rsps$D_OUT[63:32] } ;
  assign result__h33570 =
	     { {56{ld_val7917_BITS_7_TO_0__q50[7]}},
	       ld_val7917_BITS_7_TO_0__q50 } ;
  assign result__h34478 =
	     { {56{ld_val7917_BITS_15_TO_8__q53[7]}},
	       ld_val7917_BITS_15_TO_8__q53 } ;
  assign result__h34506 =
	     { {56{ld_val7917_BITS_23_TO_16__q54[7]}},
	       ld_val7917_BITS_23_TO_16__q54 } ;
  assign result__h34534 =
	     { {56{ld_val7917_BITS_31_TO_24__q56[7]}},
	       ld_val7917_BITS_31_TO_24__q56 } ;
  assign result__h34562 =
	     { {56{ld_val7917_BITS_39_TO_32__q57[7]}},
	       ld_val7917_BITS_39_TO_32__q57 } ;
  assign result__h34590 =
	     { {56{ld_val7917_BITS_47_TO_40__q60[7]}},
	       ld_val7917_BITS_47_TO_40__q60 } ;
  assign result__h34618 =
	     { {56{ld_val7917_BITS_55_TO_48__q61[7]}},
	       ld_val7917_BITS_55_TO_48__q61 } ;
  assign result__h34646 =
	     { {56{ld_val7917_BITS_63_TO_56__q63[7]}},
	       ld_val7917_BITS_63_TO_56__q63 } ;
  assign result__h34691 = { 56'd0, ld_val__h27917[7:0] } ;
  assign result__h34719 = { 56'd0, ld_val__h27917[15:8] } ;
  assign result__h34747 = { 56'd0, ld_val__h27917[23:16] } ;
  assign result__h34775 = { 56'd0, ld_val__h27917[31:24] } ;
  assign result__h34803 = { 56'd0, ld_val__h27917[39:32] } ;
  assign result__h34831 = { 56'd0, ld_val__h27917[47:40] } ;
  assign result__h34859 = { 56'd0, ld_val__h27917[55:48] } ;
  assign result__h34887 = { 56'd0, ld_val__h27917[63:56] } ;
  assign result__h34932 =
	     { {48{ld_val7917_BITS_15_TO_0__q51[15]}},
	       ld_val7917_BITS_15_TO_0__q51 } ;
  assign result__h34960 =
	     { {48{ld_val7917_BITS_31_TO_16__q55[15]}},
	       ld_val7917_BITS_31_TO_16__q55 } ;
  assign result__h34988 =
	     { {48{ld_val7917_BITS_47_TO_32__q58[15]}},
	       ld_val7917_BITS_47_TO_32__q58 } ;
  assign result__h35016 =
	     { {48{ld_val7917_BITS_63_TO_48__q62[15]}},
	       ld_val7917_BITS_63_TO_48__q62 } ;
  assign result__h35057 = { 48'd0, ld_val__h27917[15:0] } ;
  assign result__h35085 = { 48'd0, ld_val__h27917[31:16] } ;
  assign result__h35113 = { 48'd0, ld_val__h27917[47:32] } ;
  assign result__h35141 = { 48'd0, ld_val__h27917[63:48] } ;
  assign result__h35182 =
	     { {32{ld_val7917_BITS_31_TO_0__q52[31]}},
	       ld_val7917_BITS_31_TO_0__q52 } ;
  assign result__h35210 =
	     { {32{ld_val7917_BITS_63_TO_32__q59[31]}},
	       ld_val7917_BITS_63_TO_32__q59 } ;
  assign result__h35249 = { 32'd0, ld_val__h27917[31:0] } ;
  assign result__h35277 = { 32'd0, ld_val__h27917[63:32] } ;
  assign result__h6652 =
	     { {56{word64415_BITS_7_TO_0__q29[7]}},
	       word64415_BITS_7_TO_0__q29 } ;
  assign rg_amo_funct7_0_BITS_6_TO_2_1_EQ_0b10_2_AND_NO_ETC___d556 =
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     (!ram_state_and_ctag_cset$DOB[22] ||
	      !ram_state_and_ctag_cset_b_read__26_BITS_21_TO__ETC___d131) &&
	     IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3__ETC___d378 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign rg_lrsc_pa_86_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d187 =
	     rg_lrsc_pa == x1_avValue_pa__h5387 ;
  assign rg_op_5_EQ_0_6_OR_rg_op_5_EQ_2_8_AND_rg_amo_fu_ETC___d345 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     (!ram_state_and_ctag_cset$DOB[22] ||
	      !ram_state_and_ctag_cset_b_read__26_BITS_21_TO__ETC___d131) ;
  assign rg_op_5_EQ_0_6_OR_rg_op_5_EQ_2_8_AND_rg_amo_fu_ETC___d367 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_addr_9_ETC___d85 ||
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     tlb$lookup[38] ;
  assign rg_op_5_EQ_0_6_OR_rg_op_5_EQ_2_8_AND_rg_amo_fu_ETC___d392 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     ram_state_and_ctag_cset_b_read__26_BIT_22_27_A_ETC___d381 ||
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     rg_op_5_EQ_1_80_OR_rg_op_5_EQ_2_8_AND_rg_amo_f_ETC___d390 ;
  assign rg_op_5_EQ_0_6_OR_rg_op_5_EQ_2_8_AND_rg_amo_fu_ETC___d396 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__26_BITS_21_TO__ETC___d131 ;
  assign rg_op_5_EQ_0_6_OR_rg_op_5_EQ_2_8_AND_rg_amo_fu_ETC___d531 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__26_BITS_21_TO__ETC___d131 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign rg_op_5_EQ_0_6_OR_rg_op_5_EQ_2_8_AND_rg_amo_fu_ETC___d550 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     (!ram_state_and_ctag_cset$DOB[22] ||
	      !ram_state_and_ctag_cset_b_read__26_BITS_21_TO__ETC___d131) &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign rg_op_5_EQ_1_80_OR_rg_op_5_EQ_2_8_AND_rg_amo_f_ETC___d390 =
	     rg_op == 2'd1 &&
	     IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3__ETC___d378 ||
	     rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 ||
	     NOT_rg_op_5_EQ_1_80_86_AND_NOT_rg_op_5_EQ_2_8__ETC___d389 ;
  assign rg_op_5_EQ_1_80_OR_rg_op_5_EQ_2_8_AND_rg_amo_f_ETC___d578 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_5_EQ_2_8_9_OR_NOT_rg_amo_funct7_0_BI_ETC___d575 ||
	     NOT_rg_op_5_EQ_1_80_86_AND_NOT_rg_op_5_EQ_2_8__ETC___d577 ;
  assign rg_op_5_EQ_1_80_OR_rg_op_5_EQ_2_8_AND_rg_amo_f_ETC___d700 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_86_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d187) ;
  assign rg_op_5_EQ_2_8_AND_rg_amo_funct7_0_BITS_6_TO_2_ETC___d205 =
	     rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h14268 ||
	     !master_xactor_crg_wr_addr_full$port2__read &&
	     !master_xactor_crg_wr_data_full$port2__read &&
	     IF_rg_f3_34_BITS_1_TO_0_95_EQ_0b0_96_OR_rg_f3__ETC___d202 ;
  assign rg_priv_9_EQ_0b0_5_AND_NOT_tlb_lookup_rg_satp__ETC___d314 =
	     rg_priv == 2'b0 && !tlb$lookup[40] ||
	     rg_priv == 2'b01 && tlb$lookup[40] && !rg_sstatus_SUM ||
	     !dmem_not_imem ||
	     !tlb$lookup[38] ;
  assign rg_priv_9_EQ_0b0_5_AND_NOT_tlb_lookup_rg_satp__ETC___d96 =
	     rg_priv == 2'b0 && !tlb$lookup[40] ||
	     rg_priv == 2'b01 && tlb$lookup[40] && !rg_sstatus_SUM ||
	     dmem_not_imem_OR_NOT_rg_op_5_EQ_0_6_7_AND_NOT__ETC___d79 &&
	     NOT_dmem_not_imem_0_OR_NOT_rg_op_5_EQ_0_6_7_AN_ETC___d87 &&
	     (!dmem_not_imem || rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010 ||
	      !tlb$lookup[38]) ;
  assign rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d105 =
	     rg_priv_9_ULE_0b1___d40 && rg_satp[31] && tlb$lookup[68] &&
	     (rg_priv_9_EQ_0b0_5_AND_NOT_tlb_lookup_rg_satp__ETC___d96 ||
	      NOT_tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_ad_ETC___d102) ;
  assign rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d305 =
	     rg_priv_9_ULE_0b1___d40 && rg_satp[31] &&
	     (rg_priv_9_EQ_0b0_5_AND_NOT_tlb_lookup_rg_satp__ETC___d96 ||
	      NOT_tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_ad_ETC___d102) &&
	     tlb$lookup[68] ;
  assign rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d336 =
	     rg_priv_9_ULE_0b1___d40 && rg_satp[31] && tlb$lookup[68] &&
	     NOT_rg_priv_9_EQ_0b0_5_83_OR_tlb_lookup_rg_sat_ETC___d329 &&
	     tlb$lookup[42] &&
	     tlb$lookup[43] &&
	     !pte___2__h5884[7] &&
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) ;
  assign rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d353 =
	     rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d105 ||
	     dmem_not_imem && !soc_map$m_is_mem_addr ||
	     rg_op_5_EQ_0_6_OR_rg_op_5_EQ_2_8_AND_rg_amo_fu_ETC___d345 ||
	     NOT_rg_op_5_EQ_0_6_7_AND_NOT_rg_op_5_EQ_2_8_9__ETC___d350 ;
  assign rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d354 =
	     rg_priv_9_ULE_0b1___d40 && rg_satp[31] && !tlb$lookup[68] ||
	     rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d353 ;
  assign rg_priv_9_ULE_0b1___d40 = rg_priv <= 2'b01 ;
  assign rg_st_amo_val_BITS_31_TO_0__q46 = rg_st_amo_val[31:0] ;
  assign rg_state_EQ_12_93_AND_rg_op_5_EQ_0_6_OR_rg_op__ETC___d1097 =
	     rg_state == 4'd12 &&
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     soc_map$m_is_near_mem_IO_addr ;
  assign rg_state_EQ_12_93_AND_rg_op_5_EQ_0_6_OR_rg_op__ETC___d998 =
	     rg_state == 4'd12 &&
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     !soc_map$m_is_near_mem_IO_addr ;
  assign satp_pa__h2610 = { rg_satp[21:0], 12'b0 } ;
  assign shift_bits__h17684 = { x1_avValue_pa__h5387[2:0], 3'b0 } ;
  assign shift_bits__h33161 = { rg_pa[2:0], 3'b0 } ;
  assign st_val__h33105 =
	     (rg_f3 == 3'b010) ?
	       new_st_val__h33391 :
	       _theResult_____2__h33387 ;
  assign strobe64__h17821 = 8'b00000001 << x1_avValue_pa__h5387[2:0] ;
  assign strobe64__h17824 = 8'b00000011 << x1_avValue_pa__h5387[2:0] ;
  assign strobe64__h17827 = 8'b00001111 << x1_avValue_pa__h5387[2:0] ;
  assign strobe64__h33296 = 8'b00000001 << rg_pa[2:0] ;
  assign strobe64__h33299 = 8'b00000011 << rg_pa[2:0] ;
  assign strobe64__h33302 = 8'b00001111 << rg_pa[2:0] ;
  assign tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_addr_9_ETC___d299 =
	     tlb$lookup[42] &&
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010 ||
	      tlb$lookup[43]) ;
  assign tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_addr_9_ETC___d85 =
	     tlb$lookup[37] | y__h5712 ;
  assign vpn_0_pa__h23219 = { 22'd0, rg_addr[21:12], 2'd0 } ;
  assign vpn_1_pa__h22245 = { 22'd0, rg_addr[31:22], 2'd0 } ;
  assign w13375_BITS_31_TO_0__q67 = w1__h33375[31:0] ;
  assign w1___1__h18772 = { 32'd0, new_value__h6597[31:0] } ;
  assign w1___1__h33450 = { 32'd0, w1__h33375[31:0] } ;
  assign w2___1__h33451 = { 32'd0, rg_st_amo_val[31:0] } ;
  assign w2__h33381 = (rg_f3 == 3'b010) ? w2___1__h33451 : rg_st_amo_val ;
  assign word64415_BITS_15_TO_0__q30 = word64__h6415[15:0] ;
  assign word64415_BITS_15_TO_8__q32 = word64__h6415[15:8] ;
  assign word64415_BITS_23_TO_16__q33 = word64__h6415[23:16] ;
  assign word64415_BITS_31_TO_0__q31 = word64__h6415[31:0] ;
  assign word64415_BITS_31_TO_16__q34 = word64__h6415[31:16] ;
  assign word64415_BITS_31_TO_24__q35 = word64__h6415[31:24] ;
  assign word64415_BITS_39_TO_32__q36 = word64__h6415[39:32] ;
  assign word64415_BITS_47_TO_32__q37 = word64__h6415[47:32] ;
  assign word64415_BITS_47_TO_40__q39 = word64__h6415[47:40] ;
  assign word64415_BITS_55_TO_48__q40 = word64__h6415[55:48] ;
  assign word64415_BITS_63_TO_32__q38 = word64__h6415[63:32] ;
  assign word64415_BITS_63_TO_48__q41 = word64__h6415[63:48] ;
  assign word64415_BITS_63_TO_56__q42 = word64__h6415[63:56] ;
  assign word64415_BITS_7_TO_0__q29 = word64__h6415[7:0] ;
  assign word64__h6415 = ram_word64_set$DOB & y__h6688 ;
  assign x1_avValue_exc_code__h5388 =
	     dmem_not_imem ?
	       ((rg_op == 2'd0 ||
		 rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
		  4'd13 :
		  4'd15) :
	       4'd12 ;
  assign x1_avValue_pa__h5387 =
	     (rg_priv_9_ULE_0b1___d40 && rg_satp[31]) ?
	       _theResult___fst__h5475 :
	       pa__h5375 ;
  assign x1_avValue_pte__h5390 =
	     (rg_priv_9_ULE_0b1___d40 && rg_satp[31]) ?
	       _theResult___snd_fst__h5477 :
	       tlb$lookup[67:36] ;
  assign x__h14278 = { 63'd0, lrsc_result__h14268 } ;
  assign y__h5712 = rg_mstatus_MXR & tlb$lookup[39] ;
  assign y__h6688 =
	     {64{ram_state_and_ctag_cset$DOB[22] &&
		 ram_state_and_ctag_cset_b_read__26_BITS_21_TO__ETC___d131}} ;
  always@(rg_f3)
  begin
    case (rg_f3[1:0])
      2'b0: value__h32678 = 3'b0;
      2'b01: value__h32678 = 3'b001;
      2'b10: value__h32678 = 3'b010;
      2'd3: value__h32678 = 3'b011;
    endcase
  end
  always@(rg_f3)
  begin
    case (rg_f3[1:0])
      2'b0: value__h35704 = 3'b0;
      2'b01: value__h35704 = 3'b001;
      2'b10: value__h35704 = 3'b010;
      2'b11: value__h35704 = 3'b011;
    endcase
  end
  always@(tlb$lookup or pa__h5375 or pa___1__h5892 or pa___1__h5941)
  begin
    case (tlb$lookup[35:34])
      2'd0: _theResult___fst__h5886 = pa___1__h5892;
      2'd1: _theResult___fst__h5886 = pa___1__h5941;
      default: _theResult___fst__h5886 = pa__h5375;
    endcase
  end
  always@(rg_f3 or strobe64__h33296 or strobe64__h33299 or strobe64__h33302)
  begin
    case (rg_f3[1:0])
      2'b0: mem_req_wr_data_wstrb__h33366 = strobe64__h33296;
      2'b01: mem_req_wr_data_wstrb__h33366 = strobe64__h33299;
      2'b10: mem_req_wr_data_wstrb__h33366 = strobe64__h33302;
      2'b11: mem_req_wr_data_wstrb__h33366 = 8'b11111111;
    endcase
  end
  always@(rg_f3 or rg_st_amo_val or _theResult___fst__h31812)
  begin
    case (rg_f3[1:0])
      2'b0, 2'b01, 2'b10: value__h32094 = _theResult___fst__h31812;
      2'd3: value__h32094 = rg_st_amo_val;
    endcase
  end
  always@(rg_f3 or strobe64__h17821 or strobe64__h17824 or strobe64__h17827)
  begin
    case (rg_f3[1:0])
      2'b0: mem_req_wr_data_wstrb__h17921 = strobe64__h17821;
      2'b01: mem_req_wr_data_wstrb__h17921 = strobe64__h17824;
      2'b10: mem_req_wr_data_wstrb__h17921 = strobe64__h17827;
      2'b11: mem_req_wr_data_wstrb__h17921 = 8'b11111111;
    endcase
  end
  always@(rg_f3 or rg_st_amo_val or _theResult___fst__h17822)
  begin
    case (rg_f3[1:0])
      2'b0, 2'b01, 2'b10:
	  mem_req_wr_data_wdata__h17920 = _theResult___fst__h17822;
      2'd3: mem_req_wr_data_wdata__h17920 = rg_st_amo_val;
    endcase
  end
  always@(rg_addr or
	  NOT_ram_state_and_ctag_cset_b_read__26_BIT_22__ETC___d152)
  begin
    case (rg_addr[2:0])
      3'h0, 3'h1, 3'h2, 3'h3, 3'h4, 3'h5, 3'h6:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_OR_rg_ad_ETC___d156 =
	      NOT_ram_state_and_ctag_cset_b_read__26_BIT_22__ETC___d152;
      3'd7:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_OR_rg_ad_ETC___d156 =
	      rg_addr[2:0] != 3'h7 ||
	      NOT_ram_state_and_ctag_cset_b_read__26_BIT_22__ETC___d152;
    endcase
  end
  always@(rg_addr or
	  NOT_ram_state_and_ctag_cset_b_read__26_BIT_22__ETC___d152)
  begin
    case (rg_addr[2:0])
      3'h0, 3'h2, 3'h4:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_OR_rg_ad_ETC___d164 =
	      NOT_ram_state_and_ctag_cset_b_read__26_BIT_22__ETC___d152;
      default: IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_OR_rg_ad_ETC___d164 =
		   rg_addr[2:0] != 3'h6 ||
		   NOT_ram_state_and_ctag_cset_b_read__26_BIT_22__ETC___d152;
    endcase
  end
  always@(rg_f3 or
	  rg_addr or
	  NOT_ram_state_and_ctag_cset_b_read__26_BIT_22__ETC___d152 or
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_OR_rg_ad_ETC___d156 or
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_OR_rg_ad_ETC___d164 or
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_NOT_ETC___d170)
  begin
    case (rg_f3)
      3'b0, 3'b100:
	  IF_rg_f3_34_EQ_0b0_35_OR_rg_f3_34_EQ_0b100_36__ETC___d178 =
	      IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_OR_rg_ad_ETC___d156;
      3'b001, 3'b101:
	  IF_rg_f3_34_EQ_0b0_35_OR_rg_f3_34_EQ_0b100_36__ETC___d178 =
	      IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_OR_rg_ad_ETC___d164;
      3'b010, 3'b110:
	  IF_rg_f3_34_EQ_0b0_35_OR_rg_f3_34_EQ_0b100_36__ETC___d178 =
	      IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_NOT_ETC___d170;
      default: IF_rg_f3_34_EQ_0b0_35_OR_rg_f3_34_EQ_0b100_36__ETC___d178 =
		   rg_f3 != 3'b011 || rg_addr[2:0] != 3'h0 ||
		   NOT_ram_state_and_ctag_cset_b_read__26_BIT_22__ETC___d152;
    endcase
  end
  always@(rg_amo_funct7 or
	  IF_rg_f3_34_EQ_0b0_35_OR_rg_f3_34_EQ_0b100_36__ETC___d178)
  begin
    case (rg_amo_funct7[6:2])
      5'b0, 5'b00100, 5'b01000, 5'b01100, 5'b10000, 5'b11000, 5'b11100:
	  CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_34_ETC__q43 =
	      IF_rg_f3_34_EQ_0b0_35_OR_rg_f3_34_EQ_0b100_36__ETC___d178;
      default: CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_34_ETC__q43 =
		   rg_amo_funct7[6:2] != 5'b10100 ||
		   IF_rg_f3_34_EQ_0b0_35_OR_rg_f3_34_EQ_0b100_36__ETC___d178;
    endcase
  end
  always@(x1_avValue_pa__h5387 or
	  NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_3_ETC___d241 or
	  CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_34_ETC__q43)
  begin
    case (x1_avValue_pa__h5387[2:0])
      3'h0, 3'h1, 3'h2, 3'h3, 3'h4, 3'h5, 3'h6:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d242 =
	      CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_34_ETC__q43;
      3'd7:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d242 =
	      NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_3_ETC___d241;
    endcase
  end
  always@(x1_avValue_pa__h5387 or
	  NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_3_ETC___d246 or
	  CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_34_ETC__q43)
  begin
    case (x1_avValue_pa__h5387[2:0])
      3'h0, 3'h2, 3'h4:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d247 =
	      CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_34_ETC__q43;
      default: IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d247 =
		   NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_3_ETC___d246;
    endcase
  end
  always@(rg_f3 or
	  NOT_rg_f3_34_EQ_0b11_71_72_OR_rg_amo_funct7_0__ETC___d251 or
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d242 or
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d247 or
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d250)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_34_EQ_0b0_35_THEN_IF_IF_rg_priv_9_ULE_ETC___d254 =
	      IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d242;
      3'b001:
	  IF_rg_f3_34_EQ_0b0_35_THEN_IF_IF_rg_priv_9_ULE_ETC___d254 =
	      IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d247;
      3'b010:
	  IF_rg_f3_34_EQ_0b0_35_THEN_IF_IF_rg_priv_9_ULE_ETC___d254 =
	      IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d250;
      default: IF_rg_f3_34_EQ_0b0_35_THEN_IF_IF_rg_priv_9_ULE_ETC___d254 =
		   NOT_rg_f3_34_EQ_0b11_71_72_OR_rg_amo_funct7_0__ETC___d251;
    endcase
  end
  always@(rg_f3 or rg_priv_9_ULE_0b1___d40 or rg_satp or tlb$RDY_lookup)
  begin
    case (rg_f3[1:0])
      2'b0, 2'b01:
	  IF_rg_f3_34_BITS_1_TO_0_95_EQ_0b0_96_OR_rg_f3__ETC___d202 =
	      !rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$RDY_lookup;
      default: IF_rg_f3_34_BITS_1_TO_0_95_EQ_0b0_96_OR_rg_f3__ETC___d202 =
		   rg_f3[1:0] != 2'b10 || !rg_priv_9_ULE_0b1___d40 ||
		   !rg_satp[31] ||
		   tlb$RDY_lookup;
    endcase
  end
  always@(rg_addr or
	  result__h6652 or
	  result__h13008 or
	  result__h13036 or
	  result__h13064 or
	  result__h13092 or
	  result__h13120 or result__h13148 or result__h13176)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d459 =
	      result__h6652;
      3'h1:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d459 =
	      result__h13008;
      3'h2:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d459 =
	      result__h13036;
      3'h3:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d459 =
	      result__h13064;
      3'h4:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d459 =
	      result__h13092;
      3'h5:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d459 =
	      result__h13120;
      3'h6:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d459 =
	      result__h13148;
      3'h7:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d459 =
	      result__h13176;
    endcase
  end
  always@(rg_addr or
	  result__h13221 or
	  result__h13249 or
	  result__h13277 or
	  result__h13305 or
	  result__h13333 or
	  result__h13361 or result__h13389 or result__h13417)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d475 =
	      result__h13221;
      3'h1:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d475 =
	      result__h13249;
      3'h2:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d475 =
	      result__h13277;
      3'h3:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d475 =
	      result__h13305;
      3'h4:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d475 =
	      result__h13333;
      3'h5:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d475 =
	      result__h13361;
      3'h6:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d475 =
	      result__h13389;
      3'h7:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d475 =
	      result__h13417;
    endcase
  end
  always@(rg_addr or
	  result__h13462 or
	  result__h13490 or result__h13518 or result__h13546)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d487 =
	      result__h13462;
      3'h2:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d487 =
	      result__h13490;
      3'h4:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d487 =
	      result__h13518;
      3'h6:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d487 =
	      result__h13546;
      default: IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d487 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h13587 or
	  result__h13615 or result__h13643 or result__h13671)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d495 =
	      result__h13587;
      3'h2:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d495 =
	      result__h13615;
      3'h4:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d495 =
	      result__h13643;
      3'h6:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d495 =
	      result__h13671;
      default: IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d495 =
		   64'd0;
    endcase
  end
  always@(rg_addr or result__h13779 or result__h13807)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d505 =
	      result__h13779;
      3'h4:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d505 =
	      result__h13807;
      default: IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d505 =
		   64'd0;
    endcase
  end
  always@(rg_addr or result__h13712 or result__h13740)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result3712_0x4_re_ETC__q44 =
	      result__h13712;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result3712_0x4_re_ETC__q44 =
	      result__h13740;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result3712_0x4_re_ETC__q44 =
		   64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d459 or
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d487 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result3712_0x4_re_ETC__q44 or
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_ram_ETC___d506 or
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d475 or
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d495 or
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d505)
  begin
    case (rg_f3)
      3'b0:
	  new_value__h6597 =
	      IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d459;
      3'b001:
	  new_value__h6597 =
	      IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d487;
      3'b010:
	  new_value__h6597 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result3712_0x4_re_ETC__q44;
      3'b011:
	  new_value__h6597 =
	      IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_ram_ETC___d506;
      3'b100:
	  new_value__h6597 =
	      IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d475;
      3'b101:
	  new_value__h6597 =
	      IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d495;
      3'b110:
	  new_value__h6597 =
	      IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d505;
      3'd7: new_value__h6597 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d459 or
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d487 or
	  w1___1__h18772 or
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_ram_ETC___d506 or
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d475 or
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d495 or
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d505)
  begin
    case (rg_f3)
      3'b0:
	  w1__h18701 =
	      IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d459;
      3'b001:
	  w1__h18701 =
	      IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d487;
      3'b010: w1__h18701 = w1___1__h18772;
      3'b011:
	  w1__h18701 =
	      IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_ram_ETC___d506;
      3'b100:
	  w1__h18701 =
	      IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d475;
      3'b101:
	  w1__h18701 =
	      IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d495;
      3'b110:
	  w1__h18701 =
	      IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d505;
      3'd7: w1__h18701 = 64'd0;
    endcase
  end
  always@(x1_avValue_pa__h5387 or ram_word64_set$DOB or rg_st_amo_val)
  begin
    case (x1_avValue_pa__h5387[2:0])
      3'h0:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d624 =
	      { ram_word64_set$DOB[63:16], rg_st_amo_val[15:0] };
      3'h2:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d624 =
	      { ram_word64_set$DOB[63:32],
		rg_st_amo_val[15:0],
		ram_word64_set$DOB[15:0] };
      3'h4:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d624 =
	      { ram_word64_set$DOB[63:48],
		rg_st_amo_val[15:0],
		ram_word64_set$DOB[31:0] };
      3'h6:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d624 =
	      { rg_st_amo_val[15:0], ram_word64_set$DOB[47:0] };
      default: IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d624 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(x1_avValue_pa__h5387 or ram_word64_set$DOB or rg_st_amo_val)
  begin
    case (x1_avValue_pa__h5387[2:0])
      3'h0:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d615 =
	      { ram_word64_set$DOB[63:8], rg_st_amo_val[7:0] };
      3'h1:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d615 =
	      { ram_word64_set$DOB[63:16],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[7:0] };
      3'h2:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d615 =
	      { ram_word64_set$DOB[63:24],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[15:0] };
      3'h3:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d615 =
	      { ram_word64_set$DOB[63:32],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[23:0] };
      3'h4:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d615 =
	      { ram_word64_set$DOB[63:40],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[31:0] };
      3'h5:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d615 =
	      { ram_word64_set$DOB[63:48],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[39:0] };
      3'h6:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d615 =
	      { ram_word64_set$DOB[63:56],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[47:0] };
      3'h7:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d615 =
	      { rg_st_amo_val[7:0], ram_word64_set$DOB[55:0] };
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d459 or
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d487 or
	  new_value597_BITS_31_TO_0__q45 or
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_ram_ETC___d506 or
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d475 or
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d495 or
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d505)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_34_EQ_0b10_65_THEN_SEXT_IF_rg_f3_34_E_ETC___d573 =
	      IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d459;
      3'b001:
	  IF_rg_f3_34_EQ_0b10_65_THEN_SEXT_IF_rg_f3_34_E_ETC___d573 =
	      IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d487;
      3'b010:
	  IF_rg_f3_34_EQ_0b10_65_THEN_SEXT_IF_rg_f3_34_E_ETC___d573 =
	      { {32{new_value597_BITS_31_TO_0__q45[31]}},
		new_value597_BITS_31_TO_0__q45 };
      3'b011:
	  IF_rg_f3_34_EQ_0b10_65_THEN_SEXT_IF_rg_f3_34_E_ETC___d573 =
	      IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_ram_ETC___d506;
      3'b100:
	  IF_rg_f3_34_EQ_0b10_65_THEN_SEXT_IF_rg_f3_34_E_ETC___d573 =
	      IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d475;
      3'b101:
	  IF_rg_f3_34_EQ_0b10_65_THEN_SEXT_IF_rg_f3_34_E_ETC___d573 =
	      IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d495;
      3'b110:
	  IF_rg_f3_34_EQ_0b10_65_THEN_SEXT_IF_rg_f3_34_E_ETC___d573 =
	      IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d505;
      3'd7: IF_rg_f3_34_EQ_0b10_65_THEN_SEXT_IF_rg_f3_34_E_ETC___d573 = 64'd0;
    endcase
  end
  always@(rg_amo_funct7 or
	  new_st_val__h19812 or
	  new_st_val__h18804 or
	  w2__h33381 or
	  new_st_val__h19784 or
	  new_st_val__h19792 or
	  new_st_val__h19788 or
	  new_st_val__h19807 or new_st_val__h19796 or new_st_val__h19801)
  begin
    case (rg_amo_funct7[6:2])
      5'b0: _theResult_____2__h18709 = new_st_val__h18804;
      5'b00001: _theResult_____2__h18709 = w2__h33381;
      5'b00100: _theResult_____2__h18709 = new_st_val__h19784;
      5'b01000: _theResult_____2__h18709 = new_st_val__h19792;
      5'b01100: _theResult_____2__h18709 = new_st_val__h19788;
      5'b10000: _theResult_____2__h18709 = new_st_val__h19807;
      5'b11000: _theResult_____2__h18709 = new_st_val__h19796;
      5'b11100: _theResult_____2__h18709 = new_st_val__h19801;
      default: _theResult_____2__h18709 = new_st_val__h19812;
    endcase
  end
  always@(rg_f3 or new_st_val__h18431 or _theResult___fst__h21295)
  begin
    case (rg_f3[1:0])
      2'b0, 2'b01, 2'b10:
	  mem_req_wr_data_wdata__h21363 = _theResult___fst__h21295;
      2'd3: mem_req_wr_data_wdata__h21363 = new_st_val__h18431;
    endcase
  end
  always@(x1_avValue_pa__h5387 or ram_word64_set$DOB or new_st_val__h18431)
  begin
    case (x1_avValue_pa__h5387[2:0])
      3'h0:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d689 =
	      { ram_word64_set$DOB[63:16], new_st_val__h18431[15:0] };
      3'h2:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d689 =
	      { ram_word64_set$DOB[63:32],
		new_st_val__h18431[15:0],
		ram_word64_set$DOB[15:0] };
      3'h4:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d689 =
	      { ram_word64_set$DOB[63:48],
		new_st_val__h18431[15:0],
		ram_word64_set$DOB[31:0] };
      3'h6:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d689 =
	      { new_st_val__h18431[15:0], ram_word64_set$DOB[47:0] };
      default: IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d689 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(x1_avValue_pa__h5387 or ram_word64_set$DOB or new_st_val__h18431)
  begin
    case (x1_avValue_pa__h5387[2:0])
      3'h0:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d680 =
	      { ram_word64_set$DOB[63:8], new_st_val__h18431[7:0] };
      3'h1:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d680 =
	      { ram_word64_set$DOB[63:16],
		new_st_val__h18431[7:0],
		ram_word64_set$DOB[7:0] };
      3'h2:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d680 =
	      { ram_word64_set$DOB[63:24],
		new_st_val__h18431[7:0],
		ram_word64_set$DOB[15:0] };
      3'h3:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d680 =
	      { ram_word64_set$DOB[63:32],
		new_st_val__h18431[7:0],
		ram_word64_set$DOB[23:0] };
      3'h4:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d680 =
	      { ram_word64_set$DOB[63:40],
		new_st_val__h18431[7:0],
		ram_word64_set$DOB[31:0] };
      3'h5:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d680 =
	      { ram_word64_set$DOB[63:48],
		new_st_val__h18431[7:0],
		ram_word64_set$DOB[39:0] };
      3'h6:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d680 =
	      { ram_word64_set$DOB[63:56],
		new_st_val__h18431[7:0],
		ram_word64_set$DOB[47:0] };
      3'h7:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d680 =
	      { new_st_val__h18431[7:0], ram_word64_set$DOB[55:0] };
    endcase
  end
  always@(x1_avValue_pa__h5387 or ram_word64_set$DOB or rg_st_amo_val)
  begin
    case (x1_avValue_pa__h5387[2:0])
      3'h0:
	  CASE_x1_avValue_pa387_BITS_2_TO_0_0x0_ram_word_ETC__q47 =
	      { ram_word64_set$DOB[63:32], rg_st_amo_val[31:0] };
      3'h4:
	  CASE_x1_avValue_pa387_BITS_2_TO_0_0x0_ram_word_ETC__q47 =
	      { rg_st_amo_val[31:0], ram_word64_set$DOB[31:0] };
      default: CASE_x1_avValue_pa387_BITS_2_TO_0_0x0_ram_word_ETC__q47 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_f3 or
	  ram_word64_set$DOB or
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d615 or
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d624 or
	  CASE_x1_avValue_pa387_BITS_2_TO_0_0x0_ram_word_ETC__q47 or
	  rg_st_amo_val)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_34_EQ_0b0_35_THEN_IF_IF_rg_priv_9_ULE_ETC___d633 =
	      IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d615;
      3'b001:
	  IF_rg_f3_34_EQ_0b0_35_THEN_IF_IF_rg_priv_9_ULE_ETC___d633 =
	      IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d624;
      3'b010:
	  IF_rg_f3_34_EQ_0b0_35_THEN_IF_IF_rg_priv_9_ULE_ETC___d633 =
	      CASE_x1_avValue_pa387_BITS_2_TO_0_0x0_ram_word_ETC__q47;
      3'b011:
	  IF_rg_f3_34_EQ_0b0_35_THEN_IF_IF_rg_priv_9_ULE_ETC___d633 =
	      rg_st_amo_val;
      default: IF_rg_f3_34_EQ_0b0_35_THEN_IF_IF_rg_priv_9_ULE_ETC___d633 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_addr or
	  result__h28446 or
	  result__h28473 or result__h28500 or result__h28527)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1065 =
	      result__h28446;
      3'h2:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1065 =
	      result__h28473;
      3'h4:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1065 =
	      result__h28500;
      3'h6:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1065 =
	      result__h28527;
      default: IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1065 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h28567 or
	  result__h28594 or result__h28621 or result__h28648)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1073 =
	      result__h28567;
      3'h2:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1073 =
	      result__h28594;
      3'h4:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1073 =
	      result__h28621;
      3'h6:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1073 =
	      result__h28648;
      default: IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1073 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h28213 or
	  result__h28240 or
	  result__h28267 or
	  result__h28294 or
	  result__h28321 or
	  result__h28348 or result__h28375 or result__h28402)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1053 =
	      result__h28213;
      3'h1:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1053 =
	      result__h28240;
      3'h2:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1053 =
	      result__h28267;
      3'h3:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1053 =
	      result__h28294;
      3'h4:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1053 =
	      result__h28321;
      3'h5:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1053 =
	      result__h28348;
      3'h6:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1053 =
	      result__h28375;
      3'h7:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1053 =
	      result__h28402;
    endcase
  end
  always@(rg_addr or
	  result__h27977 or
	  result__h28007 or
	  result__h28034 or
	  result__h28061 or
	  result__h28088 or
	  result__h28115 or result__h28142 or result__h28169)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1037 =
	      result__h27977;
      3'h1:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1037 =
	      result__h28007;
      3'h2:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1037 =
	      result__h28034;
      3'h3:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1037 =
	      result__h28061;
      3'h4:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1037 =
	      result__h28088;
      3'h5:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1037 =
	      result__h28115;
      3'h6:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1037 =
	      result__h28142;
      3'h7:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1037 =
	      result__h28169;
    endcase
  end
  always@(rg_addr or result__h28688 or result__h28715)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result8688_0x4_re_ETC__q48 =
	      result__h28688;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result8688_0x4_re_ETC__q48 =
	      result__h28715;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result8688_0x4_re_ETC__q48 =
		   64'd0;
    endcase
  end
  always@(rg_addr or result__h28753 or result__h28780)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result8753_0x4_re_ETC__q49 =
	      result__h28753;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result8753_0x4_re_ETC__q49 =
	      result__h28780;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result8753_0x4_re_ETC__q49 =
		   64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1037 or
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1065 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result8688_0x4_re_ETC__q48 or
	  rg_addr or
	  master_xactor_rg_rd_data or
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1053 or
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1073 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result8753_0x4_re_ETC__q49)
  begin
    case (rg_f3)
      3'b0:
	  ld_val__h27917 =
	      IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1037;
      3'b001:
	  ld_val__h27917 =
	      IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1065;
      3'b010:
	  ld_val__h27917 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result8688_0x4_re_ETC__q48;
      3'b011:
	  ld_val__h27917 =
	      (rg_addr[2:0] == 3'h0) ? master_xactor_rg_rd_data[66:3] : 64'd0;
      3'b100:
	  ld_val__h27917 =
	      IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1053;
      3'b101:
	  ld_val__h27917 =
	      IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1073;
      3'b110:
	  ld_val__h27917 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result8753_0x4_re_ETC__q49;
      3'd7: ld_val__h27917 = 64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h30201 or
	  result__h30228 or result__h30255 or result__h30282)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1174 =
	      result__h30201;
      3'h2:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1174 =
	      result__h30228;
      3'h4:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1174 =
	      result__h30255;
      3'h6:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1174 =
	      result__h30282;
      default: IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1174 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h30080 or
	  result__h30107 or result__h30134 or result__h30161)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1166 =
	      result__h30080;
      3'h2:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1166 =
	      result__h30107;
      3'h4:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1166 =
	      result__h30134;
      3'h6:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1166 =
	      result__h30161;
      default: IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1166 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h29611 or
	  result__h29641 or
	  result__h29668 or
	  result__h29695 or
	  result__h29722 or
	  result__h29749 or result__h29776 or result__h29803)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1138 =
	      result__h29611;
      3'h1:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1138 =
	      result__h29641;
      3'h2:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1138 =
	      result__h29668;
      3'h3:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1138 =
	      result__h29695;
      3'h4:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1138 =
	      result__h29722;
      3'h5:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1138 =
	      result__h29749;
      3'h6:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1138 =
	      result__h29776;
      3'h7:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1138 =
	      result__h29803;
    endcase
  end
  always@(rg_addr or
	  result__h29847 or
	  result__h29874 or
	  result__h29901 or
	  result__h29928 or
	  result__h29955 or
	  result__h29982 or result__h30009 or result__h30036)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1154 =
	      result__h29847;
      3'h1:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1154 =
	      result__h29874;
      3'h2:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1154 =
	      result__h29901;
      3'h3:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1154 =
	      result__h29928;
      3'h4:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1154 =
	      result__h29955;
      3'h5:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1154 =
	      result__h29982;
      3'h6:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1154 =
	      result__h30009;
      3'h7:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1154 =
	      result__h30036;
    endcase
  end
  always@(rg_addr or result__h30322 or result__h30349)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result0322_0x4_re_ETC__q64 =
	      result__h30322;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result0322_0x4_re_ETC__q64 =
	      result__h30349;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result0322_0x4_re_ETC__q64 =
		   64'd0;
    endcase
  end
  always@(rg_addr or result__h30387 or result__h30414)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result0387_0x4_re_ETC__q65 =
	      result__h30387;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result0387_0x4_re_ETC__q65 =
	      result__h30414;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result0387_0x4_re_ETC__q65 =
		   64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1138 or
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1166 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result0322_0x4_re_ETC__q64 or
	  rg_addr or
	  f_near_mem_io_rsps$D_OUT or
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1154 or
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1174 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result0387_0x4_re_ETC__q65)
  begin
    case (rg_f3)
      3'b0:
	  ld_val__h29551 =
	      IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1138;
      3'b001:
	  ld_val__h29551 =
	      IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1166;
      3'b010:
	  ld_val__h29551 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result0322_0x4_re_ETC__q64;
      3'b011:
	  ld_val__h29551 =
	      (rg_addr[2:0] == 3'h0) ? f_near_mem_io_rsps$D_OUT[63:0] : 64'd0;
      3'b100:
	  ld_val__h29551 =
	      IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1154;
      3'b101:
	  ld_val__h29551 =
	      IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1174;
      3'b110:
	  ld_val__h29551 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result0387_0x4_re_ETC__q65;
      3'd7: ld_val__h29551 = 64'd0;
    endcase
  end
  always@(rg_addr or result__h35249 or result__h35277)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1321 =
	      result__h35249;
      3'h4:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1321 =
	      result__h35277;
      default: IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1321 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h35057 or
	  result__h35085 or result__h35113 or result__h35141)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1311 =
	      result__h35057;
      3'h2:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1311 =
	      result__h35085;
      3'h4:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1311 =
	      result__h35113;
      3'h6:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1311 =
	      result__h35141;
      default: IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1311 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h34932 or
	  result__h34960 or result__h34988 or result__h35016)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1303 =
	      result__h34932;
      3'h2:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1303 =
	      result__h34960;
      3'h4:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1303 =
	      result__h34988;
      3'h6:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1303 =
	      result__h35016;
      default: IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1303 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h33570 or
	  result__h34478 or
	  result__h34506 or
	  result__h34534 or
	  result__h34562 or
	  result__h34590 or result__h34618 or result__h34646)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1275 =
	      result__h33570;
      3'h1:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1275 =
	      result__h34478;
      3'h2:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1275 =
	      result__h34506;
      3'h3:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1275 =
	      result__h34534;
      3'h4:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1275 =
	      result__h34562;
      3'h5:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1275 =
	      result__h34590;
      3'h6:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1275 =
	      result__h34618;
      3'h7:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1275 =
	      result__h34646;
    endcase
  end
  always@(rg_addr or
	  result__h34691 or
	  result__h34719 or
	  result__h34747 or
	  result__h34775 or
	  result__h34803 or
	  result__h34831 or result__h34859 or result__h34887)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1291 =
	      result__h34691;
      3'h1:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1291 =
	      result__h34719;
      3'h2:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1291 =
	      result__h34747;
      3'h3:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1291 =
	      result__h34775;
      3'h4:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1291 =
	      result__h34803;
      3'h5:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1291 =
	      result__h34831;
      3'h6:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1291 =
	      result__h34859;
      3'h7:
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1291 =
	      result__h34887;
    endcase
  end
  always@(rg_addr or result__h35182 or result__h35210)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result5182_0x4_re_ETC__q66 =
	      result__h35182;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result5182_0x4_re_ETC__q66 =
	      result__h35210;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result5182_0x4_re_ETC__q66 =
		   64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1275 or
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1303 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result5182_0x4_re_ETC__q66 or
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_IF__ETC___d1322 or
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1291 or
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1311 or
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1321)
  begin
    case (rg_f3)
      3'b0:
	  w1__h33375 =
	      IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1275;
      3'b001:
	  w1__h33375 =
	      IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1303;
      3'b010:
	  w1__h33375 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result5182_0x4_re_ETC__q66;
      3'b011:
	  w1__h33375 =
	      IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_IF__ETC___d1322;
      3'b100:
	  w1__h33375 =
	      IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1291;
      3'b101:
	  w1__h33375 =
	      IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1311;
      3'b110:
	  w1__h33375 =
	      IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1321;
      3'd7: w1__h33375 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1275 or
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1303 or
	  w1___1__h33450 or
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_IF__ETC___d1322 or
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1291 or
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1311 or
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1321)
  begin
    case (rg_f3)
      3'b0:
	  w1__h33379 =
	      IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1275;
      3'b001:
	  w1__h33379 =
	      IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1303;
      3'b010: w1__h33379 = w1___1__h33450;
      3'b011:
	  w1__h33379 =
	      IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_IF__ETC___d1322;
      3'b100:
	  w1__h33379 =
	      IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1291;
      3'b101:
	  w1__h33379 =
	      IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1311;
      3'b110:
	  w1__h33379 =
	      IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1321;
      3'd7: w1__h33379 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1275 or
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1303 or
	  w13375_BITS_31_TO_0__q67 or
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_IF__ETC___d1322 or
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1291 or
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1311 or
	  IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1321)
  begin
    case (rg_f3)
      3'b0:
	  new_ld_val__h33093 =
	      IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1275;
      3'b001:
	  new_ld_val__h33093 =
	      IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_SEX_ETC___d1303;
      3'b010:
	  new_ld_val__h33093 =
	      { {32{w13375_BITS_31_TO_0__q67[31]}},
		w13375_BITS_31_TO_0__q67 };
      3'b011:
	  new_ld_val__h33093 =
	      IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_IF__ETC___d1322;
      3'b100:
	  new_ld_val__h33093 =
	      IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1291;
      3'b101:
	  new_ld_val__h33093 =
	      IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1311;
      3'b110:
	  new_ld_val__h33093 =
	      IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_0_C_ETC___d1321;
      3'd7: new_ld_val__h33093 = 64'd0;
    endcase
  end
  always@(rg_amo_funct7 or
	  new_st_val__h35370 or
	  new_st_val__h33482 or
	  w2__h33381 or
	  new_st_val__h35342 or
	  new_st_val__h35350 or
	  new_st_val__h35346 or
	  new_st_val__h35365 or new_st_val__h35354 or new_st_val__h35359)
  begin
    case (rg_amo_funct7[6:2])
      5'b0: _theResult_____2__h33387 = new_st_val__h33482;
      5'b00001: _theResult_____2__h33387 = w2__h33381;
      5'b00100: _theResult_____2__h33387 = new_st_val__h35342;
      5'b01000: _theResult_____2__h33387 = new_st_val__h35350;
      5'b01100: _theResult_____2__h33387 = new_st_val__h35346;
      5'b10000: _theResult_____2__h33387 = new_st_val__h35365;
      5'b11000: _theResult_____2__h33387 = new_st_val__h35354;
      5'b11100: _theResult_____2__h33387 = new_st_val__h35359;
      default: _theResult_____2__h33387 = new_st_val__h35370;
    endcase
  end
  always@(rg_f3 or st_val__h33105 or _theResult___fst__h33297)
  begin
    case (rg_f3[1:0])
      2'b0, 2'b01, 2'b10:
	  mem_req_wr_data_wdata__h33365 = _theResult___fst__h33297;
      2'd3: mem_req_wr_data_wdata__h33365 = st_val__h33105;
    endcase
  end
  always@(x1_avValue_pa__h5387 or ram_word64_set$DOB or new_st_val__h18431)
  begin
    case (x1_avValue_pa__h5387[2:0])
      3'h0:
	  CASE_x1_avValue_pa387_BITS_2_TO_0_0x0_ram_word_ETC__q68 =
	      { ram_word64_set$DOB[63:32], new_st_val__h18431[31:0] };
      3'h4:
	  CASE_x1_avValue_pa387_BITS_2_TO_0_0x0_ram_word_ETC__q68 =
	      { new_st_val__h18431[31:0], ram_word64_set$DOB[31:0] };
      default: CASE_x1_avValue_pa387_BITS_2_TO_0_0x0_ram_word_ETC__q68 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_f3 or
	  ram_word64_set$DOB or
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d680 or
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d689 or
	  CASE_x1_avValue_pa387_BITS_2_TO_0_0x0_ram_word_ETC__q68 or
	  new_st_val__h18431)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_34_EQ_0b0_35_THEN_IF_IF_rg_priv_9_ULE_ETC___d698 =
	      IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d680;
      3'b001:
	  IF_rg_f3_34_EQ_0b0_35_THEN_IF_IF_rg_priv_9_ULE_ETC___d698 =
	      IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d689;
      3'b010:
	  IF_rg_f3_34_EQ_0b0_35_THEN_IF_IF_rg_priv_9_ULE_ETC___d698 =
	      CASE_x1_avValue_pa387_BITS_2_TO_0_0x0_ram_word_ETC__q68;
      3'b011:
	  IF_rg_f3_34_EQ_0b0_35_THEN_IF_IF_rg_priv_9_ULE_ETC___d698 =
	      new_st_val__h18431;
      default: IF_rg_f3_34_EQ_0b0_35_THEN_IF_IF_rg_priv_9_ULE_ETC___d698 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_f3 or IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_1_E_ETC___d520)
  begin
    case (rg_f3)
      3'b0, 3'b001, 3'b010, 3'b011, 3'b100, 3'b101, 3'b110:
	  new_value__h16569 =
	      IF_rg_addr_9_BITS_2_TO_0_38_EQ_0x0_39_THEN_1_E_ETC___d520;
      3'd7: new_value__h16569 = 64'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY 4'd0;
	master_xactor_crg_rd_addr_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	master_xactor_crg_rd_data_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	master_xactor_crg_wr_addr_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	master_xactor_crg_wr_data_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	master_xactor_crg_wr_resp_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY 7'd0;
	rg_lower_word32_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_requesting_cline <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (ctr_wr_rsps_pending_crg$EN)
	  ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY
	      ctr_wr_rsps_pending_crg$D_IN;
	if (master_xactor_crg_rd_addr_full$EN)
	  master_xactor_crg_rd_addr_full <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_crg_rd_addr_full$D_IN;
	if (master_xactor_crg_rd_data_full$EN)
	  master_xactor_crg_rd_data_full <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_crg_rd_data_full$D_IN;
	if (master_xactor_crg_wr_addr_full$EN)
	  master_xactor_crg_wr_addr_full <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_crg_wr_addr_full$D_IN;
	if (master_xactor_crg_wr_data_full$EN)
	  master_xactor_crg_wr_data_full <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_crg_wr_data_full$D_IN;
	if (master_xactor_crg_wr_resp_full$EN)
	  master_xactor_crg_wr_resp_full <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_crg_wr_resp_full$D_IN;
	if (rg_cset_in_cache$EN)
	  rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY rg_cset_in_cache$D_IN;
	if (rg_lower_word32_full$EN)
	  rg_lower_word32_full <= `BSV_ASSIGNMENT_DELAY
	      rg_lower_word32_full$D_IN;
	if (rg_lrsc_valid$EN)
	  rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY rg_lrsc_valid$D_IN;
	if (rg_requesting_cline$EN)
	  rg_requesting_cline <= `BSV_ASSIGNMENT_DELAY
	      rg_requesting_cline$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
      end
    if (master_xactor_rg_rd_addr$EN)
      master_xactor_rg_rd_addr <= `BSV_ASSIGNMENT_DELAY
	  master_xactor_rg_rd_addr$D_IN;
    if (master_xactor_rg_rd_data$EN)
      master_xactor_rg_rd_data <= `BSV_ASSIGNMENT_DELAY
	  master_xactor_rg_rd_data$D_IN;
    if (master_xactor_rg_wr_addr$EN)
      master_xactor_rg_wr_addr <= `BSV_ASSIGNMENT_DELAY
	  master_xactor_rg_wr_addr$D_IN;
    if (master_xactor_rg_wr_data$EN)
      master_xactor_rg_wr_data <= `BSV_ASSIGNMENT_DELAY
	  master_xactor_rg_wr_data$D_IN;
    if (master_xactor_rg_wr_resp$EN)
      master_xactor_rg_wr_resp <= `BSV_ASSIGNMENT_DELAY
	  master_xactor_rg_wr_resp$D_IN;
    if (rg_addr$EN) rg_addr <= `BSV_ASSIGNMENT_DELAY rg_addr$D_IN;
    if (rg_amo_funct7$EN)
      rg_amo_funct7 <= `BSV_ASSIGNMENT_DELAY rg_amo_funct7$D_IN;
    if (rg_error_during_refill$EN)
      rg_error_during_refill <= `BSV_ASSIGNMENT_DELAY
	  rg_error_during_refill$D_IN;
    if (rg_exc_code$EN) rg_exc_code <= `BSV_ASSIGNMENT_DELAY rg_exc_code$D_IN;
    if (rg_f3$EN) rg_f3 <= `BSV_ASSIGNMENT_DELAY rg_f3$D_IN;
    if (rg_ld_val$EN) rg_ld_val <= `BSV_ASSIGNMENT_DELAY rg_ld_val$D_IN;
    if (rg_lower_word32$EN)
      rg_lower_word32 <= `BSV_ASSIGNMENT_DELAY rg_lower_word32$D_IN;
    if (rg_lrsc_pa$EN) rg_lrsc_pa <= `BSV_ASSIGNMENT_DELAY rg_lrsc_pa$D_IN;
    if (rg_mstatus_MXR$EN)
      rg_mstatus_MXR <= `BSV_ASSIGNMENT_DELAY rg_mstatus_MXR$D_IN;
    if (rg_op$EN) rg_op <= `BSV_ASSIGNMENT_DELAY rg_op$D_IN;
    if (rg_pa$EN) rg_pa <= `BSV_ASSIGNMENT_DELAY rg_pa$D_IN;
    if (rg_priv$EN) rg_priv <= `BSV_ASSIGNMENT_DELAY rg_priv$D_IN;
    if (rg_pte_pa$EN) rg_pte_pa <= `BSV_ASSIGNMENT_DELAY rg_pte_pa$D_IN;
    if (rg_req_byte_in_cline$EN)
      rg_req_byte_in_cline <= `BSV_ASSIGNMENT_DELAY rg_req_byte_in_cline$D_IN;
    if (rg_satp$EN) rg_satp <= `BSV_ASSIGNMENT_DELAY rg_satp$D_IN;
    if (rg_sstatus_SUM$EN)
      rg_sstatus_SUM <= `BSV_ASSIGNMENT_DELAY rg_sstatus_SUM$D_IN;
    if (rg_st_amo_val$EN)
      rg_st_amo_val <= `BSV_ASSIGNMENT_DELAY rg_st_amo_val$D_IN;
    if (rg_word64_set_in_cache$EN)
      rg_word64_set_in_cache <= `BSV_ASSIGNMENT_DELAY
	  rg_word64_set_in_cache$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_verbosity = 4'hA;
    ctr_wr_rsps_pending_crg = 4'hA;
    master_xactor_crg_rd_addr_full = 1'h0;
    master_xactor_crg_rd_data_full = 1'h0;
    master_xactor_crg_wr_addr_full = 1'h0;
    master_xactor_crg_wr_data_full = 1'h0;
    master_xactor_crg_wr_resp_full = 1'h0;
    master_xactor_rg_rd_addr = 97'h0AAAAAAAAAAAAAAAAAAAAAAAA;
    master_xactor_rg_rd_data = 71'h2AAAAAAAAAAAAAAAAA;
    master_xactor_rg_wr_addr = 97'h0AAAAAAAAAAAAAAAAAAAAAAAA;
    master_xactor_rg_wr_data = 77'h0AAAAAAAAAAAAAAAAAAA;
    master_xactor_rg_wr_resp = 6'h2A;
    rg_addr = 32'hAAAAAAAA;
    rg_amo_funct7 = 7'h2A;
    rg_cset_in_cache = 7'h2A;
    rg_error_during_refill = 1'h0;
    rg_exc_code = 4'hA;
    rg_f3 = 3'h2;
    rg_ld_val = 64'hAAAAAAAAAAAAAAAA;
    rg_lower_word32 = 32'hAAAAAAAA;
    rg_lower_word32_full = 1'h0;
    rg_lrsc_pa = 34'h2AAAAAAAA;
    rg_lrsc_valid = 1'h0;
    rg_mstatus_MXR = 1'h0;
    rg_op = 2'h2;
    rg_pa = 34'h2AAAAAAAA;
    rg_priv = 2'h2;
    rg_pte_pa = 34'h2AAAAAAAA;
    rg_req_byte_in_cline = 64'hAAAAAAAAAAAAAAAA;
    rg_requesting_cline = 1'h0;
    rg_satp = 32'hAAAAAAAA;
    rg_sstatus_SUM = 1'h0;
    rg_st_amo_val = 64'hAAAAAAAAAAAAAAAA;
    rg_state = 4'hA;
    rg_word64_set_in_cache = 9'h0AA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 &&
	  cfg_verbosity != 4'd0 &&
	  !f_reset_reqs$D_OUT)
	begin
	  v__h4210 = $stime;
	  #0;
	end
    v__h4204 = v__h4210 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 &&
	  cfg_verbosity != 4'd0 &&
	  !f_reset_reqs$D_OUT)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		   v__h4204,
		   "D_MMU_Cache",
		   $signed(32'd128),
		   $signed(32'd1));
	else
	  $display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		   v__h4204,
		   "I_MMU_Cache",
		   $signed(32'd128),
		   $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  f_reset_reqs$D_OUT)
	begin
	  v__h4311 = $stime;
	  #0;
	end
    v__h4305 = v__h4311 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  f_reset_reqs$D_OUT)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_reset: Flushed", v__h4305, "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_reset: Flushed", v__h4305, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_rereq && !cfg_verbosity_read__0_ULE_1___d11)
	$display("    fa_req_ram_B tagCSet [0x%0x] word64_set [0x%0d]",
		 rg_addr[11:5],
		 rg_addr[11:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_req &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h29248 = $stime;
	  #0;
	end
    v__h29242 = v__h29248 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_req &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_near_mem_read_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h29242,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_near_mem_read_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h29242,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_req &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$display("    ",
		 { 1'd1,
		   mem_req_wr_addr_awaddr__h33155,
		   72'hAAAAAAAAAAAAAAAAAA });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h29433 = $stime;
	  #0;
	end
    v__h29427 = v__h29433 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_near_mem_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h29427,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_near_mem_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h29427,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("Near_Mem_IO_Rsp { ", "read_not_write: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "ok: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  f_near_mem_io_rsps$D_OUT[64])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  !f_near_mem_io_rsps$D_OUT[64])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", f_near_mem_io_rsps$D_OUT[63:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  f_near_mem_io_rsps$D_OUT[64] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h30540 = $stime;
	  #0;
	end
    v__h30534 = v__h30540 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  f_near_mem_io_rsps$D_OUT[64] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h30534,
		   "D_MMU_Cache",
		   rg_addr,
		   ld_val__h29551);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h30534,
		   "I_MMU_Cache",
		   rg_addr,
		   ld_val__h29551);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  !f_near_mem_io_rsps$D_OUT[64] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h30647 = $stime;
	  #0;
	end
    v__h30641 = v__h30647 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  !f_near_mem_io_rsps$D_OUT[64] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_near_mem_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		   v__h30641,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_io_near_mem_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		   v__h30641,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_maintain_io_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h30752 = $stime;
	  #0;
	end
    v__h30746 = v__h30752 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_maintain_io_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h30746,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_ld_val);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h30746,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_ld_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h32034 = $stime;
	  #0;
	end
    v__h32028 = v__h32034 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_near_mem_write_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h32028,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_near_mem_write_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h32028,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("Near_Mem_IO_Req { ", "read_not_write: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", mem_req_wr_addr_awaddr__h33155);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", value__h32094);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", mem_req_wr_data_wstrb__h33366, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h32176 = $stime;
	  #0;
	end
    v__h32170 = v__h32176 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_near_mem_write_rsp",
		   v__h32170,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_io_near_mem_write_rsp",
		   v__h32170,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("Near_Mem_IO_Rsp { ", "read_not_write: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "ok: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  f_near_mem_io_rsps$D_OUT[64])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  !f_near_mem_io_rsps$D_OUT[64])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", f_near_mem_io_rsps$D_OUT[63:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req && !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h32356 = $stime;
	  #0;
	end
    v__h32350 = v__h32356 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req && !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_AMO_SC_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h32350,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_AMO_SC_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h32350,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req && !cfg_verbosity_read__0_ULE_1___d11)
	$display("    FAIL due to I/O address.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req && !cfg_verbosity_read__0_ULE_1___d11)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_reset && !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h3845 = $stime;
	  #0;
	end
    v__h3839 = v__h3845 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_reset && !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_start_reset", v__h3839, "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_start_reset", v__h3839, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d875)
	begin
	  v__h23188 = $stime;
	  #0;
	end
    v__h23182 = v__h23188 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d875)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		   v__h23182,
		   "D_MMU_Cache",
		   rg_addr,
		   _theResult____h22557,
		   rg_pte_pa,
		   exc_code___1__h5786);
	else
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		   v__h23182,
		   "I_MMU_Cache",
		   rg_addr,
		   _theResult____h22557,
		   rg_pte_pa,
		   exc_code___1__h5786);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d883)
	begin
	  v__h22929 = $stime;
	  #0;
	end
    v__h22923 = v__h22929 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d883)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: continue to level 0",
		   v__h22923,
		   "D_MMU_Cache",
		   rg_addr,
		   _theResult____h22557,
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: continue to level 0",
		   v__h22923,
		   "I_MMU_Cache",
		   rg_addr,
		   _theResult____h22557,
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d883)
	$display("    Req for level 0 PTE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d883)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d883)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d883)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d883)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d883)
	$write("'h%h", lev_0_pte_pa_w64_fa__h23222);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d883)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d883)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d883)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d883)
	$write("'h%h", 3'b011);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d883)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d883)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d883)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d883)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d883)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d883)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d883)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d883)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d883)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d883)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d883)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d883)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d883)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d883)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d883)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d902)
	begin
	  v__h23609 = $stime;
	  #0;
	end
    v__h23603 = v__h23609 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d902)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE for megapage",
		   v__h23603,
		   "D_MMU_Cache",
		   rg_addr,
		   _theResult____h22557,
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE for megapage",
		   v__h23603,
		   "I_MMU_Cache",
		   rg_addr,
		   _theResult____h22557,
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d902)
	$display("    Addr Space megapage pa: 0x%0h", lev_0_PTN_pa__h23218);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d908)
	begin
	  v__h23497 = $stime;
	  #0;
	end
    v__h23491 = v__h23497 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d908)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: megapage pte 0x%0h @ 0x%0h",
		   v__h23491,
		   "D_MMU_Cache",
		   rg_addr,
		   _theResult____h22557,
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: megapage pte 0x%0h @ 0x%0h",
		   v__h23491,
		   "I_MMU_Cache",
		   rg_addr,
		   _theResult____h22557,
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  _theResult____h22557[0] &&
	  (_theResult____h22557[1] || !_theResult____h22557[2]) &&
	  (_theResult____h22557[3] || _theResult____h22557[1]) &&
	  _theResult____h22557[19:10] != 10'd0)
	$display("    Invalid PTE: PPN [0] is not zero; page fault %0d",
		 exc_code___1__h5786);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[2:1] != 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h23117 = $stime;
	  #0;
	end
    v__h23111 = v__h23117 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[2:1] != 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		   v__h23111,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pte_pa,
		   access_exc_code__h3352);
	else
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		   v__h23111,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pte_pa,
		   access_exc_code__h3352);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d875)
	begin
	  v__h24149 = $stime;
	  #0;
	end
    v__h24143 = v__h24149 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d875)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		   v__h24143,
		   "D_MMU_Cache",
		   rg_addr,
		   _theResult____h22557,
		   rg_pte_pa,
		   exc_code___1__h5786);
	else
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		   v__h24143,
		   "I_MMU_Cache",
		   rg_addr,
		   _theResult____h22557,
		   rg_pte_pa,
		   exc_code___1__h5786);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d883)
	begin
	  v__h24220 = $stime;
	  #0;
	end
    v__h24214 = v__h24220 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d883)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x50h: Not a leaf PTE; page fault %0d",
		   v__h24214,
		   "D_MMU_Cache",
		   rg_addr,
		   _theResult____h22557,
		   rg_pte_pa,
		   exc_code___1__h5786);
	else
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x50h: Not a leaf PTE; page fault %0d",
		   v__h24214,
		   "I_MMU_Cache",
		   rg_addr,
		   _theResult____h22557,
		   rg_pte_pa,
		   exc_code___1__h5786);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d934)
	begin
	  v__h24302 = $stime;
	  #0;
	end
    v__h24296 = v__h24302 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d934)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE",
		   v__h24296,
		   "D_MMU_Cache",
		   rg_addr,
		   _theResult____h22557,
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE",
		   v__h24296,
		   "I_MMU_Cache",
		   rg_addr,
		   _theResult____h22557,
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data_33_BITS_2_TO_1_34_EQ__ETC___d934)
	$display("    Addr Space page pa: 0x%0h", lev_0_PTN_pa__h23218);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data[2:1] != 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h24078 = $stime;
	  #0;
	end
    v__h24072 = v__h24078 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data[2:1] != 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		   v__h24072,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pte_pa,
		   access_exc_code__h3352);
	else
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		   v__h24072,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pte_pa,
		   access_exc_code__h3352);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_54___d955)
	begin
	  v__h25211 = $stime;
	  #0;
	end
    v__h25205 = v__h25211 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_54___d955)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_cache_refill_req_loop",
		   v__h25205,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_cache_refill_req_loop",
		   v__h25205,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", cline_fabric_addr__h25264);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 3'b011);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h4460 = $stime;
	  #0;
	end
    v__h4454 = v__h4460 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h",
		   v__h4454,
		   "D_MMU_Cache",
		   rg_addr);
	else
	  $display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h",
		   v__h4454,
		   "I_MMU_Cache",
		   rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  rg_satp[31])
	$display("        Priv:%0d  SATP:{mode %0d asid %0h pa %0h}  VA:%0h.%0h.%0h",
		 rg_priv,
		 rg_satp[31],
		 rg_satp[30:22],
		 satp_pa__h2610,
		 rg_addr[31:22],
		 rg_addr[21:12],
		 rg_addr[11:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$display("        eaddr = {CTag 0x%0h  CSet 0x%0h  Word64 0x%0h  Byte 0x%0h}",
		 { 2'd0, rg_addr[31:12] },
		 rg_addr[11:5],
		 rg_addr[4:3],
		 rg_addr[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("        CSet 0x%0x: (state, tag):", rg_addr[11:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(" (");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  ram_state_and_ctag_cset$DOB[22])
	$write("CTAG_CLEAN");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  !ram_state_and_ctag_cset$DOB[22])
	$write("CTAG_EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  ram_state_and_ctag_cset$DOB[22])
	$write(", 0x%0x", ram_state_and_ctag_cset$DOB[21:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  !ram_state_and_ctag_cset$DOB[22])
	$write(", --");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(")");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:5],
	       rg_addr[4:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(" 0x%0x", ram_word64_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("    TLB result: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("VM_Xlate_Result { ", "outcome: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d302)
	$write("VM_XLATE_OK");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d305)
	$write("VM_XLATE_EXCEPTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  rg_priv_9_ULE_0b1___d40 &&
	  rg_satp[31] &&
	  !tlb$lookup[68])
	$write("VM_XLATE_TLB_MISS");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "pa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", x1_avValue_pa__h5387);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", x1_avValue_exc_code__h5388);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "pte_modified: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d326)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d336)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "pte: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", x1_avValue_pte__h5390, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d374)
	$display("    => IO_REQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d534)
	begin
	  v__h13891 = $stime;
	  #0;
	end
    v__h13885 = v__h13891 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d534)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h13885,
		   "D_MMU_Cache",
		   rg_addr,
		   word64__h6415,
		   64'd0);
	else
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h13885,
		   "I_MMU_Cache",
		   rg_addr,
		   word64__h6415,
		   64'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$lookup[68]) &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d547)
	$display("        AMO LR: reserving PA 0x%0h", x1_avValue_pa__h5387);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d534)
	$display("        Read-hit: addr 0x%0h word64 0x%0h",
		 rg_addr,
		 word64__h6415);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d553)
	$display("        Read Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$lookup[68]) &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d559)
	$display("        AMO LR: cache refill: cancelling LR/SC reservation for PA 0x%0h",
		 rg_lrsc_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d735)
	$display("        ST: cancelling LR/SC reservation for PA",
		 x1_avValue_pa__h5387);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$lookup[68]) &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d741)
	$display("        AMO SC: fail: reserved addr 0x%0h, this address 0x%0h",
		 rg_lrsc_pa,
		 x1_avValue_pa__h5387);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$lookup[68]) &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d747)
	$display("        AMO SC: fail due to invalid LR/SC reservation");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d753)
	$display("        AMO SC result = %0d", lrsc_result__h14268);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d759)
	$display("        Write-Cache-Hit: pa 0x%0h word64 0x%0h",
		 x1_avValue_pa__h5387,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d759)
	$write("        New Word64_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d759)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:5],
	       rg_addr[4:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d759)
	$write(" 0x%0x",
	       IF_rg_f3_34_EQ_0b0_35_THEN_IF_IF_rg_priv_9_ULE_ETC___d633);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d759)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$lookup[68]) &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d764)
	$display("        Write-Cache-Miss: pa 0x%0h word64 0x%0h",
		 x1_avValue_pa__h5387,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d771)
	$display("        Write-Cache-Hit/Miss: eaddr 0x%0h word64 0x%0h",
		 rg_addr,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d778)
	begin
	  v__h18150 = $stime;
	  #0;
	end
    v__h18144 = v__h18150 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d778)
	$display("%0d: ERROR: CreditCounter: overflow", v__h18144);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d778)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d771)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d771)
	$write("AXI4_Wr_Addr { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d771)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d771)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d771)
	$write("'h%h", addr__h6238);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d771)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d771)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d771)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d771)
	$write("'h%h", value__h35704);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d771)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d771)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d771)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d771)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d771)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d771)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d771)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d771)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d771)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d771)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d771)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d771)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d771)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d771)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d771)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d771)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d771)
	$write("AXI4_Wr_Data { ", "wid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d771)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d771)
	$write(", ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d771)
	$write("'h%h", mem_req_wr_data_wdata__h17920);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d771)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d771)
	$write("'h%h", mem_req_wr_data_wstrb__h17921);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d771)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d771)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d771)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d771)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d771)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d771)
	$display("        => rl_write_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d786)
	begin
	  v__h17478 = $stime;
	  #0;
	end
    v__h17472 = v__h17478 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d786)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h17472,
		   "D_MMU_Cache",
		   rg_addr,
		   64'd1,
		   64'd0);
	else
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h17472,
		   "I_MMU_Cache",
		   rg_addr,
		   64'd1,
		   64'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d786)
	$display("        AMO SC: Fail response for addr 0x%0h", rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d793)
	$display("        AMO Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d798)
	$display("        AMO: addr 0x%0h amo_f7 0x%0h f3 %0d rs2_val 0x%0h",
		 rg_addr,
		 rg_amo_funct7,
		 rg_f3,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d798)
	$display("          PA 0x%0h ", x1_avValue_pa__h5387);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d798)
	$display("          Cache word64 0x%0h, load-result 0x%0h",
		 word64__h6415,
		 word64__h6415);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d798)
	$display("          0x%0h  op  0x%0h -> 0x%0h",
		 word64__h6415,
		 word64__h6415,
		 new_st_val__h18431);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d798)
	$write("          New Word64_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d798)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:5],
	       rg_addr[4:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d798)
	$write(" 0x%0x",
	       IF_rg_f3_34_EQ_0b0_35_THEN_IF_IF_rg_priv_9_ULE_ETC___d698);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d798)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d804)
	begin
	  v__h21562 = $stime;
	  #0;
	end
    v__h21556 = v__h21562 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d804)
	$display("%0d: ERROR: CreditCounter: overflow", v__h21556);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d804)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d798)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d798)
	$write("AXI4_Wr_Addr { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d798)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d798)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d798)
	$write("'h%h", addr__h6238);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d798)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d798)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d798)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d798)
	$write("'h%h", value__h35704);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d798)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d798)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d798)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d798)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d798)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d798)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d798)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d798)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d798)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d798)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d798)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d798)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d798)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d798)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d798)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d798)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d798)
	$write("AXI4_Wr_Data { ", "wid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d798)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d798)
	$write(", ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d798)
	$write("'h%h", mem_req_wr_data_wdata__h21363);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d798)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d798)
	$write("'h%h", mem_req_wr_data_wstrb__h17921);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d798)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d798)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d798)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d798)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d798)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d812)
	$display("        AMO_op: cancelling LR/SC reservation for PA",
		 x1_avValue_pa__h5387);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_54___d955)
	begin
	  v__h25548 = $stime;
	  #0;
	end
    v__h25542 = v__h25548 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_54___d955)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_cache_refill_rsps_loop:",
		   v__h25542,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_cache_refill_rsps_loop:",
		   v__h25542,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_54___d955)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_54___d955)
	$write("AXI4_Rd_Data { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_54___d955)
	$write("'h%h", master_xactor_rg_rd_data[70:67]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_54___d955)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_54___d955)
	$write("'h%h", master_xactor_rg_rd_data[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_54___d955)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_54___d955)
	$write("'h%h", master_xactor_rg_rd_data[2:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_54___d955)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_54___d955 &&
	  master_xactor_rg_rd_data[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_54___d955 &&
	  !master_xactor_rg_rd_data[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_54___d955)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_54___d955)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_54___d955)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  master_xactor_rg_rd_data[2:1] != 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h25770 = $stime;
	  #0;
	end
    v__h25764 = v__h25770 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  master_xactor_rg_rd_data[2:1] != 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d",
		   v__h25764,
		   "D_MMU_Cache",
		   access_exc_code__h3352);
	else
	  $display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d",
		   v__h25764,
		   "I_MMU_Cache",
		   access_exc_code__h3352);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  rg_word64_set_in_cache[1:0] == 2'd3 &&
	  (master_xactor_rg_rd_data[2:1] != 2'b0 || rg_error_during_refill) &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$display("    => MODULE_EXCEPTION_RSP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  rg_word64_set_in_cache[1:0] == 2'd3 &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !rg_error_during_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$display("    => CACHE_REREQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_54___d955)
	$display("        Updating Cache [0x%0x] (Word64_Set %0d) old => new",
		 rg_word64_set_in_cache,
		 rg_word64_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_54___d955)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:5],
	       rg_word64_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_54___d955)
	$write(" 0x%0x", ram_word64_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_54___d955)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_54___d955)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:5],
	       rg_word64_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_54___d955)
	$write(" 0x%0x", master_xactor_rg_rd_data[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_54___d955)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h27404 = $stime;
	  #0;
	end
    v__h27398 = v__h27404 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_read_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h27398,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_read_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h27398,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", mem_req_wr_addr_awaddr__h33155);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", value__h32678);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h27808 = $stime;
	  #0;
	end
    v__h27802 = v__h27808 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h27802,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h27802,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11)
	$write("AXI4_Rd_Data { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", master_xactor_rg_rd_data[70:67]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", master_xactor_rg_rd_data[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", master_xactor_rg_rd_data[2:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11 &&
	  master_xactor_rg_rd_data[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11 &&
	  !master_xactor_rg_rd_data[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h28908 = $stime;
	  #0;
	end
    v__h28902 = v__h28908 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h28902,
		   "D_MMU_Cache",
		   rg_addr,
		   ld_val__h27917);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h28902,
		   "I_MMU_Cache",
		   rg_addr,
		   ld_val__h27917);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_rg_rd_data[2:1] != 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h29015 = $stime;
	  #0;
	end
    v__h29009 = v__h29015 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_rg_rd_data[2:1] != 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		   v__h29009,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		   v__h29009,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h30862 = $stime;
	  #0;
	end
    v__h30856 = v__h30862 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_write_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h30856,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_write_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h30856,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && ctr_wr_rsps_pending_crg == 4'd15)
	begin
	  v__h31384 = $stime;
	  #0;
	end
    v__h31378 = v__h31384 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && ctr_wr_rsps_pending_crg == 4'd15)
	$display("%0d: ERROR: CreditCounter: overflow", v__h31378);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && ctr_wr_rsps_pending_crg == 4'd15)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("AXI4_Wr_Addr { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", mem_req_wr_addr_awaddr__h33155);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", value__h35704);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("AXI4_Wr_Data { ", "wid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", value__h32094);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", mem_req_wr_data_wstrb__h33366);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h32474 = $stime;
	  #0;
	end
    v__h32468 = v__h32474 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_AMO_op_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h32468,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_AMO_op_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h32468,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", mem_req_wr_addr_awaddr__h33155);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", value__h32678);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h32792 = $stime;
	  #0;
	end
    v__h32786 = v__h32792 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_AMO_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h32786,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_AMO_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h32786,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("AXI4_Rd_Data { ", "rid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", master_xactor_rg_rd_data[70:67]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", master_xactor_rg_rd_data[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", master_xactor_rg_rd_data[2:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "rlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  master_xactor_rg_rd_data[0])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  !master_xactor_rg_rd_data[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h32967 = $stime;
	  #0;
	end
    v__h32961 = v__h32967 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_AMO_read_rsp; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h32961,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_AMO_read_rsp; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h32961,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  ctr_wr_rsps_pending_crg == 4'd15)
	begin
	  v__h35580 = $stime;
	  #0;
	end
    v__h35574 = v__h35580 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  ctr_wr_rsps_pending_crg == 4'd15)
	$display("%0d: ERROR: CreditCounter: overflow", v__h35574);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  ctr_wr_rsps_pending_crg == 4'd15)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("AXI4_Wr_Addr { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", mem_req_wr_addr_awaddr__h33155);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", value__h35704);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("AXI4_Wr_Data { ", "wid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", mem_req_wr_data_wdata__h33365);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", mem_req_wr_data_wstrb__h33366);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h35832 = $stime;
	  #0;
	end
    v__h35826 = v__h35832 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h35826,
		   "D_MMU_Cache",
		   rg_addr,
		   new_ld_val__h33093);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h35826,
		   "I_MMU_Cache",
		   rg_addr,
		   new_ld_val__h33093);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] != 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h33063 = $stime;
	  #0;
	end
    v__h33057 = v__h33063 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[2:1] != 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_AMO_read_rsp: FABRIC_RSP_ERR: raising trap STORE_AMO_ACCESS_FAULT",
		   v__h33057,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_io_AMO_read_rsp: FABRIC_RSP_ERR: raising trap STORE_AMO_ACCESS_FAULT",
		   v__h33057,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h22193 = $stime;
	  #0;
	end
    v__h22187 = v__h22193 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_start_tlb_refill for eaddr 0x%0h; req for level 1 PTE",
		   v__h22187,
		   "D_MMU_Cache",
		   rg_addr);
	else
	  $display("%0d: %s.rl_start_tlb_refill for eaddr 0x%0h; req for level 1 PTE",
		   v__h22187,
		   "I_MMU_Cache",
		   rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", lev_1_pte_pa_w64_fa__h22248);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 3'b010);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h36831 = $stime;
	  #0;
	end
    v__h36825 = v__h36831 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $write("%0d: %s.req: op:", v__h36825, "D_MMU_Cache");
	else
	  $write("%0d: %s.req: op:", v__h36825, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11 && req_op == 2'd0)
	$write("CACHE_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11 && req_op == 2'd1)
	$write("CACHE_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11 && req_op != 2'd0 &&
	  req_op != 2'd1)
	$write("CACHE_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(" f3:%0d addr:0x%0h st_value:0x%0h priv:",
	       req_f3,
	       req_addr,
	       req_st_value);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11 && req_priv == 2'b0)
	$write("U");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11 && req_priv == 2'b01)
	$write("S");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11 && req_priv == 2'b11)
	$write("M");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11 && req_priv != 2'b0 &&
	  req_priv != 2'b01 &&
	  req_priv != 2'b11)
	$write("RESERVED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(" sstatus_SUM:%0d mstatus_MXR:%0d satp:0x%0h",
	       req_sstatus_SUM,
	       req_mstatus_MXR,
	       req_satp,
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11)
	$display("    amo_funct7 = 0x%0h", req_amo_funct7);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req &&
	  req_f3_BITS_1_TO_0_413_EQ_0b0_414_OR_req_f3_BI_ETC___d1443 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$display("    fa_req_ram_B tagCSet [0x%0x] word64_set [0x%0d]",
		 req_addr[11:5],
		 req_addr[11:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h24427 = $stime;
	  #0;
	end
    v__h24421 = v__h24427 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_start_cache_refill: ",
		   v__h24421,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_start_cache_refill: ",
		   v__h24421,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", { 30'd0, cline_addr__h25263 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 8'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 3'b011);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 2'b01);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 1'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 4'b0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 4'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$display("    Victim way is %0d; => CACHE_REFILL", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_tlb_flush && !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h37985 = $stime;
	  #0;
	end
    v__h37979 = v__h37985 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_tlb_flush && !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.tlb_flush", v__h37979, "D_MMU_Cache");
	else
	  $display("%0d: %s.tlb_flush", v__h37979, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h36452 = $stime;
	  #0;
	end
    v__h36446 = v__h36452 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $write("%0d: %s.rl_discard_write_rsp: pending %0d ",
		 v__h36446,
		 "D_MMU_Cache",
		 $unsigned(b__h22147));
	else
	  $write("%0d: %s.rl_discard_write_rsp: pending %0d ",
		 v__h36446,
		 "I_MMU_Cache",
		 $unsigned(b__h22147));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("AXI4_Wr_Resp { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", master_xactor_rg_wr_resp[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", master_xactor_rg_wr_resp[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] == 2'b0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] != 2'b0)
	begin
	  v__h36413 = $stime;
	  #0;
	end
    v__h36407 = v__h36413 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] != 2'b0)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_discard_write_rsp: fabric response error: exit",
		   v__h36407,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_discard_write_rsp: fabric response error: exit",
		   v__h36407,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] != 2'b0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] != 2'b0)
	$write("AXI4_Wr_Resp { ", "bid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] != 2'b0)
	$write("'h%h", master_xactor_rg_wr_resp[5:2]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] != 2'b0)
	$write(", ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] != 2'b0)
	$write("'h%h", master_xactor_rg_wr_resp[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] != 2'b0)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] != 2'b0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] != 2'b0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp[1:0] != 2'b0)
	$finish(32'd1);
  end
  // synopsys translate_on
endmodule  // mkMMU_Cache

