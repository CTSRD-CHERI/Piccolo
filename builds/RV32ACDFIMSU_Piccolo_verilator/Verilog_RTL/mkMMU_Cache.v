//
// Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
//
// On Fri Jan 18 12:35:00 EST 2019
//
//
// Ports:
// Name                         I/O  size props
// RDY_set_verbosity              O     1 const
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1
// valid                          O     1
// addr                           O    32 reg
// word64                         O    64
// st_amo_val                     O    64
// exc                            O     1
// exc_code                       O     4 reg
// RDY_server_flush_request_put   O     1 reg
// RDY_server_flush_response_get  O     1
// RDY_tlb_flush                  O     1 const
// mem_master_awvalid             O     1
// mem_master_awaddr              O    64 reg
// mem_master_awprot              O     3 reg
// mem_master_wvalid              O     1
// mem_master_wdata               O    64 reg
// mem_master_wstrb               O     8 reg
// mem_master_bready              O     1
// mem_master_arvalid             O     1
// mem_master_araddr              O    64 reg
// mem_master_arprot              O     3 reg
// mem_master_rready              O     1
// near_mem_io_client_request_get  O   137 reg
// RDY_near_mem_io_client_request_get  O     1 reg
// RDY_near_mem_io_client_response_put  O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_verbosity_verbosity        I     4 reg
// req_op                         I     2
// req_f3                         I     3
// req_amo_funct7                 I     7 reg
// req_addr                       I    32
// req_st_value                   I    64
// req_priv                       I     2 reg
// req_sstatus_SUM                I     1 reg
// req_mstatus_MXR                I     1 reg
// req_satp                       I    32 reg
// mem_master_awready             I     1
// mem_master_wready              I     1
// mem_master_bvalid              I     1
// mem_master_bresp               I     2 reg
// mem_master_arready             I     1
// mem_master_rvalid              I     1
// mem_master_rresp               I     2 reg
// mem_master_rdata               I    64 reg
// near_mem_io_client_response_put  I    66 reg
// EN_set_verbosity               I     1
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_req                         I     1
// EN_server_flush_request_put    I     1
// EN_server_flush_response_get   I     1
// EN_tlb_flush                   I     1
// EN_near_mem_io_client_response_put  I     1
// EN_near_mem_io_client_request_get  I     1
//
// Combinational paths from inputs to outputs:
//   (mem_master_awready, mem_master_wready) -> valid
//   (mem_master_awready, mem_master_wready) -> word64
//   (mem_master_awready, mem_master_wready) -> st_amo_val
//   (mem_master_awready, mem_master_wready) -> mem_master_bready
//   (mem_master_awready,
//    mem_master_wready,
//    mem_master_arready,
//    EN_req) -> mem_master_rready
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMMU_Cache(CLK,
		   RST_N,

		   set_verbosity_verbosity,
		   EN_set_verbosity,
		   RDY_set_verbosity,

		   EN_server_reset_request_put,
		   RDY_server_reset_request_put,

		   EN_server_reset_response_get,
		   RDY_server_reset_response_get,

		   req_op,
		   req_f3,
		   req_amo_funct7,
		   req_addr,
		   req_st_value,
		   req_priv,
		   req_sstatus_SUM,
		   req_mstatus_MXR,
		   req_satp,
		   EN_req,

		   valid,

		   addr,

		   word64,

		   st_amo_val,

		   exc,

		   exc_code,

		   EN_server_flush_request_put,
		   RDY_server_flush_request_put,

		   EN_server_flush_response_get,
		   RDY_server_flush_response_get,

		   EN_tlb_flush,
		   RDY_tlb_flush,

		   mem_master_awvalid,

		   mem_master_awaddr,

		   mem_master_awprot,

		   mem_master_awready,

		   mem_master_wvalid,

		   mem_master_wdata,

		   mem_master_wstrb,

		   mem_master_wready,

		   mem_master_bvalid,
		   mem_master_bresp,

		   mem_master_bready,

		   mem_master_arvalid,

		   mem_master_araddr,

		   mem_master_arprot,

		   mem_master_arready,

		   mem_master_rvalid,
		   mem_master_rresp,
		   mem_master_rdata,

		   mem_master_rready,

		   EN_near_mem_io_client_request_get,
		   near_mem_io_client_request_get,
		   RDY_near_mem_io_client_request_get,

		   near_mem_io_client_response_put,
		   EN_near_mem_io_client_response_put,
		   RDY_near_mem_io_client_response_put);
  parameter [0 : 0] dmem_not_imem = 1'b0;
  input  CLK;
  input  RST_N;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // action method req
  input  [1 : 0] req_op;
  input  [2 : 0] req_f3;
  input  [6 : 0] req_amo_funct7;
  input  [31 : 0] req_addr;
  input  [63 : 0] req_st_value;
  input  [1 : 0] req_priv;
  input  req_sstatus_SUM;
  input  req_mstatus_MXR;
  input  [31 : 0] req_satp;
  input  EN_req;

  // value method valid
  output valid;

  // value method addr
  output [31 : 0] addr;

  // value method word64
  output [63 : 0] word64;

  // value method st_amo_val
  output [63 : 0] st_amo_val;

  // value method exc
  output exc;

  // value method exc_code
  output [3 : 0] exc_code;

  // action method server_flush_request_put
  input  EN_server_flush_request_put;
  output RDY_server_flush_request_put;

  // action method server_flush_response_get
  input  EN_server_flush_response_get;
  output RDY_server_flush_response_get;

  // action method tlb_flush
  input  EN_tlb_flush;
  output RDY_tlb_flush;

  // value method mem_master_m_awvalid
  output mem_master_awvalid;

  // value method mem_master_m_awaddr
  output [63 : 0] mem_master_awaddr;

  // value method mem_master_m_awprot
  output [2 : 0] mem_master_awprot;

  // value method mem_master_m_awuser

  // action method mem_master_m_awready
  input  mem_master_awready;

  // value method mem_master_m_wvalid
  output mem_master_wvalid;

  // value method mem_master_m_wdata
  output [63 : 0] mem_master_wdata;

  // value method mem_master_m_wstrb
  output [7 : 0] mem_master_wstrb;

  // action method mem_master_m_wready
  input  mem_master_wready;

  // action method mem_master_m_bvalid
  input  mem_master_bvalid;
  input  [1 : 0] mem_master_bresp;

  // value method mem_master_m_bready
  output mem_master_bready;

  // value method mem_master_m_arvalid
  output mem_master_arvalid;

  // value method mem_master_m_araddr
  output [63 : 0] mem_master_araddr;

  // value method mem_master_m_arprot
  output [2 : 0] mem_master_arprot;

  // value method mem_master_m_aruser

  // action method mem_master_m_arready
  input  mem_master_arready;

  // action method mem_master_m_rvalid
  input  mem_master_rvalid;
  input  [1 : 0] mem_master_rresp;
  input  [63 : 0] mem_master_rdata;

  // value method mem_master_m_rready
  output mem_master_rready;

  // actionvalue method near_mem_io_client_request_get
  input  EN_near_mem_io_client_request_get;
  output [136 : 0] near_mem_io_client_request_get;
  output RDY_near_mem_io_client_request_get;

  // action method near_mem_io_client_response_put
  input  [65 : 0] near_mem_io_client_response_put;
  input  EN_near_mem_io_client_response_put;
  output RDY_near_mem_io_client_response_put;

  // signals for module outputs
  reg [63 : 0] word64;
  wire [136 : 0] near_mem_io_client_request_get;
  wire [63 : 0] mem_master_araddr,
		mem_master_awaddr,
		mem_master_wdata,
		st_amo_val;
  wire [31 : 0] addr;
  wire [7 : 0] mem_master_wstrb;
  wire [3 : 0] exc_code;
  wire [2 : 0] mem_master_arprot, mem_master_awprot;
  wire RDY_near_mem_io_client_request_get,
       RDY_near_mem_io_client_response_put,
       RDY_server_flush_request_put,
       RDY_server_flush_response_get,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_set_verbosity,
       RDY_tlb_flush,
       exc,
       mem_master_arvalid,
       mem_master_awvalid,
       mem_master_bready,
       mem_master_rready,
       mem_master_wvalid,
       valid;

  // inlined wires
  reg [3 : 0] ctr_wr_rsps_pending_crg$port0__write_1;
  wire [3 : 0] ctr_wr_rsps_pending_crg$port1__write_1,
	       ctr_wr_rsps_pending_crg$port2__read,
	       ctr_wr_rsps_pending_crg$port3__read;
  wire ctr_wr_rsps_pending_crg$EN_port0__write,
       ctr_wr_rsps_pending_crg$EN_port2__write,
       dw_valid$whas,
       master_xactor_crg_rd_addr_full$EN_port0__write,
       master_xactor_crg_rd_addr_full$EN_port1__write,
       master_xactor_crg_rd_addr_full$EN_port2__write,
       master_xactor_crg_rd_addr_full$port1__read,
       master_xactor_crg_rd_addr_full$port2__read,
       master_xactor_crg_rd_addr_full$port3__read,
       master_xactor_crg_rd_data_full$EN_port0__write,
       master_xactor_crg_rd_data_full$EN_port1__write,
       master_xactor_crg_rd_data_full$EN_port2__write,
       master_xactor_crg_rd_data_full$port1__read,
       master_xactor_crg_rd_data_full$port2__read,
       master_xactor_crg_rd_data_full$port3__read,
       master_xactor_crg_wr_addr_full$EN_port0__write,
       master_xactor_crg_wr_addr_full$EN_port1__write,
       master_xactor_crg_wr_addr_full$EN_port2__write,
       master_xactor_crg_wr_addr_full$port1__read,
       master_xactor_crg_wr_addr_full$port2__read,
       master_xactor_crg_wr_addr_full$port3__read,
       master_xactor_crg_wr_data_full$EN_port0__write,
       master_xactor_crg_wr_data_full$EN_port1__write,
       master_xactor_crg_wr_data_full$EN_port2__write,
       master_xactor_crg_wr_data_full$port1__read,
       master_xactor_crg_wr_data_full$port2__read,
       master_xactor_crg_wr_data_full$port3__read,
       master_xactor_crg_wr_resp_full$EN_port0__write,
       master_xactor_crg_wr_resp_full$EN_port2__write,
       master_xactor_crg_wr_resp_full$port1__read,
       master_xactor_crg_wr_resp_full$port2__read,
       master_xactor_crg_wr_resp_full$port3__read;

  // register cfg_verbosity
  reg [3 : 0] cfg_verbosity;
  wire [3 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register ctr_wr_rsps_pending_crg
  reg [3 : 0] ctr_wr_rsps_pending_crg;
  wire [3 : 0] ctr_wr_rsps_pending_crg$D_IN;
  wire ctr_wr_rsps_pending_crg$EN;

  // register master_xactor_crg_rd_addr_full
  reg master_xactor_crg_rd_addr_full;
  wire master_xactor_crg_rd_addr_full$D_IN, master_xactor_crg_rd_addr_full$EN;

  // register master_xactor_crg_rd_data_full
  reg master_xactor_crg_rd_data_full;
  wire master_xactor_crg_rd_data_full$D_IN, master_xactor_crg_rd_data_full$EN;

  // register master_xactor_crg_wr_addr_full
  reg master_xactor_crg_wr_addr_full;
  wire master_xactor_crg_wr_addr_full$D_IN, master_xactor_crg_wr_addr_full$EN;

  // register master_xactor_crg_wr_data_full
  reg master_xactor_crg_wr_data_full;
  wire master_xactor_crg_wr_data_full$D_IN, master_xactor_crg_wr_data_full$EN;

  // register master_xactor_crg_wr_resp_full
  reg master_xactor_crg_wr_resp_full;
  wire master_xactor_crg_wr_resp_full$D_IN, master_xactor_crg_wr_resp_full$EN;

  // register master_xactor_rg_rd_addr
  reg [66 : 0] master_xactor_rg_rd_addr;
  reg [66 : 0] master_xactor_rg_rd_addr$D_IN;
  wire master_xactor_rg_rd_addr$EN;

  // register master_xactor_rg_rd_data
  reg [65 : 0] master_xactor_rg_rd_data;
  wire [65 : 0] master_xactor_rg_rd_data$D_IN;
  wire master_xactor_rg_rd_data$EN;

  // register master_xactor_rg_wr_addr
  reg [66 : 0] master_xactor_rg_wr_addr;
  reg [66 : 0] master_xactor_rg_wr_addr$D_IN;
  wire master_xactor_rg_wr_addr$EN;

  // register master_xactor_rg_wr_data
  reg [71 : 0] master_xactor_rg_wr_data;
  reg [71 : 0] master_xactor_rg_wr_data$D_IN;
  wire master_xactor_rg_wr_data$EN;

  // register master_xactor_rg_wr_resp
  reg [1 : 0] master_xactor_rg_wr_resp;
  wire [1 : 0] master_xactor_rg_wr_resp$D_IN;
  wire master_xactor_rg_wr_resp$EN;

  // register rg_addr
  reg [31 : 0] rg_addr;
  wire [31 : 0] rg_addr$D_IN;
  wire rg_addr$EN;

  // register rg_amo_funct7
  reg [6 : 0] rg_amo_funct7;
  wire [6 : 0] rg_amo_funct7$D_IN;
  wire rg_amo_funct7$EN;

  // register rg_cset_in_cache
  reg [6 : 0] rg_cset_in_cache;
  wire [6 : 0] rg_cset_in_cache$D_IN;
  wire rg_cset_in_cache$EN;

  // register rg_error_during_refill
  reg rg_error_during_refill;
  wire rg_error_during_refill$D_IN, rg_error_during_refill$EN;

  // register rg_exc_code
  reg [3 : 0] rg_exc_code;
  reg [3 : 0] rg_exc_code$D_IN;
  wire rg_exc_code$EN;

  // register rg_f3
  reg [2 : 0] rg_f3;
  wire [2 : 0] rg_f3$D_IN;
  wire rg_f3$EN;

  // register rg_ld_val
  reg [63 : 0] rg_ld_val;
  reg [63 : 0] rg_ld_val$D_IN;
  wire rg_ld_val$EN;

  // register rg_lower_word32
  reg [31 : 0] rg_lower_word32;
  wire [31 : 0] rg_lower_word32$D_IN;
  wire rg_lower_word32$EN;

  // register rg_lower_word32_full
  reg rg_lower_word32_full;
  wire rg_lower_word32_full$D_IN, rg_lower_word32_full$EN;

  // register rg_lrsc_pa
  reg [33 : 0] rg_lrsc_pa;
  wire [33 : 0] rg_lrsc_pa$D_IN;
  wire rg_lrsc_pa$EN;

  // register rg_lrsc_valid
  reg rg_lrsc_valid;
  wire rg_lrsc_valid$D_IN, rg_lrsc_valid$EN;

  // register rg_mstatus_MXR
  reg rg_mstatus_MXR;
  wire rg_mstatus_MXR$D_IN, rg_mstatus_MXR$EN;

  // register rg_op
  reg [1 : 0] rg_op;
  wire [1 : 0] rg_op$D_IN;
  wire rg_op$EN;

  // register rg_pa
  reg [33 : 0] rg_pa;
  wire [33 : 0] rg_pa$D_IN;
  wire rg_pa$EN;

  // register rg_priv
  reg [1 : 0] rg_priv;
  wire [1 : 0] rg_priv$D_IN;
  wire rg_priv$EN;

  // register rg_pte_pa
  reg [33 : 0] rg_pte_pa;
  wire [33 : 0] rg_pte_pa$D_IN;
  wire rg_pte_pa$EN;

  // register rg_req_byte_in_cline
  reg [63 : 0] rg_req_byte_in_cline;
  wire [63 : 0] rg_req_byte_in_cline$D_IN;
  wire rg_req_byte_in_cline$EN;

  // register rg_requesting_cline
  reg rg_requesting_cline;
  reg rg_requesting_cline$D_IN;
  wire rg_requesting_cline$EN;

  // register rg_satp
  reg [31 : 0] rg_satp;
  wire [31 : 0] rg_satp$D_IN;
  wire rg_satp$EN;

  // register rg_sstatus_SUM
  reg rg_sstatus_SUM;
  wire rg_sstatus_SUM$D_IN, rg_sstatus_SUM$EN;

  // register rg_st_amo_val
  reg [63 : 0] rg_st_amo_val;
  wire [63 : 0] rg_st_amo_val$D_IN;
  wire rg_st_amo_val$EN;

  // register rg_state
  reg [3 : 0] rg_state;
  reg [3 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // register rg_word64_set_in_cache
  reg [8 : 0] rg_word64_set_in_cache;
  wire [8 : 0] rg_word64_set_in_cache$D_IN;
  wire rg_word64_set_in_cache$EN;

  // ports of submodule f_near_mem_io_reqs
  wire [136 : 0] f_near_mem_io_reqs$D_IN, f_near_mem_io_reqs$D_OUT;
  wire f_near_mem_io_reqs$CLR,
       f_near_mem_io_reqs$DEQ,
       f_near_mem_io_reqs$EMPTY_N,
       f_near_mem_io_reqs$ENQ,
       f_near_mem_io_reqs$FULL_N;

  // ports of submodule f_near_mem_io_rsps
  wire [65 : 0] f_near_mem_io_rsps$D_IN, f_near_mem_io_rsps$D_OUT;
  wire f_near_mem_io_rsps$CLR,
       f_near_mem_io_rsps$DEQ,
       f_near_mem_io_rsps$EMPTY_N,
       f_near_mem_io_rsps$ENQ,
       f_near_mem_io_rsps$FULL_N;

  // ports of submodule f_reset_reqs
  wire f_reset_reqs$CLR,
       f_reset_reqs$DEQ,
       f_reset_reqs$D_IN,
       f_reset_reqs$D_OUT,
       f_reset_reqs$EMPTY_N,
       f_reset_reqs$ENQ,
       f_reset_reqs$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$D_IN,
       f_reset_rsps$D_OUT,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule ram_state_and_ctag_cset
  wire [22 : 0] ram_state_and_ctag_cset$DIA,
		ram_state_and_ctag_cset$DIB,
		ram_state_and_ctag_cset$DOB;
  wire [6 : 0] ram_state_and_ctag_cset$ADDRA, ram_state_and_ctag_cset$ADDRB;
  wire ram_state_and_ctag_cset$ENA,
       ram_state_and_ctag_cset$ENB,
       ram_state_and_ctag_cset$WEA,
       ram_state_and_ctag_cset$WEB;

  // ports of submodule ram_word64_set
  reg [63 : 0] ram_word64_set$DIB;
  reg [8 : 0] ram_word64_set$ADDRB;
  wire [63 : 0] ram_word64_set$DIA, ram_word64_set$DOB;
  wire [8 : 0] ram_word64_set$ADDRA;
  wire ram_word64_set$ENA,
       ram_word64_set$ENB,
       ram_word64_set$WEA,
       ram_word64_set$WEB;

  // ports of submodule soc_map
  wire [63 : 0] soc_map$m_is_IO_addr_addr,
		soc_map$m_is_mem_addr_addr,
		soc_map$m_is_near_mem_IO_addr_addr;
  wire soc_map$m_is_IO_addr, soc_map$m_is_near_mem_IO_addr;

  // ports of submodule tlb
  wire [68 : 0] tlb$lookup;
  wire [33 : 0] tlb$insert_pte_pa;
  wire [31 : 0] tlb$insert_pte;
  wire [19 : 0] tlb$insert_vpn, tlb$lookup_vpn;
  wire [8 : 0] tlb$insert_asid, tlb$lookup_asid;
  wire [1 : 0] tlb$insert_level;
  wire tlb$EN_flush, tlb$EN_insert, tlb$RDY_insert, tlb$RDY_lookup;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_ST_AMO_response,
       CAN_FIRE_RL_rl_cache_refill_req_loop,
       CAN_FIRE_RL_rl_cache_refill_rsps_loop,
       CAN_FIRE_RL_rl_discard_write_rsp,
       CAN_FIRE_RL_rl_drive_exception_rsp,
       CAN_FIRE_RL_rl_io_AMO_SC_req,
       CAN_FIRE_RL_rl_io_AMO_op_req,
       CAN_FIRE_RL_rl_io_AMO_read_rsp,
       CAN_FIRE_RL_rl_io_near_mem_read_req,
       CAN_FIRE_RL_rl_io_near_mem_read_rsp,
       CAN_FIRE_RL_rl_io_near_mem_write_req,
       CAN_FIRE_RL_rl_io_near_mem_write_rsp,
       CAN_FIRE_RL_rl_io_read_req,
       CAN_FIRE_RL_rl_io_read_rsp,
       CAN_FIRE_RL_rl_io_write_req,
       CAN_FIRE_RL_rl_maintain_io_read_rsp,
       CAN_FIRE_RL_rl_probe_and_immed_rsp,
       CAN_FIRE_RL_rl_ptw_level_0,
       CAN_FIRE_RL_rl_ptw_level_1,
       CAN_FIRE_RL_rl_rereq,
       CAN_FIRE_RL_rl_reset,
       CAN_FIRE_RL_rl_start_cache_refill,
       CAN_FIRE_RL_rl_start_reset,
       CAN_FIRE_RL_rl_start_tlb_refill,
       CAN_FIRE_mem_master_m_arready,
       CAN_FIRE_mem_master_m_awready,
       CAN_FIRE_mem_master_m_bvalid,
       CAN_FIRE_mem_master_m_rvalid,
       CAN_FIRE_mem_master_m_wready,
       CAN_FIRE_near_mem_io_client_request_get,
       CAN_FIRE_near_mem_io_client_response_put,
       CAN_FIRE_req,
       CAN_FIRE_server_flush_request_put,
       CAN_FIRE_server_flush_response_get,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_tlb_flush,
       WILL_FIRE_RL_rl_ST_AMO_response,
       WILL_FIRE_RL_rl_cache_refill_req_loop,
       WILL_FIRE_RL_rl_cache_refill_rsps_loop,
       WILL_FIRE_RL_rl_discard_write_rsp,
       WILL_FIRE_RL_rl_drive_exception_rsp,
       WILL_FIRE_RL_rl_io_AMO_SC_req,
       WILL_FIRE_RL_rl_io_AMO_op_req,
       WILL_FIRE_RL_rl_io_AMO_read_rsp,
       WILL_FIRE_RL_rl_io_near_mem_read_req,
       WILL_FIRE_RL_rl_io_near_mem_read_rsp,
       WILL_FIRE_RL_rl_io_near_mem_write_req,
       WILL_FIRE_RL_rl_io_near_mem_write_rsp,
       WILL_FIRE_RL_rl_io_read_req,
       WILL_FIRE_RL_rl_io_read_rsp,
       WILL_FIRE_RL_rl_io_write_req,
       WILL_FIRE_RL_rl_maintain_io_read_rsp,
       WILL_FIRE_RL_rl_probe_and_immed_rsp,
       WILL_FIRE_RL_rl_ptw_level_0,
       WILL_FIRE_RL_rl_ptw_level_1,
       WILL_FIRE_RL_rl_rereq,
       WILL_FIRE_RL_rl_reset,
       WILL_FIRE_RL_rl_start_cache_refill,
       WILL_FIRE_RL_rl_start_reset,
       WILL_FIRE_RL_rl_start_tlb_refill,
       WILL_FIRE_mem_master_m_arready,
       WILL_FIRE_mem_master_m_awready,
       WILL_FIRE_mem_master_m_bvalid,
       WILL_FIRE_mem_master_m_rvalid,
       WILL_FIRE_mem_master_m_wready,
       WILL_FIRE_near_mem_io_client_request_get,
       WILL_FIRE_near_mem_io_client_response_put,
       WILL_FIRE_req,
       WILL_FIRE_server_flush_request_put,
       WILL_FIRE_server_flush_response_get,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_tlb_flush;

  // inputs to muxes for submodule ports
  reg [63 : 0] MUX_dw_output_ld_val$wset_1__VAL_1,
	       MUX_dw_output_ld_val$wset_1__VAL_2,
	       MUX_dw_output_ld_val$wset_1__VAL_3,
	       MUX_dw_output_ld_val$wset_1__VAL_6;
  wire [136 : 0] MUX_f_near_mem_io_reqs$enq_1__VAL_1,
		 MUX_f_near_mem_io_reqs$enq_1__VAL_2;
  wire [71 : 0] MUX_master_xactor_rg_wr_data$write_1__VAL_1,
		MUX_master_xactor_rg_wr_data$write_1__VAL_2,
		MUX_master_xactor_rg_wr_data$write_1__VAL_3;
  wire [66 : 0] MUX_master_xactor_rg_rd_addr$write_1__VAL_1,
		MUX_master_xactor_rg_rd_addr$write_1__VAL_2,
		MUX_master_xactor_rg_rd_addr$write_1__VAL_3,
		MUX_master_xactor_rg_rd_addr$write_1__VAL_4,
		MUX_master_xactor_rg_rd_addr$write_1__VAL_5,
		MUX_master_xactor_rg_wr_addr$write_1__VAL_1,
		MUX_master_xactor_rg_wr_addr$write_1__VAL_2;
  wire [63 : 0] MUX_dw_output_ld_val$wset_1__VAL_4,
		MUX_ram_word64_set$a_put_3__VAL_2,
		MUX_rg_ld_val$write_1__VAL_2,
		MUX_rg_req_byte_in_cline$write_1__VAL_1;
  wire [33 : 0] MUX_rg_pa$write_1__VAL_1;
  wire [22 : 0] MUX_ram_state_and_ctag_cset$a_put_3__VAL_1;
  wire [8 : 0] MUX_ram_word64_set$b_put_2__VAL_2,
	       MUX_ram_word64_set$b_put_2__VAL_4;
  wire [6 : 0] MUX_rg_cset_in_cache$write_1__VAL_1;
  wire [3 : 0] MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1,
	       MUX_rg_exc_code$write_1__VAL_1,
	       MUX_rg_exc_code$write_1__VAL_6,
	       MUX_rg_state$write_1__VAL_10,
	       MUX_rg_state$write_1__VAL_11,
	       MUX_rg_state$write_1__VAL_12,
	       MUX_rg_state$write_1__VAL_13,
	       MUX_rg_state$write_1__VAL_17,
	       MUX_rg_state$write_1__VAL_3,
	       MUX_rg_state$write_1__VAL_5;
  wire MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1,
       MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2,
       MUX_dw_output_ld_val$wset_1__SEL_1,
       MUX_dw_output_ld_val$wset_1__SEL_3,
       MUX_dw_output_st_amo_val$wset_1__SEL_1,
       MUX_master_xactor_crg_rd_addr_full$port2__write_1__SEL_1,
       MUX_master_xactor_rg_rd_addr$write_1__SEL_2,
       MUX_ram_state_and_ctag_cset$b_put_1__SEL_1,
       MUX_ram_word64_set$a_put_1__SEL_1,
       MUX_ram_word64_set$b_put_2__SEL_2,
       MUX_rg_error_during_refill$write_1__SEL_1,
       MUX_rg_exc_code$write_1__SEL_1,
       MUX_rg_exc_code$write_1__SEL_2,
       MUX_rg_exc_code$write_1__SEL_3,
       MUX_rg_exc_code$write_1__SEL_5,
       MUX_rg_exc_code$write_1__SEL_6,
       MUX_rg_exc_code$write_1__SEL_7,
       MUX_rg_exc_code$write_1__SEL_8,
       MUX_rg_ld_val$write_1__SEL_2,
       MUX_rg_lrsc_valid$write_1__SEL_2,
       MUX_rg_state$write_1__SEL_10,
       MUX_rg_state$write_1__SEL_11,
       MUX_rg_state$write_1__SEL_2,
       MUX_rg_state$write_1__SEL_20,
       MUX_tlb$insert_1__SEL_1;

  // remaining internal signals
  reg [63 : 0] CASE_rg_addr_BITS_2_TO_0_0x0_result3715_0x4_re_ETC__q36,
	       CASE_rg_addr_BITS_2_TO_0_0x0_result7401_0x4_re_ETC__q40,
	       CASE_x1_avValue_pa389_BITS_2_TO_0_0x0_ram_word_ETC__q39,
	       CASE_x1_avValue_pa389_BITS_2_TO_0_0x0_ram_word_ETC__q45,
	       IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d606,
	       IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d615,
	       IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d671,
	       IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d680,
	       IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d1171,
	       IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d1188,
	       IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d1194,
	       IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d466,
	       IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d486,
	       IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d496,
	       IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d1156,
	       IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d1181,
	       IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d450,
	       IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d478,
	       IF_rg_f3_32_EQ_0b0_33_THEN_IF_IF_rg_priv_9_ULE_ETC___d624,
	       IF_rg_f3_32_EQ_0b0_33_THEN_IF_IF_rg_priv_9_ULE_ETC___d689,
	       IF_rg_f3_32_EQ_0b10_63_THEN_SEXT_IF_rg_f3_32_E_ETC___d564,
	       _theResult_____2__h14715,
	       _theResult_____2__h31131,
	       io_req_wr_data_wdata__h30995,
	       mem_req_wr_data_wdata__h19999,
	       mem_req_wr_data_wdata__h20757,
	       new_ld_val__h30768,
	       new_value__h18869,
	       new_value__h6600,
	       value__h30041,
	       w1__h14707,
	       w1__h31119,
	       w1__h31123;
  reg [33 : 0] _theResult___fst__h5888;
  reg [31 : 0] v__h13888,
	       v__h13894,
	       v__h19772,
	       v__h19778,
	       v__h20339,
	       v__h20345,
	       v__h21066,
	       v__h21072,
	       v__h22082,
	       v__h22088,
	       v__h22761,
	       v__h22767,
	       v__h22832,
	       v__h22838,
	       v__h22934,
	       v__h22940,
	       v__h23040,
	       v__h23046,
	       v__h23152,
	       v__h23158,
	       v__h23625,
	       v__h23631,
	       v__h23696,
	       v__h23702,
	       v__h23767,
	       v__h23773,
	       v__h23849,
	       v__h23855,
	       v__h24567,
	       v__h24573,
	       v__h24786,
	       v__h24792,
	       v__h24908,
	       v__h24914,
	       v__h25133,
	       v__h25139,
	       v__h26908,
	       v__h26914,
	       v__h27074,
	       v__h27080,
	       v__h27473,
	       v__h27479,
	       v__h27580,
	       v__h27586,
	       v__h27813,
	       v__h27819,
	       v__h27998,
	       v__h28004,
	       v__h28400,
	       v__h28406,
	       v__h28507,
	       v__h28513,
	       v__h28788,
	       v__h28794,
	       v__h29310,
	       v__h29316,
	       v__h29455,
	       v__h29461,
	       v__h29975,
	       v__h29981,
	       v__h30117,
	       v__h30123,
	       v__h30297,
	       v__h30303,
	       v__h30503,
	       v__h30509,
	       v__h30635,
	       v__h30641,
	       v__h30916,
	       v__h30922,
	       v__h32415,
	       v__h32421,
	       v__h32765,
	       v__h32771,
	       v__h32881,
	       v__h32887,
	       v__h33463,
	       v__h33469,
	       v__h33502,
	       v__h33508,
	       v__h33890,
	       v__h33896,
	       v__h35044,
	       v__h35050,
	       v__h3841,
	       v__h3847,
	       v__h4206,
	       v__h4212,
	       v__h4307,
	       v__h4313,
	       v__h4456,
	       v__h4462;
  reg [7 : 0] io_req_wr_data_wstrb__h30996, mem_req_wr_data_wstrb__h20000;
  reg CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_32_ETC__q35,
      IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d240,
      IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d245,
      IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_OR_rg_ad_ETC___d154,
      IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_OR_rg_ad_ETC___d162,
      IF_rg_f3_32_BITS_1_TO_0_93_EQ_0b0_94_OR_rg_f3__ETC___d200,
      IF_rg_f3_32_EQ_0b0_33_OR_rg_f3_32_EQ_0b100_34__ETC___d176,
      IF_rg_f3_32_EQ_0b0_33_THEN_IF_IF_rg_priv_9_ULE_ETC___d252;
  wire [63 : 0] IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_1_E_ETC___d511,
		IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_mas_ETC___d1195,
		IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_ram_ETC___d497,
		IF_rg_f3_32_EQ_0b10_63_THEN_SEXT_rg_st_amo_val_ETC___d628,
		IF_rg_op_5_EQ_1_78_OR_rg_op_5_EQ_2_8_AND_rg_am_ETC___d708,
		_theResult___fst__h20117,
		_theResult___fst__h20875,
		_theResult___fst__h29764,
		_theResult___fst__h31113,
		cline_fabric_addr__h24626,
		fabric_addr__h30383,
		io_req_wr_addr_awaddr__h30836,
		lev_0_pte_pa_w64_fa__h22447,
		lev_1_pte_pa_w64_fa__h21894,
		mem_req_wr_addr_awaddr__h19888,
		new_st_val__h14719,
		new_st_val__h14811,
		new_st_val__h15791,
		new_st_val__h15795,
		new_st_val__h15799,
		new_st_val__h15803,
		new_st_val__h15808,
		new_st_val__h15814,
		new_st_val__h15819,
		new_st_val__h31135,
		new_st_val__h31226,
		new_st_val__h32180,
		new_st_val__h32184,
		new_st_val__h32188,
		new_st_val__h32192,
		new_st_val__h32197,
		new_st_val__h32203,
		new_st_val__h32208,
		new_st_val__h6540,
		result__h13011,
		result__h13039,
		result__h13067,
		result__h13095,
		result__h13123,
		result__h13151,
		result__h13179,
		result__h13224,
		result__h13252,
		result__h13280,
		result__h13308,
		result__h13336,
		result__h13364,
		result__h13392,
		result__h13420,
		result__h13465,
		result__h13493,
		result__h13521,
		result__h13549,
		result__h13590,
		result__h13618,
		result__h13646,
		result__h13674,
		result__h13715,
		result__h13743,
		result__h13782,
		result__h13810,
		result__h27296,
		result__h27323,
		result__h27349,
		result__h27375,
		result__h27401,
		result__h27427,
		result__h28223,
		result__h28250,
		result__h28276,
		result__h28302,
		result__h28328,
		result__h28354,
		result__h28606,
		result__h28633,
		result__h28660,
		result__h28687,
		result__h28714,
		result__h28741,
		result__h31343,
		result__h31370,
		result__h31397,
		result__h31424,
		result__h31451,
		result__h31478,
		result__h31505,
		result__h31576,
		result__h31603,
		result__h31630,
		result__h31657,
		result__h31684,
		result__h31711,
		result__h31738,
		result__h31809,
		result__h31836,
		result__h31863,
		result__h31930,
		result__h31957,
		result__h31984,
		result__h32051,
		result__h32116,
		result__h32580,
		result__h32610,
		result__h32637,
		result__h32664,
		result__h32691,
		result__h32718,
		result__h6655,
		w1___1__h14778,
		w1___1__h31194,
		w2___1__h31195,
		w2__h31125,
		word64__h30841,
		word64__h6415,
		x__h14281,
		y__h6691;
  wire [33 : 0] _theResult___fst__h5477,
		_theResult___fst__h5549,
		cline_addr__h24625,
		lev_0_PTN_pa__h22443,
		lev_0_pte_pa__h22445,
		lev_0_pte_pa_w64__h22446,
		lev_1_pte_pa__h21892,
		lev_1_pte_pa_w64__h21893,
		pa___1__h5894,
		pa___1__h5943,
		pa__h5377,
		satp_pa__h2614,
		vpn_0_pa__h22444,
		vpn_1_pa__h21891,
		x1_avValue_pa__h5389,
		x__h19914,
		x__h30861;
  wire [31 : 0] _theResult____h22209,
		_theResult___snd_fst__h5479,
		_theResult___snd_fst__h5551,
		_theResult___snd_fst__h6026,
		f_near_mem_io_rspsD_OUT_BITS_31_TO_0__q19,
		master_xactor_rg_rd_data_BITS_31_TO_0__q3,
		master_xactor_rg_rd_data_BITS_63_TO_32__q10,
		new_ld_val0768_BITS_31_TO_0__q44,
		new_value600_BITS_31_TO_0__q37,
		pte___1__h6075,
		pte___1__h6103,
		pte___2__h5886,
		rg_ld_val_BITS_31_TO_0__q20,
		rg_st_amo_val_BITS_31_TO_0__q38,
		w11119_BITS_31_TO_0__q41,
		word64415_BITS_31_TO_0__q23,
		word64415_BITS_63_TO_32__q30,
		x1_avValue_pte__h5392;
  wire [15 : 0] f_near_mem_io_rspsD_OUT_BITS_15_TO_0__q17,
		master_xactor_rg_rd_data_BITS_15_TO_0__q2,
		master_xactor_rg_rd_data_BITS_31_TO_16__q6,
		master_xactor_rg_rd_data_BITS_47_TO_32__q9,
		master_xactor_rg_rd_data_BITS_63_TO_48__q13,
		new_ld_val0768_BITS_15_TO_0__q43,
		rg_ld_val_BITS_15_TO_0__q18,
		word64415_BITS_15_TO_0__q22,
		word64415_BITS_31_TO_16__q26,
		word64415_BITS_47_TO_32__q29,
		word64415_BITS_63_TO_48__q33;
  wire [7 : 0] f_near_mem_io_rspsD_OUT_BITS_7_TO_0__q15,
	       master_xactor_rg_rd_data_BITS_15_TO_8__q4,
	       master_xactor_rg_rd_data_BITS_23_TO_16__q5,
	       master_xactor_rg_rd_data_BITS_31_TO_24__q7,
	       master_xactor_rg_rd_data_BITS_39_TO_32__q8,
	       master_xactor_rg_rd_data_BITS_47_TO_40__q11,
	       master_xactor_rg_rd_data_BITS_55_TO_48__q12,
	       master_xactor_rg_rd_data_BITS_63_TO_56__q14,
	       master_xactor_rg_rd_data_BITS_7_TO_0__q1,
	       new_ld_val0768_BITS_7_TO_0__q42,
	       rg_ld_val_BITS_7_TO_0__q16,
	       strobe64__h20116,
	       strobe64__h20159,
	       strobe64__h20182,
	       strobe64__h31112,
	       strobe64__h32266,
	       strobe64__h32289,
	       word64415_BITS_15_TO_8__q24,
	       word64415_BITS_23_TO_16__q25,
	       word64415_BITS_31_TO_24__q27,
	       word64415_BITS_39_TO_32__q28,
	       word64415_BITS_47_TO_40__q31,
	       word64415_BITS_55_TO_48__q32,
	       word64415_BITS_63_TO_56__q34,
	       word64415_BITS_7_TO_0__q21;
  wire [5 : 0] shift_bits__h19897, shift_bits__h30844;
  wire [3 : 0] IF_rg_op_5_EQ_0_6_OR_rg_op_5_EQ_2_8_AND_rg_amo_ETC___d355,
	       IF_rg_op_5_EQ_1_78_OR_rg_op_5_EQ_2_8_AND_rg_am_ETC___d354,
	       IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3__ETC___d357,
	       access_exc_code__h3356,
	       b__h21883,
	       exc_code___1__h5788,
	       x1_avValue_exc_code__h5390;
  wire IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d248,
       IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_NOT_ETC___d168,
       IF_rg_op_5_EQ_0_6_OR_rg_op_5_EQ_2_8_AND_rg_amo_ETC___d260,
       IF_rg_op_5_EQ_1_78_OR_rg_op_5_EQ_2_8_AND_rg_am_ETC___d259,
       IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3__ETC___d262,
       IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3__ETC___d369,
       NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_3_ETC___d239,
       NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_3_ETC___d244,
       NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_3_ETC___d247,
       NOT_IF_rg_pte_pa_25_BIT_2_26_THEN_master_xacto_ETC___d854,
       NOT_cfg_verbosity_read__0_ULE_2_48___d949,
       NOT_dmem_not_imem_0_AND_rg_op_5_EQ_0_6_OR_rg_o_ETC___d288,
       NOT_dmem_not_imem_0_OR_NOT_rg_op_5_EQ_0_6_7_AN_ETC___d87,
       NOT_master_xactor_rg_rd_data_21_BITS_65_TO_64__ETC___d847,
       NOT_ram_state_and_ctag_cset_b_read__24_BIT_22__ETC___d150,
       NOT_ram_state_and_ctag_cset_b_read__24_BIT_22__ETC___d371,
       NOT_req_f3_BITS_1_TO_0_308_EQ_0b0_309_310_AND__ETC___d1329,
       NOT_rg_f3_32_EQ_0b11_69_70_OR_rg_amo_funct7_0__ETC___d249,
       NOT_rg_op_5_EQ_0_6_7_AND_NOT_rg_op_5_EQ_2_8_9__ETC___d348,
       NOT_rg_op_5_EQ_1_78_77_AND_NOT_rg_op_5_EQ_2_8__ETC___d380,
       NOT_rg_op_5_EQ_1_78_77_AND_NOT_rg_op_5_EQ_2_8__ETC___d568,
       NOT_rg_op_5_EQ_1_78_77_AND_NOT_rg_op_5_EQ_2_8__ETC___d777,
       NOT_rg_op_5_EQ_1_78_77_AND_NOT_rg_op_5_EQ_2_8__ETC___d783,
       NOT_rg_op_5_EQ_1_78_77_AND_NOT_rg_op_5_EQ_2_8__ETC___d791,
       NOT_rg_op_5_EQ_1_78_77_AND_NOT_rg_op_5_EQ_2_8__ETC___d800,
       NOT_rg_op_5_EQ_2_8_9_OR_NOT_rg_amo_funct7_0_BI_ETC___d566,
       NOT_rg_op_5_EQ_2_8_9_OR_NOT_rg_amo_funct7_0_BI_ETC___d742,
       NOT_rg_op_5_EQ_2_8_9_OR_NOT_rg_amo_funct7_0_BI_ETC___d748,
       NOT_rg_op_5_EQ_2_8_9_OR_NOT_rg_amo_funct7_0_BI_ETC___d755,
       NOT_rg_op_5_EQ_2_8_9_OR_NOT_rg_amo_funct7_0_BI_ETC___d763,
       NOT_rg_priv_9_EQ_0b0_5_81_OR_tlb_lookup_rg_sat_ETC___d295,
       NOT_rg_priv_9_EQ_0b0_5_81_OR_tlb_lookup_rg_sat_ETC___d327,
       NOT_rg_priv_9_EQ_0b0_5_81_OR_tlb_lookup_rg_sat_ETC___d517,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d264,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d300,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d324,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d361,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d362,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d365,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d386,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d393,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d520,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d525,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d532,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d538,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d544,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d551,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d554,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d560,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d573,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d696,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d723,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d729,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d736,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d741,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d747,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d753,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d760,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d768,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d774,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d781,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d787,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d795,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d799,
       NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d804,
       NOT_soc_map_m_is_IO_addr_0_CONCAT_IF_rg_priv_9_ETC___d558,
       NOT_tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_ad_ETC___d102,
       cfg_verbosity_read__0_ULE_1___d11,
       dmem_not_imem_AND_rg_op_5_EQ_0_6_OR_rg_op_5_EQ_ETC___d290,
       dmem_not_imem_OR_NOT_rg_op_5_EQ_0_6_7_AND_NOT__ETC___d79,
       lrsc_result__h14271,
       master_xactor_crg_rd_data_full_port1__read__20_ETC___d1130,
       master_xactor_rg_rd_data_21_BITS_65_TO_64_22_E_ETC___d863,
       master_xactor_rg_rd_data_21_BITS_65_TO_64_22_E_ETC___d881,
       master_xactor_rg_rd_data_21_BITS_65_TO_64_22_E_ETC___d886,
       master_xactor_rg_rd_data_21_BITS_65_TO_64_22_E_ETC___d890,
       master_xactor_rg_rd_data_21_BITS_65_TO_64_22_E_ETC___d896,
       master_xactor_rg_rd_data_21_BITS_65_TO_64_22_E_ETC___d922,
       ram_state_and_ctag_cset_b_read__24_BITS_21_TO__ETC___d129,
       ram_state_and_ctag_cset_b_read__24_BIT_22_25_A_ETC___d372,
       req_f3_BITS_1_TO_0_308_EQ_0b0_309_OR_req_f3_BI_ETC___d1338,
       rg_amo_funct7_0_BITS_6_TO_2_1_EQ_0b10_2_AND_NO_ETC___d547,
       rg_lrsc_pa_84_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d185,
       rg_op_5_EQ_0_6_OR_rg_op_5_EQ_2_8_AND_rg_amo_fu_ETC___d343,
       rg_op_5_EQ_0_6_OR_rg_op_5_EQ_2_8_AND_rg_amo_fu_ETC___d383,
       rg_op_5_EQ_0_6_OR_rg_op_5_EQ_2_8_AND_rg_amo_fu_ETC___d387,
       rg_op_5_EQ_0_6_OR_rg_op_5_EQ_2_8_AND_rg_amo_fu_ETC___d522,
       rg_op_5_EQ_0_6_OR_rg_op_5_EQ_2_8_AND_rg_amo_fu_ETC___d541,
       rg_op_5_EQ_1_78_OR_rg_op_5_EQ_2_8_AND_rg_amo_f_ETC___d381,
       rg_op_5_EQ_1_78_OR_rg_op_5_EQ_2_8_AND_rg_amo_f_ETC___d569,
       rg_op_5_EQ_1_78_OR_rg_op_5_EQ_2_8_AND_rg_amo_f_ETC___d691,
       rg_op_5_EQ_2_8_AND_rg_amo_funct7_0_BITS_6_TO_2_ETC___d203,
       rg_priv_9_EQ_0b0_5_AND_NOT_tlb_lookup_rg_satp__ETC___d312,
       rg_priv_9_EQ_0b0_5_AND_NOT_tlb_lookup_rg_satp__ETC___d96,
       rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d105,
       rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d303,
       rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d334,
       rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d352,
       rg_priv_9_ULE_0b1___d40,
       rg_state_EQ_12_86_AND_rg_op_5_EQ_0_6_OR_rg_op__ETC___d1027,
       rg_state_EQ_12_86_AND_rg_op_5_EQ_0_6_OR_rg_op__ETC___d991,
       tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_addr_9_ETC___d297,
       tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_addr_9_ETC___d85,
       y__h5714;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get =
	     !f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get =
	     !f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // action method req
  assign CAN_FIRE_req = 1'd1 ;
  assign WILL_FIRE_req = EN_req ;

  // value method valid
  assign valid = dw_valid$whas ;

  // value method addr
  assign addr = rg_addr ;

  // value method word64
  always@(MUX_dw_output_ld_val$wset_1__SEL_1 or
	  MUX_dw_output_ld_val$wset_1__VAL_1 or
	  MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  MUX_dw_output_ld_val$wset_1__VAL_2 or
	  MUX_dw_output_ld_val$wset_1__SEL_3 or
	  MUX_dw_output_ld_val$wset_1__VAL_3 or
	  MUX_dw_output_st_amo_val$wset_1__SEL_1 or
	  MUX_dw_output_ld_val$wset_1__VAL_4 or
	  WILL_FIRE_RL_rl_ST_AMO_response or
	  rg_ld_val or
	  WILL_FIRE_RL_rl_maintain_io_read_rsp or
	  MUX_dw_output_ld_val$wset_1__VAL_6)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dw_output_ld_val$wset_1__SEL_1:
	  word64 = MUX_dw_output_ld_val$wset_1__VAL_1;
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  word64 = MUX_dw_output_ld_val$wset_1__VAL_2;
      MUX_dw_output_ld_val$wset_1__SEL_3:
	  word64 = MUX_dw_output_ld_val$wset_1__VAL_3;
      MUX_dw_output_st_amo_val$wset_1__SEL_1:
	  word64 = MUX_dw_output_ld_val$wset_1__VAL_4;
      WILL_FIRE_RL_rl_ST_AMO_response: word64 = rg_ld_val;
      WILL_FIRE_RL_rl_maintain_io_read_rsp:
	  word64 = MUX_dw_output_ld_val$wset_1__VAL_6;
      default: word64 = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end

  // value method st_amo_val
  assign st_amo_val =
	     MUX_dw_output_st_amo_val$wset_1__SEL_1 ? 64'd0 : rg_st_amo_val ;

  // value method exc
  assign exc = rg_state == 4'd4 ;

  // value method exc_code
  assign exc_code = rg_exc_code ;

  // action method server_flush_request_put
  assign RDY_server_flush_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_flush_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_flush_request_put = EN_server_flush_request_put ;

  // action method server_flush_response_get
  assign RDY_server_flush_response_get =
	     f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_flush_response_get =
	     f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_flush_response_get = EN_server_flush_response_get ;

  // action method tlb_flush
  assign RDY_tlb_flush = 1'd1 ;
  assign CAN_FIRE_tlb_flush = 1'd1 ;
  assign WILL_FIRE_tlb_flush = EN_tlb_flush ;

  // value method mem_master_m_awvalid
  assign mem_master_awvalid =
	     !master_xactor_crg_wr_addr_full$EN_port0__write &&
	     master_xactor_crg_wr_addr_full ;

  // value method mem_master_m_awaddr
  assign mem_master_awaddr = master_xactor_rg_wr_addr[66:3] ;

  // value method mem_master_m_awprot
  assign mem_master_awprot = master_xactor_rg_wr_addr[2:0] ;

  // action method mem_master_m_awready
  assign CAN_FIRE_mem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_awready = 1'd1 ;

  // value method mem_master_m_wvalid
  assign mem_master_wvalid =
	     !master_xactor_crg_wr_data_full$EN_port0__write &&
	     master_xactor_crg_wr_data_full ;

  // value method mem_master_m_wdata
  assign mem_master_wdata = master_xactor_rg_wr_data[71:8] ;

  // value method mem_master_m_wstrb
  assign mem_master_wstrb = master_xactor_rg_wr_data[7:0] ;

  // action method mem_master_m_wready
  assign CAN_FIRE_mem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_wready = 1'd1 ;

  // action method mem_master_m_bvalid
  assign CAN_FIRE_mem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_mem_master_m_bvalid = 1'd1 ;

  // value method mem_master_m_bready
  assign mem_master_bready = !master_xactor_crg_wr_resp_full$port2__read ;

  // value method mem_master_m_arvalid
  assign mem_master_arvalid =
	     !master_xactor_crg_rd_addr_full$EN_port0__write &&
	     master_xactor_crg_rd_addr_full ;

  // value method mem_master_m_araddr
  assign mem_master_araddr = master_xactor_rg_rd_addr[66:3] ;

  // value method mem_master_m_arprot
  assign mem_master_arprot = master_xactor_rg_rd_addr[2:0] ;

  // action method mem_master_m_arready
  assign CAN_FIRE_mem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_arready = 1'd1 ;

  // action method mem_master_m_rvalid
  assign CAN_FIRE_mem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_mem_master_m_rvalid = 1'd1 ;

  // value method mem_master_m_rready
  assign mem_master_rready = !master_xactor_crg_rd_data_full$port2__read ;

  // actionvalue method near_mem_io_client_request_get
  assign near_mem_io_client_request_get = f_near_mem_io_reqs$D_OUT ;
  assign RDY_near_mem_io_client_request_get = f_near_mem_io_reqs$EMPTY_N ;
  assign CAN_FIRE_near_mem_io_client_request_get =
	     f_near_mem_io_reqs$EMPTY_N ;
  assign WILL_FIRE_near_mem_io_client_request_get =
	     EN_near_mem_io_client_request_get ;

  // action method near_mem_io_client_response_put
  assign RDY_near_mem_io_client_response_put = f_near_mem_io_rsps$FULL_N ;
  assign CAN_FIRE_near_mem_io_client_response_put =
	     f_near_mem_io_rsps$FULL_N ;
  assign WILL_FIRE_near_mem_io_client_response_put =
	     EN_near_mem_io_client_response_put ;

  // submodule f_near_mem_io_reqs
  FIFO2 #(.width(32'd137), .guarded(32'd1)) f_near_mem_io_reqs(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(f_near_mem_io_reqs$D_IN),
							       .ENQ(f_near_mem_io_reqs$ENQ),
							       .DEQ(f_near_mem_io_reqs$DEQ),
							       .CLR(f_near_mem_io_reqs$CLR),
							       .D_OUT(f_near_mem_io_reqs$D_OUT),
							       .FULL_N(f_near_mem_io_reqs$FULL_N),
							       .EMPTY_N(f_near_mem_io_reqs$EMPTY_N));

  // submodule f_near_mem_io_rsps
  FIFO2 #(.width(32'd66), .guarded(32'd1)) f_near_mem_io_rsps(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(f_near_mem_io_rsps$D_IN),
							      .ENQ(f_near_mem_io_rsps$ENQ),
							      .DEQ(f_near_mem_io_rsps$DEQ),
							      .CLR(f_near_mem_io_rsps$CLR),
							      .D_OUT(f_near_mem_io_rsps$D_OUT),
							      .FULL_N(f_near_mem_io_rsps$FULL_N),
							      .EMPTY_N(f_near_mem_io_rsps$EMPTY_N));

  // submodule f_reset_reqs
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_reqs(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_reset_reqs$D_IN),
						       .ENQ(f_reset_reqs$ENQ),
						       .DEQ(f_reset_reqs$DEQ),
						       .CLR(f_reset_reqs$CLR),
						       .D_OUT(f_reset_reqs$D_OUT),
						       .FULL_N(f_reset_reqs$FULL_N),
						       .EMPTY_N(f_reset_reqs$EMPTY_N));

  // submodule f_reset_rsps
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_rsps(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_reset_rsps$D_IN),
						       .ENQ(f_reset_rsps$ENQ),
						       .DEQ(f_reset_rsps$DEQ),
						       .CLR(f_reset_rsps$CLR),
						       .D_OUT(f_reset_rsps$D_OUT),
						       .FULL_N(f_reset_rsps$FULL_N),
						       .EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule ram_state_and_ctag_cset
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd7),
	  .DATA_WIDTH(32'd23),
	  .MEMSIZE(8'd128)) ram_state_and_ctag_cset(.CLKA(CLK),
						    .CLKB(CLK),
						    .ADDRA(ram_state_and_ctag_cset$ADDRA),
						    .ADDRB(ram_state_and_ctag_cset$ADDRB),
						    .DIA(ram_state_and_ctag_cset$DIA),
						    .DIB(ram_state_and_ctag_cset$DIB),
						    .WEA(ram_state_and_ctag_cset$WEA),
						    .WEB(ram_state_and_ctag_cset$WEB),
						    .ENA(ram_state_and_ctag_cset$ENA),
						    .ENB(ram_state_and_ctag_cset$ENB),
						    .DOA(),
						    .DOB(ram_state_and_ctag_cset$DOB));

  // submodule ram_word64_set
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd9),
	  .DATA_WIDTH(32'd64),
	  .MEMSIZE(10'd512)) ram_word64_set(.CLKA(CLK),
					    .CLKB(CLK),
					    .ADDRA(ram_word64_set$ADDRA),
					    .ADDRB(ram_word64_set$ADDRB),
					    .DIA(ram_word64_set$DIA),
					    .DIB(ram_word64_set$DIB),
					    .WEA(ram_word64_set$WEA),
					    .WEB(ram_word64_set$WEB),
					    .ENA(ram_word64_set$ENA),
					    .ENB(ram_word64_set$ENB),
					    .DOA(),
					    .DOB(ram_word64_set$DOB));

  // submodule soc_map
  mkSoC_Map soc_map(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_is_IO_addr_addr(soc_map$m_is_IO_addr_addr),
		    .m_is_mem_addr_addr(soc_map$m_is_mem_addr_addr),
		    .m_is_near_mem_IO_addr_addr(soc_map$m_is_near_mem_IO_addr_addr),
		    .m_uart0_addr_base(),
		    .m_uart0_addr_size(),
		    .m_uart0_addr_lim(),
		    .m_near_mem_io_addr_base(),
		    .m_near_mem_io_addr_size(),
		    .m_near_mem_io_addr_lim(),
		    .m_boot_rom_addr_base(),
		    .m_boot_rom_addr_size(),
		    .m_boot_rom_addr_lim(),
		    .m_mem0_controller_addr_base(),
		    .m_mem0_controller_addr_size(),
		    .m_mem0_controller_addr_lim(),
		    .m_tcm_addr_base(),
		    .m_tcm_addr_size(),
		    .m_tcm_addr_lim(),
		    .m_is_mem_addr(),
		    .m_is_IO_addr(soc_map$m_is_IO_addr),
		    .m_is_near_mem_IO_addr(soc_map$m_is_near_mem_IO_addr),
		    .m_pc_reset_value());

  // submodule tlb
  mkTLB #(.dmem_not_imem(dmem_not_imem)) tlb(.CLK(CLK),
					     .RST_N(RST_N),
					     .insert_asid(tlb$insert_asid),
					     .insert_level(tlb$insert_level),
					     .insert_pte(tlb$insert_pte),
					     .insert_pte_pa(tlb$insert_pte_pa),
					     .insert_vpn(tlb$insert_vpn),
					     .lookup_asid(tlb$lookup_asid),
					     .lookup_vpn(tlb$lookup_vpn),
					     .EN_flush(tlb$EN_flush),
					     .EN_insert(tlb$EN_insert),
					     .RDY_flush(),
					     .lookup(tlb$lookup),
					     .RDY_lookup(tlb$RDY_lookup),
					     .RDY_insert(tlb$RDY_insert));

  // rule RL_rl_reset
  assign CAN_FIRE_RL_rl_reset =
	     (rg_cset_in_cache != 7'd127 ||
	      f_reset_reqs$EMPTY_N && f_reset_rsps$FULL_N) &&
	     rg_state == 4'd1 ;
  assign WILL_FIRE_RL_rl_reset = CAN_FIRE_RL_rl_reset ;

  // rule RL_rl_rereq
  assign CAN_FIRE_RL_rl_rereq = rg_state == 4'd10 ;
  assign WILL_FIRE_RL_rl_rereq =
	     CAN_FIRE_RL_rl_rereq && !WILL_FIRE_RL_rl_start_reset && !EN_req ;

  // rule RL_rl_ST_AMO_response
  assign CAN_FIRE_RL_rl_ST_AMO_response = rg_state == 4'd11 ;
  assign WILL_FIRE_RL_rl_ST_AMO_response = CAN_FIRE_RL_rl_ST_AMO_response ;

  // rule RL_rl_io_near_mem_read_req
  assign CAN_FIRE_RL_rl_io_near_mem_read_req =
	     f_near_mem_io_reqs$FULL_N &&
	     rg_state_EQ_12_86_AND_rg_op_5_EQ_0_6_OR_rg_op__ETC___d1027 ;
  assign WILL_FIRE_RL_rl_io_near_mem_read_req =
	     CAN_FIRE_RL_rl_io_near_mem_read_req &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_near_mem_read_rsp
  assign CAN_FIRE_RL_rl_io_near_mem_read_rsp =
	     f_near_mem_io_rsps$EMPTY_N && rg_state == 4'd13 &&
	     soc_map$m_is_near_mem_IO_addr &&
	     f_near_mem_io_rsps$D_OUT[65] ;
  assign WILL_FIRE_RL_rl_io_near_mem_read_rsp =
	     CAN_FIRE_RL_rl_io_near_mem_read_rsp &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_maintain_io_read_rsp
  assign CAN_FIRE_RL_rl_maintain_io_read_rsp = rg_state == 4'd14 ;
  assign WILL_FIRE_RL_rl_maintain_io_read_rsp =
	     CAN_FIRE_RL_rl_maintain_io_read_rsp ;

  // rule RL_rl_io_near_mem_write_req
  assign CAN_FIRE_RL_rl_io_near_mem_write_req =
	     f_near_mem_io_reqs$FULL_N && rg_state == 4'd12 &&
	     rg_op == 2'd1 &&
	     soc_map$m_is_near_mem_IO_addr ;
  assign WILL_FIRE_RL_rl_io_near_mem_write_req =
	     CAN_FIRE_RL_rl_io_near_mem_write_req &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_near_mem_write_rsp
  assign CAN_FIRE_RL_rl_io_near_mem_write_rsp =
	     f_near_mem_io_rsps$EMPTY_N && !f_near_mem_io_rsps$D_OUT[65] ;
  assign WILL_FIRE_RL_rl_io_near_mem_write_rsp =
	     CAN_FIRE_RL_rl_io_near_mem_write_rsp ;

  // rule RL_rl_io_AMO_SC_req
  assign CAN_FIRE_RL_rl_io_AMO_SC_req =
	     rg_state == 4'd12 && rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 &&
	     !soc_map$m_is_near_mem_IO_addr ;
  assign WILL_FIRE_RL_rl_io_AMO_SC_req =
	     CAN_FIRE_RL_rl_io_AMO_SC_req && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_drive_exception_rsp
  assign CAN_FIRE_RL_rl_drive_exception_rsp = rg_state == 4'd4 ;
  assign WILL_FIRE_RL_rl_drive_exception_rsp = rg_state == 4'd4 ;

  // rule RL_rl_start_reset
  assign CAN_FIRE_RL_rl_start_reset =
	     f_reset_reqs$EMPTY_N && rg_state != 4'd1 ;
  assign WILL_FIRE_RL_rl_start_reset = CAN_FIRE_RL_rl_start_reset ;

  // rule RL_rl_ptw_level_1
  assign CAN_FIRE_RL_rl_ptw_level_1 =
	     master_xactor_crg_rd_data_full$port1__read &&
	     NOT_master_xactor_rg_rd_data_21_BITS_65_TO_64__ETC___d847 &&
	     rg_state == 4'd6 ;
  assign WILL_FIRE_RL_rl_ptw_level_1 =
	     CAN_FIRE_RL_rl_ptw_level_1 && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_ptw_level_0
  assign CAN_FIRE_RL_rl_ptw_level_0 =
	     master_xactor_crg_rd_data_full$port1__read &&
	     (master_xactor_rg_rd_data[65:64] != 2'd0 ||
	      !_theResult____h22209[0] ||
	      !_theResult____h22209[1] && _theResult____h22209[2] ||
	      !_theResult____h22209[3] && !_theResult____h22209[1] ||
	      tlb$RDY_insert) &&
	     rg_state == 4'd7 ;
  assign WILL_FIRE_RL_rl_ptw_level_0 =
	     CAN_FIRE_RL_rl_ptw_level_0 && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_cache_refill_req_loop
  assign CAN_FIRE_RL_rl_cache_refill_req_loop =
	     !master_xactor_crg_rd_addr_full$port2__read &&
	     rg_requesting_cline ;
  assign WILL_FIRE_RL_rl_cache_refill_req_loop =
	     CAN_FIRE_RL_rl_cache_refill_req_loop &&
	     !WILL_FIRE_RL_rl_ptw_level_1 &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_probe_and_immed_rsp
  assign CAN_FIRE_RL_rl_probe_and_immed_rsp =
	     (cfg_verbosity_read__0_ULE_1___d11 || tlb$RDY_lookup) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d264 &&
	     rg_state == 4'd3 ;
  assign WILL_FIRE_RL_rl_probe_and_immed_rsp =
	     CAN_FIRE_RL_rl_probe_and_immed_rsp &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_cache_refill_rsps_loop
  assign CAN_FIRE_RL_rl_cache_refill_rsps_loop =
	     master_xactor_crg_rd_data_full$port1__read && rg_state == 4'd9 ;
  assign WILL_FIRE_RL_rl_cache_refill_rsps_loop =
	     CAN_FIRE_RL_rl_cache_refill_rsps_loop &&
	     !WILL_FIRE_RL_rl_start_reset &&
	     !EN_req ;

  // rule RL_rl_io_read_req
  assign CAN_FIRE_RL_rl_io_read_req =
	     !master_xactor_crg_rd_addr_full$port2__read &&
	     rg_state_EQ_12_86_AND_rg_op_5_EQ_0_6_OR_rg_op__ETC___d991 ;
  assign WILL_FIRE_RL_rl_io_read_req =
	     CAN_FIRE_RL_rl_io_read_req &&
	     !WILL_FIRE_RL_rl_cache_refill_req_loop &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_read_rsp
  assign CAN_FIRE_RL_rl_io_read_rsp =
	     master_xactor_crg_rd_data_full$port1__read &&
	     rg_state == 4'd13 &&
	     !soc_map$m_is_near_mem_IO_addr ;
  assign WILL_FIRE_RL_rl_io_read_rsp =
	     CAN_FIRE_RL_rl_io_read_rsp && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_write_req
  assign CAN_FIRE_RL_rl_io_write_req =
	     !master_xactor_crg_wr_addr_full$port2__read &&
	     !master_xactor_crg_wr_data_full$port2__read &&
	     rg_state == 4'd12 &&
	     rg_op == 2'd1 &&
	     !soc_map$m_is_near_mem_IO_addr ;
  assign WILL_FIRE_RL_rl_io_write_req =
	     CAN_FIRE_RL_rl_io_write_req && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_AMO_op_req
  assign CAN_FIRE_RL_rl_io_AMO_op_req =
	     !master_xactor_crg_rd_addr_full$port2__read &&
	     rg_state == 4'd12 &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] != 5'b00010 &&
	     rg_amo_funct7[6:2] != 5'b00011 ;
  assign WILL_FIRE_RL_rl_io_AMO_op_req =
	     CAN_FIRE_RL_rl_io_AMO_op_req &&
	     !WILL_FIRE_RL_rl_cache_refill_req_loop &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_AMO_read_rsp
  assign CAN_FIRE_RL_rl_io_AMO_read_rsp =
	     master_xactor_crg_rd_data_full_port1__read__20_ETC___d1130 &&
	     rg_state == 4'd15 ;
  assign WILL_FIRE_RL_rl_io_AMO_read_rsp =
	     CAN_FIRE_RL_rl_io_AMO_read_rsp && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_start_tlb_refill
  assign CAN_FIRE_RL_rl_start_tlb_refill =
	     !master_xactor_crg_rd_addr_full$port2__read &&
	     rg_state == 4'd5 &&
	     b__h21883 == 4'd0 ;
  assign WILL_FIRE_RL_rl_start_tlb_refill =
	     CAN_FIRE_RL_rl_start_tlb_refill &&
	     !WILL_FIRE_RL_rl_cache_refill_req_loop &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_start_cache_refill
  assign CAN_FIRE_RL_rl_start_cache_refill =
	     !master_xactor_crg_rd_addr_full$port2__read &&
	     rg_state == 4'd8 &&
	     b__h21883 == 4'd0 ;
  assign WILL_FIRE_RL_rl_start_cache_refill = MUX_rg_state$write_1__SEL_2 ;

  // rule RL_rl_discard_write_rsp
  assign CAN_FIRE_RL_rl_discard_write_rsp =
	     b__h21883 != 4'd0 && master_xactor_crg_wr_resp_full$port1__read ;
  assign WILL_FIRE_RL_rl_discard_write_rsp =
	     CAN_FIRE_RL_rl_discard_write_rsp &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // inputs to muxes for submodule ports
  assign MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ;
  assign MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d696 ;
  assign MUX_dw_output_ld_val$wset_1__SEL_1 =
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ;
  assign MUX_dw_output_ld_val$wset_1__SEL_3 =
	     WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	     f_near_mem_io_rsps$D_OUT[64] ;
  assign MUX_dw_output_st_amo_val$wset_1__SEL_1 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d393 ;
  assign MUX_master_xactor_crg_rd_addr_full$port2__write_1__SEL_1 =
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     _theResult____h22209[0] &&
	     !_theResult____h22209[2] &&
	     !_theResult____h22209[3] &&
	     !_theResult____h22209[1] ;
  assign MUX_master_xactor_rg_rd_addr$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_io_AMO_op_req || WILL_FIRE_RL_rl_io_read_req ;
  assign MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 =
	     EN_req &&
	     req_f3_BITS_1_TO_0_308_EQ_0b0_309_OR_req_f3_BI_ETC___d1338 ;
  assign MUX_ram_word64_set$a_put_1__SEL_1 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ;
  assign MUX_ram_word64_set$b_put_2__SEL_2 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[1:0] != 2'd3 ;
  assign MUX_rg_error_during_refill$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_rg_rd_data[65:64] != 2'd0 ;
  assign MUX_rg_exc_code$write_1__SEL_1 =
	     EN_req &&
	     NOT_req_f3_BITS_1_TO_0_308_EQ_0b0_309_310_AND__ETC___d1329 ;
  assign MUX_rg_exc_code$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[65:64] != 2'd0 ;
  assign MUX_rg_exc_code$write_1__SEL_3 =
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_rg_rd_data[65:64] != 2'd0 ;
  assign MUX_rg_exc_code$write_1__SEL_5 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d105 ;
  assign MUX_rg_exc_code$write_1__SEL_6 =
	     WILL_FIRE_RL_rl_ptw_level_0 &&
	     (!_theResult____h22209[0] ||
	      !_theResult____h22209[1] && _theResult____h22209[2] ||
	      !_theResult____h22209[3] && !_theResult____h22209[1] ||
	      master_xactor_rg_rd_data[65:64] != 2'd0) ;
  assign MUX_rg_exc_code$write_1__SEL_7 =
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     NOT_IF_rg_pte_pa_25_BIT_2_26_THEN_master_xacto_ETC___d854 ;
  assign MUX_rg_exc_code$write_1__SEL_8 =
	     WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	     !f_near_mem_io_rsps$D_OUT[64] ;
  assign MUX_rg_ld_val$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d560 ;
  assign MUX_rg_lrsc_valid$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d386 ;
  assign MUX_rg_state$write_1__SEL_2 =
	     CAN_FIRE_RL_rl_start_cache_refill &&
	     !WILL_FIRE_RL_rl_cache_refill_req_loop &&
	     !WILL_FIRE_RL_rl_start_reset &&
	     !EN_req ;
  assign MUX_rg_state$write_1__SEL_10 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[1:0] == 2'd3 ;
  assign MUX_rg_state$write_1__SEL_11 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d352 ;
  assign MUX_rg_state$write_1__SEL_20 =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 ;
  assign MUX_tlb$insert_1__SEL_1 =
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     master_xactor_rg_rd_data_21_BITS_65_TO_64_22_E_ETC___d886 ;
  assign MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1 =
	     ctr_wr_rsps_pending_crg + 4'd1 ;
  always@(rg_f3 or
	  result__h27296 or
	  result__h27349 or
	  result__h27401 or
	  master_xactor_rg_rd_data or
	  result__h27323 or result__h27375 or result__h27427)
  begin
    case (rg_f3)
      3'b0: MUX_dw_output_ld_val$wset_1__VAL_1 = result__h27296;
      3'b001: MUX_dw_output_ld_val$wset_1__VAL_1 = result__h27349;
      3'b010: MUX_dw_output_ld_val$wset_1__VAL_1 = result__h27401;
      3'b011:
	  MUX_dw_output_ld_val$wset_1__VAL_1 = master_xactor_rg_rd_data[63:0];
      3'b100: MUX_dw_output_ld_val$wset_1__VAL_1 = result__h27323;
      3'b101: MUX_dw_output_ld_val$wset_1__VAL_1 = result__h27375;
      3'b110: MUX_dw_output_ld_val$wset_1__VAL_1 = result__h27427;
      3'd7: MUX_dw_output_ld_val$wset_1__VAL_1 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  result__h32580 or
	  result__h32637 or
	  result__h32691 or
	  new_ld_val__h30768 or
	  result__h32610 or result__h32664 or result__h32718)
  begin
    case (rg_f3)
      3'b0: MUX_dw_output_ld_val$wset_1__VAL_2 = result__h32580;
      3'b001: MUX_dw_output_ld_val$wset_1__VAL_2 = result__h32637;
      3'b010: MUX_dw_output_ld_val$wset_1__VAL_2 = result__h32691;
      3'b011: MUX_dw_output_ld_val$wset_1__VAL_2 = new_ld_val__h30768;
      3'b100: MUX_dw_output_ld_val$wset_1__VAL_2 = result__h32610;
      3'b101: MUX_dw_output_ld_val$wset_1__VAL_2 = result__h32664;
      3'b110: MUX_dw_output_ld_val$wset_1__VAL_2 = result__h32718;
      3'd7: MUX_dw_output_ld_val$wset_1__VAL_2 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  result__h28223 or
	  result__h28276 or
	  result__h28328 or
	  f_near_mem_io_rsps$D_OUT or
	  result__h28250 or result__h28302 or result__h28354)
  begin
    case (rg_f3)
      3'b0: MUX_dw_output_ld_val$wset_1__VAL_3 = result__h28223;
      3'b001: MUX_dw_output_ld_val$wset_1__VAL_3 = result__h28276;
      3'b010: MUX_dw_output_ld_val$wset_1__VAL_3 = result__h28328;
      3'b011:
	  MUX_dw_output_ld_val$wset_1__VAL_3 = f_near_mem_io_rsps$D_OUT[63:0];
      3'b100: MUX_dw_output_ld_val$wset_1__VAL_3 = result__h28250;
      3'b101: MUX_dw_output_ld_val$wset_1__VAL_3 = result__h28302;
      3'b110: MUX_dw_output_ld_val$wset_1__VAL_3 = result__h28354;
      3'd7: MUX_dw_output_ld_val$wset_1__VAL_3 = 64'd0;
    endcase
  end
  assign MUX_dw_output_ld_val$wset_1__VAL_4 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
	       new_value__h6600 :
	       new_value__h18869 ;
  always@(rg_f3 or
	  result__h28606 or
	  result__h28660 or
	  result__h28714 or
	  rg_ld_val or result__h28633 or result__h28687 or result__h28741)
  begin
    case (rg_f3)
      3'b0: MUX_dw_output_ld_val$wset_1__VAL_6 = result__h28606;
      3'b001: MUX_dw_output_ld_val$wset_1__VAL_6 = result__h28660;
      3'b010: MUX_dw_output_ld_val$wset_1__VAL_6 = result__h28714;
      3'b011: MUX_dw_output_ld_val$wset_1__VAL_6 = rg_ld_val;
      3'b100: MUX_dw_output_ld_val$wset_1__VAL_6 = result__h28633;
      3'b101: MUX_dw_output_ld_val$wset_1__VAL_6 = result__h28687;
      3'b110: MUX_dw_output_ld_val$wset_1__VAL_6 = result__h28741;
      3'd7: MUX_dw_output_ld_val$wset_1__VAL_6 = 64'd0;
    endcase
  end
  assign MUX_f_near_mem_io_reqs$enq_1__VAL_1 =
	     { 1'd1, fabric_addr__h30383, 72'hAAAAAAAAAAAAAAAAAA } ;
  assign MUX_f_near_mem_io_reqs$enq_1__VAL_2 =
	     { 1'd0,
	       fabric_addr__h30383,
	       value__h30041,
	       io_req_wr_data_wstrb__h30996 } ;
  assign MUX_master_xactor_rg_rd_addr$write_1__VAL_1 =
	     { lev_0_pte_pa_w64_fa__h22447, 3'd0 } ;
  assign MUX_master_xactor_rg_rd_addr$write_1__VAL_2 =
	     { fabric_addr__h30383, 3'd0 } ;
  assign MUX_master_xactor_rg_rd_addr$write_1__VAL_3 =
	     { lev_1_pte_pa_w64_fa__h21894, 3'd0 } ;
  assign MUX_master_xactor_rg_rd_addr$write_1__VAL_4 =
	     { 30'd0, cline_addr__h24625, 3'd0 } ;
  assign MUX_master_xactor_rg_rd_addr$write_1__VAL_5 =
	     { cline_fabric_addr__h24626, 3'd0 } ;
  assign MUX_master_xactor_rg_wr_addr$write_1__VAL_1 =
	     { io_req_wr_addr_awaddr__h30836, 3'd0 } ;
  assign MUX_master_xactor_rg_wr_addr$write_1__VAL_2 =
	     { mem_req_wr_addr_awaddr__h19888, 3'd0 } ;
  assign MUX_master_xactor_rg_wr_data$write_1__VAL_1 =
	     { io_req_wr_data_wdata__h30995, io_req_wr_data_wstrb__h30996 } ;
  assign MUX_master_xactor_rg_wr_data$write_1__VAL_2 =
	     { IF_rg_op_5_EQ_1_78_OR_rg_op_5_EQ_2_8_AND_rg_am_ETC___d708,
	       mem_req_wr_data_wstrb__h20000 } ;
  assign MUX_master_xactor_rg_wr_data$write_1__VAL_3 =
	     { value__h30041, io_req_wr_data_wstrb__h30996 } ;
  assign MUX_ram_state_and_ctag_cset$a_put_3__VAL_1 = { 1'd1, rg_pa[33:12] } ;
  assign MUX_ram_word64_set$a_put_3__VAL_2 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       IF_rg_f3_32_EQ_0b0_33_THEN_IF_IF_rg_priv_9_ULE_ETC___d624 :
	       IF_rg_f3_32_EQ_0b0_33_THEN_IF_IF_rg_priv_9_ULE_ETC___d689 ;
  assign MUX_ram_word64_set$b_put_2__VAL_2 = rg_word64_set_in_cache + 9'd1 ;
  assign MUX_ram_word64_set$b_put_2__VAL_4 = { rg_addr[11:5], 2'd0 } ;
  assign MUX_rg_cset_in_cache$write_1__VAL_1 = rg_cset_in_cache + 7'd1 ;
  assign MUX_rg_exc_code$write_1__VAL_1 = (req_op == 2'd0) ? 4'd4 : 4'd6 ;
  assign MUX_rg_exc_code$write_1__VAL_6 =
	     (master_xactor_rg_rd_data[65:64] == 2'd0) ?
	       exc_code___1__h5788 :
	       access_exc_code__h3356 ;
  assign MUX_rg_ld_val$write_1__VAL_2 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       x__h14281 :
	       IF_rg_f3_32_EQ_0b10_63_THEN_SEXT_IF_rg_f3_32_E_ETC___d564 ;
  assign MUX_rg_pa$write_1__VAL_1 = { 2'd0, req_addr } ;
  assign MUX_rg_req_byte_in_cline$write_1__VAL_1 =
	     rg_req_byte_in_cline + 64'd8 ;
  assign MUX_rg_state$write_1__VAL_3 =
	     NOT_req_f3_BITS_1_TO_0_308_EQ_0b0_309_310_AND__ETC___d1329 ?
	       4'd4 :
	       4'd3 ;
  assign MUX_rg_state$write_1__VAL_5 =
	     (master_xactor_rg_rd_data[65:64] == 2'd0) ? 4'd14 : 4'd4 ;
  assign MUX_rg_state$write_1__VAL_10 =
	     (master_xactor_rg_rd_data[65:64] != 2'd0 ||
	      rg_error_during_refill) ?
	       4'd4 :
	       4'd10 ;
  assign MUX_rg_state$write_1__VAL_11 =
	     (rg_priv_9_ULE_0b1___d40 && rg_satp[31] && !tlb$lookup[68]) ?
	       4'd5 :
	       IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3__ETC___d357 ;
  assign MUX_rg_state$write_1__VAL_12 =
	     (master_xactor_rg_rd_data[65:64] == 2'd0) ?
	       ((!_theResult____h22209[0] ||
		 !_theResult____h22209[1] && _theResult____h22209[2] ||
		 !_theResult____h22209[3] && !_theResult____h22209[1]) ?
		  4'd4 :
		  4'd10) :
	       4'd4 ;
  assign MUX_rg_state$write_1__VAL_13 =
	     (master_xactor_rg_rd_data[65:64] == 2'd0) ?
	       ((!_theResult____h22209[0] ||
		 !_theResult____h22209[1] && _theResult____h22209[2]) ?
		  4'd4 :
		  ((!_theResult____h22209[3] && !_theResult____h22209[1]) ?
		     4'd7 :
		     ((_theResult____h22209[19:10] == 10'd0) ?
			4'd10 :
			4'd4))) :
	       4'd4 ;
  assign MUX_rg_state$write_1__VAL_17 =
	     f_near_mem_io_rsps$D_OUT[64] ? 4'd14 : 4'd4 ;

  // inlined wires
  assign dw_valid$whas =
	     (WILL_FIRE_RL_rl_io_AMO_read_rsp ||
	      WILL_FIRE_RL_rl_io_read_rsp) &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ||
	     WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	     f_near_mem_io_rsps$D_OUT[64] ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d393 ||
	     WILL_FIRE_RL_rl_drive_exception_rsp ||
	     WILL_FIRE_RL_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_rl_ST_AMO_response ;
  assign master_xactor_crg_wr_addr_full$EN_port0__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign master_xactor_crg_wr_addr_full$port1__read =
	     !master_xactor_crg_wr_addr_full$EN_port0__write &&
	     master_xactor_crg_wr_addr_full ;
  assign master_xactor_crg_wr_addr_full$EN_port1__write =
	     master_xactor_crg_wr_addr_full$port1__read &&
	     mem_master_awready ;
  assign master_xactor_crg_wr_addr_full$port2__read =
	     !master_xactor_crg_wr_addr_full$EN_port1__write &&
	     master_xactor_crg_wr_addr_full$port1__read ;
  assign master_xactor_crg_wr_addr_full$EN_port2__write =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d696 ||
	     WILL_FIRE_RL_rl_io_write_req ;
  assign master_xactor_crg_wr_addr_full$port3__read =
	     master_xactor_crg_wr_addr_full$EN_port2__write ?
	       1'd1 :
	       master_xactor_crg_wr_addr_full$port2__read ;
  assign master_xactor_crg_wr_data_full$EN_port0__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign master_xactor_crg_wr_data_full$port1__read =
	     !master_xactor_crg_wr_data_full$EN_port0__write &&
	     master_xactor_crg_wr_data_full ;
  assign master_xactor_crg_wr_data_full$EN_port1__write =
	     master_xactor_crg_wr_data_full$port1__read && mem_master_wready ;
  assign master_xactor_crg_wr_data_full$port2__read =
	     !master_xactor_crg_wr_data_full$EN_port1__write &&
	     master_xactor_crg_wr_data_full$port1__read ;
  assign master_xactor_crg_wr_data_full$EN_port2__write =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d696 ||
	     WILL_FIRE_RL_rl_io_write_req ;
  assign master_xactor_crg_wr_data_full$port3__read =
	     master_xactor_crg_wr_data_full$EN_port2__write ?
	       1'd1 :
	       master_xactor_crg_wr_data_full$port2__read ;
  assign master_xactor_crg_wr_resp_full$EN_port0__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign master_xactor_crg_wr_resp_full$port1__read =
	     !master_xactor_crg_wr_resp_full$EN_port0__write &&
	     master_xactor_crg_wr_resp_full ;
  assign master_xactor_crg_wr_resp_full$port2__read =
	     !WILL_FIRE_RL_rl_discard_write_rsp &&
	     master_xactor_crg_wr_resp_full$port1__read ;
  assign master_xactor_crg_wr_resp_full$EN_port2__write =
	     mem_master_bvalid &&
	     !master_xactor_crg_wr_resp_full$port2__read ;
  assign master_xactor_crg_wr_resp_full$port3__read =
	     master_xactor_crg_wr_resp_full$EN_port2__write ||
	     master_xactor_crg_wr_resp_full$port2__read ;
  assign master_xactor_crg_rd_addr_full$EN_port0__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign master_xactor_crg_rd_addr_full$port1__read =
	     !master_xactor_crg_rd_addr_full$EN_port0__write &&
	     master_xactor_crg_rd_addr_full ;
  assign master_xactor_crg_rd_addr_full$EN_port1__write =
	     master_xactor_crg_rd_addr_full$port1__read &&
	     mem_master_arready ;
  assign master_xactor_crg_rd_addr_full$port2__read =
	     !master_xactor_crg_rd_addr_full$EN_port1__write &&
	     master_xactor_crg_rd_addr_full$port1__read ;
  assign master_xactor_crg_rd_addr_full$EN_port2__write =
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     _theResult____h22209[0] &&
	     !_theResult____h22209[2] &&
	     !_theResult____h22209[3] &&
	     !_theResult____h22209[1] ||
	     WILL_FIRE_RL_rl_io_AMO_op_req ||
	     WILL_FIRE_RL_rl_io_read_req ||
	     WILL_FIRE_RL_rl_cache_refill_req_loop ||
	     WILL_FIRE_RL_rl_start_cache_refill ||
	     WILL_FIRE_RL_rl_start_tlb_refill ;
  assign master_xactor_crg_rd_addr_full$port3__read =
	     master_xactor_crg_rd_addr_full$EN_port2__write ?
	       1'd1 :
	       master_xactor_crg_rd_addr_full$port2__read ;
  assign master_xactor_crg_rd_data_full$EN_port0__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign master_xactor_crg_rd_data_full$port1__read =
	     !master_xactor_crg_rd_data_full$EN_port0__write &&
	     master_xactor_crg_rd_data_full ;
  assign master_xactor_crg_rd_data_full$EN_port1__write =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp || WILL_FIRE_RL_rl_io_read_rsp ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop ||
	     WILL_FIRE_RL_rl_ptw_level_0 ||
	     WILL_FIRE_RL_rl_ptw_level_1 ;
  assign master_xactor_crg_rd_data_full$port2__read =
	     !master_xactor_crg_rd_data_full$EN_port1__write &&
	     master_xactor_crg_rd_data_full$port1__read ;
  assign master_xactor_crg_rd_data_full$EN_port2__write =
	     mem_master_rvalid &&
	     !master_xactor_crg_rd_data_full$port2__read ;
  assign master_xactor_crg_rd_data_full$port3__read =
	     master_xactor_crg_rd_data_full$EN_port2__write ||
	     master_xactor_crg_rd_data_full$port2__read ;
  assign ctr_wr_rsps_pending_crg$EN_port0__write =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d696 ||
	     WILL_FIRE_RL_rl_io_write_req ;
  always@(MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1 or
	  MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2 or
	  WILL_FIRE_RL_rl_io_write_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  ctr_wr_rsps_pending_crg$port0__write_1 =
	      MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1;
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2:
	  ctr_wr_rsps_pending_crg$port0__write_1 =
	      MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1;
      WILL_FIRE_RL_rl_io_write_req:
	  ctr_wr_rsps_pending_crg$port0__write_1 =
	      MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1;
      default: ctr_wr_rsps_pending_crg$port0__write_1 =
		   4'b1010 /* unspecified value */ ;
    endcase
  end
  assign ctr_wr_rsps_pending_crg$port1__write_1 = b__h21883 - 4'd1 ;
  assign ctr_wr_rsps_pending_crg$port2__read =
	     WILL_FIRE_RL_rl_discard_write_rsp ?
	       ctr_wr_rsps_pending_crg$port1__write_1 :
	       b__h21883 ;
  assign ctr_wr_rsps_pending_crg$EN_port2__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign ctr_wr_rsps_pending_crg$port3__read =
	     ctr_wr_rsps_pending_crg$EN_port2__write ?
	       4'd0 :
	       ctr_wr_rsps_pending_crg$port2__read ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN = set_verbosity_verbosity ;
  assign cfg_verbosity$EN = EN_set_verbosity ;

  // register ctr_wr_rsps_pending_crg
  assign ctr_wr_rsps_pending_crg$D_IN = ctr_wr_rsps_pending_crg$port3__read ;
  assign ctr_wr_rsps_pending_crg$EN = 1'b1 ;

  // register master_xactor_crg_rd_addr_full
  assign master_xactor_crg_rd_addr_full$D_IN =
	     master_xactor_crg_rd_addr_full$port3__read ;
  assign master_xactor_crg_rd_addr_full$EN = 1'b1 ;

  // register master_xactor_crg_rd_data_full
  assign master_xactor_crg_rd_data_full$D_IN =
	     master_xactor_crg_rd_data_full$port3__read ;
  assign master_xactor_crg_rd_data_full$EN = 1'b1 ;

  // register master_xactor_crg_wr_addr_full
  assign master_xactor_crg_wr_addr_full$D_IN =
	     master_xactor_crg_wr_addr_full$port3__read ;
  assign master_xactor_crg_wr_addr_full$EN = 1'b1 ;

  // register master_xactor_crg_wr_data_full
  assign master_xactor_crg_wr_data_full$D_IN =
	     master_xactor_crg_wr_data_full$port3__read ;
  assign master_xactor_crg_wr_data_full$EN = 1'b1 ;

  // register master_xactor_crg_wr_resp_full
  assign master_xactor_crg_wr_resp_full$D_IN =
	     master_xactor_crg_wr_resp_full$port3__read ;
  assign master_xactor_crg_wr_resp_full$EN = 1'b1 ;

  // register master_xactor_rg_rd_addr
  always@(MUX_master_xactor_crg_rd_addr_full$port2__write_1__SEL_1 or
	  MUX_master_xactor_rg_rd_addr$write_1__VAL_1 or
	  MUX_master_xactor_rg_rd_addr$write_1__SEL_2 or
	  MUX_master_xactor_rg_rd_addr$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_start_tlb_refill or
	  MUX_master_xactor_rg_rd_addr$write_1__VAL_3 or
	  WILL_FIRE_RL_rl_start_cache_refill or
	  MUX_master_xactor_rg_rd_addr$write_1__VAL_4 or
	  WILL_FIRE_RL_rl_cache_refill_req_loop or
	  MUX_master_xactor_rg_rd_addr$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_master_xactor_crg_rd_addr_full$port2__write_1__SEL_1:
	  master_xactor_rg_rd_addr$D_IN =
	      MUX_master_xactor_rg_rd_addr$write_1__VAL_1;
      MUX_master_xactor_rg_rd_addr$write_1__SEL_2:
	  master_xactor_rg_rd_addr$D_IN =
	      MUX_master_xactor_rg_rd_addr$write_1__VAL_2;
      WILL_FIRE_RL_rl_start_tlb_refill:
	  master_xactor_rg_rd_addr$D_IN =
	      MUX_master_xactor_rg_rd_addr$write_1__VAL_3;
      WILL_FIRE_RL_rl_start_cache_refill:
	  master_xactor_rg_rd_addr$D_IN =
	      MUX_master_xactor_rg_rd_addr$write_1__VAL_4;
      WILL_FIRE_RL_rl_cache_refill_req_loop:
	  master_xactor_rg_rd_addr$D_IN =
	      MUX_master_xactor_rg_rd_addr$write_1__VAL_5;
      default: master_xactor_rg_rd_addr$D_IN =
		   67'h2AAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign master_xactor_rg_rd_addr$EN =
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     _theResult____h22209[0] &&
	     !_theResult____h22209[2] &&
	     !_theResult____h22209[3] &&
	     !_theResult____h22209[1] ||
	     WILL_FIRE_RL_rl_io_AMO_op_req ||
	     WILL_FIRE_RL_rl_io_read_req ||
	     WILL_FIRE_RL_rl_start_tlb_refill ||
	     WILL_FIRE_RL_rl_start_cache_refill ||
	     WILL_FIRE_RL_rl_cache_refill_req_loop ;

  // register master_xactor_rg_rd_data
  assign master_xactor_rg_rd_data$D_IN =
	     { mem_master_rresp, mem_master_rdata } ;
  assign master_xactor_rg_rd_data$EN = 1'd1 ;

  // register master_xactor_rg_wr_addr
  always@(MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  MUX_master_xactor_rg_wr_addr$write_1__VAL_1 or
	  MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2 or
	  MUX_master_xactor_rg_wr_addr$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_io_write_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  master_xactor_rg_wr_addr$D_IN =
	      MUX_master_xactor_rg_wr_addr$write_1__VAL_1;
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2:
	  master_xactor_rg_wr_addr$D_IN =
	      MUX_master_xactor_rg_wr_addr$write_1__VAL_2;
      WILL_FIRE_RL_rl_io_write_req:
	  master_xactor_rg_wr_addr$D_IN =
	      MUX_master_xactor_rg_wr_addr$write_1__VAL_1;
      default: master_xactor_rg_wr_addr$D_IN =
		   67'h2AAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign master_xactor_rg_wr_addr$EN =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d696 ||
	     WILL_FIRE_RL_rl_io_write_req ;

  // register master_xactor_rg_wr_data
  always@(MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  MUX_master_xactor_rg_wr_data$write_1__VAL_1 or
	  MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2 or
	  MUX_master_xactor_rg_wr_data$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_io_write_req or
	  MUX_master_xactor_rg_wr_data$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  master_xactor_rg_wr_data$D_IN =
	      MUX_master_xactor_rg_wr_data$write_1__VAL_1;
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2:
	  master_xactor_rg_wr_data$D_IN =
	      MUX_master_xactor_rg_wr_data$write_1__VAL_2;
      WILL_FIRE_RL_rl_io_write_req:
	  master_xactor_rg_wr_data$D_IN =
	      MUX_master_xactor_rg_wr_data$write_1__VAL_3;
      default: master_xactor_rg_wr_data$D_IN =
		   72'hAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign master_xactor_rg_wr_data$EN =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d696 ||
	     WILL_FIRE_RL_rl_io_write_req ;

  // register master_xactor_rg_wr_resp
  assign master_xactor_rg_wr_resp$D_IN = mem_master_bresp ;
  assign master_xactor_rg_wr_resp$EN =
	     mem_master_bvalid &&
	     !master_xactor_crg_wr_resp_full$port2__read ;

  // register rg_addr
  assign rg_addr$D_IN = req_addr ;
  assign rg_addr$EN = EN_req ;

  // register rg_amo_funct7
  assign rg_amo_funct7$D_IN = req_amo_funct7 ;
  assign rg_amo_funct7$EN = EN_req ;

  // register rg_cset_in_cache
  assign rg_cset_in_cache$D_IN =
	     WILL_FIRE_RL_rl_reset ?
	       MUX_rg_cset_in_cache$write_1__VAL_1 :
	       7'd0 ;
  assign rg_cset_in_cache$EN =
	     WILL_FIRE_RL_rl_reset || WILL_FIRE_RL_rl_start_reset ;

  // register rg_error_during_refill
  assign rg_error_during_refill$D_IN =
	     MUX_rg_error_during_refill$write_1__SEL_1 ;
  assign rg_error_during_refill$EN =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_rg_rd_data[65:64] != 2'd0 ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // register rg_exc_code
  always@(MUX_rg_exc_code$write_1__SEL_1 or
	  MUX_rg_exc_code$write_1__VAL_1 or
	  MUX_rg_exc_code$write_1__SEL_2 or
	  MUX_rg_exc_code$write_1__SEL_3 or
	  MUX_rg_error_during_refill$write_1__SEL_1 or
	  access_exc_code__h3356 or
	  MUX_rg_exc_code$write_1__SEL_5 or
	  x1_avValue_exc_code__h5390 or
	  MUX_rg_exc_code$write_1__SEL_6 or
	  MUX_rg_exc_code$write_1__VAL_6 or
	  MUX_rg_exc_code$write_1__SEL_7 or MUX_rg_exc_code$write_1__SEL_8)
  case (1'b1)
    MUX_rg_exc_code$write_1__SEL_1:
	rg_exc_code$D_IN = MUX_rg_exc_code$write_1__VAL_1;
    MUX_rg_exc_code$write_1__SEL_2: rg_exc_code$D_IN = 4'd7;
    MUX_rg_exc_code$write_1__SEL_3: rg_exc_code$D_IN = 4'd5;
    MUX_rg_error_during_refill$write_1__SEL_1:
	rg_exc_code$D_IN = access_exc_code__h3356;
    MUX_rg_exc_code$write_1__SEL_5:
	rg_exc_code$D_IN = x1_avValue_exc_code__h5390;
    MUX_rg_exc_code$write_1__SEL_6:
	rg_exc_code$D_IN = MUX_rg_exc_code$write_1__VAL_6;
    MUX_rg_exc_code$write_1__SEL_7:
	rg_exc_code$D_IN = MUX_rg_exc_code$write_1__VAL_6;
    MUX_rg_exc_code$write_1__SEL_8: rg_exc_code$D_IN = 4'd5;
    default: rg_exc_code$D_IN = 4'b1010 /* unspecified value */ ;
  endcase
  assign rg_exc_code$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d105 ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_rg_rd_data[65:64] != 2'd0 ||
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_rg_rd_data[65:64] != 2'd0 ||
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[65:64] != 2'd0 ||
	     WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	     !f_near_mem_io_rsps$D_OUT[64] ||
	     EN_req &&
	     NOT_req_f3_BITS_1_TO_0_308_EQ_0b0_309_310_AND__ETC___d1329 ||
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     NOT_IF_rg_pte_pa_25_BIT_2_26_THEN_master_xacto_ETC___d854 ||
	     WILL_FIRE_RL_rl_ptw_level_0 &&
	     (!_theResult____h22209[0] ||
	      !_theResult____h22209[1] && _theResult____h22209[2] ||
	      !_theResult____h22209[3] && !_theResult____h22209[1] ||
	      master_xactor_rg_rd_data[65:64] != 2'd0) ;

  // register rg_f3
  assign rg_f3$D_IN = req_f3 ;
  assign rg_f3$EN = EN_req ;

  // register rg_ld_val
  always@(MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  new_ld_val__h30768 or
	  MUX_rg_ld_val$write_1__SEL_2 or
	  MUX_rg_ld_val$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_io_read_rsp or
	  master_xactor_rg_rd_data or
	  WILL_FIRE_RL_rl_io_near_mem_read_rsp or
	  f_near_mem_io_rsps$D_OUT or WILL_FIRE_RL_rl_io_AMO_SC_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  rg_ld_val$D_IN = new_ld_val__h30768;
      MUX_rg_ld_val$write_1__SEL_2:
	  rg_ld_val$D_IN = MUX_rg_ld_val$write_1__VAL_2;
      WILL_FIRE_RL_rl_io_read_rsp:
	  rg_ld_val$D_IN = master_xactor_rg_rd_data[63:0];
      WILL_FIRE_RL_rl_io_near_mem_read_rsp:
	  rg_ld_val$D_IN = f_near_mem_io_rsps$D_OUT[63:0];
      WILL_FIRE_RL_rl_io_AMO_SC_req: rg_ld_val$D_IN = 64'd1;
      default: rg_ld_val$D_IN = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rg_ld_val$EN =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d560 ||
	     WILL_FIRE_RL_rl_io_read_rsp ||
	     WILL_FIRE_RL_rl_io_near_mem_read_rsp ||
	     WILL_FIRE_RL_rl_io_AMO_SC_req ;

  // register rg_lower_word32
  assign rg_lower_word32$D_IN = 32'h0 ;
  assign rg_lower_word32$EN = 1'b0 ;

  // register rg_lower_word32_full
  assign rg_lower_word32_full$D_IN = 1'd0 ;
  assign rg_lower_word32_full$EN =
	     WILL_FIRE_RL_rl_start_cache_refill ||
	     WILL_FIRE_RL_rl_start_reset ;

  // register rg_lrsc_pa
  assign rg_lrsc_pa$D_IN = x1_avValue_pa__h5389 ;
  assign rg_lrsc_pa$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d532 ;

  // register rg_lrsc_valid
  assign rg_lrsc_valid$D_IN =
	     MUX_rg_lrsc_valid$write_1__SEL_2 &&
	     rg_op_5_EQ_0_6_OR_rg_op_5_EQ_2_8_AND_rg_amo_fu_ETC___d387 ;
  assign rg_lrsc_valid$EN =
	     (WILL_FIRE_RL_rl_io_near_mem_read_req ||
	      WILL_FIRE_RL_rl_io_read_req) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d386 ||
	     WILL_FIRE_RL_rl_start_reset ;

  // register rg_mstatus_MXR
  assign rg_mstatus_MXR$D_IN = req_mstatus_MXR ;
  assign rg_mstatus_MXR$EN = EN_req ;

  // register rg_op
  assign rg_op$D_IN = req_op ;
  assign rg_op$EN = EN_req ;

  // register rg_pa
  assign rg_pa$D_IN =
	     EN_req ? MUX_rg_pa$write_1__VAL_1 : x1_avValue_pa__h5389 ;
  assign rg_pa$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d362 ||
	     EN_req ;

  // register rg_priv
  assign rg_priv$D_IN = req_priv ;
  assign rg_priv$EN = EN_req ;

  // register rg_pte_pa
  assign rg_pte_pa$D_IN =
	     MUX_master_xactor_crg_rd_addr_full$port2__write_1__SEL_1 ?
	       lev_0_pte_pa__h22445 :
	       lev_1_pte_pa__h21892 ;
  assign rg_pte_pa$EN =
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     _theResult____h22209[0] &&
	     !_theResult____h22209[2] &&
	     !_theResult____h22209[3] &&
	     !_theResult____h22209[1] ||
	     WILL_FIRE_RL_rl_start_tlb_refill ;

  // register rg_req_byte_in_cline
  assign rg_req_byte_in_cline$D_IN =
	     WILL_FIRE_RL_rl_cache_refill_req_loop ?
	       MUX_rg_req_byte_in_cline$write_1__VAL_1 :
	       64'd8 ;
  assign rg_req_byte_in_cline$EN =
	     WILL_FIRE_RL_rl_cache_refill_req_loop ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // register rg_requesting_cline
  always@(WILL_FIRE_RL_rl_cache_refill_req_loop or
	  rg_req_byte_in_cline or
	  WILL_FIRE_RL_rl_start_reset or WILL_FIRE_RL_rl_start_cache_refill)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_cache_refill_req_loop:
	  rg_requesting_cline$D_IN = rg_req_byte_in_cline != 64'd24;
      WILL_FIRE_RL_rl_start_reset: rg_requesting_cline$D_IN = 1'd0;
      WILL_FIRE_RL_rl_start_cache_refill: rg_requesting_cline$D_IN = 1'd1;
      default: rg_requesting_cline$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign rg_requesting_cline$EN =
	     WILL_FIRE_RL_rl_cache_refill_req_loop ||
	     WILL_FIRE_RL_rl_start_reset ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // register rg_satp
  assign rg_satp$D_IN = req_satp ;
  assign rg_satp$EN = EN_req ;

  // register rg_sstatus_SUM
  assign rg_sstatus_SUM$D_IN = req_sstatus_SUM ;
  assign rg_sstatus_SUM$EN = EN_req ;

  // register rg_st_amo_val
  assign rg_st_amo_val$D_IN = EN_req ? req_st_value : new_st_val__h6540 ;
  assign rg_st_amo_val$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d799 ||
	     EN_req ;

  // register rg_state
  always@(EN_tlb_flush or
	  WILL_FIRE_RL_rl_start_cache_refill or
	  EN_req or
	  MUX_rg_state$write_1__VAL_3 or
	  WILL_FIRE_RL_rl_start_tlb_refill or
	  WILL_FIRE_RL_rl_io_AMO_read_rsp or
	  MUX_rg_state$write_1__VAL_5 or
	  WILL_FIRE_RL_rl_io_AMO_op_req or
	  WILL_FIRE_RL_rl_io_write_req or
	  WILL_FIRE_RL_rl_io_read_rsp or
	  WILL_FIRE_RL_rl_io_read_req or
	  MUX_rg_state$write_1__SEL_10 or
	  MUX_rg_state$write_1__VAL_10 or
	  MUX_rg_state$write_1__SEL_11 or
	  MUX_rg_state$write_1__VAL_11 or
	  WILL_FIRE_RL_rl_ptw_level_0 or
	  MUX_rg_state$write_1__VAL_12 or
	  WILL_FIRE_RL_rl_ptw_level_1 or
	  MUX_rg_state$write_1__VAL_13 or
	  WILL_FIRE_RL_rl_start_reset or
	  WILL_FIRE_RL_rl_io_AMO_SC_req or
	  WILL_FIRE_RL_rl_io_near_mem_write_req or
	  WILL_FIRE_RL_rl_io_near_mem_read_rsp or
	  MUX_rg_state$write_1__VAL_17 or
	  WILL_FIRE_RL_rl_io_near_mem_read_req or
	  WILL_FIRE_RL_rl_rereq or MUX_rg_state$write_1__SEL_20)
  case (1'b1)
    EN_tlb_flush: rg_state$D_IN = 4'd2;
    WILL_FIRE_RL_rl_start_cache_refill: rg_state$D_IN = 4'd9;
    EN_req: rg_state$D_IN = MUX_rg_state$write_1__VAL_3;
    WILL_FIRE_RL_rl_start_tlb_refill: rg_state$D_IN = 4'd6;
    WILL_FIRE_RL_rl_io_AMO_read_rsp:
	rg_state$D_IN = MUX_rg_state$write_1__VAL_5;
    WILL_FIRE_RL_rl_io_AMO_op_req: rg_state$D_IN = 4'd15;
    WILL_FIRE_RL_rl_io_write_req: rg_state$D_IN = 4'd11;
    WILL_FIRE_RL_rl_io_read_rsp: rg_state$D_IN = MUX_rg_state$write_1__VAL_5;
    WILL_FIRE_RL_rl_io_read_req: rg_state$D_IN = 4'd13;
    MUX_rg_state$write_1__SEL_10:
	rg_state$D_IN = MUX_rg_state$write_1__VAL_10;
    MUX_rg_state$write_1__SEL_11:
	rg_state$D_IN = MUX_rg_state$write_1__VAL_11;
    WILL_FIRE_RL_rl_ptw_level_0: rg_state$D_IN = MUX_rg_state$write_1__VAL_12;
    WILL_FIRE_RL_rl_ptw_level_1: rg_state$D_IN = MUX_rg_state$write_1__VAL_13;
    WILL_FIRE_RL_rl_start_reset: rg_state$D_IN = 4'd1;
    WILL_FIRE_RL_rl_io_AMO_SC_req || WILL_FIRE_RL_rl_io_near_mem_write_req:
	rg_state$D_IN = 4'd11;
    WILL_FIRE_RL_rl_io_near_mem_read_rsp:
	rg_state$D_IN = MUX_rg_state$write_1__VAL_17;
    WILL_FIRE_RL_rl_io_near_mem_read_req: rg_state$D_IN = 4'd13;
    WILL_FIRE_RL_rl_rereq: rg_state$D_IN = 4'd3;
    MUX_rg_state$write_1__SEL_20: rg_state$D_IN = 4'd2;
    default: rg_state$D_IN = 4'b1010 /* unspecified value */ ;
  endcase
  assign rg_state$EN =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[1:0] == 2'd3 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d352 ||
	     WILL_FIRE_RL_rl_io_AMO_read_rsp ||
	     WILL_FIRE_RL_rl_io_read_rsp ||
	     WILL_FIRE_RL_rl_ptw_level_1 ||
	     WILL_FIRE_RL_rl_ptw_level_0 ||
	     WILL_FIRE_RL_rl_io_near_mem_read_rsp ||
	     EN_req ||
	     WILL_FIRE_RL_rl_start_reset ||
	     EN_tlb_flush ||
	     WILL_FIRE_RL_rl_rereq ||
	     WILL_FIRE_RL_rl_start_tlb_refill ||
	     WILL_FIRE_RL_rl_start_cache_refill ||
	     WILL_FIRE_RL_rl_io_AMO_SC_req ||
	     WILL_FIRE_RL_rl_io_near_mem_write_req ||
	     WILL_FIRE_RL_rl_io_write_req ||
	     WILL_FIRE_RL_rl_io_near_mem_read_req ||
	     WILL_FIRE_RL_rl_io_read_req ||
	     WILL_FIRE_RL_rl_io_AMO_op_req ;

  // register rg_word64_set_in_cache
  assign rg_word64_set_in_cache$D_IN =
	     MUX_ram_word64_set$b_put_2__SEL_2 ?
	       MUX_ram_word64_set$b_put_2__VAL_2 :
	       MUX_ram_word64_set$b_put_2__VAL_4 ;
  assign rg_word64_set_in_cache$EN =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[1:0] != 2'd3 ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // submodule f_near_mem_io_reqs
  assign f_near_mem_io_reqs$D_IN =
	     WILL_FIRE_RL_rl_io_near_mem_read_req ?
	       MUX_f_near_mem_io_reqs$enq_1__VAL_1 :
	       MUX_f_near_mem_io_reqs$enq_1__VAL_2 ;
  assign f_near_mem_io_reqs$ENQ =
	     WILL_FIRE_RL_rl_io_near_mem_read_req ||
	     WILL_FIRE_RL_rl_io_near_mem_write_req ;
  assign f_near_mem_io_reqs$DEQ = EN_near_mem_io_client_request_get ;
  assign f_near_mem_io_reqs$CLR = 1'b0 ;

  // submodule f_near_mem_io_rsps
  assign f_near_mem_io_rsps$D_IN = near_mem_io_client_response_put ;
  assign f_near_mem_io_rsps$ENQ = EN_near_mem_io_client_response_put ;
  assign f_near_mem_io_rsps$DEQ =
	     WILL_FIRE_RL_rl_io_near_mem_write_rsp ||
	     WILL_FIRE_RL_rl_io_near_mem_read_rsp ;
  assign f_near_mem_io_rsps$CLR = 1'b0 ;

  // submodule f_reset_reqs
  assign f_reset_reqs$D_IN = !EN_server_reset_request_put ;
  assign f_reset_reqs$ENQ =
	     EN_server_reset_request_put || EN_server_flush_request_put ;
  assign f_reset_reqs$DEQ =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 ;
  assign f_reset_reqs$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$D_IN = f_reset_reqs$D_OUT ;
  assign f_reset_rsps$ENQ =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 ;
  assign f_reset_rsps$DEQ =
	     EN_server_flush_response_get || EN_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule ram_state_and_ctag_cset
  assign ram_state_and_ctag_cset$ADDRA =
	     WILL_FIRE_RL_rl_start_cache_refill ?
	       rg_addr[11:5] :
	       rg_cset_in_cache ;
  assign ram_state_and_ctag_cset$ADDRB =
	     MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       req_addr[11:5] :
	       rg_addr[11:5] ;
  assign ram_state_and_ctag_cset$DIA =
	     WILL_FIRE_RL_rl_start_cache_refill ?
	       MUX_ram_state_and_ctag_cset$a_put_3__VAL_1 :
	       23'd2796202 ;
  assign ram_state_and_ctag_cset$DIB =
	     MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       23'b01010101010101010101010 /* unspecified value */  :
	       23'b01010101010101010101010 /* unspecified value */  ;
  assign ram_state_and_ctag_cset$WEA = 1'd1 ;
  assign ram_state_and_ctag_cset$WEB = 1'd0 ;
  assign ram_state_and_ctag_cset$ENA =
	     WILL_FIRE_RL_rl_start_cache_refill || WILL_FIRE_RL_rl_reset ;
  assign ram_state_and_ctag_cset$ENB =
	     EN_req &&
	     req_f3_BITS_1_TO_0_308_EQ_0b0_309_OR_req_f3_BI_ETC___d1338 ||
	     WILL_FIRE_RL_rl_rereq ;

  // submodule ram_word64_set
  assign ram_word64_set$ADDRA =
	     MUX_ram_word64_set$a_put_1__SEL_1 ?
	       rg_word64_set_in_cache :
	       rg_addr[11:3] ;
  always@(MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  req_addr or
	  MUX_ram_word64_set$b_put_2__SEL_2 or
	  MUX_ram_word64_set$b_put_2__VAL_2 or
	  WILL_FIRE_RL_rl_rereq or
	  rg_addr or
	  WILL_FIRE_RL_rl_start_cache_refill or
	  MUX_ram_word64_set$b_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  ram_word64_set$ADDRB = req_addr[11:3];
      MUX_ram_word64_set$b_put_2__SEL_2:
	  ram_word64_set$ADDRB = MUX_ram_word64_set$b_put_2__VAL_2;
      WILL_FIRE_RL_rl_rereq: ram_word64_set$ADDRB = rg_addr[11:3];
      WILL_FIRE_RL_rl_start_cache_refill:
	  ram_word64_set$ADDRB = MUX_ram_word64_set$b_put_2__VAL_4;
      default: ram_word64_set$ADDRB = 9'b010101010 /* unspecified value */ ;
    endcase
  end
  assign ram_word64_set$DIA =
	     MUX_ram_word64_set$a_put_1__SEL_1 ?
	       master_xactor_rg_rd_data[63:0] :
	       MUX_ram_word64_set$a_put_3__VAL_2 ;
  always@(MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  MUX_ram_word64_set$b_put_2__SEL_2 or
	  WILL_FIRE_RL_rl_rereq or WILL_FIRE_RL_rl_start_cache_refill)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      MUX_ram_word64_set$b_put_2__SEL_2:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_rl_rereq:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_rl_start_cache_refill:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      default: ram_word64_set$DIB =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ram_word64_set$WEA = 1'd1 ;
  assign ram_word64_set$WEB = 1'd0 ;
  assign ram_word64_set$ENA =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d573 ;
  assign ram_word64_set$ENB =
	     EN_req &&
	     req_f3_BITS_1_TO_0_308_EQ_0b0_309_OR_req_f3_BI_ETC___d1338 ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[1:0] != 2'd3 ||
	     WILL_FIRE_RL_rl_rereq ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // submodule soc_map
  assign soc_map$m_is_IO_addr_addr = { 30'd0, x1_avValue_pa__h5389 } ;
  assign soc_map$m_is_mem_addr_addr = 64'h0 ;
  assign soc_map$m_is_near_mem_IO_addr_addr = { 30'd0, rg_pa } ;

  // submodule tlb
  assign tlb$insert_asid = rg_satp[30:22] ;
  assign tlb$insert_level = MUX_tlb$insert_1__SEL_1 ? 2'd1 : 2'd0 ;
  assign tlb$insert_pte =
	     MUX_tlb$insert_1__SEL_1 ?
	       _theResult____h22209 :
	       _theResult____h22209 ;
  assign tlb$insert_pte_pa = rg_pte_pa ;
  assign tlb$insert_vpn = rg_addr[31:12] ;
  assign tlb$lookup_asid = rg_satp[30:22] ;
  assign tlb$lookup_vpn = rg_addr[31:12] ;
  assign tlb$EN_flush = WILL_FIRE_RL_rl_start_reset || EN_tlb_flush ;
  assign tlb$EN_insert =
	     WILL_FIRE_RL_rl_ptw_level_1 &&
	     master_xactor_rg_rd_data_21_BITS_65_TO_64_22_E_ETC___d886 ||
	     WILL_FIRE_RL_rl_ptw_level_0 &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     _theResult____h22209[0] &&
	     (_theResult____h22209[1] || !_theResult____h22209[2]) &&
	     (_theResult____h22209[3] || _theResult____h22209[1]) ;

  // remaining internal signals
  assign IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d248 =
	     (x1_avValue_pa__h5389[2:0] == 3'h0) ?
	       CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_32_ETC__q35 :
	       NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_3_ETC___d247 ;
  assign IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_1_E_ETC___d511 =
	     (rg_addr[2:0] == 3'h0) ? 64'd1 : 64'd0 ;
  assign IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_NOT_ETC___d168 =
	     (rg_addr[2:0] == 3'h0) ?
	       NOT_ram_state_and_ctag_cset_b_read__24_BIT_22__ETC___d150 :
	       rg_addr[2:0] != 3'h4 ||
	       NOT_ram_state_and_ctag_cset_b_read__24_BIT_22__ETC___d150 ;
  assign IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_mas_ETC___d1195 =
	     (rg_addr[2:0] == 3'h0) ? master_xactor_rg_rd_data[63:0] : 64'd0 ;
  assign IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_ram_ETC___d497 =
	     (rg_addr[2:0] == 3'h0) ? word64__h6415 : 64'd0 ;
  assign IF_rg_f3_32_EQ_0b10_63_THEN_SEXT_rg_st_amo_val_ETC___d628 =
	     (rg_f3 == 3'b010) ?
	       { {32{rg_st_amo_val_BITS_31_TO_0__q38[31]}},
		 rg_st_amo_val_BITS_31_TO_0__q38 } :
	       rg_st_amo_val ;
  assign IF_rg_op_5_EQ_0_6_OR_rg_op_5_EQ_2_8_AND_rg_amo_ETC___d260 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
	       !ram_state_and_ctag_cset$DOB[22] ||
	       !ram_state_and_ctag_cset_b_read__24_BITS_21_TO__ETC___d129 ||
	       IF_rg_f3_32_EQ_0b0_33_OR_rg_f3_32_EQ_0b100_34__ETC___d176 :
	       IF_rg_op_5_EQ_1_78_OR_rg_op_5_EQ_2_8_AND_rg_am_ETC___d259 ;
  assign IF_rg_op_5_EQ_0_6_OR_rg_op_5_EQ_2_8_AND_rg_amo_ETC___d355 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
	       4'd8 :
	       IF_rg_op_5_EQ_1_78_OR_rg_op_5_EQ_2_8_AND_rg_am_ETC___d354 ;
  assign IF_rg_op_5_EQ_1_78_OR_rg_op_5_EQ_2_8_AND_rg_am_ETC___d259 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       rg_op_5_EQ_2_8_AND_rg_amo_funct7_0_BITS_6_TO_2_ETC___d203 :
	       !ram_state_and_ctag_cset$DOB[22] ||
	       !ram_state_and_ctag_cset_b_read__24_BITS_21_TO__ETC___d129 ||
	       !master_xactor_crg_wr_addr_full$port2__read &&
	       !master_xactor_crg_wr_data_full$port2__read &&
	       IF_rg_f3_32_EQ_0b0_33_THEN_IF_IF_rg_priv_9_ULE_ETC___d252 &&
	       IF_rg_f3_32_EQ_0b0_33_OR_rg_f3_32_EQ_0b100_34__ETC___d176 &&
	       IF_rg_f3_32_BITS_1_TO_0_93_EQ_0b0_94_OR_rg_f3__ETC___d200 ;
  assign IF_rg_op_5_EQ_1_78_OR_rg_op_5_EQ_2_8_AND_rg_am_ETC___d354 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       4'd11 :
	       ((!ram_state_and_ctag_cset$DOB[22] ||
		 !ram_state_and_ctag_cset_b_read__24_BITS_21_TO__ETC___d129) ?
		  4'd8 :
		  4'd11) ;
  assign IF_rg_op_5_EQ_1_78_OR_rg_op_5_EQ_2_8_AND_rg_am_ETC___d708 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       mem_req_wr_data_wdata__h19999 :
	       mem_req_wr_data_wdata__h20757 ;
  assign IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3__ETC___d262 =
	     rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d105 ?
	       tlb$RDY_lookup :
	       soc_map$m_is_IO_addr ||
	       IF_rg_op_5_EQ_0_6_OR_rg_op_5_EQ_2_8_AND_rg_amo_ETC___d260 ;
  assign IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3__ETC___d357 =
	     rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d105 ?
	       4'd4 :
	       (soc_map$m_is_IO_addr ?
		  4'd12 :
		  IF_rg_op_5_EQ_0_6_OR_rg_op_5_EQ_2_8_AND_rg_amo_ETC___d355) ;
  assign IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3__ETC___d369 =
	     x1_avValue_pa__h5389 == rg_lrsc_pa ;
  assign NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_3_ETC___d239 =
	     x1_avValue_pa__h5389[2:0] != 3'h7 ||
	     CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_32_ETC__q35 ;
  assign NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_3_ETC___d244 =
	     x1_avValue_pa__h5389[2:0] != 3'h6 ||
	     CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_32_ETC__q35 ;
  assign NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_3_ETC___d247 =
	     x1_avValue_pa__h5389[2:0] != 3'h4 ||
	     CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_32_ETC__q35 ;
  assign NOT_IF_rg_pte_pa_25_BIT_2_26_THEN_master_xacto_ETC___d854 =
	     !_theResult____h22209[0] ||
	     !_theResult____h22209[1] && _theResult____h22209[2] ||
	     (_theResult____h22209[3] || _theResult____h22209[1]) &&
	     _theResult____h22209[19:10] != 10'd0 ||
	     master_xactor_rg_rd_data[65:64] != 2'd0 ;
  assign NOT_cfg_verbosity_read__0_ULE_2_48___d949 = cfg_verbosity > 4'd2 ;
  assign NOT_dmem_not_imem_0_AND_rg_op_5_EQ_0_6_OR_rg_o_ETC___d288 =
	     !dmem_not_imem &&
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     tlb$lookup[39] ;
  assign NOT_dmem_not_imem_0_OR_NOT_rg_op_5_EQ_0_6_7_AN_ETC___d87 =
	     !dmem_not_imem ||
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) ||
	     !tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_addr_9_ETC___d85 ;
  assign NOT_master_xactor_rg_rd_data_21_BITS_65_TO_64__ETC___d847 =
	     master_xactor_rg_rd_data[65:64] != 2'd0 ||
	     !_theResult____h22209[0] ||
	     !_theResult____h22209[1] && _theResult____h22209[2] ||
	     ((!_theResult____h22209[3] && !_theResult____h22209[1]) ?
		!master_xactor_crg_rd_addr_full$port2__read :
		_theResult____h22209[19:10] != 10'd0 || tlb$RDY_insert) ;
  assign NOT_ram_state_and_ctag_cset_b_read__24_BIT_22__ETC___d150 =
	     !ram_state_and_ctag_cset$DOB[22] || !rg_priv_9_ULE_0b1___d40 ||
	     !rg_satp[31] ||
	     tlb$RDY_lookup ;
  assign NOT_ram_state_and_ctag_cset_b_read__24_BIT_22__ETC___d371 =
	     (!ram_state_and_ctag_cset$DOB[22] ||
	      !ram_state_and_ctag_cset_b_read__24_BITS_21_TO__ETC___d129) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3__ETC___d369 ;
  assign NOT_req_f3_BITS_1_TO_0_308_EQ_0b0_309_310_AND__ETC___d1329 =
	     req_f3[1:0] != 2'b0 && (req_f3[1:0] != 2'b01 || req_addr[0]) &&
	     (req_f3[1:0] != 2'b10 || req_addr[1:0] != 2'b0) &&
	     (req_f3[1:0] != 2'b11 || req_addr[2:0] != 3'b0) ;
  assign NOT_rg_f3_32_EQ_0b11_69_70_OR_rg_amo_funct7_0__ETC___d249 =
	     rg_f3 != 3'b011 ||
	     CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_32_ETC__q35 ;
  assign NOT_rg_op_5_EQ_0_6_7_AND_NOT_rg_op_5_EQ_2_8_9__ETC___d348 =
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_84_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d185) ;
  assign NOT_rg_op_5_EQ_1_78_77_AND_NOT_rg_op_5_EQ_2_8__ETC___d380 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__24_BITS_21_TO__ETC___d129 &&
	     IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3__ETC___d369 ;
  assign NOT_rg_op_5_EQ_1_78_77_AND_NOT_rg_op_5_EQ_2_8__ETC___d568 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__24_BITS_21_TO__ETC___d129 ;
  assign NOT_rg_op_5_EQ_1_78_77_AND_NOT_rg_op_5_EQ_2_8__ETC___d777 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     (!ram_state_and_ctag_cset$DOB[22] ||
	      !ram_state_and_ctag_cset_b_read__24_BITS_21_TO__ETC___d129) &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_op_5_EQ_1_78_77_AND_NOT_rg_op_5_EQ_2_8__ETC___d783 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__24_BITS_21_TO__ETC___d129 &&
	     ctr_wr_rsps_pending_crg == 4'd15 ;
  assign NOT_rg_op_5_EQ_1_78_77_AND_NOT_rg_op_5_EQ_2_8__ETC___d791 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__24_BITS_21_TO__ETC___d129 &&
	     IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3__ETC___d369 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_op_5_EQ_1_78_77_AND_NOT_rg_op_5_EQ_2_8__ETC___d800 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__24_BITS_21_TO__ETC___d129 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_op_5_EQ_2_8_9_OR_NOT_rg_amo_funct7_0_BI_ETC___d566 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_84_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d185) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__24_BITS_21_TO__ETC___d129 ;
  assign NOT_rg_op_5_EQ_2_8_9_OR_NOT_rg_amo_funct7_0_BI_ETC___d742 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_84_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d185) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__24_BITS_21_TO__ETC___d129 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_op_5_EQ_2_8_9_OR_NOT_rg_amo_funct7_0_BI_ETC___d748 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_84_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d185) &&
	     (!ram_state_and_ctag_cset$DOB[22] ||
	      !ram_state_and_ctag_cset_b_read__24_BITS_21_TO__ETC___d129) &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_op_5_EQ_2_8_9_OR_NOT_rg_amo_funct7_0_BI_ETC___d755 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_84_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d185) &&
	     ctr_wr_rsps_pending_crg == 4'd15 ;
  assign NOT_rg_op_5_EQ_2_8_9_OR_NOT_rg_amo_funct7_0_BI_ETC___d763 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_84_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d185) &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_priv_9_EQ_0b0_5_81_OR_tlb_lookup_rg_sat_ETC___d295 =
	     (rg_priv != 2'b0 || tlb$lookup[40]) &&
	     (rg_priv != 2'b01 || !tlb$lookup[40] || rg_sstatus_SUM) &&
	     (NOT_dmem_not_imem_0_AND_rg_op_5_EQ_0_6_OR_rg_o_ETC___d288 ||
	      dmem_not_imem_AND_rg_op_5_EQ_0_6_OR_rg_op_5_EQ_ETC___d290 ||
	      dmem_not_imem && rg_op != 2'd0 &&
	      (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	      tlb$lookup[38]) ;
  assign NOT_rg_priv_9_EQ_0b0_5_81_OR_tlb_lookup_rg_sat_ETC___d327 =
	     (rg_priv != 2'b0 || tlb$lookup[40]) &&
	     (rg_priv != 2'b01 || !tlb$lookup[40] || rg_sstatus_SUM) &&
	     dmem_not_imem &&
	     tlb$lookup[38] ;
  assign NOT_rg_priv_9_EQ_0b0_5_81_OR_tlb_lookup_rg_sat_ETC___d517 =
	     (rg_priv != 2'b0 || tlb$lookup[40]) &&
	     (rg_priv != 2'b01 || !tlb$lookup[40] || rg_sstatus_SUM) &&
	     (!dmem_not_imem && tlb$lookup[39] ||
	      dmem_not_imem &&
	      tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_addr_9_ETC___d85) ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d264 =
	     (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$RDY_lookup) &&
	     (rg_priv_9_ULE_0b1___d40 && rg_satp[31] && !tlb$lookup[68] ||
	      IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3__ETC___d262) ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d300 =
	     !rg_priv_9_ULE_0b1___d40 || !rg_satp[31] ||
	     tlb$lookup[68] &&
	     NOT_rg_priv_9_EQ_0b0_5_81_OR_tlb_lookup_rg_sat_ETC___d295 &&
	     tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_addr_9_ETC___d297 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d324 =
	     !rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || !tlb$lookup[68] ||
	     rg_priv_9_EQ_0b0_5_AND_NOT_tlb_lookup_rg_satp__ETC___d312 ||
	     !tlb$lookup[42] ||
	     !tlb$lookup[43] ||
	     pte___2__h5886[7] ||
	     rg_op == 2'd0 ||
	     rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d361 =
	     !rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || !tlb$lookup[68] ||
	     NOT_rg_priv_9_EQ_0b0_5_81_OR_tlb_lookup_rg_sat_ETC___d295 &&
	     tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_addr_9_ETC___d297 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d362 =
	     (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d361 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d365 =
	     (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d361 &&
	     soc_map$m_is_IO_addr &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d386 =
	     (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d361 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op_5_EQ_0_6_OR_rg_op_5_EQ_2_8_AND_rg_amo_fu_ETC___d383 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d393 =
	     (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d361 &&
	     !soc_map$m_is_IO_addr &&
	     (rg_op_5_EQ_0_6_OR_rg_op_5_EQ_2_8_AND_rg_amo_fu_ETC___d387 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 &&
	      lrsc_result__h14271) ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d520 =
	     !rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || !tlb$lookup[68] ||
	     NOT_rg_priv_9_EQ_0b0_5_81_OR_tlb_lookup_rg_sat_ETC___d517 &&
	     tlb$lookup[42] ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d525 =
	     (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d520 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op_5_EQ_0_6_OR_rg_op_5_EQ_2_8_AND_rg_amo_fu_ETC___d522 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d532 =
	     (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d520 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__24_BITS_21_TO__ETC___d129 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d538 =
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d520 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__24_BITS_21_TO__ETC___d129 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d544 =
	     (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d520 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op_5_EQ_0_6_OR_rg_op_5_EQ_2_8_AND_rg_amo_fu_ETC___d541 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d551 =
	     (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d520 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7_0_BITS_6_TO_2_1_EQ_0b10_2_AND_NO_ETC___d547 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d554 =
	     !rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || !tlb$lookup[68] ||
	     NOT_rg_priv_9_EQ_0b0_5_81_OR_tlb_lookup_rg_sat_ETC___d327 &&
	     tlb$lookup[42] &&
	     tlb$lookup[43] ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d560 =
	     (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d554 &&
	     NOT_soc_map_m_is_IO_addr_0_CONCAT_IF_rg_priv_9_ETC___d558 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d573 =
	     (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d554 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     rg_op_5_EQ_1_78_OR_rg_op_5_EQ_2_8_AND_rg_amo_f_ETC___d569 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d696 =
	     (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d554 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     (rg_op_5_EQ_1_78_OR_rg_op_5_EQ_2_8_AND_rg_amo_f_ETC___d691 ||
	      NOT_rg_op_5_EQ_1_78_77_AND_NOT_rg_op_5_EQ_2_8__ETC___d568) ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d723 =
	     (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d554 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op == 2'd1 &&
	     IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3__ETC___d369 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d729 =
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d554 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 &&
	     rg_lrsc_valid &&
	     !rg_lrsc_pa_84_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d185 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d736 =
	     (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d554 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 &&
	     !rg_lrsc_valid &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d741 =
	     (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d554 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d747 =
	     (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d554 &&
	     !soc_map$m_is_IO_addr &&
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_5_EQ_2_8_9_OR_NOT_rg_amo_funct7_0_BI_ETC___d742 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d753 =
	     (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d554 &&
	     !soc_map$m_is_IO_addr &&
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_5_EQ_2_8_9_OR_NOT_rg_amo_funct7_0_BI_ETC___d748 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d760 =
	     (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d554 &&
	     !soc_map$m_is_IO_addr &&
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_5_EQ_2_8_9_OR_NOT_rg_amo_funct7_0_BI_ETC___d755 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d768 =
	     (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d554 &&
	     !soc_map$m_is_IO_addr &&
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_5_EQ_2_8_9_OR_NOT_rg_amo_funct7_0_BI_ETC___d763 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d774 =
	     (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d554 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h14271 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d781 =
	     (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d554 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_5_EQ_1_78_77_AND_NOT_rg_op_5_EQ_2_8__ETC___d777 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d787 =
	     (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d554 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_5_EQ_1_78_77_AND_NOT_rg_op_5_EQ_2_8__ETC___d783 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d795 =
	     (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d554 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_5_EQ_1_78_77_AND_NOT_rg_op_5_EQ_2_8__ETC___d791 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d799 =
	     (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d554 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_5_EQ_1_78_77_AND_NOT_rg_op_5_EQ_2_8__ETC___d568 ;
  assign NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d804 =
	     (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$lookup[68]) &&
	     NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d554 &&
	     !soc_map$m_is_IO_addr &&
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_5_EQ_1_78_77_AND_NOT_rg_op_5_EQ_2_8__ETC___d800 ;
  assign NOT_soc_map_m_is_IO_addr_0_CONCAT_IF_rg_priv_9_ETC___d558 =
	     !soc_map$m_is_IO_addr && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     (rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 ||
	      rg_op != 2'd1 && ram_state_and_ctag_cset$DOB[22] &&
	      ram_state_and_ctag_cset_b_read__24_BITS_21_TO__ETC___d129) ;
  assign NOT_tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_ad_ETC___d102 =
	     !tlb$lookup[42] ||
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     !tlb$lookup[43] ;
  assign _theResult____h22209 =
	     rg_pte_pa[2] ?
	       master_xactor_rg_rd_data[63:32] :
	       master_xactor_rg_rd_data[31:0] ;
  assign _theResult___fst__h20117 = rg_st_amo_val << shift_bits__h19897 ;
  assign _theResult___fst__h20875 = new_st_val__h6540 << shift_bits__h19897 ;
  assign _theResult___fst__h29764 = rg_st_amo_val << shift_bits__h30844 ;
  assign _theResult___fst__h31113 = word64__h30841 << shift_bits__h30844 ;
  assign _theResult___fst__h5477 =
	     tlb$lookup[68] ? _theResult___fst__h5549 : pa__h5377 ;
  assign _theResult___fst__h5549 =
	     (rg_priv_9_EQ_0b0_5_AND_NOT_tlb_lookup_rg_satp__ETC___d96 ||
	      NOT_tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_ad_ETC___d102) ?
	       pa__h5377 :
	       _theResult___fst__h5888 ;
  assign _theResult___snd_fst__h5479 =
	     tlb$lookup[68] ?
	       _theResult___snd_fst__h5551 :
	       tlb$lookup[67:36] ;
  assign _theResult___snd_fst__h5551 =
	     (rg_priv_9_EQ_0b0_5_AND_NOT_tlb_lookup_rg_satp__ETC___d96 ||
	      NOT_tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_ad_ETC___d102) ?
	       tlb$lookup[67:36] :
	       _theResult___snd_fst__h6026 ;
  assign _theResult___snd_fst__h6026 =
	     (!pte___2__h5886[7] && rg_op != 2'd0 &&
	      (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010)) ?
	       pte___1__h6103 :
	       pte___2__h5886 ;
  assign access_exc_code__h3356 =
	     dmem_not_imem ?
	       ((rg_op == 2'd0 ||
		 rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
		  4'd5 :
		  4'd7) :
	       4'd1 ;
  assign b__h21883 =
	     ctr_wr_rsps_pending_crg$EN_port0__write ?
	       ctr_wr_rsps_pending_crg$port0__write_1 :
	       ctr_wr_rsps_pending_crg ;
  assign cfg_verbosity_read__0_ULE_1___d11 = cfg_verbosity <= 4'd1 ;
  assign cline_addr__h24625 = { rg_pa[33:5], 5'd0 } ;
  assign cline_fabric_addr__h24626 =
	     { 30'd0, cline_addr__h24625 } | rg_req_byte_in_cline ;
  assign dmem_not_imem_AND_rg_op_5_EQ_0_6_OR_rg_op_5_EQ_ETC___d290 =
	     dmem_not_imem &&
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_addr_9_ETC___d85 ;
  assign dmem_not_imem_OR_NOT_rg_op_5_EQ_0_6_7_AND_NOT__ETC___d79 =
	     dmem_not_imem ||
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) ||
	     !tlb$lookup[39] ;
  assign exc_code___1__h5788 = x1_avValue_exc_code__h5390 ;
  assign f_near_mem_io_rspsD_OUT_BITS_15_TO_0__q17 =
	     f_near_mem_io_rsps$D_OUT[15:0] ;
  assign f_near_mem_io_rspsD_OUT_BITS_31_TO_0__q19 =
	     f_near_mem_io_rsps$D_OUT[31:0] ;
  assign f_near_mem_io_rspsD_OUT_BITS_7_TO_0__q15 =
	     f_near_mem_io_rsps$D_OUT[7:0] ;
  assign fabric_addr__h30383 = { 30'd0, rg_pa } ;
  assign io_req_wr_addr_awaddr__h30836 = { 30'd0, x__h30861 } ;
  assign lev_0_PTN_pa__h22443 = { _theResult____h22209[31:10], 12'b0 } ;
  assign lev_0_pte_pa__h22445 = lev_0_PTN_pa__h22443 + vpn_0_pa__h22444 ;
  assign lev_0_pte_pa_w64__h22446 = { lev_0_pte_pa__h22445[33:3], 3'b0 } ;
  assign lev_0_pte_pa_w64_fa__h22447 = { 30'd0, lev_0_pte_pa_w64__h22446 } ;
  assign lev_1_pte_pa__h21892 = satp_pa__h2614 + vpn_1_pa__h21891 ;
  assign lev_1_pte_pa_w64__h21893 = { lev_1_pte_pa__h21892[33:3], 3'b0 } ;
  assign lev_1_pte_pa_w64_fa__h21894 = { 30'd0, lev_1_pte_pa_w64__h21893 } ;
  assign lrsc_result__h14271 =
	     !rg_lrsc_valid ||
	     !rg_lrsc_pa_84_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d185 ;
  assign master_xactor_crg_rd_data_full_port1__read__20_ETC___d1130 =
	     master_xactor_crg_rd_data_full$port1__read &&
	     (master_xactor_rg_rd_data[65:64] != 2'd0 ||
	      !master_xactor_crg_wr_addr_full$port2__read &&
	      !master_xactor_crg_wr_data_full$port2__read) ;
  assign master_xactor_rg_rd_data_21_BITS_65_TO_64_22_E_ETC___d863 =
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     (!_theResult____h22209[0] ||
	      !_theResult____h22209[1] && _theResult____h22209[2]) &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign master_xactor_rg_rd_data_21_BITS_65_TO_64_22_E_ETC___d881 =
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     _theResult____h22209[0] &&
	     !_theResult____h22209[2] &&
	     !_theResult____h22209[3] &&
	     !_theResult____h22209[1] &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign master_xactor_rg_rd_data_21_BITS_65_TO_64_22_E_ETC___d886 =
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     _theResult____h22209[0] &&
	     (_theResult____h22209[1] || !_theResult____h22209[2]) &&
	     (_theResult____h22209[3] || _theResult____h22209[1]) &&
	     _theResult____h22209[19:10] == 10'd0 ;
  assign master_xactor_rg_rd_data_21_BITS_65_TO_64_22_E_ETC___d890 =
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     _theResult____h22209[0] &&
	     (_theResult____h22209[1] || !_theResult____h22209[2]) &&
	     (_theResult____h22209[3] || _theResult____h22209[1]) &&
	     _theResult____h22209[19:10] == 10'd0 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign master_xactor_rg_rd_data_21_BITS_65_TO_64_22_E_ETC___d896 =
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     _theResult____h22209[0] &&
	     (_theResult____h22209[1] || !_theResult____h22209[2]) &&
	     (_theResult____h22209[3] || _theResult____h22209[1]) &&
	     _theResult____h22209[19:10] != 10'd0 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign master_xactor_rg_rd_data_21_BITS_65_TO_64_22_E_ETC___d922 =
	     master_xactor_rg_rd_data[65:64] == 2'd0 &&
	     _theResult____h22209[0] &&
	     (_theResult____h22209[1] || !_theResult____h22209[2]) &&
	     (_theResult____h22209[3] || _theResult____h22209[1]) &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign master_xactor_rg_rd_data_BITS_15_TO_0__q2 =
	     master_xactor_rg_rd_data[15:0] ;
  assign master_xactor_rg_rd_data_BITS_15_TO_8__q4 =
	     master_xactor_rg_rd_data[15:8] ;
  assign master_xactor_rg_rd_data_BITS_23_TO_16__q5 =
	     master_xactor_rg_rd_data[23:16] ;
  assign master_xactor_rg_rd_data_BITS_31_TO_0__q3 =
	     master_xactor_rg_rd_data[31:0] ;
  assign master_xactor_rg_rd_data_BITS_31_TO_16__q6 =
	     master_xactor_rg_rd_data[31:16] ;
  assign master_xactor_rg_rd_data_BITS_31_TO_24__q7 =
	     master_xactor_rg_rd_data[31:24] ;
  assign master_xactor_rg_rd_data_BITS_39_TO_32__q8 =
	     master_xactor_rg_rd_data[39:32] ;
  assign master_xactor_rg_rd_data_BITS_47_TO_32__q9 =
	     master_xactor_rg_rd_data[47:32] ;
  assign master_xactor_rg_rd_data_BITS_47_TO_40__q11 =
	     master_xactor_rg_rd_data[47:40] ;
  assign master_xactor_rg_rd_data_BITS_55_TO_48__q12 =
	     master_xactor_rg_rd_data[55:48] ;
  assign master_xactor_rg_rd_data_BITS_63_TO_32__q10 =
	     master_xactor_rg_rd_data[63:32] ;
  assign master_xactor_rg_rd_data_BITS_63_TO_48__q13 =
	     master_xactor_rg_rd_data[63:48] ;
  assign master_xactor_rg_rd_data_BITS_63_TO_56__q14 =
	     master_xactor_rg_rd_data[63:56] ;
  assign master_xactor_rg_rd_data_BITS_7_TO_0__q1 =
	     master_xactor_rg_rd_data[7:0] ;
  assign mem_req_wr_addr_awaddr__h19888 = { 30'd0, x__h19914 } ;
  assign new_ld_val0768_BITS_15_TO_0__q43 = new_ld_val__h30768[15:0] ;
  assign new_ld_val0768_BITS_31_TO_0__q44 = new_ld_val__h30768[31:0] ;
  assign new_ld_val0768_BITS_7_TO_0__q42 = new_ld_val__h30768[7:0] ;
  assign new_st_val__h14719 = { 32'd0, _theResult_____2__h14715[31:0] } ;
  assign new_st_val__h14811 =
	     IF_rg_f3_32_EQ_0b10_63_THEN_SEXT_IF_rg_f3_32_E_ETC___d564 +
	     IF_rg_f3_32_EQ_0b10_63_THEN_SEXT_rg_st_amo_val_ETC___d628 ;
  assign new_st_val__h15791 = w1__h14707 ^ w2__h31125 ;
  assign new_st_val__h15795 = w1__h14707 & w2__h31125 ;
  assign new_st_val__h15799 = w1__h14707 | w2__h31125 ;
  assign new_st_val__h15803 =
	     (w1__h14707 < w2__h31125) ? w1__h14707 : w2__h31125 ;
  assign new_st_val__h15808 =
	     (w1__h14707 <= w2__h31125) ? w2__h31125 : w1__h14707 ;
  assign new_st_val__h15814 =
	     ((IF_rg_f3_32_EQ_0b10_63_THEN_SEXT_IF_rg_f3_32_E_ETC___d564 ^
	       64'h8000000000000000) <
	      (IF_rg_f3_32_EQ_0b10_63_THEN_SEXT_rg_st_amo_val_ETC___d628 ^
	       64'h8000000000000000)) ?
	       w1__h14707 :
	       w2__h31125 ;
  assign new_st_val__h15819 =
	     ((IF_rg_f3_32_EQ_0b10_63_THEN_SEXT_IF_rg_f3_32_E_ETC___d564 ^
	       64'h8000000000000000) <=
	      (IF_rg_f3_32_EQ_0b10_63_THEN_SEXT_rg_st_amo_val_ETC___d628 ^
	       64'h8000000000000000)) ?
	       w2__h31125 :
	       w1__h14707 ;
  assign new_st_val__h31135 = { 32'd0, _theResult_____2__h31131[31:0] } ;
  assign new_st_val__h31226 =
	     new_ld_val__h30768 +
	     IF_rg_f3_32_EQ_0b10_63_THEN_SEXT_rg_st_amo_val_ETC___d628 ;
  assign new_st_val__h32180 = w1__h31123 ^ w2__h31125 ;
  assign new_st_val__h32184 = w1__h31123 & w2__h31125 ;
  assign new_st_val__h32188 = w1__h31123 | w2__h31125 ;
  assign new_st_val__h32192 =
	     (w1__h31123 < w2__h31125) ? w1__h31123 : w2__h31125 ;
  assign new_st_val__h32197 =
	     (w1__h31123 <= w2__h31125) ? w2__h31125 : w1__h31123 ;
  assign new_st_val__h32203 =
	     ((new_ld_val__h30768 ^ 64'h8000000000000000) <
	      (IF_rg_f3_32_EQ_0b10_63_THEN_SEXT_rg_st_amo_val_ETC___d628 ^
	       64'h8000000000000000)) ?
	       w1__h31123 :
	       w2__h31125 ;
  assign new_st_val__h32208 =
	     ((new_ld_val__h30768 ^ 64'h8000000000000000) <=
	      (IF_rg_f3_32_EQ_0b10_63_THEN_SEXT_rg_st_amo_val_ETC___d628 ^
	       64'h8000000000000000)) ?
	       w2__h31125 :
	       w1__h31123 ;
  assign new_st_val__h6540 =
	     (rg_f3 == 3'b010) ?
	       new_st_val__h14719 :
	       _theResult_____2__h14715 ;
  assign new_value600_BITS_31_TO_0__q37 = new_value__h6600[31:0] ;
  assign pa___1__h5894 = { tlb$lookup[67:46], rg_addr[11:0] } ;
  assign pa___1__h5943 = { tlb$lookup[67:56], rg_addr[21:0] } ;
  assign pa__h5377 = { 2'd0, rg_addr } ;
  assign pte___1__h6075 = { tlb$lookup[67:43], 1'd1, tlb$lookup[41:36] } ;
  assign pte___1__h6103 =
	     { pte___2__h5886[31:8], 1'd1, pte___2__h5886[6:0] } ;
  assign pte___2__h5886 =
	     tlb$lookup[42] ? tlb$lookup[67:36] : pte___1__h6075 ;
  assign ram_state_and_ctag_cset_b_read__24_BITS_21_TO__ETC___d129 =
	     ram_state_and_ctag_cset$DOB[21:0] ==
	     x1_avValue_pa__h5389[33:12] ;
  assign ram_state_and_ctag_cset_b_read__24_BIT_22_25_A_ETC___d372 =
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__24_BITS_21_TO__ETC___d129 &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 ||
	     NOT_ram_state_and_ctag_cset_b_read__24_BIT_22__ETC___d371 ;
  assign req_f3_BITS_1_TO_0_308_EQ_0b0_309_OR_req_f3_BI_ETC___d1338 =
	     req_f3[1:0] == 2'b0 || req_f3[1:0] == 2'b01 && !req_addr[0] ||
	     req_f3[1:0] == 2'b10 && req_addr[1:0] == 2'b0 ||
	     req_f3[1:0] == 2'b11 && req_addr[2:0] == 3'b0 ;
  assign result__h13011 =
	     { {56{word64415_BITS_15_TO_8__q24[7]}},
	       word64415_BITS_15_TO_8__q24 } ;
  assign result__h13039 =
	     { {56{word64415_BITS_23_TO_16__q25[7]}},
	       word64415_BITS_23_TO_16__q25 } ;
  assign result__h13067 =
	     { {56{word64415_BITS_31_TO_24__q27[7]}},
	       word64415_BITS_31_TO_24__q27 } ;
  assign result__h13095 =
	     { {56{word64415_BITS_39_TO_32__q28[7]}},
	       word64415_BITS_39_TO_32__q28 } ;
  assign result__h13123 =
	     { {56{word64415_BITS_47_TO_40__q31[7]}},
	       word64415_BITS_47_TO_40__q31 } ;
  assign result__h13151 =
	     { {56{word64415_BITS_55_TO_48__q32[7]}},
	       word64415_BITS_55_TO_48__q32 } ;
  assign result__h13179 =
	     { {56{word64415_BITS_63_TO_56__q34[7]}},
	       word64415_BITS_63_TO_56__q34 } ;
  assign result__h13224 = { 56'd0, word64__h6415[7:0] } ;
  assign result__h13252 = { 56'd0, word64__h6415[15:8] } ;
  assign result__h13280 = { 56'd0, word64__h6415[23:16] } ;
  assign result__h13308 = { 56'd0, word64__h6415[31:24] } ;
  assign result__h13336 = { 56'd0, word64__h6415[39:32] } ;
  assign result__h13364 = { 56'd0, word64__h6415[47:40] } ;
  assign result__h13392 = { 56'd0, word64__h6415[55:48] } ;
  assign result__h13420 = { 56'd0, word64__h6415[63:56] } ;
  assign result__h13465 =
	     { {48{word64415_BITS_15_TO_0__q22[15]}},
	       word64415_BITS_15_TO_0__q22 } ;
  assign result__h13493 =
	     { {48{word64415_BITS_31_TO_16__q26[15]}},
	       word64415_BITS_31_TO_16__q26 } ;
  assign result__h13521 =
	     { {48{word64415_BITS_47_TO_32__q29[15]}},
	       word64415_BITS_47_TO_32__q29 } ;
  assign result__h13549 =
	     { {48{word64415_BITS_63_TO_48__q33[15]}},
	       word64415_BITS_63_TO_48__q33 } ;
  assign result__h13590 = { 48'd0, word64__h6415[15:0] } ;
  assign result__h13618 = { 48'd0, word64__h6415[31:16] } ;
  assign result__h13646 = { 48'd0, word64__h6415[47:32] } ;
  assign result__h13674 = { 48'd0, word64__h6415[63:48] } ;
  assign result__h13715 =
	     { {32{word64415_BITS_31_TO_0__q23[31]}},
	       word64415_BITS_31_TO_0__q23 } ;
  assign result__h13743 =
	     { {32{word64415_BITS_63_TO_32__q30[31]}},
	       word64415_BITS_63_TO_32__q30 } ;
  assign result__h13782 = { 32'd0, word64__h6415[31:0] } ;
  assign result__h13810 = { 32'd0, word64__h6415[63:32] } ;
  assign result__h27296 =
	     { {56{master_xactor_rg_rd_data_BITS_7_TO_0__q1[7]}},
	       master_xactor_rg_rd_data_BITS_7_TO_0__q1 } ;
  assign result__h27323 = { 56'd0, master_xactor_rg_rd_data[7:0] } ;
  assign result__h27349 =
	     { {48{master_xactor_rg_rd_data_BITS_15_TO_0__q2[15]}},
	       master_xactor_rg_rd_data_BITS_15_TO_0__q2 } ;
  assign result__h27375 = { 48'd0, master_xactor_rg_rd_data[15:0] } ;
  assign result__h27401 =
	     { {32{master_xactor_rg_rd_data_BITS_31_TO_0__q3[31]}},
	       master_xactor_rg_rd_data_BITS_31_TO_0__q3 } ;
  assign result__h27427 = { 32'd0, master_xactor_rg_rd_data[31:0] } ;
  assign result__h28223 =
	     { {56{f_near_mem_io_rspsD_OUT_BITS_7_TO_0__q15[7]}},
	       f_near_mem_io_rspsD_OUT_BITS_7_TO_0__q15 } ;
  assign result__h28250 = { 56'd0, f_near_mem_io_rsps$D_OUT[7:0] } ;
  assign result__h28276 =
	     { {48{f_near_mem_io_rspsD_OUT_BITS_15_TO_0__q17[15]}},
	       f_near_mem_io_rspsD_OUT_BITS_15_TO_0__q17 } ;
  assign result__h28302 = { 48'd0, f_near_mem_io_rsps$D_OUT[15:0] } ;
  assign result__h28328 =
	     { {32{f_near_mem_io_rspsD_OUT_BITS_31_TO_0__q19[31]}},
	       f_near_mem_io_rspsD_OUT_BITS_31_TO_0__q19 } ;
  assign result__h28354 = { 32'd0, f_near_mem_io_rsps$D_OUT[31:0] } ;
  assign result__h28606 =
	     { {56{rg_ld_val_BITS_7_TO_0__q16[7]}},
	       rg_ld_val_BITS_7_TO_0__q16 } ;
  assign result__h28633 = { 56'd0, rg_ld_val[7:0] } ;
  assign result__h28660 =
	     { {48{rg_ld_val_BITS_15_TO_0__q18[15]}},
	       rg_ld_val_BITS_15_TO_0__q18 } ;
  assign result__h28687 = { 48'd0, rg_ld_val[15:0] } ;
  assign result__h28714 =
	     { {32{rg_ld_val_BITS_31_TO_0__q20[31]}},
	       rg_ld_val_BITS_31_TO_0__q20 } ;
  assign result__h28741 = { 32'd0, rg_ld_val[31:0] } ;
  assign result__h31343 =
	     { {56{master_xactor_rg_rd_data_BITS_15_TO_8__q4[7]}},
	       master_xactor_rg_rd_data_BITS_15_TO_8__q4 } ;
  assign result__h31370 =
	     { {56{master_xactor_rg_rd_data_BITS_23_TO_16__q5[7]}},
	       master_xactor_rg_rd_data_BITS_23_TO_16__q5 } ;
  assign result__h31397 =
	     { {56{master_xactor_rg_rd_data_BITS_31_TO_24__q7[7]}},
	       master_xactor_rg_rd_data_BITS_31_TO_24__q7 } ;
  assign result__h31424 =
	     { {56{master_xactor_rg_rd_data_BITS_39_TO_32__q8[7]}},
	       master_xactor_rg_rd_data_BITS_39_TO_32__q8 } ;
  assign result__h31451 =
	     { {56{master_xactor_rg_rd_data_BITS_47_TO_40__q11[7]}},
	       master_xactor_rg_rd_data_BITS_47_TO_40__q11 } ;
  assign result__h31478 =
	     { {56{master_xactor_rg_rd_data_BITS_55_TO_48__q12[7]}},
	       master_xactor_rg_rd_data_BITS_55_TO_48__q12 } ;
  assign result__h31505 =
	     { {56{master_xactor_rg_rd_data_BITS_63_TO_56__q14[7]}},
	       master_xactor_rg_rd_data_BITS_63_TO_56__q14 } ;
  assign result__h31576 = { 56'd0, master_xactor_rg_rd_data[15:8] } ;
  assign result__h31603 = { 56'd0, master_xactor_rg_rd_data[23:16] } ;
  assign result__h31630 = { 56'd0, master_xactor_rg_rd_data[31:24] } ;
  assign result__h31657 = { 56'd0, master_xactor_rg_rd_data[39:32] } ;
  assign result__h31684 = { 56'd0, master_xactor_rg_rd_data[47:40] } ;
  assign result__h31711 = { 56'd0, master_xactor_rg_rd_data[55:48] } ;
  assign result__h31738 = { 56'd0, master_xactor_rg_rd_data[63:56] } ;
  assign result__h31809 =
	     { {48{master_xactor_rg_rd_data_BITS_31_TO_16__q6[15]}},
	       master_xactor_rg_rd_data_BITS_31_TO_16__q6 } ;
  assign result__h31836 =
	     { {48{master_xactor_rg_rd_data_BITS_47_TO_32__q9[15]}},
	       master_xactor_rg_rd_data_BITS_47_TO_32__q9 } ;
  assign result__h31863 =
	     { {48{master_xactor_rg_rd_data_BITS_63_TO_48__q13[15]}},
	       master_xactor_rg_rd_data_BITS_63_TO_48__q13 } ;
  assign result__h31930 = { 48'd0, master_xactor_rg_rd_data[31:16] } ;
  assign result__h31957 = { 48'd0, master_xactor_rg_rd_data[47:32] } ;
  assign result__h31984 = { 48'd0, master_xactor_rg_rd_data[63:48] } ;
  assign result__h32051 =
	     { {32{master_xactor_rg_rd_data_BITS_63_TO_32__q10[31]}},
	       master_xactor_rg_rd_data_BITS_63_TO_32__q10 } ;
  assign result__h32116 = { 32'd0, master_xactor_rg_rd_data[63:32] } ;
  assign result__h32580 =
	     { {56{new_ld_val0768_BITS_7_TO_0__q42[7]}},
	       new_ld_val0768_BITS_7_TO_0__q42 } ;
  assign result__h32610 = { 56'd0, new_ld_val__h30768[7:0] } ;
  assign result__h32637 =
	     { {48{new_ld_val0768_BITS_15_TO_0__q43[15]}},
	       new_ld_val0768_BITS_15_TO_0__q43 } ;
  assign result__h32664 = { 48'd0, new_ld_val__h30768[15:0] } ;
  assign result__h32691 =
	     { {32{new_ld_val0768_BITS_31_TO_0__q44[31]}},
	       new_ld_val0768_BITS_31_TO_0__q44 } ;
  assign result__h32718 = { 32'd0, new_ld_val__h30768[31:0] } ;
  assign result__h6655 =
	     { {56{word64415_BITS_7_TO_0__q21[7]}},
	       word64415_BITS_7_TO_0__q21 } ;
  assign rg_amo_funct7_0_BITS_6_TO_2_1_EQ_0b10_2_AND_NO_ETC___d547 =
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     (!ram_state_and_ctag_cset$DOB[22] ||
	      !ram_state_and_ctag_cset_b_read__24_BITS_21_TO__ETC___d129) &&
	     IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3__ETC___d369 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign rg_ld_val_BITS_15_TO_0__q18 = rg_ld_val[15:0] ;
  assign rg_ld_val_BITS_31_TO_0__q20 = rg_ld_val[31:0] ;
  assign rg_ld_val_BITS_7_TO_0__q16 = rg_ld_val[7:0] ;
  assign rg_lrsc_pa_84_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d185 =
	     rg_lrsc_pa == x1_avValue_pa__h5389 ;
  assign rg_op_5_EQ_0_6_OR_rg_op_5_EQ_2_8_AND_rg_amo_fu_ETC___d343 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     (!ram_state_and_ctag_cset$DOB[22] ||
	      !ram_state_and_ctag_cset_b_read__24_BITS_21_TO__ETC___d129) ;
  assign rg_op_5_EQ_0_6_OR_rg_op_5_EQ_2_8_AND_rg_amo_fu_ETC___d383 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     ram_state_and_ctag_cset_b_read__24_BIT_22_25_A_ETC___d372 ||
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     rg_op_5_EQ_1_78_OR_rg_op_5_EQ_2_8_AND_rg_amo_f_ETC___d381 ;
  assign rg_op_5_EQ_0_6_OR_rg_op_5_EQ_2_8_AND_rg_amo_fu_ETC___d387 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__24_BITS_21_TO__ETC___d129 ;
  assign rg_op_5_EQ_0_6_OR_rg_op_5_EQ_2_8_AND_rg_amo_fu_ETC___d522 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     ram_state_and_ctag_cset$DOB[22] &&
	     ram_state_and_ctag_cset_b_read__24_BITS_21_TO__ETC___d129 &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign rg_op_5_EQ_0_6_OR_rg_op_5_EQ_2_8_AND_rg_amo_fu_ETC___d541 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     (!ram_state_and_ctag_cset$DOB[22] ||
	      !ram_state_and_ctag_cset_b_read__24_BITS_21_TO__ETC___d129) &&
	     !cfg_verbosity_read__0_ULE_1___d11 ;
  assign rg_op_5_EQ_1_78_OR_rg_op_5_EQ_2_8_AND_rg_amo_f_ETC___d381 =
	     rg_op == 2'd1 &&
	     IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3__ETC___d369 ||
	     rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 ||
	     NOT_rg_op_5_EQ_1_78_77_AND_NOT_rg_op_5_EQ_2_8__ETC___d380 ;
  assign rg_op_5_EQ_1_78_OR_rg_op_5_EQ_2_8_AND_rg_amo_f_ETC___d569 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_5_EQ_2_8_9_OR_NOT_rg_amo_funct7_0_BI_ETC___d566 ||
	     NOT_rg_op_5_EQ_1_78_77_AND_NOT_rg_op_5_EQ_2_8__ETC___d568 ;
  assign rg_op_5_EQ_1_78_OR_rg_op_5_EQ_2_8_AND_rg_amo_f_ETC___d691 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid &&
	      rg_lrsc_pa_84_EQ_IF_rg_priv_9_ULE_0b1_0_AND_rg_ETC___d185) ;
  assign rg_op_5_EQ_2_8_AND_rg_amo_funct7_0_BITS_6_TO_2_ETC___d203 =
	     rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h14271 ||
	     !master_xactor_crg_wr_addr_full$port2__read &&
	     !master_xactor_crg_wr_data_full$port2__read &&
	     IF_rg_f3_32_BITS_1_TO_0_93_EQ_0b0_94_OR_rg_f3__ETC___d200 ;
  assign rg_priv_9_EQ_0b0_5_AND_NOT_tlb_lookup_rg_satp__ETC___d312 =
	     rg_priv == 2'b0 && !tlb$lookup[40] ||
	     rg_priv == 2'b01 && tlb$lookup[40] && !rg_sstatus_SUM ||
	     !dmem_not_imem ||
	     !tlb$lookup[38] ;
  assign rg_priv_9_EQ_0b0_5_AND_NOT_tlb_lookup_rg_satp__ETC___d96 =
	     rg_priv == 2'b0 && !tlb$lookup[40] ||
	     rg_priv == 2'b01 && tlb$lookup[40] && !rg_sstatus_SUM ||
	     dmem_not_imem_OR_NOT_rg_op_5_EQ_0_6_7_AND_NOT__ETC___d79 &&
	     NOT_dmem_not_imem_0_OR_NOT_rg_op_5_EQ_0_6_7_AN_ETC___d87 &&
	     (!dmem_not_imem || rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010 ||
	      !tlb$lookup[38]) ;
  assign rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d105 =
	     rg_priv_9_ULE_0b1___d40 && rg_satp[31] && tlb$lookup[68] &&
	     (rg_priv_9_EQ_0b0_5_AND_NOT_tlb_lookup_rg_satp__ETC___d96 ||
	      NOT_tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_ad_ETC___d102) ;
  assign rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d303 =
	     rg_priv_9_ULE_0b1___d40 && rg_satp[31] &&
	     (rg_priv_9_EQ_0b0_5_AND_NOT_tlb_lookup_rg_satp__ETC___d96 ||
	      NOT_tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_ad_ETC___d102) &&
	     tlb$lookup[68] ;
  assign rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d334 =
	     rg_priv_9_ULE_0b1___d40 && rg_satp[31] && tlb$lookup[68] &&
	     NOT_rg_priv_9_EQ_0b0_5_81_OR_tlb_lookup_rg_sat_ETC___d327 &&
	     tlb$lookup[42] &&
	     tlb$lookup[43] &&
	     !pte___2__h5886[7] &&
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) ;
  assign rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d352 =
	     rg_priv_9_ULE_0b1___d40 && rg_satp[31] && !tlb$lookup[68] ||
	     rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d105 ||
	     soc_map$m_is_IO_addr ||
	     rg_op_5_EQ_0_6_OR_rg_op_5_EQ_2_8_AND_rg_amo_fu_ETC___d343 ||
	     NOT_rg_op_5_EQ_0_6_7_AND_NOT_rg_op_5_EQ_2_8_9__ETC___d348 ;
  assign rg_priv_9_ULE_0b1___d40 = rg_priv <= 2'b01 ;
  assign rg_st_amo_val_BITS_31_TO_0__q38 = rg_st_amo_val[31:0] ;
  assign rg_state_EQ_12_86_AND_rg_op_5_EQ_0_6_OR_rg_op__ETC___d1027 =
	     rg_state == 4'd12 &&
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     soc_map$m_is_near_mem_IO_addr ;
  assign rg_state_EQ_12_86_AND_rg_op_5_EQ_0_6_OR_rg_op__ETC___d991 =
	     rg_state == 4'd12 &&
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     !soc_map$m_is_near_mem_IO_addr ;
  assign satp_pa__h2614 = { rg_satp[21:0], 12'b0 } ;
  assign shift_bits__h19897 = { x1_avValue_pa__h5389[2:0], 3'b0 } ;
  assign shift_bits__h30844 = { rg_pa[2:0], 3'b0 } ;
  assign strobe64__h20116 = 8'b00000001 << x1_avValue_pa__h5389[2:0] ;
  assign strobe64__h20159 = 8'b00000011 << x1_avValue_pa__h5389[2:0] ;
  assign strobe64__h20182 = 8'b00001111 << x1_avValue_pa__h5389[2:0] ;
  assign strobe64__h31112 = 8'b00000001 << rg_pa[2:0] ;
  assign strobe64__h32266 = 8'b00000011 << rg_pa[2:0] ;
  assign strobe64__h32289 = 8'b00001111 << rg_pa[2:0] ;
  assign tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_addr_9_ETC___d297 =
	     tlb$lookup[42] &&
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010 ||
	      tlb$lookup[43]) ;
  assign tlb_lookup_rg_satp_2_BITS_30_TO_22_8_rg_addr_9_ETC___d85 =
	     tlb$lookup[37] | y__h5714 ;
  assign vpn_0_pa__h22444 = { 22'd0, rg_addr[21:12], 2'd0 } ;
  assign vpn_1_pa__h21891 = { 22'd0, rg_addr[31:22], 2'd0 } ;
  assign w11119_BITS_31_TO_0__q41 = w1__h31119[31:0] ;
  assign w1___1__h14778 = { 32'd0, new_value__h6600[31:0] } ;
  assign w1___1__h31194 = { 32'd0, w1__h31119[31:0] } ;
  assign w2___1__h31195 = { 32'd0, rg_st_amo_val[31:0] } ;
  assign w2__h31125 = (rg_f3 == 3'b010) ? w2___1__h31195 : rg_st_amo_val ;
  assign word64415_BITS_15_TO_0__q22 = word64__h6415[15:0] ;
  assign word64415_BITS_15_TO_8__q24 = word64__h6415[15:8] ;
  assign word64415_BITS_23_TO_16__q25 = word64__h6415[23:16] ;
  assign word64415_BITS_31_TO_0__q23 = word64__h6415[31:0] ;
  assign word64415_BITS_31_TO_16__q26 = word64__h6415[31:16] ;
  assign word64415_BITS_31_TO_24__q27 = word64__h6415[31:24] ;
  assign word64415_BITS_39_TO_32__q28 = word64__h6415[39:32] ;
  assign word64415_BITS_47_TO_32__q29 = word64__h6415[47:32] ;
  assign word64415_BITS_47_TO_40__q31 = word64__h6415[47:40] ;
  assign word64415_BITS_55_TO_48__q32 = word64__h6415[55:48] ;
  assign word64415_BITS_63_TO_32__q30 = word64__h6415[63:32] ;
  assign word64415_BITS_63_TO_48__q33 = word64__h6415[63:48] ;
  assign word64415_BITS_63_TO_56__q34 = word64__h6415[63:56] ;
  assign word64415_BITS_7_TO_0__q21 = word64__h6415[7:0] ;
  assign word64__h30841 =
	     (rg_f3 == 3'b010) ?
	       new_st_val__h31135 :
	       _theResult_____2__h31131 ;
  assign word64__h6415 = ram_word64_set$DOB & y__h6691 ;
  assign x1_avValue_exc_code__h5390 =
	     dmem_not_imem ?
	       ((rg_op == 2'd0 ||
		 rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
		  4'd13 :
		  4'd15) :
	       4'd12 ;
  assign x1_avValue_pa__h5389 =
	     (rg_priv_9_ULE_0b1___d40 && rg_satp[31]) ?
	       _theResult___fst__h5477 :
	       pa__h5377 ;
  assign x1_avValue_pte__h5392 =
	     (rg_priv_9_ULE_0b1___d40 && rg_satp[31]) ?
	       _theResult___snd_fst__h5479 :
	       tlb$lookup[67:36] ;
  assign x__h14281 = { 63'd0, lrsc_result__h14271 } ;
  assign x__h19914 = { x1_avValue_pa__h5389[33:3], 3'd0 } ;
  assign x__h30861 = { rg_pa[33:3], 3'd0 } ;
  assign y__h5714 = rg_mstatus_MXR & tlb$lookup[39] ;
  assign y__h6691 =
	     {64{ram_state_and_ctag_cset$DOB[22] &&
		 ram_state_and_ctag_cset_b_read__24_BITS_21_TO__ETC___d129}} ;
  always@(tlb$lookup or pa__h5377 or pa___1__h5894 or pa___1__h5943)
  begin
    case (tlb$lookup[35:34])
      2'd0: _theResult___fst__h5888 = pa___1__h5894;
      2'd1: _theResult___fst__h5888 = pa___1__h5943;
      default: _theResult___fst__h5888 = pa__h5377;
    endcase
  end
  always@(rg_f3 or strobe64__h31112 or strobe64__h32266 or strobe64__h32289)
  begin
    case (rg_f3[1:0])
      2'b0: io_req_wr_data_wstrb__h30996 = strobe64__h31112;
      2'b01: io_req_wr_data_wstrb__h30996 = strobe64__h32266;
      2'b10: io_req_wr_data_wstrb__h30996 = strobe64__h32289;
      2'b11: io_req_wr_data_wstrb__h30996 = 8'b11111111;
    endcase
  end
  always@(rg_f3 or rg_st_amo_val or _theResult___fst__h29764)
  begin
    case (rg_f3[1:0])
      2'b0, 2'b01, 2'b10: value__h30041 = _theResult___fst__h29764;
      2'd3: value__h30041 = rg_st_amo_val;
    endcase
  end
  always@(rg_f3 or strobe64__h20116 or strobe64__h20159 or strobe64__h20182)
  begin
    case (rg_f3[1:0])
      2'b0: mem_req_wr_data_wstrb__h20000 = strobe64__h20116;
      2'b01: mem_req_wr_data_wstrb__h20000 = strobe64__h20159;
      2'b10: mem_req_wr_data_wstrb__h20000 = strobe64__h20182;
      2'b11: mem_req_wr_data_wstrb__h20000 = 8'b11111111;
    endcase
  end
  always@(rg_f3 or rg_st_amo_val or _theResult___fst__h20117)
  begin
    case (rg_f3[1:0])
      2'b0, 2'b01, 2'b10:
	  mem_req_wr_data_wdata__h19999 = _theResult___fst__h20117;
      2'd3: mem_req_wr_data_wdata__h19999 = rg_st_amo_val;
    endcase
  end
  always@(rg_addr or
	  NOT_ram_state_and_ctag_cset_b_read__24_BIT_22__ETC___d150)
  begin
    case (rg_addr[2:0])
      3'h0, 3'h1, 3'h2, 3'h3, 3'h4, 3'h5, 3'h6:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_OR_rg_ad_ETC___d154 =
	      NOT_ram_state_and_ctag_cset_b_read__24_BIT_22__ETC___d150;
      3'd7:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_OR_rg_ad_ETC___d154 =
	      rg_addr[2:0] != 3'h7 ||
	      NOT_ram_state_and_ctag_cset_b_read__24_BIT_22__ETC___d150;
    endcase
  end
  always@(rg_addr or
	  NOT_ram_state_and_ctag_cset_b_read__24_BIT_22__ETC___d150)
  begin
    case (rg_addr[2:0])
      3'h0, 3'h2, 3'h4:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_OR_rg_ad_ETC___d162 =
	      NOT_ram_state_and_ctag_cset_b_read__24_BIT_22__ETC___d150;
      default: IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_OR_rg_ad_ETC___d162 =
		   rg_addr[2:0] != 3'h6 ||
		   NOT_ram_state_and_ctag_cset_b_read__24_BIT_22__ETC___d150;
    endcase
  end
  always@(rg_f3 or
	  rg_addr or
	  NOT_ram_state_and_ctag_cset_b_read__24_BIT_22__ETC___d150 or
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_OR_rg_ad_ETC___d154 or
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_OR_rg_ad_ETC___d162 or
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_NOT_ETC___d168)
  begin
    case (rg_f3)
      3'b0, 3'b100:
	  IF_rg_f3_32_EQ_0b0_33_OR_rg_f3_32_EQ_0b100_34__ETC___d176 =
	      IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_OR_rg_ad_ETC___d154;
      3'b001, 3'b101:
	  IF_rg_f3_32_EQ_0b0_33_OR_rg_f3_32_EQ_0b100_34__ETC___d176 =
	      IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_OR_rg_ad_ETC___d162;
      3'b010, 3'b110:
	  IF_rg_f3_32_EQ_0b0_33_OR_rg_f3_32_EQ_0b100_34__ETC___d176 =
	      IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_NOT_ETC___d168;
      default: IF_rg_f3_32_EQ_0b0_33_OR_rg_f3_32_EQ_0b100_34__ETC___d176 =
		   rg_f3 != 3'b011 || rg_addr[2:0] != 3'h0 ||
		   NOT_ram_state_and_ctag_cset_b_read__24_BIT_22__ETC___d150;
    endcase
  end
  always@(rg_amo_funct7 or
	  IF_rg_f3_32_EQ_0b0_33_OR_rg_f3_32_EQ_0b100_34__ETC___d176)
  begin
    case (rg_amo_funct7[6:2])
      5'b0, 5'b00100, 5'b01000, 5'b01100, 5'b10000, 5'b11000, 5'b11100:
	  CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_32_ETC__q35 =
	      IF_rg_f3_32_EQ_0b0_33_OR_rg_f3_32_EQ_0b100_34__ETC___d176;
      default: CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_32_ETC__q35 =
		   rg_amo_funct7[6:2] != 5'b10100 ||
		   IF_rg_f3_32_EQ_0b0_33_OR_rg_f3_32_EQ_0b100_34__ETC___d176;
    endcase
  end
  always@(x1_avValue_pa__h5389 or
	  NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_3_ETC___d239 or
	  CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_32_ETC__q35)
  begin
    case (x1_avValue_pa__h5389[2:0])
      3'h0, 3'h1, 3'h2, 3'h3, 3'h4, 3'h5, 3'h6:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d240 =
	      CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_32_ETC__q35;
      3'd7:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d240 =
	      NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_3_ETC___d239;
    endcase
  end
  always@(x1_avValue_pa__h5389 or
	  NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_3_ETC___d244 or
	  CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_32_ETC__q35)
  begin
    case (x1_avValue_pa__h5389[2:0])
      3'h0, 3'h2, 3'h4:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d245 =
	      CASE_rg_amo_funct7_BITS_6_TO_2_0b0_IF_rg_f3_32_ETC__q35;
      default: IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d245 =
		   NOT_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_3_ETC___d244;
    endcase
  end
  always@(rg_f3 or
	  NOT_rg_f3_32_EQ_0b11_69_70_OR_rg_amo_funct7_0__ETC___d249 or
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d240 or
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d245 or
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d248)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_32_EQ_0b0_33_THEN_IF_IF_rg_priv_9_ULE_ETC___d252 =
	      IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d240;
      3'b001:
	  IF_rg_f3_32_EQ_0b0_33_THEN_IF_IF_rg_priv_9_ULE_ETC___d252 =
	      IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d245;
      3'b010:
	  IF_rg_f3_32_EQ_0b0_33_THEN_IF_IF_rg_priv_9_ULE_ETC___d252 =
	      IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d248;
      default: IF_rg_f3_32_EQ_0b0_33_THEN_IF_IF_rg_priv_9_ULE_ETC___d252 =
		   NOT_rg_f3_32_EQ_0b11_69_70_OR_rg_amo_funct7_0__ETC___d249;
    endcase
  end
  always@(rg_f3 or rg_priv_9_ULE_0b1___d40 or rg_satp or tlb$RDY_lookup)
  begin
    case (rg_f3[1:0])
      2'b0, 2'b01:
	  IF_rg_f3_32_BITS_1_TO_0_93_EQ_0b0_94_OR_rg_f3__ETC___d200 =
	      !rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$RDY_lookup;
      default: IF_rg_f3_32_BITS_1_TO_0_93_EQ_0b0_94_OR_rg_f3__ETC___d200 =
		   rg_f3[1:0] != 2'b10 || !rg_priv_9_ULE_0b1___d40 ||
		   !rg_satp[31] ||
		   tlb$RDY_lookup;
    endcase
  end
  always@(rg_addr or
	  result__h6655 or
	  result__h13011 or
	  result__h13039 or
	  result__h13067 or
	  result__h13095 or
	  result__h13123 or result__h13151 or result__h13179)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d450 =
	      result__h6655;
      3'h1:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d450 =
	      result__h13011;
      3'h2:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d450 =
	      result__h13039;
      3'h3:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d450 =
	      result__h13067;
      3'h4:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d450 =
	      result__h13095;
      3'h5:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d450 =
	      result__h13123;
      3'h6:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d450 =
	      result__h13151;
      3'h7:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d450 =
	      result__h13179;
    endcase
  end
  always@(rg_addr or
	  result__h13224 or
	  result__h13252 or
	  result__h13280 or
	  result__h13308 or
	  result__h13336 or
	  result__h13364 or result__h13392 or result__h13420)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d466 =
	      result__h13224;
      3'h1:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d466 =
	      result__h13252;
      3'h2:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d466 =
	      result__h13280;
      3'h3:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d466 =
	      result__h13308;
      3'h4:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d466 =
	      result__h13336;
      3'h5:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d466 =
	      result__h13364;
      3'h6:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d466 =
	      result__h13392;
      3'h7:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d466 =
	      result__h13420;
    endcase
  end
  always@(rg_addr or
	  result__h13465 or
	  result__h13493 or result__h13521 or result__h13549)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d478 =
	      result__h13465;
      3'h2:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d478 =
	      result__h13493;
      3'h4:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d478 =
	      result__h13521;
      3'h6:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d478 =
	      result__h13549;
      default: IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d478 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h13590 or
	  result__h13618 or result__h13646 or result__h13674)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d486 =
	      result__h13590;
      3'h2:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d486 =
	      result__h13618;
      3'h4:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d486 =
	      result__h13646;
      3'h6:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d486 =
	      result__h13674;
      default: IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d486 =
		   64'd0;
    endcase
  end
  always@(rg_addr or result__h13782 or result__h13810)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d496 =
	      result__h13782;
      3'h4:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d496 =
	      result__h13810;
      default: IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d496 =
		   64'd0;
    endcase
  end
  always@(rg_addr or result__h13715 or result__h13743)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result3715_0x4_re_ETC__q36 =
	      result__h13715;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result3715_0x4_re_ETC__q36 =
	      result__h13743;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result3715_0x4_re_ETC__q36 =
		   64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d450 or
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d478 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result3715_0x4_re_ETC__q36 or
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_ram_ETC___d497 or
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d466 or
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d486 or
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d496)
  begin
    case (rg_f3)
      3'b0:
	  new_value__h6600 =
	      IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d450;
      3'b001:
	  new_value__h6600 =
	      IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d478;
      3'b010:
	  new_value__h6600 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result3715_0x4_re_ETC__q36;
      3'b011:
	  new_value__h6600 =
	      IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_ram_ETC___d497;
      3'b100:
	  new_value__h6600 =
	      IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d466;
      3'b101:
	  new_value__h6600 =
	      IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d486;
      3'b110:
	  new_value__h6600 =
	      IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d496;
      3'd7: new_value__h6600 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d450 or
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d478 or
	  w1___1__h14778 or
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_ram_ETC___d497 or
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d466 or
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d486 or
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d496)
  begin
    case (rg_f3)
      3'b0:
	  w1__h14707 =
	      IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d450;
      3'b001:
	  w1__h14707 =
	      IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d478;
      3'b010: w1__h14707 = w1___1__h14778;
      3'b011:
	  w1__h14707 =
	      IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_ram_ETC___d497;
      3'b100:
	  w1__h14707 =
	      IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d466;
      3'b101:
	  w1__h14707 =
	      IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d486;
      3'b110:
	  w1__h14707 =
	      IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d496;
      3'd7: w1__h14707 = 64'd0;
    endcase
  end
  always@(x1_avValue_pa__h5389 or ram_word64_set$DOB or rg_st_amo_val)
  begin
    case (x1_avValue_pa__h5389[2:0])
      3'h0:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d615 =
	      { ram_word64_set$DOB[63:16], rg_st_amo_val[15:0] };
      3'h2:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d615 =
	      { ram_word64_set$DOB[63:32],
		rg_st_amo_val[15:0],
		ram_word64_set$DOB[15:0] };
      3'h4:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d615 =
	      { ram_word64_set$DOB[63:48],
		rg_st_amo_val[15:0],
		ram_word64_set$DOB[31:0] };
      3'h6:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d615 =
	      { rg_st_amo_val[15:0], ram_word64_set$DOB[47:0] };
      default: IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d615 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d450 or
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d478 or
	  new_value600_BITS_31_TO_0__q37 or
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_ram_ETC___d497 or
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d466 or
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d486 or
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d496)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_32_EQ_0b10_63_THEN_SEXT_IF_rg_f3_32_E_ETC___d564 =
	      IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d450;
      3'b001:
	  IF_rg_f3_32_EQ_0b10_63_THEN_SEXT_IF_rg_f3_32_E_ETC___d564 =
	      IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d478;
      3'b010:
	  IF_rg_f3_32_EQ_0b10_63_THEN_SEXT_IF_rg_f3_32_E_ETC___d564 =
	      { {32{new_value600_BITS_31_TO_0__q37[31]}},
		new_value600_BITS_31_TO_0__q37 };
      3'b011:
	  IF_rg_f3_32_EQ_0b10_63_THEN_SEXT_IF_rg_f3_32_E_ETC___d564 =
	      IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_ram_ETC___d497;
      3'b100:
	  IF_rg_f3_32_EQ_0b10_63_THEN_SEXT_IF_rg_f3_32_E_ETC___d564 =
	      IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d466;
      3'b101:
	  IF_rg_f3_32_EQ_0b10_63_THEN_SEXT_IF_rg_f3_32_E_ETC___d564 =
	      IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d486;
      3'b110:
	  IF_rg_f3_32_EQ_0b10_63_THEN_SEXT_IF_rg_f3_32_E_ETC___d564 =
	      IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d496;
      3'd7: IF_rg_f3_32_EQ_0b10_63_THEN_SEXT_IF_rg_f3_32_E_ETC___d564 = 64'd0;
    endcase
  end
  always@(x1_avValue_pa__h5389 or ram_word64_set$DOB or rg_st_amo_val)
  begin
    case (x1_avValue_pa__h5389[2:0])
      3'h0:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d606 =
	      { ram_word64_set$DOB[63:8], rg_st_amo_val[7:0] };
      3'h1:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d606 =
	      { ram_word64_set$DOB[63:16],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[7:0] };
      3'h2:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d606 =
	      { ram_word64_set$DOB[63:24],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[15:0] };
      3'h3:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d606 =
	      { ram_word64_set$DOB[63:32],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[23:0] };
      3'h4:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d606 =
	      { ram_word64_set$DOB[63:40],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[31:0] };
      3'h5:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d606 =
	      { ram_word64_set$DOB[63:48],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[39:0] };
      3'h6:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d606 =
	      { ram_word64_set$DOB[63:56],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[47:0] };
      3'h7:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d606 =
	      { rg_st_amo_val[7:0], ram_word64_set$DOB[55:0] };
    endcase
  end
  always@(rg_amo_funct7 or
	  new_st_val__h15819 or
	  new_st_val__h14811 or
	  w2__h31125 or
	  new_st_val__h15791 or
	  new_st_val__h15799 or
	  new_st_val__h15795 or
	  new_st_val__h15814 or new_st_val__h15803 or new_st_val__h15808)
  begin
    case (rg_amo_funct7[6:2])
      5'b0: _theResult_____2__h14715 = new_st_val__h14811;
      5'b00001: _theResult_____2__h14715 = w2__h31125;
      5'b00100: _theResult_____2__h14715 = new_st_val__h15791;
      5'b01000: _theResult_____2__h14715 = new_st_val__h15799;
      5'b01100: _theResult_____2__h14715 = new_st_val__h15795;
      5'b10000: _theResult_____2__h14715 = new_st_val__h15814;
      5'b11000: _theResult_____2__h14715 = new_st_val__h15803;
      5'b11100: _theResult_____2__h14715 = new_st_val__h15808;
      default: _theResult_____2__h14715 = new_st_val__h15819;
    endcase
  end
  always@(rg_f3 or new_st_val__h6540 or _theResult___fst__h20875)
  begin
    case (rg_f3[1:0])
      2'b0, 2'b01, 2'b10:
	  mem_req_wr_data_wdata__h20757 = _theResult___fst__h20875;
      2'd3: mem_req_wr_data_wdata__h20757 = new_st_val__h6540;
    endcase
  end
  always@(x1_avValue_pa__h5389 or ram_word64_set$DOB or new_st_val__h6540)
  begin
    case (x1_avValue_pa__h5389[2:0])
      3'h0:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d680 =
	      { ram_word64_set$DOB[63:16], new_st_val__h6540[15:0] };
      3'h2:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d680 =
	      { ram_word64_set$DOB[63:32],
		new_st_val__h6540[15:0],
		ram_word64_set$DOB[15:0] };
      3'h4:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d680 =
	      { ram_word64_set$DOB[63:48],
		new_st_val__h6540[15:0],
		ram_word64_set$DOB[31:0] };
      3'h6:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d680 =
	      { new_st_val__h6540[15:0], ram_word64_set$DOB[47:0] };
      default: IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d680 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(x1_avValue_pa__h5389 or ram_word64_set$DOB or new_st_val__h6540)
  begin
    case (x1_avValue_pa__h5389[2:0])
      3'h0:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d671 =
	      { ram_word64_set$DOB[63:8], new_st_val__h6540[7:0] };
      3'h1:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d671 =
	      { ram_word64_set$DOB[63:16],
		new_st_val__h6540[7:0],
		ram_word64_set$DOB[7:0] };
      3'h2:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d671 =
	      { ram_word64_set$DOB[63:24],
		new_st_val__h6540[7:0],
		ram_word64_set$DOB[15:0] };
      3'h3:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d671 =
	      { ram_word64_set$DOB[63:32],
		new_st_val__h6540[7:0],
		ram_word64_set$DOB[23:0] };
      3'h4:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d671 =
	      { ram_word64_set$DOB[63:40],
		new_st_val__h6540[7:0],
		ram_word64_set$DOB[31:0] };
      3'h5:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d671 =
	      { ram_word64_set$DOB[63:48],
		new_st_val__h6540[7:0],
		ram_word64_set$DOB[39:0] };
      3'h6:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d671 =
	      { ram_word64_set$DOB[63:56],
		new_st_val__h6540[7:0],
		ram_word64_set$DOB[47:0] };
      3'h7:
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d671 =
	      { new_st_val__h6540[7:0], ram_word64_set$DOB[55:0] };
    endcase
  end
  always@(x1_avValue_pa__h5389 or ram_word64_set$DOB or rg_st_amo_val)
  begin
    case (x1_avValue_pa__h5389[2:0])
      3'h0:
	  CASE_x1_avValue_pa389_BITS_2_TO_0_0x0_ram_word_ETC__q39 =
	      { ram_word64_set$DOB[63:32], rg_st_amo_val[31:0] };
      3'h4:
	  CASE_x1_avValue_pa389_BITS_2_TO_0_0x0_ram_word_ETC__q39 =
	      { rg_st_amo_val[31:0], ram_word64_set$DOB[31:0] };
      default: CASE_x1_avValue_pa389_BITS_2_TO_0_0x0_ram_word_ETC__q39 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_f3 or
	  ram_word64_set$DOB or
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d606 or
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d615 or
	  CASE_x1_avValue_pa389_BITS_2_TO_0_0x0_ram_word_ETC__q39 or
	  rg_st_amo_val)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_32_EQ_0b0_33_THEN_IF_IF_rg_priv_9_ULE_ETC___d624 =
	      IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d606;
      3'b001:
	  IF_rg_f3_32_EQ_0b0_33_THEN_IF_IF_rg_priv_9_ULE_ETC___d624 =
	      IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d615;
      3'b010:
	  IF_rg_f3_32_EQ_0b0_33_THEN_IF_IF_rg_priv_9_ULE_ETC___d624 =
	      CASE_x1_avValue_pa389_BITS_2_TO_0_0x0_ram_word_ETC__q39;
      3'b011:
	  IF_rg_f3_32_EQ_0b0_33_THEN_IF_IF_rg_priv_9_ULE_ETC___d624 =
	      rg_st_amo_val;
      default: IF_rg_f3_32_EQ_0b0_33_THEN_IF_IF_rg_priv_9_ULE_ETC___d624 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_addr or result__h27427 or result__h32116)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d1194 =
	      result__h27427;
      3'h4:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d1194 =
	      result__h32116;
      default: IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d1194 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h27375 or
	  result__h31930 or result__h31957 or result__h31984)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d1188 =
	      result__h27375;
      3'h2:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d1188 =
	      result__h31930;
      3'h4:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d1188 =
	      result__h31957;
      3'h6:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d1188 =
	      result__h31984;
      default: IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d1188 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h27349 or
	  result__h31809 or result__h31836 or result__h31863)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d1181 =
	      result__h27349;
      3'h2:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d1181 =
	      result__h31809;
      3'h4:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d1181 =
	      result__h31836;
      3'h6:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d1181 =
	      result__h31863;
      default: IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d1181 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h27323 or
	  result__h31576 or
	  result__h31603 or
	  result__h31630 or
	  result__h31657 or
	  result__h31684 or result__h31711 or result__h31738)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d1171 =
	      result__h27323;
      3'h1:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d1171 =
	      result__h31576;
      3'h2:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d1171 =
	      result__h31603;
      3'h3:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d1171 =
	      result__h31630;
      3'h4:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d1171 =
	      result__h31657;
      3'h5:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d1171 =
	      result__h31684;
      3'h6:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d1171 =
	      result__h31711;
      3'h7:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d1171 =
	      result__h31738;
    endcase
  end
  always@(rg_addr or
	  result__h27296 or
	  result__h31343 or
	  result__h31370 or
	  result__h31397 or
	  result__h31424 or
	  result__h31451 or result__h31478 or result__h31505)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d1156 =
	      result__h27296;
      3'h1:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d1156 =
	      result__h31343;
      3'h2:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d1156 =
	      result__h31370;
      3'h3:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d1156 =
	      result__h31397;
      3'h4:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d1156 =
	      result__h31424;
      3'h5:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d1156 =
	      result__h31451;
      3'h6:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d1156 =
	      result__h31478;
      3'h7:
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d1156 =
	      result__h31505;
    endcase
  end
  always@(rg_addr or result__h27401 or result__h32051)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result7401_0x4_re_ETC__q40 =
	      result__h27401;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result7401_0x4_re_ETC__q40 =
	      result__h32051;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result7401_0x4_re_ETC__q40 =
		   64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d1156 or
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d1181 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result7401_0x4_re_ETC__q40 or
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_mas_ETC___d1195 or
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d1171 or
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d1188 or
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d1194)
  begin
    case (rg_f3)
      3'b0:
	  w1__h31119 =
	      IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d1156;
      3'b001:
	  w1__h31119 =
	      IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d1181;
      3'b010:
	  w1__h31119 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result7401_0x4_re_ETC__q40;
      3'b011:
	  w1__h31119 =
	      IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_mas_ETC___d1195;
      3'b100:
	  w1__h31119 =
	      IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d1171;
      3'b101:
	  w1__h31119 =
	      IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d1188;
      3'b110:
	  w1__h31119 =
	      IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d1194;
      3'd7: w1__h31119 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d1156 or
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d1181 or
	  w1___1__h31194 or
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_mas_ETC___d1195 or
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d1171 or
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d1188 or
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d1194)
  begin
    case (rg_f3)
      3'b0:
	  w1__h31123 =
	      IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d1156;
      3'b001:
	  w1__h31123 =
	      IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d1181;
      3'b010: w1__h31123 = w1___1__h31194;
      3'b011:
	  w1__h31123 =
	      IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_mas_ETC___d1195;
      3'b100:
	  w1__h31123 =
	      IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d1171;
      3'b101:
	  w1__h31123 =
	      IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d1188;
      3'b110:
	  w1__h31123 =
	      IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d1194;
      3'd7: w1__h31123 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d1156 or
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d1181 or
	  w11119_BITS_31_TO_0__q41 or
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_mas_ETC___d1195 or
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d1171 or
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d1188 or
	  IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d1194)
  begin
    case (rg_f3)
      3'b0:
	  new_ld_val__h30768 =
	      IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d1156;
      3'b001:
	  new_ld_val__h30768 =
	      IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_SEX_ETC___d1181;
      3'b010:
	  new_ld_val__h30768 =
	      { {32{w11119_BITS_31_TO_0__q41[31]}},
		w11119_BITS_31_TO_0__q41 };
      3'b011:
	  new_ld_val__h30768 =
	      IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_mas_ETC___d1195;
      3'b100:
	  new_ld_val__h30768 =
	      IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d1171;
      3'b101:
	  new_ld_val__h30768 =
	      IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d1188;
      3'b110:
	  new_ld_val__h30768 =
	      IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_0_C_ETC___d1194;
      3'd7: new_ld_val__h30768 = 64'd0;
    endcase
  end
  always@(rg_amo_funct7 or
	  new_st_val__h32208 or
	  new_st_val__h31226 or
	  w2__h31125 or
	  new_st_val__h32180 or
	  new_st_val__h32188 or
	  new_st_val__h32184 or
	  new_st_val__h32203 or new_st_val__h32192 or new_st_val__h32197)
  begin
    case (rg_amo_funct7[6:2])
      5'b0: _theResult_____2__h31131 = new_st_val__h31226;
      5'b00001: _theResult_____2__h31131 = w2__h31125;
      5'b00100: _theResult_____2__h31131 = new_st_val__h32180;
      5'b01000: _theResult_____2__h31131 = new_st_val__h32188;
      5'b01100: _theResult_____2__h31131 = new_st_val__h32184;
      5'b10000: _theResult_____2__h31131 = new_st_val__h32203;
      5'b11000: _theResult_____2__h31131 = new_st_val__h32192;
      5'b11100: _theResult_____2__h31131 = new_st_val__h32197;
      default: _theResult_____2__h31131 = new_st_val__h32208;
    endcase
  end
  always@(rg_f3 or word64__h30841 or _theResult___fst__h31113)
  begin
    case (rg_f3[1:0])
      2'b0, 2'b01, 2'b10:
	  io_req_wr_data_wdata__h30995 = _theResult___fst__h31113;
      2'd3: io_req_wr_data_wdata__h30995 = word64__h30841;
    endcase
  end
  always@(rg_f3 or IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_1_E_ETC___d511)
  begin
    case (rg_f3)
      3'b0, 3'b001, 3'b010, 3'b011, 3'b100, 3'b101, 3'b110:
	  new_value__h18869 =
	      IF_rg_addr_9_BITS_2_TO_0_36_EQ_0x0_37_THEN_1_E_ETC___d511;
      3'd7: new_value__h18869 = 64'd0;
    endcase
  end
  always@(x1_avValue_pa__h5389 or ram_word64_set$DOB or new_st_val__h6540)
  begin
    case (x1_avValue_pa__h5389[2:0])
      3'h0:
	  CASE_x1_avValue_pa389_BITS_2_TO_0_0x0_ram_word_ETC__q45 =
	      { ram_word64_set$DOB[63:32], new_st_val__h6540[31:0] };
      3'h4:
	  CASE_x1_avValue_pa389_BITS_2_TO_0_0x0_ram_word_ETC__q45 =
	      { new_st_val__h6540[31:0], ram_word64_set$DOB[31:0] };
      default: CASE_x1_avValue_pa389_BITS_2_TO_0_0x0_ram_word_ETC__q45 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_f3 or
	  ram_word64_set$DOB or
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d671 or
	  IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d680 or
	  CASE_x1_avValue_pa389_BITS_2_TO_0_0x0_ram_word_ETC__q45 or
	  new_st_val__h6540)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_32_EQ_0b0_33_THEN_IF_IF_rg_priv_9_ULE_ETC___d689 =
	      IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d671;
      3'b001:
	  IF_rg_f3_32_EQ_0b0_33_THEN_IF_IF_rg_priv_9_ULE_ETC___d689 =
	      IF_IF_rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_ETC___d680;
      3'b010:
	  IF_rg_f3_32_EQ_0b0_33_THEN_IF_IF_rg_priv_9_ULE_ETC___d689 =
	      CASE_x1_avValue_pa389_BITS_2_TO_0_0x0_ram_word_ETC__q45;
      3'b011:
	  IF_rg_f3_32_EQ_0b0_33_THEN_IF_IF_rg_priv_9_ULE_ETC___d689 =
	      new_st_val__h6540;
      default: IF_rg_f3_32_EQ_0b0_33_THEN_IF_IF_rg_priv_9_ULE_ETC___d689 =
		   ram_word64_set$DOB;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY 4'd0;
	master_xactor_crg_rd_addr_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	master_xactor_crg_rd_data_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	master_xactor_crg_wr_addr_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	master_xactor_crg_wr_data_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	master_xactor_crg_wr_resp_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY 7'd0;
	rg_lower_word32_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_requesting_cline <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (ctr_wr_rsps_pending_crg$EN)
	  ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY
	      ctr_wr_rsps_pending_crg$D_IN;
	if (master_xactor_crg_rd_addr_full$EN)
	  master_xactor_crg_rd_addr_full <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_crg_rd_addr_full$D_IN;
	if (master_xactor_crg_rd_data_full$EN)
	  master_xactor_crg_rd_data_full <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_crg_rd_data_full$D_IN;
	if (master_xactor_crg_wr_addr_full$EN)
	  master_xactor_crg_wr_addr_full <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_crg_wr_addr_full$D_IN;
	if (master_xactor_crg_wr_data_full$EN)
	  master_xactor_crg_wr_data_full <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_crg_wr_data_full$D_IN;
	if (master_xactor_crg_wr_resp_full$EN)
	  master_xactor_crg_wr_resp_full <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_crg_wr_resp_full$D_IN;
	if (rg_cset_in_cache$EN)
	  rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY rg_cset_in_cache$D_IN;
	if (rg_lower_word32_full$EN)
	  rg_lower_word32_full <= `BSV_ASSIGNMENT_DELAY
	      rg_lower_word32_full$D_IN;
	if (rg_lrsc_valid$EN)
	  rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY rg_lrsc_valid$D_IN;
	if (rg_requesting_cline$EN)
	  rg_requesting_cline <= `BSV_ASSIGNMENT_DELAY
	      rg_requesting_cline$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
      end
    if (master_xactor_rg_rd_addr$EN)
      master_xactor_rg_rd_addr <= `BSV_ASSIGNMENT_DELAY
	  master_xactor_rg_rd_addr$D_IN;
    if (master_xactor_rg_rd_data$EN)
      master_xactor_rg_rd_data <= `BSV_ASSIGNMENT_DELAY
	  master_xactor_rg_rd_data$D_IN;
    if (master_xactor_rg_wr_addr$EN)
      master_xactor_rg_wr_addr <= `BSV_ASSIGNMENT_DELAY
	  master_xactor_rg_wr_addr$D_IN;
    if (master_xactor_rg_wr_data$EN)
      master_xactor_rg_wr_data <= `BSV_ASSIGNMENT_DELAY
	  master_xactor_rg_wr_data$D_IN;
    if (master_xactor_rg_wr_resp$EN)
      master_xactor_rg_wr_resp <= `BSV_ASSIGNMENT_DELAY
	  master_xactor_rg_wr_resp$D_IN;
    if (rg_addr$EN) rg_addr <= `BSV_ASSIGNMENT_DELAY rg_addr$D_IN;
    if (rg_amo_funct7$EN)
      rg_amo_funct7 <= `BSV_ASSIGNMENT_DELAY rg_amo_funct7$D_IN;
    if (rg_error_during_refill$EN)
      rg_error_during_refill <= `BSV_ASSIGNMENT_DELAY
	  rg_error_during_refill$D_IN;
    if (rg_exc_code$EN) rg_exc_code <= `BSV_ASSIGNMENT_DELAY rg_exc_code$D_IN;
    if (rg_f3$EN) rg_f3 <= `BSV_ASSIGNMENT_DELAY rg_f3$D_IN;
    if (rg_ld_val$EN) rg_ld_val <= `BSV_ASSIGNMENT_DELAY rg_ld_val$D_IN;
    if (rg_lower_word32$EN)
      rg_lower_word32 <= `BSV_ASSIGNMENT_DELAY rg_lower_word32$D_IN;
    if (rg_lrsc_pa$EN) rg_lrsc_pa <= `BSV_ASSIGNMENT_DELAY rg_lrsc_pa$D_IN;
    if (rg_mstatus_MXR$EN)
      rg_mstatus_MXR <= `BSV_ASSIGNMENT_DELAY rg_mstatus_MXR$D_IN;
    if (rg_op$EN) rg_op <= `BSV_ASSIGNMENT_DELAY rg_op$D_IN;
    if (rg_pa$EN) rg_pa <= `BSV_ASSIGNMENT_DELAY rg_pa$D_IN;
    if (rg_priv$EN) rg_priv <= `BSV_ASSIGNMENT_DELAY rg_priv$D_IN;
    if (rg_pte_pa$EN) rg_pte_pa <= `BSV_ASSIGNMENT_DELAY rg_pte_pa$D_IN;
    if (rg_req_byte_in_cline$EN)
      rg_req_byte_in_cline <= `BSV_ASSIGNMENT_DELAY rg_req_byte_in_cline$D_IN;
    if (rg_satp$EN) rg_satp <= `BSV_ASSIGNMENT_DELAY rg_satp$D_IN;
    if (rg_sstatus_SUM$EN)
      rg_sstatus_SUM <= `BSV_ASSIGNMENT_DELAY rg_sstatus_SUM$D_IN;
    if (rg_st_amo_val$EN)
      rg_st_amo_val <= `BSV_ASSIGNMENT_DELAY rg_st_amo_val$D_IN;
    if (rg_word64_set_in_cache$EN)
      rg_word64_set_in_cache <= `BSV_ASSIGNMENT_DELAY
	  rg_word64_set_in_cache$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_verbosity = 4'hA;
    ctr_wr_rsps_pending_crg = 4'hA;
    master_xactor_crg_rd_addr_full = 1'h0;
    master_xactor_crg_rd_data_full = 1'h0;
    master_xactor_crg_wr_addr_full = 1'h0;
    master_xactor_crg_wr_data_full = 1'h0;
    master_xactor_crg_wr_resp_full = 1'h0;
    master_xactor_rg_rd_addr = 67'h2AAAAAAAAAAAAAAAA;
    master_xactor_rg_rd_data = 66'h2AAAAAAAAAAAAAAAA;
    master_xactor_rg_wr_addr = 67'h2AAAAAAAAAAAAAAAA;
    master_xactor_rg_wr_data = 72'hAAAAAAAAAAAAAAAAAA;
    master_xactor_rg_wr_resp = 2'h2;
    rg_addr = 32'hAAAAAAAA;
    rg_amo_funct7 = 7'h2A;
    rg_cset_in_cache = 7'h2A;
    rg_error_during_refill = 1'h0;
    rg_exc_code = 4'hA;
    rg_f3 = 3'h2;
    rg_ld_val = 64'hAAAAAAAAAAAAAAAA;
    rg_lower_word32 = 32'hAAAAAAAA;
    rg_lower_word32_full = 1'h0;
    rg_lrsc_pa = 34'h2AAAAAAAA;
    rg_lrsc_valid = 1'h0;
    rg_mstatus_MXR = 1'h0;
    rg_op = 2'h2;
    rg_pa = 34'h2AAAAAAAA;
    rg_priv = 2'h2;
    rg_pte_pa = 34'h2AAAAAAAA;
    rg_req_byte_in_cline = 64'hAAAAAAAAAAAAAAAA;
    rg_requesting_cline = 1'h0;
    rg_satp = 32'hAAAAAAAA;
    rg_sstatus_SUM = 1'h0;
    rg_st_amo_val = 64'hAAAAAAAAAAAAAAAA;
    rg_state = 4'hA;
    rg_word64_set_in_cache = 9'h0AA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 &&
	  cfg_verbosity != 4'd0 &&
	  !f_reset_reqs$D_OUT)
	begin
	  v__h4212 = $stime;
	  #0;
	end
    v__h4206 = v__h4212 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 &&
	  cfg_verbosity != 4'd0 &&
	  !f_reset_reqs$D_OUT)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		   v__h4206,
		   "D_MMU_Cache",
		   $signed(32'd128),
		   $signed(32'd1));
	else
	  $display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		   v__h4206,
		   "I_MMU_Cache",
		   $signed(32'd128),
		   $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  f_reset_reqs$D_OUT)
	begin
	  v__h4313 = $stime;
	  #0;
	end
    v__h4307 = v__h4313 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 7'd127 &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  f_reset_reqs$D_OUT)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_reset: Flushed", v__h4307, "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_reset: Flushed", v__h4307, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_rereq && !cfg_verbosity_read__0_ULE_1___d11)
	$display("    fa_req_ram_B tagCSet [0x%0x] word64_set [0x%0d]",
		 rg_addr[11:5],
		 rg_addr[11:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_req &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h27819 = $stime;
	  #0;
	end
    v__h27813 = v__h27819 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_req &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_near_mem_read_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h27813,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_near_mem_read_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h27813,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_req &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$display("    ",
		 { 1'd1, fabric_addr__h30383, 72'hAAAAAAAAAAAAAAAAAA });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h28004 = $stime;
	  #0;
	end
    v__h27998 = v__h28004 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_near_mem_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h27998,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_near_mem_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h27998,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("Near_Mem_IO_Rsp { ", "read_not_write: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "ok: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  f_near_mem_io_rsps$D_OUT[64])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  !f_near_mem_io_rsps$D_OUT[64])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", f_near_mem_io_rsps$D_OUT[63:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  f_near_mem_io_rsps$D_OUT[64] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h28406 = $stime;
	  #0;
	end
    v__h28400 = v__h28406 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  f_near_mem_io_rsps$D_OUT[64] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h28400,
		   "D_MMU_Cache",
		   rg_addr,
		   f_near_mem_io_rsps$D_OUT[63:0]);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h28400,
		   "I_MMU_Cache",
		   rg_addr,
		   f_near_mem_io_rsps$D_OUT[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  !f_near_mem_io_rsps$D_OUT[64] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h28513 = $stime;
	  #0;
	end
    v__h28507 = v__h28513 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  !f_near_mem_io_rsps$D_OUT[64] &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_near_mem_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		   v__h28507,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_io_near_mem_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		   v__h28507,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_maintain_io_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h28794 = $stime;
	  #0;
	end
    v__h28788 = v__h28794 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_maintain_io_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h28788,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_ld_val);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h28788,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_ld_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h29981 = $stime;
	  #0;
	end
    v__h29975 = v__h29981 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_near_mem_write_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h29975,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_near_mem_write_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h29975,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("Near_Mem_IO_Req { ", "read_not_write: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", fabric_addr__h30383);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", value__h30041);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", io_req_wr_data_wstrb__h30996, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h30123 = $stime;
	  #0;
	end
    v__h30117 = v__h30123 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_near_mem_write_rsp",
		   v__h30117,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_io_near_mem_write_rsp",
		   v__h30117,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("Near_Mem_IO_Rsp { ", "read_not_write: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "ok: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  f_near_mem_io_rsps$D_OUT[64])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  !f_near_mem_io_rsps$D_OUT[64])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", f_near_mem_io_rsps$D_OUT[63:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req && !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h30303 = $stime;
	  #0;
	end
    v__h30297 = v__h30303 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req && !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_AMO_SC_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h30297,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_AMO_SC_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h30297,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req && !cfg_verbosity_read__0_ULE_1___d11)
	$display("    FAIL due to I/O address.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req && !cfg_verbosity_read__0_ULE_1___d11)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_reset && !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h3847 = $stime;
	  #0;
	end
    v__h3841 = v__h3847 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_reset && !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_start_reset", v__h3841, "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_start_reset", v__h3841, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_21_BITS_65_TO_64_22_E_ETC___d863)
	begin
	  v__h22838 = $stime;
	  #0;
	end
    v__h22832 = v__h22838 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_21_BITS_65_TO_64_22_E_ETC___d863)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		   v__h22832,
		   "D_MMU_Cache",
		   rg_addr,
		   _theResult____h22209,
		   rg_pte_pa,
		   exc_code___1__h5788);
	else
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		   v__h22832,
		   "I_MMU_Cache",
		   rg_addr,
		   _theResult____h22209,
		   rg_pte_pa,
		   exc_code___1__h5788);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_21_BITS_65_TO_64_22_E_ETC___d881)
	begin
	  v__h22940 = $stime;
	  #0;
	end
    v__h22934 = v__h22940 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_21_BITS_65_TO_64_22_E_ETC___d881)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: continue to level 0",
		   v__h22934,
		   "D_MMU_Cache",
		   rg_addr,
		   _theResult____h22209,
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: continue to level 0",
		   v__h22934,
		   "I_MMU_Cache",
		   rg_addr,
		   _theResult____h22209,
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_21_BITS_65_TO_64_22_E_ETC___d881)
	$write("    Req for level 0 PTE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_21_BITS_65_TO_64_22_E_ETC___d881)
	$write("AXI4_Lite_Rd_Addr { ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_21_BITS_65_TO_64_22_E_ETC___d881)
	$write("'h%h", lev_0_pte_pa_w64_fa__h22447);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_21_BITS_65_TO_64_22_E_ETC___d881)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_21_BITS_65_TO_64_22_E_ETC___d881)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_21_BITS_65_TO_64_22_E_ETC___d881)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_21_BITS_65_TO_64_22_E_ETC___d881)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_21_BITS_65_TO_64_22_E_ETC___d881)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_21_BITS_65_TO_64_22_E_ETC___d890)
	begin
	  v__h23158 = $stime;
	  #0;
	end
    v__h23152 = v__h23158 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_21_BITS_65_TO_64_22_E_ETC___d890)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE for megapage",
		   v__h23152,
		   "D_MMU_Cache",
		   rg_addr,
		   _theResult____h22209,
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE for megapage",
		   v__h23152,
		   "I_MMU_Cache",
		   rg_addr,
		   _theResult____h22209,
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_21_BITS_65_TO_64_22_E_ETC___d890)
	$display("    Addr Space megapage pa: 0x%0h", lev_0_PTN_pa__h22443);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_21_BITS_65_TO_64_22_E_ETC___d896)
	begin
	  v__h23046 = $stime;
	  #0;
	end
    v__h23040 = v__h23046 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data_21_BITS_65_TO_64_22_E_ETC___d896)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: megapage pte 0x%0h @ 0x%0h",
		   v__h23040,
		   "D_MMU_Cache",
		   rg_addr,
		   _theResult____h22209,
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: megapage pte 0x%0h @ 0x%0h",
		   v__h23040,
		   "I_MMU_Cache",
		   rg_addr,
		   _theResult____h22209,
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  _theResult____h22209[0] &&
	  (_theResult____h22209[1] || !_theResult____h22209[2]) &&
	  (_theResult____h22209[3] || _theResult____h22209[1]) &&
	  _theResult____h22209[19:10] != 10'd0)
	$display("    Invalid PTE: PPN [0] is not zero; page fault %0d",
		 exc_code___1__h5788);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h22767 = $stime;
	  #0;
	end
    v__h22761 = v__h22767 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_1 &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		   v__h22761,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pte_pa,
		   access_exc_code__h3356);
	else
	  $display("%0d: %s.rl_ptw_level_1: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		   v__h22761,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pte_pa,
		   access_exc_code__h3356);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data_21_BITS_65_TO_64_22_E_ETC___d863)
	begin
	  v__h23702 = $stime;
	  #0;
	end
    v__h23696 = v__h23702 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data_21_BITS_65_TO_64_22_E_ETC___d863)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		   v__h23696,
		   "D_MMU_Cache",
		   rg_addr,
		   _theResult____h22209,
		   rg_pte_pa,
		   exc_code___1__h5788);
	else
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: Invalid PTE; page fault %0d",
		   v__h23696,
		   "I_MMU_Cache",
		   rg_addr,
		   _theResult____h22209,
		   rg_pte_pa,
		   exc_code___1__h5788);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data_21_BITS_65_TO_64_22_E_ETC___d881)
	begin
	  v__h23773 = $stime;
	  #0;
	end
    v__h23767 = v__h23773 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data_21_BITS_65_TO_64_22_E_ETC___d881)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x50h: Not a leaf PTE; page fault %0d",
		   v__h23767,
		   "D_MMU_Cache",
		   rg_addr,
		   _theResult____h22209,
		   rg_pte_pa,
		   exc_code___1__h5788);
	else
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x50h: Not a leaf PTE; page fault %0d",
		   v__h23767,
		   "I_MMU_Cache",
		   rg_addr,
		   _theResult____h22209,
		   rg_pte_pa,
		   exc_code___1__h5788);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data_21_BITS_65_TO_64_22_E_ETC___d922)
	begin
	  v__h23855 = $stime;
	  #0;
	end
    v__h23849 = v__h23855 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data_21_BITS_65_TO_64_22_E_ETC___d922)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE",
		   v__h23849,
		   "D_MMU_Cache",
		   rg_addr,
		   _theResult____h22209,
		   rg_pte_pa);
	else
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte 0x%0h @ 0x%0h: leaf PTE",
		   v__h23849,
		   "I_MMU_Cache",
		   rg_addr,
		   _theResult____h22209,
		   rg_pte_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data_21_BITS_65_TO_64_22_E_ETC___d922)
	$display("    Addr Space page pa: 0x%0h", lev_0_PTN_pa__h22443);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h23631 = $stime;
	  #0;
	end
    v__h23625 = v__h23631 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_ptw_level_0 &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		   v__h23625,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pte_pa,
		   access_exc_code__h3356);
	else
	  $display("%0d: %s.rl_ptw_level_0: for eaddr 0x%0h: pte_pa 0x%0h: FABRIC_RSP_ERR: access exception %0d",
		   v__h23625,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pte_pa,
		   access_exc_code__h3356);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_48___d949)
	begin
	  v__h24792 = $stime;
	  #0;
	end
    v__h24786 = v__h24792 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_48___d949)
	if (dmem_not_imem)
	  $write("%0d: %s.rl_cache_refill_req_loop: mem req: ",
		 v__h24786,
		 "D_MMU_Cache");
	else
	  $write("%0d: %s.rl_cache_refill_req_loop: mem req: ",
		 v__h24786,
		 "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_48___d949)
	$write("AXI4_Lite_Rd_Addr { ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_48___d949)
	$write("'h%h", cline_fabric_addr__h24626);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_48___d949)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_48___d949)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_48___d949)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_48___d949)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_48___d949)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h4462 = $stime;
	  #0;
	end
    v__h4456 = v__h4462 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h",
		   v__h4456,
		   "D_MMU_Cache",
		   rg_addr);
	else
	  $display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h",
		   v__h4456,
		   "I_MMU_Cache",
		   rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  rg_satp[31])
	$display("        Priv:%0d  SATP:{mode %0d asid %0h pa %0h}  VA:%0h.%0h.%0h",
		 rg_priv,
		 rg_satp[31],
		 rg_satp[30:22],
		 satp_pa__h2614,
		 rg_addr[31:22],
		 rg_addr[21:12],
		 rg_addr[11:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$display("        eaddr = {CTag 0x%0h  CSet 0x%0h  Word64 0x%0h  Byte 0x%0h}",
		 { 2'd0, rg_addr[31:12] },
		 rg_addr[11:5],
		 rg_addr[4:3],
		 rg_addr[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("        CSet 0x%0x: (state, tag):", rg_addr[11:5]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(" (");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  ram_state_and_ctag_cset$DOB[22])
	$write("CTAG_CLEAN");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  !ram_state_and_ctag_cset$DOB[22])
	$write("CTAG_EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  ram_state_and_ctag_cset$DOB[22])
	$write(", 0x%0x", ram_state_and_ctag_cset$DOB[21:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  !ram_state_and_ctag_cset$DOB[22])
	$write(", --");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(")");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:5],
	       rg_addr[4:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(" 0x%0x", ram_word64_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("    TLB result: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("VM_Xlate_Result { ", "outcome: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d300)
	$write("VM_XLATE_OK");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d303)
	$write("VM_XLATE_EXCEPTION");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  rg_priv_9_ULE_0b1___d40 &&
	  rg_satp[31] &&
	  !tlb$lookup[68])
	$write("VM_XLATE_TLB_MISS");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "pa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", x1_avValue_pa__h5389);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", x1_avValue_exc_code__h5390);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "pte_modified: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d324)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  rg_priv_9_ULE_0b1_0_AND_rg_satp_2_BIT_31_3_7_A_ETC___d334)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "pte: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", x1_avValue_pte__h5392, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d365)
	$display("    => IO_REQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d525)
	begin
	  v__h13894 = $stime;
	  #0;
	end
    v__h13888 = v__h13894 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d525)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h13888,
		   "D_MMU_Cache",
		   rg_addr,
		   word64__h6415,
		   64'd0);
	else
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h13888,
		   "I_MMU_Cache",
		   rg_addr,
		   word64__h6415,
		   64'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$lookup[68]) &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d538)
	$display("        AMO LR: reserving PA 0x%0h", x1_avValue_pa__h5389);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d525)
	$display("        Read-hit: addr 0x%0h word64 0x%0h",
		 rg_addr,
		 word64__h6415);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d544)
	$display("        Read Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d551)
	$display("        AMO LR: cache refill: cancelling LR/SC reservation for PA 0x%0h",
		 rg_lrsc_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d723)
	$display("        ST: cancelling LR/SC reservation for PA",
		 x1_avValue_pa__h5389);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  (!rg_priv_9_ULE_0b1___d40 || !rg_satp[31] || tlb$lookup[68]) &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d729)
	$display("        AMO SC: fail: reserved addr 0x%0h, this address 0x%0h",
		 rg_lrsc_pa,
		 x1_avValue_pa__h5389);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d736)
	$display("        AMO SC: fail due to invalid LR/SC reservation");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d741)
	$display("        AMO SC result = %0d", lrsc_result__h14271);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d747)
	$display("        Write-Cache-Hit: pa 0x%0h word64 0x%0h",
		 x1_avValue_pa__h5389,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d747)
	$write("        New Word64_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d747)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:5],
	       rg_addr[4:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d747)
	$write(" 0x%0x",
	       IF_rg_f3_32_EQ_0b0_33_THEN_IF_IF_rg_priv_9_ULE_ETC___d624);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d747)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d753)
	$display("        Write-Cache-Miss: pa 0x%0h word64 0x%0h",
		 x1_avValue_pa__h5389,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d760)
	begin
	  v__h20345 = $stime;
	  #0;
	end
    v__h20339 = v__h20345 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d760)
	$display("%0d: ERROR: CreditCounter: overflow", v__h20339);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d760)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d768)
	$display("        Write-Hit/Miss: eaddr 0x%0h word64 0x%0h",
		 rg_addr,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d768)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d768)
	$write("AXI4_Lite_Wr_Addr { ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d768)
	$write("'h%h", mem_req_wr_addr_awaddr__h19888);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d768)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d768)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d768)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d768)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d768)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d768)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d768)
	$write("AXI4_Lite_Wr_Data { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d768)
	$write("'h%h", mem_req_wr_data_wdata__h19999);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d768)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d768)
	$write("'h%h", mem_req_wr_data_wstrb__h20000, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d768)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d768)
	$display("    => rl_write_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d774)
	begin
	  v__h19778 = $stime;
	  #0;
	end
    v__h19772 = v__h19778 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d774)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h19772,
		   "D_MMU_Cache",
		   rg_addr,
		   64'd1,
		   64'd0);
	else
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h19772,
		   "I_MMU_Cache",
		   rg_addr,
		   64'd1,
		   64'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d774)
	$display("        AMO SC: Fail response for addr 0x%0h", rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d781)
	$display("        AMO Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d787)
	begin
	  v__h21072 = $stime;
	  #0;
	end
    v__h21066 = v__h21072 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d787)
	$display("%0d: ERROR: CreditCounter: overflow", v__h21066);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d787)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d795)
	$display("        AMO_op: cancelling LR/SC reservation for PA",
		 x1_avValue_pa__h5389);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d804)
	$display("        AMO: addr 0x%0h amo_f7 0x%0h f3 %0d rs2_val 0x%0h",
		 rg_addr,
		 rg_amo_funct7,
		 rg_f3,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d804)
	$display("          PA 0x%0h ", x1_avValue_pa__h5389);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d804)
	$display("          Cache word64 0x%0h, load-result 0x%0h",
		 word64__h6415,
		 word64__h6415);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d804)
	$display("          0x%0h  op  0x%0h -> 0x%0h",
		 word64__h6415,
		 word64__h6415,
		 new_st_val__h6540);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d804)
	$write("          New Word64_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d804)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:5],
	       rg_addr[4:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d804)
	$write(" 0x%0x",
	       IF_rg_f3_32_EQ_0b0_33_THEN_IF_IF_rg_priv_9_ULE_ETC___d689);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d804)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d804)
	$write("          To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d804)
	$write("AXI4_Lite_Wr_Addr { ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d804)
	$write("'h%h", mem_req_wr_addr_awaddr__h19888);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d804)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d804)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d804)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d804)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d804)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d804)
	$write("                     ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d804)
	$write("AXI4_Lite_Wr_Data { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d804)
	$write("'h%h", mem_req_wr_data_wdata__h20757);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d804)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d804)
	$write("'h%h", mem_req_wr_data_wstrb__h20000, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_rg_priv_9_ULE_0b1_0_1_OR_NOT_rg_satp_2_BIT_ETC___d804)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_48___d949)
	begin
	  v__h24914 = $stime;
	  #0;
	end
    v__h24908 = v__h24914 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_48___d949)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_cache_refill_rsps_loop:",
		   v__h24908,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_cache_refill_rsps_loop:",
		   v__h24908,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_48___d949)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_48___d949)
	$write("AXI4_Lite_Rd_Data { ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_48___d949 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0)
	$write("AXI4_LITE_OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_48___d949 &&
	  master_xactor_rg_rd_data[65:64] == 2'd1)
	$write("AXI4_LITE_EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_48___d949 &&
	  master_xactor_rg_rd_data[65:64] == 2'd2)
	$write("AXI4_LITE_SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_48___d949 &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  master_xactor_rg_rd_data[65:64] != 2'd1 &&
	  master_xactor_rg_rd_data[65:64] != 2'd2)
	$write("AXI4_LITE_DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_48___d949)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_48___d949)
	$write("'h%h", master_xactor_rg_rd_data[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_48___d949)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_48___d949)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_48___d949)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h25139 = $stime;
	  #0;
	end
    v__h25133 = v__h25139 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d",
		   v__h25133,
		   "D_MMU_Cache",
		   access_exc_code__h3356);
	else
	  $display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d",
		   v__h25133,
		   "I_MMU_Cache",
		   access_exc_code__h3356);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  rg_word64_set_in_cache[1:0] == 2'd3 &&
	  (master_xactor_rg_rd_data[65:64] != 2'd0 ||
	   rg_error_during_refill) &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$display("    => MODULE_EXCEPTION_RSP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  rg_word64_set_in_cache[1:0] == 2'd3 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !rg_error_during_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$display("    => CACHE_REREQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_48___d949)
	$display("        Updating Cache [0x%0x] (Word64_Set %0d) old => new",
		 rg_word64_set_in_cache,
		 rg_word64_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_48___d949)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:5],
	       rg_word64_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_48___d949)
	$write(" 0x%0x", ram_word64_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_48___d949)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_48___d949)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:5],
	       rg_word64_set_in_cache[1:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_48___d949)
	$write(" 0x%0x", master_xactor_rg_rd_data[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_48___d949)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h26914 = $stime;
	  #0;
	end
    v__h26908 = v__h26914 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_read_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h26908,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_read_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h26908,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req && !cfg_verbosity_read__0_ULE_1___d11)
	$display("    ", { fabric_addr__h30383, 3'd0 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h27080 = $stime;
	  #0;
	end
    v__h27074 = v__h27080 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h27074,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h27074,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11)
	$write("AXI4_Lite_Rd_Data { ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0)
	$write("AXI4_LITE_OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11 &&
	  master_xactor_rg_rd_data[65:64] == 2'd1)
	$write("AXI4_LITE_EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11 &&
	  master_xactor_rg_rd_data[65:64] == 2'd2)
	$write("AXI4_LITE_SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11 &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  master_xactor_rg_rd_data[65:64] != 2'd1 &&
	  master_xactor_rg_rd_data[65:64] != 2'd2)
	$write("AXI4_LITE_DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", master_xactor_rg_rd_data[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp && !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h27479 = $stime;
	  #0;
	end
    v__h27473 = v__h27479 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h27473,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0]);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h27473,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h27586 = $stime;
	  #0;
	end
    v__h27580 = v__h27586 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		   v__h27580,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		   v__h27580,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && ctr_wr_rsps_pending_crg == 4'd15)
	begin
	  v__h29316 = $stime;
	  #0;
	end
    v__h29310 = v__h29316 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && ctr_wr_rsps_pending_crg == 4'd15)
	$display("%0d: ERROR: CreditCounter: overflow", v__h29310);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && ctr_wr_rsps_pending_crg == 4'd15)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h29461 = $stime;
	  #0;
	end
    v__h29455 = v__h29461 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_write_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h29455,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_write_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h29455,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("AXI4_Lite_Wr_Addr { ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", io_req_wr_addr_awaddr__h30836);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("AXI4_Lite_Wr_Data { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", value__h30041);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", io_req_wr_data_wstrb__h30996, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && !cfg_verbosity_read__0_ULE_1___d11)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h30509 = $stime;
	  #0;
	end
    v__h30503 = v__h30509 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_AMO_op_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h30503,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_AMO_op_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h30503,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req && !cfg_verbosity_read__0_ULE_1___d11)
	$display("    ", { fabric_addr__h30383, 3'd0 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h30641 = $stime;
	  #0;
	end
    v__h30635 = v__h30641 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_AMO_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h30635,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_AMO_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h30635,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("AXI4_Lite_Rd_Data { ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0)
	$write("AXI4_LITE_OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  master_xactor_rg_rd_data[65:64] == 2'd1)
	$write("AXI4_LITE_EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  master_xactor_rg_rd_data[65:64] == 2'd2)
	$write("AXI4_LITE_SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11 &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  master_xactor_rg_rd_data[65:64] != 2'd1 &&
	  master_xactor_rg_rd_data[65:64] != 2'd2)
	$write("AXI4_LITE_DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", master_xactor_rg_rd_data[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  ctr_wr_rsps_pending_crg == 4'd15)
	begin
	  v__h32421 = $stime;
	  #0;
	end
    v__h32415 = v__h32421 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  ctr_wr_rsps_pending_crg == 4'd15)
	$display("%0d: ERROR: CreditCounter: overflow", v__h32415);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  ctr_wr_rsps_pending_crg == 4'd15)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h32771 = $stime;
	  #0;
	end
    v__h32765 = v__h32771 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h32765,
		   "D_MMU_Cache",
		   rg_addr,
		   new_ld_val__h30768);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h32765,
		   "I_MMU_Cache",
		   rg_addr,
		   new_ld_val__h30768);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h32887 = $stime;
	  #0;
	end
    v__h32881 = v__h32887 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_AMO_read_rsp; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h32881,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_AMO_read_rsp; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h32881,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("AXI4_Lite_Wr_Addr { ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", io_req_wr_addr_awaddr__h30836);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("AXI4_Lite_Wr_Data { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", io_req_wr_data_wdata__h30995);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", io_req_wr_data_wstrb__h30996, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h30922 = $stime;
	  #0;
	end
    v__h30916 = v__h30922 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_AMO_read_rsp: FABRIC_RSP_ERR: raising trap STORE_AMO_ACCESS_FAULT",
		   v__h30916,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_io_AMO_read_rsp: FABRIC_RSP_ERR: raising trap STORE_AMO_ACCESS_FAULT",
		   v__h30916,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h22088 = $stime;
	  #0;
	end
    v__h22082 = v__h22088 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_start_tlb_refill for eaddr 0x%0h",
		   v__h22082,
		   "D_MMU_Cache",
		   rg_addr);
	else
	  $display("%0d: %s.rl_start_tlb_refill for eaddr 0x%0h",
		   v__h22082,
		   "I_MMU_Cache",
		   rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("    Req for level 1 PTE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("AXI4_Lite_Rd_Addr { ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", lev_1_pte_pa_w64_fa__h21894);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_tlb_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h33896 = $stime;
	  #0;
	end
    v__h33890 = v__h33896 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $write("%0d: %s.req: op:", v__h33890, "D_MMU_Cache");
	else
	  $write("%0d: %s.req: op:", v__h33890, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11 && req_op == 2'd0)
	$write("CACHE_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11 && req_op == 2'd1)
	$write("CACHE_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11 && req_op != 2'd0 &&
	  req_op != 2'd1)
	$write("CACHE_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(" f3:%0d addr:0x%0h st_value:0x%0h priv:",
	       req_f3,
	       req_addr,
	       req_st_value);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11 && req_priv == 2'b0)
	$write("U");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11 && req_priv == 2'b01)
	$write("S");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11 && req_priv == 2'b11)
	$write("M");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11 && req_priv != 2'b0 &&
	  req_priv != 2'b01 &&
	  req_priv != 2'b11)
	$write("RESERVED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11)
	$write(" sstatus_SUM:%0d mstatus_MXR:%0d satp:0x%0h",
	       req_sstatus_SUM,
	       req_mstatus_MXR,
	       req_satp,
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && !cfg_verbosity_read__0_ULE_1___d11)
	$display("    amo_funct7 = 0x%0h", req_amo_funct7);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req &&
	  req_f3_BITS_1_TO_0_308_EQ_0b0_309_OR_req_f3_BI_ETC___d1338 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$display("    fa_req_ram_B tagCSet [0x%0x] word64_set [0x%0d]",
		 req_addr[11:5],
		 req_addr[11:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h24573 = $stime;
	  #0;
	end
    v__h24567 = v__h24573 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $write("%0d: %s.rl_start_cache_refill: mem req: ",
		 v__h24567,
		 "D_MMU_Cache");
	else
	  $write("%0d: %s.rl_start_cache_refill: mem req: ",
		 v__h24567,
		 "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("AXI4_Lite_Rd_Addr { ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", { 30'd0, cline_addr__h24625 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$display("    Victim way is %0d; => CACHE_REFILL", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_tlb_flush && !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h35050 = $stime;
	  #0;
	end
    v__h35044 = v__h35050 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_tlb_flush && !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $display("%0d: %s.tlb_flush", v__h35044, "D_MMU_Cache");
	else
	  $display("%0d: %s.tlb_flush", v__h35044, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	begin
	  v__h33508 = $stime;
	  #0;
	end
    v__h33502 = v__h33508 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	if (dmem_not_imem)
	  $write("%0d: %s.rl_discard_write_rsp: pending %0d ",
		 v__h33502,
		 "D_MMU_Cache",
		 $unsigned(b__h21883));
	else
	  $write("%0d: %s.rl_discard_write_rsp: pending %0d ",
		 v__h33502,
		 "I_MMU_Cache",
		 $unsigned(b__h21883));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("AXI4_Lite_Wr_Resp { ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("AXI4_LITE_OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd0 &&
	  !cfg_verbosity_read__0_ULE_1___d11)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	begin
	  v__h33469 = $stime;
	  #0;
	end
    v__h33463 = v__h33469 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_discard_write_rsp: fabric response error: exit",
		   v__h33463,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_discard_write_rsp: fabric response error: exit",
		   v__h33463,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	$write("AXI4_Lite_Wr_Resp { ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd1)
	$write("AXI4_LITE_EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd2)
	$write("AXI4_LITE_SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0 &&
	  master_xactor_rg_wr_resp != 2'd1 &&
	  master_xactor_rg_wr_resp != 2'd2)
	$write("AXI4_LITE_DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	$finish(32'd1);
  end
  // synopsys translate_on
endmodule  // mkMMU_Cache

