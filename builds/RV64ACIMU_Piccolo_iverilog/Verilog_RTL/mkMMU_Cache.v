//
// Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
//
// On Thu Jan 10 22:09:53 EST 2019
//
//
// Ports:
// Name                         I/O  size props
// RDY_set_verbosity              O     1 const
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1
// valid                          O     1
// addr                           O    64 reg
// word64                         O    64
// st_amo_val                     O    64
// exc                            O     1
// exc_code                       O     4 reg
// RDY_server_flush_request_put   O     1 reg
// RDY_server_flush_response_get  O     1
// RDY_tlb_flush                  O     1 const
// mem_master_awvalid             O     1
// mem_master_awaddr              O    64 reg
// mem_master_awprot              O     3 reg
// mem_master_wvalid              O     1
// mem_master_wdata               O    64 reg
// mem_master_wstrb               O     8 reg
// mem_master_bready              O     1
// mem_master_arvalid             O     1
// mem_master_araddr              O    64 reg
// mem_master_arprot              O     3 reg
// mem_master_rready              O     1
// near_mem_io_client_request_get  O   137 reg
// RDY_near_mem_io_client_request_get  O     1 reg
// RDY_near_mem_io_client_response_put  O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_verbosity_verbosity        I     4 reg
// req_op                         I     2
// req_f3                         I     3
// req_amo_funct7                 I     7 reg
// req_addr                       I    64
// req_st_value                   I    64
// req_priv                       I     2 unused
// req_sstatus_SUM                I     1 unused
// req_mstatus_MXR                I     1 unused
// req_satp                       I    64 unused
// mem_master_awready             I     1
// mem_master_wready              I     1
// mem_master_bvalid              I     1
// mem_master_bresp               I     2 reg
// mem_master_arready             I     1
// mem_master_rvalid              I     1
// mem_master_rresp               I     2 reg
// mem_master_rdata               I    64 reg
// near_mem_io_client_response_put  I    66 reg
// EN_set_verbosity               I     1
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_req                         I     1
// EN_server_flush_request_put    I     1
// EN_server_flush_response_get   I     1
// EN_tlb_flush                   I     1 unused
// EN_near_mem_io_client_response_put  I     1
// EN_near_mem_io_client_request_get  I     1
//
// Combinational paths from inputs to outputs:
//   (mem_master_awready, mem_master_wready) -> valid
//   (mem_master_awready, mem_master_wready) -> word64
//   (mem_master_awready, mem_master_wready) -> st_amo_val
//   (mem_master_awready, mem_master_wready) -> mem_master_bready
//   (mem_master_awready, mem_master_wready, EN_req) -> mem_master_rready
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMMU_Cache(CLK,
		   RST_N,

		   set_verbosity_verbosity,
		   EN_set_verbosity,
		   RDY_set_verbosity,

		   EN_server_reset_request_put,
		   RDY_server_reset_request_put,

		   EN_server_reset_response_get,
		   RDY_server_reset_response_get,

		   req_op,
		   req_f3,
		   req_amo_funct7,
		   req_addr,
		   req_st_value,
		   req_priv,
		   req_sstatus_SUM,
		   req_mstatus_MXR,
		   req_satp,
		   EN_req,

		   valid,

		   addr,

		   word64,

		   st_amo_val,

		   exc,

		   exc_code,

		   EN_server_flush_request_put,
		   RDY_server_flush_request_put,

		   EN_server_flush_response_get,
		   RDY_server_flush_response_get,

		   EN_tlb_flush,
		   RDY_tlb_flush,

		   mem_master_awvalid,

		   mem_master_awaddr,

		   mem_master_awprot,

		   mem_master_awready,

		   mem_master_wvalid,

		   mem_master_wdata,

		   mem_master_wstrb,

		   mem_master_wready,

		   mem_master_bvalid,
		   mem_master_bresp,

		   mem_master_bready,

		   mem_master_arvalid,

		   mem_master_araddr,

		   mem_master_arprot,

		   mem_master_arready,

		   mem_master_rvalid,
		   mem_master_rresp,
		   mem_master_rdata,

		   mem_master_rready,

		   EN_near_mem_io_client_request_get,
		   near_mem_io_client_request_get,
		   RDY_near_mem_io_client_request_get,

		   near_mem_io_client_response_put,
		   EN_near_mem_io_client_response_put,
		   RDY_near_mem_io_client_response_put);
  parameter [0 : 0] dmem_not_imem = 1'b0;
  input  CLK;
  input  RST_N;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // action method req
  input  [1 : 0] req_op;
  input  [2 : 0] req_f3;
  input  [6 : 0] req_amo_funct7;
  input  [63 : 0] req_addr;
  input  [63 : 0] req_st_value;
  input  [1 : 0] req_priv;
  input  req_sstatus_SUM;
  input  req_mstatus_MXR;
  input  [63 : 0] req_satp;
  input  EN_req;

  // value method valid
  output valid;

  // value method addr
  output [63 : 0] addr;

  // value method word64
  output [63 : 0] word64;

  // value method st_amo_val
  output [63 : 0] st_amo_val;

  // value method exc
  output exc;

  // value method exc_code
  output [3 : 0] exc_code;

  // action method server_flush_request_put
  input  EN_server_flush_request_put;
  output RDY_server_flush_request_put;

  // action method server_flush_response_get
  input  EN_server_flush_response_get;
  output RDY_server_flush_response_get;

  // action method tlb_flush
  input  EN_tlb_flush;
  output RDY_tlb_flush;

  // value method mem_master_m_awvalid
  output mem_master_awvalid;

  // value method mem_master_m_awaddr
  output [63 : 0] mem_master_awaddr;

  // value method mem_master_m_awprot
  output [2 : 0] mem_master_awprot;

  // value method mem_master_m_awuser

  // action method mem_master_m_awready
  input  mem_master_awready;

  // value method mem_master_m_wvalid
  output mem_master_wvalid;

  // value method mem_master_m_wdata
  output [63 : 0] mem_master_wdata;

  // value method mem_master_m_wstrb
  output [7 : 0] mem_master_wstrb;

  // action method mem_master_m_wready
  input  mem_master_wready;

  // action method mem_master_m_bvalid
  input  mem_master_bvalid;
  input  [1 : 0] mem_master_bresp;

  // value method mem_master_m_bready
  output mem_master_bready;

  // value method mem_master_m_arvalid
  output mem_master_arvalid;

  // value method mem_master_m_araddr
  output [63 : 0] mem_master_araddr;

  // value method mem_master_m_arprot
  output [2 : 0] mem_master_arprot;

  // value method mem_master_m_aruser

  // action method mem_master_m_arready
  input  mem_master_arready;

  // action method mem_master_m_rvalid
  input  mem_master_rvalid;
  input  [1 : 0] mem_master_rresp;
  input  [63 : 0] mem_master_rdata;

  // value method mem_master_m_rready
  output mem_master_rready;

  // actionvalue method near_mem_io_client_request_get
  input  EN_near_mem_io_client_request_get;
  output [136 : 0] near_mem_io_client_request_get;
  output RDY_near_mem_io_client_request_get;

  // action method near_mem_io_client_response_put
  input  [65 : 0] near_mem_io_client_response_put;
  input  EN_near_mem_io_client_response_put;
  output RDY_near_mem_io_client_response_put;

  // signals for module outputs
  reg [63 : 0] word64;
  wire [136 : 0] near_mem_io_client_request_get;
  wire [63 : 0] addr,
		mem_master_araddr,
		mem_master_awaddr,
		mem_master_wdata,
		st_amo_val;
  wire [7 : 0] mem_master_wstrb;
  wire [3 : 0] exc_code;
  wire [2 : 0] mem_master_arprot, mem_master_awprot;
  wire RDY_near_mem_io_client_request_get,
       RDY_near_mem_io_client_response_put,
       RDY_server_flush_request_put,
       RDY_server_flush_response_get,
       RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_set_verbosity,
       RDY_tlb_flush,
       exc,
       mem_master_arvalid,
       mem_master_awvalid,
       mem_master_bready,
       mem_master_rready,
       mem_master_wvalid,
       valid;

  // inlined wires
  reg [3 : 0] ctr_wr_rsps_pending_crg$port0__write_1;
  wire [3 : 0] ctr_wr_rsps_pending_crg$port1__write_1,
	       ctr_wr_rsps_pending_crg$port2__read,
	       ctr_wr_rsps_pending_crg$port3__read;
  wire ctr_wr_rsps_pending_crg$EN_port0__write,
       ctr_wr_rsps_pending_crg$EN_port2__write,
       dw_valid$whas,
       master_xactor_crg_rd_addr_full$EN_port0__write,
       master_xactor_crg_rd_addr_full$EN_port1__write,
       master_xactor_crg_rd_addr_full$EN_port2__write,
       master_xactor_crg_rd_addr_full$port1__read,
       master_xactor_crg_rd_addr_full$port2__read,
       master_xactor_crg_rd_addr_full$port3__read,
       master_xactor_crg_rd_data_full$EN_port0__write,
       master_xactor_crg_rd_data_full$EN_port1__write,
       master_xactor_crg_rd_data_full$EN_port2__write,
       master_xactor_crg_rd_data_full$port1__read,
       master_xactor_crg_rd_data_full$port2__read,
       master_xactor_crg_rd_data_full$port3__read,
       master_xactor_crg_wr_addr_full$EN_port0__write,
       master_xactor_crg_wr_addr_full$EN_port1__write,
       master_xactor_crg_wr_addr_full$EN_port2__write,
       master_xactor_crg_wr_addr_full$port1__read,
       master_xactor_crg_wr_addr_full$port2__read,
       master_xactor_crg_wr_addr_full$port3__read,
       master_xactor_crg_wr_data_full$EN_port0__write,
       master_xactor_crg_wr_data_full$EN_port1__write,
       master_xactor_crg_wr_data_full$EN_port2__write,
       master_xactor_crg_wr_data_full$port1__read,
       master_xactor_crg_wr_data_full$port2__read,
       master_xactor_crg_wr_data_full$port3__read,
       master_xactor_crg_wr_resp_full$EN_port0__write,
       master_xactor_crg_wr_resp_full$EN_port2__write,
       master_xactor_crg_wr_resp_full$port1__read,
       master_xactor_crg_wr_resp_full$port2__read,
       master_xactor_crg_wr_resp_full$port3__read;

  // register cfg_verbosity
  reg [3 : 0] cfg_verbosity;
  wire [3 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register ctr_wr_rsps_pending_crg
  reg [3 : 0] ctr_wr_rsps_pending_crg;
  wire [3 : 0] ctr_wr_rsps_pending_crg$D_IN;
  wire ctr_wr_rsps_pending_crg$EN;

  // register master_xactor_crg_rd_addr_full
  reg master_xactor_crg_rd_addr_full;
  wire master_xactor_crg_rd_addr_full$D_IN, master_xactor_crg_rd_addr_full$EN;

  // register master_xactor_crg_rd_data_full
  reg master_xactor_crg_rd_data_full;
  wire master_xactor_crg_rd_data_full$D_IN, master_xactor_crg_rd_data_full$EN;

  // register master_xactor_crg_wr_addr_full
  reg master_xactor_crg_wr_addr_full;
  wire master_xactor_crg_wr_addr_full$D_IN, master_xactor_crg_wr_addr_full$EN;

  // register master_xactor_crg_wr_data_full
  reg master_xactor_crg_wr_data_full;
  wire master_xactor_crg_wr_data_full$D_IN, master_xactor_crg_wr_data_full$EN;

  // register master_xactor_crg_wr_resp_full
  reg master_xactor_crg_wr_resp_full;
  wire master_xactor_crg_wr_resp_full$D_IN, master_xactor_crg_wr_resp_full$EN;

  // register master_xactor_rg_rd_addr
  reg [66 : 0] master_xactor_rg_rd_addr;
  reg [66 : 0] master_xactor_rg_rd_addr$D_IN;
  wire master_xactor_rg_rd_addr$EN;

  // register master_xactor_rg_rd_data
  reg [65 : 0] master_xactor_rg_rd_data;
  wire [65 : 0] master_xactor_rg_rd_data$D_IN;
  wire master_xactor_rg_rd_data$EN;

  // register master_xactor_rg_wr_addr
  reg [66 : 0] master_xactor_rg_wr_addr;
  reg [66 : 0] master_xactor_rg_wr_addr$D_IN;
  wire master_xactor_rg_wr_addr$EN;

  // register master_xactor_rg_wr_data
  reg [71 : 0] master_xactor_rg_wr_data;
  reg [71 : 0] master_xactor_rg_wr_data$D_IN;
  wire master_xactor_rg_wr_data$EN;

  // register master_xactor_rg_wr_resp
  reg [1 : 0] master_xactor_rg_wr_resp;
  wire [1 : 0] master_xactor_rg_wr_resp$D_IN;
  wire master_xactor_rg_wr_resp$EN;

  // register rg_addr
  reg [63 : 0] rg_addr;
  wire [63 : 0] rg_addr$D_IN;
  wire rg_addr$EN;

  // register rg_amo_funct7
  reg [6 : 0] rg_amo_funct7;
  wire [6 : 0] rg_amo_funct7$D_IN;
  wire rg_amo_funct7$EN;

  // register rg_cset_in_cache
  reg [5 : 0] rg_cset_in_cache;
  wire [5 : 0] rg_cset_in_cache$D_IN;
  wire rg_cset_in_cache$EN;

  // register rg_error_during_refill
  reg rg_error_during_refill;
  wire rg_error_during_refill$D_IN, rg_error_during_refill$EN;

  // register rg_exc_code
  reg [3 : 0] rg_exc_code;
  reg [3 : 0] rg_exc_code$D_IN;
  wire rg_exc_code$EN;

  // register rg_f3
  reg [2 : 0] rg_f3;
  wire [2 : 0] rg_f3$D_IN;
  wire rg_f3$EN;

  // register rg_ld_val
  reg [63 : 0] rg_ld_val;
  reg [63 : 0] rg_ld_val$D_IN;
  wire rg_ld_val$EN;

  // register rg_lower_word32
  reg [31 : 0] rg_lower_word32;
  wire [31 : 0] rg_lower_word32$D_IN;
  wire rg_lower_word32$EN;

  // register rg_lower_word32_full
  reg rg_lower_word32_full;
  wire rg_lower_word32_full$D_IN, rg_lower_word32_full$EN;

  // register rg_lrsc_pa
  reg [63 : 0] rg_lrsc_pa;
  wire [63 : 0] rg_lrsc_pa$D_IN;
  wire rg_lrsc_pa$EN;

  // register rg_lrsc_valid
  reg rg_lrsc_valid;
  wire rg_lrsc_valid$D_IN, rg_lrsc_valid$EN;

  // register rg_op
  reg [1 : 0] rg_op;
  wire [1 : 0] rg_op$D_IN;
  wire rg_op$EN;

  // register rg_pa
  reg [63 : 0] rg_pa;
  wire [63 : 0] rg_pa$D_IN;
  wire rg_pa$EN;

  // register rg_pte_pa
  reg [63 : 0] rg_pte_pa;
  wire [63 : 0] rg_pte_pa$D_IN;
  wire rg_pte_pa$EN;

  // register rg_req_byte_in_cline
  reg [63 : 0] rg_req_byte_in_cline;
  wire [63 : 0] rg_req_byte_in_cline$D_IN;
  wire rg_req_byte_in_cline$EN;

  // register rg_requesting_cline
  reg rg_requesting_cline;
  reg rg_requesting_cline$D_IN;
  wire rg_requesting_cline$EN;

  // register rg_st_amo_val
  reg [63 : 0] rg_st_amo_val;
  wire [63 : 0] rg_st_amo_val$D_IN;
  wire rg_st_amo_val$EN;

  // register rg_state
  reg [4 : 0] rg_state;
  reg [4 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // register rg_word64_set_in_cache
  reg [8 : 0] rg_word64_set_in_cache;
  wire [8 : 0] rg_word64_set_in_cache$D_IN;
  wire rg_word64_set_in_cache$EN;

  // ports of submodule f_near_mem_io_reqs
  wire [136 : 0] f_near_mem_io_reqs$D_IN, f_near_mem_io_reqs$D_OUT;
  wire f_near_mem_io_reqs$CLR,
       f_near_mem_io_reqs$DEQ,
       f_near_mem_io_reqs$EMPTY_N,
       f_near_mem_io_reqs$ENQ,
       f_near_mem_io_reqs$FULL_N;

  // ports of submodule f_near_mem_io_rsps
  wire [65 : 0] f_near_mem_io_rsps$D_IN, f_near_mem_io_rsps$D_OUT;
  wire f_near_mem_io_rsps$CLR,
       f_near_mem_io_rsps$DEQ,
       f_near_mem_io_rsps$EMPTY_N,
       f_near_mem_io_rsps$ENQ,
       f_near_mem_io_rsps$FULL_N;

  // ports of submodule f_reset_reqs
  wire f_reset_reqs$CLR,
       f_reset_reqs$DEQ,
       f_reset_reqs$D_IN,
       f_reset_reqs$D_OUT,
       f_reset_reqs$EMPTY_N,
       f_reset_reqs$ENQ,
       f_reset_reqs$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$D_IN,
       f_reset_rsps$D_OUT,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule ram_state_and_ctag_cset
  wire [52 : 0] ram_state_and_ctag_cset$DIA,
		ram_state_and_ctag_cset$DIB,
		ram_state_and_ctag_cset$DOB;
  wire [5 : 0] ram_state_and_ctag_cset$ADDRA, ram_state_and_ctag_cset$ADDRB;
  wire ram_state_and_ctag_cset$ENA,
       ram_state_and_ctag_cset$ENB,
       ram_state_and_ctag_cset$WEA,
       ram_state_and_ctag_cset$WEB;

  // ports of submodule ram_word64_set
  reg [63 : 0] ram_word64_set$DIB;
  reg [8 : 0] ram_word64_set$ADDRB;
  wire [63 : 0] ram_word64_set$DIA, ram_word64_set$DOB;
  wire [8 : 0] ram_word64_set$ADDRA;
  wire ram_word64_set$ENA,
       ram_word64_set$ENB,
       ram_word64_set$WEA,
       ram_word64_set$WEB;

  // ports of submodule soc_map
  wire [63 : 0] soc_map$m_is_IO_addr_addr, soc_map$m_is_near_mem_IO_addr_addr;
  wire soc_map$m_is_IO_addr, soc_map$m_is_near_mem_IO_addr;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_ST_AMO_response,
       CAN_FIRE_RL_rl_cache_refill_req_loop,
       CAN_FIRE_RL_rl_cache_refill_rsps_loop,
       CAN_FIRE_RL_rl_discard_write_rsp,
       CAN_FIRE_RL_rl_drive_exception_rsp,
       CAN_FIRE_RL_rl_io_AMO_SC_req,
       CAN_FIRE_RL_rl_io_AMO_op_req,
       CAN_FIRE_RL_rl_io_AMO_read_rsp,
       CAN_FIRE_RL_rl_io_near_mem_read_req,
       CAN_FIRE_RL_rl_io_near_mem_read_rsp,
       CAN_FIRE_RL_rl_io_near_mem_write_req,
       CAN_FIRE_RL_rl_io_near_mem_write_rsp,
       CAN_FIRE_RL_rl_io_read_req,
       CAN_FIRE_RL_rl_io_read_rsp,
       CAN_FIRE_RL_rl_io_write_req,
       CAN_FIRE_RL_rl_maintain_io_read_rsp,
       CAN_FIRE_RL_rl_probe_and_immed_rsp,
       CAN_FIRE_RL_rl_rereq,
       CAN_FIRE_RL_rl_reset,
       CAN_FIRE_RL_rl_start_cache_refill,
       CAN_FIRE_RL_rl_start_reset,
       CAN_FIRE_mem_master_m_arready,
       CAN_FIRE_mem_master_m_awready,
       CAN_FIRE_mem_master_m_bvalid,
       CAN_FIRE_mem_master_m_rvalid,
       CAN_FIRE_mem_master_m_wready,
       CAN_FIRE_near_mem_io_client_request_get,
       CAN_FIRE_near_mem_io_client_response_put,
       CAN_FIRE_req,
       CAN_FIRE_server_flush_request_put,
       CAN_FIRE_server_flush_response_get,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_tlb_flush,
       WILL_FIRE_RL_rl_ST_AMO_response,
       WILL_FIRE_RL_rl_cache_refill_req_loop,
       WILL_FIRE_RL_rl_cache_refill_rsps_loop,
       WILL_FIRE_RL_rl_discard_write_rsp,
       WILL_FIRE_RL_rl_drive_exception_rsp,
       WILL_FIRE_RL_rl_io_AMO_SC_req,
       WILL_FIRE_RL_rl_io_AMO_op_req,
       WILL_FIRE_RL_rl_io_AMO_read_rsp,
       WILL_FIRE_RL_rl_io_near_mem_read_req,
       WILL_FIRE_RL_rl_io_near_mem_read_rsp,
       WILL_FIRE_RL_rl_io_near_mem_write_req,
       WILL_FIRE_RL_rl_io_near_mem_write_rsp,
       WILL_FIRE_RL_rl_io_read_req,
       WILL_FIRE_RL_rl_io_read_rsp,
       WILL_FIRE_RL_rl_io_write_req,
       WILL_FIRE_RL_rl_maintain_io_read_rsp,
       WILL_FIRE_RL_rl_probe_and_immed_rsp,
       WILL_FIRE_RL_rl_rereq,
       WILL_FIRE_RL_rl_reset,
       WILL_FIRE_RL_rl_start_cache_refill,
       WILL_FIRE_RL_rl_start_reset,
       WILL_FIRE_mem_master_m_arready,
       WILL_FIRE_mem_master_m_awready,
       WILL_FIRE_mem_master_m_bvalid,
       WILL_FIRE_mem_master_m_rvalid,
       WILL_FIRE_mem_master_m_wready,
       WILL_FIRE_near_mem_io_client_request_get,
       WILL_FIRE_near_mem_io_client_response_put,
       WILL_FIRE_req,
       WILL_FIRE_server_flush_request_put,
       WILL_FIRE_server_flush_response_get,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_tlb_flush;

  // inputs to muxes for submodule ports
  reg [63 : 0] MUX_dw_output_ld_val$wset_1__VAL_1,
	       MUX_dw_output_ld_val$wset_1__VAL_2,
	       MUX_dw_output_ld_val$wset_1__VAL_3,
	       MUX_dw_output_ld_val$wset_1__VAL_6;
  wire [136 : 0] MUX_f_near_mem_io_reqs$enq_1__VAL_1,
		 MUX_f_near_mem_io_reqs$enq_1__VAL_2;
  wire [71 : 0] MUX_master_xactor_rg_wr_data$write_1__VAL_1,
		MUX_master_xactor_rg_wr_data$write_1__VAL_2,
		MUX_master_xactor_rg_wr_data$write_1__VAL_3;
  wire [66 : 0] MUX_master_xactor_rg_rd_addr$write_1__VAL_1,
		MUX_master_xactor_rg_rd_addr$write_1__VAL_2,
		MUX_master_xactor_rg_rd_addr$write_1__VAL_3,
		MUX_master_xactor_rg_wr_addr$write_1__VAL_1,
		MUX_master_xactor_rg_wr_addr$write_1__VAL_2;
  wire [63 : 0] MUX_dw_output_ld_val$wset_1__VAL_4,
		MUX_ram_word64_set$a_put_3__VAL_2,
		MUX_rg_ld_val$write_1__VAL_2,
		MUX_rg_req_byte_in_cline$write_1__VAL_1;
  wire [52 : 0] MUX_ram_state_and_ctag_cset$a_put_3__VAL_1;
  wire [8 : 0] MUX_ram_word64_set$b_put_2__VAL_2,
	       MUX_ram_word64_set$b_put_2__VAL_4;
  wire [5 : 0] MUX_rg_cset_in_cache$write_1__VAL_1;
  wire [4 : 0] MUX_rg_state$write_1__VAL_13,
	       MUX_rg_state$write_1__VAL_2,
	       MUX_rg_state$write_1__VAL_3,
	       MUX_rg_state$write_1__VAL_8,
	       MUX_rg_state$write_1__VAL_9;
  wire [3 : 0] MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1,
	       MUX_rg_exc_code$write_1__VAL_1;
  wire MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1,
       MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2,
       MUX_dw_output_ld_val$wset_1__SEL_1,
       MUX_dw_output_ld_val$wset_1__SEL_3,
       MUX_dw_output_ld_val$wset_1__SEL_4,
       MUX_master_xactor_rg_rd_addr$write_1__SEL_1,
       MUX_ram_state_and_ctag_cset$b_put_1__SEL_1,
       MUX_ram_word64_set$a_put_1__SEL_1,
       MUX_ram_word64_set$b_put_1__SEL_2,
       MUX_rg_error_during_refill$write_1__SEL_1,
       MUX_rg_exc_code$write_1__SEL_1,
       MUX_rg_exc_code$write_1__SEL_2,
       MUX_rg_exc_code$write_1__SEL_3,
       MUX_rg_exc_code$write_1__SEL_5,
       MUX_rg_ld_val$write_1__SEL_2,
       MUX_rg_lrsc_valid$write_1__SEL_2,
       MUX_rg_state$write_1__SEL_1,
       MUX_rg_state$write_1__SEL_16,
       MUX_rg_state$write_1__SEL_3,
       MUX_rg_state$write_1__SEL_8,
       MUX_rg_state$write_1__SEL_9;

  // remaining internal signals
  reg [63 : 0] CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q38,
	       CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q44,
	       CASE_rg_addr_BITS_2_TO_0_0x0_result2518_0x4_re_ETC__q35,
	       CASE_rg_addr_BITS_2_TO_0_0x0_result4036_0x4_re_ETC__q39,
	       IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d211,
	       IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d233,
	       IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d245,
	       IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d766,
	       IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d783,
	       IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d790,
	       IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d194,
	       IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d224,
	       IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d751,
	       IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d776,
	       IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_ram__ETC___d332,
	       IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_ram__ETC___d341,
	       IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_ram__ETC___d406,
	       IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_ram__ETC___d415,
	       IF_rg_f3_28_EQ_0b0_29_THEN_IF_rg_addr_7_BITS_2_ETC___d350,
	       IF_rg_f3_28_EQ_0b0_29_THEN_IF_rg_addr_7_BITS_2_ETC___d424,
	       IF_rg_f3_28_EQ_0b10_34_THEN_SEXT_IF_rg_f3_28_E_ETC___d292,
	       _theResult_____2__h13518,
	       _theResult_____2__h27766,
	       io_req_wr_data_wdata__h27630,
	       mem_req_wr_data_wdata__h18802,
	       mem_req_wr_data_wdata__h19560,
	       new_ld_val__h27403,
	       new_value__h17672,
	       new_value__h5405,
	       value__h26676,
	       w1__h13510,
	       w1__h27754,
	       w1__h27758;
  reg [31 : 0] v__h12691,
	       v__h12697,
	       v__h18575,
	       v__h18581,
	       v__h19142,
	       v__h19148,
	       v__h19869,
	       v__h19875,
	       v__h21153,
	       v__h21159,
	       v__h21373,
	       v__h21379,
	       v__h21523,
	       v__h21529,
	       v__h21769,
	       v__h21775,
	       v__h23543,
	       v__h23549,
	       v__h23709,
	       v__h23715,
	       v__h24108,
	       v__h24114,
	       v__h24215,
	       v__h24221,
	       v__h24448,
	       v__h24454,
	       v__h24633,
	       v__h24639,
	       v__h25035,
	       v__h25041,
	       v__h25142,
	       v__h25148,
	       v__h25423,
	       v__h25429,
	       v__h25945,
	       v__h25951,
	       v__h26090,
	       v__h26096,
	       v__h26610,
	       v__h26616,
	       v__h26752,
	       v__h26758,
	       v__h26932,
	       v__h26938,
	       v__h27138,
	       v__h27144,
	       v__h27270,
	       v__h27276,
	       v__h27551,
	       v__h27557,
	       v__h29050,
	       v__h29056,
	       v__h29400,
	       v__h29406,
	       v__h29516,
	       v__h29522,
	       v__h30100,
	       v__h30106,
	       v__h30139,
	       v__h30145,
	       v__h30528,
	       v__h30534,
	       v__h3568,
	       v__h3574,
	       v__h3933,
	       v__h3939,
	       v__h4034,
	       v__h4040,
	       v__h4183,
	       v__h4189;
  reg [7 : 0] io_req_wr_data_wstrb__h27631, mem_req_wr_data_wstrb__h19561;
  wire [63 : 0] IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_1_EL_ETC___d261,
		IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_mast_ETC___d791,
		IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_ram__ETC___d247,
		IF_rg_f3_28_EQ_0b10_34_THEN_SEXT_rg_st_amo_val_ETC___d356,
		IF_rg_op_9_EQ_1_7_OR_rg_op_9_EQ_2_1_AND_rg_amo_ETC___d444,
		_theResult___fst__h18920,
		_theResult___fst__h19678,
		_theResult___fst__h26399,
		_theResult___fst__h27748,
		cline_addr__h21212,
		cline_fabric_addr__h21213,
		io_req_wr_addr_awaddr__h27471,
		mem_req_wr_addr_awaddr__h19473,
		new_st_val__h13522,
		new_st_val__h13614,
		new_st_val__h14594,
		new_st_val__h14598,
		new_st_val__h14602,
		new_st_val__h14606,
		new_st_val__h14611,
		new_st_val__h14617,
		new_st_val__h14622,
		new_st_val__h27770,
		new_st_val__h27861,
		new_st_val__h28815,
		new_st_val__h28819,
		new_st_val__h28823,
		new_st_val__h28827,
		new_st_val__h28832,
		new_st_val__h28838,
		new_st_val__h28843,
		new_st_val__h5345,
		result__h11814,
		result__h11842,
		result__h11870,
		result__h11898,
		result__h11926,
		result__h11954,
		result__h11982,
		result__h12027,
		result__h12055,
		result__h12083,
		result__h12111,
		result__h12139,
		result__h12167,
		result__h12195,
		result__h12223,
		result__h12268,
		result__h12296,
		result__h12324,
		result__h12352,
		result__h12393,
		result__h12421,
		result__h12449,
		result__h12477,
		result__h12518,
		result__h12546,
		result__h12585,
		result__h12613,
		result__h23931,
		result__h23958,
		result__h23984,
		result__h24010,
		result__h24036,
		result__h24062,
		result__h24858,
		result__h24885,
		result__h24911,
		result__h24937,
		result__h24963,
		result__h24989,
		result__h25241,
		result__h25268,
		result__h25295,
		result__h25322,
		result__h25349,
		result__h25376,
		result__h27978,
		result__h28005,
		result__h28032,
		result__h28059,
		result__h28086,
		result__h28113,
		result__h28140,
		result__h28211,
		result__h28238,
		result__h28265,
		result__h28292,
		result__h28319,
		result__h28346,
		result__h28373,
		result__h28444,
		result__h28471,
		result__h28498,
		result__h28565,
		result__h28592,
		result__h28619,
		result__h28686,
		result__h28751,
		result__h29215,
		result__h29245,
		result__h29272,
		result__h29299,
		result__h29326,
		result__h29353,
		result__h5458,
		w1___1__h13581,
		w1___1__h27829,
		w2___1__h27830,
		w2__h27760,
		word64__h27476,
		word64__h5182,
		x__h13084,
		y__h5494;
  wire [31 : 0] f_near_mem_io_rspsD_OUT_BITS_31_TO_0__q19,
		master_xactor_rg_rd_data_BITS_31_TO_0__q3,
		master_xactor_rg_rd_data_BITS_63_TO_32__q10,
		new_ld_val7403_BITS_31_TO_0__q43,
		new_value405_BITS_31_TO_0__q36,
		rg_ld_val_BITS_31_TO_0__q20,
		rg_st_amo_val_BITS_31_TO_0__q37,
		w17754_BITS_31_TO_0__q40,
		word64182_BITS_31_TO_0__q23,
		word64182_BITS_63_TO_32__q30;
  wire [15 : 0] f_near_mem_io_rspsD_OUT_BITS_15_TO_0__q17,
		master_xactor_rg_rd_data_BITS_15_TO_0__q2,
		master_xactor_rg_rd_data_BITS_31_TO_16__q6,
		master_xactor_rg_rd_data_BITS_47_TO_32__q9,
		master_xactor_rg_rd_data_BITS_63_TO_48__q13,
		new_ld_val7403_BITS_15_TO_0__q42,
		rg_ld_val_BITS_15_TO_0__q18,
		word64182_BITS_15_TO_0__q22,
		word64182_BITS_31_TO_16__q26,
		word64182_BITS_47_TO_32__q29,
		word64182_BITS_63_TO_48__q33;
  wire [7 : 0] f_near_mem_io_rspsD_OUT_BITS_7_TO_0__q15,
	       master_xactor_rg_rd_data_BITS_15_TO_8__q4,
	       master_xactor_rg_rd_data_BITS_23_TO_16__q5,
	       master_xactor_rg_rd_data_BITS_31_TO_24__q7,
	       master_xactor_rg_rd_data_BITS_39_TO_32__q8,
	       master_xactor_rg_rd_data_BITS_47_TO_40__q11,
	       master_xactor_rg_rd_data_BITS_55_TO_48__q12,
	       master_xactor_rg_rd_data_BITS_63_TO_56__q14,
	       master_xactor_rg_rd_data_BITS_7_TO_0__q1,
	       new_ld_val7403_BITS_7_TO_0__q41,
	       rg_ld_val_BITS_7_TO_0__q16,
	       strobe64__h19677,
	       strobe64__h19720,
	       strobe64__h19743,
	       strobe64__h27747,
	       strobe64__h28901,
	       strobe64__h28924,
	       word64182_BITS_15_TO_8__q24,
	       word64182_BITS_23_TO_16__q25,
	       word64182_BITS_31_TO_24__q27,
	       word64182_BITS_39_TO_32__q28,
	       word64182_BITS_47_TO_40__q31,
	       word64182_BITS_55_TO_48__q32,
	       word64182_BITS_63_TO_56__q34,
	       word64182_BITS_7_TO_0__q21;
  wire [5 : 0] shift_bits__h19480, shift_bits__h27479;
  wire [4 : 0] IF_rg_op_9_EQ_0_0_OR_rg_op_9_EQ_2_1_AND_rg_amo_ETC___d101,
	       IF_rg_op_9_EQ_1_7_OR_rg_op_9_EQ_2_1_AND_rg_amo_ETC___d100;
  wire [3 : 0] access_exc_code__h3109, b__h20503;
  wire IF_rg_op_9_EQ_1_7_OR_rg_op_9_EQ_2_1_AND_rg_amo_ETC___d73,
       NOT_cfg_verbosity_read__0_ULE_1_1___d12,
       NOT_cfg_verbosity_read__0_ULE_2_37___d538,
       NOT_ram_state_and_ctag_cset_b_read__4_BIT_52_5_ETC___d109,
       NOT_req_f3_BITS_1_TO_0_03_EQ_0b0_04_05_AND_NOT_ETC___d924,
       NOT_rg_op_9_EQ_0_0_7_AND_NOT_rg_op_9_EQ_2_1_8__ETC___d428,
       NOT_rg_op_9_EQ_0_0_7_AND_NOT_rg_op_9_EQ_2_1_8__ETC___d472,
       NOT_rg_op_9_EQ_0_0_7_AND_NOT_rg_op_9_EQ_2_1_8__ETC___d481,
       NOT_rg_op_9_EQ_0_0_7_AND_NOT_rg_op_9_EQ_2_1_8__ETC___d487,
       NOT_rg_op_9_EQ_0_0_7_AND_NOT_rg_op_9_EQ_2_1_8__ETC___d96,
       NOT_rg_op_9_EQ_1_7_15_AND_NOT_rg_op_9_EQ_2_1_8_ETC___d118,
       NOT_rg_op_9_EQ_1_7_15_AND_NOT_rg_op_9_EQ_2_1_8_ETC___d296,
       NOT_rg_op_9_EQ_1_7_15_AND_NOT_rg_op_9_EQ_2_1_8_ETC___d495,
       NOT_rg_op_9_EQ_1_7_15_AND_NOT_rg_op_9_EQ_2_1_8_ETC___d499,
       NOT_rg_op_9_EQ_1_7_15_AND_NOT_rg_op_9_EQ_2_1_8_ETC___d505,
       NOT_rg_op_9_EQ_1_7_15_AND_NOT_rg_op_9_EQ_2_1_8_ETC___d510,
       NOT_rg_op_9_EQ_2_1_8_OR_NOT_rg_amo_funct7_2_BI_ETC___d294,
       NOT_rg_op_9_EQ_2_1_8_OR_NOT_rg_amo_funct7_2_BI_ETC___d470,
       NOT_rg_op_9_EQ_2_1_8_OR_NOT_rg_amo_funct7_2_BI_ETC___d474,
       NOT_rg_op_9_EQ_2_1_8_OR_NOT_rg_amo_funct7_2_BI_ETC___d479,
       NOT_rg_op_9_EQ_2_1_8_OR_NOT_rg_amo_funct7_2_BI_ETC___d485,
       NOT_soc_map_m_is_IO_addr_rg_addr_7_8_04_AND_NO_ETC___d288,
       NOT_soc_map_m_is_IO_addr_rg_addr_7_8_04_AND_NO_ETC___d299,
       NOT_soc_map_m_is_IO_addr_rg_addr_7_8_04_AND_NO_ETC___d501,
       NOT_soc_map_m_is_IO_addr_rg_addr_7_8_04_AND_NO_ETC___d509,
       NOT_soc_map_m_is_IO_addr_rg_addr_7_8_04_AND_NO_ETC___d512,
       lrsc_result__h13074,
       master_xactor_crg_rd_data_full_port1__read__41_ETC___d725,
       ram_state_and_ctag_cset_b_read__4_BITS_51_TO_0_ETC___d69,
       ram_state_and_ctag_cset_b_read__4_BIT_52_5_AND_ETC___d110,
       req_f3_BITS_1_TO_0_03_EQ_0b0_04_OR_req_f3_BITS_ETC___d933,
       rg_addr_7_EQ_rg_lrsc_pa_3___d107,
       rg_amo_funct7_2_BITS_6_TO_2_3_EQ_0b10_4_AND_NO_ETC___d282,
       rg_lrsc_pa_3_EQ_rg_addr_7___d54,
       rg_op_9_EQ_0_0_OR_rg_op_9_EQ_2_1_AND_rg_amo_fu_ETC___d121,
       rg_op_9_EQ_0_0_OR_rg_op_9_EQ_2_1_AND_rg_amo_fu_ETC___d123,
       rg_op_9_EQ_0_0_OR_rg_op_9_EQ_2_1_AND_rg_amo_fu_ETC___d126,
       rg_op_9_EQ_0_0_OR_rg_op_9_EQ_2_1_AND_rg_amo_fu_ETC___d265,
       rg_op_9_EQ_0_0_OR_rg_op_9_EQ_2_1_AND_rg_amo_fu_ETC___d278,
       rg_op_9_EQ_0_0_OR_rg_op_9_EQ_2_1_AND_rg_amo_fu_ETC___d86,
       rg_op_9_EQ_1_7_OR_rg_op_9_EQ_2_1_AND_rg_amo_fu_ETC___d119,
       rg_op_9_EQ_1_7_OR_rg_op_9_EQ_2_1_AND_rg_amo_fu_ETC___d297,
       rg_op_9_EQ_1_7_OR_rg_op_9_EQ_2_1_AND_rg_amo_fu_ETC___d426,
       rg_op_9_EQ_2_1_AND_rg_amo_funct7_2_BITS_6_TO_2_ETC___d491,
       rg_op_9_EQ_2_1_AND_rg_amo_funct7_2_BITS_6_TO_2_ETC___d63,
       rg_state_EQ_13_83_AND_rg_op_9_EQ_0_0_OR_rg_op__ETC___d587,
       rg_state_EQ_13_83_AND_rg_op_9_EQ_0_0_OR_rg_op__ETC___d624;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get =
	     !f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get =
	     !f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // action method req
  assign CAN_FIRE_req = 1'd1 ;
  assign WILL_FIRE_req = EN_req ;

  // value method valid
  assign valid = dw_valid$whas ;

  // value method addr
  assign addr = rg_addr ;

  // value method word64
  always@(MUX_dw_output_ld_val$wset_1__SEL_1 or
	  MUX_dw_output_ld_val$wset_1__VAL_1 or
	  MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  MUX_dw_output_ld_val$wset_1__VAL_2 or
	  MUX_dw_output_ld_val$wset_1__SEL_3 or
	  MUX_dw_output_ld_val$wset_1__VAL_3 or
	  MUX_dw_output_ld_val$wset_1__SEL_4 or
	  MUX_dw_output_ld_val$wset_1__VAL_4 or
	  WILL_FIRE_RL_rl_ST_AMO_response or
	  rg_ld_val or
	  WILL_FIRE_RL_rl_maintain_io_read_rsp or
	  MUX_dw_output_ld_val$wset_1__VAL_6)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_dw_output_ld_val$wset_1__SEL_1:
	  word64 = MUX_dw_output_ld_val$wset_1__VAL_1;
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  word64 = MUX_dw_output_ld_val$wset_1__VAL_2;
      MUX_dw_output_ld_val$wset_1__SEL_3:
	  word64 = MUX_dw_output_ld_val$wset_1__VAL_3;
      MUX_dw_output_ld_val$wset_1__SEL_4:
	  word64 = MUX_dw_output_ld_val$wset_1__VAL_4;
      WILL_FIRE_RL_rl_ST_AMO_response: word64 = rg_ld_val;
      WILL_FIRE_RL_rl_maintain_io_read_rsp:
	  word64 = MUX_dw_output_ld_val$wset_1__VAL_6;
      default: word64 = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end

  // value method st_amo_val
  assign st_amo_val =
	     MUX_dw_output_ld_val$wset_1__SEL_4 ? 64'd0 : rg_st_amo_val ;

  // value method exc
  assign exc = rg_state == 5'd4 ;

  // value method exc_code
  assign exc_code = rg_exc_code ;

  // action method server_flush_request_put
  assign RDY_server_flush_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_flush_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_flush_request_put = EN_server_flush_request_put ;

  // action method server_flush_response_get
  assign RDY_server_flush_response_get =
	     f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_flush_response_get =
	     f_reset_rsps$D_OUT && f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_flush_response_get = EN_server_flush_response_get ;

  // action method tlb_flush
  assign RDY_tlb_flush = 1'd1 ;
  assign CAN_FIRE_tlb_flush = 1'd1 ;
  assign WILL_FIRE_tlb_flush = EN_tlb_flush ;

  // value method mem_master_m_awvalid
  assign mem_master_awvalid =
	     !master_xactor_crg_wr_addr_full$EN_port0__write &&
	     master_xactor_crg_wr_addr_full ;

  // value method mem_master_m_awaddr
  assign mem_master_awaddr = master_xactor_rg_wr_addr[66:3] ;

  // value method mem_master_m_awprot
  assign mem_master_awprot = master_xactor_rg_wr_addr[2:0] ;

  // action method mem_master_m_awready
  assign CAN_FIRE_mem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_awready = 1'd1 ;

  // value method mem_master_m_wvalid
  assign mem_master_wvalid =
	     !master_xactor_crg_wr_data_full$EN_port0__write &&
	     master_xactor_crg_wr_data_full ;

  // value method mem_master_m_wdata
  assign mem_master_wdata = master_xactor_rg_wr_data[71:8] ;

  // value method mem_master_m_wstrb
  assign mem_master_wstrb = master_xactor_rg_wr_data[7:0] ;

  // action method mem_master_m_wready
  assign CAN_FIRE_mem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_wready = 1'd1 ;

  // action method mem_master_m_bvalid
  assign CAN_FIRE_mem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_mem_master_m_bvalid = 1'd1 ;

  // value method mem_master_m_bready
  assign mem_master_bready = !master_xactor_crg_wr_resp_full$port2__read ;

  // value method mem_master_m_arvalid
  assign mem_master_arvalid =
	     !master_xactor_crg_rd_addr_full$EN_port0__write &&
	     master_xactor_crg_rd_addr_full ;

  // value method mem_master_m_araddr
  assign mem_master_araddr = master_xactor_rg_rd_addr[66:3] ;

  // value method mem_master_m_arprot
  assign mem_master_arprot = master_xactor_rg_rd_addr[2:0] ;

  // action method mem_master_m_arready
  assign CAN_FIRE_mem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_mem_master_m_arready = 1'd1 ;

  // action method mem_master_m_rvalid
  assign CAN_FIRE_mem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_mem_master_m_rvalid = 1'd1 ;

  // value method mem_master_m_rready
  assign mem_master_rready = !master_xactor_crg_rd_data_full$port2__read ;

  // actionvalue method near_mem_io_client_request_get
  assign near_mem_io_client_request_get = f_near_mem_io_reqs$D_OUT ;
  assign RDY_near_mem_io_client_request_get = f_near_mem_io_reqs$EMPTY_N ;
  assign CAN_FIRE_near_mem_io_client_request_get =
	     f_near_mem_io_reqs$EMPTY_N ;
  assign WILL_FIRE_near_mem_io_client_request_get =
	     EN_near_mem_io_client_request_get ;

  // action method near_mem_io_client_response_put
  assign RDY_near_mem_io_client_response_put = f_near_mem_io_rsps$FULL_N ;
  assign CAN_FIRE_near_mem_io_client_response_put =
	     f_near_mem_io_rsps$FULL_N ;
  assign WILL_FIRE_near_mem_io_client_response_put =
	     EN_near_mem_io_client_response_put ;

  // submodule f_near_mem_io_reqs
  FIFO2 #(.width(32'd137), .guarded(32'd1)) f_near_mem_io_reqs(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(f_near_mem_io_reqs$D_IN),
							       .ENQ(f_near_mem_io_reqs$ENQ),
							       .DEQ(f_near_mem_io_reqs$DEQ),
							       .CLR(f_near_mem_io_reqs$CLR),
							       .D_OUT(f_near_mem_io_reqs$D_OUT),
							       .FULL_N(f_near_mem_io_reqs$FULL_N),
							       .EMPTY_N(f_near_mem_io_reqs$EMPTY_N));

  // submodule f_near_mem_io_rsps
  FIFO2 #(.width(32'd66), .guarded(32'd1)) f_near_mem_io_rsps(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(f_near_mem_io_rsps$D_IN),
							      .ENQ(f_near_mem_io_rsps$ENQ),
							      .DEQ(f_near_mem_io_rsps$DEQ),
							      .CLR(f_near_mem_io_rsps$CLR),
							      .D_OUT(f_near_mem_io_rsps$D_OUT),
							      .FULL_N(f_near_mem_io_rsps$FULL_N),
							      .EMPTY_N(f_near_mem_io_rsps$EMPTY_N));

  // submodule f_reset_reqs
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_reqs(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_reset_reqs$D_IN),
						       .ENQ(f_reset_reqs$ENQ),
						       .DEQ(f_reset_reqs$DEQ),
						       .CLR(f_reset_reqs$CLR),
						       .D_OUT(f_reset_reqs$D_OUT),
						       .FULL_N(f_reset_reqs$FULL_N),
						       .EMPTY_N(f_reset_reqs$EMPTY_N));

  // submodule f_reset_rsps
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_rsps(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_reset_rsps$D_IN),
						       .ENQ(f_reset_rsps$ENQ),
						       .DEQ(f_reset_rsps$DEQ),
						       .CLR(f_reset_rsps$CLR),
						       .D_OUT(f_reset_rsps$D_OUT),
						       .FULL_N(f_reset_rsps$FULL_N),
						       .EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule ram_state_and_ctag_cset
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd6),
	  .DATA_WIDTH(32'd53),
	  .MEMSIZE(7'd64)) ram_state_and_ctag_cset(.CLKA(CLK),
						   .CLKB(CLK),
						   .ADDRA(ram_state_and_ctag_cset$ADDRA),
						   .ADDRB(ram_state_and_ctag_cset$ADDRB),
						   .DIA(ram_state_and_ctag_cset$DIA),
						   .DIB(ram_state_and_ctag_cset$DIB),
						   .WEA(ram_state_and_ctag_cset$WEA),
						   .WEB(ram_state_and_ctag_cset$WEB),
						   .ENA(ram_state_and_ctag_cset$ENA),
						   .ENB(ram_state_and_ctag_cset$ENB),
						   .DOA(),
						   .DOB(ram_state_and_ctag_cset$DOB));

  // submodule ram_word64_set
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd9),
	  .DATA_WIDTH(32'd64),
	  .MEMSIZE(10'd512)) ram_word64_set(.CLKA(CLK),
					    .CLKB(CLK),
					    .ADDRA(ram_word64_set$ADDRA),
					    .ADDRB(ram_word64_set$ADDRB),
					    .DIA(ram_word64_set$DIA),
					    .DIB(ram_word64_set$DIB),
					    .WEA(ram_word64_set$WEA),
					    .WEB(ram_word64_set$WEB),
					    .ENA(ram_word64_set$ENA),
					    .ENB(ram_word64_set$ENB),
					    .DOA(),
					    .DOB(ram_word64_set$DOB));

  // submodule soc_map
  mkSoC_Map soc_map(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_is_IO_addr_addr(soc_map$m_is_IO_addr_addr),
		    .m_is_near_mem_IO_addr_addr(soc_map$m_is_near_mem_IO_addr_addr),
		    .m_boot_rom_addr_size(),
		    .m_boot_rom_addr_base(),
		    .m_boot_rom_addr_lim(),
		    .m_tcm_addr_size(),
		    .m_tcm_addr_base(),
		    .m_tcm_addr_lim(),
		    .m_mem0_controller_addr_size(),
		    .m_mem0_controller_addr_base(),
		    .m_mem0_controller_addr_lim(),
		    .m_uart0_addr_size(),
		    .m_uart0_addr_base(),
		    .m_uart0_addr_lim(),
		    .m_near_mem_io_addr_size(),
		    .m_near_mem_io_addr_base(),
		    .m_near_mem_io_addr_lim(),
		    .m_is_IO_addr(soc_map$m_is_IO_addr),
		    .m_is_near_mem_IO_addr(soc_map$m_is_near_mem_IO_addr));

  // rule RL_rl_reset
  assign CAN_FIRE_RL_rl_reset = WILL_FIRE_RL_rl_reset ;
  assign WILL_FIRE_RL_rl_reset =
	     (rg_cset_in_cache != 6'd63 ||
	      f_reset_reqs$EMPTY_N && f_reset_rsps$FULL_N) &&
	     rg_state == 5'd1 ;

  // rule RL_rl_rereq
  assign CAN_FIRE_RL_rl_rereq = rg_state == 5'd11 ;
  assign WILL_FIRE_RL_rl_rereq =
	     CAN_FIRE_RL_rl_rereq && !WILL_FIRE_RL_rl_start_reset && !EN_req ;

  // rule RL_rl_ST_AMO_response
  assign CAN_FIRE_RL_rl_ST_AMO_response = rg_state == 5'd12 ;
  assign WILL_FIRE_RL_rl_ST_AMO_response = CAN_FIRE_RL_rl_ST_AMO_response ;

  // rule RL_rl_io_near_mem_read_req
  assign CAN_FIRE_RL_rl_io_near_mem_read_req =
	     f_near_mem_io_reqs$FULL_N &&
	     rg_state_EQ_13_83_AND_rg_op_9_EQ_0_0_OR_rg_op__ETC___d624 ;
  assign WILL_FIRE_RL_rl_io_near_mem_read_req =
	     CAN_FIRE_RL_rl_io_near_mem_read_req &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_near_mem_read_rsp
  assign CAN_FIRE_RL_rl_io_near_mem_read_rsp =
	     f_near_mem_io_rsps$EMPTY_N && rg_state == 5'd14 &&
	     soc_map$m_is_near_mem_IO_addr &&
	     f_near_mem_io_rsps$D_OUT[65] ;
  assign WILL_FIRE_RL_rl_io_near_mem_read_rsp =
	     CAN_FIRE_RL_rl_io_near_mem_read_rsp &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_maintain_io_read_rsp
  assign CAN_FIRE_RL_rl_maintain_io_read_rsp = rg_state == 5'd15 ;
  assign WILL_FIRE_RL_rl_maintain_io_read_rsp =
	     CAN_FIRE_RL_rl_maintain_io_read_rsp ;

  // rule RL_rl_io_near_mem_write_req
  assign CAN_FIRE_RL_rl_io_near_mem_write_req =
	     f_near_mem_io_reqs$FULL_N && rg_state == 5'd13 &&
	     rg_op == 2'd1 &&
	     soc_map$m_is_near_mem_IO_addr ;
  assign WILL_FIRE_RL_rl_io_near_mem_write_req =
	     CAN_FIRE_RL_rl_io_near_mem_write_req &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_near_mem_write_rsp
  assign CAN_FIRE_RL_rl_io_near_mem_write_rsp =
	     f_near_mem_io_rsps$EMPTY_N && !f_near_mem_io_rsps$D_OUT[65] ;
  assign WILL_FIRE_RL_rl_io_near_mem_write_rsp =
	     CAN_FIRE_RL_rl_io_near_mem_write_rsp ;

  // rule RL_rl_io_AMO_SC_req
  assign CAN_FIRE_RL_rl_io_AMO_SC_req =
	     rg_state == 5'd13 && rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00011 &&
	     !soc_map$m_is_near_mem_IO_addr ;
  assign WILL_FIRE_RL_rl_io_AMO_SC_req =
	     CAN_FIRE_RL_rl_io_AMO_SC_req && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_drive_exception_rsp
  assign CAN_FIRE_RL_rl_drive_exception_rsp = rg_state == 5'd4 ;
  assign WILL_FIRE_RL_rl_drive_exception_rsp = rg_state == 5'd4 ;

  // rule RL_rl_start_reset
  assign CAN_FIRE_RL_rl_start_reset =
	     f_reset_reqs$EMPTY_N && rg_state != 5'd1 ;
  assign WILL_FIRE_RL_rl_start_reset = CAN_FIRE_RL_rl_start_reset ;

  // rule RL_rl_cache_refill_req_loop
  assign CAN_FIRE_RL_rl_cache_refill_req_loop =
	     !master_xactor_crg_rd_addr_full$port2__read &&
	     rg_requesting_cline ;
  assign WILL_FIRE_RL_rl_cache_refill_req_loop =
	     CAN_FIRE_RL_rl_cache_refill_req_loop &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_probe_and_immed_rsp
  assign CAN_FIRE_RL_rl_probe_and_immed_rsp =
	     (soc_map$m_is_IO_addr || rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010 ||
	      IF_rg_op_9_EQ_1_7_OR_rg_op_9_EQ_2_1_AND_rg_amo_ETC___d73) &&
	     rg_state == 5'd3 ;
  assign WILL_FIRE_RL_rl_probe_and_immed_rsp =
	     CAN_FIRE_RL_rl_probe_and_immed_rsp &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_cache_refill_rsps_loop
  assign CAN_FIRE_RL_rl_cache_refill_rsps_loop =
	     master_xactor_crg_rd_data_full$port1__read && rg_state == 5'd10 ;
  assign WILL_FIRE_RL_rl_cache_refill_rsps_loop =
	     CAN_FIRE_RL_rl_cache_refill_rsps_loop &&
	     !WILL_FIRE_RL_rl_start_reset &&
	     !EN_req ;

  // rule RL_rl_io_read_req
  assign CAN_FIRE_RL_rl_io_read_req =
	     !master_xactor_crg_rd_addr_full$port2__read &&
	     rg_state_EQ_13_83_AND_rg_op_9_EQ_0_0_OR_rg_op__ETC___d587 ;
  assign WILL_FIRE_RL_rl_io_read_req =
	     CAN_FIRE_RL_rl_io_read_req &&
	     !WILL_FIRE_RL_rl_cache_refill_req_loop &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_read_rsp
  assign CAN_FIRE_RL_rl_io_read_rsp =
	     master_xactor_crg_rd_data_full$port1__read &&
	     rg_state == 5'd14 &&
	     !soc_map$m_is_near_mem_IO_addr ;
  assign WILL_FIRE_RL_rl_io_read_rsp =
	     CAN_FIRE_RL_rl_io_read_rsp && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_write_req
  assign CAN_FIRE_RL_rl_io_write_req =
	     !master_xactor_crg_wr_addr_full$port2__read &&
	     !master_xactor_crg_wr_data_full$port2__read &&
	     rg_state == 5'd13 &&
	     rg_op == 2'd1 &&
	     !soc_map$m_is_near_mem_IO_addr ;
  assign WILL_FIRE_RL_rl_io_write_req =
	     CAN_FIRE_RL_rl_io_write_req && !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_AMO_op_req
  assign CAN_FIRE_RL_rl_io_AMO_op_req =
	     !master_xactor_crg_rd_addr_full$port2__read &&
	     rg_state == 5'd13 &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] != 5'b00010 &&
	     rg_amo_funct7[6:2] != 5'b00011 ;
  assign WILL_FIRE_RL_rl_io_AMO_op_req =
	     CAN_FIRE_RL_rl_io_AMO_op_req &&
	     !WILL_FIRE_RL_rl_cache_refill_req_loop &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // rule RL_rl_io_AMO_read_rsp
  assign CAN_FIRE_RL_rl_io_AMO_read_rsp =
	     master_xactor_crg_rd_data_full_port1__read__41_ETC___d725 &&
	     rg_state == 5'd16 ;
  assign WILL_FIRE_RL_rl_io_AMO_read_rsp = MUX_rg_state$write_1__SEL_3 ;

  // rule RL_rl_start_cache_refill
  assign CAN_FIRE_RL_rl_start_cache_refill =
	     !master_xactor_crg_rd_addr_full$port2__read &&
	     rg_state == 5'd9 &&
	     b__h20503 == 4'd0 ;
  assign WILL_FIRE_RL_rl_start_cache_refill = MUX_rg_state$write_1__SEL_1 ;

  // rule RL_rl_discard_write_rsp
  assign CAN_FIRE_RL_rl_discard_write_rsp =
	     b__h20503 != 4'd0 && master_xactor_crg_wr_resp_full$port1__read ;
  assign WILL_FIRE_RL_rl_discard_write_rsp =
	     CAN_FIRE_RL_rl_discard_write_rsp &&
	     !WILL_FIRE_RL_rl_start_reset ;

  // inputs to muxes for submodule ports
  assign MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ;
  assign MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	     NOT_rg_op_9_EQ_0_0_7_AND_NOT_rg_op_9_EQ_2_1_8__ETC___d428 ;
  assign MUX_dw_output_ld_val$wset_1__SEL_1 =
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ;
  assign MUX_dw_output_ld_val$wset_1__SEL_3 =
	     WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	     f_near_mem_io_rsps$D_OUT[64] ;
  assign MUX_dw_output_ld_val$wset_1__SEL_4 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	     rg_op_9_EQ_0_0_OR_rg_op_9_EQ_2_1_AND_rg_amo_fu_ETC___d126 ;
  assign MUX_master_xactor_rg_rd_addr$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_io_AMO_op_req || WILL_FIRE_RL_rl_io_read_req ;
  assign MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 =
	     EN_req &&
	     req_f3_BITS_1_TO_0_03_EQ_0b0_04_OR_req_f3_BITS_ETC___d933 ;
  assign MUX_ram_word64_set$a_put_1__SEL_1 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ;
  assign MUX_ram_word64_set$b_put_1__SEL_2 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[2:0] != 3'd7 ;
  assign MUX_rg_error_during_refill$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_rg_rd_data[65:64] != 2'd0 ;
  assign MUX_rg_exc_code$write_1__SEL_1 =
	     EN_req &&
	     NOT_req_f3_BITS_1_TO_0_03_EQ_0b0_04_05_AND_NOT_ETC___d924 ;
  assign MUX_rg_exc_code$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[65:64] != 2'd0 ;
  assign MUX_rg_exc_code$write_1__SEL_3 =
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_rg_rd_data[65:64] != 2'd0 ;
  assign MUX_rg_exc_code$write_1__SEL_5 =
	     WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	     !f_near_mem_io_rsps$D_OUT[64] ;
  assign MUX_rg_ld_val$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_soc_map_m_is_IO_addr_rg_addr_7_8_04_AND_NO_ETC___d288 ;
  assign MUX_rg_lrsc_valid$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	     rg_op_9_EQ_0_0_OR_rg_op_9_EQ_2_1_AND_rg_amo_fu_ETC___d121 ;
  assign MUX_rg_state$write_1__SEL_1 =
	     CAN_FIRE_RL_rl_start_cache_refill &&
	     !WILL_FIRE_RL_rl_cache_refill_req_loop &&
	     !WILL_FIRE_RL_rl_start_reset &&
	     !EN_req ;
  assign MUX_rg_state$write_1__SEL_3 =
	     CAN_FIRE_RL_rl_io_AMO_read_rsp && !WILL_FIRE_RL_rl_start_reset ;
  assign MUX_rg_state$write_1__SEL_8 =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[2:0] == 3'd7 ;
  assign MUX_rg_state$write_1__SEL_9 =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     (soc_map$m_is_IO_addr ||
	      rg_op_9_EQ_0_0_OR_rg_op_9_EQ_2_1_AND_rg_amo_fu_ETC___d86 ||
	      NOT_rg_op_9_EQ_0_0_7_AND_NOT_rg_op_9_EQ_2_1_8__ETC___d96) ;
  assign MUX_rg_state$write_1__SEL_16 =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 6'd63 ;
  assign MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1 =
	     ctr_wr_rsps_pending_crg + 4'd1 ;
  always@(rg_f3 or
	  result__h23931 or
	  result__h23984 or
	  result__h24036 or
	  master_xactor_rg_rd_data or
	  result__h23958 or result__h24010 or result__h24062)
  begin
    case (rg_f3)
      3'b0: MUX_dw_output_ld_val$wset_1__VAL_1 = result__h23931;
      3'b001: MUX_dw_output_ld_val$wset_1__VAL_1 = result__h23984;
      3'b010: MUX_dw_output_ld_val$wset_1__VAL_1 = result__h24036;
      3'b011:
	  MUX_dw_output_ld_val$wset_1__VAL_1 = master_xactor_rg_rd_data[63:0];
      3'b100: MUX_dw_output_ld_val$wset_1__VAL_1 = result__h23958;
      3'b101: MUX_dw_output_ld_val$wset_1__VAL_1 = result__h24010;
      3'b110: MUX_dw_output_ld_val$wset_1__VAL_1 = result__h24062;
      3'd7: MUX_dw_output_ld_val$wset_1__VAL_1 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  result__h29215 or
	  result__h29272 or
	  result__h29326 or
	  new_ld_val__h27403 or
	  result__h29245 or result__h29299 or result__h29353)
  begin
    case (rg_f3)
      3'b0: MUX_dw_output_ld_val$wset_1__VAL_2 = result__h29215;
      3'b001: MUX_dw_output_ld_val$wset_1__VAL_2 = result__h29272;
      3'b010: MUX_dw_output_ld_val$wset_1__VAL_2 = result__h29326;
      3'b011: MUX_dw_output_ld_val$wset_1__VAL_2 = new_ld_val__h27403;
      3'b100: MUX_dw_output_ld_val$wset_1__VAL_2 = result__h29245;
      3'b101: MUX_dw_output_ld_val$wset_1__VAL_2 = result__h29299;
      3'b110: MUX_dw_output_ld_val$wset_1__VAL_2 = result__h29353;
      3'd7: MUX_dw_output_ld_val$wset_1__VAL_2 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  result__h24858 or
	  result__h24911 or
	  result__h24963 or
	  f_near_mem_io_rsps$D_OUT or
	  result__h24885 or result__h24937 or result__h24989)
  begin
    case (rg_f3)
      3'b0: MUX_dw_output_ld_val$wset_1__VAL_3 = result__h24858;
      3'b001: MUX_dw_output_ld_val$wset_1__VAL_3 = result__h24911;
      3'b010: MUX_dw_output_ld_val$wset_1__VAL_3 = result__h24963;
      3'b011:
	  MUX_dw_output_ld_val$wset_1__VAL_3 = f_near_mem_io_rsps$D_OUT[63:0];
      3'b100: MUX_dw_output_ld_val$wset_1__VAL_3 = result__h24885;
      3'b101: MUX_dw_output_ld_val$wset_1__VAL_3 = result__h24937;
      3'b110: MUX_dw_output_ld_val$wset_1__VAL_3 = result__h24989;
      3'd7: MUX_dw_output_ld_val$wset_1__VAL_3 = 64'd0;
    endcase
  end
  assign MUX_dw_output_ld_val$wset_1__VAL_4 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
	       new_value__h5405 :
	       new_value__h17672 ;
  always@(rg_f3 or
	  result__h25241 or
	  result__h25295 or
	  result__h25349 or
	  rg_ld_val or result__h25268 or result__h25322 or result__h25376)
  begin
    case (rg_f3)
      3'b0: MUX_dw_output_ld_val$wset_1__VAL_6 = result__h25241;
      3'b001: MUX_dw_output_ld_val$wset_1__VAL_6 = result__h25295;
      3'b010: MUX_dw_output_ld_val$wset_1__VAL_6 = result__h25349;
      3'b011: MUX_dw_output_ld_val$wset_1__VAL_6 = rg_ld_val;
      3'b100: MUX_dw_output_ld_val$wset_1__VAL_6 = result__h25268;
      3'b101: MUX_dw_output_ld_val$wset_1__VAL_6 = result__h25322;
      3'b110: MUX_dw_output_ld_val$wset_1__VAL_6 = result__h25376;
      3'd7: MUX_dw_output_ld_val$wset_1__VAL_6 = 64'd0;
    endcase
  end
  assign MUX_f_near_mem_io_reqs$enq_1__VAL_1 =
	     { 1'd1, rg_pa, 72'hAAAAAAAAAAAAAAAAAA } ;
  assign MUX_f_near_mem_io_reqs$enq_1__VAL_2 =
	     { 1'd0, rg_pa, value__h26676, io_req_wr_data_wstrb__h27631 } ;
  assign MUX_master_xactor_rg_rd_addr$write_1__VAL_1 = { rg_pa, 3'd0 } ;
  assign MUX_master_xactor_rg_rd_addr$write_1__VAL_2 =
	     { cline_addr__h21212, 3'd0 } ;
  assign MUX_master_xactor_rg_rd_addr$write_1__VAL_3 =
	     { cline_fabric_addr__h21213, 3'd0 } ;
  assign MUX_master_xactor_rg_wr_addr$write_1__VAL_1 =
	     { io_req_wr_addr_awaddr__h27471, 3'd0 } ;
  assign MUX_master_xactor_rg_wr_addr$write_1__VAL_2 =
	     { mem_req_wr_addr_awaddr__h19473, 3'd0 } ;
  assign MUX_master_xactor_rg_wr_data$write_1__VAL_1 =
	     { io_req_wr_data_wdata__h27630, io_req_wr_data_wstrb__h27631 } ;
  assign MUX_master_xactor_rg_wr_data$write_1__VAL_2 =
	     { IF_rg_op_9_EQ_1_7_OR_rg_op_9_EQ_2_1_AND_rg_amo_ETC___d444,
	       mem_req_wr_data_wstrb__h19561 } ;
  assign MUX_master_xactor_rg_wr_data$write_1__VAL_3 =
	     { value__h26676, io_req_wr_data_wstrb__h27631 } ;
  assign MUX_ram_state_and_ctag_cset$a_put_3__VAL_1 = { 1'd1, rg_pa[63:12] } ;
  assign MUX_ram_word64_set$a_put_3__VAL_2 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       IF_rg_f3_28_EQ_0b0_29_THEN_IF_rg_addr_7_BITS_2_ETC___d350 :
	       IF_rg_f3_28_EQ_0b0_29_THEN_IF_rg_addr_7_BITS_2_ETC___d424 ;
  assign MUX_ram_word64_set$b_put_2__VAL_2 = rg_word64_set_in_cache + 9'd1 ;
  assign MUX_ram_word64_set$b_put_2__VAL_4 = { rg_addr[11:6], 3'd0 } ;
  assign MUX_rg_cset_in_cache$write_1__VAL_1 = rg_cset_in_cache + 6'd1 ;
  assign MUX_rg_exc_code$write_1__VAL_1 = (req_op == 2'd0) ? 4'd4 : 4'd6 ;
  assign MUX_rg_ld_val$write_1__VAL_2 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       x__h13084 :
	       IF_rg_f3_28_EQ_0b10_34_THEN_SEXT_IF_rg_f3_28_E_ETC___d292 ;
  assign MUX_rg_req_byte_in_cline$write_1__VAL_1 =
	     rg_req_byte_in_cline + 64'd8 ;
  assign MUX_rg_state$write_1__VAL_2 =
	     NOT_req_f3_BITS_1_TO_0_03_EQ_0b0_04_05_AND_NOT_ETC___d924 ?
	       5'd4 :
	       5'd3 ;
  assign MUX_rg_state$write_1__VAL_3 =
	     (master_xactor_rg_rd_data[65:64] == 2'd0) ? 5'd15 : 5'd4 ;
  assign MUX_rg_state$write_1__VAL_8 =
	     (master_xactor_rg_rd_data[65:64] != 2'd0 ||
	      rg_error_during_refill) ?
	       5'd4 :
	       5'd11 ;
  assign MUX_rg_state$write_1__VAL_9 =
	     soc_map$m_is_IO_addr ?
	       5'd13 :
	       IF_rg_op_9_EQ_0_0_OR_rg_op_9_EQ_2_1_AND_rg_amo_ETC___d101 ;
  assign MUX_rg_state$write_1__VAL_13 =
	     f_near_mem_io_rsps$D_OUT[64] ? 5'd15 : 5'd4 ;

  // inlined wires
  assign dw_valid$whas =
	     (WILL_FIRE_RL_rl_io_AMO_read_rsp ||
	      WILL_FIRE_RL_rl_io_read_rsp) &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ||
	     WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	     f_near_mem_io_rsps$D_OUT[64] ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	     rg_op_9_EQ_0_0_OR_rg_op_9_EQ_2_1_AND_rg_amo_fu_ETC___d126 ||
	     WILL_FIRE_RL_rl_drive_exception_rsp ||
	     WILL_FIRE_RL_rl_maintain_io_read_rsp ||
	     WILL_FIRE_RL_rl_ST_AMO_response ;
  assign master_xactor_crg_wr_addr_full$EN_port0__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign master_xactor_crg_wr_addr_full$port1__read =
	     !master_xactor_crg_wr_addr_full$EN_port0__write &&
	     master_xactor_crg_wr_addr_full ;
  assign master_xactor_crg_wr_addr_full$EN_port1__write =
	     master_xactor_crg_wr_addr_full$port1__read &&
	     mem_master_awready ;
  assign master_xactor_crg_wr_addr_full$port2__read =
	     !master_xactor_crg_wr_addr_full$EN_port1__write &&
	     master_xactor_crg_wr_addr_full$port1__read ;
  assign master_xactor_crg_wr_addr_full$EN_port2__write =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	     NOT_rg_op_9_EQ_0_0_7_AND_NOT_rg_op_9_EQ_2_1_8__ETC___d428 ||
	     WILL_FIRE_RL_rl_io_write_req ;
  assign master_xactor_crg_wr_addr_full$port3__read =
	     master_xactor_crg_wr_addr_full$EN_port2__write ?
	       1'd1 :
	       master_xactor_crg_wr_addr_full$port2__read ;
  assign master_xactor_crg_wr_data_full$EN_port0__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign master_xactor_crg_wr_data_full$port1__read =
	     !master_xactor_crg_wr_data_full$EN_port0__write &&
	     master_xactor_crg_wr_data_full ;
  assign master_xactor_crg_wr_data_full$EN_port1__write =
	     master_xactor_crg_wr_data_full$port1__read && mem_master_wready ;
  assign master_xactor_crg_wr_data_full$port2__read =
	     !master_xactor_crg_wr_data_full$EN_port1__write &&
	     master_xactor_crg_wr_data_full$port1__read ;
  assign master_xactor_crg_wr_data_full$EN_port2__write =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	     NOT_rg_op_9_EQ_0_0_7_AND_NOT_rg_op_9_EQ_2_1_8__ETC___d428 ||
	     WILL_FIRE_RL_rl_io_write_req ;
  assign master_xactor_crg_wr_data_full$port3__read =
	     master_xactor_crg_wr_data_full$EN_port2__write ?
	       1'd1 :
	       master_xactor_crg_wr_data_full$port2__read ;
  assign master_xactor_crg_wr_resp_full$EN_port0__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign master_xactor_crg_wr_resp_full$port1__read =
	     !master_xactor_crg_wr_resp_full$EN_port0__write &&
	     master_xactor_crg_wr_resp_full ;
  assign master_xactor_crg_wr_resp_full$port2__read =
	     !WILL_FIRE_RL_rl_discard_write_rsp &&
	     master_xactor_crg_wr_resp_full$port1__read ;
  assign master_xactor_crg_wr_resp_full$EN_port2__write =
	     mem_master_bvalid &&
	     !master_xactor_crg_wr_resp_full$port2__read ;
  assign master_xactor_crg_wr_resp_full$port3__read =
	     master_xactor_crg_wr_resp_full$EN_port2__write ||
	     master_xactor_crg_wr_resp_full$port2__read ;
  assign master_xactor_crg_rd_addr_full$EN_port0__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign master_xactor_crg_rd_addr_full$port1__read =
	     !master_xactor_crg_rd_addr_full$EN_port0__write &&
	     master_xactor_crg_rd_addr_full ;
  assign master_xactor_crg_rd_addr_full$EN_port1__write =
	     master_xactor_crg_rd_addr_full$port1__read &&
	     mem_master_arready ;
  assign master_xactor_crg_rd_addr_full$port2__read =
	     !master_xactor_crg_rd_addr_full$EN_port1__write &&
	     master_xactor_crg_rd_addr_full$port1__read ;
  assign master_xactor_crg_rd_addr_full$EN_port2__write =
	     WILL_FIRE_RL_rl_io_AMO_op_req || WILL_FIRE_RL_rl_io_read_req ||
	     WILL_FIRE_RL_rl_cache_refill_req_loop ||
	     WILL_FIRE_RL_rl_start_cache_refill ;
  assign master_xactor_crg_rd_addr_full$port3__read =
	     master_xactor_crg_rd_addr_full$EN_port2__write ||
	     master_xactor_crg_rd_addr_full$port2__read ;
  assign master_xactor_crg_rd_data_full$EN_port0__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign master_xactor_crg_rd_data_full$port1__read =
	     !master_xactor_crg_rd_data_full$EN_port0__write &&
	     master_xactor_crg_rd_data_full ;
  assign master_xactor_crg_rd_data_full$EN_port1__write =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp || WILL_FIRE_RL_rl_io_read_rsp ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop ;
  assign master_xactor_crg_rd_data_full$port2__read =
	     !master_xactor_crg_rd_data_full$EN_port1__write &&
	     master_xactor_crg_rd_data_full$port1__read ;
  assign master_xactor_crg_rd_data_full$EN_port2__write =
	     mem_master_rvalid &&
	     !master_xactor_crg_rd_data_full$port2__read ;
  assign master_xactor_crg_rd_data_full$port3__read =
	     master_xactor_crg_rd_data_full$EN_port2__write ||
	     master_xactor_crg_rd_data_full$port2__read ;
  assign ctr_wr_rsps_pending_crg$EN_port0__write =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	     NOT_rg_op_9_EQ_0_0_7_AND_NOT_rg_op_9_EQ_2_1_8__ETC___d428 ||
	     WILL_FIRE_RL_rl_io_write_req ;
  always@(MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1 or
	  MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2 or
	  WILL_FIRE_RL_rl_io_write_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  ctr_wr_rsps_pending_crg$port0__write_1 =
	      MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1;
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2:
	  ctr_wr_rsps_pending_crg$port0__write_1 =
	      MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1;
      WILL_FIRE_RL_rl_io_write_req:
	  ctr_wr_rsps_pending_crg$port0__write_1 =
	      MUX_ctr_wr_rsps_pending_crg$port0__write_1__VAL_1;
      default: ctr_wr_rsps_pending_crg$port0__write_1 =
		   4'b1010 /* unspecified value */ ;
    endcase
  end
  assign ctr_wr_rsps_pending_crg$port1__write_1 = b__h20503 - 4'd1 ;
  assign ctr_wr_rsps_pending_crg$port2__read =
	     WILL_FIRE_RL_rl_discard_write_rsp ?
	       ctr_wr_rsps_pending_crg$port1__write_1 :
	       b__h20503 ;
  assign ctr_wr_rsps_pending_crg$EN_port2__write =
	     WILL_FIRE_RL_rl_start_reset && !f_reset_reqs$D_OUT ;
  assign ctr_wr_rsps_pending_crg$port3__read =
	     ctr_wr_rsps_pending_crg$EN_port2__write ?
	       4'd0 :
	       ctr_wr_rsps_pending_crg$port2__read ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN = set_verbosity_verbosity ;
  assign cfg_verbosity$EN = EN_set_verbosity ;

  // register ctr_wr_rsps_pending_crg
  assign ctr_wr_rsps_pending_crg$D_IN = ctr_wr_rsps_pending_crg$port3__read ;
  assign ctr_wr_rsps_pending_crg$EN = 1'b1 ;

  // register master_xactor_crg_rd_addr_full
  assign master_xactor_crg_rd_addr_full$D_IN =
	     master_xactor_crg_rd_addr_full$port3__read ;
  assign master_xactor_crg_rd_addr_full$EN = 1'b1 ;

  // register master_xactor_crg_rd_data_full
  assign master_xactor_crg_rd_data_full$D_IN =
	     master_xactor_crg_rd_data_full$port3__read ;
  assign master_xactor_crg_rd_data_full$EN = 1'b1 ;

  // register master_xactor_crg_wr_addr_full
  assign master_xactor_crg_wr_addr_full$D_IN =
	     master_xactor_crg_wr_addr_full$port3__read ;
  assign master_xactor_crg_wr_addr_full$EN = 1'b1 ;

  // register master_xactor_crg_wr_data_full
  assign master_xactor_crg_wr_data_full$D_IN =
	     master_xactor_crg_wr_data_full$port3__read ;
  assign master_xactor_crg_wr_data_full$EN = 1'b1 ;

  // register master_xactor_crg_wr_resp_full
  assign master_xactor_crg_wr_resp_full$D_IN =
	     master_xactor_crg_wr_resp_full$port3__read ;
  assign master_xactor_crg_wr_resp_full$EN = 1'b1 ;

  // register master_xactor_rg_rd_addr
  always@(MUX_master_xactor_rg_rd_addr$write_1__SEL_1 or
	  MUX_master_xactor_rg_rd_addr$write_1__VAL_1 or
	  WILL_FIRE_RL_rl_start_cache_refill or
	  MUX_master_xactor_rg_rd_addr$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_cache_refill_req_loop or
	  MUX_master_xactor_rg_rd_addr$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_master_xactor_rg_rd_addr$write_1__SEL_1:
	  master_xactor_rg_rd_addr$D_IN =
	      MUX_master_xactor_rg_rd_addr$write_1__VAL_1;
      WILL_FIRE_RL_rl_start_cache_refill:
	  master_xactor_rg_rd_addr$D_IN =
	      MUX_master_xactor_rg_rd_addr$write_1__VAL_2;
      WILL_FIRE_RL_rl_cache_refill_req_loop:
	  master_xactor_rg_rd_addr$D_IN =
	      MUX_master_xactor_rg_rd_addr$write_1__VAL_3;
      default: master_xactor_rg_rd_addr$D_IN =
		   67'h2AAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign master_xactor_rg_rd_addr$EN =
	     WILL_FIRE_RL_rl_io_AMO_op_req || WILL_FIRE_RL_rl_io_read_req ||
	     WILL_FIRE_RL_rl_start_cache_refill ||
	     WILL_FIRE_RL_rl_cache_refill_req_loop ;

  // register master_xactor_rg_rd_data
  assign master_xactor_rg_rd_data$D_IN =
	     { mem_master_rresp, mem_master_rdata } ;
  assign master_xactor_rg_rd_data$EN = 1'd1 ;

  // register master_xactor_rg_wr_addr
  always@(MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  MUX_master_xactor_rg_wr_addr$write_1__VAL_1 or
	  MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2 or
	  MUX_master_xactor_rg_wr_addr$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_io_write_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  master_xactor_rg_wr_addr$D_IN =
	      MUX_master_xactor_rg_wr_addr$write_1__VAL_1;
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2:
	  master_xactor_rg_wr_addr$D_IN =
	      MUX_master_xactor_rg_wr_addr$write_1__VAL_2;
      WILL_FIRE_RL_rl_io_write_req:
	  master_xactor_rg_wr_addr$D_IN =
	      MUX_master_xactor_rg_wr_addr$write_1__VAL_1;
      default: master_xactor_rg_wr_addr$D_IN =
		   67'h2AAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign master_xactor_rg_wr_addr$EN =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	     NOT_rg_op_9_EQ_0_0_7_AND_NOT_rg_op_9_EQ_2_1_8__ETC___d428 ||
	     WILL_FIRE_RL_rl_io_write_req ;

  // register master_xactor_rg_wr_data
  always@(MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  MUX_master_xactor_rg_wr_data$write_1__VAL_1 or
	  MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2 or
	  MUX_master_xactor_rg_wr_data$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_io_write_req or
	  MUX_master_xactor_rg_wr_data$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  master_xactor_rg_wr_data$D_IN =
	      MUX_master_xactor_rg_wr_data$write_1__VAL_1;
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_2:
	  master_xactor_rg_wr_data$D_IN =
	      MUX_master_xactor_rg_wr_data$write_1__VAL_2;
      WILL_FIRE_RL_rl_io_write_req:
	  master_xactor_rg_wr_data$D_IN =
	      MUX_master_xactor_rg_wr_data$write_1__VAL_3;
      default: master_xactor_rg_wr_data$D_IN =
		   72'hAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign master_xactor_rg_wr_data$EN =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	     NOT_rg_op_9_EQ_0_0_7_AND_NOT_rg_op_9_EQ_2_1_8__ETC___d428 ||
	     WILL_FIRE_RL_rl_io_write_req ;

  // register master_xactor_rg_wr_resp
  assign master_xactor_rg_wr_resp$D_IN = mem_master_bresp ;
  assign master_xactor_rg_wr_resp$EN =
	     mem_master_bvalid &&
	     !master_xactor_crg_wr_resp_full$port2__read ;

  // register rg_addr
  assign rg_addr$D_IN = req_addr ;
  assign rg_addr$EN = EN_req ;

  // register rg_amo_funct7
  assign rg_amo_funct7$D_IN = req_amo_funct7 ;
  assign rg_amo_funct7$EN = EN_req ;

  // register rg_cset_in_cache
  assign rg_cset_in_cache$D_IN =
	     WILL_FIRE_RL_rl_reset ?
	       MUX_rg_cset_in_cache$write_1__VAL_1 :
	       6'd0 ;
  assign rg_cset_in_cache$EN =
	     WILL_FIRE_RL_rl_reset || WILL_FIRE_RL_rl_start_reset ;

  // register rg_error_during_refill
  assign rg_error_during_refill$D_IN =
	     MUX_rg_error_during_refill$write_1__SEL_1 ;
  assign rg_error_during_refill$EN =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_rg_rd_data[65:64] != 2'd0 ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // register rg_exc_code
  always@(MUX_rg_exc_code$write_1__SEL_1 or
	  MUX_rg_exc_code$write_1__VAL_1 or
	  MUX_rg_exc_code$write_1__SEL_2 or
	  MUX_rg_exc_code$write_1__SEL_3 or
	  MUX_rg_error_during_refill$write_1__SEL_1 or
	  access_exc_code__h3109 or MUX_rg_exc_code$write_1__SEL_5)
  case (1'b1)
    MUX_rg_exc_code$write_1__SEL_1:
	rg_exc_code$D_IN = MUX_rg_exc_code$write_1__VAL_1;
    MUX_rg_exc_code$write_1__SEL_2: rg_exc_code$D_IN = 4'd7;
    MUX_rg_exc_code$write_1__SEL_3: rg_exc_code$D_IN = 4'd5;
    MUX_rg_error_during_refill$write_1__SEL_1:
	rg_exc_code$D_IN = access_exc_code__h3109;
    MUX_rg_exc_code$write_1__SEL_5: rg_exc_code$D_IN = 4'd5;
    default: rg_exc_code$D_IN = 4'b1010 /* unspecified value */ ;
  endcase
  assign rg_exc_code$EN =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_rg_rd_data[65:64] != 2'd0 ||
	     WILL_FIRE_RL_rl_io_read_rsp &&
	     master_xactor_rg_rd_data[65:64] != 2'd0 ||
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[65:64] != 2'd0 ||
	     WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	     !f_near_mem_io_rsps$D_OUT[64] ||
	     EN_req &&
	     NOT_req_f3_BITS_1_TO_0_03_EQ_0b0_04_05_AND_NOT_ETC___d924 ;

  // register rg_f3
  assign rg_f3$D_IN = req_f3 ;
  assign rg_f3$EN = EN_req ;

  // register rg_ld_val
  always@(MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1 or
	  new_ld_val__h27403 or
	  MUX_rg_ld_val$write_1__SEL_2 or
	  MUX_rg_ld_val$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_io_read_rsp or
	  master_xactor_rg_rd_data or
	  WILL_FIRE_RL_rl_io_near_mem_read_rsp or
	  f_near_mem_io_rsps$D_OUT or WILL_FIRE_RL_rl_io_AMO_SC_req)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ctr_wr_rsps_pending_crg$port0__write_1__SEL_1:
	  rg_ld_val$D_IN = new_ld_val__h27403;
      MUX_rg_ld_val$write_1__SEL_2:
	  rg_ld_val$D_IN = MUX_rg_ld_val$write_1__VAL_2;
      WILL_FIRE_RL_rl_io_read_rsp:
	  rg_ld_val$D_IN = master_xactor_rg_rd_data[63:0];
      WILL_FIRE_RL_rl_io_near_mem_read_rsp:
	  rg_ld_val$D_IN = f_near_mem_io_rsps$D_OUT[63:0];
      WILL_FIRE_RL_rl_io_AMO_SC_req: rg_ld_val$D_IN = 64'd1;
      default: rg_ld_val$D_IN = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rg_ld_val$EN =
	     WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_soc_map_m_is_IO_addr_rg_addr_7_8_04_AND_NO_ETC___d288 ||
	     WILL_FIRE_RL_rl_io_read_rsp ||
	     WILL_FIRE_RL_rl_io_near_mem_read_rsp ||
	     WILL_FIRE_RL_rl_io_AMO_SC_req ;

  // register rg_lower_word32
  assign rg_lower_word32$D_IN = 32'h0 ;
  assign rg_lower_word32$EN = 1'b0 ;

  // register rg_lower_word32_full
  assign rg_lower_word32_full$D_IN = 1'd0 ;
  assign rg_lower_word32_full$EN =
	     WILL_FIRE_RL_rl_start_cache_refill ||
	     WILL_FIRE_RL_rl_start_reset ;

  // register rg_lrsc_pa
  assign rg_lrsc_pa$D_IN = rg_addr ;
  assign rg_lrsc_pa$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__4_BITS_51_TO_0_ETC___d69 ;

  // register rg_lrsc_valid
  assign rg_lrsc_valid$D_IN =
	     MUX_rg_lrsc_valid$write_1__SEL_2 &&
	     rg_op_9_EQ_0_0_OR_rg_op_9_EQ_2_1_AND_rg_amo_fu_ETC___d123 ;
  assign rg_lrsc_valid$EN =
	     (WILL_FIRE_RL_rl_io_near_mem_read_req ||
	      WILL_FIRE_RL_rl_io_read_req) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	     rg_op_9_EQ_0_0_OR_rg_op_9_EQ_2_1_AND_rg_amo_fu_ETC___d121 ||
	     WILL_FIRE_RL_rl_start_reset ;

  // register rg_op
  assign rg_op$D_IN = req_op ;
  assign rg_op$EN = EN_req ;

  // register rg_pa
  assign rg_pa$D_IN = EN_req ? req_addr : rg_addr ;
  assign rg_pa$EN = EN_req || WILL_FIRE_RL_rl_probe_and_immed_rsp ;

  // register rg_pte_pa
  assign rg_pte_pa$D_IN = 64'h0 ;
  assign rg_pte_pa$EN = 1'b0 ;

  // register rg_req_byte_in_cline
  assign rg_req_byte_in_cline$D_IN =
	     WILL_FIRE_RL_rl_cache_refill_req_loop ?
	       MUX_rg_req_byte_in_cline$write_1__VAL_1 :
	       64'd8 ;
  assign rg_req_byte_in_cline$EN =
	     WILL_FIRE_RL_rl_cache_refill_req_loop ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // register rg_requesting_cline
  always@(WILL_FIRE_RL_rl_cache_refill_req_loop or
	  rg_req_byte_in_cline or
	  WILL_FIRE_RL_rl_start_reset or WILL_FIRE_RL_rl_start_cache_refill)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_cache_refill_req_loop:
	  rg_requesting_cline$D_IN = rg_req_byte_in_cline != 64'd56;
      WILL_FIRE_RL_rl_start_reset: rg_requesting_cline$D_IN = 1'd0;
      WILL_FIRE_RL_rl_start_cache_refill: rg_requesting_cline$D_IN = 1'd1;
      default: rg_requesting_cline$D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign rg_requesting_cline$EN =
	     WILL_FIRE_RL_rl_cache_refill_req_loop ||
	     WILL_FIRE_RL_rl_start_reset ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // register rg_st_amo_val
  assign rg_st_amo_val$D_IN = EN_req ? req_st_value : new_st_val__h5345 ;
  assign rg_st_amo_val$EN =
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_soc_map_m_is_IO_addr_rg_addr_7_8_04_AND_NO_ETC___d509 ||
	     EN_req ;

  // register rg_state
  always@(WILL_FIRE_RL_rl_start_cache_refill or
	  EN_req or
	  MUX_rg_state$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_io_AMO_read_rsp or
	  MUX_rg_state$write_1__VAL_3 or
	  WILL_FIRE_RL_rl_io_AMO_op_req or
	  WILL_FIRE_RL_rl_io_write_req or
	  WILL_FIRE_RL_rl_io_read_rsp or
	  WILL_FIRE_RL_rl_io_read_req or
	  MUX_rg_state$write_1__SEL_8 or
	  MUX_rg_state$write_1__VAL_8 or
	  MUX_rg_state$write_1__SEL_9 or
	  MUX_rg_state$write_1__VAL_9 or
	  WILL_FIRE_RL_rl_start_reset or
	  WILL_FIRE_RL_rl_io_AMO_SC_req or
	  WILL_FIRE_RL_rl_io_near_mem_write_req or
	  WILL_FIRE_RL_rl_io_near_mem_read_rsp or
	  MUX_rg_state$write_1__VAL_13 or
	  WILL_FIRE_RL_rl_io_near_mem_read_req or
	  WILL_FIRE_RL_rl_rereq or MUX_rg_state$write_1__SEL_16)
  case (1'b1)
    WILL_FIRE_RL_rl_start_cache_refill: rg_state$D_IN = 5'd10;
    EN_req: rg_state$D_IN = MUX_rg_state$write_1__VAL_2;
    WILL_FIRE_RL_rl_io_AMO_read_rsp:
	rg_state$D_IN = MUX_rg_state$write_1__VAL_3;
    WILL_FIRE_RL_rl_io_AMO_op_req: rg_state$D_IN = 5'd16;
    WILL_FIRE_RL_rl_io_write_req: rg_state$D_IN = 5'd12;
    WILL_FIRE_RL_rl_io_read_rsp: rg_state$D_IN = MUX_rg_state$write_1__VAL_3;
    WILL_FIRE_RL_rl_io_read_req: rg_state$D_IN = 5'd14;
    MUX_rg_state$write_1__SEL_8: rg_state$D_IN = MUX_rg_state$write_1__VAL_8;
    MUX_rg_state$write_1__SEL_9: rg_state$D_IN = MUX_rg_state$write_1__VAL_9;
    WILL_FIRE_RL_rl_start_reset: rg_state$D_IN = 5'd1;
    WILL_FIRE_RL_rl_io_AMO_SC_req || WILL_FIRE_RL_rl_io_near_mem_write_req:
	rg_state$D_IN = 5'd12;
    WILL_FIRE_RL_rl_io_near_mem_read_rsp:
	rg_state$D_IN = MUX_rg_state$write_1__VAL_13;
    WILL_FIRE_RL_rl_io_near_mem_read_req: rg_state$D_IN = 5'd14;
    WILL_FIRE_RL_rl_rereq: rg_state$D_IN = 5'd3;
    MUX_rg_state$write_1__SEL_16: rg_state$D_IN = 5'd2;
    default: rg_state$D_IN = 5'b01010 /* unspecified value */ ;
  endcase
  assign rg_state$EN =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 6'd63 ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[2:0] == 3'd7 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     (soc_map$m_is_IO_addr ||
	      rg_op_9_EQ_0_0_OR_rg_op_9_EQ_2_1_AND_rg_amo_fu_ETC___d86 ||
	      NOT_rg_op_9_EQ_0_0_7_AND_NOT_rg_op_9_EQ_2_1_8__ETC___d96) ||
	     WILL_FIRE_RL_rl_io_AMO_read_rsp ||
	     WILL_FIRE_RL_rl_io_read_rsp ||
	     WILL_FIRE_RL_rl_io_near_mem_read_rsp ||
	     EN_req ||
	     WILL_FIRE_RL_rl_start_reset ||
	     WILL_FIRE_RL_rl_rereq ||
	     WILL_FIRE_RL_rl_start_cache_refill ||
	     WILL_FIRE_RL_rl_io_AMO_SC_req ||
	     WILL_FIRE_RL_rl_io_near_mem_write_req ||
	     WILL_FIRE_RL_rl_io_write_req ||
	     WILL_FIRE_RL_rl_io_near_mem_read_req ||
	     WILL_FIRE_RL_rl_io_read_req ||
	     WILL_FIRE_RL_rl_io_AMO_op_req ;

  // register rg_word64_set_in_cache
  assign rg_word64_set_in_cache$D_IN =
	     MUX_ram_word64_set$b_put_1__SEL_2 ?
	       MUX_ram_word64_set$b_put_2__VAL_2 :
	       MUX_ram_word64_set$b_put_2__VAL_4 ;
  assign rg_word64_set_in_cache$EN =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[2:0] != 3'd7 ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // submodule f_near_mem_io_reqs
  assign f_near_mem_io_reqs$D_IN =
	     WILL_FIRE_RL_rl_io_near_mem_read_req ?
	       MUX_f_near_mem_io_reqs$enq_1__VAL_1 :
	       MUX_f_near_mem_io_reqs$enq_1__VAL_2 ;
  assign f_near_mem_io_reqs$ENQ =
	     WILL_FIRE_RL_rl_io_near_mem_read_req ||
	     WILL_FIRE_RL_rl_io_near_mem_write_req ;
  assign f_near_mem_io_reqs$DEQ = EN_near_mem_io_client_request_get ;
  assign f_near_mem_io_reqs$CLR = 1'b0 ;

  // submodule f_near_mem_io_rsps
  assign f_near_mem_io_rsps$D_IN = near_mem_io_client_response_put ;
  assign f_near_mem_io_rsps$ENQ = EN_near_mem_io_client_response_put ;
  assign f_near_mem_io_rsps$DEQ =
	     WILL_FIRE_RL_rl_io_near_mem_write_rsp ||
	     WILL_FIRE_RL_rl_io_near_mem_read_rsp ;
  assign f_near_mem_io_rsps$CLR = 1'b0 ;

  // submodule f_reset_reqs
  assign f_reset_reqs$D_IN = !EN_server_reset_request_put ;
  assign f_reset_reqs$ENQ =
	     EN_server_reset_request_put || EN_server_flush_request_put ;
  assign f_reset_reqs$DEQ =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 6'd63 ;
  assign f_reset_reqs$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$D_IN = f_reset_reqs$D_OUT ;
  assign f_reset_rsps$ENQ =
	     WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 6'd63 ;
  assign f_reset_rsps$DEQ =
	     EN_server_flush_response_get || EN_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule ram_state_and_ctag_cset
  assign ram_state_and_ctag_cset$ADDRA =
	     WILL_FIRE_RL_rl_start_cache_refill ?
	       rg_addr[11:6] :
	       rg_cset_in_cache ;
  assign ram_state_and_ctag_cset$ADDRB =
	     MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       req_addr[11:6] :
	       rg_addr[11:6] ;
  assign ram_state_and_ctag_cset$DIA =
	     WILL_FIRE_RL_rl_start_cache_refill ?
	       MUX_ram_state_and_ctag_cset$a_put_3__VAL_1 :
	       53'h0AAAAAAAAAAAAA ;
  assign ram_state_and_ctag_cset$DIB =
	     MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 ?
	       53'h0AAAAAAAAAAAAA /* unspecified value */  :
	       53'h0AAAAAAAAAAAAA /* unspecified value */  ;
  assign ram_state_and_ctag_cset$WEA = 1'd1 ;
  assign ram_state_and_ctag_cset$WEB = 1'd0 ;
  assign ram_state_and_ctag_cset$ENA =
	     WILL_FIRE_RL_rl_start_cache_refill || WILL_FIRE_RL_rl_reset ;
  assign ram_state_and_ctag_cset$ENB =
	     EN_req &&
	     req_f3_BITS_1_TO_0_03_EQ_0b0_04_OR_req_f3_BITS_ETC___d933 ||
	     WILL_FIRE_RL_rl_rereq ;

  // submodule ram_word64_set
  assign ram_word64_set$ADDRA =
	     MUX_ram_word64_set$a_put_1__SEL_1 ?
	       rg_word64_set_in_cache :
	       rg_addr[11:3] ;
  always@(MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  req_addr or
	  MUX_ram_word64_set$b_put_1__SEL_2 or
	  MUX_ram_word64_set$b_put_2__VAL_2 or
	  WILL_FIRE_RL_rl_rereq or
	  rg_addr or
	  WILL_FIRE_RL_rl_start_cache_refill or
	  MUX_ram_word64_set$b_put_2__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  ram_word64_set$ADDRB = req_addr[11:3];
      MUX_ram_word64_set$b_put_1__SEL_2:
	  ram_word64_set$ADDRB = MUX_ram_word64_set$b_put_2__VAL_2;
      WILL_FIRE_RL_rl_rereq: ram_word64_set$ADDRB = rg_addr[11:3];
      WILL_FIRE_RL_rl_start_cache_refill:
	  ram_word64_set$ADDRB = MUX_ram_word64_set$b_put_2__VAL_4;
      default: ram_word64_set$ADDRB = 9'b010101010 /* unspecified value */ ;
    endcase
  end
  assign ram_word64_set$DIA =
	     MUX_ram_word64_set$a_put_1__SEL_1 ?
	       master_xactor_rg_rd_data[63:0] :
	       MUX_ram_word64_set$a_put_3__VAL_2 ;
  always@(MUX_ram_state_and_ctag_cset$b_put_1__SEL_1 or
	  MUX_ram_word64_set$b_put_1__SEL_2 or
	  WILL_FIRE_RL_rl_rereq or WILL_FIRE_RL_rl_start_cache_refill)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ram_state_and_ctag_cset$b_put_1__SEL_1:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      MUX_ram_word64_set$b_put_1__SEL_2:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_rl_rereq:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      WILL_FIRE_RL_rl_start_cache_refill:
	  ram_word64_set$DIB = 64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
      default: ram_word64_set$DIB =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign ram_word64_set$WEA = 1'd1 ;
  assign ram_word64_set$WEB = 1'd0 ;
  assign ram_word64_set$ENA =
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     master_xactor_rg_rd_data[65:64] == 2'd0 ||
	     WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	     NOT_soc_map_m_is_IO_addr_rg_addr_7_8_04_AND_NO_ETC___d299 ;
  assign ram_word64_set$ENB =
	     EN_req &&
	     req_f3_BITS_1_TO_0_03_EQ_0b0_04_OR_req_f3_BITS_ETC___d933 ||
	     WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	     rg_word64_set_in_cache[2:0] != 3'd7 ||
	     WILL_FIRE_RL_rl_rereq ||
	     WILL_FIRE_RL_rl_start_cache_refill ;

  // submodule soc_map
  assign soc_map$m_is_IO_addr_addr = rg_addr ;
  assign soc_map$m_is_near_mem_IO_addr_addr = rg_pa ;

  // remaining internal signals
  assign IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_1_EL_ETC___d261 =
	     (rg_addr[2:0] == 3'h0) ? 64'd1 : 64'd0 ;
  assign IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_mast_ETC___d791 =
	     (rg_addr[2:0] == 3'h0) ? master_xactor_rg_rd_data[63:0] : 64'd0 ;
  assign IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_ram__ETC___d247 =
	     (rg_addr[2:0] == 3'h0) ? word64__h5182 : 64'd0 ;
  assign IF_rg_f3_28_EQ_0b10_34_THEN_SEXT_rg_st_amo_val_ETC___d356 =
	     (rg_f3 == 3'b010) ?
	       { {32{rg_st_amo_val_BITS_31_TO_0__q37[31]}},
		 rg_st_amo_val_BITS_31_TO_0__q37 } :
	       rg_st_amo_val ;
  assign IF_rg_op_9_EQ_0_0_OR_rg_op_9_EQ_2_1_AND_rg_amo_ETC___d101 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
	       5'd9 :
	       IF_rg_op_9_EQ_1_7_OR_rg_op_9_EQ_2_1_AND_rg_amo_ETC___d100 ;
  assign IF_rg_op_9_EQ_1_7_OR_rg_op_9_EQ_2_1_AND_rg_amo_ETC___d100 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       5'd12 :
	       ((!ram_state_and_ctag_cset$DOB[52] ||
		 !ram_state_and_ctag_cset_b_read__4_BITS_51_TO_0_ETC___d69) ?
		  5'd9 :
		  5'd12) ;
  assign IF_rg_op_9_EQ_1_7_OR_rg_op_9_EQ_2_1_AND_rg_amo_ETC___d444 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       mem_req_wr_data_wdata__h18802 :
	       mem_req_wr_data_wdata__h19560 ;
  assign IF_rg_op_9_EQ_1_7_OR_rg_op_9_EQ_2_1_AND_rg_amo_ETC___d73 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) ?
	       rg_op_9_EQ_2_1_AND_rg_amo_funct7_2_BITS_6_TO_2_ETC___d63 :
	       !ram_state_and_ctag_cset$DOB[52] ||
	       !ram_state_and_ctag_cset_b_read__4_BITS_51_TO_0_ETC___d69 ||
	       !master_xactor_crg_wr_addr_full$port2__read &&
	       !master_xactor_crg_wr_data_full$port2__read ;
  assign NOT_cfg_verbosity_read__0_ULE_1_1___d12 = cfg_verbosity > 4'd1 ;
  assign NOT_cfg_verbosity_read__0_ULE_2_37___d538 = cfg_verbosity > 4'd2 ;
  assign NOT_ram_state_and_ctag_cset_b_read__4_BIT_52_5_ETC___d109 =
	     (!ram_state_and_ctag_cset$DOB[52] ||
	      !ram_state_and_ctag_cset_b_read__4_BITS_51_TO_0_ETC___d69) &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     rg_addr_7_EQ_rg_lrsc_pa_3___d107 ;
  assign NOT_req_f3_BITS_1_TO_0_03_EQ_0b0_04_05_AND_NOT_ETC___d924 =
	     req_f3[1:0] != 2'b0 && (req_f3[1:0] != 2'b01 || req_addr[0]) &&
	     (req_f3[1:0] != 2'b10 || req_addr[1:0] != 2'b0) &&
	     (req_f3[1:0] != 2'b11 || req_addr[2:0] != 3'b0) ;
  assign NOT_rg_op_9_EQ_0_0_7_AND_NOT_rg_op_9_EQ_2_1_8__ETC___d428 =
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     (rg_op_9_EQ_1_7_OR_rg_op_9_EQ_2_1_AND_rg_amo_fu_ETC___d426 ||
	      NOT_rg_op_9_EQ_1_7_15_AND_NOT_rg_op_9_EQ_2_1_8_ETC___d296) ;
  assign NOT_rg_op_9_EQ_0_0_7_AND_NOT_rg_op_9_EQ_2_1_8__ETC___d472 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_9_EQ_2_1_8_OR_NOT_rg_amo_funct7_2_BI_ETC___d470 ;
  assign NOT_rg_op_9_EQ_0_0_7_AND_NOT_rg_op_9_EQ_2_1_8__ETC___d481 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_9_EQ_2_1_8_OR_NOT_rg_amo_funct7_2_BI_ETC___d479 ;
  assign NOT_rg_op_9_EQ_0_0_7_AND_NOT_rg_op_9_EQ_2_1_8__ETC___d487 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_9_EQ_2_1_8_OR_NOT_rg_amo_funct7_2_BI_ETC___d485 ;
  assign NOT_rg_op_9_EQ_0_0_7_AND_NOT_rg_op_9_EQ_2_1_8__ETC___d96 =
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid && rg_lrsc_pa_3_EQ_rg_addr_7___d54) ;
  assign NOT_rg_op_9_EQ_1_7_15_AND_NOT_rg_op_9_EQ_2_1_8_ETC___d118 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__4_BITS_51_TO_0_ETC___d69 &&
	     rg_addr_7_EQ_rg_lrsc_pa_3___d107 ;
  assign NOT_rg_op_9_EQ_1_7_15_AND_NOT_rg_op_9_EQ_2_1_8_ETC___d296 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__4_BITS_51_TO_0_ETC___d69 ;
  assign NOT_rg_op_9_EQ_1_7_15_AND_NOT_rg_op_9_EQ_2_1_8_ETC___d495 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     (!ram_state_and_ctag_cset$DOB[52] ||
	      !ram_state_and_ctag_cset_b_read__4_BITS_51_TO_0_ETC___d69) &&
	     NOT_cfg_verbosity_read__0_ULE_1_1___d12 ;
  assign NOT_rg_op_9_EQ_1_7_15_AND_NOT_rg_op_9_EQ_2_1_8_ETC___d499 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__4_BITS_51_TO_0_ETC___d69 &&
	     ctr_wr_rsps_pending_crg == 4'd15 ;
  assign NOT_rg_op_9_EQ_1_7_15_AND_NOT_rg_op_9_EQ_2_1_8_ETC___d505 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__4_BITS_51_TO_0_ETC___d69 &&
	     rg_addr_7_EQ_rg_lrsc_pa_3___d107 &&
	     NOT_cfg_verbosity_read__0_ULE_1_1___d12 ;
  assign NOT_rg_op_9_EQ_1_7_15_AND_NOT_rg_op_9_EQ_2_1_8_ETC___d510 =
	     rg_op != 2'd1 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__4_BITS_51_TO_0_ETC___d69 &&
	     NOT_cfg_verbosity_read__0_ULE_1_1___d12 ;
  assign NOT_rg_op_9_EQ_2_1_8_OR_NOT_rg_amo_funct7_2_BI_ETC___d294 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid && rg_lrsc_pa_3_EQ_rg_addr_7___d54) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__4_BITS_51_TO_0_ETC___d69 ;
  assign NOT_rg_op_9_EQ_2_1_8_OR_NOT_rg_amo_funct7_2_BI_ETC___d470 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid && rg_lrsc_pa_3_EQ_rg_addr_7___d54) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__4_BITS_51_TO_0_ETC___d69 &&
	     NOT_cfg_verbosity_read__0_ULE_1_1___d12 ;
  assign NOT_rg_op_9_EQ_2_1_8_OR_NOT_rg_amo_funct7_2_BI_ETC___d474 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid && rg_lrsc_pa_3_EQ_rg_addr_7___d54) &&
	     (!ram_state_and_ctag_cset$DOB[52] ||
	      !ram_state_and_ctag_cset_b_read__4_BITS_51_TO_0_ETC___d69) &&
	     NOT_cfg_verbosity_read__0_ULE_1_1___d12 ;
  assign NOT_rg_op_9_EQ_2_1_8_OR_NOT_rg_amo_funct7_2_BI_ETC___d479 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid && rg_lrsc_pa_3_EQ_rg_addr_7___d54) &&
	     ctr_wr_rsps_pending_crg == 4'd15 ;
  assign NOT_rg_op_9_EQ_2_1_8_OR_NOT_rg_amo_funct7_2_BI_ETC___d485 =
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid && rg_lrsc_pa_3_EQ_rg_addr_7___d54) &&
	     NOT_cfg_verbosity_read__0_ULE_1_1___d12 ;
  assign NOT_soc_map_m_is_IO_addr_rg_addr_7_8_04_AND_NO_ETC___d288 =
	     !soc_map$m_is_IO_addr && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     (rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 ||
	      rg_op != 2'd1 && ram_state_and_ctag_cset$DOB[52] &&
	      ram_state_and_ctag_cset_b_read__4_BITS_51_TO_0_ETC___d69) ;
  assign NOT_soc_map_m_is_IO_addr_rg_addr_7_8_04_AND_NO_ETC___d299 =
	     !soc_map$m_is_IO_addr && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     rg_op_9_EQ_1_7_OR_rg_op_9_EQ_2_1_AND_rg_amo_fu_ETC___d297 ;
  assign NOT_soc_map_m_is_IO_addr_rg_addr_7_8_04_AND_NO_ETC___d501 =
	     !soc_map$m_is_IO_addr && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_9_EQ_1_7_15_AND_NOT_rg_op_9_EQ_2_1_8_ETC___d499 ;
  assign NOT_soc_map_m_is_IO_addr_rg_addr_7_8_04_AND_NO_ETC___d509 =
	     !soc_map$m_is_IO_addr && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_9_EQ_1_7_15_AND_NOT_rg_op_9_EQ_2_1_8_ETC___d296 ;
  assign NOT_soc_map_m_is_IO_addr_rg_addr_7_8_04_AND_NO_ETC___d512 =
	     !soc_map$m_is_IO_addr && rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     NOT_rg_op_9_EQ_1_7_15_AND_NOT_rg_op_9_EQ_2_1_8_ETC___d510 ;
  assign _theResult___fst__h18920 = rg_st_amo_val << shift_bits__h19480 ;
  assign _theResult___fst__h19678 = new_st_val__h5345 << shift_bits__h19480 ;
  assign _theResult___fst__h26399 = rg_st_amo_val << shift_bits__h27479 ;
  assign _theResult___fst__h27748 = word64__h27476 << shift_bits__h27479 ;
  assign access_exc_code__h3109 =
	     dmem_not_imem ?
	       ((rg_op == 2'd0 ||
		 rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) ?
		  4'd5 :
		  4'd7) :
	       4'd1 ;
  assign b__h20503 =
	     ctr_wr_rsps_pending_crg$EN_port0__write ?
	       ctr_wr_rsps_pending_crg$port0__write_1 :
	       ctr_wr_rsps_pending_crg ;
  assign cline_addr__h21212 = { rg_pa[63:6], 6'd0 } ;
  assign cline_fabric_addr__h21213 =
	     cline_addr__h21212 | rg_req_byte_in_cline ;
  assign f_near_mem_io_rspsD_OUT_BITS_15_TO_0__q17 =
	     f_near_mem_io_rsps$D_OUT[15:0] ;
  assign f_near_mem_io_rspsD_OUT_BITS_31_TO_0__q19 =
	     f_near_mem_io_rsps$D_OUT[31:0] ;
  assign f_near_mem_io_rspsD_OUT_BITS_7_TO_0__q15 =
	     f_near_mem_io_rsps$D_OUT[7:0] ;
  assign io_req_wr_addr_awaddr__h27471 = { rg_pa[63:3], 3'd0 } ;
  assign lrsc_result__h13074 =
	     !rg_lrsc_valid || !rg_lrsc_pa_3_EQ_rg_addr_7___d54 ;
  assign master_xactor_crg_rd_data_full_port1__read__41_ETC___d725 =
	     master_xactor_crg_rd_data_full$port1__read &&
	     (master_xactor_rg_rd_data[65:64] != 2'd0 ||
	      !master_xactor_crg_wr_addr_full$port2__read &&
	      !master_xactor_crg_wr_data_full$port2__read) ;
  assign master_xactor_rg_rd_data_BITS_15_TO_0__q2 =
	     master_xactor_rg_rd_data[15:0] ;
  assign master_xactor_rg_rd_data_BITS_15_TO_8__q4 =
	     master_xactor_rg_rd_data[15:8] ;
  assign master_xactor_rg_rd_data_BITS_23_TO_16__q5 =
	     master_xactor_rg_rd_data[23:16] ;
  assign master_xactor_rg_rd_data_BITS_31_TO_0__q3 =
	     master_xactor_rg_rd_data[31:0] ;
  assign master_xactor_rg_rd_data_BITS_31_TO_16__q6 =
	     master_xactor_rg_rd_data[31:16] ;
  assign master_xactor_rg_rd_data_BITS_31_TO_24__q7 =
	     master_xactor_rg_rd_data[31:24] ;
  assign master_xactor_rg_rd_data_BITS_39_TO_32__q8 =
	     master_xactor_rg_rd_data[39:32] ;
  assign master_xactor_rg_rd_data_BITS_47_TO_32__q9 =
	     master_xactor_rg_rd_data[47:32] ;
  assign master_xactor_rg_rd_data_BITS_47_TO_40__q11 =
	     master_xactor_rg_rd_data[47:40] ;
  assign master_xactor_rg_rd_data_BITS_55_TO_48__q12 =
	     master_xactor_rg_rd_data[55:48] ;
  assign master_xactor_rg_rd_data_BITS_63_TO_32__q10 =
	     master_xactor_rg_rd_data[63:32] ;
  assign master_xactor_rg_rd_data_BITS_63_TO_48__q13 =
	     master_xactor_rg_rd_data[63:48] ;
  assign master_xactor_rg_rd_data_BITS_63_TO_56__q14 =
	     master_xactor_rg_rd_data[63:56] ;
  assign master_xactor_rg_rd_data_BITS_7_TO_0__q1 =
	     master_xactor_rg_rd_data[7:0] ;
  assign mem_req_wr_addr_awaddr__h19473 = { rg_addr[63:3], 3'd0 } ;
  assign new_ld_val7403_BITS_15_TO_0__q42 = new_ld_val__h27403[15:0] ;
  assign new_ld_val7403_BITS_31_TO_0__q43 = new_ld_val__h27403[31:0] ;
  assign new_ld_val7403_BITS_7_TO_0__q41 = new_ld_val__h27403[7:0] ;
  assign new_st_val__h13522 = { 32'd0, _theResult_____2__h13518[31:0] } ;
  assign new_st_val__h13614 =
	     IF_rg_f3_28_EQ_0b10_34_THEN_SEXT_IF_rg_f3_28_E_ETC___d292 +
	     IF_rg_f3_28_EQ_0b10_34_THEN_SEXT_rg_st_amo_val_ETC___d356 ;
  assign new_st_val__h14594 = w1__h13510 ^ w2__h27760 ;
  assign new_st_val__h14598 = w1__h13510 & w2__h27760 ;
  assign new_st_val__h14602 = w1__h13510 | w2__h27760 ;
  assign new_st_val__h14606 =
	     (w1__h13510 < w2__h27760) ? w1__h13510 : w2__h27760 ;
  assign new_st_val__h14611 =
	     (w1__h13510 <= w2__h27760) ? w2__h27760 : w1__h13510 ;
  assign new_st_val__h14617 =
	     ((IF_rg_f3_28_EQ_0b10_34_THEN_SEXT_IF_rg_f3_28_E_ETC___d292 ^
	       64'h8000000000000000) <
	      (IF_rg_f3_28_EQ_0b10_34_THEN_SEXT_rg_st_amo_val_ETC___d356 ^
	       64'h8000000000000000)) ?
	       w1__h13510 :
	       w2__h27760 ;
  assign new_st_val__h14622 =
	     ((IF_rg_f3_28_EQ_0b10_34_THEN_SEXT_IF_rg_f3_28_E_ETC___d292 ^
	       64'h8000000000000000) <=
	      (IF_rg_f3_28_EQ_0b10_34_THEN_SEXT_rg_st_amo_val_ETC___d356 ^
	       64'h8000000000000000)) ?
	       w2__h27760 :
	       w1__h13510 ;
  assign new_st_val__h27770 = { 32'd0, _theResult_____2__h27766[31:0] } ;
  assign new_st_val__h27861 =
	     new_ld_val__h27403 +
	     IF_rg_f3_28_EQ_0b10_34_THEN_SEXT_rg_st_amo_val_ETC___d356 ;
  assign new_st_val__h28815 = w1__h27758 ^ w2__h27760 ;
  assign new_st_val__h28819 = w1__h27758 & w2__h27760 ;
  assign new_st_val__h28823 = w1__h27758 | w2__h27760 ;
  assign new_st_val__h28827 =
	     (w1__h27758 < w2__h27760) ? w1__h27758 : w2__h27760 ;
  assign new_st_val__h28832 =
	     (w1__h27758 <= w2__h27760) ? w2__h27760 : w1__h27758 ;
  assign new_st_val__h28838 =
	     ((new_ld_val__h27403 ^ 64'h8000000000000000) <
	      (IF_rg_f3_28_EQ_0b10_34_THEN_SEXT_rg_st_amo_val_ETC___d356 ^
	       64'h8000000000000000)) ?
	       w1__h27758 :
	       w2__h27760 ;
  assign new_st_val__h28843 =
	     ((new_ld_val__h27403 ^ 64'h8000000000000000) <=
	      (IF_rg_f3_28_EQ_0b10_34_THEN_SEXT_rg_st_amo_val_ETC___d356 ^
	       64'h8000000000000000)) ?
	       w2__h27760 :
	       w1__h27758 ;
  assign new_st_val__h5345 =
	     (rg_f3 == 3'b010) ?
	       new_st_val__h13522 :
	       _theResult_____2__h13518 ;
  assign new_value405_BITS_31_TO_0__q36 = new_value__h5405[31:0] ;
  assign ram_state_and_ctag_cset_b_read__4_BITS_51_TO_0_ETC___d69 =
	     ram_state_and_ctag_cset$DOB[51:0] == rg_addr[63:12] ;
  assign ram_state_and_ctag_cset_b_read__4_BIT_52_5_AND_ETC___d110 =
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__4_BITS_51_TO_0_ETC___d69 &&
	     rg_op == 2'd2 &&
	     rg_amo_funct7[6:2] == 5'b00010 ||
	     NOT_ram_state_and_ctag_cset_b_read__4_BIT_52_5_ETC___d109 ;
  assign req_f3_BITS_1_TO_0_03_EQ_0b0_04_OR_req_f3_BITS_ETC___d933 =
	     req_f3[1:0] == 2'b0 || req_f3[1:0] == 2'b01 && !req_addr[0] ||
	     req_f3[1:0] == 2'b10 && req_addr[1:0] == 2'b0 ||
	     req_f3[1:0] == 2'b11 && req_addr[2:0] == 3'b0 ;
  assign result__h11814 =
	     { {56{word64182_BITS_15_TO_8__q24[7]}},
	       word64182_BITS_15_TO_8__q24 } ;
  assign result__h11842 =
	     { {56{word64182_BITS_23_TO_16__q25[7]}},
	       word64182_BITS_23_TO_16__q25 } ;
  assign result__h11870 =
	     { {56{word64182_BITS_31_TO_24__q27[7]}},
	       word64182_BITS_31_TO_24__q27 } ;
  assign result__h11898 =
	     { {56{word64182_BITS_39_TO_32__q28[7]}},
	       word64182_BITS_39_TO_32__q28 } ;
  assign result__h11926 =
	     { {56{word64182_BITS_47_TO_40__q31[7]}},
	       word64182_BITS_47_TO_40__q31 } ;
  assign result__h11954 =
	     { {56{word64182_BITS_55_TO_48__q32[7]}},
	       word64182_BITS_55_TO_48__q32 } ;
  assign result__h11982 =
	     { {56{word64182_BITS_63_TO_56__q34[7]}},
	       word64182_BITS_63_TO_56__q34 } ;
  assign result__h12027 = { 56'd0, word64__h5182[7:0] } ;
  assign result__h12055 = { 56'd0, word64__h5182[15:8] } ;
  assign result__h12083 = { 56'd0, word64__h5182[23:16] } ;
  assign result__h12111 = { 56'd0, word64__h5182[31:24] } ;
  assign result__h12139 = { 56'd0, word64__h5182[39:32] } ;
  assign result__h12167 = { 56'd0, word64__h5182[47:40] } ;
  assign result__h12195 = { 56'd0, word64__h5182[55:48] } ;
  assign result__h12223 = { 56'd0, word64__h5182[63:56] } ;
  assign result__h12268 =
	     { {48{word64182_BITS_15_TO_0__q22[15]}},
	       word64182_BITS_15_TO_0__q22 } ;
  assign result__h12296 =
	     { {48{word64182_BITS_31_TO_16__q26[15]}},
	       word64182_BITS_31_TO_16__q26 } ;
  assign result__h12324 =
	     { {48{word64182_BITS_47_TO_32__q29[15]}},
	       word64182_BITS_47_TO_32__q29 } ;
  assign result__h12352 =
	     { {48{word64182_BITS_63_TO_48__q33[15]}},
	       word64182_BITS_63_TO_48__q33 } ;
  assign result__h12393 = { 48'd0, word64__h5182[15:0] } ;
  assign result__h12421 = { 48'd0, word64__h5182[31:16] } ;
  assign result__h12449 = { 48'd0, word64__h5182[47:32] } ;
  assign result__h12477 = { 48'd0, word64__h5182[63:48] } ;
  assign result__h12518 =
	     { {32{word64182_BITS_31_TO_0__q23[31]}},
	       word64182_BITS_31_TO_0__q23 } ;
  assign result__h12546 =
	     { {32{word64182_BITS_63_TO_32__q30[31]}},
	       word64182_BITS_63_TO_32__q30 } ;
  assign result__h12585 = { 32'd0, word64__h5182[31:0] } ;
  assign result__h12613 = { 32'd0, word64__h5182[63:32] } ;
  assign result__h23931 =
	     { {56{master_xactor_rg_rd_data_BITS_7_TO_0__q1[7]}},
	       master_xactor_rg_rd_data_BITS_7_TO_0__q1 } ;
  assign result__h23958 = { 56'd0, master_xactor_rg_rd_data[7:0] } ;
  assign result__h23984 =
	     { {48{master_xactor_rg_rd_data_BITS_15_TO_0__q2[15]}},
	       master_xactor_rg_rd_data_BITS_15_TO_0__q2 } ;
  assign result__h24010 = { 48'd0, master_xactor_rg_rd_data[15:0] } ;
  assign result__h24036 =
	     { {32{master_xactor_rg_rd_data_BITS_31_TO_0__q3[31]}},
	       master_xactor_rg_rd_data_BITS_31_TO_0__q3 } ;
  assign result__h24062 = { 32'd0, master_xactor_rg_rd_data[31:0] } ;
  assign result__h24858 =
	     { {56{f_near_mem_io_rspsD_OUT_BITS_7_TO_0__q15[7]}},
	       f_near_mem_io_rspsD_OUT_BITS_7_TO_0__q15 } ;
  assign result__h24885 = { 56'd0, f_near_mem_io_rsps$D_OUT[7:0] } ;
  assign result__h24911 =
	     { {48{f_near_mem_io_rspsD_OUT_BITS_15_TO_0__q17[15]}},
	       f_near_mem_io_rspsD_OUT_BITS_15_TO_0__q17 } ;
  assign result__h24937 = { 48'd0, f_near_mem_io_rsps$D_OUT[15:0] } ;
  assign result__h24963 =
	     { {32{f_near_mem_io_rspsD_OUT_BITS_31_TO_0__q19[31]}},
	       f_near_mem_io_rspsD_OUT_BITS_31_TO_0__q19 } ;
  assign result__h24989 = { 32'd0, f_near_mem_io_rsps$D_OUT[31:0] } ;
  assign result__h25241 =
	     { {56{rg_ld_val_BITS_7_TO_0__q16[7]}},
	       rg_ld_val_BITS_7_TO_0__q16 } ;
  assign result__h25268 = { 56'd0, rg_ld_val[7:0] } ;
  assign result__h25295 =
	     { {48{rg_ld_val_BITS_15_TO_0__q18[15]}},
	       rg_ld_val_BITS_15_TO_0__q18 } ;
  assign result__h25322 = { 48'd0, rg_ld_val[15:0] } ;
  assign result__h25349 =
	     { {32{rg_ld_val_BITS_31_TO_0__q20[31]}},
	       rg_ld_val_BITS_31_TO_0__q20 } ;
  assign result__h25376 = { 32'd0, rg_ld_val[31:0] } ;
  assign result__h27978 =
	     { {56{master_xactor_rg_rd_data_BITS_15_TO_8__q4[7]}},
	       master_xactor_rg_rd_data_BITS_15_TO_8__q4 } ;
  assign result__h28005 =
	     { {56{master_xactor_rg_rd_data_BITS_23_TO_16__q5[7]}},
	       master_xactor_rg_rd_data_BITS_23_TO_16__q5 } ;
  assign result__h28032 =
	     { {56{master_xactor_rg_rd_data_BITS_31_TO_24__q7[7]}},
	       master_xactor_rg_rd_data_BITS_31_TO_24__q7 } ;
  assign result__h28059 =
	     { {56{master_xactor_rg_rd_data_BITS_39_TO_32__q8[7]}},
	       master_xactor_rg_rd_data_BITS_39_TO_32__q8 } ;
  assign result__h28086 =
	     { {56{master_xactor_rg_rd_data_BITS_47_TO_40__q11[7]}},
	       master_xactor_rg_rd_data_BITS_47_TO_40__q11 } ;
  assign result__h28113 =
	     { {56{master_xactor_rg_rd_data_BITS_55_TO_48__q12[7]}},
	       master_xactor_rg_rd_data_BITS_55_TO_48__q12 } ;
  assign result__h28140 =
	     { {56{master_xactor_rg_rd_data_BITS_63_TO_56__q14[7]}},
	       master_xactor_rg_rd_data_BITS_63_TO_56__q14 } ;
  assign result__h28211 = { 56'd0, master_xactor_rg_rd_data[15:8] } ;
  assign result__h28238 = { 56'd0, master_xactor_rg_rd_data[23:16] } ;
  assign result__h28265 = { 56'd0, master_xactor_rg_rd_data[31:24] } ;
  assign result__h28292 = { 56'd0, master_xactor_rg_rd_data[39:32] } ;
  assign result__h28319 = { 56'd0, master_xactor_rg_rd_data[47:40] } ;
  assign result__h28346 = { 56'd0, master_xactor_rg_rd_data[55:48] } ;
  assign result__h28373 = { 56'd0, master_xactor_rg_rd_data[63:56] } ;
  assign result__h28444 =
	     { {48{master_xactor_rg_rd_data_BITS_31_TO_16__q6[15]}},
	       master_xactor_rg_rd_data_BITS_31_TO_16__q6 } ;
  assign result__h28471 =
	     { {48{master_xactor_rg_rd_data_BITS_47_TO_32__q9[15]}},
	       master_xactor_rg_rd_data_BITS_47_TO_32__q9 } ;
  assign result__h28498 =
	     { {48{master_xactor_rg_rd_data_BITS_63_TO_48__q13[15]}},
	       master_xactor_rg_rd_data_BITS_63_TO_48__q13 } ;
  assign result__h28565 = { 48'd0, master_xactor_rg_rd_data[31:16] } ;
  assign result__h28592 = { 48'd0, master_xactor_rg_rd_data[47:32] } ;
  assign result__h28619 = { 48'd0, master_xactor_rg_rd_data[63:48] } ;
  assign result__h28686 =
	     { {32{master_xactor_rg_rd_data_BITS_63_TO_32__q10[31]}},
	       master_xactor_rg_rd_data_BITS_63_TO_32__q10 } ;
  assign result__h28751 = { 32'd0, master_xactor_rg_rd_data[63:32] } ;
  assign result__h29215 =
	     { {56{new_ld_val7403_BITS_7_TO_0__q41[7]}},
	       new_ld_val7403_BITS_7_TO_0__q41 } ;
  assign result__h29245 = { 56'd0, new_ld_val__h27403[7:0] } ;
  assign result__h29272 =
	     { {48{new_ld_val7403_BITS_15_TO_0__q42[15]}},
	       new_ld_val7403_BITS_15_TO_0__q42 } ;
  assign result__h29299 = { 48'd0, new_ld_val__h27403[15:0] } ;
  assign result__h29326 =
	     { {32{new_ld_val7403_BITS_31_TO_0__q43[31]}},
	       new_ld_val7403_BITS_31_TO_0__q43 } ;
  assign result__h29353 = { 32'd0, new_ld_val__h27403[31:0] } ;
  assign result__h5458 =
	     { {56{word64182_BITS_7_TO_0__q21[7]}},
	       word64182_BITS_7_TO_0__q21 } ;
  assign rg_addr_7_EQ_rg_lrsc_pa_3___d107 = rg_addr == rg_lrsc_pa ;
  assign rg_amo_funct7_2_BITS_6_TO_2_3_EQ_0b10_4_AND_NO_ETC___d282 =
	     rg_amo_funct7[6:2] == 5'b00010 &&
	     (!ram_state_and_ctag_cset$DOB[52] ||
	      !ram_state_and_ctag_cset_b_read__4_BITS_51_TO_0_ETC___d69) &&
	     rg_addr_7_EQ_rg_lrsc_pa_3___d107 &&
	     NOT_cfg_verbosity_read__0_ULE_1_1___d12 ;
  assign rg_ld_val_BITS_15_TO_0__q18 = rg_ld_val[15:0] ;
  assign rg_ld_val_BITS_31_TO_0__q20 = rg_ld_val[31:0] ;
  assign rg_ld_val_BITS_7_TO_0__q16 = rg_ld_val[7:0] ;
  assign rg_lrsc_pa_3_EQ_rg_addr_7___d54 = rg_lrsc_pa == rg_addr ;
  assign rg_op_9_EQ_0_0_OR_rg_op_9_EQ_2_1_AND_rg_amo_fu_ETC___d121 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     ram_state_and_ctag_cset_b_read__4_BIT_52_5_AND_ETC___d110 ||
	     rg_op != 2'd0 &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	     rg_op_9_EQ_1_7_OR_rg_op_9_EQ_2_1_AND_rg_amo_fu_ETC___d119 ;
  assign rg_op_9_EQ_0_0_OR_rg_op_9_EQ_2_1_AND_rg_amo_fu_ETC___d123 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__4_BITS_51_TO_0_ETC___d69 ;
  assign rg_op_9_EQ_0_0_OR_rg_op_9_EQ_2_1_AND_rg_amo_fu_ETC___d126 =
	     rg_op_9_EQ_0_0_OR_rg_op_9_EQ_2_1_AND_rg_amo_fu_ETC___d123 ||
	     rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h13074 ;
  assign rg_op_9_EQ_0_0_OR_rg_op_9_EQ_2_1_AND_rg_amo_fu_ETC___d265 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     ram_state_and_ctag_cset$DOB[52] &&
	     ram_state_and_ctag_cset_b_read__4_BITS_51_TO_0_ETC___d69 &&
	     NOT_cfg_verbosity_read__0_ULE_1_1___d12 ;
  assign rg_op_9_EQ_0_0_OR_rg_op_9_EQ_2_1_AND_rg_amo_fu_ETC___d278 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     (!ram_state_and_ctag_cset$DOB[52] ||
	      !ram_state_and_ctag_cset_b_read__4_BITS_51_TO_0_ETC___d69) &&
	     NOT_cfg_verbosity_read__0_ULE_1_1___d12 ;
  assign rg_op_9_EQ_0_0_OR_rg_op_9_EQ_2_1_AND_rg_amo_fu_ETC___d86 =
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     (!ram_state_and_ctag_cset$DOB[52] ||
	      !ram_state_and_ctag_cset_b_read__4_BITS_51_TO_0_ETC___d69) ;
  assign rg_op_9_EQ_1_7_OR_rg_op_9_EQ_2_1_AND_rg_amo_fu_ETC___d119 =
	     rg_op == 2'd1 && rg_addr_7_EQ_rg_lrsc_pa_3___d107 ||
	     rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 ||
	     NOT_rg_op_9_EQ_1_7_15_AND_NOT_rg_op_9_EQ_2_1_8_ETC___d118 ;
  assign rg_op_9_EQ_1_7_OR_rg_op_9_EQ_2_1_AND_rg_amo_fu_ETC___d297 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     NOT_rg_op_9_EQ_2_1_8_OR_NOT_rg_amo_funct7_2_BI_ETC___d294 ||
	     NOT_rg_op_9_EQ_1_7_15_AND_NOT_rg_op_9_EQ_2_1_8_ETC___d296 ;
  assign rg_op_9_EQ_1_7_OR_rg_op_9_EQ_2_1_AND_rg_amo_fu_ETC___d426 =
	     (rg_op == 2'd1 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	     (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00011 ||
	      rg_lrsc_valid && rg_lrsc_pa_3_EQ_rg_addr_7___d54) ;
  assign rg_op_9_EQ_2_1_AND_rg_amo_funct7_2_BITS_6_TO_2_ETC___d491 =
	     rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h13074 &&
	     NOT_cfg_verbosity_read__0_ULE_1_1___d12 ;
  assign rg_op_9_EQ_2_1_AND_rg_amo_funct7_2_BITS_6_TO_2_ETC___d63 =
	     rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011 &&
	     lrsc_result__h13074 ||
	     !master_xactor_crg_wr_addr_full$port2__read &&
	     !master_xactor_crg_wr_data_full$port2__read ;
  assign rg_st_amo_val_BITS_31_TO_0__q37 = rg_st_amo_val[31:0] ;
  assign rg_state_EQ_13_83_AND_rg_op_9_EQ_0_0_OR_rg_op__ETC___d587 =
	     rg_state == 5'd13 &&
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     !soc_map$m_is_near_mem_IO_addr ;
  assign rg_state_EQ_13_83_AND_rg_op_9_EQ_0_0_OR_rg_op__ETC___d624 =
	     rg_state == 5'd13 &&
	     (rg_op == 2'd0 ||
	      rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00010) &&
	     soc_map$m_is_near_mem_IO_addr ;
  assign shift_bits__h19480 = { rg_addr[2:0], 3'b0 } ;
  assign shift_bits__h27479 = { rg_pa[2:0], 3'b0 } ;
  assign strobe64__h19677 = 8'b00000001 << rg_addr[2:0] ;
  assign strobe64__h19720 = 8'b00000011 << rg_addr[2:0] ;
  assign strobe64__h19743 = 8'b00001111 << rg_addr[2:0] ;
  assign strobe64__h27747 = 8'b00000001 << rg_pa[2:0] ;
  assign strobe64__h28901 = 8'b00000011 << rg_pa[2:0] ;
  assign strobe64__h28924 = 8'b00001111 << rg_pa[2:0] ;
  assign w17754_BITS_31_TO_0__q40 = w1__h27754[31:0] ;
  assign w1___1__h13581 = { 32'd0, new_value__h5405[31:0] } ;
  assign w1___1__h27829 = { 32'd0, w1__h27754[31:0] } ;
  assign w2___1__h27830 = { 32'd0, rg_st_amo_val[31:0] } ;
  assign w2__h27760 = (rg_f3 == 3'b010) ? w2___1__h27830 : rg_st_amo_val ;
  assign word64182_BITS_15_TO_0__q22 = word64__h5182[15:0] ;
  assign word64182_BITS_15_TO_8__q24 = word64__h5182[15:8] ;
  assign word64182_BITS_23_TO_16__q25 = word64__h5182[23:16] ;
  assign word64182_BITS_31_TO_0__q23 = word64__h5182[31:0] ;
  assign word64182_BITS_31_TO_16__q26 = word64__h5182[31:16] ;
  assign word64182_BITS_31_TO_24__q27 = word64__h5182[31:24] ;
  assign word64182_BITS_39_TO_32__q28 = word64__h5182[39:32] ;
  assign word64182_BITS_47_TO_32__q29 = word64__h5182[47:32] ;
  assign word64182_BITS_47_TO_40__q31 = word64__h5182[47:40] ;
  assign word64182_BITS_55_TO_48__q32 = word64__h5182[55:48] ;
  assign word64182_BITS_63_TO_32__q30 = word64__h5182[63:32] ;
  assign word64182_BITS_63_TO_48__q33 = word64__h5182[63:48] ;
  assign word64182_BITS_63_TO_56__q34 = word64__h5182[63:56] ;
  assign word64182_BITS_7_TO_0__q21 = word64__h5182[7:0] ;
  assign word64__h27476 =
	     (rg_f3 == 3'b010) ?
	       new_st_val__h27770 :
	       _theResult_____2__h27766 ;
  assign word64__h5182 = ram_word64_set$DOB & y__h5494 ;
  assign x__h13084 = { 63'd0, lrsc_result__h13074 } ;
  assign y__h5494 =
	     {64{ram_state_and_ctag_cset$DOB[52] &&
		 ram_state_and_ctag_cset_b_read__4_BITS_51_TO_0_ETC___d69}} ;
  always@(rg_f3 or strobe64__h27747 or strobe64__h28901 or strobe64__h28924)
  begin
    case (rg_f3[1:0])
      2'b0: io_req_wr_data_wstrb__h27631 = strobe64__h27747;
      2'b01: io_req_wr_data_wstrb__h27631 = strobe64__h28901;
      2'b10: io_req_wr_data_wstrb__h27631 = strobe64__h28924;
      2'b11: io_req_wr_data_wstrb__h27631 = 8'b11111111;
    endcase
  end
  always@(rg_f3 or strobe64__h19677 or strobe64__h19720 or strobe64__h19743)
  begin
    case (rg_f3[1:0])
      2'b0: mem_req_wr_data_wstrb__h19561 = strobe64__h19677;
      2'b01: mem_req_wr_data_wstrb__h19561 = strobe64__h19720;
      2'b10: mem_req_wr_data_wstrb__h19561 = strobe64__h19743;
      2'b11: mem_req_wr_data_wstrb__h19561 = 8'b11111111;
    endcase
  end
  always@(rg_f3 or rg_st_amo_val or _theResult___fst__h18920)
  begin
    case (rg_f3[1:0])
      2'b0, 2'b01, 2'b10:
	  mem_req_wr_data_wdata__h18802 = _theResult___fst__h18920;
      2'd3: mem_req_wr_data_wdata__h18802 = rg_st_amo_val;
    endcase
  end
  always@(rg_f3 or rg_st_amo_val or _theResult___fst__h26399)
  begin
    case (rg_f3[1:0])
      2'b0, 2'b01, 2'b10: value__h26676 = _theResult___fst__h26399;
      2'd3: value__h26676 = rg_st_amo_val;
    endcase
  end
  always@(rg_addr or
	  result__h12027 or
	  result__h12055 or
	  result__h12083 or
	  result__h12111 or
	  result__h12139 or
	  result__h12167 or result__h12195 or result__h12223)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d211 =
	      result__h12027;
      3'h1:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d211 =
	      result__h12055;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d211 =
	      result__h12083;
      3'h3:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d211 =
	      result__h12111;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d211 =
	      result__h12139;
      3'h5:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d211 =
	      result__h12167;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d211 =
	      result__h12195;
      3'h7:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d211 =
	      result__h12223;
    endcase
  end
  always@(rg_addr or
	  result__h5458 or
	  result__h11814 or
	  result__h11842 or
	  result__h11870 or
	  result__h11898 or
	  result__h11926 or result__h11954 or result__h11982)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d194 =
	      result__h5458;
      3'h1:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d194 =
	      result__h11814;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d194 =
	      result__h11842;
      3'h3:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d194 =
	      result__h11870;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d194 =
	      result__h11898;
      3'h5:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d194 =
	      result__h11926;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d194 =
	      result__h11954;
      3'h7:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d194 =
	      result__h11982;
    endcase
  end
  always@(rg_addr or
	  result__h12268 or
	  result__h12296 or result__h12324 or result__h12352)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d224 =
	      result__h12268;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d224 =
	      result__h12296;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d224 =
	      result__h12324;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d224 =
	      result__h12352;
      default: IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d224 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h12393 or
	  result__h12421 or result__h12449 or result__h12477)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d233 =
	      result__h12393;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d233 =
	      result__h12421;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d233 =
	      result__h12449;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d233 =
	      result__h12477;
      default: IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d233 =
		   64'd0;
    endcase
  end
  always@(rg_addr or result__h12585 or result__h12613)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d245 =
	      result__h12585;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d245 =
	      result__h12613;
      default: IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d245 =
		   64'd0;
    endcase
  end
  always@(rg_addr or result__h12518 or result__h12546)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result2518_0x4_re_ETC__q35 =
	      result__h12518;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result2518_0x4_re_ETC__q35 =
	      result__h12546;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result2518_0x4_re_ETC__q35 =
		   64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d194 or
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d224 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result2518_0x4_re_ETC__q35 or
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_ram__ETC___d247 or
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d211 or
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d233 or
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d245)
  begin
    case (rg_f3)
      3'b0:
	  new_value__h5405 =
	      IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d194;
      3'b001:
	  new_value__h5405 =
	      IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d224;
      3'b010:
	  new_value__h5405 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result2518_0x4_re_ETC__q35;
      3'b011:
	  new_value__h5405 =
	      IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_ram__ETC___d247;
      3'b100:
	  new_value__h5405 =
	      IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d211;
      3'b101:
	  new_value__h5405 =
	      IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d233;
      3'b110:
	  new_value__h5405 =
	      IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d245;
      3'd7: new_value__h5405 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d194 or
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d224 or
	  w1___1__h13581 or
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_ram__ETC___d247 or
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d211 or
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d233 or
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d245)
  begin
    case (rg_f3)
      3'b0:
	  w1__h13510 =
	      IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d194;
      3'b001:
	  w1__h13510 =
	      IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d224;
      3'b010: w1__h13510 = w1___1__h13581;
      3'b011:
	  w1__h13510 =
	      IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_ram__ETC___d247;
      3'b100:
	  w1__h13510 =
	      IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d211;
      3'b101:
	  w1__h13510 =
	      IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d233;
      3'b110:
	  w1__h13510 =
	      IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d245;
      3'd7: w1__h13510 = 64'd0;
    endcase
  end
  always@(rg_addr or ram_word64_set$DOB or rg_st_amo_val)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_ram__ETC___d341 =
	      { ram_word64_set$DOB[63:16], rg_st_amo_val[15:0] };
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_ram__ETC___d341 =
	      { ram_word64_set$DOB[63:32],
		rg_st_amo_val[15:0],
		ram_word64_set$DOB[15:0] };
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_ram__ETC___d341 =
	      { ram_word64_set$DOB[63:48],
		rg_st_amo_val[15:0],
		ram_word64_set$DOB[31:0] };
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_ram__ETC___d341 =
	      { rg_st_amo_val[15:0], ram_word64_set$DOB[47:0] };
      default: IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_ram__ETC___d341 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_addr or ram_word64_set$DOB or rg_st_amo_val)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_ram__ETC___d332 =
	      { ram_word64_set$DOB[63:8], rg_st_amo_val[7:0] };
      3'h1:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_ram__ETC___d332 =
	      { ram_word64_set$DOB[63:16],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[7:0] };
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_ram__ETC___d332 =
	      { ram_word64_set$DOB[63:24],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[15:0] };
      3'h3:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_ram__ETC___d332 =
	      { ram_word64_set$DOB[63:32],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[23:0] };
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_ram__ETC___d332 =
	      { ram_word64_set$DOB[63:40],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[31:0] };
      3'h5:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_ram__ETC___d332 =
	      { ram_word64_set$DOB[63:48],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[39:0] };
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_ram__ETC___d332 =
	      { ram_word64_set$DOB[63:56],
		rg_st_amo_val[7:0],
		ram_word64_set$DOB[47:0] };
      3'h7:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_ram__ETC___d332 =
	      { rg_st_amo_val[7:0], ram_word64_set$DOB[55:0] };
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d194 or
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d224 or
	  new_value405_BITS_31_TO_0__q36 or
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_ram__ETC___d247 or
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d211 or
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d233 or
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d245)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_28_EQ_0b10_34_THEN_SEXT_IF_rg_f3_28_E_ETC___d292 =
	      IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d194;
      3'b001:
	  IF_rg_f3_28_EQ_0b10_34_THEN_SEXT_IF_rg_f3_28_E_ETC___d292 =
	      IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d224;
      3'b010:
	  IF_rg_f3_28_EQ_0b10_34_THEN_SEXT_IF_rg_f3_28_E_ETC___d292 =
	      { {32{new_value405_BITS_31_TO_0__q36[31]}},
		new_value405_BITS_31_TO_0__q36 };
      3'b011:
	  IF_rg_f3_28_EQ_0b10_34_THEN_SEXT_IF_rg_f3_28_E_ETC___d292 =
	      IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_ram__ETC___d247;
      3'b100:
	  IF_rg_f3_28_EQ_0b10_34_THEN_SEXT_IF_rg_f3_28_E_ETC___d292 =
	      IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d211;
      3'b101:
	  IF_rg_f3_28_EQ_0b10_34_THEN_SEXT_IF_rg_f3_28_E_ETC___d292 =
	      IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d233;
      3'b110:
	  IF_rg_f3_28_EQ_0b10_34_THEN_SEXT_IF_rg_f3_28_E_ETC___d292 =
	      IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d245;
      3'd7: IF_rg_f3_28_EQ_0b10_34_THEN_SEXT_IF_rg_f3_28_E_ETC___d292 = 64'd0;
    endcase
  end
  always@(rg_amo_funct7 or
	  new_st_val__h14622 or
	  new_st_val__h13614 or
	  w2__h27760 or
	  new_st_val__h14594 or
	  new_st_val__h14602 or
	  new_st_val__h14598 or
	  new_st_val__h14617 or new_st_val__h14606 or new_st_val__h14611)
  begin
    case (rg_amo_funct7[6:2])
      5'b0: _theResult_____2__h13518 = new_st_val__h13614;
      5'b00001: _theResult_____2__h13518 = w2__h27760;
      5'b00100: _theResult_____2__h13518 = new_st_val__h14594;
      5'b01000: _theResult_____2__h13518 = new_st_val__h14602;
      5'b01100: _theResult_____2__h13518 = new_st_val__h14598;
      5'b10000: _theResult_____2__h13518 = new_st_val__h14617;
      5'b11000: _theResult_____2__h13518 = new_st_val__h14606;
      5'b11100: _theResult_____2__h13518 = new_st_val__h14611;
      default: _theResult_____2__h13518 = new_st_val__h14622;
    endcase
  end
  always@(rg_f3 or new_st_val__h5345 or _theResult___fst__h19678)
  begin
    case (rg_f3[1:0])
      2'b0, 2'b01, 2'b10:
	  mem_req_wr_data_wdata__h19560 = _theResult___fst__h19678;
      2'd3: mem_req_wr_data_wdata__h19560 = new_st_val__h5345;
    endcase
  end
  always@(rg_addr or ram_word64_set$DOB or new_st_val__h5345)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_ram__ETC___d415 =
	      { ram_word64_set$DOB[63:16], new_st_val__h5345[15:0] };
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_ram__ETC___d415 =
	      { ram_word64_set$DOB[63:32],
		new_st_val__h5345[15:0],
		ram_word64_set$DOB[15:0] };
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_ram__ETC___d415 =
	      { ram_word64_set$DOB[63:48],
		new_st_val__h5345[15:0],
		ram_word64_set$DOB[31:0] };
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_ram__ETC___d415 =
	      { new_st_val__h5345[15:0], ram_word64_set$DOB[47:0] };
      default: IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_ram__ETC___d415 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_addr or ram_word64_set$DOB or new_st_val__h5345)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_ram__ETC___d406 =
	      { ram_word64_set$DOB[63:8], new_st_val__h5345[7:0] };
      3'h1:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_ram__ETC___d406 =
	      { ram_word64_set$DOB[63:16],
		new_st_val__h5345[7:0],
		ram_word64_set$DOB[7:0] };
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_ram__ETC___d406 =
	      { ram_word64_set$DOB[63:24],
		new_st_val__h5345[7:0],
		ram_word64_set$DOB[15:0] };
      3'h3:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_ram__ETC___d406 =
	      { ram_word64_set$DOB[63:32],
		new_st_val__h5345[7:0],
		ram_word64_set$DOB[23:0] };
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_ram__ETC___d406 =
	      { ram_word64_set$DOB[63:40],
		new_st_val__h5345[7:0],
		ram_word64_set$DOB[31:0] };
      3'h5:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_ram__ETC___d406 =
	      { ram_word64_set$DOB[63:48],
		new_st_val__h5345[7:0],
		ram_word64_set$DOB[39:0] };
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_ram__ETC___d406 =
	      { ram_word64_set$DOB[63:56],
		new_st_val__h5345[7:0],
		ram_word64_set$DOB[47:0] };
      3'h7:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_ram__ETC___d406 =
	      { new_st_val__h5345[7:0], ram_word64_set$DOB[55:0] };
    endcase
  end
  always@(rg_addr or ram_word64_set$DOB or rg_st_amo_val)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q38 =
	      { ram_word64_set$DOB[63:32], rg_st_amo_val[31:0] };
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q38 =
	      { rg_st_amo_val[31:0], ram_word64_set$DOB[31:0] };
      default: CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q38 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_f3 or
	  ram_word64_set$DOB or
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_ram__ETC___d332 or
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_ram__ETC___d341 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q38 or
	  rg_st_amo_val)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_28_EQ_0b0_29_THEN_IF_rg_addr_7_BITS_2_ETC___d350 =
	      IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_ram__ETC___d332;
      3'b001:
	  IF_rg_f3_28_EQ_0b0_29_THEN_IF_rg_addr_7_BITS_2_ETC___d350 =
	      IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_ram__ETC___d341;
      3'b010:
	  IF_rg_f3_28_EQ_0b0_29_THEN_IF_rg_addr_7_BITS_2_ETC___d350 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q38;
      3'b011:
	  IF_rg_f3_28_EQ_0b0_29_THEN_IF_rg_addr_7_BITS_2_ETC___d350 =
	      rg_st_amo_val;
      default: IF_rg_f3_28_EQ_0b0_29_THEN_IF_rg_addr_7_BITS_2_ETC___d350 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_addr or
	  result__h24010 or
	  result__h28565 or result__h28592 or result__h28619)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d783 =
	      result__h24010;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d783 =
	      result__h28565;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d783 =
	      result__h28592;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d783 =
	      result__h28619;
      default: IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d783 =
		   64'd0;
    endcase
  end
  always@(rg_addr or result__h24062 or result__h28751)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d790 =
	      result__h24062;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d790 =
	      result__h28751;
      default: IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d790 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h23984 or
	  result__h28444 or result__h28471 or result__h28498)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d776 =
	      result__h23984;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d776 =
	      result__h28444;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d776 =
	      result__h28471;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d776 =
	      result__h28498;
      default: IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d776 =
		   64'd0;
    endcase
  end
  always@(rg_addr or
	  result__h23958 or
	  result__h28211 or
	  result__h28238 or
	  result__h28265 or
	  result__h28292 or
	  result__h28319 or result__h28346 or result__h28373)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d766 =
	      result__h23958;
      3'h1:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d766 =
	      result__h28211;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d766 =
	      result__h28238;
      3'h3:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d766 =
	      result__h28265;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d766 =
	      result__h28292;
      3'h5:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d766 =
	      result__h28319;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d766 =
	      result__h28346;
      3'h7:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d766 =
	      result__h28373;
    endcase
  end
  always@(rg_addr or
	  result__h23931 or
	  result__h27978 or
	  result__h28005 or
	  result__h28032 or
	  result__h28059 or
	  result__h28086 or result__h28113 or result__h28140)
  begin
    case (rg_addr[2:0])
      3'h0:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d751 =
	      result__h23931;
      3'h1:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d751 =
	      result__h27978;
      3'h2:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d751 =
	      result__h28005;
      3'h3:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d751 =
	      result__h28032;
      3'h4:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d751 =
	      result__h28059;
      3'h5:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d751 =
	      result__h28086;
      3'h6:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d751 =
	      result__h28113;
      3'h7:
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d751 =
	      result__h28140;
    endcase
  end
  always@(rg_addr or result__h24036 or result__h28686)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result4036_0x4_re_ETC__q39 =
	      result__h24036;
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_result4036_0x4_re_ETC__q39 =
	      result__h28686;
      default: CASE_rg_addr_BITS_2_TO_0_0x0_result4036_0x4_re_ETC__q39 =
		   64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d751 or
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d776 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_result4036_0x4_re_ETC__q39 or
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_mast_ETC___d791 or
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d766 or
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d783 or
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d790)
  begin
    case (rg_f3)
      3'b0:
	  w1__h27754 =
	      IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d751;
      3'b001:
	  w1__h27754 =
	      IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d776;
      3'b010:
	  w1__h27754 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_result4036_0x4_re_ETC__q39;
      3'b011:
	  w1__h27754 =
	      IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_mast_ETC___d791;
      3'b100:
	  w1__h27754 =
	      IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d766;
      3'b101:
	  w1__h27754 =
	      IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d783;
      3'b110:
	  w1__h27754 =
	      IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d790;
      3'd7: w1__h27754 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d751 or
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d776 or
	  w1___1__h27829 or
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_mast_ETC___d791 or
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d766 or
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d783 or
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d790)
  begin
    case (rg_f3)
      3'b0:
	  w1__h27758 =
	      IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d751;
      3'b001:
	  w1__h27758 =
	      IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d776;
      3'b010: w1__h27758 = w1___1__h27829;
      3'b011:
	  w1__h27758 =
	      IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_mast_ETC___d791;
      3'b100:
	  w1__h27758 =
	      IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d766;
      3'b101:
	  w1__h27758 =
	      IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d783;
      3'b110:
	  w1__h27758 =
	      IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d790;
      3'd7: w1__h27758 = 64'd0;
    endcase
  end
  always@(rg_f3 or
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d751 or
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d776 or
	  w17754_BITS_31_TO_0__q40 or
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_mast_ETC___d791 or
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d766 or
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d783 or
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d790)
  begin
    case (rg_f3)
      3'b0:
	  new_ld_val__h27403 =
	      IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d751;
      3'b001:
	  new_ld_val__h27403 =
	      IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_SEXT_ETC___d776;
      3'b010:
	  new_ld_val__h27403 =
	      { {32{w17754_BITS_31_TO_0__q40[31]}},
		w17754_BITS_31_TO_0__q40 };
      3'b011:
	  new_ld_val__h27403 =
	      IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_mast_ETC___d791;
      3'b100:
	  new_ld_val__h27403 =
	      IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d766;
      3'b101:
	  new_ld_val__h27403 =
	      IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d783;
      3'b110:
	  new_ld_val__h27403 =
	      IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_0_CO_ETC___d790;
      3'd7: new_ld_val__h27403 = 64'd0;
    endcase
  end
  always@(rg_amo_funct7 or
	  new_st_val__h28843 or
	  new_st_val__h27861 or
	  w2__h27760 or
	  new_st_val__h28815 or
	  new_st_val__h28823 or
	  new_st_val__h28819 or
	  new_st_val__h28838 or new_st_val__h28827 or new_st_val__h28832)
  begin
    case (rg_amo_funct7[6:2])
      5'b0: _theResult_____2__h27766 = new_st_val__h27861;
      5'b00001: _theResult_____2__h27766 = w2__h27760;
      5'b00100: _theResult_____2__h27766 = new_st_val__h28815;
      5'b01000: _theResult_____2__h27766 = new_st_val__h28823;
      5'b01100: _theResult_____2__h27766 = new_st_val__h28819;
      5'b10000: _theResult_____2__h27766 = new_st_val__h28838;
      5'b11000: _theResult_____2__h27766 = new_st_val__h28827;
      5'b11100: _theResult_____2__h27766 = new_st_val__h28832;
      default: _theResult_____2__h27766 = new_st_val__h28843;
    endcase
  end
  always@(rg_f3 or word64__h27476 or _theResult___fst__h27748)
  begin
    case (rg_f3[1:0])
      2'b0, 2'b01, 2'b10:
	  io_req_wr_data_wdata__h27630 = _theResult___fst__h27748;
      2'd3: io_req_wr_data_wdata__h27630 = word64__h27476;
    endcase
  end
  always@(rg_f3 or IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_1_EL_ETC___d261)
  begin
    case (rg_f3)
      3'b0, 3'b001, 3'b010, 3'b011, 3'b100, 3'b101, 3'b110:
	  new_value__h17672 =
	      IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_1_EL_ETC___d261;
      3'd7: new_value__h17672 = 64'd0;
    endcase
  end
  always@(rg_addr or ram_word64_set$DOB or new_st_val__h5345)
  begin
    case (rg_addr[2:0])
      3'h0:
	  CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q44 =
	      { ram_word64_set$DOB[63:32], new_st_val__h5345[31:0] };
      3'h4:
	  CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q44 =
	      { new_st_val__h5345[31:0], ram_word64_set$DOB[31:0] };
      default: CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q44 =
		   ram_word64_set$DOB;
    endcase
  end
  always@(rg_f3 or
	  ram_word64_set$DOB or
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_ram__ETC___d406 or
	  IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_ram__ETC___d415 or
	  CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q44 or
	  new_st_val__h5345)
  begin
    case (rg_f3)
      3'b0:
	  IF_rg_f3_28_EQ_0b0_29_THEN_IF_rg_addr_7_BITS_2_ETC___d424 =
	      IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_ram__ETC___d406;
      3'b001:
	  IF_rg_f3_28_EQ_0b0_29_THEN_IF_rg_addr_7_BITS_2_ETC___d424 =
	      IF_rg_addr_7_BITS_2_TO_0_2_EQ_0x0_30_THEN_ram__ETC___d415;
      3'b010:
	  IF_rg_f3_28_EQ_0b0_29_THEN_IF_rg_addr_7_BITS_2_ETC___d424 =
	      CASE_rg_addr_BITS_2_TO_0_0x0_ram_word64_setDO_ETC__q44;
      3'b011:
	  IF_rg_f3_28_EQ_0b0_29_THEN_IF_rg_addr_7_BITS_2_ETC___d424 =
	      new_st_val__h5345;
      default: IF_rg_f3_28_EQ_0b0_29_THEN_IF_rg_addr_7_BITS_2_ETC___d424 =
		   ram_word64_set$DOB;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY 4'd0;
	master_xactor_crg_rd_addr_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	master_xactor_crg_rd_data_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	master_xactor_crg_wr_addr_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	master_xactor_crg_wr_data_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	master_xactor_crg_wr_resp_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY 6'd0;
	rg_lower_word32_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_requesting_cline <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 5'd0;
      end
    else
      begin
        if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (ctr_wr_rsps_pending_crg$EN)
	  ctr_wr_rsps_pending_crg <= `BSV_ASSIGNMENT_DELAY
	      ctr_wr_rsps_pending_crg$D_IN;
	if (master_xactor_crg_rd_addr_full$EN)
	  master_xactor_crg_rd_addr_full <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_crg_rd_addr_full$D_IN;
	if (master_xactor_crg_rd_data_full$EN)
	  master_xactor_crg_rd_data_full <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_crg_rd_data_full$D_IN;
	if (master_xactor_crg_wr_addr_full$EN)
	  master_xactor_crg_wr_addr_full <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_crg_wr_addr_full$D_IN;
	if (master_xactor_crg_wr_data_full$EN)
	  master_xactor_crg_wr_data_full <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_crg_wr_data_full$D_IN;
	if (master_xactor_crg_wr_resp_full$EN)
	  master_xactor_crg_wr_resp_full <= `BSV_ASSIGNMENT_DELAY
	      master_xactor_crg_wr_resp_full$D_IN;
	if (rg_cset_in_cache$EN)
	  rg_cset_in_cache <= `BSV_ASSIGNMENT_DELAY rg_cset_in_cache$D_IN;
	if (rg_lower_word32_full$EN)
	  rg_lower_word32_full <= `BSV_ASSIGNMENT_DELAY
	      rg_lower_word32_full$D_IN;
	if (rg_lrsc_valid$EN)
	  rg_lrsc_valid <= `BSV_ASSIGNMENT_DELAY rg_lrsc_valid$D_IN;
	if (rg_requesting_cline$EN)
	  rg_requesting_cline <= `BSV_ASSIGNMENT_DELAY
	      rg_requesting_cline$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
      end
    if (master_xactor_rg_rd_addr$EN)
      master_xactor_rg_rd_addr <= `BSV_ASSIGNMENT_DELAY
	  master_xactor_rg_rd_addr$D_IN;
    if (master_xactor_rg_rd_data$EN)
      master_xactor_rg_rd_data <= `BSV_ASSIGNMENT_DELAY
	  master_xactor_rg_rd_data$D_IN;
    if (master_xactor_rg_wr_addr$EN)
      master_xactor_rg_wr_addr <= `BSV_ASSIGNMENT_DELAY
	  master_xactor_rg_wr_addr$D_IN;
    if (master_xactor_rg_wr_data$EN)
      master_xactor_rg_wr_data <= `BSV_ASSIGNMENT_DELAY
	  master_xactor_rg_wr_data$D_IN;
    if (master_xactor_rg_wr_resp$EN)
      master_xactor_rg_wr_resp <= `BSV_ASSIGNMENT_DELAY
	  master_xactor_rg_wr_resp$D_IN;
    if (rg_addr$EN) rg_addr <= `BSV_ASSIGNMENT_DELAY rg_addr$D_IN;
    if (rg_amo_funct7$EN)
      rg_amo_funct7 <= `BSV_ASSIGNMENT_DELAY rg_amo_funct7$D_IN;
    if (rg_error_during_refill$EN)
      rg_error_during_refill <= `BSV_ASSIGNMENT_DELAY
	  rg_error_during_refill$D_IN;
    if (rg_exc_code$EN) rg_exc_code <= `BSV_ASSIGNMENT_DELAY rg_exc_code$D_IN;
    if (rg_f3$EN) rg_f3 <= `BSV_ASSIGNMENT_DELAY rg_f3$D_IN;
    if (rg_ld_val$EN) rg_ld_val <= `BSV_ASSIGNMENT_DELAY rg_ld_val$D_IN;
    if (rg_lower_word32$EN)
      rg_lower_word32 <= `BSV_ASSIGNMENT_DELAY rg_lower_word32$D_IN;
    if (rg_lrsc_pa$EN) rg_lrsc_pa <= `BSV_ASSIGNMENT_DELAY rg_lrsc_pa$D_IN;
    if (rg_op$EN) rg_op <= `BSV_ASSIGNMENT_DELAY rg_op$D_IN;
    if (rg_pa$EN) rg_pa <= `BSV_ASSIGNMENT_DELAY rg_pa$D_IN;
    if (rg_pte_pa$EN) rg_pte_pa <= `BSV_ASSIGNMENT_DELAY rg_pte_pa$D_IN;
    if (rg_req_byte_in_cline$EN)
      rg_req_byte_in_cline <= `BSV_ASSIGNMENT_DELAY rg_req_byte_in_cline$D_IN;
    if (rg_st_amo_val$EN)
      rg_st_amo_val <= `BSV_ASSIGNMENT_DELAY rg_st_amo_val$D_IN;
    if (rg_word64_set_in_cache$EN)
      rg_word64_set_in_cache <= `BSV_ASSIGNMENT_DELAY
	  rg_word64_set_in_cache$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_verbosity = 4'hA;
    ctr_wr_rsps_pending_crg = 4'hA;
    master_xactor_crg_rd_addr_full = 1'h0;
    master_xactor_crg_rd_data_full = 1'h0;
    master_xactor_crg_wr_addr_full = 1'h0;
    master_xactor_crg_wr_data_full = 1'h0;
    master_xactor_crg_wr_resp_full = 1'h0;
    master_xactor_rg_rd_addr = 67'h2AAAAAAAAAAAAAAAA;
    master_xactor_rg_rd_data = 66'h2AAAAAAAAAAAAAAAA;
    master_xactor_rg_wr_addr = 67'h2AAAAAAAAAAAAAAAA;
    master_xactor_rg_wr_data = 72'hAAAAAAAAAAAAAAAAAA;
    master_xactor_rg_wr_resp = 2'h2;
    rg_addr = 64'hAAAAAAAAAAAAAAAA;
    rg_amo_funct7 = 7'h2A;
    rg_cset_in_cache = 6'h2A;
    rg_error_during_refill = 1'h0;
    rg_exc_code = 4'hA;
    rg_f3 = 3'h2;
    rg_ld_val = 64'hAAAAAAAAAAAAAAAA;
    rg_lower_word32 = 32'hAAAAAAAA;
    rg_lower_word32_full = 1'h0;
    rg_lrsc_pa = 64'hAAAAAAAAAAAAAAAA;
    rg_lrsc_valid = 1'h0;
    rg_op = 2'h2;
    rg_pa = 64'hAAAAAAAAAAAAAAAA;
    rg_pte_pa = 64'hAAAAAAAAAAAAAAAA;
    rg_req_byte_in_cline = 64'hAAAAAAAAAAAAAAAA;
    rg_requesting_cline = 1'h0;
    rg_st_amo_val = 64'hAAAAAAAAAAAAAAAA;
    rg_state = 5'h0A;
    rg_word64_set_in_cache = 9'h0AA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 6'd63 &&
	  cfg_verbosity != 4'd0 &&
	  !f_reset_reqs$D_OUT)
	begin
	  v__h3939 = $stime;
	  #0;
	end
    v__h3933 = v__h3939 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 6'd63 &&
	  cfg_verbosity != 4'd0 &&
	  !f_reset_reqs$D_OUT)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		   v__h3933,
		   "D_MMU_Cache",
		   $signed(32'd64),
		   $signed(32'd1));
	else
	  $display("%0d: %s.rl_reset: %0d sets x %0d ways: all tag states reset to CTAG_EMPTY",
		   v__h3933,
		   "I_MMU_Cache",
		   $signed(32'd64),
		   $signed(32'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 6'd63 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  f_reset_reqs$D_OUT)
	begin
	  v__h4040 = $stime;
	  #0;
	end
    v__h4034 = v__h4040 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset && rg_cset_in_cache == 6'd63 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  f_reset_reqs$D_OUT)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_reset: Flushed", v__h4034, "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_reset: Flushed", v__h4034, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_rereq && NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    fa_req_ram_B tagCSet [0x%0x] word64_set [0x%0d]",
		 rg_addr[11:6],
		 rg_addr[11:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h24454 = $stime;
	  #0;
	end
    v__h24448 = v__h24454 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_near_mem_read_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h24448,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_near_mem_read_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h24448,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    ", { 1'd1, rg_pa, 72'hAAAAAAAAAAAAAAAAAA });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h24639 = $stime;
	  #0;
	end
    v__h24633 = v__h24639 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_near_mem_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h24633,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_near_mem_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h24633,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("Near_Mem_IO_Rsp { ", "read_not_write: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "ok: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  f_near_mem_io_rsps$D_OUT[64])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  !f_near_mem_io_rsps$D_OUT[64])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", f_near_mem_io_rsps$D_OUT[63:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  f_near_mem_io_rsps$D_OUT[64] &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h25041 = $stime;
	  #0;
	end
    v__h25035 = v__h25041 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  f_near_mem_io_rsps$D_OUT[64] &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h25035,
		   "D_MMU_Cache",
		   rg_addr,
		   f_near_mem_io_rsps$D_OUT[63:0]);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h25035,
		   "I_MMU_Cache",
		   rg_addr,
		   f_near_mem_io_rsps$D_OUT[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  !f_near_mem_io_rsps$D_OUT[64] &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h25148 = $stime;
	  #0;
	end
    v__h25142 = v__h25148 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_read_rsp &&
	  !f_near_mem_io_rsps$D_OUT[64] &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_near_mem_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		   v__h25142,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_io_near_mem_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		   v__h25142,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_maintain_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h25429 = $stime;
	  #0;
	end
    v__h25423 = v__h25429 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_maintain_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h25423,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_ld_val);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h25423,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_ld_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h26616 = $stime;
	  #0;
	end
    v__h26610 = v__h26616 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_near_mem_write_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h26610,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_near_mem_write_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h26610,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("Near_Mem_IO_Req { ", "read_not_write: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", value__h26676);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", io_req_wr_data_wstrb__h27631, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h26758 = $stime;
	  #0;
	end
    v__h26752 = v__h26758 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_near_mem_write_rsp",
		   v__h26752,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_io_near_mem_write_rsp",
		   v__h26752,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("Near_Mem_IO_Rsp { ", "read_not_write: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "ok: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  f_near_mem_io_rsps$D_OUT[64])
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  !f_near_mem_io_rsps$D_OUT[64])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", f_near_mem_io_rsps$D_OUT[63:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_near_mem_write_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h26938 = $stime;
	  #0;
	end
    v__h26932 = v__h26938 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_AMO_SC_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h26932,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_AMO_SC_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h26932,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    FAIL due to I/O address.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_SC_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_reset &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h3574 = $stime;
	  #0;
	end
    v__h3568 = v__h3574 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_reset &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_start_reset", v__h3568, "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_start_reset", v__h3568, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_37___d538)
	begin
	  v__h21379 = $stime;
	  #0;
	end
    v__h21373 = v__h21379 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_37___d538)
	if (dmem_not_imem)
	  $write("%0d: %s.rl_cache_refill_req_loop: mem req: ",
		 v__h21373,
		 "D_MMU_Cache");
	else
	  $write("%0d: %s.rl_cache_refill_req_loop: mem req: ",
		 v__h21373,
		 "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_37___d538)
	$write("AXI4_Lite_Rd_Addr { ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_37___d538)
	$write("'h%h", cline_fabric_addr__h21213);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_37___d538)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_37___d538)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_37___d538)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_37___d538)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_req_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_37___d538)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h4189 = $stime;
	  #0;
	end
    v__h4183 = v__h4189 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h",
		   v__h4183,
		   "D_MMU_Cache",
		   rg_addr);
	else
	  $display("%0d: %s: rl_probe_and_immed_rsp; eaddr %0h",
		   v__h4183,
		   "I_MMU_Cache",
		   rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("        eaddr = {CTag 0x%0h  CSet 0x%0h  Word64 0x%0h  Byte 0x%0h}",
		 rg_addr[63:12],
		 rg_addr[11:6],
		 rg_addr[5:3],
		 rg_addr[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("        CSet 0x%0x: (state, tag):", rg_addr[11:6]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(" (");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  ram_state_and_ctag_cset$DOB[52])
	$write("CTAG_CLEAN");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  !ram_state_and_ctag_cset$DOB[52])
	$write("CTAG_EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  ram_state_and_ctag_cset$DOB[52])
	$write(", 0x%0x", ram_state_and_ctag_cset$DOB[51:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  !ram_state_and_ctag_cset$DOB[52])
	$write(", --");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(")");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:6],
	       rg_addr[5:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(" 0x%0x", ram_word64_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("    TLB result: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("VM_Xlate_Result { ", "outcome: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("VM_XLATE_OK");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "pa: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 4'hA, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && soc_map$m_is_IO_addr &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    => IO_REQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op_9_EQ_0_0_OR_rg_op_9_EQ_2_1_AND_rg_amo_fu_ETC___d265)
	begin
	  v__h12697 = $stime;
	  #0;
	end
    v__h12691 = v__h12697 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op_9_EQ_0_0_OR_rg_op_9_EQ_2_1_AND_rg_amo_fu_ETC___d265)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h12691,
		   "D_MMU_Cache",
		   rg_addr,
		   word64__h5182,
		   64'd0);
	else
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h12691,
		   "I_MMU_Cache",
		   rg_addr,
		   word64__h5182,
		   64'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op == 2'd2 &&
	  rg_amo_funct7[6:2] == 5'b00010 &&
	  ram_state_and_ctag_cset$DOB[52] &&
	  ram_state_and_ctag_cset_b_read__4_BITS_51_TO_0_ETC___d69 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("        AMO LR: reserving PA 0x%0h", rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op_9_EQ_0_0_OR_rg_op_9_EQ_2_1_AND_rg_amo_fu_ETC___d265)
	$display("        Read-hit: addr 0x%0h word64 0x%0h",
		 rg_addr,
		 word64__h5182);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op_9_EQ_0_0_OR_rg_op_9_EQ_2_1_AND_rg_amo_fu_ETC___d278)
	$display("        Read Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op == 2'd2 &&
	  rg_amo_funct7_2_BITS_6_TO_2_3_EQ_0b10_4_AND_NO_ETC___d282)
	$display("        AMO LR: cache refill: cancelling LR/SC reservation for PA 0x%0h",
		 rg_lrsc_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op == 2'd1 &&
	  rg_addr_7_EQ_rg_lrsc_pa_3___d107 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("        ST: cancelling LR/SC reservation for PA", rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op == 2'd2 &&
	  rg_amo_funct7[6:2] == 5'b00011 &&
	  rg_lrsc_valid &&
	  !rg_lrsc_pa_3_EQ_rg_addr_7___d54 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("        AMO SC: fail: reserved addr 0x%0h, this address 0x%0h",
		 rg_lrsc_pa,
		 rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op == 2'd2 &&
	  rg_amo_funct7[6:2] == 5'b00011 &&
	  !rg_lrsc_valid &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("        AMO SC: fail due to invalid LR/SC reservation");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op == 2'd2 &&
	  rg_amo_funct7[6:2] == 5'b00011 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("        AMO SC result = %0d", lrsc_result__h13074);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_9_EQ_0_0_7_AND_NOT_rg_op_9_EQ_2_1_8__ETC___d472)
	$display("        Write-Cache-Hit: pa 0x%0h word64 0x%0h",
		 rg_addr,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_9_EQ_0_0_7_AND_NOT_rg_op_9_EQ_2_1_8__ETC___d472)
	$write("        New Word64_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_9_EQ_0_0_7_AND_NOT_rg_op_9_EQ_2_1_8__ETC___d472)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:6],
	       rg_addr[5:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_9_EQ_0_0_7_AND_NOT_rg_op_9_EQ_2_1_8__ETC___d472)
	$write(" 0x%0x",
	       IF_rg_f3_28_EQ_0b0_29_THEN_IF_rg_addr_7_BITS_2_ETC___d350);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_9_EQ_0_0_7_AND_NOT_rg_op_9_EQ_2_1_8__ETC___d472)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op != 2'd0 &&
	  (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	  (rg_op == 2'd1 ||
	   rg_op == 2'd2 && rg_amo_funct7[6:2] == 5'b00011) &&
	  NOT_rg_op_9_EQ_2_1_8_OR_NOT_rg_amo_funct7_2_BI_ETC___d474)
	$display("        Write-Cache-Miss: pa 0x%0h word64 0x%0h",
		 rg_addr,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_9_EQ_0_0_7_AND_NOT_rg_op_9_EQ_2_1_8__ETC___d481)
	begin
	  v__h19148 = $stime;
	  #0;
	end
    v__h19142 = v__h19148 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_9_EQ_0_0_7_AND_NOT_rg_op_9_EQ_2_1_8__ETC___d481)
	$display("%0d: ERROR: CreditCounter: overflow", v__h19142);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_9_EQ_0_0_7_AND_NOT_rg_op_9_EQ_2_1_8__ETC___d481)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_9_EQ_0_0_7_AND_NOT_rg_op_9_EQ_2_1_8__ETC___d487)
	$display("        Write-Hit/Miss: eaddr 0x%0h word64 0x%0h",
		 rg_addr,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_9_EQ_0_0_7_AND_NOT_rg_op_9_EQ_2_1_8__ETC___d487)
	$write("            To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_9_EQ_0_0_7_AND_NOT_rg_op_9_EQ_2_1_8__ETC___d487)
	$write("AXI4_Lite_Wr_Addr { ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_9_EQ_0_0_7_AND_NOT_rg_op_9_EQ_2_1_8__ETC___d487)
	$write("'h%h", mem_req_wr_addr_awaddr__h19473);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_9_EQ_0_0_7_AND_NOT_rg_op_9_EQ_2_1_8__ETC___d487)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_9_EQ_0_0_7_AND_NOT_rg_op_9_EQ_2_1_8__ETC___d487)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_9_EQ_0_0_7_AND_NOT_rg_op_9_EQ_2_1_8__ETC___d487)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_9_EQ_0_0_7_AND_NOT_rg_op_9_EQ_2_1_8__ETC___d487)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_9_EQ_0_0_7_AND_NOT_rg_op_9_EQ_2_1_8__ETC___d487)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_9_EQ_0_0_7_AND_NOT_rg_op_9_EQ_2_1_8__ETC___d487)
	$write("                       ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_9_EQ_0_0_7_AND_NOT_rg_op_9_EQ_2_1_8__ETC___d487)
	$write("AXI4_Lite_Wr_Data { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_9_EQ_0_0_7_AND_NOT_rg_op_9_EQ_2_1_8__ETC___d487)
	$write("'h%h", mem_req_wr_data_wdata__h18802);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_9_EQ_0_0_7_AND_NOT_rg_op_9_EQ_2_1_8__ETC___d487)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_9_EQ_0_0_7_AND_NOT_rg_op_9_EQ_2_1_8__ETC___d487)
	$write("'h%h", mem_req_wr_data_wstrb__h19561, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_9_EQ_0_0_7_AND_NOT_rg_op_9_EQ_2_1_8__ETC___d487)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  NOT_rg_op_9_EQ_0_0_7_AND_NOT_rg_op_9_EQ_2_1_8__ETC___d487)
	$display("    => rl_write_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op_9_EQ_2_1_AND_rg_amo_funct7_2_BITS_6_TO_2_ETC___d491)
	begin
	  v__h18581 = $stime;
	  #0;
	end
    v__h18575 = v__h18581 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op_9_EQ_2_1_AND_rg_amo_funct7_2_BITS_6_TO_2_ETC___d491)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h18575,
		   "D_MMU_Cache",
		   rg_addr,
		   64'd1,
		   64'd0);
	else
	  $display("%0d: %s.drive_mem_rsp: addr 0x%0h ld_val 0x%0h st_amo_val 0x%0h",
		   v__h18575,
		   "I_MMU_Cache",
		   rg_addr,
		   64'd1,
		   64'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op_9_EQ_2_1_AND_rg_amo_funct7_2_BITS_6_TO_2_ETC___d491)
	$display("        AMO SC: Fail response for addr 0x%0h", rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op != 2'd0 &&
	  (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_rg_op_9_EQ_1_7_15_AND_NOT_rg_op_9_EQ_2_1_8_ETC___d495)
	$display("        AMO Miss: -> CACHE_START_REFILL.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_rg_addr_7_8_04_AND_NO_ETC___d501)
	begin
	  v__h19875 = $stime;
	  #0;
	end
    v__h19869 = v__h19875 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_rg_addr_7_8_04_AND_NO_ETC___d501)
	$display("%0d: ERROR: CreditCounter: overflow", v__h19869);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_rg_addr_7_8_04_AND_NO_ETC___d501)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp && !soc_map$m_is_IO_addr &&
	  rg_op != 2'd0 &&
	  (rg_op != 2'd2 || rg_amo_funct7[6:2] != 5'b00010) &&
	  NOT_rg_op_9_EQ_1_7_15_AND_NOT_rg_op_9_EQ_2_1_8_ETC___d505)
	$display("        AMO_op: cancelling LR/SC reservation for PA",
		 rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_rg_addr_7_8_04_AND_NO_ETC___d512)
	$display("        AMO: addr 0x%0h amo_f7 0x%0h f3 %0d rs2_val 0x%0h",
		 rg_addr,
		 rg_amo_funct7,
		 rg_f3,
		 rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_rg_addr_7_8_04_AND_NO_ETC___d512)
	$display("          PA 0x%0h ", rg_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_rg_addr_7_8_04_AND_NO_ETC___d512)
	$display("          Cache word64 0x%0h, load-result 0x%0h",
		 word64__h5182,
		 word64__h5182);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_rg_addr_7_8_04_AND_NO_ETC___d512)
	$display("          0x%0h  op  0x%0h -> 0x%0h",
		 word64__h5182,
		 word64__h5182,
		 new_st_val__h5345);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_rg_addr_7_8_04_AND_NO_ETC___d512)
	$write("          New Word64_Set:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_rg_addr_7_8_04_AND_NO_ETC___d512)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:6],
	       rg_addr[5:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_rg_addr_7_8_04_AND_NO_ETC___d512)
	$write(" 0x%0x",
	       IF_rg_f3_28_EQ_0b0_29_THEN_IF_rg_addr_7_BITS_2_ETC___d424);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_rg_addr_7_8_04_AND_NO_ETC___d512)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_rg_addr_7_8_04_AND_NO_ETC___d512)
	$write("          To fabric: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_rg_addr_7_8_04_AND_NO_ETC___d512)
	$write("AXI4_Lite_Wr_Addr { ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_rg_addr_7_8_04_AND_NO_ETC___d512)
	$write("'h%h", mem_req_wr_addr_awaddr__h19473);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_rg_addr_7_8_04_AND_NO_ETC___d512)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_rg_addr_7_8_04_AND_NO_ETC___d512)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_rg_addr_7_8_04_AND_NO_ETC___d512)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_rg_addr_7_8_04_AND_NO_ETC___d512)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_rg_addr_7_8_04_AND_NO_ETC___d512)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_rg_addr_7_8_04_AND_NO_ETC___d512)
	$write("                     ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_rg_addr_7_8_04_AND_NO_ETC___d512)
	$write("AXI4_Lite_Wr_Data { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_rg_addr_7_8_04_AND_NO_ETC___d512)
	$write("'h%h", mem_req_wr_data_wdata__h19560);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_rg_addr_7_8_04_AND_NO_ETC___d512)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_rg_addr_7_8_04_AND_NO_ETC___d512)
	$write("'h%h", mem_req_wr_data_wstrb__h19561, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_probe_and_immed_rsp &&
	  NOT_soc_map_m_is_IO_addr_rg_addr_7_8_04_AND_NO_ETC___d512)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_37___d538)
	begin
	  v__h21529 = $stime;
	  #0;
	end
    v__h21523 = v__h21529 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_37___d538)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_cache_refill_rsps_loop:",
		   v__h21523,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_cache_refill_rsps_loop:",
		   v__h21523,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_37___d538)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_37___d538)
	$write("AXI4_Lite_Rd_Data { ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_37___d538 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0)
	$write("AXI4_LITE_OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_37___d538 &&
	  master_xactor_rg_rd_data[65:64] == 2'd1)
	$write("AXI4_LITE_EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_37___d538 &&
	  master_xactor_rg_rd_data[65:64] == 2'd2)
	$write("AXI4_LITE_SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_37___d538 &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  master_xactor_rg_rd_data[65:64] != 2'd1 &&
	  master_xactor_rg_rd_data[65:64] != 2'd2)
	$write("AXI4_LITE_DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_37___d538)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_37___d538)
	$write("'h%h", master_xactor_rg_rd_data[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_37___d538)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_37___d538)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_37___d538)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h21775 = $stime;
	  #0;
	end
    v__h21769 = v__h21775 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d",
		   v__h21769,
		   "D_MMU_Cache",
		   access_exc_code__h3109);
	else
	  $display("%0d: %s.rl_cache_refill_rsps_loop: FABRIC_RSP_ERR: raising access exception %0d",
		   v__h21769,
		   "I_MMU_Cache",
		   access_exc_code__h3109);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  rg_word64_set_in_cache[2:0] == 3'd7 &&
	  (master_xactor_rg_rd_data[65:64] != 2'd0 ||
	   rg_error_during_refill) &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    => MODULE_EXCEPTION_RSP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  rg_word64_set_in_cache[2:0] == 3'd7 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  !rg_error_during_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    => CACHE_REREQ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_37___d538)
	$display("        Updating Cache [0x%0x] (Word64_Set %0d) old => new",
		 rg_word64_set_in_cache,
		 rg_word64_set_in_cache[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_37___d538)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:6],
	       rg_word64_set_in_cache[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_37___d538)
	$write(" 0x%0x", ram_word64_set$DOB);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_37___d538)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_37___d538)
	$write("        CSet 0x%0x, Word64 0x%0x: ",
	       rg_addr[11:6],
	       rg_word64_set_in_cache[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_37___d538)
	$write(" 0x%0x", master_xactor_rg_rd_data[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_cache_refill_rsps_loop &&
	  NOT_cfg_verbosity_read__0_ULE_2_37___d538)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h23549 = $stime;
	  #0;
	end
    v__h23543 = v__h23549 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_read_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h23543,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_read_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h23543,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    ", { rg_pa, 3'd0 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h23715 = $stime;
	  #0;
	end
    v__h23709 = v__h23715 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h23709,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h23709,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("AXI4_Lite_Rd_Data { ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0)
	$write("AXI4_LITE_OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  master_xactor_rg_rd_data[65:64] == 2'd1)
	$write("AXI4_LITE_EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  master_xactor_rg_rd_data[65:64] == 2'd2)
	$write("AXI4_LITE_SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  master_xactor_rg_rd_data[65:64] != 2'd1 &&
	  master_xactor_rg_rd_data[65:64] != 2'd2)
	$write("AXI4_LITE_DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", master_xactor_rg_rd_data[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h24114 = $stime;
	  #0;
	end
    v__h24108 = v__h24114 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h24108,
		   "D_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0]);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h24108,
		   "I_MMU_Cache",
		   rg_addr,
		   master_xactor_rg_rd_data[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h24221 = $stime;
	  #0;
	end
    v__h24215 = v__h24221 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_read_rsp &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		   v__h24215,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_io_read_rsp: FABRIC_RSP_ERR: raising trap LOAD_ACCESS_FAULT",
		   v__h24215,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && ctr_wr_rsps_pending_crg == 4'd15)
	begin
	  v__h25951 = $stime;
	  #0;
	end
    v__h25945 = v__h25951 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && ctr_wr_rsps_pending_crg == 4'd15)
	$display("%0d: ERROR: CreditCounter: overflow", v__h25945);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req && ctr_wr_rsps_pending_crg == 4'd15)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h26096 = $stime;
	  #0;
	end
    v__h26090 = v__h26096 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_write_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h26090,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_write_req; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h26090,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("AXI4_Lite_Wr_Addr { ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", io_req_wr_addr_awaddr__h27471);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("AXI4_Lite_Wr_Data { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", value__h26676);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", io_req_wr_data_wstrb__h27631, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_write_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h27144 = $stime;
	  #0;
	end
    v__h27138 = v__h27144 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_AMO_op_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h27138,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_AMO_op_req; f3 0x%0h vaddr %0h  paddr %0h",
		   v__h27138,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_op_req &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    ", { rg_pa, 3'd0 });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h27276 = $stime;
	  #0;
	end
    v__h27270 = v__h27276 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_AMO_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h27270,
		   "D_MMU_Cache",
		   rg_addr,
		   rg_pa);
	else
	  $display("%0d: %s.rl_io_AMO_read_rsp: vaddr 0x%0h  paddr 0x%0h",
		   v__h27270,
		   "I_MMU_Cache",
		   rg_addr,
		   rg_pa);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("AXI4_Lite_Rd_Data { ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  master_xactor_rg_rd_data[65:64] == 2'd0)
	$write("AXI4_LITE_OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  master_xactor_rg_rd_data[65:64] == 2'd1)
	$write("AXI4_LITE_EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  master_xactor_rg_rd_data[65:64] == 2'd2)
	$write("AXI4_LITE_SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  master_xactor_rg_rd_data[65:64] != 2'd1 &&
	  master_xactor_rg_rd_data[65:64] != 2'd2)
	$write("AXI4_LITE_DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", master_xactor_rg_rd_data[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  ctr_wr_rsps_pending_crg == 4'd15)
	begin
	  v__h29056 = $stime;
	  #0;
	end
    v__h29050 = v__h29056 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  ctr_wr_rsps_pending_crg == 4'd15)
	$display("%0d: ERROR: CreditCounter: overflow", v__h29050);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  ctr_wr_rsps_pending_crg == 4'd15)
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h29406 = $stime;
	  #0;
	end
    v__h29400 = v__h29406 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h29400,
		   "D_MMU_Cache",
		   rg_addr,
		   new_ld_val__h27403);
	else
	  $display("%0d: %s.drive_IO_read_rsp: addr 0x%0h ld_val 0x%0h",
		   v__h29400,
		   "I_MMU_Cache",
		   rg_addr,
		   new_ld_val__h27403);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h29522 = $stime;
	  #0;
	end
    v__h29516 = v__h29522 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s: rl_io_AMO_read_rsp; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h29516,
		   "D_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
	else
	  $display("%0d: %s: rl_io_AMO_read_rsp; f3 0x%0h  vaddr %0h  paddr %0h  word64 0x%0h",
		   v__h29516,
		   "I_MMU_Cache",
		   rg_f3,
		   rg_addr,
		   rg_pa,
		   rg_st_amo_val);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("AXI4_Lite_Wr_Addr { ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", io_req_wr_addr_awaddr__h27471);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("AXI4_Lite_Wr_Data { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", io_req_wr_data_wdata__h27630);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", io_req_wr_data_wstrb__h27631, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    => rl_ST_AMO_response");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h27557 = $stime;
	  #0;
	end
    v__h27551 = v__h27557 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_io_AMO_read_rsp &&
	  master_xactor_rg_rd_data[65:64] != 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_io_AMO_read_rsp: FABRIC_RSP_ERR: raising trap STORE_AMO_ACCESS_FAULT",
		   v__h27551,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_io_AMO_read_rsp: FABRIC_RSP_ERR: raising trap STORE_AMO_ACCESS_FAULT",
		   v__h27551,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h30534 = $stime;
	  #0;
	end
    v__h30528 = v__h30534 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $write("%0d: %s.req: op:", v__h30528, "D_MMU_Cache");
	else
	  $write("%0d: %s.req: op:", v__h30528, "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d12 && req_op == 2'd0)
	$write("CACHE_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d12 && req_op == 2'd1)
	$write("CACHE_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  req_op != 2'd0 &&
	  req_op != 2'd1)
	$write("CACHE_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(" f3:%0d addr:0x%0h st_value:0x%0h priv:",
	       req_f3,
	       req_addr,
	       req_st_value);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  req_priv == 2'b0)
	$write("U");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  req_priv == 2'b01)
	$write("S");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  req_priv == 2'b11)
	$write("M");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d12 &&
	  req_priv != 2'b0 &&
	  req_priv != 2'b01 &&
	  req_priv != 2'b11)
	$write("RESERVED");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(" sstatus_SUM:%0d mstatus_MXR:%0d satp:0x%0h",
	       req_sstatus_SUM,
	       req_mstatus_MXR,
	       req_satp,
	       "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req && NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    amo_funct7 = 0x%0h", req_amo_funct7);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_req &&
	  req_f3_BITS_1_TO_0_03_EQ_0b0_04_OR_req_f3_BITS_ETC___d933 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    fa_req_ram_B tagCSet [0x%0x] word64_set [0x%0d]",
		 req_addr[11:6],
		 req_addr[11:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h21159 = $stime;
	  #0;
	end
    v__h21153 = v__h21159 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $write("%0d: %s.rl_start_cache_refill: mem req: ",
		 v__h21153,
		 "D_MMU_Cache");
	else
	  $write("%0d: %s.rl_start_cache_refill: mem req: ",
		 v__h21153,
		 "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("AXI4_Lite_Rd_Addr { ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", cline_addr__h21212);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 3'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 1'h0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start_cache_refill &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$display("    Victim way is %0d; => CACHE_REFILL", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	begin
	  v__h30145 = $stime;
	  #0;
	end
    v__h30139 = v__h30145 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	if (dmem_not_imem)
	  $write("%0d: %s.rl_discard_write_rsp: pending %0d ",
		 v__h30139,
		 "D_MMU_Cache",
		 $unsigned(b__h20503));
	else
	  $write("%0d: %s.rl_discard_write_rsp: pending %0d ",
		 v__h30139,
		 "I_MMU_Cache",
		 $unsigned(b__h20503));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("AXI4_Lite_Wr_Resp { ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("AXI4_LITE_OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd0 &&
	  NOT_cfg_verbosity_read__0_ULE_1_1___d12)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	begin
	  v__h30106 = $stime;
	  #0;
	end
    v__h30100 = v__h30106 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	if (dmem_not_imem)
	  $display("%0d: %s.rl_discard_write_rsp: fabric response error: exit",
		   v__h30100,
		   "D_MMU_Cache");
	else
	  $display("%0d: %s.rl_discard_write_rsp: fabric response error: exit",
		   v__h30100,
		   "I_MMU_Cache");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	$write("AXI4_Lite_Wr_Resp { ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd1)
	$write("AXI4_LITE_EXOKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp == 2'd2)
	$write("AXI4_LITE_SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0 &&
	  master_xactor_rg_wr_resp != 2'd1 &&
	  master_xactor_rg_wr_resp != 2'd2)
	$write("AXI4_LITE_DECERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_discard_write_rsp &&
	  master_xactor_rg_wr_resp != 2'd0)
	$finish(32'd1);
  end
  // synopsys translate_on
endmodule  // mkMMU_Cache

